[![Build Status](https://camo.githubusercontent.com/1dbd52703a90ab90f55c03c17fb8a16eed30345c81bb5cfcb1c3072bc9ed3c7b/68747470733a2f2f7472617669732d63692e6f72672f7069657272652d726f75616e65742f6474772e7376673f6272616e63683d6d6173746572)](https://travis-ci.org/pierre-rouanet/dtw)

Dynamic time warping is used as a similarity measured between temporal sequences. This package provides two implementations:

-   the basic version (see [here](https://en.wikipedia.org/wiki/Dynamic_time_warping)) for the algorithm
-   an accelerated version which relies on scipy cdist (see [https://github.com/pierre-rouanet/dtw/pull/8](https://github.com/pierre-rouanet/dtw/pull/8) for detail)

import numpy as np

\# We define two sequences x, y as numpy array
\# where y is actually a sub-sequence from x
x \= np.array(\[2, 0, 1, 1, 2, 4, 2, 1, 2, 0\]).reshape(\-1, 1)
y \= np.array(\[1, 1, 2, 4, 2, 1, 2, 0\]).reshape(\-1, 1)

from dtw import dtw

manhattan\_distance \= lambda x, y: np.abs(x \- y)

d, cost\_matrix, acc\_cost\_matrix, path \= dtw(x, y, dist\=manhattan\_distance)

print(d)
\>>\> 2.0 \# Only the cost for the insertions is kept

\# You can also visualise the accumulated cost and the shortest path
import matplotlib.pyplot as plt

plt.imshow(acc\_cost\_matrix.T, origin\='lower', cmap\='gray', interpolation\='nearest')
plt.plot(path\[0\], path\[1\], 'w')
plt.show()

Result of the accumulated cost matrix and the shortest path (in white) found: [![Acc cost matrix and shortest path](https://github.com/pierre-rouanet/dtw/raw/master/acc.png)](https://github.com/pierre-rouanet/dtw/blob/master/acc.png)

## Other examples are available as notebook

-   [the code above as a notebook](https://github.com/pierre-rouanet/dtw/blob/master/examples/simple%20example.ipynb)
-   [a sound comparison based on DTW + MFCC](https://github.com/pierre-rouanet/dtw/blob/master/examples/MFCC%20%2B%20DTW.ipynb)
-   [simple speech recognition](https://github.com/pierre-rouanet/dtw/blob/master/examples/speech-recognition.ipynb)

## Installation

```
python -m pip install dtw
```

It is tested on Python 2.7, 3.4, 3.5 and 3.6. It requires numpy and scipy.