[
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Set",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Set",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Set",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Set",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Set",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "MutableSequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "MutableSequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "MutableSequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "MutableSequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Set",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Set",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Set",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Set",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Set",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "MutableSequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "MutableSequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "MutableSequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "MutableSequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Set",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Set",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Set",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Set",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Set",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "MutableSequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "MutableSequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "MutableSequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "MutableSequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Set",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Set",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Set",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Set",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Set",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "MutableSequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "MutableSequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "MutableSequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "MutableSequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "BTNode",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "BTNode",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "BTNode",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "BTNode",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "BTNode",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "BTNode",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "T",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "T",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "T",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "T",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "T",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "T",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "T",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "T",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "T",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "T",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "T",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "T",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "T",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "T",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "T",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "BTNode",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "BTNode",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "BTNode",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "BTNode",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "BTNode",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "BTNode",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "T",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "T",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "T",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "T",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "T",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "T",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "T",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "T",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "T",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "T",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "T",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "T",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "T",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "T",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "T",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "BTNode",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "BTNode",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "BTNode",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "BTNode",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "BTNode",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "BTNode",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "T",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "T",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "T",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "T",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "T",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "T",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "T",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "T",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "T",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "T",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "T",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "T",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "T",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "T",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "T",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "BTNode",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "BTNode",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "BTNode",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "BTNode",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "BTNode",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "BTNode",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "T",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "T",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "T",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "T",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "T",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "T",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "T",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "T",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "T",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "T",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "T",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "T",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "T",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "T",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "T",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "collections",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "collections",
        "description": "collections",
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "itertools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "itertools",
        "description": "itertools",
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "accumulate",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "accumulate",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "accumulate",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "chain",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "accumulate",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "accumulate",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "accumulate",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "chain",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "accumulate",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "accumulate",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "accumulate",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "chain",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "accumulate",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "accumulate",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "accumulate",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "chain",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "inf",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "inf",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "inf",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "inf",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "inf",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "inf",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "inf",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "inf",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "random",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "choices",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "random",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "random",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "choices",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "random",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "statistics",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "statistics",
        "description": "statistics",
        "detail": "statistics",
        "documentation": {}
    },
    {
        "label": "Rational",
        "importPath": "numbers",
        "description": "numbers",
        "isExtraImport": true,
        "detail": "numbers",
        "documentation": {}
    },
    {
        "label": "Rational",
        "importPath": "numbers",
        "description": "numbers",
        "isExtraImport": true,
        "detail": "numbers",
        "documentation": {}
    },
    {
        "label": "Real",
        "importPath": "numbers",
        "description": "numbers",
        "isExtraImport": true,
        "detail": "numbers",
        "documentation": {}
    },
    {
        "label": "Real",
        "importPath": "numbers",
        "description": "numbers",
        "isExtraImport": true,
        "detail": "numbers",
        "documentation": {}
    },
    {
        "label": "Rational",
        "importPath": "numbers",
        "description": "numbers",
        "isExtraImport": true,
        "detail": "numbers",
        "documentation": {}
    },
    {
        "label": "Rational",
        "importPath": "numbers",
        "description": "numbers",
        "isExtraImport": true,
        "detail": "numbers",
        "documentation": {}
    },
    {
        "label": "Real",
        "importPath": "numbers",
        "description": "numbers",
        "isExtraImport": true,
        "detail": "numbers",
        "documentation": {}
    },
    {
        "label": "Real",
        "importPath": "numbers",
        "description": "numbers",
        "isExtraImport": true,
        "detail": "numbers",
        "documentation": {}
    },
    {
        "label": "Rational",
        "importPath": "numbers",
        "description": "numbers",
        "isExtraImport": true,
        "detail": "numbers",
        "documentation": {}
    },
    {
        "label": "Rational",
        "importPath": "numbers",
        "description": "numbers",
        "isExtraImport": true,
        "detail": "numbers",
        "documentation": {}
    },
    {
        "label": "Real",
        "importPath": "numbers",
        "description": "numbers",
        "isExtraImport": true,
        "detail": "numbers",
        "documentation": {}
    },
    {
        "label": "Real",
        "importPath": "numbers",
        "description": "numbers",
        "isExtraImport": true,
        "detail": "numbers",
        "documentation": {}
    },
    {
        "label": "Rational",
        "importPath": "numbers",
        "description": "numbers",
        "isExtraImport": true,
        "detail": "numbers",
        "documentation": {}
    },
    {
        "label": "Rational",
        "importPath": "numbers",
        "description": "numbers",
        "isExtraImport": true,
        "detail": "numbers",
        "documentation": {}
    },
    {
        "label": "Real",
        "importPath": "numbers",
        "description": "numbers",
        "isExtraImport": true,
        "detail": "numbers",
        "documentation": {}
    },
    {
        "label": "Real",
        "importPath": "numbers",
        "description": "numbers",
        "isExtraImport": true,
        "detail": "numbers",
        "documentation": {}
    },
    {
        "label": "heapq",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "heapq",
        "description": "heapq",
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "partition",
        "importPath": "algorithms.partition",
        "description": "algorithms.partition",
        "isExtraImport": true,
        "detail": "algorithms.partition",
        "documentation": {}
    },
    {
        "label": "partition",
        "importPath": "algorithms.partition",
        "description": "algorithms.partition",
        "isExtraImport": true,
        "detail": "algorithms.partition",
        "documentation": {}
    },
    {
        "label": "partition",
        "importPath": "algorithms.partition",
        "description": "algorithms.partition",
        "isExtraImport": true,
        "detail": "algorithms.partition",
        "documentation": {}
    },
    {
        "label": "partition",
        "importPath": "algorithms.partition",
        "description": "algorithms.partition",
        "isExtraImport": true,
        "detail": "algorithms.partition",
        "documentation": {}
    },
    {
        "label": "partition",
        "importPath": "algorithms.partition",
        "description": "algorithms.partition",
        "isExtraImport": true,
        "detail": "algorithms.partition",
        "documentation": {}
    },
    {
        "label": "partition",
        "importPath": "algorithms.partition",
        "description": "algorithms.partition",
        "isExtraImport": true,
        "detail": "algorithms.partition",
        "documentation": {}
    },
    {
        "label": "partition",
        "importPath": "algorithms.partition",
        "description": "algorithms.partition",
        "isExtraImport": true,
        "detail": "algorithms.partition",
        "documentation": {}
    },
    {
        "label": "partition",
        "importPath": "algorithms.partition",
        "description": "algorithms.partition",
        "isExtraImport": true,
        "detail": "algorithms.partition",
        "documentation": {}
    },
    {
        "label": "partition",
        "importPath": "algorithms.partition",
        "description": "algorithms.partition",
        "isExtraImport": true,
        "detail": "algorithms.partition",
        "documentation": {}
    },
    {
        "label": "partition",
        "importPath": "algorithms.partition",
        "description": "algorithms.partition",
        "isExtraImport": true,
        "detail": "algorithms.partition",
        "documentation": {}
    },
    {
        "label": "partition",
        "importPath": "algorithms.partition",
        "description": "algorithms.partition",
        "isExtraImport": true,
        "detail": "algorithms.partition",
        "documentation": {}
    },
    {
        "label": "partition",
        "importPath": "algorithms.partition",
        "description": "algorithms.partition",
        "isExtraImport": true,
        "detail": "algorithms.partition",
        "documentation": {}
    },
    {
        "label": "partition",
        "importPath": "algorithms.partition",
        "description": "algorithms.partition",
        "isExtraImport": true,
        "detail": "algorithms.partition",
        "documentation": {}
    },
    {
        "label": "partition",
        "importPath": "algorithms.partition",
        "description": "algorithms.partition",
        "isExtraImport": true,
        "detail": "algorithms.partition",
        "documentation": {}
    },
    {
        "label": "partition",
        "importPath": "algorithms.partition",
        "description": "algorithms.partition",
        "isExtraImport": true,
        "detail": "algorithms.partition",
        "documentation": {}
    },
    {
        "label": "partition",
        "importPath": "algorithms.partition",
        "description": "algorithms.partition",
        "isExtraImport": true,
        "detail": "algorithms.partition",
        "documentation": {}
    },
    {
        "label": "unittest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "unittest",
        "description": "unittest",
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "Employee",
        "importPath": "employees",
        "description": "employees",
        "isExtraImport": true,
        "detail": "employees",
        "documentation": {}
    },
    {
        "label": "Job",
        "importPath": "employees",
        "description": "employees",
        "isExtraImport": true,
        "detail": "employees",
        "documentation": {}
    },
    {
        "label": "sort_employees_by_salary",
        "importPath": "employees",
        "description": "employees",
        "isExtraImport": true,
        "detail": "employees",
        "documentation": {}
    },
    {
        "label": "Employee",
        "importPath": "employees",
        "description": "employees",
        "isExtraImport": true,
        "detail": "employees",
        "documentation": {}
    },
    {
        "label": "Job",
        "importPath": "employees",
        "description": "employees",
        "isExtraImport": true,
        "detail": "employees",
        "documentation": {}
    },
    {
        "label": "sort_employees_by_salary",
        "importPath": "employees",
        "description": "employees",
        "isExtraImport": true,
        "detail": "employees",
        "documentation": {}
    },
    {
        "label": "Employee",
        "importPath": "employees",
        "description": "employees",
        "isExtraImport": true,
        "detail": "employees",
        "documentation": {}
    },
    {
        "label": "Job",
        "importPath": "employees",
        "description": "employees",
        "isExtraImport": true,
        "detail": "employees",
        "documentation": {}
    },
    {
        "label": "sort_employees_by_salary",
        "importPath": "employees",
        "description": "employees",
        "isExtraImport": true,
        "detail": "employees",
        "documentation": {}
    },
    {
        "label": "Employee",
        "importPath": "employees",
        "description": "employees",
        "isExtraImport": true,
        "detail": "employees",
        "documentation": {}
    },
    {
        "label": "Job",
        "importPath": "employees",
        "description": "employees",
        "isExtraImport": true,
        "detail": "employees",
        "documentation": {}
    },
    {
        "label": "sort_employees_by_salary",
        "importPath": "employees",
        "description": "employees",
        "isExtraImport": true,
        "detail": "employees",
        "documentation": {}
    },
    {
        "label": "Employee",
        "importPath": "employees",
        "description": "employees",
        "isExtraImport": true,
        "detail": "employees",
        "documentation": {}
    },
    {
        "label": "Job",
        "importPath": "employees",
        "description": "employees",
        "isExtraImport": true,
        "detail": "employees",
        "documentation": {}
    },
    {
        "label": "sort_employees_by_salary",
        "importPath": "employees",
        "description": "employees",
        "isExtraImport": true,
        "detail": "employees",
        "documentation": {}
    },
    {
        "label": "Employee",
        "importPath": "employees",
        "description": "employees",
        "isExtraImport": true,
        "detail": "employees",
        "documentation": {}
    },
    {
        "label": "Job",
        "importPath": "employees",
        "description": "employees",
        "isExtraImport": true,
        "detail": "employees",
        "documentation": {}
    },
    {
        "label": "sort_employees_by_salary",
        "importPath": "employees",
        "description": "employees",
        "isExtraImport": true,
        "detail": "employees",
        "documentation": {}
    },
    {
        "label": "Employee",
        "importPath": "employees",
        "description": "employees",
        "isExtraImport": true,
        "detail": "employees",
        "documentation": {}
    },
    {
        "label": "Job",
        "importPath": "employees",
        "description": "employees",
        "isExtraImport": true,
        "detail": "employees",
        "documentation": {}
    },
    {
        "label": "sort_employees_by_salary",
        "importPath": "employees",
        "description": "employees",
        "isExtraImport": true,
        "detail": "employees",
        "documentation": {}
    },
    {
        "label": "Employee",
        "importPath": "employees",
        "description": "employees",
        "isExtraImport": true,
        "detail": "employees",
        "documentation": {}
    },
    {
        "label": "Job",
        "importPath": "employees",
        "description": "employees",
        "isExtraImport": true,
        "detail": "employees",
        "documentation": {}
    },
    {
        "label": "sort_employees_by_salary",
        "importPath": "employees",
        "description": "employees",
        "isExtraImport": true,
        "detail": "employees",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "MinStack",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "MyQueue",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "NumArray",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "MovingAverage",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "RandomizedSet",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Trie",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "WordDictionary",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "MinStack",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "MyQueue",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "NumArray",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "MovingAverage",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "RandomizedSet",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Trie",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "WordDictionary",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "queue",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "queue",
        "description": "queue",
        "detail": "queue",
        "documentation": {}
    },
    {
        "label": "Queue",
        "importPath": "queue",
        "description": "queue",
        "isExtraImport": true,
        "detail": "queue",
        "documentation": {}
    },
    {
        "label": "Queue",
        "importPath": "queue",
        "description": "queue",
        "isExtraImport": true,
        "detail": "queue",
        "documentation": {}
    },
    {
        "label": "Queue",
        "importPath": "queue",
        "description": "queue",
        "isExtraImport": true,
        "detail": "queue",
        "documentation": {}
    },
    {
        "label": "Queue",
        "importPath": "queue",
        "description": "queue",
        "isExtraImport": true,
        "detail": "queue",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdin",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdout",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdin",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdout",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdin",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdout",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "maxsize",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdin",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdout",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdin",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdout",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdin",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdout",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "maxsize",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "operator",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "operator",
        "description": "operator",
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "itemgetter",
        "importPath": "operator",
        "description": "operator",
        "isExtraImport": true,
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "itemgetter",
        "importPath": "operator",
        "description": "operator",
        "isExtraImport": true,
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "textwrap",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "textwrap",
        "description": "textwrap",
        "detail": "textwrap",
        "documentation": {}
    },
    {
        "label": "Room",
        "importPath": "room",
        "description": "room",
        "isExtraImport": true,
        "detail": "room",
        "documentation": {}
    },
    {
        "label": "Room",
        "importPath": "room",
        "description": "room",
        "isExtraImport": true,
        "detail": "room",
        "documentation": {}
    },
    {
        "label": "Room",
        "importPath": "room",
        "description": "room",
        "isExtraImport": true,
        "detail": "room",
        "documentation": {}
    },
    {
        "label": "Room",
        "importPath": "room",
        "description": "room",
        "isExtraImport": true,
        "detail": "room",
        "documentation": {}
    },
    {
        "label": "Player",
        "importPath": "player",
        "description": "player",
        "isExtraImport": true,
        "detail": "player",
        "documentation": {}
    },
    {
        "label": "Player",
        "importPath": "player",
        "description": "player",
        "isExtraImport": true,
        "detail": "player",
        "documentation": {}
    },
    {
        "label": "World",
        "importPath": "world",
        "description": "world",
        "isExtraImport": true,
        "detail": "world",
        "documentation": {}
    },
    {
        "label": "World",
        "importPath": "world",
        "description": "world",
        "isExtraImport": true,
        "detail": "world",
        "documentation": {}
    },
    {
        "label": "earliest_ancestor",
        "importPath": "ancestor",
        "description": "ancestor",
        "isExtraImport": true,
        "detail": "ancestor",
        "documentation": {}
    },
    {
        "label": "earliest_ancestor",
        "importPath": "ancestor",
        "description": "ancestor",
        "isExtraImport": true,
        "detail": "ancestor",
        "documentation": {}
    },
    {
        "label": "Stack",
        "importPath": "util",
        "description": "util",
        "isExtraImport": true,
        "detail": "util",
        "documentation": {}
    },
    {
        "label": "Queue",
        "importPath": "util",
        "description": "util",
        "isExtraImport": true,
        "detail": "util",
        "documentation": {}
    },
    {
        "label": "Stack",
        "importPath": "util",
        "description": "util",
        "isExtraImport": true,
        "detail": "util",
        "documentation": {}
    },
    {
        "label": "Queue",
        "importPath": "util",
        "description": "util",
        "isExtraImport": true,
        "detail": "util",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "hashlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hashlib",
        "description": "hashlib",
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "call",
        "importPath": "subprocess",
        "description": "subprocess",
        "isExtraImport": true,
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "call",
        "importPath": "subprocess",
        "description": "subprocess",
        "isExtraImport": true,
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "ThreadPoolExecutor",
        "importPath": "concurrent.futures",
        "description": "concurrent.futures",
        "isExtraImport": true,
        "detail": "concurrent.futures",
        "documentation": {}
    },
    {
        "label": "ThreadPoolExecutor",
        "importPath": "concurrent.futures",
        "description": "concurrent.futures",
        "isExtraImport": true,
        "detail": "concurrent.futures",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "functools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "functools",
        "description": "functools",
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "lru_cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "lru_cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "BigO",
        "importPath": "bigO",
        "description": "bigO",
        "isExtraImport": true,
        "detail": "bigO",
        "documentation": {}
    },
    {
        "label": "algorithm",
        "importPath": "bigO",
        "description": "bigO",
        "isExtraImport": true,
        "detail": "bigO",
        "documentation": {}
    },
    {
        "label": "BigO",
        "importPath": "bigO",
        "description": "bigO",
        "isExtraImport": true,
        "detail": "bigO",
        "documentation": {}
    },
    {
        "label": "algorithm",
        "importPath": "bigO",
        "description": "bigO",
        "isExtraImport": true,
        "detail": "bigO",
        "documentation": {}
    },
    {
        "label": "BigO",
        "importPath": "bigO",
        "description": "bigO",
        "isExtraImport": true,
        "detail": "bigO",
        "documentation": {}
    },
    {
        "label": "algorithm",
        "importPath": "bigO",
        "description": "bigO",
        "isExtraImport": true,
        "detail": "bigO",
        "documentation": {}
    },
    {
        "label": "BigO",
        "importPath": "bigO",
        "description": "bigO",
        "isExtraImport": true,
        "detail": "bigO",
        "documentation": {}
    },
    {
        "label": "algorithm",
        "importPath": "bigO",
        "description": "bigO",
        "isExtraImport": true,
        "detail": "bigO",
        "documentation": {}
    },
    {
        "label": "BigO",
        "importPath": "bigO",
        "description": "bigO",
        "isExtraImport": true,
        "detail": "bigO",
        "documentation": {}
    },
    {
        "label": "algorithm",
        "importPath": "bigO",
        "description": "bigO",
        "isExtraImport": true,
        "detail": "bigO",
        "documentation": {}
    },
    {
        "label": "BigO",
        "importPath": "bigO",
        "description": "bigO",
        "isExtraImport": true,
        "detail": "bigO",
        "documentation": {}
    },
    {
        "label": "algorithm",
        "importPath": "bigO",
        "description": "bigO",
        "isExtraImport": true,
        "detail": "bigO",
        "documentation": {}
    },
    {
        "label": "backpedal",
        "kind": 2,
        "importPath": ".gitbook.assets.backpedal (1)",
        "description": ".gitbook.assets.backpedal (1)",
        "peekOfCode": "def backpedal(goal: Node, parents: Mapping[Node, Optional[Node]]) -> list[Node]:\n    \"\"\"With a dict of parent->child, walk backwards from the goal as far as possible and return the path.\"\"\"\n    back_path = []\n    node = goal\n    while node is not None:\n        back_path.append(node)\n        node = parents[node]\n    return back_path[::-1]",
        "detail": ".gitbook.assets.backpedal (1)",
        "documentation": {}
    },
    {
        "label": "backpedal",
        "kind": 2,
        "importPath": ".gitbook.assets.backpedal",
        "description": ".gitbook.assets.backpedal",
        "peekOfCode": "def backpedal(goal: Node, parents: Mapping[Node, Optional[Node]]) -> list[Node]:\n    \"\"\"With a dict of parent->child, walk backwards from the goal as far as possible and return the path.\"\"\"\n    back_path = []\n    node = goal\n    while node is not None:\n        back_path.append(node)\n        node = parents[node]\n    return back_path[::-1]",
        "detail": ".gitbook.assets.backpedal",
        "documentation": {}
    },
    {
        "label": "bfs_paths_dict",
        "kind": 2,
        "importPath": ".gitbook.assets.bfs_paths_dict (1)",
        "description": ".gitbook.assets.bfs_paths_dict (1)",
        "peekOfCode": "def bfs_paths_dict(graph: Mapping[Node, set[Node]], start: Node, goal: Node) -> Iterable[list[Node]]:\n    \"\"\"Find all the paths from start to goal using BFS on a dict.\"\"\"\n    to_visit = deque([[start]])\n    while to_visit:\n        path = to_visit.popleft()\n        node = path[-1]\n        if node == goal:\n            yield path\n        else:\n            for next_node in graph[node].difference(path):",
        "detail": ".gitbook.assets.bfs_paths_dict (1)",
        "documentation": {}
    },
    {
        "label": "bfs_paths_dict",
        "kind": 2,
        "importPath": ".gitbook.assets.bfs_paths_dict (2)",
        "description": ".gitbook.assets.bfs_paths_dict (2)",
        "peekOfCode": "def bfs_paths_dict(graph: Mapping[Node, set[Node]], start: Node, goal: Node) -> Iterable[list[Node]]:\n    \"\"\"Find all the paths from start to goal using BFS on a dict.\"\"\"\n    to_visit = deque([[start]])\n    while to_visit:\n        path = to_visit.popleft()\n        node = path[-1]\n        if node == goal:\n            yield path\n        else:\n            for next_node in graph[node].difference(path):",
        "detail": ".gitbook.assets.bfs_paths_dict (2)",
        "documentation": {}
    },
    {
        "label": "bfs_paths_dict",
        "kind": 2,
        "importPath": ".gitbook.assets.bfs_paths_dict",
        "description": ".gitbook.assets.bfs_paths_dict",
        "peekOfCode": "def bfs_paths_dict(graph: Mapping[Node, set[Node]], start: Node, goal: Node) -> Iterable[list[Node]]:\n    \"\"\"Find all the paths from start to goal using BFS on a dict.\"\"\"\n    to_visit = deque([[start]])\n    while to_visit:\n        path = to_visit.popleft()\n        node = path[-1]\n        if node == goal:\n            yield path\n        else:\n            for next_node in graph[node].difference(path):",
        "detail": ".gitbook.assets.bfs_paths_dict",
        "documentation": {}
    },
    {
        "label": "bfs_search_dict",
        "kind": 2,
        "importPath": ".gitbook.assets.bfs_search_dict (1)",
        "description": ".gitbook.assets.bfs_search_dict (1)",
        "peekOfCode": "def bfs_search_dict(graph: Mapping[Node, Iterable[Node]], start: Node, predicate: Callable[[Node], bool]) -> bool:\n    \"\"\"Find the closest node to start that matches the predicate using breadth first search.\"\"\"\n    visited = set()\n    to_visit = deque([start])\n    while to_visit:\n        node = to_visit.popleft()\n        if node in visited:\n            continue\n        visited.add(node)\n        if predicate(node):",
        "detail": ".gitbook.assets.bfs_search_dict (1)",
        "documentation": {}
    },
    {
        "label": "bfs_search_dict",
        "kind": 2,
        "importPath": ".gitbook.assets.bfs_search_dict",
        "description": ".gitbook.assets.bfs_search_dict",
        "peekOfCode": "def bfs_search_dict(graph: Mapping[Node, Iterable[Node]], start: Node, predicate: Callable[[Node], bool]) -> bool:\n    \"\"\"Find the closest node to start that matches the predicate using breadth first search.\"\"\"\n    visited = set()\n    to_visit = deque([start])\n    while to_visit:\n        node = to_visit.popleft()\n        if node in visited:\n            continue\n        visited.add(node)\n        if predicate(node):",
        "detail": ".gitbook.assets.bfs_search_dict",
        "documentation": {}
    },
    {
        "label": "bfs_search_grid",
        "kind": 2,
        "importPath": ".gitbook.assets.bfs_search_grid (1)",
        "description": ".gitbook.assets.bfs_search_grid (1)",
        "peekOfCode": "def bfs_search_grid(grid: Sequence[Sequence[int]], start: tuple[int, int], goal: tuple[int, int]) -> bool:\n    \"\"\"On a grid of 0s and 1s, find if start is connected to goal via a path of 1s.\"\"\"\n    rows = range(len(grid))\n    cols = range(len(grid[0]))\n    seen = {start}\n    to_visit = deque([start])\n    while to_visit:\n        r, c = to_visit.popleft()\n        if (r, c) == goal:\n            return True",
        "detail": ".gitbook.assets.bfs_search_grid (1)",
        "documentation": {}
    },
    {
        "label": "bfs_search_grid",
        "kind": 2,
        "importPath": ".gitbook.assets.bfs_search_grid",
        "description": ".gitbook.assets.bfs_search_grid",
        "peekOfCode": "def bfs_search_grid(grid: Sequence[Sequence[int]], start: tuple[int, int], goal: tuple[int, int]) -> bool:\n    \"\"\"On a grid of 0s and 1s, find if start is connected to goal via a path of 1s.\"\"\"\n    rows = range(len(grid))\n    cols = range(len(grid[0]))\n    seen = {start}\n    to_visit = deque([start])\n    while to_visit:\n        r, c = to_visit.popleft()\n        if (r, c) == goal:\n            return True",
        "detail": ".gitbook.assets.bfs_search_grid",
        "documentation": {}
    },
    {
        "label": "bipartite_matching_single",
        "kind": 2,
        "importPath": ".gitbook.assets.bipartite_matching_single (1)",
        "description": ".gitbook.assets.bipartite_matching_single (1)",
        "peekOfCode": "def bipartite_matching_single(graph: Sequence[int]) -> list[int]:\n    matches = list(graph)\n    in_degrees = [0] * len(graph)  # This is an alternate to collections.Counter when the keys are 0-n.\n    for target in graph:\n        in_degrees[target] += 1\n    zero_in_degrees = [node for node, in_degree in enumerate(in_degrees) if not in_degree]\n    while zero_in_degrees:\n        node = zero_in_degrees.pop()\n        target = matches[node]\n        matches[node] = node",
        "detail": ".gitbook.assets.bipartite_matching_single (1)",
        "documentation": {}
    },
    {
        "label": "bipartite_matching_single",
        "kind": 2,
        "importPath": ".gitbook.assets.bipartite_matching_single (2)",
        "description": ".gitbook.assets.bipartite_matching_single (2)",
        "peekOfCode": "def bipartite_matching_single(graph: Sequence[int]) -> list[int]:\n    matches = list(graph)\n    in_degrees = [0] * len(graph)  # This is an alternate to collections.Counter when the keys are 0-n.\n    for target in graph:\n        in_degrees[target] += 1\n    zero_in_degrees = [node for node, in_degree in enumerate(in_degrees) if not in_degree]\n    while zero_in_degrees:\n        node = zero_in_degrees.pop()\n        target = matches[node]\n        matches[node] = node",
        "detail": ".gitbook.assets.bipartite_matching_single (2)",
        "documentation": {}
    },
    {
        "label": "bipartite_matching_single",
        "kind": 2,
        "importPath": ".gitbook.assets.bipartite_matching_single",
        "description": ".gitbook.assets.bipartite_matching_single",
        "peekOfCode": "def bipartite_matching_single(graph: Sequence[int]) -> list[int]:\n    matches = list(graph)\n    in_degrees = [0] * len(graph)  # This is an alternate to collections.Counter when the keys are 0-n.\n    for target in graph:\n        in_degrees[target] += 1\n    zero_in_degrees = [node for node, in_degree in enumerate(in_degrees) if not in_degree]\n    while zero_in_degrees:\n        node = zero_in_degrees.pop()\n        target = matches[node]\n        matches[node] = node",
        "detail": ".gitbook.assets.bipartite_matching_single",
        "documentation": {}
    },
    {
        "label": "bisect_search",
        "kind": 2,
        "importPath": ".gitbook.assets.bisect_search (1)",
        "description": ".gitbook.assets.bisect_search (1)",
        "peekOfCode": "def bisect_search(predicate: Callable[[int], bool], low: int, high: int) -> int:\n    \"\"\"Find the lowest int between low and high where predicate(int) is True.\"\"\"\n    while low < high:\n        mid = low + (high - low) // 2  # Avoids integer overflow compared to mid = (low + high) // 2\n        if predicate(mid):\n            high = mid\n        else:\n            low = mid + 1\n    return low",
        "detail": ".gitbook.assets.bisect_search (1)",
        "documentation": {}
    },
    {
        "label": "bisect_search",
        "kind": 2,
        "importPath": ".gitbook.assets.bisect_search",
        "description": ".gitbook.assets.bisect_search",
        "peekOfCode": "def bisect_search(predicate: Callable[[int], bool], low: int, high: int) -> int:\n    \"\"\"Find the lowest int between low and high where predicate(int) is True.\"\"\"\n    while low < high:\n        mid = low + (high - low) // 2  # Avoids integer overflow compared to mid = (low + high) // 2\n        if predicate(mid):\n            high = mid\n        else:\n            low = mid + 1\n    return low",
        "detail": ".gitbook.assets.bisect_search",
        "documentation": {}
    },
    {
        "label": "bst_make_balanced_recur",
        "kind": 2,
        "importPath": ".gitbook.assets.bst_make_balanced_recur (1)",
        "description": ".gitbook.assets.bst_make_balanced_recur (1)",
        "peekOfCode": "def bst_make_balanced_recur(values: Sequence[int]) -> Optional[BTNode]:\n    \"\"\"Make a balanced binary search tree from a sorted sequence of values.\"\"\"\n    if not values:\n        return None\n    mid = len(values) // 2\n    root = BTNode(values[mid])\n    root.left = bst_make_balanced_recur(values[:mid])\n    root.right = bst_make_balanced_recur(values[mid + 1:])\n    return root",
        "detail": ".gitbook.assets.bst_make_balanced_recur (1)",
        "documentation": {}
    },
    {
        "label": "bst_make_balanced_recur",
        "kind": 2,
        "importPath": ".gitbook.assets.bst_make_balanced_recur",
        "description": ".gitbook.assets.bst_make_balanced_recur",
        "peekOfCode": "def bst_make_balanced_recur(values: Sequence[int]) -> Optional[BTNode]:\n    \"\"\"Make a balanced binary search tree from a sorted sequence of values.\"\"\"\n    if not values:\n        return None\n    mid = len(values) // 2\n    root = BTNode(values[mid])\n    root.left = bst_make_balanced_recur(values[:mid])\n    root.right = bst_make_balanced_recur(values[mid + 1:])\n    return root",
        "detail": ".gitbook.assets.bst_make_balanced_recur",
        "documentation": {}
    },
    {
        "label": "bt_inorder_traversal_recur",
        "kind": 2,
        "importPath": ".gitbook.assets.bt_inorder_traversal_recur (1)",
        "description": ".gitbook.assets.bt_inorder_traversal_recur (1)",
        "peekOfCode": "def bt_inorder_traversal_recur(root: Optional[BTNode]) -> Iterable[BTNode]:\n    if root is not None:\n        yield from bt_inorder_traversal_recur(root.left)\n        yield root\n        yield from bt_inorder_traversal_recur(root.right)",
        "detail": ".gitbook.assets.bt_inorder_traversal_recur (1)",
        "documentation": {}
    },
    {
        "label": "bt_inorder_traversal_recur",
        "kind": 2,
        "importPath": ".gitbook.assets.bt_inorder_traversal_recur",
        "description": ".gitbook.assets.bt_inorder_traversal_recur",
        "peekOfCode": "def bt_inorder_traversal_recur(root: Optional[BTNode]) -> Iterable[BTNode]:\n    if root is not None:\n        yield from bt_inorder_traversal_recur(root.left)\n        yield root\n        yield from bt_inorder_traversal_recur(root.right)",
        "detail": ".gitbook.assets.bt_inorder_traversal_recur",
        "documentation": {}
    },
    {
        "label": "bt_level_order_traversal_iter",
        "kind": 2,
        "importPath": ".gitbook.assets.bt_level_order_traversal_iter (1)",
        "description": ".gitbook.assets.bt_level_order_traversal_iter (1)",
        "peekOfCode": "def bt_level_order_traversal_iter(root: BTNode) -> Iterable[list[BTNode]]:\n    # would do a null check here if root was Optional\n    level = deque([root])\n    while level:\n        # modify this line if you needed to grab the values\n        yield list(level)  # copy so it's not messed with\n        for _ in range(len(level)):\n            node = level.popleft()\n            for child in [node.left, node.right]:\n                if child is not None:",
        "detail": ".gitbook.assets.bt_level_order_traversal_iter (1)",
        "documentation": {}
    },
    {
        "label": "bt_level_order_traversal_iter",
        "kind": 2,
        "importPath": ".gitbook.assets.bt_level_order_traversal_iter",
        "description": ".gitbook.assets.bt_level_order_traversal_iter",
        "peekOfCode": "def bt_level_order_traversal_iter(root: BTNode) -> Iterable[list[BTNode]]:\n    # would do a null check here if root was Optional\n    level = deque([root])\n    while level:\n        # modify this line if you needed to grab the values\n        yield list(level)  # copy so it's not messed with\n        for _ in range(len(level)):\n            node = level.popleft()\n            for child in [node.left, node.right]:\n                if child is not None:",
        "detail": ".gitbook.assets.bt_level_order_traversal_iter",
        "documentation": {}
    },
    {
        "label": "celebrity",
        "kind": 2,
        "importPath": ".gitbook.assets.celebrity (1)",
        "description": ".gitbook.assets.celebrity (1)",
        "peekOfCode": "def celebrity(knows: Callable[[int, int], bool], n: int) -> Optional[int]:\n    candidate = 0\n    for node in range(1, n):\n        if knows(candidate, node):\n            candidate = node\n    if any(knows(candidate, node) for node in range(candidate)):\n        return None\n    if any(not knows(node, candidate) for node in range(n)):\n        return None\n    return candidate",
        "detail": ".gitbook.assets.celebrity (1)",
        "documentation": {}
    },
    {
        "label": "celebrity",
        "kind": 2,
        "importPath": ".gitbook.assets.celebrity",
        "description": ".gitbook.assets.celebrity",
        "peekOfCode": "def celebrity(knows: Callable[[int, int], bool], n: int) -> Optional[int]:\n    candidate = 0\n    for node in range(1, n):\n        if knows(candidate, node):\n            candidate = node\n    if any(knows(candidate, node) for node in range(candidate)):\n        return None\n    if any(not knows(node, candidate) for node in range(n)):\n        return None\n    return candidate",
        "detail": ".gitbook.assets.celebrity",
        "documentation": {}
    },
    {
        "label": "counting_sort_dict",
        "kind": 2,
        "importPath": ".gitbook.assets.counting_sort_dict (1)",
        "description": ".gitbook.assets.counting_sort_dict (1)",
        "peekOfCode": "def counting_sort_dict(items: Iterable[T], key: Callable[[T], int] = lambda x: x) -> Iterable[T]:\n    groups = defaultdict(list)\n    for item in items:\n        groups[key(item)].append(item)\n    for k in range(min(groups), max(groups) + 1):\n        yield from groups[k]",
        "detail": ".gitbook.assets.counting_sort_dict (1)",
        "documentation": {}
    },
    {
        "label": "counting_sort_dict",
        "kind": 2,
        "importPath": ".gitbook.assets.counting_sort_dict (2)",
        "description": ".gitbook.assets.counting_sort_dict (2)",
        "peekOfCode": "def counting_sort_dict(items: Iterable[T], key: Callable[[T], int] = lambda x: x) -> Iterable[T]:\n    groups = defaultdict(list)\n    for item in items:\n        groups[key(item)].append(item)\n    for k in range(min(groups), max(groups) + 1):\n        yield from groups[k]",
        "detail": ".gitbook.assets.counting_sort_dict (2)",
        "documentation": {}
    },
    {
        "label": "counting_sort_dict",
        "kind": 2,
        "importPath": ".gitbook.assets.counting_sort_dict",
        "description": ".gitbook.assets.counting_sort_dict",
        "peekOfCode": "def counting_sort_dict(items: Iterable[T], key: Callable[[T], int] = lambda x: x) -> Iterable[T]:\n    groups = defaultdict(list)\n    for item in items:\n        groups[key(item)].append(item)\n    for k in range(min(groups), max(groups) + 1):\n        yield from groups[k]",
        "detail": ".gitbook.assets.counting_sort_dict",
        "documentation": {}
    },
    {
        "label": "counting_sort_list",
        "kind": 2,
        "importPath": ".gitbook.assets.counting_sort_list (1)",
        "description": ".gitbook.assets.counting_sort_list (1)",
        "peekOfCode": "def counting_sort_list(items: Sequence[T], key: Callable[[T], int] = lambda x: x):\n    max_value = max(map(key, items))\n    count = [0] * (max_value + 1)\n    for item in items:\n        count[key(item)] += 1\n    count = list(accumulate(count, initial=0))\n    ret = [None] * len(items)\n    for item in items:\n        i = count[key(item)]\n        ret[i] = item",
        "detail": ".gitbook.assets.counting_sort_list (1)",
        "documentation": {}
    },
    {
        "label": "counting_sort_list",
        "kind": 2,
        "importPath": ".gitbook.assets.counting_sort_list (2)",
        "description": ".gitbook.assets.counting_sort_list (2)",
        "peekOfCode": "def counting_sort_list(items: Sequence[T], key: Callable[[T], int] = lambda x: x):\n    max_value = max(map(key, items))\n    count = [0] * (max_value + 1)\n    for item in items:\n        count[key(item)] += 1\n    count = list(accumulate(count, initial=0))\n    ret = [None] * len(items)\n    for item in items:\n        i = count[key(item)]\n        ret[i] = item",
        "detail": ".gitbook.assets.counting_sort_list (2)",
        "documentation": {}
    },
    {
        "label": "counting_sort_list",
        "kind": 2,
        "importPath": ".gitbook.assets.counting_sort_list",
        "description": ".gitbook.assets.counting_sort_list",
        "peekOfCode": "def counting_sort_list(items: Sequence[T], key: Callable[[T], int] = lambda x: x):\n    max_value = max(map(key, items))\n    count = [0] * (max_value + 1)\n    for item in items:\n        count[key(item)] += 1\n    count = list(accumulate(count, initial=0))\n    ret = [None] * len(items)\n    for item in items:\n        i = count[key(item)]\n        ret[i] = item",
        "detail": ".gitbook.assets.counting_sort_list",
        "documentation": {}
    },
    {
        "label": "threeCharsDistinct",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-week1-projects (1)",
        "description": ".gitbook.assets.cs-week1-projects (1)",
        "peekOfCode": "def threeCharsDistinct(s):\n    count = 0\n    for i in range(len(s)):\n        if i < len(s) - 2:\n            # print(i)\n            if s[i] != s[i + 1] and s[i] != s[i + 2] and s[i + 1] != s[i + 2]:\n                count += 1\n    return count\n# print(threeCharsDistinct(s))\nsentence = \"Man bites dog\"",
        "detail": ".gitbook.assets.cs-week1-projects (1)",
        "documentation": {}
    },
    {
        "label": "reverseSentence",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-week1-projects (1)",
        "description": ".gitbook.assets.cs-week1-projects (1)",
        "peekOfCode": "def reverseSentence(sentence):\n    words_array = sentence.split(' ')\n    words_reversed = ' '.join(reversed(words_array))\n    return words_reversed\n# print(reverseSentence(sentence))\npasscode = '1111'\nattempts = [\"1111\",\n            \"4444\",\n            \"9999\",\n            \"3333\",",
        "detail": ".gitbook.assets.cs-week1-projects (1)",
        "documentation": {}
    },
    {
        "label": "incorrectPasscodeAttempts",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-week1-projects (1)",
        "description": ".gitbook.assets.cs-week1-projects (1)",
        "peekOfCode": "def incorrectPasscodeAttempts(passcode, attempts):\n    count = 0\n    indexes = []\n    if len(attempts) < 10 and passcode not in attempts:\n        return False\n    for attempt in attempts:\n        print('attempt:', attempt)\n        if attempt != passcode:\n            print('count before:', count)\n            count += 1",
        "detail": ".gitbook.assets.cs-week1-projects (1)",
        "documentation": {}
    },
    {
        "label": "digitSumsDifference",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-week1-projects (1)",
        "description": ".gitbook.assets.cs-week1-projects (1)",
        "peekOfCode": "def digitSumsDifference(n):\n    evens_sum = 0\n    odds_sum = 0\n    difference = 0\n    evens = []\n    odds = []\n    for num in str(n):\n        if int(num) % 2 == 0:\n            evens.append(int(num))\n        else:",
        "detail": ".gitbook.assets.cs-week1-projects (1)",
        "documentation": {}
    },
    {
        "label": "digitsManipulations",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-week1-projects (1)",
        "description": ".gitbook.assets.cs-week1-projects (1)",
        "peekOfCode": "def digitsManipulations(n):\n    nums = []\n    for num in str(n):\n        nums.append(int(num))\n    return math.prod(nums) - sum(nums)\n#\n# print(digitsManipulations(n))\ns = \"abcde\"\ndef countVowelConsonant(s):\n    vowel_count = 0",
        "detail": ".gitbook.assets.cs-week1-projects (1)",
        "documentation": {}
    },
    {
        "label": "countVowelConsonant",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-week1-projects (1)",
        "description": ".gitbook.assets.cs-week1-projects (1)",
        "peekOfCode": "def countVowelConsonant(s):\n    vowel_count = 0\n    const_count = 0\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for letter in s:\n        if letter in vowels:\n            vowel_count += 1\n        else:\n            const_count += 2\n    return vowel_count + const_count",
        "detail": ".gitbook.assets.cs-week1-projects (1)",
        "documentation": {}
    },
    {
        "label": "contains_duplicate_2",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-week1-projects (1)",
        "description": ".gitbook.assets.cs-week1-projects (1)",
        "peekOfCode": "def contains_duplicate_2(nums):\n    # overall runtime: O(nlogn + n) --> O(n log n)\n    # space complexity: O(1)\n    nums.sort()  # sorting is usually O(n log n)\n    # nums.sort() sorts it in place\n    # everything below this line is O(n)\n    i = 0  # O(1)\n    while i < len(nums) - 1:  # up to O(n)\n        if nums[i] == nums[i + 1]:  # O(1)\n            return True",
        "detail": ".gitbook.assets.cs-week1-projects (1)",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-week1-projects (1)",
        "description": ".gitbook.assets.cs-week1-projects (1)",
        "peekOfCode": "s = 'abacaba'\n# def threeCharsDistinct(s):\n#     count = 0\n#\n#     for i in range(len(s)):\n#         if i < 6:\n#             if s[0] != s[i + 1] and s[i] != s[i + 2] and s[i + 1] != s[i + 2]:\n#                 count += 1\n#     print(count)\ndef threeCharsDistinct(s):",
        "detail": ".gitbook.assets.cs-week1-projects (1)",
        "documentation": {}
    },
    {
        "label": "sentence",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-week1-projects (1)",
        "description": ".gitbook.assets.cs-week1-projects (1)",
        "peekOfCode": "sentence = \"Man bites dog\"\ndef reverseSentence(sentence):\n    words_array = sentence.split(' ')\n    words_reversed = ' '.join(reversed(words_array))\n    return words_reversed\n# print(reverseSentence(sentence))\npasscode = '1111'\nattempts = [\"1111\",\n            \"4444\",\n            \"9999\",",
        "detail": ".gitbook.assets.cs-week1-projects (1)",
        "documentation": {}
    },
    {
        "label": "passcode",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-week1-projects (1)",
        "description": ".gitbook.assets.cs-week1-projects (1)",
        "peekOfCode": "passcode = '1111'\nattempts = [\"1111\",\n            \"4444\",\n            \"9999\",\n            \"3333\",\n            \"8888\",\n            \"2222\",\n            \"7777\",\n            \"0000\",\n            \"6666\",",
        "detail": ".gitbook.assets.cs-week1-projects (1)",
        "documentation": {}
    },
    {
        "label": "attempts",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-week1-projects (1)",
        "description": ".gitbook.assets.cs-week1-projects (1)",
        "peekOfCode": "attempts = [\"1111\",\n            \"4444\",\n            \"9999\",\n            \"3333\",\n            \"8888\",\n            \"2222\",\n            \"7777\",\n            \"0000\",\n            \"6666\",\n            \"7285\",",
        "detail": ".gitbook.assets.cs-week1-projects (1)",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-week1-projects (1)",
        "description": ".gitbook.assets.cs-week1-projects (1)",
        "peekOfCode": "n = 412\ndef digitSumsDifference(n):\n    evens_sum = 0\n    odds_sum = 0\n    difference = 0\n    evens = []\n    odds = []\n    for num in str(n):\n        if int(num) % 2 == 0:\n            evens.append(int(num))",
        "detail": ".gitbook.assets.cs-week1-projects (1)",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-week1-projects (1)",
        "description": ".gitbook.assets.cs-week1-projects (1)",
        "peekOfCode": "n = 123456\ndef digitsManipulations(n):\n    nums = []\n    for num in str(n):\n        nums.append(int(num))\n    return math.prod(nums) - sum(nums)\n#\n# print(digitsManipulations(n))\ns = \"abcde\"\ndef countVowelConsonant(s):",
        "detail": ".gitbook.assets.cs-week1-projects (1)",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-week1-projects (1)",
        "description": ".gitbook.assets.cs-week1-projects (1)",
        "peekOfCode": "s = \"abcde\"\ndef countVowelConsonant(s):\n    vowel_count = 0\n    const_count = 0\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for letter in s:\n        if letter in vowels:\n            vowel_count += 1\n        else:\n            const_count += 2",
        "detail": ".gitbook.assets.cs-week1-projects (1)",
        "documentation": {}
    },
    {
        "label": "threeCharsDistinct",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-week1-projects",
        "description": ".gitbook.assets.cs-week1-projects",
        "peekOfCode": "def threeCharsDistinct(s):\n    count = 0\n    for i in range(len(s)):\n        if i < len(s) - 2:\n            # print(i)\n            if s[i] != s[i + 1] and s[i] != s[i + 2] and s[i + 1] != s[i + 2]:\n                count += 1\n    return count\n# print(threeCharsDistinct(s))\nsentence = \"Man bites dog\"",
        "detail": ".gitbook.assets.cs-week1-projects",
        "documentation": {}
    },
    {
        "label": "reverseSentence",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-week1-projects",
        "description": ".gitbook.assets.cs-week1-projects",
        "peekOfCode": "def reverseSentence(sentence):\n    words_array = sentence.split(' ')\n    words_reversed = ' '.join(reversed(words_array))\n    return words_reversed\n# print(reverseSentence(sentence))\npasscode = '1111'\nattempts = [\"1111\",\n            \"4444\",\n            \"9999\",\n            \"3333\",",
        "detail": ".gitbook.assets.cs-week1-projects",
        "documentation": {}
    },
    {
        "label": "incorrectPasscodeAttempts",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-week1-projects",
        "description": ".gitbook.assets.cs-week1-projects",
        "peekOfCode": "def incorrectPasscodeAttempts(passcode, attempts):\n    count = 0\n    indexes = []\n    if len(attempts) < 10 and passcode not in attempts:\n        return False\n    for attempt in attempts:\n        print('attempt:', attempt)\n        if attempt != passcode:\n            print('count before:', count)\n            count += 1",
        "detail": ".gitbook.assets.cs-week1-projects",
        "documentation": {}
    },
    {
        "label": "digitSumsDifference",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-week1-projects",
        "description": ".gitbook.assets.cs-week1-projects",
        "peekOfCode": "def digitSumsDifference(n):\n    evens_sum = 0\n    odds_sum = 0\n    difference = 0\n    evens = []\n    odds = []\n    for num in str(n):\n        if int(num) % 2 == 0:\n            evens.append(int(num))\n        else:",
        "detail": ".gitbook.assets.cs-week1-projects",
        "documentation": {}
    },
    {
        "label": "digitsManipulations",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-week1-projects",
        "description": ".gitbook.assets.cs-week1-projects",
        "peekOfCode": "def digitsManipulations(n):\n    nums = []\n    for num in str(n):\n        nums.append(int(num))\n    return math.prod(nums) - sum(nums)\n#\n# print(digitsManipulations(n))\ns = \"abcde\"\ndef countVowelConsonant(s):\n    vowel_count = 0",
        "detail": ".gitbook.assets.cs-week1-projects",
        "documentation": {}
    },
    {
        "label": "countVowelConsonant",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-week1-projects",
        "description": ".gitbook.assets.cs-week1-projects",
        "peekOfCode": "def countVowelConsonant(s):\n    vowel_count = 0\n    const_count = 0\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for letter in s:\n        if letter in vowels:\n            vowel_count += 1\n        else:\n            const_count += 2\n    return vowel_count + const_count",
        "detail": ".gitbook.assets.cs-week1-projects",
        "documentation": {}
    },
    {
        "label": "contains_duplicate_2",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-week1-projects",
        "description": ".gitbook.assets.cs-week1-projects",
        "peekOfCode": "def contains_duplicate_2(nums):\n    # overall runtime: O(nlogn + n) --> O(n log n)\n    # space complexity: O(1)\n    nums.sort()  # sorting is usually O(n log n)\n    # nums.sort() sorts it in place\n    # everything below this line is O(n)\n    i = 0  # O(1)\n    while i < len(nums) - 1:  # up to O(n)\n        if nums[i] == nums[i + 1]:  # O(1)\n            return True",
        "detail": ".gitbook.assets.cs-week1-projects",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-week1-projects",
        "description": ".gitbook.assets.cs-week1-projects",
        "peekOfCode": "s = 'abacaba'\n# def threeCharsDistinct(s):\n#     count = 0\n#\n#     for i in range(len(s)):\n#         if i < 6:\n#             if s[0] != s[i + 1] and s[i] != s[i + 2] and s[i + 1] != s[i + 2]:\n#                 count += 1\n#     print(count)\ndef threeCharsDistinct(s):",
        "detail": ".gitbook.assets.cs-week1-projects",
        "documentation": {}
    },
    {
        "label": "sentence",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-week1-projects",
        "description": ".gitbook.assets.cs-week1-projects",
        "peekOfCode": "sentence = \"Man bites dog\"\ndef reverseSentence(sentence):\n    words_array = sentence.split(' ')\n    words_reversed = ' '.join(reversed(words_array))\n    return words_reversed\n# print(reverseSentence(sentence))\npasscode = '1111'\nattempts = [\"1111\",\n            \"4444\",\n            \"9999\",",
        "detail": ".gitbook.assets.cs-week1-projects",
        "documentation": {}
    },
    {
        "label": "passcode",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-week1-projects",
        "description": ".gitbook.assets.cs-week1-projects",
        "peekOfCode": "passcode = '1111'\nattempts = [\"1111\",\n            \"4444\",\n            \"9999\",\n            \"3333\",\n            \"8888\",\n            \"2222\",\n            \"7777\",\n            \"0000\",\n            \"6666\",",
        "detail": ".gitbook.assets.cs-week1-projects",
        "documentation": {}
    },
    {
        "label": "attempts",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-week1-projects",
        "description": ".gitbook.assets.cs-week1-projects",
        "peekOfCode": "attempts = [\"1111\",\n            \"4444\",\n            \"9999\",\n            \"3333\",\n            \"8888\",\n            \"2222\",\n            \"7777\",\n            \"0000\",\n            \"6666\",\n            \"7285\",",
        "detail": ".gitbook.assets.cs-week1-projects",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-week1-projects",
        "description": ".gitbook.assets.cs-week1-projects",
        "peekOfCode": "n = 412\ndef digitSumsDifference(n):\n    evens_sum = 0\n    odds_sum = 0\n    difference = 0\n    evens = []\n    odds = []\n    for num in str(n):\n        if int(num) % 2 == 0:\n            evens.append(int(num))",
        "detail": ".gitbook.assets.cs-week1-projects",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-week1-projects",
        "description": ".gitbook.assets.cs-week1-projects",
        "peekOfCode": "n = 123456\ndef digitsManipulations(n):\n    nums = []\n    for num in str(n):\n        nums.append(int(num))\n    return math.prod(nums) - sum(nums)\n#\n# print(digitsManipulations(n))\ns = \"abcde\"\ndef countVowelConsonant(s):",
        "detail": ".gitbook.assets.cs-week1-projects",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-week1-projects",
        "description": ".gitbook.assets.cs-week1-projects",
        "peekOfCode": "s = \"abcde\"\ndef countVowelConsonant(s):\n    vowel_count = 0\n    const_count = 0\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for letter in s:\n        if letter in vowels:\n            vowel_count += 1\n        else:\n            const_count += 2",
        "detail": ".gitbook.assets.cs-week1-projects",
        "documentation": {}
    },
    {
        "label": "remove_duplicates",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-week2-projects (1)",
        "description": ".gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "def remove_duplicates(nums):\n    # Your code here\n    i = 0\n    while i < len(nums) - 1:\n        if nums[i] == nums[i + 1]:\n            nums.pop(i + 1)\n        else:\n            i = i + 1\n    return nums\n\"\"\"",
        "detail": ".gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "contains_duplicate",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-week2-projects (1)",
        "description": ".gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "def contains_duplicate(nums):\n    # Your code here\n    num_set = set(nums)\n    if len(num_set) == len(nums):\n        return False\n    else:\n        return True\n# print(contains_duplicate([1, 3, 3, 2, 1]))\n\"\"\"\nGiven two strings `a` and `b`, write a function to determine if `a` is an",
        "detail": ".gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "is_anagram",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-week2-projects (1)",
        "description": ".gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "def is_anagram(a, b):\n    # Your code here\n    pass\n# # \"\"\"\n# # Example One\n# # \"\"\"\n# # my_list1 = [1, 2, 3, 4, 5, 6]\n# # my_list2 = my_list1\n# # # How would you verify that my_list1 and my_list2 have the same identity?\n# # print(id(my_list1) == id(my_list2))",
        "detail": ".gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "fibonacci",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-week2-projects (1)",
        "description": ".gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "def fibonacci(n):\n    lst = [0, 1]\n    for i in range(2, n):\n        lst.append(lst[i - 2] + lst[i - 1])\n    return lst[n - 1]\n# # O(n)\n#\n# \"\"\"\n# Use Big O notation to classify the space complexity of the function below.\n# \"\"\"",
        "detail": ".gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "fibonacci_two",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-week2-projects (1)",
        "description": ".gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "def fibonacci_two(n):\n    x, y, z = 0, 1, None\n    if n == 0:\n        return x\n    if n == 1:\n        return y\n    for i in range(2, n):\n        z = x + y\n        x, y = y, z\n    return z",
        "detail": ".gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "do_something",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-week2-projects (1)",
        "description": ".gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "def do_something(n):\n    lst = []\n    for i in range(n):\n        for j in range(n):\n            lst.append(i + j)\n    return lst\n# O(n^2)\n# numbers = [2, 0, 0, 0]\n#\n#",
        "detail": ".gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "removeEvens",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-week2-projects (1)",
        "description": ".gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "def removeEvens(numbers):\n    return [num for num in numbers if num % 2 != 0]\n# below code didn't pass tests above did\n# for num in numbers:\n#     if num % 2 == 0 and num != 0:\n#         numbers.remove(num)\n# return numbers\n# print(removeEvens(numbers))\nimport statistics\nsequence = [-1, 3, -2, 2]",
        "detail": ".gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "arrayMedian",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-week2-projects (1)",
        "description": ".gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "def arrayMedian(sequence):\n    return statistics.median(sequence)\n# print(arrayMedian(sequence))\n#\n# s = \"TuVwXYZ\"\n#\n# # s = \"ABCDEFFDEfghCBA\"\n#\n# # def originalIncreasingSubstrings(s):\n# #     string = ''",
        "detail": ".gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "increasingSubstrings",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-week2-projects (1)",
        "description": ".gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "def increasingSubstrings(s):\n    string = ''\n    subs = []\n    i = 0\n    if len(s) == 1:\n        subs.append(s[0])\n    else:\n        for i in range(len(s) - 1):\n            # print(s[i])\n            if not string.startswith(s[i]):",
        "detail": ".gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "additionWithoutCarrying",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-week2-projects (1)",
        "description": ".gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "def additionWithoutCarrying(param1, param2):\n    # set variable to hold the added row answers\n    result = []\n    # function to find a digit in a number\n    def find_digit(number, place):\n        return number // 10 ** place % 10\n    # get larger number\n    larger = None\n    if param1 > param2:\n        larger = param1",
        "detail": ".gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "evenDigitsNumber",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-week2-projects (1)",
        "description": ".gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "def evenDigitsNumber(a):\n    even_count = 0\n    for group in a:\n        if len(str(group)) % 2 == 0:\n            even_count += 1\n    return even_count\n# print(evenDigitsNumber(a))\n# You're writing a new programming language and you'd like it to have the capability of splitting a string into substrings with limited characters. More specifically, we'll call a substring good if the absolute difference in ASCII codes between any two of its characters is less than or equal to k.\n#\n# For example, if k = 3, then the string \"bad\" would be considered good, since the greatest difference in ASCII codes is 3 (between the a and d characters). The string \"nice\" would not be considered good, since there's a difference of 11 between the c and n characters.",
        "detail": ".gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "increasingSubstrings",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-week2-projects (1)",
        "description": ".gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "def increasingSubstrings(s):\n    string = ''\n    subs = []\n    i = 0\n    if len(s) == 1:\n        subs.append(s[0])\n    else:\n        for i in range(len(s) - 1):\n            # print(s[i])\n            if not string.startswith(s[i]):",
        "detail": ".gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "goodSubstrings",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-week2-projects (1)",
        "description": ".gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "def goodSubstrings(strToSplit, k):\n    smallest = ord(strToSplit[0])\n    largest = 0\n    subs = []\n    s = ''\n    for i in range(len(strToSplit)):\n        # print('Letter', strToSplit[i],\n        #       ord(strToSplit[i]))\n        # print(f'smallest: {smallest} largest: {largest}')\n        if ord(strToSplit[i]) < smallest:",
        "detail": ".gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "to_lower_case",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-week2-projects (1)",
        "description": ".gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "def to_lower_case(string):\n    result = ''\n    for i in range(len(string)):\n        if ord(string[i]) <= 90 or ord(string[i]) <= 65:\n            result += chr(ord(string[i]) + 32)\n        else:\n            result += string[i]\n    return result\n# print(to_lower_case(string))\n\"\"\"",
        "detail": ".gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "roman_to_integer",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-week2-projects (1)",
        "description": ".gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "def roman_to_integer(roman):\n    numerals = {\n        'I': 1,\n        'V': 5,\n        'X': 10,\n        'L': 50,\n        'C': 100,\n        'D': 500,\n        'M': 1000,\n        'IV': 4,",
        "detail": ".gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "find_lucky",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-week2-projects (1)",
        "description": ".gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "def find_lucky(lst):\n    lucky = []\n    for num in lst:\n        if num == lst.count(num):\n            lucky.append(num)\n    if not lucky:\n        return -1\n    return max(lucky)\n# print(find_lucky(lst))",
        "detail": ".gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "sequence",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-week2-projects (1)",
        "description": ".gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "sequence = [-1, 3, -2, 2]\ndef arrayMedian(sequence):\n    return statistics.median(sequence)\n# print(arrayMedian(sequence))\n#\n# s = \"TuVwXYZ\"\n#\n# # s = \"ABCDEFFDEfghCBA\"\n#\n# # def originalIncreasingSubstrings(s):",
        "detail": ".gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-week2-projects (1)",
        "description": ".gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "s = \"f\"\ndef increasingSubstrings(s):\n    string = ''\n    subs = []\n    i = 0\n    if len(s) == 1:\n        subs.append(s[0])\n    else:\n        for i in range(len(s) - 1):\n            # print(s[i])",
        "detail": ".gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "param1",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-week2-projects (1)",
        "description": ".gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "param1 = 456\nparam2 = 1734\ndef additionWithoutCarrying(param1, param2):\n    # set variable to hold the added row answers\n    result = []\n    # function to find a digit in a number\n    def find_digit(number, place):\n        return number // 10 ** place % 10\n    # get larger number\n    larger = None",
        "detail": ".gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "param2",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-week2-projects (1)",
        "description": ".gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "param2 = 1734\ndef additionWithoutCarrying(param1, param2):\n    # set variable to hold the added row answers\n    result = []\n    # function to find a digit in a number\n    def find_digit(number, place):\n        return number // 10 ** place % 10\n    # get larger number\n    larger = None\n    if param1 > param2:",
        "detail": ".gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-week2-projects (1)",
        "description": ".gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "a = [12, 134, 111, 1111, 10]\ndef evenDigitsNumber(a):\n    even_count = 0\n    for group in a:\n        if len(str(group)) % 2 == 0:\n            even_count += 1\n    return even_count\n# print(evenDigitsNumber(a))\n# You're writing a new programming language and you'd like it to have the capability of splitting a string into substrings with limited characters. More specifically, we'll call a substring good if the absolute difference in ASCII codes between any two of its characters is less than or equal to k.\n#",
        "detail": ".gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "strToSplit",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-week2-projects (1)",
        "description": ".gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "strToSplit = \"aaabaaabb\"\nk = 0\nstrToSplit = \"aaabaaabb\"\nk = 1\nstrToSplit = \"aaabzaaabb\"\nk = 5\ndef goodSubstrings(strToSplit, k):\n    smallest = ord(strToSplit[0])\n    largest = 0\n    subs = []",
        "detail": ".gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-week2-projects (1)",
        "description": ".gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "k = 0\nstrToSplit = \"aaabaaabb\"\nk = 1\nstrToSplit = \"aaabzaaabb\"\nk = 5\ndef goodSubstrings(strToSplit, k):\n    smallest = ord(strToSplit[0])\n    largest = 0\n    subs = []\n    s = ''",
        "detail": ".gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "strToSplit",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-week2-projects (1)",
        "description": ".gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "strToSplit = \"aaabaaabb\"\nk = 1\nstrToSplit = \"aaabzaaabb\"\nk = 5\ndef goodSubstrings(strToSplit, k):\n    smallest = ord(strToSplit[0])\n    largest = 0\n    subs = []\n    s = ''\n    for i in range(len(strToSplit)):",
        "detail": ".gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-week2-projects (1)",
        "description": ".gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "k = 1\nstrToSplit = \"aaabzaaabb\"\nk = 5\ndef goodSubstrings(strToSplit, k):\n    smallest = ord(strToSplit[0])\n    largest = 0\n    subs = []\n    s = ''\n    for i in range(len(strToSplit)):\n        # print('Letter', strToSplit[i],",
        "detail": ".gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "strToSplit",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-week2-projects (1)",
        "description": ".gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "strToSplit = \"aaabzaaabb\"\nk = 5\ndef goodSubstrings(strToSplit, k):\n    smallest = ord(strToSplit[0])\n    largest = 0\n    subs = []\n    s = ''\n    for i in range(len(strToSplit)):\n        # print('Letter', strToSplit[i],\n        #       ord(strToSplit[i]))",
        "detail": ".gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-week2-projects (1)",
        "description": ".gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "k = 5\ndef goodSubstrings(strToSplit, k):\n    smallest = ord(strToSplit[0])\n    largest = 0\n    subs = []\n    s = ''\n    for i in range(len(strToSplit)):\n        # print('Letter', strToSplit[i],\n        #       ord(strToSplit[i]))\n        # print(f'smallest: {smallest} largest: {largest}')",
        "detail": ".gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-week2-projects (1)",
        "description": ".gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "string = \"LambdaSchool\"\ndef to_lower_case(string):\n    result = ''\n    for i in range(len(string)):\n        if ord(string[i]) <= 90 or ord(string[i]) <= 65:\n            result += chr(ord(string[i]) + 32)\n        else:\n            result += string[i]\n    return result\n# print(to_lower_case(string))",
        "detail": ".gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "roman",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-week2-projects (1)",
        "description": ".gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "roman = 'IV'\nroman = 'XII'\nroman = \"MCMLXXXIV\"\n#  TODO finish this!\ndef roman_to_integer(roman):\n    numerals = {\n        'I': 1,\n        'V': 5,\n        'X': 10,\n        'L': 50,",
        "detail": ".gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "roman",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-week2-projects (1)",
        "description": ".gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "roman = 'XII'\nroman = \"MCMLXXXIV\"\n#  TODO finish this!\ndef roman_to_integer(roman):\n    numerals = {\n        'I': 1,\n        'V': 5,\n        'X': 10,\n        'L': 50,\n        'C': 100,",
        "detail": ".gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "roman",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-week2-projects (1)",
        "description": ".gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "roman = \"MCMLXXXIV\"\n#  TODO finish this!\ndef roman_to_integer(roman):\n    numerals = {\n        'I': 1,\n        'V': 5,\n        'X': 10,\n        'L': 50,\n        'C': 100,\n        'D': 500,",
        "detail": ".gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "lst",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-week2-projects (1)",
        "description": ".gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "lst = [2, 2, 3, 3, 3, 4, 4, 4, 4]\n#  O(n^2) because counting in the loop...\ndef find_lucky(lst):\n    lucky = []\n    for num in lst:\n        if num == lst.count(num):\n            lucky.append(num)\n    if not lucky:\n        return -1\n    return max(lucky)",
        "detail": ".gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "remove_duplicates",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-week2-projects",
        "description": ".gitbook.assets.cs-week2-projects",
        "peekOfCode": "def remove_duplicates(nums):\n    # Your code here\n    i = 0\n    while i < len(nums) - 1:\n        if nums[i] == nums[i + 1]:\n            nums.pop(i + 1)\n        else:\n            i = i + 1\n    return nums\n\"\"\"",
        "detail": ".gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "contains_duplicate",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-week2-projects",
        "description": ".gitbook.assets.cs-week2-projects",
        "peekOfCode": "def contains_duplicate(nums):\n    # Your code here\n    num_set = set(nums)\n    if len(num_set) == len(nums):\n        return False\n    else:\n        return True\n# print(contains_duplicate([1, 3, 3, 2, 1]))\n\"\"\"\nGiven two strings `a` and `b`, write a function to determine if `a` is an",
        "detail": ".gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "is_anagram",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-week2-projects",
        "description": ".gitbook.assets.cs-week2-projects",
        "peekOfCode": "def is_anagram(a, b):\n    # Your code here\n    pass\n# # \"\"\"\n# # Example One\n# # \"\"\"\n# # my_list1 = [1, 2, 3, 4, 5, 6]\n# # my_list2 = my_list1\n# # # How would you verify that my_list1 and my_list2 have the same identity?\n# # print(id(my_list1) == id(my_list2))",
        "detail": ".gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "fibonacci",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-week2-projects",
        "description": ".gitbook.assets.cs-week2-projects",
        "peekOfCode": "def fibonacci(n):\n    lst = [0, 1]\n    for i in range(2, n):\n        lst.append(lst[i - 2] + lst[i - 1])\n    return lst[n - 1]\n# # O(n)\n#\n# \"\"\"\n# Use Big O notation to classify the space complexity of the function below.\n# \"\"\"",
        "detail": ".gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "fibonacci_two",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-week2-projects",
        "description": ".gitbook.assets.cs-week2-projects",
        "peekOfCode": "def fibonacci_two(n):\n    x, y, z = 0, 1, None\n    if n == 0:\n        return x\n    if n == 1:\n        return y\n    for i in range(2, n):\n        z = x + y\n        x, y = y, z\n    return z",
        "detail": ".gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "do_something",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-week2-projects",
        "description": ".gitbook.assets.cs-week2-projects",
        "peekOfCode": "def do_something(n):\n    lst = []\n    for i in range(n):\n        for j in range(n):\n            lst.append(i + j)\n    return lst\n# O(n^2)\n# numbers = [2, 0, 0, 0]\n#\n#",
        "detail": ".gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "removeEvens",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-week2-projects",
        "description": ".gitbook.assets.cs-week2-projects",
        "peekOfCode": "def removeEvens(numbers):\n    return [num for num in numbers if num % 2 != 0]\n# below code didn't pass tests above did\n# for num in numbers:\n#     if num % 2 == 0 and num != 0:\n#         numbers.remove(num)\n# return numbers\n# print(removeEvens(numbers))\nimport statistics\nsequence = [-1, 3, -2, 2]",
        "detail": ".gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "arrayMedian",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-week2-projects",
        "description": ".gitbook.assets.cs-week2-projects",
        "peekOfCode": "def arrayMedian(sequence):\n    return statistics.median(sequence)\n# print(arrayMedian(sequence))\n#\n# s = \"TuVwXYZ\"\n#\n# # s = \"ABCDEFFDEfghCBA\"\n#\n# # def originalIncreasingSubstrings(s):\n# #     string = ''",
        "detail": ".gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "increasingSubstrings",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-week2-projects",
        "description": ".gitbook.assets.cs-week2-projects",
        "peekOfCode": "def increasingSubstrings(s):\n    string = ''\n    subs = []\n    i = 0\n    if len(s) == 1:\n        subs.append(s[0])\n    else:\n        for i in range(len(s) - 1):\n            # print(s[i])\n            if not string.startswith(s[i]):",
        "detail": ".gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "additionWithoutCarrying",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-week2-projects",
        "description": ".gitbook.assets.cs-week2-projects",
        "peekOfCode": "def additionWithoutCarrying(param1, param2):\n    # set variable to hold the added row answers\n    result = []\n    # function to find a digit in a number\n    def find_digit(number, place):\n        return number // 10 ** place % 10\n    # get larger number\n    larger = None\n    if param1 > param2:\n        larger = param1",
        "detail": ".gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "evenDigitsNumber",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-week2-projects",
        "description": ".gitbook.assets.cs-week2-projects",
        "peekOfCode": "def evenDigitsNumber(a):\n    even_count = 0\n    for group in a:\n        if len(str(group)) % 2 == 0:\n            even_count += 1\n    return even_count\n# print(evenDigitsNumber(a))\n# You're writing a new programming language and you'd like it to have the capability of splitting a string into substrings with limited characters. More specifically, we'll call a substring good if the absolute difference in ASCII codes between any two of its characters is less than or equal to k.\n#\n# For example, if k = 3, then the string \"bad\" would be considered good, since the greatest difference in ASCII codes is 3 (between the a and d characters). The string \"nice\" would not be considered good, since there's a difference of 11 between the c and n characters.",
        "detail": ".gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "increasingSubstrings",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-week2-projects",
        "description": ".gitbook.assets.cs-week2-projects",
        "peekOfCode": "def increasingSubstrings(s):\n    string = ''\n    subs = []\n    i = 0\n    if len(s) == 1:\n        subs.append(s[0])\n    else:\n        for i in range(len(s) - 1):\n            # print(s[i])\n            if not string.startswith(s[i]):",
        "detail": ".gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "goodSubstrings",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-week2-projects",
        "description": ".gitbook.assets.cs-week2-projects",
        "peekOfCode": "def goodSubstrings(strToSplit, k):\n    smallest = ord(strToSplit[0])\n    largest = 0\n    subs = []\n    s = ''\n    for i in range(len(strToSplit)):\n        # print('Letter', strToSplit[i],\n        #       ord(strToSplit[i]))\n        # print(f'smallest: {smallest} largest: {largest}')\n        if ord(strToSplit[i]) < smallest:",
        "detail": ".gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "to_lower_case",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-week2-projects",
        "description": ".gitbook.assets.cs-week2-projects",
        "peekOfCode": "def to_lower_case(string):\n    result = ''\n    for i in range(len(string)):\n        if ord(string[i]) <= 90 or ord(string[i]) <= 65:\n            result += chr(ord(string[i]) + 32)\n        else:\n            result += string[i]\n    return result\n# print(to_lower_case(string))\n\"\"\"",
        "detail": ".gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "roman_to_integer",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-week2-projects",
        "description": ".gitbook.assets.cs-week2-projects",
        "peekOfCode": "def roman_to_integer(roman):\n    numerals = {\n        'I': 1,\n        'V': 5,\n        'X': 10,\n        'L': 50,\n        'C': 100,\n        'D': 500,\n        'M': 1000,\n        'IV': 4,",
        "detail": ".gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "find_lucky",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-week2-projects",
        "description": ".gitbook.assets.cs-week2-projects",
        "peekOfCode": "def find_lucky(lst):\n    lucky = []\n    for num in lst:\n        if num == lst.count(num):\n            lucky.append(num)\n    if not lucky:\n        return -1\n    return max(lucky)\n# print(find_lucky(lst))",
        "detail": ".gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "sequence",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-week2-projects",
        "description": ".gitbook.assets.cs-week2-projects",
        "peekOfCode": "sequence = [-1, 3, -2, 2]\ndef arrayMedian(sequence):\n    return statistics.median(sequence)\n# print(arrayMedian(sequence))\n#\n# s = \"TuVwXYZ\"\n#\n# # s = \"ABCDEFFDEfghCBA\"\n#\n# # def originalIncreasingSubstrings(s):",
        "detail": ".gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-week2-projects",
        "description": ".gitbook.assets.cs-week2-projects",
        "peekOfCode": "s = \"f\"\ndef increasingSubstrings(s):\n    string = ''\n    subs = []\n    i = 0\n    if len(s) == 1:\n        subs.append(s[0])\n    else:\n        for i in range(len(s) - 1):\n            # print(s[i])",
        "detail": ".gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "param1",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-week2-projects",
        "description": ".gitbook.assets.cs-week2-projects",
        "peekOfCode": "param1 = 456\nparam2 = 1734\ndef additionWithoutCarrying(param1, param2):\n    # set variable to hold the added row answers\n    result = []\n    # function to find a digit in a number\n    def find_digit(number, place):\n        return number // 10 ** place % 10\n    # get larger number\n    larger = None",
        "detail": ".gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "param2",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-week2-projects",
        "description": ".gitbook.assets.cs-week2-projects",
        "peekOfCode": "param2 = 1734\ndef additionWithoutCarrying(param1, param2):\n    # set variable to hold the added row answers\n    result = []\n    # function to find a digit in a number\n    def find_digit(number, place):\n        return number // 10 ** place % 10\n    # get larger number\n    larger = None\n    if param1 > param2:",
        "detail": ".gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-week2-projects",
        "description": ".gitbook.assets.cs-week2-projects",
        "peekOfCode": "a = [12, 134, 111, 1111, 10]\ndef evenDigitsNumber(a):\n    even_count = 0\n    for group in a:\n        if len(str(group)) % 2 == 0:\n            even_count += 1\n    return even_count\n# print(evenDigitsNumber(a))\n# You're writing a new programming language and you'd like it to have the capability of splitting a string into substrings with limited characters. More specifically, we'll call a substring good if the absolute difference in ASCII codes between any two of its characters is less than or equal to k.\n#",
        "detail": ".gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "strToSplit",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-week2-projects",
        "description": ".gitbook.assets.cs-week2-projects",
        "peekOfCode": "strToSplit = \"aaabaaabb\"\nk = 0\nstrToSplit = \"aaabaaabb\"\nk = 1\nstrToSplit = \"aaabzaaabb\"\nk = 5\ndef goodSubstrings(strToSplit, k):\n    smallest = ord(strToSplit[0])\n    largest = 0\n    subs = []",
        "detail": ".gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-week2-projects",
        "description": ".gitbook.assets.cs-week2-projects",
        "peekOfCode": "k = 0\nstrToSplit = \"aaabaaabb\"\nk = 1\nstrToSplit = \"aaabzaaabb\"\nk = 5\ndef goodSubstrings(strToSplit, k):\n    smallest = ord(strToSplit[0])\n    largest = 0\n    subs = []\n    s = ''",
        "detail": ".gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "strToSplit",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-week2-projects",
        "description": ".gitbook.assets.cs-week2-projects",
        "peekOfCode": "strToSplit = \"aaabaaabb\"\nk = 1\nstrToSplit = \"aaabzaaabb\"\nk = 5\ndef goodSubstrings(strToSplit, k):\n    smallest = ord(strToSplit[0])\n    largest = 0\n    subs = []\n    s = ''\n    for i in range(len(strToSplit)):",
        "detail": ".gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-week2-projects",
        "description": ".gitbook.assets.cs-week2-projects",
        "peekOfCode": "k = 1\nstrToSplit = \"aaabzaaabb\"\nk = 5\ndef goodSubstrings(strToSplit, k):\n    smallest = ord(strToSplit[0])\n    largest = 0\n    subs = []\n    s = ''\n    for i in range(len(strToSplit)):\n        # print('Letter', strToSplit[i],",
        "detail": ".gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "strToSplit",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-week2-projects",
        "description": ".gitbook.assets.cs-week2-projects",
        "peekOfCode": "strToSplit = \"aaabzaaabb\"\nk = 5\ndef goodSubstrings(strToSplit, k):\n    smallest = ord(strToSplit[0])\n    largest = 0\n    subs = []\n    s = ''\n    for i in range(len(strToSplit)):\n        # print('Letter', strToSplit[i],\n        #       ord(strToSplit[i]))",
        "detail": ".gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-week2-projects",
        "description": ".gitbook.assets.cs-week2-projects",
        "peekOfCode": "k = 5\ndef goodSubstrings(strToSplit, k):\n    smallest = ord(strToSplit[0])\n    largest = 0\n    subs = []\n    s = ''\n    for i in range(len(strToSplit)):\n        # print('Letter', strToSplit[i],\n        #       ord(strToSplit[i]))\n        # print(f'smallest: {smallest} largest: {largest}')",
        "detail": ".gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-week2-projects",
        "description": ".gitbook.assets.cs-week2-projects",
        "peekOfCode": "string = \"LambdaSchool\"\ndef to_lower_case(string):\n    result = ''\n    for i in range(len(string)):\n        if ord(string[i]) <= 90 or ord(string[i]) <= 65:\n            result += chr(ord(string[i]) + 32)\n        else:\n            result += string[i]\n    return result\n# print(to_lower_case(string))",
        "detail": ".gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "roman",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-week2-projects",
        "description": ".gitbook.assets.cs-week2-projects",
        "peekOfCode": "roman = 'IV'\nroman = 'XII'\nroman = \"MCMLXXXIV\"\n#  TODO finish this!\ndef roman_to_integer(roman):\n    numerals = {\n        'I': 1,\n        'V': 5,\n        'X': 10,\n        'L': 50,",
        "detail": ".gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "roman",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-week2-projects",
        "description": ".gitbook.assets.cs-week2-projects",
        "peekOfCode": "roman = 'XII'\nroman = \"MCMLXXXIV\"\n#  TODO finish this!\ndef roman_to_integer(roman):\n    numerals = {\n        'I': 1,\n        'V': 5,\n        'X': 10,\n        'L': 50,\n        'C': 100,",
        "detail": ".gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "roman",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-week2-projects",
        "description": ".gitbook.assets.cs-week2-projects",
        "peekOfCode": "roman = \"MCMLXXXIV\"\n#  TODO finish this!\ndef roman_to_integer(roman):\n    numerals = {\n        'I': 1,\n        'V': 5,\n        'X': 10,\n        'L': 50,\n        'C': 100,\n        'D': 500,",
        "detail": ".gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "lst",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-week2-projects",
        "description": ".gitbook.assets.cs-week2-projects",
        "peekOfCode": "lst = [2, 2, 3, 3, 3, 4, 4, 4, 4]\n#  O(n^2) because counting in the loop...\ndef find_lucky(lst):\n    lucky = []\n    for num in lst:\n        if num == lst.count(num):\n            lucky.append(num)\n    if not lucky:\n        return -1\n    return max(lucky)",
        "detail": ".gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "LinkedListNode",
        "kind": 6,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "class LinkedListNode():\n    def __init__(self, value):\n        self.value = value\n        self.next  = None\nx = LinkedListNode('X')\ny = LinkedListNode('Y')\nz = LinkedListNode('Z')\nx.next = y\ny.next = z\ndelete_node(y)",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "LinkedListNode",
        "kind": 6,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "class LinkedListNode():\n    def __init__(self, value):\n        self.value = value\n        self.next = None\ndef delete_node(node_to_delete):\n    next = node_to_delete.next\n    next.next = None\n    node_to_delete.value = next.value\n    node_to_delete.next = next.next\nx = LinkedListNode('X')",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "LinkedListNode",
        "kind": 6,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "class LinkedListNode():\n    def __init__(self, value):\n        self.value = value\n        self.next = None\ndef reverse(head_of_list):\n    current_node = head_of_list\n    previous_node = None\n    next_node = None\n    # Until we have 'fallen off' the end of the list\n    while current_node:",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "class ListNode(object):\n    def __init__(self, x):\n        self.value = x\n        self.next = None\n[1, 3, 4, 6]\n\"\"\"\nNote: Your solution should have O(n) time complexity, where n is the number of elements in l, since this is what you will be asked to accomplish in an interview.\nYou have a singly linked list l, which is sorted in strictly increasing order, and an integer value. Add value to the list l, preserving its original sorting.\nNote: in examples below and tests preview linked lists are presented as arrays just for simplicity of visualization: in real data you will be given a head node l of the linked list\nExample",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "class ListNode(object):\n    def __init__(self, x):\n        self.value = x\n        self.next = None\ndef mergeTwoLinkedLists(l1, l2):\n    # create empty node to hold the new merged list\n    merged_node = ListNode(0)\n    # end will hold the end node\n    end = merged_node\n    while True:",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "class ListNode(object):\n    def __init__(self, x):\n        self.value = x\n        self.next = None\ndef reverseNodesInKGroups(l, k):\n    # create an empty node to hold the new list\n    new_node = ListNode(0)\n    # set the next value to the list\n    new_node.next = l\n    # set the previous node to the new list",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "LinkedListNode",
        "kind": 6,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "class LinkedListNode:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\nclass Queue:\n    def __init__(self):\n        self.front = None\n        self.rear = None\n    def enqueue(self, item):\n        new_node = LinkedListNode(item)",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "Queue",
        "kind": 6,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "class Queue:\n    def __init__(self):\n        self.front = None\n        self.rear = None\n    def enqueue(self, item):\n        new_node = LinkedListNode(item)\n        # check if queue is empty\n        if self.is_empty():\n            self.front = new_node\n            self.rear = new_node",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "class Stack:\n    def __init__(self):\n        self.data = []\n    def push(self, item):\n        self.data.append(item)\n    # my code for peek method\n    def peek(self, item):\n        return self.data[-1]\n    def pop(self):\n        if len(self.data) > 0:",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "LinkedListNode",
        "kind": 6,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "class LinkedListNode:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\nclass Stack:\n    def __init__(self):\n        self.top = None\n    def push(self, data):\n        # create new node with data\n        new_node = LinkedListNode(data)",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "class Stack:\n    def __init__(self):\n        self.top = None\n    def push(self, data):\n        # create new node with data\n        new_node = LinkedListNode(data)\n        # set current top to new node's next\n        new_node.next = self.top\n        # reset the top pointer to the new node\n        self.top = new_node",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "class Stack(object):\n    def __init__(self):\n        \"\"\"Initialize an empty stack\"\"\"\n        self.items = []\n    def push(self, item):\n        \"\"\"Push a new item onto the stack\"\"\"\n        self.items.append(item)\n    def pop(self):\n        \"\"\"Remove and return the last item\"\"\"\n        # If the stack is empty, return None",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "MaxStack",
        "kind": 6,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "class MaxStack(object):\n    def __init__(self):\n        # Your code here\n        self.stack = Stack()\n        # self.head = []\n        self.max_stack = Stack()\n    def push(self, item):\n        \"\"\"Add a new item onto the top of our stack.\"\"\"\n        # Your code here\n        # self.head.append(item)",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "class Stack:\n    def __init__(self):\n        self.data = []\n    def push(self, item):\n        self.data.append(item)\n    def pop(self):\n        if len(self.data) > 0:\n            return self.data.pop()\n        return \"The stack is empty\"\nclass QueueTwoStacks:",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "QueueTwoStacks",
        "kind": 6,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "class QueueTwoStacks:\n    def __init__(self):\n        # Your code here\n        self.stack1 = Stack()\n        self.stack2 = Stack()\n    def enqueue(self, item):\n        # Your code here\n        self.stack1.push(item)\n    def dequeue(self):\n        # Your code here",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "class Stack:\n    def __init__(self):\n        self.items = []\n    def isEmpty(self):\n        return self.items == []\n    def push(self, item):\n        self.items.append(item)\n    def pop(self):\n        return self.items.pop()\ndef queueOnStacks(requests):",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "pivot_index",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def pivot_index(nums):\n    if len(nums) <= 1:\n        return -1\n    left = 0\n    right = sum(nums)\n    for i in range(len(nums)):\n        right -= nums[i]\n        if right == left:\n            return i\n        left += nums[i]",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "plus_one",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def plus_one(digits):\n    # check the last digit if its not 9 we just add 1\n    # if it is a 9 make it 0\n    # go left check 2nd to last if its not a 9 add 1\n    # if it is a 9\n    index = len(digits) - 1\n    while index >= 0 and digits[index] == 9:\n        digits[index] = 0\n        index -= 1\n    if index == -1:",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "buyAndSellStock",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def buyAndSellStock(prices):\n    length = len(prices)\n    # iterate array, for each item after subtract and store the amount as\n    # highest profit.. replace if needed with a higher profit\n    if prices == sorted(prices, reverse=True) or len(prices) < 2:\n        return 0\n    highest_profit = prices[1] - prices[0]\n    smallest_number = prices[0]\n    for i in range(1, length):\n        # only check if the selected number minus the smallest number before",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "alphabeticShift",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def alphabeticShift(inputString):\n    new_string = ''\n    for letter in inputString:\n        new_letter = ord(letter) + 1\n        if new_letter == 123:\n            new_letter = 97\n        new_string += chr(new_letter)\n    return new_string\n# print(alphabeticShift(inputString))\n\"\"\"",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "validParenthesesSequence",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def validParenthesesSequence(s):\n    check = []\n    if s == '':\n        return True\n    if s[0] == ')':\n        return False\n    for paren in s:\n        if paren == '(':\n            check.append(paren)\n        else:",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "delete_node",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def delete_node(node_to_delete):\n    next = node_to_delete.next\n    next.next = None\n    node_to_delete.value = next.value\n    node_to_delete.next = next.next\nx = LinkedListNode('X')\ny = LinkedListNode('Y')\nz = LinkedListNode('Z')\nx.next = y\ny.next = z",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "reverse",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def reverse(head_of_list):\n    current_node = head_of_list\n    previous_node = None\n    next_node = None\n    # Until we have 'fallen off' the end of the list\n    while current_node:\n        # Copy a pointer to the next element\n        # before we overwrite current_node.next\n        next_node = current_node.next\n        # Reverse the 'next' pointer",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "insertValueIntoSortedLinkedList",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def insertValueIntoSortedLinkedList(l, value):\n    # create a new node with the value\n    node = ListNode(value)\n    # if there is no list return the new node\n    if l == None:\n        return node\n    else:\n        # else if the list.value (first item in the list) > the new value\n        if l.value > value:\n            # set new values as the first item in the list",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "mergeTwoLinkedLists",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def mergeTwoLinkedLists(l1, l2):\n    # create empty node to hold the new merged list\n    merged_node = ListNode(0)\n    # end will hold the end node\n    end = merged_node\n    while True:\n        # if either list becomes empty join lists\n        if l1 is None:\n            end.next = l2\n            break",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "reverseNodesInKGroups",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def reverseNodesInKGroups(l, k):\n    # create an empty node to hold the new list\n    new_node = ListNode(0)\n    # set the next value to the list\n    new_node.next = l\n    # set the previous node to the new list\n    prev = new_node\n    while True:\n        # set the start to the new node next\n        start = prev.next",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "reverse_list",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def reverse_list(start, end):\n    # set the last reversed group to the new start\n    old_reversed = start\n    # set the new current to the start\n    current = start\n    # set next node to the node start is pointing to\n    next_node = start.next\n    # while the current node is not the last node\n    while current != end:\n        # iterate",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "is_valid",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def is_valid(code):\n    check = []\n    if code == '':\n        return True\n    if code[0] == ')' or code[0] == '}' or code[0] == ']':\n        return False\n    for paren in code:\n        if paren == ' ':\n            continue\n        if paren == '(' or paren == '{' or paren == '[':",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "queueOnStacks",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def queueOnStacks(requests):\n    left = Stack()\n    right = Stack()\n    def insert(x):\n        left.push(x)\n        print('queue:', left.items)\n    def remove():\n        if len(right.items) == 0:\n            while len(left.items) > 0:\n                shifted = left.pop()",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "validBracketSequence",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def validBracketSequence(sequence):\n    pairs = dict(zip('(,[,{', '),],}'))\n    stack = []\n    for item in sequence:\n        if item in pairs:\n            stack.append(pairs[item])\n        elif not (stack and item == stack.pop()):\n            return False\n    return not stack\n# print(validBracketSequence(sequence))",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "fibonacciSimpleSum2",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def fibonacciSimpleSum2(n):\n    # if 0 is less than n and n is less than 5 then we know we can return\n    # true because n will be 1-4 which can be created with 2 fib numbers\n    if 0 < n < 5:\n        return True\n    # first get fibonacci sequence up to n\n    seq = [0, 1]\n    # starting from 2 and ending at n\n    for i in range(2, n):\n        # add seq at i - 2 (0 to start) and seq at i - 1 (1 to start)",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "csBinarySearch",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def csBinarySearch(nums, target):\n    min = 0\n    max = len(nums) - 1\n    while not max < min:\n        guess = (max + min) // 2\n        if nums[guess] == target:\n            return guess\n        elif nums[guess] < target:\n            min = guess + 1\n        else:",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "csSearchRotatedSortedArray",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def csSearchRotatedSortedArray(nums, target):\n    min = 0\n    max = len(nums) - 1\n    while not max < min:\n        guess = (max + min) // 2\n        # print(f'min: {nums[min]} max: {nums[max]} guess:{nums[guess]} target:'\n        #       f' {target}')\n        # if the guess is the target we got it and return the guess\n        if nums[guess] == target:\n            # print('guessed the target')",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "linear_search",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def linear_search(arr, target):\n    # loop through each item in the input array\n    i = len(arr) - 1\n    for idx in range(len(arr)):\n        # check if the item at the current index is equal to the target\n        if arr[i] == target:\n            # return the current index as the match\n            return i\n        i -= 1\n    # if we were able to loop through the entire array, the target is not present",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "recursive_search",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def recursive_search(arr, target):\n    if arr[0] == target:\n        return True\n    elif len(arr[1:]) > 1:\n        return recursive_search(arr[1:], target)\n    return False\n# print(recursive_search(arr, target))\n\"\"\"\nBinary Search\n\"\"\"",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "binary_search",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def binary_search(arr, target):\n    # 1. Declare min = 0 and max = length of array - 1\n    min = 0\n    max = len(arr) - 1\n    while not max < min:\n        # 2. Figure out the guess value by getting the middle integer between min and max\n        guess = (max + min) // 2\n        # 3. if array[guess] equals the target, we found the element, return the index\n        if arr[guess] == target:\n            return guess",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "binary_recursive_search",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def binary_recursive_search(arr, target, min_index, max_index):\n    if min_index >= max_index:\n        return -1\n    guess = (max_index + min_index) // 2\n    if arr[guess] == target:\n        return guess\n    elif target < arr[guess]:\n        return binary_recursive_search(arr, target, min_index, guess - 1)\n    else:\n        return binary_recursive_search(arr, target, guess + 1, max_index)",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "find_rotation_point",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def find_rotation_point(surnames):\n    # Your code here\n    min = 0\n    max = len(surnames) - 1\n    while not max < min:\n        guess = (min + max) // 2\n        if surnames[guess] < surnames[guess + 1] and surnames[guess] < surnames[\n            guess - 1]:\n            return guess\n        else:",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "find_rotation_point",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def find_rotation_point(surnames):\n    # Your code here\n    # UNDERSTAND\n    # [ 6,   7, 8, 0, 1, 2, 3, 4, 5]\n    #           min max\n    #           mid\n    # [ 7, 0, 1,  2, 3, 4, 5, 6]\n    #  min\n    # max\n    # mid",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "firstDraftWithTypo",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def firstDraftWithTypo(n):\n    # Your code here\n    pass\n    contains_typo = 4\n    min = 0\n    max = len(n) - 1\n    while not max < min:\n        guess = (min + max) // 2\n        # if containsTypo were real this line would be:\n        # if containsTypo(n[guess]) and not containsTypo(n[guess -1]):",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "eating_cookies",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def eating_cookies(n, cache=None):\n    # if n < 0:\n    #     return 0\n    # if n == 0:\n    #     return 1\n    # return eating_cookies(n-1) + eating_cookies(n - 2) + eating_cookies(n -3)\n    # let the cache be 2 longer than n\n    cache = [0] * (n + 2)\n    print(cache)\n    cache[0] = 1",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "removeAdjacent",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def removeAdjacent(s):\n    # add first letter to new string\n    if s == '':\n        return s\n    new_str = s[0]\n    # iterate the string\n    for letter in s:\n        # if the next letter is the same as previous continue\n        if letter == new_str[len(new_str) - 1]:\n            continue",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "reverse_String",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def reverse_String(str):\n    i, j = 0, len(str) - 1\n    print(i, j)\n    while i < j:\n        str[i], str[j] = str[j], str[i]\n        i += 1\n        j -= 1\n    return str\n# print(reverse_String(str))\n\"\"\"",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "checkPalindrome",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def checkPalindrome(inputString):\n    return inputString == inputString[::-1]\n# print(checkPalindrome(inputString))\n\"\"\"\n*** Data Structures and Algorithms Sprint ***\n---------------------------------------------\n\"\"\"\n\"\"\"\n*** Reverse Linked List ***\n---------------------------",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "reverseLinkedList",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def reverseLinkedList(l):\n    cur = l\n    prev = None\n    next = None\n    while cur:\n        next = cur.next\n        cur.next = prev\n        prev = cur\n        cur = next\n    return prev",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "checkBlanagrams",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def checkBlanagrams(word1, word2):\n    if word1 == '' or word2 == '':\n        return False\n    work_string = ''\n    diff = 0\n    sort1 = sorted(word1)  # O(n) space O(nlogn) time\n    sort2 = sorted(word2)  # O(n) space O(nlogn) time\n    for i in range(len(word1)):  # O(n)\n        # check for substitutions\n        if sort1[i] != sort2[i]:",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "findValueSortedShiftedArray",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def findValueSortedShiftedArray(nums, target):\n    min = 0\n    max = len(nums) - 1\n    while not max < min:\n        guess = (max + min) // 2\n        if nums[guess] == target:\n            return guess\n        elif nums[min] <= nums[guess]:\n            if nums[min] <= target < nums[guess]:\n                max = guess",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "nums",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "nums = [1, 7, 3, 6, 5, 6]\n# nums = [1,2,3]\n#  O(N^2) solution\n# def pivot_index(nums):\n#     # iterate array starting at index 1\n#     # get sum of items on left of i and compare to sum of items on right of i\n#     # if they are equal return i else keep going to the next i\n#     for i in range(len(nums)):\n#         left = sum(nums[:i])\n#         right = sum(nums[i + 1:])",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "prices",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "prices = [3, 100, 1, 97]\n#\n# prices = []\n# prices = [61, 91, 6, 15, 28, 30, 39, 69, 78, 81, 62, 38, 56, 69, 22, 95, 47, 82,\n#           52, 64, 74, 97, 60, 68, 5, 23, 45, 55, 66, 57, 26, 4, 21, 65, 55, 50,\n#           41, 88, 39, 84, 77, 5, 76, 11, 3, 51, 96, 100, 13, 26, 79, 98, 84, 66,\n#           93, 65, 98, 60, 57, 35, 12, 40, 83, 62, 46, 60, 26, 94, 59, 29, 70,\n#           34, 83, 98, 89, 57, 71, 44, 23, 43, 55, 1, 70, 29, 44, 10, 70, 83, 95,\n#           96, 97, 84, 23, 16, 34, 55, 59, 73, 17, 73]\n# def buyAndSellStock(prices):",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "prices",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "prices = [6, 3, 1, 2, 5, 4]\nprices = [8, 5, 3, 1]\nprices = [3, 100, 1, 97]\ndef buyAndSellStock(prices):\n    length = len(prices)\n    # iterate array, for each item after subtract and store the amount as\n    # highest profit.. replace if needed with a higher profit\n    if prices == sorted(prices, reverse=True) or len(prices) < 2:\n        return 0\n    highest_profit = prices[1] - prices[0]",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "prices",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "prices = [8, 5, 3, 1]\nprices = [3, 100, 1, 97]\ndef buyAndSellStock(prices):\n    length = len(prices)\n    # iterate array, for each item after subtract and store the amount as\n    # highest profit.. replace if needed with a higher profit\n    if prices == sorted(prices, reverse=True) or len(prices) < 2:\n        return 0\n    highest_profit = prices[1] - prices[0]\n    smallest_number = prices[0]",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "prices",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "prices = [3, 100, 1, 97]\ndef buyAndSellStock(prices):\n    length = len(prices)\n    # iterate array, for each item after subtract and store the amount as\n    # highest profit.. replace if needed with a higher profit\n    if prices == sorted(prices, reverse=True) or len(prices) < 2:\n        return 0\n    highest_profit = prices[1] - prices[0]\n    smallest_number = prices[0]\n    for i in range(1, length):",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "inputString",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "inputString = \"crazy\"\ndef alphabeticShift(inputString):\n    new_string = ''\n    for letter in inputString:\n        new_letter = ord(letter) + 1\n        if new_letter == 123:\n            new_letter = 97\n        new_string += chr(new_letter)\n    return new_string\n# print(alphabeticShift(inputString))",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "validParenthesesSequence(s)",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "validParenthesesSequence(s) = true;\nFor s = \"()()())\", the output should be\nvalidParenthesesSequence(s) = false\n\"\"\"\ns = \"()()(())\"\ns = \"()()())\"\ndef validParenthesesSequence(s):\n    check = []\n    if s == '':\n        return True",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "validParenthesesSequence(s)",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "validParenthesesSequence(s) = false\n\"\"\"\ns = \"()()(())\"\ns = \"()()())\"\ndef validParenthesesSequence(s):\n    check = []\n    if s == '':\n        return True\n    if s[0] == ')':\n        return False",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "s = \"()()(())\"\ns = \"()()())\"\ndef validParenthesesSequence(s):\n    check = []\n    if s == '':\n        return True\n    if s[0] == ')':\n        return False\n    for paren in s:\n        if paren == '(':",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "s = \"()()())\"\ndef validParenthesesSequence(s):\n    check = []\n    if s == '':\n        return True\n    if s[0] == ')':\n        return False\n    for paren in s:\n        if paren == '(':\n            check.append(paren)",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "x = LinkedListNode('X')\ny = LinkedListNode('Y')\nz = LinkedListNode('Z')\nx.next = y\ny.next = z\ndelete_node(y)\n```\n*Note: We can do this in O(1) time and space! But be aware that our solution will have some side effects...*\n\"\"\"\nclass LinkedListNode():",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "y = LinkedListNode('Y')\nz = LinkedListNode('Z')\nx.next = y\ny.next = z\ndelete_node(y)\n```\n*Note: We can do this in O(1) time and space! But be aware that our solution will have some side effects...*\n\"\"\"\nclass LinkedListNode():\n    def __init__(self, value):",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "z = LinkedListNode('Z')\nx.next = y\ny.next = z\ndelete_node(y)\n```\n*Note: We can do this in O(1) time and space! But be aware that our solution will have some side effects...*\n\"\"\"\nclass LinkedListNode():\n    def __init__(self, value):\n        self.value = value",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "x.next",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "x.next = y\ny.next = z\ndelete_node(y)\n```\n*Note: We can do this in O(1) time and space! But be aware that our solution will have some side effects...*\n\"\"\"\nclass LinkedListNode():\n    def __init__(self, value):\n        self.value = value\n        self.next = None",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "y.next",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "y.next = z\ndelete_node(y)\n```\n*Note: We can do this in O(1) time and space! But be aware that our solution will have some side effects...*\n\"\"\"\nclass LinkedListNode():\n    def __init__(self, value):\n        self.value = value\n        self.next = None\ndef delete_node(node_to_delete):",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "x = LinkedListNode('X')\ny = LinkedListNode('Y')\nz = LinkedListNode('Z')\nx.next = y\ny.next = z\n# print(delete_node(y))\n# print(x.next.value)\n\"\"\"\nGiven a reference to the head node of a singly-linked list, write a function\nthat reverses the linked list in place. The function should return the new head",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "y = LinkedListNode('Y')\nz = LinkedListNode('Z')\nx.next = y\ny.next = z\n# print(delete_node(y))\n# print(x.next.value)\n\"\"\"\nGiven a reference to the head node of a singly-linked list, write a function\nthat reverses the linked list in place. The function should return the new head\nof the reversed list.",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "z = LinkedListNode('Z')\nx.next = y\ny.next = z\n# print(delete_node(y))\n# print(x.next.value)\n\"\"\"\nGiven a reference to the head node of a singly-linked list, write a function\nthat reverses the linked list in place. The function should return the new head\nof the reversed list.\nIn order to do this in O(1) space (in-place), you cannot make a new list, you",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "x.next",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "x.next = y\ny.next = z\n# print(delete_node(y))\n# print(x.next.value)\n\"\"\"\nGiven a reference to the head node of a singly-linked list, write a function\nthat reverses the linked list in place. The function should return the new head\nof the reversed list.\nIn order to do this in O(1) space (in-place), you cannot make a new list, you\nneed to use the existing nodes.",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "y.next",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "y.next = z\n# print(delete_node(y))\n# print(x.next.value)\n\"\"\"\nGiven a reference to the head node of a singly-linked list, write a function\nthat reverses the linked list in place. The function should return the new head\nof the reversed list.\nIn order to do this in O(1) space (in-place), you cannot make a new list, you\nneed to use the existing nodes.\nIn order to do this in O(n) time, you should only have to traverse the list",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "max_stack",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "max_stack = MaxStack()\nmax_stack.push(1)\nmax_stack.push(2)\nmax_stack.push(5)\nmax_stack.pop()\n# print(max_stack.get_max())\n\"\"\"\nYour goal is to define a `Queue` class that uses two stacks. Your `Queue` class\nshould have an `enqueue()` method and a `dequeue()` method that ensures a\n\"first in first out\" (FIFO) order.",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "code",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "code = \"{ [ ] ( ) }\"\ncode = \"{ [ ( ] ) }\"\ncode = \"{ [ }\"\ndef is_valid(code):\n    check = []\n    if code == '':\n        return True\n    if code[0] == ')' or code[0] == '}' or code[0] == ']':\n        return False\n    for paren in code:",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "code",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "code = \"{ [ ( ] ) }\"\ncode = \"{ [ }\"\ndef is_valid(code):\n    check = []\n    if code == '':\n        return True\n    if code[0] == ')' or code[0] == '}' or code[0] == ']':\n        return False\n    for paren in code:\n        if paren == ' ':",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "code",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "code = \"{ [ }\"\ndef is_valid(code):\n    check = []\n    if code == '':\n        return True\n    if code[0] == ')' or code[0] == '}' or code[0] == ']':\n        return False\n    for paren in code:\n        if paren == ' ':\n            continue",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "queueOnStacks(requests)",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "queueOnStacks(requests) = [1, 2].\nAfter the first request, the queue is {1}; after the second it is {1, 2}. Then we do the third request, \"pop\", and add the first element of the queue 1 to the answer array. The queue becomes {2}. After the fourth request, the queue is {2, 3}. Then we perform \"pop\" again and add 2 to the answer array, and the queue becomes {3}.\n\"\"\"\nrequests = [\"push 1\", \"push 2\", \"pop\", \"push 3\", \"pop\"]\nclass Stack:\n    def __init__(self):\n        self.items = []\n    def isEmpty(self):\n        return self.items == []\n    def push(self, item):",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "requests = [\"push 1\", \"push 2\", \"pop\", \"push 3\", \"pop\"]\nclass Stack:\n    def __init__(self):\n        self.items = []\n    def isEmpty(self):\n        return self.items == []\n    def push(self, item):\n        self.items.append(item)\n    def pop(self):\n        return self.items.pop()",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "sequence",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "sequence = \"()\"\ndef validBracketSequence(sequence):\n    pairs = dict(zip('(,[,{', '),],}'))\n    stack = []\n    for item in sequence:\n        if item in pairs:\n            stack.append(pairs[item])\n        elif not (stack and item == stack.pop()):\n            return False\n    return not stack",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "fibonacciSimpleSum2(n)",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "fibonacciSimpleSum2(n) = true.\nExplanation: 1 = 0 + 1 = F0 + F1.\nFor n = 11, the output should be\nfibonacciSimpleSum2(n) = true.\nExplanation: 11 = 3 + 8 = F4 + F6.\nFor n = 60, the output should be\nfibonacciSimpleSum2(n) = true.\nExplanation: 11 = 5 + 55 = F5 + F10.\nFor n = 66, the output should be\nfibonacciSimpleSum2(n) = false",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "fibonacciSimpleSum2(n)",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "fibonacciSimpleSum2(n) = true.\nExplanation: 11 = 3 + 8 = F4 + F6.\nFor n = 60, the output should be\nfibonacciSimpleSum2(n) = true.\nExplanation: 11 = 5 + 55 = F5 + F10.\nFor n = 66, the output should be\nfibonacciSimpleSum2(n) = false\n\"\"\"\ndef fibonacciSimpleSum2(n):\n    # if 0 is less than n and n is less than 5 then we know we can return",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "fibonacciSimpleSum2(n)",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "fibonacciSimpleSum2(n) = true.\nExplanation: 11 = 5 + 55 = F5 + F10.\nFor n = 66, the output should be\nfibonacciSimpleSum2(n) = false\n\"\"\"\ndef fibonacciSimpleSum2(n):\n    # if 0 is less than n and n is less than 5 then we know we can return\n    # true because n will be 1-4 which can be created with 2 fib numbers\n    if 0 < n < 5:\n        return True",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "fibonacciSimpleSum2(n)",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "fibonacciSimpleSum2(n) = false\n\"\"\"\ndef fibonacciSimpleSum2(n):\n    # if 0 is less than n and n is less than 5 then we know we can return\n    # true because n will be 1-4 which can be created with 2 fib numbers\n    if 0 < n < 5:\n        return True\n    # first get fibonacci sequence up to n\n    seq = [0, 1]\n    # starting from 2 and ending at n",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "2^n",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "2^n = 64\nlog_2 64 = 6\nWrite an exponential expression that is identical to this logarithmic expression:\nlog_2 128 = n\n2^7 = 128\nWhat keywords should you look out for that might alert you that logarithms are involved?\ndoubles, halves\n\"\"\"\n\"\"\"\nRewrite the implementation of linear search below so that the algorithm searches from the end of the list to the beginning.",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "2^7",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "2^7 = 128\nWhat keywords should you look out for that might alert you that logarithms are involved?\ndoubles, halves\n\"\"\"\n\"\"\"\nRewrite the implementation of linear search below so that the algorithm searches from the end of the list to the beginning.\n\"\"\"\ndef linear_search(arr, target):\n    # loop through each item in the input array\n    i = len(arr) - 1",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "arr = [1, 2, 3, 4, 5, 6]\ntarget = 3\n# print(linear_search(arr, target))\n\"\"\"\nWrite a recursive search function that receives as input an array of integers and a target integer value. This function should return True if the target element exists in the array, and False otherwise.\nWhat would be the base case(s) we'd have to consider for implementing this function?\nHow should our recursive solution converge on our base case(s)?\nIn your own words, write out the three rules for recursion and how you can identify when a problem is amenable to using a recursive method.\n- problem has an obvious base case\n- the data changes predictably on the way to the base case ",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "target",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "target = 3\n# print(linear_search(arr, target))\n\"\"\"\nWrite a recursive search function that receives as input an array of integers and a target integer value. This function should return True if the target element exists in the array, and False otherwise.\nWhat would be the base case(s) we'd have to consider for implementing this function?\nHow should our recursive solution converge on our base case(s)?\nIn your own words, write out the three rules for recursion and how you can identify when a problem is amenable to using a recursive method.\n- problem has an obvious base case\n- the data changes predictably on the way to the base case \n- the function must call itself",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "arr = [1, 2, 3, 4, 5, 6]\ntarget = 55\ndef binary_recursive_search(arr, target, min_index, max_index):\n    if min_index >= max_index:\n        return -1\n    guess = (max_index + min_index) // 2\n    if arr[guess] == target:\n        return guess\n    elif target < arr[guess]:\n        return binary_recursive_search(arr, target, min_index, guess - 1)",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "target",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "target = 55\ndef binary_recursive_search(arr, target, min_index, max_index):\n    if min_index >= max_index:\n        return -1\n    guess = (max_index + min_index) // 2\n    if arr[guess] == target:\n        return guess\n    elif target < arr[guess]:\n        return binary_recursive_search(arr, target, min_index, guess - 1)\n    else:",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "surnames",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "surnames = [\n    'liu',\n    'mcdowell',\n    'nixon',\n    'sparks',\n    'zhang',\n    'ahmed',  # <-- rotates here!\n    'brandt',\n    'davenport',\n    'farley',",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "surnames",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "surnames = [\n    'sparks',\n    'zhang',\n    'liu',\n    'ahmed',  # <-- rotates here!\n    'brandt',\n    'davenport',\n    'farley',\n    'glover',\n    'kennedy',",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "n = [1, 2, 3, 4, 5, 6, 7, 8, 9]\ndef firstDraftWithTypo(n):\n    # Your code here\n    pass\n    contains_typo = 4\n    min = 0\n    max = len(n) - 1\n    while not max < min:\n        guess = (min + max) // 2\n        # if containsTypo were real this line would be:",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "n = 3\ndef eating_cookies(n, cache=None):\n    # if n < 0:\n    #     return 0\n    # if n == 0:\n    #     return 1\n    # return eating_cookies(n-1) + eating_cookies(n - 2) + eating_cookies(n -3)\n    # let the cache be 2 longer than n\n    cache = [0] * (n + 2)\n    print(cache)",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "removeAdjacent(s)",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "removeAdjacent(s) = \"a\";\nFor s = \"abccaaab\", the output should be\nremoveAdjacent(s) = \"abcab\".\n\"\"\"\n# s = \"aaaaa\"\n# s = \"abccaaab\"\ndef removeAdjacent(s):\n    # add first letter to new string\n    if s == '':\n        return s",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "removeAdjacent(s)",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "removeAdjacent(s) = \"abcab\".\n\"\"\"\n# s = \"aaaaa\"\n# s = \"abccaaab\"\ndef removeAdjacent(s):\n    # add first letter to new string\n    if s == '':\n        return s\n    new_str = s[0]\n    # iterate the string",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "str",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "str = 'reverse'\ndef reverse_String(str):\n    i, j = 0, len(str) - 1\n    print(i, j)\n    while i < j:\n        str[i], str[j] = str[j], str[i]\n        i += 1\n        j -= 1\n    return str\n# print(reverse_String(str))",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "checkPalindrome(inputString)",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "checkPalindrome(inputString) = true;\nFor inputString = \"abac\", the output should be\ncheckPalindrome(inputString) = false;\nFor inputString = \"a\", the output should be\ncheckPalindrome(inputString) = true.\n\"\"\"\ninputString = \"aabaa\"\n# inputString = \"abac\"\n# inputString = \"a\"\ninputString = \"hlbeeykoqqqqokyeeblh\"",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "checkPalindrome(inputString)",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "checkPalindrome(inputString) = false;\nFor inputString = \"a\", the output should be\ncheckPalindrome(inputString) = true.\n\"\"\"\ninputString = \"aabaa\"\n# inputString = \"abac\"\n# inputString = \"a\"\ninputString = \"hlbeeykoqqqqokyeeblh\"\ndef checkPalindrome(inputString):\n    return inputString == inputString[::-1]",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "checkPalindrome(inputString)",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "checkPalindrome(inputString) = true.\n\"\"\"\ninputString = \"aabaa\"\n# inputString = \"abac\"\n# inputString = \"a\"\ninputString = \"hlbeeykoqqqqokyeeblh\"\ndef checkPalindrome(inputString):\n    return inputString == inputString[::-1]\n# print(checkPalindrome(inputString))\n\"\"\"",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "inputString",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "inputString = \"aabaa\"\n# inputString = \"abac\"\n# inputString = \"a\"\ninputString = \"hlbeeykoqqqqokyeeblh\"\ndef checkPalindrome(inputString):\n    return inputString == inputString[::-1]\n# print(checkPalindrome(inputString))\n\"\"\"\n*** Data Structures and Algorithms Sprint ***\n---------------------------------------------",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "inputString",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "inputString = \"hlbeeykoqqqqokyeeblh\"\ndef checkPalindrome(inputString):\n    return inputString == inputString[::-1]\n# print(checkPalindrome(inputString))\n\"\"\"\n*** Data Structures and Algorithms Sprint ***\n---------------------------------------------\n\"\"\"\n\"\"\"\n*** Reverse Linked List ***",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "reverseLinkedList(l)",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "reverseLinkedList(l) = [5, 4, 3, 2, 1].\n\"\"\"\n# Singly-linked lists are already defined with this interface:\n# class ListNode(object):\n#   def __init__(self, x):\n#     self.value = x\n#     self.next = None\n#\ndef reverseLinkedList(l):\n    cur = l",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "word1",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "word1 = \"tangpam\"\nword2 = \"anagram\"\ndef checkBlanagrams(word1, word2):\n    if word1 == '' or word2 == '':\n        return False\n    work_string = ''\n    diff = 0\n    sort1 = sorted(word1)  # O(n) space O(nlogn) time\n    sort2 = sorted(word2)  # O(n) space O(nlogn) time\n    for i in range(len(word1)):  # O(n)",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "word2",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "word2 = \"anagram\"\ndef checkBlanagrams(word1, word2):\n    if word1 == '' or word2 == '':\n        return False\n    work_string = ''\n    diff = 0\n    sort1 = sorted(word1)  # O(n) space O(nlogn) time\n    sort2 = sorted(word2)  # O(n) space O(nlogn) time\n    for i in range(len(word1)):  # O(n)\n        # check for substitutions",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "nums",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "nums = [4, 5, 6, 7, 0, 1, 2]\ntarget = 0\ndef findValueSortedShiftedArray(nums, target):\n    min = 0\n    max = len(nums) - 1\n    while not max < min:\n        guess = (max + min) // 2\n        if nums[guess] == target:\n            return guess\n        elif nums[min] <= nums[guess]:",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "target",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "description": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "target = 0\ndef findValueSortedShiftedArray(nums, target):\n    min = 0\n    max = len(nums) - 1\n    while not max < min:\n        guess = (max + min) // 2\n        if nums[guess] == target:\n            return guess\n        elif nums[min] <= nums[guess]:\n            if nums[min] <= target < nums[guess]:",
        "detail": ".gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "LinkedListNode",
        "kind": 6,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "class LinkedListNode():\n    def __init__(self, value):\n        self.value = value\n        self.next  = None\nx = LinkedListNode('X')\ny = LinkedListNode('Y')\nz = LinkedListNode('Z')\nx.next = y\ny.next = z\ndelete_node(y)",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "LinkedListNode",
        "kind": 6,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "class LinkedListNode():\n    def __init__(self, value):\n        self.value = value\n        self.next = None\ndef delete_node(node_to_delete):\n    next = node_to_delete.next\n    next.next = None\n    node_to_delete.value = next.value\n    node_to_delete.next = next.next\nx = LinkedListNode('X')",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "LinkedListNode",
        "kind": 6,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "class LinkedListNode():\n    def __init__(self, value):\n        self.value = value\n        self.next = None\ndef reverse(head_of_list):\n    current_node = head_of_list\n    previous_node = None\n    next_node = None\n    # Until we have 'fallen off' the end of the list\n    while current_node:",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "class ListNode(object):\n    def __init__(self, x):\n        self.value = x\n        self.next = None\n[1, 3, 4, 6]\n\"\"\"\nNote: Your solution should have O(n) time complexity, where n is the number of elements in l, since this is what you will be asked to accomplish in an interview.\nYou have a singly linked list l, which is sorted in strictly increasing order, and an integer value. Add value to the list l, preserving its original sorting.\nNote: in examples below and tests preview linked lists are presented as arrays just for simplicity of visualization: in real data you will be given a head node l of the linked list\nExample",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "class ListNode(object):\n    def __init__(self, x):\n        self.value = x\n        self.next = None\ndef mergeTwoLinkedLists(l1, l2):\n    # create empty node to hold the new merged list\n    merged_node = ListNode(0)\n    # end will hold the end node\n    end = merged_node\n    while True:",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "class ListNode(object):\n    def __init__(self, x):\n        self.value = x\n        self.next = None\ndef reverseNodesInKGroups(l, k):\n    # create an empty node to hold the new list\n    new_node = ListNode(0)\n    # set the next value to the list\n    new_node.next = l\n    # set the previous node to the new list",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "LinkedListNode",
        "kind": 6,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "class LinkedListNode:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\nclass Queue:\n    def __init__(self):\n        self.front = None\n        self.rear = None\n    def enqueue(self, item):\n        new_node = LinkedListNode(item)",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "Queue",
        "kind": 6,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "class Queue:\n    def __init__(self):\n        self.front = None\n        self.rear = None\n    def enqueue(self, item):\n        new_node = LinkedListNode(item)\n        # check if queue is empty\n        if self.is_empty():\n            self.front = new_node\n            self.rear = new_node",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "class Stack:\n    def __init__(self):\n        self.data = []\n    def push(self, item):\n        self.data.append(item)\n    # my code for peek method\n    def peek(self, item):\n        return self.data[-1]\n    def pop(self):\n        if len(self.data) > 0:",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "LinkedListNode",
        "kind": 6,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "class LinkedListNode:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\nclass Stack:\n    def __init__(self):\n        self.top = None\n    def push(self, data):\n        # create new node with data\n        new_node = LinkedListNode(data)",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "class Stack:\n    def __init__(self):\n        self.top = None\n    def push(self, data):\n        # create new node with data\n        new_node = LinkedListNode(data)\n        # set current top to new node's next\n        new_node.next = self.top\n        # reset the top pointer to the new node\n        self.top = new_node",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "class Stack(object):\n    def __init__(self):\n        \"\"\"Initialize an empty stack\"\"\"\n        self.items = []\n    def push(self, item):\n        \"\"\"Push a new item onto the stack\"\"\"\n        self.items.append(item)\n    def pop(self):\n        \"\"\"Remove and return the last item\"\"\"\n        # If the stack is empty, return None",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "MaxStack",
        "kind": 6,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "class MaxStack(object):\n    def __init__(self):\n        # Your code here\n        self.stack = Stack()\n        # self.head = []\n        self.max_stack = Stack()\n    def push(self, item):\n        \"\"\"Add a new item onto the top of our stack.\"\"\"\n        # Your code here\n        # self.head.append(item)",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "class Stack:\n    def __init__(self):\n        self.data = []\n    def push(self, item):\n        self.data.append(item)\n    def pop(self):\n        if len(self.data) > 0:\n            return self.data.pop()\n        return \"The stack is empty\"\nclass QueueTwoStacks:",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "QueueTwoStacks",
        "kind": 6,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "class QueueTwoStacks:\n    def __init__(self):\n        # Your code here\n        self.stack1 = Stack()\n        self.stack2 = Stack()\n    def enqueue(self, item):\n        # Your code here\n        self.stack1.push(item)\n    def dequeue(self):\n        # Your code here",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "class Stack:\n    def __init__(self):\n        self.items = []\n    def isEmpty(self):\n        return self.items == []\n    def push(self, item):\n        self.items.append(item)\n    def pop(self):\n        return self.items.pop()\ndef queueOnStacks(requests):",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "pivot_index",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def pivot_index(nums):\n    if len(nums) <= 1:\n        return -1\n    left = 0\n    right = sum(nums)\n    for i in range(len(nums)):\n        right -= nums[i]\n        if right == left:\n            return i\n        left += nums[i]",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "plus_one",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def plus_one(digits):\n    # check the last digit if its not 9 we just add 1\n    # if it is a 9 make it 0\n    # go left check 2nd to last if its not a 9 add 1\n    # if it is a 9\n    index = len(digits) - 1\n    while index >= 0 and digits[index] == 9:\n        digits[index] = 0\n        index -= 1\n    if index == -1:",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "buyAndSellStock",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def buyAndSellStock(prices):\n    length = len(prices)\n    # iterate array, for each item after subtract and store the amount as\n    # highest profit.. replace if needed with a higher profit\n    if prices == sorted(prices, reverse=True) or len(prices) < 2:\n        return 0\n    highest_profit = prices[1] - prices[0]\n    smallest_number = prices[0]\n    for i in range(1, length):\n        # only check if the selected number minus the smallest number before",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "alphabeticShift",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def alphabeticShift(inputString):\n    new_string = ''\n    for letter in inputString:\n        new_letter = ord(letter) + 1\n        if new_letter == 123:\n            new_letter = 97\n        new_string += chr(new_letter)\n    return new_string\n# print(alphabeticShift(inputString))\n\"\"\"",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "validParenthesesSequence",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def validParenthesesSequence(s):\n    check = []\n    if s == '':\n        return True\n    if s[0] == ')':\n        return False\n    for paren in s:\n        if paren == '(':\n            check.append(paren)\n        else:",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "delete_node",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def delete_node(node_to_delete):\n    next = node_to_delete.next\n    next.next = None\n    node_to_delete.value = next.value\n    node_to_delete.next = next.next\nx = LinkedListNode('X')\ny = LinkedListNode('Y')\nz = LinkedListNode('Z')\nx.next = y\ny.next = z",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "reverse",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def reverse(head_of_list):\n    current_node = head_of_list\n    previous_node = None\n    next_node = None\n    # Until we have 'fallen off' the end of the list\n    while current_node:\n        # Copy a pointer to the next element\n        # before we overwrite current_node.next\n        next_node = current_node.next\n        # Reverse the 'next' pointer",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "insertValueIntoSortedLinkedList",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def insertValueIntoSortedLinkedList(l, value):\n    # create a new node with the value\n    node = ListNode(value)\n    # if there is no list return the new node\n    if l == None:\n        return node\n    else:\n        # else if the list.value (first item in the list) > the new value\n        if l.value > value:\n            # set new values as the first item in the list",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "mergeTwoLinkedLists",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def mergeTwoLinkedLists(l1, l2):\n    # create empty node to hold the new merged list\n    merged_node = ListNode(0)\n    # end will hold the end node\n    end = merged_node\n    while True:\n        # if either list becomes empty join lists\n        if l1 is None:\n            end.next = l2\n            break",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "reverseNodesInKGroups",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def reverseNodesInKGroups(l, k):\n    # create an empty node to hold the new list\n    new_node = ListNode(0)\n    # set the next value to the list\n    new_node.next = l\n    # set the previous node to the new list\n    prev = new_node\n    while True:\n        # set the start to the new node next\n        start = prev.next",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "reverse_list",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def reverse_list(start, end):\n    # set the last reversed group to the new start\n    old_reversed = start\n    # set the new current to the start\n    current = start\n    # set next node to the node start is pointing to\n    next_node = start.next\n    # while the current node is not the last node\n    while current != end:\n        # iterate",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "is_valid",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def is_valid(code):\n    check = []\n    if code == '':\n        return True\n    if code[0] == ')' or code[0] == '}' or code[0] == ']':\n        return False\n    for paren in code:\n        if paren == ' ':\n            continue\n        if paren == '(' or paren == '{' or paren == '[':",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "queueOnStacks",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def queueOnStacks(requests):\n    left = Stack()\n    right = Stack()\n    def insert(x):\n        left.push(x)\n        print('queue:', left.items)\n    def remove():\n        if len(right.items) == 0:\n            while len(left.items) > 0:\n                shifted = left.pop()",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "validBracketSequence",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def validBracketSequence(sequence):\n    pairs = dict(zip('(,[,{', '),],}'))\n    stack = []\n    for item in sequence:\n        if item in pairs:\n            stack.append(pairs[item])\n        elif not (stack and item == stack.pop()):\n            return False\n    return not stack\n# print(validBracketSequence(sequence))",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "fibonacciSimpleSum2",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def fibonacciSimpleSum2(n):\n    # if 0 is less than n and n is less than 5 then we know we can return\n    # true because n will be 1-4 which can be created with 2 fib numbers\n    if 0 < n < 5:\n        return True\n    # first get fibonacci sequence up to n\n    seq = [0, 1]\n    # starting from 2 and ending at n\n    for i in range(2, n):\n        # add seq at i - 2 (0 to start) and seq at i - 1 (1 to start)",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "csBinarySearch",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def csBinarySearch(nums, target):\n    min = 0\n    max = len(nums) - 1\n    while not max < min:\n        guess = (max + min) // 2\n        if nums[guess] == target:\n            return guess\n        elif nums[guess] < target:\n            min = guess + 1\n        else:",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "csSearchRotatedSortedArray",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def csSearchRotatedSortedArray(nums, target):\n    min = 0\n    max = len(nums) - 1\n    while not max < min:\n        guess = (max + min) // 2\n        # print(f'min: {nums[min]} max: {nums[max]} guess:{nums[guess]} target:'\n        #       f' {target}')\n        # if the guess is the target we got it and return the guess\n        if nums[guess] == target:\n            # print('guessed the target')",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "linear_search",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def linear_search(arr, target):\n    # loop through each item in the input array\n    i = len(arr) - 1\n    for idx in range(len(arr)):\n        # check if the item at the current index is equal to the target\n        if arr[i] == target:\n            # return the current index as the match\n            return i\n        i -= 1\n    # if we were able to loop through the entire array, the target is not present",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "recursive_search",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def recursive_search(arr, target):\n    if arr[0] == target:\n        return True\n    elif len(arr[1:]) > 1:\n        return recursive_search(arr[1:], target)\n    return False\n# print(recursive_search(arr, target))\n\"\"\"\nBinary Search\n\"\"\"",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "binary_search",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def binary_search(arr, target):\n    # 1. Declare min = 0 and max = length of array - 1\n    min = 0\n    max = len(arr) - 1\n    while not max < min:\n        # 2. Figure out the guess value by getting the middle integer between min and max\n        guess = (max + min) // 2\n        # 3. if array[guess] equals the target, we found the element, return the index\n        if arr[guess] == target:\n            return guess",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "binary_recursive_search",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def binary_recursive_search(arr, target, min_index, max_index):\n    if min_index >= max_index:\n        return -1\n    guess = (max_index + min_index) // 2\n    if arr[guess] == target:\n        return guess\n    elif target < arr[guess]:\n        return binary_recursive_search(arr, target, min_index, guess - 1)\n    else:\n        return binary_recursive_search(arr, target, guess + 1, max_index)",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "find_rotation_point",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def find_rotation_point(surnames):\n    # Your code here\n    min = 0\n    max = len(surnames) - 1\n    while not max < min:\n        guess = (min + max) // 2\n        if surnames[guess] < surnames[guess + 1] and surnames[guess] < surnames[\n            guess - 1]:\n            return guess\n        else:",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "find_rotation_point",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def find_rotation_point(surnames):\n    # Your code here\n    # UNDERSTAND\n    # [ 6,   7, 8, 0, 1, 2, 3, 4, 5]\n    #           min max\n    #           mid\n    # [ 7, 0, 1,  2, 3, 4, 5, 6]\n    #  min\n    # max\n    # mid",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "firstDraftWithTypo",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def firstDraftWithTypo(n):\n    # Your code here\n    pass\n    contains_typo = 4\n    min = 0\n    max = len(n) - 1\n    while not max < min:\n        guess = (min + max) // 2\n        # if containsTypo were real this line would be:\n        # if containsTypo(n[guess]) and not containsTypo(n[guess -1]):",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "eating_cookies",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def eating_cookies(n, cache=None):\n    # if n < 0:\n    #     return 0\n    # if n == 0:\n    #     return 1\n    # return eating_cookies(n-1) + eating_cookies(n - 2) + eating_cookies(n -3)\n    # let the cache be 2 longer than n\n    cache = [0] * (n + 2)\n    print(cache)\n    cache[0] = 1",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "removeAdjacent",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def removeAdjacent(s):\n    # add first letter to new string\n    if s == '':\n        return s\n    new_str = s[0]\n    # iterate the string\n    for letter in s:\n        # if the next letter is the same as previous continue\n        if letter == new_str[len(new_str) - 1]:\n            continue",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "reverse_String",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def reverse_String(str):\n    i, j = 0, len(str) - 1\n    print(i, j)\n    while i < j:\n        str[i], str[j] = str[j], str[i]\n        i += 1\n        j -= 1\n    return str\n# print(reverse_String(str))\n\"\"\"",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "checkPalindrome",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def checkPalindrome(inputString):\n    return inputString == inputString[::-1]\n# print(checkPalindrome(inputString))\n\"\"\"\n*** Data Structures and Algorithms Sprint ***\n---------------------------------------------\n\"\"\"\n\"\"\"\n*** Reverse Linked List ***\n---------------------------",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "reverseLinkedList",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def reverseLinkedList(l):\n    cur = l\n    prev = None\n    next = None\n    while cur:\n        next = cur.next\n        cur.next = prev\n        prev = cur\n        cur = next\n    return prev",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "checkBlanagrams",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def checkBlanagrams(word1, word2):\n    if word1 == '' or word2 == '':\n        return False\n    work_string = ''\n    diff = 0\n    sort1 = sorted(word1)  # O(n) space O(nlogn) time\n    sort2 = sorted(word2)  # O(n) space O(nlogn) time\n    for i in range(len(word1)):  # O(n)\n        # check for substitutions\n        if sort1[i] != sort2[i]:",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "findValueSortedShiftedArray",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def findValueSortedShiftedArray(nums, target):\n    min = 0\n    max = len(nums) - 1\n    while not max < min:\n        guess = (max + min) // 2\n        if nums[guess] == target:\n            return guess\n        elif nums[min] <= nums[guess]:\n            if nums[min] <= target < nums[guess]:\n                max = guess",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "nums",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "nums = [1, 7, 3, 6, 5, 6]\n# nums = [1,2,3]\n#  O(N^2) solution\n# def pivot_index(nums):\n#     # iterate array starting at index 1\n#     # get sum of items on left of i and compare to sum of items on right of i\n#     # if they are equal return i else keep going to the next i\n#     for i in range(len(nums)):\n#         left = sum(nums[:i])\n#         right = sum(nums[i + 1:])",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "prices",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "prices = [3, 100, 1, 97]\n#\n# prices = []\n# prices = [61, 91, 6, 15, 28, 30, 39, 69, 78, 81, 62, 38, 56, 69, 22, 95, 47, 82,\n#           52, 64, 74, 97, 60, 68, 5, 23, 45, 55, 66, 57, 26, 4, 21, 65, 55, 50,\n#           41, 88, 39, 84, 77, 5, 76, 11, 3, 51, 96, 100, 13, 26, 79, 98, 84, 66,\n#           93, 65, 98, 60, 57, 35, 12, 40, 83, 62, 46, 60, 26, 94, 59, 29, 70,\n#           34, 83, 98, 89, 57, 71, 44, 23, 43, 55, 1, 70, 29, 44, 10, 70, 83, 95,\n#           96, 97, 84, 23, 16, 34, 55, 59, 73, 17, 73]\n# def buyAndSellStock(prices):",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "prices",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "prices = [6, 3, 1, 2, 5, 4]\nprices = [8, 5, 3, 1]\nprices = [3, 100, 1, 97]\ndef buyAndSellStock(prices):\n    length = len(prices)\n    # iterate array, for each item after subtract and store the amount as\n    # highest profit.. replace if needed with a higher profit\n    if prices == sorted(prices, reverse=True) or len(prices) < 2:\n        return 0\n    highest_profit = prices[1] - prices[0]",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "prices",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "prices = [8, 5, 3, 1]\nprices = [3, 100, 1, 97]\ndef buyAndSellStock(prices):\n    length = len(prices)\n    # iterate array, for each item after subtract and store the amount as\n    # highest profit.. replace if needed with a higher profit\n    if prices == sorted(prices, reverse=True) or len(prices) < 2:\n        return 0\n    highest_profit = prices[1] - prices[0]\n    smallest_number = prices[0]",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "prices",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "prices = [3, 100, 1, 97]\ndef buyAndSellStock(prices):\n    length = len(prices)\n    # iterate array, for each item after subtract and store the amount as\n    # highest profit.. replace if needed with a higher profit\n    if prices == sorted(prices, reverse=True) or len(prices) < 2:\n        return 0\n    highest_profit = prices[1] - prices[0]\n    smallest_number = prices[0]\n    for i in range(1, length):",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "inputString",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "inputString = \"crazy\"\ndef alphabeticShift(inputString):\n    new_string = ''\n    for letter in inputString:\n        new_letter = ord(letter) + 1\n        if new_letter == 123:\n            new_letter = 97\n        new_string += chr(new_letter)\n    return new_string\n# print(alphabeticShift(inputString))",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "validParenthesesSequence(s)",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "validParenthesesSequence(s) = true;\nFor s = \"()()())\", the output should be\nvalidParenthesesSequence(s) = false\n\"\"\"\ns = \"()()(())\"\ns = \"()()())\"\ndef validParenthesesSequence(s):\n    check = []\n    if s == '':\n        return True",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "validParenthesesSequence(s)",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "validParenthesesSequence(s) = false\n\"\"\"\ns = \"()()(())\"\ns = \"()()())\"\ndef validParenthesesSequence(s):\n    check = []\n    if s == '':\n        return True\n    if s[0] == ')':\n        return False",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "s = \"()()(())\"\ns = \"()()())\"\ndef validParenthesesSequence(s):\n    check = []\n    if s == '':\n        return True\n    if s[0] == ')':\n        return False\n    for paren in s:\n        if paren == '(':",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "s = \"()()())\"\ndef validParenthesesSequence(s):\n    check = []\n    if s == '':\n        return True\n    if s[0] == ')':\n        return False\n    for paren in s:\n        if paren == '(':\n            check.append(paren)",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "x = LinkedListNode('X')\ny = LinkedListNode('Y')\nz = LinkedListNode('Z')\nx.next = y\ny.next = z\ndelete_node(y)\n```\n*Note: We can do this in O(1) time and space! But be aware that our solution will have some side effects...*\n\"\"\"\nclass LinkedListNode():",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "y = LinkedListNode('Y')\nz = LinkedListNode('Z')\nx.next = y\ny.next = z\ndelete_node(y)\n```\n*Note: We can do this in O(1) time and space! But be aware that our solution will have some side effects...*\n\"\"\"\nclass LinkedListNode():\n    def __init__(self, value):",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "z = LinkedListNode('Z')\nx.next = y\ny.next = z\ndelete_node(y)\n```\n*Note: We can do this in O(1) time and space! But be aware that our solution will have some side effects...*\n\"\"\"\nclass LinkedListNode():\n    def __init__(self, value):\n        self.value = value",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "x.next",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "x.next = y\ny.next = z\ndelete_node(y)\n```\n*Note: We can do this in O(1) time and space! But be aware that our solution will have some side effects...*\n\"\"\"\nclass LinkedListNode():\n    def __init__(self, value):\n        self.value = value\n        self.next = None",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "y.next",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "y.next = z\ndelete_node(y)\n```\n*Note: We can do this in O(1) time and space! But be aware that our solution will have some side effects...*\n\"\"\"\nclass LinkedListNode():\n    def __init__(self, value):\n        self.value = value\n        self.next = None\ndef delete_node(node_to_delete):",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "x = LinkedListNode('X')\ny = LinkedListNode('Y')\nz = LinkedListNode('Z')\nx.next = y\ny.next = z\n# print(delete_node(y))\n# print(x.next.value)\n\"\"\"\nGiven a reference to the head node of a singly-linked list, write a function\nthat reverses the linked list in place. The function should return the new head",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "y = LinkedListNode('Y')\nz = LinkedListNode('Z')\nx.next = y\ny.next = z\n# print(delete_node(y))\n# print(x.next.value)\n\"\"\"\nGiven a reference to the head node of a singly-linked list, write a function\nthat reverses the linked list in place. The function should return the new head\nof the reversed list.",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "z = LinkedListNode('Z')\nx.next = y\ny.next = z\n# print(delete_node(y))\n# print(x.next.value)\n\"\"\"\nGiven a reference to the head node of a singly-linked list, write a function\nthat reverses the linked list in place. The function should return the new head\nof the reversed list.\nIn order to do this in O(1) space (in-place), you cannot make a new list, you",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "x.next",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "x.next = y\ny.next = z\n# print(delete_node(y))\n# print(x.next.value)\n\"\"\"\nGiven a reference to the head node of a singly-linked list, write a function\nthat reverses the linked list in place. The function should return the new head\nof the reversed list.\nIn order to do this in O(1) space (in-place), you cannot make a new list, you\nneed to use the existing nodes.",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "y.next",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "y.next = z\n# print(delete_node(y))\n# print(x.next.value)\n\"\"\"\nGiven a reference to the head node of a singly-linked list, write a function\nthat reverses the linked list in place. The function should return the new head\nof the reversed list.\nIn order to do this in O(1) space (in-place), you cannot make a new list, you\nneed to use the existing nodes.\nIn order to do this in O(n) time, you should only have to traverse the list",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "max_stack",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "max_stack = MaxStack()\nmax_stack.push(1)\nmax_stack.push(2)\nmax_stack.push(5)\nmax_stack.pop()\n# print(max_stack.get_max())\n\"\"\"\nYour goal is to define a `Queue` class that uses two stacks. Your `Queue` class\nshould have an `enqueue()` method and a `dequeue()` method that ensures a\n\"first in first out\" (FIFO) order.",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "code",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "code = \"{ [ ] ( ) }\"\ncode = \"{ [ ( ] ) }\"\ncode = \"{ [ }\"\ndef is_valid(code):\n    check = []\n    if code == '':\n        return True\n    if code[0] == ')' or code[0] == '}' or code[0] == ']':\n        return False\n    for paren in code:",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "code",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "code = \"{ [ ( ] ) }\"\ncode = \"{ [ }\"\ndef is_valid(code):\n    check = []\n    if code == '':\n        return True\n    if code[0] == ')' or code[0] == '}' or code[0] == ']':\n        return False\n    for paren in code:\n        if paren == ' ':",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "code",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "code = \"{ [ }\"\ndef is_valid(code):\n    check = []\n    if code == '':\n        return True\n    if code[0] == ')' or code[0] == '}' or code[0] == ']':\n        return False\n    for paren in code:\n        if paren == ' ':\n            continue",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "queueOnStacks(requests)",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "queueOnStacks(requests) = [1, 2].\nAfter the first request, the queue is {1}; after the second it is {1, 2}. Then we do the third request, \"pop\", and add the first element of the queue 1 to the answer array. The queue becomes {2}. After the fourth request, the queue is {2, 3}. Then we perform \"pop\" again and add 2 to the answer array, and the queue becomes {3}.\n\"\"\"\nrequests = [\"push 1\", \"push 2\", \"pop\", \"push 3\", \"pop\"]\nclass Stack:\n    def __init__(self):\n        self.items = []\n    def isEmpty(self):\n        return self.items == []\n    def push(self, item):",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "requests = [\"push 1\", \"push 2\", \"pop\", \"push 3\", \"pop\"]\nclass Stack:\n    def __init__(self):\n        self.items = []\n    def isEmpty(self):\n        return self.items == []\n    def push(self, item):\n        self.items.append(item)\n    def pop(self):\n        return self.items.pop()",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "sequence",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "sequence = \"()\"\ndef validBracketSequence(sequence):\n    pairs = dict(zip('(,[,{', '),],}'))\n    stack = []\n    for item in sequence:\n        if item in pairs:\n            stack.append(pairs[item])\n        elif not (stack and item == stack.pop()):\n            return False\n    return not stack",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "fibonacciSimpleSum2(n)",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "fibonacciSimpleSum2(n) = true.\nExplanation: 1 = 0 + 1 = F0 + F1.\nFor n = 11, the output should be\nfibonacciSimpleSum2(n) = true.\nExplanation: 11 = 3 + 8 = F4 + F6.\nFor n = 60, the output should be\nfibonacciSimpleSum2(n) = true.\nExplanation: 11 = 5 + 55 = F5 + F10.\nFor n = 66, the output should be\nfibonacciSimpleSum2(n) = false",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "fibonacciSimpleSum2(n)",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "fibonacciSimpleSum2(n) = true.\nExplanation: 11 = 3 + 8 = F4 + F6.\nFor n = 60, the output should be\nfibonacciSimpleSum2(n) = true.\nExplanation: 11 = 5 + 55 = F5 + F10.\nFor n = 66, the output should be\nfibonacciSimpleSum2(n) = false\n\"\"\"\ndef fibonacciSimpleSum2(n):\n    # if 0 is less than n and n is less than 5 then we know we can return",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "fibonacciSimpleSum2(n)",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "fibonacciSimpleSum2(n) = true.\nExplanation: 11 = 5 + 55 = F5 + F10.\nFor n = 66, the output should be\nfibonacciSimpleSum2(n) = false\n\"\"\"\ndef fibonacciSimpleSum2(n):\n    # if 0 is less than n and n is less than 5 then we know we can return\n    # true because n will be 1-4 which can be created with 2 fib numbers\n    if 0 < n < 5:\n        return True",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "fibonacciSimpleSum2(n)",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "fibonacciSimpleSum2(n) = false\n\"\"\"\ndef fibonacciSimpleSum2(n):\n    # if 0 is less than n and n is less than 5 then we know we can return\n    # true because n will be 1-4 which can be created with 2 fib numbers\n    if 0 < n < 5:\n        return True\n    # first get fibonacci sequence up to n\n    seq = [0, 1]\n    # starting from 2 and ending at n",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "2^n",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "2^n = 64\nlog_2 64 = 6\nWrite an exponential expression that is identical to this logarithmic expression:\nlog_2 128 = n\n2^7 = 128\nWhat keywords should you look out for that might alert you that logarithms are involved?\ndoubles, halves\n\"\"\"\n\"\"\"\nRewrite the implementation of linear search below so that the algorithm searches from the end of the list to the beginning.",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "2^7",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "2^7 = 128\nWhat keywords should you look out for that might alert you that logarithms are involved?\ndoubles, halves\n\"\"\"\n\"\"\"\nRewrite the implementation of linear search below so that the algorithm searches from the end of the list to the beginning.\n\"\"\"\ndef linear_search(arr, target):\n    # loop through each item in the input array\n    i = len(arr) - 1",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "arr = [1, 2, 3, 4, 5, 6]\ntarget = 3\n# print(linear_search(arr, target))\n\"\"\"\nWrite a recursive search function that receives as input an array of integers and a target integer value. This function should return True if the target element exists in the array, and False otherwise.\nWhat would be the base case(s) we'd have to consider for implementing this function?\nHow should our recursive solution converge on our base case(s)?\nIn your own words, write out the three rules for recursion and how you can identify when a problem is amenable to using a recursive method.\n- problem has an obvious base case\n- the data changes predictably on the way to the base case ",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "target",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "target = 3\n# print(linear_search(arr, target))\n\"\"\"\nWrite a recursive search function that receives as input an array of integers and a target integer value. This function should return True if the target element exists in the array, and False otherwise.\nWhat would be the base case(s) we'd have to consider for implementing this function?\nHow should our recursive solution converge on our base case(s)?\nIn your own words, write out the three rules for recursion and how you can identify when a problem is amenable to using a recursive method.\n- problem has an obvious base case\n- the data changes predictably on the way to the base case \n- the function must call itself",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "arr = [1, 2, 3, 4, 5, 6]\ntarget = 55\ndef binary_recursive_search(arr, target, min_index, max_index):\n    if min_index >= max_index:\n        return -1\n    guess = (max_index + min_index) // 2\n    if arr[guess] == target:\n        return guess\n    elif target < arr[guess]:\n        return binary_recursive_search(arr, target, min_index, guess - 1)",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "target",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "target = 55\ndef binary_recursive_search(arr, target, min_index, max_index):\n    if min_index >= max_index:\n        return -1\n    guess = (max_index + min_index) // 2\n    if arr[guess] == target:\n        return guess\n    elif target < arr[guess]:\n        return binary_recursive_search(arr, target, min_index, guess - 1)\n    else:",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "surnames",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "surnames = [\n    'liu',\n    'mcdowell',\n    'nixon',\n    'sparks',\n    'zhang',\n    'ahmed',  # <-- rotates here!\n    'brandt',\n    'davenport',\n    'farley',",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "surnames",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "surnames = [\n    'sparks',\n    'zhang',\n    'liu',\n    'ahmed',  # <-- rotates here!\n    'brandt',\n    'davenport',\n    'farley',\n    'glover',\n    'kennedy',",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "n = [1, 2, 3, 4, 5, 6, 7, 8, 9]\ndef firstDraftWithTypo(n):\n    # Your code here\n    pass\n    contains_typo = 4\n    min = 0\n    max = len(n) - 1\n    while not max < min:\n        guess = (min + max) // 2\n        # if containsTypo were real this line would be:",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "n = 3\ndef eating_cookies(n, cache=None):\n    # if n < 0:\n    #     return 0\n    # if n == 0:\n    #     return 1\n    # return eating_cookies(n-1) + eating_cookies(n - 2) + eating_cookies(n -3)\n    # let the cache be 2 longer than n\n    cache = [0] * (n + 2)\n    print(cache)",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "removeAdjacent(s)",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "removeAdjacent(s) = \"a\";\nFor s = \"abccaaab\", the output should be\nremoveAdjacent(s) = \"abcab\".\n\"\"\"\n# s = \"aaaaa\"\n# s = \"abccaaab\"\ndef removeAdjacent(s):\n    # add first letter to new string\n    if s == '':\n        return s",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "removeAdjacent(s)",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "removeAdjacent(s) = \"abcab\".\n\"\"\"\n# s = \"aaaaa\"\n# s = \"abccaaab\"\ndef removeAdjacent(s):\n    # add first letter to new string\n    if s == '':\n        return s\n    new_str = s[0]\n    # iterate the string",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "str",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "str = 'reverse'\ndef reverse_String(str):\n    i, j = 0, len(str) - 1\n    print(i, j)\n    while i < j:\n        str[i], str[j] = str[j], str[i]\n        i += 1\n        j -= 1\n    return str\n# print(reverse_String(str))",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "checkPalindrome(inputString)",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "checkPalindrome(inputString) = true;\nFor inputString = \"abac\", the output should be\ncheckPalindrome(inputString) = false;\nFor inputString = \"a\", the output should be\ncheckPalindrome(inputString) = true.\n\"\"\"\ninputString = \"aabaa\"\n# inputString = \"abac\"\n# inputString = \"a\"\ninputString = \"hlbeeykoqqqqokyeeblh\"",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "checkPalindrome(inputString)",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "checkPalindrome(inputString) = false;\nFor inputString = \"a\", the output should be\ncheckPalindrome(inputString) = true.\n\"\"\"\ninputString = \"aabaa\"\n# inputString = \"abac\"\n# inputString = \"a\"\ninputString = \"hlbeeykoqqqqokyeeblh\"\ndef checkPalindrome(inputString):\n    return inputString == inputString[::-1]",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "checkPalindrome(inputString)",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "checkPalindrome(inputString) = true.\n\"\"\"\ninputString = \"aabaa\"\n# inputString = \"abac\"\n# inputString = \"a\"\ninputString = \"hlbeeykoqqqqokyeeblh\"\ndef checkPalindrome(inputString):\n    return inputString == inputString[::-1]\n# print(checkPalindrome(inputString))\n\"\"\"",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "inputString",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "inputString = \"aabaa\"\n# inputString = \"abac\"\n# inputString = \"a\"\ninputString = \"hlbeeykoqqqqokyeeblh\"\ndef checkPalindrome(inputString):\n    return inputString == inputString[::-1]\n# print(checkPalindrome(inputString))\n\"\"\"\n*** Data Structures and Algorithms Sprint ***\n---------------------------------------------",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "inputString",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "inputString = \"hlbeeykoqqqqokyeeblh\"\ndef checkPalindrome(inputString):\n    return inputString == inputString[::-1]\n# print(checkPalindrome(inputString))\n\"\"\"\n*** Data Structures and Algorithms Sprint ***\n---------------------------------------------\n\"\"\"\n\"\"\"\n*** Reverse Linked List ***",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "reverseLinkedList(l)",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "reverseLinkedList(l) = [5, 4, 3, 2, 1].\n\"\"\"\n# Singly-linked lists are already defined with this interface:\n# class ListNode(object):\n#   def __init__(self, x):\n#     self.value = x\n#     self.next = None\n#\ndef reverseLinkedList(l):\n    cur = l",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "word1",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "word1 = \"tangpam\"\nword2 = \"anagram\"\ndef checkBlanagrams(word1, word2):\n    if word1 == '' or word2 == '':\n        return False\n    work_string = ''\n    diff = 0\n    sort1 = sorted(word1)  # O(n) space O(nlogn) time\n    sort2 = sorted(word2)  # O(n) space O(nlogn) time\n    for i in range(len(word1)):  # O(n)",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "word2",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "word2 = \"anagram\"\ndef checkBlanagrams(word1, word2):\n    if word1 == '' or word2 == '':\n        return False\n    work_string = ''\n    diff = 0\n    sort1 = sorted(word1)  # O(n) space O(nlogn) time\n    sort2 = sorted(word2)  # O(n) space O(nlogn) time\n    for i in range(len(word1)):  # O(n)\n        # check for substitutions",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "nums",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "nums = [4, 5, 6, 7, 0, 1, 2]\ntarget = 0\ndef findValueSortedShiftedArray(nums, target):\n    min = 0\n    max = len(nums) - 1\n    while not max < min:\n        guess = (max + min) // 2\n        if nums[guess] == target:\n            return guess\n        elif nums[min] <= nums[guess]:",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "target",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks3-4-projects",
        "description": ".gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "target = 0\ndef findValueSortedShiftedArray(nums, target):\n    min = 0\n    max = len(nums) - 1\n    while not max < min:\n        guess = (max + min) // 2\n        if nums[guess] == target:\n            return guess\n        elif nums[min] <= nums[guess]:\n            if nums[min] <= target < nums[guess]:",
        "detail": ".gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "BSTNode",
        "kind": 6,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "description": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "class BSTNode:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n    def insert(self, value):\n        if value < self.value:\n            if self.left is None:\n                self.left = BSTNode(value)\n            else:",
        "detail": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "BST",
        "kind": 6,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "description": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "class BST:\n    def __init__(self, value):\n        self.root = BSTNode(value)\n    def insert(self, value):\n        return self.root.insert(value)\n    def search(self, target):\n        return self.root.search(target)\n    def find_minimum_value(self):\n        return self.root.find_minimum_value().value\n    def delete(self, value):",
        "detail": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "BinaryTreeNode",
        "kind": 6,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "description": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "class BinaryTreeNode:\n    def __init__(self, value=0, left=None, right=None):\n        self.value = value\n        self.left = left\n        self.right = right\ndef maxDepth(self, root):\n    # if root is None return 0\n    if root is None:\n        return 0\n    # if root exists get the left depth and the right depth by recursively",
        "detail": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "description": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "class TreeNode:\n    def __init__(self, value=0, left=None, right=None):\n        self.value = value\n        self.left = left\n        self.right = right\ndef is_valid_BST(self, root):\n    # if there is no root return False\n    if root is None:\n        return True\n    # traverse the tree to make sure it is valid",
        "detail": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "description": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\ndef helper(root, res):\n    if root is None:\n        return\n    helper(root.left, res)\n    res.append(root.val)",
        "detail": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "description": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\ndef helper(root, res):\n    if root is None:\n        return\n    res.append(root.val)\n    helper(root.left, res)",
        "detail": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "description": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\ndef helper(root, res):\n    if root is None:\n        return\n    helper(root.left, res)\n    helper(root.right, res)",
        "detail": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "description": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\ndef breadth_first_traversal(root):\n    if root is None:\n        return []\n    result = []\n    queue = []",
        "detail": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "description": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n# go all the way down to left then back to root then right in iterative or\n# recursive\n# for recursive solution keep track of base case (when there is no root) and\n# the recursive way\ndef inorder_traversal(root):",
        "detail": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "description": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\ndef build_tree(preorder, inorder):\n    # inorder (left -> right -> root ->)\n    # preorder (root -> left -> right)\n    # the absolute root will be preorder[0]\n    # all items to the left of inorder[root] will be the left subtree",
        "detail": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "Graph",
        "kind": 6,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "description": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "class Graph:\n    def __init__(self):\n        self.vertices = {\n            'A': {'B': 1},\n            'B': {'C': 3, 'D': 2, 'E': 1},\n            'C': {'E': 4},\n            'D': {'E': 2},\n            'E': {'F': 3},\n            'F': {},\n            'G': {'D': 1},",
        "detail": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "Graph",
        "kind": 6,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "description": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "class Graph:\n    def __init__(self):\n        self.edges = [\n            [0, 1, 0, 0, 0, 0, 0],\n            [0, 0, 3, 3, 1, 0, 0],\n            [0, 0, 0, 0, 4, 0, 0],\n            [0, 0, 0, 0, 2, 0, 0],\n            [0, 0, 0, 0, 0, 3, 0],\n            [0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 1, 0, 0, 0],",
        "detail": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "Vertex",
        "kind": 6,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "description": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "class Vertex:\n    def __init__(self, value):\n        self.value = value\n        self.connections = {}\n    def __str__(self):\n        return str(self.value) + ' connections: ' + str(\n            [x.value for x in self.connections])\n    def add_connection(self, vert, weight=0):\n        self.connections[vert] = weight\n    def get_connections(self):",
        "detail": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "Graph",
        "kind": 6,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "description": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "class Graph:\n    def __init__(self):\n        self.vertices = {}\n        self.count = 0\n    def __contains__(self, vert):\n        return vert in self.vertices\n    def __iter__(self):\n        return iter(self.vertices.values())\n    def add_vertex(self, value):\n        self.count += 1",
        "detail": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "GraphNode",
        "kind": 6,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "description": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "class GraphNode:\n    def __init__(self, label):\n        self.label = label\n        self.neighbors = set()\n        self.color = None\ndef color_graph(graph, colors):\n    # make a graph to pass in\n    # try to get edges count\n    # edges plus 1 is colors\n    pass",
        "detail": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "Graph",
        "kind": 6,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "description": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "class Graph:\n    def __init__(self):\n        self.vertices = {\n                            \"A\": {\"B\", \"C\", \"D\"},\n                            \"B\": {},\n                            \"C\": {\"E\", \"F\"},\n                            \"D\": {\"G\"},\n                            \"E\": {\"G\"},\n                            \"F\": {\"J\"},\n                            \"G\": {},",
        "detail": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "Graph",
        "kind": 6,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "description": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "class Graph:\n    def __init__(self):\n        self.vertices = {\n                            \"A\": {\"B\", \"C\", \"D\"},\n                            \"B\": {},\n                            \"C\": {\"E\", \"F\"},\n                            \"D\": {\"G\"},\n                            \"E\": {\"G\"},\n                            \"F\": {\"J\"},\n                            \"G\": {},",
        "detail": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "description": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "class Solution:\n    def isCompleteTree(self, root: TreeNode) -> bool:\n        # we want to check each node for a right child\n        # if a right child exists and no left child exists we can return false\n        # if the left subtree is missing one or both children where the right\n        # subtree at that level has children return false\n        # init case where a node has no right child\n        no_right_child = False\n        # init case where a node has no children\n        no_children = False",
        "detail": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "maxDepth",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "description": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def maxDepth(self, root):\n    # if root is None return 0\n    if root is None:\n        return 0\n    # if root exists get the left depth and the right depth by recursively\n    # calling maxDepth on each side of the subtree\n    left_depth = self.maxDepth(root.left)\n    right_depth = self.maxDepth(root.right)\n    # if the left depth is greater than the right depth return the left depth\n    # plus 1",
        "detail": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "is_valid_BST",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "description": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def is_valid_BST(self, root):\n    # if there is no root return False\n    if root is None:\n        return True\n    # traverse the tree to make sure it is valid\n    else:\n        if root.left is None and root.right is None:\n            return True\n        elif root.left is None:\n            if root.right > root:",
        "detail": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "balancedBinaryTree",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "description": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def balancedBinaryTree(root):\n    # define method to get the height of the tree\n    def get_height(root):\n        if root is None:\n            return 0\n        return max(get_height(root.left), get_height(root.right)) + 1\n    # if the root is None return True\n    if root is None:\n        return True\n    # get the heights of each subtree",
        "detail": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "minimumDepthBinaryTree",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "description": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def minimumDepthBinaryTree(root):\n    # if root is None return 0\n    if root is None:\n        return 0\n    # if root has no children return 1\n    if root.left is None and root.right is None:\n        return 1\n    # if no left child traverse the right tree\n    if root.left is None:\n        return minimumDepthBinaryTree(root.right) + 1",
        "detail": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "helper",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "description": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def helper(root, res):\n    if root is None:\n        return\n    helper(root.left, res)\n    res.append(root.val)\n    helper(root.right, res)\ndef inorder_traversal(root):\n    result = []\n    helper(root, result)\n    return result",
        "detail": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "inorder_traversal",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "description": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def inorder_traversal(root):\n    result = []\n    helper(root, result)\n    return result\n\"\"\"\nDepth first pre-order traversal\n\"\"\"\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):",
        "detail": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "helper",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "description": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def helper(root, res):\n    if root is None:\n        return\n    res.append(root.val)\n    helper(root.left, res)\n    helper(root.right, res)\ndef preorder_traversal(root):\n    result = []\n    helper(root, result)\n    return result",
        "detail": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "preorder_traversal",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "description": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def preorder_traversal(root):\n    result = []\n    helper(root, result)\n    return result\n\"\"\"\nDepth first  first post-order traversal\n\"\"\"\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):",
        "detail": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "helper",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "description": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def helper(root, res):\n    if root is None:\n        return\n    helper(root.left, res)\n    helper(root.right, res)\n    res.append(root.val)\ndef postorder_traversal(root):\n    result = []\n    helper(root, result)\n    return result",
        "detail": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "postorder_traversal",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "description": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def postorder_traversal(root):\n    result = []\n    helper(root, result)\n    return result\n\"\"\"\nBreadth first level order traversal\n\"\"\"\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):",
        "detail": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "breadth_first_traversal",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "description": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def breadth_first_traversal(root):\n    if root is None:\n        return []\n    result = []\n    queue = []\n    queue.append(root)\n    while len(queue) != 0:\n        node = queue.pop(0)\n        result.append(node.val)\n        if node.left is not None:",
        "detail": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "inorder_traversal",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "description": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def inorder_traversal(root):\n    # base case\n    if root is None:\n        return []\n    # recursively call the function on the left child until no more left\n    # children then the root will be none and the values are returned up the\n    # chain inorder\n    return inorder_traversal(root.left) + [root.val] + inorder_traversal(\n        root.right)\n# the iterative way with a stack",
        "detail": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "build_tree",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "description": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def build_tree(preorder, inorder):\n    # inorder (left -> right -> root ->)\n    # preorder (root -> left -> right)\n    # the absolute root will be preorder[0]\n    # all items to the left of inorder[root] will be the left subtree\n    # all items to the right of inorder[root] will be the right subtree\n    # pick the next element in preorder starting with item[0]\n    # create a new node with val set to the element\n    # delete it from preorder\n    # get the index of that element from inorder list using hashMaps to",
        "detail": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "binaryTreeInOrderTraversal",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "description": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def binaryTreeInOrderTraversal(root):\n    stack = []\n    result = []\n    while root is not None or stack != []:\n        while root is not None:\n            stack.append(root)\n            root = root.left\n        root = stack.pop()\n        result.append(root.value)\n        root = root.right",
        "detail": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "traverseTree",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "description": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def traverseTree(t):\n    queue = []\n    result = []\n    if t is None:\n        return result\n    root = t\n    queue.append(root)\n    while len(queue) > 0:\n        root = queue.pop(0)\n        result.append(root.value)",
        "detail": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "treePaths",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "description": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def treePaths(t):\n    if t is None:\n        return []\n    result, stack = [], [(t, '')]\n    while stack:\n        root, el = stack.pop()\n        if root.left is None and root.right is None:\n            result.append(el + str(root.value))\n        if root.right:\n            stack.append((root.right, el + str(root.value) + '->'))",
        "detail": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "color_graph",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "description": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def color_graph(graph, colors):\n    # make a graph to pass in\n    # try to get edges count\n    # edges plus 1 is colors\n    pass\n\"\"\"\n*** Demo 2 ***\n--------------\nYou are given a 2d grid of `\"1\"`s and `\"0\"`s that represents a \"map\". The\n`\"1\"`s represent land and the `\"0\"s` represent water.",
        "detail": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "numIslands",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "description": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def numIslands(grid):\n    pass\n# print(numIslands(grid))\n\"\"\"\n*** Code signal ***\n-------------------\nYou are given a directed acyclic graph (DAG) that contains N nodes.\nWrite a function that can find all the possible paths from node 0 to node N - 1. You can return the path in any order.\ngraph[a] is a list of all nodes b for which the edge a -> b exists.\nExample:",
        "detail": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "csFindAllPathsFromAToB",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "description": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def csFindAllPathsFromAToB(graph):\n    class Graph:\n        def __init__(self):\n            self.verts = {}\n        def add_vertex(self, vert):\n            self.verts[vert] = []\n        def add_edge(self, v_from, v_to):\n            self.verts[v_from].append(v_to)\n        def is_connected(self, v_from, v_to):\n            if v_from in self.verts and v_to in self.verts:",
        "detail": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "floodfill",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "description": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def floodfill(image, row, col, color):\n    if image[row][col] != ' ':\n        return\n    image[row][col] = color\n    floodfill(row, col + 1, color)\n    floodfill(row, col - 1, color)\n    floodfill(row + 1, col, color)\n    floodfill(row - 1, col, color)\n\"\"\"\nDemo 2",
        "detail": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "find_judge",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "description": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def find_judge(N, trust):\n    \"\"\"\n    Inputs:\n    N -> int\n    trust -> List[List[int]]\n    Output:\n    int\n    \"\"\"\n    # Your code here\n\"\"\"",
        "detail": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "csFriendCircles",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "description": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def csFriendCircles(friendships):\n    # use dfs to ensure visiting every node\n    class Graph:\n        def __init__(self):\n            self.verts = {}\n        def add_vertex(self, vert):\n            self.verts[vert] = []\n        def add_edge(self, v_from, v_to):\n            self.verts[v_from].append(v_to)\n        def is_connected(self, v_from, v_to):",
        "detail": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "get_neighbors",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "description": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def get_neighbors(word):\n    neighbors = []\n    for w in words:\n        if len(w) == len(word):\n            diff = 0\n            for i in range(len(w)):\n                if w[i] != word[i]:\n                    diff += 1\n                if diff > 1:\n                    break",
        "detail": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "bfs",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "description": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def bfs(start_word, end_word):\n    print('s, e', start_word, end_word)\n    visited = set()\n    q = [[start_word]]\n    while q:\n        path = q.pop(0)\n        v = path[-1]\n        if v not in visited:\n            visited.add(v)\n            if v == end_word:",
        "detail": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "csBSTRangeSum",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "description": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def csBSTRangeSum(root, lower, upper):\n    # variable to hold running sum of target numbers\n    range = []\n    # variable to hold the current node\n    cur = root\n    # search the tree to find all numbers within the range of lower and upper\n    # dfs\n    def helper(root):\n        if root is None:\n            return",
        "detail": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "csBinaryTreeInvert",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "description": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def csBinaryTreeInvert(root):\n    # use a bft to visit all levels and switch the positions of left and\n    # right children for each node at each level\n    if root is None:\n        return []\n    result = []\n    queue = []\n    queue.append(root)\n    while len(queue) != 0:\n        node = queue.pop(0)",
        "detail": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "reversePairs",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "description": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def reversePairs(nums):\n    # EDGE CASE if the array length is less than 2 return 0\n    if len(nums) < 2:\n        return 0\n    # init i to 0 and j to 1\n    i = 0\n    j = 1\n    # init count for reverse pairs found\n    count = 0\n    # iterate the array",
        "detail": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "log2(128)",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "description": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "log2(128) = h\n2**7 = 128\n7 <~~ answer\n- Calculate the total number of nodes on a perfect binary tree, given that \n  the height of the tree is 8.\nn = 2h - 1\nn = 2**8 - 1\nn = 256 - 1\nn = 255 <~~ answer\n\"\"\"",
        "detail": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "2**7",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "description": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "2**7 = 128\n7 <~~ answer\n- Calculate the total number of nodes on a perfect binary tree, given that \n  the height of the tree is 8.\nn = 2h - 1\nn = 2**8 - 1\nn = 256 - 1\nn = 255 <~~ answer\n\"\"\"\n\"\"\"",
        "detail": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "description": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "n = 2h - 1\nn = 2**8 - 1\nn = 256 - 1\nn = 255 <~~ answer\n\"\"\"\n\"\"\"\n*** Objective 2 Challenge *** \n-----------------------------\n- In your own words, explain why an unbalanced binary search tree's \nperformance becomes degraded.",
        "detail": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "description": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "n = 2**8 - 1\nn = 256 - 1\nn = 255 <~~ answer\n\"\"\"\n\"\"\"\n*** Objective 2 Challenge *** \n-----------------------------\n- In your own words, explain why an unbalanced binary search tree's \nperformance becomes degraded.\nThe worst case performance is linear because each node would potentially need to be traversed",
        "detail": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "description": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "n = 256 - 1\nn = 255 <~~ answer\n\"\"\"\n\"\"\"\n*** Objective 2 Challenge *** \n-----------------------------\n- In your own words, explain why an unbalanced binary search tree's \nperformance becomes degraded.\nThe worst case performance is linear because each node would potentially need to be traversed\n\"\"\"",
        "detail": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "description": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "n = 255 <~~ answer\n\"\"\"\n\"\"\"\n*** Objective 2 Challenge *** \n-----------------------------\n- In your own words, explain why an unbalanced binary search tree's \nperformance becomes degraded.\nThe worst case performance is linear because each node would potentially need to be traversed\n\"\"\"\n\"\"\"",
        "detail": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "preorder",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "description": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "preorder = [5,7,22,13,9]\ninorder = [7,5,13,22,9]\nOutput:\n    5\n   / \\\n  7  22\n    /  \\\n   13   9\n   - Preorder Traversal\n--- Visit the root node first",
        "detail": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "inorder",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "description": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "inorder = [7,5,13,22,9]\nOutput:\n    5\n   / \\\n  7  22\n    /  \\\n   13   9\n   - Preorder Traversal\n--- Visit the root node first\n--- Traverse the left subtree in preorder",
        "detail": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "preorder",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "description": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "preorder = [5, 7, 22, 13, 9]\ninorder = [7, 5, 13, 22, 9]\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\ndef build_tree(preorder, inorder):\n    # inorder (left -> right -> root ->)",
        "detail": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "inorder",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "description": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "inorder = [7, 5, 13, 22, 9]\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\ndef build_tree(preorder, inorder):\n    # inorder (left -> right -> root ->)\n    # preorder (root -> left -> right)",
        "detail": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "tree",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "description": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "tree = build_tree(preorder, inorder)\n# print('tree:', inorder_traversal(tree))\n\"\"\"\n*** CodeSignal ***\n------------------\n\"\"\"\n\"\"\"\nYou are given a binary tree. Write a function that returns the binary tree's node values using an in-order traversal.\nExample:\nInput: [2,None,3,4]",
        "detail": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "description": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "t = {\n    \"value\": 1,\n    \"left\": {\n        \"value\": 2,\n        \"left\": null,\n        \"right\": {\n            \"value\": 3,\n            \"left\": null,\n            \"right\": null\n        }",
        "detail": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "traverseTree(t)",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "description": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "traverseTree(t) = [1, 2, 4, 3, 5].\nThis t looks like this:\n     1\n   /   \\\n  2     4\n   \\   /\n    3 5\n\"\"\"\nt = {\n    \"value\": 1,",
        "detail": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "description": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "t = {\n    \"value\": 1,\n    \"left\": {\n        \"value\": 2,\n        \"left\": None,\n        \"right\": {\n            \"value\": 3,\n            \"left\": None,\n            \"right\": None\n        }",
        "detail": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "description": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "t = {\n    \"value\": 5,\n    \"left\": {\n        \"value\": 2,\n        \"left\": {\n            \"value\": 10,\n            \"left\": null,\n            \"right\": null\n        },\n        \"right\": {",
        "detail": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "treePaths(t)",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "description": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "treePaths(t) = [\"5->2->10\", \"5->2->4\", \"5->-3\"].\nThe given tree looks like this:\n    5\n   / \\\n  2  -3\n / \\\n10  4\n\"\"\"\n#\n# Binary trees are already defined with this interface:",
        "detail": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "g_verts",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "description": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "g_verts = ['A', 'B', 'C', 'D', 'E']\ng = Graph()\nfor v in g_verts:\n    g.add_vertex(g)\ng.add_edge('A', 'B', 1)\ng.add_edge('B', 'C', 3)\ng.add_edge('B', 'D', 2)\ng.add_edge('E', 'D', 1)\n# for v in g:\n#     for w in v.get_connections():",
        "detail": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "g",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "description": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "g = Graph()\nfor v in g_verts:\n    g.add_vertex(g)\ng.add_edge('A', 'B', 1)\ng.add_edge('B', 'C', 3)\ng.add_edge('B', 'D', 2)\ng.add_edge('E', 'D', 1)\n# for v in g:\n#     for w in v.get_connections():\n#         print(\"( %s, %s )\" % (v.get_value(), w.get_value()))",
        "detail": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "grid",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "description": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "grid = [\n    [\"1\", \"1\", \"1\", \"1\", \"0\"],\n    [\"1\", \"1\", \"0\", \"1\", \"0\"],\n    [\"1\", \"1\", \"0\", \"0\", \"0\"],\n    [\"0\", \"0\", \"0\", \"0\", \"0\"]\n]\ndef numIslands(grid):\n    pass\n# print(numIslands(grid))\n\"\"\"",
        "detail": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "graph",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "description": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "graph = [[1, 2], [3], [3], [4], []]\ndef csFindAllPathsFromAToB(graph):\n    class Graph:\n        def __init__(self):\n            self.verts = {}\n        def add_vertex(self, vert):\n            self.verts[vert] = []\n        def add_edge(self, v_from, v_to):\n            self.verts[v_from].append(v_to)\n        def is_connected(self, v_from, v_to):",
        "detail": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "image",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "description": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "image = [[1,1,1],[1,1,0],[1,0,1]]\nsr = 1, sc = 1, newColor = 2\nOutput: [[2,2,2],[2,2,0],[2,0,1]]\nExplanation:\nFrom the center of the image (with position (sr, sc) = (1, 1)), all pixels\nconnected by a path of the same color as the starting pixel are colored with\nthe new color.\nNote the bottom corner is not colored 2, because it is not 4-directionally\nconnected to the starting pixel.\n```",
        "detail": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "sr",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "description": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "sr = 1, sc = 1, newColor = 2\nOutput: [[2,2,2],[2,2,0],[2,0,1]]\nExplanation:\nFrom the center of the image (with position (sr, sc) = (1, 1)), all pixels\nconnected by a path of the same color as the starting pixel are colored with\nthe new color.\nNote the bottom corner is not colored 2, because it is not 4-directionally\nconnected to the starting pixel.\n```\nNotes:",
        "detail": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "friendships",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "description": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "friendships = [[1, 1, 0],\n               [1, 1, 0],\n               [0, 0, 1]]\nfriendships = [[1, 1, 0],\n               [1, 1, 1],\n               [0, 1, 1]]\ndef csFriendCircles(friendships):\n    # use dfs to ensure visiting every node\n    class Graph:\n        def __init__(self):",
        "detail": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "friendships",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "description": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "friendships = [[1, 1, 0],\n               [1, 1, 1],\n               [0, 1, 1]]\ndef csFriendCircles(friendships):\n    # use dfs to ensure visiting every node\n    class Graph:\n        def __init__(self):\n            self.verts = {}\n        def add_vertex(self, vert):\n            self.verts[vert] = []",
        "detail": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "start_word",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "description": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "start_word = 'hit'\nend_word = 'cog'\nreturn: ['hit', 'hot', 'cot', 'cog'] \n\"\"\"\nwords = set()\nwith open('words.txt') as f:\n    for w in f:\n        w = w.strip().lower()\n        words.add(w)\n# create function to get all the neighbors of a word ( only 1 letter diff)",
        "detail": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "end_word",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "description": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "end_word = 'cog'\nreturn: ['hit', 'hot', 'cot', 'cog'] \n\"\"\"\nwords = set()\nwith open('words.txt') as f:\n    for w in f:\n        w = w.strip().lower()\n        words.add(w)\n# create function to get all the neighbors of a word ( only 1 letter diff)\ndef get_neighbors(word):",
        "detail": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "words",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "description": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "words = set()\nwith open('words.txt') as f:\n    for w in f:\n        w = w.strip().lower()\n        words.add(w)\n# create function to get all the neighbors of a word ( only 1 letter diff)\ndef get_neighbors(word):\n    neighbors = []\n    for w in words:\n        if len(w) == len(word):",
        "detail": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "description": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "root = [10, 5, 15, 3, 7, null, 18]\nlower = 7\nupper = 15\n         10\n         / \\\n        5  15\n       / \\    \\\n      3   7    18\nOutput:\n32",
        "detail": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "lower",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "description": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "lower = 7\nupper = 15\n         10\n         / \\\n        5  15\n       / \\    \\\n      3   7    18\nOutput:\n32\nExample 2:",
        "detail": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "upper",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "description": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "upper = 15\n         10\n         / \\\n        5  15\n       / \\    \\\n      3   7    18\nOutput:\n32\nExample 2:\nInput:",
        "detail": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "description": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "root = [10,5,15,3,7,13,18,1,null,6]\nlower = 6\nupper = 10\n           10\n          /  \\\n       5       15\n     / \\     /   \\ \n    3   7  13   18\n   /   /\n  1   6",
        "detail": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "lower",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "description": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "lower = 6\nupper = 10\n           10\n          /  \\\n       5       15\n     / \\     /   \\ \n    3   7  13   18\n   /   /\n  1   6\nOutput:",
        "detail": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "upper",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "description": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "upper = 10\n           10\n          /  \\\n       5       15\n     / \\     /   \\ \n    3   7  13   18\n   /   /\n  1   6\nOutput:\n23",
        "detail": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "description": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "root = [10, 5, 15, 3, 7, None, 18]\nlower = 7\nupper = 15\n#\n# Binary trees are already defined with this interface:\n# class Tree(object):\n#   def __init__(self, x):\n#     self.value = x\n#     self.left = None\n#     self.right = None",
        "detail": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "lower",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "description": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "lower = 7\nupper = 15\n#\n# Binary trees are already defined with this interface:\n# class Tree(object):\n#   def __init__(self, x):\n#     self.value = x\n#     self.left = None\n#     self.right = None\n#",
        "detail": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "upper",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "description": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "upper = 15\n#\n# Binary trees are already defined with this interface:\n# class Tree(object):\n#   def __init__(self, x):\n#     self.value = x\n#     self.left = None\n#     self.right = None\n#\n# Binary trees are already defined with this interface:",
        "detail": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "nums",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "description": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "nums = [1, 3, 2, 3, 1]\nprint(f'reversePairs(nums): {reversePairs(nums)}')\n\"\"\"\n958. Check Completeness of a Binary Tree\nMedium\n1072\n14\nAdd to List\nShare\nGiven the root of a binary tree, determine if it is a complete binary tree.",
        "detail": ".gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "BSTNode",
        "kind": 6,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects",
        "description": ".gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "class BSTNode:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n    def insert(self, value):\n        if value < self.value:\n            if self.left is None:\n                self.left = BSTNode(value)\n            else:",
        "detail": ".gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "BST",
        "kind": 6,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects",
        "description": ".gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "class BST:\n    def __init__(self, value):\n        self.root = BSTNode(value)\n    def insert(self, value):\n        return self.root.insert(value)\n    def search(self, target):\n        return self.root.search(target)\n    def find_minimum_value(self):\n        return self.root.find_minimum_value().value\n    def delete(self, value):",
        "detail": ".gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "BinaryTreeNode",
        "kind": 6,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects",
        "description": ".gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "class BinaryTreeNode:\n    def __init__(self, value=0, left=None, right=None):\n        self.value = value\n        self.left = left\n        self.right = right\ndef maxDepth(self, root):\n    # if root is None return 0\n    if root is None:\n        return 0\n    # if root exists get the left depth and the right depth by recursively",
        "detail": ".gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects",
        "description": ".gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "class TreeNode:\n    def __init__(self, value=0, left=None, right=None):\n        self.value = value\n        self.left = left\n        self.right = right\ndef is_valid_BST(self, root):\n    # if there is no root return False\n    if root is None:\n        return True\n    # traverse the tree to make sure it is valid",
        "detail": ".gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects",
        "description": ".gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\ndef helper(root, res):\n    if root is None:\n        return\n    helper(root.left, res)\n    res.append(root.val)",
        "detail": ".gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects",
        "description": ".gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\ndef helper(root, res):\n    if root is None:\n        return\n    res.append(root.val)\n    helper(root.left, res)",
        "detail": ".gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects",
        "description": ".gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\ndef helper(root, res):\n    if root is None:\n        return\n    helper(root.left, res)\n    helper(root.right, res)",
        "detail": ".gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects",
        "description": ".gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\ndef breadth_first_traversal(root):\n    if root is None:\n        return []\n    result = []\n    queue = []",
        "detail": ".gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects",
        "description": ".gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n# go all the way down to left then back to root then right in iterative or\n# recursive\n# for recursive solution keep track of base case (when there is no root) and\n# the recursive way\ndef inorder_traversal(root):",
        "detail": ".gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects",
        "description": ".gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\ndef build_tree(preorder, inorder):\n    # inorder (left -> right -> root ->)\n    # preorder (root -> left -> right)\n    # the absolute root will be preorder[0]\n    # all items to the left of inorder[root] will be the left subtree",
        "detail": ".gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "Graph",
        "kind": 6,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects",
        "description": ".gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "class Graph:\n    def __init__(self):\n        self.vertices = {\n            'A': {'B': 1},\n            'B': {'C': 3, 'D': 2, 'E': 1},\n            'C': {'E': 4},\n            'D': {'E': 2},\n            'E': {'F': 3},\n            'F': {},\n            'G': {'D': 1},",
        "detail": ".gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "Graph",
        "kind": 6,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects",
        "description": ".gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "class Graph:\n    def __init__(self):\n        self.edges = [\n            [0, 1, 0, 0, 0, 0, 0],\n            [0, 0, 3, 3, 1, 0, 0],\n            [0, 0, 0, 0, 4, 0, 0],\n            [0, 0, 0, 0, 2, 0, 0],\n            [0, 0, 0, 0, 0, 3, 0],\n            [0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 1, 0, 0, 0],",
        "detail": ".gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "Vertex",
        "kind": 6,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects",
        "description": ".gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "class Vertex:\n    def __init__(self, value):\n        self.value = value\n        self.connections = {}\n    def __str__(self):\n        return str(self.value) + ' connections: ' + str(\n            [x.value for x in self.connections])\n    def add_connection(self, vert, weight=0):\n        self.connections[vert] = weight\n    def get_connections(self):",
        "detail": ".gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "Graph",
        "kind": 6,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects",
        "description": ".gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "class Graph:\n    def __init__(self):\n        self.vertices = {}\n        self.count = 0\n    def __contains__(self, vert):\n        return vert in self.vertices\n    def __iter__(self):\n        return iter(self.vertices.values())\n    def add_vertex(self, value):\n        self.count += 1",
        "detail": ".gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "GraphNode",
        "kind": 6,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects",
        "description": ".gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "class GraphNode:\n    def __init__(self, label):\n        self.label = label\n        self.neighbors = set()\n        self.color = None\ndef color_graph(graph, colors):\n    # make a graph to pass in\n    # try to get edges count\n    # edges plus 1 is colors\n    pass",
        "detail": ".gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "Graph",
        "kind": 6,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects",
        "description": ".gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "class Graph:\n    def __init__(self):\n        self.vertices = {\n                            \"A\": {\"B\", \"C\", \"D\"},\n                            \"B\": {},\n                            \"C\": {\"E\", \"F\"},\n                            \"D\": {\"G\"},\n                            \"E\": {\"G\"},\n                            \"F\": {\"J\"},\n                            \"G\": {},",
        "detail": ".gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "Graph",
        "kind": 6,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects",
        "description": ".gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "class Graph:\n    def __init__(self):\n        self.vertices = {\n                            \"A\": {\"B\", \"C\", \"D\"},\n                            \"B\": {},\n                            \"C\": {\"E\", \"F\"},\n                            \"D\": {\"G\"},\n                            \"E\": {\"G\"},\n                            \"F\": {\"J\"},\n                            \"G\": {},",
        "detail": ".gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects",
        "description": ".gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "class Solution:\n    def isCompleteTree(self, root: TreeNode) -> bool:\n        # we want to check each node for a right child\n        # if a right child exists and no left child exists we can return false\n        # if the left subtree is missing one or both children where the right\n        # subtree at that level has children return false\n        # init case where a node has no right child\n        no_right_child = False\n        # init case where a node has no children\n        no_children = False",
        "detail": ".gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "maxDepth",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects",
        "description": ".gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def maxDepth(self, root):\n    # if root is None return 0\n    if root is None:\n        return 0\n    # if root exists get the left depth and the right depth by recursively\n    # calling maxDepth on each side of the subtree\n    left_depth = self.maxDepth(root.left)\n    right_depth = self.maxDepth(root.right)\n    # if the left depth is greater than the right depth return the left depth\n    # plus 1",
        "detail": ".gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "is_valid_BST",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects",
        "description": ".gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def is_valid_BST(self, root):\n    # if there is no root return False\n    if root is None:\n        return True\n    # traverse the tree to make sure it is valid\n    else:\n        if root.left is None and root.right is None:\n            return True\n        elif root.left is None:\n            if root.right > root:",
        "detail": ".gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "balancedBinaryTree",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects",
        "description": ".gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def balancedBinaryTree(root):\n    # define method to get the height of the tree\n    def get_height(root):\n        if root is None:\n            return 0\n        return max(get_height(root.left), get_height(root.right)) + 1\n    # if the root is None return True\n    if root is None:\n        return True\n    # get the heights of each subtree",
        "detail": ".gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "minimumDepthBinaryTree",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects",
        "description": ".gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def minimumDepthBinaryTree(root):\n    # if root is None return 0\n    if root is None:\n        return 0\n    # if root has no children return 1\n    if root.left is None and root.right is None:\n        return 1\n    # if no left child traverse the right tree\n    if root.left is None:\n        return minimumDepthBinaryTree(root.right) + 1",
        "detail": ".gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "helper",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects",
        "description": ".gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def helper(root, res):\n    if root is None:\n        return\n    helper(root.left, res)\n    res.append(root.val)\n    helper(root.right, res)\ndef inorder_traversal(root):\n    result = []\n    helper(root, result)\n    return result",
        "detail": ".gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "inorder_traversal",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects",
        "description": ".gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def inorder_traversal(root):\n    result = []\n    helper(root, result)\n    return result\n\"\"\"\nDepth first pre-order traversal\n\"\"\"\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):",
        "detail": ".gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "helper",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects",
        "description": ".gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def helper(root, res):\n    if root is None:\n        return\n    res.append(root.val)\n    helper(root.left, res)\n    helper(root.right, res)\ndef preorder_traversal(root):\n    result = []\n    helper(root, result)\n    return result",
        "detail": ".gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "preorder_traversal",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects",
        "description": ".gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def preorder_traversal(root):\n    result = []\n    helper(root, result)\n    return result\n\"\"\"\nDepth first  first post-order traversal\n\"\"\"\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):",
        "detail": ".gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "helper",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects",
        "description": ".gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def helper(root, res):\n    if root is None:\n        return\n    helper(root.left, res)\n    helper(root.right, res)\n    res.append(root.val)\ndef postorder_traversal(root):\n    result = []\n    helper(root, result)\n    return result",
        "detail": ".gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "postorder_traversal",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects",
        "description": ".gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def postorder_traversal(root):\n    result = []\n    helper(root, result)\n    return result\n\"\"\"\nBreadth first level order traversal\n\"\"\"\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):",
        "detail": ".gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "breadth_first_traversal",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects",
        "description": ".gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def breadth_first_traversal(root):\n    if root is None:\n        return []\n    result = []\n    queue = []\n    queue.append(root)\n    while len(queue) != 0:\n        node = queue.pop(0)\n        result.append(node.val)\n        if node.left is not None:",
        "detail": ".gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "inorder_traversal",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects",
        "description": ".gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def inorder_traversal(root):\n    # base case\n    if root is None:\n        return []\n    # recursively call the function on the left child until no more left\n    # children then the root will be none and the values are returned up the\n    # chain inorder\n    return inorder_traversal(root.left) + [root.val] + inorder_traversal(\n        root.right)\n# the iterative way with a stack",
        "detail": ".gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "build_tree",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects",
        "description": ".gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def build_tree(preorder, inorder):\n    # inorder (left -> right -> root ->)\n    # preorder (root -> left -> right)\n    # the absolute root will be preorder[0]\n    # all items to the left of inorder[root] will be the left subtree\n    # all items to the right of inorder[root] will be the right subtree\n    # pick the next element in preorder starting with item[0]\n    # create a new node with val set to the element\n    # delete it from preorder\n    # get the index of that element from inorder list using hashMaps to",
        "detail": ".gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "binaryTreeInOrderTraversal",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects",
        "description": ".gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def binaryTreeInOrderTraversal(root):\n    stack = []\n    result = []\n    while root is not None or stack != []:\n        while root is not None:\n            stack.append(root)\n            root = root.left\n        root = stack.pop()\n        result.append(root.value)\n        root = root.right",
        "detail": ".gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "traverseTree",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects",
        "description": ".gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def traverseTree(t):\n    queue = []\n    result = []\n    if t is None:\n        return result\n    root = t\n    queue.append(root)\n    while len(queue) > 0:\n        root = queue.pop(0)\n        result.append(root.value)",
        "detail": ".gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "treePaths",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects",
        "description": ".gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def treePaths(t):\n    if t is None:\n        return []\n    result, stack = [], [(t, '')]\n    while stack:\n        root, el = stack.pop()\n        if root.left is None and root.right is None:\n            result.append(el + str(root.value))\n        if root.right:\n            stack.append((root.right, el + str(root.value) + '->'))",
        "detail": ".gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "color_graph",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects",
        "description": ".gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def color_graph(graph, colors):\n    # make a graph to pass in\n    # try to get edges count\n    # edges plus 1 is colors\n    pass\n\"\"\"\n*** Demo 2 ***\n--------------\nYou are given a 2d grid of `\"1\"`s and `\"0\"`s that represents a \"map\". The\n`\"1\"`s represent land and the `\"0\"s` represent water.",
        "detail": ".gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "numIslands",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects",
        "description": ".gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def numIslands(grid):\n    pass\n# print(numIslands(grid))\n\"\"\"\n*** Code signal ***\n-------------------\nYou are given a directed acyclic graph (DAG) that contains N nodes.\nWrite a function that can find all the possible paths from node 0 to node N - 1. You can return the path in any order.\ngraph[a] is a list of all nodes b for which the edge a -> b exists.\nExample:",
        "detail": ".gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "csFindAllPathsFromAToB",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects",
        "description": ".gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def csFindAllPathsFromAToB(graph):\n    class Graph:\n        def __init__(self):\n            self.verts = {}\n        def add_vertex(self, vert):\n            self.verts[vert] = []\n        def add_edge(self, v_from, v_to):\n            self.verts[v_from].append(v_to)\n        def is_connected(self, v_from, v_to):\n            if v_from in self.verts and v_to in self.verts:",
        "detail": ".gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "floodfill",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects",
        "description": ".gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def floodfill(image, row, col, color):\n    if image[row][col] != ' ':\n        return\n    image[row][col] = color\n    floodfill(row, col + 1, color)\n    floodfill(row, col - 1, color)\n    floodfill(row + 1, col, color)\n    floodfill(row - 1, col, color)\n\"\"\"\nDemo 2",
        "detail": ".gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "find_judge",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects",
        "description": ".gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def find_judge(N, trust):\n    \"\"\"\n    Inputs:\n    N -> int\n    trust -> List[List[int]]\n    Output:\n    int\n    \"\"\"\n    # Your code here\n\"\"\"",
        "detail": ".gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "csFriendCircles",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects",
        "description": ".gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def csFriendCircles(friendships):\n    # use dfs to ensure visiting every node\n    class Graph:\n        def __init__(self):\n            self.verts = {}\n        def add_vertex(self, vert):\n            self.verts[vert] = []\n        def add_edge(self, v_from, v_to):\n            self.verts[v_from].append(v_to)\n        def is_connected(self, v_from, v_to):",
        "detail": ".gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "get_neighbors",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects",
        "description": ".gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def get_neighbors(word):\n    neighbors = []\n    for w in words:\n        if len(w) == len(word):\n            diff = 0\n            for i in range(len(w)):\n                if w[i] != word[i]:\n                    diff += 1\n                if diff > 1:\n                    break",
        "detail": ".gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "bfs",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects",
        "description": ".gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def bfs(start_word, end_word):\n    print('s, e', start_word, end_word)\n    visited = set()\n    q = [[start_word]]\n    while q:\n        path = q.pop(0)\n        v = path[-1]\n        if v not in visited:\n            visited.add(v)\n            if v == end_word:",
        "detail": ".gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "csBSTRangeSum",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects",
        "description": ".gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def csBSTRangeSum(root, lower, upper):\n    # variable to hold running sum of target numbers\n    range = []\n    # variable to hold the current node\n    cur = root\n    # search the tree to find all numbers within the range of lower and upper\n    # dfs\n    def helper(root):\n        if root is None:\n            return",
        "detail": ".gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "csBinaryTreeInvert",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects",
        "description": ".gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def csBinaryTreeInvert(root):\n    # use a bft to visit all levels and switch the positions of left and\n    # right children for each node at each level\n    if root is None:\n        return []\n    result = []\n    queue = []\n    queue.append(root)\n    while len(queue) != 0:\n        node = queue.pop(0)",
        "detail": ".gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "reversePairs",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects",
        "description": ".gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def reversePairs(nums):\n    # EDGE CASE if the array length is less than 2 return 0\n    if len(nums) < 2:\n        return 0\n    # init i to 0 and j to 1\n    i = 0\n    j = 1\n    # init count for reverse pairs found\n    count = 0\n    # iterate the array",
        "detail": ".gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "log2(128)",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects",
        "description": ".gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "log2(128) = h\n2**7 = 128\n7 <~~ answer\n- Calculate the total number of nodes on a perfect binary tree, given that \n  the height of the tree is 8.\nn = 2h - 1\nn = 2**8 - 1\nn = 256 - 1\nn = 255 <~~ answer\n\"\"\"",
        "detail": ".gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "2**7",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects",
        "description": ".gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "2**7 = 128\n7 <~~ answer\n- Calculate the total number of nodes on a perfect binary tree, given that \n  the height of the tree is 8.\nn = 2h - 1\nn = 2**8 - 1\nn = 256 - 1\nn = 255 <~~ answer\n\"\"\"\n\"\"\"",
        "detail": ".gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects",
        "description": ".gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "n = 2h - 1\nn = 2**8 - 1\nn = 256 - 1\nn = 255 <~~ answer\n\"\"\"\n\"\"\"\n*** Objective 2 Challenge *** \n-----------------------------\n- In your own words, explain why an unbalanced binary search tree's \nperformance becomes degraded.",
        "detail": ".gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects",
        "description": ".gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "n = 2**8 - 1\nn = 256 - 1\nn = 255 <~~ answer\n\"\"\"\n\"\"\"\n*** Objective 2 Challenge *** \n-----------------------------\n- In your own words, explain why an unbalanced binary search tree's \nperformance becomes degraded.\nThe worst case performance is linear because each node would potentially need to be traversed",
        "detail": ".gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects",
        "description": ".gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "n = 256 - 1\nn = 255 <~~ answer\n\"\"\"\n\"\"\"\n*** Objective 2 Challenge *** \n-----------------------------\n- In your own words, explain why an unbalanced binary search tree's \nperformance becomes degraded.\nThe worst case performance is linear because each node would potentially need to be traversed\n\"\"\"",
        "detail": ".gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects",
        "description": ".gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "n = 255 <~~ answer\n\"\"\"\n\"\"\"\n*** Objective 2 Challenge *** \n-----------------------------\n- In your own words, explain why an unbalanced binary search tree's \nperformance becomes degraded.\nThe worst case performance is linear because each node would potentially need to be traversed\n\"\"\"\n\"\"\"",
        "detail": ".gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "preorder",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects",
        "description": ".gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "preorder = [5,7,22,13,9]\ninorder = [7,5,13,22,9]\nOutput:\n    5\n   / \\\n  7  22\n    /  \\\n   13   9\n   - Preorder Traversal\n--- Visit the root node first",
        "detail": ".gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "inorder",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects",
        "description": ".gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "inorder = [7,5,13,22,9]\nOutput:\n    5\n   / \\\n  7  22\n    /  \\\n   13   9\n   - Preorder Traversal\n--- Visit the root node first\n--- Traverse the left subtree in preorder",
        "detail": ".gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "preorder",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects",
        "description": ".gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "preorder = [5, 7, 22, 13, 9]\ninorder = [7, 5, 13, 22, 9]\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\ndef build_tree(preorder, inorder):\n    # inorder (left -> right -> root ->)",
        "detail": ".gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "inorder",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects",
        "description": ".gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "inorder = [7, 5, 13, 22, 9]\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\ndef build_tree(preorder, inorder):\n    # inorder (left -> right -> root ->)\n    # preorder (root -> left -> right)",
        "detail": ".gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "tree",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects",
        "description": ".gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "tree = build_tree(preorder, inorder)\n# print('tree:', inorder_traversal(tree))\n\"\"\"\n*** CodeSignal ***\n------------------\n\"\"\"\n\"\"\"\nYou are given a binary tree. Write a function that returns the binary tree's node values using an in-order traversal.\nExample:\nInput: [2,None,3,4]",
        "detail": ".gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects",
        "description": ".gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "t = {\n    \"value\": 1,\n    \"left\": {\n        \"value\": 2,\n        \"left\": null,\n        \"right\": {\n            \"value\": 3,\n            \"left\": null,\n            \"right\": null\n        }",
        "detail": ".gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "traverseTree(t)",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects",
        "description": ".gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "traverseTree(t) = [1, 2, 4, 3, 5].\nThis t looks like this:\n     1\n   /   \\\n  2     4\n   \\   /\n    3 5\n\"\"\"\nt = {\n    \"value\": 1,",
        "detail": ".gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects",
        "description": ".gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "t = {\n    \"value\": 1,\n    \"left\": {\n        \"value\": 2,\n        \"left\": None,\n        \"right\": {\n            \"value\": 3,\n            \"left\": None,\n            \"right\": None\n        }",
        "detail": ".gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects",
        "description": ".gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "t = {\n    \"value\": 5,\n    \"left\": {\n        \"value\": 2,\n        \"left\": {\n            \"value\": 10,\n            \"left\": null,\n            \"right\": null\n        },\n        \"right\": {",
        "detail": ".gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "treePaths(t)",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects",
        "description": ".gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "treePaths(t) = [\"5->2->10\", \"5->2->4\", \"5->-3\"].\nThe given tree looks like this:\n    5\n   / \\\n  2  -3\n / \\\n10  4\n\"\"\"\n#\n# Binary trees are already defined with this interface:",
        "detail": ".gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "g_verts",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects",
        "description": ".gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "g_verts = ['A', 'B', 'C', 'D', 'E']\ng = Graph()\nfor v in g_verts:\n    g.add_vertex(g)\ng.add_edge('A', 'B', 1)\ng.add_edge('B', 'C', 3)\ng.add_edge('B', 'D', 2)\ng.add_edge('E', 'D', 1)\n# for v in g:\n#     for w in v.get_connections():",
        "detail": ".gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "g",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects",
        "description": ".gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "g = Graph()\nfor v in g_verts:\n    g.add_vertex(g)\ng.add_edge('A', 'B', 1)\ng.add_edge('B', 'C', 3)\ng.add_edge('B', 'D', 2)\ng.add_edge('E', 'D', 1)\n# for v in g:\n#     for w in v.get_connections():\n#         print(\"( %s, %s )\" % (v.get_value(), w.get_value()))",
        "detail": ".gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "grid",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects",
        "description": ".gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "grid = [\n    [\"1\", \"1\", \"1\", \"1\", \"0\"],\n    [\"1\", \"1\", \"0\", \"1\", \"0\"],\n    [\"1\", \"1\", \"0\", \"0\", \"0\"],\n    [\"0\", \"0\", \"0\", \"0\", \"0\"]\n]\ndef numIslands(grid):\n    pass\n# print(numIslands(grid))\n\"\"\"",
        "detail": ".gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "graph",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects",
        "description": ".gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "graph = [[1, 2], [3], [3], [4], []]\ndef csFindAllPathsFromAToB(graph):\n    class Graph:\n        def __init__(self):\n            self.verts = {}\n        def add_vertex(self, vert):\n            self.verts[vert] = []\n        def add_edge(self, v_from, v_to):\n            self.verts[v_from].append(v_to)\n        def is_connected(self, v_from, v_to):",
        "detail": ".gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "image",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects",
        "description": ".gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "image = [[1,1,1],[1,1,0],[1,0,1]]\nsr = 1, sc = 1, newColor = 2\nOutput: [[2,2,2],[2,2,0],[2,0,1]]\nExplanation:\nFrom the center of the image (with position (sr, sc) = (1, 1)), all pixels\nconnected by a path of the same color as the starting pixel are colored with\nthe new color.\nNote the bottom corner is not colored 2, because it is not 4-directionally\nconnected to the starting pixel.\n```",
        "detail": ".gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "sr",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects",
        "description": ".gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "sr = 1, sc = 1, newColor = 2\nOutput: [[2,2,2],[2,2,0],[2,0,1]]\nExplanation:\nFrom the center of the image (with position (sr, sc) = (1, 1)), all pixels\nconnected by a path of the same color as the starting pixel are colored with\nthe new color.\nNote the bottom corner is not colored 2, because it is not 4-directionally\nconnected to the starting pixel.\n```\nNotes:",
        "detail": ".gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "friendships",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects",
        "description": ".gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "friendships = [[1, 1, 0],\n               [1, 1, 0],\n               [0, 0, 1]]\nfriendships = [[1, 1, 0],\n               [1, 1, 1],\n               [0, 1, 1]]\ndef csFriendCircles(friendships):\n    # use dfs to ensure visiting every node\n    class Graph:\n        def __init__(self):",
        "detail": ".gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "friendships",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects",
        "description": ".gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "friendships = [[1, 1, 0],\n               [1, 1, 1],\n               [0, 1, 1]]\ndef csFriendCircles(friendships):\n    # use dfs to ensure visiting every node\n    class Graph:\n        def __init__(self):\n            self.verts = {}\n        def add_vertex(self, vert):\n            self.verts[vert] = []",
        "detail": ".gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "start_word",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects",
        "description": ".gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "start_word = 'hit'\nend_word = 'cog'\nreturn: ['hit', 'hot', 'cot', 'cog'] \n\"\"\"\nwords = set()\nwith open('words.txt') as f:\n    for w in f:\n        w = w.strip().lower()\n        words.add(w)\n# create function to get all the neighbors of a word ( only 1 letter diff)",
        "detail": ".gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "end_word",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects",
        "description": ".gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "end_word = 'cog'\nreturn: ['hit', 'hot', 'cot', 'cog'] \n\"\"\"\nwords = set()\nwith open('words.txt') as f:\n    for w in f:\n        w = w.strip().lower()\n        words.add(w)\n# create function to get all the neighbors of a word ( only 1 letter diff)\ndef get_neighbors(word):",
        "detail": ".gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "words",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects",
        "description": ".gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "words = set()\nwith open('words.txt') as f:\n    for w in f:\n        w = w.strip().lower()\n        words.add(w)\n# create function to get all the neighbors of a word ( only 1 letter diff)\ndef get_neighbors(word):\n    neighbors = []\n    for w in words:\n        if len(w) == len(word):",
        "detail": ".gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects",
        "description": ".gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "root = [10, 5, 15, 3, 7, null, 18]\nlower = 7\nupper = 15\n         10\n         / \\\n        5  15\n       / \\    \\\n      3   7    18\nOutput:\n32",
        "detail": ".gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "lower",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects",
        "description": ".gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "lower = 7\nupper = 15\n         10\n         / \\\n        5  15\n       / \\    \\\n      3   7    18\nOutput:\n32\nExample 2:",
        "detail": ".gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "upper",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects",
        "description": ".gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "upper = 15\n         10\n         / \\\n        5  15\n       / \\    \\\n      3   7    18\nOutput:\n32\nExample 2:\nInput:",
        "detail": ".gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects",
        "description": ".gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "root = [10,5,15,3,7,13,18,1,null,6]\nlower = 6\nupper = 10\n           10\n          /  \\\n       5       15\n     / \\     /   \\ \n    3   7  13   18\n   /   /\n  1   6",
        "detail": ".gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "lower",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects",
        "description": ".gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "lower = 6\nupper = 10\n           10\n          /  \\\n       5       15\n     / \\     /   \\ \n    3   7  13   18\n   /   /\n  1   6\nOutput:",
        "detail": ".gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "upper",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects",
        "description": ".gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "upper = 10\n           10\n          /  \\\n       5       15\n     / \\     /   \\ \n    3   7  13   18\n   /   /\n  1   6\nOutput:\n23",
        "detail": ".gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects",
        "description": ".gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "root = [10, 5, 15, 3, 7, None, 18]\nlower = 7\nupper = 15\n#\n# Binary trees are already defined with this interface:\n# class Tree(object):\n#   def __init__(self, x):\n#     self.value = x\n#     self.left = None\n#     self.right = None",
        "detail": ".gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "lower",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects",
        "description": ".gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "lower = 7\nupper = 15\n#\n# Binary trees are already defined with this interface:\n# class Tree(object):\n#   def __init__(self, x):\n#     self.value = x\n#     self.left = None\n#     self.right = None\n#",
        "detail": ".gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "upper",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects",
        "description": ".gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "upper = 15\n#\n# Binary trees are already defined with this interface:\n# class Tree(object):\n#   def __init__(self, x):\n#     self.value = x\n#     self.left = None\n#     self.right = None\n#\n# Binary trees are already defined with this interface:",
        "detail": ".gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "nums",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks5-6-projects",
        "description": ".gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "nums = [1, 3, 2, 3, 1]\nprint(f'reversePairs(nums): {reversePairs(nums)}')\n\"\"\"\n958. Check Completeness of a Binary Tree\nMedium\n1072\n14\nAdd to List\nShare\nGiven the root of a binary tree, determine if it is a complete binary tree.",
        "detail": ".gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "description": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "class ListNode:\n    def __init__(self, key, value):\n        self.key = key\n        self.value = value\n        self.next = None\nclass MyHashTable:\n    def __init__(self):\n        # Your code here\n        self.size = 10\n        self.keys = [None] * self.size",
        "detail": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "MyHashTable",
        "kind": 6,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "description": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "class MyHashTable:\n    def __init__(self):\n        # Your code here\n        self.size = 10\n        self.keys = [None] * self.size\n        self.values = [None] * self.size\n        self.item_count = 0\n    def djb2(self, key):\n        str_key = str(key).encode()\n        hash_value = 5381",
        "detail": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "are_words_sorted",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "description": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "def are_words_sorted(words, alpha_order):\n    \"\"\"\n    Inputs:\n    words: List[str]\n    alpha_order: str\n    Output:\n    bool\n    \"\"\"\n    # Your code here\n    # map the letters of the string alpha_order to a dictionary",
        "detail": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "csFindTheSingleNumber",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "description": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "def csFindTheSingleNumber(nums):\n    appearances = {}\n    # hash the list into a dict with the number of appearances being the value\n    # and the number itself as the key\n    for num in nums:\n        if num in appearances:\n            appearances[num] += 1\n        else:\n            appearances[num] = 1\n    # return the key with the value of 1",
        "detail": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "csAverageOfTopFive",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "description": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "def csAverageOfTopFive(scores):\n    students_scores = {}\n    # create a dict with each student as the key and an array of their scores\n    # as the value\n    for score in scores:\n        student = score[0]\n        num = score[1]\n        if student in students_scores:\n            students_scores[student].append(num)\n        else:",
        "detail": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "csMaxNumberOfLambdas",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "description": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "def csMaxNumberOfLambdas(text):\n    # create dict to hold number of times letters in lambda appear\n    # (the letter 'a' will need to be twice the amount of other letters for\n    # each valid lambda)\n    lambdas = {\"l\": 0, \"a\": 0, \"m\": 0, \"b\": 0, \"d\": 0}\n    # get number count for valid letters from \"text\"\n    for letter in text:\n        if letter in lambdas:\n            lambdas[letter] += 1\n    minimum_letter = lambdas['l']",
        "detail": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "top_k_frequent",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "description": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "def top_k_frequent(words, k):\n    \"\"\"\n    Input:\n    words -> List[str]\n    k -> int\n    Output:\n    List[str]\n    \"\"\"\n    # create dict to hold words frequencies\n    word_freqs = {}",
        "detail": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "frequency_sort",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "description": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "def frequency_sort(s: str) -> str:\n    \"\"\"\n    Inputs:\n    s -> str\n    Output:\n    str\n    \"\"\"\n    letter_freq = {}\n    for char in s:\n        if char not in letter_freq:",
        "detail": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "csIsomorphicStrings",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "description": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "def csIsomorphicStrings(a, b):\n    if len(set(a)) == len(set(b)):\n        return True\n    return False\n# print(csIsomorphicStrings(a, b))\n\"\"\"\n*** csWordPattern ***\n---------------------\nGiven a pattern and a string a, find if a follows the same pattern.\nHere, to \"follow\" means a full match, such that there is a one-to-one correspondence between a letter in pattern and a non-empty word in s.",
        "detail": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "csWordPattern",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "description": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "def csWordPattern(pattern, a):\n    word_arr = a.split(' ')\n    if len(pattern) != len(word_arr):\n        return False\n    pattern_map = {}\n    for i in range(len(pattern)):\n        if pattern[i] not in pattern_map:\n            if word_arr[i] not in pattern_map.values():\n                pattern_map[pattern[i]] = word_arr[i]\n            else:",
        "detail": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "csGroupAnagrams",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "description": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "def csGroupAnagrams(strs):\n    result = {}\n    for w in strs:\n        signature = ''.join(sorted(w))\n        if signature not in result:\n            result[signature] = []\n        result[signature].append(w)\n    all_results = []\n    for item in result:\n        all_results.append(result[item])",
        "detail": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "condense_linked_list",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "description": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "def condense_linked_list(node):\n    # keep track of seen values\n    seen_values = []\n    cur = node\n    prev = None\n    # iterate linked list from the head\n    while cur is not None:\n        print(cur.value)\n        # if current is in seen values\n        if cur.value in seen_values:",
        "detail": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "first_not_repeating_character",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "description": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "def first_not_repeating_character(s):\n    # create hashmap of string and occurences of letters\n    # return the first key with the value of 1\n    chars = {}\n    for letter in s:\n        if letter not in chars:\n            chars[letter] = 1\n        else:\n            chars[letter] += 1\n    for key in chars:",
        "detail": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "uncover_spy",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "description": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "def uncover_spy(n, trust):\n    # create map of people who trust\n    # return the person who trusts no one\n    trusts = {}\n    trusted = {}\n    for i in range(1, n + 1):\n        trusts[i] = []\n        trusted[i] = []\n    for group in trust:\n        if group[0] in trusts:",
        "detail": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "hash_table",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "description": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "hash_table = MyHashTable();\nhash_table.put(\"a\", 1);\nhash_table.put(\"b\", 2);\nhash_table.get(\"a\");            // returns 1\nhash_table.get(\"c\");            // returns -1 (not found)\nhash_table.put(\"b\", 1);         // update the existing value\nhash_table.get(\"b\");            // returns 1\nhash_table.remove(\"b\");         // remove the mapping for 2\nhash_table.get(\"b\");            // returns -1 (not found)\n```",
        "detail": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "words",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "description": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "words = [\"lambd\", \"school\"]\norder = \"hlabcdefgijkmnopqrstuvwxyz\"\ndef are_words_sorted(words, alpha_order):\n    \"\"\"\n    Inputs:\n    words: List[str]\n    alpha_order: str\n    Output:\n    bool\n    \"\"\"",
        "detail": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "order",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "description": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "order = \"hlabcdefgijkmnopqrstuvwxyz\"\ndef are_words_sorted(words, alpha_order):\n    \"\"\"\n    Inputs:\n    words: List[str]\n    alpha_order: str\n    Output:\n    bool\n    \"\"\"\n    # Your code here",
        "detail": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "nums",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "description": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "nums = [1, 1, 2, 1]\ndef csFindTheSingleNumber(nums):\n    appearances = {}\n    # hash the list into a dict with the number of appearances being the value\n    # and the number itself as the key\n    for num in nums:\n        if num in appearances:\n            appearances[num] += 1\n        else:\n            appearances[num] = 1",
        "detail": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "scores",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "description": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "scores = [[1, 91], [1, 92], [2, 93], [2, 97], [1, 60], [2, 77], [1, 65],\n          [1, 87], [1, 100], [2, 100], [2, 76]]\ndef csAverageOfTopFive(scores):\n    students_scores = {}\n    # create a dict with each student as the key and an array of their scores\n    # as the value\n    for score in scores:\n        student = score[0]\n        num = score[1]\n        if student in students_scores:",
        "detail": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "text",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "description": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "text = \"mbxcdatllaas\"\n# text = \"sctlamb\"\n# text = \"lalaaxcmbdtsumbdav\"\ndef csMaxNumberOfLambdas(text):\n    # create dict to hold number of times letters in lambda appear\n    # (the letter 'a' will need to be twice the amount of other letters for\n    # each valid lambda)\n    lambdas = {\"l\": 0, \"a\": 0, \"m\": 0, \"b\": 0, \"d\": 0}\n    # get number count for valid letters from \"text\"\n    for letter in text:",
        "detail": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "words",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "description": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "words = [\"lambda\", \"school\", \"rules\", \"lambda\", \"school\", \"rocks\"]\nk = 2\nOutput:\n[\"lambda\", \"school\"]\nExplanation:\n\"lambda\" and \"school\" are the two most frequent words.\n```\nExample 2:\n```plaintext\nInput:",
        "detail": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "description": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "k = 2\nOutput:\n[\"lambda\", \"school\"]\nExplanation:\n\"lambda\" and \"school\" are the two most frequent words.\n```\nExample 2:\n```plaintext\nInput:\nwords = [\"the\", \"sky\", \"is\", \"cloudy\", \"the\", \"the\", \"the\", \"cloudy\", \"is\", \"is\"]",
        "detail": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "words",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "description": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "words = [\"the\", \"sky\", \"is\", \"cloudy\", \"the\", \"the\", \"the\", \"cloudy\", \"is\", \"is\"]\nk = 4\nOutput:\n[\"the\", \"is\", \"cloudy\", \"sky\"]\nExplanation:\n\"the\", \"is\", \"cloudy\", and \"sky\" are the four most frequent words. The words\nare sorted from highest frequency to lowest.\n```\nNotes:\n- `k` is always valid: `1 <= k <= number of unique elements.",
        "detail": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "description": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "k = 4\nOutput:\n[\"the\", \"is\", \"cloudy\", \"sky\"]\nExplanation:\n\"the\", \"is\", \"cloudy\", and \"sky\" are the four most frequent words. The words\nare sorted from highest frequency to lowest.\n```\nNotes:\n- `k` is always valid: `1 <= k <= number of unique elements.\n- words in the input list only contain lowercase letters.",
        "detail": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "words",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "description": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "words = [\"the\", \"sky\", \"is\", \"cloudy\", \"the\", \"the\", \"the\", \"cloudy\", \"is\",\n         \"is\"]\nk = 4\nwords = [\"lambda\", \"school\", \"rules\", \"lambda\", \"school\", \"rocks\"]\nk = 2\ndef top_k_frequent(words, k):\n    \"\"\"\n    Input:\n    words -> List[str]\n    k -> int",
        "detail": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "description": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "k = 4\nwords = [\"lambda\", \"school\", \"rules\", \"lambda\", \"school\", \"rocks\"]\nk = 2\ndef top_k_frequent(words, k):\n    \"\"\"\n    Input:\n    words -> List[str]\n    k -> int\n    Output:\n    List[str]",
        "detail": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "words",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "description": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "words = [\"lambda\", \"school\", \"rules\", \"lambda\", \"school\", \"rocks\"]\nk = 2\ndef top_k_frequent(words, k):\n    \"\"\"\n    Input:\n    words -> List[str]\n    k -> int\n    Output:\n    List[str]\n    \"\"\"",
        "detail": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "description": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "k = 2\ndef top_k_frequent(words, k):\n    \"\"\"\n    Input:\n    words -> List[str]\n    k -> int\n    Output:\n    List[str]\n    \"\"\"\n    # create dict to hold words frequencies",
        "detail": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "description": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "s = \"Bbcc\"\ndef frequency_sort(s: str) -> str:\n    \"\"\"\n    Inputs:\n    s -> str\n    Output:\n    str\n    \"\"\"\n    letter_freq = {}\n    for char in s:",
        "detail": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "description": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "a = \"odd\"\nb = \"egg\"\nOutput:\ntrue\nExample 2:\nInput:\na = \"foo\"\nb = \"bar\"\nOutput:\nfalse",
        "detail": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "description": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "b = \"egg\"\nOutput:\ntrue\nExample 2:\nInput:\na = \"foo\"\nb = \"bar\"\nOutput:\nfalse\nExample 3:",
        "detail": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "description": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "a = \"foo\"\nb = \"bar\"\nOutput:\nfalse\nExample 3:\nInput:\na = \"abca\"\nb = \"zbxz\"\nOutput:\ntrue",
        "detail": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "description": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "b = \"bar\"\nOutput:\nfalse\nExample 3:\nInput:\na = \"abca\"\nb = \"zbxz\"\nOutput:\ntrue\nExample 4:",
        "detail": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "description": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "a = \"abca\"\nb = \"zbxz\"\nOutput:\ntrue\nExample 4:\nInput:\na = \"abc\"\nb = \"\"\nOutput:\nfalse",
        "detail": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "description": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "b = \"zbxz\"\nOutput:\ntrue\nExample 4:\nInput:\na = \"abc\"\nb = \"\"\nOutput:\nfalse\n\"\"\"",
        "detail": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "description": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "a = \"abc\"\nb = \"\"\nOutput:\nfalse\n\"\"\"\na = \"odd\"\nb = \"egg\"\ndef csIsomorphicStrings(a, b):\n    if len(set(a)) == len(set(b)):\n        return True",
        "detail": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "description": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "b = \"\"\nOutput:\nfalse\n\"\"\"\na = \"odd\"\nb = \"egg\"\ndef csIsomorphicStrings(a, b):\n    if len(set(a)) == len(set(b)):\n        return True\n    return False",
        "detail": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "description": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "a = \"odd\"\nb = \"egg\"\ndef csIsomorphicStrings(a, b):\n    if len(set(a)) == len(set(b)):\n        return True\n    return False\n# print(csIsomorphicStrings(a, b))\n\"\"\"\n*** csWordPattern ***\n---------------------",
        "detail": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "description": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "b = \"egg\"\ndef csIsomorphicStrings(a, b):\n    if len(set(a)) == len(set(b)):\n        return True\n    return False\n# print(csIsomorphicStrings(a, b))\n\"\"\"\n*** csWordPattern ***\n---------------------\nGiven a pattern and a string a, find if a follows the same pattern.",
        "detail": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "pattern",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "description": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "pattern = \"abba\"\na = \"lambda school school lambda\"\nOutput: true\nExample 2:\nInput:\npattern = \"abba\"\na = \"lambda school school coding\"\nOutput:\nfalse\nExample 3:",
        "detail": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "description": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "a = \"lambda school school lambda\"\nOutput: true\nExample 2:\nInput:\npattern = \"abba\"\na = \"lambda school school coding\"\nOutput:\nfalse\nExample 3:\nInput:",
        "detail": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "pattern",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "description": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "pattern = \"abba\"\na = \"lambda school school coding\"\nOutput:\nfalse\nExample 3:\nInput:\npattern = \"aaaa\"\na = \"lambda school school lambda\"\nOutput: false\nExample 4:",
        "detail": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "description": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "a = \"lambda school school coding\"\nOutput:\nfalse\nExample 3:\nInput:\npattern = \"aaaa\"\na = \"lambda school school lambda\"\nOutput: false\nExample 4:\nInput:",
        "detail": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "pattern",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "description": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "pattern = \"aaaa\"\na = \"lambda school school lambda\"\nOutput: false\nExample 4:\nInput:\npattern = \"abba\"\na = \"lambda lambda lambda lambda\"\nOutput: false\n\"\"\"\npattern = \"abba\"",
        "detail": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "description": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "a = \"lambda school school lambda\"\nOutput: false\nExample 4:\nInput:\npattern = \"abba\"\na = \"lambda lambda lambda lambda\"\nOutput: false\n\"\"\"\npattern = \"abba\"\na = \"lambda school school lambda\"",
        "detail": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "pattern",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "description": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "pattern = \"abba\"\na = \"lambda lambda lambda lambda\"\nOutput: false\n\"\"\"\npattern = \"abba\"\na = \"lambda school school lambda\"\n# pattern = \"abba\"\n# a = \"lambda lambda lambda lambda\"\n# pattern = \"aaaa\"\n# a = \"lambda school school lambda\"",
        "detail": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "description": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "a = \"lambda lambda lambda lambda\"\nOutput: false\n\"\"\"\npattern = \"abba\"\na = \"lambda school school lambda\"\n# pattern = \"abba\"\n# a = \"lambda lambda lambda lambda\"\n# pattern = \"aaaa\"\n# a = \"lambda school school lambda\"\ndef csWordPattern(pattern, a):",
        "detail": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "pattern",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "description": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "pattern = \"abba\"\na = \"lambda school school lambda\"\n# pattern = \"abba\"\n# a = \"lambda lambda lambda lambda\"\n# pattern = \"aaaa\"\n# a = \"lambda school school lambda\"\ndef csWordPattern(pattern, a):\n    word_arr = a.split(' ')\n    if len(pattern) != len(word_arr):\n        return False",
        "detail": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "description": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "a = \"lambda school school lambda\"\n# pattern = \"abba\"\n# a = \"lambda lambda lambda lambda\"\n# pattern = \"aaaa\"\n# a = \"lambda school school lambda\"\ndef csWordPattern(pattern, a):\n    word_arr = a.split(' ')\n    if len(pattern) != len(word_arr):\n        return False\n    pattern_map = {}",
        "detail": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "strs",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "description": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "strs = [\"apt\",\"pat\",\"ear\",\"tap\",\"are\",\"arm\"]\nOutput:\n[[\"apt\",\"pat\",\"tap\"],[\"ear\",\"are\"],[\"arm\"]]\nExample 2:\nInput:\nstrs = [\"\"]\nOutput:\n[[\"\"]]\nExample 3:\nInput:",
        "detail": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "strs",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "description": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "strs = [\"\"]\nOutput:\n[[\"\"]]\nExample 3:\nInput:\nstrs = [\"a\"]\nOutput:\n[[\"a\"]]\n\"\"\"\nstrs = [\"apt\", \"pat\", \"ear\", \"tap\", \"are\", \"arm\"]",
        "detail": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "strs",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "description": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "strs = [\"a\"]\nOutput:\n[[\"a\"]]\n\"\"\"\nstrs = [\"apt\", \"pat\", \"ear\", \"tap\", \"are\", \"arm\"]\ndef csGroupAnagrams(strs):\n    result = {}\n    for w in strs:\n        signature = ''.join(sorted(w))\n        if signature not in result:",
        "detail": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "strs",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "description": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "strs = [\"apt\", \"pat\", \"ear\", \"tap\", \"are\", \"arm\"]\ndef csGroupAnagrams(strs):\n    result = {}\n    for w in strs:\n        signature = ''.join(sorted(w))\n        if signature not in result:\n            result[signature] = []\n        result[signature].append(w)\n    all_results = []\n    for item in result:",
        "detail": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "first_not_repeating_character(s)",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "description": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "first_not_repeating_character(s) = 'c'.\nThere are 2 non-repeating characters in the string: 'c' and 'd'. Return c since it appears in the string first.\nFor s = \"abacabaabacaba\", the output should be\nfirst_not_repeating_character(s) = '_'.\nThere are no characters in this string that do not repeat.\n[execution time limit] 4 seconds (py3)\n[input] string s\nA string that contains only lowercase English letters.\n[output] char\nThe first non-repeating character in s of '_' if there are no characters that do not repeat.",
        "detail": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "first_not_repeating_character(s)",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "description": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "first_not_repeating_character(s) = '_'.\nThere are no characters in this string that do not repeat.\n[execution time limit] 4 seconds (py3)\n[input] string s\nA string that contains only lowercase English letters.\n[output] char\nThe first non-repeating character in s of '_' if there are no characters that do not repeat.\n\"\"\"\ns = \"abacabad\"\ndef first_not_repeating_character(s):",
        "detail": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "description": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "s = \"abacabad\"\ndef first_not_repeating_character(s):\n    # create hashmap of string and occurences of letters\n    # return the first key with the value of 1\n    chars = {}\n    for letter in s:\n        if letter not in chars:\n            chars[letter] = 1\n        else:\n            chars[letter] += 1",
        "detail": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "description": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "n = 3\ntrust = [[1,2],\n [2,3]]\nn = 4\ntrust = [[1, 3],[1, 4],[2, 3],[2, 4],[4, 3]]\ndef uncover_spy(n, trust):\n    # create map of people who trust\n    # return the person who trusts no one\n    trusts = {}\n    trusted = {}",
        "detail": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "trust",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "description": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "trust = [[1,2],\n [2,3]]\nn = 4\ntrust = [[1, 3],[1, 4],[2, 3],[2, 4],[4, 3]]\ndef uncover_spy(n, trust):\n    # create map of people who trust\n    # return the person who trusts no one\n    trusts = {}\n    trusted = {}\n    for i in range(1, n + 1):",
        "detail": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "description": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "n = 4\ntrust = [[1, 3],[1, 4],[2, 3],[2, 4],[4, 3]]\ndef uncover_spy(n, trust):\n    # create map of people who trust\n    # return the person who trusts no one\n    trusts = {}\n    trusted = {}\n    for i in range(1, n + 1):\n        trusts[i] = []\n        trusted[i] = []",
        "detail": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "trust",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "description": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "trust = [[1, 3],[1, 4],[2, 3],[2, 4],[4, 3]]\ndef uncover_spy(n, trust):\n    # create map of people who trust\n    # return the person who trusts no one\n    trusts = {}\n    trusted = {}\n    for i in range(1, n + 1):\n        trusts[i] = []\n        trusted[i] = []\n    for group in trust:",
        "detail": ".gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects",
        "description": ".gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "class ListNode:\n    def __init__(self, key, value):\n        self.key = key\n        self.value = value\n        self.next = None\nclass MyHashTable:\n    def __init__(self):\n        # Your code here\n        self.size = 10\n        self.keys = [None] * self.size",
        "detail": ".gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "MyHashTable",
        "kind": 6,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects",
        "description": ".gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "class MyHashTable:\n    def __init__(self):\n        # Your code here\n        self.size = 10\n        self.keys = [None] * self.size\n        self.values = [None] * self.size\n        self.item_count = 0\n    def djb2(self, key):\n        str_key = str(key).encode()\n        hash_value = 5381",
        "detail": ".gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "are_words_sorted",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects",
        "description": ".gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "def are_words_sorted(words, alpha_order):\n    \"\"\"\n    Inputs:\n    words: List[str]\n    alpha_order: str\n    Output:\n    bool\n    \"\"\"\n    # Your code here\n    # map the letters of the string alpha_order to a dictionary",
        "detail": ".gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "csFindTheSingleNumber",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects",
        "description": ".gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "def csFindTheSingleNumber(nums):\n    appearances = {}\n    # hash the list into a dict with the number of appearances being the value\n    # and the number itself as the key\n    for num in nums:\n        if num in appearances:\n            appearances[num] += 1\n        else:\n            appearances[num] = 1\n    # return the key with the value of 1",
        "detail": ".gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "csAverageOfTopFive",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects",
        "description": ".gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "def csAverageOfTopFive(scores):\n    students_scores = {}\n    # create a dict with each student as the key and an array of their scores\n    # as the value\n    for score in scores:\n        student = score[0]\n        num = score[1]\n        if student in students_scores:\n            students_scores[student].append(num)\n        else:",
        "detail": ".gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "csMaxNumberOfLambdas",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects",
        "description": ".gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "def csMaxNumberOfLambdas(text):\n    # create dict to hold number of times letters in lambda appear\n    # (the letter 'a' will need to be twice the amount of other letters for\n    # each valid lambda)\n    lambdas = {\"l\": 0, \"a\": 0, \"m\": 0, \"b\": 0, \"d\": 0}\n    # get number count for valid letters from \"text\"\n    for letter in text:\n        if letter in lambdas:\n            lambdas[letter] += 1\n    minimum_letter = lambdas['l']",
        "detail": ".gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "top_k_frequent",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects",
        "description": ".gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "def top_k_frequent(words, k):\n    \"\"\"\n    Input:\n    words -> List[str]\n    k -> int\n    Output:\n    List[str]\n    \"\"\"\n    # create dict to hold words frequencies\n    word_freqs = {}",
        "detail": ".gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "frequency_sort",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects",
        "description": ".gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "def frequency_sort(s: str) -> str:\n    \"\"\"\n    Inputs:\n    s -> str\n    Output:\n    str\n    \"\"\"\n    letter_freq = {}\n    for char in s:\n        if char not in letter_freq:",
        "detail": ".gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "csIsomorphicStrings",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects",
        "description": ".gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "def csIsomorphicStrings(a, b):\n    if len(set(a)) == len(set(b)):\n        return True\n    return False\n# print(csIsomorphicStrings(a, b))\n\"\"\"\n*** csWordPattern ***\n---------------------\nGiven a pattern and a string a, find if a follows the same pattern.\nHere, to \"follow\" means a full match, such that there is a one-to-one correspondence between a letter in pattern and a non-empty word in s.",
        "detail": ".gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "csWordPattern",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects",
        "description": ".gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "def csWordPattern(pattern, a):\n    word_arr = a.split(' ')\n    if len(pattern) != len(word_arr):\n        return False\n    pattern_map = {}\n    for i in range(len(pattern)):\n        if pattern[i] not in pattern_map:\n            if word_arr[i] not in pattern_map.values():\n                pattern_map[pattern[i]] = word_arr[i]\n            else:",
        "detail": ".gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "csGroupAnagrams",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects",
        "description": ".gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "def csGroupAnagrams(strs):\n    result = {}\n    for w in strs:\n        signature = ''.join(sorted(w))\n        if signature not in result:\n            result[signature] = []\n        result[signature].append(w)\n    all_results = []\n    for item in result:\n        all_results.append(result[item])",
        "detail": ".gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "condense_linked_list",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects",
        "description": ".gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "def condense_linked_list(node):\n    # keep track of seen values\n    seen_values = []\n    cur = node\n    prev = None\n    # iterate linked list from the head\n    while cur is not None:\n        print(cur.value)\n        # if current is in seen values\n        if cur.value in seen_values:",
        "detail": ".gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "first_not_repeating_character",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects",
        "description": ".gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "def first_not_repeating_character(s):\n    # create hashmap of string and occurences of letters\n    # return the first key with the value of 1\n    chars = {}\n    for letter in s:\n        if letter not in chars:\n            chars[letter] = 1\n        else:\n            chars[letter] += 1\n    for key in chars:",
        "detail": ".gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "uncover_spy",
        "kind": 2,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects",
        "description": ".gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "def uncover_spy(n, trust):\n    # create map of people who trust\n    # return the person who trusts no one\n    trusts = {}\n    trusted = {}\n    for i in range(1, n + 1):\n        trusts[i] = []\n        trusted[i] = []\n    for group in trust:\n        if group[0] in trusts:",
        "detail": ".gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "hash_table",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects",
        "description": ".gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "hash_table = MyHashTable();\nhash_table.put(\"a\", 1);\nhash_table.put(\"b\", 2);\nhash_table.get(\"a\");            // returns 1\nhash_table.get(\"c\");            // returns -1 (not found)\nhash_table.put(\"b\", 1);         // update the existing value\nhash_table.get(\"b\");            // returns 1\nhash_table.remove(\"b\");         // remove the mapping for 2\nhash_table.get(\"b\");            // returns -1 (not found)\n```",
        "detail": ".gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "words",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects",
        "description": ".gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "words = [\"lambd\", \"school\"]\norder = \"hlabcdefgijkmnopqrstuvwxyz\"\ndef are_words_sorted(words, alpha_order):\n    \"\"\"\n    Inputs:\n    words: List[str]\n    alpha_order: str\n    Output:\n    bool\n    \"\"\"",
        "detail": ".gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "order",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects",
        "description": ".gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "order = \"hlabcdefgijkmnopqrstuvwxyz\"\ndef are_words_sorted(words, alpha_order):\n    \"\"\"\n    Inputs:\n    words: List[str]\n    alpha_order: str\n    Output:\n    bool\n    \"\"\"\n    # Your code here",
        "detail": ".gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "nums",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects",
        "description": ".gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "nums = [1, 1, 2, 1]\ndef csFindTheSingleNumber(nums):\n    appearances = {}\n    # hash the list into a dict with the number of appearances being the value\n    # and the number itself as the key\n    for num in nums:\n        if num in appearances:\n            appearances[num] += 1\n        else:\n            appearances[num] = 1",
        "detail": ".gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "scores",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects",
        "description": ".gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "scores = [[1, 91], [1, 92], [2, 93], [2, 97], [1, 60], [2, 77], [1, 65],\n          [1, 87], [1, 100], [2, 100], [2, 76]]\ndef csAverageOfTopFive(scores):\n    students_scores = {}\n    # create a dict with each student as the key and an array of their scores\n    # as the value\n    for score in scores:\n        student = score[0]\n        num = score[1]\n        if student in students_scores:",
        "detail": ".gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "text",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects",
        "description": ".gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "text = \"mbxcdatllaas\"\n# text = \"sctlamb\"\n# text = \"lalaaxcmbdtsumbdav\"\ndef csMaxNumberOfLambdas(text):\n    # create dict to hold number of times letters in lambda appear\n    # (the letter 'a' will need to be twice the amount of other letters for\n    # each valid lambda)\n    lambdas = {\"l\": 0, \"a\": 0, \"m\": 0, \"b\": 0, \"d\": 0}\n    # get number count for valid letters from \"text\"\n    for letter in text:",
        "detail": ".gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "words",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects",
        "description": ".gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "words = [\"lambda\", \"school\", \"rules\", \"lambda\", \"school\", \"rocks\"]\nk = 2\nOutput:\n[\"lambda\", \"school\"]\nExplanation:\n\"lambda\" and \"school\" are the two most frequent words.\n```\nExample 2:\n```plaintext\nInput:",
        "detail": ".gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects",
        "description": ".gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "k = 2\nOutput:\n[\"lambda\", \"school\"]\nExplanation:\n\"lambda\" and \"school\" are the two most frequent words.\n```\nExample 2:\n```plaintext\nInput:\nwords = [\"the\", \"sky\", \"is\", \"cloudy\", \"the\", \"the\", \"the\", \"cloudy\", \"is\", \"is\"]",
        "detail": ".gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "words",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects",
        "description": ".gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "words = [\"the\", \"sky\", \"is\", \"cloudy\", \"the\", \"the\", \"the\", \"cloudy\", \"is\", \"is\"]\nk = 4\nOutput:\n[\"the\", \"is\", \"cloudy\", \"sky\"]\nExplanation:\n\"the\", \"is\", \"cloudy\", and \"sky\" are the four most frequent words. The words\nare sorted from highest frequency to lowest.\n```\nNotes:\n- `k` is always valid: `1 <= k <= number of unique elements.",
        "detail": ".gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects",
        "description": ".gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "k = 4\nOutput:\n[\"the\", \"is\", \"cloudy\", \"sky\"]\nExplanation:\n\"the\", \"is\", \"cloudy\", and \"sky\" are the four most frequent words. The words\nare sorted from highest frequency to lowest.\n```\nNotes:\n- `k` is always valid: `1 <= k <= number of unique elements.\n- words in the input list only contain lowercase letters.",
        "detail": ".gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "words",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects",
        "description": ".gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "words = [\"the\", \"sky\", \"is\", \"cloudy\", \"the\", \"the\", \"the\", \"cloudy\", \"is\",\n         \"is\"]\nk = 4\nwords = [\"lambda\", \"school\", \"rules\", \"lambda\", \"school\", \"rocks\"]\nk = 2\ndef top_k_frequent(words, k):\n    \"\"\"\n    Input:\n    words -> List[str]\n    k -> int",
        "detail": ".gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects",
        "description": ".gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "k = 4\nwords = [\"lambda\", \"school\", \"rules\", \"lambda\", \"school\", \"rocks\"]\nk = 2\ndef top_k_frequent(words, k):\n    \"\"\"\n    Input:\n    words -> List[str]\n    k -> int\n    Output:\n    List[str]",
        "detail": ".gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "words",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects",
        "description": ".gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "words = [\"lambda\", \"school\", \"rules\", \"lambda\", \"school\", \"rocks\"]\nk = 2\ndef top_k_frequent(words, k):\n    \"\"\"\n    Input:\n    words -> List[str]\n    k -> int\n    Output:\n    List[str]\n    \"\"\"",
        "detail": ".gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects",
        "description": ".gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "k = 2\ndef top_k_frequent(words, k):\n    \"\"\"\n    Input:\n    words -> List[str]\n    k -> int\n    Output:\n    List[str]\n    \"\"\"\n    # create dict to hold words frequencies",
        "detail": ".gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects",
        "description": ".gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "s = \"Bbcc\"\ndef frequency_sort(s: str) -> str:\n    \"\"\"\n    Inputs:\n    s -> str\n    Output:\n    str\n    \"\"\"\n    letter_freq = {}\n    for char in s:",
        "detail": ".gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects",
        "description": ".gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "a = \"odd\"\nb = \"egg\"\nOutput:\ntrue\nExample 2:\nInput:\na = \"foo\"\nb = \"bar\"\nOutput:\nfalse",
        "detail": ".gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects",
        "description": ".gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "b = \"egg\"\nOutput:\ntrue\nExample 2:\nInput:\na = \"foo\"\nb = \"bar\"\nOutput:\nfalse\nExample 3:",
        "detail": ".gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects",
        "description": ".gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "a = \"foo\"\nb = \"bar\"\nOutput:\nfalse\nExample 3:\nInput:\na = \"abca\"\nb = \"zbxz\"\nOutput:\ntrue",
        "detail": ".gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects",
        "description": ".gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "b = \"bar\"\nOutput:\nfalse\nExample 3:\nInput:\na = \"abca\"\nb = \"zbxz\"\nOutput:\ntrue\nExample 4:",
        "detail": ".gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects",
        "description": ".gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "a = \"abca\"\nb = \"zbxz\"\nOutput:\ntrue\nExample 4:\nInput:\na = \"abc\"\nb = \"\"\nOutput:\nfalse",
        "detail": ".gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects",
        "description": ".gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "b = \"zbxz\"\nOutput:\ntrue\nExample 4:\nInput:\na = \"abc\"\nb = \"\"\nOutput:\nfalse\n\"\"\"",
        "detail": ".gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects",
        "description": ".gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "a = \"abc\"\nb = \"\"\nOutput:\nfalse\n\"\"\"\na = \"odd\"\nb = \"egg\"\ndef csIsomorphicStrings(a, b):\n    if len(set(a)) == len(set(b)):\n        return True",
        "detail": ".gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects",
        "description": ".gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "b = \"\"\nOutput:\nfalse\n\"\"\"\na = \"odd\"\nb = \"egg\"\ndef csIsomorphicStrings(a, b):\n    if len(set(a)) == len(set(b)):\n        return True\n    return False",
        "detail": ".gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects",
        "description": ".gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "a = \"odd\"\nb = \"egg\"\ndef csIsomorphicStrings(a, b):\n    if len(set(a)) == len(set(b)):\n        return True\n    return False\n# print(csIsomorphicStrings(a, b))\n\"\"\"\n*** csWordPattern ***\n---------------------",
        "detail": ".gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects",
        "description": ".gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "b = \"egg\"\ndef csIsomorphicStrings(a, b):\n    if len(set(a)) == len(set(b)):\n        return True\n    return False\n# print(csIsomorphicStrings(a, b))\n\"\"\"\n*** csWordPattern ***\n---------------------\nGiven a pattern and a string a, find if a follows the same pattern.",
        "detail": ".gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "pattern",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects",
        "description": ".gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "pattern = \"abba\"\na = \"lambda school school lambda\"\nOutput: true\nExample 2:\nInput:\npattern = \"abba\"\na = \"lambda school school coding\"\nOutput:\nfalse\nExample 3:",
        "detail": ".gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects",
        "description": ".gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "a = \"lambda school school lambda\"\nOutput: true\nExample 2:\nInput:\npattern = \"abba\"\na = \"lambda school school coding\"\nOutput:\nfalse\nExample 3:\nInput:",
        "detail": ".gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "pattern",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects",
        "description": ".gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "pattern = \"abba\"\na = \"lambda school school coding\"\nOutput:\nfalse\nExample 3:\nInput:\npattern = \"aaaa\"\na = \"lambda school school lambda\"\nOutput: false\nExample 4:",
        "detail": ".gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects",
        "description": ".gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "a = \"lambda school school coding\"\nOutput:\nfalse\nExample 3:\nInput:\npattern = \"aaaa\"\na = \"lambda school school lambda\"\nOutput: false\nExample 4:\nInput:",
        "detail": ".gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "pattern",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects",
        "description": ".gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "pattern = \"aaaa\"\na = \"lambda school school lambda\"\nOutput: false\nExample 4:\nInput:\npattern = \"abba\"\na = \"lambda lambda lambda lambda\"\nOutput: false\n\"\"\"\npattern = \"abba\"",
        "detail": ".gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects",
        "description": ".gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "a = \"lambda school school lambda\"\nOutput: false\nExample 4:\nInput:\npattern = \"abba\"\na = \"lambda lambda lambda lambda\"\nOutput: false\n\"\"\"\npattern = \"abba\"\na = \"lambda school school lambda\"",
        "detail": ".gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "pattern",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects",
        "description": ".gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "pattern = \"abba\"\na = \"lambda lambda lambda lambda\"\nOutput: false\n\"\"\"\npattern = \"abba\"\na = \"lambda school school lambda\"\n# pattern = \"abba\"\n# a = \"lambda lambda lambda lambda\"\n# pattern = \"aaaa\"\n# a = \"lambda school school lambda\"",
        "detail": ".gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects",
        "description": ".gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "a = \"lambda lambda lambda lambda\"\nOutput: false\n\"\"\"\npattern = \"abba\"\na = \"lambda school school lambda\"\n# pattern = \"abba\"\n# a = \"lambda lambda lambda lambda\"\n# pattern = \"aaaa\"\n# a = \"lambda school school lambda\"\ndef csWordPattern(pattern, a):",
        "detail": ".gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "pattern",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects",
        "description": ".gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "pattern = \"abba\"\na = \"lambda school school lambda\"\n# pattern = \"abba\"\n# a = \"lambda lambda lambda lambda\"\n# pattern = \"aaaa\"\n# a = \"lambda school school lambda\"\ndef csWordPattern(pattern, a):\n    word_arr = a.split(' ')\n    if len(pattern) != len(word_arr):\n        return False",
        "detail": ".gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects",
        "description": ".gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "a = \"lambda school school lambda\"\n# pattern = \"abba\"\n# a = \"lambda lambda lambda lambda\"\n# pattern = \"aaaa\"\n# a = \"lambda school school lambda\"\ndef csWordPattern(pattern, a):\n    word_arr = a.split(' ')\n    if len(pattern) != len(word_arr):\n        return False\n    pattern_map = {}",
        "detail": ".gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "strs",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects",
        "description": ".gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "strs = [\"apt\",\"pat\",\"ear\",\"tap\",\"are\",\"arm\"]\nOutput:\n[[\"apt\",\"pat\",\"tap\"],[\"ear\",\"are\"],[\"arm\"]]\nExample 2:\nInput:\nstrs = [\"\"]\nOutput:\n[[\"\"]]\nExample 3:\nInput:",
        "detail": ".gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "strs",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects",
        "description": ".gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "strs = [\"\"]\nOutput:\n[[\"\"]]\nExample 3:\nInput:\nstrs = [\"a\"]\nOutput:\n[[\"a\"]]\n\"\"\"\nstrs = [\"apt\", \"pat\", \"ear\", \"tap\", \"are\", \"arm\"]",
        "detail": ".gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "strs",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects",
        "description": ".gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "strs = [\"a\"]\nOutput:\n[[\"a\"]]\n\"\"\"\nstrs = [\"apt\", \"pat\", \"ear\", \"tap\", \"are\", \"arm\"]\ndef csGroupAnagrams(strs):\n    result = {}\n    for w in strs:\n        signature = ''.join(sorted(w))\n        if signature not in result:",
        "detail": ".gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "strs",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects",
        "description": ".gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "strs = [\"apt\", \"pat\", \"ear\", \"tap\", \"are\", \"arm\"]\ndef csGroupAnagrams(strs):\n    result = {}\n    for w in strs:\n        signature = ''.join(sorted(w))\n        if signature not in result:\n            result[signature] = []\n        result[signature].append(w)\n    all_results = []\n    for item in result:",
        "detail": ".gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "first_not_repeating_character(s)",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects",
        "description": ".gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "first_not_repeating_character(s) = 'c'.\nThere are 2 non-repeating characters in the string: 'c' and 'd'. Return c since it appears in the string first.\nFor s = \"abacabaabacaba\", the output should be\nfirst_not_repeating_character(s) = '_'.\nThere are no characters in this string that do not repeat.\n[execution time limit] 4 seconds (py3)\n[input] string s\nA string that contains only lowercase English letters.\n[output] char\nThe first non-repeating character in s of '_' if there are no characters that do not repeat.",
        "detail": ".gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "first_not_repeating_character(s)",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects",
        "description": ".gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "first_not_repeating_character(s) = '_'.\nThere are no characters in this string that do not repeat.\n[execution time limit] 4 seconds (py3)\n[input] string s\nA string that contains only lowercase English letters.\n[output] char\nThe first non-repeating character in s of '_' if there are no characters that do not repeat.\n\"\"\"\ns = \"abacabad\"\ndef first_not_repeating_character(s):",
        "detail": ".gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects",
        "description": ".gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "s = \"abacabad\"\ndef first_not_repeating_character(s):\n    # create hashmap of string and occurences of letters\n    # return the first key with the value of 1\n    chars = {}\n    for letter in s:\n        if letter not in chars:\n            chars[letter] = 1\n        else:\n            chars[letter] += 1",
        "detail": ".gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects",
        "description": ".gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "n = 3\ntrust = [[1,2],\n [2,3]]\nn = 4\ntrust = [[1, 3],[1, 4],[2, 3],[2, 4],[4, 3]]\ndef uncover_spy(n, trust):\n    # create map of people who trust\n    # return the person who trusts no one\n    trusts = {}\n    trusted = {}",
        "detail": ".gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "trust",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects",
        "description": ".gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "trust = [[1,2],\n [2,3]]\nn = 4\ntrust = [[1, 3],[1, 4],[2, 3],[2, 4],[4, 3]]\ndef uncover_spy(n, trust):\n    # create map of people who trust\n    # return the person who trusts no one\n    trusts = {}\n    trusted = {}\n    for i in range(1, n + 1):",
        "detail": ".gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects",
        "description": ".gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "n = 4\ntrust = [[1, 3],[1, 4],[2, 3],[2, 4],[4, 3]]\ndef uncover_spy(n, trust):\n    # create map of people who trust\n    # return the person who trusts no one\n    trusts = {}\n    trusted = {}\n    for i in range(1, n + 1):\n        trusts[i] = []\n        trusted[i] = []",
        "detail": ".gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "trust",
        "kind": 5,
        "importPath": ".gitbook.assets.cs-weeks7-8-projects",
        "description": ".gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "trust = [[1, 3],[1, 4],[2, 3],[2, 4],[4, 3]]\ndef uncover_spy(n, trust):\n    # create map of people who trust\n    # return the person who trusts no one\n    trusts = {}\n    trusted = {}\n    for i in range(1, n + 1):\n        trusts[i] = []\n        trusted[i] = []\n    for group in trust:",
        "detail": ".gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "dfs_components_grid",
        "kind": 2,
        "importPath": ".gitbook.assets.dfs_components_grid",
        "description": ".gitbook.assets.dfs_components_grid",
        "peekOfCode": "def dfs_components_grid(grid: Sequence[Sequence[int]]) -> Iterable[set[tuple[int, int]]]:\n    \"\"\"On a grid of 0s and 1s, find all the components of 1s.\"\"\"\n    unseen = {(r, c) for r, row in enumerate(grid) for c, n in enumerate(row) if n}\n    while unseen:\n        start = unseen.pop()\n        component = {start}\n        to_visit = [start]\n        while to_visit:\n            r, c = to_visit.pop()\n            adjacent = {(r + 1, c), (r - 1, c), (r, c + 1), (r, c - 1)}",
        "detail": ".gitbook.assets.dfs_components_grid",
        "documentation": {}
    },
    {
        "label": "dfs_component_dict",
        "kind": 2,
        "importPath": ".gitbook.assets.dfs_component_dict (1)",
        "description": ".gitbook.assets.dfs_component_dict (1)",
        "peekOfCode": "def dfs_component_dict(graph: Mapping[Node, Set[Node]], start: Node) -> Iterable[Node]:\n    \"\"\"Find all the nodes connected to the starting node, using DFS on a dict.\"\"\"\n    component = {start}\n    to_visit = [start]\n    while to_visit:\n        node = to_visit.pop()\n        new_nodes = graph[node] - component\n        to_visit.extend(new_nodes)\n        component |= new_nodes\n        yield node",
        "detail": ".gitbook.assets.dfs_component_dict (1)",
        "documentation": {}
    },
    {
        "label": "dfs_component_dict",
        "kind": 2,
        "importPath": ".gitbook.assets.dfs_component_dict (2)",
        "description": ".gitbook.assets.dfs_component_dict (2)",
        "peekOfCode": "def dfs_component_dict(graph: Mapping[Node, Set[Node]], start: Node) -> Iterable[Node]:\n    \"\"\"Find all the nodes connected to the starting node, using DFS on a dict.\"\"\"\n    component = {start}\n    to_visit = [start]\n    while to_visit:\n        node = to_visit.pop()\n        new_nodes = graph[node] - component\n        to_visit.extend(new_nodes)\n        component |= new_nodes\n        yield node",
        "detail": ".gitbook.assets.dfs_component_dict (2)",
        "documentation": {}
    },
    {
        "label": "dfs_component_dict",
        "kind": 2,
        "importPath": ".gitbook.assets.dfs_component_dict",
        "description": ".gitbook.assets.dfs_component_dict",
        "peekOfCode": "def dfs_component_dict(graph: Mapping[Node, Set[Node]], start: Node) -> Iterable[Node]:\n    \"\"\"Find all the nodes connected to the starting node, using DFS on a dict.\"\"\"\n    component = {start}\n    to_visit = [start]\n    while to_visit:\n        node = to_visit.pop()\n        new_nodes = graph[node] - component\n        to_visit.extend(new_nodes)\n        component |= new_nodes\n        yield node",
        "detail": ".gitbook.assets.dfs_component_dict",
        "documentation": {}
    },
    {
        "label": "dfs_component_dict_recur",
        "kind": 2,
        "importPath": ".gitbook.assets.dfs_component_dict_recur (1)",
        "description": ".gitbook.assets.dfs_component_dict_recur (1)",
        "peekOfCode": "def dfs_component_dict_recur(\n    graph: Mapping[Node, Set[Node]],\n    start: Node,\n    component: Optional[Set[Node]] = None\n) -> set[Node]:\n    \"\"\"Recursively find all the nodes connected to start.\"\"\"\n    if component is None:\n        component = set()\n    component.add(start)\n    for new_node in graph[start] - component:",
        "detail": ".gitbook.assets.dfs_component_dict_recur (1)",
        "documentation": {}
    },
    {
        "label": "dfs_component_dict_recur",
        "kind": 2,
        "importPath": ".gitbook.assets.dfs_component_dict_recur",
        "description": ".gitbook.assets.dfs_component_dict_recur",
        "peekOfCode": "def dfs_component_dict_recur(\n    graph: Mapping[Node, Set[Node]],\n    start: Node,\n    component: Optional[Set[Node]] = None\n) -> set[Node]:\n    \"\"\"Recursively find all the nodes connected to start.\"\"\"\n    if component is None:\n        component = set()\n    component.add(start)\n    for new_node in graph[start] - component:",
        "detail": ".gitbook.assets.dfs_component_dict_recur",
        "documentation": {}
    },
    {
        "label": "dfs_paths_dict_recur",
        "kind": 2,
        "importPath": ".gitbook.assets.dfs_paths_dict_recur",
        "description": ".gitbook.assets.dfs_paths_dict_recur",
        "peekOfCode": "def dfs_paths_dict_recur(\n    graph: Mapping[Node, set[Node]],\n    start: Node,\n    goal: Node,\n    path: Optional[list[Node]] = None\n) -> Iterable[list[Node]]:\n    \"\"\"Find all the paths from start to goal recursively on a dict.\"\"\"\n    if path is None:\n        path = [start]\n    if start == goal:",
        "detail": ".gitbook.assets.dfs_paths_dict_recur",
        "documentation": {}
    },
    {
        "label": "dijkstras_distances_min",
        "kind": 2,
        "importPath": ".gitbook.assets.dijkstras_distances_min (1)",
        "description": ".gitbook.assets.dijkstras_distances_min (1)",
        "peekOfCode": "def dijkstras_distances_min(graph: Mapping[Node, Mapping[Node, Rational]], start: Node) -> dict[Node: Rational]:\n    \"\"\"Find the minimum distance from start to all connected nodes on a directed, weighted graph.\"\"\"\n    distances = dict.fromkeys(graph, inf)\n    distances[start] = 0\n    unvisited = set(graph)\n    while unvisited:\n        # Using min like this increases the time complexity compared to a priority queue, but it simplifies things.\n        node = min(unvisited, key=distances.__getitem__)\n        unvisited.remove(node)\n        distance = distances[node]",
        "detail": ".gitbook.assets.dijkstras_distances_min (1)",
        "documentation": {}
    },
    {
        "label": "dijkstras_distances_min",
        "kind": 2,
        "importPath": ".gitbook.assets.dijkstras_distances_min",
        "description": ".gitbook.assets.dijkstras_distances_min",
        "peekOfCode": "def dijkstras_distances_min(graph: Mapping[Node, Mapping[Node, Rational]], start: Node) -> dict[Node: Rational]:\n    \"\"\"Find the minimum distance from start to all connected nodes on a directed, weighted graph.\"\"\"\n    distances = dict.fromkeys(graph, inf)\n    distances[start] = 0\n    unvisited = set(graph)\n    while unvisited:\n        # Using min like this increases the time complexity compared to a priority queue, but it simplifies things.\n        node = min(unvisited, key=distances.__getitem__)\n        unvisited.remove(node)\n        distance = distances[node]",
        "detail": ".gitbook.assets.dijkstras_distances_min",
        "documentation": {}
    },
    {
        "label": "dijkstras_path_pq",
        "kind": 2,
        "importPath": ".gitbook.assets.dijkstras_path_pq (1)",
        "description": ".gitbook.assets.dijkstras_path_pq (1)",
        "peekOfCode": "def dijkstras_path_pq(\n    graph: Mapping[Node, Mapping[Node, Real]],\n    start: Node,\n    goal: Node\n) -> dict[Node, Optional[Node]]:\n    \"\"\"Find the shortest path from start to goal in a directed, weighted graph. Return it as a parents dict.\"\"\"\n    distances = {start: 0}\n    parents = {start: None}\n    visited = set()\n    to_visit = [(0, start)]",
        "detail": ".gitbook.assets.dijkstras_path_pq (1)",
        "documentation": {}
    },
    {
        "label": "dijkstras_path_pq",
        "kind": 2,
        "importPath": ".gitbook.assets.dijkstras_path_pq",
        "description": ".gitbook.assets.dijkstras_path_pq",
        "peekOfCode": "def dijkstras_path_pq(\n    graph: Mapping[Node, Mapping[Node, Real]],\n    start: Node,\n    goal: Node\n) -> dict[Node, Optional[Node]]:\n    \"\"\"Find the shortest path from start to goal in a directed, weighted graph. Return it as a parents dict.\"\"\"\n    distances = {start: 0}\n    parents = {start: None}\n    visited = set()\n    to_visit = [(0, start)]",
        "detail": ".gitbook.assets.dijkstras_path_pq",
        "documentation": {}
    },
    {
        "label": "Employee",
        "kind": 6,
        "importPath": ".gitbook.assets.employees",
        "description": ".gitbook.assets.employees",
        "peekOfCode": "class Employee(object):\n    def __init__(self, first_name, last_name, job):\n        self.first_name = first_name\n        self.last_name = last_name\n        self.job = job\n    def __eq__(self, other):\n        if isinstance(other, self.__class__):\n            same_name = self.first_name == other.first_name and self.last_name == other.last_name\n            same_job = self.job == other.job\n            if same_name and same_job:",
        "detail": ".gitbook.assets.employees",
        "documentation": {}
    },
    {
        "label": "Job",
        "kind": 6,
        "importPath": ".gitbook.assets.employees",
        "description": ".gitbook.assets.employees",
        "peekOfCode": "class Job(object):\n    def __init__(self, title, salary):\n        self.title = title\n        self.salary = salary\n    def __str__(self):\n        print(self.title)\n    def __repr__(self):\n        return 'Job(title={}, salary={})'.format(self.title, self.salary)\ndef sort_employees_by_salary(employee_list):\n    \"\"\"",
        "detail": ".gitbook.assets.employees",
        "documentation": {}
    },
    {
        "label": "sort_employees_by_salary",
        "kind": 2,
        "importPath": ".gitbook.assets.employees",
        "description": ".gitbook.assets.employees",
        "peekOfCode": "def sort_employees_by_salary(employee_list):\n    \"\"\"\n    Returns a new employee list, sorted by low to high salary then last_name\n    \"\"\"\n    employee_list.sort(key=lambda employee: (employee.last_name, employee.job.salary))\n    return employee_list",
        "detail": ".gitbook.assets.employees",
        "documentation": {}
    },
    {
        "label": "josephus_problem_recur",
        "kind": 2,
        "importPath": ".gitbook.assets.josephus_problem_recur",
        "description": ".gitbook.assets.josephus_problem_recur",
        "peekOfCode": "def josephus_problem_recur(n: int, k: int) -> int:\n    \"\"\"1-indexed, k-skips, Josephus problem, recursively.\"\"\"\n    if n == 1:\n        return 1\n    return (josephus_problem_recur(n - 1, k) + k - 1) % n + 1",
        "detail": ".gitbook.assets.josephus_problem_recur",
        "documentation": {}
    },
    {
        "label": "knapsack_simple",
        "kind": 2,
        "importPath": ".gitbook.assets.knapsack_simple",
        "description": ".gitbook.assets.knapsack_simple",
        "peekOfCode": "def knapsack_simple(weights: Sequence[int], values: Sequence[int], capacity: int):\n    \"\"\"0-1 knapsack problem. Just return the max value.\"\"\"\n    # Each index is a sub-capacity and each value the best value for that sub-capacity so far.\n    best_values = [0] * (capacity + 1)\n    for weight, value in zip(weights, values):\n        # Iterate backwards so we don't take things twice. Forwards would be the unbounded version of the problem.\n        for sub_capacity in range(capacity, 0, -1):\n            if weight <= sub_capacity:\n                # These three lines can be refactored to one, or a slightly more efficient if instead of max.\n                take_value = value + best_values[sub_capacity - weight]",
        "detail": ".gitbook.assets.knapsack_simple",
        "documentation": {}
    },
    {
        "label": "partition",
        "kind": 2,
        "importPath": ".gitbook.assets.partition",
        "description": ".gitbook.assets.partition",
        "peekOfCode": "def partition(seq: Sequence[T]) -> tuple[list[T], T, list[T]]:\n    \"\"\"Split sequence into a tuple of lesser or equal values, first value, greater values.\"\"\"\n    pivot, *rest = seq\n    low = [n for n in rest if n <= pivot]\n    high = [n for n in rest if n > pivot]\n    return low, pivot, high",
        "detail": ".gitbook.assets.partition",
        "documentation": {}
    },
    {
        "label": "prims",
        "kind": 2,
        "importPath": ".gitbook.assets.prims",
        "description": ".gitbook.assets.prims",
        "peekOfCode": "def prims(graph: Mapping[Node, Mapping[Node, int]], start: Node) -> dict[Node, Optional[Node]]:\n    \"\"\"Find the minimum spanning tree of an undirected, weighted graph.\"\"\"\n    parents = {}\n    to_visit = [(0, None, start)]\n    while to_visit:\n        weight, parent, node = heappop(to_visit)\n        if node in parents:\n            continue\n        parents[node] = parent\n        for next_node, weight in graph[node].items():",
        "detail": ".gitbook.assets.prims",
        "documentation": {}
    },
    {
        "label": "quickselect",
        "kind": 2,
        "importPath": ".gitbook.assets.quickselect",
        "description": ".gitbook.assets.quickselect",
        "peekOfCode": "def quickselect(seq: Sequence[T], k: int) -> T:\n    \"\"\"Find the kth smallest item in a sequence.\"\"\"\n    low, pivot, high = partition(seq)\n    low_len = len(low)\n    if low_len == k:\n        return pivot\n    elif low_len < k:\n        return quickselect(high, k - low_len - 1)\n    else:\n        return quickselect(low, k)",
        "detail": ".gitbook.assets.quickselect",
        "documentation": {}
    },
    {
        "label": "quicksort",
        "kind": 2,
        "importPath": ".gitbook.assets.quicksort (1)",
        "description": ".gitbook.assets.quicksort (1)",
        "peekOfCode": "def quicksort(seq: Sequence[T]) -> list[T]:\n    if len(seq) < 2:\n        return list(seq)\n    low, pivot, high = partition(seq)\n    return quicksort(low) + [pivot] + quicksort(high)",
        "detail": ".gitbook.assets.quicksort (1)",
        "documentation": {}
    },
    {
        "label": "quicksort",
        "kind": 2,
        "importPath": ".gitbook.assets.quicksort (2)",
        "description": ".gitbook.assets.quicksort (2)",
        "peekOfCode": "def quicksort(seq: Sequence[T]) -> list[T]:\n    if len(seq) < 2:\n        return list(seq)\n    low, pivot, high = partition(seq)\n    return quicksort(low) + [pivot] + quicksort(high)",
        "detail": ".gitbook.assets.quicksort (2)",
        "documentation": {}
    },
    {
        "label": "quicksort",
        "kind": 2,
        "importPath": ".gitbook.assets.quicksort",
        "description": ".gitbook.assets.quicksort",
        "peekOfCode": "def quicksort(seq: Sequence[T]) -> list[T]:\n    if len(seq) < 2:\n        return list(seq)\n    low, pivot, high = partition(seq)\n    return quicksort(low) + [pivot] + quicksort(high)",
        "detail": ".gitbook.assets.quicksort",
        "documentation": {}
    },
    {
        "label": "selection_sort_iter",
        "kind": 2,
        "importPath": ".gitbook.assets.selection_sort_iter (1)",
        "description": ".gitbook.assets.selection_sort_iter (1)",
        "peekOfCode": "def selection_sort_iter(seq: MutableSequence[T]) -> None:\n    \"\"\"Use selection sort iteratively on a list in-place.\"\"\"\n    for i, val in enumerate(seq):\n        min_val = min(seq[i:])\n        min_val_i = seq.index(min_val, i)  # First index of min_val at or after i\n        seq[i] = min_val\n        seq[min_val_i] = val",
        "detail": ".gitbook.assets.selection_sort_iter (1)",
        "documentation": {}
    },
    {
        "label": "selection_sort_iter",
        "kind": 2,
        "importPath": ".gitbook.assets.selection_sort_iter",
        "description": ".gitbook.assets.selection_sort_iter",
        "peekOfCode": "def selection_sort_iter(seq: MutableSequence[T]) -> None:\n    \"\"\"Use selection sort iteratively on a list in-place.\"\"\"\n    for i, val in enumerate(seq):\n        min_val = min(seq[i:])\n        min_val_i = seq.index(min_val, i)  # First index of min_val at or after i\n        seq[i] = min_val\n        seq[min_val_i] = val",
        "detail": ".gitbook.assets.selection_sort_iter",
        "documentation": {}
    },
    {
        "label": "selection_sort_recur",
        "kind": 2,
        "importPath": ".gitbook.assets.selection_sort_recur (1)",
        "description": ".gitbook.assets.selection_sort_recur (1)",
        "peekOfCode": "def selection_sort_recur(seq: MutableSequence[T], i=0) -> None:\n    \"\"\"Use selection sort recursively on a list in-place.\"\"\"\n    if i >= len(seq) - 1:\n        return\n    min_val = min(seq[i:])\n    min_val_i = seq.index(min_val, i)\n    seq[min_val_i] = seq[i]\n    seq[i] = min_val\n    selection_sort_recur(seq, i + 1)",
        "detail": ".gitbook.assets.selection_sort_recur (1)",
        "documentation": {}
    },
    {
        "label": "selection_sort_recur",
        "kind": 2,
        "importPath": ".gitbook.assets.selection_sort_recur",
        "description": ".gitbook.assets.selection_sort_recur",
        "peekOfCode": "def selection_sort_recur(seq: MutableSequence[T], i=0) -> None:\n    \"\"\"Use selection sort recursively on a list in-place.\"\"\"\n    if i >= len(seq) - 1:\n        return\n    min_val = min(seq[i:])\n    min_val_i = seq.index(min_val, i)\n    seq[min_val_i] = seq[i]\n    seq[i] = min_val\n    selection_sort_recur(seq, i + 1)",
        "detail": ".gitbook.assets.selection_sort_recur",
        "documentation": {}
    },
    {
        "label": "TestEmployees",
        "kind": 6,
        "importPath": ".gitbook.assets.tests (1)",
        "description": ".gitbook.assets.tests (1)",
        "peekOfCode": "class TestEmployees(TestCase):\n    def setUp(self):\n        agent = Job('Agent', 40000)\n        manager = Job('Manager', 50000)\n        self.alice = Employee('Alice', 'Anaheim', manager)\n        self.bob = Employee('Bob', 'Bodega', agent)\n        self.cindy = Employee('Cindy', 'Camille', agent)\n        self.dan = Employee('Dan', 'Dirk', manager)\n        self.employee_list = [self.dan, self.cindy, self.bob, self.alice]\n    def test_equal(self):",
        "detail": ".gitbook.assets.tests (1)",
        "documentation": {}
    },
    {
        "label": "TestJobs",
        "kind": 6,
        "importPath": ".gitbook.assets.tests (1)",
        "description": ".gitbook.assets.tests (1)",
        "peekOfCode": "class TestJobs(TestCase):\n    def test_str(self):\n        job_title = 'Agent'\n        job = Job(job_title, 40000)\n        self.assertEqual(str(job), job_title)",
        "detail": ".gitbook.assets.tests (1)",
        "documentation": {}
    },
    {
        "label": "TestEmployees",
        "kind": 6,
        "importPath": ".gitbook.assets.tests",
        "description": ".gitbook.assets.tests",
        "peekOfCode": "class TestEmployees(TestCase):\n    def setUp(self):\n        agent = Job('Agent', 40000)\n        manager = Job('Manager', 50000)\n        self.alice = Employee('Alice', 'Anaheim', manager)\n        self.bob = Employee('Bob', 'Bodega', agent)\n        self.cindy = Employee('Cindy', 'Camille', agent)\n        self.dan = Employee('Dan', 'Dirk', manager)\n        self.employee_list = [self.dan, self.cindy, self.bob, self.alice]\n    def test_equal(self):",
        "detail": ".gitbook.assets.tests",
        "documentation": {}
    },
    {
        "label": "TestJobs",
        "kind": 6,
        "importPath": ".gitbook.assets.tests",
        "description": ".gitbook.assets.tests",
        "peekOfCode": "class TestJobs(TestCase):\n    def test_str(self):\n        job_title = 'Agent'\n        job = Job(job_title, 40000)\n        self.assertEqual(str(job), job_title)",
        "detail": ".gitbook.assets.tests",
        "documentation": {}
    },
    {
        "label": "topo_sort_count",
        "kind": 2,
        "importPath": ".gitbook.assets.topo_sort_count",
        "description": ".gitbook.assets.topo_sort_count",
        "peekOfCode": "def topo_sort_count(graph: Mapping[Node, Iterable]) -> Iterable[Node]:\n    \"\"\"Find a topological sorting of a graph by counting in-degrees.\"\"\"\n    in_degrees = Counter(chain(*graph.values()))\n    zero_in_degrees = [node for node in graph if not in_degrees[node]]\n    while zero_in_degrees:\n        node = zero_in_degrees.pop()\n        yield node\n        for next_node in graph[node]:\n            in_degrees[next_node] -= 1\n            if not in_degrees[next_node]:",
        "detail": ".gitbook.assets.topo_sort_count",
        "documentation": {}
    },
    {
        "label": "valid_nesting_multi",
        "kind": 2,
        "importPath": ".gitbook.assets.valid_nesting_multi",
        "description": ".gitbook.assets.valid_nesting_multi",
        "peekOfCode": "def valid_nesting_multi(items: Sequence[Node], openers_to_closers: Mapping[Node, Node]) -> bool:\n    \"\"\"The parentheses problem with multiple brackets.\"\"\"\n    openers = openers_to_closers.keys()\n    closers = set(openers_to_closers.values())\n    unmatched_openers = []\n    for item in items:\n        if item in openers:\n            unmatched_openers.append(item)\n        elif item in closers:\n            if not unmatched_openers:",
        "detail": ".gitbook.assets.valid_nesting_multi",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC11_maxArea.main",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC11_maxArea.main",
        "peekOfCode": "class Solution:\n    def maxArea(self, height):",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC11_maxArea.main",
        "documentation": {}
    },
    {
        "label": "ArrayTests",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC11_maxArea.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC11_maxArea.tests",
        "peekOfCode": "class ArrayTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"maxArea([1, 8, 6, 2, 5, 4, 8, 3, 7]) returns 49\"\"\"\n        self.assertEqual(obj.maxArea([1, 8, 6, 2, 5, 4, 8, 3, 7]), 49)\n    def test_2(self):\n        \"\"\"maxArea([2, 3, 4, 5, 18, 17, 6]) returns 17\"\"\"\n        self.assertEqual(obj.maxArea([2, 3, 4, 5, 18, 17, 6]), 17)\nif __name__ == \"__main__\":\n    unittest.main()",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC11_maxArea.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC11_maxArea.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC11_maxArea.tests",
        "peekOfCode": "obj = Solution()\nclass ArrayTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"maxArea([1, 8, 6, 2, 5, 4, 8, 3, 7]) returns 49\"\"\"\n        self.assertEqual(obj.maxArea([1, 8, 6, 2, 5, 4, 8, 3, 7]), 49)\n    def test_2(self):\n        \"\"\"maxArea([2, 3, 4, 5, 18, 17, 6]) returns 17\"\"\"\n        self.assertEqual(obj.maxArea([2, 3, 4, 5, 18, 17, 6]), 17)\nif __name__ == \"__main__\":\n    unittest.main()",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC11_maxArea.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC121_maxProfit.main",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC121_maxProfit.main",
        "peekOfCode": "class Solution:\n    def maxProfit(self, prices):",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC121_maxProfit.main",
        "documentation": {}
    },
    {
        "label": "ArrayTests",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC121_maxProfit.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC121_maxProfit.tests",
        "peekOfCode": "class ArrayTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"maxProfit([7, 1, 5, 3, 6, 4]) --> 5\"\"\"\n        self.assertEqual(obj.maxProfit([7, 1, 5, 3, 6, 4]), 5)\n    def test_2(self):\n        \"\"\"maxProfit([7, 6, 4, 3, 1]) --> 0\"\"\"\n        self.assertEqual(obj.maxProfit([7, 6, 4, 3, 1]), 0)\nif __name__ == \"__main__\":\n    unittest.main()",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC121_maxProfit.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC121_maxProfit.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC121_maxProfit.tests",
        "peekOfCode": "obj = Solution()\nclass ArrayTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"maxProfit([7, 1, 5, 3, 6, 4]) --> 5\"\"\"\n        self.assertEqual(obj.maxProfit([7, 1, 5, 3, 6, 4]), 5)\n    def test_2(self):\n        \"\"\"maxProfit([7, 6, 4, 3, 1]) --> 0\"\"\"\n        self.assertEqual(obj.maxProfit([7, 6, 4, 3, 1]), 0)\nif __name__ == \"__main__\":\n    unittest.main()",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC121_maxProfit.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC128_longestConsecutive.main",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC128_longestConsecutive.main",
        "peekOfCode": "class Solution:\n    def longestConsecutive(self, nums):",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC128_longestConsecutive.main",
        "documentation": {}
    },
    {
        "label": "ArrayTests",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC128_longestConsecutive.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC128_longestConsecutive.tests",
        "peekOfCode": "class ArrayTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"Works\"\"\"\n        self.assertEqual(obj.longestConsecutive([100, 4, 200, 1, 3, 2]), 4)\n        self.assertEqual(obj.longestConsecutive([100, 4, 200, 1, 2]), 2)\n        self.assertEqual(obj.longestConsecutive([0, -1]), 2)\nif __name__ == \"__main__\":\n    unittest.main()",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC128_longestConsecutive.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC128_longestConsecutive.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC128_longestConsecutive.tests",
        "peekOfCode": "obj = Solution()\nclass ArrayTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"Works\"\"\"\n        self.assertEqual(obj.longestConsecutive([100, 4, 200, 1, 3, 2]), 4)\n        self.assertEqual(obj.longestConsecutive([100, 4, 200, 1, 2]), 2)\n        self.assertEqual(obj.longestConsecutive([0, -1]), 2)\nif __name__ == \"__main__\":\n    unittest.main()",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC128_longestConsecutive.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC152_maxProduct.main",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC152_maxProduct.main",
        "peekOfCode": "class Solution:\n    def maxProduct(self, nums):",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC152_maxProduct.main",
        "documentation": {}
    },
    {
        "label": "ArrayTests",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC152_maxProduct.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC152_maxProduct.tests",
        "peekOfCode": "class ArrayTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"[-2, 3, -4] --> 24\"\"\"\n        self.assertEqual(obj.maxProduct([-2, 3, -4]), 24)\n    def test_2(self):\n        \"\"\"[-4, -3, -2] --> 12\"\"\"\n        self.assertEqual(obj.maxProduct([-4, -3, -2]), 12)\n    def test_3(self):\n        \"\"\"[-2, -3, 7] --> 42\"\"\"\n        self.assertEqual(obj.maxProduct([-2, -3, 7]), 42)",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC152_maxProduct.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC152_maxProduct.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC152_maxProduct.tests",
        "peekOfCode": "obj = Solution()\nclass ArrayTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"[-2, 3, -4] --> 24\"\"\"\n        self.assertEqual(obj.maxProduct([-2, 3, -4]), 24)\n    def test_2(self):\n        \"\"\"[-4, -3, -2] --> 12\"\"\"\n        self.assertEqual(obj.maxProduct([-4, -3, -2]), 12)\n    def test_3(self):\n        \"\"\"[-2, -3, 7] --> 42\"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC152_maxProduct.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC153_findMin.main",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC153_findMin.main",
        "peekOfCode": "class Solution:\n    def findMin(self, nums):",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC153_findMin.main",
        "documentation": {}
    },
    {
        "label": "ArrayTests",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC153_findMin.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC153_findMin.tests",
        "peekOfCode": "class ArrayTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"[1] returns 1\"\"\"\n        self.assertEqual(obj.findMin([1]), 1)\n    def test_2(self):\n        \"\"\"[1, 2] returns 1\"\"\"\n        self.assertEqual(obj.findMin([1, 2]), 1)\n    def test_3(self):\n        \"\"\"[4,5,6,7,0,1,2] returns 0\"\"\"\n        self.assertEqual(obj.findMin([4, 5, 6, 7, 0, 1, 2]), 0)",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC153_findMin.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC153_findMin.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC153_findMin.tests",
        "peekOfCode": "obj = Solution()\nclass ArrayTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"[1] returns 1\"\"\"\n        self.assertEqual(obj.findMin([1]), 1)\n    def test_2(self):\n        \"\"\"[1, 2] returns 1\"\"\"\n        self.assertEqual(obj.findMin([1, 2]), 1)\n    def test_3(self):\n        \"\"\"[4,5,6,7,0,1,2] returns 0\"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC153_findMin.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC15_threeSum.main",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC15_threeSum.main",
        "peekOfCode": "class Solution:\n    def threeSum(self, nums):",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC15_threeSum.main",
        "documentation": {}
    },
    {
        "label": "ArrayTests",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC15_threeSum.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC15_threeSum.tests",
        "peekOfCode": "class ArrayTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"threeSum([2, 0, 1, -1]) returns [[-1, 0, 1]]\"\"\"\n        res = obj.threeSum([2, 0, 1, -1])\n        res[0].sort()\n        self.assertEqual(res, [[-1, 0, 1]])\n    def test_2(self):\n        \"\"\"threeSum([-1, 0, 1, 2, -1, -4]) returns [[-1, -1, 2], [-1, 0, 1]]\"\"\"\n        res = obj.threeSum([-1, 0, 1, 2, -1, -4])\n        for l in res:",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC15_threeSum.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC15_threeSum.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC15_threeSum.tests",
        "peekOfCode": "obj = Solution()\nclass ArrayTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"threeSum([2, 0, 1, -1]) returns [[-1, 0, 1]]\"\"\"\n        res = obj.threeSum([2, 0, 1, -1])\n        res[0].sort()\n        self.assertEqual(res, [[-1, 0, 1]])\n    def test_2(self):\n        \"\"\"threeSum([-1, 0, 1, 2, -1, -4]) returns [[-1, -1, 2], [-1, 0, 1]]\"\"\"\n        res = obj.threeSum([-1, 0, 1, 2, -1, -4])",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC15_threeSum.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC1_TwoSum.main",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC1_TwoSum.main",
        "peekOfCode": "class Solution:\n    def twoSum(self, nums, target):",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC1_TwoSum.main",
        "documentation": {}
    },
    {
        "label": "ArrayTests",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC1_TwoSum.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC1_TwoSum.tests",
        "peekOfCode": "class ArrayTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"twoSum([2,7,11,15], 9) returns [0,1]\"\"\"\n        self.assertEqual(sorted(obj.twoSum([2, 7, 11, 15], 9)), [0, 1])\n    def test_2(self):\n        \"\"\"twoSum([3, 2, 4], 6) returns [1,2]\"\"\"\n        self.assertEqual(sorted(obj.twoSum([3, 2, 4], 6)), [1, 2])\nif __name__ == \"__main__\":\n    unittest.main()",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC1_TwoSum.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC1_TwoSum.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC1_TwoSum.tests",
        "peekOfCode": "obj = Solution()\nclass ArrayTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"twoSum([2,7,11,15], 9) returns [0,1]\"\"\"\n        self.assertEqual(sorted(obj.twoSum([2, 7, 11, 15], 9)), [0, 1])\n    def test_2(self):\n        \"\"\"twoSum([3, 2, 4], 6) returns [1,2]\"\"\"\n        self.assertEqual(sorted(obj.twoSum([3, 2, 4], 6)), [1, 2])\nif __name__ == \"__main__\":\n    unittest.main()",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC1_TwoSum.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC217_containsDuplicate.main",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC217_containsDuplicate.main",
        "peekOfCode": "class Solution:\n    def containsDuplicate(self, nums):",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC217_containsDuplicate.main",
        "documentation": {}
    },
    {
        "label": "ArrayTests",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC217_containsDuplicate.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC217_containsDuplicate.tests",
        "peekOfCode": "class ArrayTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"returns True for Arrays with duplicate values\"\"\"\n        self.assertEqual(obj.containsDuplicate([1, 2, 3, 1]), True)\n        self.assertEqual(obj.containsDuplicate([1, 1, 1, 3, 3, 4, 3, 2, 4, 2]), True)\n    def test_2(self):\n        \"\"\"returns False for Arrays with NO duplicate values\"\"\"\n        self.assertEqual(obj.containsDuplicate([1, 2, 3, 4]), False)\nif __name__ == \"__main__\":\n    unittest.main()",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC217_containsDuplicate.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC217_containsDuplicate.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC217_containsDuplicate.tests",
        "peekOfCode": "obj = Solution()\nclass ArrayTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"returns True for Arrays with duplicate values\"\"\"\n        self.assertEqual(obj.containsDuplicate([1, 2, 3, 1]), True)\n        self.assertEqual(obj.containsDuplicate([1, 1, 1, 3, 3, 4, 3, 2, 4, 2]), True)\n    def test_2(self):\n        \"\"\"returns False for Arrays with NO duplicate values\"\"\"\n        self.assertEqual(obj.containsDuplicate([1, 2, 3, 4]), False)\nif __name__ == \"__main__\":",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC217_containsDuplicate.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC238_productExceptSelf.main",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC238_productExceptSelf.main",
        "peekOfCode": "class Solution:\n    def productExceptSelf(self, nums):",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC238_productExceptSelf.main",
        "documentation": {}
    },
    {
        "label": "ArrayTests",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC238_productExceptSelf.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC238_productExceptSelf.tests",
        "peekOfCode": "class ArrayTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"productExceptSelf([1,2,3,4]) returns [24, 12, 8, 6]\"\"\"\n        self.assertEqual(obj.productExceptSelf([1, 2, 3, 4]), [24, 12, 8, 6])\n    def test_2(self):\n        \"\"\"productExceptSelf([] returns [])\"\"\"\n        self.assertEqual(obj.productExceptSelf([]), [])\nif __name__ == \"__main__\":\n    unittest.main()",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC238_productExceptSelf.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC238_productExceptSelf.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC238_productExceptSelf.tests",
        "peekOfCode": "obj = Solution()\nclass ArrayTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"productExceptSelf([1,2,3,4]) returns [24, 12, 8, 6]\"\"\"\n        self.assertEqual(obj.productExceptSelf([1, 2, 3, 4]), [24, 12, 8, 6])\n    def test_2(self):\n        \"\"\"productExceptSelf([] returns [])\"\"\"\n        self.assertEqual(obj.productExceptSelf([]), [])\nif __name__ == \"__main__\":\n    unittest.main()",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC238_productExceptSelf.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC33_search.main",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC33_search.main",
        "peekOfCode": "class Solution:\n    def search(self, nums, target):",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC33_search.main",
        "documentation": {}
    },
    {
        "label": "ArrayTests",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC33_search.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC33_search.tests",
        "peekOfCode": "class ArrayTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"Works\"\"\"\n        self.assertEqual(obj.search([1], 1), 0)\n        self.assertEqual(obj.search([1, 3], 3), 1)\n        self.assertEqual(obj.search([3, 1], 3), 0)\n        self.assertEqual(obj.search([4, 5, 1, 2, 3], 1), 2)\n        self.assertEqual(obj.search([7, 8, 1, 2, 3, 4, 5, 6], 2), 3)\n        self.assertEqual(obj.search([4, 5, 6, 7, 0, 1, 2], 0), 4)\nif __name__ == \"__main__\":",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC33_search.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC33_search.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC33_search.tests",
        "peekOfCode": "obj = Solution()\nclass ArrayTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"Works\"\"\"\n        self.assertEqual(obj.search([1], 1), 0)\n        self.assertEqual(obj.search([1, 3], 3), 1)\n        self.assertEqual(obj.search([3, 1], 3), 0)\n        self.assertEqual(obj.search([4, 5, 1, 2, 3], 1), 2)\n        self.assertEqual(obj.search([7, 8, 1, 2, 3, 4, 5, 6], 2), 3)\n        self.assertEqual(obj.search([4, 5, 6, 7, 0, 1, 2], 0), 4)",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC33_search.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC53_maxSubArray.main",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC53_maxSubArray.main",
        "peekOfCode": "class Solution:\n    def maxSubArray(self, nums):",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC53_maxSubArray.main",
        "documentation": {}
    },
    {
        "label": "ArrayTests",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC53_maxSubArray.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC53_maxSubArray.tests",
        "peekOfCode": "class ArrayTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"maxSubArray([-2, 1, -3, 4, -1, 2, 1, -5, 4]) returns 6 for [4,-1,2,1]\"\"\"\n        self.assertEqual(obj.maxSubArray([-2, 1, -3, 4, -1, 2, 1, -5, 4]), 6)\nif __name__ == \"__main__\":\n    unittest.main()",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC53_maxSubArray.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC53_maxSubArray.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC53_maxSubArray.tests",
        "peekOfCode": "obj = Solution()\nclass ArrayTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"maxSubArray([-2, 1, -3, 4, -1, 2, 1, -5, 4]) returns 6 for [4,-1,2,1]\"\"\"\n        self.assertEqual(obj.maxSubArray([-2, 1, -3, 4, -1, 2, 1, -5, 4]), 6)\nif __name__ == \"__main__\":\n    unittest.main()",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.arrays.LC53_maxSubArray.tests",
        "documentation": {}
    },
    {
        "label": "MinStack",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.design.LC155_MinStack.main",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.design.LC155_MinStack.main",
        "peekOfCode": "class MinStack:\n    def __init__(self):\n    def push(self, x):\n    def pop(self):\n    def top(self):\n    def getMin(self):",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.design.LC155_MinStack.main",
        "documentation": {}
    },
    {
        "label": "DesignTests",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.design.LC155_MinStack.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.design.LC155_MinStack.tests",
        "peekOfCode": "class DesignTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"top() works for empty and filled out stack\"\"\"\n        min_stack = MinStack()\n        min_stack.top()\n        min_stack.push(11)\n        self.assertEqual(min_stack.top(), 11)\n        min_stack.push(13)\n        self.assertEqual(min_stack.top(), 13)\n        min_stack.pop()",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.design.LC155_MinStack.tests",
        "documentation": {}
    },
    {
        "label": "MyQueue",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.design.LC232_MyQueue.main",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.design.LC232_MyQueue.main",
        "peekOfCode": "class MyQueue:\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n    def push(self, x):\n        \"\"\"\n        Push element x to the back of queue.\n        \"\"\"\n    def pop(self):",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.design.LC232_MyQueue.main",
        "documentation": {}
    },
    {
        "label": "DesignTests",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.design.LC232_MyQueue.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.design.LC232_MyQueue.tests",
        "peekOfCode": "class DesignTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"Push and pop work\"\"\"\n        queue = MyQueue()\n        queue.push(1)\n        queue.push(2)\n        queue.push(3)\n        self.assertEqual(queue.pop(), 1)\n        self.assertEqual(queue.pop(), 2)\n        self.assertEqual(queue.pop(), 3)",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.design.LC232_MyQueue.tests",
        "documentation": {}
    },
    {
        "label": "NumArray",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.design.LC303_sumRange.main",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.design.LC303_sumRange.main",
        "peekOfCode": "class NumArray:\n    def __init__(self, nums):\n    def sumRange(self, i, j):",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.design.LC303_sumRange.main",
        "documentation": {}
    },
    {
        "label": "DesignTests",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.design.LC303_sumRange.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.design.LC303_sumRange.tests",
        "peekOfCode": "class DesignTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"sumRange works\"\"\"\n        obj = NumArray([-2, 0, 3, -5, 2, -1])\n        self.assertEqual(obj.sumRange(0, 2), 1)\n        self.assertEqual(obj.sumRange(2, 5), -1)\n        self.assertEqual(obj.sumRange(0, 5), -3)\n        self.assertEqual(obj.sumRange(2, 2), 3)\nif __name__ == \"__main__\":\n    unittest.main()",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.design.LC303_sumRange.tests",
        "documentation": {}
    },
    {
        "label": "MovingAverage",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.design.LC346_MovingAverage.main",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.design.LC346_MovingAverage.main",
        "peekOfCode": "class MovingAverage:\n    def __init__(self, size):\n    def next(self, val):",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.design.LC346_MovingAverage.main",
        "documentation": {}
    },
    {
        "label": "DesignTests",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.design.LC346_MovingAverage.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.design.LC346_MovingAverage.tests",
        "peekOfCode": "class DesignTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"MovingAverage Works\"\"\"\n        m = MovingAverage(3)\n        self.assertEqual(m.next(1), 1)\n        self.assertEqual(m.next(10), 5.5)\n        self.assertEqual(m.next(3), 4.666666666666667)\n        self.assertEqual(m.next(5), 6)\nif __name__ == \"__main__\":\n    unittest.main()",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.design.LC346_MovingAverage.tests",
        "documentation": {}
    },
    {
        "label": "RandomizedSet",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.design.LC380_RandomizedSet.main",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.design.LC380_RandomizedSet.main",
        "peekOfCode": "class RandomizedSet:\n    def __init__(self):\n    def insert(self, val):\n    def remove(self, val):\n    def getRandom(self):\n    def swap(self, arr, i, j):",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.design.LC380_RandomizedSet.main",
        "documentation": {}
    },
    {
        "label": "DesignTests",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.design.LC380_RandomizedSet.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.design.LC380_RandomizedSet.tests",
        "peekOfCode": "class DesignTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"insert(val) returns True for successful insertion, False for duplicate insertion\"\"\"\n        random_set = RandomizedSet()\n        self.assertEqual(random_set.insert(4), True)\n        self.assertEqual(random_set.insert(4), False)\n    def test_2(self):\n        \"\"\"remove(val) returns True for successful removal, False if value not present\"\"\"\n        random_set = RandomizedSet()\n        self.assertEqual(random_set.insert(4), True)",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.design.LC380_RandomizedSet.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.design.LC384_shuffle.main",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.design.LC384_shuffle.main",
        "peekOfCode": "class Solution:\n    def __init__(self, nums):\n    def reset(self):\n    def shuffle(self):",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.design.LC384_shuffle.main",
        "documentation": {}
    },
    {
        "label": "DesignTests",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.design.LC384_shuffle.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.design.LC384_shuffle.tests",
        "peekOfCode": "class DesignTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"Shuffle works\"\"\"\n        deck_of_cards = Solution([num for num in range(52)])\n        deck_of_cards2 = Solution([num for num in range(52)])\n        result_shuffle = deck_of_cards.shuffle()\n        result_shuffle2 = deck_of_cards2.shuffle()\n        self.assertEqual(result_shuffle == result_shuffle2, False)\n    def test_2(self):\n        \"\"\"Reset works\"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.design.LC384_shuffle.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.dynamic_programming.LC198_rob.main",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.dynamic_programming.LC198_rob.main",
        "peekOfCode": "class Solution:\n    def rob(self, nums):",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.dynamic_programming.LC198_rob.main",
        "documentation": {}
    },
    {
        "label": "DPTests",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.dynamic_programming.LC198_rob.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.dynamic_programming.LC198_rob.tests",
        "peekOfCode": "class DPTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"rob([1,2,3,1]) returns 4\"\"\"\n        self.assertEqual(obj.rob([1, 2, 3, 1]), 4)\n    def test_2(self):\n        \"\"\"rob([2,1,1,2]) returns 4\"\"\"\n        self.assertEqual(obj.rob([2, 1, 1, 2]), 4)\n    def test_3(self):\n        \"\"\"rob([]) returns 0\"\"\"\n        self.assertEqual(obj.rob([]), 0)",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.dynamic_programming.LC198_rob.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.dynamic_programming.LC198_rob.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.dynamic_programming.LC198_rob.tests",
        "peekOfCode": "obj = Solution()\nclass DPTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"rob([1,2,3,1]) returns 4\"\"\"\n        self.assertEqual(obj.rob([1, 2, 3, 1]), 4)\n    def test_2(self):\n        \"\"\"rob([2,1,1,2]) returns 4\"\"\"\n        self.assertEqual(obj.rob([2, 1, 1, 2]), 4)\n    def test_3(self):\n        \"\"\"rob([]) returns 0\"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.dynamic_programming.LC198_rob.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.dynamic_programming.LC300_lengthOfLIS.main",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.dynamic_programming.LC300_lengthOfLIS.main",
        "peekOfCode": "class Solution:\n    def lengthOfLIS(self, nums):",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.dynamic_programming.LC300_lengthOfLIS.main",
        "documentation": {}
    },
    {
        "label": "DPTests",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.dynamic_programming.LC300_lengthOfLIS.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.dynamic_programming.LC300_lengthOfLIS.tests",
        "peekOfCode": "class DPTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"lengthOfLIS([10,9,2,5,3,7,101,4]) returns 4 since LIS is [2,3,7,101]\"\"\"\n        self.assertEqual(obj.lengthOfLIS([10, 9, 2, 5, 3, 7, 101, 4]), 4)\n    def test_2(self):\n        \"\"\"lengthOfLIS([0]) returns 1\"\"\"\n        self.assertEqual(obj.lengthOfLIS([0]), 1)\n    def test_3(self):\n        \"\"\"lengthOfLIS([-2, -1]) returns 2\"\"\"\n        self.assertEqual(obj.lengthOfLIS([-2, -1]), 2)",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.dynamic_programming.LC300_lengthOfLIS.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.dynamic_programming.LC300_lengthOfLIS.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.dynamic_programming.LC300_lengthOfLIS.tests",
        "peekOfCode": "obj = Solution()\nclass DPTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"lengthOfLIS([10,9,2,5,3,7,101,4]) returns 4 since LIS is [2,3,7,101]\"\"\"\n        self.assertEqual(obj.lengthOfLIS([10, 9, 2, 5, 3, 7, 101, 4]), 4)\n    def test_2(self):\n        \"\"\"lengthOfLIS([0]) returns 1\"\"\"\n        self.assertEqual(obj.lengthOfLIS([0]), 1)\n    def test_3(self):\n        \"\"\"lengthOfLIS([-2, -1]) returns 2\"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.dynamic_programming.LC300_lengthOfLIS.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.dynamic_programming.LC322_coinChange.main",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.dynamic_programming.LC322_coinChange.main",
        "peekOfCode": "class Solution:\n    def coinChange(self, coins, amount):",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.dynamic_programming.LC322_coinChange.main",
        "documentation": {}
    },
    {
        "label": "DPTests",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.dynamic_programming.LC322_coinChange.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.dynamic_programming.LC322_coinChange.tests",
        "peekOfCode": "class DPTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"[1, 2, 5], 11 should return 3 for 5 + 5 + 1\"\"\"\n        self.assertEqual(obj.coinChange([1, 2, 5], 11), 3)\n    def test_2(self):\n        \"\"\"[2, 5, 10, 1], 27 should return 4 for 10 + 10 + 5 + 2\"\"\"\n        self.assertEqual(obj.coinChange([2, 5, 10, 1], 27), 4)\n    def test_3(self):\n        \"\"\"[2], 3 should return -1 since change is not possible\"\"\"\n        self.assertEqual(obj.coinChange([2], 3), -1)",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.dynamic_programming.LC322_coinChange.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.dynamic_programming.LC322_coinChange.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.dynamic_programming.LC322_coinChange.tests",
        "peekOfCode": "obj = Solution()\nclass DPTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"[1, 2, 5], 11 should return 3 for 5 + 5 + 1\"\"\"\n        self.assertEqual(obj.coinChange([1, 2, 5], 11), 3)\n    def test_2(self):\n        \"\"\"[2, 5, 10, 1], 27 should return 4 for 10 + 10 + 5 + 2\"\"\"\n        self.assertEqual(obj.coinChange([2, 5, 10, 1], 27), 4)\n    def test_3(self):\n        \"\"\"[2], 3 should return -1 since change is not possible\"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.dynamic_programming.LC322_coinChange.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.dynamic_programming.LC55_canJump.main",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.dynamic_programming.LC55_canJump.main",
        "peekOfCode": "class Solution:\n    def canJump(self, nums):",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.dynamic_programming.LC55_canJump.main",
        "documentation": {}
    },
    {
        "label": "DPTests",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.dynamic_programming.LC55_canJump.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.dynamic_programming.LC55_canJump.tests",
        "peekOfCode": "class DPTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"[2, 3, 1, 1, 4] returns True\"\"\"\n        self.assertEqual(obj.canJump([2, 3, 1, 1, 4]), True)\n    def test_2(self):\n        \"\"\"[3] returns True\"\"\"\n        self.assertEqual(obj.canJump([3]), True)\n    def test_3(self):\n        \"\"\"[3,2,1,0,4] returns False\"\"\"\n        self.assertEqual(obj.canJump([3, 2, 1, 0, 4]), False)",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.dynamic_programming.LC55_canJump.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.dynamic_programming.LC55_canJump.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.dynamic_programming.LC55_canJump.tests",
        "peekOfCode": "obj = Solution()\nclass DPTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"[2, 3, 1, 1, 4] returns True\"\"\"\n        self.assertEqual(obj.canJump([2, 3, 1, 1, 4]), True)\n    def test_2(self):\n        \"\"\"[3] returns True\"\"\"\n        self.assertEqual(obj.canJump([3]), True)\n    def test_3(self):\n        \"\"\"[3,2,1,0,4] returns False\"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.dynamic_programming.LC55_canJump.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.dynamic_programming.LC62_uniquePaths.main",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.dynamic_programming.LC62_uniquePaths.main",
        "peekOfCode": "class Solution:\n    def uniquePaths(self, m, n):",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.dynamic_programming.LC62_uniquePaths.main",
        "documentation": {}
    },
    {
        "label": "DPTests",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.dynamic_programming.LC62_uniquePaths.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.dynamic_programming.LC62_uniquePaths.tests",
        "peekOfCode": "class DPTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"uniquePaths(1, 1) --> 1\"\"\"\n        self.assertEqual(obj.uniquePaths(1, 1), 1)\n    def test_2(self):\n        \"\"\"uniquePaths(7, 3) --> 28\"\"\"\n        self.assertEqual(obj.uniquePaths(7, 3), 28)\n    def test_3(self):\n        \"\"\"uniquePaths(6, 3) --> 21\"\"\"\n        self.assertEqual(obj.uniquePaths(6, 3), 21)",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.dynamic_programming.LC62_uniquePaths.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.dynamic_programming.LC62_uniquePaths.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.dynamic_programming.LC62_uniquePaths.tests",
        "peekOfCode": "obj = Solution()\nclass DPTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"uniquePaths(1, 1) --> 1\"\"\"\n        self.assertEqual(obj.uniquePaths(1, 1), 1)\n    def test_2(self):\n        \"\"\"uniquePaths(7, 3) --> 28\"\"\"\n        self.assertEqual(obj.uniquePaths(7, 3), 28)\n    def test_3(self):\n        \"\"\"uniquePaths(6, 3) --> 21\"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.dynamic_programming.LC62_uniquePaths.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.dynamic_programming.LC70_climbStairs.main",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.dynamic_programming.LC70_climbStairs.main",
        "peekOfCode": "class Solution:\n    def climbStairs(self, n):",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.dynamic_programming.LC70_climbStairs.main",
        "documentation": {}
    },
    {
        "label": "DPTests",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.dynamic_programming.LC70_climbStairs.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.dynamic_programming.LC70_climbStairs.tests",
        "peekOfCode": "class DPTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"Returns 1 way to climb 1 stair\"\"\"\n        self.assertEqual(obj.climbStairs(1), 1)\n    def test_2(self):\n        \"\"\"Returns 2 ways to climb 2 stairs\"\"\"\n        self.assertEqual(obj.climbStairs(2), 2)\n    def test_3(self):\n        \"\"\"Returns 3 ways to climb 3 stairs\"\"\"\n        self.assertEqual(obj.climbStairs(3), 3)",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.dynamic_programming.LC70_climbStairs.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.dynamic_programming.LC70_climbStairs.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.dynamic_programming.LC70_climbStairs.tests",
        "peekOfCode": "obj = Solution()\nclass DPTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"Returns 1 way to climb 1 stair\"\"\"\n        self.assertEqual(obj.climbStairs(1), 1)\n    def test_2(self):\n        \"\"\"Returns 2 ways to climb 2 stairs\"\"\"\n        self.assertEqual(obj.climbStairs(2), 2)\n    def test_3(self):\n        \"\"\"Returns 3 ways to climb 3 stairs\"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.dynamic_programming.LC70_climbStairs.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.heaps.LC215_findKthLargest.main",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.heaps.LC215_findKthLargest.main",
        "peekOfCode": "class Solution:\n    def findKthLargest(self, nums, k):",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.heaps.LC215_findKthLargest.main",
        "documentation": {}
    },
    {
        "label": "HeapTests",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.heaps.LC215_findKthLargest.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.heaps.LC215_findKthLargest.tests",
        "peekOfCode": "class HeapTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"findKthLargest works\"\"\"\n        self.assertEqual(obj.findKthLargest([3, 2, 3, 1, 2, 4, 5, 5, 6], 4), 4)\nif __name__ == \"__main__\":\n    unittest.main()",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.heaps.LC215_findKthLargest.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.heaps.LC215_findKthLargest.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.heaps.LC215_findKthLargest.tests",
        "peekOfCode": "obj = Solution()\nclass HeapTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"findKthLargest works\"\"\"\n        self.assertEqual(obj.findKthLargest([3, 2, 3, 1, 2, 4, 5, 5, 6], 4), 4)\nif __name__ == \"__main__\":\n    unittest.main()",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.heaps.LC215_findKthLargest.tests",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.heaps.LC23_mergeKLists.main",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.heaps.LC23_mergeKLists.main",
        "peekOfCode": "class ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\nclass Solution:\n    def mergeKLists(self, lists):",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.heaps.LC23_mergeKLists.main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.heaps.LC23_mergeKLists.main",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.heaps.LC23_mergeKLists.main",
        "peekOfCode": "class Solution:\n    def mergeKLists(self, lists):",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.heaps.LC23_mergeKLists.main",
        "documentation": {}
    },
    {
        "label": "HeapTests",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.heaps.LC23_mergeKLists.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.heaps.LC23_mergeKLists.tests",
        "peekOfCode": "class HeapTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"[[3,5,7], [0,6], [0,6,28]] returns head of [0,0,3,5,6,6,7,28]\"\"\"\n        head1 = ListNode(3)\n        curr = head1\n        for num in [5, 7]:\n            curr.next = ListNode(num)\n            curr = curr.next\n        head2 = ListNode(0)\n        curr = head2",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.heaps.LC23_mergeKLists.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.heaps.LC23_mergeKLists.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.heaps.LC23_mergeKLists.tests",
        "peekOfCode": "obj = Solution()\nclass HeapTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"[[3,5,7], [0,6], [0,6,28]] returns head of [0,0,3,5,6,6,7,28]\"\"\"\n        head1 = ListNode(3)\n        curr = head1\n        for num in [5, 7]:\n            curr.next = ListNode(num)\n            curr = curr.next\n        head2 = ListNode(0)",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.heaps.LC23_mergeKLists.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.heaps.LC347_topKFrequent.main",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.heaps.LC347_topKFrequent.main",
        "peekOfCode": "class Solution:\n    def topKFrequent(self, nums, k):",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.heaps.LC347_topKFrequent.main",
        "documentation": {}
    },
    {
        "label": "HeapTests",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.heaps.LC347_topKFrequent.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.heaps.LC347_topKFrequent.tests",
        "peekOfCode": "class HeapTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"topKFrequent([1,1,1,2,2,3], 2) returns [1,2]\"\"\"\n        self.assertEqual(sorted(obj.topKFrequent([1, 1, 1, 2, 2, 3], 2)), [1, 2])\n    def test_2(self):\n        \"\"\"topKFrequent([1], 1) returns [1]\"\"\"\n        self.assertEqual(obj.topKFrequent([1], 1), [1])\n    def test_3(self):\n        \"\"\"topKFrequent([], 10) returns []\"\"\"\n        self.assertEqual(obj.topKFrequent([], 10), [])",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.heaps.LC347_topKFrequent.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.heaps.LC347_topKFrequent.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.heaps.LC347_topKFrequent.tests",
        "peekOfCode": "obj = Solution()\nclass HeapTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"topKFrequent([1,1,1,2,2,3], 2) returns [1,2]\"\"\"\n        self.assertEqual(sorted(obj.topKFrequent([1, 1, 1, 2, 2, 3], 2)), [1, 2])\n    def test_2(self):\n        \"\"\"topKFrequent([1], 1) returns [1]\"\"\"\n        self.assertEqual(obj.topKFrequent([1], 1), [1])\n    def test_3(self):\n        \"\"\"topKFrequent([], 10) returns []\"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.heaps.LC347_topKFrequent.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.heaps.LC973_kClosest.main",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.heaps.LC973_kClosest.main",
        "peekOfCode": "class Solution:\n    def kClosest(self, points, K):",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.heaps.LC973_kClosest.main",
        "documentation": {}
    },
    {
        "label": "HeapTests",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.heaps.LC973_kClosest.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.heaps.LC973_kClosest.tests",
        "peekOfCode": "class HeapTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"kClosest works\"\"\"\n        res = obj.kClosest([[1, 3], [-2, 2]], 1)[0]\n        res.sort()\n        self.assertEqual(res, [-2, 2])\n        res = obj.kClosest([[3, 3], [5, -1], [-2, 4]], 2)\n        self.assertEqual(len(res), 2)\n        for sublist in res:\n            sublist.sort()",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.heaps.LC973_kClosest.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.heaps.LC973_kClosest.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.heaps.LC973_kClosest.tests",
        "peekOfCode": "obj = Solution()\nclass HeapTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"kClosest works\"\"\"\n        res = obj.kClosest([[1, 3], [-2, 2]], 1)[0]\n        res.sort()\n        self.assertEqual(res, [-2, 2])\n        res = obj.kClosest([[3, 3], [5, -1], [-2, 4]], 2)\n        self.assertEqual(len(res), 2)\n        for sublist in res:",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.heaps.LC973_kClosest.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.intervals.LC252_canAttendMeetings.main",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.intervals.LC252_canAttendMeetings.main",
        "peekOfCode": "class Solution:\n    def canAttendMeetings(self, intervals):",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.intervals.LC252_canAttendMeetings.main",
        "documentation": {}
    },
    {
        "label": "IntervalTests",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.intervals.LC252_canAttendMeetings.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.intervals.LC252_canAttendMeetings.tests",
        "peekOfCode": "class IntervalTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"returns true for working schedule.\"\"\"\n        self.assertEqual(obj.canAttendMeetings([[7, 10], [2, 4]]), True)\n    def test_2(self):\n        \"\"\"returns true for empty schedule.\"\"\"\n        self.assertEqual(obj.canAttendMeetings([]), True)\n    def test_3(self):\n        \"\"\"returns false for invalid schedule.\"\"\"\n        self.assertEqual(obj.canAttendMeetings([[0, 30], [5, 10], [15, 20]]), False)",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.intervals.LC252_canAttendMeetings.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.intervals.LC252_canAttendMeetings.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.intervals.LC252_canAttendMeetings.tests",
        "peekOfCode": "obj = Solution()\nclass IntervalTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"returns true for working schedule.\"\"\"\n        self.assertEqual(obj.canAttendMeetings([[7, 10], [2, 4]]), True)\n    def test_2(self):\n        \"\"\"returns true for empty schedule.\"\"\"\n        self.assertEqual(obj.canAttendMeetings([]), True)\n    def test_3(self):\n        \"\"\"returns false for invalid schedule.\"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.intervals.LC252_canAttendMeetings.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.intervals.LC253_minMeetingRooms.main",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.intervals.LC253_minMeetingRooms.main",
        "peekOfCode": "class Solution:\n    def minMeetingRooms(self, intervals):",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.intervals.LC253_minMeetingRooms.main",
        "documentation": {}
    },
    {
        "label": "Interval",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.intervals.LC253_minMeetingRooms.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.intervals.LC253_minMeetingRooms.tests",
        "peekOfCode": "class Interval:\n    def __init__(self, s, e):\n        self.start = s\n        self.end = e\nclass IntervalTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"[] --> returns 0\"\"\"\n        self.assertEqual(obj.minMeetingRooms([]), 0)\n    def test_2(self):\n        \"\"\"[[0, 30]] --> returns 1\"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.intervals.LC253_minMeetingRooms.tests",
        "documentation": {}
    },
    {
        "label": "IntervalTests",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.intervals.LC253_minMeetingRooms.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.intervals.LC253_minMeetingRooms.tests",
        "peekOfCode": "class IntervalTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"[] --> returns 0\"\"\"\n        self.assertEqual(obj.minMeetingRooms([]), 0)\n    def test_2(self):\n        \"\"\"[[0, 30]] --> returns 1\"\"\"\n        self.assertEqual(obj.minMeetingRooms([Interval(0, 30)]), 1)\n    def test_3(self):\n        \"\"\"[[7, 10], [2, 4]] --> returns 1\"\"\"\n        self.assertEqual(obj.minMeetingRooms([Interval(7, 10), Interval(2, 4)]), 1)",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.intervals.LC253_minMeetingRooms.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.intervals.LC253_minMeetingRooms.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.intervals.LC253_minMeetingRooms.tests",
        "peekOfCode": "obj = Solution()\nclass Interval:\n    def __init__(self, s, e):\n        self.start = s\n        self.end = e\nclass IntervalTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"[] --> returns 0\"\"\"\n        self.assertEqual(obj.minMeetingRooms([]), 0)\n    def test_2(self):",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.intervals.LC253_minMeetingRooms.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.intervals.LC435_eraseOverlapIntervals.main",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.intervals.LC435_eraseOverlapIntervals.main",
        "peekOfCode": "class Solution:\n    def eraseOverlapIntervals(self, intervals):",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.intervals.LC435_eraseOverlapIntervals.main",
        "documentation": {}
    },
    {
        "label": "IntervalTests",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.intervals.LC435_eraseOverlapIntervals.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.intervals.LC435_eraseOverlapIntervals.tests",
        "peekOfCode": "class IntervalTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"eraseOverlapIntervals([]) and eraseOverlapIntervals([[1,2]]) return 0\"\"\"\n        self.assertEqual(obj.eraseOverlapIntervals([]), 0)\n        self.assertEqual(obj.eraseOverlapIntervals([[1, 2]]), 0)\n    def test_2(self):\n        \"\"\"eraseOverlapIntervals([[0,2],[1,3],[2,4],[3,5],[4,6]] ) returns 2\"\"\"\n        self.assertEqual(\n            obj.eraseOverlapIntervals([[0, 2], [1, 3], [2, 4], [3, 5], [4, 6]]), 2\n        )",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.intervals.LC435_eraseOverlapIntervals.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.intervals.LC435_eraseOverlapIntervals.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.intervals.LC435_eraseOverlapIntervals.tests",
        "peekOfCode": "obj = Solution()\nclass IntervalTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"eraseOverlapIntervals([]) and eraseOverlapIntervals([[1,2]]) return 0\"\"\"\n        self.assertEqual(obj.eraseOverlapIntervals([]), 0)\n        self.assertEqual(obj.eraseOverlapIntervals([[1, 2]]), 0)\n    def test_2(self):\n        \"\"\"eraseOverlapIntervals([[0,2],[1,3],[2,4],[3,5],[4,6]] ) returns 2\"\"\"\n        self.assertEqual(\n            obj.eraseOverlapIntervals([[0, 2], [1, 3], [2, 4], [3, 5], [4, 6]]), 2",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.intervals.LC435_eraseOverlapIntervals.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.intervals.LC56_merge.main",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.intervals.LC56_merge.main",
        "peekOfCode": "class Solution:\n    def merge(self, intervals):",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.intervals.LC56_merge.main",
        "documentation": {}
    },
    {
        "label": "IntervalTests",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.intervals.LC56_merge.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.intervals.LC56_merge.tests",
        "peekOfCode": "class IntervalTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"merge([[1, 4], [2, 3]]) --> [1, 4]\"\"\"\n        self.assertEqual(obj.merge([[1, 4], [2, 3]]), [[1, 4]])\n    def test_2(self):\n        \"\"\"merge([[1, 4], [4, 5]]) --> [1, 5]\"\"\"\n        self.assertEqual(obj.merge([[1, 4], [4, 5]]), [[1, 5]])\n    def test_3(self):\n        \"\"\"merge([[1,3],[2,6],[8,10],[15,18]]) --> [[1,6],[8,10],[15,18]]\"\"\"\n        self.assertEqual(",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.intervals.LC56_merge.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.intervals.LC56_merge.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.intervals.LC56_merge.tests",
        "peekOfCode": "obj = Solution()\nclass IntervalTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"merge([[1, 4], [2, 3]]) --> [1, 4]\"\"\"\n        self.assertEqual(obj.merge([[1, 4], [2, 3]]), [[1, 4]])\n    def test_2(self):\n        \"\"\"merge([[1, 4], [4, 5]]) --> [1, 5]\"\"\"\n        self.assertEqual(obj.merge([[1, 4], [4, 5]]), [[1, 5]])\n    def test_3(self):\n        \"\"\"merge([[1,3],[2,6],[8,10],[15,18]]) --> [[1,6],[8,10],[15,18]]\"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.intervals.LC56_merge.tests",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.linked_lists.LC138_copyRandomList.main",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.linked_lists.LC138_copyRandomList.main",
        "peekOfCode": "class Node:\n    def __init__(self, val, next, random):\n        self.val = val\n        self.next = next\n        self.random = random\nclass Solution:\n    def copyRandomList(self, head):",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.linked_lists.LC138_copyRandomList.main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.linked_lists.LC138_copyRandomList.main",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.linked_lists.LC138_copyRandomList.main",
        "peekOfCode": "class Solution:\n    def copyRandomList(self, head):",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.linked_lists.LC138_copyRandomList.main",
        "documentation": {}
    },
    {
        "label": "LinkedListTests",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.linked_lists.LC138_copyRandomList.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.linked_lists.LC138_copyRandomList.tests",
        "peekOfCode": "class LinkedListTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"Works when random pointers point to valid node\"\"\"\n        one_node = Node(1, None, None)\n        two_node = Node(2, None, None)\n        one_node.next = two_node\n        one_node.random = two_node\n        two_node.random = two_node\n        res_head = obj.copyRandomList(one_node)\n        self.assertEqual(res_head == one_node, False)",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.linked_lists.LC138_copyRandomList.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.linked_lists.LC138_copyRandomList.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.linked_lists.LC138_copyRandomList.tests",
        "peekOfCode": "obj = Solution()\nclass LinkedListTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"Works when random pointers point to valid node\"\"\"\n        one_node = Node(1, None, None)\n        two_node = Node(2, None, None)\n        one_node.next = two_node\n        one_node.random = two_node\n        two_node.random = two_node\n        res_head = obj.copyRandomList(one_node)",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.linked_lists.LC138_copyRandomList.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.linked_lists.LC141_hasCycle.main",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.linked_lists.LC141_hasCycle.main",
        "peekOfCode": "class Solution:\n    def hasCycle(self, head):",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.linked_lists.LC141_hasCycle.main",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.linked_lists.LC141_hasCycle.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.linked_lists.LC141_hasCycle.tests",
        "peekOfCode": "class ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\nclass LinkedListTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"Return False on empty list\"\"\"\n        self.assertEqual(obj.hasCycle({}), False)\n    def test_2(self):\n        \"\"\"Returns True for circular linked lists\"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.linked_lists.LC141_hasCycle.tests",
        "documentation": {}
    },
    {
        "label": "LinkedListTests",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.linked_lists.LC141_hasCycle.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.linked_lists.LC141_hasCycle.tests",
        "peekOfCode": "class LinkedListTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"Return False on empty list\"\"\"\n        self.assertEqual(obj.hasCycle({}), False)\n    def test_2(self):\n        \"\"\"Returns True for circular linked lists\"\"\"\n        a_node = ListNode(\"A\")\n        b_node = ListNode(\"B\")\n        c_node = ListNode(\"C\")\n        d_node = ListNode(\"D\")",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.linked_lists.LC141_hasCycle.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.linked_lists.LC141_hasCycle.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.linked_lists.LC141_hasCycle.tests",
        "peekOfCode": "obj = Solution()\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\nclass LinkedListTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"Return False on empty list\"\"\"\n        self.assertEqual(obj.hasCycle({}), False)\n    def test_2(self):",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.linked_lists.LC141_hasCycle.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.linked_lists.LC143_reorderList.main",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.linked_lists.LC143_reorderList.main",
        "peekOfCode": "class Solution:\n    def reorderList(self, head):",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.linked_lists.LC143_reorderList.main",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.linked_lists.LC143_reorderList.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.linked_lists.LC143_reorderList.tests",
        "peekOfCode": "class ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\nclass LinkedListTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"[1,2,3,4,5,6] returns head of [1, 6, 2, 5, 3, 4]\"\"\"\n        head = ListNode(1)\n        curr = head\n        for i in range(2, 7):",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.linked_lists.LC143_reorderList.tests",
        "documentation": {}
    },
    {
        "label": "LinkedListTests",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.linked_lists.LC143_reorderList.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.linked_lists.LC143_reorderList.tests",
        "peekOfCode": "class LinkedListTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"[1,2,3,4,5,6] returns head of [1, 6, 2, 5, 3, 4]\"\"\"\n        head = ListNode(1)\n        curr = head\n        for i in range(2, 7):\n            curr.next = ListNode(i)\n            curr = curr.next\n        obj.reorderList(head)\n        curr = head",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.linked_lists.LC143_reorderList.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.linked_lists.LC143_reorderList.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.linked_lists.LC143_reorderList.tests",
        "peekOfCode": "obj = Solution()\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\nclass LinkedListTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"[1,2,3,4,5,6] returns head of [1, 6, 2, 5, 3, 4]\"\"\"\n        head = ListNode(1)\n        curr = head",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.linked_lists.LC143_reorderList.tests",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.linked_lists.LC19_removeNthFromEnd.main",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.linked_lists.LC19_removeNthFromEnd.main",
        "peekOfCode": "class ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\nclass Solution:\n    def removeNthFromEnd(self, head, n):",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.linked_lists.LC19_removeNthFromEnd.main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.linked_lists.LC19_removeNthFromEnd.main",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.linked_lists.LC19_removeNthFromEnd.main",
        "peekOfCode": "class Solution:\n    def removeNthFromEnd(self, head, n):",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.linked_lists.LC19_removeNthFromEnd.main",
        "documentation": {}
    },
    {
        "label": "LinkedListTests",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.linked_lists.LC19_removeNthFromEnd.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.linked_lists.LC19_removeNthFromEnd.tests",
        "peekOfCode": "class LinkedListTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"removeNthFromEnd([a, b, c, d, e], 2) becomes [a, b, c, e]\"\"\"\n        a_node = ListNode(\"A\")\n        b_node = ListNode(\"B\")\n        c_node = ListNode(\"C\")\n        d_node = ListNode(\"D\")\n        e_node = ListNode(\"E\")\n        a_node.next = b_node\n        b_node.next = c_node",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.linked_lists.LC19_removeNthFromEnd.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.linked_lists.LC19_removeNthFromEnd.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.linked_lists.LC19_removeNthFromEnd.tests",
        "peekOfCode": "obj = Solution()\nclass LinkedListTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"removeNthFromEnd([a, b, c, d, e], 2) becomes [a, b, c, e]\"\"\"\n        a_node = ListNode(\"A\")\n        b_node = ListNode(\"B\")\n        c_node = ListNode(\"C\")\n        d_node = ListNode(\"D\")\n        e_node = ListNode(\"E\")\n        a_node.next = b_node",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.linked_lists.LC19_removeNthFromEnd.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.linked_lists.LC206_reverseList.main",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.linked_lists.LC206_reverseList.main",
        "peekOfCode": "class Solution:\n    def reverseList(self, head):",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.linked_lists.LC206_reverseList.main",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.linked_lists.LC206_reverseList.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.linked_lists.LC206_reverseList.tests",
        "peekOfCode": "class ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\nclass LinkedListTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"reverses the list\"\"\"\n        head = ListNode(\"A\")\n        b_node = ListNode(\"B\")\n        head.next = b_node",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.linked_lists.LC206_reverseList.tests",
        "documentation": {}
    },
    {
        "label": "LinkedListTests",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.linked_lists.LC206_reverseList.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.linked_lists.LC206_reverseList.tests",
        "peekOfCode": "class LinkedListTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"reverses the list\"\"\"\n        head = ListNode(\"A\")\n        b_node = ListNode(\"B\")\n        head.next = b_node\n        self.assertEqual(obj.reverseList(head), b_node)\n        self.assertEqual(b_node.next, head)\n        self.assertEqual(head.next, None)\nif __name__ == \"__main__\":",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.linked_lists.LC206_reverseList.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.linked_lists.LC206_reverseList.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.linked_lists.LC206_reverseList.tests",
        "peekOfCode": "obj = Solution()\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\nclass LinkedListTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"reverses the list\"\"\"\n        head = ListNode(\"A\")\n        b_node = ListNode(\"B\")",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.linked_lists.LC206_reverseList.tests",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.linked_lists.LC21_mergeTwoLists.main",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.linked_lists.LC21_mergeTwoLists.main",
        "peekOfCode": "class ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\nclass Solution:\n    def mergeTwoLists(self, l1, l2):",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.linked_lists.LC21_mergeTwoLists.main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.linked_lists.LC21_mergeTwoLists.main",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.linked_lists.LC21_mergeTwoLists.main",
        "peekOfCode": "class Solution:\n    def mergeTwoLists(self, l1, l2):",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.linked_lists.LC21_mergeTwoLists.main",
        "documentation": {}
    },
    {
        "label": "LinkedListTests",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.linked_lists.LC21_mergeTwoLists.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.linked_lists.LC21_mergeTwoLists.tests",
        "peekOfCode": "class LinkedListTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"[1,3], [2,4,6] returns head of [1,2,3,4,6]\"\"\"\n        one_node = ListNode(1)\n        three_node = ListNode(3)\n        one_node.next = three_node\n        two_node = ListNode(2)\n        four_node = ListNode(4)\n        six_node = ListNode(6)\n        two_node.next = four_node",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.linked_lists.LC21_mergeTwoLists.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.linked_lists.LC21_mergeTwoLists.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.linked_lists.LC21_mergeTwoLists.tests",
        "peekOfCode": "obj = Solution()\nclass LinkedListTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"[1,3], [2,4,6] returns head of [1,2,3,4,6]\"\"\"\n        one_node = ListNode(1)\n        three_node = ListNode(3)\n        one_node.next = three_node\n        two_node = ListNode(2)\n        four_node = ListNode(4)\n        six_node = ListNode(6)",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.linked_lists.LC21_mergeTwoLists.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.matrix.LC54_spiralOrder.main",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.matrix.LC54_spiralOrder.main",
        "peekOfCode": "class Solution:\n    def spiralOrder(self, matrix):",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.matrix.LC54_spiralOrder.main",
        "documentation": {}
    },
    {
        "label": "MatrixTests",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.matrix.LC54_spiralOrder.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.matrix.LC54_spiralOrder.tests",
        "peekOfCode": "class MatrixTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"[ [ 1, 2, 3 ], [ 4, 5, 6 ], [ 7, 8, 9 ] ] returns [1,2,3,6,9,8,7,4,5]\"\"\"\n        self.assertEqual(\n            obj.spiralOrder([[1, 2, 3], [4, 5, 6], [7, 8, 9]]),\n            [1, 2, 3, 6, 9, 8, 7, 4, 5],\n        )\n    def test_2(self):\n        \"\"\"[[1,2,3,4],[5,6,7,8],[9,10,11,12]] returns [1,2,3,4,8,12,11,10,9,5,6,7]\"\"\"\n        self.assertEqual(",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.matrix.LC54_spiralOrder.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.matrix.LC54_spiralOrder.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.matrix.LC54_spiralOrder.tests",
        "peekOfCode": "obj = Solution()\nclass MatrixTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"[ [ 1, 2, 3 ], [ 4, 5, 6 ], [ 7, 8, 9 ] ] returns [1,2,3,6,9,8,7,4,5]\"\"\"\n        self.assertEqual(\n            obj.spiralOrder([[1, 2, 3], [4, 5, 6], [7, 8, 9]]),\n            [1, 2, 3, 6, 9, 8, 7, 4, 5],\n        )\n    def test_2(self):\n        \"\"\"[[1,2,3,4],[5,6,7,8],[9,10,11,12]] returns [1,2,3,4,8,12,11,10,9,5,6,7]\"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.matrix.LC54_spiralOrder.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.matrix.LC73_setZeroes.main",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.matrix.LC73_setZeroes.main",
        "peekOfCode": "class Solution:\n    def setZeroes(self, matrix):",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.matrix.LC73_setZeroes.main",
        "documentation": {}
    },
    {
        "label": "MatrixTests",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.matrix.LC73_setZeroes.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.matrix.LC73_setZeroes.tests",
        "peekOfCode": "class MatrixTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"modifies input matrix.\"\"\"\n        input_matrix = [[0, 1, 2, 0], [3, 4, 5, 2], [1, 3, 1, 5]]\n        obj.setZeroes(input_matrix)\n        self.assertEqual(input_matrix, [[0, 0, 0, 0], [0, 4, 5, 0], [0, 3, 1, 0]])\n    def test_2(self):\n        \"\"\"works\"\"\"\n        input_matrix = [[0, 1, 2, 0], [3, 4, 5, 2], [1, 3, 1, 5]]\n        obj.setZeroes(input_matrix)",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.matrix.LC73_setZeroes.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.matrix.LC73_setZeroes.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.matrix.LC73_setZeroes.tests",
        "peekOfCode": "obj = Solution()\nclass MatrixTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"modifies input matrix.\"\"\"\n        input_matrix = [[0, 1, 2, 0], [3, 4, 5, 2], [1, 3, 1, 5]]\n        obj.setZeroes(input_matrix)\n        self.assertEqual(input_matrix, [[0, 0, 0, 0], [0, 4, 5, 0], [0, 3, 1, 0]])\n    def test_2(self):\n        \"\"\"works\"\"\"\n        input_matrix = [[0, 1, 2, 0], [3, 4, 5, 2], [1, 3, 1, 5]]",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.matrix.LC73_setZeroes.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.matrix.LC79_exist.main",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.matrix.LC79_exist.main",
        "peekOfCode": "class Solution:\n    def exist(self, board, word):",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.matrix.LC79_exist.main",
        "documentation": {}
    },
    {
        "label": "MatrixTests",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.matrix.LC79_exist.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.matrix.LC79_exist.tests",
        "peekOfCode": "class MatrixTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"returns True correctly.\"\"\"\n        self.assertEqual(\n            obj.exist(\n                [[\"A\", \"B\", \"C\", \"E\"], [\"S\", \"F\", \"C\", \"S\"], [\"A\", \"D\", \"E\", \"E\"]],\n                \"CESEEC\",\n            ),\n            True,\n        )",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.matrix.LC79_exist.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.matrix.LC79_exist.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.matrix.LC79_exist.tests",
        "peekOfCode": "obj = Solution()\nclass MatrixTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"returns True correctly.\"\"\"\n        self.assertEqual(\n            obj.exist(\n                [[\"A\", \"B\", \"C\", \"E\"], [\"S\", \"F\", \"C\", \"S\"], [\"A\", \"D\", \"E\", \"E\"]],\n                \"CESEEC\",\n            ),\n            True,",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.matrix.LC79_exist.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.practice.detect_cycle_directed.main",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.practice.detect_cycle_directed.main",
        "peekOfCode": "class Solution:\n    def hasCycle(self, N, edges):",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.practice.detect_cycle_directed.main",
        "documentation": {}
    },
    {
        "label": "PracticeTests",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.practice.detect_cycle_directed.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.practice.detect_cycle_directed.tests",
        "peekOfCode": "class PracticeTests(unittest.TestCase):\n    def test_2(self):\n        \"\"\"returns False correctly\"\"\"\n        self.assertEqual(obj.hasCycle(2, [[0, 1]]), False)\n        self.assertEqual(obj.hasCycle(4, [[0, 1], [0, 2], [1, 2]]), False)\n        #  0\n        #  |  \\\n        #  v    >\n        #  1 ->  2\n    def test_1(self):",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.practice.detect_cycle_directed.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.practice.detect_cycle_directed.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.practice.detect_cycle_directed.tests",
        "peekOfCode": "obj = Solution()\nclass PracticeTests(unittest.TestCase):\n    def test_2(self):\n        \"\"\"returns False correctly\"\"\"\n        self.assertEqual(obj.hasCycle(2, [[0, 1]]), False)\n        self.assertEqual(obj.hasCycle(4, [[0, 1], [0, 2], [1, 2]]), False)\n        #  0\n        #  |  \\\n        #  v    >\n        #  1 ->  2",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.practice.detect_cycle_directed.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.practice.detect_cycle_undirected.main",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.practice.detect_cycle_undirected.main",
        "peekOfCode": "class Solution:\n    def hasCycle(self, N, edges):",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.practice.detect_cycle_undirected.main",
        "documentation": {}
    },
    {
        "label": "PracticeTests",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.practice.detect_cycle_undirected.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.practice.detect_cycle_undirected.tests",
        "peekOfCode": "class PracticeTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"returns False correctly\"\"\"\n        self.assertEqual(obj.hasCycle(2, [[0, 1]]), False)\n        self.assertEqual(obj.hasCycle(3, [[1, 0], [1, 2]]), False)\n    def test_2(self):\n        \"\"\"returns True correctly\"\"\"\n        self.assertEqual(obj.hasCycle(4, [[1, 0], [0, 3], [1, 2], [2, 3]]), True)\n        self.assertEqual(\n            obj.hasCycle(5, [[1, 0], [0, 2], [2, 1], [0, 3], [3, 4]]), True",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.practice.detect_cycle_undirected.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.practice.detect_cycle_undirected.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.practice.detect_cycle_undirected.tests",
        "peekOfCode": "obj = Solution()\nclass PracticeTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"returns False correctly\"\"\"\n        self.assertEqual(obj.hasCycle(2, [[0, 1]]), False)\n        self.assertEqual(obj.hasCycle(3, [[1, 0], [1, 2]]), False)\n    def test_2(self):\n        \"\"\"returns True correctly\"\"\"\n        self.assertEqual(obj.hasCycle(4, [[1, 0], [0, 3], [1, 2], [2, 3]]), True)\n        self.assertEqual(",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.practice.detect_cycle_undirected.tests",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.practice.LC203_removeElements.main",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.practice.LC203_removeElements.main",
        "peekOfCode": "class ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\nclass Solution:\n    def removeElements(self, head, val):",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.practice.LC203_removeElements.main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.practice.LC203_removeElements.main",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.practice.LC203_removeElements.main",
        "peekOfCode": "class Solution:\n    def removeElements(self, head, val):",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.practice.LC203_removeElements.main",
        "documentation": {}
    },
    {
        "label": "PracticeTests",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.practice.LC203_removeElements.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.practice.LC203_removeElements.tests",
        "peekOfCode": "class PracticeTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"[1,2,3,4,5,6], val = 6 returns [1,2,3,4,5]\"\"\"\n        head = ListNode(1)\n        curr = head\n        for i in range(2, 7):\n            curr.next = ListNode(i)\n            curr = curr.next\n        obj.removeElements(head, 6)\n        curr = head",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.practice.LC203_removeElements.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.practice.LC203_removeElements.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.practice.LC203_removeElements.tests",
        "peekOfCode": "obj = Solution()\nclass PracticeTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"[1,2,3,4,5,6], val = 6 returns [1,2,3,4,5]\"\"\"\n        head = ListNode(1)\n        curr = head\n        for i in range(2, 7):\n            curr.next = ListNode(i)\n            curr = curr.next\n        obj.removeElements(head, 6)",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.practice.LC203_removeElements.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.practice.LC75_sortColors.main",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.practice.LC75_sortColors.main",
        "peekOfCode": "class Solution:\n    def sortColors(self, nums):",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.practice.LC75_sortColors.main",
        "documentation": {}
    },
    {
        "label": "PracticeTests",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.practice.LC75_sortColors.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.practice.LC75_sortColors.tests",
        "peekOfCode": "class PracticeTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"works\"\"\"\n        input1 = [2, 0, 2, 1, 1, 0]\n        obj.sortColors(input1)\n        self.assertEqual(input1, [0, 0, 1, 1, 2, 2])\n        input2 = [2]\n        obj.sortColors(input2)\n        self.assertEqual(input2, [2])\nif __name__ == \"__main__\":",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.practice.LC75_sortColors.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.practice.LC75_sortColors.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.practice.LC75_sortColors.tests",
        "peekOfCode": "obj = Solution()\nclass PracticeTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"works\"\"\"\n        input1 = [2, 0, 2, 1, 1, 0]\n        obj.sortColors(input1)\n        self.assertEqual(input1, [0, 0, 1, 1, 2, 2])\n        input2 = [2]\n        obj.sortColors(input2)\n        self.assertEqual(input2, [2])",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.practice.LC75_sortColors.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.practice.LC844_backspaceCompare.main",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.practice.LC844_backspaceCompare.main",
        "peekOfCode": "class Solution:\n    def backspaceCompare(self, S, T):",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.practice.LC844_backspaceCompare.main",
        "documentation": {}
    },
    {
        "label": "PracticeTests",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.practice.LC844_backspaceCompare.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.practice.LC844_backspaceCompare.tests",
        "peekOfCode": "class PracticeTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"returns True correctly\"\"\"\n        self.assertEqual(obj.backspaceCompare(\"y#fo##f\", \"y#f#o##f\"), True)\n        self.assertEqual(obj.backspaceCompare(\"a##c\", \"#a#c\"), True)\n    def test_2(self):\n        \"\"\"returns False correctly\"\"\"\n        self.assertEqual(obj.backspaceCompare(\"a#c\", \"b\"), False)\nif __name__ == \"__main__\":\n    unittest.main()",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.practice.LC844_backspaceCompare.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.practice.LC844_backspaceCompare.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.practice.LC844_backspaceCompare.tests",
        "peekOfCode": "obj = Solution()\nclass PracticeTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"returns True correctly\"\"\"\n        self.assertEqual(obj.backspaceCompare(\"y#fo##f\", \"y#f#o##f\"), True)\n        self.assertEqual(obj.backspaceCompare(\"a##c\", \"#a#c\"), True)\n    def test_2(self):\n        \"\"\"returns False correctly\"\"\"\n        self.assertEqual(obj.backspaceCompare(\"a#c\", \"b\"), False)\nif __name__ == \"__main__\":",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.practice.LC844_backspaceCompare.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.practice.LC876_middleNode.main",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.practice.LC876_middleNode.main",
        "peekOfCode": "class Solution:\n    def middleNode(self, head):",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.practice.LC876_middleNode.main",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.practice.LC876_middleNode.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.practice.LC876_middleNode.tests",
        "peekOfCode": "class ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\nclass LinkedListTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"Work for LL with odd number of nodes\"\"\"\n        a_node = ListNode(\"A\")\n        b_node = ListNode(\"B\")\n        c_node = ListNode(\"C\")",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.practice.LC876_middleNode.tests",
        "documentation": {}
    },
    {
        "label": "LinkedListTests",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.practice.LC876_middleNode.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.practice.LC876_middleNode.tests",
        "peekOfCode": "class LinkedListTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"Work for LL with odd number of nodes\"\"\"\n        a_node = ListNode(\"A\")\n        b_node = ListNode(\"B\")\n        c_node = ListNode(\"C\")\n        a_node.next = b_node\n        b_node.next = c_node\n        self.assertEqual(obj.middleNode(a_node), b_node)\n    def test_2(self):",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.practice.LC876_middleNode.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.practice.LC876_middleNode.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.practice.LC876_middleNode.tests",
        "peekOfCode": "obj = Solution()\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\nclass LinkedListTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"Work for LL with odd number of nodes\"\"\"\n        a_node = ListNode(\"A\")\n        b_node = ListNode(\"B\")",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.practice.LC876_middleNode.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.strings.LC125_isPalindrome.main",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.strings.LC125_isPalindrome.main",
        "peekOfCode": "class Solution:\n    def isPalindrome(self, s):",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.strings.LC125_isPalindrome.main",
        "documentation": {}
    },
    {
        "label": "StringTests",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.strings.LC125_isPalindrome.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.strings.LC125_isPalindrome.tests",
        "peekOfCode": "class StringTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"'A man, a plan, a canal: Panama' returns True\"\"\"\n        self.assertEqual(obj.isPalindrome(\"A man, a plan, a canal: Panama\"), True)\n    def test_2(self):\n        \"\"\"'love' returns False\"\"\"\n        self.assertEqual(obj.isPalindrome(\"love\"), False)\n    def test_3(self):\n        \"\"\"'' returns True\"\"\"\n        self.assertEqual(obj.isPalindrome(\"\"), True)",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.strings.LC125_isPalindrome.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.strings.LC125_isPalindrome.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.strings.LC125_isPalindrome.tests",
        "peekOfCode": "obj = Solution()\nclass StringTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"'A man, a plan, a canal: Panama' returns True\"\"\"\n        self.assertEqual(obj.isPalindrome(\"A man, a plan, a canal: Panama\"), True)\n    def test_2(self):\n        \"\"\"'love' returns False\"\"\"\n        self.assertEqual(obj.isPalindrome(\"love\"), False)\n    def test_3(self):\n        \"\"\"'' returns True\"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.strings.LC125_isPalindrome.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.strings.LC20_isValid.main",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.strings.LC20_isValid.main",
        "peekOfCode": "class Solution:\n    def isValid(self, s):",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.strings.LC20_isValid.main",
        "documentation": {}
    },
    {
        "label": "StringTests",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.strings.LC20_isValid.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.strings.LC20_isValid.tests",
        "peekOfCode": "class StringTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"'(', ')', '{', '}', '[', ']' should return False\"\"\"\n        self.assertEqual(obj.isValid(\"(\"), False)\n        self.assertEqual(obj.isValid(\")\"), False)\n        self.assertEqual(obj.isValid(\"{\"), False)\n        self.assertEqual(obj.isValid(\"}\"), False)\n        self.assertEqual(obj.isValid(\"[\"), False)\n        self.assertEqual(obj.isValid(\"]\"), False)\n    def test_2(self):",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.strings.LC20_isValid.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.strings.LC20_isValid.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.strings.LC20_isValid.tests",
        "peekOfCode": "obj = Solution()\nclass StringTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"'(', ')', '{', '}', '[', ']' should return False\"\"\"\n        self.assertEqual(obj.isValid(\"(\"), False)\n        self.assertEqual(obj.isValid(\")\"), False)\n        self.assertEqual(obj.isValid(\"{\"), False)\n        self.assertEqual(obj.isValid(\"}\"), False)\n        self.assertEqual(obj.isValid(\"[\"), False)\n        self.assertEqual(obj.isValid(\"]\"), False)",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.strings.LC20_isValid.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.strings.LC242_isAnagram.main",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.strings.LC242_isAnagram.main",
        "peekOfCode": "class Solution:\n    def isAnagram(self, s, t):",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.strings.LC242_isAnagram.main",
        "documentation": {}
    },
    {
        "label": "StringTests",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.strings.LC242_isAnagram.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.strings.LC242_isAnagram.tests",
        "peekOfCode": "class StringTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"isAnagram('anagram', 'nagaram') returns True\"\"\"\n        self.assertEqual(obj.isAnagram(\"anagram\", \"nagaram\"), True)\n    def test_2(self):\n        \"\"\"isAnagram('rat', 'car') returns False\"\"\"\n        self.assertEqual(obj.isAnagram(\"rat\", \"car\"), False)\n    def test_3(self):\n        \"\"\"isAnagram('', '') returns True\"\"\"\n        self.assertEqual(obj.isAnagram(\"\", \"\"), True)",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.strings.LC242_isAnagram.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.strings.LC242_isAnagram.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.strings.LC242_isAnagram.tests",
        "peekOfCode": "obj = Solution()\nclass StringTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"isAnagram('anagram', 'nagaram') returns True\"\"\"\n        self.assertEqual(obj.isAnagram(\"anagram\", \"nagaram\"), True)\n    def test_2(self):\n        \"\"\"isAnagram('rat', 'car') returns False\"\"\"\n        self.assertEqual(obj.isAnagram(\"rat\", \"car\"), False)\n    def test_3(self):\n        \"\"\"isAnagram('', '') returns True\"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.strings.LC242_isAnagram.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.strings.LC271_encode_decode.main",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.strings.LC271_encode_decode.main",
        "peekOfCode": "class Solution:\n    def encode(self, strs):\n    def decode(self, str):",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.strings.LC271_encode_decode.main",
        "documentation": {}
    },
    {
        "label": "StringTests",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.strings.LC271_encode_decode.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.strings.LC271_encode_decode.tests",
        "peekOfCode": "class StringTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"encode returns a string\"\"\"\n        self.assertEqual(type(obj.encode([\"kevin\", \"is\", \"great\"])) is str, True)\n    def test_2(self):\n        \"\"\"decode returns back the correct array\"\"\"\n        #          5/kevin2/is5/great\n        res = obj.encode([\"kevin\", \"is\", \"great\"])\n        self.assertEqual(type(res) is str, True)\n        decoded_res = obj.decode(res)",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.strings.LC271_encode_decode.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.strings.LC271_encode_decode.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.strings.LC271_encode_decode.tests",
        "peekOfCode": "obj = Solution()\nclass StringTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"encode returns a string\"\"\"\n        self.assertEqual(type(obj.encode([\"kevin\", \"is\", \"great\"])) is str, True)\n    def test_2(self):\n        \"\"\"decode returns back the correct array\"\"\"\n        #          5/kevin2/is5/great\n        res = obj.encode([\"kevin\", \"is\", \"great\"])\n        self.assertEqual(type(res) is str, True)",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.strings.LC271_encode_decode.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.strings.LC3_lengthOfLongestSubstring.main",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.strings.LC3_lengthOfLongestSubstring.main",
        "peekOfCode": "class Solution:\n    def lengthOfLongestSubstring(self, s):",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.strings.LC3_lengthOfLongestSubstring.main",
        "documentation": {}
    },
    {
        "label": "StringTests",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.strings.LC3_lengthOfLongestSubstring.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.strings.LC3_lengthOfLongestSubstring.tests",
        "peekOfCode": "class StringTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"'abcabcbb' returns 3\"\"\"\n        self.assertEqual(obj.lengthOfLongestSubstring(\"abcabcbb\"), 3)\n    def test_2(self):\n        \"\"\"'pwwkew' returns 3\"\"\"\n        self.assertEqual(obj.lengthOfLongestSubstring(\"pwwkew\"), 3)\n    def test_3(self):\n        \"\"\"'dvdf' returns 3\"\"\"\n        self.assertEqual(obj.lengthOfLongestSubstring(\"dvdf\"), 3)",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.strings.LC3_lengthOfLongestSubstring.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.strings.LC3_lengthOfLongestSubstring.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.strings.LC3_lengthOfLongestSubstring.tests",
        "peekOfCode": "obj = Solution()\nclass StringTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"'abcabcbb' returns 3\"\"\"\n        self.assertEqual(obj.lengthOfLongestSubstring(\"abcabcbb\"), 3)\n    def test_2(self):\n        \"\"\"'pwwkew' returns 3\"\"\"\n        self.assertEqual(obj.lengthOfLongestSubstring(\"pwwkew\"), 3)\n    def test_3(self):\n        \"\"\"'dvdf' returns 3\"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.strings.LC3_lengthOfLongestSubstring.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.strings.LC49_groupAnagrams.main",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.strings.LC49_groupAnagrams.main",
        "peekOfCode": "class Solution:\n    def groupAnagrams(self, strs):",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.strings.LC49_groupAnagrams.main",
        "documentation": {}
    },
    {
        "label": "StringTests",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.strings.LC49_groupAnagrams.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.strings.LC49_groupAnagrams.tests",
        "peekOfCode": "class StringTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"['eat', 'tea', 'tan', 'ate', 'nat', 'bat'] returns 3 groups of Anagrams\"\"\"\n        res = obj.groupAnagrams([\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"])\n        res.sort(reverse=True, key=len)\n        for i in range(len(res)):\n            sub_arr = res[i]\n            sub_arr.sort()\n        self.assertEqual(len(res), 3)\n        sub_arr_1 = res[0]",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.strings.LC49_groupAnagrams.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.strings.LC49_groupAnagrams.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.strings.LC49_groupAnagrams.tests",
        "peekOfCode": "obj = Solution()\nclass StringTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"['eat', 'tea', 'tan', 'ate', 'nat', 'bat'] returns 3 groups of Anagrams\"\"\"\n        res = obj.groupAnagrams([\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"])\n        res.sort(reverse=True, key=len)\n        for i in range(len(res)):\n            sub_arr = res[i]\n            sub_arr.sort()\n        self.assertEqual(len(res), 3)",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.strings.LC49_groupAnagrams.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.strings.LC5_longestPalindrome.main",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.strings.LC5_longestPalindrome.main",
        "peekOfCode": "class Solution:\n    def longestPalindrome(self, s):",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.strings.LC5_longestPalindrome.main",
        "documentation": {}
    },
    {
        "label": "StringTests",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.strings.LC5_longestPalindrome.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.strings.LC5_longestPalindrome.tests",
        "peekOfCode": "class StringTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"'cbbd' returns 'bb'\"\"\"\n        self.assertEqual(obj.longestPalindrome(\"cbbd\"), \"bb\")\n    def test_2(self):\n        \"\"\"'abba' returns 'abba'\"\"\"\n        self.assertEqual(obj.longestPalindrome(\"abba\"), \"abba\")\n    def test_3(self):\n        \"\"\"'abacdfgdcaba' returns 'aba'\"\"\"\n        self.assertEqual(obj.longestPalindrome(\"abacdfgdcaba\"), \"aba\")",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.strings.LC5_longestPalindrome.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.strings.LC5_longestPalindrome.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.strings.LC5_longestPalindrome.tests",
        "peekOfCode": "obj = Solution()\nclass StringTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"'cbbd' returns 'bb'\"\"\"\n        self.assertEqual(obj.longestPalindrome(\"cbbd\"), \"bb\")\n    def test_2(self):\n        \"\"\"'abba' returns 'abba'\"\"\"\n        self.assertEqual(obj.longestPalindrome(\"abba\"), \"abba\")\n    def test_3(self):\n        \"\"\"'abacdfgdcaba' returns 'aba'\"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.strings.LC5_longestPalindrome.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC100_isSameTree.main",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC100_isSameTree.main",
        "peekOfCode": "class Solution:\n    def isSameTree(self, p, q):",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC100_isSameTree.main",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC100_isSameTree.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC100_isSameTree.tests",
        "peekOfCode": "class Node:\n    def __init__(self, key):\n        self.left = None\n        self.right = None\n        self.val = key\ndef insert(root, node):\n    if root is None:\n        root = node\n    else:\n        if root.val < node.val:",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC100_isSameTree.tests",
        "documentation": {}
    },
    {
        "label": "TreeTests",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC100_isSameTree.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC100_isSameTree.tests",
        "peekOfCode": "class TreeTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"returns True for same trees\"\"\"\n        root = Node(8)\n        insert(root, Node(3))\n        insert(root, Node(10))\n        insert(root, Node(1))\n        insert(root, Node(6))\n        insert(root, Node(14))\n        #          8",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC100_isSameTree.tests",
        "documentation": {}
    },
    {
        "label": "insert",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC100_isSameTree.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC100_isSameTree.tests",
        "peekOfCode": "def insert(root, node):\n    if root is None:\n        root = node\n    else:\n        if root.val < node.val:\n            if root.right is None:\n                root.right = node\n            else:\n                insert(root.right, node)\n        else:",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC100_isSameTree.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC100_isSameTree.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC100_isSameTree.tests",
        "peekOfCode": "obj = Solution()\nclass Node:\n    def __init__(self, key):\n        self.left = None\n        self.right = None\n        self.val = key\ndef insert(root, node):\n    if root is None:\n        root = node\n    else:",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC100_isSameTree.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC102_levelOrder.main",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC102_levelOrder.main",
        "peekOfCode": "class Solution:\n    def levelOrder(self, root):",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC102_levelOrder.main",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC102_levelOrder.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC102_levelOrder.tests",
        "peekOfCode": "class Node:\n    def __init__(self, key):\n        self.left = None\n        self.right = None\n        self.val = key\ndef insert(root, node):\n    if root is None:\n        root = node\n    else:\n        if root.val < node.val:",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC102_levelOrder.tests",
        "documentation": {}
    },
    {
        "label": "TreeTests",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC102_levelOrder.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC102_levelOrder.tests",
        "peekOfCode": "class TreeTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"Works.\"\"\"\n        root = Node(8)\n        insert(root, Node(3))\n        insert(root, Node(10))\n        insert(root, Node(1))\n        insert(root, Node(6))\n        insert(root, Node(14))\n        #          8",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC102_levelOrder.tests",
        "documentation": {}
    },
    {
        "label": "insert",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC102_levelOrder.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC102_levelOrder.tests",
        "peekOfCode": "def insert(root, node):\n    if root is None:\n        root = node\n    else:\n        if root.val < node.val:\n            if root.right is None:\n                root.right = node\n            else:\n                insert(root.right, node)\n        else:",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC102_levelOrder.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC102_levelOrder.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC102_levelOrder.tests",
        "peekOfCode": "obj = Solution()\nclass Node:\n    def __init__(self, key):\n        self.left = None\n        self.right = None\n        self.val = key\ndef insert(root, node):\n    if root is None:\n        root = node\n    else:",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC102_levelOrder.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC104_maxDepth.main",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC104_maxDepth.main",
        "peekOfCode": "class Solution:\n    def maxDepth(self, root):",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC104_maxDepth.main",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC104_maxDepth.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC104_maxDepth.tests",
        "peekOfCode": "class Node:\n    def __init__(self, key):\n        self.left = None\n        self.right = None\n        self.val = key\ndef insert(root, node):\n    if root is None:\n        root = node\n    else:\n        if root.val < node.val:",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC104_maxDepth.tests",
        "documentation": {}
    },
    {
        "label": "TreeTests",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC104_maxDepth.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC104_maxDepth.tests",
        "peekOfCode": "class TreeTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"Works for Binary Search Tree of 1, 2, and 3 levels\"\"\"\n        root = Node(8)\n        self.assertEqual(obj.maxDepth(root), 1)\n        insert(root, Node(3))\n        insert(root, Node(10))\n        self.assertEqual(obj.maxDepth(root), 2)\n        insert(root, Node(14))\n        self.assertEqual(obj.maxDepth(root), 3)",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC104_maxDepth.tests",
        "documentation": {}
    },
    {
        "label": "insert",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC104_maxDepth.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC104_maxDepth.tests",
        "peekOfCode": "def insert(root, node):\n    if root is None:\n        root = node\n    else:\n        if root.val < node.val:\n            if root.right is None:\n                root.right = node\n            else:\n                insert(root.right, node)\n        else:",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC104_maxDepth.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC104_maxDepth.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC104_maxDepth.tests",
        "peekOfCode": "obj = Solution()\nclass Node:\n    def __init__(self, key):\n        self.left = None\n        self.right = None\n        self.val = key\ndef insert(root, node):\n    if root is None:\n        root = node\n    else:",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC104_maxDepth.tests",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC133_cloneGraph.main",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC133_cloneGraph.main",
        "peekOfCode": "class Node:\n    def __init__(self, val, neighbors):\n        self.val = val\n        self.neighbors = neighbors\nclass Solution:\n    def cloneGraph(self, node):",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC133_cloneGraph.main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC133_cloneGraph.main",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC133_cloneGraph.main",
        "peekOfCode": "class Solution:\n    def cloneGraph(self, node):",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC133_cloneGraph.main",
        "documentation": {}
    },
    {
        "label": "GraphTests",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC133_cloneGraph.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC133_cloneGraph.tests",
        "peekOfCode": "class GraphTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"Works for valid graph\"\"\"\n        one_node = Node(1, [])\n        two_node = Node(2, [])\n        one_node.neighbors = [two_node]\n        two_node.neighbors = [one_node]\n        res_node = obj.cloneGraph(one_node)\n        self.assertEqual(res_node != one_node, True)\n        self.assertEqual(len(res_node.neighbors), 1)",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC133_cloneGraph.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC133_cloneGraph.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC133_cloneGraph.tests",
        "peekOfCode": "obj = Solution()\nclass GraphTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"Works for valid graph\"\"\"\n        one_node = Node(1, [])\n        two_node = Node(2, [])\n        one_node.neighbors = [two_node]\n        two_node.neighbors = [one_node]\n        res_node = obj.cloneGraph(one_node)\n        self.assertEqual(res_node != one_node, True)",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC133_cloneGraph.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC200_numIslands.main",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC200_numIslands.main",
        "peekOfCode": "class Solution:\n    def numIslands(self, grid):",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC200_numIslands.main",
        "documentation": {}
    },
    {
        "label": "GraphTests",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC200_numIslands.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC200_numIslands.tests",
        "peekOfCode": "class GraphTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"returns 0 islands correctly.\"\"\"\n        self.assertEqual(\n            obj.numIslands(\n                [\n                    [\"0\", \"0\", \"0\", \"0\", \"0\"],\n                    [\"0\", \"0\", \"0\", \"0\", \"0\"],\n                    [\"0\", \"0\", \"0\", \"0\", \"0\"],\n                ]",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC200_numIslands.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC200_numIslands.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC200_numIslands.tests",
        "peekOfCode": "obj = Solution()\nclass GraphTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"returns 0 islands correctly.\"\"\"\n        self.assertEqual(\n            obj.numIslands(\n                [\n                    [\"0\", \"0\", \"0\", \"0\", \"0\"],\n                    [\"0\", \"0\", \"0\", \"0\", \"0\"],\n                    [\"0\", \"0\", \"0\", \"0\", \"0\"],",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC200_numIslands.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC207_canFinish.main",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC207_canFinish.main",
        "peekOfCode": "class Solution:\n    def canFinish(self, N, edges):",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC207_canFinish.main",
        "documentation": {}
    },
    {
        "label": "GraphTests",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC207_canFinish.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC207_canFinish.tests",
        "peekOfCode": "class GraphTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"returns False correctly\"\"\"\n        self.assertEqual(obj.canFinish(1, [[0, 0]]), False)\n        self.assertEqual(obj.canFinish(3, [[0, 1], [2, 1], [2, 2]]), False)\n        self.assertEqual(\n            obj.canFinish(4, [[0, 1], [0, 2], [1, 2], [2, 0], [2, 3], [3, 3]]), False\n        )\n    def test_2(self):\n        \"\"\"returns True correctly\"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC207_canFinish.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC207_canFinish.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC207_canFinish.tests",
        "peekOfCode": "obj = Solution()\nclass GraphTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"returns False correctly\"\"\"\n        self.assertEqual(obj.canFinish(1, [[0, 0]]), False)\n        self.assertEqual(obj.canFinish(3, [[0, 1], [2, 1], [2, 2]]), False)\n        self.assertEqual(\n            obj.canFinish(4, [[0, 1], [0, 2], [1, 2], [2, 0], [2, 3], [3, 3]]), False\n        )\n    def test_2(self):",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC207_canFinish.tests",
        "documentation": {}
    },
    {
        "label": "Trie",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC208_trie.main",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC208_trie.main",
        "peekOfCode": "class Trie:\n    def __init__(self):\n    def insert(self, word):\n    def search(self, word):\n    def startsWith(self, prefix):",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC208_trie.main",
        "documentation": {}
    },
    {
        "label": "TreeTests",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC208_trie.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC208_trie.tests",
        "peekOfCode": "class TreeTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"insert() and search() work.\"\"\"\n        trie = Trie()\n        trie.insert(\"apple\")\n        self.assertEqual(trie.search(\"apple\"), True)\n        self.assertEqual(trie.search(\"app\"), False)\n        trie.insert(\"app\")\n        self.assertEqual(trie.search(\"app\"), True)\n    def test_2(self):",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC208_trie.tests",
        "documentation": {}
    },
    {
        "label": "WordDictionary",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC211_WordDictionary.main",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC211_WordDictionary.main",
        "peekOfCode": "class WordDictionary:\n    def __init__(self):\n    def addWord(self, word):\n    def search(self, word):",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC211_WordDictionary.main",
        "documentation": {}
    },
    {
        "label": "TreeTests",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC211_WordDictionary.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC211_WordDictionary.tests",
        "peekOfCode": "class TreeTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"addWord and search works\"\"\"\n        wd = WordDictionary()\n        wd.addWord(\"bad\")\n        wd.addWord(\"dad\")\n        wd.addWord(\"mad\")\n        self.assertEqual(wd.search(\"pad\"), False)\n        self.assertEqual(wd.search(\"ba\"), False)\n        self.assertEqual(wd.search(\"bad\"), True)",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC211_WordDictionary.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC226_invertTree.main",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC226_invertTree.main",
        "peekOfCode": "class Solution:\n    def invertTree(self, root):",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC226_invertTree.main",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC226_invertTree.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC226_invertTree.tests",
        "peekOfCode": "class Node:\n    def __init__(self, key):\n        self.left = None\n        self.right = None\n        self.val = key\ndef insert(root, node):\n    if root is None:\n        root = node\n    else:\n        if root.val < node.val:",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC226_invertTree.tests",
        "documentation": {}
    },
    {
        "label": "TreeTests",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC226_invertTree.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC226_invertTree.tests",
        "peekOfCode": "class TreeTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"Inverts tree\"\"\"\n        root = Node(8)\n        insert(root, Node(3))\n        insert(root, Node(10))\n        insert(root, Node(1))\n        insert(root, Node(6))\n        insert(root, Node(14))\n        #          8",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC226_invertTree.tests",
        "documentation": {}
    },
    {
        "label": "insert",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC226_invertTree.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC226_invertTree.tests",
        "peekOfCode": "def insert(root, node):\n    if root is None:\n        root = node\n    else:\n        if root.val < node.val:\n            if root.right is None:\n                root.right = node\n            else:\n                insert(root.right, node)\n        else:",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC226_invertTree.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC226_invertTree.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC226_invertTree.tests",
        "peekOfCode": "obj = Solution()\nclass Node:\n    def __init__(self, key):\n        self.left = None\n        self.right = None\n        self.val = key\ndef insert(root, node):\n    if root is None:\n        root = node\n    else:",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC226_invertTree.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC230_kthSmallest.main",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC230_kthSmallest.main",
        "peekOfCode": "class Solution:\n    def kthSmallest(self, root, k):",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC230_kthSmallest.main",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC230_kthSmallest.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC230_kthSmallest.tests",
        "peekOfCode": "class Node:\n    def __init__(self, key):\n        self.left = None\n        self.right = None\n        self.val = key\ndef insert(root, node):\n    if root is None:\n        root = node\n    else:\n        if root.val < node.val:",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC230_kthSmallest.tests",
        "documentation": {}
    },
    {
        "label": "TreeTests",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC230_kthSmallest.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC230_kthSmallest.tests",
        "peekOfCode": "class TreeTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"Works.\"\"\"\n        root = Node(8)\n        insert(root, Node(3))\n        insert(root, Node(10))\n        insert(root, Node(1))\n        insert(root, Node(6))\n        insert(root, Node(14))\n        #          8",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC230_kthSmallest.tests",
        "documentation": {}
    },
    {
        "label": "insert",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC230_kthSmallest.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC230_kthSmallest.tests",
        "peekOfCode": "def insert(root, node):\n    if root is None:\n        root = node\n    else:\n        if root.val < node.val:\n            if root.right is None:\n                root.right = node\n            else:\n                insert(root.right, node)\n        else:",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC230_kthSmallest.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC230_kthSmallest.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC230_kthSmallest.tests",
        "peekOfCode": "obj = Solution()\nclass Node:\n    def __init__(self, key):\n        self.left = None\n        self.right = None\n        self.val = key\ndef insert(root, node):\n    if root is None:\n        root = node\n    else:",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC230_kthSmallest.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC235_lowestCommonAncestor.main",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC235_lowestCommonAncestor.main",
        "peekOfCode": "class Solution:\n    def lowestCommonAncestor(self, root, p, q):",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC235_lowestCommonAncestor.main",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC235_lowestCommonAncestor.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC235_lowestCommonAncestor.tests",
        "peekOfCode": "class Node:\n    def __init__(self, key):\n        self.left = None\n        self.right = None\n        self.val = key\ndef insert(root, node):\n    if root is None:\n        root = node\n    else:\n        if root.val < node.val:",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC235_lowestCommonAncestor.tests",
        "documentation": {}
    },
    {
        "label": "TreeTests",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC235_lowestCommonAncestor.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC235_lowestCommonAncestor.tests",
        "peekOfCode": "class TreeTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"Returns lowest common ancestor.\"\"\"\n        root = Node(8)\n        insert(root, Node(3))\n        insert(root, Node(10))\n        insert(root, Node(1))\n        insert(root, Node(6))\n        insert(root, Node(14))\n        #          8",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC235_lowestCommonAncestor.tests",
        "documentation": {}
    },
    {
        "label": "insert",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC235_lowestCommonAncestor.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC235_lowestCommonAncestor.tests",
        "peekOfCode": "def insert(root, node):\n    if root is None:\n        root = node\n    else:\n        if root.val < node.val:\n            if root.right is None:\n                root.right = node\n            else:\n                insert(root.right, node)\n        else:",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC235_lowestCommonAncestor.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC235_lowestCommonAncestor.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC235_lowestCommonAncestor.tests",
        "peekOfCode": "obj = Solution()\nclass Node:\n    def __init__(self, key):\n        self.left = None\n        self.right = None\n        self.val = key\ndef insert(root, node):\n    if root is None:\n        root = node\n    else:",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC235_lowestCommonAncestor.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC261_validTree.main",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC261_validTree.main",
        "peekOfCode": "class Solution:\n    def validTree(self, N, edges):",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC261_validTree.main",
        "documentation": {}
    },
    {
        "label": "GraphTests",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC261_validTree.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC261_validTree.tests",
        "peekOfCode": "class GraphTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"Returns True correctly\"\"\"\n        self.assertEqual(obj.validTree(5, [[0, 1], [0, 2], [0, 3], [1, 4]]), True)\n        self.assertEqual(obj.validTree(5, [[1, 0], [0, 2], [0, 3], [3, 4]]), True)\n    def test_2(self):\n        \"\"\"Returns False due to seperate components\"\"\"\n        self.assertEqual(obj.validTree(4, [[0, 1], [2, 3]]), False)\n    def test_3(self):\n        \"\"\"Returns False due to cycle\"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC261_validTree.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC261_validTree.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC261_validTree.tests",
        "peekOfCode": "obj = Solution()\nclass GraphTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"Returns True correctly\"\"\"\n        self.assertEqual(obj.validTree(5, [[0, 1], [0, 2], [0, 3], [1, 4]]), True)\n        self.assertEqual(obj.validTree(5, [[1, 0], [0, 2], [0, 3], [3, 4]]), True)\n    def test_2(self):\n        \"\"\"Returns False due to seperate components\"\"\"\n        self.assertEqual(obj.validTree(4, [[0, 1], [2, 3]]), False)\n    def test_3(self):",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC261_validTree.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC323_countComponents.main",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC323_countComponents.main",
        "peekOfCode": "class Solution:\n    def countComponents(self, N, edges):",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC323_countComponents.main",
        "documentation": {}
    },
    {
        "label": "GraphTests",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC323_countComponents.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC323_countComponents.tests",
        "peekOfCode": "class GraphTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"works\"\"\"\n        self.assertEqual(obj.countComponents(5, [[0, 1], [2, 1], [3, 4]]), 2)\n        self.assertEqual(obj.countComponents(5, [[0, 1], [1, 2], [2, 3], [3, 4]]), 1)\nif __name__ == \"__main__\":\n    unittest.main()",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC323_countComponents.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC323_countComponents.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC323_countComponents.tests",
        "peekOfCode": "obj = Solution()\nclass GraphTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"works\"\"\"\n        self.assertEqual(obj.countComponents(5, [[0, 1], [2, 1], [3, 4]]), 2)\n        self.assertEqual(obj.countComponents(5, [[0, 1], [1, 2], [2, 3], [3, 4]]), 1)\nif __name__ == \"__main__\":\n    unittest.main()",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC323_countComponents.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC331_isValidSerialization.main",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC331_isValidSerialization.main",
        "peekOfCode": "class Solution:\n    def isValidSerialization(self, preorder):",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC331_isValidSerialization.main",
        "documentation": {}
    },
    {
        "label": "TreeTests",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC331_isValidSerialization.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC331_isValidSerialization.tests",
        "peekOfCode": "class TreeTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"Returns True correctly\"\"\"\n        self.assertEqual(obj.isValidSerialization(\"9,#,92,#,#\"), True)\n    def test_2(self):\n        \"\"\"Returns False correctly\"\"\"\n        self.assertEqual(obj.isValidSerialization(\"#,#,3,5,#\"), False)\nif __name__ == \"__main__\":\n    unittest.main()",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC331_isValidSerialization.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC331_isValidSerialization.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC331_isValidSerialization.tests",
        "peekOfCode": "obj = Solution()\nclass TreeTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"Returns True correctly\"\"\"\n        self.assertEqual(obj.isValidSerialization(\"9,#,92,#,#\"), True)\n    def test_2(self):\n        \"\"\"Returns False correctly\"\"\"\n        self.assertEqual(obj.isValidSerialization(\"#,#,3,5,#\"), False)\nif __name__ == \"__main__\":\n    unittest.main()",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC331_isValidSerialization.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC572_isSubtree.main",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC572_isSubtree.main",
        "peekOfCode": "class Solution():\n    def isSubtree(self, s, t):",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC572_isSubtree.main",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC572_isSubtree.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC572_isSubtree.tests",
        "peekOfCode": "class Node:\n    def __init__(self, key):\n        self.left = None\n        self.right = None\n        self.val = key\ndef insert(root, node):\n    if root is None:\n        root = node\n    else:\n        if root.val < node.val:",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC572_isSubtree.tests",
        "documentation": {}
    },
    {
        "label": "TreeTests",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC572_isSubtree.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC572_isSubtree.tests",
        "peekOfCode": "class TreeTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"Returns True correctly.\"\"\"\n        root1 = Node(8)\n        insert(root1, Node(3))\n        insert(root1, Node(10))\n        insert(root1, Node(1))\n        insert(root1, Node(6))\n        insert(root1, Node(14))\n        #          8",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC572_isSubtree.tests",
        "documentation": {}
    },
    {
        "label": "insert",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC572_isSubtree.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC572_isSubtree.tests",
        "peekOfCode": "def insert(root, node):\n    if root is None:\n        root = node\n    else:\n        if root.val < node.val:\n            if root.right is None:\n                root.right = node\n            else:\n                insert(root.right, node)\n        else:",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC572_isSubtree.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC572_isSubtree.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC572_isSubtree.tests",
        "peekOfCode": "obj = Solution()\nclass Node:\n    def __init__(self, key):\n        self.left = None\n        self.right = None\n        self.val = key\ndef insert(root, node):\n    if root is None:\n        root = node\n    else:",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC572_isSubtree.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC98_isValidBST.main",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC98_isValidBST.main",
        "peekOfCode": "class Solution:\n    def isValidBST(self, root):",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC98_isValidBST.main",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC98_isValidBST.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC98_isValidBST.tests",
        "peekOfCode": "class Node:\n    def __init__(self, key):\n        self.left = None\n        self.right = None\n        self.val = key\ndef insert(root, node):\n    if root is None:\n        root = node\n    else:\n        if root.val < node.val:",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC98_isValidBST.tests",
        "documentation": {}
    },
    {
        "label": "TreeTests",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC98_isValidBST.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC98_isValidBST.tests",
        "peekOfCode": "class TreeTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"Returns True for valid BST.\"\"\"\n        root = Node(8)\n        insert(root, Node(3))\n        insert(root, Node(10))\n        insert(root, Node(1))\n        insert(root, Node(6))\n        insert(root, Node(14))\n        #          8",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC98_isValidBST.tests",
        "documentation": {}
    },
    {
        "label": "insert",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC98_isValidBST.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC98_isValidBST.tests",
        "peekOfCode": "def insert(root, node):\n    if root is None:\n        root = node\n    else:\n        if root.val < node.val:\n            if root.right is None:\n                root.right = node\n            else:\n                insert(root.right, node)\n        else:",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC98_isValidBST.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC98_isValidBST.tests",
        "description": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC98_isValidBST.tests",
        "peekOfCode": "obj = Solution()\nclass Node:\n    def __init__(self, key):\n        self.left = None\n        self.right = None\n        self.val = key\ndef insert(root, node):\n    if root is None:\n        root = node\n    else:",
        "detail": "python-gitbook-master..gitbook.assets.-ds-leetcode.trees_and_graphs.LC98_isValidBST.tests",
        "documentation": {}
    },
    {
        "label": "my_queue",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.binary_tree.avl_tree",
        "description": "python-gitbook-master..gitbook.assets.binary_tree.avl_tree",
        "peekOfCode": "class my_queue:\n    def __init__(self) -> None:\n        self.data: List[Any] = []\n        self.head: int = 0\n        self.tail: int = 0\n    def is_empty(self) -> bool:\n        return self.head == self.tail\n    def push(self, data: Any) -> None:\n        self.data.append(data)\n        self.tail = self.tail + 1",
        "detail": "python-gitbook-master..gitbook.assets.binary_tree.avl_tree",
        "documentation": {}
    },
    {
        "label": "my_node",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.binary_tree.avl_tree",
        "description": "python-gitbook-master..gitbook.assets.binary_tree.avl_tree",
        "peekOfCode": "class my_node:\n    def __init__(self, data: Any) -> None:\n        self.data = data\n        self.left: Optional[my_node] = None\n        self.right: Optional[my_node] = None\n        self.height: int = 1\n    def get_data(self) -> Any:\n        return self.data\n    def get_left(self) -> Optional[\"my_node\"]:\n        return self.left",
        "detail": "python-gitbook-master..gitbook.assets.binary_tree.avl_tree",
        "documentation": {}
    },
    {
        "label": "AVLtree",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.binary_tree.avl_tree",
        "description": "python-gitbook-master..gitbook.assets.binary_tree.avl_tree",
        "peekOfCode": "class AVLtree:\n    \"\"\"\n    An AVL tree doctest\n    Examples:\n    >>> t = AVLtree()\n    >>> t.insert(4)\n    insert:4\n    >>> print(str(t).replace(\" \\\\n\",\"\\\\n\"))\n     4\n    *************************************",
        "detail": "python-gitbook-master..gitbook.assets.binary_tree.avl_tree",
        "documentation": {}
    },
    {
        "label": "get_height",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.binary_tree.avl_tree",
        "description": "python-gitbook-master..gitbook.assets.binary_tree.avl_tree",
        "peekOfCode": "def get_height(node: Optional[\"my_node\"]) -> int:\n    if node is None:\n        return 0\n    return node.get_height()\ndef my_max(a: int, b: int) -> int:\n    if a > b:\n        return a\n    return b\ndef right_rotation(node: my_node) -> my_node:\n    r\"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.binary_tree.avl_tree",
        "documentation": {}
    },
    {
        "label": "my_max",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.binary_tree.avl_tree",
        "description": "python-gitbook-master..gitbook.assets.binary_tree.avl_tree",
        "peekOfCode": "def my_max(a: int, b: int) -> int:\n    if a > b:\n        return a\n    return b\ndef right_rotation(node: my_node) -> my_node:\n    r\"\"\"\n            A                      B\n           / \\                    / \\\n          B   C                  Bl  A\n         / \\       -->          /   / \\",
        "detail": "python-gitbook-master..gitbook.assets.binary_tree.avl_tree",
        "documentation": {}
    },
    {
        "label": "right_rotation",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.binary_tree.avl_tree",
        "description": "python-gitbook-master..gitbook.assets.binary_tree.avl_tree",
        "peekOfCode": "def right_rotation(node: my_node) -> my_node:\n    r\"\"\"\n            A                      B\n           / \\                    / \\\n          B   C                  Bl  A\n         / \\       -->          /   / \\\n        Bl  Br                 UB Br  C\n       /\n     UB\n    UB = unbalanced node",
        "detail": "python-gitbook-master..gitbook.assets.binary_tree.avl_tree",
        "documentation": {}
    },
    {
        "label": "left_rotation",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.binary_tree.avl_tree",
        "description": "python-gitbook-master..gitbook.assets.binary_tree.avl_tree",
        "peekOfCode": "def left_rotation(node: my_node) -> my_node:\n    \"\"\"\n    a mirror symmetry rotation of the left_rotation\n    \"\"\"\n    print(\"right rotation node:\", node.get_data())\n    ret = node.get_right()\n    assert ret is not None\n    node.set_right(ret.get_left())\n    ret.set_left(node)\n    h1 = my_max(get_height(node.get_right()), get_height(node.get_left())) + 1",
        "detail": "python-gitbook-master..gitbook.assets.binary_tree.avl_tree",
        "documentation": {}
    },
    {
        "label": "lr_rotation",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.binary_tree.avl_tree",
        "description": "python-gitbook-master..gitbook.assets.binary_tree.avl_tree",
        "peekOfCode": "def lr_rotation(node: my_node) -> my_node:\n    r\"\"\"\n            A              A                    Br\n           / \\            / \\                  /  \\\n          B   C    LR    Br  C       RR       B    A\n         / \\       -->  /  \\         -->    /     / \\\n        Bl  Br         B   UB              Bl    UB  C\n             \\        /\n             UB     Bl\n    RR = right_rotation   LR = left_rotation",
        "detail": "python-gitbook-master..gitbook.assets.binary_tree.avl_tree",
        "documentation": {}
    },
    {
        "label": "rl_rotation",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.binary_tree.avl_tree",
        "description": "python-gitbook-master..gitbook.assets.binary_tree.avl_tree",
        "peekOfCode": "def rl_rotation(node: my_node) -> my_node:\n    right_child = node.get_right()\n    assert right_child is not None\n    node.set_right(right_rotation(right_child))\n    return left_rotation(node)\ndef insert_node(node: Optional[\"my_node\"], data: Any) -> Optional[\"my_node\"]:\n    if node is None:\n        return my_node(data)\n    if data < node.get_data():\n        node.set_left(insert_node(node.get_left(), data))",
        "detail": "python-gitbook-master..gitbook.assets.binary_tree.avl_tree",
        "documentation": {}
    },
    {
        "label": "insert_node",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.binary_tree.avl_tree",
        "description": "python-gitbook-master..gitbook.assets.binary_tree.avl_tree",
        "peekOfCode": "def insert_node(node: Optional[\"my_node\"], data: Any) -> Optional[\"my_node\"]:\n    if node is None:\n        return my_node(data)\n    if data < node.get_data():\n        node.set_left(insert_node(node.get_left(), data))\n        if (\n            get_height(node.get_left()) - get_height(node.get_right()) == 2\n        ):  # an unbalance detected\n            left_child = node.get_left()\n            assert left_child is not None",
        "detail": "python-gitbook-master..gitbook.assets.binary_tree.avl_tree",
        "documentation": {}
    },
    {
        "label": "get_rightMost",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.binary_tree.avl_tree",
        "description": "python-gitbook-master..gitbook.assets.binary_tree.avl_tree",
        "peekOfCode": "def get_rightMost(root: my_node) -> Any:\n    while True:\n        right_child = root.get_right()\n        if right_child is None:\n            break\n        root = right_child\n    return root.get_data()\ndef get_leftMost(root: my_node) -> Any:\n    while True:\n        left_child = root.get_left()",
        "detail": "python-gitbook-master..gitbook.assets.binary_tree.avl_tree",
        "documentation": {}
    },
    {
        "label": "get_leftMost",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.binary_tree.avl_tree",
        "description": "python-gitbook-master..gitbook.assets.binary_tree.avl_tree",
        "peekOfCode": "def get_leftMost(root: my_node) -> Any:\n    while True:\n        left_child = root.get_left()\n        if left_child is None:\n            break\n        root = left_child\n    return root.get_data()\ndef del_node(root: my_node, data: Any) -> Optional[\"my_node\"]:\n    left_child = root.get_left()\n    right_child = root.get_right()",
        "detail": "python-gitbook-master..gitbook.assets.binary_tree.avl_tree",
        "documentation": {}
    },
    {
        "label": "del_node",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.binary_tree.avl_tree",
        "description": "python-gitbook-master..gitbook.assets.binary_tree.avl_tree",
        "peekOfCode": "def del_node(root: my_node, data: Any) -> Optional[\"my_node\"]:\n    left_child = root.get_left()\n    right_child = root.get_right()\n    if root.get_data() == data:\n        if left_child is not None and right_child is not None:\n            temp_data = get_leftMost(right_child)\n            root.set_data(temp_data)\n            root.set_right(del_node(right_child, temp_data))\n        elif left_child is not None:\n            root = left_child",
        "detail": "python-gitbook-master..gitbook.assets.binary_tree.avl_tree",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.binary_tree.basic_binary_tree",
        "description": "python-gitbook-master..gitbook.assets.binary_tree.basic_binary_tree",
        "peekOfCode": "class Node:\n    \"\"\"\n    A Node has data variable and pointers to Nodes to its left and right.\n    \"\"\"\n    def __init__(self, data: int) -> None:\n        self.data = data\n        self.left: Optional[Node] = None\n        self.right: Optional[Node] = None\ndef display(tree: Optional[Node]) -> None:  # In Order traversal of the tree\n    \"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.binary_tree.basic_binary_tree",
        "documentation": {}
    },
    {
        "label": "display",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.binary_tree.basic_binary_tree",
        "description": "python-gitbook-master..gitbook.assets.binary_tree.basic_binary_tree",
        "peekOfCode": "def display(tree: Optional[Node]) -> None:  # In Order traversal of the tree\n    \"\"\"\n    >>> root = Node(1)\n    >>> root.left = Node(0)\n    >>> root.right = Node(2)\n    >>> display(root)\n    0\n    1\n    2\n    >>> display(root.right)",
        "detail": "python-gitbook-master..gitbook.assets.binary_tree.basic_binary_tree",
        "documentation": {}
    },
    {
        "label": "depth_of_tree",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.binary_tree.basic_binary_tree",
        "description": "python-gitbook-master..gitbook.assets.binary_tree.basic_binary_tree",
        "peekOfCode": "def depth_of_tree(tree: Optional[Node]) -> int:\n    \"\"\"\n    Recursive function that returns the depth of a binary tree.\n    >>> root = Node(0)\n    >>> depth_of_tree(root)\n    1\n    >>> root.left = Node(0)\n    >>> depth_of_tree(root)\n    2\n    >>> root.right = Node(0)",
        "detail": "python-gitbook-master..gitbook.assets.binary_tree.basic_binary_tree",
        "documentation": {}
    },
    {
        "label": "is_full_binary_tree",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.binary_tree.basic_binary_tree",
        "description": "python-gitbook-master..gitbook.assets.binary_tree.basic_binary_tree",
        "peekOfCode": "def is_full_binary_tree(tree: Node) -> bool:\n    \"\"\"\n    Returns True if this is a full binary tree\n    >>> root = Node(0)\n    >>> is_full_binary_tree(root)\n    True\n    >>> root.left = Node(0)\n    >>> is_full_binary_tree(root)\n    False\n    >>> root.right = Node(0)",
        "detail": "python-gitbook-master..gitbook.assets.binary_tree.basic_binary_tree",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.binary_tree.basic_binary_tree",
        "description": "python-gitbook-master..gitbook.assets.binary_tree.basic_binary_tree",
        "peekOfCode": "def main() -> None:  # Main function for testing.\n    tree = Node(1)\n    tree.left = Node(2)\n    tree.right = Node(3)\n    tree.left.left = Node(4)\n    tree.left.right = Node(5)\n    tree.left.right.left = Node(6)\n    tree.right.left = Node(7)\n    tree.right.left.left = Node(8)\n    tree.right.left.left.right = Node(9)",
        "detail": "python-gitbook-master..gitbook.assets.binary_tree.basic_binary_tree",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.binary_tree.binary_search_tree",
        "description": "python-gitbook-master..gitbook.assets.binary_tree.binary_search_tree",
        "peekOfCode": "class Node:\n    def __init__(self, value, parent):\n        self.value = value\n        self.parent = parent  # Added in order to delete a node easier\n        self.left = None\n        self.right = None\n    def __repr__(self):\n        from pprint import pformat\n        if self.left is None and self.right is None:\n            return str(self.value)",
        "detail": "python-gitbook-master..gitbook.assets.binary_tree.binary_search_tree",
        "documentation": {}
    },
    {
        "label": "BinarySearchTree",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.binary_tree.binary_search_tree",
        "description": "python-gitbook-master..gitbook.assets.binary_tree.binary_search_tree",
        "peekOfCode": "class BinarySearchTree:\n    def __init__(self, root=None):\n        self.root = root\n    def __str__(self):\n        \"\"\"\n        Return a string of all the Nodes using in order traversal\n        \"\"\"\n        return str(self.root)\n    def __reassign_nodes(self, node, new_children):\n        if new_children is not None:  # reset its kids",
        "detail": "python-gitbook-master..gitbook.assets.binary_tree.binary_search_tree",
        "documentation": {}
    },
    {
        "label": "postorder",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.binary_tree.binary_search_tree",
        "description": "python-gitbook-master..gitbook.assets.binary_tree.binary_search_tree",
        "peekOfCode": "def postorder(curr_node):\n    \"\"\"\n    postOrder (left, right, self)\n    \"\"\"\n    node_list = list()\n    if curr_node is not None:\n        node_list = postorder(curr_node.left) + postorder(curr_node.right) + [curr_node]\n    return node_list\ndef binary_search_tree():\n    r\"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.binary_tree.binary_search_tree",
        "documentation": {}
    },
    {
        "label": "binary_search_tree",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.binary_tree.binary_search_tree",
        "description": "python-gitbook-master..gitbook.assets.binary_tree.binary_search_tree",
        "peekOfCode": "def binary_search_tree():\n    r\"\"\"\n    Example\n                  8\n                 / \\\n                3   10\n               / \\    \\\n              1   6    14\n                 / \\   /\n                4   7 13",
        "detail": "python-gitbook-master..gitbook.assets.binary_tree.binary_search_tree",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.binary_tree.binary_search_tree_recursive",
        "description": "python-gitbook-master..gitbook.assets.binary_tree.binary_search_tree_recursive",
        "peekOfCode": "class Node:\n    def __init__(self, label: int, parent: Optional[\"Node\"]) -> None:\n        self.label = label\n        self.parent = parent\n        self.left: Optional[Node] = None\n        self.right: Optional[Node] = None\nclass BinarySearchTree:\n    def __init__(self) -> None:\n        self.root: Optional[Node] = None\n    def empty(self) -> None:",
        "detail": "python-gitbook-master..gitbook.assets.binary_tree.binary_search_tree_recursive",
        "documentation": {}
    },
    {
        "label": "BinarySearchTree",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.binary_tree.binary_search_tree_recursive",
        "description": "python-gitbook-master..gitbook.assets.binary_tree.binary_search_tree_recursive",
        "peekOfCode": "class BinarySearchTree:\n    def __init__(self) -> None:\n        self.root: Optional[Node] = None\n    def empty(self) -> None:\n        \"\"\"\n        Empties the tree\n        >>> t = BinarySearchTree()\n        >>> assert t.root is None\n        >>> t.put(8)\n        >>> assert t.root is not None",
        "detail": "python-gitbook-master..gitbook.assets.binary_tree.binary_search_tree_recursive",
        "documentation": {}
    },
    {
        "label": "BinarySearchTreeTest",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.binary_tree.binary_search_tree_recursive",
        "description": "python-gitbook-master..gitbook.assets.binary_tree.binary_search_tree_recursive",
        "peekOfCode": "class BinarySearchTreeTest(unittest.TestCase):\n    @staticmethod\n    def _get_binary_search_tree() -> BinarySearchTree:\n        r\"\"\"\n              8\n             / \\\n            3   10\n           / \\    \\\n          1   6    14\n             / \\   /",
        "detail": "python-gitbook-master..gitbook.assets.binary_tree.binary_search_tree_recursive",
        "documentation": {}
    },
    {
        "label": "binary_search_tree_example",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.binary_tree.binary_search_tree_recursive",
        "description": "python-gitbook-master..gitbook.assets.binary_tree.binary_search_tree_recursive",
        "peekOfCode": "def binary_search_tree_example() -> None:\n    r\"\"\"\n    Example\n                  8\n                 / \\\n                3   10\n               / \\    \\\n              1   6    14\n                 / \\   /\n                4   7 13",
        "detail": "python-gitbook-master..gitbook.assets.binary_tree.binary_search_tree_recursive",
        "documentation": {}
    },
    {
        "label": "binary_tree_mirror_dict",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.binary_tree.binary_tree_mirror",
        "description": "python-gitbook-master..gitbook.assets.binary_tree.binary_tree_mirror",
        "peekOfCode": "def binary_tree_mirror_dict(binary_tree_mirror_dictionary: dict, root: int):\n    if not root or root not in binary_tree_mirror_dictionary:\n        return\n    left_child, right_child = binary_tree_mirror_dictionary[root][:2]\n    binary_tree_mirror_dictionary[root] = [right_child, left_child]\n    binary_tree_mirror_dict(binary_tree_mirror_dictionary, left_child)\n    binary_tree_mirror_dict(binary_tree_mirror_dictionary, right_child)\ndef binary_tree_mirror(binary_tree: dict, root: int = 1) -> dict:\n    \"\"\"\n    >>> binary_tree_mirror({ 1: [2,3], 2: [4,5], 3: [6,7], 7: [8,9]}, 1)",
        "detail": "python-gitbook-master..gitbook.assets.binary_tree.binary_tree_mirror",
        "documentation": {}
    },
    {
        "label": "binary_tree_mirror",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.binary_tree.binary_tree_mirror",
        "description": "python-gitbook-master..gitbook.assets.binary_tree.binary_tree_mirror",
        "peekOfCode": "def binary_tree_mirror(binary_tree: dict, root: int = 1) -> dict:\n    \"\"\"\n    >>> binary_tree_mirror({ 1: [2,3], 2: [4,5], 3: [6,7], 7: [8,9]}, 1)\n    {1: [3, 2], 2: [5, 4], 3: [7, 6], 7: [9, 8]}\n    >>> binary_tree_mirror({ 1: [2,3], 2: [4,5], 3: [6,7], 4: [10,11]}, 1)\n    {1: [3, 2], 2: [5, 4], 3: [7, 6], 4: [11, 10]}\n    >>> binary_tree_mirror({ 1: [2,3], 2: [4,5], 3: [6,7], 4: [10,11]}, 5)\n    Traceback (most recent call last):\n    ...\n    ValueError: root 5 is not present in the binary_tree",
        "detail": "python-gitbook-master..gitbook.assets.binary_tree.binary_tree_mirror",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.binary_tree.binary_tree_traversals",
        "description": "python-gitbook-master..gitbook.assets.binary_tree.binary_tree_traversals",
        "peekOfCode": "class Node:\n    data: int\n    left: Optional[\"Node\"] = None\n    right: Optional[\"Node\"] = None\ndef make_tree() -> Node:\n    return Node(1, Node(2, Node(4), Node(5)), Node(3))\ndef preorder(root: Node):\n    \"\"\"\n    Pre-order traversal visits root node, left subtree, right subtree.\n    >>> preorder(make_tree())",
        "detail": "python-gitbook-master..gitbook.assets.binary_tree.binary_tree_traversals",
        "documentation": {}
    },
    {
        "label": "make_tree",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.binary_tree.binary_tree_traversals",
        "description": "python-gitbook-master..gitbook.assets.binary_tree.binary_tree_traversals",
        "peekOfCode": "def make_tree() -> Node:\n    return Node(1, Node(2, Node(4), Node(5)), Node(3))\ndef preorder(root: Node):\n    \"\"\"\n    Pre-order traversal visits root node, left subtree, right subtree.\n    >>> preorder(make_tree())\n    [1, 2, 4, 5, 3]\n    \"\"\"\n    return [root.data] + preorder(root.left) + preorder(root.right) if root else []\ndef postorder(root: Node):",
        "detail": "python-gitbook-master..gitbook.assets.binary_tree.binary_tree_traversals",
        "documentation": {}
    },
    {
        "label": "preorder",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.binary_tree.binary_tree_traversals",
        "description": "python-gitbook-master..gitbook.assets.binary_tree.binary_tree_traversals",
        "peekOfCode": "def preorder(root: Node):\n    \"\"\"\n    Pre-order traversal visits root node, left subtree, right subtree.\n    >>> preorder(make_tree())\n    [1, 2, 4, 5, 3]\n    \"\"\"\n    return [root.data] + preorder(root.left) + preorder(root.right) if root else []\ndef postorder(root: Node):\n    \"\"\"\n    Post-order traversal visits left subtree, right subtree, root node.",
        "detail": "python-gitbook-master..gitbook.assets.binary_tree.binary_tree_traversals",
        "documentation": {}
    },
    {
        "label": "postorder",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.binary_tree.binary_tree_traversals",
        "description": "python-gitbook-master..gitbook.assets.binary_tree.binary_tree_traversals",
        "peekOfCode": "def postorder(root: Node):\n    \"\"\"\n    Post-order traversal visits left subtree, right subtree, root node.\n    >>> postorder(make_tree())\n    [4, 5, 2, 3, 1]\n    \"\"\"\n    return postorder(root.left) + postorder(root.right) + [root.data] if root else []\ndef inorder(root: Node):\n    \"\"\"\n    In-order traversal visits left subtree, root node, right subtree.",
        "detail": "python-gitbook-master..gitbook.assets.binary_tree.binary_tree_traversals",
        "documentation": {}
    },
    {
        "label": "inorder",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.binary_tree.binary_tree_traversals",
        "description": "python-gitbook-master..gitbook.assets.binary_tree.binary_tree_traversals",
        "peekOfCode": "def inorder(root: Node):\n    \"\"\"\n    In-order traversal visits left subtree, root node, right subtree.\n    >>> inorder(make_tree())\n    [4, 2, 5, 1, 3]\n    \"\"\"\n    return inorder(root.left) + [root.data] + inorder(root.right) if root else []\ndef height(root: Node):\n    \"\"\"\n    Recursive function for calculating the height of the binary tree.",
        "detail": "python-gitbook-master..gitbook.assets.binary_tree.binary_tree_traversals",
        "documentation": {}
    },
    {
        "label": "height",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.binary_tree.binary_tree_traversals",
        "description": "python-gitbook-master..gitbook.assets.binary_tree.binary_tree_traversals",
        "peekOfCode": "def height(root: Node):\n    \"\"\"\n    Recursive function for calculating the height of the binary tree.\n    >>> height(None)\n    0\n    >>> height(make_tree())\n    3\n    \"\"\"\n    return (max(height(root.left), height(root.right)) + 1) if root else 0\ndef level_order_1(root: Node):",
        "detail": "python-gitbook-master..gitbook.assets.binary_tree.binary_tree_traversals",
        "documentation": {}
    },
    {
        "label": "level_order_1",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.binary_tree.binary_tree_traversals",
        "description": "python-gitbook-master..gitbook.assets.binary_tree.binary_tree_traversals",
        "peekOfCode": "def level_order_1(root: Node):\n    \"\"\"\n    Print whole binary tree in Level Order Traverse.\n    Level Order traverse: Visit nodes of the tree level-by-level.\n    \"\"\"\n    if not root:\n        return\n    temp = root\n    que = [temp]\n    while len(que) > 0:",
        "detail": "python-gitbook-master..gitbook.assets.binary_tree.binary_tree_traversals",
        "documentation": {}
    },
    {
        "label": "level_order_2",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.binary_tree.binary_tree_traversals",
        "description": "python-gitbook-master..gitbook.assets.binary_tree.binary_tree_traversals",
        "peekOfCode": "def level_order_2(root: Node, level: int):\n    \"\"\"\n    Level-wise traversal: Print all nodes present at the given level of the binary tree\n    \"\"\"\n    if not root:\n        return root\n    if level == 1:\n        print(root.data, end=\" \")\n    elif level > 1:\n        level_order_2(root.left, level - 1)",
        "detail": "python-gitbook-master..gitbook.assets.binary_tree.binary_tree_traversals",
        "documentation": {}
    },
    {
        "label": "print_left_to_right",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.binary_tree.binary_tree_traversals",
        "description": "python-gitbook-master..gitbook.assets.binary_tree.binary_tree_traversals",
        "peekOfCode": "def print_left_to_right(root: Node, level: int):\n    \"\"\"\n    Print elements on particular level from left to right direction of the binary tree.\n    \"\"\"\n    if not root:\n        return\n    if level == 1:\n        print(root.data, end=\" \")\n    elif level > 1:\n        print_left_to_right(root.left, level - 1)",
        "detail": "python-gitbook-master..gitbook.assets.binary_tree.binary_tree_traversals",
        "documentation": {}
    },
    {
        "label": "print_right_to_left",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.binary_tree.binary_tree_traversals",
        "description": "python-gitbook-master..gitbook.assets.binary_tree.binary_tree_traversals",
        "peekOfCode": "def print_right_to_left(root: Node, level: int):\n    \"\"\"\n    Print elements on particular level from right to left direction of the binary tree.\n    \"\"\"\n    if not root:\n        return\n    if level == 1:\n        print(root.data, end=\" \")\n    elif level > 1:\n        print_right_to_left(root.right, level - 1)",
        "detail": "python-gitbook-master..gitbook.assets.binary_tree.binary_tree_traversals",
        "documentation": {}
    },
    {
        "label": "zigzag",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.binary_tree.binary_tree_traversals",
        "description": "python-gitbook-master..gitbook.assets.binary_tree.binary_tree_traversals",
        "peekOfCode": "def zigzag(root: Node):\n    \"\"\"\n    ZigZag traverse: Print node left to right and right to left, alternatively.\n    \"\"\"\n    flag = 0\n    height_tree = height(root)\n    for h in range(1, height_tree + 1):\n        if flag == 0:\n            print_left_to_right(root, h)\n            flag = 1",
        "detail": "python-gitbook-master..gitbook.assets.binary_tree.binary_tree_traversals",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.binary_tree.binary_tree_traversals",
        "description": "python-gitbook-master..gitbook.assets.binary_tree.binary_tree_traversals",
        "peekOfCode": "def main():  # Main function for testing.\n    \"\"\"\n    Create binary tree.\n    \"\"\"\n    root = make_tree()\n    \"\"\"\n    All Traversals of the binary are as follows:\n    \"\"\"\n    print(f\"  In-order Traversal is {inorder(root)}\")\n    print(f\" Pre-order Traversal is {preorder(root)}\")",
        "detail": "python-gitbook-master..gitbook.assets.binary_tree.binary_tree_traversals",
        "documentation": {}
    },
    {
        "label": "FenwickTree",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.binary_tree.fenwick_tree",
        "description": "python-gitbook-master..gitbook.assets.binary_tree.fenwick_tree",
        "peekOfCode": "class FenwickTree:\n    def __init__(self, SIZE):  # create fenwick tree with size SIZE\n        self.Size = SIZE\n        self.ft = [0 for i in range(0, SIZE)]\n    def update(self, i, val):  # update data (adding) in index i in O(lg N)\n        while i < self.Size:\n            self.ft[i] += val\n            i += i & (-i)\n    def query(self, i):  # query cumulative data from index 0 to i in O(lg N)\n        ret = 0",
        "detail": "python-gitbook-master..gitbook.assets.binary_tree.fenwick_tree",
        "documentation": {}
    },
    {
        "label": "SegmentTree",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.binary_tree.lazy_segment_tree",
        "description": "python-gitbook-master..gitbook.assets.binary_tree.lazy_segment_tree",
        "peekOfCode": "class SegmentTree:\n    def __init__(self, size: int) -> None:\n        self.size = size\n        # approximate the overall size of segment tree with given value\n        self.segment_tree = [0 for i in range(0, 4 * size)]\n        # create array to store lazy update\n        self.lazy = [0 for i in range(0, 4 * size)]\n        self.flag = [0 for i in range(0, 4 * size)]  # flag for lazy update\n    def left(self, idx: int) -> int:\n        \"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.binary_tree.lazy_segment_tree",
        "documentation": {}
    },
    {
        "label": "swap",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.binary_tree.lowest_common_ancestor",
        "description": "python-gitbook-master..gitbook.assets.binary_tree.lowest_common_ancestor",
        "peekOfCode": "def swap(a: int, b: int) -> tuple[int, int]:\n    \"\"\"\n    Return a tuple (b, a) when given two integers a and b\n    >>> swap(2,3)\n    (3, 2)\n    >>> swap(3,4)\n    (4, 3)\n    >>> swap(67, 12)\n    (12, 67)\n    \"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.binary_tree.lowest_common_ancestor",
        "documentation": {}
    },
    {
        "label": "create_sparse",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.binary_tree.lowest_common_ancestor",
        "description": "python-gitbook-master..gitbook.assets.binary_tree.lowest_common_ancestor",
        "peekOfCode": "def create_sparse(max_node: int, parent: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    creating sparse table which saves each nodes 2^i-th parent\n    \"\"\"\n    j = 1\n    while (1 << j) < max_node:\n        for i in range(1, max_node + 1):\n            parent[j][i] = parent[j - 1][parent[j - 1][i]]\n        j += 1\n    return parent",
        "detail": "python-gitbook-master..gitbook.assets.binary_tree.lowest_common_ancestor",
        "documentation": {}
    },
    {
        "label": "lowest_common_ancestor",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.binary_tree.lowest_common_ancestor",
        "description": "python-gitbook-master..gitbook.assets.binary_tree.lowest_common_ancestor",
        "peekOfCode": "def lowest_common_ancestor(\n    u: int, v: int, level: list[int], parent: list[list[int]]\n) -> list[list[int]]:\n    # u must be deeper in the tree than v\n    if level[u] < level[v]:\n        u, v = swap(u, v)\n    # making depth of u same as depth of v\n    for i in range(18, -1, -1):\n        if level[u] - (1 << i) >= level[v]:\n            u = parent[i][u]",
        "detail": "python-gitbook-master..gitbook.assets.binary_tree.lowest_common_ancestor",
        "documentation": {}
    },
    {
        "label": "breadth_first_search",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.binary_tree.lowest_common_ancestor",
        "description": "python-gitbook-master..gitbook.assets.binary_tree.lowest_common_ancestor",
        "peekOfCode": "def breadth_first_search(\n    level: list[int],\n    parent: list[list[int]],\n    max_node: int,\n    graph: dict[int, int],\n    root=1,\n) -> tuple[list[int], list[list[int]]]:\n    \"\"\"\n    sets every nodes direct parent\n    parent of root node is set to 0",
        "detail": "python-gitbook-master..gitbook.assets.binary_tree.lowest_common_ancestor",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.binary_tree.lowest_common_ancestor",
        "description": "python-gitbook-master..gitbook.assets.binary_tree.lowest_common_ancestor",
        "peekOfCode": "def main() -> None:\n    max_node = 13\n    # initializing with 0\n    parent = [[0 for _ in range(max_node + 10)] for _ in range(20)]\n    # initializing with -1 which means every node is unvisited\n    level = [-1 for _ in range(max_node + 10)]\n    graph = {\n        1: [2, 3, 4],\n        2: [5],\n        3: [6, 7],",
        "detail": "python-gitbook-master..gitbook.assets.binary_tree.lowest_common_ancestor",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.binary_tree.merge_two_binary_trees",
        "description": "python-gitbook-master..gitbook.assets.binary_tree.merge_two_binary_trees",
        "peekOfCode": "class Node:\n    \"\"\"\n    A binary node has value variable and pointers to its left and right node.\n    \"\"\"\n    def __init__(self, value: int = 0) -> None:\n        self.value = value\n        self.left: Optional[Node] = None\n        self.right: Optional[Node] = None\ndef merge_two_binary_trees(tree1: Optional[Node], tree2: Optional[Node]) -> Node:\n    \"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.binary_tree.merge_two_binary_trees",
        "documentation": {}
    },
    {
        "label": "merge_two_binary_trees",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.binary_tree.merge_two_binary_trees",
        "description": "python-gitbook-master..gitbook.assets.binary_tree.merge_two_binary_trees",
        "peekOfCode": "def merge_two_binary_trees(tree1: Optional[Node], tree2: Optional[Node]) -> Node:\n    \"\"\"\n    Returns root node of the merged tree.\n    >>> tree1 = Node(5)\n    >>> tree1.left = Node(6)\n    >>> tree1.right = Node(7)\n    >>> tree1.left.left = Node(2)\n    >>> tree2 = Node(4)\n    >>> tree2.left = Node(5)\n    >>> tree2.right = Node(8)",
        "detail": "python-gitbook-master..gitbook.assets.binary_tree.merge_two_binary_trees",
        "documentation": {}
    },
    {
        "label": "print_preorder",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.binary_tree.merge_two_binary_trees",
        "description": "python-gitbook-master..gitbook.assets.binary_tree.merge_two_binary_trees",
        "peekOfCode": "def print_preorder(root: Optional[Node]) -> None:\n    \"\"\"\n    Print pre-order traversal of the tree.\n    >>> root = Node(1)\n    >>> root.left = Node(2)\n    >>> root.right = Node(3)\n    >>> print_preorder(root)\n    1\n    2\n    3",
        "detail": "python-gitbook-master..gitbook.assets.binary_tree.merge_two_binary_trees",
        "documentation": {}
    },
    {
        "label": "SegmentTree",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.binary_tree.non_recursive_segment_tree",
        "description": "python-gitbook-master..gitbook.assets.binary_tree.non_recursive_segment_tree",
        "peekOfCode": "class SegmentTree:\n    def __init__(self, arr: list[T], fnc: Callable[[T, T], T]) -> None:\n        \"\"\"\n        Segment Tree constructor, it works just with commutative combiner.\n        :param arr: list of elements for the segment tree\n        :param fnc: commutative function for combine two elements\n        >>> SegmentTree(['a', 'b', 'c'], lambda a, b: f'{a}{b}').query(0, 2)\n        'abc'\n        >>> SegmentTree([(1, 2), (2, 3), (3, 4)],\n        ...             lambda a, b: (a[0] + b[0], a[1] + b[1])).query(0, 2)",
        "detail": "python-gitbook-master..gitbook.assets.binary_tree.non_recursive_segment_tree",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.binary_tree.non_recursive_segment_tree",
        "description": "python-gitbook-master..gitbook.assets.binary_tree.non_recursive_segment_tree",
        "peekOfCode": "T = TypeVar(\"T\")\nclass SegmentTree:\n    def __init__(self, arr: list[T], fnc: Callable[[T, T], T]) -> None:\n        \"\"\"\n        Segment Tree constructor, it works just with commutative combiner.\n        :param arr: list of elements for the segment tree\n        :param fnc: commutative function for combine two elements\n        >>> SegmentTree(['a', 'b', 'c'], lambda a, b: f'{a}{b}').query(0, 2)\n        'abc'\n        >>> SegmentTree([(1, 2), (2, 3), (3, 4)],",
        "detail": "python-gitbook-master..gitbook.assets.binary_tree.non_recursive_segment_tree",
        "documentation": {}
    },
    {
        "label": "binomial_coefficient",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.binary_tree.number_of_possible_binary_trees",
        "description": "python-gitbook-master..gitbook.assets.binary_tree.number_of_possible_binary_trees",
        "peekOfCode": "def binomial_coefficient(n: int, k: int) -> int:\n    \"\"\"\n    Since Here we Find the Binomial Coefficient:\n    https://en.wikipedia.org/wiki/Binomial_coefficient\n    C(n,k) = n! / k!(n-k)!\n    :param n: 2 times of Number of nodes\n    :param k: Number of nodes\n    :return:  Integer Value\n    >>> binomial_coefficient(4, 2)\n    6",
        "detail": "python-gitbook-master..gitbook.assets.binary_tree.number_of_possible_binary_trees",
        "documentation": {}
    },
    {
        "label": "catalan_number",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.binary_tree.number_of_possible_binary_trees",
        "description": "python-gitbook-master..gitbook.assets.binary_tree.number_of_possible_binary_trees",
        "peekOfCode": "def catalan_number(node_count: int) -> int:\n    \"\"\"\n    We can find Catalan number many ways but here we use Binomial Coefficient because it\n    does the job in O(n)\n    return the Catalan number of n using 2nCn/(n+1).\n    :param n: number of nodes\n    :return: Catalan number of n nodes\n    >>> catalan_number(5)\n    42\n    >>> catalan_number(6)",
        "detail": "python-gitbook-master..gitbook.assets.binary_tree.number_of_possible_binary_trees",
        "documentation": {}
    },
    {
        "label": "factorial",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.binary_tree.number_of_possible_binary_trees",
        "description": "python-gitbook-master..gitbook.assets.binary_tree.number_of_possible_binary_trees",
        "peekOfCode": "def factorial(n: int) -> int:\n    \"\"\"\n    Return the factorial of a number.\n    :param n: Number to find the Factorial of.\n    :return: Factorial of n.\n    >>> import math\n    >>> all(factorial(i) == math.factorial(i) for i in range(10))\n    True\n    >>> factorial(-5)  # doctest: +ELLIPSIS\n    Traceback (most recent call last):",
        "detail": "python-gitbook-master..gitbook.assets.binary_tree.number_of_possible_binary_trees",
        "documentation": {}
    },
    {
        "label": "binary_tree_count",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.binary_tree.number_of_possible_binary_trees",
        "description": "python-gitbook-master..gitbook.assets.binary_tree.number_of_possible_binary_trees",
        "peekOfCode": "def binary_tree_count(node_count: int) -> int:\n    \"\"\"\n    Return the number of possible of binary trees.\n    :param n: number of nodes\n    :return: Number of possible binary trees\n    >>> binary_tree_count(5)\n    5040\n    >>> binary_tree_count(6)\n    95040\n    \"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.binary_tree.number_of_possible_binary_trees",
        "documentation": {}
    },
    {
        "label": "RedBlackTree",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.binary_tree.red_black_tree",
        "description": "python-gitbook-master..gitbook.assets.binary_tree.red_black_tree",
        "peekOfCode": "class RedBlackTree:\n    \"\"\"\n    A Red-Black tree, which is a self-balancing BST (binary search\n    tree).\n    This tree has similar performance to AVL trees, but the balancing is\n    less strict, so it will perform faster for writing/deleting nodes\n    and slower for reading in the average case, though, because they're\n    both balanced binary search trees, both will get the same asymptotic\n    performance.\n    To read more about them, https://en.wikipedia.org/wiki/Red–black_tree",
        "detail": "python-gitbook-master..gitbook.assets.binary_tree.red_black_tree",
        "documentation": {}
    },
    {
        "label": "color",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.binary_tree.red_black_tree",
        "description": "python-gitbook-master..gitbook.assets.binary_tree.red_black_tree",
        "peekOfCode": "def color(node) -> int:\n    \"\"\"Returns the color of a node, allowing for None leaves.\"\"\"\n    if node is None:\n        return 0\n    else:\n        return node.color\n\"\"\"\nCode for testing the various\nfunctions of the red-black tree.\n\"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.binary_tree.red_black_tree",
        "documentation": {}
    },
    {
        "label": "test_rotations",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.binary_tree.red_black_tree",
        "description": "python-gitbook-master..gitbook.assets.binary_tree.red_black_tree",
        "peekOfCode": "def test_rotations() -> bool:\n    \"\"\"Test that the rotate_left and rotate_right functions work.\"\"\"\n    # Make a tree to test on\n    tree = RedBlackTree(0)\n    tree.left = RedBlackTree(-10, parent=tree)\n    tree.right = RedBlackTree(10, parent=tree)\n    tree.left.left = RedBlackTree(-20, parent=tree.left)\n    tree.left.right = RedBlackTree(-5, parent=tree.left)\n    tree.right.left = RedBlackTree(5, parent=tree.right)\n    tree.right.right = RedBlackTree(20, parent=tree.right)",
        "detail": "python-gitbook-master..gitbook.assets.binary_tree.red_black_tree",
        "documentation": {}
    },
    {
        "label": "test_insertion_speed",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.binary_tree.red_black_tree",
        "description": "python-gitbook-master..gitbook.assets.binary_tree.red_black_tree",
        "peekOfCode": "def test_insertion_speed() -> bool:\n    \"\"\"Test that the tree balances inserts to O(log(n)) by doing a lot\n    of them.\n    \"\"\"\n    tree = RedBlackTree(-1)\n    for i in range(300000):\n        tree = tree.insert(i)\n    return True\ndef test_insert() -> bool:\n    \"\"\"Test the insert() method of the tree correctly balances, colors,",
        "detail": "python-gitbook-master..gitbook.assets.binary_tree.red_black_tree",
        "documentation": {}
    },
    {
        "label": "test_insert",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.binary_tree.red_black_tree",
        "description": "python-gitbook-master..gitbook.assets.binary_tree.red_black_tree",
        "peekOfCode": "def test_insert() -> bool:\n    \"\"\"Test the insert() method of the tree correctly balances, colors,\n    and inserts.\n    \"\"\"\n    tree = RedBlackTree(0)\n    tree.insert(8)\n    tree.insert(-8)\n    tree.insert(4)\n    tree.insert(12)\n    tree.insert(10)",
        "detail": "python-gitbook-master..gitbook.assets.binary_tree.red_black_tree",
        "documentation": {}
    },
    {
        "label": "test_insert_and_search",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.binary_tree.red_black_tree",
        "description": "python-gitbook-master..gitbook.assets.binary_tree.red_black_tree",
        "peekOfCode": "def test_insert_and_search() -> bool:\n    \"\"\"Tests searching through the tree for values.\"\"\"\n    tree = RedBlackTree(0)\n    tree.insert(8)\n    tree.insert(-8)\n    tree.insert(4)\n    tree.insert(12)\n    tree.insert(10)\n    tree.insert(11)\n    if 5 in tree or -6 in tree or -10 in tree or 13 in tree:",
        "detail": "python-gitbook-master..gitbook.assets.binary_tree.red_black_tree",
        "documentation": {}
    },
    {
        "label": "test_insert_delete",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.binary_tree.red_black_tree",
        "description": "python-gitbook-master..gitbook.assets.binary_tree.red_black_tree",
        "peekOfCode": "def test_insert_delete() -> bool:\n    \"\"\"Test the insert() and delete() method of the tree, verifying the\n    insertion and removal of elements, and the balancing of the tree.\n    \"\"\"\n    tree = RedBlackTree(0)\n    tree = tree.insert(-12)\n    tree = tree.insert(8)\n    tree = tree.insert(-8)\n    tree = tree.insert(15)\n    tree = tree.insert(4)",
        "detail": "python-gitbook-master..gitbook.assets.binary_tree.red_black_tree",
        "documentation": {}
    },
    {
        "label": "test_floor_ceil",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.binary_tree.red_black_tree",
        "description": "python-gitbook-master..gitbook.assets.binary_tree.red_black_tree",
        "peekOfCode": "def test_floor_ceil() -> bool:\n    \"\"\"Tests the floor and ceiling functions in the tree.\"\"\"\n    tree = RedBlackTree(0)\n    tree.insert(-16)\n    tree.insert(16)\n    tree.insert(8)\n    tree.insert(24)\n    tree.insert(20)\n    tree.insert(22)\n    tuples = [(-20, None, -16), (-10, -16, 0), (8, 8, 8), (50, 24, None)]",
        "detail": "python-gitbook-master..gitbook.assets.binary_tree.red_black_tree",
        "documentation": {}
    },
    {
        "label": "test_min_max",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.binary_tree.red_black_tree",
        "description": "python-gitbook-master..gitbook.assets.binary_tree.red_black_tree",
        "peekOfCode": "def test_min_max() -> bool:\n    \"\"\"Tests the min and max functions in the tree.\"\"\"\n    tree = RedBlackTree(0)\n    tree.insert(-16)\n    tree.insert(16)\n    tree.insert(8)\n    tree.insert(24)\n    tree.insert(20)\n    tree.insert(22)\n    if tree.get_max() != 22 or tree.get_min() != -16:",
        "detail": "python-gitbook-master..gitbook.assets.binary_tree.red_black_tree",
        "documentation": {}
    },
    {
        "label": "test_tree_traversal",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.binary_tree.red_black_tree",
        "description": "python-gitbook-master..gitbook.assets.binary_tree.red_black_tree",
        "peekOfCode": "def test_tree_traversal() -> bool:\n    \"\"\"Tests the three different tree traversal functions.\"\"\"\n    tree = RedBlackTree(0)\n    tree = tree.insert(-16)\n    tree.insert(16)\n    tree.insert(8)\n    tree.insert(24)\n    tree.insert(20)\n    tree.insert(22)\n    if list(tree.inorder_traverse()) != [-16, 0, 8, 16, 20, 22, 24]:",
        "detail": "python-gitbook-master..gitbook.assets.binary_tree.red_black_tree",
        "documentation": {}
    },
    {
        "label": "test_tree_chaining",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.binary_tree.red_black_tree",
        "description": "python-gitbook-master..gitbook.assets.binary_tree.red_black_tree",
        "peekOfCode": "def test_tree_chaining() -> bool:\n    \"\"\"Tests the three different tree chaining functions.\"\"\"\n    tree = RedBlackTree(0)\n    tree = tree.insert(-16).insert(16).insert(8).insert(24).insert(20).insert(22)\n    if list(tree.inorder_traverse()) != [-16, 0, 8, 16, 20, 22, 24]:\n        return False\n    if list(tree.preorder_traverse()) != [0, -16, 16, 8, 22, 20, 24]:\n        return False\n    if list(tree.postorder_traverse()) != [-16, 8, 20, 24, 22, 16, 0]:\n        return False",
        "detail": "python-gitbook-master..gitbook.assets.binary_tree.red_black_tree",
        "documentation": {}
    },
    {
        "label": "print_results",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.binary_tree.red_black_tree",
        "description": "python-gitbook-master..gitbook.assets.binary_tree.red_black_tree",
        "peekOfCode": "def print_results(msg: str, passes: bool) -> None:\n    print(str(msg), \"works!\" if passes else \"doesn't work :(\")\ndef pytests() -> None:\n    assert test_rotations()\n    assert test_insert()\n    assert test_insert_and_search()\n    assert test_insert_delete()\n    assert test_floor_ceil()\n    assert test_tree_traversal()\n    assert test_tree_chaining()",
        "detail": "python-gitbook-master..gitbook.assets.binary_tree.red_black_tree",
        "documentation": {}
    },
    {
        "label": "pytests",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.binary_tree.red_black_tree",
        "description": "python-gitbook-master..gitbook.assets.binary_tree.red_black_tree",
        "peekOfCode": "def pytests() -> None:\n    assert test_rotations()\n    assert test_insert()\n    assert test_insert_and_search()\n    assert test_insert_delete()\n    assert test_floor_ceil()\n    assert test_tree_traversal()\n    assert test_tree_chaining()\ndef main() -> None:\n    \"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.binary_tree.red_black_tree",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.binary_tree.red_black_tree",
        "description": "python-gitbook-master..gitbook.assets.binary_tree.red_black_tree",
        "peekOfCode": "def main() -> None:\n    \"\"\"\n    >>> pytests()\n    \"\"\"\n    print_results(\"Rotating right and left\", test_rotations())\n    print_results(\"Inserting\", test_insert())\n    print_results(\"Searching\", test_insert_and_search())\n    print_results(\"Deleting\", test_insert_delete())\n    print_results(\"Floor and ceil\", test_floor_ceil())\n    print_results(\"Tree traversal\", test_tree_traversal())",
        "detail": "python-gitbook-master..gitbook.assets.binary_tree.red_black_tree",
        "documentation": {}
    },
    {
        "label": "SegmentTree",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.binary_tree.segment_tree",
        "description": "python-gitbook-master..gitbook.assets.binary_tree.segment_tree",
        "peekOfCode": "class SegmentTree:\n    def __init__(self, A):\n        self.N = len(A)\n        self.st = [0] * (\n            4 * self.N\n        )  # approximate the overall size of segment tree with array N\n        self.build(1, 0, self.N - 1)\n    def left(self, idx):\n        return idx * 2\n    def right(self, idx):",
        "detail": "python-gitbook-master..gitbook.assets.binary_tree.segment_tree",
        "documentation": {}
    },
    {
        "label": "SegmentTreeNode",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.binary_tree.segment_tree_other",
        "description": "python-gitbook-master..gitbook.assets.binary_tree.segment_tree_other",
        "peekOfCode": "class SegmentTreeNode:\n    def __init__(self, start, end, val, left=None, right=None):\n        self.start = start\n        self.end = end\n        self.val = val\n        self.mid = (start + end) // 2\n        self.left = left\n        self.right = right\n    def __str__(self):\n        return f\"val: {self.val}, start: {self.start}, end: {self.end}\"",
        "detail": "python-gitbook-master..gitbook.assets.binary_tree.segment_tree_other",
        "documentation": {}
    },
    {
        "label": "SegmentTree",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.binary_tree.segment_tree_other",
        "description": "python-gitbook-master..gitbook.assets.binary_tree.segment_tree_other",
        "peekOfCode": "class SegmentTree:\n    \"\"\"\n    >>> import operator\n    >>> num_arr = SegmentTree([2, 1, 5, 3, 4], operator.add)\n    >>> for node in num_arr.traverse():\n    ...     print(node)\n    ...\n    val: 15, start: 0, end: 4\n    val: 8, start: 0, end: 2\n    val: 7, start: 3, end: 4",
        "detail": "python-gitbook-master..gitbook.assets.binary_tree.segment_tree_other",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.binary_tree.treap",
        "description": "python-gitbook-master..gitbook.assets.binary_tree.treap",
        "peekOfCode": "class Node:\n    \"\"\"\n    Treap's node\n    Treap is a binary tree by value and heap by priority\n    \"\"\"\n    def __init__(self, value: Optional[int] = None):\n        self.value = value\n        self.prior = random()\n        self.left: Optional[Node] = None\n        self.right: Optional[Node] = None",
        "detail": "python-gitbook-master..gitbook.assets.binary_tree.treap",
        "documentation": {}
    },
    {
        "label": "split",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.binary_tree.treap",
        "description": "python-gitbook-master..gitbook.assets.binary_tree.treap",
        "peekOfCode": "def split(root: Optional[Node], value: int) -> Tuple[Optional[Node], Optional[Node]]:\n    \"\"\"\n    We split current tree into 2 trees with value:\n    Left tree contains all values less than split value.\n    Right tree contains all values greater or equal, than split value\n    \"\"\"\n    if root is None:  # None tree is split into 2 Nones\n        return None, None\n    elif root.value is None:\n        return None, None",
        "detail": "python-gitbook-master..gitbook.assets.binary_tree.treap",
        "documentation": {}
    },
    {
        "label": "merge",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.binary_tree.treap",
        "description": "python-gitbook-master..gitbook.assets.binary_tree.treap",
        "peekOfCode": "def merge(left: Optional[Node], right: Optional[Node]) -> Optional[Node]:\n    \"\"\"\n    We merge 2 trees into one.\n    Note: all left tree's values must be less than all right tree's\n    \"\"\"\n    if (not left) or (not right):  # If one node is None, return the other\n        return left or right\n    elif left.prior < right.prior:\n        \"\"\"\n        Left will be root because it has more priority",
        "detail": "python-gitbook-master..gitbook.assets.binary_tree.treap",
        "documentation": {}
    },
    {
        "label": "insert",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.binary_tree.treap",
        "description": "python-gitbook-master..gitbook.assets.binary_tree.treap",
        "peekOfCode": "def insert(root: Optional[Node], value: int) -> Optional[Node]:\n    \"\"\"\n    Insert element\n    Split current tree with a value into left, right,\n    Insert new node into the middle\n    Merge left, node, right into root\n    \"\"\"\n    node = Node(value)\n    left, right = split(root, value)\n    return merge(merge(left, node), right)",
        "detail": "python-gitbook-master..gitbook.assets.binary_tree.treap",
        "documentation": {}
    },
    {
        "label": "erase",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.binary_tree.treap",
        "description": "python-gitbook-master..gitbook.assets.binary_tree.treap",
        "peekOfCode": "def erase(root: Optional[Node], value: int) -> Optional[Node]:\n    \"\"\"\n    Erase element\n    Split all nodes with values less into left,\n    Split all nodes with values greater into right.\n    Merge left, right\n    \"\"\"\n    left, right = split(root, value - 1)\n    _, right = split(right, value)\n    return merge(left, right)",
        "detail": "python-gitbook-master..gitbook.assets.binary_tree.treap",
        "documentation": {}
    },
    {
        "label": "inorder",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.binary_tree.treap",
        "description": "python-gitbook-master..gitbook.assets.binary_tree.treap",
        "peekOfCode": "def inorder(root: Optional[Node]) -> None:\n    \"\"\"\n    Just recursive print of a tree\n    \"\"\"\n    if not root:  # None\n        return\n    else:\n        inorder(root.left)\n        print(root.value, end=\",\")\n        inorder(root.right)",
        "detail": "python-gitbook-master..gitbook.assets.binary_tree.treap",
        "documentation": {}
    },
    {
        "label": "interactTreap",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.binary_tree.treap",
        "description": "python-gitbook-master..gitbook.assets.binary_tree.treap",
        "peekOfCode": "def interactTreap(root: Optional[Node], args: str) -> Optional[Node]:\n    \"\"\"\n    Commands:\n    + value to add value into treap\n    - value to erase all nodes with value\n        >>> root = interactTreap(None, \"+1\")\n        >>> inorder(root)\n        1,\n        >>> root = interactTreap(root, \"+3 +5 +17 +19 +2 +16 +4 +0\")\n        >>> inorder(root)",
        "detail": "python-gitbook-master..gitbook.assets.binary_tree.treap",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.binary_tree.treap",
        "description": "python-gitbook-master..gitbook.assets.binary_tree.treap",
        "peekOfCode": "def main() -> None:\n    \"\"\"After each command, program prints treap\"\"\"\n    root = None\n    print(\n        \"enter numbers to create a tree, + value to add value into treap, \"\n        \"- value to erase all nodes with value. 'q' to quit. \"\n    )\n    args = input()\n    while args != \"q\":\n        root = interactTreap(root, args)",
        "detail": "python-gitbook-master..gitbook.assets.binary_tree.treap",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.binary_tree.wavelet_tree",
        "description": "python-gitbook-master..gitbook.assets.binary_tree.wavelet_tree",
        "peekOfCode": "class Node:\n    def __init__(self, length: int) -> None:\n        self.minn: int = -1\n        self.maxx: int = -1\n        self.map_left: list[int] = [-1] * length\n        self.left: Optional[Node] = None\n        self.right: Optional[Node] = None\n    def __repr__(self) -> str:\n        \"\"\"\n        >>> node = Node(length=27)",
        "detail": "python-gitbook-master..gitbook.assets.binary_tree.wavelet_tree",
        "documentation": {}
    },
    {
        "label": "build_tree",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.binary_tree.wavelet_tree",
        "description": "python-gitbook-master..gitbook.assets.binary_tree.wavelet_tree",
        "peekOfCode": "def build_tree(arr: list[int]) -> Node:\n    \"\"\"\n    Builds the tree for arr and returns the root\n    of the constructed tree\n    >>> build_tree(test_array)\n    min_value: 0, max_value: 9\n    \"\"\"\n    root = Node(len(arr))\n    root.minn, root.maxx = min(arr), max(arr)\n    # Leaf node case where the node contains only one unique value",
        "detail": "python-gitbook-master..gitbook.assets.binary_tree.wavelet_tree",
        "documentation": {}
    },
    {
        "label": "rank_till_index",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.binary_tree.wavelet_tree",
        "description": "python-gitbook-master..gitbook.assets.binary_tree.wavelet_tree",
        "peekOfCode": "def rank_till_index(node: Node, num: int, index: int) -> int:\n    \"\"\"\n    Returns the number of occurrences of num in interval [0, index] in the list\n    >>> root = build_tree(test_array)\n    >>> rank_till_index(root, 6, 6)\n    1\n    >>> rank_till_index(root, 2, 0)\n    1\n    >>> rank_till_index(root, 1, 10)\n    2",
        "detail": "python-gitbook-master..gitbook.assets.binary_tree.wavelet_tree",
        "documentation": {}
    },
    {
        "label": "rank",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.binary_tree.wavelet_tree",
        "description": "python-gitbook-master..gitbook.assets.binary_tree.wavelet_tree",
        "peekOfCode": "def rank(node: Node, num: int, start: int, end: int) -> int:\n    \"\"\"\n    Returns the number of occurrences of num in interval [start, end] in the list\n    >>> root = build_tree(test_array)\n    >>> rank(root, 6, 3, 13)\n    2\n    >>> rank(root, 2, 0, 19)\n    4\n    >>> rank(root, 9, 2 ,2)\n    0",
        "detail": "python-gitbook-master..gitbook.assets.binary_tree.wavelet_tree",
        "documentation": {}
    },
    {
        "label": "quantile",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.binary_tree.wavelet_tree",
        "description": "python-gitbook-master..gitbook.assets.binary_tree.wavelet_tree",
        "peekOfCode": "def quantile(node: Node, index: int, start: int, end: int) -> int:\n    \"\"\"\n    Returns the index'th smallest element in interval [start, end] in the list\n    index is 0-indexed\n    >>> root = build_tree(test_array)\n    >>> quantile(root, 2, 2, 5)\n    5\n    >>> quantile(root, 5, 2, 13)\n    4\n    >>> quantile(root, 0, 6, 6)",
        "detail": "python-gitbook-master..gitbook.assets.binary_tree.wavelet_tree",
        "documentation": {}
    },
    {
        "label": "range_counting",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.binary_tree.wavelet_tree",
        "description": "python-gitbook-master..gitbook.assets.binary_tree.wavelet_tree",
        "peekOfCode": "def range_counting(\n    node: Node, start: int, end: int, start_num: int, end_num: int\n) -> int:\n    \"\"\"\n    Returns the number of elememts in range [start_num, end_num]\n    in interval [start, end] in the list\n    >>> root = build_tree(test_array)\n    >>> range_counting(root, 1, 10, 3, 7)\n    3\n    >>> range_counting(root, 2, 2, 1, 4)",
        "detail": "python-gitbook-master..gitbook.assets.binary_tree.wavelet_tree",
        "documentation": {}
    },
    {
        "label": "test_array",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.binary_tree.wavelet_tree",
        "description": "python-gitbook-master..gitbook.assets.binary_tree.wavelet_tree",
        "peekOfCode": "test_array = [2, 1, 4, 5, 6, 0, 8, 9, 1, 2, 0, 6, 4, 2, 0, 6, 5, 3, 2, 7]\nclass Node:\n    def __init__(self, length: int) -> None:\n        self.minn: int = -1\n        self.maxx: int = -1\n        self.map_left: list[int] = [-1] * length\n        self.left: Optional[Node] = None\n        self.right: Optional[Node] = None\n    def __repr__(self) -> str:\n        \"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.binary_tree.wavelet_tree",
        "documentation": {}
    },
    {
        "label": "solve",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.CodeChef.DSA Learning Series.Contest 1.Carvans",
        "description": "python-gitbook-master..gitbook.assets.CodeChef.DSA Learning Series.Contest 1.Carvans",
        "peekOfCode": "def solve():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        A = list(map(int,input().split()))\n        count = 0\n        small = float(\"inf\")\n        for each in A:\n            if each < small:\n                small = each",
        "detail": "python-gitbook-master..gitbook.assets.CodeChef.DSA Learning Series.Contest 1.Carvans",
        "documentation": {}
    },
    {
        "label": "coinFlip",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.CodeChef.DSA Learning Series.Contest 1.Coin-Flip",
        "description": "python-gitbook-master..gitbook.assets.CodeChef.DSA Learning Series.Contest 1.Coin-Flip",
        "peekOfCode": "def coinFlip(I, N, Q):\n    if N % 2 == 0:\n        return N // 2\n    else:\n        if I == 1:\n            if Q == 1:\n                return N // 2\n            else:\n                return (N // 2) + 1\n        else:",
        "detail": "python-gitbook-master..gitbook.assets.CodeChef.DSA Learning Series.Contest 1.Coin-Flip",
        "documentation": {}
    },
    {
        "label": "trailingZeros",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.CodeChef.DSA Learning Series.Contest 1.Factorial",
        "description": "python-gitbook-master..gitbook.assets.CodeChef.DSA Learning Series.Contest 1.Factorial",
        "peekOfCode": "def trailingZeros(N):\n    mul = 5\n    zeros = 0\n    while True:\n        zeros += (N // mul)\n        if mul > N:\n            break\n        mul = mul * 5\n    return zeros\nfor _ in range(int(stdin.readline())):",
        "detail": "python-gitbook-master..gitbook.assets.CodeChef.DSA Learning Series.Contest 1.Factorial",
        "documentation": {}
    },
    {
        "label": "laddus",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.CodeChef.DSA Learning Series.Contest 1.Laddu",
        "description": "python-gitbook-master..gitbook.assets.CodeChef.DSA Learning Series.Contest 1.Laddu",
        "peekOfCode": "def laddus(n, origin, activities):\n    score = 0\n    for i in range(n):\n        if \"TOP_CONTRIBUTOR\" in activities[i]:\n            score += 300\n        elif \"CONTEST_HOSTED\" in activities[i]:\n            score += 50\n        elif \"CONTEST_WON\" in activities[i]:\n            rank = int(activities[i].split()[1])\n            if rank > 20:",
        "detail": "python-gitbook-master..gitbook.assets.CodeChef.DSA Learning Series.Contest 1.Laddu",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.CodeChef.DSA Learning Series.Contest 1.Lapindromes",
        "description": "python-gitbook-master..gitbook.assets.CodeChef.DSA Learning Series.Contest 1.Lapindromes",
        "peekOfCode": "T = int(input())\nwhile T:\n    s = input()\n    n = len(s)\n    if n % 2 == 0:\n        print(\"YES\") if Counter(s[0 : n//2]) == Counter(s[(n//2) : n]) else print(\"NO\")\n    else:\n        print(\"YES\") if Counter(s[0 : n//2]) == Counter(s[(n//2)+1 : n]) else print(\"NO\")        \n    T -= 1",
        "detail": "python-gitbook-master..gitbook.assets.CodeChef.DSA Learning Series.Contest 1.Lapindromes",
        "documentation": {}
    },
    {
        "label": "multiple",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.CodeChef.DSA Learning Series.Contest 1.Multiple-of-Three",
        "description": "python-gitbook-master..gitbook.assets.CodeChef.DSA Learning Series.Contest 1.Multiple-of-Three",
        "peekOfCode": "def multiple(K, d0, d1):\n    mul = d0 + d1\n    fac = (K-3) // 4\n    repeat = ((2 * mul) % 10) + ((4 * mul) % 10) +  ((8 * mul) % 10) + ((6 * mul) % 10)\n    sd = mul + (mul % 10) + (repeat * fac)\n    if (K - 3) % 4 == 1:\n        x = ((2 * mul) % 10)\n    elif (K - 3) % 4 == 2:\n        x = ((2 * mul) % 10) + ((4 * mul) % 10)\n    elif (K - 3) % 4 == 3:",
        "detail": "python-gitbook-master..gitbook.assets.CodeChef.DSA Learning Series.Contest 1.Multiple-of-Three",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.CodeChef.DSA Learning Series.Contest 1.Reverse-the-Number",
        "description": "python-gitbook-master..gitbook.assets.CodeChef.DSA Learning Series.Contest 1.Reverse-the-Number",
        "peekOfCode": "t = int(input())\nwhile t:\n    print(int(input()[::-1]))\n    t -= 1",
        "detail": "python-gitbook-master..gitbook.assets.CodeChef.DSA Learning Series.Contest 1.Reverse-the-Number",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.CodeChef.DSA Learning Series.Contest 1.Smart-Phone",
        "description": "python-gitbook-master..gitbook.assets.CodeChef.DSA Learning Series.Contest 1.Smart-Phone",
        "peekOfCode": "n = int(input())\nprices = []\nfor i in range(n):\n    prices.append(int(input()))\nprices.sort()\nmx = -1\nfor i in range(n):\n    profit = prices[i] * (len(prices) - i)\n    if profit > mx:\n        mx = profit",
        "detail": "python-gitbook-master..gitbook.assets.CodeChef.DSA Learning Series.Contest 1.Smart-Phone",
        "documentation": {}
    },
    {
        "label": "prices",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.CodeChef.DSA Learning Series.Contest 1.Smart-Phone",
        "description": "python-gitbook-master..gitbook.assets.CodeChef.DSA Learning Series.Contest 1.Smart-Phone",
        "peekOfCode": "prices = []\nfor i in range(n):\n    prices.append(int(input()))\nprices.sort()\nmx = -1\nfor i in range(n):\n    profit = prices[i] * (len(prices) - i)\n    if profit > mx:\n        mx = profit\nprint(mx)",
        "detail": "python-gitbook-master..gitbook.assets.CodeChef.DSA Learning Series.Contest 1.Smart-Phone",
        "documentation": {}
    },
    {
        "label": "mx",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.CodeChef.DSA Learning Series.Contest 1.Smart-Phone",
        "description": "python-gitbook-master..gitbook.assets.CodeChef.DSA Learning Series.Contest 1.Smart-Phone",
        "peekOfCode": "mx = -1\nfor i in range(n):\n    profit = prices[i] * (len(prices) - i)\n    if profit > mx:\n        mx = profit\nprint(mx)",
        "detail": "python-gitbook-master..gitbook.assets.CodeChef.DSA Learning Series.Contest 1.Smart-Phone",
        "documentation": {}
    },
    {
        "label": "power",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.CodeChef.October Long Challenge.Positive-AND",
        "description": "python-gitbook-master..gitbook.assets.CodeChef.October Long Challenge.Positive-AND",
        "peekOfCode": "def power(n):\n    return n != 0 and ((n & (n-1)) == 0) \ndef main():\n    for i in range(int(input())):\n        n = int(input())\n        if n == 1:\n            print(1)\n            continue\n        elif n == 3:\n            print(\"1 3 2\")",
        "detail": "python-gitbook-master..gitbook.assets.CodeChef.October Long Challenge.Positive-AND",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.CodeChef.October Long Challenge.Positive-AND",
        "description": "python-gitbook-master..gitbook.assets.CodeChef.October Long Challenge.Positive-AND",
        "peekOfCode": "def main():\n    for i in range(int(input())):\n        n = int(input())\n        if n == 1:\n            print(1)\n            continue\n        elif n == 3:\n            print(\"1 3 2\")\n            continue\n        elif n == 5:",
        "detail": "python-gitbook-master..gitbook.assets.CodeChef.October Long Challenge.Positive-AND",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.DataStructures.Binary Tree.binaryTree",
        "description": "python-gitbook-master..gitbook.assets.DataStructures.Binary Tree.binaryTree",
        "peekOfCode": "class Node:\n    def __init__(self, data):\n        self.left = None\n        self.right = None\n        self.data = data\n    def insert(self, data):\n        # Checks if node exists\n        if self.data:\n            if data <",
        "detail": "python-gitbook-master..gitbook.assets.DataStructures.Binary Tree.binaryTree",
        "documentation": {}
    },
    {
        "label": "bfs",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.DataStructures.Graph.bfs",
        "description": "python-gitbook-master..gitbook.assets.DataStructures.Graph.bfs",
        "peekOfCode": "def bfs(g,N):\n    queue = []\n    visited = [False] * (N)\n    bfs = []\n    queue.append(0)\n    visited[0] = True\n    while queue:\n        cur = queue.pop(0)\n        bfs.append(cur)\n        for neighbour in g[cur]:",
        "detail": "python-gitbook-master..gitbook.assets.DataStructures.Graph.bfs",
        "documentation": {}
    },
    {
        "label": "initializeStack",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.DataStructures.Stack.Python.arrayStack",
        "description": "python-gitbook-master..gitbook.assets.DataStructures.Stack.Python.arrayStack",
        "peekOfCode": "def initializeStack():\n    stack = []\n    return stack\ndef isEmpty(stack):\n    if len(stack)==0:\n        return True\n    else:\n        return False\ndef pop(stack):\n    if(isEmpty(stack)):",
        "detail": "python-gitbook-master..gitbook.assets.DataStructures.Stack.Python.arrayStack",
        "documentation": {}
    },
    {
        "label": "isEmpty",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.DataStructures.Stack.Python.arrayStack",
        "description": "python-gitbook-master..gitbook.assets.DataStructures.Stack.Python.arrayStack",
        "peekOfCode": "def isEmpty(stack):\n    if len(stack)==0:\n        return True\n    else:\n        return False\ndef pop(stack):\n    if(isEmpty(stack)):\n        return str(-maxsize -1)\n    return stack.pop()\ndef push(item, stack):",
        "detail": "python-gitbook-master..gitbook.assets.DataStructures.Stack.Python.arrayStack",
        "documentation": {}
    },
    {
        "label": "pop",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.DataStructures.Stack.Python.arrayStack",
        "description": "python-gitbook-master..gitbook.assets.DataStructures.Stack.Python.arrayStack",
        "peekOfCode": "def pop(stack):\n    if(isEmpty(stack)):\n        return str(-maxsize -1)\n    return stack.pop()\ndef push(item, stack):\n    stack.append(item)\n    print(str(item) + \" pushed into stack\")\ndef peek(stack):\n    if (isEmpty(stack)):\n        return str(-maxsize -1)",
        "detail": "python-gitbook-master..gitbook.assets.DataStructures.Stack.Python.arrayStack",
        "documentation": {}
    },
    {
        "label": "push",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.DataStructures.Stack.Python.arrayStack",
        "description": "python-gitbook-master..gitbook.assets.DataStructures.Stack.Python.arrayStack",
        "peekOfCode": "def push(item, stack):\n    stack.append(item)\n    print(str(item) + \" pushed into stack\")\ndef peek(stack):\n    if (isEmpty(stack)):\n        return str(-maxsize -1)\n    return stack[len(stack)-1]\n# Driver code to test the functions\nstack = initializeStack()\npush(3, stack)",
        "detail": "python-gitbook-master..gitbook.assets.DataStructures.Stack.Python.arrayStack",
        "documentation": {}
    },
    {
        "label": "peek",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.DataStructures.Stack.Python.arrayStack",
        "description": "python-gitbook-master..gitbook.assets.DataStructures.Stack.Python.arrayStack",
        "peekOfCode": "def peek(stack):\n    if (isEmpty(stack)):\n        return str(-maxsize -1)\n    return stack[len(stack)-1]\n# Driver code to test the functions\nstack = initializeStack()\npush(3, stack)\npush(4, stack)\npush(5, stack)\nprint(peek(stack))",
        "detail": "python-gitbook-master..gitbook.assets.DataStructures.Stack.Python.arrayStack",
        "documentation": {}
    },
    {
        "label": "stack",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.DataStructures.Stack.Python.arrayStack",
        "description": "python-gitbook-master..gitbook.assets.DataStructures.Stack.Python.arrayStack",
        "peekOfCode": "stack = initializeStack()\npush(3, stack)\npush(4, stack)\npush(5, stack)\nprint(peek(stack))\nprint(pop(stack))",
        "detail": "python-gitbook-master..gitbook.assets.DataStructures.Stack.Python.arrayStack",
        "documentation": {}
    },
    {
        "label": "DisjointSet",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.disjoint_set.alternate_disjoint_set",
        "description": "python-gitbook-master..gitbook.assets.disjoint_set.alternate_disjoint_set",
        "peekOfCode": "class DisjointSet:\n    def __init__(self, set_counts: list) -> None:\n        \"\"\"\n        Initialize with a list of the number of items in each set\n        and with rank = 1 for each set\n        \"\"\"\n        self.set_counts = set_counts\n        self.max_set = max(set_counts)\n        num_sets = len(set_counts)\n        self.ranks = [1] * num_sets",
        "detail": "python-gitbook-master..gitbook.assets.disjoint_set.alternate_disjoint_set",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.disjoint_set.disjoint_set",
        "description": "python-gitbook-master..gitbook.assets.disjoint_set.disjoint_set",
        "peekOfCode": "class Node:\n    def __init__(self, data):\n        self.data = data\ndef make_set(x):\n    \"\"\"\n    make x as a set.\n    \"\"\"\n    # rank is the distance from x to its' parent\n    # root's rank is 0\n    x.rank = 0",
        "detail": "python-gitbook-master..gitbook.assets.disjoint_set.disjoint_set",
        "documentation": {}
    },
    {
        "label": "make_set",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.disjoint_set.disjoint_set",
        "description": "python-gitbook-master..gitbook.assets.disjoint_set.disjoint_set",
        "peekOfCode": "def make_set(x):\n    \"\"\"\n    make x as a set.\n    \"\"\"\n    # rank is the distance from x to its' parent\n    # root's rank is 0\n    x.rank = 0\n    x.parent = x\ndef union_set(x, y):\n    \"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.disjoint_set.disjoint_set",
        "documentation": {}
    },
    {
        "label": "union_set",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.disjoint_set.disjoint_set",
        "description": "python-gitbook-master..gitbook.assets.disjoint_set.disjoint_set",
        "peekOfCode": "def union_set(x, y):\n    \"\"\"\n    union two sets.\n    set with bigger rank should be parent, so that the\n    disjoint set tree will be more flat.\n    \"\"\"\n    x, y = find_set(x), find_set(y)\n    if x.rank > y.rank:\n        y.parent = x\n    else:",
        "detail": "python-gitbook-master..gitbook.assets.disjoint_set.disjoint_set",
        "documentation": {}
    },
    {
        "label": "find_set",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.disjoint_set.disjoint_set",
        "description": "python-gitbook-master..gitbook.assets.disjoint_set.disjoint_set",
        "peekOfCode": "def find_set(x):\n    \"\"\"\n    return the parent of x\n    \"\"\"\n    if x != x.parent:\n        x.parent = find_set(x.parent)\n    return x.parent\ndef find_python_set(node: Node) -> set:\n    \"\"\"\n    Return a Python Standard Library set that contains i.",
        "detail": "python-gitbook-master..gitbook.assets.disjoint_set.disjoint_set",
        "documentation": {}
    },
    {
        "label": "find_python_set",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.disjoint_set.disjoint_set",
        "description": "python-gitbook-master..gitbook.assets.disjoint_set.disjoint_set",
        "peekOfCode": "def find_python_set(node: Node) -> set:\n    \"\"\"\n    Return a Python Standard Library set that contains i.\n    \"\"\"\n    sets = ({0, 1, 2}, {3, 4, 5})\n    for s in sets:\n        if node.data in s:\n            return s\n    raise ValueError(f\"{node.data} is not in {sets}\")\ndef test_disjoint_set():",
        "detail": "python-gitbook-master..gitbook.assets.disjoint_set.disjoint_set",
        "documentation": {}
    },
    {
        "label": "test_disjoint_set",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.disjoint_set.disjoint_set",
        "description": "python-gitbook-master..gitbook.assets.disjoint_set.disjoint_set",
        "peekOfCode": "def test_disjoint_set():\n    \"\"\"\n    >>> test_disjoint_set()\n    \"\"\"\n    vertex = [Node(i) for i in range(6)]\n    for v in vertex:\n        make_set(v)\n    union_set(vertex[0], vertex[1])\n    union_set(vertex[1], vertex[2])\n    union_set(vertex[3], vertex[4])",
        "detail": "python-gitbook-master..gitbook.assets.disjoint_set.disjoint_set",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.GeeksforGeeks.Arrays.Arrays.reorganize-the-array",
        "description": "python-gitbook-master..gitbook.assets.GeeksforGeeks.Arrays.Arrays.reorganize-the-array",
        "peekOfCode": "T = int(input())\nwhile(T>0):\n    N = int(input())\n    A = [int(x) for x in input().split()]\n    S = set()\n    for i in range(0, len(A)):\n        S.add(A[i])\n    for i in range(0, len(A)):\n        if i in S:\n            A[i] = i",
        "detail": "python-gitbook-master..gitbook.assets.GeeksforGeeks.Arrays.Arrays.reorganize-the-array",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.GeeksforGeeks.Exceptionally-Odd",
        "description": "python-gitbook-master..gitbook.assets.GeeksforGeeks.Exceptionally-Odd",
        "peekOfCode": "class Solution:\n    def getOddOccurrence(self, arr, n):\n        # code here\n        ans = 0\n        for i in range(n):\n            ans ^= arr[i]\n        return ans",
        "detail": "python-gitbook-master..gitbook.assets.GeeksforGeeks.Exceptionally-Odd",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.GeeksforGeeks.Find-A-Pair-With-Given-Target",
        "description": "python-gitbook-master..gitbook.assets.GeeksforGeeks.Find-A-Pair-With-Given-Target",
        "peekOfCode": "class Node:\n    def __init__(self, val):\n        self.right = None\n        self.data = val\n        self.left = None\n'''\n# root : the root Node of the given BST\n# target : the target sum\ndef isPairPresent(root, target): \n    # code here.",
        "detail": "python-gitbook-master..gitbook.assets.GeeksforGeeks.Find-A-Pair-With-Given-Target",
        "documentation": {}
    },
    {
        "label": "isPairPresent",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.GeeksforGeeks.Find-A-Pair-With-Given-Target",
        "description": "python-gitbook-master..gitbook.assets.GeeksforGeeks.Find-A-Pair-With-Given-Target",
        "peekOfCode": "def isPairPresent(root, target): \n    # code here.\n    inorderArr = set()\n    def inorder(node):\n        if node:\n            inorder(node.left)\n            inorderArr.add(node.data)\n            inorder(node.right)\n    inorder(root)\n    for i in inorderArr:",
        "detail": "python-gitbook-master..gitbook.assets.GeeksforGeeks.Find-A-Pair-With-Given-Target",
        "documentation": {}
    },
    {
        "label": "duplicates",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.GeeksforGeeks.Find-Duplicates",
        "description": "python-gitbook-master..gitbook.assets.GeeksforGeeks.Find-Duplicates",
        "peekOfCode": "def duplicates(arr, n): \n    # code here\n    duplicates = []\n    for i in range(n):\n        arr[arr[i] % n] += n\n    for i in range(n):\n        if (arr[i] / n) >= 2:\n            duplicates.append(i)    \n    duplicates.sort()\n    return duplicates if duplicates else [-1]",
        "detail": "python-gitbook-master..gitbook.assets.GeeksforGeeks.Find-Duplicates",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.GeeksforGeeks.Find-Swap-Values",
        "description": "python-gitbook-master..gitbook.assets.GeeksforGeeks.Find-Swap-Values",
        "peekOfCode": "class Solution:\n    def findSwapValues(self,a, n, b, m):\n        # Your code goes here\n        sa = sum(a)\n        sb = sum(b)\n        itb = iter(b)\n        b = dict(zip(itb, itb))\n        for i in a:\n            if ((sb - sa + 2*i) / 2) in b:\n                return 1",
        "detail": "python-gitbook-master..gitbook.assets.GeeksforGeeks.Find-Swap-Values",
        "documentation": {}
    },
    {
        "label": "balance",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.GeeksforGeeks.find-the-median-in-the-stream",
        "description": "python-gitbook-master..gitbook.assets.GeeksforGeeks.find-the-median-in-the-stream",
        "peekOfCode": "def balance(minh, maxh):\n    while abs(len(minh)-len(maxh)) > 1:\n        if len(minh) > len(maxh):\n            heapq.heappush(maxh, -heapq.heappop(minh))\n        else:\n            heapq.heappush(minh, -heapq.heappop(maxh))\ndef main():           \n    N = int(input())\n    i = int(input())\n    minh = []",
        "detail": "python-gitbook-master..gitbook.assets.GeeksforGeeks.find-the-median-in-the-stream",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.GeeksforGeeks.find-the-median-in-the-stream",
        "description": "python-gitbook-master..gitbook.assets.GeeksforGeeks.find-the-median-in-the-stream",
        "peekOfCode": "def main():           \n    N = int(input())\n    i = int(input())\n    minh = []\n    maxh = [-i]\n    print(i)\n    for _ in range(N-1):\n        inp = int(input())\n        if inp < (-1*maxh[0]):\n            heapq.heappush(maxh, -1*inp)",
        "detail": "python-gitbook-master..gitbook.assets.GeeksforGeeks.find-the-median-in-the-stream",
        "documentation": {}
    },
    {
        "label": "isPalindrome",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.GeeksforGeeks.Palidrome-Pair",
        "description": "python-gitbook-master..gitbook.assets.GeeksforGeeks.Palidrome-Pair",
        "peekOfCode": "def isPalindrome(s):\n    return s == s[::-1]\ndef palindromePair(arr):\n    res = []\n    size = len(arr)\n    for i in range(size-1):\n        for j in range(i+1, size):\n            cc = arr[i] + arr[j]\n            if isPalindrome(cc):\n                res.append([i, j])",
        "detail": "python-gitbook-master..gitbook.assets.GeeksforGeeks.Palidrome-Pair",
        "documentation": {}
    },
    {
        "label": "palindromePair",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.GeeksforGeeks.Palidrome-Pair",
        "description": "python-gitbook-master..gitbook.assets.GeeksforGeeks.Palidrome-Pair",
        "peekOfCode": "def palindromePair(arr):\n    res = []\n    size = len(arr)\n    for i in range(size-1):\n        for j in range(i+1, size):\n            cc = arr[i] + arr[j]\n            if isPalindrome(cc):\n                res.append([i, j])\n            cc = arr[j] + arr[i]\n            if isPalindrome(cc):",
        "detail": "python-gitbook-master..gitbook.assets.GeeksforGeeks.Palidrome-Pair",
        "documentation": {}
    },
    {
        "label": "Solution1",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.GeeksforGeeks.Zig-Zag-Sort",
        "description": "python-gitbook-master..gitbook.assets.GeeksforGeeks.Zig-Zag-Sort",
        "peekOfCode": "class Solution1:\n    def zigZag(self,arr, n):\n        # code here\n        arr.sort()\n        for i in range(1, n-1, 2):\n            arr[i], arr[i+1] = arr[i+1], arr[i]\n        return arr\nclass Solution2:\n    def zigZag(self,arr, n):\n        # code here",
        "detail": "python-gitbook-master..gitbook.assets.GeeksforGeeks.Zig-Zag-Sort",
        "documentation": {}
    },
    {
        "label": "Solution2",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.GeeksforGeeks.Zig-Zag-Sort",
        "description": "python-gitbook-master..gitbook.assets.GeeksforGeeks.Zig-Zag-Sort",
        "peekOfCode": "class Solution2:\n    def zigZag(self,arr, n):\n        # code here\n        flag = True\n        for i in range(n-1):\n            if flag:\n                if arr[i] > arr[i+1]:\n                    arr[i], arr[i+1] = arr[i+1], arr[i]\n            else:\n                if arr[i] < arr[i+1]:",
        "detail": "python-gitbook-master..gitbook.assets.GeeksforGeeks.Zig-Zag-Sort",
        "documentation": {}
    },
    {
        "label": "flippingBits",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Bit Manipulation.Flipping-Bits",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Bit Manipulation.Flipping-Bits",
        "peekOfCode": "def flippingBits(n):\n    max = (2**32)-1\n    return max-n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n    q = int(input())\n    for q_itr in range(q):\n        n = int(input())\n        result = flippingBits(n)\n        fptr.write(str(result) + '\\n')",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Bit Manipulation.Flipping-Bits",
        "documentation": {}
    },
    {
        "label": "winningLotteryTicket",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Bit Manipulation.Winning-Lotter-Ticket",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Bit Manipulation.Winning-Lotter-Ticket",
        "peekOfCode": "def winningLotteryTicket(tickets):\n    l = [0]*len(tickets)\n    mx = (2**10)-1\n    for i in range(len(tickets)):\n        x = set(tickets[i])\n        if '0' in x:\n            l[i] = l[i]*10 + 1\n        else:\n            l[i] = l[i]*10\n        if '1' in x:",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Bit Manipulation.Winning-Lotter-Ticket",
        "documentation": {}
    },
    {
        "label": "flippingMatrix",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Constructive Algorithms.Flipping-The-Matrix",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Constructive Algorithms.Flipping-The-Matrix",
        "peekOfCode": "def flippingMatrix(matrix):\n    n = len(matrix)\n    seen = set()\n    maxes = []\n    for i in range(len(matrix) - 1):\n        for j in range(i + 1, len(matrix[0])):\n            if (i, j) not in seen:\n                ri, rj = mirror_row(i, j, n)\n                di, dj = mirror_col(ri, rj, n)\n                li, lj = mirror_row(di, dj, n)",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Constructive Algorithms.Flipping-The-Matrix",
        "documentation": {}
    },
    {
        "label": "mirror_row",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Constructive Algorithms.Flipping-The-Matrix",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Constructive Algorithms.Flipping-The-Matrix",
        "peekOfCode": "def mirror_row(i, j, n):\n    return i, n - j - 1\ndef mirror_col(i, j, n):\n    return n - i - 1, j\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n    q = int(input())\n    for q_itr in range(q):\n        n = int(input())\n        matrix = []",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Constructive Algorithms.Flipping-The-Matrix",
        "documentation": {}
    },
    {
        "label": "mirror_col",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Constructive Algorithms.Flipping-The-Matrix",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Constructive Algorithms.Flipping-The-Matrix",
        "peekOfCode": "def mirror_col(i, j, n):\n    return n - i - 1, j\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n    q = int(input())\n    for q_itr in range(q):\n        n = int(input())\n        matrix = []\n        for _ in range(2*n):\n            matrix.append(list(map(int, input().rstrip().split())))",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Constructive Algorithms.Flipping-The-Matrix",
        "documentation": {}
    },
    {
        "label": "minimumBribes",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Constructive Algorithms.New-Year-Chaos",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Constructive Algorithms.New-Year-Chaos",
        "peekOfCode": "def minimumBribes(q):\n    q = [P-1 for P in q]\n    c = 0\n    for i, x in enumerate(q):\n        if x-i > 2:\n            print('Too chaotic')\n            return\n        for j in range(max(x-1,0),i):\n            if q[j] > x:\n                c += 1",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Constructive Algorithms.New-Year-Chaos",
        "documentation": {}
    },
    {
        "label": "maxSubarray",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Dynamic Programming.The-Maximum-Subarray",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Dynamic Programming.The-Maximum-Subarray",
        "peekOfCode": "def maxSubarray(arr):\n    dp = arr.copy()\n    m = max(arr)\n    print(arr, dp)\n    if dp[0] < 0:\n        dp[0] = 0\n    for i in range(1, len(arr)):\n        if arr[i-1] > 0:\n            arr[i] += arr[i-1]\n        if dp[i-1] > 0:",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Dynamic Programming.The-Maximum-Subarray",
        "documentation": {}
    },
    {
        "label": "beautifulPairs",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Greedy.Beautiful-Pairs",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Greedy.Beautiful-Pairs",
        "peekOfCode": "def beautifulPairs(A, B):\n    bp = sum((Counter(A) - Counter(B)).values())\n    return len(A)-bp+1 if bp else len(A)-1\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n    n = int(input())\n    A = list(map(int, input().rstrip().split()))\n    B = list(map(int, input().rstrip().split()))\n    result = beautifulPairs(A, B)\n    fptr.write(str(result) + '\\n')",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Greedy.Beautiful-Pairs",
        "documentation": {}
    },
    {
        "label": "getMinimumCost",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Greedy.Greedy-Florist",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Greedy.Greedy-Florist",
        "peekOfCode": "def getMinimumCost(k, c):\n    c = sorted(c)[::-1]\n    m = 1\n    cost = 0\n    for i in range(len(c)):\n        if (i+1) > (k*m):\n            m += 1\n        cost = cost + (m*c[i])\n    return cost        \nif __name__ == '__main__':",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Greedy.Greedy-Florist",
        "documentation": {}
    },
    {
        "label": "gridChallenge",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Greedy.Grid-Challenge",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Greedy.Grid-Challenge",
        "peekOfCode": "def gridChallenge(grid):\n    for i in range(len(grid)):\n        grid[i] = sorted(grid[i])\n    for i in range(len(grid[0])):\n        for j in range(1, len(grid)):\n            if grid[j-1][i] <= grid[j][i]:\n                continue\n            return \"NO\"\n    return \"YES\"\nif __name__ == '__main__':",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Greedy.Grid-Challenge",
        "documentation": {}
    },
    {
        "label": "jimOrders",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Greedy.Jim-and-the-Orders",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Greedy.Jim-and-the-Orders",
        "peekOfCode": "def jimOrders(orders):\n    res = []\n    for i in range(len(orders)):\n        orders[i].append(i+1)\n    orders = sorted(orders, key = lambda x: x[0]+x[1])\n    for i in range(len(orders)):\n        res.append(orders[i][2])     \n    return res  \nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Greedy.Jim-and-the-Orders",
        "documentation": {}
    },
    {
        "label": "largestPermutation",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Greedy.Largest-Permutation",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Greedy.Largest-Permutation",
        "peekOfCode": "def largestPermutation(k, arr):\n    N = len(arr)\n    dic = {arr[x]:x for x in range(N)}\n    swaps = 0\n    for x in range(N, 0, -1):\n        if dic[x] == N - x:\n            continue\n        else:\n            dic[arr[N-x]] = dic[x]\n            arr[dic[x]] = arr[N-x]",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Greedy.Largest-Permutation",
        "documentation": {}
    },
    {
        "label": "luckBalance",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Greedy.Luck-Balance",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Greedy.Luck-Balance",
        "peekOfCode": "def luckBalance(k, contests):\n    contests = sorted(contests, key = lambda x: x[0])\n    luck = 0\n    for i in range(len(contests)-1, -1, -1):\n        if contests[i][1] == 0:\n            luck += contests[i][0]\n        else:\n            if k > 0:\n                luck += contests[i][0]\n                k -= 1",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Greedy.Luck-Balance",
        "documentation": {}
    },
    {
        "label": "marcsCakewalk",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Greedy.Marcs-Cakewalk",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Greedy.Marcs-Cakewalk",
        "peekOfCode": "def marcsCakewalk(calorie):\n    calorie = sorted(calorie)[::-1]\n    miles = 0\n    for i in range(len(calorie)):\n        miles += (2**i) * calorie[i]\n    return miles\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n    n = int(input())\n    calorie = list(map(int, input().rstrip().split()))",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Greedy.Marcs-Cakewalk",
        "documentation": {}
    },
    {
        "label": "maximumToys",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Greedy.Mark-and-Toys",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Greedy.Mark-and-Toys",
        "peekOfCode": "def maximumToys(prices, k):\n    prices = sorted(prices)\n    s = 0\n    i = 0\n    while True:\n        if s + prices[i] > k:\n            break\n        s += prices[i]\n        i += 1\n    return i",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Greedy.Mark-and-Toys",
        "documentation": {}
    },
    {
        "label": "maxMin",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Greedy.Max-Min",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Greedy.Max-Min",
        "peekOfCode": "def maxMin(k, arr):\n    arr = sorted(arr)\n    print(arr)\n    mn = math.inf\n    for i in range(0, len(arr)-k+1):\n        if (arr[i+k-1] - arr[i]) < mn:\n            mn = arr[i+k-1] - arr[i]\n    return mn\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Greedy.Max-Min",
        "documentation": {}
    },
    {
        "label": "maximumPerimeterTriangle",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Greedy.Maximum-Perimeter-Triangle",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Greedy.Maximum-Perimeter-Triangle",
        "peekOfCode": "def maximumPerimeterTriangle(sticks):\n    sticks = sorted(sticks)[::-1]\n    for i in range(0, len(sticks)-2):\n        if (sticks[i] < (sticks[i+1] + sticks[i+2])) or (sticks[i] == sticks[i+1] == sticks[i+2]):\n            return sticks[i+2], sticks[i+1], sticks[i]\n    return -1, \nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n    n = int(input())\n    sticks = list(map(int, input().rstrip().split()))",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Greedy.Maximum-Perimeter-Triangle",
        "documentation": {}
    },
    {
        "label": "minimumAbsoluteDifference",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Greedy.Minimum-Absolute-Difference-in-an-Array",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Greedy.Minimum-Absolute-Difference-in-an-Array",
        "peekOfCode": "def minimumAbsoluteDifference(arr):\n    mn = math.inf\n    arr = sorted(arr)\n    for i in range(1, len(arr)):\n        if abs(arr[i-1] - arr[i]) < mn:\n            mn = abs(arr[i-1] - arr[i])\n    return mn\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n    n = int(input())",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Greedy.Minimum-Absolute-Difference-in-an-Array",
        "documentation": {}
    },
    {
        "label": "toys",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Greedy.Priyanka-and-Toys",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Greedy.Priyanka-and-Toys",
        "peekOfCode": "def toys(w):\n    w = sorted(w)\n    containers = 1\n    x = w[0]\n    for i in range(1, len(w)):\n        if w[i] > (x+4):\n            x = w[i]\n            containers += 1\n    return containers\nif __name__ == '__main__':",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Greedy.Priyanka-and-Toys",
        "documentation": {}
    },
    {
        "label": "decentNumber",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Greedy.Sherlock-and-the-Beast",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Greedy.Sherlock-and-the-Beast",
        "peekOfCode": "def decentNumber(n):\n    if n % 3 == 0 and n != 0:\n        print(int('5'*n))\n    elif n % 3 == 1 and n >= 10:\n        print(int(((n-10)*'5') + (10*'3')))\n    elif n % 3 == 2 and n >= 5:\n        print(int(((n-5)*'5') + (5*'3')))\n    else:\n        print(-1)       \nif __name__ == '__main__':",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Greedy.Sherlock-and-the-Beast",
        "documentation": {}
    },
    {
        "label": "appendAndDelete",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Implementation.Append-and-Delete",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Implementation.Append-and-Delete",
        "peekOfCode": "def appendAndDelete(s, t, k):\n    x = 0\n    if s == t:\n        return \"Yes\"\n    if k > (len(s) + len(t)):\n        return \"Yes\"\n    for i in range(min(len(s),len(t))):\n        if s[i] == t[i]:\n            if x == 0 and i == min(len(s),len(t))-1:\n                x = (len(s) - i) + (len(t) - i)",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Implementation.Append-and-Delete",
        "documentation": {}
    },
    {
        "label": "chocolateFeast",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Implementation.Chocolate-Feast",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Implementation.Chocolate-Feast",
        "peekOfCode": "def chocolateFeast(n, c, m):\n    choc = n//c\n    w = choc\n    while True:\n        if w >= m:\n            choc += w // m\n            w = (w//m) + (w % m)\n            continue\n        return choc        \nif __name__ == '__main__':",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Implementation.Chocolate-Feast",
        "documentation": {}
    },
    {
        "label": "circularArrayRotation",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Implementation.Circular-Array-Rotation",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Implementation.Circular-Array-Rotation",
        "peekOfCode": "def circularArrayRotation(a, k, queries):\n    print(a)\n    print(k)\n    print(queries)\n    x = len(a)\n    A = [0]*x\n    for i in range(0, x):\n        A[(i+k)%x] = a[i]\n    a = []\n    for i in range(len(queries)):",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Implementation.Circular-Array-Rotation",
        "documentation": {}
    },
    {
        "label": "minimumLoss",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Search.Minimum-Loss",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Search.Minimum-Loss",
        "peekOfCode": "def minimumLoss(price):\n    m = -math.inf\n    dp = [[0 for _ in range(len(price))] for _ in range(len(price))]\n    for i in range(0, len(price)-1):\n        for j in range(i+1, len(price)):\n            # print(i, j)\n            dp[i][j] = dp[i][j-1] + (price[j] - price[j-1])\n            # print(i, j, dp[i][j])\n    for i in range(0, len(price)-1):\n        for j in range(i+1, len(price)):",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Search.Minimum-Loss",
        "documentation": {}
    },
    {
        "label": "minimumLoss",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Search.Minimum-Loss",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Search.Minimum-Loss",
        "peekOfCode": "def minimumLoss(price):\n    m = math.inf\n    prices = {}\n    for i in range(len(price)):\n        prices[price[i]] = i\n    print(prices)\n    sprices = sorted(prices)\n    for i in range(1, len(price)):\n        if (sprices[i]-sprices[i-1] < m) and (prices[sprices[i]]<prices[sprices[i-1]]):\n            m = sprices[i] - sprices[i-1]",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Search.Minimum-Loss",
        "documentation": {}
    },
    {
        "label": "missingNumbers",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Search.Missing-Numbers",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Search.Missing-Numbers",
        "peekOfCode": "def missingNumbers(arr, brr):\n    res = []\n    c = Counter(brr) - Counter(arr)\n    return sorted(c.keys())\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n    n = int(input())\n    arr = list(map(int, input().rstrip().split()))\n    m = int(input())\n    brr = list(map(int, input().rstrip().split()))",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Search.Missing-Numbers",
        "documentation": {}
    },
    {
        "label": "closestNumbers",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Sorting.Closest-Numbers",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Sorting.Closest-Numbers",
        "peekOfCode": "def closestNumbers(arr):\n    arr = sorted(arr)\n    mindif = math.inf\n    res = []\n    for i in range(1, len(arr)):\n        if ((abs(arr[i-1]-arr[i])) < mindif):\n            res.clear()\n            res.append(arr[i-1])\n            res.append(arr[i])\n            mindif = abs(arr[i-1] - arr[i])",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Sorting.Closest-Numbers",
        "documentation": {}
    },
    {
        "label": "beautifulBinaryString",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Strings.Beautiful-Binary-String",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Strings.Beautiful-Binary-String",
        "peekOfCode": "def beautifulBinaryString(b):\n    return (len(b)-len(b.replace(\"010\", \"\")))//3    \nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n    n = int(input())\n    b = input()\n    result = beautifulBinaryString(b)\n    fptr.write(str(result) + '\\n')\n    fptr.close()",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Strings.Beautiful-Binary-String",
        "documentation": {}
    },
    {
        "label": "highestValuePalindrome",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Strings.Highest-Value-Palindrome",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Strings.Highest-Value-Palindrome",
        "peekOfCode": "def highestValuePalindrome(s, n, k):\n    changes = 0\n    l = 0\n    h = len(s)-1\n    s = list(s)\n    for i in range(0, n//2):\n        if s[i]!=s[-i-1]:\n            changes += 1\n    if changes > k:\n        return \"-1\"",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Strings.Highest-Value-Palindrome",
        "documentation": {}
    },
    {
        "label": "makingAnagrams",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Strings.Making-Anagrams",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Strings.Making-Anagrams",
        "peekOfCode": "def makingAnagrams(s1, s2):\n    s1 = Counter(s1)\n    s2 = Counter(s2)\n    res = 0\n    for i in list(s1.keys()):\n        if i in s2:\n            res += abs(s1.get(i) - s2.get(i))\n            del s1[i]\n            del s2[i]\n            continue",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Strings.Making-Anagrams",
        "documentation": {}
    },
    {
        "label": "sherlockAndAnagrams",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Strings.Sherlock-and-Anagrams",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Strings.Sherlock-and-Anagrams",
        "peekOfCode": "def sherlockAndAnagrams(s):\n    if all(value == 0 for value in Counter(s).values()):\n        return 0\n    substrings = []\n    c = 0\n    for i in range(0, len(s)):\n        for j in range(i+1, len(s)+1):\n            substrings.append(s[i:j])\n    sub_counts = [''.join(['{0}{1}'.format(x,y) for (x,y) in sorted(Counter(sub).items())]) for sub in substrings]\n    return sum([(v*(v-1)//2) for v in Counter(sub_counts).values()])",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Strings.Sherlock-and-Anagrams",
        "documentation": {}
    },
    {
        "label": "stringConstruction",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Strings.String-Construction",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Strings.String-Construction",
        "peekOfCode": "def stringConstruction(s):\n    return len(set(s))\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n    q = int(input())\n    for q_itr in range(q):\n        s = input()\n        result = stringConstruction(s)\n        fptr.write(str(result) + '\\n')\n    fptr.close()",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Strings.String-Construction",
        "documentation": {}
    },
    {
        "label": "weightedUniformStrings",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Strings.Weighted-Uniform-Strings",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Strings.Weighted-Uniform-Strings",
        "peekOfCode": "def weightedUniformStrings(s, queries):\n    alphabet = {'a':1, 'b':2, 'c':3, 'd':4, 'e':5, 'f':6, 'g':7, 'h':8, 'i':9, 'j':10, 'k':11, 'l':12, 'm':13, 'n':14, 'o':15, 'p':16, 'q':17, 'r':18, 's':19, 't':20, 'u':21, 'v':22, 'w':23, 'x':24, 'y':25, 'z':26}\n    counter = 1\n    us = set()\n    res = []\n    for i in range(len(s)):\n        weight = alphabet[s[i]]\n        if (i+1!=len(s) and s[i]==s[i+1]):\n            counter += 1\n        else:",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Strings.Weighted-Uniform-Strings",
        "documentation": {}
    },
    {
        "label": "aVeryBigSum",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Warmup.A-Very-Big-Sum",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Warmup.A-Very-Big-Sum",
        "peekOfCode": "def aVeryBigSum(ar):\n    return sum(ar)\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n    ar_count = int(input())\n    ar = list(map(int, input().rstrip().split()))\n    result = aVeryBigSum(ar)\n    fptr.write(str(result) + '\\n')\n    fptr.close()",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Warmup.A-Very-Big-Sum",
        "documentation": {}
    },
    {
        "label": "compareTriplets",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Warmup.Compare-the-Triplets",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Warmup.Compare-the-Triplets",
        "peekOfCode": "def compareTriplets(a, b):\n    pa = 0\n    pb = 0\n    x = 0\n    while(x < len(a)):\n        if a[x] > b[x]:\n            pa += 1\n        elif b[x] > a[x]:\n            pb += 1\n        else:",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Warmup.Compare-the-Triplets",
        "documentation": {}
    },
    {
        "label": "miniMaxSum",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Warmup.Mini-Max-Sum",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Warmup.Mini-Max-Sum",
        "peekOfCode": "def miniMaxSum(arr):\n    arr = sorted(arr)\n    print(sum(arr[0:4]), sum(arr[1:5]))\nif __name__ == '__main__':\n    arr = list(map(int, input().rstrip().split()))\n    miniMaxSum(arr)",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Warmup.Mini-Max-Sum",
        "documentation": {}
    },
    {
        "label": "simpleArraySum",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Warmup.Simple-Array-Sum",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Warmup.Simple-Array-Sum",
        "peekOfCode": "def simpleArraySum(ar):\n    #\n    # Write your code here.\n    #\n    return sum(ar)\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n    ar_count = int(input())\n    ar = list(map(int, input().rstrip().split()))\n    result = simpleArraySum(ar)",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Algorithms.Warmup.Simple-Array-Sum",
        "documentation": {}
    },
    {
        "label": "hourglassSum",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Data Structures.2D-Array-DS",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Data Structures.2D-Array-DS",
        "peekOfCode": "def hourglassSum(arr):\n    s = -math.inf\n    maxSum = -math.inf\n    for i in range(len(arr)-2):\n        for j in range(len(arr[0])-2):\n            s = arr[i][j] + arr[i][j+1] + arr[i][j+2] + arr[i+1][j+1] + arr[i+2][j] + arr[i+2][j+1] + arr[i+2][j+2]\n            if (s > maxSum):\n                maxSum = s\n    return maxSum",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Data Structures.2D-Array-DS",
        "documentation": {}
    },
    {
        "label": "reverseArray",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Data Structures.Array-DS",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Data Structures.Array-DS",
        "peekOfCode": "def reverseArray(a):\n    return a[::-1]",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Data Structures.Array-DS",
        "documentation": {}
    },
    {
        "label": "compare_lists",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Data Structures.Compare-Two-Linked-Lists",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Data Structures.Compare-Two-Linked-Lists",
        "peekOfCode": "def compare_lists(llist1, llist2):\n    while llist1 and llist2:\n        if llist1.data == llist2.data:\n            llist1 = llist1.next\n            llist2 = llist2.next\n            continue\n        else:\n            return 0\n    if not llist1 and not llist2:\n        return 1",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Data Structures.Compare-Two-Linked-Lists",
        "documentation": {}
    },
    {
        "label": "has_cycle",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Data Structures.Cycle-Detection",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Data Structures.Cycle-Detection",
        "peekOfCode": "def has_cycle(head):\n    if not head:\n        return 0\n    fast = slow = head\n    while fast and fast.next:\n        fast = fast.next.next\n        slow = slow.next\n        if fast == slow:\n            return 1\n    return 0",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Data Structures.Cycle-Detection",
        "documentation": {}
    },
    {
        "label": "deleteNode",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Data Structures.Delete-A-Node",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Data Structures.Delete-A-Node",
        "peekOfCode": "def deleteNode(head, position):\n    if position == 0:\n        return head.next\n    temp = head\n    ptr = 1\n    while ptr != position:\n        temp = temp.next\n        ptr += 1\n    temp.next = temp.next.next\n    return head",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Data Structures.Delete-A-Node",
        "documentation": {}
    },
    {
        "label": "removeDuplicates",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Data Structures.Delete-Duplicate-Nodes",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Data Structures.Delete-Duplicate-Nodes",
        "peekOfCode": "def removeDuplicates(head):\n    dummy = head\n    while dummy and dummy.next:\n        if dummy.data == dummy.next.data:\n            dummy.next = dummy.next.next\n            continue\n        dummy = dummy.next\n    return head",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Data Structures.Delete-Duplicate-Nodes",
        "documentation": {}
    },
    {
        "label": "dynamicArray",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Data Structures.Dynamic-Array",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Data Structures.Dynamic-Array",
        "peekOfCode": "def dynamicArray(n, queries):\n    Q = len(queries)\n    seqList = [[] for _ in range(n)]\n    lastAnswer = 0    \n    la = []\n    for i in range(Q):\n        t, x, y = queries[i][0], queries[i][1], queries[i][2]\n        if t==1:\n            seqList[(x^lastAnswer)%n].append(y)\n        else:",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Data Structures.Dynamic-Array",
        "documentation": {}
    },
    {
        "label": "findMergeNode",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Data Structures.Find-The-Merge-Point-of-Two-Lists",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Data Structures.Find-The-Merge-Point-of-Two-Lists",
        "peekOfCode": "def findMergeNode(head1, head2):\n    ptr1 = head1\n    ptr2 = head2\n    while ptr1 != ptr2:\n        if ptr1.next == None:\n            ptr1 = head2\n        else:\n            ptr1 = ptr1.next\n        if ptr2.next == None:\n            ptr2 = head1",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Data Structures.Find-The-Merge-Point-of-Two-Lists",
        "documentation": {}
    },
    {
        "label": "getNode",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Data Structures.Get-Node-Value",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Data Structures.Get-Node-Value",
        "peekOfCode": "def getNode(head, positionFromTail):\n    length = 0\n    ptr = head\n    while ptr:\n        length += 1\n        ptr = ptr.next\n    if length==1:\n        return head.data\n    ptr = head\n    for _ in range(0, length-positionFromTail-1):",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Data Structures.Get-Node-Value",
        "documentation": {}
    },
    {
        "label": "insertNodeAtPosition",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Data Structures.Insert-A-Node-At-A-Specific-Position",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Data Structures.Insert-A-Node-At-A-Specific-Position",
        "peekOfCode": "def insertNodeAtPosition(head, data, position):\n    temp = head\n    ptr = 1\n    while ptr!=position:\n        temp = temp.next\n        ptr += 1\n    sec = temp.next\n    temp.next = SinglyLinkedListNode(data)\n    temp = temp.next\n    temp.next = sec",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Data Structures.Insert-A-Node-At-A-Specific-Position",
        "documentation": {}
    },
    {
        "label": "insertNodeAtHead",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Data Structures.Insert-A-Node-At-The-Head-Of-The-Linked-List",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Data Structures.Insert-A-Node-At-The-Head-Of-The-Linked-List",
        "peekOfCode": "def insertNodeAtHead(llist, data):\n    temp = SinglyLinkedListNode(data)\n    temp.next = llist\n    return temp",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Data Structures.Insert-A-Node-At-The-Head-Of-The-Linked-List",
        "documentation": {}
    },
    {
        "label": "insertNodeAtTail",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Data Structures.Insert-A-Node-At-The-Tail-Of-The-Linked-List",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Data Structures.Insert-A-Node-At-The-Tail-Of-The-Linked-List",
        "peekOfCode": "def insertNodeAtTail(head, data):\n    if head == None:\n        head = SinglyLinkedListNode(data)\n        return head\n    temp = head\n    while temp.next!=None:\n        temp = temp.next\n    temp.next = SinglyLinkedListNode(data)\n    return head",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Data Structures.Insert-A-Node-At-The-Tail-Of-The-Linked-List",
        "documentation": {}
    },
    {
        "label": "sortedInsert",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Data Structures.Insert-a-Node-into-a-Sorted-Doubly-Linked-List",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Data Structures.Insert-a-Node-into-a-Sorted-Doubly-Linked-List",
        "peekOfCode": "def sortedInsert(head, data):\n    ptr = head\n    if data <= ptr.data:\n        dummy = DoublyLinkedListNode(data)\n        dummy.next = head\n        head.prev = dummy\n        return dummy\n    while ptr:\n        if data >= ptr.data:\n            if ptr.next == None:",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Data Structures.Insert-a-Node-into-a-Sorted-Doubly-Linked-List",
        "documentation": {}
    },
    {
        "label": "mergeLists",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Data Structures.Merge-Two-Sorted-Lists",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Data Structures.Merge-Two-Sorted-Lists",
        "peekOfCode": "def mergeLists(head1, head2):\n    mergedList = mhead = SinglyLinkedListNode(-1)\n    while head1 and head2:\n        if head1.data < head2.data:\n            mergedList.next = SinglyLinkedListNode(head1.data)\n            head1 = head1.next\n            mergedList = mergedList.next\n        else:\n            mergedList.next = SinglyLinkedListNode(head2.data)\n            head2 = head2.next",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Data Structures.Merge-Two-Sorted-Lists",
        "documentation": {}
    },
    {
        "label": "reversePrint",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Data Structures.Print-In-Reverse",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Data Structures.Print-In-Reverse",
        "peekOfCode": "def reversePrint(head):\n    ans = []\n    while head:\n        ans.append(head.data)\n        head = head.next\n    for i in range(len(ans)-1, -1, -1):\n        print(ans[i])",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Data Structures.Print-In-Reverse",
        "documentation": {}
    },
    {
        "label": "printLinkedList",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Data Structures.Print-the-Elements-of-a-Linked-List",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Data Structures.Print-the-Elements-of-a-Linked-List",
        "peekOfCode": "def printLinkedList(head):\n    while True:\n        print(head.data)\n        head = head.next\n        if not head:\n            break",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Data Structures.Print-the-Elements-of-a-Linked-List",
        "documentation": {}
    },
    {
        "label": "reverse",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Data Structures.Reverse-a-Doubly-Linked-List",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Data Structures.Reverse-a-Doubly-Linked-List",
        "peekOfCode": "def reverse(head):\n    temp = newHead = head\n    while temp:\n        prev = temp.prev\n        temp.prev = temp.next\n        temp.next = prev\n        newHead = temp\n        temp = temp.prev\n    return newHead",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Data Structures.Reverse-a-Doubly-Linked-List",
        "documentation": {}
    },
    {
        "label": "reverse",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Data Structures.Reverse-A-Linked-List",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Data Structures.Reverse-A-Linked-List",
        "peekOfCode": "def reverse(head):\n    if not head:\n        return None\n    temp = prev = head\n    sec = head.next\n    head.next = None\n    while sec.next:\n        temp = sec.next\n        sec.next = prev\n        prev = sec",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Data Structures.Reverse-A-Linked-List",
        "documentation": {}
    },
    {
        "label": "matchingStrings",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Data Structures.Sparse-Arrays",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Data Structures.Sparse-Arrays",
        "peekOfCode": "def matchingStrings(strings, queries):\n    ans = []\n    c = Counter(strings)\n    for i in queries:\n        if i in c:\n            ans.append(c[i])\n        else:\n            ans.append(0)\n    return ans",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Data Structures.Sparse-Arrays",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Data Structures.Tree-InOrder-Traversal",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Data Structures.Tree-InOrder-Traversal",
        "peekOfCode": "class Node:\n    def __init__(self, info): \n        self.info = info  \n        self.left = None  \n        self.right = None \n        self.level = None \n    def __str__(self):\n        return str(self.info) \nclass BinarySearchTree:\n    def __init__(self): ",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Data Structures.Tree-InOrder-Traversal",
        "documentation": {}
    },
    {
        "label": "BinarySearchTree",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Data Structures.Tree-InOrder-Traversal",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Data Structures.Tree-InOrder-Traversal",
        "peekOfCode": "class BinarySearchTree:\n    def __init__(self): \n        self.root = None\n    def create(self, val):  \n        if self.root == None:\n            self.root = Node(val)\n        else:\n            current = self.root\n            while True:\n                if val < current.info:",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Data Structures.Tree-InOrder-Traversal",
        "documentation": {}
    },
    {
        "label": "inOrder",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Data Structures.Tree-InOrder-Traversal",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Data Structures.Tree-InOrder-Traversal",
        "peekOfCode": "def inOrder(root):\n    #Write your code here\n    if root.left:\n        inOrder(root.left)\n    print(root.info, end=' ')\n    if root.right:\n        inOrder(root.right)",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Data Structures.Tree-InOrder-Traversal",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Data Structures.Tree-PostOrder-Traversal",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Data Structures.Tree-PostOrder-Traversal",
        "peekOfCode": "class Node:\n    def __init__(self, info): \n        self.info = info  \n        self.left = None  \n        self.right = None \n        self.level = None \n    def __str__(self):\n        return str(self.info) \nclass BinarySearchTree:\n    def __init__(self): ",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Data Structures.Tree-PostOrder-Traversal",
        "documentation": {}
    },
    {
        "label": "BinarySearchTree",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Data Structures.Tree-PostOrder-Traversal",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Data Structures.Tree-PostOrder-Traversal",
        "peekOfCode": "class BinarySearchTree:\n    def __init__(self): \n        self.root = None\n    def create(self, val):  \n        if self.root == None:\n            self.root = Node(val)\n        else:\n            current = self.root\n            while True:\n                if val < current.info:",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Data Structures.Tree-PostOrder-Traversal",
        "documentation": {}
    },
    {
        "label": "postOrder",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Data Structures.Tree-PostOrder-Traversal",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Data Structures.Tree-PostOrder-Traversal",
        "peekOfCode": "def postOrder(root):\n    #Write your code here\n    if root.left:\n        preOrder(root.left)\n    if root.right:\n        preOrder(root.right)\n    print(root.info, end=' ')",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Data Structures.Tree-PostOrder-Traversal",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Data Structures.Tree-PreOrder-Traversal",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Data Structures.Tree-PreOrder-Traversal",
        "peekOfCode": "class Node:\n    def __init__(self, info): \n        self.info = info  \n        self.left = None  \n        self.right = None \n        self.level = None \n    def __str__(self):\n        return str(self.info) \nclass BinarySearchTree:\n    def __init__(self): ",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Data Structures.Tree-PreOrder-Traversal",
        "documentation": {}
    },
    {
        "label": "BinarySearchTree",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Data Structures.Tree-PreOrder-Traversal",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Data Structures.Tree-PreOrder-Traversal",
        "peekOfCode": "class BinarySearchTree:\n    def __init__(self): \n        self.root = None\n    def create(self, val):  \n        if self.root == None:\n            self.root = Node(val)\n        else:\n            current = self.root\n            while True:\n                if val < current.info:",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Data Structures.Tree-PreOrder-Traversal",
        "documentation": {}
    },
    {
        "label": "preOrder",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Data Structures.Tree-PreOrder-Traversal",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Data Structures.Tree-PreOrder-Traversal",
        "peekOfCode": "def preOrder(root):\n    #Write your code here\n    print(root.info, end=' ')\n    if root.left:\n        preOrder(root.left)\n    if root.right:\n        preOrder(root.right)",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Data Structures.Tree-PreOrder-Traversal",
        "documentation": {}
    },
    {
        "label": "decodeHuff",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Data Structures.Trees-Huffman-Decoding",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Data Structures.Trees-Huffman-Decoding",
        "peekOfCode": "def decodeHuff(root, s):\n    ans = \"\"\n    current = root\n\t#Enter Your Code Here\n    for i in range(0, len(s)):\n        if s[i] == '0':\n            current = current.left\n        else:\n            current = current.right\n        if current.left == None and current.right == None:",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Data Structures.Trees-Huffman-Decoding",
        "documentation": {}
    },
    {
        "label": "waiter",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Data Structures.Waiter",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Data Structures.Waiter",
        "peekOfCode": "def waiter(number, q):\n    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n        return True\n    #\n    # Write your code here.\n    #\n    x = 2",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Data Structures.Waiter",
        "documentation": {}
    },
    {
        "label": "isPalindrome",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Python.Built-Ins.Any-or-All",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Python.Built-Ins.Any-or-All",
        "peekOfCode": "def isPalindrome(num):\n    num = str(num)\n    front = len(num) - 1\n    rear = 0\n    while rear <= front:\n        if not num[front] == num[rear]:\n            return False\n        rear += 1\n        front -= 1\n    return True",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Python.Built-Ins.Any-or-All",
        "documentation": {}
    },
    {
        "label": "isPalindrome",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Python.Built-Ins.Any-or-All",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Python.Built-Ins.Any-or-All",
        "peekOfCode": "def isPalindrome(num):\n    num = str(num)\n    return True if num == num[::-1] else False\nn = int(input())\nnums = list(map(int, input().split()))\nprint(\"True\" if all(x >= 0 for x in nums) and any(isPalindrome(x) for x in nums) else \"False\")",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Python.Built-Ins.Any-or-All",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Python.Built-Ins.Any-or-All",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Python.Built-Ins.Any-or-All",
        "peekOfCode": "n = int(input())\nnums = list(map(int, input().split()))\nprint(\"True\" if all(x >= 0 for x in nums) and any(isPalindrome(x) for x in nums) else \"False\")\n# More Concise Solution using string reversal\n# Enter your code here. Read input from STDIN. Print output to STDOUT\ndef isPalindrome(num):\n    num = str(num)\n    return True if num == num[::-1] else False\nn = int(input())\nnums = list(map(int, input().split()))",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Python.Built-Ins.Any-or-All",
        "documentation": {}
    },
    {
        "label": "nums",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Python.Built-Ins.Any-or-All",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Python.Built-Ins.Any-or-All",
        "peekOfCode": "nums = list(map(int, input().split()))\nprint(\"True\" if all(x >= 0 for x in nums) and any(isPalindrome(x) for x in nums) else \"False\")\n# More Concise Solution using string reversal\n# Enter your code here. Read input from STDIN. Print output to STDOUT\ndef isPalindrome(num):\n    num = str(num)\n    return True if num == num[::-1] else False\nn = int(input())\nnums = list(map(int, input().split()))\nprint(\"True\" if all(x >= 0 for x in nums) and any(isPalindrome(x) for x in nums) else \"False\")",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Python.Built-Ins.Any-or-All",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Python.Built-Ins.Any-or-All",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Python.Built-Ins.Any-or-All",
        "peekOfCode": "n = int(input())\nnums = list(map(int, input().split()))\nprint(\"True\" if all(x >= 0 for x in nums) and any(isPalindrome(x) for x in nums) else \"False\")",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Python.Built-Ins.Any-or-All",
        "documentation": {}
    },
    {
        "label": "nums",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Python.Built-Ins.Any-or-All",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Python.Built-Ins.Any-or-All",
        "peekOfCode": "nums = list(map(int, input().split()))\nprint(\"True\" if all(x >= 0 for x in nums) and any(isPalindrome(x) for x in nums) else \"False\")",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Python.Built-Ins.Any-or-All",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Python.Built-Ins.ginortS",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Python.Built-Ins.ginortS",
        "peekOfCode": "s = input()\nprint(*sorted(s, key = lambda x : (x in '02468', x.isdigit(), x.isupper(), x.islower(), x)), sep='')",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Python.Built-Ins.ginortS",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Python.Built-Ins.Zipped",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Python.Built-Ins.Zipped",
        "peekOfCode": "data = [list(map(float, input().split())) for _ in range(s)]\nfor i in zip(*data):\n    print('%.2f'%(sum(i)/s))",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Python.Built-Ins.Zipped",
        "documentation": {}
    },
    {
        "label": "is_leap",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Python.Introduction.Write-a-Function",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Python.Introduction.Write-a-Function",
        "peekOfCode": "def is_leap(year):\n    if (year % 4 != 0) or (year % 100 == 0 and year % 400 != 0):\n        leap = False\n    else:\n        leap = True  \n    return leap",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Python.Introduction.Write-a-Function",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Check-Strict-Superset",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Check-Strict-Superset",
        "peekOfCode": "A = set(map(int, input().split()))\nn = int(input())\nfor _ in range(n):\n    x = set(map(int, input().split()))\n    if A >= x:\n        continue\n    else:\n        print(\"False\")\n        exit()\nprint(\"True\")",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Check-Strict-Superset",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Check-Strict-Superset",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Check-Strict-Superset",
        "peekOfCode": "n = int(input())\nfor _ in range(n):\n    x = set(map(int, input().split()))\n    if A >= x:\n        continue\n    else:\n        print(\"False\")\n        exit()\nprint(\"True\")",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Check-Strict-Superset",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Check-Subset",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Check-Subset",
        "peekOfCode": "t = int(input())\nfor _ in range(t):\n    na = int(input())\n    a = set(map(int, input().split()))\n    nb = int(input())\n    b = set(map(int, input().split()))\n    print(\"True\" if a<=b else \"False\")",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Check-Subset",
        "documentation": {}
    },
    {
        "label": "average",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Introduction-to-Sets",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Introduction-to-Sets",
        "peekOfCode": "def average(array):\n    # your code goes here\n    return sum(set(array))/len(set(array))\nif __name__ == '__main__':\n    n = int(input())\n    arr = list(map(int, input().split()))\n    result = average(arr)\n    print(result)",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Introduction-to-Sets",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Set-Add",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Set-Add",
        "peekOfCode": "n = int(input())\nc = set()\nfor i in range(n):\n    c.add(input())\nprint(len(c))",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Set-Add",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Set-Add",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Set-Add",
        "peekOfCode": "c = set()\nfor i in range(n):\n    c.add(input())\nprint(len(c))",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Set-Add",
        "documentation": {}
    },
    {
        "label": "e",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Set-Difference",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Set-Difference",
        "peekOfCode": "e = int(input())\nenglish = set(map(int, input().split()))\nf = int(input())\nfrench = set(map(int, input().split()))\nprint(len(english.intersection(french)))",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Set-Difference",
        "documentation": {}
    },
    {
        "label": "english",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Set-Difference",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Set-Difference",
        "peekOfCode": "english = set(map(int, input().split()))\nf = int(input())\nfrench = set(map(int, input().split()))\nprint(len(english.intersection(french)))",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Set-Difference",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Set-Difference",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Set-Difference",
        "peekOfCode": "f = int(input())\nfrench = set(map(int, input().split()))\nprint(len(english.intersection(french)))",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Set-Difference",
        "documentation": {}
    },
    {
        "label": "french",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Set-Difference",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Set-Difference",
        "peekOfCode": "french = set(map(int, input().split()))\nprint(len(english.intersection(french)))",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Set-Difference",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Set-Discard-Remove-Pop",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Set-Discard-Remove-Pop",
        "peekOfCode": "n = int(input())\ns = set(map(int, input().split()))\nN = int(input())\nqueries = [input().split() for i in range(N)]\nfor i in range(N):\n    if queries[i][0] == 'pop':\n        s.pop()\n    if queries[i][0] == 'remove':\n        if int(queries[i][1]) in s:\n            s.remove(int(queries[i][1]))",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Set-Discard-Remove-Pop",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Set-Discard-Remove-Pop",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Set-Discard-Remove-Pop",
        "peekOfCode": "s = set(map(int, input().split()))\nN = int(input())\nqueries = [input().split() for i in range(N)]\nfor i in range(N):\n    if queries[i][0] == 'pop':\n        s.pop()\n    if queries[i][0] == 'remove':\n        if int(queries[i][1]) in s:\n            s.remove(int(queries[i][1]))\n    if queries[i][0] == 'discard':",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Set-Discard-Remove-Pop",
        "documentation": {}
    },
    {
        "label": "N",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Set-Discard-Remove-Pop",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Set-Discard-Remove-Pop",
        "peekOfCode": "N = int(input())\nqueries = [input().split() for i in range(N)]\nfor i in range(N):\n    if queries[i][0] == 'pop':\n        s.pop()\n    if queries[i][0] == 'remove':\n        if int(queries[i][1]) in s:\n            s.remove(int(queries[i][1]))\n    if queries[i][0] == 'discard':\n        s.discard(int(queries[i][1]))",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Set-Discard-Remove-Pop",
        "documentation": {}
    },
    {
        "label": "queries",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Set-Discard-Remove-Pop",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Set-Discard-Remove-Pop",
        "peekOfCode": "queries = [input().split() for i in range(N)]\nfor i in range(N):\n    if queries[i][0] == 'pop':\n        s.pop()\n    if queries[i][0] == 'remove':\n        if int(queries[i][1]) in s:\n            s.remove(int(queries[i][1]))\n    if queries[i][0] == 'discard':\n        s.discard(int(queries[i][1]))\nprint(sum(s))",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Set-Discard-Remove-Pop",
        "documentation": {}
    },
    {
        "label": "e",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Set-Intersection",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Set-Intersection",
        "peekOfCode": "e = int(input())\nenglish = set(map(int, input().split()))\nf = int(input())\nfrench = set(map(int, input().split()))\nprint(len(english.intersection(french)))",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Set-Intersection",
        "documentation": {}
    },
    {
        "label": "english",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Set-Intersection",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Set-Intersection",
        "peekOfCode": "english = set(map(int, input().split()))\nf = int(input())\nfrench = set(map(int, input().split()))\nprint(len(english.intersection(french)))",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Set-Intersection",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Set-Intersection",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Set-Intersection",
        "peekOfCode": "f = int(input())\nfrench = set(map(int, input().split()))\nprint(len(english.intersection(french)))",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Set-Intersection",
        "documentation": {}
    },
    {
        "label": "french",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Set-Intersection",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Set-Intersection",
        "peekOfCode": "french = set(map(int, input().split()))\nprint(len(english.intersection(french)))",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Set-Intersection",
        "documentation": {}
    },
    {
        "label": "_",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Set-Mutations",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Set-Mutations",
        "peekOfCode": "_ = int(input())\ns1 = set(map(int, input().split()))\nN = int(input())\nfor _ in range(N):\n    cmd, _ = input().split()\n    s2 = set(map(int, input().split()))\n    if(cmd == \"intersection_update\"):\n        s1.intersection_update(s2)\n    elif(cmd == \"update\"):\n        s1.update(s2)",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Set-Mutations",
        "documentation": {}
    },
    {
        "label": "s1",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Set-Mutations",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Set-Mutations",
        "peekOfCode": "s1 = set(map(int, input().split()))\nN = int(input())\nfor _ in range(N):\n    cmd, _ = input().split()\n    s2 = set(map(int, input().split()))\n    if(cmd == \"intersection_update\"):\n        s1.intersection_update(s2)\n    elif(cmd == \"update\"):\n        s1.update(s2)\n    elif(cmd == \"symmetric_difference_update\"):",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Set-Mutations",
        "documentation": {}
    },
    {
        "label": "N",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Set-Mutations",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Set-Mutations",
        "peekOfCode": "N = int(input())\nfor _ in range(N):\n    cmd, _ = input().split()\n    s2 = set(map(int, input().split()))\n    if(cmd == \"intersection_update\"):\n        s1.intersection_update(s2)\n    elif(cmd == \"update\"):\n        s1.update(s2)\n    elif(cmd == \"symmetric_difference_update\"):\n        s1.symmetric_difference_update(s2)",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Set-Mutations",
        "documentation": {}
    },
    {
        "label": "e",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Set-Symmetric-Difference",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Set-Symmetric-Difference",
        "peekOfCode": "e = int(input())\nenglish = set(map(int, input().split()))\nf = int(input())\nfrench = set(map(int, input().split()))\nprint(len(english.symmetric_difference(french)))",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Set-Symmetric-Difference",
        "documentation": {}
    },
    {
        "label": "english",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Set-Symmetric-Difference",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Set-Symmetric-Difference",
        "peekOfCode": "english = set(map(int, input().split()))\nf = int(input())\nfrench = set(map(int, input().split()))\nprint(len(english.symmetric_difference(french)))",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Set-Symmetric-Difference",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Set-Symmetric-Difference",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Set-Symmetric-Difference",
        "peekOfCode": "f = int(input())\nfrench = set(map(int, input().split()))\nprint(len(english.symmetric_difference(french)))",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Set-Symmetric-Difference",
        "documentation": {}
    },
    {
        "label": "french",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Set-Symmetric-Difference",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Set-Symmetric-Difference",
        "peekOfCode": "french = set(map(int, input().split()))\nprint(len(english.symmetric_difference(french)))",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Set-Symmetric-Difference",
        "documentation": {}
    },
    {
        "label": "e",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Set-Union",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Set-Union",
        "peekOfCode": "e = int(input())\nenglish = set(map(int, input().split()))\nf = int(input())\nfrench = set(map(int, input().split()))\nprint(len(english.union(french)))",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Set-Union",
        "documentation": {}
    },
    {
        "label": "english",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Set-Union",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Set-Union",
        "peekOfCode": "english = set(map(int, input().split()))\nf = int(input())\nfrench = set(map(int, input().split()))\nprint(len(english.union(french)))",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Set-Union",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Set-Union",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Set-Union",
        "peekOfCode": "f = int(input())\nfrench = set(map(int, input().split()))\nprint(len(english.union(french)))",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Set-Union",
        "documentation": {}
    },
    {
        "label": "french",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Set-Union",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Set-Union",
        "peekOfCode": "french = set(map(int, input().split()))\nprint(len(english.union(french)))",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Set-Union",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Symmetric-Difference",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Symmetric-Difference",
        "peekOfCode": "m = int(input())\nmset = set(map(int, input().split()))\nn = int(input())\nnset = set(map(int, input().split()))\nsym = sorted(list(mset.difference(nset) | nset.difference(mset)))\nprint(*sym, sep='\\n')",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Symmetric-Difference",
        "documentation": {}
    },
    {
        "label": "mset",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Symmetric-Difference",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Symmetric-Difference",
        "peekOfCode": "mset = set(map(int, input().split()))\nn = int(input())\nnset = set(map(int, input().split()))\nsym = sorted(list(mset.difference(nset) | nset.difference(mset)))\nprint(*sym, sep='\\n')",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Symmetric-Difference",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Symmetric-Difference",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Symmetric-Difference",
        "peekOfCode": "n = int(input())\nnset = set(map(int, input().split()))\nsym = sorted(list(mset.difference(nset) | nset.difference(mset)))\nprint(*sym, sep='\\n')",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Symmetric-Difference",
        "documentation": {}
    },
    {
        "label": "nset",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Symmetric-Difference",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Symmetric-Difference",
        "peekOfCode": "nset = set(map(int, input().split()))\nsym = sorted(list(mset.difference(nset) | nset.difference(mset)))\nprint(*sym, sep='\\n')",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Symmetric-Difference",
        "documentation": {}
    },
    {
        "label": "sym",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Symmetric-Difference",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Symmetric-Difference",
        "peekOfCode": "sym = sorted(list(mset.difference(nset) | nset.difference(mset)))\nprint(*sym, sep='\\n')",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.Symmetric-Difference",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.The-Captain's-Room",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.The-Captain's-Room",
        "peekOfCode": "k = int(input())\nl = list(map(int, input().split()))\ncaptain = ((sum(set(l))*k) - sum(l))//(k-1)\nprint(captain)",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.The-Captain's-Room",
        "documentation": {}
    },
    {
        "label": "l",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.The-Captain's-Room",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.The-Captain's-Room",
        "peekOfCode": "l = list(map(int, input().split()))\ncaptain = ((sum(set(l))*k) - sum(l))//(k-1)\nprint(captain)",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.The-Captain's-Room",
        "documentation": {}
    },
    {
        "label": "captain",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.The-Captain's-Room",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.The-Captain's-Room",
        "peekOfCode": "captain = ((sum(set(l))*k) - sum(l))//(k-1)\nprint(captain)",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Python.Sets.The-Captain's-Room",
        "documentation": {}
    },
    {
        "label": "count_substring",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Python.Strings.Find-a-String",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Python.Strings.Find-a-String",
        "peekOfCode": "def count_substring(string, sub_string):\n    c = 0\n    for i in range(0, len(string)-len(sub_string)+1):\n        if string[i:i+len(sub_string)] == sub_string:\n            c += 1\n    return c\nif __name__ == '__main__':\n    string = input().strip()\n    sub_string = input().strip()\n    count = count_substring(string, sub_string)",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Python.Strings.Find-a-String",
        "documentation": {}
    },
    {
        "label": "mutate_string",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Python.Strings.Mutations",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Python.Strings.Mutations",
        "peekOfCode": "def mutate_string(string, position, character):\n    return string[0:position] + character + string[position+1:]\nif __name__ == '__main__':\n    s = input()\n    i, c = input().split()\n    s_new = mutate_string(s, int(i), c)\n    print(s_new)",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Python.Strings.Mutations",
        "documentation": {}
    },
    {
        "label": "split_and_join",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Python.Strings.String-Split-and-Join",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Python.Strings.String-Split-and-Join",
        "peekOfCode": "def split_and_join(line):\n    # write your code here\n    return \"-\".join(line.split(' '))\nif __name__ == '__main__':\n    line = input()\n    result = split_and_join(line)\n    print(result)",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Python.Strings.String-Split-and-Join",
        "documentation": {}
    },
    {
        "label": "swap_case",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Python.Strings.sWAP-cASE",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Python.Strings.sWAP-cASE",
        "peekOfCode": "def swap_case(s):\n    return s.swapcase()\nif __name__ == '__main__':\n    s = input()\n    result = swap_case(s)\n    print(result)",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Python.Strings.sWAP-cASE",
        "documentation": {}
    },
    {
        "label": "thickness",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Python.Strings.Text-Alignment",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Python.Strings.Text-Alignment",
        "peekOfCode": "thickness = int(input()) #This must be an odd number\nc = 'H'\n#Top Cone\nfor i in range(thickness):\n    print((c*i).rjust(thickness-1)+c+(c*i).ljust(thickness-1))\n#Top Pillars\nfor i in range(thickness+1):\n    print((c*thickness).center(thickness*2)+(c*thickness).center(thickness*6))\n#Middle Belt\nfor i in range((thickness+1)//2):",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Python.Strings.Text-Alignment",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Python.Strings.Text-Alignment",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Python.Strings.Text-Alignment",
        "peekOfCode": "c = 'H'\n#Top Cone\nfor i in range(thickness):\n    print((c*i).rjust(thickness-1)+c+(c*i).ljust(thickness-1))\n#Top Pillars\nfor i in range(thickness+1):\n    print((c*thickness).center(thickness*2)+(c*thickness).center(thickness*6))\n#Middle Belt\nfor i in range((thickness+1)//2):\n    print((c*thickness*5).center(thickness*6))    ",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Python.Strings.Text-Alignment",
        "documentation": {}
    },
    {
        "label": "wrap",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Python.Strings.Text-Wrap",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Python.Strings.Text-Wrap",
        "peekOfCode": "def wrap(string, max_width):\n    return textwrap.fill(string, width=max_width)\nif __name__ == '__main__':\n    string, max_width = raw_input(), int(raw_input())\n    result = wrap(string, max_width)\n    print result",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Python.Strings.Text-Wrap",
        "documentation": {}
    },
    {
        "label": "print_full_name",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Python.Strings.What's-Your-Name",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Python.Strings.What's-Your-Name",
        "peekOfCode": "def print_full_name(a, b):\n    print(\"Hello \"+a+\" \"+b+\"! You just delved into python.\")\nif __name__ == '__main__':\n    first_name = input()\n    last_name = input()\n    print_full_name(first_name, last_name)",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Python.Strings.What's-Your-Name",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Python.Mod-Divmod",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Python.Mod-Divmod",
        "peekOfCode": "a = int(input())\nb = int(input())\nprint(a//b)\nprint(a%b)\nprint(divmod(a,b))",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Python.Mod-Divmod",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.HackerRank.Python.Mod-Divmod",
        "description": "python-gitbook-master..gitbook.assets.HackerRank.Python.Mod-Divmod",
        "peekOfCode": "b = int(input())\nprint(a//b)\nprint(a%b)\nprint(divmod(a,b))",
        "detail": "python-gitbook-master..gitbook.assets.HackerRank.Python.Mod-Divmod",
        "documentation": {}
    },
    {
        "label": "check_prime",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.hashing.number_theory.prime_numbers",
        "description": "python-gitbook-master..gitbook.assets.hashing.number_theory.prime_numbers",
        "peekOfCode": "def check_prime(number):\n    \"\"\"\n    it's not the best solution\n    \"\"\"\n    special_non_primes = [0, 1, 2]\n    if number in special_non_primes[:2]:\n        return 2\n    elif number == special_non_primes[-1]:\n        return 3\n    return all([number % i for i in range(2, number)])",
        "detail": "python-gitbook-master..gitbook.assets.hashing.number_theory.prime_numbers",
        "documentation": {}
    },
    {
        "label": "next_prime",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.hashing.number_theory.prime_numbers",
        "description": "python-gitbook-master..gitbook.assets.hashing.number_theory.prime_numbers",
        "peekOfCode": "def next_prime(value, factor=1, **kwargs):\n    value = factor * value\n    first_value_val = value\n    while not check_prime(value):\n        value += 1 if not (\"desc\" in kwargs.keys() and kwargs[\"desc\"] is True) else -1\n    if value == first_value_val:\n        return next_prime(value + 1, **kwargs)\n    return value",
        "detail": "python-gitbook-master..gitbook.assets.hashing.number_theory.prime_numbers",
        "documentation": {}
    },
    {
        "label": "DoubleHash",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.hashing.double_hash",
        "description": "python-gitbook-master..gitbook.assets.hashing.double_hash",
        "peekOfCode": "class DoubleHash(HashTable):\n    \"\"\"\n    Hash Table example with open addressing and Double Hash\n    \"\"\"\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n    def __hash_function_2(self, value, data):\n        next_prime_gt = (\n            next_prime(value % self.size_table)\n            if not check_prime(value % self.size_table)",
        "detail": "python-gitbook-master..gitbook.assets.hashing.double_hash",
        "documentation": {}
    },
    {
        "label": "HashTable",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.hashing.hash_table",
        "description": "python-gitbook-master..gitbook.assets.hashing.hash_table",
        "peekOfCode": "class HashTable:\n    \"\"\"\n    Basic Hash Table example with open addressing and linear probing\n    \"\"\"\n    def __init__(self, size_table, charge_factor=None, lim_charge=None):\n        self.size_table = size_table\n        self.values = [None] * self.size_table\n        self.lim_charge = 0.75 if lim_charge is None else lim_charge\n        self.charge_factor = 1 if charge_factor is None else charge_factor\n        self.__aux_list = []",
        "detail": "python-gitbook-master..gitbook.assets.hashing.hash_table",
        "documentation": {}
    },
    {
        "label": "HashTableWithLinkedList",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.hashing.hash_table_with_linked_list",
        "description": "python-gitbook-master..gitbook.assets.hashing.hash_table_with_linked_list",
        "peekOfCode": "class HashTableWithLinkedList(HashTable):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n    def _set_value(self, key, data):\n        self.values[key] = deque([]) if self.values[key] is None else self.values[key]\n        self.values[key].appendleft(data)\n        self._keys[key] = self.values[key]\n    def balanced_factor(self):\n        return (\n            sum([self.charge_factor - len(slot) for slot in self.values])",
        "detail": "python-gitbook-master..gitbook.assets.hashing.hash_table_with_linked_list",
        "documentation": {}
    },
    {
        "label": "QuadraticProbing",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.hashing.quadratic_probing",
        "description": "python-gitbook-master..gitbook.assets.hashing.quadratic_probing",
        "peekOfCode": "class QuadraticProbing(HashTable):\n    \"\"\"\n    Basic Hash Table example with open addressing using Quadratic Probing\n    \"\"\"\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n    def _collision_resolution(self, key, data=None):\n        i = 1\n        new_key = self.hash_function(key + i * i)\n        while self.values[new_key] is not None and self.values[new_key] != key:",
        "detail": "python-gitbook-master..gitbook.assets.hashing.quadratic_probing",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.heap.binomial_heap",
        "description": "python-gitbook-master..gitbook.assets.heap.binomial_heap",
        "peekOfCode": "class Node:\n    \"\"\"\n    Node in a doubly-linked binomial tree, containing:\n        - value\n        - size of left subtree\n        - link to left, right and parent nodes\n    \"\"\"\n    def __init__(self, val):\n        self.val = val\n        # Number of nodes in left subtree",
        "detail": "python-gitbook-master..gitbook.assets.heap.binomial_heap",
        "documentation": {}
    },
    {
        "label": "BinomialHeap",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.heap.binomial_heap",
        "description": "python-gitbook-master..gitbook.assets.heap.binomial_heap",
        "peekOfCode": "class BinomialHeap:\n    r\"\"\"\n    Min-oriented priority queue implemented with the Binomial Heap data\n    structure implemented with the BinomialHeap class. It supports:\n        - Insert element in a heap with n elements: Guaranteed logn, amoratized 1\n        - Merge (meld) heaps of size m and n: O(logn + logm)\n        - Delete Min: O(logn)\n        - Peek (return min without deleting it): O(1)\n    Example:\n    Create a random permutation of 30 integers to be inserted and 19 of them deleted",
        "detail": "python-gitbook-master..gitbook.assets.heap.binomial_heap",
        "documentation": {}
    },
    {
        "label": "Heap",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.heap.heap",
        "description": "python-gitbook-master..gitbook.assets.heap.heap",
        "peekOfCode": "class Heap:\n    \"\"\"A Max Heap Implementation\n    >>> unsorted = [103, 9, 1, 7, 11, 15, 25, 201, 209, 107, 5]\n    >>> h = Heap()\n    >>> h.build_max_heap(unsorted)\n    >>> print(h)\n    [209, 201, 25, 103, 107, 15, 1, 9, 7, 11, 5]\n    >>>\n    >>> h.extract_max()\n    209",
        "detail": "python-gitbook-master..gitbook.assets.heap.heap",
        "documentation": {}
    },
    {
        "label": "Heap",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.heap.heap_generic",
        "description": "python-gitbook-master..gitbook.assets.heap.heap_generic",
        "peekOfCode": "class Heap:\n    \"\"\"\n    A generic Heap class, can be used as min or max by passing the key function\n    accordingly.\n    \"\"\"\n    def __init__(self, key=None):\n        # Stores actual heap items.\n        self.arr = list()\n        # Stores indexes of each item for supporting updates and deletion.\n        self.pos_map = {}",
        "detail": "python-gitbook-master..gitbook.assets.heap.heap_generic",
        "documentation": {}
    },
    {
        "label": "test_heap",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.heap.heap_generic",
        "description": "python-gitbook-master..gitbook.assets.heap.heap_generic",
        "peekOfCode": "def test_heap() -> None:\n    \"\"\"\n    >>> h = Heap()  # Max-heap\n    >>> h.insert_item(5, 34)\n    >>> h.insert_item(6, 31)\n    >>> h.insert_item(7, 37)\n    >>> h.get_top()\n    [7, 37]\n    >>> h.extract_top()\n    [7, 37]",
        "detail": "python-gitbook-master..gitbook.assets.heap.heap_generic",
        "documentation": {}
    },
    {
        "label": "BinaryHeap",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.heap.max_heap",
        "description": "python-gitbook-master..gitbook.assets.heap.max_heap",
        "peekOfCode": "class BinaryHeap:\n    \"\"\"\n    A max-heap implementation in Python\n    >>> binary_heap = BinaryHeap()\n    >>> binary_heap.insert(6)\n    >>> binary_heap.insert(10)\n    >>> binary_heap.insert(15)\n    >>> binary_heap.insert(12)\n    >>> binary_heap.pop()\n    15",
        "detail": "python-gitbook-master..gitbook.assets.heap.max_heap",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.heap.min_heap",
        "description": "python-gitbook-master..gitbook.assets.heap.min_heap",
        "peekOfCode": "class Node:\n    def __init__(self, name, val):\n        self.name = name\n        self.val = val\n    def __str__(self):\n        return f\"{self.__class__.__name__}({self.name}, {self.val})\"\n    def __lt__(self, other):\n        return self.val < other.val\nclass MinHeap:\n    \"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.heap.min_heap",
        "documentation": {}
    },
    {
        "label": "MinHeap",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.heap.min_heap",
        "description": "python-gitbook-master..gitbook.assets.heap.min_heap",
        "peekOfCode": "class MinHeap:\n    \"\"\"\n    >>> r = Node(\"R\", -1)\n    >>> b = Node(\"B\", 6)\n    >>> a = Node(\"A\", 3)\n    >>> x = Node(\"X\", 1)\n    >>> e = Node(\"E\", 4)\n    >>> print(b)\n    Node(B, 6)\n    >>> myMinHeap = MinHeap([r, b, a, x, e])",
        "detail": "python-gitbook-master..gitbook.assets.heap.min_heap",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.heap.min_heap",
        "description": "python-gitbook-master..gitbook.assets.heap.min_heap",
        "peekOfCode": "r = Node(\"R\", -1)\nb = Node(\"B\", 6)\na = Node(\"A\", 3)\nx = Node(\"X\", 1)\ne = Node(\"E\", 4)\n# Use one of these two ways to generate Min-Heap\n# Generating Min-Heap from array\nmyMinHeap = MinHeap([r, b, a, x, e])\n# Generating Min-Heap by Insert method\n# myMinHeap.insert(a)",
        "detail": "python-gitbook-master..gitbook.assets.heap.min_heap",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.heap.min_heap",
        "description": "python-gitbook-master..gitbook.assets.heap.min_heap",
        "peekOfCode": "b = Node(\"B\", 6)\na = Node(\"A\", 3)\nx = Node(\"X\", 1)\ne = Node(\"E\", 4)\n# Use one of these two ways to generate Min-Heap\n# Generating Min-Heap from array\nmyMinHeap = MinHeap([r, b, a, x, e])\n# Generating Min-Heap by Insert method\n# myMinHeap.insert(a)\n# myMinHeap.insert(b)",
        "detail": "python-gitbook-master..gitbook.assets.heap.min_heap",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.heap.min_heap",
        "description": "python-gitbook-master..gitbook.assets.heap.min_heap",
        "peekOfCode": "a = Node(\"A\", 3)\nx = Node(\"X\", 1)\ne = Node(\"E\", 4)\n# Use one of these two ways to generate Min-Heap\n# Generating Min-Heap from array\nmyMinHeap = MinHeap([r, b, a, x, e])\n# Generating Min-Heap by Insert method\n# myMinHeap.insert(a)\n# myMinHeap.insert(b)\n# myMinHeap.insert(x)",
        "detail": "python-gitbook-master..gitbook.assets.heap.min_heap",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.heap.min_heap",
        "description": "python-gitbook-master..gitbook.assets.heap.min_heap",
        "peekOfCode": "x = Node(\"X\", 1)\ne = Node(\"E\", 4)\n# Use one of these two ways to generate Min-Heap\n# Generating Min-Heap from array\nmyMinHeap = MinHeap([r, b, a, x, e])\n# Generating Min-Heap by Insert method\n# myMinHeap.insert(a)\n# myMinHeap.insert(b)\n# myMinHeap.insert(x)\n# myMinHeap.insert(r)",
        "detail": "python-gitbook-master..gitbook.assets.heap.min_heap",
        "documentation": {}
    },
    {
        "label": "e",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.heap.min_heap",
        "description": "python-gitbook-master..gitbook.assets.heap.min_heap",
        "peekOfCode": "e = Node(\"E\", 4)\n# Use one of these two ways to generate Min-Heap\n# Generating Min-Heap from array\nmyMinHeap = MinHeap([r, b, a, x, e])\n# Generating Min-Heap by Insert method\n# myMinHeap.insert(a)\n# myMinHeap.insert(b)\n# myMinHeap.insert(x)\n# myMinHeap.insert(r)\n# myMinHeap.insert(e)",
        "detail": "python-gitbook-master..gitbook.assets.heap.min_heap",
        "documentation": {}
    },
    {
        "label": "myMinHeap",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.heap.min_heap",
        "description": "python-gitbook-master..gitbook.assets.heap.min_heap",
        "peekOfCode": "myMinHeap = MinHeap([r, b, a, x, e])\n# Generating Min-Heap by Insert method\n# myMinHeap.insert(a)\n# myMinHeap.insert(b)\n# myMinHeap.insert(x)\n# myMinHeap.insert(r)\n# myMinHeap.insert(e)\n# Before\nprint(\"Min Heap - before decrease key\")\nfor i in myMinHeap.heap:",
        "detail": "python-gitbook-master..gitbook.assets.heap.min_heap",
        "documentation": {}
    },
    {
        "label": "RandomizedHeapNode",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.heap.randomized_heap",
        "description": "python-gitbook-master..gitbook.assets.heap.randomized_heap",
        "peekOfCode": "class RandomizedHeapNode(Generic[T]):\n    \"\"\"\n    One node of the randomized heap. Contains the value and references to\n    two children.\n    \"\"\"\n    def __init__(self, value: T) -> None:\n        self._value: T = value\n        self.left: Optional[RandomizedHeapNode[T]] = None\n        self.right: Optional[RandomizedHeapNode[T]] = None\n    @property",
        "detail": "python-gitbook-master..gitbook.assets.heap.randomized_heap",
        "documentation": {}
    },
    {
        "label": "RandomizedHeap",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.heap.randomized_heap",
        "description": "python-gitbook-master..gitbook.assets.heap.randomized_heap",
        "peekOfCode": "class RandomizedHeap(Generic[T]):\n    \"\"\"\n    A data structure that allows inserting a new value and to pop the smallest\n    values. Both operations take O(logN) time where N is the size of the\n    structure.\n    Wiki: https://en.wikipedia.org/wiki/Randomized_meldable_heap\n    >>> RandomizedHeap([2, 3, 1, 5, 1, 7]).to_sorted_list()\n    [1, 1, 2, 3, 5, 7]\n    >>> rh = RandomizedHeap()\n    >>> rh.pop()",
        "detail": "python-gitbook-master..gitbook.assets.heap.randomized_heap",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.heap.randomized_heap",
        "description": "python-gitbook-master..gitbook.assets.heap.randomized_heap",
        "peekOfCode": "T = TypeVar(\"T\")\nclass RandomizedHeapNode(Generic[T]):\n    \"\"\"\n    One node of the randomized heap. Contains the value and references to\n    two children.\n    \"\"\"\n    def __init__(self, value: T) -> None:\n        self._value: T = value\n        self.left: Optional[RandomizedHeapNode[T]] = None\n        self.right: Optional[RandomizedHeapNode[T]] = None",
        "detail": "python-gitbook-master..gitbook.assets.heap.randomized_heap",
        "documentation": {}
    },
    {
        "label": "SkewNode",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.heap.skew_heap",
        "description": "python-gitbook-master..gitbook.assets.heap.skew_heap",
        "peekOfCode": "class SkewNode(Generic[T]):\n    \"\"\"\n    One node of the skew heap. Contains the value and references to\n    two children.\n    \"\"\"\n    def __init__(self, value: T) -> None:\n        self._value: T = value\n        self.left: Optional[SkewNode[T]] = None\n        self.right: Optional[SkewNode[T]] = None\n    @property",
        "detail": "python-gitbook-master..gitbook.assets.heap.skew_heap",
        "documentation": {}
    },
    {
        "label": "SkewHeap",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.heap.skew_heap",
        "description": "python-gitbook-master..gitbook.assets.heap.skew_heap",
        "peekOfCode": "class SkewHeap(Generic[T]):\n    \"\"\"\n    A data structure that allows inserting a new value and to pop the smallest\n    values. Both operations take O(logN) time where N is the size of the\n    structure.\n    Wiki: https://en.wikipedia.org/wiki/Skew_heap\n    Visualisation: https://www.cs.usfca.edu/~galles/visualization/SkewHeap.html\n    >>> list(SkewHeap([2, 3, 1, 5, 1, 7]))\n    [1, 1, 2, 3, 5, 7]\n    >>> sh = SkewHeap()",
        "detail": "python-gitbook-master..gitbook.assets.heap.skew_heap",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.heap.skew_heap",
        "description": "python-gitbook-master..gitbook.assets.heap.skew_heap",
        "peekOfCode": "T = TypeVar(\"T\")\nclass SkewNode(Generic[T]):\n    \"\"\"\n    One node of the skew heap. Contains the value and references to\n    two children.\n    \"\"\"\n    def __init__(self, value: T) -> None:\n        self._value: T = value\n        self.left: Optional[SkewNode[T]] = None\n        self.right: Optional[SkewNode[T]] = None",
        "detail": "python-gitbook-master..gitbook.assets.heap.skew_heap",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.InterviewBit.Arrays.Largest-Number",
        "description": "python-gitbook-master..gitbook.assets.InterviewBit.Arrays.Largest-Number",
        "peekOfCode": "class Solution:\n    # @param A : tuple of integers\n    # @return a strings\n    def largestNumber(self, A):\n        A = [str(item) for item in A]\n        A = sorted(A, key = lambda s:s*9 )[::-1]\n        return str(int(''.join(A)))",
        "detail": "python-gitbook-master..gitbook.assets.InterviewBit.Arrays.Largest-Number",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.InterviewBit.Arrays.Min-Steps-in-Infinite-Grid",
        "description": "python-gitbook-master..gitbook.assets.InterviewBit.Arrays.Min-Steps-in-Infinite-Grid",
        "peekOfCode": "class Solution:\n    # @param A : list of integers\n    # @param B : list of integers\n    # @return an integer\n    def coverPoints(self, A, B):\n        moves = 0\n        for i in range(len(A)-1):\n            if abs(A[i]-A[i+1]) <= abs(B[i]-B[i+1]):\n                moves += abs(B[i]-B[i+1])\n            else:",
        "detail": "python-gitbook-master..gitbook.assets.InterviewBit.Arrays.Min-Steps-in-Infinite-Grid",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.InterviewBit.Arrays.Noble-Integer",
        "description": "python-gitbook-master..gitbook.assets.InterviewBit.Arrays.Noble-Integer",
        "peekOfCode": "class Solution:\n    # @param A : list of integers\n    # @return an integer\n    def solve(self, A):\n        A = [item for item in A if item>=0]\n        A.sort()\n        for i in range(len(A)-1):\n            if A[i] == A[i+1]:\n                continue\n            if A[i] == len(A)-i-1:",
        "detail": "python-gitbook-master..gitbook.assets.InterviewBit.Arrays.Noble-Integer",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.InterviewBit.Arrays.Pascal-Triangle",
        "description": "python-gitbook-master..gitbook.assets.InterviewBit.Arrays.Pascal-Triangle",
        "peekOfCode": "class Solution:\n    # @param A : integer\n    # @return a list of list of integers\n    def solve(self, A):\n        pas = []\n        if A == 0:\n            pas = []\n        elif A == 1:\n            pas = [[1]]\n        elif A == 2:",
        "detail": "python-gitbook-master..gitbook.assets.InterviewBit.Arrays.Pascal-Triangle",
        "documentation": {}
    },
    {
        "label": "Solution1",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.InterviewBit.Arrays.Wave-Array",
        "description": "python-gitbook-master..gitbook.assets.InterviewBit.Arrays.Wave-Array",
        "peekOfCode": "class Solution1:\n    # @param A : list of integers\n    # @return a list of integers\n    def wave(self, A):\n        A.sort()\n        for i in range(0, len(A)-1, 2):\n            A[i], A[i+1] = A[i+1], A[i]\n        return A\n# O(n) Solution\nclass Solution2:",
        "detail": "python-gitbook-master..gitbook.assets.InterviewBit.Arrays.Wave-Array",
        "documentation": {}
    },
    {
        "label": "Solution2",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.InterviewBit.Arrays.Wave-Array",
        "description": "python-gitbook-master..gitbook.assets.InterviewBit.Arrays.Wave-Array",
        "peekOfCode": "class Solution2:\n    # @param A : list of integers\n    # @return a list of integers\n    def wave(self, A):\n        n = len(A)\n        for i in range(0, n, 2):\n            if (i > 0) and A[i] < A[i-1]:\n                A[i], A[i-1] = A[i-1], A[i]\n            if i < (n-1) and A[i] < A[i+1]:\n                A[i], A[i+1] = A[i+1], A[i]",
        "detail": "python-gitbook-master..gitbook.assets.InterviewBit.Arrays.Wave-Array",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.InterviewBit.Math.fizzbuzz",
        "description": "python-gitbook-master..gitbook.assets.InterviewBit.Math.fizzbuzz",
        "peekOfCode": "class Solution:\n    # @param A : integer\n    # @return a list of strings\n    def fizzBuzz(self, A):\n        res = []\n        for i in range(1, A+1):\n            if i % 15 == 0:\n               res.append(\"FizzBuzz\")\n               continue\n            if i % 3 == 0:",
        "detail": "python-gitbook-master..gitbook.assets.InterviewBit.Math.fizzbuzz",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.InterviewBit.Math.trailing-zeros-in-factorial",
        "description": "python-gitbook-master..gitbook.assets.InterviewBit.Math.trailing-zeros-in-factorial",
        "peekOfCode": "class Solution:\n    # @param A : integer\n    # @return an integer\n    def trailingZeroes(self, A):\n        five = 0\n        i = 5\n        while (A/i >= 1):\n            five += int(A/i)\n            i *= 5\n        return five",
        "detail": "python-gitbook-master..gitbook.assets.InterviewBit.Math.trailing-zeros-in-factorial",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.InterviewBit.Stacks and Queues.Balanced-Paranthesis",
        "description": "python-gitbook-master..gitbook.assets.InterviewBit.Stacks and Queues.Balanced-Paranthesis",
        "peekOfCode": "class Solution:\n    # @param A : string\n    # @return an integer\n    def solve(self, A):\n        stack = []\n        c = Counter(A)\n        for i in A:\n            if i == '(':\n                stack.append('(')\n                continue",
        "detail": "python-gitbook-master..gitbook.assets.InterviewBit.Stacks and Queues.Balanced-Paranthesis",
        "documentation": {}
    },
    {
        "label": "NaiveSolution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.InterviewBit.Stacks and Queues.Max-Special-Product",
        "description": "python-gitbook-master..gitbook.assets.InterviewBit.Stacks and Queues.Max-Special-Product",
        "peekOfCode": "class NaiveSolution:\n    # Naive Solution, TLE\n    # @param A : list of integers\n    # @return an integer\n    def maxSpecialProduct(self, A):\n        ls = 0\n        rs = 0\n        maxProduct = 0\n        sp = 0\n        for i in range(1, len(A)-1):",
        "detail": "python-gitbook-master..gitbook.assets.InterviewBit.Stacks and Queues.Max-Special-Product",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.InterviewBit.Stacks and Queues.Nearest-Smallest-Element",
        "description": "python-gitbook-master..gitbook.assets.InterviewBit.Stacks and Queues.Nearest-Smallest-Element",
        "peekOfCode": "class Solution:\n    # @param A : list of integers\n    # @return a list of integers\n    def prevSmaller(self, A):\n        G = []\n        stack = []\n        for i in range(len(A)):\n            while stack and stack[-1] >= A[i]:\n                stack.pop()\n            if not stack:",
        "detail": "python-gitbook-master..gitbook.assets.InterviewBit.Stacks and Queues.Nearest-Smallest-Element",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.InterviewBit.Stacks and Queues.Redundant-Braces",
        "description": "python-gitbook-master..gitbook.assets.InterviewBit.Stacks and Queues.Redundant-Braces",
        "peekOfCode": "class Solution:\n    # @param A : string\n    # @return an integer\n    def braces(self, A):\n        stack = []\n        ops = set(['*', '+', '-', '/'])\n        for i in A:\n            if i == '(':\n                stack.append('(')\n                continue",
        "detail": "python-gitbook-master..gitbook.assets.InterviewBit.Stacks and Queues.Redundant-Braces",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.InterviewBit.Stacks and Queues.Simplify-Directory-Path",
        "description": "python-gitbook-master..gitbook.assets.InterviewBit.Stacks and Queues.Simplify-Directory-Path",
        "peekOfCode": "class Solution:\n    # @param A : string\n    # @return a strings\n    def simplifyPath(self, A):\n        A = A.split('/')\n        op = ''\n        stack = []\n        for i in range(len(A)):\n            if A[i].isalpha():\n                stack.append(A[i])",
        "detail": "python-gitbook-master..gitbook.assets.InterviewBit.Stacks and Queues.Simplify-Directory-Path",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.InterviewBit.Two Pointers.3Sum",
        "description": "python-gitbook-master..gitbook.assets.InterviewBit.Two Pointers.3Sum",
        "peekOfCode": "class Solution:\n    # @param A : list of integers\n    # @param B : integer\n    # @return an integer\n    def threeSumClosest(self, A, B):\n        A.sort()\n        cs = math.inf\n        for i in range(0, len(A)-2):\n            j = i + 1\n            k = len(A) - 1",
        "detail": "python-gitbook-master..gitbook.assets.InterviewBit.Two Pointers.3Sum",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.InterviewBit.Two Pointers.Intersection-of-Sorted-Arrays",
        "description": "python-gitbook-master..gitbook.assets.InterviewBit.Two Pointers.Intersection-of-Sorted-Arrays",
        "peekOfCode": "class Solution:\n    # @param A : tuple of integers\n    # @param B : tuple of integers\n    # @return a list of integers\n    def intersect(self, A, B):\n        s1 = 0\n        s2 = 0\n        e1 = len(A)\n        e2 = len(B)\n        intersection = []",
        "detail": "python-gitbook-master..gitbook.assets.InterviewBit.Two Pointers.Intersection-of-Sorted-Arrays",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.InterviewBit.Two Pointers.Merge-Two-Sorted-Lists-II",
        "description": "python-gitbook-master..gitbook.assets.InterviewBit.Two Pointers.Merge-Two-Sorted-Lists-II",
        "peekOfCode": "class Solution:\n    # @param A : list of integers\n    # @param B : list of integers\n    def merge(self, A, B):\n        e2 = len(B)\n        s1 = 0\n        s2 = 0\n        while s2 < e2 and s1 < len(A):\n            if B[s2] <= A[s1]:\n                A.insert(s1, B[s2])",
        "detail": "python-gitbook-master..gitbook.assets.InterviewBit.Two Pointers.Merge-Two-Sorted-Lists-II",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.Dynamic Programming.ClimbingStairs",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.Dynamic Programming.ClimbingStairs",
        "peekOfCode": "class Solution:\n    def climbStairs(self, n: int) -> int:\n        def climb(i, n, memo):\n            if(i>n):\n                return 0\n            if(i==n):\n                return 1\n            if(memo[i]>0):\n                return memo[i]\n            memo[i] = climb(i+1, n, memo) + climb(i+2, n, memo)",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.Dynamic Programming.ClimbingStairs",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.Dynamic Programming.Fibonacci",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.Dynamic Programming.Fibonacci",
        "peekOfCode": "class Solution:\n    def fib(self, N: int) -> int:\n        if(N==0):\n            return 0\n        if(N==1):\n            return 1\n        dp = [0 for _ in range(N+1)]\n        dp[1] = 1\n        for i in range(2, N+1):\n            dp[i] = dp[i-1] + dp[i-2]",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.Dynamic Programming.Fibonacci",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.Dynamic Programming.MaximumSubArray",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.Dynamic Programming.MaximumSubArray",
        "peekOfCode": "class Solution:\n    def maxSubArray(self, nums: List[int]) -> int:\n        for i in range(1, len(nums)):            \n            if nums[i-1] > 0:\n                nums[i] += nums[i-1]\n        return max(nums)",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.Dynamic Programming.MaximumSubArray",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.Dynamic Programming.MinimumPathSum",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.Dynamic Programming.MinimumPathSum",
        "peekOfCode": "class Solution:\n    def minPathSum(self, grid: List[List[int]]) -> int:\n        m, n = len(grid), len(grid[0])\n        for i in range(1, m):\n            grid[i][0] += grid[i-1][0]\n        for j in range(1, n):\n            grid[0][j] += grid[0][j-1]\n        for i in range(1, m):\n            for j in range(1, n):\n                grid[i][j] += min(grid[i-1][j], grid[i][j-1])           ",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.Dynamic Programming.MinimumPathSum",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.Dynamic Programming.NthTribonacci",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.Dynamic Programming.NthTribonacci",
        "peekOfCode": "class Solution:\n    def tribonacci(self, n: int) -> int:\n        if(n==0):\n            return 0\n        if (n==1 or n==2):\n            return 1\n        dp = [0 for _ in range(n+1)]\n        dp[0] = 0\n        dp[1] = 1\n        dp[2] = 1",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.Dynamic Programming.NthTribonacci",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.Dynamic Programming.UniquePaths",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.Dynamic Programming.UniquePaths",
        "peekOfCode": "class Solution:\n    def uniquePaths(self, m: int, n: int) -> int:\n        if(m==1 and n==1):\n            return 1\n        grid = [[0 for _ in range(n)] for _ in range(m)]\n        for i in range(1,m):\n            grid[i][0] = 1\n        for i in range(1,n):\n            grid[0][i] = 1\n        for i in range(1,m):",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.Dynamic Programming.UniquePaths",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.AddTwoNumbers",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.AddTwoNumbers",
        "peekOfCode": "class Solution:\n    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:\n        c = 0\n        res = []\n        while(l1 or l2):\n            s = 0 + c\n            if l1:\n                s += int(l1.val)\n                l1 = l1.next\n            if l2:",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.AddTwoNumbers",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.AssignCookies",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.AssignCookies",
        "peekOfCode": "class Solution:\n    def findContentChildren(self, g: List[int], s: List[int]) -> int:\n        g = sorted(g)\n        s = sorted(s)\n        content = 0\n        while s and g:\n            if s[-1] >= g[-1]:\n                s.pop()\n                content += 1\n            g.pop()",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.AssignCookies",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.BackSpaceStringCompare",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.BackSpaceStringCompare",
        "peekOfCode": "class Solution:\n    def backspaceCompare(self, S: str, T: str) -> bool:\n        def deleteBackSpace(X):\n            stack = []\n            for i in X:\n                if not i=='#':\n                    stack.append(i)\n                elif(len(stack)==0):\n                    continue\n                else:",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.BackSpaceStringCompare",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.BalanceaBST",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.BalanceaBST",
        "peekOfCode": "class Solution:\n    def balanceBST(self, root: TreeNode) -> TreeNode:\n        result = []\n        def inorder(node):\n            if node:\n                if node.left!=None:\n                    inorder(node.left)\n                result.append(int(node.val))\n                if node.right!=None:\n                    inorder(node.right)",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.BalanceaBST",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.BestTimeToBuyAndSellStockII",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.BestTimeToBuyAndSellStockII",
        "peekOfCode": "class Solution:\n    def maxProfit(self, prices: List[int]) -> int:\n        profit = 0\n        for i in range(0, len(prices)-1):\n            if(prices[i+1] > prices[i]):\n                profit += prices[i+1] - prices[i]\n        return profit",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.BestTimeToBuyAndSellStockII",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.BitwiseANDofNumbers",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.BitwiseANDofNumbers",
        "peekOfCode": "class Solution:\n    def rangeBitwiseAnd(self, m: int, n: int) -> int:\n        ans = m\n        if not m==0:\n            x = math.log2(m)\n            x = int(x)+1\n            x = 2**x\n        else:\n            return 0\n        if(n>=x):",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.BitwiseANDofNumbers",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.BSTtoGST",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.BSTtoGST",
        "peekOfCode": "class Solution:\n    def convertBST(self, root: TreeNode) -> TreeNode:\n        self.ans = 0\n        def add(node):\n            if not node:\n                return\n            add(node.right)\n            self.ans += node.val\n            node.val = self.ans\n            add(node.left)",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.BSTtoGST",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.BTInOrderTraversal",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.BTInOrderTraversal",
        "peekOfCode": "class Solution:\n    def inorderTraversal(self, root: TreeNode) -> List[int]:\n        io = []\n        if(root==None):\n            return []\n        def inorder(x):\n            if(x.left!=None):\n                inorder(x.left)\n            io.append(int(x.val))\n            if(x.right!=None):",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.BTInOrderTraversal",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.BTInOrderTraversal",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.BTInOrderTraversal",
        "peekOfCode": "class Solution:\n    def inorderTraversal(self, root: TreeNode) -> List[int]:\n        if(root==None):\n            return []\n        stack = []\n        io = []\n        c = root\n        while(c!=None or len(stack)!=0):\n            while(c!=None):\n                stack.append(c)",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.BTInOrderTraversal",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.BTPostOrderTraversal",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.BTPostOrderTraversal",
        "peekOfCode": "class Solution:\n    def postorderTraversal(self, root: TreeNode) -> List[int]:\n        if (root==None):\n            return []\n        po = []\n        def postorder(x):\n            if not x:\n                return\n            postorder(x.left)\n            postorder(x.right)",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.BTPostOrderTraversal",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.BTPreOrderTraversal",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.BTPreOrderTraversal",
        "peekOfCode": "class Solution:                \n    def preorderTraversal(self, root: TreeNode) -> List[int]:\n        if(root==None):\n            return []\n        po = []\n        def preorder(x):\n            if x:\n                po.append(x.val)\n                preorder(x.left)\n                preorder(x.right)",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.BTPreOrderTraversal",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.BTPreOrderTraversal",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.BTPreOrderTraversal",
        "peekOfCode": "class Solution:                \n    def preorderTraversal(self, root: TreeNode) -> List[int]:\n        if(root==None):\n            return []\n        stack = []\n        po = []\n        c = root\n        while(c!=None or len(stack)!=0):\n            while(c!=None):\n                stack.append(c)",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.BTPreOrderTraversal",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.CheckIfAStringCanBreakAnotherString",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.CheckIfAStringCanBreakAnotherString",
        "peekOfCode": "class Solution:\n    def count(self, d1, d2):\n        s = 0\n        for i in 'abcdefghijklmnopqrstuvwxyz':\n            s += d1[i] - d2[i]\n            if s < 0:\n                return False\n        return True\n    def checkIfCanBreak(self, s1: str, s2: str) -> bool:\n        d1 = Counter(s1)",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.CheckIfAStringCanBreakAnotherString",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.ContainerWithMostWater",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.ContainerWithMostWater",
        "peekOfCode": "class Solution:\n    def maxArea(self, height: List[int]) -> int:\n        i = 0\n        j = len(height)-1\n        maxarea = 0\n        while(i!=j):\n            a = (j-i)*(min(height[i], height[j]))\n            if(a>maxarea):\n                maxarea = a\n            if(height[i]>height[j]):",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.ContainerWithMostWater",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.ContainsDuplicate",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.ContainsDuplicate",
        "peekOfCode": "class Solution:\n    def containsDuplicate(self, nums: List[int]) -> bool:\n        return not len(nums) == len(set(nums))",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.ContainsDuplicate",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.ContiguousArray",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.ContiguousArray",
        "peekOfCode": "class Solution:\n    def findMaxLength(self, nums: List[int]) -> int:\n        dic = { 0:-1 }\n        ps = 0\n        max_length = 0\n        for idx, number in enumerate(nums):\n            if number:\n                ps += 1\n            else:\n                ps -= 1",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.ContiguousArray",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.CountCompleteTreeNode",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.CountCompleteTreeNode",
        "peekOfCode": "class Solution:\n    def countNodes(self, root: TreeNode) -> int:\n        if not root:\n            return 0\n        self.c = 0\n        def count(node):\n            if node:\n                if node.left:\n                    count(node.left)\n                if node.right:",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.CountCompleteTreeNode",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.CountingBits",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.CountingBits",
        "peekOfCode": "class Solution:\n    def countBits(self, num: int) -> List[int]:\n        ans = [0]\n        offset = 1\n        for i in range(1, num+1):\n            if(offset*2 == i):\n                offset = i\n            ans.append(ans[i-offset]+1)\n        return ans",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.CountingBits",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.CountingElements",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.CountingElements",
        "peekOfCode": "class Solution:\n    def countElements(self, arr: List[int]) -> int:\n        s = set()\n        s = set(arr)\n        c = 0\n        for i in range(len(arr)):\n            if(arr[i]+1 in s):\n                c += 1\n        return c",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.CountingElements",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.CourseSchedule",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.CourseSchedule",
        "peekOfCode": "class Solution:\n    def canFinish(self, numCourses, prerequisites) -> bool:\n        adjList = [[] for _ in range(numCourses)]\n        inDegree = [0 for _ in range(numCourses)]\n        queue = deque()\n        visited = 0\n        for i in range(len(prerequisites)):\n            adjList[prerequisites[i][0]].append(prerequisites[i][1])\n        for i in range(numCourses):\n            for j in adjList[i]:",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.CourseSchedule",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.DeleteColumnsToMakeSorted",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.DeleteColumnsToMakeSorted",
        "peekOfCode": "class Solution:\n    def minDeletionSize(self, A: List[str]) -> int:\n        s = 0\n        for col in zip(*A):\n            if any(col[i] > col[i+1] for i in range(len(col)-1)):\n                s += 1\n        return s",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.DeleteColumnsToMakeSorted",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.DeleteNodeInABST",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.DeleteNodeInABST",
        "peekOfCode": "class Solution:\n    def deleteNode(self, root, key):\n        if not root:\n            return\n        if key > root.val:\n            root.right = self.deleteNode(root.right, key)\n        elif key < root.val:\n            root.left = self.deleteNode(root.left, key)\n        else:\n            if not root.left:",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.DeleteNodeInABST",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.DeleteNodeInALinkedList",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.DeleteNodeInALinkedList",
        "peekOfCode": "class Solution:\n    def deleteNode(self, node):\n        node.val = node.next.val\n        node.next = node.next.next",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.DeleteNodeInALinkedList",
        "documentation": {}
    },
    {
        "label": "MyCircularDeque",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.DesignCircularDeque",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.DesignCircularDeque",
        "peekOfCode": "class MyCircularDeque:\n    def __init__(self, k: int):\n        \"\"\"\n        Initialize your data structure here. Set the size of the deque to be k.\n        \"\"\"\n        self.maxsize = k\n        self.size = 0\n        self.decq = [0]*k\n        self.front = self.rear = -1\n    def insertFront(self, value: int) -> bool:",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.DesignCircularDeque",
        "documentation": {}
    },
    {
        "label": "MyCircularDeque",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.DesignCircularDeque",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.DesignCircularDeque",
        "peekOfCode": "class MyCircularDeque:\n    def __init__(self, k: int):\n        \"\"\"\n        Initialize your data structure here. Set the size of the deque to be k.\n        \"\"\"\n        self.decq = []\n        self.maxsize = k\n    def insertFront(self, value: int) -> bool:\n        \"\"\"\n        Adds an item at the front of Deque. Return true if the operation is successful.",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.DesignCircularDeque",
        "documentation": {}
    },
    {
        "label": "MyCircularQueue",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.DesignCircularQueue",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.DesignCircularQueue",
        "peekOfCode": "class MyCircularQueue:\n    def __init__(self, k: int):\n        self.size = 0\n        self.maxsize = k\n        self.cq = [0]*k   \n        self.front = self.rear = -1\n    def enQueue(self, value: int) -> bool:\n        if self.size == self.maxsize:\n            return False\n        else:",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.DesignCircularQueue",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.DiameterOfBinaryTree",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.DiameterOfBinaryTree",
        "peekOfCode": "class Solution:\n    def diameterOfBinaryTree(self, root: TreeNode) -> int:\n        self.depth = 1\n        def findDepth(first):\n            if not first:\n                return 0\n            ld = findDepth(first.left)\n            rd = findDepth(first.right)\n            self.depth = max(self.depth, ld+rd+1)\n            return max(ld,rd) + 1",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.DiameterOfBinaryTree",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.FactorialTrailingZeros",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.FactorialTrailingZeros",
        "peekOfCode": "class Solution:\n    def trailingZeroes(self, n: int) -> int:\n        count = 0\n        m = 5\n        while (n/m >= 1):\n            count += int(n/m)\n            m *= 5\n        return count",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.FactorialTrailingZeros",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.Find-Botton-Left-Tree-Value",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.Find-Botton-Left-Tree-Value",
        "peekOfCode": "class Solution:\n    def findBottomLeftValue(self, root: TreeNode) -> int:\n        queue = deque([root])\n        visited = set()\n        while queue:\n            size = len(queue)\n            leftmost = math.inf\n            for i in range(size):\n                node = queue.popleft()\n                if leftmost == math.inf:",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.Find-Botton-Left-Tree-Value",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.FindDuplicateSubTrees",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.FindDuplicateSubTrees",
        "peekOfCode": "class Solution:\n    def findDuplicateSubtrees(self, root: TreeNode) -> List[TreeNode]:\n        tree = collections.defaultdict()\n        tree.default_factory = tree.__len__\n        c = collections.Counter()\n        anslist = []\n        def find(node):\n            if node:\n                tid = tree[node.val, find(node.left), find(node.right)]\n                c[tid] += 1",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.FindDuplicateSubTrees",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.FirstUniqueCharacterInAString",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.FirstUniqueCharacterInAString",
        "peekOfCode": "class Solution:\n    def firstUniqChar(self, s: str) -> int:\n        c = Counter(s)\n        for i in range(len(s)):\n            if c[s[i]] == 1:\n                return i\n        return -1",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.FirstUniqueCharacterInAString",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.FizzBuzz",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.FizzBuzz",
        "peekOfCode": "class Solution:\n    def fizzBuzz(self, n: int) -> List[str]:\n        res = []\n        for i in range(1, n+1):\n            if i % 3 == 0 and i % 5 == 0:\n                res.append(\"FizzBuzz\")\n            elif i % 3 == 0:\n                res.append(\"Fizz\")\n            elif i % 5 == 0:\n                res.append(\"Buzz\")",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.FizzBuzz",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.GroupAnagrams",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.GroupAnagrams",
        "peekOfCode": "class Solution:\n    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:\n        word = collections.defaultdict(list)\n        for s in strs:\n            word[tuple(sorted(s))].append(s)\n        return word.values()",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.GroupAnagrams",
        "documentation": {}
    },
    {
        "label": "MyQueue",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.ImplementQueueUsingStacks",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.ImplementQueueUsingStacks",
        "peekOfCode": "class MyQueue:\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.s1 = []\n        self.s2 = []\n    def push(self, x: int) -> None:\n        \"\"\"\n        Push element x to the back of queue.",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.ImplementQueueUsingStacks",
        "documentation": {}
    },
    {
        "label": "MyStack",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.ImplementStackUsingQueues",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.ImplementStackUsingQueues",
        "peekOfCode": "class MyStack:\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.q1 = Queue(maxsize=0)\n        self.q2 = Queue(maxsize=0)\n    def push(self, x: int) -> None:\n        \"\"\"\n        Push element x onto stack.",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.ImplementStackUsingQueues",
        "documentation": {}
    },
    {
        "label": "MyStack",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.ImplementStackUsingQueues",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.ImplementStackUsingQueues",
        "peekOfCode": "class MyStack:\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.q = deque()\n    def push(self, x: int) -> None:\n        \"\"\"\n        Push element x onto stack.\n        \"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.ImplementStackUsingQueues",
        "documentation": {}
    },
    {
        "label": "CustomStack",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.IncrementStack",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.IncrementStack",
        "peekOfCode": "class CustomStack:\n    def __init__(self, maxSize: int):\n        self.stack = []\n        self.maxSize = maxSize\n    def push(self, x: int) -> None:\n        if(len(self.stack) < self.maxSize):\n            self.stack.append(x)\n    def pop(self) -> int:\n        if(len(self.stack)!=0):\n            return self.stack.pop()",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.IncrementStack",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.IntegerReplacement",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.IntegerReplacement",
        "peekOfCode": "class Solution:\n    def integerReplacement(self, n: int) -> int:\n        s = 0\n        while(n!=1):\n            if(n%2==0):\n                n //= 2\n                s += 1\n                continue\n            if(n==3):\n                return s+2",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.IntegerReplacement",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.IntegerToRoman",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.IntegerToRoman",
        "peekOfCode": "class Solution:\n    def intToRoman(self, num: int) -> str:\n        dic = { 1000:'M', 900:'CM', 500:'D', 400:'CD', 100:'C', 90:'XC', 50:'L', 40:'XL', 10:'X', 9:'IX', 5:'V', 4:'IV', 1:'I' }\n        ans = ''\n        for i in dic:\n            while num>=i:\n                ans += dic[i]\n                num -= i\n        return ans",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.IntegerToRoman",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.IntersectionOfTwoArraysII",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.IntersectionOfTwoArraysII",
        "peekOfCode": "class Solution:\n    def intersect(self, nums1: List[int], nums2: List[int]) -> List[int]:\n        if len(nums1) > len(nums2):\n            i = 0\n            while i < len(nums2):\n                if nums2[i] in set(nums1):\n                    nums1.remove(nums2[i])\n                    i += 1 \n                else:\n                    nums2.remove(nums2[i])",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.IntersectionOfTwoArraysII",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.IntersectionOfTwoArraysII",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.IntersectionOfTwoArraysII",
        "peekOfCode": "class Solution:\n    def intersect(self, nums1: List[int], nums2: List[int]) -> List[int]:\n        return list((Counter(nums1)&Counter(nums2)).elements())",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.IntersectionOfTwoArraysII",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.InvertBinaryTree",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.InvertBinaryTree",
        "peekOfCode": "class Solution:\n    def invertTree(self, root: TreeNode) -> TreeNode:\n        def invert(node):\n            if node.left:\n                invert(node.left)\n            if node.right:\n                invert(node.right)\n            temp = node.left\n            node.left = node.right\n            node.right = temp",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.InvertBinaryTree",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.IsSubsequence",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.IsSubsequence",
        "peekOfCode": "class Solution: \n    def isSubsequence(self, s: str, t: str) -> bool:\n        if len(s) == 0:\n            return True\n        if len(t) == 0:\n            return False\n        sp = 0 \n        for tc in t:\n            if s[sp] == tc:\n                sp += 1",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.IsSubsequence",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.LastStoneWeight",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.LastStoneWeight",
        "peekOfCode": "class Solution:\n    def lastStoneWeight(self, stones: List[int]) -> int:\n        while(len(stones)!=1 and len(stones)!=0):\n            stones = sorted(stones)\n            t = abs(stones[-1]-stones[-2])\n            if(t!=0):\n                stones.pop()\n                stones[-1] = t\n            else:\n                stones.pop()",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.LastStoneWeight",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.Lemonade-Change",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.Lemonade-Change",
        "peekOfCode": "class Solution:\n    def lemonadeChange(self, bills: List[int]) -> bool:\n        denom = {\n            5: 0,\n            10: 0,\n            20: 0\n        }\n        for i in range(len(bills)):\n            denom[bills[i]] += 1\n            if bills[i] > 5:",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.Lemonade-Change",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.LongestCommonPrefix",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.LongestCommonPrefix",
        "peekOfCode": "class Solution:\n    def longestCommonPrefix(self, strs: List[str]) -> str:\n        x = 0\n        for i in zip(*strs):\n            r = all(a == i[0] for a in i)\n            if r:\n                x += 1\n            else:\n                break\n        return strs[0][0:x] if x else ''",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.LongestCommonPrefix",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.MaximizeSumOfArrayAfterKNegations",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.MaximizeSumOfArrayAfterKNegations",
        "peekOfCode": "class Solution:\n    def largestSumAfterKNegations(self, A: List[int], K: int) -> int:\n        A = sorted(A)\n        for i in range(len(A)):\n            if A[i] < 0:\n                A[i] = -A[i]\n                K -= 1\n            elif A[i] >= 0:\n                if K % 2 == 0:\n                    break",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.MaximizeSumOfArrayAfterKNegations",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.MergeTwoSortedLists",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.MergeTwoSortedLists",
        "peekOfCode": "class Solution:\n    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:\n        dummy = l3 = ListNode(0)\n        while l1 and l2:\n            if l1.val > l2.val:\n                l3.next = ListNode(l2.val)\n                l3 = l3.next\n                l2 = l2.next\n            else:\n                l3.next = ListNode(l1.val)",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.MergeTwoSortedLists",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.MergeTwoSortedLists",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.MergeTwoSortedLists",
        "peekOfCode": "class Solution:\n    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:\n        head = l3 = ListNode()\n        while l1 and l2:\n            if l1.val < l2.val:\n                l3.next = ListNode(l1.val)\n                l1 = l1.next\n                l3 = l3.next\n            else:\n                l3.next = ListNode(l2.val)",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.MergeTwoSortedLists",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.MiddleOfTheLinkedList",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.MiddleOfTheLinkedList",
        "peekOfCode": "class Solution:\n    def middleNode(self, head: ListNode) -> ListNode:\n        A = [head]\n        while A[-1].next:\n            A.append(A[-1].next)\n        return A[len(A)//2]\n# Solution using Slow and Fast Pointers\nclass Solution:\n    def middleNode(self, head: ListNode) -> ListNode:\n        slowPointer = head",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.MiddleOfTheLinkedList",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.MiddleOfTheLinkedList",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.MiddleOfTheLinkedList",
        "peekOfCode": "class Solution:\n    def middleNode(self, head: ListNode) -> ListNode:\n        slowPointer = head\n        fastPointer = head\n        while(fastPointer and fastPointer.next):\n            slowPointer = slowPointer.next\n            fastPointer = fastPointer.next.next\n        return slowPointer",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.MiddleOfTheLinkedList",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.MinimumSubsequenceInNonIncreasingOrder",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.MinimumSubsequenceInNonIncreasingOrder",
        "peekOfCode": "class Solution:\n    def minSubsequence(self, nums: List[int]) -> List[int]:\n        nums = sorted(nums)[::-1]\n        x = sum(nums)\n        s = 0\n        if len(nums) == 1:\n            return nums\n        for i in range(len(nums)+1):\n            s += nums[i]\n            if s > x-s:",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.MinimumSubsequenceInNonIncreasingOrder",
        "documentation": {}
    },
    {
        "label": "MinStack",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.MinStack",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.MinStack",
        "peekOfCode": "class MinStack:\n    def __init__(self):\n        \"\"\"\n        initialize your data structure here.\n        \"\"\"\n        self.stack = []\n        self.min = math.inf\n    def push(self, x: int) -> None:\n        self.x = x\n        self.stack.append(x)",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.MinStack",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.MonotonicArray",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.MonotonicArray",
        "peekOfCode": "class Solution:\n    def isMonotonic(self, A: List[int]) -> bool:\n        inc = True\n        dec = True\n        for i in range(0, len(A)-1):\n            if(A[i] > A[i+1]):\n                inc = False\n            if(A[i] < A[i+1]):\n                dec = False\n        return inc or dec",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.MonotonicArray",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.MoveZeroes",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.MoveZeroes",
        "peekOfCode": "class Solution:\n    def moveZeroes(self, nums: List[int]) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        \"\"\"\n        t = nums.count(0)\n        nzpos = 0\n        if(t==0):\n            return nums\n        for i in range(0, len(nums)):",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.MoveZeroes",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.Numberof1Bits",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.Numberof1Bits",
        "peekOfCode": "class Solution:\n    def hammingWeight(self, n: int) -> int:\n        return (bin(n).count('1'))",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.Numberof1Bits",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.NumberOfIslands",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.NumberOfIslands",
        "peekOfCode": "class Solution:\n    def numIslands(self, grid) -> int:\n        if not grid:\n            return 0\n        r = len(grid)\n        c = len(grid[0])\n        queue = deque()\n        islands = 0\n        for i in range(r):\n            for j in range(c):",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.NumberOfIslands",
        "documentation": {}
    },
    {
        "label": "RecentCounter",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.NumberOfRecentCalls",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.NumberOfRecentCalls",
        "peekOfCode": "class RecentCounter:\n    def __init__(self):\n        self.q = collections.deque()\n    def ping(self, t: int) -> int:\n        self.q.append(t)\n        while self.q[0] < t-3000:\n            self.q.popleft()\n        return len(self.q)",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.NumberOfRecentCalls",
        "documentation": {}
    },
    {
        "label": "Solution1",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.PalindromeLinkedList",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.PalindromeLinkedList",
        "peekOfCode": "class Solution1:\n    def isPalindrome(self, head: ListNode) -> bool:\n        temp = head\n        stack = []\n        l = 0\n        while temp:\n            l += 1\n            temp = temp.next\n        temp = head\n        for i in range(0, l//2):",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.PalindromeLinkedList",
        "documentation": {}
    },
    {
        "label": "Solution2",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.PalindromeLinkedList",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.PalindromeLinkedList",
        "peekOfCode": "class Solution2:\n    def isPalindrome(self, head: ListNode) -> bool:\n        el = []\n        while head:\n            el.append(head.val)\n            head = head.next\n        for i in range(0, len(el)//2):\n            if not el[i] == el[-i-1]:\n                return False\n        return True",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.PalindromeLinkedList",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.PalindromeNumber",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.PalindromeNumber",
        "peekOfCode": "class Solution:\n    def isPalindrome(self, x: int) -> bool:\n        a = []\n        x = str(x)\n        x = list(x)\n        a = x[::-1]\n        if (str(a)==str(x)):\n            return True\n        else:\n            return False",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.PalindromeNumber",
        "documentation": {}
    },
    {
        "label": "Solution1",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.Perfect-Squares",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.Perfect-Squares",
        "peekOfCode": "class Solution1:\n    def numSquares(self, n) -> int:\n        if n <= 3:\n            return n\n        dp = [0 for _ in range(n+1)]\n        dp[1], dp[2], dp[3] = 1, 2, 3\n        for i in range(4, len(dp)):\n            dp[i] = i\n            j = 1\n            while j*j <= i:",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.Perfect-Squares",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.Perfect-Squares",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.Perfect-Squares",
        "peekOfCode": "class Solution:\n    def numSquares(self, n: int) -> int:\n        if ceil(sqrt(n)) == floor(sqrt(n)):\n            return 1\n        while n % 4 == 0:\n            n /= 4\n        if n % 8 == 7:\n            return 4\n        j = 1\n        while j*j <= n:",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.Perfect-Squares",
        "documentation": {}
    },
    {
        "label": "N",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.Perfect-Squares",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.Perfect-Squares",
        "peekOfCode": "N = a^2 + b^2 + c^2 + d^2\nTheorem: A natural number can be represented as sum of 3 squares of integers.\nN = a^2 + b^2 + c^2\nif and only if the N is not of the form,\nN = 4^a (8b + 7) -- (1)\nLOGIC: \n- if N is a perfect square, return 1\n- if N is of form (1),\n    - keep dividing by 4\n    - divide by 8",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.Perfect-Squares",
        "documentation": {}
    },
    {
        "label": "N",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.Perfect-Squares",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.Perfect-Squares",
        "peekOfCode": "N = a^2 + b^2 + c^2\nif and only if the N is not of the form,\nN = 4^a (8b + 7) -- (1)\nLOGIC: \n- if N is a perfect square, return 1\n- if N is of form (1),\n    - keep dividing by 4\n    - divide by 8\n        - if rem == 7:\n            return 4",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.Perfect-Squares",
        "documentation": {}
    },
    {
        "label": "N",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.Perfect-Squares",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.Perfect-Squares",
        "peekOfCode": "N = 4^a (8b + 7) -- (1)\nLOGIC: \n- if N is a perfect square, return 1\n- if N is of form (1),\n    - keep dividing by 4\n    - divide by 8\n        - if rem == 7:\n            return 4\n- check if N can be split into two perfect squares. If yes, return 2\n- if all fails, return 3",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.Perfect-Squares",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.PerformStringShifts",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.PerformStringShifts",
        "peekOfCode": "class Solution:\n    def stringShift(self, s: str, shift: List[List[int]]) -> str:\n        amount = 0\n        for i in range(len(shift)):\n            if(shift[i][0]==0):\n                amount += (-1)*shift[i][1]\n            else:\n                amount += 1*shift[i][1]\n        print(amount)\n        if amount == 0:",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.PerformStringShifts",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.PlusOne",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.PlusOne",
        "peekOfCode": "class Solution:\n    def plusOne(self, digits: List[int]) -> List[int]:\n        carry = 0\n        for i in range(len(digits)-1, -1, -1):\n            if digits[i] != 9:\n                digits[i] += 1\n                break\n            else:\n                digits[i] = 0\n                if i == 0:",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.PlusOne",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.PowerOfThree",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.PowerOfThree",
        "peekOfCode": "class Solution:\n    def isPowerOfThree(self, n: int) -> bool:\n        if n < 1:\n            return False\n        if n == 1:\n            return True\n        if sum(list(map(int, str(n)))) % 3 != 0:\n            return False\n        else:\n            while n > 1:",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.PowerOfThree",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.PowerOfThree",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.PowerOfThree",
        "peekOfCode": "class Solution:\n    def isPowerOfThree(self, n: int) -> bool:\n        if n < 1:\n            return False\n        else:\n            return 1162261467 % n == 0",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.PowerOfThree",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.PowerOfTwo",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.PowerOfTwo",
        "peekOfCode": "class Solution:\n    def isPowerOfTwo(self, n: int) -> bool:\n        if n == 1:\n            return True\n        if n == 0:\n            return False\n        while n % 2 == 0:\n            n = n / 2\n        if n == 1:\n            return True",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.PowerOfTwo",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.PowerOfTwo",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.PowerOfTwo",
        "peekOfCode": "class Solution:\n    def isPowerOfTwo(self, n: int) -> bool:\n        return n > 0 and bin(n).count('1') == 1",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.PowerOfTwo",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.QueueReconstructionByHeight",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.QueueReconstructionByHeight",
        "peekOfCode": "class Solution:\n    def reconstructQueue(self, people: List[List[int]]) -> List[List[int]]:\n        people.sort(key = lambda x: (-x[0], x[1]))\n        rec = []\n        for p in people:\n            rec.insert(p[1], p)\n        return rec",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.QueueReconstructionByHeight",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.RandomPickWithWeight",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.RandomPickWithWeight",
        "peekOfCode": "class Solution:\n    def __init__(self, w: List[int]):\n        self.w = w\n    def pickIndex(self) -> int:\n        return choices(range(len(self.w)), self.w)[0]\n# Your Solution object will be instantiated and called as such:\n# obj = Solution(w)\n# param_1 = obj.pickIndex()",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.RandomPickWithWeight",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.RemoveDuplicatesFromSortedArray",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.RemoveDuplicatesFromSortedArray",
        "peekOfCode": "class Solution:\n    def removeDuplicates(self, nums: List[int]) -> int:\n        p = 0\n        while p < len(nums)-1:\n            if nums[p] == nums[p+1]:\n                nums.pop(p+1)\n                continue\n            p += 1\n        return len(nums)",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.RemoveDuplicatesFromSortedArray",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.RemoveLinkedListElements",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.RemoveLinkedListElements",
        "peekOfCode": "class Solution:\n    def removeElements(self, head: ListNode, val: int) -> ListNode:\n        pointer = ListNode(0)\n        pointer.next = head\n        tempnode = pointer\n        while tempnode.next != None:\n            if tempnode.next.val == val:\n                tempnode.next = tempnode.next.next\n            else:\n                tempnode = tempnode.next",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.RemoveLinkedListElements",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.RemoveNthNodeFromEndOfList",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.RemoveNthNodeFromEndOfList",
        "peekOfCode": "class Solution:\n    def removeNthFromEnd(self, head: ListNode, n: int) -> ListNode:\n        tail = head\n        length = 1\n        while tail.next:\n            length += 1\n            tail = tail.next\n        if(length==1):\n            return None\n        if(length==n):",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.RemoveNthNodeFromEndOfList",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.RemoveNthNodeFromEndOfList",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.RemoveNthNodeFromEndOfList",
        "peekOfCode": "class Solution:\n    def removeNthFromEnd(self, head: ListNode, n: int) -> ListNode:\n        dummy = fast = slow = ListNode()\n        dummy.next = head\n        if not head.next:\n            return None \n        for _ in range(n+1):\n            fast = fast.next\n        while fast:\n            fast = fast.next",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.RemoveNthNodeFromEndOfList",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.Reorganize-String",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.Reorganize-String",
        "peekOfCode": "class Solution:\n    def reorganizeString(self, S: str) -> str:\n        l = len(S)\n        A = []\n        for k, v in sorted((S.count(x), x) for x in set(S)):\n            if k > (l+1) / 2 : \n                return \"\"\n            A.extend(k * v)\n        # print(A)\n        ans = [None] * l",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.Reorganize-String",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.RepeatedDNASequences",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.RepeatedDNASequences",
        "peekOfCode": "class Solution:\n    def findRepeatedDnaSequences(self, s: str) -> List[str]:\n        dic = {}\n        ans = []\n        for i in range(0, len(s)-9):\n            if s[i:i+10] not in dic:\n                dic[s[i:i+10]] = 1\n            else:\n                dic[s[i:i+10]] += 1\n        for k, v in dic.items():",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.RepeatedDNASequences",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.ReverseBits",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.ReverseBits",
        "peekOfCode": "class Solution:\n    def reverseBits(self, n: int) -> int:\n        s = str(bin(n))\n        s = s[2:]\n        s = '0'*(32-len(s)) + s\n        s = int(s[::-1], 2)\n        return s",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.ReverseBits",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.ReverseInteger",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.ReverseInteger",
        "peekOfCode": "class Solution:\n    def reverse(self, x: int) -> int:\n        x = str(x)\n        if (x[0] == '-'):\n            a = x[1:2147483648:1]\n            a = a[::-1]\n            if (int(a)>2147483648):\n                return 0\n            return int(\"-\"+a)\n        else:",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.ReverseInteger",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.ReverseLinkedList",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.ReverseLinkedList",
        "peekOfCode": "class Solution:\n    def reverseList(self, head: ListNode) -> ListNode:\n        temp = head\n        prev = None\n        while(temp!=None):\n            next = temp.next\n            temp.next = prev\n            prev = temp\n            temp = next            \n        return prev",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.ReverseLinkedList",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.ReverseString",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.ReverseString",
        "peekOfCode": "class Solution:\n    def reverseString(self, s: List[str]) -> None:\n        \"\"\"\n        Do not return anything, modify s in-place instead.\n        \"\"\"\n        head = 0\n        temp = ''\n        tail = len(s) - 1\n        while head < tail:\n            temp = s[head]",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.ReverseString",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.ReverseSubstringBetweenEachPairOfParantheses",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.ReverseSubstringBetweenEachPairOfParantheses",
        "peekOfCode": "class Solution:\n    def reverseParentheses(self, s: str) -> str:\n        stack = []\n        s = list(s)\n        for i in range(len(s)):\n            if s[i] == '(':\n                stack.append(i)\n                continue\n            if s[i] == ')':\n                idx = stack.pop()",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.ReverseSubstringBetweenEachPairOfParantheses",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.RomanToInteger",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.RomanToInteger",
        "peekOfCode": "class Solution:\n    def romanToInt(self, s: str) -> int:\n        ans = 0\n        prev = ''\n        for i in range(len(s)):\n            if(s[i]=='M'):\n                if(prev=='C'):\n                    ans += 800\n                    prev = 'M'\n                    continue",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.RomanToInteger",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.RotateArray",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.RotateArray",
        "peekOfCode": "class Solution:\n    def rotate(self, nums: List[int], k: int) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        \"\"\"\n        x = len(nums)\n        A = [0]*x\n        for i in range(0, x):\n            A[(i+k)%x] = nums[i]\n        for i in range(0, x):",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.RotateArray",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.RotateImage",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.RotateImage",
        "peekOfCode": "class Solution:\n    def rotate(self, matrix: List[List[int]]) -> None:\n        \"\"\"\n        Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        n = len(matrix)\n        for x in zip(*matrix):\n            matrix.pop(0)\n            matrix.append(x[::-1])",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.RotateImage",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.RotateList",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.RotateList",
        "peekOfCode": "class Solution:\n    def rotateRight(self, head: ListNode, k: int) -> ListNode:\n        if not head:\n            return None\n        if not k==0:        \n            tail = head\n            length = 1\n            while(tail.next):\n                length += 1\n                tail = tail.next",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.RotateList",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.SearchInsertPosition",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.SearchInsertPosition",
        "peekOfCode": "class Solution:\n    def searchInsert(self, nums: List[int], target: int) -> int:\n        def binary(nums, low, high, target):\n            if low <= high:\n                mid = low + (high - low) // 2\n                if nums[mid] == target:\n                    return mid\n                elif nums[mid] > target:\n                    return binary(nums, low, mid-1, target)\n                else:",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.SearchInsertPosition",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.SearchInsertPosition",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.SearchInsertPosition",
        "peekOfCode": "class Solution:\n    def searchInsert(self, nums: List[int], target: int) -> int:\n        low = 0\n        high = len(nums) - 1\n        while low <= high:\n            mid = (low + high) // 2\n            if nums[mid] == target:\n                return mid\n            elif nums[mid] > target:\n                high = mid - 1",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.SearchInsertPosition",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.ShuffleAnArray",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.ShuffleAnArray",
        "peekOfCode": "class Solution:\n    def __init__(self, nums: List[int]):\n        self.nums = nums\n        shuf = self.nums.copy()\n        self.shuf = shuf\n    def reset(self) -> List[int]:\n        \"\"\"\n        Resets the array to its original configuration and return it.\n        \"\"\"\n        self.shuf = self.nums.copy()",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.ShuffleAnArray",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.SimplifyPath",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.SimplifyPath",
        "peekOfCode": "class Solution:\n    def simplifyPath(self, path: str) -> str:\n        if(len(path)==0 or path==None or path==''):\n            return '/'\n        p = path.split('/')\n        stack = []\n        for item in p:\n            if (item=='..'):\n                if(stack):\n                    stack.pop()",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.SimplifyPath",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.SingleNumberII",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.SingleNumberII",
        "peekOfCode": "class Solution:\n    def singleNumber(self, nums: List[int]) -> int:\n        return int(((sum(set(nums))*3) - sum(nums))/2)",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.SingleNumberII",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.SingleNumberIII",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.SingleNumberIII",
        "peekOfCode": "class Solution:\n    def singleNumber(self, nums: List[int]) -> List[int]:\n        ans = []\n        for i in set(nums):\n            if nums.count(i)==1:\n                ans.append(i)\n                if(len(ans)==2):\n                    return ans\n        return ans",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.SingleNumberIII",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.SortColors",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.SortColors",
        "peekOfCode": "class Solution:\n    def sortColors(self, nums: List[int]) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        \"\"\"\n        n = Counter(nums)\n        nums.clear()\n        for v in range(3):\n            for i in range(n[v]):\n                nums.append(v)",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.SortColors",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.SplitAStringInBalancedStrings",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.SplitAStringInBalancedStrings",
        "peekOfCode": "class Solution:\n    def balancedStringSplit(self, s: str) -> int:\n        c = 0\n        rc = 0\n        lc = 0\n        for i in range(len(s)):\n            if s[i] == 'R':\n                rc += 1\n            if s[i] == 'L':\n                lc += 1",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.SplitAStringInBalancedStrings",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.StringToInteger",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.StringToInteger",
        "peekOfCode": "class Solution:\n    def myAtoi(self, str: str) -> int:\n        if len(str)==0:\n            return 0\n        str = list(str.strip())\n        if len(str)==0:\n            return 0\n        if(str[0]=='-'):\n            s = -1\n        else:",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.StringToInteger",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.TaskScheduler",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.TaskScheduler",
        "peekOfCode": "class Solution:\n    def leastInterval(self, tasks: List[str], n: int) -> int:\n        tasksDict = collections.Counter(tasks)\n        heap = []\n        c = 0\n        for k, v in tasksDict.items():\n            heappush(heap, (-v,k))\n        while heap:\n            i = 0\n            stack = []",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.TaskScheduler",
        "documentation": {}
    },
    {
        "label": "NaiveSolution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.TrappingRainWater",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.TrappingRainWater",
        "peekOfCode": "class NaiveSolution:\n    def trap(self, height) -> int:\n        res = 0\n        n = len(height)\n        for i in range(1, n-1):\n            left = height[i]\n            for j in range(i):\n                left = max(left, height[j])\n            right = height[i]\n            for j in range(i+1, n):",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.TrappingRainWater",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.TrappingRainWater",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.TrappingRainWater",
        "peekOfCode": "class Solution:\n    def trap(self, height: List[int]) -> int:\n        if height == []:\n            return 0\n        n = len(height)\n        res = 0\n        left = [0 for _ in range(n)]\n        right = [0 for _ in range(n)]\n        left[0] = height[0]\n        right[n-1] = height[n-1]",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.TrappingRainWater",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.Triangle",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.Triangle",
        "peekOfCode": "class Solution:\n    def minimumTotal(self, triangle: List[List[int]]) -> int:\n        dp = [0 for _ in range(len(triangle)+1)]\n        for r in triangle[::-1]:\n            for i in range(len(r)):\n                dp[i] = r[i] + min(dp[i], dp[i+1])      \n        return dp[0]",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.Triangle",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.TwoCityScheduling",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.TwoCityScheduling",
        "peekOfCode": "class Solution:\n    def twoCitySchedCost(self, costs: List[List[int]]) -> int:\n        costs = sorted(costs, key = lambda x: x[0] - x[1])\n        return sum(i[0] for i in costs[0:len(costs)//2]) + sum(j[1] for j in costs[len(costs)//2:len(costs)])",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.TwoCityScheduling",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.twoSum",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.twoSum",
        "peekOfCode": "class Solution:\n    def twoSum(self, nums, target):\n        for i in range(len(nums)):\n            for j in range(i+1,len(nums)):\n                if(nums[i]+nums[j]==target):\n                    return i, j\n# O(n) Solution\nclass Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        dict = { v:k for k, v in enumerate(nums) }",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.twoSum",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.twoSum",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.twoSum",
        "peekOfCode": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        dict = { v:k for k, v in enumerate(nums) }\n        for i in range(len(nums)):\n            if target - nums[i] in dict and nums.index(target - nums[i]) != i:\n                return i, nums.index(target-nums[i])",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.twoSum",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.UniquePathsII",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.UniquePathsII",
        "peekOfCode": "class Solution:\n    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:\n        m = len(obstacleGrid)\n        n = len(obstacleGrid[0])\n        if obstacleGrid[0][0] == 1:\n            return 0\n        obstacleGrid[0][0] = 1\n        for i in range(1, m):\n            obstacleGrid[i][0] = int(obstacleGrid[i][0] == 0 and obstacleGrid[i-1][0] == 1)\n        for i in range(1, n):",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.UniquePathsII",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.ValidAnagram",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.ValidAnagram",
        "peekOfCode": "class Solution:\n    def isAnagram(self, s: str, t: str) -> bool:\n        return Counter(s) == Counter(t)",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.ValidAnagram",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.ValidPalindrome",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.ValidPalindrome",
        "peekOfCode": "class Solution:\n    def isPalindrome(self, s: str) -> bool:\n        s = ''.join(a for a in s if a.isalnum()).lower()\n        return s == s[::-1]",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.ValidPalindrome",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.ValidParanthesisString",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.ValidParanthesisString",
        "peekOfCode": "class Solution:\n    def checkValidString(self, s: str) -> bool:\n        lb = 0\n        rb = 0\n        for i in s:\n            if(i=='(' or i=='*'):\n                lb += 1\n            else:\n                lb -= 1\n            if lb < 0:",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.ValidParanthesisString",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.LeetCode.Walking-Robot-Simulation",
        "description": "python-gitbook-master..gitbook.assets.LeetCode.Walking-Robot-Simulation",
        "peekOfCode": "class Solution(object):\n    def robotSim(self, commands, obstacles):\n        dx = [0, 1, 0, -1]\n        dy = [1, 0, -1, 0]\n        x = y = di = 0\n        obstacleSet = set(map(tuple, obstacles))\n        ans = 0\n        for cmd in commands:\n            if cmd == -2:  #left\n                di = (di - 1) % 4",
        "detail": "python-gitbook-master..gitbook.assets.LeetCode.Walking-Robot-Simulation",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.linked_list.circular_linked_list",
        "description": "python-gitbook-master..gitbook.assets.linked_list.circular_linked_list",
        "peekOfCode": "class Node:\n    def __init__(self, data: Any):\n        self.data = data\n        self.next = None\nclass CircularLinkedList:\n    def __init__(self):\n        self.head = None\n        self.tail = None\n    def __iter__(self):\n        node = self.head",
        "detail": "python-gitbook-master..gitbook.assets.linked_list.circular_linked_list",
        "documentation": {}
    },
    {
        "label": "CircularLinkedList",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.linked_list.circular_linked_list",
        "description": "python-gitbook-master..gitbook.assets.linked_list.circular_linked_list",
        "peekOfCode": "class CircularLinkedList:\n    def __init__(self):\n        self.head = None\n        self.tail = None\n    def __iter__(self):\n        node = self.head\n        while self.head:\n            yield node.data\n            node = node.next\n            if node == self.head:",
        "detail": "python-gitbook-master..gitbook.assets.linked_list.circular_linked_list",
        "documentation": {}
    },
    {
        "label": "test_circular_linked_list",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.linked_list.circular_linked_list",
        "description": "python-gitbook-master..gitbook.assets.linked_list.circular_linked_list",
        "peekOfCode": "def test_circular_linked_list() -> None:\n    \"\"\"\n    >>> test_circular_linked_list()\n    \"\"\"\n    circular_linked_list = CircularLinkedList()\n    assert len(circular_linked_list) == 0\n    assert circular_linked_list.is_empty() is True\n    assert str(circular_linked_list) == \"\"\n    try:\n        circular_linked_list.delete_front()",
        "detail": "python-gitbook-master..gitbook.assets.linked_list.circular_linked_list",
        "documentation": {}
    },
    {
        "label": "_DoublyLinkedBase",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.linked_list.deque_doubly",
        "description": "python-gitbook-master..gitbook.assets.linked_list.deque_doubly",
        "peekOfCode": "class _DoublyLinkedBase:\n    \"\"\"A Private class (to be inherited)\"\"\"\n    class _Node:\n        __slots__ = \"_prev\", \"_data\", \"_next\"\n        def __init__(self, link_p, element, link_n):\n            self._prev = link_p\n            self._data = element\n            self._next = link_n\n        def has_next_and_prev(self):\n            return (",
        "detail": "python-gitbook-master..gitbook.assets.linked_list.deque_doubly",
        "documentation": {}
    },
    {
        "label": "LinkedDeque",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.linked_list.deque_doubly",
        "description": "python-gitbook-master..gitbook.assets.linked_list.deque_doubly",
        "peekOfCode": "class LinkedDeque(_DoublyLinkedBase):\n    def first(self):\n        \"\"\"return first element\n        >>> d = LinkedDeque()\n        >>> d.add_first('A').first()\n        'A'\n        >>> d.add_first('B').first()\n        'B'\n        \"\"\"\n        if self.is_empty():",
        "detail": "python-gitbook-master..gitbook.assets.linked_list.deque_doubly",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.linked_list.doubly_linked_list",
        "description": "python-gitbook-master..gitbook.assets.linked_list.doubly_linked_list",
        "peekOfCode": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.previous = None\n        self.next = None\n    def __str__(self):\n        return f\"{self.data}\"\nclass DoublyLinkedList:\n    def __init__(self):\n        self.head = None",
        "detail": "python-gitbook-master..gitbook.assets.linked_list.doubly_linked_list",
        "documentation": {}
    },
    {
        "label": "DoublyLinkedList",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.linked_list.doubly_linked_list",
        "description": "python-gitbook-master..gitbook.assets.linked_list.doubly_linked_list",
        "peekOfCode": "class DoublyLinkedList:\n    def __init__(self):\n        self.head = None\n        self.tail = None\n    def __iter__(self):\n        \"\"\"\n        >>> linked_list = DoublyLinkedList()\n        >>> linked_list.insert_at_head('b')\n        >>> linked_list.insert_at_head('a')\n        >>> linked_list.insert_at_tail('c')",
        "detail": "python-gitbook-master..gitbook.assets.linked_list.doubly_linked_list",
        "documentation": {}
    },
    {
        "label": "test_doubly_linked_list",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.linked_list.doubly_linked_list",
        "description": "python-gitbook-master..gitbook.assets.linked_list.doubly_linked_list",
        "peekOfCode": "def test_doubly_linked_list() -> None:\n    \"\"\"\n    >>> test_doubly_linked_list()\n    \"\"\"\n    linked_list = DoublyLinkedList()\n    assert linked_list.is_empty() is True\n    assert str(linked_list) == \"\"\n    try:\n        linked_list.delete_head()\n        assert False  # This should not happen.",
        "detail": "python-gitbook-master..gitbook.assets.linked_list.doubly_linked_list",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.linked_list.doubly_linked_list_two",
        "description": "python-gitbook-master..gitbook.assets.linked_list.doubly_linked_list_two",
        "peekOfCode": "class Node:\n    def __init__(self, data: int, previous=None, next_node=None):\n        self.data = data\n        self.previous = previous\n        self.next = next_node\n    def __str__(self) -> str:\n        return f\"{self.data}\"\n    def get_data(self) -> int:\n        return self.data\n    def get_next(self):",
        "detail": "python-gitbook-master..gitbook.assets.linked_list.doubly_linked_list_two",
        "documentation": {}
    },
    {
        "label": "LinkedListIterator",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.linked_list.doubly_linked_list_two",
        "description": "python-gitbook-master..gitbook.assets.linked_list.doubly_linked_list_two",
        "peekOfCode": "class LinkedListIterator:\n    def __init__(self, head):\n        self.current = head\n    def __iter__(self):\n        return self\n    def __next__(self):\n        if not self.current:\n            raise StopIteration\n        else:\n            value = self.current.get_data()",
        "detail": "python-gitbook-master..gitbook.assets.linked_list.doubly_linked_list_two",
        "documentation": {}
    },
    {
        "label": "LinkedList",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.linked_list.doubly_linked_list_two",
        "description": "python-gitbook-master..gitbook.assets.linked_list.doubly_linked_list_two",
        "peekOfCode": "class LinkedList:\n    def __init__(self):\n        self.head = None  # First node in list\n        self.tail = None  # Last node in list\n    def __str__(self):\n        current = self.head\n        nodes = []\n        while current is not None:\n            nodes.append(current.get_data())\n            current = current.get_next()",
        "detail": "python-gitbook-master..gitbook.assets.linked_list.doubly_linked_list_two",
        "documentation": {}
    },
    {
        "label": "create_linked_list",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.linked_list.doubly_linked_list_two",
        "description": "python-gitbook-master..gitbook.assets.linked_list.doubly_linked_list_two",
        "peekOfCode": "def create_linked_list() -> None:\n    \"\"\"\n    >>> new_linked_list = LinkedList()\n    >>> new_linked_list.get_head_data() is None\n    True\n    >>> new_linked_list.get_tail_data() is None\n    True\n    >>> new_linked_list.is_empty()\n    True\n    >>> new_linked_list.insert(10)",
        "detail": "python-gitbook-master..gitbook.assets.linked_list.doubly_linked_list_two",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.linked_list.from_sequence",
        "description": "python-gitbook-master..gitbook.assets.linked_list.from_sequence",
        "peekOfCode": "class Node:\n    def __init__(self, data=None):\n        self.data = data\n        self.next = None\n    def __repr__(self):\n        \"\"\"Returns a visual representation of the node and all its following nodes.\"\"\"\n        string_rep = \"\"\n        temp = self\n        while temp:\n            string_rep += f\"<{temp.data}> ---> \"",
        "detail": "python-gitbook-master..gitbook.assets.linked_list.from_sequence",
        "documentation": {}
    },
    {
        "label": "make_linked_list",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.linked_list.from_sequence",
        "description": "python-gitbook-master..gitbook.assets.linked_list.from_sequence",
        "peekOfCode": "def make_linked_list(elements_list):\n    \"\"\"Creates a Linked List from the elements of the given sequence\n    (list/tuple) and returns the head of the Linked List.\"\"\"\n    # if elements_list is empty\n    if not elements_list:\n        raise Exception(\"The Elements List is empty\")\n    # Set first element as Head\n    head = Node(elements_list[0])\n    current = head\n    # Loop through elements from position 1",
        "detail": "python-gitbook-master..gitbook.assets.linked_list.from_sequence",
        "documentation": {}
    },
    {
        "label": "list_data",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.linked_list.from_sequence",
        "description": "python-gitbook-master..gitbook.assets.linked_list.from_sequence",
        "peekOfCode": "list_data = [1, 3, 5, 32, 44, 12, 43]\nprint(f\"List: {list_data}\")\nprint(\"Creating Linked List from List.\")\nlinked_list = make_linked_list(list_data)\nprint(\"Linked List:\")\nprint(linked_list)",
        "detail": "python-gitbook-master..gitbook.assets.linked_list.from_sequence",
        "documentation": {}
    },
    {
        "label": "linked_list",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.linked_list.from_sequence",
        "description": "python-gitbook-master..gitbook.assets.linked_list.from_sequence",
        "peekOfCode": "linked_list = make_linked_list(list_data)\nprint(\"Linked List:\")\nprint(linked_list)",
        "detail": "python-gitbook-master..gitbook.assets.linked_list.from_sequence",
        "documentation": {}
    },
    {
        "label": "ContainsLoopError",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.linked_list.has_loop",
        "description": "python-gitbook-master..gitbook.assets.linked_list.has_loop",
        "peekOfCode": "class ContainsLoopError(Exception):\n    pass\nclass Node:\n    def __init__(self, data: Any) -> None:\n        self.data = data\n        self.next_node = None\n    def __iter__(self):\n        node = self\n        visited = []\n        while node:",
        "detail": "python-gitbook-master..gitbook.assets.linked_list.has_loop",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.linked_list.has_loop",
        "description": "python-gitbook-master..gitbook.assets.linked_list.has_loop",
        "peekOfCode": "class Node:\n    def __init__(self, data: Any) -> None:\n        self.data = data\n        self.next_node = None\n    def __iter__(self):\n        node = self\n        visited = []\n        while node:\n            if node in visited:\n                raise ContainsLoopError",
        "detail": "python-gitbook-master..gitbook.assets.linked_list.has_loop",
        "documentation": {}
    },
    {
        "label": "is_palindrome",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.linked_list.is_palindrome",
        "description": "python-gitbook-master..gitbook.assets.linked_list.is_palindrome",
        "peekOfCode": "def is_palindrome(head):\n    if not head:\n        return True\n    # split the list to two parts\n    fast, slow = head.next, head\n    while fast and fast.next:\n        fast = fast.next.next\n        slow = slow.next\n    second = slow.next\n    slow.next = None  # Don't forget here! But forget still works!",
        "detail": "python-gitbook-master..gitbook.assets.linked_list.is_palindrome",
        "documentation": {}
    },
    {
        "label": "is_palindrome_stack",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.linked_list.is_palindrome",
        "description": "python-gitbook-master..gitbook.assets.linked_list.is_palindrome",
        "peekOfCode": "def is_palindrome_stack(head):\n    if not head or not head.next:\n        return True\n    # 1. Get the midpoint (slow)\n    slow = fast = cur = head\n    while fast and fast.next:\n        fast, slow = fast.next.next, slow.next\n    # 2. Push the second half into the stack\n    stack = [slow.val]\n    while slow.next:",
        "detail": "python-gitbook-master..gitbook.assets.linked_list.is_palindrome",
        "documentation": {}
    },
    {
        "label": "is_palindrome_dict",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.linked_list.is_palindrome",
        "description": "python-gitbook-master..gitbook.assets.linked_list.is_palindrome",
        "peekOfCode": "def is_palindrome_dict(head):\n    if not head or not head.next:\n        return True\n    d = {}\n    pos = 0\n    while head:\n        if head.val in d.keys():\n            d[head.val].append(pos)\n        else:\n            d[head.val] = [pos]",
        "detail": "python-gitbook-master..gitbook.assets.linked_list.is_palindrome",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.linked_list.merge_two_lists",
        "description": "python-gitbook-master..gitbook.assets.linked_list.merge_two_lists",
        "peekOfCode": "class Node:\n    data: int\n    next: Optional[Node]\nclass SortedLinkedList:\n    def __init__(self, ints: Iterable[int]) -> None:\n        self.head: Optional[Node] = None\n        for i in reversed(sorted(ints)):\n            self.head = Node(i, self.head)\n    def __iter__(self) -> Iterator[int]:\n        \"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.linked_list.merge_two_lists",
        "documentation": {}
    },
    {
        "label": "SortedLinkedList",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.linked_list.merge_two_lists",
        "description": "python-gitbook-master..gitbook.assets.linked_list.merge_two_lists",
        "peekOfCode": "class SortedLinkedList:\n    def __init__(self, ints: Iterable[int]) -> None:\n        self.head: Optional[Node] = None\n        for i in reversed(sorted(ints)):\n            self.head = Node(i, self.head)\n    def __iter__(self) -> Iterator[int]:\n        \"\"\"\n        >>> tuple(SortedLinkedList(test_data_odd)) == tuple(sorted(test_data_odd))\n        True\n        >>> tuple(SortedLinkedList(test_data_even)) == tuple(sorted(test_data_even))",
        "detail": "python-gitbook-master..gitbook.assets.linked_list.merge_two_lists",
        "documentation": {}
    },
    {
        "label": "merge_lists",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.linked_list.merge_two_lists",
        "description": "python-gitbook-master..gitbook.assets.linked_list.merge_two_lists",
        "peekOfCode": "def merge_lists(\n    sll_one: SortedLinkedList, sll_two: SortedLinkedList\n) -> SortedLinkedList:\n    \"\"\"\n    >>> SSL = SortedLinkedList\n    >>> merged = merge_lists(SSL(test_data_odd), SSL(test_data_even))\n    >>> len(merged)\n    16\n    >>> str(merged)\n    '-11 -> -2 -> -1 -> 0 -> 0 -> 1 -> 2 -> 3 -> 3 -> 4 -> 5 -> 6 -> 7 -> 8 -> 9 -> 10'",
        "detail": "python-gitbook-master..gitbook.assets.linked_list.merge_two_lists",
        "documentation": {}
    },
    {
        "label": "test_data_odd",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.linked_list.merge_two_lists",
        "description": "python-gitbook-master..gitbook.assets.linked_list.merge_two_lists",
        "peekOfCode": "test_data_odd = (3, 9, -11, 0, 7, 5, 1, -1)\ntest_data_even = (4, 6, 2, 0, 8, 10, 3, -2)\n@dataclass\nclass Node:\n    data: int\n    next: Optional[Node]\nclass SortedLinkedList:\n    def __init__(self, ints: Iterable[int]) -> None:\n        self.head: Optional[Node] = None\n        for i in reversed(sorted(ints)):",
        "detail": "python-gitbook-master..gitbook.assets.linked_list.merge_two_lists",
        "documentation": {}
    },
    {
        "label": "test_data_even",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.linked_list.merge_two_lists",
        "description": "python-gitbook-master..gitbook.assets.linked_list.merge_two_lists",
        "peekOfCode": "test_data_even = (4, 6, 2, 0, 8, 10, 3, -2)\n@dataclass\nclass Node:\n    data: int\n    next: Optional[Node]\nclass SortedLinkedList:\n    def __init__(self, ints: Iterable[int]) -> None:\n        self.head: Optional[Node] = None\n        for i in reversed(sorted(ints)):\n            self.head = Node(i, self.head)",
        "detail": "python-gitbook-master..gitbook.assets.linked_list.merge_two_lists",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.linked_list.middle_element_of_linked_list",
        "description": "python-gitbook-master..gitbook.assets.linked_list.middle_element_of_linked_list",
        "peekOfCode": "class Node:\n    def __init__(self, data: int) -> int:\n        self.data = data\n        self.next = None\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n    def push(self, new_data: int) -> int:\n        new_node = Node(new_data)\n        new_node.next = self.head",
        "detail": "python-gitbook-master..gitbook.assets.linked_list.middle_element_of_linked_list",
        "documentation": {}
    },
    {
        "label": "LinkedList",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.linked_list.middle_element_of_linked_list",
        "description": "python-gitbook-master..gitbook.assets.linked_list.middle_element_of_linked_list",
        "peekOfCode": "class LinkedList:\n    def __init__(self):\n        self.head = None\n    def push(self, new_data: int) -> int:\n        new_node = Node(new_data)\n        new_node.next = self.head\n        self.head = new_node\n        return self.head.data\n    def middle_element(self) -> int:\n        \"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.linked_list.middle_element_of_linked_list",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.linked_list.print_reverse",
        "description": "python-gitbook-master..gitbook.assets.linked_list.print_reverse",
        "peekOfCode": "class Node:\n    def __init__(self, data=None):\n        self.data = data\n        self.next = None\n    def __repr__(self):\n        \"\"\"Returns a visual representation of the node and all its following nodes.\"\"\"\n        string_rep = []\n        temp = self\n        while temp:\n            string_rep.append(f\"{temp.data}\")",
        "detail": "python-gitbook-master..gitbook.assets.linked_list.print_reverse",
        "documentation": {}
    },
    {
        "label": "make_linked_list",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.linked_list.print_reverse",
        "description": "python-gitbook-master..gitbook.assets.linked_list.print_reverse",
        "peekOfCode": "def make_linked_list(elements_list: List):\n    \"\"\"Creates a Linked List from the elements of the given sequence\n    (list/tuple) and returns the head of the Linked List.\n    >>> make_linked_list([])\n    Traceback (most recent call last):\n        ...\n    Exception: The Elements List is empty\n    >>> make_linked_list([7])\n    7\n    >>> make_linked_list(['abc'])",
        "detail": "python-gitbook-master..gitbook.assets.linked_list.print_reverse",
        "documentation": {}
    },
    {
        "label": "print_reverse",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.linked_list.print_reverse",
        "description": "python-gitbook-master..gitbook.assets.linked_list.print_reverse",
        "peekOfCode": "def print_reverse(head_node: Node) -> None:\n    \"\"\"Prints the elements of the given Linked List in reverse order\n    >>> print_reverse([])\n    >>> linked_list = make_linked_list([69, 88, 73])\n    >>> print_reverse(linked_list)\n    73\n    88\n    69\n    \"\"\"\n    if head_node is not None and isinstance(head_node, Node):",
        "detail": "python-gitbook-master..gitbook.assets.linked_list.print_reverse",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.linked_list.print_reverse",
        "description": "python-gitbook-master..gitbook.assets.linked_list.print_reverse",
        "peekOfCode": "def main():\n    from doctest import testmod\n    testmod()\n    linked_list = make_linked_list([14, 52, 14, 12, 43])\n    print(\"Linked List:\")\n    print(linked_list)\n    print(\"Elements in Reverse:\")\n    print_reverse(linked_list)\nif __name__ == \"__main__\":\n    main()",
        "detail": "python-gitbook-master..gitbook.assets.linked_list.print_reverse",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.linked_list.singly_linked_list",
        "description": "python-gitbook-master..gitbook.assets.linked_list.singly_linked_list",
        "peekOfCode": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n    def __repr__(self):\n        return f\"Node({self.data})\"\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n    def __iter__(self):",
        "detail": "python-gitbook-master..gitbook.assets.linked_list.singly_linked_list",
        "documentation": {}
    },
    {
        "label": "LinkedList",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.linked_list.singly_linked_list",
        "description": "python-gitbook-master..gitbook.assets.linked_list.singly_linked_list",
        "peekOfCode": "class LinkedList:\n    def __init__(self):\n        self.head = None\n    def __iter__(self):\n        node = self.head\n        while node:\n            yield node.data\n            node = node.next\n    def __len__(self) -> int:\n        \"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.linked_list.singly_linked_list",
        "documentation": {}
    },
    {
        "label": "test_singly_linked_list",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.linked_list.singly_linked_list",
        "description": "python-gitbook-master..gitbook.assets.linked_list.singly_linked_list",
        "peekOfCode": "def test_singly_linked_list() -> None:\n    \"\"\"\n    >>> test_singly_linked_list()\n    \"\"\"\n    linked_list = LinkedList()\n    assert linked_list.is_empty() is True\n    assert str(linked_list) == \"\"\n    try:\n        linked_list.delete_head()\n        assert False  # This should not happen.",
        "detail": "python-gitbook-master..gitbook.assets.linked_list.singly_linked_list",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.linked_list.singly_linked_list",
        "description": "python-gitbook-master..gitbook.assets.linked_list.singly_linked_list",
        "peekOfCode": "def main():\n    from doctest import testmod\n    testmod()\n    linked_list = LinkedList()\n    linked_list.insert_head(input(\"Inserting 1st at head \").strip())\n    linked_list.insert_head(input(\"Inserting 2nd at head \").strip())\n    print(\"\\nPrint list:\")\n    linked_list.print_list()\n    linked_list.insert_tail(input(\"\\nInserting 1st at tail \").strip())\n    linked_list.insert_tail(input(\"Inserting 2nd at tail \").strip())",
        "detail": "python-gitbook-master..gitbook.assets.linked_list.singly_linked_list",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.linked_list.skip_list",
        "description": "python-gitbook-master..gitbook.assets.linked_list.skip_list",
        "peekOfCode": "class Node(Generic[KT, VT]):\n    def __init__(self, key: KT, value: VT):\n        self.key = key\n        self.value = value\n        self.forward: list[Node[KT, VT]] = []\n    def __repr__(self) -> str:\n        \"\"\"\n        :return: Visual representation of Node\n        >>> node = Node(\"Key\", 2)\n        >>> repr(node)",
        "detail": "python-gitbook-master..gitbook.assets.linked_list.skip_list",
        "documentation": {}
    },
    {
        "label": "SkipList",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.linked_list.skip_list",
        "description": "python-gitbook-master..gitbook.assets.linked_list.skip_list",
        "peekOfCode": "class SkipList(Generic[KT, VT]):\n    def __init__(self, p: float = 0.5, max_level: int = 16):\n        self.head = Node(\"root\", None)\n        self.level = 0\n        self.p = p\n        self.max_level = max_level\n    def __str__(self) -> str:\n        \"\"\"\n        :return: Visual representation of SkipList\n        >>> skip_list = SkipList()",
        "detail": "python-gitbook-master..gitbook.assets.linked_list.skip_list",
        "documentation": {}
    },
    {
        "label": "test_insert",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.linked_list.skip_list",
        "description": "python-gitbook-master..gitbook.assets.linked_list.skip_list",
        "peekOfCode": "def test_insert():\n    skip_list = SkipList()\n    skip_list.insert(\"Key1\", 3)\n    skip_list.insert(\"Key2\", 12)\n    skip_list.insert(\"Key3\", 41)\n    skip_list.insert(\"Key4\", -19)\n    node = skip_list.head\n    all_values = {}\n    while node.level != 0:\n        node = node.forward[0]",
        "detail": "python-gitbook-master..gitbook.assets.linked_list.skip_list",
        "documentation": {}
    },
    {
        "label": "test_insert_overrides_existing_value",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.linked_list.skip_list",
        "description": "python-gitbook-master..gitbook.assets.linked_list.skip_list",
        "peekOfCode": "def test_insert_overrides_existing_value():\n    skip_list = SkipList()\n    skip_list.insert(\"Key1\", 10)\n    skip_list.insert(\"Key1\", 12)\n    skip_list.insert(\"Key5\", 7)\n    skip_list.insert(\"Key7\", 10)\n    skip_list.insert(\"Key10\", 5)\n    skip_list.insert(\"Key7\", 7)\n    skip_list.insert(\"Key5\", 5)\n    skip_list.insert(\"Key10\", 10)",
        "detail": "python-gitbook-master..gitbook.assets.linked_list.skip_list",
        "documentation": {}
    },
    {
        "label": "test_searching_empty_list_returns_none",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.linked_list.skip_list",
        "description": "python-gitbook-master..gitbook.assets.linked_list.skip_list",
        "peekOfCode": "def test_searching_empty_list_returns_none():\n    skip_list = SkipList()\n    assert skip_list.find(\"Some key\") is None\ndef test_search():\n    skip_list = SkipList()\n    skip_list.insert(\"Key2\", 20)\n    assert skip_list.find(\"Key2\") == 20\n    skip_list.insert(\"Some Key\", 10)\n    skip_list.insert(\"Key2\", 8)\n    skip_list.insert(\"V\", 13)",
        "detail": "python-gitbook-master..gitbook.assets.linked_list.skip_list",
        "documentation": {}
    },
    {
        "label": "test_search",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.linked_list.skip_list",
        "description": "python-gitbook-master..gitbook.assets.linked_list.skip_list",
        "peekOfCode": "def test_search():\n    skip_list = SkipList()\n    skip_list.insert(\"Key2\", 20)\n    assert skip_list.find(\"Key2\") == 20\n    skip_list.insert(\"Some Key\", 10)\n    skip_list.insert(\"Key2\", 8)\n    skip_list.insert(\"V\", 13)\n    assert skip_list.find(\"Y\") is None\n    assert skip_list.find(\"Key2\") == 8\n    assert skip_list.find(\"Some Key\") == 10",
        "detail": "python-gitbook-master..gitbook.assets.linked_list.skip_list",
        "documentation": {}
    },
    {
        "label": "test_deleting_item_from_empty_list_do_nothing",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.linked_list.skip_list",
        "description": "python-gitbook-master..gitbook.assets.linked_list.skip_list",
        "peekOfCode": "def test_deleting_item_from_empty_list_do_nothing():\n    skip_list = SkipList()\n    skip_list.delete(\"Some key\")\n    assert len(skip_list.head.forward) == 0\ndef test_deleted_items_are_not_founded_by_find_method():\n    skip_list = SkipList()\n    skip_list.insert(\"Key1\", 12)\n    skip_list.insert(\"V\", 13)\n    skip_list.insert(\"X\", 14)\n    skip_list.insert(\"Key2\", 15)",
        "detail": "python-gitbook-master..gitbook.assets.linked_list.skip_list",
        "documentation": {}
    },
    {
        "label": "test_deleted_items_are_not_founded_by_find_method",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.linked_list.skip_list",
        "description": "python-gitbook-master..gitbook.assets.linked_list.skip_list",
        "peekOfCode": "def test_deleted_items_are_not_founded_by_find_method():\n    skip_list = SkipList()\n    skip_list.insert(\"Key1\", 12)\n    skip_list.insert(\"V\", 13)\n    skip_list.insert(\"X\", 14)\n    skip_list.insert(\"Key2\", 15)\n    skip_list.delete(\"V\")\n    skip_list.delete(\"Key2\")\n    assert skip_list.find(\"V\") is None\n    assert skip_list.find(\"Key2\") is None",
        "detail": "python-gitbook-master..gitbook.assets.linked_list.skip_list",
        "documentation": {}
    },
    {
        "label": "test_delete_removes_only_given_key",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.linked_list.skip_list",
        "description": "python-gitbook-master..gitbook.assets.linked_list.skip_list",
        "peekOfCode": "def test_delete_removes_only_given_key():\n    skip_list = SkipList()\n    skip_list.insert(\"Key1\", 12)\n    skip_list.insert(\"V\", 13)\n    skip_list.insert(\"X\", 14)\n    skip_list.insert(\"Key2\", 15)\n    skip_list.delete(\"V\")\n    assert skip_list.find(\"V\") is None\n    assert skip_list.find(\"X\") == 14\n    assert skip_list.find(\"Key1\") == 12",
        "detail": "python-gitbook-master..gitbook.assets.linked_list.skip_list",
        "documentation": {}
    },
    {
        "label": "test_delete_doesnt_leave_dead_nodes",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.linked_list.skip_list",
        "description": "python-gitbook-master..gitbook.assets.linked_list.skip_list",
        "peekOfCode": "def test_delete_doesnt_leave_dead_nodes():\n    skip_list = SkipList()\n    skip_list.insert(\"Key1\", 12)\n    skip_list.insert(\"V\", 13)\n    skip_list.insert(\"X\", 142)\n    skip_list.insert(\"Key2\", 15)\n    skip_list.delete(\"X\")\n    def traverse_keys(node):\n        yield node.key\n        for forward_node in node.forward:",
        "detail": "python-gitbook-master..gitbook.assets.linked_list.skip_list",
        "documentation": {}
    },
    {
        "label": "test_iter_always_yields_sorted_values",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.linked_list.skip_list",
        "description": "python-gitbook-master..gitbook.assets.linked_list.skip_list",
        "peekOfCode": "def test_iter_always_yields_sorted_values():\n    def is_sorted(lst):\n        for item, next_item in zip(lst, lst[1:]):\n            if next_item < item:\n                return False\n        return True\n    skip_list = SkipList()\n    for i in range(10):\n        skip_list.insert(i, i)\n    assert is_sorted(list(skip_list))",
        "detail": "python-gitbook-master..gitbook.assets.linked_list.skip_list",
        "documentation": {}
    },
    {
        "label": "pytests",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.linked_list.skip_list",
        "description": "python-gitbook-master..gitbook.assets.linked_list.skip_list",
        "peekOfCode": "def pytests():\n    for i in range(100):\n        # Repeat test 100 times due to the probabilistic nature of skip list\n        # random values == random bugs\n        test_insert()\n        test_insert_overrides_existing_value()\n        test_searching_empty_list_returns_none()\n        test_search()\n        test_deleting_item_from_empty_list_do_nothing()\n        test_deleted_items_are_not_founded_by_find_method()",
        "detail": "python-gitbook-master..gitbook.assets.linked_list.skip_list",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.linked_list.skip_list",
        "description": "python-gitbook-master..gitbook.assets.linked_list.skip_list",
        "peekOfCode": "def main():\n    \"\"\"\n    >>> pytests()\n    \"\"\"\n    skip_list = SkipList()\n    skip_list.insert(2, \"2\")\n    skip_list.insert(4, \"4\")\n    skip_list.insert(6, \"4\")\n    skip_list.insert(4, \"5\")\n    skip_list.insert(8, \"4\")",
        "detail": "python-gitbook-master..gitbook.assets.linked_list.skip_list",
        "documentation": {}
    },
    {
        "label": "KT",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.linked_list.skip_list",
        "description": "python-gitbook-master..gitbook.assets.linked_list.skip_list",
        "peekOfCode": "KT = TypeVar(\"KT\")\nVT = TypeVar(\"VT\")\nclass Node(Generic[KT, VT]):\n    def __init__(self, key: KT, value: VT):\n        self.key = key\n        self.value = value\n        self.forward: list[Node[KT, VT]] = []\n    def __repr__(self) -> str:\n        \"\"\"\n        :return: Visual representation of Node",
        "detail": "python-gitbook-master..gitbook.assets.linked_list.skip_list",
        "documentation": {}
    },
    {
        "label": "VT",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.linked_list.skip_list",
        "description": "python-gitbook-master..gitbook.assets.linked_list.skip_list",
        "peekOfCode": "VT = TypeVar(\"VT\")\nclass Node(Generic[KT, VT]):\n    def __init__(self, key: KT, value: VT):\n        self.key = key\n        self.value = value\n        self.forward: list[Node[KT, VT]] = []\n    def __repr__(self) -> str:\n        \"\"\"\n        :return: Visual representation of Node\n        >>> node = Node(\"Key\", 2)",
        "detail": "python-gitbook-master..gitbook.assets.linked_list.skip_list",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.linked_list.swap_nodes",
        "description": "python-gitbook-master..gitbook.assets.linked_list.swap_nodes",
        "peekOfCode": "class Node:\n    def __init__(self, data: Any):\n        self.data = data\n        self.next = None\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n    def print_list(self):\n        temp = self.head\n        while temp is not None:",
        "detail": "python-gitbook-master..gitbook.assets.linked_list.swap_nodes",
        "documentation": {}
    },
    {
        "label": "LinkedList",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.linked_list.swap_nodes",
        "description": "python-gitbook-master..gitbook.assets.linked_list.swap_nodes",
        "peekOfCode": "class LinkedList:\n    def __init__(self):\n        self.head = None\n    def print_list(self):\n        temp = self.head\n        while temp is not None:\n            print(temp.data, end=\" \")\n            temp = temp.next\n        print()\n    # adding nodes",
        "detail": "python-gitbook-master..gitbook.assets.linked_list.swap_nodes",
        "documentation": {}
    },
    {
        "label": "world",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.projects.adventure.adv",
        "description": "python-gitbook-master..gitbook.assets.projects.adventure.adv",
        "peekOfCode": "world = World()\n# You may uncomment the smaller graphs for development and testing purposes.\n# roomGraph={0: [(3, 5), {'n': 1}], 1: [(3, 6), {'s': 0, 'n': 2}], 2: [(3, 7), {'s': 1}]}\n# roomGraph={0: [(3, 5), {'n': 1, 's': 5, 'e': 3, 'w': 7}], 1: [(3, 6), {'s': 0, 'n': 2}], 2: [(3, 7), {'s': 1}], 3: [(4, 5), {'w': 0, 'e': 4}], 4: [(5, 5), {'w': 3}], 5: [(3, 4), {'n': 0, 's': 6}], 6: [(3, 3), {'n': 5}], 7: [(2, 5), {'w': 8, 'e': 0}], 8: [(1, 5), {'e': 7}]}\n# roomGraph={0: [(3, 5), {'n': 1, 's': 5, 'e': 3, 'w': 7}], 1: [(3, 6), {'s': 0, 'n': 2}], 2: [(3, 7), {'s': 1}], 3: [(4, 5), {'w': 0, 'e': 4}], 4: [(5, 5), {'w': 3}], 5: [(3, 4), {'n': 0, 's': 6}], 6: [(3, 3), {'n': 5, 'w': 11}], 7: [(2, 5), {'w': 8, 'e': 0}], 8: [(1, 5), {'e': 7}], 9: [(1, 4), {'n': 8, 's': 10}], 10: [(1, 3), {'n': 9, 'e': 11}], 11: [(2, 3), {'w': 10, 'e': 6}]}\n# roomGraph={0: [(3, 5), {'n': 1, 's': 5, 'e': 3, 'w': 7}], 1: [(3, 6), {'s': 0, 'n': 2, 'e': 12, 'w': 15}], 2: [(3, 7), {'s': 1}], 3: [(4, 5), {'w': 0, 'e': 4}], 4: [(5, 5), {'w': 3}], 5: [(3, 4), {'n': 0, 's': 6}], 6: [(3, 3), {'n': 5, 'w': 11}], 7: [(2, 5), {'w': 8, 'e': 0}], 8: [(1, 5), {'e': 7}], 9: [(1, 4), {'n': 8, 's': 10}], 10: [(1, 3), {'n': 9, 'e': 11}], 11: [(2, 3), {'w': 10, 'e': 6}], 12: [(4, 6), {'w': 1, 'e': 13}], 13: [(5, 6), {'w': 12, 'n': 14}], 14: [(5, 7), {'s': 13}], 15: [(2, 6), {'e': 1, 'w': 16}], 16: [(1, 6), {'n': 17, 'e': 15}], 17: [(1, 7), {'s': 16}]}\nroomGraph = {\n    494: [(1, 8), {\"e\": 457}],\n    492: [(1, 20), {\"e\": 400}],\n    493: [(2, 5), {\"e\": 478}],",
        "detail": "python-gitbook-master..gitbook.assets.projects.adventure.adv",
        "documentation": {}
    },
    {
        "label": "roomGraph",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.projects.adventure.adv",
        "description": "python-gitbook-master..gitbook.assets.projects.adventure.adv",
        "peekOfCode": "roomGraph = {\n    494: [(1, 8), {\"e\": 457}],\n    492: [(1, 20), {\"e\": 400}],\n    493: [(2, 5), {\"e\": 478}],\n    457: [(2, 8), {\"e\": 355, \"w\": 494}],\n    484: [(2, 9), {\"n\": 482}],\n    482: [(2, 10), {\"s\": 484, \"e\": 404}],\n    486: [(2, 13), {\"e\": 462}],\n    479: [(2, 15), {\"e\": 418}],\n    465: [(2, 16), {\"e\": 368}],",
        "detail": "python-gitbook-master..gitbook.assets.projects.adventure.adv",
        "documentation": {}
    },
    {
        "label": "player",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.projects.adventure.adv",
        "description": "python-gitbook-master..gitbook.assets.projects.adventure.adv",
        "peekOfCode": "player = Player(\"Name\", world.startingRoom)\n# Fill this out\ntraversalPath = []\n# TRAVERSAL TEST\nvisited_rooms = set()\nplayer.currentRoom = world.startingRoom\nvisited_rooms.add(player.currentRoom)\nfor move in traversalPath:\n    player.travel(move)\n    visited_rooms.add(player.currentRoom)",
        "detail": "python-gitbook-master..gitbook.assets.projects.adventure.adv",
        "documentation": {}
    },
    {
        "label": "traversalPath",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.projects.adventure.adv",
        "description": "python-gitbook-master..gitbook.assets.projects.adventure.adv",
        "peekOfCode": "traversalPath = []\n# TRAVERSAL TEST\nvisited_rooms = set()\nplayer.currentRoom = world.startingRoom\nvisited_rooms.add(player.currentRoom)\nfor move in traversalPath:\n    player.travel(move)\n    visited_rooms.add(player.currentRoom)\nif len(visited_rooms) == len(roomGraph):\n    print(",
        "detail": "python-gitbook-master..gitbook.assets.projects.adventure.adv",
        "documentation": {}
    },
    {
        "label": "visited_rooms",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.projects.adventure.adv",
        "description": "python-gitbook-master..gitbook.assets.projects.adventure.adv",
        "peekOfCode": "visited_rooms = set()\nplayer.currentRoom = world.startingRoom\nvisited_rooms.add(player.currentRoom)\nfor move in traversalPath:\n    player.travel(move)\n    visited_rooms.add(player.currentRoom)\nif len(visited_rooms) == len(roomGraph):\n    print(\n        f\"TESTS PASSED: {len(traversalPath)} moves, {len(visited_rooms)} rooms visited\"\n    )",
        "detail": "python-gitbook-master..gitbook.assets.projects.adventure.adv",
        "documentation": {}
    },
    {
        "label": "player.currentRoom",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.projects.adventure.adv",
        "description": "python-gitbook-master..gitbook.assets.projects.adventure.adv",
        "peekOfCode": "player.currentRoom = world.startingRoom\nvisited_rooms.add(player.currentRoom)\nfor move in traversalPath:\n    player.travel(move)\n    visited_rooms.add(player.currentRoom)\nif len(visited_rooms) == len(roomGraph):\n    print(\n        f\"TESTS PASSED: {len(traversalPath)} moves, {len(visited_rooms)} rooms visited\"\n    )\nelse:",
        "detail": "python-gitbook-master..gitbook.assets.projects.adventure.adv",
        "documentation": {}
    },
    {
        "label": "Player",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.projects.adventure.player",
        "description": "python-gitbook-master..gitbook.assets.projects.adventure.player",
        "peekOfCode": "class Player:\n    def __init__(self, name, startingRoom):\n        self.name = name\n        self.currentRoom = startingRoom\n    def travel(self, direction, showRooms=False):\n        nextRoom = self.currentRoom.getRoomInDirection(direction)\n        if nextRoom is not None:\n            self.currentRoom = nextRoom\n            if showRooms:\n                nextRoom.printRoomDescription(self)",
        "detail": "python-gitbook-master..gitbook.assets.projects.adventure.player",
        "documentation": {}
    },
    {
        "label": "Room",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.projects.adventure.room",
        "description": "python-gitbook-master..gitbook.assets.projects.adventure.room",
        "peekOfCode": "class Room:\n    def __init__(self, name, description, id=0, x=None, y=None):\n        self.id = id\n        self.name = name\n        self.description = description\n        self.n_to = None\n        self.s_to = None\n        self.e_to = None\n        self.w_to = None\n        self.x = x",
        "detail": "python-gitbook-master..gitbook.assets.projects.adventure.room",
        "documentation": {}
    },
    {
        "label": "World",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.projects.adventure.world",
        "description": "python-gitbook-master..gitbook.assets.projects.adventure.world",
        "peekOfCode": "class World:\n    def __init__(self):\n        self.startingRoom = None\n        self.rooms = {}\n        self.roomGrid = []\n        self.gridSize = 0\n    def loadGraph(self, roomGraph):\n        numRooms = len(roomGraph)\n        rooms = [None] * numRooms\n        gridSize = 1",
        "detail": "python-gitbook-master..gitbook.assets.projects.adventure.world",
        "documentation": {}
    },
    {
        "label": "Queue",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.projects.ancestor.ancestor",
        "description": "python-gitbook-master..gitbook.assets.projects.ancestor.ancestor",
        "peekOfCode": "class Queue:\n    def __init__(self):\n        self.queue = []\n    def enqueue(self, value):\n        self.queue.append(value)\n    def dequeue(self):\n        if self.size() > 0:\n            return self.queue.pop(0)\n        else:\n            return None",
        "detail": "python-gitbook-master..gitbook.assets.projects.ancestor.ancestor",
        "documentation": {}
    },
    {
        "label": "Graph",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.projects.ancestor.ancestor",
        "description": "python-gitbook-master..gitbook.assets.projects.ancestor.ancestor",
        "peekOfCode": "class Graph:\n    def __init__(self):\n        self.vertices = {}\n    def add_vertex(self, vertex_id):\n        if vertex_id not in self.vertices:\n            self.vertices[vertex_id] = set()\n    def add_edges(self, v1, v2):\n        if v1 in self.vertices and v2 in self.vertices:\n            self.vertices[v1].add(v2)\n        else:",
        "detail": "python-gitbook-master..gitbook.assets.projects.ancestor.ancestor",
        "documentation": {}
    },
    {
        "label": "earliest_ancestor",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.projects.ancestor.ancestor",
        "description": "python-gitbook-master..gitbook.assets.projects.ancestor.ancestor",
        "peekOfCode": "def earliest_ancestor(ancestors, starting_node):\n    # build the graph\n    graph = Graph()\n    for pair in ancestors:\n        graph.add_vertex(pair[0])\n        graph.add_vertex(pair[1])\n        # build edges in reverse\n        graph.add_edges(pair[1], pair[0])\n    q = Queue()\n    q.enqueue([starting_node])",
        "detail": "python-gitbook-master..gitbook.assets.projects.ancestor.ancestor",
        "documentation": {}
    },
    {
        "label": "Test",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.projects.ancestor.test_ancestor",
        "description": "python-gitbook-master..gitbook.assets.projects.ancestor.test_ancestor",
        "peekOfCode": "class Test(unittest.TestCase):\n    \"\"\"\n       10\n     /\n    1   2   4  11\n     \\ /   / \\ /\n      3   5   8\n       \\ / \\   \\\n        6   7   9\n    \"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.projects.ancestor.test_ancestor",
        "documentation": {}
    },
    {
        "label": "Graph",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.projects.graph.graph",
        "description": "python-gitbook-master..gitbook.assets.projects.graph.graph",
        "peekOfCode": "class Graph:\n    \"\"\"Represent a graph as a dictionary of vertices mapping labels to edges.\"\"\"\n    def __init__(self):\n        self.vertices = {}\n    def add_vertex(self, vertex):\n        \"\"\"\n        Add a vertex to the graph.\n        \"\"\"\n        self.vertices[vertex] = set()\n    def add_edge(self, v1, v2):",
        "detail": "python-gitbook-master..gitbook.assets.projects.graph.graph",
        "documentation": {}
    },
    {
        "label": "Queue",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.projects.graph.util",
        "description": "python-gitbook-master..gitbook.assets.projects.graph.util",
        "peekOfCode": "class Queue:\n    def __init__(self):\n        self.queue = []\n    def enqueue(self, value):\n        self.queue.append(value)\n    def dequeue(self):\n        if self.size() > 0:\n            return self.queue.pop(0)\n        else:\n            return None",
        "detail": "python-gitbook-master..gitbook.assets.projects.graph.util",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.projects.graph.util",
        "description": "python-gitbook-master..gitbook.assets.projects.graph.util",
        "peekOfCode": "class Stack:\n    def __init__(self):\n        self.stack = []\n    def push(self, value):\n        self.stack.append(value)\n    def pop(self):\n        if self.size() > 0:\n            return self.stack.pop()\n        else:\n            return None",
        "detail": "python-gitbook-master..gitbook.assets.projects.graph.util",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.projects.islands.islands",
        "description": "python-gitbook-master..gitbook.assets.projects.islands.islands",
        "peekOfCode": "class Stack:\n    def __init__(self):\n        self.stack = []\n    def push(self, value):\n        self.stack.append(value)\n    def pop(self):\n        if self.size() > 0:\n            return self.stack.pop()\n        else:\n            return None",
        "detail": "python-gitbook-master..gitbook.assets.projects.islands.islands",
        "documentation": {}
    },
    {
        "label": "get_island_neighbors",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.projects.islands.islands",
        "description": "python-gitbook-master..gitbook.assets.projects.islands.islands",
        "peekOfCode": "def get_island_neighbors(x, y, matrix):\n    neighbors = []\n    # Check if there's a 1 to the north\n    if y > 0 and matrix[y - 1][x] == 1:\n        neighbors.append((x, y - 1))\n    # Check south\n    if y < len(matrix) - 1 and matrix[y + 1][x] == 1:\n        neighbors.append((x, y + 1))\n    # Check east\n    if x < len(matrix[0]) - 1 and matrix[y][x + 1] == 1:",
        "detail": "python-gitbook-master..gitbook.assets.projects.islands.islands",
        "documentation": {}
    },
    {
        "label": "dft_islands",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.projects.islands.islands",
        "description": "python-gitbook-master..gitbook.assets.projects.islands.islands",
        "peekOfCode": "def dft_islands(start_x, start_y, matrix, visited):\n    \"\"\"\n    Returns an updated visited matrix after a dft of matrix starting from x, y\n    \"\"\"\n    # Create an empty stack and push the starting vertex\n    s = Stack()\n    s.push((start_x, start_y))\n    # While the stack is not empty...\n    while s.size() > 0:\n        # Pop the first vertex",
        "detail": "python-gitbook-master..gitbook.assets.projects.islands.islands",
        "documentation": {}
    },
    {
        "label": "island_counter",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.projects.islands.islands",
        "description": "python-gitbook-master..gitbook.assets.projects.islands.islands",
        "peekOfCode": "def island_counter(matrix):\n    # Create a visited matrix with the same dimensions as the islands matrix\n    visited = []\n    matrix_height = len(matrix)\n    matrix_width = len(matrix[0])\n    for i in range(matrix_height):\n        visited.append([False] * matrix_width)\n    # Create a counter, initialize to 0\n    counter = 0\n    # For each cell in the 2d array...",
        "detail": "python-gitbook-master..gitbook.assets.projects.islands.islands",
        "documentation": {}
    },
    {
        "label": "islands",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.projects.islands.islands",
        "description": "python-gitbook-master..gitbook.assets.projects.islands.islands",
        "peekOfCode": "islands = [\n    [0, 1, 0, 1, 0],\n    [1, 1, 0, 1, 1],\n    [0, 0, 1, 0, 0],\n    [1, 0, 1, 0, 0],\n    [1, 1, 0, 0, 0],\n]\n# Visit each cell in the 2d array.\n# When you come across a 1, traverse it and mark all connected nodes as visited,\n# then increment a counter",
        "detail": "python-gitbook-master..gitbook.assets.projects.islands.islands",
        "documentation": {}
    },
    {
        "label": "big_islands",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.projects.islands.islands",
        "description": "python-gitbook-master..gitbook.assets.projects.islands.islands",
        "peekOfCode": "big_islands = [\n    [1, 0, 0, 1, 1, 0, 1, 1, 0, 1],\n    [0, 0, 1, 1, 0, 1, 0, 0, 0, 0],\n    [0, 1, 1, 1, 0, 0, 0, 1, 0, 1],\n    [0, 0, 1, 0, 0, 1, 0, 0, 1, 1],\n    [0, 0, 1, 1, 0, 1, 0, 1, 1, 0],\n    [0, 1, 0, 1, 1, 1, 0, 1, 0, 0],\n    [0, 0, 1, 0, 0, 1, 1, 0, 0, 0],\n    [1, 0, 1, 1, 0, 0, 0, 1, 1, 0],\n    [0, 1, 1, 0, 0, 0, 1, 1, 0, 0],",
        "detail": "python-gitbook-master..gitbook.assets.projects.islands.islands",
        "documentation": {}
    },
    {
        "label": "i1",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.projects.islands.islands",
        "description": "python-gitbook-master..gitbook.assets.projects.islands.islands",
        "peekOfCode": "i1 = island_counter(big_islands)  # 13\ni2 = island_counter(islands)  # returns 4\nprint(f\"Island 1 - Should be 13: \\t {i1}\")\nprint(f\"Island 2 - Should be 04: \\t {i2}\")",
        "detail": "python-gitbook-master..gitbook.assets.projects.islands.islands",
        "documentation": {}
    },
    {
        "label": "i2",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.projects.islands.islands",
        "description": "python-gitbook-master..gitbook.assets.projects.islands.islands",
        "peekOfCode": "i2 = island_counter(islands)  # returns 4\nprint(f\"Island 1 - Should be 13: \\t {i1}\")\nprint(f\"Island 2 - Should be 04: \\t {i2}\")",
        "detail": "python-gitbook-master..gitbook.assets.projects.islands.islands",
        "documentation": {}
    },
    {
        "label": "Queue",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.projects.social.social",
        "description": "python-gitbook-master..gitbook.assets.projects.social.social",
        "peekOfCode": "class Queue:\n    def __init__(self):\n        self.queue = []\n    def enqueue(self, value):\n        self.queue.append(value)\n    def dequeue(self):\n        if self.size() > 0:\n            return self.queue.pop(0)\n        else:\n            return None",
        "detail": "python-gitbook-master..gitbook.assets.projects.social.social",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.projects.social.social",
        "description": "python-gitbook-master..gitbook.assets.projects.social.social",
        "peekOfCode": "class User:\n    def __init__(self, name):\n        self.name = name\n    def __repr__(self):\n        return self.name\nclass SocialGraph:\n    def __init__(self):\n        self.lastID = 0\n        self.users = {}\n        self.friendships = {}",
        "detail": "python-gitbook-master..gitbook.assets.projects.social.social",
        "documentation": {}
    },
    {
        "label": "SocialGraph",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.projects.social.social",
        "description": "python-gitbook-master..gitbook.assets.projects.social.social",
        "peekOfCode": "class SocialGraph:\n    def __init__(self):\n        self.lastID = 0\n        self.users = {}\n        self.friendships = {}\n    def addFriendship(self, userID, friendID):\n        \"\"\"\n        Creates a bi-directional friendship\n        \"\"\"\n        if userID == friendID:",
        "detail": "python-gitbook-master..gitbook.assets.projects.social.social",
        "documentation": {}
    },
    {
        "label": "Queue",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.projects.word_ladder.word_ladder",
        "description": "python-gitbook-master..gitbook.assets.projects.word_ladder.word_ladder",
        "peekOfCode": "class Queue:\n    def __init__(self):\n        self.queue = []\n    def enqueue(self, value):\n        self.queue.append(value)\n    def dequeue(self):\n        if self.size() > 0:\n            return self.queue.pop(0)\n        else:\n            return None",
        "detail": "python-gitbook-master..gitbook.assets.projects.word_ladder.word_ladder",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.projects.word_ladder.word_ladder",
        "description": "python-gitbook-master..gitbook.assets.projects.word_ladder.word_ladder",
        "peekOfCode": "class Stack:\n    def __init__(self):\n        self.stack = []\n    def push(self, value):\n        self.stack.append(value)\n    def pop(self):\n        if self.size() > 0:\n            return self.stack.pop()\n        else:\n            return None",
        "detail": "python-gitbook-master..gitbook.assets.projects.word_ladder.word_ladder",
        "documentation": {}
    },
    {
        "label": "get_neighbors",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.projects.word_ladder.word_ladder",
        "description": "python-gitbook-master..gitbook.assets.projects.word_ladder.word_ladder",
        "peekOfCode": "def get_neighbors(word):\n    \"\"\"\"\"\n    Return all words from word_list that are exactly 1 letter different\n    \"\"\" \"\"\n    # time complexity: O(length_of_begin_word)\n    # space complexity: O(number_words)\n    neighbors = []\n    letter_list = list(word)  # \"abc\" -> [\"a\", \"b\", \"c\"]\n    letters = [\n        \"a\",",
        "detail": "python-gitbook-master..gitbook.assets.projects.word_ladder.word_ladder",
        "documentation": {}
    },
    {
        "label": "word_ladder_path",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.projects.word_ladder.word_ladder",
        "description": "python-gitbook-master..gitbook.assets.projects.word_ladder.word_ladder",
        "peekOfCode": "def word_ladder_path(begin_word, end_word):\n    q = Queue()\n    q.enqueue([begin_word])\n    visited = set()\n    while q.size() > 0:\n        path = q.dequeue()\n        v = path[-1]\n        if v not in visited:\n            if v == end_word:\n                return path",
        "detail": "python-gitbook-master..gitbook.assets.projects.word_ladder.word_ladder",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.projects.word_ladder.word_ladder",
        "description": "python-gitbook-master..gitbook.assets.projects.word_ladder.word_ladder",
        "peekOfCode": "f = open(\"words.txt\", \"r\")\nwords = f.read().split(\"\\n\")\nf.close()\nword_set = set()\nfor word in words:\n    word_set.add(word.lower())\n# 1. Is this a graph problem? If so, translate the problem into graph terminology\n# 2. Build the graph\n# 3. Traverse the graph\ndef get_neighbors(word):",
        "detail": "python-gitbook-master..gitbook.assets.projects.word_ladder.word_ladder",
        "documentation": {}
    },
    {
        "label": "words",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.projects.word_ladder.word_ladder",
        "description": "python-gitbook-master..gitbook.assets.projects.word_ladder.word_ladder",
        "peekOfCode": "words = f.read().split(\"\\n\")\nf.close()\nword_set = set()\nfor word in words:\n    word_set.add(word.lower())\n# 1. Is this a graph problem? If so, translate the problem into graph terminology\n# 2. Build the graph\n# 3. Traverse the graph\ndef get_neighbors(word):\n    \"\"\"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.projects.word_ladder.word_ladder",
        "documentation": {}
    },
    {
        "label": "word_set",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.projects.word_ladder.word_ladder",
        "description": "python-gitbook-master..gitbook.assets.projects.word_ladder.word_ladder",
        "peekOfCode": "word_set = set()\nfor word in words:\n    word_set.add(word.lower())\n# 1. Is this a graph problem? If so, translate the problem into graph terminology\n# 2. Build the graph\n# 3. Traverse the graph\ndef get_neighbors(word):\n    \"\"\"\"\"\n    Return all words from word_list that are exactly 1 letter different\n    \"\"\" \"\"",
        "detail": "python-gitbook-master..gitbook.assets.projects.word_ladder.word_ladder",
        "documentation": {}
    },
    {
        "label": "CircularQueue",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.queue.circular_queue",
        "description": "python-gitbook-master..gitbook.assets.queue.circular_queue",
        "peekOfCode": "class CircularQueue:\n    \"\"\"Circular FIFO queue with a fixed capacity\"\"\"\n    def __init__(self, n: int):\n        self.n = n\n        self.array = [None] * self.n\n        self.front = 0  # index of the first element\n        self.rear = 0\n        self.size = 0\n    def __len__(self) -> int:\n        \"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.queue.circular_queue",
        "documentation": {}
    },
    {
        "label": "de",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.queue.double_ended_queue",
        "description": "python-gitbook-master..gitbook.assets.queue.double_ended_queue",
        "peekOfCode": "de = collections.deque([1, 2, 3])\n# using extend() to add numbers to right end\n# adds 4,5,6 to right end\nde.extend([4, 5, 6])\n# printing modified deque\nprint(\"The deque after extending deque at end is : \")\nprint(de)\n# using extendleft() to add numbers to left end\n# adds 7,8,9 to right end\nde.extendleft([7, 8, 9])",
        "detail": "python-gitbook-master..gitbook.assets.queue.double_ended_queue",
        "documentation": {}
    },
    {
        "label": "startValue",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.queue.double_ended_queue",
        "description": "python-gitbook-master..gitbook.assets.queue.double_ended_queue",
        "peekOfCode": "startValue = de.pop()\nprint(\"The deque after popping value at end is : \")\nprint(de)\n# get left-end value and eliminate\nendValue = de.popleft()\nprint(\"The deque after popping value at start is : \")\nprint(de)\n# eliminate element searched by value\nde.remove(5)\nprint(\"The deque after eliminating element searched by value : \")",
        "detail": "python-gitbook-master..gitbook.assets.queue.double_ended_queue",
        "documentation": {}
    },
    {
        "label": "endValue",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.queue.double_ended_queue",
        "description": "python-gitbook-master..gitbook.assets.queue.double_ended_queue",
        "peekOfCode": "endValue = de.popleft()\nprint(\"The deque after popping value at start is : \")\nprint(de)\n# eliminate element searched by value\nde.remove(5)\nprint(\"The deque after eliminating element searched by value : \")\nprint(de)",
        "detail": "python-gitbook-master..gitbook.assets.queue.double_ended_queue",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.queue.linked_queue",
        "description": "python-gitbook-master..gitbook.assets.queue.linked_queue",
        "peekOfCode": "class Node:\n    def __init__(self, data: Any) -> None:\n        self.data = data\n        self.next = None\n    def __str__(self) -> str:\n        return f\"{self.data}\"\nclass LinkedQueue:\n    \"\"\"\n    >>> queue = LinkedQueue()\n    >>> queue.is_empty()",
        "detail": "python-gitbook-master..gitbook.assets.queue.linked_queue",
        "documentation": {}
    },
    {
        "label": "LinkedQueue",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.queue.linked_queue",
        "description": "python-gitbook-master..gitbook.assets.queue.linked_queue",
        "peekOfCode": "class LinkedQueue:\n    \"\"\"\n    >>> queue = LinkedQueue()\n    >>> queue.is_empty()\n    True\n    >>> queue.put(5)\n    >>> queue.put(9)\n    >>> queue.put('python')\n    >>> queue.is_empty();\n    False",
        "detail": "python-gitbook-master..gitbook.assets.queue.linked_queue",
        "documentation": {}
    },
    {
        "label": "OverFlowError",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.queue.priority_queue_using_list",
        "description": "python-gitbook-master..gitbook.assets.queue.priority_queue_using_list",
        "peekOfCode": "class OverFlowError(Exception):\n    pass\nclass UnderFlowError(Exception):\n    pass\nclass FixedPriorityQueue:\n    \"\"\"\n    Tasks can be added to a Priority Queue at any time and in any order but when Tasks\n    are removed then the Task with the highest priority is removed in FIFO order.  In\n    code we will use three levels of priority with priority zero Tasks being the most\n    urgent (high priority) and priority 2 tasks being the least urgent.",
        "detail": "python-gitbook-master..gitbook.assets.queue.priority_queue_using_list",
        "documentation": {}
    },
    {
        "label": "UnderFlowError",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.queue.priority_queue_using_list",
        "description": "python-gitbook-master..gitbook.assets.queue.priority_queue_using_list",
        "peekOfCode": "class UnderFlowError(Exception):\n    pass\nclass FixedPriorityQueue:\n    \"\"\"\n    Tasks can be added to a Priority Queue at any time and in any order but when Tasks\n    are removed then the Task with the highest priority is removed in FIFO order.  In\n    code we will use three levels of priority with priority zero Tasks being the most\n    urgent (high priority) and priority 2 tasks being the least urgent.\n    Examples\n    >>> fpq = FixedPriorityQueue()",
        "detail": "python-gitbook-master..gitbook.assets.queue.priority_queue_using_list",
        "documentation": {}
    },
    {
        "label": "FixedPriorityQueue",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.queue.priority_queue_using_list",
        "description": "python-gitbook-master..gitbook.assets.queue.priority_queue_using_list",
        "peekOfCode": "class FixedPriorityQueue:\n    \"\"\"\n    Tasks can be added to a Priority Queue at any time and in any order but when Tasks\n    are removed then the Task with the highest priority is removed in FIFO order.  In\n    code we will use three levels of priority with priority zero Tasks being the most\n    urgent (high priority) and priority 2 tasks being the least urgent.\n    Examples\n    >>> fpq = FixedPriorityQueue()\n    >>> fpq.enqueue(0, 10)\n    >>> fpq.enqueue(1, 70)",
        "detail": "python-gitbook-master..gitbook.assets.queue.priority_queue_using_list",
        "documentation": {}
    },
    {
        "label": "ElementPriorityQueue",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.queue.priority_queue_using_list",
        "description": "python-gitbook-master..gitbook.assets.queue.priority_queue_using_list",
        "peekOfCode": "class ElementPriorityQueue:\n    \"\"\"\n    Element Priority Queue is the same as Fixed Priority Queue except that the value of\n    the element itself is the priority. The rules for priorities are the same the as\n    Fixed Priority Queue.\n    >>> epq = ElementPriorityQueue()\n    >>> epq.enqueue(10)\n    >>> epq.enqueue(70)\n    >>> epq.enqueue(4)\n    >>> epq.enqueue(1)",
        "detail": "python-gitbook-master..gitbook.assets.queue.priority_queue_using_list",
        "documentation": {}
    },
    {
        "label": "fixed_priority_queue",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.queue.priority_queue_using_list",
        "description": "python-gitbook-master..gitbook.assets.queue.priority_queue_using_list",
        "peekOfCode": "def fixed_priority_queue():\n    fpq = FixedPriorityQueue()\n    fpq.enqueue(0, 10)\n    fpq.enqueue(1, 70)\n    fpq.enqueue(0, 100)\n    fpq.enqueue(2, 1)\n    fpq.enqueue(2, 5)\n    fpq.enqueue(1, 7)\n    fpq.enqueue(2, 4)\n    fpq.enqueue(1, 64)",
        "detail": "python-gitbook-master..gitbook.assets.queue.priority_queue_using_list",
        "documentation": {}
    },
    {
        "label": "element_priority_queue",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.queue.priority_queue_using_list",
        "description": "python-gitbook-master..gitbook.assets.queue.priority_queue_using_list",
        "peekOfCode": "def element_priority_queue():\n    epq = ElementPriorityQueue()\n    epq.enqueue(10)\n    epq.enqueue(70)\n    epq.enqueue(100)\n    epq.enqueue(1)\n    epq.enqueue(5)\n    epq.enqueue(7)\n    epq.enqueue(4)\n    epq.enqueue(64)",
        "detail": "python-gitbook-master..gitbook.assets.queue.priority_queue_using_list",
        "documentation": {}
    },
    {
        "label": "Queue",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.queue.queue_on_list",
        "description": "python-gitbook-master..gitbook.assets.queue.queue_on_list",
        "peekOfCode": "class Queue:\n    def __init__(self):\n        self.entries = []\n        self.length = 0\n        self.front = 0\n    def __str__(self):\n        printed = \"<\" + str(self.entries)[1:-1] + \">\"\n        return printed\n    \"\"\"Enqueues {@code item}\n    @param item",
        "detail": "python-gitbook-master..gitbook.assets.queue.queue_on_list",
        "documentation": {}
    },
    {
        "label": "Queue",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.queue.queue_on_pseudo_stack",
        "description": "python-gitbook-master..gitbook.assets.queue.queue_on_pseudo_stack",
        "peekOfCode": "class Queue:\n    def __init__(self):\n        self.stack = []\n        self.length = 0\n    def __str__(self):\n        printed = \"<\" + str(self.stack)[1:-1] + \">\"\n        return printed\n    \"\"\"Enqueues {@code item}\n    @param item\n        item to enqueue\"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.queue.queue_on_pseudo_stack",
        "documentation": {}
    },
    {
        "label": "add",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.01_-_add",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.01_-_add",
        "peekOfCode": "def add(param1, param2):\n    return param1 + param2",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.01_-_add",
        "documentation": {}
    },
    {
        "label": "centuryFromYear",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.02_-_centuryFromYear",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.02_-_centuryFromYear",
        "peekOfCode": "def centuryFromYear(year):\n    return ((year - 1) // 100) + 1",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.02_-_centuryFromYear",
        "documentation": {}
    },
    {
        "label": "checkPalindrome",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.03_-_checkPalindrome (2)",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.03_-_checkPalindrome (2)",
        "peekOfCode": "def checkPalindrome(inputString):\n    return inputString == inputString[::-1]",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.03_-_checkPalindrome (2)",
        "documentation": {}
    },
    {
        "label": "checkPalindrome",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.03_-_checkPalindrome",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.03_-_checkPalindrome",
        "peekOfCode": "def checkPalindrome(inputString):\n    return inputString == inputString[::-1]",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.03_-_checkPalindrome",
        "documentation": {}
    },
    {
        "label": "adjacentElementsProduct",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.04_-_adjacentElementsProduct",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.04_-_adjacentElementsProduct",
        "peekOfCode": "def adjacentElementsProduct(inputArray):\n    max = inputArray[0] * inputArray[1]\n    for i in range(len(inputArray) - 1):\n        if inputArray[i] * inputArray[i + 1] > max:\n            max = inputArray[i] * inputArray[i + 1]\n    return max",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.04_-_adjacentElementsProduct",
        "documentation": {}
    },
    {
        "label": "shapeArea",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.05_-_shapeArea",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.05_-_shapeArea",
        "peekOfCode": "def shapeArea(n):\n    sum = n * 2 - 1\n    for i in range(1, (n * 2) - 1, 2):\n        sum += i * 2\n    return sum",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.05_-_shapeArea",
        "documentation": {}
    },
    {
        "label": "makeArrayConsecutive2",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.06_-_makeArrayConsecutive2",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.06_-_makeArrayConsecutive2",
        "peekOfCode": "def makeArrayConsecutive2(statues):\n    return max(statues) - min(statues) - len(statues) + 1",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.06_-_makeArrayConsecutive2",
        "documentation": {}
    },
    {
        "label": "almostIncreasingSequence",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.07_-_almostIncreasingSequence",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.07_-_almostIncreasingSequence",
        "peekOfCode": "def almostIncreasingSequence(sequence):\n    i = 0\n    while i < len(sequence) - 1:\n        if not sequence[i] < sequence[i + 1]:\n            if increasingSequence(\n                sequence[:i] + sequence[i + 1 :]\n            ) or increasingSequence(sequence[: i + 1] + sequence[i + 2 :]):\n                return True\n            else:\n                return False",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.07_-_almostIncreasingSequence",
        "documentation": {}
    },
    {
        "label": "increasingSequence",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.07_-_almostIncreasingSequence",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.07_-_almostIncreasingSequence",
        "peekOfCode": "def increasingSequence(sequence):\n    for i in range(len(sequence) - 1):\n        if not sequence[i] < sequence[i + 1]:\n            return False\n    return True",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.07_-_almostIncreasingSequence",
        "documentation": {}
    },
    {
        "label": "matrixElementsSum",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.08_-_matrixElementsSum",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.08_-_matrixElementsSum",
        "peekOfCode": "def matrixElementsSum(matrix):\n    if len(matrix) > 1:\n        for row in range(1, len(matrix)):\n            for room in range(len(matrix[row])):\n                if matrix[row - 1][room] == 0:\n                    matrix[row][room] = 0\n    sum = 0\n    for row in matrix:\n        for room in row:\n            sum += room",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.08_-_matrixElementsSum",
        "documentation": {}
    },
    {
        "label": "allLongestStrings",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.09_-_allLongestStrings",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.09_-_allLongestStrings",
        "peekOfCode": "def allLongestStrings(inputArray):\n    length = max([len(word) for word in inputArray])\n    result = [word for word in inputArray if len(word) == length]\n    return result",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.09_-_allLongestStrings",
        "documentation": {}
    },
    {
        "label": "commonCharacterCount",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.10_-_commonCharacterCount",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.10_-_commonCharacterCount",
        "peekOfCode": "def commonCharacterCount(s1, s2):\n    count = 0\n    word2 = list(s2)\n    for letter in s1:\n        if letter in word2:\n            word2.remove(letter)\n            count += 1\n    return count",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.10_-_commonCharacterCount",
        "documentation": {}
    },
    {
        "label": "isLucky",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.11_-_isLucky",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.11_-_isLucky",
        "peekOfCode": "def isLucky(n):\n    string = str(n)\n    top = [int(x) for x in string[: len(string) // 2]]\n    bottom = [int(x) for x in string[len(string) // 2 :]]\n    return sum(top) == sum(bottom)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.11_-_isLucky",
        "documentation": {}
    },
    {
        "label": "sortByHeight",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.12_-_sortByHeight",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.12_-_sortByHeight",
        "peekOfCode": "def sortByHeight(a):\n    treePositions = [x for x in range(len(a)) if a[x] == -1]\n    people = sorted([x for x in a if x != -1])\n    for tree in treePositions:\n        people.insert(tree, -1)\n    return people",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.12_-_sortByHeight",
        "documentation": {}
    },
    {
        "label": "reverseParentheses",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.13_-_reverseParentheses",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.13_-_reverseParentheses",
        "peekOfCode": "def reverseParentheses(s):\n    while \"(\" in s:\n        match = re.search(\"\\([^()]*\\)\", s)\n        match_string = match.group(0)[1 : len(match.group(0)) - 1]\n        reversed_match_string = match_string[::-1]\n        s = s[: match.start()] + reversed_match_string + s[match.end() :]\n    return s",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.13_-_reverseParentheses",
        "documentation": {}
    },
    {
        "label": "alternatingSums",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.14_-_alternatingSums",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.14_-_alternatingSums",
        "peekOfCode": "def alternatingSums(a):\n    team1 = sum(a[0::2])\n    team2 = sum(a[1::2])\n    return [team1, team2]",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.14_-_alternatingSums",
        "documentation": {}
    },
    {
        "label": "addBorder",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.15_-_addBorder",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.15_-_addBorder",
        "peekOfCode": "def addBorder(picture):\n    picture = [\"*\" + string + \"*\" for string in picture]\n    picture = [(\"*\" * len(picture[0]))] + picture + [(\"*\" * len(picture[0]))]\n    return picture",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.15_-_addBorder",
        "documentation": {}
    },
    {
        "label": "areSimilar",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.16_-_areSimilar",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.16_-_areSimilar",
        "peekOfCode": "def areSimilar(a, b):\n    diff = [i for i in range(len(a)) if a[i] != b[i]]\n    if len(diff) == 2:\n        b[diff[0]], b[diff[1]] = b[diff[1]], b[diff[0]]\n    return a == b",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.16_-_areSimilar",
        "documentation": {}
    },
    {
        "label": "arrayChange",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.17_-_arrayChange",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.17_-_arrayChange",
        "peekOfCode": "def arrayChange(inputArray):\n    count = 0\n    for i in range(1, len(inputArray)):\n        if inputArray[i - 1] >= inputArray[i]:\n            difference = inputArray[i - 1] - inputArray[i]\n            inputArray[i] += difference + 1\n            count += difference + 1\n    return count",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.17_-_arrayChange",
        "documentation": {}
    },
    {
        "label": "palindromeRearranging",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.18_-_palindromeRearranging",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.18_-_palindromeRearranging",
        "peekOfCode": "def palindromeRearranging(inputString):\n    inputList = sorted(inputString)\n    foundMiddle = False\n    while len(inputList) > 1:\n        if inputList[0] == inputList[1]:\n            del inputList[1]\n        elif not foundMiddle:\n            foundMiddle = True\n        else:\n            return False",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.18_-_palindromeRearranging",
        "documentation": {}
    },
    {
        "label": "areEquallyStrong",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.19_-_areEquallyStrong",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.19_-_areEquallyStrong",
        "peekOfCode": "def areEquallyStrong(yourLeft, yourRight, friendsLeft, friendsRight):\n    sameHands = yourLeft == friendsLeft and yourRight == friendsRight\n    differentHands = yourLeft == friendsRight and yourRight == friendsLeft\n    return sameHands or differentHands",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.19_-_areEquallyStrong",
        "documentation": {}
    },
    {
        "label": "arrayMaximalAdjacentDifference",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.20_-_arrayMaximalAdjacentDifference",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.20_-_arrayMaximalAdjacentDifference",
        "peekOfCode": "def arrayMaximalAdjacentDifference(inputArray):\n    diffs = []\n    for i in range(len(inputArray) - 1):\n        diffs.append(abs(inputArray[i] - inputArray[i + 1]))\n    return max(diffs)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.20_-_arrayMaximalAdjacentDifference",
        "documentation": {}
    },
    {
        "label": "isIPv4Address",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.21_-_isIPv4Address",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.21_-_isIPv4Address",
        "peekOfCode": "def isIPv4Address(inputString):\n    strings = [string for string in inputString.split(\".\")]\n    for string in strings:\n        if not string.isdecimal():\n            return False\n    nums = [int(num) for num in strings]\n    return max(nums) <= 255 and min(nums) >= 0 and len(nums) == 4",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.21_-_isIPv4Address",
        "documentation": {}
    },
    {
        "label": "avoidObstacles",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.22_-_avoidObstacles",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.22_-_avoidObstacles",
        "peekOfCode": "def avoidObstacles(inputArray):\n    for length in range(2, max(inputArray) + 2):\n        done = True\n        jump = length\n        while jump < (max(inputArray) + length):\n            if jump in inputArray:\n                done = False\n                break\n            jump += length\n        if done:",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.22_-_avoidObstacles",
        "documentation": {}
    },
    {
        "label": "boxBlur",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.23_-_boxBlur",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.23_-_boxBlur",
        "peekOfCode": "def boxBlur(image):\n    outImage = []\n    for row in range(1, len(image) - 1):\n        line = []\n        for pixel in range(1, len(image[row]) - 1):\n            total = (\n                image[row - 1][pixel - 1]\n                + image[row - 1][pixel]\n                + image[row - 1][pixel + 1]\n                + image[row][pixel - 1]",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.23_-_boxBlur",
        "documentation": {}
    },
    {
        "label": "minesweeper",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.24_-_minesweeper",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.24_-_minesweeper",
        "peekOfCode": "def minesweeper(matrix):\n    TOP = 0\n    BOTTOM = len(matrix) - 1\n    LEFT = 0\n    RIGHT = len(matrix[0]) - 1\n    outMatrix = []\n    for row in range(len(matrix)):\n        outRow = []\n        for cell in range(len(matrix[row])):\n            outRow.append(0)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.24_-_minesweeper",
        "documentation": {}
    },
    {
        "label": "arrayReplace",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.25_-_arrayReplace",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.25_-_arrayReplace",
        "peekOfCode": "def arrayReplace(inputArray, elemToReplace, substitutionElem):\n    return [x if x != elemToReplace else substitutionElem for x in inputArray]",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.25_-_arrayReplace",
        "documentation": {}
    },
    {
        "label": "evenDigitsOnly",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.26_-_evenDigitsOnly",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.26_-_evenDigitsOnly",
        "peekOfCode": "def evenDigitsOnly(n):\n    return all(\n        (True if digit in (\"0\", \"2\", \"4\", \"6\", \"8\") else False for digit in str(n))\n    )",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.26_-_evenDigitsOnly",
        "documentation": {}
    },
    {
        "label": "variableName",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.27_-_variableName",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.27_-_variableName",
        "peekOfCode": "def variableName(name):\n    return name.replace(\"_\", \"\").isalnum() and not name[0].isdigit()",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.27_-_variableName",
        "documentation": {}
    },
    {
        "label": "alphabeticShift",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.28_-_alphabeticShift",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.28_-_alphabeticShift",
        "peekOfCode": "def alphabeticShift(inputString):\n    return \"\".join([chr(ord(x) + 1) if x != \"z\" else \"a\" for x in inputString])",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.28_-_alphabeticShift",
        "documentation": {}
    },
    {
        "label": "chessBoardCellColor",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.29_-_chessBoardCellColor",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.29_-_chessBoardCellColor",
        "peekOfCode": "def chessBoardCellColor(cell1, cell2):\n    color1 = ((ord(cell1[0]) - ord(\"A\")) + ord(cell1[1]) - ord(\"1\")) % 2 == 0\n    color2 = ((ord(cell2[0]) - ord(\"A\")) + ord(cell2[1]) - ord(\"1\")) % 2 == 0\n    return color1 == color2",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.29_-_chessBoardCellColor",
        "documentation": {}
    },
    {
        "label": "circleOfNumbers",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.30_-_circleOfNumbers",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.30_-_circleOfNumbers",
        "peekOfCode": "def circleOfNumbers(n, firstNumber):\n    return (firstNumber + (n / 2)) % n",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.30_-_circleOfNumbers",
        "documentation": {}
    },
    {
        "label": "depositProfit",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.31_-_depositProfit",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.31_-_depositProfit",
        "peekOfCode": "def depositProfit(deposit, rate, threshold):\n    year = 0\n    while deposit < threshold:\n        deposit *= 1 + (rate / 100)\n        year += 1\n    return year",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.31_-_depositProfit",
        "documentation": {}
    },
    {
        "label": "absoluteValuesSumMinimization",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.32_-_absoluteValuesSumMinimization",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.32_-_absoluteValuesSumMinimization",
        "peekOfCode": "def absoluteValuesSumMinimization(a):\n    sums = {}\n    for num in a:\n        total = sum([abs(a[i] - num) for i in range(len(a))])\n        if total in sums:\n            sums[total] = min(num, sums[total])\n        else:\n            sums[total] = num\n        print(sums)\n    return sums[min(sums)]",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.32_-_absoluteValuesSumMinimization",
        "documentation": {}
    },
    {
        "label": "stringsRearrangement",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.33_-_stringsRearrangement",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.33_-_stringsRearrangement",
        "peekOfCode": "def stringsRearrangement(inputArray):\n    permutations = itertools.permutations(inputArray)\n    for array in permutations:\n        if testArrangement(array):\n            return True\n    return False\ndef testArrangement(array):\n    for i in range(len(array) - 1):\n        if sum([a != b for a, b in zip(array[i], array[i + 1])]) != 1:\n            return False",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.33_-_stringsRearrangement",
        "documentation": {}
    },
    {
        "label": "testArrangement",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.33_-_stringsRearrangement",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.33_-_stringsRearrangement",
        "peekOfCode": "def testArrangement(array):\n    for i in range(len(array) - 1):\n        if sum([a != b for a, b in zip(array[i], array[i + 1])]) != 1:\n            return False\n    return True",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.33_-_stringsRearrangement",
        "documentation": {}
    },
    {
        "label": "extractEachKth",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.34_-_extractEachKth",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.34_-_extractEachKth",
        "peekOfCode": "def extractEachKth(inputArray, k):\n    return [inputArray[x] for x in range(len(inputArray)) if (x + 1) % k != 0]",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.34_-_extractEachKth",
        "documentation": {}
    },
    {
        "label": "firstDigit",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.35_-_firstDigit",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.35_-_firstDigit",
        "peekOfCode": "def firstDigit(inputString):\n    for char in inputString:\n        if char.isdigit():\n            return char",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.35_-_firstDigit",
        "documentation": {}
    },
    {
        "label": "differentSymbolsNaive",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.36_-_differentSymbolsNaive",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.36_-_differentSymbolsNaive",
        "peekOfCode": "def differentSymbolsNaive(s):\n    return len(set(s))",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.36_-_differentSymbolsNaive",
        "documentation": {}
    },
    {
        "label": "arrayMaxConsecutiveSum",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.37_-_arrayMaxConsecutiveSum",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.37_-_arrayMaxConsecutiveSum",
        "peekOfCode": "def arrayMaxConsecutiveSum(inputArray, k):\n    sums = [sum(inputArray[:k])]\n    for i in range(1, len(inputArray) - k + 1):\n        sums.append(sums[i - 1] - inputArray[i - 1] + inputArray[i + k - 1])\n    return max(sums)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.37_-_arrayMaxConsecutiveSum",
        "documentation": {}
    },
    {
        "label": "growingPlant",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.38_-_growingPlant",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.38_-_growingPlant",
        "peekOfCode": "def growingPlant(upSpeed, downSpeed, desiredHeight):\n    height = 0\n    days = 1\n    height += upSpeed\n    while height < desiredHeight:\n        days += 1\n        height -= downSpeed\n        height += upSpeed\n    return days",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.38_-_growingPlant",
        "documentation": {}
    },
    {
        "label": "knapsackLight",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.39_-_knapsackLight",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.39_-_knapsackLight",
        "peekOfCode": "def knapsackLight(value1, weight1, value2, weight2, maxW):\n    if weight1 + weight2 <= maxW:\n        return value1 + value2\n    if weight1 <= maxW and (weight2 > maxW or value1 >= value2):\n        return value1\n    if weight2 <= maxW and (weight1 > maxW or value2 >= value1):\n        return value2\n    return 0",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.39_-_knapsackLight",
        "documentation": {}
    },
    {
        "label": "longestDigitsPrefix",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.40_-_longestDigitsPrefix",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.40_-_longestDigitsPrefix",
        "peekOfCode": "def longestDigitsPrefix(inputString):\n    for char in range(len(inputString)):\n        if not inputString[char].isdigit():\n            return inputString[:char]\n    return inputString",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.40_-_longestDigitsPrefix",
        "documentation": {}
    },
    {
        "label": "digitDegree",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.41_-_digitDegree",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.41_-_digitDegree",
        "peekOfCode": "def digitDegree(n):\n    degree = 0\n    while len(str(n)) > 1:\n        n = sum((int(digit) for digit in str(n)))\n        degree += 1\n    return degree",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.41_-_digitDegree",
        "documentation": {}
    },
    {
        "label": "bishopAndPawn",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.42_-_bishopAndPawn",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.42_-_bishopAndPawn",
        "peekOfCode": "def bishopAndPawn(bishop, pawn):\n    return abs(ord(bishop[0]) - ord(pawn[0])) == abs(ord(bishop[1]) - ord(pawn[1]))",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.42_-_bishopAndPawn",
        "documentation": {}
    },
    {
        "label": "isBeautifulString",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.43_-_isBeautifulString",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.43_-_isBeautifulString",
        "peekOfCode": "def isBeautifulString(inputString):\n    for letter in range(ord(\"a\"), ord(\"z\")):\n        if inputString.count(chr(letter)) < inputString.count(chr(letter + 1)):\n            return False\n    return True",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.43_-_isBeautifulString",
        "documentation": {}
    },
    {
        "label": "findEmailDomain",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.44_-_findEmailDomain",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.44_-_findEmailDomain",
        "peekOfCode": "def findEmailDomain(address):\n    return address[address.rfind(\"@\") + 1 :]",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.44_-_findEmailDomain",
        "documentation": {}
    },
    {
        "label": "buildPalindrome",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.45_-_buildPalindrome",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.45_-_buildPalindrome",
        "peekOfCode": "def buildPalindrome(st):\n    if st == st[::-1]:  # Check for initial palindrome\n        return st\n    index = 0\n    subStr = st[index:]\n    while subStr != subStr[::-1]:  # while substring is not a palindrome\n        index += 1\n        subStr = st[index:]\n    return st + st[index - 1 :: -1]",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.45_-_buildPalindrome",
        "documentation": {}
    },
    {
        "label": "electionsWinners",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.46_-_electionsWinners",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.46_-_electionsWinners",
        "peekOfCode": "def electionsWinners(votes, k):\n    winners = 0\n    current_winner = max(votes)\n    for candidate in votes:\n        if k > 0 and candidate + k > current_winner:\n            winners += 1\n        if k == 0 and candidate == current_winner and votes.count(candidate) == 1:\n            winners += 1\n    return winners",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.46_-_electionsWinners",
        "documentation": {}
    },
    {
        "label": "isMAC48Address",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.47_-_isMAC48Address",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.47_-_isMAC48Address",
        "peekOfCode": "def isMAC48Address(inputString):\n    hex_chars = (\n        \"1\",\n        \"2\",\n        \"3\",\n        \"4\",\n        \"5\",\n        \"6\",\n        \"7\",\n        \"8\",",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.47_-_isMAC48Address",
        "documentation": {}
    },
    {
        "label": "isDigit",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.48_-_isDigit",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.48_-_isDigit",
        "peekOfCode": "def isDigit(symbol):\n    return symbol.isdigit()",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.48_-_isDigit",
        "documentation": {}
    },
    {
        "label": "lineEncoding",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.49_-_lineEncoding",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.49_-_lineEncoding",
        "peekOfCode": "def lineEncoding(s):\n    count = 1\n    output = []\n    for char in range(1, len(s)):\n        if s[char] == s[char - 1]:\n            count += 1\n        else:\n            if count > 1:\n                output.append(str(count) + s[char - 1])\n            else:",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.49_-_lineEncoding",
        "documentation": {}
    },
    {
        "label": "chessKnight",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.50_-_chessKnight",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.50_-_chessKnight",
        "peekOfCode": "def chessKnight(cell):\n    moves = 0\n    # Starting at the top left, going counter-clockwise\n    if ord(cell[0]) >= ord(\"b\") and ord(cell[1]) <= ord(\"6\"):\n        moves += 1\n    if ord(cell[0]) >= ord(\"c\") and ord(cell[1]) <= ord(\"7\"):\n        moves += 1\n    if ord(cell[0]) >= ord(\"c\") and ord(cell[1]) >= ord(\"2\"):\n        moves += 1\n    if ord(cell[0]) >= ord(\"b\") and ord(cell[1]) >= ord(\"3\"):",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.50_-_chessKnight",
        "documentation": {}
    },
    {
        "label": "deleteDigit",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.51_-_deleteDigit",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.51_-_deleteDigit",
        "peekOfCode": "def deleteDigit(n):\n    num = str(n)\n    highest = 0\n    for digit in range(len(num)):\n        output = num[:digit] + num[digit + 1 :]\n        if int(output) > int(highest):\n            highest = output\n    return int(highest)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.51_-_deleteDigit",
        "documentation": {}
    },
    {
        "label": "longestWord",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.52_-_longestWord",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.52_-_longestWord",
        "peekOfCode": "def longestWord(text):\n    longest = []\n    word = []\n    for char in text:\n        if ord(\"A\") <= ord(char) <= ord(\"Z\") or ord(\"a\") <= ord(char) <= ord(\"z\"):\n            word.append(char)\n        else:\n            if len(word) > len(longest):\n                longest = word\n            word = []",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.52_-_longestWord",
        "documentation": {}
    },
    {
        "label": "validTime",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.53_-_validTime",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.53_-_validTime",
        "peekOfCode": "def validTime(time):\n    groups = time.split(\":\")\n    if len(groups) != 2:\n        return False\n    if not (groups[0].isdigit() and groups[1].isdigit()):\n        return False\n    if int(groups[0]) > 23 or int(groups[1]) > 59:\n        return False\n    return True",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.53_-_validTime",
        "documentation": {}
    },
    {
        "label": "sumUpNumbers",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.54_-_sumUpNumbers",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.54_-_sumUpNumbers",
        "peekOfCode": "def sumUpNumbers(inputString):\n    total = 0\n    current_num = []\n    for char in inputString:\n        if char.isdigit():\n            current_num.append(char)\n        else:\n            if len(current_num) > 0:\n                num = int(\"\".join(current_num))\n                total += num",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.54_-_sumUpNumbers",
        "documentation": {}
    },
    {
        "label": "differentSquares",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.55_-_differentSquares",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.55_-_differentSquares",
        "peekOfCode": "def differentSquares(matrix):\n    squares = set()\n    for row in range(len(matrix) - 1):\n        for cell in range(len(matrix[row]) - 1):\n            square = (\n                (matrix[row][cell], matrix[row][cell + 1]),\n                (matrix[row + 1][cell], matrix[row + 1][cell + 1]),\n            )\n            squares.add(square)\n    return len(squares)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.55_-_differentSquares",
        "documentation": {}
    },
    {
        "label": "digitsProduct",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.56_-_digitsProduct",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.56_-_digitsProduct",
        "peekOfCode": "def digitsProduct(product):\n    # New idea: add product to factors\n    # while max(factors) > 10: split that num into factors\n    if product == 0:\n        return 10\n    factors = [product]\n    while max(factors) > 9:\n        factored = findFactors(max(factors))\n        if factored:\n            factors.remove(max(factors))",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.56_-_digitsProduct",
        "documentation": {}
    },
    {
        "label": "findFactors",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.56_-_digitsProduct",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.56_-_digitsProduct",
        "peekOfCode": "def findFactors(n):\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return i, n // i\n    return False",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.56_-_digitsProduct",
        "documentation": {}
    },
    {
        "label": "fileNaming",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.57_-_fileNaming",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.57_-_fileNaming",
        "peekOfCode": "def fileNaming(names):\n    outnames = []\n    for name in names:\n        if name in outnames:\n            k = 1\n            while \"{}({})\".format(name, k) in outnames:\n                k += 1\n            name = \"{}({})\".format(name, k)\n        outnames.append(name)\n    return outnames",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.57_-_fileNaming",
        "documentation": {}
    },
    {
        "label": "messageFromBinaryCode",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.58_-_messageFromBinaryCode",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.58_-_messageFromBinaryCode",
        "peekOfCode": "def messageFromBinaryCode(code):\n    output = []\n    for i in range(0, len(code), 8):\n        letter = chr(int(code[i : i + 8], 2))\n        output.append(letter)\n    return \"\".join(output)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.58_-_messageFromBinaryCode",
        "documentation": {}
    },
    {
        "label": "spiralNumbers",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.59_-_spiralNumbers",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.59_-_spiralNumbers",
        "peekOfCode": "def spiralNumbers(n):\n    LEFT = \"left\"\n    RIGHT = \"right\"\n    UP = \"up\"\n    DOWN = \"down\"\n    direction = RIGHT\n    spiral = [[0 for i in range(n)] for j in range(n)]\n    row = 0\n    cell = 0\n    for num in range(1, (n * n) + 1):",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.59_-_spiralNumbers",
        "documentation": {}
    },
    {
        "label": "sudoku",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.60_-_sudoku",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.60_-_sudoku",
        "peekOfCode": "def sudoku(grid):\n    match = [i for i in range(1, 10)]\n    for row in grid:\n        if sorted(row) != match:\n            return False\n    for column_index in range(9):\n        column = [grid[row_index][column_index] for row_index in range(9)]\n        if sorted(column) != match:\n            return False\n    for row in range(0, 9, 3):",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.60_-_sudoku",
        "documentation": {}
    },
    {
        "label": "addTwoHugeNumbers",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.addTwoHugeNumbers",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.addTwoHugeNumbers",
        "peekOfCode": "def addTwoHugeNumbers(a, b):\n    lst_a = {}\n    lst_b = {}\n    i = 0\n    while a.value != None:\n        i += 1\n        lst_a[i] = a.value\n        if a.next != None:\n            a = a.next\n        else:",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.addTwoHugeNumbers",
        "documentation": {}
    },
    {
        "label": "csAlphanumericRestriction",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.alpha",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.alpha",
        "peekOfCode": "def csAlphanumericRestriction(input_str): #c is every char in\ninput string\nis_numeric = False\nis_alpha = False\nfor c in input_str:\n% if c.isnumeric():\nis_numeric = True\nelif c.isalpha():\nis_alpha = True\nelse:",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.alpha",
        "documentation": {}
    },
    {
        "label": "is_numeric",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.alpha",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.alpha",
        "peekOfCode": "is_numeric = False\nis_alpha = False\nfor c in input_str:\n% if c.isnumeric():\nis_numeric = True\nelif c.isalpha():\nis_alpha = True\nelse:\n‘ return False\nreturn (is_numeric and not is_alpha) or (is_alpha and not",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.alpha",
        "documentation": {}
    },
    {
        "label": "is_alpha",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.alpha",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.alpha",
        "peekOfCode": "is_alpha = False\nfor c in input_str:\n% if c.isnumeric():\nis_numeric = True\nelif c.isalpha():\nis_alpha = True\nelse:\n‘ return False\nreturn (is_numeric and not is_alpha) or (is_alpha and not\nis_numeric)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.alpha",
        "documentation": {}
    },
    {
        "label": "is_numeric",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.alpha",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.alpha",
        "peekOfCode": "is_numeric = True\nelif c.isalpha():\nis_alpha = True\nelse:\n‘ return False\nreturn (is_numeric and not is_alpha) or (is_alpha and not\nis_numeric)\nI",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.alpha",
        "documentation": {}
    },
    {
        "label": "is_alpha",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.alpha",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.alpha",
        "peekOfCode": "is_alpha = True\nelse:\n‘ return False\nreturn (is_numeric and not is_alpha) or (is_alpha and not\nis_numeric)\nI",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.alpha",
        "documentation": {}
    },
    {
        "label": "csAnythingButFive",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.anithingButFive",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.anithingButFive",
        "peekOfCode": "def csAnythingButFive(start, end):\n    count = 0\n    new_list = []\n    for num in range(start, end + 1):\n        str_num = str(num)\n        if \"5\" in str_num:\n            continue\n        count += 1\n    return count\nprint(csAnythingButFive(1, 5))",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.anithingButFive",
        "documentation": {}
    },
    {
        "label": "csBinaryToASCII",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.bin-2-ascii",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.bin-2-ascii",
        "peekOfCode": "def csBinaryToASCII(binary):\n    string_blocks = (binary[i : i + 8] for i in range(0, len(binary), 8))\n    string = \"\".join(chr(int(char, 2)) for char in string_blocks)\n    return string\nprint(csBinaryToASCII(\"011011000110000101101101011000100110010001100001\"))",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.bin-2-ascii",
        "documentation": {}
    },
    {
        "label": "csBinaryToASCII",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.binaryToASCII",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.binaryToASCII",
        "peekOfCode": "def csBinaryToASCII(binary):\n    binary_letters = []\n    letters = \"\"\n    if binary == \"\":\n        return \"\"\n    for index in range(0, len(binary), 8):\n        binary_letters.append(binary[index : index + 8])\n    print(binary_letters)\n    for string in binary_letters:\n        binary_int = v = chr(int(string, 2))",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.binaryToASCII",
        "documentation": {}
    },
    {
        "label": "checkBlanagrams",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.blanagrams",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.blanagrams",
        "peekOfCode": "def checkBlanagrams(word1, word2):\n    lenWord1 = len(word1)\n    lenWord2 = len(word2)\n    # To store the frequencies of characters\n    # of string word1 and word2\n    freq1 = [0] * 26\n    freq2 = [0] * 26\n    # To store the count of valid pairs\n    count = 0\n    # Update the frequencies of the characters of string word1",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.blanagrams",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "peekOfCode": "class Node:\n    def __init__(self, value):\n        self.value = value\nn = Node(10)\n# [10]\n# lets make a linked list node\nclass LLNode:\n    def __init__(self, value):\n        self.value = value\n        self.next = None",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "documentation": {}
    },
    {
        "label": "LLNode",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "peekOfCode": "class LLNode:\n    def __init__(self, value):\n        self.value = value\n        self.next = None\nl = LLNode(10)\n# [10] -> None\n# lets refactor the linked list node to be a doubly linked list node\nclass DLLNode:\n    def __init__(self, value):\n        self.value = value",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "documentation": {}
    },
    {
        "label": "DLLNode",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "peekOfCode": "class DLLNode:\n    def __init__(self, value):\n        self.value = value\n        self.next = None\n        self.prev = None\ndl = DLLNode(10)\n# None <- [10] -> None\n# Lets refactor the doubly linked list node to be a binary tree node\nclass BTNode:\n    def __init__(self, value):",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "documentation": {}
    },
    {
        "label": "BTNode",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "peekOfCode": "class BTNode:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\nbt = BTNode(10)\nbt.left = BTNode(34)\nbt.right = BTNode(12)\n\"\"\"\n[12, 34, 1, 56, 1]",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "documentation": {}
    },
    {
        "label": "BSTNode",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "peekOfCode": "class BSTNode:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n    def insert(self, value):\n        # left case\n        if value < self.value:\n            if self.left is None:\n                self.left = BSTNode(value)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "documentation": {}
    },
    {
        "label": "BinaryTreeNode",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "peekOfCode": "class BinaryTreeNode:\n    def __init__(self, value=0, left=None, right=None):\n        self.value = value\n        self.left = left\n        self.right = right\n\"\"\"\nr = 5\nlh = 1\nrh = \nr1 = 12",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "documentation": {}
    },
    {
        "label": "maxDepthR",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "peekOfCode": "def maxDepthR(self, root):\n    if root is None:\n        return 0\n    else:\n        left_height = self.maxDepthR(root.left)\n        right_height = self.maxDepthR(root.right)\n        return max(left_height, right_height) + 1\ndef maxDepthI(self, root):\n    # Your c\n    pass",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "documentation": {}
    },
    {
        "label": "maxDepthI",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "peekOfCode": "def maxDepthI(self, root):\n    # Your c\n    pass",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "peekOfCode": "n = Node(10)\n# [10]\n# lets make a linked list node\nclass LLNode:\n    def __init__(self, value):\n        self.value = value\n        self.next = None\nl = LLNode(10)\n# [10] -> None\n# lets refactor the linked list node to be a doubly linked list node",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "documentation": {}
    },
    {
        "label": "l",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "peekOfCode": "l = LLNode(10)\n# [10] -> None\n# lets refactor the linked list node to be a doubly linked list node\nclass DLLNode:\n    def __init__(self, value):\n        self.value = value\n        self.next = None\n        self.prev = None\ndl = DLLNode(10)\n# None <- [10] -> None",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "documentation": {}
    },
    {
        "label": "dl",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "peekOfCode": "dl = DLLNode(10)\n# None <- [10] -> None\n# Lets refactor the doubly linked list node to be a binary tree node\nclass BTNode:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\nbt = BTNode(10)\nbt.left = BTNode(34)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "documentation": {}
    },
    {
        "label": "bt",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "peekOfCode": "bt = BTNode(10)\nbt.left = BTNode(34)\nbt.right = BTNode(12)\n\"\"\"\n[12, 34, 1, 56, 1]\n        [12]\n      /      \\\n     [1]      [34]\n    /         /   \\\n  [1]      [12]    [56]",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "documentation": {}
    },
    {
        "label": "bt.left",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "peekOfCode": "bt.left = BTNode(34)\nbt.right = BTNode(12)\n\"\"\"\n[12, 34, 1, 56, 1]\n        [12]\n      /      \\\n     [1]      [34]\n    /         /   \\\n  [1]      [12]    [56]\n          /  \\",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "documentation": {}
    },
    {
        "label": "bt.right",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "peekOfCode": "bt.right = BTNode(12)\n\"\"\"\n[12, 34, 1, 56, 1]\n        [12]\n      /      \\\n     [1]      [34]\n    /         /   \\\n  [1]      [12]    [56]\n          /  \\\n        n     n",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "peekOfCode": "t = BSTNode(10)\nt.insert(20)\nt.insert(15)\nresult = t.search(15)\nprint(result)\n# result [15]\n#        /  \\\n#       n    n\n#\n#        [10] s",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "peekOfCode": "result = t.search(15)\nprint(result)\n# result [15]\n#        /  \\\n#       n    n\n#\n#        [10] s\n#       /    \\\n#      n      [20] s\n#             /   \\",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "documentation": {}
    },
    {
        "label": "max_depth",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "peekOfCode": "max_depth = 2\nleft_height = 0\nright_height = 0\n- if there is no root node then return a zero\n- otherwise\n  - set a left height based on a call to the max depth on the left node\n  - set a right height based on a call to the max depth on the right node\n  - get the max of the left height and the right height then return that plus 1\n** iterative version **\n- create a stack to simulate the call stack",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "documentation": {}
    },
    {
        "label": "left_height",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "peekOfCode": "left_height = 0\nright_height = 0\n- if there is no root node then return a zero\n- otherwise\n  - set a left height based on a call to the max depth on the left node\n  - set a right height based on a call to the max depth on the right node\n  - get the max of the left height and the right height then return that plus 1\n** iterative version **\n- create a stack to simulate the call stack\n- if the root node is not none",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "documentation": {}
    },
    {
        "label": "right_height",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "peekOfCode": "right_height = 0\n- if there is no root node then return a zero\n- otherwise\n  - set a left height based on a call to the max depth on the left node\n  - set a right height based on a call to the max depth on the right node\n  - get the max of the left height and the right height then return that plus 1\n** iterative version **\n- create a stack to simulate the call stack\n- if the root node is not none\n  - append the root node to the stack and also the height of that node (1, root)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "documentation": {}
    },
    {
        "label": "max_depth",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "peekOfCode": "max_depth = 0\n- while the stack is not empty\n  pop the tuple off the stack, extracting the current_depth and the root_node\n  - if the root_node is not none\n    set max_depth to the max of current_depth and the max_depth\n    - push the data of (max_depth + 1, root_node.left) on to the stack\n    - push the data of (max_depth + 1, root_node.right) on to the stack\nreturn the max_depth to the caller\n    5   \n   / \\",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "peekOfCode": "r = 5\nlh = 1\nrh = \nr1 = 12\nlh1 = 1\nrh1 = 1\nr2 = None\nr3 = None\nr4 = 32\nlh = 1",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "documentation": {}
    },
    {
        "label": "lh",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "peekOfCode": "lh = 1\nrh = \nr1 = 12\nlh1 = 1\nrh1 = 1\nr2 = None\nr3 = None\nr4 = 32\nlh = 1\nrh = 1",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "documentation": {}
    },
    {
        "label": "rh",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "peekOfCode": "rh = \nr1 = 12\nlh1 = 1\nrh1 = 1\nr2 = None\nr3 = None\nr4 = 32\nlh = 1\nrh = 1\nr5 = 8",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "documentation": {}
    },
    {
        "label": "r1",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "peekOfCode": "r1 = 12\nlh1 = 1\nrh1 = 1\nr2 = None\nr3 = None\nr4 = 32\nlh = 1\nrh = 1\nr5 = 8\nlh = 0",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "documentation": {}
    },
    {
        "label": "lh1",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "peekOfCode": "lh1 = 1\nrh1 = 1\nr2 = None\nr3 = None\nr4 = 32\nlh = 1\nrh = 1\nr5 = 8\nlh = 0\nrh = 0",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "documentation": {}
    },
    {
        "label": "rh1",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "peekOfCode": "rh1 = 1\nr2 = None\nr3 = None\nr4 = 32\nlh = 1\nrh = 1\nr5 = 8\nlh = 0\nrh = 0\nr6 = None",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "documentation": {}
    },
    {
        "label": "r2",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "peekOfCode": "r2 = None\nr3 = None\nr4 = 32\nlh = 1\nrh = 1\nr5 = 8\nlh = 0\nrh = 0\nr6 = None\nr7 = None",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "documentation": {}
    },
    {
        "label": "r3",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "peekOfCode": "r3 = None\nr4 = 32\nlh = 1\nrh = 1\nr5 = 8\nlh = 0\nrh = 0\nr6 = None\nr7 = None\nr8 = 4",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "documentation": {}
    },
    {
        "label": "r4",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "peekOfCode": "r4 = 32\nlh = 1\nrh = 1\nr5 = 8\nlh = 0\nrh = 0\nr6 = None\nr7 = None\nr8 = 4\nlh = 0",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "documentation": {}
    },
    {
        "label": "lh",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "peekOfCode": "lh = 1\nrh = 1\nr5 = 8\nlh = 0\nrh = 0\nr6 = None\nr7 = None\nr8 = 4\nlh = 0\nrh = 0",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "documentation": {}
    },
    {
        "label": "rh",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "peekOfCode": "rh = 1\nr5 = 8\nlh = 0\nrh = 0\nr6 = None\nr7 = None\nr8 = 4\nlh = 0\nrh = 0\nr9 = None",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "documentation": {}
    },
    {
        "label": "r5",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "peekOfCode": "r5 = 8\nlh = 0\nrh = 0\nr6 = None\nr7 = None\nr8 = 4\nlh = 0\nrh = 0\nr9 = None\nr10 = None",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "documentation": {}
    },
    {
        "label": "lh",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "peekOfCode": "lh = 0\nrh = 0\nr6 = None\nr7 = None\nr8 = 4\nlh = 0\nrh = 0\nr9 = None\nr10 = None\n\"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "documentation": {}
    },
    {
        "label": "rh",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "peekOfCode": "rh = 0\nr6 = None\nr7 = None\nr8 = 4\nlh = 0\nrh = 0\nr9 = None\nr10 = None\n\"\"\"\ndef maxDepthR(self, root):",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "documentation": {}
    },
    {
        "label": "r6",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "peekOfCode": "r6 = None\nr7 = None\nr8 = 4\nlh = 0\nrh = 0\nr9 = None\nr10 = None\n\"\"\"\ndef maxDepthR(self, root):\n    if root is None:",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "documentation": {}
    },
    {
        "label": "r7",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "peekOfCode": "r7 = None\nr8 = 4\nlh = 0\nrh = 0\nr9 = None\nr10 = None\n\"\"\"\ndef maxDepthR(self, root):\n    if root is None:\n        return 0",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "documentation": {}
    },
    {
        "label": "r8",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "peekOfCode": "r8 = 4\nlh = 0\nrh = 0\nr9 = None\nr10 = None\n\"\"\"\ndef maxDepthR(self, root):\n    if root is None:\n        return 0\n    else:",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "documentation": {}
    },
    {
        "label": "lh",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "peekOfCode": "lh = 0\nrh = 0\nr9 = None\nr10 = None\n\"\"\"\ndef maxDepthR(self, root):\n    if root is None:\n        return 0\n    else:\n        left_height = self.maxDepthR(root.left)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "documentation": {}
    },
    {
        "label": "rh",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "peekOfCode": "rh = 0\nr9 = None\nr10 = None\n\"\"\"\ndef maxDepthR(self, root):\n    if root is None:\n        return 0\n    else:\n        left_height = self.maxDepthR(root.left)\n        right_height = self.maxDepthR(root.right)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "documentation": {}
    },
    {
        "label": "r9",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "peekOfCode": "r9 = None\nr10 = None\n\"\"\"\ndef maxDepthR(self, root):\n    if root is None:\n        return 0\n    else:\n        left_height = self.maxDepthR(root.left)\n        right_height = self.maxDepthR(root.right)\n        return max(left_height, right_height) + 1",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "documentation": {}
    },
    {
        "label": "r10",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "peekOfCode": "r10 = None\n\"\"\"\ndef maxDepthR(self, root):\n    if root is None:\n        return 0\n    else:\n        left_height = self.maxDepthR(root.left)\n        right_height = self.maxDepthR(root.right)\n        return max(left_height, right_height) + 1\ndef maxDepthI(self, root):",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.bst",
        "documentation": {}
    },
    {
        "label": "add",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.challenges",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.challenges",
        "peekOfCode": "def add(a, b):\n    return a + b\nprint(add(3, 2))\n# \"\"\"\n# Challenge #2:\n# Write a function that takes an integer `minutes` and converts it to seconds.\n# Examples:\n# - convert(5) ➞ 300\n# - convert(3) ➞ 180\n# - convert(2) ➞ 120",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.challenges",
        "documentation": {}
    },
    {
        "label": "convert",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.challenges",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.challenges",
        "peekOfCode": "def convert(minutes):\n    return minutes * 60\nprint(convert(5))\n# \"\"\"\n# Challenge #3:\n# Create a function that takes a string and returns it as an integer.\n# Examples:\n# - string_int(\"6\") ➞ 6\n# - string_int(\"1000\") ➞ 1000\n# - string_int(\"12\") ➞ 12",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.challenges",
        "documentation": {}
    },
    {
        "label": "string_int",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.challenges",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.challenges",
        "peekOfCode": "def string_int(txt):\n    return int(txt)\nprint(string_int(\"6\"))\nprint(string_int(\"1000\"))\nprint(string_int(\"12\"))\n# \"\"\"\n# Challenge #4:\n# Create a function that takes length and width and finds the perimeter of a\n# rectangle.\n# Examples:",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.challenges",
        "documentation": {}
    },
    {
        "label": "csCheckPalindrome",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.check-palindrome",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.check-palindrome",
        "peekOfCode": "def csCheckPalindrome(input_str):\n    if input_str[::-1] == input_str:\n        return True\n    return False",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.check-palindrome",
        "documentation": {}
    },
    {
        "label": "concatenateArrays",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.concatenateArrays",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.concatenateArrays",
        "peekOfCode": "def concatenateArrays(a, b):\n    return a + b",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.concatenateArrays",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.condense_linked_list",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.condense_linked_list",
        "peekOfCode": "class ListNode(object):\n  def __init__(self, x):\n    self.value = x\n    self.next = None\ndef condense_linked_list(node):\n   root = ListNode(0)\n   root.next = head\n         p1 = head\n            if p1 is None:\n            return root.next",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.condense_linked_list",
        "documentation": {}
    },
    {
        "label": "condense_linked_list",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.condense_linked_list",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.condense_linked_list",
        "peekOfCode": "def condense_linked_list(node):\n   root = ListNode(0)\n   root.next = head\n         p1 = head\n            if p1 is None:\n            return root.next\n        p = p1.next\n        if p is None:\n            return root.next\n        while p:",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.condense_linked_list",
        "documentation": {}
    },
    {
        "label": "plus_one",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_arraysandstrings",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_arraysandstrings",
        "peekOfCode": "def plus_one(digits):\n    # Your code here\n    n = len(digits)\n    # iterate over the list from right to left\n    for i in range(n - 1, -1, -1):\n        # idx = n - 1 - i\n        idx = i\n        # if the current digit is a 9 then set it to a 0\n        if digits[idx] == 9:\n            digits[idx] = 0",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_arraysandstrings",
        "documentation": {}
    },
    {
        "label": "16Bits",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_arraysandstrings",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_arraysandstrings",
        "peekOfCode": "16Bits = 2Bytes\n8Bit, 16Bit, 32Bit, 64Bit, 128Bit\n```\n[123, \"hello\" ]\nA = [\"Hello\", 232, 100]\nA[0] -> @A + offest 0 * 2\nA[1] -> @A + offset 1 * 2 => 100 + 1 * 2\noffest = base addr * size of data in bucket\n          128 64 32 16 8 4 2 1\n00000000   0  1   1  1 1 0 1 1",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_arraysandstrings",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_arraysandstrings",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_arraysandstrings",
        "peekOfCode": "A = [\"Hello\", 232, 100]\nA[0] -> @A + offest 0 * 2\nA[1] -> @A + offset 1 * 2 => 100 + 1 * 2\noffest = base addr * size of data in bucket\n          128 64 32 16 8 4 2 1\n00000000   0  1   1  1 1 0 1 1\n```\n```\n[\n0x100: 00000000",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_arraysandstrings",
        "documentation": {}
    },
    {
        "label": "offest",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_arraysandstrings",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_arraysandstrings",
        "peekOfCode": "offest = base addr * size of data in bucket\n          128 64 32 16 8 4 2 1\n00000000   0  1   1  1 1 0 1 1\n```\n```\n[\n0x100: 00000000\n0x101: 01111011\n0x102:\n0x103:",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_arraysandstrings",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_arraysandstrings",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_arraysandstrings",
        "peekOfCode": "a = [(\"bob\", (1, 2, 3, \"dave\"), [{\"bob\": [1, 2, \"Hello\"]}], (123, 22)), (2.7), \"bob\"]\na[0][1][3][1]\n[] -> () -> 1 2 3\n```\n()\n1\n2\n3\n# **CODE**: 3672\n\"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_arraysandstrings",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_arraysandstrings",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_arraysandstrings",
        "peekOfCode": "n = 3\nidx = 3 - 1 - 2\n\"\"\"\ndef plus_one(digits):\n    # Your code here\n    n = len(digits)\n    # iterate over the list from right to left\n    for i in range(n - 1, -1, -1):\n        # idx = n - 1 - i\n        idx = i",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_arraysandstrings",
        "documentation": {}
    },
    {
        "label": "idx",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_arraysandstrings",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_arraysandstrings",
        "peekOfCode": "idx = 3 - 1 - 2\n\"\"\"\ndef plus_one(digits):\n    # Your code here\n    n = len(digits)\n    # iterate over the list from right to left\n    for i in range(n - 1, -1, -1):\n        # idx = n - 1 - i\n        idx = i\n        # if the current digit is a 9 then set it to a 0",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_arraysandstrings",
        "documentation": {}
    },
    {
        "label": "HashTable",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46ht",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46ht",
        "peekOfCode": "class HashTable:\n# \"\"\"\n# A hash table with `capacity` buckets\n# that accepts string keys\n# \"\"\"\ndef __init__(self, capacity):\n    self.capacity = capacity  # Number of buckets in the hash table\n    self.storage = [None] * capacity\n    self.item_count = 0\ndef djb2(self, key):",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46ht",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46ht",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46ht",
        "peekOfCode": "class ListNode:\n    def __init__(self, key, value):\n        self.key = key\n        self.value = value\n        self.next = None\nclass MyHashTable:\n    def __init__(self):\n        # Your code here\n        self.capacity = 1000\n        self.size = 0# Number of buckets in the hash table",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46ht",
        "documentation": {}
    },
    {
        "label": "MyHashTable",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46ht",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46ht",
        "peekOfCode": "class MyHashTable:\n    def __init__(self):\n        # Your code here\n        self.capacity = 1000\n        self.size = 0# Number of buckets in the hash table\n        self.storage = [None] * self.capacity\n    # Your code here\n    def put(self, key, value):\n        # Your code here\n        index = self.hash_index(key)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46ht",
        "documentation": {}
    },
    {
        "label": "my_hash",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46ht",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46ht",
        "peekOfCode": "def my_hash(key):\n  sum = 0\n  for c in key:\n    sum += ord(c)\n  return sum\ndef my_hash2(key):\n  sum = 0\n  string_bytes = key.encode()\n  for b in string_bytes:\n    sum += b",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46ht",
        "documentation": {}
    },
    {
        "label": "my_hash2",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46ht",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46ht",
        "peekOfCode": "def my_hash2(key):\n  sum = 0\n  string_bytes = key.encode()\n  for b in string_bytes:\n    sum += b\n  return sum\n# print(my_hash(\"ABC\"))\n# print(my_hash2(\"ABC\"))\n# djb2\n# encode key",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46ht",
        "documentation": {}
    },
    {
        "label": "djb2",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46ht",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46ht",
        "peekOfCode": "def djb2(key):\n  str_key = str(key).encode()\n  hash_value = 5381\n  for b in str_key:\n    # shifted_value = hash_value << 5\n    # add_shift = shifted_value + hash_value\n    # total_hash = add_shift + b\n    # total_hash &= 0xffffffff # 0b11111111111111111111111111111111 32bits\n    # final_hash = total_hash & 0xffffffff\n    hash_value = ((hash_value << 5) + hash_value) + b",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46ht",
        "documentation": {}
    },
    {
        "label": "djb2",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46ht",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46ht",
        "peekOfCode": "def djb2(self, key):\n    \"\"\"\n    DJB2 hash, 32-bit\n    \"\"\"\n    # Cast the key to a string and get bytes\n    str_key = str(key).encode()\n    # Start from an arbitrary large prime\n    hash_value = 5381\n    # Bit-shift and sum value for each character\n    for b in str_key:",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46ht",
        "documentation": {}
    },
    {
        "label": "hash_index",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46ht",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46ht",
        "peekOfCode": "def hash_index(self, key):\n    \"\"\"\n    Take an arbitrary key and return a valid integer index\n    between within the storage capacity of the hash table.\n    \"\"\"\n    return self.djb2(key) % self.capacity\ndef put(self, key, value):\n    \"\"\"\n    Store the value with the given key.\n    \"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46ht",
        "documentation": {}
    },
    {
        "label": "put",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46ht",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46ht",
        "peekOfCode": "def put(self, key, value):\n    \"\"\"\n    Store the value with the given key.\n    \"\"\"\n    index = self.hash_index(key)\n    self.storage[index] = value\n    return\ndef delete(self, key):\n    \"\"\"\n    Remove the value stored with the given key.",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46ht",
        "documentation": {}
    },
    {
        "label": "delete",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46ht",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46ht",
        "peekOfCode": "def delete(self, key):\n    \"\"\"\n    Remove the value stored with the given key.\n    \"\"\"\n    index = self.hash_index(key)\n    self.storage[index] = None\ndef get(self, key):\n# \"\"\"\n#     Retrieve the value stored with the given key.\n#     Returns None if the key is not found.",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46ht",
        "documentation": {}
    },
    {
        "label": "get",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46ht",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46ht",
        "peekOfCode": "def get(self, key):\n# \"\"\"\n#     Retrieve the value stored with the given key.\n#     Returns None if the key is not found.\n#     \"\"\"\n    index = self.hash_index(key)\n    return self.storage[index]\n\"\"\"# CODE 7506\n# Demo\n\"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46ht",
        "documentation": {}
    },
    {
        "label": "my_hash_number",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46ht",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46ht",
        "peekOfCode": "my_hash_number = djb2(\"ABCD\")\nprint(my_hash_number)\nstorage = [None] * 10\n\"\"\"# CODE 7506\n\"\"\"\nclass HashTable:\n# \"\"\"\n# A hash table with `capacity` buckets\n# that accepts string keys\n# \"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46ht",
        "documentation": {}
    },
    {
        "label": "storage",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46ht",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46ht",
        "peekOfCode": "storage = [None] * 10\n\"\"\"# CODE 7506\n\"\"\"\nclass HashTable:\n# \"\"\"\n# A hash table with `capacity` buckets\n# that accepts string keys\n# \"\"\"\ndef __init__(self, capacity):\n    self.capacity = capacity  # Number of buckets in the hash table",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46ht",
        "documentation": {}
    },
    {
        "label": "hash_table",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46ht",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46ht",
        "peekOfCode": "hash_table = MyHashTable();\nhash_table.put(\"a\", 1);\nhash_table.put(\"b\", 2);\nhash_table.get(\"a\");            // returns 1\nhash_table.get(\"c\");            // returns -1 (not found)\nhash_table.put(\"b\", 1);         // update the existing value\nhash_table.get(\"b\");            // returns 1\nhash_table.remove(\"b\");         // remove the mapping for 2\nhash_table.get(\"b\");            // returns -1 (not found)\n```",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46ht",
        "documentation": {}
    },
    {
        "label": "greet",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "peekOfCode": "def greet(name=\"world!\"):\n  print(type(name))\n  print(f\"Hello {name}\")\ngreet(\"1234\")\n# lets play with some strings\n# ['capitalize', 'casefold', 'center', 'count', 'encode', 'endswith', 'expandtabs', 'find', 'format', 'format_map', 'index', 'isalnum', 'isalpha', 'isascii', 'isdecimal', 'isdigit', 'isidentifier', 'islower', 'isnumeric', 'isprintable', 'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lower', 'lstrip', 'maketrans', 'partition', 'replace', 'rfind', 'rindex', 'rjust', 'rpartition', 'rsplit', 'rstrip', 'split', 'splitlines', 'startswith', 'strip', 'swapcase', 'title', 'translate', 'upper', 'zfill']\n# print(dir(\"\"))\n# print(help(\"\".count))\na = \"aabbccqqZbqq\".swapcase()\nfor c in a:",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "documentation": {}
    },
    {
        "label": "addition",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "peekOfCode": "def addition(a, b):\n    # Your code here\n  try:\n    a = int(a)\n    b = int(b)\n    return a + b\n  except:\n    print(\"please supply valid integer arguments\")\n    return 0\n# tests",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "documentation": {}
    },
    {
        "label": "convert",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "peekOfCode": "def convert(minutes):\n    # Your code here\n    return minutes * 60\nprint(convert(5)) #  ➞ 300\nprint(convert(3)) #  ➞ 180\nprint(convert(2)) # ➞ 120\n\"\"\"\nChallenge #3:\nCreate a function that takes a string and returns it as an integer.\nExamples:",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "documentation": {}
    },
    {
        "label": "string_int",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "peekOfCode": "def string_int(txt):\n    # Your code here\n\"\"\"\nChallenge #4:\nCreate a function that takes length and width and finds the perimeter of a\nrectangle.\nExamples:\n- find_perimeter(6, 7) ➞ 26\n- find_perimeter(20, 10) ➞ 60\n- find_perimeter(2, 9) ➞ 22",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "documentation": {}
    },
    {
        "label": "find_perimeter",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "peekOfCode": "def find_perimeter(length, width):\n  result = (length * 2) + (width * 2)\n  return result\n# tests\nprint(find_perimeter(6, 7)) # ➞ 26\nprint(find_perimeter(20, 10)) # ➞ 60\nprint(find_perimeter(2, 9)) # ➞ 22\n\"\"\"\nChallenge #5:\nCreate a function that returns a list of strings sorted by length in ascending",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "documentation": {}
    },
    {
        "label": "sort_by_length",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "peekOfCode": "def sort_by_length(lst):\n  \"\"\"\n    sort a list of stringe using the length of each string as the key\n    input: lst -> list(str)\n    output: -> list(str)\n  \"\"\"\n  return sorted(lst, key=len)\n\"\"\"\nChallenge #6:\nCreate a function that takes a string, checks if it has the same number of \"x\"s",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "documentation": {}
    },
    {
        "label": "XO",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "peekOfCode": "def XO(txt):\n\"\"\"\nChallenge #7:\nGiven an unsorted list, create a function that returns the nth smallest element\n(the smallest element is the first smallest, the second smallest element is the\nsecond smallest, etc).\nExamples:\n- nth_smallest([7, 5, 3, 1], 1) ➞ 1\n- nth_smallest([1, 3, 5, 7], 3) ➞ 5\n- nth_smallest([1, 3, 5, 7], 5) ➞ None",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "documentation": {}
    },
    {
        "label": "nth_smallest",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "peekOfCode": "def nth_smallest(lst, n):\n\"\"\"\nChallenge #8:\nCreate a function that returns the number of arguments it was called with.\nExamples:\n- num_args() ➞ 0\n- num_args(\"foo\") ➞ 1\n- num_args(\"foo\", \"bar\") ➞ 2\n- num_args(True, False) ➞ 2\n- num_args({}) ➞ 1",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "documentation": {}
    },
    {
        "label": "num_args",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "peekOfCode": "def num_args():\n\"\"\"\nChallenge #9:\nWrite a function that creates a dictionary with each (key, value) pair being\nthe (lower case, upper case) versions of a letter, respectively.\nExamples:\n- mapping([\"p\", \"s\"]) ➞ { \"p\": \"P\", \"s\": \"S\" }\n- mapping([\"a\", \"b\", \"c\"]) ➞ { \"a\": \"A\", \"b\": \"B\", \"c\": \"C\" }\n- mapping([\"a\", \"v\", \"y\", \"z\"]) ➞ { \"a\": \"A\", \"v\": \"V\", \"y\": \"Y\", \"z\": \"Z\" }\nNotes:",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "documentation": {}
    },
    {
        "label": "mapping",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "peekOfCode": "def mapping(letters):\n\"\"\"\nChallenge #10:\nCreate a function that applies a discount d to every number in the list.\nExamples:\n- get_discounts([2, 4, 6, 11], \"50%\") ➞ [1, 2, 3, 5.5]\n- get_discounts([10, 20, 40, 80], \"75%\") ➞ [7.5, 15, 30, 60]\n- get_discounts([100], \"45%\") ➞ [45]\nNotes:\n- The discount is the percentage of the original price (i.e the discount of",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "documentation": {}
    },
    {
        "label": "get_discounts",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "peekOfCode": "def get_discounts(nums, percentage):",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "peekOfCode": "a = 10\na = \"a string\"\na = 1.2\na = []\na = ()\na = {\"name\": \"Tom\"}\nb = []\nb.append(\"Dave\")\nb.append(\"Bob\")\nb.append(\"Joe\")",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "peekOfCode": "a = \"a string\"\na = 1.2\na = []\na = ()\na = {\"name\": \"Tom\"}\nb = []\nb.append(\"Dave\")\nb.append(\"Bob\")\nb.append(\"Joe\")\n# print(type(a))",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "peekOfCode": "a = 1.2\na = []\na = ()\na = {\"name\": \"Tom\"}\nb = []\nb.append(\"Dave\")\nb.append(\"Bob\")\nb.append(\"Joe\")\n# print(type(a))\n# print(a[\"name\"])",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "peekOfCode": "a = []\na = ()\na = {\"name\": \"Tom\"}\nb = []\nb.append(\"Dave\")\nb.append(\"Bob\")\nb.append(\"Joe\")\n# print(type(a))\n# print(a[\"name\"])\n# print(dir([]))",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "peekOfCode": "a = ()\na = {\"name\": \"Tom\"}\nb = []\nb.append(\"Dave\")\nb.append(\"Bob\")\nb.append(\"Joe\")\n# print(type(a))\n# print(a[\"name\"])\n# print(dir([]))\nprint(b.pop(0))",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "peekOfCode": "a = {\"name\": \"Tom\"}\nb = []\nb.append(\"Dave\")\nb.append(\"Bob\")\nb.append(\"Joe\")\n# print(type(a))\n# print(a[\"name\"])\n# print(dir([]))\nprint(b.pop(0))\nprint(b)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "peekOfCode": "b = []\nb.append(\"Dave\")\nb.append(\"Bob\")\nb.append(\"Joe\")\n# print(type(a))\n# print(a[\"name\"])\n# print(dir([]))\nprint(b.pop(0))\nprint(b)\n\"\"\"# PYTHON I CODE: 5976\"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "peekOfCode": "a = [\"Dave\"] * 25\na[20] = \"Steve\"\n# for n in range(12, 25):\n#   print(a[n])\nfor x in enumerate(a):\n  i = x[0]\n  e = x[1]\n  if i == 9:\n    continue\n  print(i)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "documentation": {}
    },
    {
        "label": "a[20]",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "peekOfCode": "a[20] = \"Steve\"\n# for n in range(12, 25):\n#   print(a[n])\nfor x in enumerate(a):\n  i = x[0]\n  e = x[1]\n  if i == 9:\n    continue\n  print(i)\n  print(e)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "peekOfCode": "a = int(input(\"input a number! \"))\nb = int(input(\"input a number! \"))4\nprint(f\"{a + b}\")\n\"\"\"# PYTHON I CODE: 5976\"\"\"\n# lets reuse some code...\ndef greet(name=\"world!\"):\n  print(type(name))\n  print(f\"Hello {name}\")\ngreet(\"1234\")\n# lets play with some strings",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "peekOfCode": "b = int(input(\"input a number! \"))4\nprint(f\"{a + b}\")\n\"\"\"# PYTHON I CODE: 5976\"\"\"\n# lets reuse some code...\ndef greet(name=\"world!\"):\n  print(type(name))\n  print(f\"Hello {name}\")\ngreet(\"1234\")\n# lets play with some strings\n# ['capitalize', 'casefold', 'center', 'count', 'encode', 'endswith', 'expandtabs', 'find', 'format', 'format_map', 'index', 'isalnum', 'isalpha', 'isascii', 'isdecimal', 'isdigit', 'isidentifier', 'islower', 'isnumeric', 'isprintable', 'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lower', 'lstrip', 'maketrans', 'partition', 'replace', 'rfind', 'rindex', 'rjust', 'rpartition', 'rsplit', 'rstrip', 'split', 'splitlines', 'startswith', 'strip', 'swapcase', 'title', 'translate', 'upper', 'zfill']",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "peekOfCode": "a = \"aabbccqqZbqq\".swapcase()\nfor c in a:\n  if a.count(c) != 1:\n    print(c)\n# Lets put it all together\ncmd = \"\"\nwhile cmd != \"exit\":\n  cmd = input(\">> \")\n  if cmd == \"hello\" or cmd == \"hi\":\n    print(\"Hello to you!\")",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "documentation": {}
    },
    {
        "label": "cmd",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "peekOfCode": "cmd = \"\"\nwhile cmd != \"exit\":\n  cmd = input(\">> \")\n  if cmd == \"hello\" or cmd == \"hi\":\n    print(\"Hello to you!\")\n  elif cmd == \"goodbye\":\n    print(\"did you mean exit?\")\n  elif cmd == \"exit\":\n    print(\"Thanks you for using the repl\")\n  else:",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "peekOfCode": "a = 3\nb = 2\nc = a + b\nreturn c\nreturn a + b = c\nreturn 3 + 2\n5 - 3 => 2\n5 - 2 => 3\n- addition(-3, -6) ➞ -9\n- addition(7, 3) ➞ 10",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "peekOfCode": "b = 2\nc = a + b\nreturn c\nreturn a + b = c\nreturn 3 + 2\n5 - 3 => 2\n5 - 2 => 3\n- addition(-3, -6) ➞ -9\n- addition(7, 3) ➞ 10\n\"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "peekOfCode": "c = a + b\nreturn c\nreturn a + b = c\nreturn 3 + 2\n5 - 3 => 2\n5 - 2 => 3\n- addition(-3, -6) ➞ -9\n- addition(7, 3) ➞ 10\n\"\"\"\n# - return a plus b",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "peekOfCode": "s = [\"a\", \"ccc\", \"dddd\", \"bb\"]\nd = {1: \"a\", 3: \"ccc\", 4: \"dddd\", 2: \"bb\"}\n\"\"\"\n  what not to do during your plan...\n  eg: go down a massive rabit hole and not read docs:::\n\"\"\"\n# create an empty dictionary\n# create a list to return\n# iterate over each string extract the len of the elem and the val of the elem\n#   use the len as the key and use the str as a val",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "peekOfCode": "d = {1: \"a\", 3: \"ccc\", 4: \"dddd\", 2: \"bb\"}\n\"\"\"\n  what not to do during your plan...\n  eg: go down a massive rabit hole and not read docs:::\n\"\"\"\n# create an empty dictionary\n# create a list to return\n# iterate over each string extract the len of the elem and the val of the elem\n#   use the len as the key and use the str as a val\n# store a prev key -1",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "documentation": {}
    },
    {
        "label": "Animal",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs47_python_ii",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs47_python_ii",
        "peekOfCode": "class Animal:\n    def __init__(self, name=\"\", kind=\"\", color=\"\"):\n        self.name = name\n        self.color = color\n        self.kind = kind\n    def description(self):\n        # return \"%s is a %s %s.\" % (self.name, self.color, self.kind)\n        return f\"{self.name} is a {self.color} {self.kind}\"\n\"\"\"\ninstantiate an instance of the Animal class labeled cat",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs47_python_ii",
        "documentation": {}
    },
    {
        "label": "last",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs47_python_ii",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs47_python_ii",
        "peekOfCode": "def last(a, n):\n    if n > len(a):\n        return \"invalid\"\n    if n == 0:\n        return []\n    return a[0 - n : len(a)]\n# tests\nprint(last([1, 2, 3, 4, 5], 1))  #  ➞ [5]\nprint(last([4, 3, 9, 9, 7, 6], 3))  #  ➞ [9, 7, 6]\nprint(last([1, 2, 3, 4, 5], 7))  # ➞ \"invalid\"",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs47_python_ii",
        "documentation": {}
    },
    {
        "label": "add_indexes",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs47_python_ii",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs47_python_ii",
        "peekOfCode": "def add_indexes(numbers):\n    pass",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs47_python_ii",
        "documentation": {}
    },
    {
        "label": "output",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs47_python_ii",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs47_python_ii",
        "peekOfCode": "output = []\nmath_module_functions_list = dir(math)\nfor function_string in math_module_functions_list:\n    if function_string[0:2] == \"is\":\n        output.append(function_string)\noutput.sort()\nprint(output)\n# print(func)\n# if func == \"isinf\":\n#   print(\"i got one!\")",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs47_python_ii",
        "documentation": {}
    },
    {
        "label": "math_module_functions_list",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs47_python_ii",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs47_python_ii",
        "peekOfCode": "math_module_functions_list = dir(math)\nfor function_string in math_module_functions_list:\n    if function_string[0:2] == \"is\":\n        output.append(function_string)\noutput.sort()\nprint(output)\n# print(func)\n# if func == \"isinf\":\n#   print(\"i got one!\")\n# print(\"bobinf\".startswith(\"is\"))",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs47_python_ii",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs47_python_ii",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs47_python_ii",
        "peekOfCode": "s = \"this is a string\"\ns_l = s.split()\ns_l.reverse()\nreversed_string = \" \".join(s_l)\nprint(s)\nprint(reversed_string)\n\"\"\"\nBelow, you'll find a class definition for animals. Create two new animals `cat`\nand `dog`. Set `cat` to have a name of \"Purrfect\", kind of \"cat\",\nand color of \"brown\". Set `dog` to have a name of \"Fido\",",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs47_python_ii",
        "documentation": {}
    },
    {
        "label": "s_l",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs47_python_ii",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs47_python_ii",
        "peekOfCode": "s_l = s.split()\ns_l.reverse()\nreversed_string = \" \".join(s_l)\nprint(s)\nprint(reversed_string)\n\"\"\"\nBelow, you'll find a class definition for animals. Create two new animals `cat`\nand `dog`. Set `cat` to have a name of \"Purrfect\", kind of \"cat\",\nand color of \"brown\". Set `dog` to have a name of \"Fido\",\nkind of \"dog\", and color of \"black\".",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs47_python_ii",
        "documentation": {}
    },
    {
        "label": "reversed_string",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs47_python_ii",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs47_python_ii",
        "peekOfCode": "reversed_string = \" \".join(s_l)\nprint(s)\nprint(reversed_string)\n\"\"\"\nBelow, you'll find a class definition for animals. Create two new animals `cat`\nand `dog`. Set `cat` to have a name of \"Purrfect\", kind of \"cat\",\nand color of \"brown\". Set `dog` to have a name of \"Fido\",\nkind of \"dog\", and color of \"black\".\n\"\"\"\nclass Animal:",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs47_python_ii",
        "documentation": {}
    },
    {
        "label": "cat",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs47_python_ii",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs47_python_ii",
        "peekOfCode": "cat = Animal(\"Purrfect\", \"cat\", \"Brown\")\ndog = Animal()\n# cat.name = \"Purrfect\"\n# cat.kind = \"cat\"\n# cat.color = \"brown\"\ndog.name = \"Fido\"\ndog.kind = \"dog\"\ndog.color = \"black\"\n# print(help([].sort))\n# Should print Purrfect is a brown cat.",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs47_python_ii",
        "documentation": {}
    },
    {
        "label": "dog",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs47_python_ii",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs47_python_ii",
        "peekOfCode": "dog = Animal()\n# cat.name = \"Purrfect\"\n# cat.kind = \"cat\"\n# cat.color = \"brown\"\ndog.name = \"Fido\"\ndog.kind = \"dog\"\ndog.color = \"black\"\n# print(help([].sort))\n# Should print Purrfect is a brown cat.\nprint(cat.description())",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs47_python_ii",
        "documentation": {}
    },
    {
        "label": "dog.name",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs47_python_ii",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs47_python_ii",
        "peekOfCode": "dog.name = \"Fido\"\ndog.kind = \"dog\"\ndog.color = \"black\"\n# print(help([].sort))\n# Should print Purrfect is a brown cat.\nprint(cat.description())\n# Should print Fido is a black dog.\nprint(dog.description())\n\"\"\"# Demo\"\"\"\n\"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs47_python_ii",
        "documentation": {}
    },
    {
        "label": "dog.kind",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs47_python_ii",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs47_python_ii",
        "peekOfCode": "dog.kind = \"dog\"\ndog.color = \"black\"\n# print(help([].sort))\n# Should print Purrfect is a brown cat.\nprint(cat.description())\n# Should print Fido is a black dog.\nprint(dog.description())\n\"\"\"# Demo\"\"\"\n\"\"\"\nChallenge #1:",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs47_python_ii",
        "documentation": {}
    },
    {
        "label": "dog.color",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs47_python_ii",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs47_python_ii",
        "peekOfCode": "dog.color = \"black\"\n# print(help([].sort))\n# Should print Purrfect is a brown cat.\nprint(cat.description())\n# Should print Fido is a black dog.\nprint(dog.description())\n\"\"\"# Demo\"\"\"\n\"\"\"\nChallenge #1:\nWrite a function that retrieves the last n elements from a list.",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_cs47_python_ii",
        "documentation": {}
    },
    {
        "label": "my_hash",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_dictionaries",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_dictionaries",
        "peekOfCode": "def my_hash(key):\n    sum = 0\n    c in key:\n        nc = ord(c)\n        print(c)\n        print(nc)\nmy_hash(\"A\")\n\"\"\"\nAdd \"Herb\" to the phonebook with the number 7653420789.\nRemove \"Bill\" from the phonebook.",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_dictionaries",
        "documentation": {}
    },
    {
        "label": "phonebook",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_dictionaries",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_dictionaries",
        "peekOfCode": "phonebook = {\n    \"Abe\": 4569874321,\n    \"Bill\": 7659803241,\n    \"Barry\": 6573214789\n}\n# YOUR CODE HERE\n# Should print Herb is in the phonebook.\nif \"Herb\" in phonebook:\n    print(\"Herb is in the phonebook.\")\n# Should print Bill is not in the phonebook.",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_dictionaries",
        "documentation": {}
    },
    {
        "label": "Entity",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_intro_python_ii",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_intro_python_ii",
        "peekOfCode": "class Entity:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    def __str__(self):\n        return f\"({self.x}, {self.y})\"\nclass Mob(Entity):\n    def __init__(self, x, y):\n        super().__init__(x, y)\n    def move(self, dir):",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_intro_python_ii",
        "documentation": {}
    },
    {
        "label": "Mob",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_intro_python_ii",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_intro_python_ii",
        "peekOfCode": "class Mob(Entity):\n    def __init__(self, x, y):\n        super().__init__(x, y)\n    def move(self, dir):\n        if dir == \"n\":\n            self.y -= 1\n        elif dir == \"s\":\n            self.y += 1\n        elif dir == \"w\":\n            self.x -= 1",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_intro_python_ii",
        "documentation": {}
    },
    {
        "label": "last",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_intro_python_ii",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_intro_python_ii",
        "peekOfCode": "def last(a, n):\n    if n > len(a):\n        return \"invalid\"\n    elif n == 0:\n        return []\n    return a[-n:]\nprint(last([1, 2, 3, 4, 5], 1))  # ➞ [5]\nprint(last([4, 3, 9, 9, 7, 6], 3))  # ➞ [9, 7, 6]\nprint(last([1, 2, 3, 4, 5], 7))  #  ➞ \"invalid\"\nprint(last([1, 2, 3, 4, 5], 0))  # ➞ []",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_intro_python_ii",
        "documentation": {}
    },
    {
        "label": "parity",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_intro_python_ii",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_intro_python_ii",
        "peekOfCode": "def parity(input_int):\n    if input_int % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\ndef parity2(input_int):\n    return \"Even\" if input_int % 2 == 0 else \"Odd\"\nprint(parity(0))  #  -> \"Even\"\nprint(parity(1))  #  -> \"Odd\"\nprint(parity(2))  # -> \"Even\"",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_intro_python_ii",
        "documentation": {}
    },
    {
        "label": "parity2",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_intro_python_ii",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_intro_python_ii",
        "peekOfCode": "def parity2(input_int):\n    return \"Even\" if input_int % 2 == 0 else \"Odd\"\nprint(parity(0))  #  -> \"Even\"\nprint(parity(1))  #  -> \"Odd\"\nprint(parity(2))  # -> \"Even\"\nprint(parity2(0))  #  -> \"Even\"\nprint(parity2(1))  #  -> \"Odd\"\nprint(parity2(2))  # -> \"Even\"",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_intro_python_ii",
        "documentation": {}
    },
    {
        "label": "numbers",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_intro_python_ii",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_intro_python_ii",
        "peekOfCode": "numbers = [12, 23, 1, 22]\n# print(l[::-1])\n# print(dir([]))\n# min and max\n# print(min(20, 10, 5)) # 5\n# print(max(20, 10, 5)) # 20\n# list index\n# s = \"100\"\n# if \"100\" in l:\n#   print(l.index(s))",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_intro_python_ii",
        "documentation": {}
    },
    {
        "label": "l2",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_intro_python_ii",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_intro_python_ii",
        "peekOfCode": "l2 = []\nfor number in numbers:\n    if number % 2 == 0:\n        l2.append(number * 2)\nprint(l2)\nl3 = [number * 2 for number in numbers if number % 2 == 0]\nprint(l3)\n\"\"\"# CODE: 6603\"\"\"\n# Classes and OOP\nclass Entity:",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_intro_python_ii",
        "documentation": {}
    },
    {
        "label": "l3",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_intro_python_ii",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_intro_python_ii",
        "peekOfCode": "l3 = [number * 2 for number in numbers if number % 2 == 0]\nprint(l3)\n\"\"\"# CODE: 6603\"\"\"\n# Classes and OOP\nclass Entity:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    def __str__(self):\n        return f\"({self.x}, {self.y})\"",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_intro_python_ii",
        "documentation": {}
    },
    {
        "label": "e",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_intro_python_ii",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_intro_python_ii",
        "peekOfCode": "e = Entity(10, 20)\n# print(e)\nm = Mob(10, 23)\nprint(m)\nm.move(\"n\")\nprint(m)\n\"\"\"# CODE: 6603\n# Demos\nWrite a function that retrieves the last n elements from a list.\nExamples:",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_intro_python_ii",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_intro_python_ii",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_intro_python_ii",
        "peekOfCode": "m = Mob(10, 23)\nprint(m)\nm.move(\"n\")\nprint(m)\n\"\"\"# CODE: 6603\n# Demos\nWrite a function that retrieves the last n elements from a list.\nExamples:\n- last([1, 2, 3, 4, 5], 1) ➞ [5]\n- last([4, 3, 9, 9, 7, 6], 3) ➞ [9, 7, 6]",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_intro_python_ii",
        "documentation": {}
    },
    {
        "label": "LinkedListNode",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_linked_lists",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_linked_lists",
        "peekOfCode": "class LinkedListNode:\n  \"\"\"\n    Simple Singly Linked List Node Class\n    value -> int\n    next -> LinkedListNode\n  \"\"\"\n  def __init__(self, value):\n    self.value = value\n    self.next = None\n  def add_node(self, value):",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_linked_lists",
        "documentation": {}
    },
    {
        "label": "LinkedListNode",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_linked_lists",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_linked_lists",
        "peekOfCode": "class LinkedListNode:\n  \"\"\"\n    Simple Doubly Linked List Node Class\n    value -> int\n    next -> LinkedListNode\n    prev -> LinkedListNode\n  \"\"\"\n  def __init__(self, value):\n    self.value = value\n    self.next = None",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_linked_lists",
        "documentation": {}
    },
    {
        "label": "LinkedListNode",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_linked_lists",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_linked_lists",
        "peekOfCode": "class LinkedListNode():\n    def __init__(self, value):\n        self.value = value\n        self.next  = None\ndef reverse(head_of_list):\n  current = head_of_list\n  prev = None\n  next = None\n  while current:\n    next = current.next",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_linked_lists",
        "documentation": {}
    },
    {
        "label": "HashTableEntry",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_linked_lists",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_linked_lists",
        "peekOfCode": "class HashTableEntry:\n    \"\"\"\n    Linked List hash table key/value pair\n    \"\"\"\n    def __init__(self, key, value):\n        self.key = key\n        self.value = value\n        self.next = None\n# Hash table can't have fewer than this many slots\nMIN_CAPACITY = 8",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_linked_lists",
        "documentation": {}
    },
    {
        "label": "HashTable",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_linked_lists",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_linked_lists",
        "peekOfCode": "class HashTable:\n    \"\"\"\n    A hash table that with `capacity` buckets\n    that accepts string keys\n    Implement this.\n    \"\"\"\n    def __init__(self, capacity):\n                self.capacity = capacity  # Number of buckets in the hash table\n        self.storage = [None] * capacity\n        self.item_count = 0",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_linked_lists",
        "documentation": {}
    },
    {
        "label": "print_ll",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_linked_lists",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_linked_lists",
        "peekOfCode": "def print_ll(linked_list_node):\n  current = linked_list_node\n  while current is not None:\n    print(current.value)\n    current = current.next\ndef add_to_ll_storage(linked_list_node):\n  current = linked_list_node\n  while current is not None:\n    ll_storage.append(current)\n    current = current.next",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_linked_lists",
        "documentation": {}
    },
    {
        "label": "add_to_ll_storage",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_linked_lists",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_linked_lists",
        "peekOfCode": "def add_to_ll_storage(linked_list_node):\n  current = linked_list_node\n  while current is not None:\n    ll_storage.append(current)\n    current = current.next\nL1.add_node(12)\nprint_ll(L1)\nL1.add_node(24)\nprint()\nprint_ll(L1)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_linked_lists",
        "documentation": {}
    },
    {
        "label": "reverse",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_linked_lists",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_linked_lists",
        "peekOfCode": "def reverse(head_of_list):\n  current = head_of_list\n  prev = None\n  next = None\n  while current:\n    next = current.next\n    current.next = prev\n    prev = current\n    current = next\n  return prev",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_linked_lists",
        "documentation": {}
    },
    {
        "label": "L1",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_linked_lists",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_linked_lists",
        "peekOfCode": "L1 = Node(34)\nL1.next = Node(45)\nL1.next.next = Node(90)\n# while the current node is not none\n  # do something with the data\n  # traverse to next node\nL1 = [34]-> [45]-> [90] -> None\nNode(45)\nNode(90)\n```",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_linked_lists",
        "documentation": {}
    },
    {
        "label": "L1.next",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_linked_lists",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_linked_lists",
        "peekOfCode": "L1.next = Node(45)\nL1.next.next = Node(90)\n# while the current node is not none\n  # do something with the data\n  # traverse to next node\nL1 = [34]-> [45]-> [90] -> None\nNode(45)\nNode(90)\n```\n\"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_linked_lists",
        "documentation": {}
    },
    {
        "label": "L1.next.next",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_linked_lists",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_linked_lists",
        "peekOfCode": "L1.next.next = Node(90)\n# while the current node is not none\n  # do something with the data\n  # traverse to next node\nL1 = [34]-> [45]-> [90] -> None\nNode(45)\nNode(90)\n```\n\"\"\"\nclass LinkedListNode:",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_linked_lists",
        "documentation": {}
    },
    {
        "label": "L1",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_linked_lists",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_linked_lists",
        "peekOfCode": "L1 = [34]-> [45]-> [90] -> None\nNode(45)\nNode(90)\n```\n\"\"\"\nclass LinkedListNode:\n  \"\"\"\n    Simple Singly Linked List Node Class\n    value -> int\n    next -> LinkedListNode",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_linked_lists",
        "documentation": {}
    },
    {
        "label": "ll_storage",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_linked_lists",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_linked_lists",
        "peekOfCode": "ll_storage = []\nL1 = LinkedListNode(34)\nL1.next = LinkedListNode(45)\nL1.next.next = LinkedListNode(90)\ndef print_ll(linked_list_node):\n  current = linked_list_node\n  while current is not None:\n    print(current.value)\n    current = current.next\ndef add_to_ll_storage(linked_list_node):",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_linked_lists",
        "documentation": {}
    },
    {
        "label": "L1",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_linked_lists",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_linked_lists",
        "peekOfCode": "L1 = LinkedListNode(34)\nL1.next = LinkedListNode(45)\nL1.next.next = LinkedListNode(90)\ndef print_ll(linked_list_node):\n  current = linked_list_node\n  while current is not None:\n    print(current.value)\n    current = current.next\ndef add_to_ll_storage(linked_list_node):\n  current = linked_list_node",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_linked_lists",
        "documentation": {}
    },
    {
        "label": "L1.next",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_linked_lists",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_linked_lists",
        "peekOfCode": "L1.next = LinkedListNode(45)\nL1.next.next = LinkedListNode(90)\ndef print_ll(linked_list_node):\n  current = linked_list_node\n  while current is not None:\n    print(current.value)\n    current = current.next\ndef add_to_ll_storage(linked_list_node):\n  current = linked_list_node\n  while current is not None:",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_linked_lists",
        "documentation": {}
    },
    {
        "label": "L1.next.next",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_linked_lists",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_linked_lists",
        "peekOfCode": "L1.next.next = LinkedListNode(90)\ndef print_ll(linked_list_node):\n  current = linked_list_node\n  while current is not None:\n    print(current.value)\n    current = current.next\ndef add_to_ll_storage(linked_list_node):\n  current = linked_list_node\n  while current is not None:\n    ll_storage.append(current)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_linked_lists",
        "documentation": {}
    },
    {
        "label": "MIN_CAPACITY",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_linked_lists",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_linked_lists",
        "peekOfCode": "MIN_CAPACITY = 8\n[\n 0[\"Lou\", 41] -> [\"Bob\", 41] -> None,\n 1[\"Steve\", 41] -> None,\n 2[\"Jen\", 41] -> None,\n 3[\"Dave\", 41] -> None,\n 4None,\n 5[\"Hector\", 34]-> None,\n 6[\"Lisa\", 41] -> None,\n 7None,",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.copy_of_linked_lists",
        "documentation": {}
    },
    {
        "label": "addTwoDigits",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.Core_001_-_addTwoDigits",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.Core_001_-_addTwoDigits",
        "peekOfCode": "def addTwoDigits(n):\n    return (n // 10) + (n % 10)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.Core_001_-_addTwoDigits",
        "documentation": {}
    },
    {
        "label": "largestNumber",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.Core_002_-_largestNumber",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.Core_002_-_largestNumber",
        "peekOfCode": "def largestNumber(n):\n    return int(\"9\" * n)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.Core_002_-_largestNumber",
        "documentation": {}
    },
    {
        "label": "candies",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.Core_003_-_candies",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.Core_003_-_candies",
        "peekOfCode": "def candies(n, m):\n    return (m // n) * n",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.Core_003_-_candies",
        "documentation": {}
    },
    {
        "label": "seatsInTheater",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.Core_004_-_seatsInTheater",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.Core_004_-_seatsInTheater",
        "peekOfCode": "def seatsInTheater(nCols, nRows, col, row):\n    return (nCols - col + 1) * (nRows - row)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.Core_004_-_seatsInTheater",
        "documentation": {}
    },
    {
        "label": "maxMultiple",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.Core_005_-_maxMultiple",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.Core_005_-_maxMultiple",
        "peekOfCode": "def maxMultiple(divisor, bound):\n    for num in range(bound, 1, -1):\n        if num % divisor == 0:\n            return num\n    return 0",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.Core_005_-_maxMultiple",
        "documentation": {}
    },
    {
        "label": "circleOfNumbers",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.Core_006_-_circleOfNumbers",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.Core_006_-_circleOfNumbers",
        "peekOfCode": "def circleOfNumbers(n, firstNumber):\n    return (firstNumber + (n // 2)) % n",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.Core_006_-_circleOfNumbers",
        "documentation": {}
    },
    {
        "label": "lateRide",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.Core_007_-_lateRide",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.Core_007_-_lateRide",
        "peekOfCode": "def lateRide(n):\n    hours = n // 60\n    minutes = n % 60\n    return (hours // 10) + (hours % 10) + (minutes // 10) + (minutes % 10)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.Core_007_-_lateRide",
        "documentation": {}
    },
    {
        "label": "phoneCall",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.Core_008_-_phoneCall",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.Core_008_-_phoneCall",
        "peekOfCode": "def phoneCall(min1, min2_10, min11, s):\n    if s < min1:\n        return 0\n    if s == min1:\n        return 1\n    if s <= min1 + (min2_10 * 9):\n        s -= min1\n        return (s // min2_10) + 1\n    s -= min1\n    s -= min2_10 * 9",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.Core_008_-_phoneCall",
        "documentation": {}
    },
    {
        "label": "reachNextLevel",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.Core_009_-_reachNextLevel",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.Core_009_-_reachNextLevel",
        "peekOfCode": "def reachNextLevel(experience, threshold, reward):\n    return experience + reward >= threshold",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.Core_009_-_reachNextLevel",
        "documentation": {}
    },
    {
        "label": "knapsackLight",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.Core_010_-_knapsackLight",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.Core_010_-_knapsackLight",
        "peekOfCode": "def knapsackLight(value1, weight1, value2, weight2, maxW):\n    if weight1 + weight2 <= maxW:\n        return value1 + value2\n    if weight1 <= maxW and weight2 <= maxW:\n        return max(value1, value2)\n    if weight1 <= maxW:\n        return value1\n    if weight2 <= maxW:\n        return value2\n    return 0",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.Core_010_-_knapsackLight",
        "documentation": {}
    },
    {
        "label": "extraNumber",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.Core_011_-_extraNumber",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.Core_011_-_extraNumber",
        "peekOfCode": "def extraNumber(a, b, c):\n    if a == b:\n        return c\n    if a == c:\n        return b\n    return a",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.Core_011_-_extraNumber",
        "documentation": {}
    },
    {
        "label": "isInfiniteProcess",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.Core_012_-_isInfiniteProcess",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.Core_012_-_isInfiniteProcess",
        "peekOfCode": "def isInfiniteProcess(a, b):\n    return a > b or (a % 2 != b % 2)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.Core_012_-_isInfiniteProcess",
        "documentation": {}
    },
    {
        "label": "arithmeticExpression",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.Core_013_-_arithmeticExpression",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.Core_013_-_arithmeticExpression",
        "peekOfCode": "def arithmeticExpression(a, b, c):\n    return a + b == c or a - b == c or a * b == c or a / b == c",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.Core_013_-_arithmeticExpression",
        "documentation": {}
    },
    {
        "label": "tennisSet",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.Core_014_-_tennisSet",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.Core_014_-_tennisSet",
        "peekOfCode": "def tennisSet(score1, score2):\n    if max(score1, score2) == 6 and min(score1, score2) < 5:\n        return True\n    if 5 <= min(score1, score2) <= 6 and max(score1, score2) == 7:\n        return True\n    return False",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.Core_014_-_tennisSet",
        "documentation": {}
    },
    {
        "label": "willYou",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.Core_015_-_willYou",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.Core_015_-_willYou",
        "peekOfCode": "def willYou(young, beautiful, loved):\n    return (young and beautiful) != loved",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.Core_015_-_willYou",
        "documentation": {}
    },
    {
        "label": "metroCard",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.Core_016_-_metroCard",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.Core_016_-_metroCard",
        "peekOfCode": "def metroCard(lastNumberOfDays):\n    if lastNumberOfDays == 30 or lastNumberOfDays == 28:\n        return [31]\n    return [28, 30, 31]",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.Core_016_-_metroCard",
        "documentation": {}
    },
    {
        "label": "killKthBit",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.Core_017_-_killKthBit",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.Core_017_-_killKthBit",
        "peekOfCode": "def killKthBit(n, k):\n    return n & ~(2 ** (k - 1))",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.Core_017_-_killKthBit",
        "documentation": {}
    },
    {
        "label": "arrayPacking",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.Core_018_-_arrayPacking",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.Core_018_-_arrayPacking",
        "peekOfCode": "def arrayPacking(a):\n    binary_array = [bin(num)[2:].rjust(8, \"0\") for num in a]\n    out_string = \"\".join(binary_array[::-1])\n    return int(out_string, 2)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.Core_018_-_arrayPacking",
        "documentation": {}
    },
    {
        "label": "rangeBitCount",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.Core_019_-_rangeBitCount",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.Core_019_-_rangeBitCount",
        "peekOfCode": "def rangeBitCount(a, b):\n    array = list(range(a, b + 1))\n    binary_array = [bin(num) for num in array]\n    count_array = [binary.count(\"1\") for binary in binary_array]\n    return sum(count_array)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.Core_019_-_rangeBitCount",
        "documentation": {}
    },
    {
        "label": "mirrorBits",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.Core_020_-_mirrorBits",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.Core_020_-_mirrorBits",
        "peekOfCode": "def mirrorBits(a):\n    binary = bin(a)[2:]\n    return int(binary[::-1], 2)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.Core_020_-_mirrorBits",
        "documentation": {}
    },
    {
        "label": "secondRightmostZeroBit",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.Core_021_-_secondRightmostZeroBit",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.Core_021_-_secondRightmostZeroBit",
        "peekOfCode": "def secondRightmostZeroBit(n):\n    return 2 ** bin(n)[::-1].find(\"0\", bin(n)[::-1].find(\"0\") + 1)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.Core_021_-_secondRightmostZeroBit",
        "documentation": {}
    },
    {
        "label": "swapAdjacentBits",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.Core_022_-_swapAdjacentBits",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.Core_022_-_swapAdjacentBits",
        "peekOfCode": "def swapAdjacentBits(n):\n    return ((n >> 1) & 1431655765) | ((n << 1) & 2863311530)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.Core_022_-_swapAdjacentBits",
        "documentation": {}
    },
    {
        "label": "differentRightmostBit",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.Core_023_-_differentRightmostBit",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.Core_023_-_differentRightmostBit",
        "peekOfCode": "def differentRightmostBit(n, m):\n    return 2 ** bin((n ^ m))[::-1].find(\"1\")",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.Core_023_-_differentRightmostBit",
        "documentation": {}
    },
    {
        "label": "equalPairOfBits",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.Core_024_-_equalPairOfBits",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.Core_024_-_equalPairOfBits",
        "peekOfCode": "def equalPairOfBits(n, m):\n    return 2 ** bin(~(n ^ m))[::-1].find(\"1\")",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.Core_024_-_equalPairOfBits",
        "documentation": {}
    },
    {
        "label": "leastFactorial",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.Core_025_-_leastFactorial",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.Core_025_-_leastFactorial",
        "peekOfCode": "def leastFactorial(n):\n    factorial = 1\n    index = 1\n    while factorial < n:\n        index += 1\n        factorial *= index\n    return factorial",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.Core_025_-_leastFactorial",
        "documentation": {}
    },
    {
        "label": "countSumOfTwoRepresentations2",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.Core_026_-_countSumOfTwoRepresentations2",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.Core_026_-_countSumOfTwoRepresentations2",
        "peekOfCode": "def countSumOfTwoRepresentations2(n, l, r):\n    count = 0\n    a = max(n - r, l)\n    b = n - a\n    while a <= r and a <= b:\n        count += 1\n        a += 1\n        b -= 1\n    return count",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.Core_026_-_countSumOfTwoRepresentations2",
        "documentation": {}
    },
    {
        "label": "magicalWell",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.Core_027_-_magicalWell",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.Core_027_-_magicalWell",
        "peekOfCode": "def magicalWell(a, b, n):\n    total = 0\n    for i in range(n):\n        total += a * b\n        a += 1\n        b += 1\n    return total",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.Core_027_-_magicalWell",
        "documentation": {}
    },
    {
        "label": "lineUp",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.Core_028_-_lineUp",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.Core_028_-_lineUp",
        "peekOfCode": "def lineUp(commands):\n    count = 0\n    smart_student = 0\n    dumb_student = 0\n    for command in commands:\n        if command == \"L\":\n            smart_student = (smart_student - 1) % 4\n            dumb_student = (dumb_student + 1) % 4\n        elif command == \"R\":\n            smart_student = (smart_student + 1) % 4",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.Core_028_-_lineUp",
        "documentation": {}
    },
    {
        "label": "additionWithoutCarrying",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.Core_029_-_additionWithoutCarrying",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.Core_029_-_additionWithoutCarrying",
        "peekOfCode": "def additionWithoutCarrying(param1, param2):\n    # Convert numbers to strings\n    str1 = str(param1)\n    str2 = str(param2)\n    # Pad both to the same length with zeroes (to the left of the numbers)\n    length = max(len(str2), len(str1))\n    str1 = str1.rjust(length, \"0\")\n    str2 = str2.rjust(length, \"0\")\n    output = []\n    for num1, num2 in zip(str1, str2):",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.Core_029_-_additionWithoutCarrying",
        "documentation": {}
    },
    {
        "label": "appleBoxes",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.Core_030_-_appleBoxes",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.Core_030_-_appleBoxes",
        "peekOfCode": "def appleBoxes(k):\n    red = 0\n    yellow = 0\n    for i in range(1, k + 1, 2):\n        yellow += i * i\n    for i in range(2, k + 1, 2):\n        red += i * i\n    return red - yellow",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.Core_030_-_appleBoxes",
        "documentation": {}
    },
    {
        "label": "increaseNumberRoundness",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.Core_031_-_increaseNumberRoundness",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.Core_031_-_increaseNumberRoundness",
        "peekOfCode": "def increaseNumberRoundness(n):\n    string = str(n)\n    # Check for immediate rejection\n    if \"0\" not in string or len(string) < 2:\n        return False\n    # Since we know there's a 0, if it's not on\n    # the left, then we know to accept\n    if string[-1] != \"0\":\n        return True\n    # If there is only one 0, it must be at the end, so reject.",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.Core_031_-_increaseNumberRoundness",
        "documentation": {}
    },
    {
        "label": "rounders",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.Core_032_-_rounders",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.Core_032_-_rounders",
        "peekOfCode": "def rounders(value):\n    length = len(str(value))\n    magnitude = length - 1\n    for i in range(length - 1):\n        value = int((value / 10) + 0.5)\n    return value * (10 ** magnitude)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.Core_032_-_rounders",
        "documentation": {}
    },
    {
        "label": "candles",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.Core_033_-_candles",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.Core_033_-_candles",
        "peekOfCode": "def candles(candlesNumber, makeNew):\n    totalBurned = 0\n    leftovers = 0\n    while candlesNumber > 0:\n        totalBurned += candlesNumber\n        leftovers += candlesNumber\n        candlesNumber = 0\n        candlesNumber = leftovers // makeNew\n        leftovers = leftovers % makeNew\n    return totalBurned",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.Core_033_-_candles",
        "documentation": {}
    },
    {
        "label": "countBlackCells",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.Core_034_-_countBlackCells",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.Core_034_-_countBlackCells",
        "peekOfCode": "def countBlackCells(n, m):\n    gcd = find_gcd(n, m)\n    line_cells = n + m - gcd\n    line_corner_cells = (gcd - 1) * 2\n    return line_cells + line_corner_cells\ndef find_gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.Core_034_-_countBlackCells",
        "documentation": {}
    },
    {
        "label": "find_gcd",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.Core_034_-_countBlackCells",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.Core_034_-_countBlackCells",
        "peekOfCode": "def find_gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.Core_034_-_countBlackCells",
        "documentation": {}
    },
    {
        "label": "createArray",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.Core_035_-_createArray",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.Core_035_-_createArray",
        "peekOfCode": "def createArray(size):\n    return [1] * size",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.Core_035_-_createArray",
        "documentation": {}
    },
    {
        "label": "arrayReplace",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.Core_036_-_arrayReplace",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.Core_036_-_arrayReplace",
        "peekOfCode": "def arrayReplace(inputArray, elemToReplace, substitutionElem):\n    output = [\n        elem if elem != elemToReplace else substitutionElem for elem in inputArray\n    ]\n    return output",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.Core_036_-_arrayReplace",
        "documentation": {}
    },
    {
        "label": "firstReverseTry",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.Core_037_-_firstReverseTry",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.Core_037_-_firstReverseTry",
        "peekOfCode": "def firstReverseTry(arr):\n    if len(arr) < 2:\n        return arr\n    if len(arr) < 4:\n        return arr[::-1]\n    return arr[-1:] + arr[1:-1] + arr[:1]",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.Core_037_-_firstReverseTry",
        "documentation": {}
    },
    {
        "label": "concatenateArrays",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.Core_038_-_concatenateArrays",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.Core_038_-_concatenateArrays",
        "peekOfCode": "def concatenateArrays(a, b):\n    return a + b",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.Core_038_-_concatenateArrays",
        "documentation": {}
    },
    {
        "label": "removeArrayPart",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.Core_039_-_removeArrayPart",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.Core_039_-_removeArrayPart",
        "peekOfCode": "def removeArrayPart(inputArray, l, r):\n    return inputArray[:l] + inputArray[r + 1 :]",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.Core_039_-_removeArrayPart",
        "documentation": {}
    },
    {
        "label": "isSmooth",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.Core_040_-_isSmooth",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.Core_040_-_isSmooth",
        "peekOfCode": "def isSmooth(arr):\n    if arr[0] != arr[-1]:\n        return False\n    if len(arr) % 2 == 0:\n        middle = arr[len(arr) // 2] + arr[(len(arr) // 2) - 1]\n    else:\n        middle = arr[len(arr) // 2]\n    return arr[0] == middle",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.Core_040_-_isSmooth",
        "documentation": {}
    },
    {
        "label": "replaceMiddle",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.Core_041_-_replaceMiddle",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.Core_041_-_replaceMiddle",
        "peekOfCode": "def replaceMiddle(arr):\n    if len(arr) % 2 != 0:\n        return arr\n    right_middle = len(arr) // 2\n    middle_value = arr[right_middle] + arr[right_middle - 1]\n    return arr[: right_middle - 1] + [middle_value] + arr[right_middle + 1 :]",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.Core_041_-_replaceMiddle",
        "documentation": {}
    },
    {
        "label": "makeArrayConsecutive2",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.Core_042_-_makeArrayConsecutive2",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.Core_042_-_makeArrayConsecutive2",
        "peekOfCode": "def makeArrayConsecutive2(statues):\n    count = 0\n    for i in range(min(statues), max(statues)):\n        if i not in statues:\n            count += 1\n    return count",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.Core_042_-_makeArrayConsecutive2",
        "documentation": {}
    },
    {
        "label": "isPower",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.Core_043_-_isPower",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.Core_043_-_isPower",
        "peekOfCode": "def isPower(n):\n    if n == 1:\n        return True\n    a = 2\n    b = 2\n    while a ** 2 <= n:\n        while a ** b <= n:\n            if a ** b == n:\n                return True\n            b += 1",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.Core_043_-_isPower",
        "documentation": {}
    },
    {
        "label": "isSumOfConsecutive2",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.Core_044_-_isSumOfConsecutive2",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.Core_044_-_isSumOfConsecutive2",
        "peekOfCode": "def isSumOfConsecutive2(n):\n    count = 0\n    right = 2\n    arr = [1, 2]\n    while right <= (n // 2) + 1:\n        total = sum(arr)\n        if total == n:\n            count += 1\n            del arr[0]\n        elif total < n:",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.Core_044_-_isSumOfConsecutive2",
        "documentation": {}
    },
    {
        "label": "squareDigitsSequence",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.Core_045_-_squareDigitsSequence",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.Core_045_-_squareDigitsSequence",
        "peekOfCode": "def squareDigitsSequence(a0):\n    sequence = [a0]\n    while sequence[-1] not in sequence[:-1]:\n        next_value = 0\n        for digit in str(sequence[-1]):\n            next_value += int(digit) ** 2\n        sequence.append(next_value)\n    return len(sequence)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.Core_045_-_squareDigitsSequence",
        "documentation": {}
    },
    {
        "label": "pagesNumberingWithInk",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.Core_046_-_pagesNumberingWithInk",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.Core_046_-_pagesNumberingWithInk",
        "peekOfCode": "def pagesNumberingWithInk(current, numberOfDigits):\n    numberOfDigits -= len(str(current))\n    next_digits = len(str(current + 1))\n    while numberOfDigits >= next_digits:\n        current += 1\n        numberOfDigits -= next_digits\n        next_digits = len(str(current))\n    return current",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.Core_046_-_pagesNumberingWithInk",
        "documentation": {}
    },
    {
        "label": "comfortableNumbers",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.Core_047_-_comfortableNumbers",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.Core_047_-_comfortableNumbers",
        "peekOfCode": "def comfortableNumbers(l, r):\n    count = 0\n    for a in range(l, r):\n        for b in range(a + 1, r + 1):\n            a_sum = sum(int(digit) for digit in str(a))\n            b_sum = sum(int(digit) for digit in str(b))\n            if b <= a + a_sum and a >= b - b_sum:\n                count += 1\n    return count",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.Core_047_-_comfortableNumbers",
        "documentation": {}
    },
    {
        "label": "weakNumbers",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.Core_048_-_weakNumbers",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.Core_048_-_weakNumbers",
        "peekOfCode": "def weakNumbers(n):\n    all_factors = [count_factors(num) for num in range(1, n + 1)]\n    weaknesses = []\n    for num, num_factors in enumerate(all_factors, 1):\n        weakness = 0\n        for factor in all_factors[:num]:\n            if factor > num_factors:\n                weakness += 1\n        weaknesses.append(weakness)\n        weakest = max(weaknesses)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.Core_048_-_weakNumbers",
        "documentation": {}
    },
    {
        "label": "count_factors",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.Core_048_-_weakNumbers",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.Core_048_-_weakNumbers",
        "peekOfCode": "def count_factors(n):\n    factors = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            factors += 1\n    return factors\nprint(weakNumbers(500))",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.Core_048_-_weakNumbers",
        "documentation": {}
    },
    {
        "label": "rectangleRotation",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.Core_049_-_rectangleRotation",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.Core_049_-_rectangleRotation",
        "peekOfCode": "def rectangleRotation(a, b):\n    n = a / (2 ** 0.5)\n    m = b / (2 ** 0.5)\n    points = (math.floor(n) * math.floor(m)) + (math.ceil(n) * math.ceil(m))\n    if math.floor(n) % 2 != math.floor(m) % 2:\n        points -= 1\n    return points\n# rectangleRotation(6, 4)\nprint(rectangleRotation(8, 6))",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.Core_049_-_rectangleRotation",
        "documentation": {}
    },
    {
        "label": "csRaindrops",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.cs-raindrops",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.cs-raindrops",
        "peekOfCode": "def csRaindrops(number):\n    output = \"\"\n    if number % 3 == 0:\n        output += \"Pling\"\n    if number % 5 == 0:\n        output += \"Plang\"\n    if number % 7 == 0:\n        output += \"Plong\"\n    if output is \"\":\n        return str(number)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.cs-raindrops",
        "documentation": {}
    },
    {
        "label": "HashTable",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.cs46ht",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.cs46ht",
        "peekOfCode": "class HashTable:\n# \"\"\"\n# A hash table with `capacity` buckets\n# that accepts string keys\n# \"\"\"\ndef __init__(self, capacity):\n    self.capacity = capacity  # Number of buckets in the hash table\n    self.storage = [None] * capacity\n    self.item_count = 0\ndef djb2(self, key):",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.cs46ht",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.cs46ht",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.cs46ht",
        "peekOfCode": "class ListNode:\n    def __init__(self, key, value):\n        self.key = key\n        self.value = value\n        self.next = None\n\"\"\"\n4000    12       89\n[\"ABC\", 10]-->[\"CBA\", 100]-->[\"BAC\", 2342]-->[\"AAAB\", 400]-->None\n   ^\n   |",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.cs46ht",
        "documentation": {}
    },
    {
        "label": "MyHashTable",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.cs46ht",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.cs46ht",
        "peekOfCode": "class MyHashTable:\n    def __init__(self):\n        # Your code here\n        self.capacity = 1000\n        self.size = 0\n        self.storage = [None] * self.capacity\n    # Your code here\n    def djb2(self, key):\n      \"\"\"\n      DJB2 hash, 32-bit",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.cs46ht",
        "documentation": {}
    },
    {
        "label": "my_hash",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.cs46ht",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.cs46ht",
        "peekOfCode": "def my_hash(key):\n  sum = 0\n  for c in key:\n    sum += ord(c)\n  return sum\ndef my_hash2(key):\n  sum = 0\n  string_bytes = key.encode()\n  for b in string_bytes:\n    sum += b",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.cs46ht",
        "documentation": {}
    },
    {
        "label": "my_hash2",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.cs46ht",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.cs46ht",
        "peekOfCode": "def my_hash2(key):\n  sum = 0\n  string_bytes = key.encode()\n  for b in string_bytes:\n    sum += b\n  return sum\n# print(my_hash(\"ABC\"))\n# print(my_hash2(\"ABC\"))\n# djb2\n# encode key",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.cs46ht",
        "documentation": {}
    },
    {
        "label": "djb2",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.cs46ht",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.cs46ht",
        "peekOfCode": "def djb2(key):\n  str_key = str(key).encode()\n  hash_value = 5381\n  for b in str_key:\n    # shifted_value = hash_value << 5\n    # add_shift = shifted_value + hash_value\n    # total_hash = add_shift + b\n    # total_hash &= 0xffffffff # 0b11111111111111111111111111111111 32bits\n    # final_hash = total_hash & 0xffffffff\n    hash_value = ((hash_value << 5) + hash_value) + b",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.cs46ht",
        "documentation": {}
    },
    {
        "label": "djb2",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.cs46ht",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.cs46ht",
        "peekOfCode": "def djb2(self, key):\n    \"\"\"\n    DJB2 hash, 32-bit\n    \"\"\"\n    # Cast the key to a string and get bytes\n    str_key = str(key).encode()\n    # Start from an arbitrary large prime\n    hash_value = 5381\n    # Bit-shift and sum value for each character\n    for b in str_key:",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.cs46ht",
        "documentation": {}
    },
    {
        "label": "hash_index",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.cs46ht",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.cs46ht",
        "peekOfCode": "def hash_index(self, key):\n    \"\"\"\n    Take an arbitrary key and return a valid integer index\n    between within the storage capacity of the hash table.\n    \"\"\"\n    return self.djb2(key) % self.capacity\ndef put(self, key, value):\n    \"\"\"\n    Store the value with the given key.\n    \"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.cs46ht",
        "documentation": {}
    },
    {
        "label": "put",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.cs46ht",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.cs46ht",
        "peekOfCode": "def put(self, key, value):\n    \"\"\"\n    Store the value with the given key.\n    \"\"\"\n    index = self.hash_index(key)\n    self.storage[index] = value\n    return\ndef delete(self, key):\n    \"\"\"\n    Remove the value stored with the given key.",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.cs46ht",
        "documentation": {}
    },
    {
        "label": "delete",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.cs46ht",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.cs46ht",
        "peekOfCode": "def delete(self, key):\n    \"\"\"\n    Remove the value stored with the given key.\n    \"\"\"\n    index = self.hash_index(key)\n    self.storage[index] = None\ndef get(self, key):\n# \"\"\"\n#     Retrieve the value stored with the given key.\n#     Returns None if the key is not found.",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.cs46ht",
        "documentation": {}
    },
    {
        "label": "get",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.cs46ht",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.cs46ht",
        "peekOfCode": "def get(self, key):\n# \"\"\"\n#     Retrieve the value stored with the given key.\n#     Returns None if the key is not found.\n#     \"\"\"\n    index = self.hash_index(key)\n    return self.storage[index]\n\"\"\"# CODE 7506\n# Demo\n\"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.cs46ht",
        "documentation": {}
    },
    {
        "label": "hash_index",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.cs46ht",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.cs46ht",
        "peekOfCode": "def hash_index(self, key):\n      \"\"\"\n      Take an arbitrary key and return a valid integer index\n      between within the storage capacity of the hash table.\n      \"\"\"\n      return self.djb2(key) % self.capacity\n    def put(self, key, value):\n        # Your code here\n        index = self.hash_index(key)\n        if self.storage[index] == None:",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.cs46ht",
        "documentation": {}
    },
    {
        "label": "my_hash_number",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.cs46ht",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.cs46ht",
        "peekOfCode": "my_hash_number = djb2(\"ABCD\")\nprint(my_hash_number)\nstorage = [None] * 10\n\"\"\"# CODE 7506\n\"\"\"\nclass HashTable:\n# \"\"\"\n# A hash table with `capacity` buckets\n# that accepts string keys\n# \"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.cs46ht",
        "documentation": {}
    },
    {
        "label": "storage",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.cs46ht",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.cs46ht",
        "peekOfCode": "storage = [None] * 10\n\"\"\"# CODE 7506\n\"\"\"\nclass HashTable:\n# \"\"\"\n# A hash table with `capacity` buckets\n# that accepts string keys\n# \"\"\"\ndef __init__(self, capacity):\n    self.capacity = capacity  # Number of buckets in the hash table",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.cs46ht",
        "documentation": {}
    },
    {
        "label": "hash_table",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.cs46ht",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.cs46ht",
        "peekOfCode": "hash_table = MyHashTable();\nhash_table.put(\"a\", 1);\nhash_table.put(\"b\", 2);\nhash_table.get(\"a\");            // returns 1\nhash_table.get(\"c\");            // returns -1 (not found)\nhash_table.put(\"b\", 1);         // update the existing value\nhash_table.get(\"b\");            // returns 1\nhash_table.remove(\"b\");         // remove the mapping for 2\nhash_table.get(\"b\");            // returns -1 (not found)\n```",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.cs46ht",
        "documentation": {}
    },
    {
        "label": "greet",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i (2)",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i (2)",
        "peekOfCode": "def greet(name=\"world!\"):\n  print(type(name))\n  print(f\"Hello {name}\")\ngreet(\"1234\")\n# lets play with some strings\n# ['capitalize', 'casefold', 'center', 'count', 'encode', 'endswith', 'expandtabs', 'find', 'format', 'format_map', 'index', 'isalnum', 'isalpha', 'isascii', 'isdecimal', 'isdigit', 'isidentifier', 'islower', 'isnumeric', 'isprintable', 'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lower', 'lstrip', 'maketrans', 'partition', 'replace', 'rfind', 'rindex', 'rjust', 'rpartition', 'rsplit', 'rstrip', 'split', 'splitlines', 'startswith', 'strip', 'swapcase', 'title', 'translate', 'upper', 'zfill']\n# print(dir(\"\"))\nprint(help(\"\".count))\na = \"aabbccqqqq\"\nprint(a.count(\"q\"))",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i (2)",
        "documentation": {}
    },
    {
        "label": "addition",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i (2)",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i (2)",
        "peekOfCode": "def addition(a, b):\n    # Your code here\n\"\"\"\nChallenge #2:\nWrite a function that takes an integer `minutes` and converts it to seconds.\nExamples:\n- convert(5) ➞ 300\n- convert(3) ➞ 180\n- convert(2) ➞ 120\n\"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i (2)",
        "documentation": {}
    },
    {
        "label": "convert",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i (2)",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i (2)",
        "peekOfCode": "def convert(minutes):\n    # Your code here\n\"\"\"\nChallenge #3:\nCreate a function that takes a string and returns it as an integer.\nExamples:\n- string_int(\"6\") ➞ 6\n- string_int(\"1000\") ➞ 1000\n- string_int(\"12\") ➞ 12\n\"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i (2)",
        "documentation": {}
    },
    {
        "label": "string_int",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i (2)",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i (2)",
        "peekOfCode": "def string_int(txt):\n    # Your code here\n\"\"\"\nChallenge #4:\nCreate a function that takes length and width and finds the perimeter of a\nrectangle.\nExamples:\n- find_perimeter(6, 7) ➞ 26\n- find_perimeter(20, 10) ➞ 60\n- find_perimeter(2, 9) ➞ 22",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i (2)",
        "documentation": {}
    },
    {
        "label": "find_perimeter",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i (2)",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i (2)",
        "peekOfCode": "def find_perimeter(length, width):\n\"\"\"\nChallenge #5:\nCreate a function that returns a list of strings sorted by length in ascending\norder.\nExamples:\n- sort_by_length([\"a\", \"ccc\", \"dddd\", \"bb\"]) ➞ [\"a\", \"bb\", \"ccc\", \"dddd\"]\n- sort_by_length([\"apple\", \"pie\", \"shortcake\"]) ➞ [\"pie\", \"apple\", \"shortcake\"]\n- sort_by_length([\"may\", \"april\", \"september\", \"august\"]) ➞ [\"may\", \"april\", \"august\", \"september\"]\n- sort_by_length([]) ➞ []",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i (2)",
        "documentation": {}
    },
    {
        "label": "sort_by_length",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i (2)",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i (2)",
        "peekOfCode": "def sort_by_length(lst):\n\"\"\"\nChallenge #6:\nCreate a function that takes a string, checks if it has the same number of \"x\"s\nand \"o\"s and returns either True or False.\n- Return a boolean value (True or False).\n- The string can contain any character.\n- When no x and no o are in the string, return True.\nExamples:\n- XO(\"ooxx\") ➞ True",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i (2)",
        "documentation": {}
    },
    {
        "label": "XO",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i (2)",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i (2)",
        "peekOfCode": "def XO(txt):\n\"\"\"\nChallenge #7:\nGiven an unsorted list, create a function that returns the nth smallest element\n(the smallest element is the first smallest, the second smallest element is the\nsecond smallest, etc).\nExamples:\n- nth_smallest([7, 5, 3, 1], 1) ➞ 1\n- nth_smallest([1, 3, 5, 7], 3) ➞ 5\n- nth_smallest([1, 3, 5, 7], 5) ➞ None",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i (2)",
        "documentation": {}
    },
    {
        "label": "nth_smallest",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i (2)",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i (2)",
        "peekOfCode": "def nth_smallest(lst, n):\n\"\"\"\nChallenge #8:\nCreate a function that returns the number of arguments it was called with.\nExamples:\n- num_args() ➞ 0\n- num_args(\"foo\") ➞ 1\n- num_args(\"foo\", \"bar\") ➞ 2\n- num_args(True, False) ➞ 2\n- num_args({}) ➞ 1",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i (2)",
        "documentation": {}
    },
    {
        "label": "num_args",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i (2)",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i (2)",
        "peekOfCode": "def num_args():\n\"\"\"\nChallenge #9:\nWrite a function that creates a dictionary with each (key, value) pair being\nthe (lower case, upper case) versions of a letter, respectively.\nExamples:\n- mapping([\"p\", \"s\"]) ➞ { \"p\": \"P\", \"s\": \"S\" }\n- mapping([\"a\", \"b\", \"c\"]) ➞ { \"a\": \"A\", \"b\": \"B\", \"c\": \"C\" }\n- mapping([\"a\", \"v\", \"y\", \"z\"]) ➞ { \"a\": \"A\", \"v\": \"V\", \"y\": \"Y\", \"z\": \"Z\" }\nNotes:",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i (2)",
        "documentation": {}
    },
    {
        "label": "mapping",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i (2)",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i (2)",
        "peekOfCode": "def mapping(letters):\n\"\"\"\nChallenge #10:\nCreate a function that applies a discount d to every number in the list.\nExamples:\n- get_discounts([2, 4, 6, 11], \"50%\") ➞ [1, 2, 3, 5.5]\n- get_discounts([10, 20, 40, 80], \"75%\") ➞ [7.5, 15, 30, 60]\n- get_discounts([100], \"45%\") ➞ [45]\nNotes:\n- The discount is the percentage of the original price (i.e the discount of",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i (2)",
        "documentation": {}
    },
    {
        "label": "get_discounts",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i (2)",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i (2)",
        "peekOfCode": "def get_discounts(nums, percentage):",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i (2)",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i (2)",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i (2)",
        "peekOfCode": "a = 10\na = \"a string\"\na = 1.2\na = []\na = ()\na = {\"name\": \"Tom\"}\nb = []\nb.append(\"Dave\")\nb.append(\"Bob\")\nb.append(\"Joe\")",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i (2)",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i (2)",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i (2)",
        "peekOfCode": "a = \"a string\"\na = 1.2\na = []\na = ()\na = {\"name\": \"Tom\"}\nb = []\nb.append(\"Dave\")\nb.append(\"Bob\")\nb.append(\"Joe\")\n# print(type(a))",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i (2)",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i (2)",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i (2)",
        "peekOfCode": "a = 1.2\na = []\na = ()\na = {\"name\": \"Tom\"}\nb = []\nb.append(\"Dave\")\nb.append(\"Bob\")\nb.append(\"Joe\")\n# print(type(a))\n# print(a[\"name\"])",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i (2)",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i (2)",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i (2)",
        "peekOfCode": "a = []\na = ()\na = {\"name\": \"Tom\"}\nb = []\nb.append(\"Dave\")\nb.append(\"Bob\")\nb.append(\"Joe\")\n# print(type(a))\n# print(a[\"name\"])\n# print(dir([]))",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i (2)",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i (2)",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i (2)",
        "peekOfCode": "a = ()\na = {\"name\": \"Tom\"}\nb = []\nb.append(\"Dave\")\nb.append(\"Bob\")\nb.append(\"Joe\")\n# print(type(a))\n# print(a[\"name\"])\n# print(dir([]))\nprint(b.pop(0))",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i (2)",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i (2)",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i (2)",
        "peekOfCode": "a = {\"name\": \"Tom\"}\nb = []\nb.append(\"Dave\")\nb.append(\"Bob\")\nb.append(\"Joe\")\n# print(type(a))\n# print(a[\"name\"])\n# print(dir([]))\nprint(b.pop(0))\nprint(b)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i (2)",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i (2)",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i (2)",
        "peekOfCode": "b = []\nb.append(\"Dave\")\nb.append(\"Bob\")\nb.append(\"Joe\")\n# print(type(a))\n# print(a[\"name\"])\n# print(dir([]))\nprint(b.pop(0))\nprint(b)\n\"\"\"# PYTHON I CODE: 5976\"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i (2)",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i (2)",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i (2)",
        "peekOfCode": "a = [\"Dave\"] * 25\na[20] = \"Steve\"\n# for n in range(12, 25):\n#   print(a[n])\nfor x in enumerate(a):\n  i = x[0]\n  e = x[1]\n  if i == 9:\n    continue\n  print(i)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i (2)",
        "documentation": {}
    },
    {
        "label": "a[20]",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i (2)",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i (2)",
        "peekOfCode": "a[20] = \"Steve\"\n# for n in range(12, 25):\n#   print(a[n])\nfor x in enumerate(a):\n  i = x[0]\n  e = x[1]\n  if i == 9:\n    continue\n  print(i)\n  print(e)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i (2)",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i (2)",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i (2)",
        "peekOfCode": "a = int(input(\"input a number! \"))\nb = int(input(\"input a number! \"))4\nprint(f\"{a + b}\")\n\"\"\"# PYTHON I CODE: 5976\"\"\"\n# lets reuse some code...\ndef greet(name=\"world!\"):\n  print(type(name))\n  print(f\"Hello {name}\")\ngreet(\"1234\")\n# lets play with some strings",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i (2)",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i (2)",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i (2)",
        "peekOfCode": "b = int(input(\"input a number! \"))4\nprint(f\"{a + b}\")\n\"\"\"# PYTHON I CODE: 5976\"\"\"\n# lets reuse some code...\ndef greet(name=\"world!\"):\n  print(type(name))\n  print(f\"Hello {name}\")\ngreet(\"1234\")\n# lets play with some strings\n# ['capitalize', 'casefold', 'center', 'count', 'encode', 'endswith', 'expandtabs', 'find', 'format', 'format_map', 'index', 'isalnum', 'isalpha', 'isascii', 'isdecimal', 'isdigit', 'isidentifier', 'islower', 'isnumeric', 'isprintable', 'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lower', 'lstrip', 'maketrans', 'partition', 'replace', 'rfind', 'rindex', 'rjust', 'rpartition', 'rsplit', 'rstrip', 'split', 'splitlines', 'startswith', 'strip', 'swapcase', 'title', 'translate', 'upper', 'zfill']",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i (2)",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i (2)",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i (2)",
        "peekOfCode": "a = \"aabbccqqqq\"\nprint(a.count(\"q\"))\n# Lets put it all together\n\"\"\"# Challenges\"\"\"\n\"\"\"\nChallenge #1:\nCreate a function that takes two numbers as arguments and return their sum.\nExamples:\n- addition(3, 2) ➞ 5\n- addition(-3, -6) ➞ -9",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i (2)",
        "documentation": {}
    },
    {
        "label": "addition",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i",
        "peekOfCode": "def addition(a, b):\n    # Your code here\n\"\"\"\nChallenge #2:\nWrite a function that takes an integer `minutes` and converts it to seconds.\nExamples:\n- convert(5) ➞ 300\n- convert(3) ➞ 180\n- convert(2) ➞ 120\n\"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i",
        "documentation": {}
    },
    {
        "label": "convert",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i",
        "peekOfCode": "def convert(minutes):\n    # Your code here\n\"\"\"\nChallenge #3:\nCreate a function that takes a string and returns it as an integer.\nExamples:\n- string_int(\"6\") ➞ 6\n- string_int(\"1000\") ➞ 1000\n- string_int(\"12\") ➞ 12\n\"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i",
        "documentation": {}
    },
    {
        "label": "string_int",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i",
        "peekOfCode": "def string_int(txt):\n    # Your code here\n\"\"\"\nChallenge #4:\nCreate a function that takes length and width and finds the perimeter of a\nrectangle.\nExamples:\n- find_perimeter(6, 7) ➞ 26\n- find_perimeter(20, 10) ➞ 60\n- find_perimeter(2, 9) ➞ 22",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i",
        "documentation": {}
    },
    {
        "label": "find_perimeter",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i",
        "peekOfCode": "def find_perimeter(length, width):\n\"\"\"\nChallenge #5:\nCreate a function that returns a list of strings sorted by length in ascending\norder.\nExamples:\n- sort_by_length([\"a\", \"ccc\", \"dddd\", \"bb\"]) ➞ [\"a\", \"bb\", \"ccc\", \"dddd\"]\n- sort_by_length([\"apple\", \"pie\", \"shortcake\"]) ➞ [\"pie\", \"apple\", \"shortcake\"]\n- sort_by_length([\"may\", \"april\", \"september\", \"august\"]) ➞ [\"may\", \"april\", \"august\", \"september\"]\n- sort_by_length([]) ➞ []",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i",
        "documentation": {}
    },
    {
        "label": "sort_by_length",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i",
        "peekOfCode": "def sort_by_length(lst):\n\"\"\"\nChallenge #6:\nCreate a function that takes a string, checks if it has the same number of \"x\"s\nand \"o\"s and returns either True or False.\n- Return a boolean value (True or False).\n- The string can contain any character.\n- When no x and no o are in the string, return True.\nExamples:\n- XO(\"ooxx\") ➞ True",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i",
        "documentation": {}
    },
    {
        "label": "XO",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i",
        "peekOfCode": "def XO(txt):\n\"\"\"\nChallenge #7:\nGiven an unsorted list, create a function that returns the nth smallest element\n(the smallest element is the first smallest, the second smallest element is the\nsecond smallest, etc).\nExamples:\n- nth_smallest([7, 5, 3, 1], 1) ➞ 1\n- nth_smallest([1, 3, 5, 7], 3) ➞ 5\n- nth_smallest([1, 3, 5, 7], 5) ➞ None",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i",
        "documentation": {}
    },
    {
        "label": "nth_smallest",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i",
        "peekOfCode": "def nth_smallest(lst, n):\n\"\"\"\nChallenge #8:\nCreate a function that returns the number of arguments it was called with.\nExamples:\n- num_args() ➞ 0\n- num_args(\"foo\") ➞ 1\n- num_args(\"foo\", \"bar\") ➞ 2\n- num_args(True, False) ➞ 2\n- num_args({}) ➞ 1",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i",
        "documentation": {}
    },
    {
        "label": "num_args",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i",
        "peekOfCode": "def num_args():\n\"\"\"\nChallenge #9:\nWrite a function that creates a dictionary with each (key, value) pair being\nthe (lower case, upper case) versions of a letter, respectively.\nExamples:\n- mapping([\"p\", \"s\"]) ➞ { \"p\": \"P\", \"s\": \"S\" }\n- mapping([\"a\", \"b\", \"c\"]) ➞ { \"a\": \"A\", \"b\": \"B\", \"c\": \"C\" }\n- mapping([\"a\", \"v\", \"y\", \"z\"]) ➞ { \"a\": \"A\", \"v\": \"V\", \"y\": \"Y\", \"z\": \"Z\" }\nNotes:",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i",
        "documentation": {}
    },
    {
        "label": "mapping",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i",
        "peekOfCode": "def mapping(letters):\n\"\"\"\nChallenge #10:\nCreate a function that applies a discount d to every number in the list.\nExamples:\n- get_discounts([2, 4, 6, 11], \"50%\") ➞ [1, 2, 3, 5.5]\n- get_discounts([10, 20, 40, 80], \"75%\") ➞ [7.5, 15, 30, 60]\n- get_discounts([100], \"45%\") ➞ [45]\nNotes:\n- The discount is the percentage of the original price (i.e the discount of",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i",
        "documentation": {}
    },
    {
        "label": "get_discounts",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i",
        "peekOfCode": "def get_discounts(nums, percentage):",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.cs46_python_i",
        "documentation": {}
    },
    {
        "label": "print_one_item",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.cs47_python_iii",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.cs47_python_iii",
        "peekOfCode": "def print_one_item(items):\n    print(items[0])\n\"\"\"\nLinear Time O(n)\n\"\"\"\ndef print_every_item(items):\n    for item in items:\n        print(item)\n\"\"\"\nQuadratic Time O(n^2)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.cs47_python_iii",
        "documentation": {}
    },
    {
        "label": "print_every_item",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.cs47_python_iii",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.cs47_python_iii",
        "peekOfCode": "def print_every_item(items):\n    for item in items:\n        print(item)\n\"\"\"\nQuadratic Time O(n^2)\n\"\"\"\ndef print_pairs(items):\n    for item_one in items:\n        for item_two in items:\n            print(item_one, item_two)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.cs47_python_iii",
        "documentation": {}
    },
    {
        "label": "print_pairs",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.cs47_python_iii",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.cs47_python_iii",
        "peekOfCode": "def print_pairs(items):\n    for item_one in items:\n        for item_two in items:\n            print(item_one, item_two)\n\"\"\"\nWhat about constants?\n\"\"\"\ndef do_a_bunch_of_stuff(items):  # O(1 + n/2 + 2000) -> O(n)\n    last_idx = len(items) - 1\n    print(items[last_idx])  # O(1)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.cs47_python_iii",
        "documentation": {}
    },
    {
        "label": "do_a_bunch_of_stuff",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.cs47_python_iii",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.cs47_python_iii",
        "peekOfCode": "def do_a_bunch_of_stuff(items):  # O(1 + n/2 + 2000) -> O(n)\n    last_idx = len(items) - 1\n    print(items[last_idx])  # O(1)\n    middle_idx = len(items) / 2\n    idx = 0\n    while idx < middle_idx:  # O(n/2)\n        print(items[idx])\n        idx = idx + 1\n    for num in range(2000):  # O(2000)\n        print(num)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.cs47_python_iii",
        "documentation": {}
    },
    {
        "label": "do_different_things",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.cs47_python_iii",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.cs47_python_iii",
        "peekOfCode": "def do_different_things(items):  # O(n + n^2) -> O(n^2)\n    for item in items:  # O(n)\n        print(item)\n    for item_one in items:  # O(n * n) = O(n^2)\n        for item_two in items:\n            print(item_one, item_two)\n\"\"\"\nBig O is the worst case\n\"\"\"\ndef search_for_thing(items, thing):  # O(n)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.cs47_python_iii",
        "documentation": {}
    },
    {
        "label": "search_for_thing",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.cs47_python_iii",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.cs47_python_iii",
        "peekOfCode": "def search_for_thing(items, thing):  # O(n)\n    for item in items:\n        if item == thing:\n            return True\n    return False\n\"\"\"\nClassify the runtime complexity of the number_of_steps function below using Big O notation.\n\"\"\"\ndef number_of_steps(num):  # O(log(n))\n    steps = 0",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.cs47_python_iii",
        "documentation": {}
    },
    {
        "label": "number_of_steps",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.cs47_python_iii",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.cs47_python_iii",
        "peekOfCode": "def number_of_steps(num):  # O(log(n))\n    steps = 0\n    while num > 0:\n        if num % 2 == 0:\n            num = num // 2\n        else:\n            num = num - 1\n        steps = steps + 1\n    return steps\n# print(number_of_steps(10))",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.cs47_python_iii",
        "documentation": {}
    },
    {
        "label": "print_lambda_n_times",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.cs47_python_iii",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.cs47_python_iii",
        "peekOfCode": "def print_lambda_n_times(n):\n    for i in range(n):\n        print(\"lambda\")\ndef get_the_max(items_list):\n    maximum = float(\"-inf\")\n    for item in items_list:\n        if item > maximum:\n            maximum = item\n    return maximum\n\"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.cs47_python_iii",
        "documentation": {}
    },
    {
        "label": "get_the_max",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.cs47_python_iii",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.cs47_python_iii",
        "peekOfCode": "def get_the_max(items_list):\n    maximum = float(\"-inf\")\n    for item in items_list:\n        if item > maximum:\n            maximum = item\n    return maximum\n\"\"\"\nLinear Space O(n)\n\"\"\"\ndef append_to_list_n_times(n):",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.cs47_python_iii",
        "documentation": {}
    },
    {
        "label": "append_to_list_n_times",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.cs47_python_iii",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.cs47_python_iii",
        "peekOfCode": "def append_to_list_n_times(n):\n    my_list = []  # O(1)\n    for _ in range(n):  # O(n)\n        my_list.append(\"lambda\")  # O(1)\n    return my_list\n\"\"\"\nUse Big O notation to classify the space complexity of the function below.\n\"\"\"\ndef fibonacci(n):  # O(n)\n    lst = [0, 1]  # O(2)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.cs47_python_iii",
        "documentation": {}
    },
    {
        "label": "fibonacci",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.cs47_python_iii",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.cs47_python_iii",
        "peekOfCode": "def fibonacci(n):  # O(n)\n    lst = [0, 1]  # O(2)\n    for i in range(2, n):  # O(n)\n        lst.append(lst[i - 2] + lst[i - 1])  # O(2)\n    return lst[n - 1]  # O(1)\n\"\"\"\nUse Big O notation to classify the space complexity of the function below.\n\"\"\"\ndef fibonacci_two(n):  # O(1)\n    x, y, z = 0, 1, None  # O(3)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.cs47_python_iii",
        "documentation": {}
    },
    {
        "label": "fibonacci_two",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.cs47_python_iii",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.cs47_python_iii",
        "peekOfCode": "def fibonacci_two(n):  # O(1)\n    x, y, z = 0, 1, None  # O(3)\n    if n == 0:\n        return x\n    if n == 1:\n        return y\n    for i in range(2, n):\n        z = x + y\n        x, y = y, z\n    return z",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.cs47_python_iii",
        "documentation": {}
    },
    {
        "label": "do_something",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.cs47_python_iii",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.cs47_python_iii",
        "peekOfCode": "def do_something(n):  # O(n^2)\n    lst = []  # O(1)\n    for i in range(n):  # O(n)\n        for j in range(n):  # O(n)\n            lst.append(i + j)  # O(n^2 * 2)\n    return lst\n\"\"\"# List Comprehensions\"\"\"\nl = [1, 2, 3, 4, 5]\nfor i in range(len(l)):\n    l[i] = l[i] * 2",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.cs47_python_iii",
        "documentation": {}
    },
    {
        "label": "single_number",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.cs47_python_iii",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.cs47_python_iii",
        "peekOfCode": "def single_number(nums):\n    singles = []\n    for num in nums:\n        if num not in singles:\n            singles.append(num)\n        else:\n            singles.remove(num)\n    return singles.pop()\nprint(single_number([3, 3, 2]))  #  -> 2\nprint(single_number([5, 2, 3, 2, 3]))  # -> 5",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.cs47_python_iii",
        "documentation": {}
    },
    {
        "label": "phonebook",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.cs47_python_iii",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.cs47_python_iii",
        "peekOfCode": "phonebook = {\"Abe\": 4569874321, \"Bill\": 7659803241, \"Barry\": 6573214789}\n# YOUR CODE HERE\nphonebook[\"Herb\"] = 7653420789\ndel phonebook[\"Bill\"]\n# Should print Herb is in the phonebook.\nif \"Herb\" in phonebook:\n    print(\"Herb is in the phonebook.\")\n# Should print Bill is not in the phonebook.\nif \"Bill\" not in phonebook:\n    print(\"Bill is not in the phonebook.\")",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.cs47_python_iii",
        "documentation": {}
    },
    {
        "label": "phonebook[\"Herb\"]",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.cs47_python_iii",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.cs47_python_iii",
        "peekOfCode": "phonebook[\"Herb\"] = 7653420789\ndel phonebook[\"Bill\"]\n# Should print Herb is in the phonebook.\nif \"Herb\" in phonebook:\n    print(\"Herb is in the phonebook.\")\n# Should print Bill is not in the phonebook.\nif \"Bill\" not in phonebook:\n    print(\"Bill is not in the phonebook.\")\n\"\"\"# Mutability\"\"\"\n\"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.cs47_python_iii",
        "documentation": {}
    },
    {
        "label": "my_list1",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.cs47_python_iii",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.cs47_python_iii",
        "peekOfCode": "my_list1 = [1, 2, 3, 4, 5, 6]\nmy_list2 = my_list1\n# How would you verify that my_list1 and my_list2 have the same identity?\nprint(id(my_list1), id(my_list2))\nmy_list1.append(7)\n# Check if my_list1 and my_list2 still have the same identity.\n# If they do, why is that?\nprint(id(my_list1), id(my_list2))\n\"\"\"\nExample Two",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.cs47_python_iii",
        "documentation": {}
    },
    {
        "label": "my_list2",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.cs47_python_iii",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.cs47_python_iii",
        "peekOfCode": "my_list2 = my_list1\n# How would you verify that my_list1 and my_list2 have the same identity?\nprint(id(my_list1), id(my_list2))\nmy_list1.append(7)\n# Check if my_list1 and my_list2 still have the same identity.\n# If they do, why is that?\nprint(id(my_list1), id(my_list2))\n\"\"\"\nExample Two\n\"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.cs47_python_iii",
        "documentation": {}
    },
    {
        "label": "my_text1",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.cs47_python_iii",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.cs47_python_iii",
        "peekOfCode": "my_text1 = \"Lambda School\"\nmy_text2 = my_text1\n# How would you verify that my_text1 and my_text2 have the same identity?\nprint(\"My Text\", id(my_text1), id(my_text2))\nmy_text1 += \" is awesome!\"\n# Check if my_text1 and my_text2 still have the same identity?\nprint(\"My Text\", id(my_text1), id(my_text2))\n# If they do not, why is that?\n# Now check if my_text1 and my_text2 have the same value?\nprint(\"1:\", my_text1, \"2:\", my_text2)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.cs47_python_iii",
        "documentation": {}
    },
    {
        "label": "my_text2",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.cs47_python_iii",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.cs47_python_iii",
        "peekOfCode": "my_text2 = my_text1\n# How would you verify that my_text1 and my_text2 have the same identity?\nprint(\"My Text\", id(my_text1), id(my_text2))\nmy_text1 += \" is awesome!\"\n# Check if my_text1 and my_text2 still have the same identity?\nprint(\"My Text\", id(my_text1), id(my_text2))\n# If they do not, why is that?\n# Now check if my_text1 and my_text2 have the same value?\nprint(\"1:\", my_text1, \"2:\", my_text2)\n# Do they? Explain why or why not.",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.cs47_python_iii",
        "documentation": {}
    },
    {
        "label": "produce",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.cs47_python_iii",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.cs47_python_iii",
        "peekOfCode": "produce = [\"Apple\", \"Banana\", \"Carrot\"]\n# Initialize a tuple and include a reference to the produce list in the tuple\nstore = (\"Bill's Grocery\", produce)\nprint(\"store\", id(store))\n# Add a new item to the produce list\nproduce.append(\"Dragonfruit\")\nprint(\"store\", id(store))\nprint(dir(store))\n# Did you notice that the identity of store remained the same?\n# But I thought if you changed a mutable object, a new object would",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.cs47_python_iii",
        "documentation": {}
    },
    {
        "label": "store",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.cs47_python_iii",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.cs47_python_iii",
        "peekOfCode": "store = (\"Bill's Grocery\", produce)\nprint(\"store\", id(store))\n# Add a new item to the produce list\nproduce.append(\"Dragonfruit\")\nprint(\"store\", id(store))\nprint(dir(store))\n# Did you notice that the identity of store remained the same?\n# But I thought if you changed a mutable object, a new object would\n# be created in memory? Why did that not occur here?\n\"\"\"# Time Complexity",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.cs47_python_iii",
        "documentation": {}
    },
    {
        "label": "l",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.cs47_python_iii",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.cs47_python_iii",
        "peekOfCode": "l = [1, 2, 3, 4, 5]\nfor i in range(len(l)):\n    l[i] = l[i] * 2\nl2 = [l[i] * 2 for i in range(len(l)) if l[i] == 4]\n# for i in range(len(l)):\n# l2.append(l[i] * 2)\nl3 = []\nfor i in range(len(l)):\n    l3.append(l[i] * 2)\nprint(l)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.cs47_python_iii",
        "documentation": {}
    },
    {
        "label": "l2",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.cs47_python_iii",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.cs47_python_iii",
        "peekOfCode": "l2 = [l[i] * 2 for i in range(len(l)) if l[i] == 4]\n# for i in range(len(l)):\n# l2.append(l[i] * 2)\nl3 = []\nfor i in range(len(l)):\n    l3.append(l[i] * 2)\nprint(l)\nprint(l2)\nprint(l3)\nprint(l)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.cs47_python_iii",
        "documentation": {}
    },
    {
        "label": "l3",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.cs47_python_iii",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.cs47_python_iii",
        "peekOfCode": "l3 = []\nfor i in range(len(l)):\n    l3.append(l[i] * 2)\nprint(l)\nprint(l2)\nprint(l3)\nprint(l)\n\"\"\"# DEMO\"\"\"\n\"\"\"\nDemonstration",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.cs47_python_iii",
        "documentation": {}
    },
    {
        "label": "Tree",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.csBinaryTreelnvert",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.csBinaryTreelnvert",
        "peekOfCode": "class Tree(object):\n    def __init__(self, x):\n        self.value = x\n        self.left = None\n        self.right = None\ndef csBinaryTreeInvert(root):\n    if not root or (not root.left and not root.right):\n        return root\n    tmp = root.left\n    root.left = root.right",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.csBinaryTreelnvert",
        "documentation": {}
    },
    {
        "label": "csBinaryTreeInvert",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.csBinaryTreelnvert",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.csBinaryTreelnvert",
        "peekOfCode": "def csBinaryTreeInvert(root):\n    if not root or (not root.left and not root.right):\n        return root\n    tmp = root.left\n    root.left = root.right\n    root.right = tmp\n    csBinaryTreeInvert(root.left)\n    csBinaryTreeInvert(root.right)\n    return root",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.csBinaryTreelnvert",
        "documentation": {}
    },
    {
        "label": "Tree",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.csBSTRangeSum",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.csBSTRangeSum",
        "peekOfCode": "class Tree(object):\n    def __init__(self, x):\n        self.value = x\n        self.left = None\n        self.right = None\ndef csBSTRangeSum(root, lower, upper):\n    if not root:\n        return 0\n    res = 0\n    if lower <= root.value <= upper:",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.csBSTRangeSum",
        "documentation": {}
    },
    {
        "label": "csBSTRangeSum",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.csBSTRangeSum",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.csBSTRangeSum",
        "peekOfCode": "def csBSTRangeSum(root, lower, upper):\n    if not root:\n        return 0\n    res = 0\n    if lower <= root.value <= upper:\n        res += root.value\n        res += csBSTRangeSum(root.left, lower, upper)\n        res += csBSTRangeSum(root.right, lower, upper)\n    elif root.value < lower:\n        res += csBSTRangeSum(root.right, lower, upper)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.csBSTRangeSum",
        "documentation": {}
    },
    {
        "label": "dfs",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.csFindAllPathsFromAToB",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.csFindAllPathsFromAToB",
        "peekOfCode": "def dfs(s):\n    # Append the node in path\n    # and set visited\n    path.append(s)\n    visited[s] = True\n    # Path started with a node\n    # having in-degree 0 and\n    # current node has out-degree 0,\n    # print current path\n    if outdeg0[s] and indeg0[path[0]]:",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.csFindAllPathsFromAToB",
        "documentation": {}
    },
    {
        "label": "csFindAllPathsFromAToB",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.csFindAllPathsFromAToB",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.csFindAllPathsFromAToB",
        "peekOfCode": "def csFindAllPathsFromAToB(graph):\n    for i in range(graph):\n        # for each node with in-degree 0\n        # print all possible paths\n        if indeg0[i] and adj[i]:\n            path = []\n            visited = [False] * (graph + 1)\n            dfs(i)\n# Driver code\ngraph = 6",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.csFindAllPathsFromAToB",
        "documentation": {}
    },
    {
        "label": "graph",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.csFindAllPathsFromAToB",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.csFindAllPathsFromAToB",
        "peekOfCode": "graph = 6\n# set all nodes unvisited\nvisited = [False] * (graph + 1)\npath = []\n# edges = (a, b): a -> b\nedges = [(5, 0), (5, 2), (2, 3), (4, 0), (4, 1), (3, 1)]\n# adjacency list for nodes\nadj = defaultdict(list)\n# indeg0 and outdeg0 arrays\nindeg0 = [True] * graph",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.csFindAllPathsFromAToB",
        "documentation": {}
    },
    {
        "label": "visited",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.csFindAllPathsFromAToB",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.csFindAllPathsFromAToB",
        "peekOfCode": "visited = [False] * (graph + 1)\npath = []\n# edges = (a, b): a -> b\nedges = [(5, 0), (5, 2), (2, 3), (4, 0), (4, 1), (3, 1)]\n# adjacency list for nodes\nadj = defaultdict(list)\n# indeg0 and outdeg0 arrays\nindeg0 = [True] * graph\noutdeg0 = [True] * graph\nfor edge in edges:",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.csFindAllPathsFromAToB",
        "documentation": {}
    },
    {
        "label": "path",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.csFindAllPathsFromAToB",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.csFindAllPathsFromAToB",
        "peekOfCode": "path = []\n# edges = (a, b): a -> b\nedges = [(5, 0), (5, 2), (2, 3), (4, 0), (4, 1), (3, 1)]\n# adjacency list for nodes\nadj = defaultdict(list)\n# indeg0 and outdeg0 arrays\nindeg0 = [True] * graph\noutdeg0 = [True] * graph\nfor edge in edges:\n    u, v = edge[0], edge[1]",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.csFindAllPathsFromAToB",
        "documentation": {}
    },
    {
        "label": "edges",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.csFindAllPathsFromAToB",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.csFindAllPathsFromAToB",
        "peekOfCode": "edges = [(5, 0), (5, 2), (2, 3), (4, 0), (4, 1), (3, 1)]\n# adjacency list for nodes\nadj = defaultdict(list)\n# indeg0 and outdeg0 arrays\nindeg0 = [True] * graph\noutdeg0 = [True] * graph\nfor edge in edges:\n    u, v = edge[0], edge[1]\n    # u -> v\n    adj[u].append(v)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.csFindAllPathsFromAToB",
        "documentation": {}
    },
    {
        "label": "adj",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.csFindAllPathsFromAToB",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.csFindAllPathsFromAToB",
        "peekOfCode": "adj = defaultdict(list)\n# indeg0 and outdeg0 arrays\nindeg0 = [True] * graph\noutdeg0 = [True] * graph\nfor edge in edges:\n    u, v = edge[0], edge[1]\n    # u -> v\n    adj[u].append(v)\n    # set indeg0[v] <- false\n    indeg0[v] = False",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.csFindAllPathsFromAToB",
        "documentation": {}
    },
    {
        "label": "indeg0",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.csFindAllPathsFromAToB",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.csFindAllPathsFromAToB",
        "peekOfCode": "indeg0 = [True] * graph\noutdeg0 = [True] * graph\nfor edge in edges:\n    u, v = edge[0], edge[1]\n    # u -> v\n    adj[u].append(v)\n    # set indeg0[v] <- false\n    indeg0[v] = False\n    # set outdeg0[u] <- false\n    outdeg0[u] = False",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.csFindAllPathsFromAToB",
        "documentation": {}
    },
    {
        "label": "outdeg0",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.csFindAllPathsFromAToB",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.csFindAllPathsFromAToB",
        "peekOfCode": "outdeg0 = [True] * graph\nfor edge in edges:\n    u, v = edge[0], edge[1]\n    # u -> v\n    adj[u].append(v)\n    # set indeg0[v] <- false\n    indeg0[v] = False\n    # set outdeg0[u] <- false\n    outdeg0[u] = False\n# print('All possible paths:')",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.csFindAllPathsFromAToB",
        "documentation": {}
    },
    {
        "label": "csReverseIntegerBits",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.csReverseBits",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.csReverseBits",
        "peekOfCode": "def csReverseIntegerBits(n):\n    rev = 0\n    # traversing bits of 'n' from the right\n    while n > 0:\n        # bitwise left shift 'rev' by 1\n        rev = rev << 1\n        # if current bit is '1'\n        if n & 1 == 1:\n            rev = rev ^ 1\n        # bitwise right shift 'n' by 1",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.csReverseBits",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.csReverseBits",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.csReverseBits",
        "peekOfCode": "n = 267\nprint(csReverseIntegerBits(n))",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.csReverseBits",
        "documentation": {}
    },
    {
        "label": "my_hash",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.d3",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.d3",
        "peekOfCode": "def my_hash(key):\n    sum = 0\n    for c in key:\n        nc = ord(c)\n        sum += nc\n    return sum\nstorage = [None] * 10\nh = my_hash(\"CBA\")\nprint(h)\nn = h % len(storage)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.d3",
        "documentation": {}
    },
    {
        "label": "put",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.d3",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.d3",
        "peekOfCode": "def put(key, value):\n    idx = my_hash(key) % len(storage)\n    storage[idx] = value\ndef get(key):\n    idx = my_hash(key) % len(storage)\n    return storage[idx]\nput(\"Tom\", 41)\n# bryan@LAPTOP-9LGJ3JGS:/c/Lambda/CIRRICULUMN/_NOTES/CS-python-notes/WEEKS/wk17/d3$ python3 d3.py\n# 198\n# 8",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.d3",
        "documentation": {}
    },
    {
        "label": "get",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.d3",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.d3",
        "peekOfCode": "def get(key):\n    idx = my_hash(key) % len(storage)\n    return storage[idx]\nput(\"Tom\", 41)\n# bryan@LAPTOP-9LGJ3JGS:/c/Lambda/CIRRICULUMN/_NOTES/CS-python-notes/WEEKS/wk17/d3$ python3 d3.py\n# 198\n# 8\n# bryan@LAPTOP-9LGJ3JGS:/c/Lambda/CIRRICULUMN/_NOTES/CS-python-notes/WEEKS/wk17/d3$",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.d3",
        "documentation": {}
    },
    {
        "label": "storage",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.d3",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.d3",
        "peekOfCode": "storage = [None] * 10\nh = my_hash(\"CBA\")\nprint(h)\nn = h % len(storage)\nprint(n)\ndef put(key, value):\n    idx = my_hash(key) % len(storage)\n    storage[idx] = value\ndef get(key):\n    idx = my_hash(key) % len(storage)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.d3",
        "documentation": {}
    },
    {
        "label": "h",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.d3",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.d3",
        "peekOfCode": "h = my_hash(\"CBA\")\nprint(h)\nn = h % len(storage)\nprint(n)\ndef put(key, value):\n    idx = my_hash(key) % len(storage)\n    storage[idx] = value\ndef get(key):\n    idx = my_hash(key) % len(storage)\n    return storage[idx]",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.d3",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.d3",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.d3",
        "peekOfCode": "n = h % len(storage)\nprint(n)\ndef put(key, value):\n    idx = my_hash(key) % len(storage)\n    storage[idx] = value\ndef get(key):\n    idx = my_hash(key) % len(storage)\n    return storage[idx]\nput(\"Tom\", 41)\n# bryan@LAPTOP-9LGJ3JGS:/c/Lambda/CIRRICULUMN/_NOTES/CS-python-notes/WEEKS/wk17/d3$ python3 d3.py",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.d3",
        "documentation": {}
    },
    {
        "label": "top_k_frequent",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.demo",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.demo",
        "peekOfCode": "def top_k_frequent(words, k):\nwords = [\"the\", \"sky\", \"is\", \"cloudy\", \"the\", \"the\", \"the\", \"cloudy\", \"is\", \"is\"]",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.demo",
        "documentation": {}
    },
    {
        "label": "words",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.demo",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.demo",
        "peekOfCode": "words = [\"lambda\", \"school\", \"rules\", \"lambda\", \"school\", \"rocks\"]\nk = 2\nOutput:\n[\"lambda\", \"school\"]\nExplanation:\n\"lambda\" and \"school\" are the two most frequent words.\n```\nExample 2:\n```plaintext\nInput:",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.demo",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.demo",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.demo",
        "peekOfCode": "k = 2\nOutput:\n[\"lambda\", \"school\"]\nExplanation:\n\"lambda\" and \"school\" are the two most frequent words.\n```\nExample 2:\n```plaintext\nInput:\nwords = [\"the\", \"sky\", \"is\", \"cloudy\", \"the\", \"the\", \"the\", \"cloudy\", \"is\", \"is\"]",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.demo",
        "documentation": {}
    },
    {
        "label": "words",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.demo",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.demo",
        "peekOfCode": "words = [\"the\", \"sky\", \"is\", \"cloudy\", \"the\", \"the\", \"the\", \"cloudy\", \"is\", \"is\"]\nk = 4\nOutput:\n[\"the\", \"is\", \"cloudy\", \"sky\"]\nExplanation:\n\"the\", \"is\", \"cloudy\", and \"sky\" are the four most frequent words. The words\nare sorted from highest frequency to lowest.\n```\nNotes:\n- `k` is always valid: `1 <= k <= number of unique elements.",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.demo",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.demo",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.demo",
        "peekOfCode": "k = 4\nOutput:\n[\"the\", \"is\", \"cloudy\", \"sky\"]\nExplanation:\n\"the\", \"is\", \"cloudy\", and \"sky\" are the four most frequent words. The words\nare sorted from highest frequency to lowest.\n```\nNotes:\n- `k` is always valid: `1 <= k <= number of unique elements.\n- words in the input list only contain lowercase letters.",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.demo",
        "documentation": {}
    },
    {
        "label": "words",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.demo",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.demo",
        "peekOfCode": "words = [\"the\", \"sky\", \"is\", \"cloudy\", \"the\", \"the\", \"the\", \"cloudy\", \"is\", \"is\"]",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.demo",
        "documentation": {}
    },
    {
        "label": "Graph",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.find-path-scrap",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.find-path-scrap",
        "peekOfCode": "class Graph:\n    # Constructor\n    def __init__(self, edges, N):\n        # A list of lists to represent an adjacency list\n        self.adjList = [[] for _ in range(N)]\n        # add edges to the undirected graph\n        for (src, dest) in edges:\n            self.adjList[src].append(dest)\n# Perform DFS on the graph and set the departure time of all vertices of the graph\ndef DFS(graph, v, discovered, departure, time):",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.find-path-scrap",
        "documentation": {}
    },
    {
        "label": "DFS",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.find-path-scrap",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.find-path-scrap",
        "peekOfCode": "def DFS(graph, v, discovered, departure, time):\n    # mark the current node as discovered\n    discovered[v] = True\n    # do for every edge `v —> u`\n    for u in graph.adjList[v]:\n        # if `u` is not yet discovered\n        if not discovered[u]:\n            time = DFS(graph, u, discovered, departure, time)\n    # ready to backtrack\n    # set departure time of vertex `v`",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.find-path-scrap",
        "documentation": {}
    },
    {
        "label": "isDAG",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.find-path-scrap",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.find-path-scrap",
        "peekOfCode": "def isDAG(graph, N):\n    # keep track of whether a vertex is discovered or not\n    discovered = [False] * N\n    # keep track of the departure time of a vertex in DFS\n    departure = [None] * N\n    time = 0\n    # Perform DFS traversal from all undiscovered vertices\n    # to visit all connected components of a graph\n    for i in range(N):\n        if not discovered[i]:",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.find-path-scrap",
        "documentation": {}
    },
    {
        "label": "csFindAddedLetter",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.findAddedLetter",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.findAddedLetter",
        "peekOfCode": "def csFindAddedLetter(str_1, str_2):\n    m1 = {}\n    for i in str_2:\n        if i in m1:\n            m1[i] += 1\n        else:\n            m1[i] = 1\n    for i in str_1:\n        m1[i] -= 1\n    for h1 in m1:",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.findAddedLetter",
        "documentation": {}
    },
    {
        "label": "dfs",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.findPathsFromA2B",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.findPathsFromA2B",
        "peekOfCode": "def dfs(s):\n    # Append the node in path\n    # and set visited\n    path.append(s)\n    visited[s] = True\n    # Path started with a node\n    # having in-degree 0 and\n    # current node has out-degree 0,\n    # print current path\n    if outdeg0[s] and indeg0[path[0]]:",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.findPathsFromA2B",
        "documentation": {}
    },
    {
        "label": "csFindAllPathsFromAToB",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.findPathsFromA2B",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.findPathsFromA2B",
        "peekOfCode": "def csFindAllPathsFromAToB(graph):\n    for i in range(n):\n        # for each node with in-degree 0\n        # print all possible paths\n        if indeg0[i] and adj[i]:\n            path = []\n            visited = [False] * (n + 1)\n            dfs(i)\n# Driver code\nfrom collections import defaultdict",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.findPathsFromA2B",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.findPathsFromA2B",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.findPathsFromA2B",
        "peekOfCode": "n = 6\n# set all nodes unvisited\nvisited = [False] * (n + 1)\npath = []\n# edges = (a, b): a -> b\nedges = [(5, 0), (5, 2), (2, 3), (4, 0), (4, 1), (3, 1)]\n# adjacency list for nodes\nadj = defaultdict(list)\n# indeg0 and outdeg0 arrays\nindeg0 = [True] * n",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.findPathsFromA2B",
        "documentation": {}
    },
    {
        "label": "visited",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.findPathsFromA2B",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.findPathsFromA2B",
        "peekOfCode": "visited = [False] * (n + 1)\npath = []\n# edges = (a, b): a -> b\nedges = [(5, 0), (5, 2), (2, 3), (4, 0), (4, 1), (3, 1)]\n# adjacency list for nodes\nadj = defaultdict(list)\n# indeg0 and outdeg0 arrays\nindeg0 = [True] * n\noutdeg0 = [True] * n\nfor edge in edges:",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.findPathsFromA2B",
        "documentation": {}
    },
    {
        "label": "path",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.findPathsFromA2B",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.findPathsFromA2B",
        "peekOfCode": "path = []\n# edges = (a, b): a -> b\nedges = [(5, 0), (5, 2), (2, 3), (4, 0), (4, 1), (3, 1)]\n# adjacency list for nodes\nadj = defaultdict(list)\n# indeg0 and outdeg0 arrays\nindeg0 = [True] * n\noutdeg0 = [True] * n\nfor edge in edges:\n    u, v = edge[0], edge[1]",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.findPathsFromA2B",
        "documentation": {}
    },
    {
        "label": "edges",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.findPathsFromA2B",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.findPathsFromA2B",
        "peekOfCode": "edges = [(5, 0), (5, 2), (2, 3), (4, 0), (4, 1), (3, 1)]\n# adjacency list for nodes\nadj = defaultdict(list)\n# indeg0 and outdeg0 arrays\nindeg0 = [True] * n\noutdeg0 = [True] * n\nfor edge in edges:\n    u, v = edge[0], edge[1]\n    # u -> v\n    adj[u].append(v)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.findPathsFromA2B",
        "documentation": {}
    },
    {
        "label": "adj",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.findPathsFromA2B",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.findPathsFromA2B",
        "peekOfCode": "adj = defaultdict(list)\n# indeg0 and outdeg0 arrays\nindeg0 = [True] * n\noutdeg0 = [True] * n\nfor edge in edges:\n    u, v = edge[0], edge[1]\n    # u -> v\n    adj[u].append(v)\n    # set indeg0[v] <- false\n    indeg0[v] = False",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.findPathsFromA2B",
        "documentation": {}
    },
    {
        "label": "indeg0",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.findPathsFromA2B",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.findPathsFromA2B",
        "peekOfCode": "indeg0 = [True] * n\noutdeg0 = [True] * n\nfor edge in edges:\n    u, v = edge[0], edge[1]\n    # u -> v\n    adj[u].append(v)\n    # set indeg0[v] <- false\n    indeg0[v] = False\n    # set outdeg0[u] <- false\n    outdeg0[u] = False",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.findPathsFromA2B",
        "documentation": {}
    },
    {
        "label": "outdeg0",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.findPathsFromA2B",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.findPathsFromA2B",
        "peekOfCode": "outdeg0 = [True] * n\nfor edge in edges:\n    u, v = edge[0], edge[1]\n    # u -> v\n    adj[u].append(v)\n    # set indeg0[v] <- false\n    indeg0[v] = False\n    # set outdeg0[u] <- false\n    outdeg0[u] = False\nprint(\"All possible paths:\")",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.findPathsFromA2B",
        "documentation": {}
    },
    {
        "label": "findProfession",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.findProfession",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.findProfession",
        "peekOfCode": "def findProfession(level, pos):\n    # Base case\n    if level == 1:\n        return \"Engineer\"\n    # Recursively find parent's profession. If parent\n    # is a doctar, this node will be a doctal if it is\n    # at odd position and an engineer if at even position\n    if findProfession(level - 1, (pos + 1) // 2) == \"Doctor\":\n        if pos % 2:\n            return \"Doctor\"",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.findProfession",
        "documentation": {}
    },
    {
        "label": "csFindTheSingleNumber",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.findTheSingleNumber",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.findTheSingleNumber",
        "peekOfCode": "def csFindTheSingleNumber(nums):\n    frequency = Counter(nums)\n    for i in frequency:\n        if frequency[i] == 1:\n            return i",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.findTheSingleNumber",
        "documentation": {}
    },
    {
        "label": "first_not_repeating_character",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.first-non-repeating",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.first-non-repeating",
        "peekOfCode": "def first_not_repeating_character(s):\n    c = {}\n    for i in s:\n        c[i] = c.get(i, 0) + 1\n    return next((i for i in s if c[i] == 1), \"_\")",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.first-non-repeating",
        "documentation": {}
    },
    {
        "label": "DFS",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.friend-circle",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.friend-circle",
        "peekOfCode": "def DFS(friendships, n, visited, v):\n    for x in range(n):\n        # A student is in the friend circle if he/she is friendships with the student represented by\n        # studentIndex and if he/she is not already in a friend circle\n        if friendships[v, x] and visited[x] == 0:\n            if x != v:\n                visited[x] = 1\n                DFS(friendships, n, visited, x)\nn = 4\ndef csFriendCircles(friendships):",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.friend-circle",
        "documentation": {}
    },
    {
        "label": "csFriendCircles",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.friend-circle",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.friend-circle",
        "peekOfCode": "def csFriendCircles(friendships):\n    numCircles = 0  # Number of friend circles\n    # Keep track of whether a student is already in a friend circle\n    visited = np.zeros((n))\n    # Start with the first student and recursively find all other students in his/her\n    # friend circle. Then, do the same thing for the next student that is not already\n    # in a friend circle. Repeat until all students are in a friend circle.\n    for i in range(n):\n        if visited[i] == 0:\n            visited[i] = 1",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.friend-circle",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.friend-circle",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.friend-circle",
        "peekOfCode": "n = 4\ndef csFriendCircles(friendships):\n    numCircles = 0  # Number of friend circles\n    # Keep track of whether a student is already in a friend circle\n    visited = np.zeros((n))\n    # Start with the first student and recursively find all other students in his/her\n    # friend circle. Then, do the same thing for the next student that is not already\n    # in a friend circle. Repeat until all students are in a friend circle.\n    for i in range(n):\n        if visited[i] == 0:",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.friend-circle",
        "documentation": {}
    },
    {
        "label": "download_all_from_user",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.gist",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.gist",
        "peekOfCode": "def download_all_from_user(user: str):\n    next_page = True\n    page = 1\n    while next_page:\n        url = f\"https://api.github.com/users/{user}/gists?page={page}\"\n        response = requests.get(url)\n        if not len(response.json()):\n            next_page = False\n        else:\n            page += 1",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.gist",
        "documentation": {}
    },
    {
        "label": "download_all",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.gist",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.gist",
        "peekOfCode": "def download_all(gists: list):\n    with PoolExecutor(max_workers=10) as executor:\n        for _ in executor.map(download, gists):\n            pass\ndef download(gist):\n    target = gist[\"id\"] + hashlib.md5(gist[\"updated_at\"].encode(\"utf-8\")).hexdigest()\n    call([\"git\", \"clone\", gist[\"git_pull_url\"], target])\n    description_file = os.path.join(target, \"description.txt\")\n    with open(description_file, \"w\") as f:\n        f.write(f\"{gist['description']}\\n\")",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.gist",
        "documentation": {}
    },
    {
        "label": "download",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.gist",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.gist",
        "peekOfCode": "def download(gist):\n    target = gist[\"id\"] + hashlib.md5(gist[\"updated_at\"].encode(\"utf-8\")).hexdigest()\n    call([\"git\", \"clone\", gist[\"git_pull_url\"], target])\n    description_file = os.path.join(target, \"description.txt\")\n    with open(description_file, \"w\") as f:\n        f.write(f\"{gist['description']}\\n\")\n# Run\nuser = sys.argv[1]\ndownload_all_from_user(user)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.gist",
        "documentation": {}
    },
    {
        "label": "user",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.gist",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.gist",
        "peekOfCode": "user = sys.argv[1]\ndownload_all_from_user(user)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.gist",
        "documentation": {}
    },
    {
        "label": "Vertex",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.h1-raph",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.h1-raph",
        "peekOfCode": "class Vertex:\n    def __init__(self, value):\n        self.value = value\n        self.connections = {}\n    def __str__(self):\n        return (\n            str(self.value)\n            + \" connections: \"\n            + str([x.value for x in self.connections])\n        )",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.h1-raph",
        "documentation": {}
    },
    {
        "label": "Graph",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.h1-raph",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.h1-raph",
        "peekOfCode": "class Graph:\n    def __init__(self):\n        self.vertices = {}\n        self.count = 0\n    def __contains__(self, vert):\n        return vert in self.vertices\n    def __iter__(self):\n        return iter(self.vertices.values())\n    def add_vertex(self, value):\n        self.count += 1",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.h1-raph",
        "documentation": {}
    },
    {
        "label": "g",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.h1-raph",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.h1-raph",
        "peekOfCode": "g = Graph()\nprint(\n    '-----------------------------------------g.add_vertex(\"A\")----------------------------------------------------------'\n)\nA = g.add_vertex(\"A\")\nprint(\"A:\", A)\nprint(\n    '----------------------------------------------g.add_vertex(\"B\")-----------------------------------------------------'\n)\nB = g.add_vertex(\"B\")",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.h1-raph",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.h1-raph",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.h1-raph",
        "peekOfCode": "A = g.add_vertex(\"A\")\nprint(\"A:\", A)\nprint(\n    '----------------------------------------------g.add_vertex(\"B\")-----------------------------------------------------'\n)\nB = g.add_vertex(\"B\")\nprint(\"B:\", B)\nprint(\n    '-------------------------------------------------g.add_vertex(\"C\")--------------------------------------------------'\n)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.h1-raph",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.h1-raph",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.h1-raph",
        "peekOfCode": "B = g.add_vertex(\"B\")\nprint(\"B:\", B)\nprint(\n    '-------------------------------------------------g.add_vertex(\"C\")--------------------------------------------------'\n)\nC = g.add_vertex(\"C\")\nprint(\"C:\", C)\nprint(\n    '-----------------------------------------------------g.add_vertex(\"D\")-----------------------------------------------'\n)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.h1-raph",
        "documentation": {}
    },
    {
        "label": "C",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.h1-raph",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.h1-raph",
        "peekOfCode": "C = g.add_vertex(\"C\")\nprint(\"C:\", C)\nprint(\n    '-----------------------------------------------------g.add_vertex(\"D\")-----------------------------------------------'\n)\nD = g.add_vertex(\"D\")\nprint(\"D:\", D)\nprint(\n    '------------------------------------------------g.add_vertex(\"E\")--------------------------------------------------'\n)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.h1-raph",
        "documentation": {}
    },
    {
        "label": "D",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.h1-raph",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.h1-raph",
        "peekOfCode": "D = g.add_vertex(\"D\")\nprint(\"D:\", D)\nprint(\n    '------------------------------------------------g.add_vertex(\"E\")--------------------------------------------------'\n)\nE = g.add_vertex(\"E\")\nprint(\"E:\", E)\nprint(\n    \"---------------------------------------g.add_edge(A, B, 1)------------------------------------------------------------\"\n)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.h1-raph",
        "documentation": {}
    },
    {
        "label": "E",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.h1-raph",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.h1-raph",
        "peekOfCode": "E = g.add_vertex(\"E\")\nprint(\"E:\", E)\nprint(\n    \"---------------------------------------g.add_edge(A, B, 1)------------------------------------------------------------\"\n)\ng.add_edge(A, B, 1)\nprint(\n    \"---------------------------------------g.add_edge(B, C, 3)----------------------------------------------------------\"\n)\ng.add_edge(B, C, 3)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.h1-raph",
        "documentation": {}
    },
    {
        "label": "hasPathWithGivenSum",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.hasPathWithGivenSum",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.hasPathWithGivenSum",
        "peekOfCode": "def hasPathWithGivenSum(t, s):\n    if t is None:\n        if s == 0:\n            return True\n        else:\n            return False\n    else:\n        if t.left is not None and t.right is not None:\n            return any(\n                [",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.hasPathWithGivenSum",
        "documentation": {}
    },
    {
        "label": "HashTableEntry",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.ht2 (1)",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.ht2 (1)",
        "peekOfCode": "class HashTableEntry:\n    \"\"\"\n    Linked List hash table key/value pair\n    \"\"\"\n    def __init__(self, key, value):\n        self.key = key\n        self.value = value\n        self.next = None\n# Hash table can't have fewer than this many slots\n# MIN_CAPACITY = 8",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.ht2 (1)",
        "documentation": {}
    },
    {
        "label": "HashTable",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.ht2 (1)",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.ht2 (1)",
        "peekOfCode": "class HashTable:\n    \"\"\"\n    A hash table that with `capacity` buckets\n    that accepts string keys\n    Implement this.\n    \"\"\"\n    def __init__(self, capacity):\n        self.capacity = capacity  # Number of buckets in the hash table\n        self.storage = [None] * capacity\n        self.item_count = 0",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.ht2 (1)",
        "documentation": {}
    },
    {
        "label": "HashTableEntry",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.ht2",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.ht2",
        "peekOfCode": "class HashTableEntry:\n    \"\"\"\n    Linked List hash table key/value pair\n    \"\"\"\n    def __init__(self, key, value):\n        self.key = key\n        self.value = value\n        self.next = None\n# Hash table can't have fewer than this many slots\n# MIN_CAPACITY = 8",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.ht2",
        "documentation": {}
    },
    {
        "label": "HashTable",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.ht2",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.ht2",
        "peekOfCode": "class HashTable:\n    \"\"\"\n    A hash table that with `capacity` buckets\n    that accepts string keys\n    Implement this.\n    \"\"\"\n    def __init__(self, capacity):\n        self.capacity = capacity  # Number of buckets in the hash table\n        self.storage = [None] * capacity\n        self.item_count = 0",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.ht2",
        "documentation": {}
    },
    {
        "label": "top_k_frequent",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.ht2",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.ht2",
        "peekOfCode": "def top_k_frequent(words, k):\n    \"\"\"\n    Input:\n    words -> List[str]\n    k -> int\n    Output:\n    List[str]\n    \"\"\"\n    # Your code here",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.ht2",
        "documentation": {}
    },
    {
        "label": "words",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.ht2",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.ht2",
        "peekOfCode": "words = [\"lambda\", \"school\", \"rules\", \"lambda\", \"school\", \"rocks\"]\nk = 2\nOutput:\n[\"lambda\", \"school\"]\nExplanation:\n\"lambda\" and \"school\" are the two most frequent words.\n```\nExample 2:\n```plaintext\nInput:",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.ht2",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.ht2",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.ht2",
        "peekOfCode": "k = 2\nOutput:\n[\"lambda\", \"school\"]\nExplanation:\n\"lambda\" and \"school\" are the two most frequent words.\n```\nExample 2:\n```plaintext\nInput:\nwords = [\"the\", \"sky\", \"is\", \"cloudy\", \"the\", \"the\", \"the\", \"cloudy\", \"is\", \"is\"]",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.ht2",
        "documentation": {}
    },
    {
        "label": "words",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.ht2",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.ht2",
        "peekOfCode": "words = [\"the\", \"sky\", \"is\", \"cloudy\", \"the\", \"the\", \"the\", \"cloudy\", \"is\", \"is\"]\nk = 4\nOutput:\n[\"the\", \"is\", \"cloudy\", \"sky\"]\nExplanation:\n\"the\", \"is\", \"cloudy\", and \"sky\" are the four most frequent words. The words\nare sorted from highest frequency to lowest.\n```\nNotes:\n- `k` is always valid: `1 <= k <= number of unique elements.",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.ht2",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.ht2",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.ht2",
        "peekOfCode": "k = 4\nOutput:\n[\"the\", \"is\", \"cloudy\", \"sky\"]\nExplanation:\n\"the\", \"is\", \"cloudy\", and \"sky\" are the four most frequent words. The words\nare sorted from highest frequency to lowest.\n```\nNotes:\n- `k` is always valid: `1 <= k <= number of unique elements.\n- words in the input list only contain lowercase letters.",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.ht2",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.insertValueIntoSortedLinkedList (2)",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.insertValueIntoSortedLinkedList (2)",
        "peekOfCode": "class ListNode(object):  # def __init__(self, value):\n    def __init__(self, x):\n        self.value = x  # self.value = value\n        self.next = None  # self.next = None\ndef insertValueIntoSortedLinkedList(l, value):\n    head = l\n    new_item = ListNode(value)\n    if head is None:\n        new_item.next = head\n        head = new_item",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.insertValueIntoSortedLinkedList (2)",
        "documentation": {}
    },
    {
        "label": "insertValueIntoSortedLinkedList",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.insertValueIntoSortedLinkedList (2)",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.insertValueIntoSortedLinkedList (2)",
        "peekOfCode": "def insertValueIntoSortedLinkedList(l, value):\n    head = l\n    new_item = ListNode(value)\n    if head is None:\n        new_item.next = head\n        head = new_item\n        return head\n    elif head.value >= new_item.value:\n        new_item.next = head\n        head = new_item",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.insertValueIntoSortedLinkedList (2)",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.insertValueIntoSortedLinkedList",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.insertValueIntoSortedLinkedList",
        "peekOfCode": "class ListNode(object):  # def __init__(self, value):\n    def __init__(self, x):\n        self.value = x  # self.value = value\n        self.next = None  # self.next = None\ndef insertValueIntoSortedLinkedList(l, value):\n    head = l\n    new_item = ListNode(value)\n    if head is None:\n        new_item.next = head\n        head = new_item",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.insertValueIntoSortedLinkedList",
        "documentation": {}
    },
    {
        "label": "insertValueIntoSortedLinkedList",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.insertValueIntoSortedLinkedList",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.insertValueIntoSortedLinkedList",
        "peekOfCode": "def insertValueIntoSortedLinkedList(l, value):\n    head = l\n    new_item = ListNode(value)\n    if head is None:\n        new_item.next = head\n        head = new_item\n        return head\n    elif head.value >= new_item.value:\n        new_item.next = head\n        head = new_item",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.insertValueIntoSortedLinkedList",
        "documentation": {}
    },
    {
        "label": "decrypt",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.isCryptSolution",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.isCryptSolution",
        "peekOfCode": "def decrypt(word, dictionary):\n    lst = []\n    for c in word:\n        lst.append(dictionary[c])\n    return \"\".join(lst)\ndef isCryptSolution(crypt, solution):\n    dict = {}\n    for r in solution:\n        dict[r[0]] = r[1]\n    values = [0] * 3",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.isCryptSolution",
        "documentation": {}
    },
    {
        "label": "isCryptSolution",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.isCryptSolution",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.isCryptSolution",
        "peekOfCode": "def isCryptSolution(crypt, solution):\n    dict = {}\n    for r in solution:\n        dict[r[0]] = r[1]\n    values = [0] * 3\n    for i in range(3):\n        val = decrypt(crypt[i], dict)\n        if val.startswith(\"0\") and len(val) > 1:\n            return False\n        values[i] = int(val)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.isCryptSolution",
        "documentation": {}
    },
    {
        "label": "isSubtree",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.isSubtree",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.isSubtree",
        "peekOfCode": "def isSubtree(t1, t2):\n    def isEqual(left, right):\n        if left == None and right == None:\n            return True\n        if right == None and left != None:\n            return False\n        if left == None and right != None:\n            return False\n        return (\n            left.value == right.value",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.isSubtree",
        "documentation": {}
    },
    {
        "label": "isEqual",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.isTreeSymmetric",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.isTreeSymmetric",
        "peekOfCode": "def isEqual(left, right):\n    if left == None and right == None:\n        return True\n    if right == None and left != None:\n        return False\n    if left == None and right != None:\n        return False\n    if left.value != right.value:\n        return False\n    return isEqual(left.right, right.left) and isEqual(left.left, right.right)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.isTreeSymmetric",
        "documentation": {}
    },
    {
        "label": "isTreeSymmetric",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.isTreeSymmetric",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.isTreeSymmetric",
        "peekOfCode": "def isTreeSymmetric(t):\n    if t == None:\n        return True\n    return isEqual(t.left, t.right)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.isTreeSymmetric",
        "documentation": {}
    },
    {
        "label": "isZigzag",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.isZigZag",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.isZigZag",
        "peekOfCode": "def isZigzag(numbers):",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.isZigZag",
        "documentation": {}
    },
    {
        "label": "is_palindrome",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.is_palindrome",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.is_palindrome",
        "peekOfCode": "def is_palindrome(s):\n    if s[::-1] == s:\n        return True\n    return False",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.is_palindrome",
        "documentation": {}
    },
    {
        "label": "csnakeltjazzy",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.jazzy",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.jazzy",
        "peekOfCode": "def csnakeltjazzy(chords):\nnewchords - []\nfor chord in chords: [\nif chord.isdigit(): ‘\nj newchords.appendEchordfl\nelif len(chords) -- 9:\nreturn []\nelse:\naddSeven - chord\naddSeven - addSeven[e:] + \"7\"",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.jazzy",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.kthmost",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.kthmost",
        "peekOfCode": "class Solution(object):\n    def topKFrequent(self, nums, k):\n        number_frequency = {}\n        frequency_list = {}\n        for i in nums:\n            if i not in number_frequency:\n                number_frequency[i] = 1\n            else:\n                number_frequency[i] += 1\n        for key, value in number_frequency.items():",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.kthmost",
        "documentation": {}
    },
    {
        "label": "ob1",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.kthmost",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.kthmost",
        "peekOfCode": "ob1 = Solution()\nprint(ob1.topKFrequent([1, 1, 1, 1, 2, 2, 3, 3, 3], 2))",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.kthmost",
        "documentation": {}
    },
    {
        "label": "kthSmallestInBST",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.kthSmallestInBST",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.kthSmallestInBST",
        "peekOfCode": "def kthSmallestInBST(t, k):\n    def inorder(r):\n        return inorder(r.left) + [r.value] + inorder(r.right) if r else []\n    return inorder(t)[k - 1]",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.kthSmallestInBST",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.linked-list",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.linked-list",
        "peekOfCode": "class Node:\n    # Constructor to initialize the node object\n    def __init__(self, data):\n        self.data = data\n        self.next = None\nclass LinkedList:\n    # Function to initialize head\n    def __init__(self):\n        self.head = None\n    # Function to reverse the linked list",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.linked-list",
        "documentation": {}
    },
    {
        "label": "LinkedList",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.linked-list",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.linked-list",
        "peekOfCode": "class LinkedList:\n    # Function to initialize head\n    def __init__(self):\n        self.head = None\n    # Function to reverse the linked list\n    def reverse(self):\n        prev = None\n        current = self.head\n        while current is not None:\n            next = current.next",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.linked-list",
        "documentation": {}
    },
    {
        "label": "llist",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.linked-list",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.linked-list",
        "peekOfCode": "llist = LinkedList()\nllist.push(20)\nllist.push(4)\nllist.push(15)\nllist.push(85)\nprint(\"Given Linked List\")\nllist.printList()\nllist.reverse()\nprint(\"\\nReversed Linked List\")\nllist.printList()",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.linked-list",
        "documentation": {}
    },
    {
        "label": "LinkedListNode",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.linked_lists",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.linked_lists",
        "peekOfCode": "class LinkedListNode:\n  \"\"\"\n    Simple Singly Linked List Node Class\n    value -> int\n    next -> LinkedListNode\n  \"\"\"\n  def __init__(self, value):\n    self.value = value\n    self.next = None\n  def add_node(self, value):",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.linked_lists",
        "documentation": {}
    },
    {
        "label": "LinkedListNode",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.linked_lists",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.linked_lists",
        "peekOfCode": "class LinkedListNode:\n  \"\"\"\n    Simple Doubly Linked List Node Class\n    value -> int\n    next -> LinkedListNode\n    prev -> LinkedListNode\n  \"\"\"\n  def __init__(self, value):\n    self.value = value\n    self.next = None",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.linked_lists",
        "documentation": {}
    },
    {
        "label": "LinkedListNode",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.linked_lists",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.linked_lists",
        "peekOfCode": "class LinkedListNode():\n    def __init__(self, value):\n        self.value = value\n        self.next  = None\ndef reverse(head_of_list):\n  current = head_of_list\n  prev = None\n  next = None\n  while current:\n    next = current.next",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.linked_lists",
        "documentation": {}
    },
    {
        "label": "HashTableEntry",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.linked_lists",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.linked_lists",
        "peekOfCode": "class HashTableEntry:\n    \"\"\"\n    Linked List hash table key/value pair\n    \"\"\"\n    def __init__(self, key, value):\n        self.key = key\n        self.value = value\n        self.next = None\n# Hash table can't have fewer than this many slots\nMIN_CAPACITY = 8",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.linked_lists",
        "documentation": {}
    },
    {
        "label": "HashTable",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.linked_lists",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.linked_lists",
        "peekOfCode": "class HashTable:\n    \"\"\"\n    A hash table that with `capacity` buckets\n    that accepts string keys\n    Implement this.\n    \"\"\"\n    def __init__(self, capacity):\n                self.capacity = capacity  # Number of buckets in the hash table\n        self.storage = [None] * capacity\n        self.item_count = 0",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.linked_lists",
        "documentation": {}
    },
    {
        "label": "print_ll",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.linked_lists",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.linked_lists",
        "peekOfCode": "def print_ll(linked_list_node):\n  current = linked_list_node\n  while current is not None:\n    print(current.value)\n    current = current.next\ndef add_to_ll_storage(linked_list_node):\n  current = linked_list_node\n  while current is not None:\n    ll_storage.append(current)\n    current = current.next",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.linked_lists",
        "documentation": {}
    },
    {
        "label": "add_to_ll_storage",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.linked_lists",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.linked_lists",
        "peekOfCode": "def add_to_ll_storage(linked_list_node):\n  current = linked_list_node\n  while current is not None:\n    ll_storage.append(current)\n    current = current.next\nL1.add_node(12)\nprint_ll(L1)\nL1.add_node(24)\nprint()\nprint_ll(L1)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.linked_lists",
        "documentation": {}
    },
    {
        "label": "reverse",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.linked_lists",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.linked_lists",
        "peekOfCode": "def reverse(head_of_list):\n  current = head_of_list\n  prev = None\n  next = None\n  while current:\n    next = current.next\n    current.next = prev\n    prev = current\n    current = next\n  return prev",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.linked_lists",
        "documentation": {}
    },
    {
        "label": "L1",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.linked_lists",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.linked_lists",
        "peekOfCode": "L1 = Node(34)\nL1.next = Node(45)\nL1.next.next = Node(90)\n# while the current node is not none\n  # do something with the data\n  # traverse to next node\nL1 = [34]-> [45]-> [90] -> None\nNode(45)\nNode(90)\n```",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.linked_lists",
        "documentation": {}
    },
    {
        "label": "L1.next",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.linked_lists",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.linked_lists",
        "peekOfCode": "L1.next = Node(45)\nL1.next.next = Node(90)\n# while the current node is not none\n  # do something with the data\n  # traverse to next node\nL1 = [34]-> [45]-> [90] -> None\nNode(45)\nNode(90)\n```\n\"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.linked_lists",
        "documentation": {}
    },
    {
        "label": "L1.next.next",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.linked_lists",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.linked_lists",
        "peekOfCode": "L1.next.next = Node(90)\n# while the current node is not none\n  # do something with the data\n  # traverse to next node\nL1 = [34]-> [45]-> [90] -> None\nNode(45)\nNode(90)\n```\n\"\"\"\nclass LinkedListNode:",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.linked_lists",
        "documentation": {}
    },
    {
        "label": "L1",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.linked_lists",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.linked_lists",
        "peekOfCode": "L1 = [34]-> [45]-> [90] -> None\nNode(45)\nNode(90)\n```\n\"\"\"\nclass LinkedListNode:\n  \"\"\"\n    Simple Singly Linked List Node Class\n    value -> int\n    next -> LinkedListNode",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.linked_lists",
        "documentation": {}
    },
    {
        "label": "ll_storage",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.linked_lists",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.linked_lists",
        "peekOfCode": "ll_storage = []\nL1 = LinkedListNode(34)\nL1.next = LinkedListNode(45)\nL1.next.next = LinkedListNode(90)\ndef print_ll(linked_list_node):\n  current = linked_list_node\n  while current is not None:\n    print(current.value)\n    current = current.next\ndef add_to_ll_storage(linked_list_node):",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.linked_lists",
        "documentation": {}
    },
    {
        "label": "L1",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.linked_lists",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.linked_lists",
        "peekOfCode": "L1 = LinkedListNode(34)\nL1.next = LinkedListNode(45)\nL1.next.next = LinkedListNode(90)\ndef print_ll(linked_list_node):\n  current = linked_list_node\n  while current is not None:\n    print(current.value)\n    current = current.next\ndef add_to_ll_storage(linked_list_node):\n  current = linked_list_node",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.linked_lists",
        "documentation": {}
    },
    {
        "label": "L1.next",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.linked_lists",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.linked_lists",
        "peekOfCode": "L1.next = LinkedListNode(45)\nL1.next.next = LinkedListNode(90)\ndef print_ll(linked_list_node):\n  current = linked_list_node\n  while current is not None:\n    print(current.value)\n    current = current.next\ndef add_to_ll_storage(linked_list_node):\n  current = linked_list_node\n  while current is not None:",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.linked_lists",
        "documentation": {}
    },
    {
        "label": "L1.next.next",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.linked_lists",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.linked_lists",
        "peekOfCode": "L1.next.next = LinkedListNode(90)\ndef print_ll(linked_list_node):\n  current = linked_list_node\n  while current is not None:\n    print(current.value)\n    current = current.next\ndef add_to_ll_storage(linked_list_node):\n  current = linked_list_node\n  while current is not None:\n    ll_storage.append(current)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.linked_lists",
        "documentation": {}
    },
    {
        "label": "MIN_CAPACITY",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.linked_lists",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.linked_lists",
        "peekOfCode": "MIN_CAPACITY = 8\n[\n 0[\"Lou\", 41] -> [\"Bob\", 41] -> None,\n 1[\"Steve\", 41] -> None,\n 2[\"Jen\", 41] -> None,\n 3[\"Dave\", 41] -> None,\n 4None,\n 5[\"Hector\", 34]-> None,\n 6[\"Lisa\", 41] -> None,\n 7None,",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.linked_lists",
        "documentation": {}
    },
    {
        "label": "csMakeItJazzy",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.makeItJazzy",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.makeItJazzy",
        "peekOfCode": "def csMakeItJazzy(chords):\n    for index in range(len(chords)):\n        if chords[index].__contains__(\"7\"):\n            continue\n        elif chords == []:\n            return []\n        else:\n            chords[index] = chords[index] + \"7\"\n    return chords",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.makeItJazzy",
        "documentation": {}
    },
    {
        "label": "csMaxNumberOfLambdas",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.maxNumberOfLambdas",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.maxNumberOfLambdas",
        "peekOfCode": "def csMaxNumberOfLambdas(text):\n    sub_string = \"lambda\"\n    lambda_count = {\"l\": 0, \"a\": 0, \"m\": 0, \"b\": 0, \"d\": 0, \"a\": 0}\n    counts = []\n    for letter in text:\n        if letter in lambda_count:\n            lambda_count[letter] += 1\n    for key, value in lambda_count.items():\n        counts.append(value)\n    return min(counts)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.maxNumberOfLambdas",
        "documentation": {}
    },
    {
        "label": "add",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def add(param1, param2):\n    return param1 + param2\ndef centuryFromYear(year):\n    return ((year - 1) // 100) + 1\ndef checkPalindrome(inputString):\n    return inputString == inputString[::-1]\ndef adjacentElementsProduct(inputArray):\n    max = inputArray[0] * inputArray[1]\n    for i in range(len(inputArray) - 1):\n        if inputArray[i] * inputArray[i + 1] > max:",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "centuryFromYear",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def centuryFromYear(year):\n    return ((year - 1) // 100) + 1\ndef checkPalindrome(inputString):\n    return inputString == inputString[::-1]\ndef adjacentElementsProduct(inputArray):\n    max = inputArray[0] * inputArray[1]\n    for i in range(len(inputArray) - 1):\n        if inputArray[i] * inputArray[i + 1] > max:\n            max = inputArray[i] * inputArray[i + 1]\n    return max",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "checkPalindrome",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def checkPalindrome(inputString):\n    return inputString == inputString[::-1]\ndef adjacentElementsProduct(inputArray):\n    max = inputArray[0] * inputArray[1]\n    for i in range(len(inputArray) - 1):\n        if inputArray[i] * inputArray[i + 1] > max:\n            max = inputArray[i] * inputArray[i + 1]\n    return max\ndef shapeArea(n):\n    sum = n * 2 - 1",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "adjacentElementsProduct",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def adjacentElementsProduct(inputArray):\n    max = inputArray[0] * inputArray[1]\n    for i in range(len(inputArray) - 1):\n        if inputArray[i] * inputArray[i + 1] > max:\n            max = inputArray[i] * inputArray[i + 1]\n    return max\ndef shapeArea(n):\n    sum = n * 2 - 1\n    for i in range(1, (n * 2) - 1, 2):\n        sum += i * 2",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "shapeArea",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def shapeArea(n):\n    sum = n * 2 - 1\n    for i in range(1, (n * 2) - 1, 2):\n        sum += i * 2\n    return sum\ndef makeArrayConsecutive2(statues):\n    return max(statues) - min(statues) - len(statues) + 1\ndef almostIncreasingSequence(sequence):\n    i = 0\n    while i < len(sequence) - 1:",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "makeArrayConsecutive2",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def makeArrayConsecutive2(statues):\n    return max(statues) - min(statues) - len(statues) + 1\ndef almostIncreasingSequence(sequence):\n    i = 0\n    while i < len(sequence) - 1:\n        if not sequence[i] < sequence[i + 1]:\n            if increasingSequence(\n                sequence[:i] + sequence[i + 1 :]\n            ) or increasingSequence(sequence[: i + 1] + sequence[i + 2 :]):\n                return True",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "almostIncreasingSequence",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def almostIncreasingSequence(sequence):\n    i = 0\n    while i < len(sequence) - 1:\n        if not sequence[i] < sequence[i + 1]:\n            if increasingSequence(\n                sequence[:i] + sequence[i + 1 :]\n            ) or increasingSequence(sequence[: i + 1] + sequence[i + 2 :]):\n                return True\n            else:\n                return False",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "increasingSequence",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def increasingSequence(sequence):\n    for i in range(len(sequence) - 1):\n        if not sequence[i] < sequence[i + 1]:\n            return False\n    return True\ndef matrixElementsSum(matrix):\n    if len(matrix) > 1:\n        for row in range(1, len(matrix)):\n            for room in range(len(matrix[row])):\n                if matrix[row - 1][room] == 0:",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "matrixElementsSum",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def matrixElementsSum(matrix):\n    if len(matrix) > 1:\n        for row in range(1, len(matrix)):\n            for room in range(len(matrix[row])):\n                if matrix[row - 1][room] == 0:\n                    matrix[row][room] = 0\n    sum = 0\n    for row in matrix:\n        for room in row:\n            sum += room",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "allLongestStrings",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def allLongestStrings(inputArray):\n    length = max([len(word) for word in inputArray])\n    result = [word for word in inputArray if len(word) == length]\n    return result\ndef commonCharacterCount(s1, s2):\n    count = 0\n    word2 = list(s2)\n    for letter in s1:\n        if letter in word2:\n            word2.remove(letter)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "commonCharacterCount",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def commonCharacterCount(s1, s2):\n    count = 0\n    word2 = list(s2)\n    for letter in s1:\n        if letter in word2:\n            word2.remove(letter)\n            count += 1\n    return count\ndef isLucky(n):\n    string = str(n)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "isLucky",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def isLucky(n):\n    string = str(n)\n    top = [int(x) for x in string[: len(string) // 2]]\n    bottom = [int(x) for x in string[len(string) // 2 :]]\n    return sum(top) == sum(bottom)\ndef sortByHeight(a):\n    treePositions = [x for x in range(len(a)) if a[x] == -1]\n    people = sorted([x for x in a if x != -1])\n    for tree in treePositions:\n        people.insert(tree, -1)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "sortByHeight",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def sortByHeight(a):\n    treePositions = [x for x in range(len(a)) if a[x] == -1]\n    people = sorted([x for x in a if x != -1])\n    for tree in treePositions:\n        people.insert(tree, -1)\n    return people\nimport re\ndef reverseParentheses(s):\n    while \"(\" in s:\n        match = re.search(\"\\([^()]*\\)\", s)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "reverseParentheses",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def reverseParentheses(s):\n    while \"(\" in s:\n        match = re.search(\"\\([^()]*\\)\", s)\n        match_string = match.group(0)[1 : len(match.group(0)) - 1]\n        reversed_match_string = match_string[::-1]\n        s = s[: match.start()] + reversed_match_string + s[match.end() :]\n    return s\ndef alternatingSums(a):\n    team1 = sum(a[0::2])\n    team2 = sum(a[1::2])",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "alternatingSums",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def alternatingSums(a):\n    team1 = sum(a[0::2])\n    team2 = sum(a[1::2])\n    return [team1, team2]\ndef addBorder(picture):\n    picture = [\"*\" + string + \"*\" for string in picture]\n    picture = [(\"*\" * len(picture[0]))] + picture + [(\"*\" * len(picture[0]))]\n    return picture\ndef areSimilar(a, b):\n    diff = [i for i in range(len(a)) if a[i] != b[i]]",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "addBorder",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def addBorder(picture):\n    picture = [\"*\" + string + \"*\" for string in picture]\n    picture = [(\"*\" * len(picture[0]))] + picture + [(\"*\" * len(picture[0]))]\n    return picture\ndef areSimilar(a, b):\n    diff = [i for i in range(len(a)) if a[i] != b[i]]\n    if len(diff) == 2:\n        b[diff[0]], b[diff[1]] = b[diff[1]], b[diff[0]]\n    return a == b\ndef arrayChange(inputArray):",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "areSimilar",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def areSimilar(a, b):\n    diff = [i for i in range(len(a)) if a[i] != b[i]]\n    if len(diff) == 2:\n        b[diff[0]], b[diff[1]] = b[diff[1]], b[diff[0]]\n    return a == b\ndef arrayChange(inputArray):\n    count = 0\n    for i in range(1, len(inputArray)):\n        if inputArray[i - 1] >= inputArray[i]:\n            difference = inputArray[i - 1] - inputArray[i]",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "arrayChange",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def arrayChange(inputArray):\n    count = 0\n    for i in range(1, len(inputArray)):\n        if inputArray[i - 1] >= inputArray[i]:\n            difference = inputArray[i - 1] - inputArray[i]\n            inputArray[i] += difference + 1\n            count += difference + 1\n    return count\ndef palindromeRearranging(inputString):\n    inputList = sorted(inputString)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "palindromeRearranging",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def palindromeRearranging(inputString):\n    inputList = sorted(inputString)\n    foundMiddle = False\n    while len(inputList) > 1:\n        if inputList[0] == inputList[1]:\n            del inputList[1]\n        elif not foundMiddle:\n            foundMiddle = True\n        else:\n            return False",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "areEquallyStrong",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def areEquallyStrong(yourLeft, yourRight, friendsLeft, friendsRight):\n    sameHands = yourLeft == friendsLeft and yourRight == friendsRight\n    differentHands = yourLeft == friendsRight and yourRight == friendsLeft\n    return sameHands or differentHands\ndef arrayMaximalAdjacentDifference(inputArray):\n    diffs = []\n    for i in range(len(inputArray) - 1):\n        diffs.append(abs(inputArray[i] - inputArray[i + 1]))\n    return max(diffs)\ndef isIPv4Address(inputString):",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "arrayMaximalAdjacentDifference",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def arrayMaximalAdjacentDifference(inputArray):\n    diffs = []\n    for i in range(len(inputArray) - 1):\n        diffs.append(abs(inputArray[i] - inputArray[i + 1]))\n    return max(diffs)\ndef isIPv4Address(inputString):\n    strings = [string for string in inputString.split(\".\")]\n    for string in strings:\n        if not string.isdecimal():\n            return False",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "isIPv4Address",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def isIPv4Address(inputString):\n    strings = [string for string in inputString.split(\".\")]\n    for string in strings:\n        if not string.isdecimal():\n            return False\n    nums = [int(num) for num in strings]\n    return max(nums) <= 255 and min(nums) >= 0 and len(nums) == 4\ndef avoidObstacles(inputArray):\n    for length in range(2, max(inputArray) + 2):\n        done = True",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "avoidObstacles",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def avoidObstacles(inputArray):\n    for length in range(2, max(inputArray) + 2):\n        done = True\n        jump = length\n        while jump < (max(inputArray) + length):\n            if jump in inputArray:\n                done = False\n                break\n            jump += length\n        if done:",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "boxBlur",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def boxBlur(image):\n    outImage = []\n    for row in range(1, len(image) - 1):\n        line = []\n        for pixel in range(1, len(image[row]) - 1):\n            total = (\n                image[row - 1][pixel - 1]\n                + image[row - 1][pixel]\n                + image[row - 1][pixel + 1]\n                + image[row][pixel - 1]",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "minesweeper",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def minesweeper(matrix):\n    TOP = 0\n    BOTTOM = len(matrix) - 1\n    LEFT = 0\n    RIGHT = len(matrix[0]) - 1\n    outMatrix = []\n    for row in range(len(matrix)):\n        outRow = []\n        for cell in range(len(matrix[row])):\n            outRow.append(0)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "arrayReplace",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def arrayReplace(inputArray, elemToReplace, substitutionElem):\n    return [x if x != elemToReplace else substitutionElem for x in inputArray]\ndef evenDigitsOnly(n):\n    return all(\n        (True if digit in (\"0\", \"2\", \"4\", \"6\", \"8\") else False for digit in str(n))\n    )\ndef variableName(name):\n    return name.replace(\"_\", \"\").isalnum() and not name[0].isdigit()\ndef alphabeticShift(inputString):\n    return \"\".join([chr(ord(x) + 1) if x != \"z\" else \"a\" for x in inputString])",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "evenDigitsOnly",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def evenDigitsOnly(n):\n    return all(\n        (True if digit in (\"0\", \"2\", \"4\", \"6\", \"8\") else False for digit in str(n))\n    )\ndef variableName(name):\n    return name.replace(\"_\", \"\").isalnum() and not name[0].isdigit()\ndef alphabeticShift(inputString):\n    return \"\".join([chr(ord(x) + 1) if x != \"z\" else \"a\" for x in inputString])\ndef chessBoardCellColor(cell1, cell2):\n    color1 = ((ord(cell1[0]) - ord(\"A\")) + ord(cell1[1]) - ord(\"1\")) % 2 == 0",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "variableName",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def variableName(name):\n    return name.replace(\"_\", \"\").isalnum() and not name[0].isdigit()\ndef alphabeticShift(inputString):\n    return \"\".join([chr(ord(x) + 1) if x != \"z\" else \"a\" for x in inputString])\ndef chessBoardCellColor(cell1, cell2):\n    color1 = ((ord(cell1[0]) - ord(\"A\")) + ord(cell1[1]) - ord(\"1\")) % 2 == 0\n    color2 = ((ord(cell2[0]) - ord(\"A\")) + ord(cell2[1]) - ord(\"1\")) % 2 == 0\n    return color1 == color2\ndef circleOfNumbers(n, firstNumber):\n    return (firstNumber + (n / 2)) % n",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "alphabeticShift",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def alphabeticShift(inputString):\n    return \"\".join([chr(ord(x) + 1) if x != \"z\" else \"a\" for x in inputString])\ndef chessBoardCellColor(cell1, cell2):\n    color1 = ((ord(cell1[0]) - ord(\"A\")) + ord(cell1[1]) - ord(\"1\")) % 2 == 0\n    color2 = ((ord(cell2[0]) - ord(\"A\")) + ord(cell2[1]) - ord(\"1\")) % 2 == 0\n    return color1 == color2\ndef circleOfNumbers(n, firstNumber):\n    return (firstNumber + (n / 2)) % n\ndef depositProfit(deposit, rate, threshold):\n    year = 0",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "chessBoardCellColor",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def chessBoardCellColor(cell1, cell2):\n    color1 = ((ord(cell1[0]) - ord(\"A\")) + ord(cell1[1]) - ord(\"1\")) % 2 == 0\n    color2 = ((ord(cell2[0]) - ord(\"A\")) + ord(cell2[1]) - ord(\"1\")) % 2 == 0\n    return color1 == color2\ndef circleOfNumbers(n, firstNumber):\n    return (firstNumber + (n / 2)) % n\ndef depositProfit(deposit, rate, threshold):\n    year = 0\n    while deposit < threshold:\n        deposit *= 1 + (rate / 100)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "circleOfNumbers",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def circleOfNumbers(n, firstNumber):\n    return (firstNumber + (n / 2)) % n\ndef depositProfit(deposit, rate, threshold):\n    year = 0\n    while deposit < threshold:\n        deposit *= 1 + (rate / 100)\n        year += 1\n    return year\ndef absoluteValuesSumMinimization(a):\n    sums = {}",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "depositProfit",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def depositProfit(deposit, rate, threshold):\n    year = 0\n    while deposit < threshold:\n        deposit *= 1 + (rate / 100)\n        year += 1\n    return year\ndef absoluteValuesSumMinimization(a):\n    sums = {}\n    for num in a:\n        total = sum([abs(a[i] - num) for i in range(len(a))])",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "absoluteValuesSumMinimization",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def absoluteValuesSumMinimization(a):\n    sums = {}\n    for num in a:\n        total = sum([abs(a[i] - num) for i in range(len(a))])\n        if total in sums:\n            sums[total] = min(num, sums[total])\n        else:\n            sums[total] = num\n        print(sums)\n    return sums[min(sums)]",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "stringsRearrangement",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def stringsRearrangement(inputArray):\n    permutations = itertools.permutations(inputArray)\n    for array in permutations:\n        if testArrangement(array):\n            return True\n    return False\ndef testArrangement(array):\n    for i in range(len(array) - 1):\n        if sum([a != b for a, b in zip(array[i], array[i + 1])]) != 1:\n            return False",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "testArrangement",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def testArrangement(array):\n    for i in range(len(array) - 1):\n        if sum([a != b for a, b in zip(array[i], array[i + 1])]) != 1:\n            return False\n    return True\ndef extractEachKth(inputArray, k):\n    return [inputArray[x] for x in range(len(inputArray)) if (x + 1) % k != 0]\ndef firstDigit(inputString):\n    for char in inputString:\n        if char.isdigit():",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "extractEachKth",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def extractEachKth(inputArray, k):\n    return [inputArray[x] for x in range(len(inputArray)) if (x + 1) % k != 0]\ndef firstDigit(inputString):\n    for char in inputString:\n        if char.isdigit():\n            return char\ndef differentSymbolsNaive(s):\n    return len(set(s))\ndef arrayMaxConsecutiveSum(inputArray, k):\n    sums = [sum(inputArray[:k])]",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "firstDigit",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def firstDigit(inputString):\n    for char in inputString:\n        if char.isdigit():\n            return char\ndef differentSymbolsNaive(s):\n    return len(set(s))\ndef arrayMaxConsecutiveSum(inputArray, k):\n    sums = [sum(inputArray[:k])]\n    for i in range(1, len(inputArray) - k + 1):\n        sums.append(sums[i - 1] - inputArray[i - 1] + inputArray[i + k - 1])",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "differentSymbolsNaive",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def differentSymbolsNaive(s):\n    return len(set(s))\ndef arrayMaxConsecutiveSum(inputArray, k):\n    sums = [sum(inputArray[:k])]\n    for i in range(1, len(inputArray) - k + 1):\n        sums.append(sums[i - 1] - inputArray[i - 1] + inputArray[i + k - 1])\n    return max(sums)\ndef growingPlant(upSpeed, downSpeed, desiredHeight):\n    height = 0\n    days = 1",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "arrayMaxConsecutiveSum",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def arrayMaxConsecutiveSum(inputArray, k):\n    sums = [sum(inputArray[:k])]\n    for i in range(1, len(inputArray) - k + 1):\n        sums.append(sums[i - 1] - inputArray[i - 1] + inputArray[i + k - 1])\n    return max(sums)\ndef growingPlant(upSpeed, downSpeed, desiredHeight):\n    height = 0\n    days = 1\n    height += upSpeed\n    while height < desiredHeight:",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "growingPlant",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def growingPlant(upSpeed, downSpeed, desiredHeight):\n    height = 0\n    days = 1\n    height += upSpeed\n    while height < desiredHeight:\n        days += 1\n        height -= downSpeed\n        height += upSpeed\n    return days\ndef knapsackLight(value1, weight1, value2, weight2, maxW):",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "knapsackLight",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def knapsackLight(value1, weight1, value2, weight2, maxW):\n    if weight1 + weight2 <= maxW:\n        return value1 + value2\n    if weight1 <= maxW and (weight2 > maxW or value1 >= value2):\n        return value1\n    if weight2 <= maxW and (weight1 > maxW or value2 >= value1):\n        return value2\n    return 0\ndef longestDigitsPrefix(inputString):\n    for char in range(len(inputString)):",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "longestDigitsPrefix",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def longestDigitsPrefix(inputString):\n    for char in range(len(inputString)):\n        if not inputString[char].isdigit():\n            return inputString[:char]\n    return inputString\ndef digitDegree(n):\n    degree = 0\n    while len(str(n)) > 1:\n        n = sum((int(digit) for digit in str(n)))\n        degree += 1",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "digitDegree",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def digitDegree(n):\n    degree = 0\n    while len(str(n)) > 1:\n        n = sum((int(digit) for digit in str(n)))\n        degree += 1\n    return degree\ndef bishopAndPawn(bishop, pawn):\n    return abs(ord(bishop[0]) - ord(pawn[0])) == abs(ord(bishop[1]) - ord(pawn[1]))\ndef isBeautifulString(inputString):\n    for letter in range(ord(\"a\"), ord(\"z\")):",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "bishopAndPawn",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def bishopAndPawn(bishop, pawn):\n    return abs(ord(bishop[0]) - ord(pawn[0])) == abs(ord(bishop[1]) - ord(pawn[1]))\ndef isBeautifulString(inputString):\n    for letter in range(ord(\"a\"), ord(\"z\")):\n        if inputString.count(chr(letter)) < inputString.count(chr(letter + 1)):\n            return False\n    return True\ndef findEmailDomain(address):\n    return address[address.rfind(\"@\") + 1 :]\ndef buildPalindrome(st):",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "isBeautifulString",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def isBeautifulString(inputString):\n    for letter in range(ord(\"a\"), ord(\"z\")):\n        if inputString.count(chr(letter)) < inputString.count(chr(letter + 1)):\n            return False\n    return True\ndef findEmailDomain(address):\n    return address[address.rfind(\"@\") + 1 :]\ndef buildPalindrome(st):\n    if st == st[::-1]:  # Check for initial palindrome\n        return st",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "findEmailDomain",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def findEmailDomain(address):\n    return address[address.rfind(\"@\") + 1 :]\ndef buildPalindrome(st):\n    if st == st[::-1]:  # Check for initial palindrome\n        return st\n    index = 0\n    subStr = st[index:]\n    while subStr != subStr[::-1]:  # while substring is not a palindrome\n        index += 1\n        subStr = st[index:]",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "buildPalindrome",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def buildPalindrome(st):\n    if st == st[::-1]:  # Check for initial palindrome\n        return st\n    index = 0\n    subStr = st[index:]\n    while subStr != subStr[::-1]:  # while substring is not a palindrome\n        index += 1\n        subStr = st[index:]\n    return st + st[index - 1 :: -1]\ndef electionsWinners(votes, k):",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "electionsWinners",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def electionsWinners(votes, k):\n    winners = 0\n    current_winner = max(votes)\n    for candidate in votes:\n        if k > 0 and candidate + k > current_winner:\n            winners += 1\n        if k == 0 and candidate == current_winner and votes.count(candidate) == 1:\n            winners += 1\n    return winners\ndef isMAC48Address(inputString):",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "isMAC48Address",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def isMAC48Address(inputString):\n    hex_chars = (\n        \"1\",\n        \"2\",\n        \"3\",\n        \"4\",\n        \"5\",\n        \"6\",\n        \"7\",\n        \"8\",",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "isDigit",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def isDigit(symbol):\n    return symbol.isdigit()\ndef lineEncoding(s):\n    count = 1\n    output = []\n    for char in range(1, len(s)):\n        if s[char] == s[char - 1]:\n            count += 1\n        else:\n            if count > 1:",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "lineEncoding",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def lineEncoding(s):\n    count = 1\n    output = []\n    for char in range(1, len(s)):\n        if s[char] == s[char - 1]:\n            count += 1\n        else:\n            if count > 1:\n                output.append(str(count) + s[char - 1])\n            else:",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "chessKnight",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def chessKnight(cell):\n    moves = 0\n    # Starting at the top left, going counter-clockwise\n    if ord(cell[0]) >= ord(\"b\") and ord(cell[1]) <= ord(\"6\"):\n        moves += 1\n    if ord(cell[0]) >= ord(\"c\") and ord(cell[1]) <= ord(\"7\"):\n        moves += 1\n    if ord(cell[0]) >= ord(\"c\") and ord(cell[1]) >= ord(\"2\"):\n        moves += 1\n    if ord(cell[0]) >= ord(\"b\") and ord(cell[1]) >= ord(\"3\"):",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "deleteDigit",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def deleteDigit(n):\n    num = str(n)\n    highest = 0\n    for digit in range(len(num)):\n        output = num[:digit] + num[digit + 1 :]\n        if int(output) > int(highest):\n            highest = output\n    return int(highest)\ndef longestWord(text):\n    longest = []",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "longestWord",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def longestWord(text):\n    longest = []\n    word = []\n    for char in text:\n        if ord(\"A\") <= ord(char) <= ord(\"Z\") or ord(\"a\") <= ord(char) <= ord(\"z\"):\n            word.append(char)\n        else:\n            if len(word) > len(longest):\n                longest = word\n            word = []",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "validTime",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def validTime(time):\n    groups = time.split(\":\")\n    if len(groups) != 2:\n        return False\n    if not (groups[0].isdigit() and groups[1].isdigit()):\n        return False\n    if int(groups[0]) > 23 or int(groups[1]) > 59:\n        return False\n    return True\ndef sumUpNumbers(inputString):",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "sumUpNumbers",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def sumUpNumbers(inputString):\n    total = 0\n    current_num = []\n    for char in inputString:\n        if char.isdigit():\n            current_num.append(char)\n        else:\n            if len(current_num) > 0:\n                num = int(\"\".join(current_num))\n                total += num",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "differentSquares",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def differentSquares(matrix):\n    squares = set()\n    for row in range(len(matrix) - 1):\n        for cell in range(len(matrix[row]) - 1):\n            square = (\n                (matrix[row][cell], matrix[row][cell + 1]),\n                (matrix[row + 1][cell], matrix[row + 1][cell + 1]),\n            )\n            squares.add(square)\n    return len(squares)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "digitsProduct",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def digitsProduct(product):\n    # New idea: add product to factors\n    # while max(factors) > 10: split that num into factors\n    if product == 0:\n        return 10\n    factors = [product]\n    while max(factors) > 9:\n        factored = findFactors(max(factors))\n        if factored:\n            factors.remove(max(factors))",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "findFactors",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def findFactors(n):\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return i, n // i\n    return False\ndef fileNaming(names):\n    outnames = []\n    for name in names:\n        if name in outnames:\n            k = 1",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "fileNaming",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def fileNaming(names):\n    outnames = []\n    for name in names:\n        if name in outnames:\n            k = 1\n            while \"{}({})\".format(name, k) in outnames:\n                k += 1\n            name = \"{}({})\".format(name, k)\n        outnames.append(name)\n    return outnames",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "messageFromBinaryCode",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def messageFromBinaryCode(code):\n    output = []\n    for i in range(0, len(code), 8):\n        letter = chr(int(code[i : i + 8], 2))\n        output.append(letter)\n    return \"\".join(output)\ndef spiralNumbers(n):\n    LEFT = \"left\"\n    RIGHT = \"right\"\n    UP = \"up\"",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "spiralNumbers",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def spiralNumbers(n):\n    LEFT = \"left\"\n    RIGHT = \"right\"\n    UP = \"up\"\n    DOWN = \"down\"\n    direction = RIGHT\n    spiral = [[0 for i in range(n)] for j in range(n)]\n    row = 0\n    cell = 0\n    for num in range(1, (n * n) + 1):",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "sudoku",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def sudoku(grid):\n    match = [i for i in range(1, 10)]\n    for row in grid:\n        if sorted(row) != match:\n            return False\n    for column_index in range(9):\n        column = [grid[row_index][column_index] for row_index in range(9)]\n        if sorted(column) != match:\n            return False\n    for row in range(0, 9, 3):",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "addTwoDigits",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def addTwoDigits(n):\n    return (n // 10) + (n % 10)\ndef largestNumber(n):\n    return int(\"9\" * n)\ndef candies(n, m):\n    return (m // n) * n\ndef seatsInTheater(nCols, nRows, col, row):\n    return (nCols - col + 1) * (nRows - row)\ndef maxMultiple(divisor, bound):\n    for num in range(bound, 1, -1):",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "largestNumber",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def largestNumber(n):\n    return int(\"9\" * n)\ndef candies(n, m):\n    return (m // n) * n\ndef seatsInTheater(nCols, nRows, col, row):\n    return (nCols - col + 1) * (nRows - row)\ndef maxMultiple(divisor, bound):\n    for num in range(bound, 1, -1):\n        if num % divisor == 0:\n            return num",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "candies",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def candies(n, m):\n    return (m // n) * n\ndef seatsInTheater(nCols, nRows, col, row):\n    return (nCols - col + 1) * (nRows - row)\ndef maxMultiple(divisor, bound):\n    for num in range(bound, 1, -1):\n        if num % divisor == 0:\n            return num\n    return 0\ndef circleOfNumbers(n, firstNumber):",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "seatsInTheater",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def seatsInTheater(nCols, nRows, col, row):\n    return (nCols - col + 1) * (nRows - row)\ndef maxMultiple(divisor, bound):\n    for num in range(bound, 1, -1):\n        if num % divisor == 0:\n            return num\n    return 0\ndef circleOfNumbers(n, firstNumber):\n    return (firstNumber + (n // 2)) % n\ndef lateRide(n):",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "maxMultiple",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def maxMultiple(divisor, bound):\n    for num in range(bound, 1, -1):\n        if num % divisor == 0:\n            return num\n    return 0\ndef circleOfNumbers(n, firstNumber):\n    return (firstNumber + (n // 2)) % n\ndef lateRide(n):\n    hours = n // 60\n    minutes = n % 60",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "circleOfNumbers",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def circleOfNumbers(n, firstNumber):\n    return (firstNumber + (n // 2)) % n\ndef lateRide(n):\n    hours = n // 60\n    minutes = n % 60\n    return (hours // 10) + (hours % 10) + (minutes // 10) + (minutes % 10)\ndef phoneCall(min1, min2_10, min11, s):\n    if s < min1:\n        return 0\n    if s == min1:",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "lateRide",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def lateRide(n):\n    hours = n // 60\n    minutes = n % 60\n    return (hours // 10) + (hours % 10) + (minutes // 10) + (minutes % 10)\ndef phoneCall(min1, min2_10, min11, s):\n    if s < min1:\n        return 0\n    if s == min1:\n        return 1\n    if s <= min1 + (min2_10 * 9):",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "phoneCall",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def phoneCall(min1, min2_10, min11, s):\n    if s < min1:\n        return 0\n    if s == min1:\n        return 1\n    if s <= min1 + (min2_10 * 9):\n        s -= min1\n        return (s // min2_10) + 1\n    s -= min1\n    s -= min2_10 * 9",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "reachNextLevel",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def reachNextLevel(experience, threshold, reward):\n    return experience + reward >= threshold\ndef knapsackLight(value1, weight1, value2, weight2, maxW):\n    if weight1 + weight2 <= maxW:\n        return value1 + value2\n    if weight1 <= maxW and weight2 <= maxW:\n        return max(value1, value2)\n    if weight1 <= maxW:\n        return value1\n    if weight2 <= maxW:",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "knapsackLight",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def knapsackLight(value1, weight1, value2, weight2, maxW):\n    if weight1 + weight2 <= maxW:\n        return value1 + value2\n    if weight1 <= maxW and weight2 <= maxW:\n        return max(value1, value2)\n    if weight1 <= maxW:\n        return value1\n    if weight2 <= maxW:\n        return value2\n    return 0",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "extraNumber",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def extraNumber(a, b, c):\n    if a == b:\n        return c\n    if a == c:\n        return b\n    return a\ndef isInfiniteProcess(a, b):\n    return a > b or (a % 2 != b % 2)\ndef arithmeticExpression(a, b, c):\n    return a + b == c or a - b == c or a * b == c or a / b == c",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "isInfiniteProcess",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def isInfiniteProcess(a, b):\n    return a > b or (a % 2 != b % 2)\ndef arithmeticExpression(a, b, c):\n    return a + b == c or a - b == c or a * b == c or a / b == c\ndef tennisSet(score1, score2):\n    if max(score1, score2) == 6 and min(score1, score2) < 5:\n        return True\n    if 5 <= min(score1, score2) <= 6 and max(score1, score2) == 7:\n        return True\n    return False",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "arithmeticExpression",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def arithmeticExpression(a, b, c):\n    return a + b == c or a - b == c or a * b == c or a / b == c\ndef tennisSet(score1, score2):\n    if max(score1, score2) == 6 and min(score1, score2) < 5:\n        return True\n    if 5 <= min(score1, score2) <= 6 and max(score1, score2) == 7:\n        return True\n    return False\ndef willYou(young, beautiful, loved):\n    return (young and beautiful) != loved",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "tennisSet",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def tennisSet(score1, score2):\n    if max(score1, score2) == 6 and min(score1, score2) < 5:\n        return True\n    if 5 <= min(score1, score2) <= 6 and max(score1, score2) == 7:\n        return True\n    return False\ndef willYou(young, beautiful, loved):\n    return (young and beautiful) != loved\ndef metroCard(lastNumberOfDays):\n    if lastNumberOfDays == 30 or lastNumberOfDays == 28:",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "willYou",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def willYou(young, beautiful, loved):\n    return (young and beautiful) != loved\ndef metroCard(lastNumberOfDays):\n    if lastNumberOfDays == 30 or lastNumberOfDays == 28:\n        return [31]\n    return [28, 30, 31]\ndef killKthBit(n, k):\n    return n & ~(2 ** (k - 1))\ndef arrayPacking(a):\n    binary_array = [bin(num)[2:].rjust(8, \"0\") for num in a]",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "metroCard",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def metroCard(lastNumberOfDays):\n    if lastNumberOfDays == 30 or lastNumberOfDays == 28:\n        return [31]\n    return [28, 30, 31]\ndef killKthBit(n, k):\n    return n & ~(2 ** (k - 1))\ndef arrayPacking(a):\n    binary_array = [bin(num)[2:].rjust(8, \"0\") for num in a]\n    out_string = \"\".join(binary_array[::-1])\n    return int(out_string, 2)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "killKthBit",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def killKthBit(n, k):\n    return n & ~(2 ** (k - 1))\ndef arrayPacking(a):\n    binary_array = [bin(num)[2:].rjust(8, \"0\") for num in a]\n    out_string = \"\".join(binary_array[::-1])\n    return int(out_string, 2)\ndef rangeBitCount(a, b):\n    array = list(range(a, b + 1))\n    binary_array = [bin(num) for num in array]\n    count_array = [binary.count(\"1\") for binary in binary_array]",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "arrayPacking",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def arrayPacking(a):\n    binary_array = [bin(num)[2:].rjust(8, \"0\") for num in a]\n    out_string = \"\".join(binary_array[::-1])\n    return int(out_string, 2)\ndef rangeBitCount(a, b):\n    array = list(range(a, b + 1))\n    binary_array = [bin(num) for num in array]\n    count_array = [binary.count(\"1\") for binary in binary_array]\n    return sum(count_array)\ndef mirrorBits(a):",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "rangeBitCount",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def rangeBitCount(a, b):\n    array = list(range(a, b + 1))\n    binary_array = [bin(num) for num in array]\n    count_array = [binary.count(\"1\") for binary in binary_array]\n    return sum(count_array)\ndef mirrorBits(a):\n    binary = bin(a)[2:]\n    return int(binary[::-1], 2)\ndef secondRightmostZeroBit(n):\n    return 2 ** bin(n)[::-1].find(\"0\", bin(n)[::-1].find(\"0\") + 1)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "mirrorBits",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def mirrorBits(a):\n    binary = bin(a)[2:]\n    return int(binary[::-1], 2)\ndef secondRightmostZeroBit(n):\n    return 2 ** bin(n)[::-1].find(\"0\", bin(n)[::-1].find(\"0\") + 1)\ndef swapAdjacentBits(n):\n    return ((n >> 1) & 1431655765) | ((n << 1) & 2863311530)\ndef differentRightmostBit(n, m):\n    return 2 ** bin((n ^ m))[::-1].find(\"1\")\ndef equalPairOfBits(n, m):",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "secondRightmostZeroBit",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def secondRightmostZeroBit(n):\n    return 2 ** bin(n)[::-1].find(\"0\", bin(n)[::-1].find(\"0\") + 1)\ndef swapAdjacentBits(n):\n    return ((n >> 1) & 1431655765) | ((n << 1) & 2863311530)\ndef differentRightmostBit(n, m):\n    return 2 ** bin((n ^ m))[::-1].find(\"1\")\ndef equalPairOfBits(n, m):\n    return 2 ** bin(~(n ^ m))[::-1].find(\"1\")\ndef leastFactorial(n):\n    factorial = 1",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "swapAdjacentBits",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def swapAdjacentBits(n):\n    return ((n >> 1) & 1431655765) | ((n << 1) & 2863311530)\ndef differentRightmostBit(n, m):\n    return 2 ** bin((n ^ m))[::-1].find(\"1\")\ndef equalPairOfBits(n, m):\n    return 2 ** bin(~(n ^ m))[::-1].find(\"1\")\ndef leastFactorial(n):\n    factorial = 1\n    index = 1\n    while factorial < n:",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "differentRightmostBit",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def differentRightmostBit(n, m):\n    return 2 ** bin((n ^ m))[::-1].find(\"1\")\ndef equalPairOfBits(n, m):\n    return 2 ** bin(~(n ^ m))[::-1].find(\"1\")\ndef leastFactorial(n):\n    factorial = 1\n    index = 1\n    while factorial < n:\n        index += 1\n        factorial *= index",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "equalPairOfBits",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def equalPairOfBits(n, m):\n    return 2 ** bin(~(n ^ m))[::-1].find(\"1\")\ndef leastFactorial(n):\n    factorial = 1\n    index = 1\n    while factorial < n:\n        index += 1\n        factorial *= index\n    return factorial\ndef countSumOfTwoRepresentations2(n, l, r):",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "leastFactorial",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def leastFactorial(n):\n    factorial = 1\n    index = 1\n    while factorial < n:\n        index += 1\n        factorial *= index\n    return factorial\ndef countSumOfTwoRepresentations2(n, l, r):\n    count = 0\n    a = max(n - r, l)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "countSumOfTwoRepresentations2",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def countSumOfTwoRepresentations2(n, l, r):\n    count = 0\n    a = max(n - r, l)\n    b = n - a\n    while a <= r and a <= b:\n        count += 1\n        a += 1\n        b -= 1\n    return count\ndef magicalWell(a, b, n):",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "magicalWell",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def magicalWell(a, b, n):\n    total = 0\n    for i in range(n):\n        total += a * b\n        a += 1\n        b += 1\n    return total\ndef lineUp(commands):\n    count = 0\n    smart_student = 0",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "lineUp",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def lineUp(commands):\n    count = 0\n    smart_student = 0\n    dumb_student = 0\n    for command in commands:\n        if command == \"L\":\n            smart_student = (smart_student - 1) % 4\n            dumb_student = (dumb_student + 1) % 4\n        elif command == \"R\":\n            smart_student = (smart_student + 1) % 4",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "additionWithoutCarrying",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def additionWithoutCarrying(param1, param2):\n    # Convert numbers to strings\n    str1 = str(param1)\n    str2 = str(param2)\n    # Pad both to the same length with zeroes (to the left of the numbers)\n    length = max(len(str2), len(str1))\n    str1 = str1.rjust(length, \"0\")\n    str2 = str2.rjust(length, \"0\")\n    output = []\n    for num1, num2 in zip(str1, str2):",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "appleBoxes",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def appleBoxes(k):\n    red = 0\n    yellow = 0\n    for i in range(1, k + 1, 2):\n        yellow += i * i\n    for i in range(2, k + 1, 2):\n        red += i * i\n    return red - yellow\ndef increaseNumberRoundness(n):\n    string = str(n)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "increaseNumberRoundness",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def increaseNumberRoundness(n):\n    string = str(n)\n    # Check for immediate rejection\n    if \"0\" not in string or len(string) < 2:\n        return False\n    # Since we know there's a 0, if it's not on\n    # the left, then we know to accept\n    if string[-1] != \"0\":\n        return True\n    # If there is only one 0, it must be at the end, so reject.",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "rounders",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def rounders(value):\n    length = len(str(value))\n    magnitude = length - 1\n    for i in range(length - 1):\n        value = int((value / 10) + 0.5)\n    return value * (10 ** magnitude)\ndef candles(candlesNumber, makeNew):\n    totalBurned = 0\n    leftovers = 0\n    while candlesNumber > 0:",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "candles",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def candles(candlesNumber, makeNew):\n    totalBurned = 0\n    leftovers = 0\n    while candlesNumber > 0:\n        totalBurned += candlesNumber\n        leftovers += candlesNumber\n        candlesNumber = 0\n        candlesNumber = leftovers // makeNew\n        leftovers = leftovers % makeNew\n    return totalBurned",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "countBlackCells",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def countBlackCells(n, m):\n    gcd = find_gcd(n, m)\n    line_cells = n + m - gcd\n    line_corner_cells = (gcd - 1) * 2\n    return line_cells + line_corner_cells\ndef find_gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\ndef createArray(size):",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "find_gcd",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def find_gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\ndef createArray(size):\n    return [1] * size\ndef arrayReplace(inputArray, elemToReplace, substitutionElem):\n    output = [\n        elem if elem != elemToReplace else substitutionElem for elem in inputArray\n    ]",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "createArray",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def createArray(size):\n    return [1] * size\ndef arrayReplace(inputArray, elemToReplace, substitutionElem):\n    output = [\n        elem if elem != elemToReplace else substitutionElem for elem in inputArray\n    ]\n    return output\ndef firstReverseTry(arr):\n    if len(arr) < 2:\n        return arr",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "arrayReplace",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def arrayReplace(inputArray, elemToReplace, substitutionElem):\n    output = [\n        elem if elem != elemToReplace else substitutionElem for elem in inputArray\n    ]\n    return output\ndef firstReverseTry(arr):\n    if len(arr) < 2:\n        return arr\n    if len(arr) < 4:\n        return arr[::-1]",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "firstReverseTry",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def firstReverseTry(arr):\n    if len(arr) < 2:\n        return arr\n    if len(arr) < 4:\n        return arr[::-1]\n    return arr[-1:] + arr[1:-1] + arr[:1]\ndef concatenateArrays(a, b):\n    return a + b\ndef removeArrayPart(inputArray, l, r):\n    return inputArray[:l] + inputArray[r + 1 :]",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "concatenateArrays",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def concatenateArrays(a, b):\n    return a + b\ndef removeArrayPart(inputArray, l, r):\n    return inputArray[:l] + inputArray[r + 1 :]\ndef isSmooth(arr):\n    if arr[0] != arr[-1]:\n        return False\n    if len(arr) % 2 == 0:\n        middle = arr[len(arr) // 2] + arr[(len(arr) // 2) - 1]\n    else:",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "removeArrayPart",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def removeArrayPart(inputArray, l, r):\n    return inputArray[:l] + inputArray[r + 1 :]\ndef isSmooth(arr):\n    if arr[0] != arr[-1]:\n        return False\n    if len(arr) % 2 == 0:\n        middle = arr[len(arr) // 2] + arr[(len(arr) // 2) - 1]\n    else:\n        middle = arr[len(arr) // 2]\n    return arr[0] == middle",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "isSmooth",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def isSmooth(arr):\n    if arr[0] != arr[-1]:\n        return False\n    if len(arr) % 2 == 0:\n        middle = arr[len(arr) // 2] + arr[(len(arr) // 2) - 1]\n    else:\n        middle = arr[len(arr) // 2]\n    return arr[0] == middle\ndef replaceMiddle(arr):\n    if len(arr) % 2 != 0:",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "replaceMiddle",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def replaceMiddle(arr):\n    if len(arr) % 2 != 0:\n        return arr\n    right_middle = len(arr) // 2\n    middle_value = arr[right_middle] + arr[right_middle - 1]\n    return arr[: right_middle - 1] + [middle_value] + arr[right_middle + 1 :]\ndef makeArrayConsecutive2(statues):\n    count = 0\n    for i in range(min(statues), max(statues)):\n        if i not in statues:",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "makeArrayConsecutive2",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def makeArrayConsecutive2(statues):\n    count = 0\n    for i in range(min(statues), max(statues)):\n        if i not in statues:\n            count += 1\n    return count\ndef isPower(n):\n    if n == 1:\n        return True\n    a = 2",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "isPower",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def isPower(n):\n    if n == 1:\n        return True\n    a = 2\n    b = 2\n    while a ** 2 <= n:\n        while a ** b <= n:\n            if a ** b == n:\n                return True\n            b += 1",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "isSumOfConsecutive2",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def isSumOfConsecutive2(n):\n    count = 0\n    right = 2\n    arr = [1, 2]\n    while right <= (n // 2) + 1:\n        total = sum(arr)\n        if total == n:\n            count += 1\n            del arr[0]\n        elif total < n:",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "squareDigitsSequence",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def squareDigitsSequence(a0):\n    sequence = [a0]\n    while sequence[-1] not in sequence[:-1]:\n        next_value = 0\n        for digit in str(sequence[-1]):\n            next_value += int(digit) ** 2\n        sequence.append(next_value)\n    return len(sequence)\ndef pagesNumberingWithInk(current, numberOfDigits):\n    numberOfDigits -= len(str(current))",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "pagesNumberingWithInk",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def pagesNumberingWithInk(current, numberOfDigits):\n    numberOfDigits -= len(str(current))\n    next_digits = len(str(current + 1))\n    while numberOfDigits >= next_digits:\n        current += 1\n        numberOfDigits -= next_digits\n        next_digits = len(str(current))\n    return current\ndef comfortableNumbers(l, r):\n    count = 0",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "comfortableNumbers",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def comfortableNumbers(l, r):\n    count = 0\n    for a in range(l, r):\n        for b in range(a + 1, r + 1):\n            a_sum = sum(int(digit) for digit in str(a))\n            b_sum = sum(int(digit) for digit in str(b))\n            if b <= a + a_sum and a >= b - b_sum:\n                count += 1\n    return count\ndef weakNumbers(n):",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "weakNumbers",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def weakNumbers(n):\n    all_factors = [count_factors(num) for num in range(1, n + 1)]\n    weaknesses = []\n    for num, num_factors in enumerate(all_factors, 1):\n        weakness = 0\n        for factor in all_factors[:num]:\n            if factor > num_factors:\n                weakness += 1\n        weaknesses.append(weakness)\n        weakest = max(weaknesses)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "count_factors",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def count_factors(n):\n    factors = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            factors += 1\n    return factors\nprint(weakNumbers(500))\nimport math\ndef rectangleRotation(a, b):\n    n = a / (2 ** 0.5)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "rectangleRotation",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def rectangleRotation(a, b):\n    n = a / (2 ** 0.5)\n    m = b / (2 ** 0.5)\n    points = (math.floor(n) * math.floor(m)) + (math.ceil(n) * math.ceil(m))\n    if math.floor(n) % 2 != math.floor(m) % 2:\n        points -= 1\n    return points\n# rectangleRotation(6, 4)\nprint(rectangleRotation(8, 6))",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "mergeTwoLinkedLists",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.mergeTwoLinkedLists (2)",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.mergeTwoLinkedLists (2)",
        "peekOfCode": "def mergeTwoLinkedLists(l1, l2):\n    if l1 == None and l2 == None:\n        return None\n    merged = ListNode(None)\n    ret = merged\n    # prev = merged.value\n    while l1 != None or l2 != None:\n        if l1 != None:\n            if l2 == None and l1.next == None:\n                merged.value = l1.value",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.mergeTwoLinkedLists (2)",
        "documentation": {}
    },
    {
        "label": "mergeTwoLinkedLists",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.mergeTwoLinkedLists (3)",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.mergeTwoLinkedLists (3)",
        "peekOfCode": "def mergeTwoLinkedLists(l1, l2):\n    em = None\n    if l1 is None:\n        return l2\n    if l2 is None:\n        return l1\n    if l1.value <= l2.value:\n        startNode = ListNode(l1.value)\n        l1 = l1.next\n    else:",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.mergeTwoLinkedLists (3)",
        "documentation": {}
    },
    {
        "label": "mergeTwoLinkedLists",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.mergeTwoLinkedLists",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.mergeTwoLinkedLists",
        "peekOfCode": "def mergeTwoLinkedLists(l1, l2):\n    em = None\n    if l1 is None:\n        return l2\n    if l2 is None:\n        return l1\n    if l1.value <= l2.value:\n        startNode = ListNode(l1.value)\n        l1 = l1.next\n    else:",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.mergeTwoLinkedLists",
        "documentation": {}
    },
    {
        "label": "AngryBird",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "peekOfCode": "class AngryBird:\n    # Slots optimize property access and memory usage and prevent you\n    # from arbitrarily assigning new properties the instance\n    __slots__ = [\"_x\", \"_y\"]\n    # Constructor\n    def __init__(self, x=0, y=0):\n        # Doc String\n        \"\"\"\n        Construct a new AngryBird by setting it's position to (0, 0)\n        \"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "say_hi",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "peekOfCode": "def say_hi(name):\n    \"\"\"<---- Multi-Line Comments and Docstrings\n    This is where you put your content for help() to inform the user\n    about what your function does and how to use it\n    \"\"\"\n    print(f\"Hello {name}!\")\nprint(say_hi(\"Bryan\"))  # Should get the print inside the function, then None\n# Boolean Values\n# Work the same as in JS, except they are title case: True and False\na = True",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "printCopyright",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "peekOfCode": "def printCopyright():\n    print(\"Copyright 2021, Bgoonz\")\n# Lambdas are one liners! (Should be at least, you can use parenthesis to disobey)\ndef avg(num1, num2):\n    return print(num1 + num2)\navg(1, 2)\n# Calling it with keyword arguments, order does not matter\navg(num2=20, num1=1252)\nprintCopyright()\n# We can give parameters default arguments like JS",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "avg",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "peekOfCode": "def avg(num1, num2):\n    return print(num1 + num2)\navg(1, 2)\n# Calling it with keyword arguments, order does not matter\navg(num2=20, num1=1252)\nprintCopyright()\n# We can give parameters default arguments like JS\ndef greeting(name, saying=\"Hello\"):\n    print(saying, name)\ngreeting(\"Mike\")  # Hello Mike",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "greeting",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "peekOfCode": "def greeting(name, saying=\"Hello\"):\n    print(saying, name)\ngreeting(\"Mike\")  # Hello Mike\ngreeting(\"Bryan\", saying=\"Hello there...\")\n# A common gotcha is using a mutable object for a default parameter\n# All invocations of the function reference the same mutable object\ndef append_item(item_name, item_list=[]):  # Will it obey and give us a new list?\n    item_list.append(item_name)\n    return item_list\n# Uses same item list unless otherwise stated which is counterintuitive",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "append_item",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "peekOfCode": "def append_item(item_name, item_list=[]):  # Will it obey and give us a new list?\n    item_list.append(item_name)\n    return item_list\n# Uses same item list unless otherwise stated which is counterintuitive\nprint(append_item(\"notebook\"))\nprint(append_item(\"notebook\"))\nprint(append_item(\"notebook\", []))\n# Errors - Unlike JS, if we pass the incorrect amount of arguments to a function,\n#          it will throw an error\n# avg(1)  # TypeError",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "add",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "peekOfCode": "def add(a, b, *args):\n    # args is a tuple of the rest of the arguments\n    total = a + b\n    for n in args:\n        total += n\n    return total\nprint(add(1, 2))  # args is None, returns 3\nprint(add(1, 2, 3, 4, 5, 6))  # args is (3, 4, 5, 6), returns 21\n# Variable Length Keyword Arguments\ndef print_names_and_countries(greeting, **kwargs):",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "print_names_and_countries",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "peekOfCode": "def print_names_and_countries(greeting, **kwargs):\n    # kwargs is a dictionary of the rest of the keyword arguments\n    for k, v in kwargs.items():\n        print(greeting, k, \"from\", v)\nprint_names_and_countries(\n    \"Hey there\", Monica=\"Sweden\", Mike=\"The United States\", Mark=\"China\"\n)\n# We can combine all of these together\ndef example2(arg1, arg2, *args, kw_1=\"cheese\", kw_2=\"horse\", **kwargs):\n    pass",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "example2",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "peekOfCode": "def example2(arg1, arg2, *args, kw_1=\"cheese\", kw_2=\"horse\", **kwargs):\n    pass\n# Lists are mutable arrays\nempty_list = []\nroomates = [\"Beau\", \"Delynn\"]\n# List built-in function makes a list too\nspecials = list()\n# We can use 'in' to test if something is in the list, like 'includes' in JS\nprint(1 in [1, 2, 4])  # True\nprint(2 in [1, 3, 5])  # False",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "isOdd",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "peekOfCode": "def isOdd(num):\n    return num % 2 == 1\nfiltered = filter(isOdd, [1, 2, 3, 4])\nprint(list(filtered))\nfor num in filtered:\n    print(f\"first way: {num}\")\nprint(\"--\" * 20)\n[print(f\"list comprehension: {i}\") for i in [1, 2, 3, 4, 5, 6, 7, 8] if i % 2 == 1]\n# Map\ndef toUpper(str):",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "toUpper",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "peekOfCode": "def toUpper(str):\n    return str.upper()\nupperCased = map(toUpper, [\"a\", \"b\", \"c\", \"d\"])\nprint(list(upperCased))\n# Sorted\nsorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"])\nprint(list(sorted_items))  # Notice uppercase comes before lowercase\n# Using a key function to control the sorting and make it case insensitive\nsorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"], key=str.lower)\nprint(sorted_items)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "print_len",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "peekOfCode": "def print_len(item):\n    return print(len(item))\nprint_len(\"Mike\")\nprint_len([1, 5, 2, 10, 3, 10])\nprint_len({1, 5, 10, 9, 10})  # 4 because there is a duplicate here (10)\nprint_len((1, 4, 10, 9, 20))\n# Max will return the max number in a given scenario\nprint(max(1, 2, 35, 1012, 1))\n# Min\nprint(min(1, 5, 2, 10))",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "peekOfCode": "a = True\nb = False\n# Logical Operators\n# ! = not, || = or, && = and\nprint(True and True)\nprint(True and not True)\nprint(True or True)\n# Truthiness - Everything is True except...\n# False - None, False, '', [], (), set(), range(0)\n# Number Values",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "peekOfCode": "b = False\n# Logical Operators\n# ! = not, || = or, && = and\nprint(True and True)\nprint(True and not True)\nprint(True or True)\n# Truthiness - Everything is True except...\n# False - None, False, '', [], (), set(), range(0)\n# Number Values\n# Integers are numbers without a floating decimal point",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "peekOfCode": "name = \"Bryan\"\nfor i in range(len(name)):\n    print(name[i])  # B, r, y, a, n\n# We can index starting from the end as well, with negatives\noccupation = \"Full Stack Software Engineer\"\nprint(occupation[-3])  # e\n# We can also get ranges in the index with the [start:stop:step] syntax\nprint(occupation[0:4:1])  # step and stop are optional, stop is exclusive\nprint(occupation[::4])  # beginning to end, every 4th letter\nprint(occupation[4:14:2])  # Let's get weird with it!",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "occupation",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "peekOfCode": "occupation = \"Full Stack Software Engineer\"\nprint(occupation[-3])  # e\n# We can also get ranges in the index with the [start:stop:step] syntax\nprint(occupation[0:4:1])  # step and stop are optional, stop is exclusive\nprint(occupation[::4])  # beginning to end, every 4th letter\nprint(occupation[4:14:2])  # Let's get weird with it!\n# NOTE: Indexing out of range will give you an IndexError\n# We can also get the index og things with the .index() method, similar to indexOf()\nprint(occupation.index(\"Stack\"))\nprint([\"Mike\", \"Barry\", \"Cole\", \"James\", \"Mark\"].index(\"Cole\"))",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "first_name",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "peekOfCode": "first_name = \"Bryan\"\nlast_name = \"Guner\"\nprint(\"Your name is {0} {1}\".format(first_name, last_name))\n# Useful String Methods\nprint(\"Hello\".upper())  # HELLO\nprint(\"Hello\".lower())  # hello\nprint(\"HELLO\".islower())  # False\nprint(\"HELLO\".isupper())  # True\nprint(\"Hello\".startswith(\"he\"))  # False\nprint(\"Hello\".endswith(\"lo\"))  # True",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "last_name",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "peekOfCode": "last_name = \"Guner\"\nprint(\"Your name is {0} {1}\".format(first_name, last_name))\n# Useful String Methods\nprint(\"Hello\".upper())  # HELLO\nprint(\"Hello\".lower())  # hello\nprint(\"HELLO\".islower())  # False\nprint(\"HELLO\".isupper())  # True\nprint(\"Hello\".startswith(\"he\"))  # False\nprint(\"Hello\".endswith(\"lo\"))  # True\nprint(\"Hello There\".split())  # [Hello, There]",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "peekOfCode": "a = 3\nb = a\nc = \"heyoo\"\nb = [\"reassignment\", \"is\", \"fine\", \"G!\"]\n# Comparison Operators - Python uses the same equality operators as JS, but no ===\n# < - Less than\n# > - Greater than\n# <= - Less than or Equal\n# >= - Greater than or Equal\n# == - Equal to",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "peekOfCode": "b = a\nc = \"heyoo\"\nb = [\"reassignment\", \"is\", \"fine\", \"G!\"]\n# Comparison Operators - Python uses the same equality operators as JS, but no ===\n# < - Less than\n# > - Greater than\n# <= - Less than or Equal\n# >= - Greater than or Equal\n# == - Equal to\n# != - Not equal to",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "peekOfCode": "c = \"heyoo\"\nb = [\"reassignment\", \"is\", \"fine\", \"G!\"]\n# Comparison Operators - Python uses the same equality operators as JS, but no ===\n# < - Less than\n# > - Greater than\n# <= - Less than or Equal\n# >= - Greater than or Equal\n# == - Equal to\n# != - Not equal to\n# is - Refers to exact same memory location",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "peekOfCode": "b = [\"reassignment\", \"is\", \"fine\", \"G!\"]\n# Comparison Operators - Python uses the same equality operators as JS, but no ===\n# < - Less than\n# > - Greater than\n# <= - Less than or Equal\n# >= - Greater than or Equal\n# == - Equal to\n# != - Not equal to\n# is - Refers to exact same memory location\n# not - !",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "lst",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "peekOfCode": "lst = [1, 2, 3, 4]\nfor i in lst:\n    print(i)\n# Looping over a dictionary\nspam = {\"color\": \"red\", \"age\": 42, \"items\": [(1, \"hey\"), (2, \"hooo!\")]}\nfor v in spam.values():\n    print(v)\n# Loop over a list of tuples and destructuring the values\n# Assuming spam.items returns a list of tuples each containing two items (k, v)\nfor k, v in spam.items():",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "spam",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "peekOfCode": "spam = {\"color\": \"red\", \"age\": 42, \"items\": [(1, \"hey\"), (2, \"hooo!\")]}\nfor v in spam.values():\n    print(v)\n# Loop over a list of tuples and destructuring the values\n# Assuming spam.items returns a list of tuples each containing two items (k, v)\nfor k, v in spam.items():\n    print(f\"{k}: {v}\")\n# While loops as long as the condition is True\n#  - Exit loop early with break\n#  - Exit iteration early with continue",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "spam",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "peekOfCode": "spam = 0\nwhile True:\n    print(\"Sike That's the wrong Numba\")\n    spam += 1\n    if spam < 5:\n        continue\n    break\n# Functions - use def keyword to define a function in Python\ndef printCopyright():\n    print(\"Copyright 2021, Bgoonz\")",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "empty_list",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "peekOfCode": "empty_list = []\nroomates = [\"Beau\", \"Delynn\"]\n# List built-in function makes a list too\nspecials = list()\n# We can use 'in' to test if something is in the list, like 'includes' in JS\nprint(1 in [1, 2, 4])  # True\nprint(2 in [1, 3, 5])  # False\n# Dictionaries - Similar to JS POJO's or Map, containing key value pairs\na = {\"one\": 1, \"two\": 2, \"three\": 3}\nb = dict(one=1, two=2, three=3)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "roomates",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "peekOfCode": "roomates = [\"Beau\", \"Delynn\"]\n# List built-in function makes a list too\nspecials = list()\n# We can use 'in' to test if something is in the list, like 'includes' in JS\nprint(1 in [1, 2, 4])  # True\nprint(2 in [1, 3, 5])  # False\n# Dictionaries - Similar to JS POJO's or Map, containing key value pairs\na = {\"one\": 1, \"two\": 2, \"three\": 3}\nb = dict(one=1, two=2, three=3)\n# Can use 'in' on dictionaries too (for keys)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "specials",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "peekOfCode": "specials = list()\n# We can use 'in' to test if something is in the list, like 'includes' in JS\nprint(1 in [1, 2, 4])  # True\nprint(2 in [1, 3, 5])  # False\n# Dictionaries - Similar to JS POJO's or Map, containing key value pairs\na = {\"one\": 1, \"two\": 2, \"three\": 3}\nb = dict(one=1, two=2, three=3)\n# Can use 'in' on dictionaries too (for keys)\nprint(\"one\" in a)  # True\nprint(3 in b)  # False",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "peekOfCode": "a = {\"one\": 1, \"two\": 2, \"three\": 3}\nb = dict(one=1, two=2, three=3)\n# Can use 'in' on dictionaries too (for keys)\nprint(\"one\" in a)  # True\nprint(3 in b)  # False\n# Sets - Just like JS, unordered collection of distinct objects\nbedroom = {\"bed\", \"tv\", \"computer\", \"clothes\", \"playstation 4\"}\n# bedroom = set(\"bed\", \"tv\", \"computer\", \"clothes\", \"playstation 5\")\nschool_bag = set(\n    [\"book\", \"paper\", \"pencil\", \"pencil\", \"book\", \"book\", \"book\", \"eraser\"]",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "peekOfCode": "b = dict(one=1, two=2, three=3)\n# Can use 'in' on dictionaries too (for keys)\nprint(\"one\" in a)  # True\nprint(3 in b)  # False\n# Sets - Just like JS, unordered collection of distinct objects\nbedroom = {\"bed\", \"tv\", \"computer\", \"clothes\", \"playstation 4\"}\n# bedroom = set(\"bed\", \"tv\", \"computer\", \"clothes\", \"playstation 5\")\nschool_bag = set(\n    [\"book\", \"paper\", \"pencil\", \"pencil\", \"book\", \"book\", \"book\", \"eraser\"]\n)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "bedroom",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "peekOfCode": "bedroom = {\"bed\", \"tv\", \"computer\", \"clothes\", \"playstation 4\"}\n# bedroom = set(\"bed\", \"tv\", \"computer\", \"clothes\", \"playstation 5\")\nschool_bag = set(\n    [\"book\", \"paper\", \"pencil\", \"pencil\", \"book\", \"book\", \"book\", \"eraser\"]\n)\nprint(school_bag)\nprint(bedroom)\n# We can use 'in' on sets as wel\nprint(1 in {1, 2, 3})  # True\nprint(4 in {1, 3, 5})  # False",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "school_bag",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "peekOfCode": "school_bag = set(\n    [\"book\", \"paper\", \"pencil\", \"pencil\", \"book\", \"book\", \"book\", \"eraser\"]\n)\nprint(school_bag)\nprint(bedroom)\n# We can use 'in' on sets as wel\nprint(1 in {1, 2, 3})  # True\nprint(4 in {1, 3, 5})  # False\n# Tuples are immutable lists of items\ntime_blocks = (\"AM\", \"PM\")",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "time_blocks",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "peekOfCode": "time_blocks = (\"AM\", \"PM\")\ncolors = \"red\", \"green\", \"blue\"  # Parenthesis not needed but encouraged\n# The tuple built-in function can be used to convert things to tuples\nprint(tuple(\"abc\"))\nprint(tuple([1, 2, 3]))\n# 'in' may be used on tuples as well\nprint(1 in (1, 2, 3))  # True\nprint(5 in (1, 4, 3))  # False\n# Ranges are immutable lists of numbers, often used with for loops\n#   - start - default: 0, first number in sequence",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "colors",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "peekOfCode": "colors = \"red\", \"green\", \"blue\"  # Parenthesis not needed but encouraged\n# The tuple built-in function can be used to convert things to tuples\nprint(tuple(\"abc\"))\nprint(tuple([1, 2, 3]))\n# 'in' may be used on tuples as well\nprint(1 in (1, 2, 3))  # True\nprint(5 in (1, 4, 3))  # False\n# Ranges are immutable lists of numbers, often used with for loops\n#   - start - default: 0, first number in sequence\n#   - stop - required, next number past last number in sequence",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "range1",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "peekOfCode": "range1 = range(5)  # [0,1,2,3,4]\nrange2 = range(1, 5)  # [1,2,3,4]\nrange3 = range(0, 25, 5)  # [0,5,10,15,20]\nrange4 = range(0)  # []\nfor i in range1:\n    print(i)\n# Built-in functions:\n# Filter\ndef isOdd(num):\n    return num % 2 == 1",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "range2",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "peekOfCode": "range2 = range(1, 5)  # [1,2,3,4]\nrange3 = range(0, 25, 5)  # [0,5,10,15,20]\nrange4 = range(0)  # []\nfor i in range1:\n    print(i)\n# Built-in functions:\n# Filter\ndef isOdd(num):\n    return num % 2 == 1\nfiltered = filter(isOdd, [1, 2, 3, 4])",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "range3",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "peekOfCode": "range3 = range(0, 25, 5)  # [0,5,10,15,20]\nrange4 = range(0)  # []\nfor i in range1:\n    print(i)\n# Built-in functions:\n# Filter\ndef isOdd(num):\n    return num % 2 == 1\nfiltered = filter(isOdd, [1, 2, 3, 4])\nprint(list(filtered))",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "range4",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "peekOfCode": "range4 = range(0)  # []\nfor i in range1:\n    print(i)\n# Built-in functions:\n# Filter\ndef isOdd(num):\n    return num % 2 == 1\nfiltered = filter(isOdd, [1, 2, 3, 4])\nprint(list(filtered))\nfor num in filtered:",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "filtered",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "peekOfCode": "filtered = filter(isOdd, [1, 2, 3, 4])\nprint(list(filtered))\nfor num in filtered:\n    print(f\"first way: {num}\")\nprint(\"--\" * 20)\n[print(f\"list comprehension: {i}\") for i in [1, 2, 3, 4, 5, 6, 7, 8] if i % 2 == 1]\n# Map\ndef toUpper(str):\n    return str.upper()\nupperCased = map(toUpper, [\"a\", \"b\", \"c\", \"d\"])",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "upperCased",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "peekOfCode": "upperCased = map(toUpper, [\"a\", \"b\", \"c\", \"d\"])\nprint(list(upperCased))\n# Sorted\nsorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"])\nprint(list(sorted_items))  # Notice uppercase comes before lowercase\n# Using a key function to control the sorting and make it case insensitive\nsorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"], key=str.lower)\nprint(sorted_items)\n# You can also reverse the sort\nsorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"], key=str.lower, reverse=True)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "sorted_items",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "peekOfCode": "sorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"])\nprint(list(sorted_items))  # Notice uppercase comes before lowercase\n# Using a key function to control the sorting and make it case insensitive\nsorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"], key=str.lower)\nprint(sorted_items)\n# You can also reverse the sort\nsorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"], key=str.lower, reverse=True)\nprint(sorted_items)\n# Enumerate creates a tuple with an index for what you're enumerating\nquarters = [\"First\", \"Second\", \"Third\", \"Fourth\"]",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "sorted_items",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "peekOfCode": "sorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"], key=str.lower)\nprint(sorted_items)\n# You can also reverse the sort\nsorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"], key=str.lower, reverse=True)\nprint(sorted_items)\n# Enumerate creates a tuple with an index for what you're enumerating\nquarters = [\"First\", \"Second\", \"Third\", \"Fourth\"]\nprint(list(enumerate(quarters)))\nprint(list(enumerate(quarters, start=1)))\n# Zip takes list and combines them as key value pairs, or really however you need",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "sorted_items",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "peekOfCode": "sorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"], key=str.lower, reverse=True)\nprint(sorted_items)\n# Enumerate creates a tuple with an index for what you're enumerating\nquarters = [\"First\", \"Second\", \"Third\", \"Fourth\"]\nprint(list(enumerate(quarters)))\nprint(list(enumerate(quarters, start=1)))\n# Zip takes list and combines them as key value pairs, or really however you need\nkeys = (\"Name\", \"Email\")\nvalues = (\"Buster\", \"cheetoh@johhnydepp.com\")\nzipped = zip(keys, values)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "quarters",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "peekOfCode": "quarters = [\"First\", \"Second\", \"Third\", \"Fourth\"]\nprint(list(enumerate(quarters)))\nprint(list(enumerate(quarters, start=1)))\n# Zip takes list and combines them as key value pairs, or really however you need\nkeys = (\"Name\", \"Email\")\nvalues = (\"Buster\", \"cheetoh@johhnydepp.com\")\nzipped = zip(keys, values)\nprint(list(zipped))\n# You can zip more than 2\nx_coords = [0, 1, 2, 3, 4]",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "keys",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "peekOfCode": "keys = (\"Name\", \"Email\")\nvalues = (\"Buster\", \"cheetoh@johhnydepp.com\")\nzipped = zip(keys, values)\nprint(list(zipped))\n# You can zip more than 2\nx_coords = [0, 1, 2, 3, 4]\ny_coords = [4, 6, 10, 9, 10]\nz_coords = [20, 10, 5, 9, 1]\ncoords = zip(x_coords, y_coords, z_coords)\nprint(list(coords))",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "values",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "peekOfCode": "values = (\"Buster\", \"cheetoh@johhnydepp.com\")\nzipped = zip(keys, values)\nprint(list(zipped))\n# You can zip more than 2\nx_coords = [0, 1, 2, 3, 4]\ny_coords = [4, 6, 10, 9, 10]\nz_coords = [20, 10, 5, 9, 1]\ncoords = zip(x_coords, y_coords, z_coords)\nprint(list(coords))\n# Len reports the length of strings along with list and any other object data type",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "zipped",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "peekOfCode": "zipped = zip(keys, values)\nprint(list(zipped))\n# You can zip more than 2\nx_coords = [0, 1, 2, 3, 4]\ny_coords = [4, 6, 10, 9, 10]\nz_coords = [20, 10, 5, 9, 1]\ncoords = zip(x_coords, y_coords, z_coords)\nprint(list(coords))\n# Len reports the length of strings along with list and any other object data type\n# doing this to save myself some typing",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "x_coords",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "peekOfCode": "x_coords = [0, 1, 2, 3, 4]\ny_coords = [4, 6, 10, 9, 10]\nz_coords = [20, 10, 5, 9, 1]\ncoords = zip(x_coords, y_coords, z_coords)\nprint(list(coords))\n# Len reports the length of strings along with list and any other object data type\n# doing this to save myself some typing\ndef print_len(item):\n    return print(len(item))\nprint_len(\"Mike\")",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "y_coords",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "peekOfCode": "y_coords = [4, 6, 10, 9, 10]\nz_coords = [20, 10, 5, 9, 1]\ncoords = zip(x_coords, y_coords, z_coords)\nprint(list(coords))\n# Len reports the length of strings along with list and any other object data type\n# doing this to save myself some typing\ndef print_len(item):\n    return print(len(item))\nprint_len(\"Mike\")\nprint_len([1, 5, 2, 10, 3, 10])",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "z_coords",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "peekOfCode": "z_coords = [20, 10, 5, 9, 1]\ncoords = zip(x_coords, y_coords, z_coords)\nprint(list(coords))\n# Len reports the length of strings along with list and any other object data type\n# doing this to save myself some typing\ndef print_len(item):\n    return print(len(item))\nprint_len(\"Mike\")\nprint_len([1, 5, 2, 10, 3, 10])\nprint_len({1, 5, 10, 9, 10})  # 4 because there is a duplicate here (10)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "coords",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "peekOfCode": "coords = zip(x_coords, y_coords, z_coords)\nprint(list(coords))\n# Len reports the length of strings along with list and any other object data type\n# doing this to save myself some typing\ndef print_len(item):\n    return print(len(item))\nprint_len(\"Mike\")\nprint_len([1, 5, 2, 10, 3, 10])\nprint_len({1, 5, 10, 9, 10})  # 4 because there is a duplicate here (10)\nprint_len((1, 4, 10, 9, 20))",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "user",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "peekOfCode": "user = {\"Name\": \"Bob\", \"Email\": \"bob@bob.com\"}\nprint(dir(user))\n# Importing packages and modules\n#  - Module - A Python code in a file or directory\n#  - Package - A module which is a directory containing an __init__.py file\n#  - Submodule - A module which is contained within a package\n#  - Name - An exported function, class, or variable in a module\n# Unlike JS, modules export ALL names contained within them without any special export key\n# Assuming we have the following package with four submodules\n#  math",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "squares",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "peekOfCode": "squares = []\nfor i in range(10):\n    squares.append(i ** 2)\nprint(squares)\n# value = i ** 2\n# loop = for i in range(10)\nsquares = [i ** 2 for i in range(10)]\nprint(list(squares))\nsentence = \"the rocket came back from mars\"\nvowels = [character for character in sentence if character in \"aeiou\"]",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "squares",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "peekOfCode": "squares = [i ** 2 for i in range(10)]\nprint(list(squares))\nsentence = \"the rocket came back from mars\"\nvowels = [character for character in sentence if character in \"aeiou\"]\nprint(vowels)\n# You can also use them on dictionaries. We can use the items() method\n# for the dictionary to loop through it getting the keys and values out at once\nperson = {\"name\": \"Corina\", \"age\": 32, \"height\": 1.4}\n# This loops through and capitalizes the first letter of all keys\nnewPerson = {key.title(): value for key, value in person.items()}",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "sentence",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "peekOfCode": "sentence = \"the rocket came back from mars\"\nvowels = [character for character in sentence if character in \"aeiou\"]\nprint(vowels)\n# You can also use them on dictionaries. We can use the items() method\n# for the dictionary to loop through it getting the keys and values out at once\nperson = {\"name\": \"Corina\", \"age\": 32, \"height\": 1.4}\n# This loops through and capitalizes the first letter of all keys\nnewPerson = {key.title(): value for key, value in person.items()}\nprint(list(newPerson.items()))",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "vowels",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "peekOfCode": "vowels = [character for character in sentence if character in \"aeiou\"]\nprint(vowels)\n# You can also use them on dictionaries. We can use the items() method\n# for the dictionary to loop through it getting the keys and values out at once\nperson = {\"name\": \"Corina\", \"age\": 32, \"height\": 1.4}\n# This loops through and capitalizes the first letter of all keys\nnewPerson = {key.title(): value for key, value in person.items()}\nprint(list(newPerson.items()))",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "person",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "peekOfCode": "person = {\"name\": \"Corina\", \"age\": 32, \"height\": 1.4}\n# This loops through and capitalizes the first letter of all keys\nnewPerson = {key.title(): value for key, value in person.items()}\nprint(list(newPerson.items()))",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "newPerson",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "peekOfCode": "newPerson = {key.title(): value for key, value in person.items()}\nprint(list(newPerson.items()))",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "dfs",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.possible-paths-scrap",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.possible-paths-scrap",
        "peekOfCode": "def dfs(s):\n    # Append the node in path\n    # and set visited\n    path.append(s)\n    visited[s] = True\n    # Path started with a node\n    # having in-degree 0 and\n    # current node has out-degree 0,\n    # print current path\n    if outdeg0[s] and indeg0[path[0]]:",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.possible-paths-scrap",
        "documentation": {}
    },
    {
        "label": "csFindAllPathsFromAToB",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.possible-paths-scrap",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.possible-paths-scrap",
        "peekOfCode": "def csFindAllPathsFromAToB(graph):\n    for i in range(graph):\n        # for each node with in-degree 0\n        # print all possible paths\n        if indeg0[i] and adj[i]:\n            path = []\n            visited = [False] * (graph + 1)\n            dfs(i)\n# Driver code\ngraph = 6",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.possible-paths-scrap",
        "documentation": {}
    },
    {
        "label": "graph",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.possible-paths-scrap",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.possible-paths-scrap",
        "peekOfCode": "graph = 6\n# set all nodes unvisited\nvisited = [False] * (graph + 1)\npath = []\n# edges = (a, b): a -> b\nedges = [(5, 0), (5, 2), (2, 3), (4, 0), (4, 1), (3, 1)]\n# adjacency list for nodes\nadj = defaultdict(list)\n# indeg0 and outdeg0 arrays\nindeg0 = [True] * graph",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.possible-paths-scrap",
        "documentation": {}
    },
    {
        "label": "visited",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.possible-paths-scrap",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.possible-paths-scrap",
        "peekOfCode": "visited = [False] * (graph + 1)\npath = []\n# edges = (a, b): a -> b\nedges = [(5, 0), (5, 2), (2, 3), (4, 0), (4, 1), (3, 1)]\n# adjacency list for nodes\nadj = defaultdict(list)\n# indeg0 and outdeg0 arrays\nindeg0 = [True] * graph\noutdeg0 = [True] * graph\nfor edge in edges:",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.possible-paths-scrap",
        "documentation": {}
    },
    {
        "label": "path",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.possible-paths-scrap",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.possible-paths-scrap",
        "peekOfCode": "path = []\n# edges = (a, b): a -> b\nedges = [(5, 0), (5, 2), (2, 3), (4, 0), (4, 1), (3, 1)]\n# adjacency list for nodes\nadj = defaultdict(list)\n# indeg0 and outdeg0 arrays\nindeg0 = [True] * graph\noutdeg0 = [True] * graph\nfor edge in edges:\n    u, v = edge[0], edge[1]",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.possible-paths-scrap",
        "documentation": {}
    },
    {
        "label": "edges",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.possible-paths-scrap",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.possible-paths-scrap",
        "peekOfCode": "edges = [(5, 0), (5, 2), (2, 3), (4, 0), (4, 1), (3, 1)]\n# adjacency list for nodes\nadj = defaultdict(list)\n# indeg0 and outdeg0 arrays\nindeg0 = [True] * graph\noutdeg0 = [True] * graph\nfor edge in edges:\n    u, v = edge[0], edge[1]\n    # u -> v\n    adj[u].append(v)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.possible-paths-scrap",
        "documentation": {}
    },
    {
        "label": "adj",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.possible-paths-scrap",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.possible-paths-scrap",
        "peekOfCode": "adj = defaultdict(list)\n# indeg0 and outdeg0 arrays\nindeg0 = [True] * graph\noutdeg0 = [True] * graph\nfor edge in edges:\n    u, v = edge[0], edge[1]\n    # u -> v\n    adj[u].append(v)\n    # set indeg0[v] <- false\n    indeg0[v] = False",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.possible-paths-scrap",
        "documentation": {}
    },
    {
        "label": "indeg0",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.possible-paths-scrap",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.possible-paths-scrap",
        "peekOfCode": "indeg0 = [True] * graph\noutdeg0 = [True] * graph\nfor edge in edges:\n    u, v = edge[0], edge[1]\n    # u -> v\n    adj[u].append(v)\n    # set indeg0[v] <- false\n    indeg0[v] = False\n    # set outdeg0[u] <- false\n    outdeg0[u] = False",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.possible-paths-scrap",
        "documentation": {}
    },
    {
        "label": "outdeg0",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.possible-paths-scrap",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.possible-paths-scrap",
        "peekOfCode": "outdeg0 = [True] * graph\nfor edge in edges:\n    u, v = edge[0], edge[1]\n    # u -> v\n    adj[u].append(v)\n    # set indeg0[v] <- false\n    indeg0[v] = False\n    # set outdeg0[u] <- false\n    outdeg0[u] = False\n# print('All possible paths:')",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.possible-paths-scrap",
        "documentation": {}
    },
    {
        "label": "cmd",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.prac",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.prac",
        "peekOfCode": "cmd = \"\"\nwhile cmd != \"exit\":\n    cmd == input(\">>\")\n    if cmd == \"hello\" or cmd == \"hi\":\n        print(\"hello\")\n    elif cmd == \"goodbye\":\n        print(\"did you mean to exit?\")\n    elif cmd == \"exit\":\n        print(\"Thanks for using repl\")\n    else:",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.prac",
        "documentation": {}
    },
    {
        "label": "get_count",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.python_challenges",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.python_challenges",
        "peekOfCode": "def get_count(input_str):\n    # Your code here\n    vowel_counts = {}  # this is a dictionary to store the vowels\n    for vowel in \"aeiou\":\n        count = input_str.count(vowel)\n        vowel_counts[vowel] = count\n        print(vowel_counts)\n        counts = vowel_counts.values()\n    return sum(counts)\nprint(get_count(\"adela are mere\"))",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.python_challenges",
        "documentation": {}
    },
    {
        "label": "data_type",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.python_challenges",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.python_challenges",
        "peekOfCode": "def data_type(value):\n    # Your code here\n    date = datetime.date\n    if type(value) is int:\n        return \"integer\"\n    elif type(value) is str:\n        return \"string\"\n    elif type(value) is list:\n        return \"list\"\n    elif type(value) is dict:",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.python_challenges",
        "documentation": {}
    },
    {
        "label": "emotify",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.python_challenges",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.python_challenges",
        "peekOfCode": "def emotify(txt):\n    # Your code here\n    # ````another option```\n    # new = txt.split(' ')\n    # print(new)\n    # ````````````\n    new_list = list(txt)\n    # print(new_list)\n    sliced_list = new_list[8:]\n    emotion = \"\".join(sliced_list)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.python_challenges",
        "documentation": {}
    },
    {
        "label": "multiply_nums",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.python_challenges",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.python_challenges",
        "peekOfCode": "def multiply_nums(nums):\n    # Your code here\n    # nums = \"2, 4, 6\"\n    integer_list = []\n    new_list = list(nums)\n    sliced_list = new_list[0::3]\n    print(sliced_list)\n    for elem in sliced_list:\n        int_elem = int(elem)\n        integer_list.append(int_elem)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.python_challenges",
        "documentation": {}
    },
    {
        "label": "add_indexes",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.python_challenges",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.python_challenges",
        "peekOfCode": "def add_indexes(numbers):\n    # Your code here\n    new_list = []\n    for index, value in enumerate(numbers):\n        sum = index + value\n        new_list.append(sum)\n    return new_list\nenumerate(my_list)  # tuples of the index and the value of the list\nlist(enumerate(a_list))  # and makes it into an array\nfor item in enumerate(a_list):",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.python_challenges",
        "documentation": {}
    },
    {
        "label": "last",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.python_challenges",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.python_challenges",
        "peekOfCode": "def last(a, n):\n    # Your code here\n    if n > len(a):\n        return \"invalid\"\n    elif n == 0:\n        return []\n    else:\n        return a[-n:]  # the last 3/n elements\nprint(last([1, 2, 3, 4, 5], 1))\n\"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.python_challenges",
        "documentation": {}
    },
    {
        "label": "get_middle",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.python_challenges",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.python_challenges",
        "peekOfCode": "def get_middle(input_str):\n    # Your code here\n    return input_str[(len(input_str) - 1) // 2 : (len(input_str) + 2) // 2]\nprint(get_middle(\"test\"))\nprint(get_middle(\"testing\"))\nprint(get_middle(\"middle\"))\nprint(get_middle(\"A\"))\nprint(get_middle(\"beyoudre\"))\nprint(get_middle(\"you\"))\n# Given a string of words, return the length of the shortest word(s).",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.python_challenges",
        "documentation": {}
    },
    {
        "label": "csShortestWord",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.python_challenges",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.python_challenges",
        "peekOfCode": "def csShortestWord(input_str):\n    word = map(len, input_str.split())\n    return min(word)\n# Given an array of integers, return the sum of all the positive integers in the array.\n# Examples:\n# csSumOfPositive([1, 2, 3, -4, 5]) -> 1 + 2 + 3 + 5 = 11\n# csSumOfPositive([-3, -2, -1, 0, 1]) -> 1\n# csSumOfPositive([-3, -2]) -> 0\n# Notes:\n# If the input_arr does not contain any positive integers, the default sum should be 0.",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.python_challenges",
        "documentation": {}
    },
    {
        "label": "csSumOfPositive",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.python_challenges",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.python_challenges",
        "peekOfCode": "def csSumOfPositive(input_arr):\n    new_array = []\n    for num in input_arr:\n        if num > 0:\n            new_array.append(num)\n        else:\n            continue\n    return math.fsum(new_array)\n\"\"\"\nChallenge #10:",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.python_challenges",
        "documentation": {}
    },
    {
        "label": "max_and_min",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.python_challenges",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.python_challenges",
        "peekOfCode": "def max_and_min(input_str):\n    # Your code here\n    new_list = list(map(int, input_str.split()))\n    new_string = str(max(new_list)) + \" \" + str(min(new_list))\n    print(type(new_string))\n    return new_string\nprint(max_and_min(\"1 2 3 4 5\"))\nprint(max_and_min(\"1 2 -3 4 5\"))\nprint(max_and_min(\"1 9 3 4 -5\"))\n\"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.python_challenges",
        "documentation": {}
    },
    {
        "label": "get_discounts",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.python_challenges",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.python_challenges",
        "peekOfCode": "def get_discounts(nums, percentage):\n    # Your code here\n    new_percentage = list(percentage)\n    discount_str = int(new_percentage[0] + new_percentage[1])\n    discount = int(discount_str) / 100\n    print(discount)\n    d = []\n    for num in nums:\n        num = discount * num\n        s = str(num)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.python_challenges",
        "documentation": {}
    },
    {
        "label": "csOppositeReverse",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.python_exercises",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.python_exercises",
        "peekOfCode": "def csOppositeReverse(txt):\n    return txt.swapcase()[::-1]\nprint(csOppositeReverse(text))\n# puterea a doua a fiecarui digit intr un numar\ndef csSquareAllDigits(n):\n    return int(\"\".join(str(int(i) ** 2) for i in str(n)))\n# take out the vowels of a string\nimport re\ndef csRemoveTheVowels(txt):\n    # vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.python_exercises",
        "documentation": {}
    },
    {
        "label": "csSquareAllDigits",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.python_exercises",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.python_exercises",
        "peekOfCode": "def csSquareAllDigits(n):\n    return int(\"\".join(str(int(i) ** 2) for i in str(n)))\n# take out the vowels of a string\nimport re\ndef csRemoveTheVowels(txt):\n    # vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    # return \"\".join([l for l in txt if l not in vowels])\n    return re.sub(r\"[AEIOU]\", \"\", txt, flags=re.IGNORECASE)\nprint(csRemoveTheVowels(text))",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.python_exercises",
        "documentation": {}
    },
    {
        "label": "csRemoveTheVowels",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.python_exercises",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.python_exercises",
        "peekOfCode": "def csRemoveTheVowels(txt):\n    # vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    # return \"\".join([l for l in txt if l not in vowels])\n    return re.sub(r\"[AEIOU]\", \"\", txt, flags=re.IGNORECASE)\nprint(csRemoveTheVowels(text))",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.python_exercises",
        "documentation": {}
    },
    {
        "label": "text",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.python_exercises",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.python_exercises",
        "peekOfCode": "text = \"Adela, hi!\"\n# def csOppositeReverse(txt):\n#   for i in range(len(txt)):\n#     if re.match(\"^[a-z]+$\", txt[i]):\n#        txt[i] = txt[i].upper()\n#        return txt[::-1]\n#     elif re.match(\"^[A-Z]+$\", txt[i]):\n#       txt[i] = txt[i].lower()\n#       return txt[::-1]\ndef csOppositeReverse(txt):",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.python_exercises",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.qandstack (1)",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.qandstack (1)",
        "peekOfCode": "class Stack:\n    def __init__(self):\n        self.storage = []\n    def push(self, item):\n        \"\"\"\n    push the item on to the top of the stack\n    \"\"\"\n        self.storage.append(item)\n    def pop(self):\n        \"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.qandstack (1)",
        "documentation": {}
    },
    {
        "label": "Queue",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.qandstack (1)",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.qandstack (1)",
        "peekOfCode": "class Queue:\n    def __init__(self):\n        self.storage = []\n    def enqueue(self, item):\n        \"\"\"\n    enqueues the item in to the queue\n    \"\"\"\n        self.storage.append(item)\n    def dequeue(self):\n        \"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.qandstack (1)",
        "documentation": {}
    },
    {
        "label": "LLNode",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.qandstack (1)",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.qandstack (1)",
        "peekOfCode": "class LLNode:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n    def __repr__(self):\n        return f\"[{self.data}]\"\nclass LLQueue:\n    def __init__(self):\n        self.front = None\n        self.rear = None",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.qandstack (1)",
        "documentation": {}
    },
    {
        "label": "LLQueue",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.qandstack (1)",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.qandstack (1)",
        "peekOfCode": "class LLQueue:\n    def __init__(self):\n        self.front = None\n        self.rear = None\n    def enqueue(self, item):\n        new_node = LLNode(item)\n        if self.rear is None:\n            self.front = new_node\n            self.rear = new_node\n        else:",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.qandstack (1)",
        "documentation": {}
    },
    {
        "label": "LLNode",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.qandstack (1)",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.qandstack (1)",
        "peekOfCode": "class LLNode:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n    def __repr__(self):\n        return f\"[{self.data}]\"\nclass LLStack:\n    def __init__(self):\n        self.top = None\n    def push(self, data):",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.qandstack (1)",
        "documentation": {}
    },
    {
        "label": "LLStack",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.qandstack (1)",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.qandstack (1)",
        "peekOfCode": "class LLStack:\n    def __init__(self):\n        self.top = None\n    def push(self, data):\n        new_node = LLNode(data)\n        new_node.next = self.top\n        self.top = new_node\n    def pop(self):\n        if self.top is not None:\n            poped_node = self.top",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.qandstack (1)",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.qandstack (1)",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.qandstack (1)",
        "peekOfCode": "class Stack:\n    def __init__(self):\n        \"\"\"Initialize an empty stack\"\"\"\n        self.items = []\n    def push(self, item):\n        \"\"\"Push a new item onto the stack\"\"\"\n        self.items.append(item)\n    def pop(self):\n        \"\"\"Remove and return the last item\"\"\"\n        # If the stack is empty, return None",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.qandstack (1)",
        "documentation": {}
    },
    {
        "label": "MaxStack",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.qandstack (1)",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.qandstack (1)",
        "peekOfCode": "class MaxStack:\n    def __init__(self):\n        # Your code here\n        self.stack = Stack()\n        self.maxes_stack = Stack()\n    def push(self, item):\n        \"\"\"Add a new item onto the top of our stack.\"\"\"\n        # Your code here\n        self.stack.push(item)\n        if self.maxes_stack.peek() is None or item >= self.maxes_stack.peek():",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.qandstack (1)",
        "documentation": {}
    },
    {
        "label": "Song",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.qandstack (1)",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.qandstack (1)",
        "peekOfCode": "class Song:\n    def __init__(self, name, link):\n        self.name = name\n        self.link = link\n    def __repr__(self):\n        return f\"{self.name}: {self.link}\"\ns1 = Song(\"Bob The Builder\", \"http://www.gogle.co.uk/\")\ns2 = Song(\"Eclipse - Pink Floyd 1\", \"http://www.yashoo.com\")\ns3 = Song(\"Bob The Builder 2\", \"http://www.gogle.co.uk/\")\ns4 = Song(\"Eclipse - Pink Floyd 2\", \"http://www.yashoo.com\")",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.qandstack (1)",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.qandstack (1)",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.qandstack (1)",
        "peekOfCode": "class Stack:\n    def __init__(self):\n        self.data = []\n    def push(self, item):\n        self.data.append(item)\n    def pop(self):\n        if len(self.data) > 0:\n            return self.data.pop()\n        return \"The stack is empty\"\nclass QueueTwoStacks:",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.qandstack (1)",
        "documentation": {}
    },
    {
        "label": "QueueTwoStacks",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.qandstack (1)",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.qandstack (1)",
        "peekOfCode": "class QueueTwoStacks:\n    def __init__(self):\n        # Your code here\n        self.in_stack = Stack()\n        self.out_stack = Stack()\n    def enqueue(self, item):\n        # Your code here\n        self.in_stack.push(item)\n    def dequeue(self):\n        # Your code here",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.qandstack (1)",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.qandstack (1)",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.qandstack (1)",
        "peekOfCode": "s = Stack()\ns.push(10)\ns.push(20)\ns.push(30)\nl = []\nl.append(s.pop())\nl.append(s.pop())\nl.append(s.pop())\nprint(l)\n# lets write a simple queue",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.qandstack (1)",
        "documentation": {}
    },
    {
        "label": "l",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.qandstack (1)",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.qandstack (1)",
        "peekOfCode": "l = []\nl.append(s.pop())\nl.append(s.pop())\nl.append(s.pop())\nprint(l)\n# lets write a simple queue\nclass Queue:\n    def __init__(self):\n        self.storage = []\n    def enqueue(self, item):",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.qandstack (1)",
        "documentation": {}
    },
    {
        "label": "q",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.qandstack (1)",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.qandstack (1)",
        "peekOfCode": "q = Queue()\nq.enqueue(10)\nq.enqueue(20)\nq.enqueue(30)\nl2 = []\nl2.append(q.dequeue())\nl2.append(q.dequeue())\nl2.append(q.dequeue())\nprint(l2)\n# lets write a more performant queue",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.qandstack (1)",
        "documentation": {}
    },
    {
        "label": "l2",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.qandstack (1)",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.qandstack (1)",
        "peekOfCode": "l2 = []\nl2.append(q.dequeue())\nl2.append(q.dequeue())\nl2.append(q.dequeue())\nprint(l2)\n# lets write a more performant queue\n\"\"\"\n  F      R\n[10]-> [20]-> None\n\"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.qandstack (1)",
        "documentation": {}
    },
    {
        "label": "q",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.qandstack (1)",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.qandstack (1)",
        "peekOfCode": "q = LLQueue()\nq.enqueue(10)\nq.enqueue(20)\nq.enqueue(30)\nl2 = []\nl2.append(q.dequeue())\nl2.append(q.dequeue())\nl2.append(q.dequeue())\nl2.append(q.dequeue())\nprint(l2)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.qandstack (1)",
        "documentation": {}
    },
    {
        "label": "l2",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.qandstack (1)",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.qandstack (1)",
        "peekOfCode": "l2 = []\nl2.append(q.dequeue())\nl2.append(q.dequeue())\nl2.append(q.dequeue())\nl2.append(q.dequeue())\nprint(l2)\n\"\"\"# Break\n# CODE 8119\n\"\"\"\n# lets write a more performant stack",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.qandstack (1)",
        "documentation": {}
    },
    {
        "label": "ms",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.qandstack (1)",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.qandstack (1)",
        "peekOfCode": "ms = MaxStack()\nms.push(20)\nms.push(30)\nms.push(9)\nms.push(102)\nms.push(33)\nms.push(1)\nms.pop()\nms.pop()\nms.pop()",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.qandstack (1)",
        "documentation": {}
    },
    {
        "label": "s1",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.qandstack (1)",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.qandstack (1)",
        "peekOfCode": "s1 = Song(\"Bob The Builder\", \"http://www.gogle.co.uk/\")\ns2 = Song(\"Eclipse - Pink Floyd 1\", \"http://www.yashoo.com\")\ns3 = Song(\"Bob The Builder 2\", \"http://www.gogle.co.uk/\")\ns4 = Song(\"Eclipse - Pink Floyd 2\", \"http://www.yashoo.com\")\ns5 = Song(\"Bob The Builder 3\", \"http://www.gogle.co.uk/\")\ns6 = Song(\"Eclipse - Pink Floyd 3\", \"http://www.yashoo.com\")\ns7 = Song(\"Bob The Builder\", \"http://www.gogle.co.uk/\")\ns8 = Song(\"Eclipse - Pink Floyd Uncut\", \"http://www.yashoo.com\")\nclass Stack:\n    def __init__(self):",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.qandstack (1)",
        "documentation": {}
    },
    {
        "label": "s2",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.qandstack (1)",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.qandstack (1)",
        "peekOfCode": "s2 = Song(\"Eclipse - Pink Floyd 1\", \"http://www.yashoo.com\")\ns3 = Song(\"Bob The Builder 2\", \"http://www.gogle.co.uk/\")\ns4 = Song(\"Eclipse - Pink Floyd 2\", \"http://www.yashoo.com\")\ns5 = Song(\"Bob The Builder 3\", \"http://www.gogle.co.uk/\")\ns6 = Song(\"Eclipse - Pink Floyd 3\", \"http://www.yashoo.com\")\ns7 = Song(\"Bob The Builder\", \"http://www.gogle.co.uk/\")\ns8 = Song(\"Eclipse - Pink Floyd Uncut\", \"http://www.yashoo.com\")\nclass Stack:\n    def __init__(self):\n        self.data = []",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.qandstack (1)",
        "documentation": {}
    },
    {
        "label": "s3",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.qandstack (1)",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.qandstack (1)",
        "peekOfCode": "s3 = Song(\"Bob The Builder 2\", \"http://www.gogle.co.uk/\")\ns4 = Song(\"Eclipse - Pink Floyd 2\", \"http://www.yashoo.com\")\ns5 = Song(\"Bob The Builder 3\", \"http://www.gogle.co.uk/\")\ns6 = Song(\"Eclipse - Pink Floyd 3\", \"http://www.yashoo.com\")\ns7 = Song(\"Bob The Builder\", \"http://www.gogle.co.uk/\")\ns8 = Song(\"Eclipse - Pink Floyd Uncut\", \"http://www.yashoo.com\")\nclass Stack:\n    def __init__(self):\n        self.data = []\n    def push(self, item):",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.qandstack (1)",
        "documentation": {}
    },
    {
        "label": "s4",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.qandstack (1)",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.qandstack (1)",
        "peekOfCode": "s4 = Song(\"Eclipse - Pink Floyd 2\", \"http://www.yashoo.com\")\ns5 = Song(\"Bob The Builder 3\", \"http://www.gogle.co.uk/\")\ns6 = Song(\"Eclipse - Pink Floyd 3\", \"http://www.yashoo.com\")\ns7 = Song(\"Bob The Builder\", \"http://www.gogle.co.uk/\")\ns8 = Song(\"Eclipse - Pink Floyd Uncut\", \"http://www.yashoo.com\")\nclass Stack:\n    def __init__(self):\n        self.data = []\n    def push(self, item):\n        self.data.append(item)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.qandstack (1)",
        "documentation": {}
    },
    {
        "label": "s5",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.qandstack (1)",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.qandstack (1)",
        "peekOfCode": "s5 = Song(\"Bob The Builder 3\", \"http://www.gogle.co.uk/\")\ns6 = Song(\"Eclipse - Pink Floyd 3\", \"http://www.yashoo.com\")\ns7 = Song(\"Bob The Builder\", \"http://www.gogle.co.uk/\")\ns8 = Song(\"Eclipse - Pink Floyd Uncut\", \"http://www.yashoo.com\")\nclass Stack:\n    def __init__(self):\n        self.data = []\n    def push(self, item):\n        self.data.append(item)\n    def pop(self):",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.qandstack (1)",
        "documentation": {}
    },
    {
        "label": "s6",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.qandstack (1)",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.qandstack (1)",
        "peekOfCode": "s6 = Song(\"Eclipse - Pink Floyd 3\", \"http://www.yashoo.com\")\ns7 = Song(\"Bob The Builder\", \"http://www.gogle.co.uk/\")\ns8 = Song(\"Eclipse - Pink Floyd Uncut\", \"http://www.yashoo.com\")\nclass Stack:\n    def __init__(self):\n        self.data = []\n    def push(self, item):\n        self.data.append(item)\n    def pop(self):\n        if len(self.data) > 0:",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.qandstack (1)",
        "documentation": {}
    },
    {
        "label": "s7",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.qandstack (1)",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.qandstack (1)",
        "peekOfCode": "s7 = Song(\"Bob The Builder\", \"http://www.gogle.co.uk/\")\ns8 = Song(\"Eclipse - Pink Floyd Uncut\", \"http://www.yashoo.com\")\nclass Stack:\n    def __init__(self):\n        self.data = []\n    def push(self, item):\n        self.data.append(item)\n    def pop(self):\n        if len(self.data) > 0:\n            return self.data.pop()",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.qandstack (1)",
        "documentation": {}
    },
    {
        "label": "s8",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.qandstack (1)",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.qandstack (1)",
        "peekOfCode": "s8 = Song(\"Eclipse - Pink Floyd Uncut\", \"http://www.yashoo.com\")\nclass Stack:\n    def __init__(self):\n        self.data = []\n    def push(self, item):\n        self.data.append(item)\n    def pop(self):\n        if len(self.data) > 0:\n            return self.data.pop()\n        return \"The stack is empty\"",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.qandstack (1)",
        "documentation": {}
    },
    {
        "label": "q",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.qandstack (1)",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.qandstack (1)",
        "peekOfCode": "q = QueueTwoStacks()\nq.enqueue(s1)\nq.enqueue(s2)\nq.enqueue(s3)\nq.enqueue(s4)\nq.enqueue(s5)\nq.enqueue(s6)\nq.enqueue(s7)\nl3 = []\nl3.append(q.dequeue())",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.qandstack (1)",
        "documentation": {}
    },
    {
        "label": "l3",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.qandstack (1)",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.qandstack (1)",
        "peekOfCode": "l3 = []\nl3.append(q.dequeue())\nl3.append(q.dequeue())\nl3.append(q.dequeue())\nl3.append(q.dequeue())\nl3.append(q.dequeue())\nl3.append(q.dequeue())\nl3.append(q.dequeue())\nprint(l3)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.qandstack (1)",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.qandstack",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.qandstack",
        "peekOfCode": "class Stack:\n  def __init__(self):\n    self.storage = []\n  def push(self, item):\n    \"\"\"\n    push the item on to the top of the stack\n    \"\"\"\n    self.storage.append(item)\n  def pop(self):\n    \"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.qandstack",
        "documentation": {}
    },
    {
        "label": "Queue",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.qandstack",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.qandstack",
        "peekOfCode": "class Queue:\n    def __init__(self):\n        self.storage = []\n    def enqueue(self, item):\n        self.storage.append(item)\n    def pop(self):\n        if len(self.storage) > 0:\n            return self.storage.pop()\n        return \"The Stack is Empty\"\nclass Stack:",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.qandstack",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.qandstack",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.qandstack",
        "peekOfCode": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)\n    def pop(self):\n        if not self.items:\n            return None\n        return self.items.pop()\n    def peek(self):",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.qandstack",
        "documentation": {}
    },
    {
        "label": "MaxStack",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.qandstack",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.qandstack",
        "peekOfCode": "class MaxStack:\n    def __init__(self):\n    def push(self, item):\n    def pop(self):\n    def get_max(self):\nclass Stack:\n    def __init__(self):\n        self.data = []\n    def push(self, item):\n        self.data.append(item)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.qandstack",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.qandstack",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.qandstack",
        "peekOfCode": "class Stack:\n    def __init__(self):\n        self.data = []\n    def push(self, item):\n        self.data.append(item)\n    def pop(self):\n        if len(self.data) > 0:\n            return self.data.pop()\n        return \"The stack is empty\"\nclass QueueTwoStacks:",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.qandstack",
        "documentation": {}
    },
    {
        "label": "QueueTwoStacks",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.qandstack",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.qandstack",
        "peekOfCode": "class QueueTwoStacks:\n    def __init__(self):\n    def enqueue(self, item):\n    def dequeue(self):",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.qandstack",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.qandstack",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.qandstack",
        "peekOfCode": "s = Stack()\ns.push(10)\ns.push(20)\ns.push(30)\nl = []\nl.append(s.pop())\nl.append(s.pop())\nl.append(s.pop())\nprint(l)\nclass Queue:",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.qandstack",
        "documentation": {}
    },
    {
        "label": "l",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.qandstack",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.qandstack",
        "peekOfCode": "l = []\nl.append(s.pop())\nl.append(s.pop())\nl.append(s.pop())\nprint(l)\nclass Queue:\n    def __init__(self):\n        self.storage = []\n    def enqueue(self, item):\n        self.storage.append(item)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.qandstack",
        "documentation": {}
    },
    {
        "label": "csRaindrops",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.rainDrops",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.rainDrops",
        "peekOfCode": "def csRaindrops(number):\n    output_string = \"\"\n    has_3_factor = output_string + \"Pling\"\n    if number % 3 == 0:\n        output_string += \"Pling\"\n    elif number % 5 == 0:\n        output_string += \"Plang\"\n    elif number % 7 == 0:\n        output_string += \"Plong\"\n    elif output_string is \"\":",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.rainDrops",
        "documentation": {}
    },
    {
        "label": "csRemoveDuplicateWords",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.remove-dupes-from-sentence",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.remove-dupes-from-sentence",
        "peekOfCode": "def csRemoveDuplicateWords(input_str):\n    return \" \".join(dict.fromkeys(input_str.split()))\nprint(\n    csRemoveDuplicateWords(\n        \"alpha bravo bravo golf golf golf delta alpha bravo bravo golf golf golf delta\"\n    )\n)\nprint(csRemoveDuplicateWords(\"my dog is my dog is super smart\"))\nprint(csRemoveDuplicateWords(\"Your tests are broken broken broken broken broken\"))\nprint(",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.remove-dupes-from-sentence",
        "documentation": {}
    },
    {
        "label": "lib",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.remove-dupes-from-sentence",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.remove-dupes-from-sentence",
        "peekOfCode": "lib = BigO()\ncomplexity = lib.test(csRemoveDuplicateWords, \"random\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"sorted\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"reversed\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"partial\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"Ksorted\")",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.remove-dupes-from-sentence",
        "documentation": {}
    },
    {
        "label": "complexity",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.remove-dupes-from-sentence",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.remove-dupes-from-sentence",
        "peekOfCode": "complexity = lib.test(csRemoveDuplicateWords, \"random\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"sorted\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"reversed\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"partial\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"Ksorted\")",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.remove-dupes-from-sentence",
        "documentation": {}
    },
    {
        "label": "complexity",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.remove-dupes-from-sentence",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.remove-dupes-from-sentence",
        "peekOfCode": "complexity = lib.test(csRemoveDuplicateWords, \"sorted\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"reversed\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"partial\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"Ksorted\")",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.remove-dupes-from-sentence",
        "documentation": {}
    },
    {
        "label": "complexity",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.remove-dupes-from-sentence",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.remove-dupes-from-sentence",
        "peekOfCode": "complexity = lib.test(csRemoveDuplicateWords, \"reversed\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"partial\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"Ksorted\")",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.remove-dupes-from-sentence",
        "documentation": {}
    },
    {
        "label": "complexity",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.remove-dupes-from-sentence",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.remove-dupes-from-sentence",
        "peekOfCode": "complexity = lib.test(csRemoveDuplicateWords, \"partial\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"Ksorted\")",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.remove-dupes-from-sentence",
        "documentation": {}
    },
    {
        "label": "complexity",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.remove-dupes-from-sentence",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.remove-dupes-from-sentence",
        "peekOfCode": "complexity = lib.test(csRemoveDuplicateWords, \"Ksorted\")",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.remove-dupes-from-sentence",
        "documentation": {}
    },
    {
        "label": "removeKFromList",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.removeKFromList",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.removeKFromList",
        "peekOfCode": "def removeKFromList(l, k):\n    if l == None:\n        return l\n    while l != None and l.value == k:\n        l = l.next\n    n = l\n    while n != None and n.next != None:\n        if n.next.value == k:\n            n.next = n.next.next\n        else:",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.removeKFromList",
        "documentation": {}
    },
    {
        "label": "repeat_it",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.repeat_it",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.repeat_it",
        "peekOfCode": "def repeat_it(input_str):\n    # Your code here\n    new_list = list(input_str)\n    empty = []\n    for index, letter in enumerate(new_list):\n        letter = \"-\" + letter.upper() + (index * letter).lower()\n        empty.append(letter)\n        new_str = \"\".join(empty)\n        transformed = list(new_str)\n        good_string = transformed[1:]",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.repeat_it",
        "documentation": {}
    },
    {
        "label": "csWhereIsBob",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.return-index-of-string-in-list",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.return-index-of-string-in-list",
        "peekOfCode": "def csWhereIsBob(names):\n    bob = \"Bob\"\n    if bob in names:\n        return names.index(\"Bob\")\n    else:\n        return -1",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.return-index-of-string-in-list",
        "documentation": {}
    },
    {
        "label": "csReverseString",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.rev-string",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.rev-string",
        "peekOfCode": "def csReverseString(chars):\n    rev = chars[::-1]\n    print(rev)\n    return rev\n# def csReverseString2(chars):\n#     new_string = ''\n#     index = len(chars)\n#     while index:\n#         index -= 1                    # index = index - 1\n#         new_string += chars[index]  # new_string = new_string + character",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.rev-string",
        "documentation": {}
    },
    {
        "label": "csReverseString2",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.rev-string",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.rev-string",
        "peekOfCode": "def csReverseString2(chars):\n    new_string = \"\"\n    index = len(chars)\n    while index:\n        index -= 1  # index = index - 1\n        new_string += chars[index]  # new_string = new_string + character\n    return new_string\nprint(csReverseString2(\"helloworld\"))\n# Input:\n# chars:",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.rev-string",
        "documentation": {}
    },
    {
        "label": "csReverseString",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.reverse-string",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.reverse-string",
        "peekOfCode": "def csReverseString(chars):\n    rev = chars[::-1]\n    print(rev)\n    return rev",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.reverse-string",
        "documentation": {}
    },
    {
        "label": "csReverseIntegerBits",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.reverseIntegerBits",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.reverseIntegerBits",
        "peekOfCode": "def csReverseIntegerBits(n):\n    reversed_num = 0\n    while n > 0:\n        reversed_num = reversed_num << 1\n        if n & 1 == 1:\n            reversed_num = reversed_num ^ 1\n        n = n >> 1\n    return reversed_num",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.reverseIntegerBits",
        "documentation": {}
    },
    {
        "label": "reverseLinkedList",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.reverseLinkedList",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.reverseLinkedList",
        "peekOfCode": "def reverseLinkedList(l):\n    prev = None\n    current = l\n    while current:\n        next = current.next\n        current.next = prev\n        prev = current\n        current = next\n    return prev",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.reverseLinkedList",
        "documentation": {}
    },
    {
        "label": "reverseList",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.reverseNodesInKGroups",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.reverseNodesInKGroups",
        "peekOfCode": "def reverseList(head, tail):\n    prev = None\n    while prev != tail:\n        prev, prev.next, head = head, prev, head.next\n    return prev\ndef reverseNodesInKGroups(l, k):\n    if k < 2:\n        return l\n    p = ListNode(-1)\n    p.next = l",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.reverseNodesInKGroups",
        "documentation": {}
    },
    {
        "label": "reverseNodesInKGroups",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.reverseNodesInKGroups",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.reverseNodesInKGroups",
        "peekOfCode": "def reverseNodesInKGroups(l, k):\n    if k < 2:\n        return l\n    p = ListNode(-1)\n    p.next = l\n    ret = p\n    while True:\n        flag = True\n        tmp = p\n        for i in range(k):",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.reverseNodesInKGroups",
        "documentation": {}
    },
    {
        "label": "reverseSentence",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.reverseSentence",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.reverseSentence",
        "peekOfCode": "def reverseSentence(sentence):\n    list = sentence.split(\" \")\n    i, out = list.__len__() - 1, \"\"\n    while i >= 0:\n        out += list[i] + \" \"\n        i -= 1\n    return out[0:-1]",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.reverseSentence",
        "documentation": {}
    },
    {
        "label": "reverse_sentence",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.reverse_string",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.reverse_string",
        "peekOfCode": "def reverse_sentence(sentence):\n    arr = [c for c in sentence]  # or just arr = list(sentence)\n    start = 0\n    end = len(arr) - 1\n    while start < end:\n        # reverse the array from the start index to the end index by\n        # swaping each char with the pair from the other part of the array\n        swap(arr, start, end)\n        start += 1\n        end -= 1",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.reverse_string",
        "documentation": {}
    },
    {
        "label": "swap",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.reverse_string",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.reverse_string",
        "peekOfCode": "def swap(arr, i, j):\n    # swapping two elements from a same array\n    arr[i], arr[j] = arr[j], arr[i]\n    \"\"\"same as\n    temp = arr[i]\n    arr[i] = arr[j]\n    arr[j] = temp\n    \"\"\"\n###########\n# Testing #",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.reverse_string",
        "documentation": {}
    },
    {
        "label": "rotatedRectSum",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.rotatedRectSum",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.rotatedRectSum",
        "peekOfCode": "def rotatedRectSum(matrix, a, b):",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.rotatedRectSum",
        "documentation": {}
    },
    {
        "label": "rotateImage",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.rotateImage",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.rotateImage",
        "peekOfCode": "def rotateImage(a):\n    w = len(a)\n    h = w\n    img = [0] * h\n    for col in range(h):\n        img_row = [0] * w\n        for row in range(w):\n            img_row[h - row - 1] = a[row][col]\n        img[col] = img_row\n    return img",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.rotateImage",
        "documentation": {}
    },
    {
        "label": "schoolGroups",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.schoolGroups",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.schoolGroups",
        "peekOfCode": "def schoolGroups(years, groups):\n    alphabet = list(map(chr, range(97, 123)))\n    emp_list = []\n    for year in range(1, years + 1):\n        for group in range(0, groups):\n            emp_list.append(f\"{year}{alphabet[group]}\")\n    # print(emp_list)\n    return \", \".join(emp_list)\nprint(schoolGroups(1, 4))\nprint(schoolGroups(6, 7))",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.schoolGroups",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.scrap (2)",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.scrap (2)",
        "peekOfCode": "class ListNode(object):\n    def __init__(self, x):\n        self.value = x\n        self.next = None\ndef condense_linked_list(node):\n    root = ListNode(0)\n    root.next = node.next\n    p1 = node.next\n    if p1 is None:\n        return root.next",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.scrap (2)",
        "documentation": {}
    },
    {
        "label": "condense_linked_list",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.scrap (2)",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.scrap (2)",
        "peekOfCode": "def condense_linked_list(node):\n    root = ListNode(0)\n    root.next = node.next\n    p1 = node.next\n    if p1 is None:\n        return root.next\n    p = p1.next\n    if p is None:\n        return root.next\n    while p:",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.scrap (2)",
        "documentation": {}
    },
    {
        "label": "uncover_spy",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.scrap (3)",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.scrap (3)",
        "peekOfCode": "def uncover_spy(n, trust):\n    degrees = [0] * n\n    for i, j in trust:\n        degrees[i - 1] -= 1\n        degrees[j - 1] += 1\n    for i in range(len(degrees)):\n        if degrees[i] == n - 1:\n            return i + 1\n    return -1",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.scrap (3)",
        "documentation": {}
    },
    {
        "label": "Tree",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.scrap (4)",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.scrap (4)",
        "peekOfCode": "class Tree(object):\n    def __init__(self, x):\n        self.value = x\n        self.left = None\n        self.right = None\ndef csBSTRangeSum(root, lower, upper):\n    if not root:\n        return 0\n    res = 0\n    if lower <= root.value <= upper:",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.scrap (4)",
        "documentation": {}
    },
    {
        "label": "csBSTRangeSum",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.scrap (4)",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.scrap (4)",
        "peekOfCode": "def csBSTRangeSum(root, lower, upper):\n    if not root:\n        return 0\n    res = 0\n    if lower <= root.value <= upper:\n        res += root.value\n        res += csBSTRangeSum(root.left, lower, upper)\n        res += csBSTRangeSum(root.right, lower, upper)\n    elif root.value < lower:\n        res += csBSTRangeSum(root.right, lower, upper)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.scrap (4)",
        "documentation": {}
    },
    {
        "label": "top_k_frequent",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.scrap (5)",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.scrap (5)",
        "peekOfCode": "def top_k_frequent(words, k):\n    # Initializing a dictionary\n    d = dict()\n    # Iterating through the wordsay\n    for i in words:\n        # If the element is not in\n        # the dictionary, adding it\n        # with the frequency as 1\n        if i not in d:\n            d[i] = 1",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.scrap (5)",
        "documentation": {}
    },
    {
        "label": "K",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.scrap (5)",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.scrap (5)",
        "peekOfCode": "K = 3\nprint(top_k_frequent(words, K))",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.scrap (5)",
        "documentation": {}
    },
    {
        "label": "languages",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.scrap (6)",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.scrap (6)",
        "peekOfCode": "languages = [\"Java\", \"Python\", \"JavaScript\"]\nversions = [14, 3, 6]\nresult = zip(languages, versions)\nprint(list(result))",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.scrap (6)",
        "documentation": {}
    },
    {
        "label": "versions",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.scrap (6)",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.scrap (6)",
        "peekOfCode": "versions = [14, 3, 6]\nresult = zip(languages, versions)\nprint(list(result))",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.scrap (6)",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.scrap (6)",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.scrap (6)",
        "peekOfCode": "result = zip(languages, versions)\nprint(list(result))",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.scrap (6)",
        "documentation": {}
    },
    {
        "label": "csRemoveDuplicateWords",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.scrap",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.scrap",
        "peekOfCode": "def csRemoveDuplicateWords(input_str):\n    return \" \".join(dict.fromkeys(input_str.split()))\nprint(\n    csRemoveDuplicateWords(\n        \"alpha bravo bravo golf golf golf delta alpha bravo bravo golf golf golf delta\"\n    )\n)\nprint(csRemoveDuplicateWords(\"my dog is my dog is super smart\"))\nprint(csRemoveDuplicateWords(\"Your tests are broken broken broken broken broken\"))\nprint(",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.scrap",
        "documentation": {}
    },
    {
        "label": "lib",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.scrap",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.scrap",
        "peekOfCode": "lib = BigO()\ncomplexity = lib.test(csRemoveDuplicateWords, \"random\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"sorted\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"reversed\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"partial\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"Ksorted\")",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.scrap",
        "documentation": {}
    },
    {
        "label": "complexity",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.scrap",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.scrap",
        "peekOfCode": "complexity = lib.test(csRemoveDuplicateWords, \"random\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"sorted\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"reversed\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"partial\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"Ksorted\")",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.scrap",
        "documentation": {}
    },
    {
        "label": "complexity",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.scrap",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.scrap",
        "peekOfCode": "complexity = lib.test(csRemoveDuplicateWords, \"sorted\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"reversed\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"partial\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"Ksorted\")",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.scrap",
        "documentation": {}
    },
    {
        "label": "complexity",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.scrap",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.scrap",
        "peekOfCode": "complexity = lib.test(csRemoveDuplicateWords, \"reversed\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"partial\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"Ksorted\")",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.scrap",
        "documentation": {}
    },
    {
        "label": "complexity",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.scrap",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.scrap",
        "peekOfCode": "complexity = lib.test(csRemoveDuplicateWords, \"partial\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"Ksorted\")",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.scrap",
        "documentation": {}
    },
    {
        "label": "complexity",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.scrap",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.scrap",
        "peekOfCode": "complexity = lib.test(csRemoveDuplicateWords, \"Ksorted\")",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.scrap",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.scrap2 (2)",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.scrap2 (2)",
        "peekOfCode": "class ListNode(object):\n    def __init__(self, x):\n        self.value = x\n        self.next = None\ndef condense_linked_list(node):\n    root = ListNode(node.value)\n    root.next = node\n    p1 = root\n    if p1 is None:\n        return root.next",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.scrap2 (2)",
        "documentation": {}
    },
    {
        "label": "condense_linked_list",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.scrap2 (2)",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.scrap2 (2)",
        "peekOfCode": "def condense_linked_list(node):\n    root = ListNode(node.value)\n    root.next = node\n    p1 = root\n    if p1 is None:\n        return root.next\n    p = p1.next\n    if p is None:\n        return root.next\n    while p:",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.scrap2 (2)",
        "documentation": {}
    },
    {
        "label": "top_k_frequent",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.scrap2 (3)",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.scrap2 (3)",
        "peekOfCode": "def top_k_frequent(words, k):\n    d = dict()\n    for i in words:\n        if i not in d:\n            d[i] = 1\n        else:\n            temp = d[i]\n            temp += 1\n            d[i] = temp\n    if len(d) < k:",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.scrap2 (3)",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.scrap2 (3)",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.scrap2 (3)",
        "peekOfCode": "k = 3\nprint(top_k_frequent(words, k))",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.scrap2 (3)",
        "documentation": {}
    },
    {
        "label": "csRemoveDuplicateWords",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.scrap2",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.scrap2",
        "peekOfCode": "def csRemoveDuplicateWords(input_str):\n    return \" \".join(dict.fromkeys(input_str.split()))\nprint(\n    csRemoveDuplicateWords(\n        \"alpha bravo bravo golf golf golf delta alpha bravo bravo golf golf golf delta\"\n    )\n)\nprint(csRemoveDuplicateWords(\"my dog is my dog is super smart\"))\nprint(csRemoveDuplicateWords(\"Your tests are broken broken broken broken broken\"))",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.scrap2",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.scrap3 (2)",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.scrap3 (2)",
        "peekOfCode": "class ListNode(object):\n  def __init__(self, x):\n    self.value = x\n    self.next = None\ndef condense_linked_list(node):",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.scrap3 (2)",
        "documentation": {}
    },
    {
        "label": "condense_linked_list",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.scrap3 (2)",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.scrap3 (2)",
        "peekOfCode": "def condense_linked_list(node):",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.scrap3 (2)",
        "documentation": {}
    },
    {
        "label": "csRemoveDuplicateWords",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.scrap3",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.scrap3",
        "peekOfCode": "def csRemoveDuplicateWords(input_str):\n    return \" \".join(dict.fromkeys(input_str.split()))\nprint(\n    csRemoveDuplicateWords(\n        \"alpha bravo bravo golf golf golf delta alpha bravo bravo golf golf golf delta\"\n    )\n)\nprint(csRemoveDuplicateWords(\"my dog is my dog is super smart\"))\nprint(csRemoveDuplicateWords(\"Your tests are broken broken broken broken broken\"))\nprint(",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.scrap3",
        "documentation": {}
    },
    {
        "label": "lib",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.scrap3",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.scrap3",
        "peekOfCode": "lib = BigO()\ncomplexity = lib.test(csRemoveDuplicateWords, \"random\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"sorted\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"reversed\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"partial\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"Ksorted\")",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.scrap3",
        "documentation": {}
    },
    {
        "label": "complexity",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.scrap3",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.scrap3",
        "peekOfCode": "complexity = lib.test(csRemoveDuplicateWords, \"random\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"sorted\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"reversed\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"partial\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"Ksorted\")",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.scrap3",
        "documentation": {}
    },
    {
        "label": "complexity",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.scrap3",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.scrap3",
        "peekOfCode": "complexity = lib.test(csRemoveDuplicateWords, \"sorted\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"reversed\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"partial\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"Ksorted\")",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.scrap3",
        "documentation": {}
    },
    {
        "label": "complexity",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.scrap3",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.scrap3",
        "peekOfCode": "complexity = lib.test(csRemoveDuplicateWords, \"reversed\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"partial\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"Ksorted\")",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.scrap3",
        "documentation": {}
    },
    {
        "label": "complexity",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.scrap3",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.scrap3",
        "peekOfCode": "complexity = lib.test(csRemoveDuplicateWords, \"partial\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"Ksorted\")",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.scrap3",
        "documentation": {}
    },
    {
        "label": "complexity",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.scrap3",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.scrap3",
        "peekOfCode": "complexity = lib.test(csRemoveDuplicateWords, \"Ksorted\")",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.scrap3",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.scrap4",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.scrap4",
        "peekOfCode": "class ListNode(object):\n  def __init__(self, x):\n    self.value = x\n    self.next = None\ndef condense_linked_list(node):",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.scrap4",
        "documentation": {}
    },
    {
        "label": "condense_linked_list",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.scrap4",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.scrap4",
        "peekOfCode": "def condense_linked_list(node):",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.scrap4",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.scrap5",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.scrap5",
        "peekOfCode": "class ListNode(object):\n    def __init__(self, x):\n        self.value = x\n        self.next = None\ndef condense_linked_list(node):\n    ptr1 = None\n    ptr2 = None\n    dup = None\n    ptr1 = node\n    # Pick elements one by one",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.scrap5",
        "documentation": {}
    },
    {
        "label": "condense_linked_list",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.scrap5",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.scrap5",
        "peekOfCode": "def condense_linked_list(node):\n    ptr1 = None\n    ptr2 = None\n    dup = None\n    ptr1 = node\n    # Pick elements one by one\n    while ptr1 != None and ptr1.next != None:\n        ptr2 = ptr1\n        # Compare the picked element with rest\n        # of the elements",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.scrap5",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.script (2)",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.script (2)",
        "peekOfCode": "class Node:\n    def __init__(self, data=None, next=None):\n        self.data = data\n        self.next = next\n# Helper function to print a given linked list\ndef printList(head):\n    ptr = head\n    while ptr:\n        print(ptr.data, end=\" —> \")\n        ptr = ptr.next",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.script (2)",
        "documentation": {}
    },
    {
        "label": "printList",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.script (2)",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.script (2)",
        "peekOfCode": "def printList(head):\n    ptr = head\n    while ptr:\n        print(ptr.data, end=\" —> \")\n        ptr = ptr.next\n    print(\"None\")\n# Function to insert a given node at its correct sorted position into\n# a given list sorted in increasing order\ndef sortedInsert(head, newNode):\n    # special case for the head end",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.script (2)",
        "documentation": {}
    },
    {
        "label": "sortedInsert",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.script (2)",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.script (2)",
        "peekOfCode": "def sortedInsert(head, newNode):\n    # special case for the head end\n    if head is None or head.data >= newNode.data:\n        newNode.next = head\n        head = newNode\n        return head\n    # Locate the node before the poof insertion\n    current = head\n    while current.next and current.next.data < newNode.data:\n        current = current.next",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.script (2)",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.script",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.script",
        "peekOfCode": "class Node:\n    def __init__(self, data=None, next=None):\n        self.data = data\n        self.next = next\n# Helper function to print a given linked list\ndef printList(head):\n    ptr = head\n    while ptr:\n        print(ptr.data, end=\" —> \")\n        ptr = ptr.next",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.script",
        "documentation": {}
    },
    {
        "label": "printList",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.script",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.script",
        "peekOfCode": "def printList(head):\n    ptr = head\n    while ptr:\n        print(ptr.data, end=\" —> \")\n        ptr = ptr.next\n    print(\"None\")\n# Function to insert a given node at its correct sorted position into\n# a given list sorted in increasing order\ndef sortedInsert(head, newNode):\n    # special case for the head end",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.script",
        "documentation": {}
    },
    {
        "label": "sortedInsert",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.script",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.script",
        "peekOfCode": "def sortedInsert(head, newNode):\n    # special case for the head end\n    if head is None or head.data >= newNode.data:\n        newNode.next = head\n        head = newNode\n        return head\n    # Locate the node before the poof insertion\n    current = head\n    while current.next and current.next.data < newNode.data:\n        current = current.next",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.script",
        "documentation": {}
    },
    {
        "label": "linear_search",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.searching",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.searching",
        "peekOfCode": "def linear_search(data, target):\n    for i in range(len(data)):\n        if data[i] == target:\n            return (i, data[i])\n    return -1\nprint(linear_search(data, target))\n\"\"\"\nSearching (Binary)\n\"\"\"\n# 0 (log(n))",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.searching",
        "documentation": {}
    },
    {
        "label": "binary_search",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.searching",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.searching",
        "peekOfCode": "def binary_search(data, target):\n    begin = 0\n    end = len(data) - 1\n    while not end < begin:\n        guess_index = (end + begin) // 2\n        if data[guess_index] == target:\n            return (guess_index, target)\n        elif data[guess_index] < target:\n            begin = guess_index + 1\n        else:",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.searching",
        "documentation": {}
    },
    {
        "label": "while_rec",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.searching",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.searching",
        "peekOfCode": "def while_rec(n):  # O(n)\n    if not n > 0:  # O(1)\n        return\n    print(n)  # O(1)\n    while_rec(n - 1)  # O(1)\nstart = time.time()\nwhile_rec(n)\nend = time.time()\nprint(f\"func runtime = {end - start}\")\n# memoization",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.searching",
        "documentation": {}
    },
    {
        "label": "memo_func",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.searching",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.searching",
        "peekOfCode": "def memo_func(f):\n    cache = {}\n    def memo_helper(n):\n        if n not in cache:\n            cache[n] = f(n)\n        return cache[n]\n    return memo_helper\n\"\"\"\n[ 0, 1, 1, 2, 3, 5, 8]\nfib(n) => fib(n - 1) + fib(n - 2)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.searching",
        "documentation": {}
    },
    {
        "label": "fib",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.searching",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.searching",
        "peekOfCode": "def fib(n):\n    if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n@lru_cache(maxsize=1000000)\ndef fib2(n):\n    if n <= 1:\n        return n\n    else:",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.searching",
        "documentation": {}
    },
    {
        "label": "fib2",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.searching",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.searching",
        "peekOfCode": "def fib2(n):\n    if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n# fib(46)\n# memfib = memo_func(fib)\n# memfib(46)\nfib(460)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.searching",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.searching",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.searching",
        "peekOfCode": "data = [12, 23, 1, 34, 56, 100]\ntarget = 10\n# starting at the beginning of the data\n# take each value and compare that value to a target value\n# if they are equal return the index of the target value or return the target value\n# if we reach the end of the data, without finding the target then we can return -1\ndef linear_search(data, target):\n    for i in range(len(data)):\n        if data[i] == target:\n            return (i, data[i])",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.searching",
        "documentation": {}
    },
    {
        "label": "target",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.searching",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.searching",
        "peekOfCode": "target = 10\n# starting at the beginning of the data\n# take each value and compare that value to a target value\n# if they are equal return the index of the target value or return the target value\n# if we reach the end of the data, without finding the target then we can return -1\ndef linear_search(data, target):\n    for i in range(len(data)):\n        if data[i] == target:\n            return (i, data[i])\n    return -1",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.searching",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.searching",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.searching",
        "peekOfCode": "data = [12, 23, 45, 67, 99, 200]\ntarget = 99\n# keep track of begin and end\n# while the begin and end do not overlap\n# create a guess index in the middle of the view of data\n# check if the data at the guess index is equal to the target\n# return (guess_index, guess)\n# otherwise is the data at the guess index less than the target\n# set the begin to the guess_index + 1\n# otherwise",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.searching",
        "documentation": {}
    },
    {
        "label": "target",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.searching",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.searching",
        "peekOfCode": "target = 99\n# keep track of begin and end\n# while the begin and end do not overlap\n# create a guess index in the middle of the view of data\n# check if the data at the guess index is equal to the target\n# return (guess_index, guess)\n# otherwise is the data at the guess index less than the target\n# set the begin to the guess_index + 1\n# otherwise\n# set end to the guess_index - 1",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.searching",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.searching",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.searching",
        "peekOfCode": "n = 10\ns = []\nstart = time.time()\nwhile n > 0:  # O(n)\n    print(n)\n    n -= 1\nend = time.time()\nprint(f\"loop runtime = {end - start}\")\n\"\"\"\nRecursive Function",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.searching",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.searching",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.searching",
        "peekOfCode": "s = []\nstart = time.time()\nwhile n > 0:  # O(n)\n    print(n)\n    n -= 1\nend = time.time()\nprint(f\"loop runtime = {end - start}\")\n\"\"\"\nRecursive Function\n\"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.searching",
        "documentation": {}
    },
    {
        "label": "start",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.searching",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.searching",
        "peekOfCode": "start = time.time()\nwhile n > 0:  # O(n)\n    print(n)\n    n -= 1\nend = time.time()\nprint(f\"loop runtime = {end - start}\")\n\"\"\"\nRecursive Function\n\"\"\"\nimport time",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.searching",
        "documentation": {}
    },
    {
        "label": "end",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.searching",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.searching",
        "peekOfCode": "end = time.time()\nprint(f\"loop runtime = {end - start}\")\n\"\"\"\nRecursive Function\n\"\"\"\nimport time\nn = 10\ndef while_rec(n):  # O(n)\n    if not n > 0:  # O(1)\n        return",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.searching",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.searching",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.searching",
        "peekOfCode": "n = 10\ndef while_rec(n):  # O(n)\n    if not n > 0:  # O(1)\n        return\n    print(n)  # O(1)\n    while_rec(n - 1)  # O(1)\nstart = time.time()\nwhile_rec(n)\nend = time.time()\nprint(f\"func runtime = {end - start}\")",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.searching",
        "documentation": {}
    },
    {
        "label": "start",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.searching",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.searching",
        "peekOfCode": "start = time.time()\nwhile_rec(n)\nend = time.time()\nprint(f\"func runtime = {end - start}\")\n# memoization\n# generic memo_func\ndef memo_func(f):\n    cache = {}\n    def memo_helper(n):\n        if n not in cache:",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.searching",
        "documentation": {}
    },
    {
        "label": "end",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.searching",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.searching",
        "peekOfCode": "end = time.time()\nprint(f\"func runtime = {end - start}\")\n# memoization\n# generic memo_func\ndef memo_func(f):\n    cache = {}\n    def memo_helper(n):\n        if n not in cache:\n            cache[n] = f(n)\n        return cache[n]",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.searching",
        "documentation": {}
    },
    {
        "label": "binarySearch",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.sorted-scrap",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.sorted-scrap",
        "peekOfCode": "def binarySearch(arr, key):\n    min = 0\n    max = len(arr) - 1\n    while not max < min:\n        guess = (max + min) // 2\n        if key == arr[guess]:\n            return arr[guess]\n        elif key > arr[guess]:\n            min = guess + 1\n        else:",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.sorted-scrap",
        "documentation": {}
    },
    {
        "label": "findValueSortedShiftedArray",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.sorted-scrap",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.sorted-scrap",
        "peekOfCode": "def findValueSortedShiftedArray(nums, target):\n    pivot = 3\n    if nums[pivot] == target:\n        return pivot\n    if nums[pivot] >= target:\n        value = binarySearch(nums[pivot + 1 :], target)\n        print(value)\n        if value == target:\n            return nums.index(value)\n##-------------------------------------------------------------------------------------------",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.sorted-scrap",
        "documentation": {}
    },
    {
        "label": "nums1",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.sorted-scrap",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.sorted-scrap",
        "peekOfCode": "nums1 = [4, 5, 6, 7, 0, 1, 2]\ntarget1 = 3\nprint(findValueSortedShiftedArray(nums1, target1))\nprint(\"---------------nums = [4,5,6,7,0,1,2], target = 3--------------------------\")\nprint(findValueSortedShiftedArray([4, 5, 6, 7, 0, 1, 2], 3))\nprint(\n    \"---------------nums = [1, 3, 5, 6]-------target = 5----------------------------------\"\n)\nnums = [1, 3, 5, 6]\ntarget = 5",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.sorted-scrap",
        "documentation": {}
    },
    {
        "label": "target1",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.sorted-scrap",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.sorted-scrap",
        "peekOfCode": "target1 = 3\nprint(findValueSortedShiftedArray(nums1, target1))\nprint(\"---------------nums = [4,5,6,7,0,1,2], target = 3--------------------------\")\nprint(findValueSortedShiftedArray([4, 5, 6, 7, 0, 1, 2], 3))\nprint(\n    \"---------------nums = [1, 3, 5, 6]-------target = 5----------------------------------\"\n)\nnums = [1, 3, 5, 6]\ntarget = 5\nprint(findValueSortedShiftedArray(nums, target))",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.sorted-scrap",
        "documentation": {}
    },
    {
        "label": "print(\"---------------nums",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.sorted-scrap",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.sorted-scrap",
        "peekOfCode": "print(\"---------------nums = [4,5,6,7,0,1,2], target = 3--------------------------\")\nprint(findValueSortedShiftedArray([4, 5, 6, 7, 0, 1, 2], 3))\nprint(\n    \"---------------nums = [1, 3, 5, 6]-------target = 5----------------------------------\"\n)\nnums = [1, 3, 5, 6]\ntarget = 5\nprint(findValueSortedShiftedArray(nums, target))",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.sorted-scrap",
        "documentation": {}
    },
    {
        "label": "nums",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.sorted-scrap",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.sorted-scrap",
        "peekOfCode": "nums = [1, 3, 5, 6]\ntarget = 5\nprint(findValueSortedShiftedArray(nums, target))",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.sorted-scrap",
        "documentation": {}
    },
    {
        "label": "target",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.sorted-scrap",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.sorted-scrap",
        "peekOfCode": "target = 5\nprint(findValueSortedShiftedArray(nums, target))",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.sorted-scrap",
        "documentation": {}
    },
    {
        "label": "searchInsert",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.sorted-scrap2",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.sorted-scrap2",
        "peekOfCode": "def searchInsert(nums, target):\n    try:\n        return nums.index(target)\n    except IndexError:  # best to use explicit except\n        for index, value in enumerate(nums):  # more pythonic than range(len(nums))\n            if value > target:\n                return index\n        return len(nums)\nprint(searchInsert([1, 3, 5, 6], 10))",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.sorted-scrap2",
        "documentation": {}
    },
    {
        "label": "binarySearch",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.sortedShifted",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.sortedShifted",
        "peekOfCode": "def binarySearch(arr, key):\n    min = 0\n    max = len(arr) - 1\n    while not max < min:\n        guess = (max + min) // 2\n        if key == arr[guess]:\n            return arr[guess]\n        elif key > arr[guess]:\n            min = guess + 1\n        else:",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.sortedShifted",
        "documentation": {}
    },
    {
        "label": "findValueSortedShiftedArray",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.sortedShifted",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.sortedShifted",
        "peekOfCode": "def findValueSortedShiftedArray(nums, target):\n    pivot = 3\n    if nums[pivot] == target:\n        return pivot\n    if nums[pivot] >= target:\n        value = binarySearch(nums[pivot + 1 :], target)\n        print(value)\n        if value == target:\n            return nums.index(value)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.sortedShifted",
        "documentation": {}
    },
    {
        "label": "streetLights",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.streetLights",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.streetLights",
        "peekOfCode": "def streetLights(n, lights):",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.streetLights",
        "documentation": {}
    },
    {
        "label": "isDifferByOneChar",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.stringsRearrangement",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.stringsRearrangement",
        "peekOfCode": "def isDifferByOneChar(str1, str2):\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count == 1\ndef stringsRearrangement(inputArray):\n    possiblePermutations = itertools.permutations(inputArray)\n    for per in possiblePermutations:\n        allMatch = True",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.stringsRearrangement",
        "documentation": {}
    },
    {
        "label": "stringsRearrangement",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.stringsRearrangement",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.stringsRearrangement",
        "peekOfCode": "def stringsRearrangement(inputArray):\n    possiblePermutations = itertools.permutations(inputArray)\n    for per in possiblePermutations:\n        allMatch = True\n        for i in range(len(per) - 1):\n            if not isDifferByOneChar(per[i], per[i + 1]):\n                allMatch = False\n                break\n        if allMatch:\n            return True",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.stringsRearrangement",
        "documentation": {}
    },
    {
        "label": "sudoku2",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.sudoku2",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.sudoku2",
        "peekOfCode": "def sudoku2(grid):\n    # test row\n    tab = [[False for col in range(9)] for row in range(9)]\n    cols = [[False for col in range(9)] for row in range(9)]\n    rows = [[False for col in range(9)] for row in range(9)]\n    for r in range(9):\n        for c in range(9):\n            if grid[r][c] == \".\":\n                continue\n            v = int(grid[r][c]) - 1",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.sudoku2",
        "documentation": {}
    },
    {
        "label": "checkBlanagrams",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.super-scrap",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.super-scrap",
        "peekOfCode": "def checkBlanagrams(word1, word2):\n    lenWord1 = len(word1)\n    lenWord2 = len(word2)\n    freq1 = [0] * 26\n    freq2 = [0] * 26\n    count = 0\n    for i in range(lenWord1):\n        freq1[ord(word1[i]) - ord(\"a\")] += 1\n    for i in range(lenWord2):\n        freq2[ord(word2[i]) - ord(\"a\")] += 1",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.super-scrap",
        "documentation": {}
    },
    {
        "label": "condense_linked_list",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.temp",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.temp",
        "peekOfCode": "def condense_linked_list(node):\n    head = node\n    curr_node = head.next\n    while curr_node is not None:\n        if curr_node.value == head.value:\n            curr_node = curr_node.next\n            curr_node.next = None\n        curr_node = curr_node.next\n        head = head.next\n    return head",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.temp",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.traversals",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.traversals",
        "peekOfCode": "class TreeNode:\n  def __init__(self, value):\n    self.value = value\n    self.left = None\n    self.right = None\n# pre order\n# visit the root\n# do something with this node\n# visit the left of the root\n# visit the right of the root",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.traversals",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.traversals",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.traversals",
        "peekOfCode": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\nl = TreeNode(3)\nl.right = TreeNode(1)\nl.right.left = TreeNode(5)\ndef inorder_traversal_r(root):\n    def dft(root, output):",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.traversals",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.traversals",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.traversals",
        "peekOfCode": "class TreeNode:\n  def __init__(self, val=0, left=None, right=None):\n      self.val = val\n      self.left = left\n      self.right = right\ndef build_tree(preorder, inorder):\n  def helper(left = 0, right = len(inorder)):\n    nonlocal starting_index\n    if left == right:\n      return None",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.traversals",
        "documentation": {}
    },
    {
        "label": "inorder_traversal_r",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.traversals",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.traversals",
        "peekOfCode": "def inorder_traversal_r(root):\n    def dft(root, output):\n      if root:\n        dft(root.left, output)\n        output.append(root.val)\n        dft(root.right, output)\n    output = []\n    dft(root, output)\n    return output\ndef inorder_traversal_i(root):",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.traversals",
        "documentation": {}
    },
    {
        "label": "inorder_traversal_i",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.traversals",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.traversals",
        "peekOfCode": "def inorder_traversal_i(root):\n  \"\"\"\n  output list\n  keep track of the data using a stack\n  # keep looping\n    # while root exists\n      # append root to the stack\n      # traverse to the left\n    # if the stack is empty\n      # return my output",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.traversals",
        "documentation": {}
    },
    {
        "label": "build_tree",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.traversals",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.traversals",
        "peekOfCode": "def build_tree(preorder, inorder):\n  def helper(left = 0, right = len(inorder)):\n    nonlocal starting_index\n    if left == right:\n      return None\n    root_value = preorder[starting_index]\n    root = TreeNode(root_value)\n    index = inorder_index_map[root_value]\n    starting_index += 1\n    root.left = helper(left, index)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.traversals",
        "documentation": {}
    },
    {
        "label": "l",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.traversals",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.traversals",
        "peekOfCode": "l = TreeNode(3)\nl.right = TreeNode(1)\nl.right.left = TreeNode(5)\ndef inorder_traversal_r(root):\n    def dft(root, output):\n      if root:\n        dft(root.left, output)\n        output.append(root.val)\n        dft(root.right, output)\n    output = []",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.traversals",
        "documentation": {}
    },
    {
        "label": "l.right",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.traversals",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.traversals",
        "peekOfCode": "l.right = TreeNode(1)\nl.right.left = TreeNode(5)\ndef inorder_traversal_r(root):\n    def dft(root, output):\n      if root:\n        dft(root.left, output)\n        output.append(root.val)\n        dft(root.right, output)\n    output = []\n    dft(root, output)",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.traversals",
        "documentation": {}
    },
    {
        "label": "l.right.left",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.traversals",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.traversals",
        "peekOfCode": "l.right.left = TreeNode(5)\ndef inorder_traversal_r(root):\n    def dft(root, output):\n      if root:\n        dft(root.left, output)\n        output.append(root.val)\n        dft(root.right, output)\n    output = []\n    dft(root, output)\n    return output",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.traversals",
        "documentation": {}
    },
    {
        "label": "start1",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.traversals",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.traversals",
        "peekOfCode": "start1 = time.time()\nresult1 = inorder_traversal_i(l)\nend1 = time.time()\nstart2 = time.time()\nresult2 = inorder_traversal_r(l)\nend2 = time.time()\nprint(f\"iterative version took {end1 - start1} seconds with a result of {result1}\")\nprint(f\"recursive version took {end2 - start2} seconds with a result of {result2}\")\n\"\"\"\nYou are given the values from a preorder and an inorder tree traversal. Write a",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.traversals",
        "documentation": {}
    },
    {
        "label": "result1",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.traversals",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.traversals",
        "peekOfCode": "result1 = inorder_traversal_i(l)\nend1 = time.time()\nstart2 = time.time()\nresult2 = inorder_traversal_r(l)\nend2 = time.time()\nprint(f\"iterative version took {end1 - start1} seconds with a result of {result1}\")\nprint(f\"recursive version took {end2 - start2} seconds with a result of {result2}\")\n\"\"\"\nYou are given the values from a preorder and an inorder tree traversal. Write a\nfunction that can take those inputs and output a binary tree.",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.traversals",
        "documentation": {}
    },
    {
        "label": "end1",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.traversals",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.traversals",
        "peekOfCode": "end1 = time.time()\nstart2 = time.time()\nresult2 = inorder_traversal_r(l)\nend2 = time.time()\nprint(f\"iterative version took {end1 - start1} seconds with a result of {result1}\")\nprint(f\"recursive version took {end2 - start2} seconds with a result of {result2}\")\n\"\"\"\nYou are given the values from a preorder and an inorder tree traversal. Write a\nfunction that can take those inputs and output a binary tree.\n*Note: assume that there will not be any duplicates in the tree.*",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.traversals",
        "documentation": {}
    },
    {
        "label": "start2",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.traversals",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.traversals",
        "peekOfCode": "start2 = time.time()\nresult2 = inorder_traversal_r(l)\nend2 = time.time()\nprint(f\"iterative version took {end1 - start1} seconds with a result of {result1}\")\nprint(f\"recursive version took {end2 - start2} seconds with a result of {result2}\")\n\"\"\"\nYou are given the values from a preorder and an inorder tree traversal. Write a\nfunction that can take those inputs and output a binary tree.\n*Note: assume that there will not be any duplicates in the tree.*\nExample:",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.traversals",
        "documentation": {}
    },
    {
        "label": "result2",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.traversals",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.traversals",
        "peekOfCode": "result2 = inorder_traversal_r(l)\nend2 = time.time()\nprint(f\"iterative version took {end1 - start1} seconds with a result of {result1}\")\nprint(f\"recursive version took {end2 - start2} seconds with a result of {result2}\")\n\"\"\"\nYou are given the values from a preorder and an inorder tree traversal. Write a\nfunction that can take those inputs and output a binary tree.\n*Note: assume that there will not be any duplicates in the tree.*\nExample:\nInputs:     0 1  2  3 4",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.traversals",
        "documentation": {}
    },
    {
        "label": "end2",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.traversals",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.traversals",
        "peekOfCode": "end2 = time.time()\nprint(f\"iterative version took {end1 - start1} seconds with a result of {result1}\")\nprint(f\"recursive version took {end2 - start2} seconds with a result of {result2}\")\n\"\"\"\nYou are given the values from a preorder and an inorder tree traversal. Write a\nfunction that can take those inputs and output a binary tree.\n*Note: assume that there will not be any duplicates in the tree.*\nExample:\nInputs:     0 1  2  3 4\npreorder = [5,7,22,13,9]",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.traversals",
        "documentation": {}
    },
    {
        "label": "preorder",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.traversals",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.traversals",
        "peekOfCode": "preorder = [5,7,22,13,9]\ninorder = [7,5,13,22,9]\nOutput:\n   [5]\n   / \\\n  7  22\n    /  \\\n   13   9\n# the outer function\n  # inner function take a left and right constraint",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.traversals",
        "documentation": {}
    },
    {
        "label": "inorder",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.traversals",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.traversals",
        "peekOfCode": "inorder = [7,5,13,22,9]\nOutput:\n   [5]\n   / \\\n  7  22\n    /  \\\n   13   9\n# the outer function\n  # inner function take a left and right constraint\n    # get the root value from the preorder list at the starting_index",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.traversals",
        "documentation": {}
    },
    {
        "label": "inorder_index_map",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.traversals",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.traversals",
        "peekOfCode": "inorder_index_map = {7: 0, 5: 1, 13: 2, 22: 3, 9: 4}\nstarting_index = 0\n# start our first call\nreturn innerfunction()\n\"\"\"\n# Definition for a binary tree node.\nclass TreeNode:\n  def __init__(self, val=0, left=None, right=None):\n      self.val = val\n      self.left = left",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.traversals",
        "documentation": {}
    },
    {
        "label": "starting_index",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.traversals",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.traversals",
        "peekOfCode": "starting_index = 0\n# start our first call\nreturn innerfunction()\n\"\"\"\n# Definition for a binary tree node.\nclass TreeNode:\n  def __init__(self, val=0, left=None, right=None):\n      self.val = val\n      self.left = left\n      self.right = right",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.traversals",
        "documentation": {}
    },
    {
        "label": "preorder",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.traversals",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.traversals",
        "peekOfCode": "preorder = [5,7,22,13,9]\ninorder = [7,5,13,22,9]\nt = build_tree(preorder, inorder)\n\"\"\"\n   [5]\n   / \\\n  7  22\n    /  \\\n   13   9\n\"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.traversals",
        "documentation": {}
    },
    {
        "label": "inorder",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.traversals",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.traversals",
        "peekOfCode": "inorder = [7,5,13,22,9]\nt = build_tree(preorder, inorder)\n\"\"\"\n   [5]\n   / \\\n  7  22\n    /  \\\n   13   9\n\"\"\"\nprint(f\"            [{t.val}]\")",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.traversals",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.traversals",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.traversals",
        "peekOfCode": "t = build_tree(preorder, inorder)\n\"\"\"\n   [5]\n   / \\\n  7  22\n    /  \\\n   13   9\n\"\"\"\nprint(f\"            [{t.val}]\")\nprint(f\"     [{t.left.val}]       [{t.right.val}]\")",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.traversals",
        "documentation": {}
    },
    {
        "label": "uncover_spy",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.undercover-spy",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.undercover-spy",
        "peekOfCode": "def uncover_spy(n, trust):\n    trusted = [0 for _ in range(n + 1)]\n    for i, j in trust:\n        trusted[i] -= 1\n        trusted[j] += 1\n        for i in range(1, len(trusted)):\n            if trusted[i] == n - 1:\n                return i\n            return -1",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.undercover-spy",
        "documentation": {}
    },
    {
        "label": "validParenthesesSequence",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.scrap-py.validParenthasesSequence",
        "description": "python-gitbook-master..gitbook.assets.scrap-py.validParenthasesSequence",
        "peekOfCode": "def validParenthesesSequence(s):\n    stack = []\n    # Traversing the Expression\n    for char in s:\n        if char in [\"(\", \"{\", \"[\"]:\n            stack.append(char)\n        else:\n            if not stack:\n                return False\n            current_char = stack.pop()",
        "detail": "python-gitbook-master..gitbook.assets.scrap-py.validParenthasesSequence",
        "documentation": {}
    },
    {
        "label": "balanced_parentheses",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.stacks.balanced_parentheses",
        "description": "python-gitbook-master..gitbook.assets.stacks.balanced_parentheses",
        "peekOfCode": "def balanced_parentheses(parentheses: str) -> bool:\n    \"\"\"Use a stack to check if a string of parentheses is balanced.\n    >>> balanced_parentheses(\"([]{})\")\n    True\n    >>> balanced_parentheses(\"[()]{}{[()()]()}\")\n    True\n    >>> balanced_parentheses(\"[(])\")\n    False\n    >>> balanced_parentheses(\"1+2*3-4\")\n    True",
        "detail": "python-gitbook-master..gitbook.assets.stacks.balanced_parentheses",
        "documentation": {}
    },
    {
        "label": "dijkstras_two_stack_algorithm",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.stacks.dijkstras_two_stack_algorithm",
        "description": "python-gitbook-master..gitbook.assets.stacks.dijkstras_two_stack_algorithm",
        "peekOfCode": "def dijkstras_two_stack_algorithm(equation: str) -> int:\n    \"\"\"\n    DocTests\n    >>> dijkstras_two_stack_algorithm(\"(5 + 3)\")\n    8\n    >>> dijkstras_two_stack_algorithm(\"((9 - (2 + 9)) + (8 - 1))\")\n    5\n    >>> dijkstras_two_stack_algorithm(\"((((3 - 2) - (2 + 3)) + (2 - 4)) + 3)\")\n    -3\n    :param equation: a string",
        "detail": "python-gitbook-master..gitbook.assets.stacks.dijkstras_two_stack_algorithm",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.stacks.dijkstras_two_stack_algorithm",
        "description": "python-gitbook-master..gitbook.assets.stacks.dijkstras_two_stack_algorithm",
        "peekOfCode": "__author__ = \"Alexander Joslin\"\nimport operator as op\nfrom .stack import Stack\ndef dijkstras_two_stack_algorithm(equation: str) -> int:\n    \"\"\"\n    DocTests\n    >>> dijkstras_two_stack_algorithm(\"(5 + 3)\")\n    8\n    >>> dijkstras_two_stack_algorithm(\"((9 - (2 + 9)) + (8 - 1))\")\n    5",
        "detail": "python-gitbook-master..gitbook.assets.stacks.dijkstras_two_stack_algorithm",
        "documentation": {}
    },
    {
        "label": "evaluate_postfix",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.stacks.evaluate_postfix_notations",
        "description": "python-gitbook-master..gitbook.assets.stacks.evaluate_postfix_notations",
        "peekOfCode": "def evaluate_postfix(postfix_notation: list) -> int:\n    \"\"\"\n    >>> evaluate_postfix([\"2\", \"1\", \"+\", \"3\", \"*\"])\n    9\n    >>> evaluate_postfix([\"4\", \"13\", \"5\", \"/\", \"+\"])\n    6\n    >>> evaluate_postfix([])\n    0\n    \"\"\"\n    if not postfix_notation:",
        "detail": "python-gitbook-master..gitbook.assets.stacks.evaluate_postfix_notations",
        "documentation": {}
    },
    {
        "label": "precedence",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.stacks.infix_to_postfix_conversion",
        "description": "python-gitbook-master..gitbook.assets.stacks.infix_to_postfix_conversion",
        "peekOfCode": "def precedence(char: str) -> int:\n    \"\"\"\n    Return integer value representing an operator's precedence, or\n    order of operation.\n    https://en.wikipedia.org/wiki/Order_of_operations\n    \"\"\"\n    return {\"+\": 1, \"-\": 1, \"*\": 2, \"/\": 2, \"^\": 3}.get(char, -1)\ndef infix_to_postfix(expression_str: str) -> str:\n    \"\"\"\n    >>> infix_to_postfix(\"(1*(2+3)+4))\")",
        "detail": "python-gitbook-master..gitbook.assets.stacks.infix_to_postfix_conversion",
        "documentation": {}
    },
    {
        "label": "infix_to_postfix",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.stacks.infix_to_postfix_conversion",
        "description": "python-gitbook-master..gitbook.assets.stacks.infix_to_postfix_conversion",
        "peekOfCode": "def infix_to_postfix(expression_str: str) -> str:\n    \"\"\"\n    >>> infix_to_postfix(\"(1*(2+3)+4))\")\n    Traceback (most recent call last):\n    ...\n    ValueError: Mismatched parentheses\n    >>> infix_to_postfix(\"\")\n    ''\n    >>> infix_to_postfix(\"3+2\")\n    '3 2 +'",
        "detail": "python-gitbook-master..gitbook.assets.stacks.infix_to_postfix_conversion",
        "documentation": {}
    },
    {
        "label": "infix_2_postfix",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.stacks.infix_to_prefix_conversion",
        "description": "python-gitbook-master..gitbook.assets.stacks.infix_to_prefix_conversion",
        "peekOfCode": "def infix_2_postfix(Infix):\n    Stack = []\n    Postfix = []\n    priority = {\n        \"^\": 3,\n        \"*\": 2,\n        \"/\": 2,\n        \"%\": 2,\n        \"+\": 1,\n        \"-\": 1,",
        "detail": "python-gitbook-master..gitbook.assets.stacks.infix_to_prefix_conversion",
        "documentation": {}
    },
    {
        "label": "infix_2_prefix",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.stacks.infix_to_prefix_conversion",
        "description": "python-gitbook-master..gitbook.assets.stacks.infix_to_prefix_conversion",
        "peekOfCode": "def infix_2_prefix(Infix):\n    Infix = list(Infix[::-1])  # reverse the infix equation\n    for i in range(len(Infix)):\n        if Infix[i] == \"(\":\n            Infix[i] = \")\"  # change \"(\" to \")\"\n        elif Infix[i] == \")\":\n            Infix[i] = \"(\"  # change \")\" to \"(\"\n    return (infix_2_postfix(\"\".join(Infix)))[\n        ::-1\n    ]  # call infix_2_postfix on Infix, return reverse of Postfix",
        "detail": "python-gitbook-master..gitbook.assets.stacks.infix_to_prefix_conversion",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.stacks.linked_stack",
        "description": "python-gitbook-master..gitbook.assets.stacks.linked_stack",
        "peekOfCode": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n    def __str__(self):\n        return f\"{self.data}\"\nclass LinkedStack:\n    \"\"\"\n    Linked List Stack implementing push (to top),\n    pop (from top) and is_empty",
        "detail": "python-gitbook-master..gitbook.assets.stacks.linked_stack",
        "documentation": {}
    },
    {
        "label": "LinkedStack",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.stacks.linked_stack",
        "description": "python-gitbook-master..gitbook.assets.stacks.linked_stack",
        "peekOfCode": "class LinkedStack:\n    \"\"\"\n    Linked List Stack implementing push (to top),\n    pop (from top) and is_empty\n    >>> stack = LinkedStack()\n    >>> stack.is_empty()\n    True\n    >>> stack.push(5)\n    >>> stack.push(9)\n    >>> stack.push('python')",
        "detail": "python-gitbook-master..gitbook.assets.stacks.linked_stack",
        "documentation": {}
    },
    {
        "label": "next_greatest_element_slow",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.stacks.next_greater_element",
        "description": "python-gitbook-master..gitbook.assets.stacks.next_greater_element",
        "peekOfCode": "def next_greatest_element_slow(arr: list) -> list:\n    \"\"\"\n    Get the Next Greatest Element (NGE) for all elements in a list.\n    Maximum element present after the current one which is also greater than the\n    current one.\n    >>> next_greatest_element_slow(arr) == expect\n    True\n    \"\"\"\n    result = []\n    for i in range(0, len(arr), 1):",
        "detail": "python-gitbook-master..gitbook.assets.stacks.next_greater_element",
        "documentation": {}
    },
    {
        "label": "next_greatest_element_fast",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.stacks.next_greater_element",
        "description": "python-gitbook-master..gitbook.assets.stacks.next_greater_element",
        "peekOfCode": "def next_greatest_element_fast(arr: list) -> list:\n    \"\"\"\n    Like next_greatest_element_slow() but changes the loops to use\n    enumerate() instead of range(len()) for the outer loop and\n    for in a slice of arr for the inner loop.\n    >>> next_greatest_element_fast(arr) == expect\n    True\n    \"\"\"\n    result = []\n    for i, outer in enumerate(arr):",
        "detail": "python-gitbook-master..gitbook.assets.stacks.next_greater_element",
        "documentation": {}
    },
    {
        "label": "next_greatest_element",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.stacks.next_greater_element",
        "description": "python-gitbook-master..gitbook.assets.stacks.next_greater_element",
        "peekOfCode": "def next_greatest_element(arr: list) -> list:\n    \"\"\"\n    Get the Next Greatest Element (NGE) for all elements in a list.\n    Maximum element present after the current one which is also greater than the\n    current one.\n    A naive way to solve this is to take two loops and check for the next bigger\n    number but that will make the time complexity as O(n^2). The better way to solve\n    this would be to use a stack to keep track of maximum number giving a linear time\n    solution.\n    >>> next_greatest_element(arr) == expect",
        "detail": "python-gitbook-master..gitbook.assets.stacks.next_greater_element",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.stacks.next_greater_element",
        "description": "python-gitbook-master..gitbook.assets.stacks.next_greater_element",
        "peekOfCode": "arr = [-10, -5, 0, 5, 5.1, 11, 13, 21, 3, 4, -21, -10, -5, -1, 0]\nexpect = [-5, 0, 5, 5.1, 11, 13, 21, -1, 4, -1, -10, -5, -1, 0, -1]\ndef next_greatest_element_slow(arr: list) -> list:\n    \"\"\"\n    Get the Next Greatest Element (NGE) for all elements in a list.\n    Maximum element present after the current one which is also greater than the\n    current one.\n    >>> next_greatest_element_slow(arr) == expect\n    True\n    \"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.stacks.next_greater_element",
        "documentation": {}
    },
    {
        "label": "expect",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.stacks.next_greater_element",
        "description": "python-gitbook-master..gitbook.assets.stacks.next_greater_element",
        "peekOfCode": "expect = [-5, 0, 5, 5.1, 11, 13, 21, -1, 4, -1, -10, -5, -1, 0, -1]\ndef next_greatest_element_slow(arr: list) -> list:\n    \"\"\"\n    Get the Next Greatest Element (NGE) for all elements in a list.\n    Maximum element present after the current one which is also greater than the\n    current one.\n    >>> next_greatest_element_slow(arr) == expect\n    True\n    \"\"\"\n    result = []",
        "detail": "python-gitbook-master..gitbook.assets.stacks.next_greater_element",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.stacks.postfix_evaluation",
        "description": "python-gitbook-master..gitbook.assets.stacks.postfix_evaluation",
        "peekOfCode": "def Solve(Postfix):\n    Stack = []\n    Div = lambda x, y: int(x / y)  # noqa: E731 integer division operation\n    Opr = {\n        \"^\": op.pow,\n        \"*\": op.mul,\n        \"/\": Div,\n        \"+\": op.add,\n        \"-\": op.sub,\n    }  # operators & their respective operation",
        "detail": "python-gitbook-master..gitbook.assets.stacks.postfix_evaluation",
        "documentation": {}
    },
    {
        "label": "is_operand",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.stacks.prefix_evaluation",
        "description": "python-gitbook-master..gitbook.assets.stacks.prefix_evaluation",
        "peekOfCode": "def is_operand(c):\n    \"\"\"\n    Return True if the given char c is an operand, e.g. it is a number\n    >>> is_operand(\"1\")\n    True\n    >>> is_operand(\"+\")\n    False\n    \"\"\"\n    return c.isdigit()\ndef evaluate(expression):",
        "detail": "python-gitbook-master..gitbook.assets.stacks.prefix_evaluation",
        "documentation": {}
    },
    {
        "label": "evaluate",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.stacks.prefix_evaluation",
        "description": "python-gitbook-master..gitbook.assets.stacks.prefix_evaluation",
        "peekOfCode": "def evaluate(expression):\n    \"\"\"\n    Evaluate a given expression in prefix notation.\n    Asserts that the given expression is valid.\n    >>> evaluate(\"+ 9 * 2 6\")\n    21\n    >>> evaluate(\"/ * 10 2 + 4 1 \")\n    4.0\n    \"\"\"\n    stack = []",
        "detail": "python-gitbook-master..gitbook.assets.stacks.prefix_evaluation",
        "documentation": {}
    },
    {
        "label": "calc",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.stacks.prefix_evaluation",
        "description": "python-gitbook-master..gitbook.assets.stacks.prefix_evaluation",
        "peekOfCode": "calc = {\n    \"+\": lambda x, y: x + y,\n    \"-\": lambda x, y: x - y,\n    \"*\": lambda x, y: x * y,\n    \"/\": lambda x, y: x / y,\n}\ndef is_operand(c):\n    \"\"\"\n    Return True if the given char c is an operand, e.g. it is a number\n    >>> is_operand(\"1\")",
        "detail": "python-gitbook-master..gitbook.assets.stacks.prefix_evaluation",
        "documentation": {}
    },
    {
        "label": "StackOverflowError",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.stacks.stack",
        "description": "python-gitbook-master..gitbook.assets.stacks.stack",
        "peekOfCode": "class StackOverflowError(BaseException):\n    pass\nclass Stack:\n    \"\"\"A stack is an abstract data type that serves as a collection of\n    elements with two principal operations: push() and pop(). push() adds an\n    element to the top of the stack, and pop() removes an element from the top\n    of a stack. The order in which elements come off of a stack are\n    Last In, First Out (LIFO).\n    https://en.wikipedia.org/wiki/Stack_(abstract_data_type)\n    \"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.stacks.stack",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.stacks.stack",
        "description": "python-gitbook-master..gitbook.assets.stacks.stack",
        "peekOfCode": "class Stack:\n    \"\"\"A stack is an abstract data type that serves as a collection of\n    elements with two principal operations: push() and pop(). push() adds an\n    element to the top of the stack, and pop() removes an element from the top\n    of a stack. The order in which elements come off of a stack are\n    Last In, First Out (LIFO).\n    https://en.wikipedia.org/wiki/Stack_(abstract_data_type)\n    \"\"\"\n    def __init__(self, limit: int = 10):\n        self.stack: List[int] = []",
        "detail": "python-gitbook-master..gitbook.assets.stacks.stack",
        "documentation": {}
    },
    {
        "label": "test_stack",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.stacks.stack",
        "description": "python-gitbook-master..gitbook.assets.stacks.stack",
        "peekOfCode": "def test_stack() -> None:\n    \"\"\"\n    >>> test_stack()\n    \"\"\"\n    stack = Stack(10)\n    assert bool(stack) is False\n    assert stack.is_empty() is True\n    assert stack.is_full() is False\n    assert str(stack) == \"[]\"\n    try:",
        "detail": "python-gitbook-master..gitbook.assets.stacks.stack",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.stacks.stack_using_dll",
        "description": "python-gitbook-master..gitbook.assets.stacks.stack_using_dll",
        "peekOfCode": "class Node:\n    def __init__(self, data):\n        self.data = data  # Assign data\n        self.next = None  # Initialize next as null\n        self.prev = None  # Initialize prev as null\nclass Stack:\n    \"\"\"\n    >>> stack = Stack()\n    >>> stack.is_empty()\n    True",
        "detail": "python-gitbook-master..gitbook.assets.stacks.stack_using_dll",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.stacks.stack_using_dll",
        "description": "python-gitbook-master..gitbook.assets.stacks.stack_using_dll",
        "peekOfCode": "class Stack:\n    \"\"\"\n    >>> stack = Stack()\n    >>> stack.is_empty()\n    True\n    >>> stack.print_stack()\n    stack elements are:\n    >>> for i in range(4):\n    ...     stack.push(i)\n    ...",
        "detail": "python-gitbook-master..gitbook.assets.stacks.stack_using_dll",
        "documentation": {}
    },
    {
        "label": "calculateSpan",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.stacks.stock_span_problem",
        "description": "python-gitbook-master..gitbook.assets.stacks.stock_span_problem",
        "peekOfCode": "def calculateSpan(price, S):\n    n = len(price)\n    # Create a stack and push index of fist element to it\n    st = []\n    st.append(0)\n    # Span value of first element is always 1\n    S[0] = 1\n    # Calculate span values for rest of the elements\n    for i in range(1, n):\n        # Pop elements from stack while stack is not",
        "detail": "python-gitbook-master..gitbook.assets.stacks.stock_span_problem",
        "documentation": {}
    },
    {
        "label": "printArray",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.stacks.stock_span_problem",
        "description": "python-gitbook-master..gitbook.assets.stacks.stock_span_problem",
        "peekOfCode": "def printArray(arr, n):\n    for i in range(0, n):\n        print(arr[i], end=\" \")\n# Driver program to test above function\nprice = [10, 4, 5, 90, 120, 80]\nS = [0 for i in range(len(price) + 1)]\n# Fill the span values in array S[]\ncalculateSpan(price, S)\n# Print the calculated span values\nprintArray(S, len(price))",
        "detail": "python-gitbook-master..gitbook.assets.stacks.stock_span_problem",
        "documentation": {}
    },
    {
        "label": "price",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.stacks.stock_span_problem",
        "description": "python-gitbook-master..gitbook.assets.stacks.stock_span_problem",
        "peekOfCode": "price = [10, 4, 5, 90, 120, 80]\nS = [0 for i in range(len(price) + 1)]\n# Fill the span values in array S[]\ncalculateSpan(price, S)\n# Print the calculated span values\nprintArray(S, len(price))",
        "detail": "python-gitbook-master..gitbook.assets.stacks.stock_span_problem",
        "documentation": {}
    },
    {
        "label": "S",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.stacks.stock_span_problem",
        "description": "python-gitbook-master..gitbook.assets.stacks.stock_span_problem",
        "peekOfCode": "S = [0 for i in range(len(price) + 1)]\n# Fill the span values in array S[]\ncalculateSpan(price, S)\n# Print the calculated span values\nprintArray(S, len(price))",
        "detail": "python-gitbook-master..gitbook.assets.stacks.stock_span_problem",
        "documentation": {}
    },
    {
        "label": "TrieNode",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.trie.trie",
        "description": "python-gitbook-master..gitbook.assets.trie.trie",
        "peekOfCode": "class TrieNode:\n    def __init__(self):\n        self.nodes = dict()  # Mapping from char to TrieNode\n        self.is_leaf = False\n    def insert_many(self, words: [str]):\n        \"\"\"\n        Inserts a list of words into the Trie\n        :param words: list of string words\n        :return: None\n        \"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.trie.trie",
        "documentation": {}
    },
    {
        "label": "print_words",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.trie.trie",
        "description": "python-gitbook-master..gitbook.assets.trie.trie",
        "peekOfCode": "def print_words(node: TrieNode, word: str):\n    \"\"\"\n    Prints all the words in a Trie\n    :param node: root node of Trie\n    :param word: Word variable should be empty at start\n    :return: None\n    \"\"\"\n    if node.is_leaf:\n        print(word, end=\" \")\n    for key, value in node.nodes.items():",
        "detail": "python-gitbook-master..gitbook.assets.trie.trie",
        "documentation": {}
    },
    {
        "label": "test_trie",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.trie.trie",
        "description": "python-gitbook-master..gitbook.assets.trie.trie",
        "peekOfCode": "def test_trie():\n    words = \"banana bananas bandana band apple all beast\".split()\n    root = TrieNode()\n    root.insert_many(words)\n    # print_words(root, \"\")\n    assert all(root.find(word) for word in words)\n    assert root.find(\"banana\")\n    assert not root.find(\"bandanas\")\n    assert not root.find(\"apps\")\n    assert root.find(\"apple\")",
        "detail": "python-gitbook-master..gitbook.assets.trie.trie",
        "documentation": {}
    },
    {
        "label": "print_results",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.trie.trie",
        "description": "python-gitbook-master..gitbook.assets.trie.trie",
        "peekOfCode": "def print_results(msg: str, passes: bool) -> None:\n    print(str(msg), \"works!\" if passes else \"doesn't work :(\")\ndef pytests():\n    assert test_trie()\ndef main():\n    \"\"\"\n    >>> pytests()\n    \"\"\"\n    print_results(\"Testing trie functionality\", test_trie())\nif __name__ == \"__main__\":",
        "detail": "python-gitbook-master..gitbook.assets.trie.trie",
        "documentation": {}
    },
    {
        "label": "pytests",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.trie.trie",
        "description": "python-gitbook-master..gitbook.assets.trie.trie",
        "peekOfCode": "def pytests():\n    assert test_trie()\ndef main():\n    \"\"\"\n    >>> pytests()\n    \"\"\"\n    print_results(\"Testing trie functionality\", test_trie())\nif __name__ == \"__main__\":\n    main()",
        "detail": "python-gitbook-master..gitbook.assets.trie.trie",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.trie.trie",
        "description": "python-gitbook-master..gitbook.assets.trie.trie",
        "peekOfCode": "def main():\n    \"\"\"\n    >>> pytests()\n    \"\"\"\n    print_results(\"Testing trie functionality\", test_trie())\nif __name__ == \"__main__\":\n    main()",
        "detail": "python-gitbook-master..gitbook.assets.trie.trie",
        "documentation": {}
    },
    {
        "label": "backpedal",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.backpedal (1)",
        "description": "python-gitbook-master..gitbook.assets.backpedal (1)",
        "peekOfCode": "def backpedal(goal: Node, parents: Mapping[Node, Optional[Node]]) -> list[Node]:\n    \"\"\"With a dict of parent->child, walk backwards from the goal as far as possible and return the path.\"\"\"\n    back_path = []\n    node = goal\n    while node is not None:\n        back_path.append(node)\n        node = parents[node]\n    return back_path[::-1]",
        "detail": "python-gitbook-master..gitbook.assets.backpedal (1)",
        "documentation": {}
    },
    {
        "label": "backpedal",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.backpedal",
        "description": "python-gitbook-master..gitbook.assets.backpedal",
        "peekOfCode": "def backpedal(goal: Node, parents: Mapping[Node, Optional[Node]]) -> list[Node]:\n    \"\"\"With a dict of parent->child, walk backwards from the goal as far as possible and return the path.\"\"\"\n    back_path = []\n    node = goal\n    while node is not None:\n        back_path.append(node)\n        node = parents[node]\n    return back_path[::-1]",
        "detail": "python-gitbook-master..gitbook.assets.backpedal",
        "documentation": {}
    },
    {
        "label": "bfs_paths_dict",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.bfs_paths_dict (1)",
        "description": "python-gitbook-master..gitbook.assets.bfs_paths_dict (1)",
        "peekOfCode": "def bfs_paths_dict(graph: Mapping[Node, set[Node]], start: Node, goal: Node) -> Iterable[list[Node]]:\n    \"\"\"Find all the paths from start to goal using BFS on a dict.\"\"\"\n    to_visit = deque([[start]])\n    while to_visit:\n        path = to_visit.popleft()\n        node = path[-1]\n        if node == goal:\n            yield path\n        else:\n            for next_node in graph[node].difference(path):",
        "detail": "python-gitbook-master..gitbook.assets.bfs_paths_dict (1)",
        "documentation": {}
    },
    {
        "label": "bfs_paths_dict",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.bfs_paths_dict (2)",
        "description": "python-gitbook-master..gitbook.assets.bfs_paths_dict (2)",
        "peekOfCode": "def bfs_paths_dict(graph: Mapping[Node, set[Node]], start: Node, goal: Node) -> Iterable[list[Node]]:\n    \"\"\"Find all the paths from start to goal using BFS on a dict.\"\"\"\n    to_visit = deque([[start]])\n    while to_visit:\n        path = to_visit.popleft()\n        node = path[-1]\n        if node == goal:\n            yield path\n        else:\n            for next_node in graph[node].difference(path):",
        "detail": "python-gitbook-master..gitbook.assets.bfs_paths_dict (2)",
        "documentation": {}
    },
    {
        "label": "bfs_paths_dict",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.bfs_paths_dict",
        "description": "python-gitbook-master..gitbook.assets.bfs_paths_dict",
        "peekOfCode": "def bfs_paths_dict(graph: Mapping[Node, set[Node]], start: Node, goal: Node) -> Iterable[list[Node]]:\n    \"\"\"Find all the paths from start to goal using BFS on a dict.\"\"\"\n    to_visit = deque([[start]])\n    while to_visit:\n        path = to_visit.popleft()\n        node = path[-1]\n        if node == goal:\n            yield path\n        else:\n            for next_node in graph[node].difference(path):",
        "detail": "python-gitbook-master..gitbook.assets.bfs_paths_dict",
        "documentation": {}
    },
    {
        "label": "bfs_search_dict",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.bfs_search_dict (1)",
        "description": "python-gitbook-master..gitbook.assets.bfs_search_dict (1)",
        "peekOfCode": "def bfs_search_dict(graph: Mapping[Node, Iterable[Node]], start: Node, predicate: Callable[[Node], bool]) -> bool:\n    \"\"\"Find the closest node to start that matches the predicate using breadth first search.\"\"\"\n    visited = set()\n    to_visit = deque([start])\n    while to_visit:\n        node = to_visit.popleft()\n        if node in visited:\n            continue\n        visited.add(node)\n        if predicate(node):",
        "detail": "python-gitbook-master..gitbook.assets.bfs_search_dict (1)",
        "documentation": {}
    },
    {
        "label": "bfs_search_dict",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.bfs_search_dict",
        "description": "python-gitbook-master..gitbook.assets.bfs_search_dict",
        "peekOfCode": "def bfs_search_dict(graph: Mapping[Node, Iterable[Node]], start: Node, predicate: Callable[[Node], bool]) -> bool:\n    \"\"\"Find the closest node to start that matches the predicate using breadth first search.\"\"\"\n    visited = set()\n    to_visit = deque([start])\n    while to_visit:\n        node = to_visit.popleft()\n        if node in visited:\n            continue\n        visited.add(node)\n        if predicate(node):",
        "detail": "python-gitbook-master..gitbook.assets.bfs_search_dict",
        "documentation": {}
    },
    {
        "label": "bfs_search_grid",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.bfs_search_grid (1)",
        "description": "python-gitbook-master..gitbook.assets.bfs_search_grid (1)",
        "peekOfCode": "def bfs_search_grid(grid: Sequence[Sequence[int]], start: tuple[int, int], goal: tuple[int, int]) -> bool:\n    \"\"\"On a grid of 0s and 1s, find if start is connected to goal via a path of 1s.\"\"\"\n    rows = range(len(grid))\n    cols = range(len(grid[0]))\n    seen = {start}\n    to_visit = deque([start])\n    while to_visit:\n        r, c = to_visit.popleft()\n        if (r, c) == goal:\n            return True",
        "detail": "python-gitbook-master..gitbook.assets.bfs_search_grid (1)",
        "documentation": {}
    },
    {
        "label": "bfs_search_grid",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.bfs_search_grid",
        "description": "python-gitbook-master..gitbook.assets.bfs_search_grid",
        "peekOfCode": "def bfs_search_grid(grid: Sequence[Sequence[int]], start: tuple[int, int], goal: tuple[int, int]) -> bool:\n    \"\"\"On a grid of 0s and 1s, find if start is connected to goal via a path of 1s.\"\"\"\n    rows = range(len(grid))\n    cols = range(len(grid[0]))\n    seen = {start}\n    to_visit = deque([start])\n    while to_visit:\n        r, c = to_visit.popleft()\n        if (r, c) == goal:\n            return True",
        "detail": "python-gitbook-master..gitbook.assets.bfs_search_grid",
        "documentation": {}
    },
    {
        "label": "bipartite_matching_single",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.bipartite_matching_single (1)",
        "description": "python-gitbook-master..gitbook.assets.bipartite_matching_single (1)",
        "peekOfCode": "def bipartite_matching_single(graph: Sequence[int]) -> list[int]:\n    matches = list(graph)\n    in_degrees = [0] * len(graph)  # This is an alternate to collections.Counter when the keys are 0-n.\n    for target in graph:\n        in_degrees[target] += 1\n    zero_in_degrees = [node for node, in_degree in enumerate(in_degrees) if not in_degree]\n    while zero_in_degrees:\n        node = zero_in_degrees.pop()\n        target = matches[node]\n        matches[node] = node",
        "detail": "python-gitbook-master..gitbook.assets.bipartite_matching_single (1)",
        "documentation": {}
    },
    {
        "label": "bipartite_matching_single",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.bipartite_matching_single (2)",
        "description": "python-gitbook-master..gitbook.assets.bipartite_matching_single (2)",
        "peekOfCode": "def bipartite_matching_single(graph: Sequence[int]) -> list[int]:\n    matches = list(graph)\n    in_degrees = [0] * len(graph)  # This is an alternate to collections.Counter when the keys are 0-n.\n    for target in graph:\n        in_degrees[target] += 1\n    zero_in_degrees = [node for node, in_degree in enumerate(in_degrees) if not in_degree]\n    while zero_in_degrees:\n        node = zero_in_degrees.pop()\n        target = matches[node]\n        matches[node] = node",
        "detail": "python-gitbook-master..gitbook.assets.bipartite_matching_single (2)",
        "documentation": {}
    },
    {
        "label": "bipartite_matching_single",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.bipartite_matching_single",
        "description": "python-gitbook-master..gitbook.assets.bipartite_matching_single",
        "peekOfCode": "def bipartite_matching_single(graph: Sequence[int]) -> list[int]:\n    matches = list(graph)\n    in_degrees = [0] * len(graph)  # This is an alternate to collections.Counter when the keys are 0-n.\n    for target in graph:\n        in_degrees[target] += 1\n    zero_in_degrees = [node for node, in_degree in enumerate(in_degrees) if not in_degree]\n    while zero_in_degrees:\n        node = zero_in_degrees.pop()\n        target = matches[node]\n        matches[node] = node",
        "detail": "python-gitbook-master..gitbook.assets.bipartite_matching_single",
        "documentation": {}
    },
    {
        "label": "bisect_search",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.bisect_search (1)",
        "description": "python-gitbook-master..gitbook.assets.bisect_search (1)",
        "peekOfCode": "def bisect_search(predicate: Callable[[int], bool], low: int, high: int) -> int:\n    \"\"\"Find the lowest int between low and high where predicate(int) is True.\"\"\"\n    while low < high:\n        mid = low + (high - low) // 2  # Avoids integer overflow compared to mid = (low + high) // 2\n        if predicate(mid):\n            high = mid\n        else:\n            low = mid + 1\n    return low",
        "detail": "python-gitbook-master..gitbook.assets.bisect_search (1)",
        "documentation": {}
    },
    {
        "label": "bisect_search",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.bisect_search",
        "description": "python-gitbook-master..gitbook.assets.bisect_search",
        "peekOfCode": "def bisect_search(predicate: Callable[[int], bool], low: int, high: int) -> int:\n    \"\"\"Find the lowest int between low and high where predicate(int) is True.\"\"\"\n    while low < high:\n        mid = low + (high - low) // 2  # Avoids integer overflow compared to mid = (low + high) // 2\n        if predicate(mid):\n            high = mid\n        else:\n            low = mid + 1\n    return low",
        "detail": "python-gitbook-master..gitbook.assets.bisect_search",
        "documentation": {}
    },
    {
        "label": "bst_make_balanced_recur",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.bst_make_balanced_recur (1)",
        "description": "python-gitbook-master..gitbook.assets.bst_make_balanced_recur (1)",
        "peekOfCode": "def bst_make_balanced_recur(values: Sequence[int]) -> Optional[BTNode]:\n    \"\"\"Make a balanced binary search tree from a sorted sequence of values.\"\"\"\n    if not values:\n        return None\n    mid = len(values) // 2\n    root = BTNode(values[mid])\n    root.left = bst_make_balanced_recur(values[:mid])\n    root.right = bst_make_balanced_recur(values[mid + 1:])\n    return root",
        "detail": "python-gitbook-master..gitbook.assets.bst_make_balanced_recur (1)",
        "documentation": {}
    },
    {
        "label": "bst_make_balanced_recur",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.bst_make_balanced_recur",
        "description": "python-gitbook-master..gitbook.assets.bst_make_balanced_recur",
        "peekOfCode": "def bst_make_balanced_recur(values: Sequence[int]) -> Optional[BTNode]:\n    \"\"\"Make a balanced binary search tree from a sorted sequence of values.\"\"\"\n    if not values:\n        return None\n    mid = len(values) // 2\n    root = BTNode(values[mid])\n    root.left = bst_make_balanced_recur(values[:mid])\n    root.right = bst_make_balanced_recur(values[mid + 1:])\n    return root",
        "detail": "python-gitbook-master..gitbook.assets.bst_make_balanced_recur",
        "documentation": {}
    },
    {
        "label": "bt_inorder_traversal_recur",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.bt_inorder_traversal_recur (1)",
        "description": "python-gitbook-master..gitbook.assets.bt_inorder_traversal_recur (1)",
        "peekOfCode": "def bt_inorder_traversal_recur(root: Optional[BTNode]) -> Iterable[BTNode]:\n    if root is not None:\n        yield from bt_inorder_traversal_recur(root.left)\n        yield root\n        yield from bt_inorder_traversal_recur(root.right)",
        "detail": "python-gitbook-master..gitbook.assets.bt_inorder_traversal_recur (1)",
        "documentation": {}
    },
    {
        "label": "bt_inorder_traversal_recur",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.bt_inorder_traversal_recur",
        "description": "python-gitbook-master..gitbook.assets.bt_inorder_traversal_recur",
        "peekOfCode": "def bt_inorder_traversal_recur(root: Optional[BTNode]) -> Iterable[BTNode]:\n    if root is not None:\n        yield from bt_inorder_traversal_recur(root.left)\n        yield root\n        yield from bt_inorder_traversal_recur(root.right)",
        "detail": "python-gitbook-master..gitbook.assets.bt_inorder_traversal_recur",
        "documentation": {}
    },
    {
        "label": "bt_level_order_traversal_iter",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.bt_level_order_traversal_iter (1)",
        "description": "python-gitbook-master..gitbook.assets.bt_level_order_traversal_iter (1)",
        "peekOfCode": "def bt_level_order_traversal_iter(root: BTNode) -> Iterable[list[BTNode]]:\n    # would do a null check here if root was Optional\n    level = deque([root])\n    while level:\n        # modify this line if you needed to grab the values\n        yield list(level)  # copy so it's not messed with\n        for _ in range(len(level)):\n            node = level.popleft()\n            for child in [node.left, node.right]:\n                if child is not None:",
        "detail": "python-gitbook-master..gitbook.assets.bt_level_order_traversal_iter (1)",
        "documentation": {}
    },
    {
        "label": "bt_level_order_traversal_iter",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.bt_level_order_traversal_iter",
        "description": "python-gitbook-master..gitbook.assets.bt_level_order_traversal_iter",
        "peekOfCode": "def bt_level_order_traversal_iter(root: BTNode) -> Iterable[list[BTNode]]:\n    # would do a null check here if root was Optional\n    level = deque([root])\n    while level:\n        # modify this line if you needed to grab the values\n        yield list(level)  # copy so it's not messed with\n        for _ in range(len(level)):\n            node = level.popleft()\n            for child in [node.left, node.right]:\n                if child is not None:",
        "detail": "python-gitbook-master..gitbook.assets.bt_level_order_traversal_iter",
        "documentation": {}
    },
    {
        "label": "celebrity",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.celebrity (1)",
        "description": "python-gitbook-master..gitbook.assets.celebrity (1)",
        "peekOfCode": "def celebrity(knows: Callable[[int, int], bool], n: int) -> Optional[int]:\n    candidate = 0\n    for node in range(1, n):\n        if knows(candidate, node):\n            candidate = node\n    if any(knows(candidate, node) for node in range(candidate)):\n        return None\n    if any(not knows(node, candidate) for node in range(n)):\n        return None\n    return candidate",
        "detail": "python-gitbook-master..gitbook.assets.celebrity (1)",
        "documentation": {}
    },
    {
        "label": "celebrity",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.celebrity",
        "description": "python-gitbook-master..gitbook.assets.celebrity",
        "peekOfCode": "def celebrity(knows: Callable[[int, int], bool], n: int) -> Optional[int]:\n    candidate = 0\n    for node in range(1, n):\n        if knows(candidate, node):\n            candidate = node\n    if any(knows(candidate, node) for node in range(candidate)):\n        return None\n    if any(not knows(node, candidate) for node in range(n)):\n        return None\n    return candidate",
        "detail": "python-gitbook-master..gitbook.assets.celebrity",
        "documentation": {}
    },
    {
        "label": "counting_sort_dict",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.counting_sort_dict (1)",
        "description": "python-gitbook-master..gitbook.assets.counting_sort_dict (1)",
        "peekOfCode": "def counting_sort_dict(items: Iterable[T], key: Callable[[T], int] = lambda x: x) -> Iterable[T]:\n    groups = defaultdict(list)\n    for item in items:\n        groups[key(item)].append(item)\n    for k in range(min(groups), max(groups) + 1):\n        yield from groups[k]",
        "detail": "python-gitbook-master..gitbook.assets.counting_sort_dict (1)",
        "documentation": {}
    },
    {
        "label": "counting_sort_dict",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.counting_sort_dict (2)",
        "description": "python-gitbook-master..gitbook.assets.counting_sort_dict (2)",
        "peekOfCode": "def counting_sort_dict(items: Iterable[T], key: Callable[[T], int] = lambda x: x) -> Iterable[T]:\n    groups = defaultdict(list)\n    for item in items:\n        groups[key(item)].append(item)\n    for k in range(min(groups), max(groups) + 1):\n        yield from groups[k]",
        "detail": "python-gitbook-master..gitbook.assets.counting_sort_dict (2)",
        "documentation": {}
    },
    {
        "label": "counting_sort_dict",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.counting_sort_dict",
        "description": "python-gitbook-master..gitbook.assets.counting_sort_dict",
        "peekOfCode": "def counting_sort_dict(items: Iterable[T], key: Callable[[T], int] = lambda x: x) -> Iterable[T]:\n    groups = defaultdict(list)\n    for item in items:\n        groups[key(item)].append(item)\n    for k in range(min(groups), max(groups) + 1):\n        yield from groups[k]",
        "detail": "python-gitbook-master..gitbook.assets.counting_sort_dict",
        "documentation": {}
    },
    {
        "label": "counting_sort_list",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.counting_sort_list (1)",
        "description": "python-gitbook-master..gitbook.assets.counting_sort_list (1)",
        "peekOfCode": "def counting_sort_list(items: Sequence[T], key: Callable[[T], int] = lambda x: x):\n    max_value = max(map(key, items))\n    count = [0] * (max_value + 1)\n    for item in items:\n        count[key(item)] += 1\n    count = list(accumulate(count, initial=0))\n    ret = [None] * len(items)\n    for item in items:\n        i = count[key(item)]\n        ret[i] = item",
        "detail": "python-gitbook-master..gitbook.assets.counting_sort_list (1)",
        "documentation": {}
    },
    {
        "label": "counting_sort_list",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.counting_sort_list (2)",
        "description": "python-gitbook-master..gitbook.assets.counting_sort_list (2)",
        "peekOfCode": "def counting_sort_list(items: Sequence[T], key: Callable[[T], int] = lambda x: x):\n    max_value = max(map(key, items))\n    count = [0] * (max_value + 1)\n    for item in items:\n        count[key(item)] += 1\n    count = list(accumulate(count, initial=0))\n    ret = [None] * len(items)\n    for item in items:\n        i = count[key(item)]\n        ret[i] = item",
        "detail": "python-gitbook-master..gitbook.assets.counting_sort_list (2)",
        "documentation": {}
    },
    {
        "label": "counting_sort_list",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.counting_sort_list",
        "description": "python-gitbook-master..gitbook.assets.counting_sort_list",
        "peekOfCode": "def counting_sort_list(items: Sequence[T], key: Callable[[T], int] = lambda x: x):\n    max_value = max(map(key, items))\n    count = [0] * (max_value + 1)\n    for item in items:\n        count[key(item)] += 1\n    count = list(accumulate(count, initial=0))\n    ret = [None] * len(items)\n    for item in items:\n        i = count[key(item)]\n        ret[i] = item",
        "detail": "python-gitbook-master..gitbook.assets.counting_sort_list",
        "documentation": {}
    },
    {
        "label": "threeCharsDistinct",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-week1-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-week1-projects (1)",
        "peekOfCode": "def threeCharsDistinct(s):\n    count = 0\n    for i in range(len(s)):\n        if i < len(s) - 2:\n            # print(i)\n            if s[i] != s[i + 1] and s[i] != s[i + 2] and s[i + 1] != s[i + 2]:\n                count += 1\n    return count\n# print(threeCharsDistinct(s))\nsentence = \"Man bites dog\"",
        "detail": "python-gitbook-master..gitbook.assets.cs-week1-projects (1)",
        "documentation": {}
    },
    {
        "label": "reverseSentence",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-week1-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-week1-projects (1)",
        "peekOfCode": "def reverseSentence(sentence):\n    words_array = sentence.split(' ')\n    words_reversed = ' '.join(reversed(words_array))\n    return words_reversed\n# print(reverseSentence(sentence))\npasscode = '1111'\nattempts = [\"1111\",\n            \"4444\",\n            \"9999\",\n            \"3333\",",
        "detail": "python-gitbook-master..gitbook.assets.cs-week1-projects (1)",
        "documentation": {}
    },
    {
        "label": "incorrectPasscodeAttempts",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-week1-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-week1-projects (1)",
        "peekOfCode": "def incorrectPasscodeAttempts(passcode, attempts):\n    count = 0\n    indexes = []\n    if len(attempts) < 10 and passcode not in attempts:\n        return False\n    for attempt in attempts:\n        print('attempt:', attempt)\n        if attempt != passcode:\n            print('count before:', count)\n            count += 1",
        "detail": "python-gitbook-master..gitbook.assets.cs-week1-projects (1)",
        "documentation": {}
    },
    {
        "label": "digitSumsDifference",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-week1-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-week1-projects (1)",
        "peekOfCode": "def digitSumsDifference(n):\n    evens_sum = 0\n    odds_sum = 0\n    difference = 0\n    evens = []\n    odds = []\n    for num in str(n):\n        if int(num) % 2 == 0:\n            evens.append(int(num))\n        else:",
        "detail": "python-gitbook-master..gitbook.assets.cs-week1-projects (1)",
        "documentation": {}
    },
    {
        "label": "digitsManipulations",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-week1-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-week1-projects (1)",
        "peekOfCode": "def digitsManipulations(n):\n    nums = []\n    for num in str(n):\n        nums.append(int(num))\n    return math.prod(nums) - sum(nums)\n#\n# print(digitsManipulations(n))\ns = \"abcde\"\ndef countVowelConsonant(s):\n    vowel_count = 0",
        "detail": "python-gitbook-master..gitbook.assets.cs-week1-projects (1)",
        "documentation": {}
    },
    {
        "label": "countVowelConsonant",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-week1-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-week1-projects (1)",
        "peekOfCode": "def countVowelConsonant(s):\n    vowel_count = 0\n    const_count = 0\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for letter in s:\n        if letter in vowels:\n            vowel_count += 1\n        else:\n            const_count += 2\n    return vowel_count + const_count",
        "detail": "python-gitbook-master..gitbook.assets.cs-week1-projects (1)",
        "documentation": {}
    },
    {
        "label": "contains_duplicate_2",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-week1-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-week1-projects (1)",
        "peekOfCode": "def contains_duplicate_2(nums):\n    # overall runtime: O(nlogn + n) --> O(n log n)\n    # space complexity: O(1)\n    nums.sort()  # sorting is usually O(n log n)\n    # nums.sort() sorts it in place\n    # everything below this line is O(n)\n    i = 0  # O(1)\n    while i < len(nums) - 1:  # up to O(n)\n        if nums[i] == nums[i + 1]:  # O(1)\n            return True",
        "detail": "python-gitbook-master..gitbook.assets.cs-week1-projects (1)",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-week1-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-week1-projects (1)",
        "peekOfCode": "s = 'abacaba'\n# def threeCharsDistinct(s):\n#     count = 0\n#\n#     for i in range(len(s)):\n#         if i < 6:\n#             if s[0] != s[i + 1] and s[i] != s[i + 2] and s[i + 1] != s[i + 2]:\n#                 count += 1\n#     print(count)\ndef threeCharsDistinct(s):",
        "detail": "python-gitbook-master..gitbook.assets.cs-week1-projects (1)",
        "documentation": {}
    },
    {
        "label": "sentence",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-week1-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-week1-projects (1)",
        "peekOfCode": "sentence = \"Man bites dog\"\ndef reverseSentence(sentence):\n    words_array = sentence.split(' ')\n    words_reversed = ' '.join(reversed(words_array))\n    return words_reversed\n# print(reverseSentence(sentence))\npasscode = '1111'\nattempts = [\"1111\",\n            \"4444\",\n            \"9999\",",
        "detail": "python-gitbook-master..gitbook.assets.cs-week1-projects (1)",
        "documentation": {}
    },
    {
        "label": "passcode",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-week1-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-week1-projects (1)",
        "peekOfCode": "passcode = '1111'\nattempts = [\"1111\",\n            \"4444\",\n            \"9999\",\n            \"3333\",\n            \"8888\",\n            \"2222\",\n            \"7777\",\n            \"0000\",\n            \"6666\",",
        "detail": "python-gitbook-master..gitbook.assets.cs-week1-projects (1)",
        "documentation": {}
    },
    {
        "label": "attempts",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-week1-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-week1-projects (1)",
        "peekOfCode": "attempts = [\"1111\",\n            \"4444\",\n            \"9999\",\n            \"3333\",\n            \"8888\",\n            \"2222\",\n            \"7777\",\n            \"0000\",\n            \"6666\",\n            \"7285\",",
        "detail": "python-gitbook-master..gitbook.assets.cs-week1-projects (1)",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-week1-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-week1-projects (1)",
        "peekOfCode": "n = 412\ndef digitSumsDifference(n):\n    evens_sum = 0\n    odds_sum = 0\n    difference = 0\n    evens = []\n    odds = []\n    for num in str(n):\n        if int(num) % 2 == 0:\n            evens.append(int(num))",
        "detail": "python-gitbook-master..gitbook.assets.cs-week1-projects (1)",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-week1-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-week1-projects (1)",
        "peekOfCode": "n = 123456\ndef digitsManipulations(n):\n    nums = []\n    for num in str(n):\n        nums.append(int(num))\n    return math.prod(nums) - sum(nums)\n#\n# print(digitsManipulations(n))\ns = \"abcde\"\ndef countVowelConsonant(s):",
        "detail": "python-gitbook-master..gitbook.assets.cs-week1-projects (1)",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-week1-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-week1-projects (1)",
        "peekOfCode": "s = \"abcde\"\ndef countVowelConsonant(s):\n    vowel_count = 0\n    const_count = 0\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for letter in s:\n        if letter in vowels:\n            vowel_count += 1\n        else:\n            const_count += 2",
        "detail": "python-gitbook-master..gitbook.assets.cs-week1-projects (1)",
        "documentation": {}
    },
    {
        "label": "threeCharsDistinct",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-week1-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-week1-projects",
        "peekOfCode": "def threeCharsDistinct(s):\n    count = 0\n    for i in range(len(s)):\n        if i < len(s) - 2:\n            # print(i)\n            if s[i] != s[i + 1] and s[i] != s[i + 2] and s[i + 1] != s[i + 2]:\n                count += 1\n    return count\n# print(threeCharsDistinct(s))\nsentence = \"Man bites dog\"",
        "detail": "python-gitbook-master..gitbook.assets.cs-week1-projects",
        "documentation": {}
    },
    {
        "label": "reverseSentence",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-week1-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-week1-projects",
        "peekOfCode": "def reverseSentence(sentence):\n    words_array = sentence.split(' ')\n    words_reversed = ' '.join(reversed(words_array))\n    return words_reversed\n# print(reverseSentence(sentence))\npasscode = '1111'\nattempts = [\"1111\",\n            \"4444\",\n            \"9999\",\n            \"3333\",",
        "detail": "python-gitbook-master..gitbook.assets.cs-week1-projects",
        "documentation": {}
    },
    {
        "label": "incorrectPasscodeAttempts",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-week1-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-week1-projects",
        "peekOfCode": "def incorrectPasscodeAttempts(passcode, attempts):\n    count = 0\n    indexes = []\n    if len(attempts) < 10 and passcode not in attempts:\n        return False\n    for attempt in attempts:\n        print('attempt:', attempt)\n        if attempt != passcode:\n            print('count before:', count)\n            count += 1",
        "detail": "python-gitbook-master..gitbook.assets.cs-week1-projects",
        "documentation": {}
    },
    {
        "label": "digitSumsDifference",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-week1-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-week1-projects",
        "peekOfCode": "def digitSumsDifference(n):\n    evens_sum = 0\n    odds_sum = 0\n    difference = 0\n    evens = []\n    odds = []\n    for num in str(n):\n        if int(num) % 2 == 0:\n            evens.append(int(num))\n        else:",
        "detail": "python-gitbook-master..gitbook.assets.cs-week1-projects",
        "documentation": {}
    },
    {
        "label": "digitsManipulations",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-week1-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-week1-projects",
        "peekOfCode": "def digitsManipulations(n):\n    nums = []\n    for num in str(n):\n        nums.append(int(num))\n    return math.prod(nums) - sum(nums)\n#\n# print(digitsManipulations(n))\ns = \"abcde\"\ndef countVowelConsonant(s):\n    vowel_count = 0",
        "detail": "python-gitbook-master..gitbook.assets.cs-week1-projects",
        "documentation": {}
    },
    {
        "label": "countVowelConsonant",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-week1-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-week1-projects",
        "peekOfCode": "def countVowelConsonant(s):\n    vowel_count = 0\n    const_count = 0\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for letter in s:\n        if letter in vowels:\n            vowel_count += 1\n        else:\n            const_count += 2\n    return vowel_count + const_count",
        "detail": "python-gitbook-master..gitbook.assets.cs-week1-projects",
        "documentation": {}
    },
    {
        "label": "contains_duplicate_2",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-week1-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-week1-projects",
        "peekOfCode": "def contains_duplicate_2(nums):\n    # overall runtime: O(nlogn + n) --> O(n log n)\n    # space complexity: O(1)\n    nums.sort()  # sorting is usually O(n log n)\n    # nums.sort() sorts it in place\n    # everything below this line is O(n)\n    i = 0  # O(1)\n    while i < len(nums) - 1:  # up to O(n)\n        if nums[i] == nums[i + 1]:  # O(1)\n            return True",
        "detail": "python-gitbook-master..gitbook.assets.cs-week1-projects",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-week1-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-week1-projects",
        "peekOfCode": "s = 'abacaba'\n# def threeCharsDistinct(s):\n#     count = 0\n#\n#     for i in range(len(s)):\n#         if i < 6:\n#             if s[0] != s[i + 1] and s[i] != s[i + 2] and s[i + 1] != s[i + 2]:\n#                 count += 1\n#     print(count)\ndef threeCharsDistinct(s):",
        "detail": "python-gitbook-master..gitbook.assets.cs-week1-projects",
        "documentation": {}
    },
    {
        "label": "sentence",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-week1-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-week1-projects",
        "peekOfCode": "sentence = \"Man bites dog\"\ndef reverseSentence(sentence):\n    words_array = sentence.split(' ')\n    words_reversed = ' '.join(reversed(words_array))\n    return words_reversed\n# print(reverseSentence(sentence))\npasscode = '1111'\nattempts = [\"1111\",\n            \"4444\",\n            \"9999\",",
        "detail": "python-gitbook-master..gitbook.assets.cs-week1-projects",
        "documentation": {}
    },
    {
        "label": "passcode",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-week1-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-week1-projects",
        "peekOfCode": "passcode = '1111'\nattempts = [\"1111\",\n            \"4444\",\n            \"9999\",\n            \"3333\",\n            \"8888\",\n            \"2222\",\n            \"7777\",\n            \"0000\",\n            \"6666\",",
        "detail": "python-gitbook-master..gitbook.assets.cs-week1-projects",
        "documentation": {}
    },
    {
        "label": "attempts",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-week1-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-week1-projects",
        "peekOfCode": "attempts = [\"1111\",\n            \"4444\",\n            \"9999\",\n            \"3333\",\n            \"8888\",\n            \"2222\",\n            \"7777\",\n            \"0000\",\n            \"6666\",\n            \"7285\",",
        "detail": "python-gitbook-master..gitbook.assets.cs-week1-projects",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-week1-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-week1-projects",
        "peekOfCode": "n = 412\ndef digitSumsDifference(n):\n    evens_sum = 0\n    odds_sum = 0\n    difference = 0\n    evens = []\n    odds = []\n    for num in str(n):\n        if int(num) % 2 == 0:\n            evens.append(int(num))",
        "detail": "python-gitbook-master..gitbook.assets.cs-week1-projects",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-week1-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-week1-projects",
        "peekOfCode": "n = 123456\ndef digitsManipulations(n):\n    nums = []\n    for num in str(n):\n        nums.append(int(num))\n    return math.prod(nums) - sum(nums)\n#\n# print(digitsManipulations(n))\ns = \"abcde\"\ndef countVowelConsonant(s):",
        "detail": "python-gitbook-master..gitbook.assets.cs-week1-projects",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-week1-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-week1-projects",
        "peekOfCode": "s = \"abcde\"\ndef countVowelConsonant(s):\n    vowel_count = 0\n    const_count = 0\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for letter in s:\n        if letter in vowels:\n            vowel_count += 1\n        else:\n            const_count += 2",
        "detail": "python-gitbook-master..gitbook.assets.cs-week1-projects",
        "documentation": {}
    },
    {
        "label": "remove_duplicates",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-week2-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "def remove_duplicates(nums):\n    # Your code here\n    i = 0\n    while i < len(nums) - 1:\n        if nums[i] == nums[i + 1]:\n            nums.pop(i + 1)\n        else:\n            i = i + 1\n    return nums\n\"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "contains_duplicate",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-week2-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "def contains_duplicate(nums):\n    # Your code here\n    num_set = set(nums)\n    if len(num_set) == len(nums):\n        return False\n    else:\n        return True\n# print(contains_duplicate([1, 3, 3, 2, 1]))\n\"\"\"\nGiven two strings `a` and `b`, write a function to determine if `a` is an",
        "detail": "python-gitbook-master..gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "is_anagram",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-week2-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "def is_anagram(a, b):\n    # Your code here\n    pass\n# # \"\"\"\n# # Example One\n# # \"\"\"\n# # my_list1 = [1, 2, 3, 4, 5, 6]\n# # my_list2 = my_list1\n# # # How would you verify that my_list1 and my_list2 have the same identity?\n# # print(id(my_list1) == id(my_list2))",
        "detail": "python-gitbook-master..gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "fibonacci",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-week2-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "def fibonacci(n):\n    lst = [0, 1]\n    for i in range(2, n):\n        lst.append(lst[i - 2] + lst[i - 1])\n    return lst[n - 1]\n# # O(n)\n#\n# \"\"\"\n# Use Big O notation to classify the space complexity of the function below.\n# \"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "fibonacci_two",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-week2-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "def fibonacci_two(n):\n    x, y, z = 0, 1, None\n    if n == 0:\n        return x\n    if n == 1:\n        return y\n    for i in range(2, n):\n        z = x + y\n        x, y = y, z\n    return z",
        "detail": "python-gitbook-master..gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "do_something",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-week2-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "def do_something(n):\n    lst = []\n    for i in range(n):\n        for j in range(n):\n            lst.append(i + j)\n    return lst\n# O(n^2)\n# numbers = [2, 0, 0, 0]\n#\n#",
        "detail": "python-gitbook-master..gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "removeEvens",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-week2-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "def removeEvens(numbers):\n    return [num for num in numbers if num % 2 != 0]\n# below code didn't pass tests above did\n# for num in numbers:\n#     if num % 2 == 0 and num != 0:\n#         numbers.remove(num)\n# return numbers\n# print(removeEvens(numbers))\nimport statistics\nsequence = [-1, 3, -2, 2]",
        "detail": "python-gitbook-master..gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "arrayMedian",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-week2-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "def arrayMedian(sequence):\n    return statistics.median(sequence)\n# print(arrayMedian(sequence))\n#\n# s = \"TuVwXYZ\"\n#\n# # s = \"ABCDEFFDEfghCBA\"\n#\n# # def originalIncreasingSubstrings(s):\n# #     string = ''",
        "detail": "python-gitbook-master..gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "increasingSubstrings",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-week2-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "def increasingSubstrings(s):\n    string = ''\n    subs = []\n    i = 0\n    if len(s) == 1:\n        subs.append(s[0])\n    else:\n        for i in range(len(s) - 1):\n            # print(s[i])\n            if not string.startswith(s[i]):",
        "detail": "python-gitbook-master..gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "additionWithoutCarrying",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-week2-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "def additionWithoutCarrying(param1, param2):\n    # set variable to hold the added row answers\n    result = []\n    # function to find a digit in a number\n    def find_digit(number, place):\n        return number // 10 ** place % 10\n    # get larger number\n    larger = None\n    if param1 > param2:\n        larger = param1",
        "detail": "python-gitbook-master..gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "evenDigitsNumber",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-week2-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "def evenDigitsNumber(a):\n    even_count = 0\n    for group in a:\n        if len(str(group)) % 2 == 0:\n            even_count += 1\n    return even_count\n# print(evenDigitsNumber(a))\n# You're writing a new programming language and you'd like it to have the capability of splitting a string into substrings with limited characters. More specifically, we'll call a substring good if the absolute difference in ASCII codes between any two of its characters is less than or equal to k.\n#\n# For example, if k = 3, then the string \"bad\" would be considered good, since the greatest difference in ASCII codes is 3 (between the a and d characters). The string \"nice\" would not be considered good, since there's a difference of 11 between the c and n characters.",
        "detail": "python-gitbook-master..gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "increasingSubstrings",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-week2-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "def increasingSubstrings(s):\n    string = ''\n    subs = []\n    i = 0\n    if len(s) == 1:\n        subs.append(s[0])\n    else:\n        for i in range(len(s) - 1):\n            # print(s[i])\n            if not string.startswith(s[i]):",
        "detail": "python-gitbook-master..gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "goodSubstrings",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-week2-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "def goodSubstrings(strToSplit, k):\n    smallest = ord(strToSplit[0])\n    largest = 0\n    subs = []\n    s = ''\n    for i in range(len(strToSplit)):\n        # print('Letter', strToSplit[i],\n        #       ord(strToSplit[i]))\n        # print(f'smallest: {smallest} largest: {largest}')\n        if ord(strToSplit[i]) < smallest:",
        "detail": "python-gitbook-master..gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "to_lower_case",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-week2-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "def to_lower_case(string):\n    result = ''\n    for i in range(len(string)):\n        if ord(string[i]) <= 90 or ord(string[i]) <= 65:\n            result += chr(ord(string[i]) + 32)\n        else:\n            result += string[i]\n    return result\n# print(to_lower_case(string))\n\"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "roman_to_integer",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-week2-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "def roman_to_integer(roman):\n    numerals = {\n        'I': 1,\n        'V': 5,\n        'X': 10,\n        'L': 50,\n        'C': 100,\n        'D': 500,\n        'M': 1000,\n        'IV': 4,",
        "detail": "python-gitbook-master..gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "find_lucky",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-week2-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "def find_lucky(lst):\n    lucky = []\n    for num in lst:\n        if num == lst.count(num):\n            lucky.append(num)\n    if not lucky:\n        return -1\n    return max(lucky)\n# print(find_lucky(lst))",
        "detail": "python-gitbook-master..gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "sequence",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-week2-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "sequence = [-1, 3, -2, 2]\ndef arrayMedian(sequence):\n    return statistics.median(sequence)\n# print(arrayMedian(sequence))\n#\n# s = \"TuVwXYZ\"\n#\n# # s = \"ABCDEFFDEfghCBA\"\n#\n# # def originalIncreasingSubstrings(s):",
        "detail": "python-gitbook-master..gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-week2-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "s = \"f\"\ndef increasingSubstrings(s):\n    string = ''\n    subs = []\n    i = 0\n    if len(s) == 1:\n        subs.append(s[0])\n    else:\n        for i in range(len(s) - 1):\n            # print(s[i])",
        "detail": "python-gitbook-master..gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "param1",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-week2-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "param1 = 456\nparam2 = 1734\ndef additionWithoutCarrying(param1, param2):\n    # set variable to hold the added row answers\n    result = []\n    # function to find a digit in a number\n    def find_digit(number, place):\n        return number // 10 ** place % 10\n    # get larger number\n    larger = None",
        "detail": "python-gitbook-master..gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "param2",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-week2-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "param2 = 1734\ndef additionWithoutCarrying(param1, param2):\n    # set variable to hold the added row answers\n    result = []\n    # function to find a digit in a number\n    def find_digit(number, place):\n        return number // 10 ** place % 10\n    # get larger number\n    larger = None\n    if param1 > param2:",
        "detail": "python-gitbook-master..gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-week2-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "a = [12, 134, 111, 1111, 10]\ndef evenDigitsNumber(a):\n    even_count = 0\n    for group in a:\n        if len(str(group)) % 2 == 0:\n            even_count += 1\n    return even_count\n# print(evenDigitsNumber(a))\n# You're writing a new programming language and you'd like it to have the capability of splitting a string into substrings with limited characters. More specifically, we'll call a substring good if the absolute difference in ASCII codes between any two of its characters is less than or equal to k.\n#",
        "detail": "python-gitbook-master..gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "strToSplit",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-week2-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "strToSplit = \"aaabaaabb\"\nk = 0\nstrToSplit = \"aaabaaabb\"\nk = 1\nstrToSplit = \"aaabzaaabb\"\nk = 5\ndef goodSubstrings(strToSplit, k):\n    smallest = ord(strToSplit[0])\n    largest = 0\n    subs = []",
        "detail": "python-gitbook-master..gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-week2-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "k = 0\nstrToSplit = \"aaabaaabb\"\nk = 1\nstrToSplit = \"aaabzaaabb\"\nk = 5\ndef goodSubstrings(strToSplit, k):\n    smallest = ord(strToSplit[0])\n    largest = 0\n    subs = []\n    s = ''",
        "detail": "python-gitbook-master..gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "strToSplit",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-week2-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "strToSplit = \"aaabaaabb\"\nk = 1\nstrToSplit = \"aaabzaaabb\"\nk = 5\ndef goodSubstrings(strToSplit, k):\n    smallest = ord(strToSplit[0])\n    largest = 0\n    subs = []\n    s = ''\n    for i in range(len(strToSplit)):",
        "detail": "python-gitbook-master..gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-week2-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "k = 1\nstrToSplit = \"aaabzaaabb\"\nk = 5\ndef goodSubstrings(strToSplit, k):\n    smallest = ord(strToSplit[0])\n    largest = 0\n    subs = []\n    s = ''\n    for i in range(len(strToSplit)):\n        # print('Letter', strToSplit[i],",
        "detail": "python-gitbook-master..gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "strToSplit",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-week2-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "strToSplit = \"aaabzaaabb\"\nk = 5\ndef goodSubstrings(strToSplit, k):\n    smallest = ord(strToSplit[0])\n    largest = 0\n    subs = []\n    s = ''\n    for i in range(len(strToSplit)):\n        # print('Letter', strToSplit[i],\n        #       ord(strToSplit[i]))",
        "detail": "python-gitbook-master..gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-week2-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "k = 5\ndef goodSubstrings(strToSplit, k):\n    smallest = ord(strToSplit[0])\n    largest = 0\n    subs = []\n    s = ''\n    for i in range(len(strToSplit)):\n        # print('Letter', strToSplit[i],\n        #       ord(strToSplit[i]))\n        # print(f'smallest: {smallest} largest: {largest}')",
        "detail": "python-gitbook-master..gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-week2-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "string = \"LambdaSchool\"\ndef to_lower_case(string):\n    result = ''\n    for i in range(len(string)):\n        if ord(string[i]) <= 90 or ord(string[i]) <= 65:\n            result += chr(ord(string[i]) + 32)\n        else:\n            result += string[i]\n    return result\n# print(to_lower_case(string))",
        "detail": "python-gitbook-master..gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "roman",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-week2-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "roman = 'IV'\nroman = 'XII'\nroman = \"MCMLXXXIV\"\n#  TODO finish this!\ndef roman_to_integer(roman):\n    numerals = {\n        'I': 1,\n        'V': 5,\n        'X': 10,\n        'L': 50,",
        "detail": "python-gitbook-master..gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "roman",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-week2-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "roman = 'XII'\nroman = \"MCMLXXXIV\"\n#  TODO finish this!\ndef roman_to_integer(roman):\n    numerals = {\n        'I': 1,\n        'V': 5,\n        'X': 10,\n        'L': 50,\n        'C': 100,",
        "detail": "python-gitbook-master..gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "roman",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-week2-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "roman = \"MCMLXXXIV\"\n#  TODO finish this!\ndef roman_to_integer(roman):\n    numerals = {\n        'I': 1,\n        'V': 5,\n        'X': 10,\n        'L': 50,\n        'C': 100,\n        'D': 500,",
        "detail": "python-gitbook-master..gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "lst",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-week2-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "lst = [2, 2, 3, 3, 3, 4, 4, 4, 4]\n#  O(n^2) because counting in the loop...\ndef find_lucky(lst):\n    lucky = []\n    for num in lst:\n        if num == lst.count(num):\n            lucky.append(num)\n    if not lucky:\n        return -1\n    return max(lucky)",
        "detail": "python-gitbook-master..gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "remove_duplicates",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-week2-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-week2-projects",
        "peekOfCode": "def remove_duplicates(nums):\n    # Your code here\n    i = 0\n    while i < len(nums) - 1:\n        if nums[i] == nums[i + 1]:\n            nums.pop(i + 1)\n        else:\n            i = i + 1\n    return nums\n\"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "contains_duplicate",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-week2-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-week2-projects",
        "peekOfCode": "def contains_duplicate(nums):\n    # Your code here\n    num_set = set(nums)\n    if len(num_set) == len(nums):\n        return False\n    else:\n        return True\n# print(contains_duplicate([1, 3, 3, 2, 1]))\n\"\"\"\nGiven two strings `a` and `b`, write a function to determine if `a` is an",
        "detail": "python-gitbook-master..gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "is_anagram",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-week2-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-week2-projects",
        "peekOfCode": "def is_anagram(a, b):\n    # Your code here\n    pass\n# # \"\"\"\n# # Example One\n# # \"\"\"\n# # my_list1 = [1, 2, 3, 4, 5, 6]\n# # my_list2 = my_list1\n# # # How would you verify that my_list1 and my_list2 have the same identity?\n# # print(id(my_list1) == id(my_list2))",
        "detail": "python-gitbook-master..gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "fibonacci",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-week2-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-week2-projects",
        "peekOfCode": "def fibonacci(n):\n    lst = [0, 1]\n    for i in range(2, n):\n        lst.append(lst[i - 2] + lst[i - 1])\n    return lst[n - 1]\n# # O(n)\n#\n# \"\"\"\n# Use Big O notation to classify the space complexity of the function below.\n# \"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "fibonacci_two",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-week2-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-week2-projects",
        "peekOfCode": "def fibonacci_two(n):\n    x, y, z = 0, 1, None\n    if n == 0:\n        return x\n    if n == 1:\n        return y\n    for i in range(2, n):\n        z = x + y\n        x, y = y, z\n    return z",
        "detail": "python-gitbook-master..gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "do_something",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-week2-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-week2-projects",
        "peekOfCode": "def do_something(n):\n    lst = []\n    for i in range(n):\n        for j in range(n):\n            lst.append(i + j)\n    return lst\n# O(n^2)\n# numbers = [2, 0, 0, 0]\n#\n#",
        "detail": "python-gitbook-master..gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "removeEvens",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-week2-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-week2-projects",
        "peekOfCode": "def removeEvens(numbers):\n    return [num for num in numbers if num % 2 != 0]\n# below code didn't pass tests above did\n# for num in numbers:\n#     if num % 2 == 0 and num != 0:\n#         numbers.remove(num)\n# return numbers\n# print(removeEvens(numbers))\nimport statistics\nsequence = [-1, 3, -2, 2]",
        "detail": "python-gitbook-master..gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "arrayMedian",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-week2-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-week2-projects",
        "peekOfCode": "def arrayMedian(sequence):\n    return statistics.median(sequence)\n# print(arrayMedian(sequence))\n#\n# s = \"TuVwXYZ\"\n#\n# # s = \"ABCDEFFDEfghCBA\"\n#\n# # def originalIncreasingSubstrings(s):\n# #     string = ''",
        "detail": "python-gitbook-master..gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "increasingSubstrings",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-week2-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-week2-projects",
        "peekOfCode": "def increasingSubstrings(s):\n    string = ''\n    subs = []\n    i = 0\n    if len(s) == 1:\n        subs.append(s[0])\n    else:\n        for i in range(len(s) - 1):\n            # print(s[i])\n            if not string.startswith(s[i]):",
        "detail": "python-gitbook-master..gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "additionWithoutCarrying",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-week2-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-week2-projects",
        "peekOfCode": "def additionWithoutCarrying(param1, param2):\n    # set variable to hold the added row answers\n    result = []\n    # function to find a digit in a number\n    def find_digit(number, place):\n        return number // 10 ** place % 10\n    # get larger number\n    larger = None\n    if param1 > param2:\n        larger = param1",
        "detail": "python-gitbook-master..gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "evenDigitsNumber",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-week2-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-week2-projects",
        "peekOfCode": "def evenDigitsNumber(a):\n    even_count = 0\n    for group in a:\n        if len(str(group)) % 2 == 0:\n            even_count += 1\n    return even_count\n# print(evenDigitsNumber(a))\n# You're writing a new programming language and you'd like it to have the capability of splitting a string into substrings with limited characters. More specifically, we'll call a substring good if the absolute difference in ASCII codes between any two of its characters is less than or equal to k.\n#\n# For example, if k = 3, then the string \"bad\" would be considered good, since the greatest difference in ASCII codes is 3 (between the a and d characters). The string \"nice\" would not be considered good, since there's a difference of 11 between the c and n characters.",
        "detail": "python-gitbook-master..gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "increasingSubstrings",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-week2-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-week2-projects",
        "peekOfCode": "def increasingSubstrings(s):\n    string = ''\n    subs = []\n    i = 0\n    if len(s) == 1:\n        subs.append(s[0])\n    else:\n        for i in range(len(s) - 1):\n            # print(s[i])\n            if not string.startswith(s[i]):",
        "detail": "python-gitbook-master..gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "goodSubstrings",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-week2-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-week2-projects",
        "peekOfCode": "def goodSubstrings(strToSplit, k):\n    smallest = ord(strToSplit[0])\n    largest = 0\n    subs = []\n    s = ''\n    for i in range(len(strToSplit)):\n        # print('Letter', strToSplit[i],\n        #       ord(strToSplit[i]))\n        # print(f'smallest: {smallest} largest: {largest}')\n        if ord(strToSplit[i]) < smallest:",
        "detail": "python-gitbook-master..gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "to_lower_case",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-week2-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-week2-projects",
        "peekOfCode": "def to_lower_case(string):\n    result = ''\n    for i in range(len(string)):\n        if ord(string[i]) <= 90 or ord(string[i]) <= 65:\n            result += chr(ord(string[i]) + 32)\n        else:\n            result += string[i]\n    return result\n# print(to_lower_case(string))\n\"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "roman_to_integer",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-week2-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-week2-projects",
        "peekOfCode": "def roman_to_integer(roman):\n    numerals = {\n        'I': 1,\n        'V': 5,\n        'X': 10,\n        'L': 50,\n        'C': 100,\n        'D': 500,\n        'M': 1000,\n        'IV': 4,",
        "detail": "python-gitbook-master..gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "find_lucky",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-week2-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-week2-projects",
        "peekOfCode": "def find_lucky(lst):\n    lucky = []\n    for num in lst:\n        if num == lst.count(num):\n            lucky.append(num)\n    if not lucky:\n        return -1\n    return max(lucky)\n# print(find_lucky(lst))",
        "detail": "python-gitbook-master..gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "sequence",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-week2-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-week2-projects",
        "peekOfCode": "sequence = [-1, 3, -2, 2]\ndef arrayMedian(sequence):\n    return statistics.median(sequence)\n# print(arrayMedian(sequence))\n#\n# s = \"TuVwXYZ\"\n#\n# # s = \"ABCDEFFDEfghCBA\"\n#\n# # def originalIncreasingSubstrings(s):",
        "detail": "python-gitbook-master..gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-week2-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-week2-projects",
        "peekOfCode": "s = \"f\"\ndef increasingSubstrings(s):\n    string = ''\n    subs = []\n    i = 0\n    if len(s) == 1:\n        subs.append(s[0])\n    else:\n        for i in range(len(s) - 1):\n            # print(s[i])",
        "detail": "python-gitbook-master..gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "param1",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-week2-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-week2-projects",
        "peekOfCode": "param1 = 456\nparam2 = 1734\ndef additionWithoutCarrying(param1, param2):\n    # set variable to hold the added row answers\n    result = []\n    # function to find a digit in a number\n    def find_digit(number, place):\n        return number // 10 ** place % 10\n    # get larger number\n    larger = None",
        "detail": "python-gitbook-master..gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "param2",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-week2-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-week2-projects",
        "peekOfCode": "param2 = 1734\ndef additionWithoutCarrying(param1, param2):\n    # set variable to hold the added row answers\n    result = []\n    # function to find a digit in a number\n    def find_digit(number, place):\n        return number // 10 ** place % 10\n    # get larger number\n    larger = None\n    if param1 > param2:",
        "detail": "python-gitbook-master..gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-week2-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-week2-projects",
        "peekOfCode": "a = [12, 134, 111, 1111, 10]\ndef evenDigitsNumber(a):\n    even_count = 0\n    for group in a:\n        if len(str(group)) % 2 == 0:\n            even_count += 1\n    return even_count\n# print(evenDigitsNumber(a))\n# You're writing a new programming language and you'd like it to have the capability of splitting a string into substrings with limited characters. More specifically, we'll call a substring good if the absolute difference in ASCII codes between any two of its characters is less than or equal to k.\n#",
        "detail": "python-gitbook-master..gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "strToSplit",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-week2-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-week2-projects",
        "peekOfCode": "strToSplit = \"aaabaaabb\"\nk = 0\nstrToSplit = \"aaabaaabb\"\nk = 1\nstrToSplit = \"aaabzaaabb\"\nk = 5\ndef goodSubstrings(strToSplit, k):\n    smallest = ord(strToSplit[0])\n    largest = 0\n    subs = []",
        "detail": "python-gitbook-master..gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-week2-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-week2-projects",
        "peekOfCode": "k = 0\nstrToSplit = \"aaabaaabb\"\nk = 1\nstrToSplit = \"aaabzaaabb\"\nk = 5\ndef goodSubstrings(strToSplit, k):\n    smallest = ord(strToSplit[0])\n    largest = 0\n    subs = []\n    s = ''",
        "detail": "python-gitbook-master..gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "strToSplit",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-week2-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-week2-projects",
        "peekOfCode": "strToSplit = \"aaabaaabb\"\nk = 1\nstrToSplit = \"aaabzaaabb\"\nk = 5\ndef goodSubstrings(strToSplit, k):\n    smallest = ord(strToSplit[0])\n    largest = 0\n    subs = []\n    s = ''\n    for i in range(len(strToSplit)):",
        "detail": "python-gitbook-master..gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-week2-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-week2-projects",
        "peekOfCode": "k = 1\nstrToSplit = \"aaabzaaabb\"\nk = 5\ndef goodSubstrings(strToSplit, k):\n    smallest = ord(strToSplit[0])\n    largest = 0\n    subs = []\n    s = ''\n    for i in range(len(strToSplit)):\n        # print('Letter', strToSplit[i],",
        "detail": "python-gitbook-master..gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "strToSplit",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-week2-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-week2-projects",
        "peekOfCode": "strToSplit = \"aaabzaaabb\"\nk = 5\ndef goodSubstrings(strToSplit, k):\n    smallest = ord(strToSplit[0])\n    largest = 0\n    subs = []\n    s = ''\n    for i in range(len(strToSplit)):\n        # print('Letter', strToSplit[i],\n        #       ord(strToSplit[i]))",
        "detail": "python-gitbook-master..gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-week2-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-week2-projects",
        "peekOfCode": "k = 5\ndef goodSubstrings(strToSplit, k):\n    smallest = ord(strToSplit[0])\n    largest = 0\n    subs = []\n    s = ''\n    for i in range(len(strToSplit)):\n        # print('Letter', strToSplit[i],\n        #       ord(strToSplit[i]))\n        # print(f'smallest: {smallest} largest: {largest}')",
        "detail": "python-gitbook-master..gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-week2-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-week2-projects",
        "peekOfCode": "string = \"LambdaSchool\"\ndef to_lower_case(string):\n    result = ''\n    for i in range(len(string)):\n        if ord(string[i]) <= 90 or ord(string[i]) <= 65:\n            result += chr(ord(string[i]) + 32)\n        else:\n            result += string[i]\n    return result\n# print(to_lower_case(string))",
        "detail": "python-gitbook-master..gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "roman",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-week2-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-week2-projects",
        "peekOfCode": "roman = 'IV'\nroman = 'XII'\nroman = \"MCMLXXXIV\"\n#  TODO finish this!\ndef roman_to_integer(roman):\n    numerals = {\n        'I': 1,\n        'V': 5,\n        'X': 10,\n        'L': 50,",
        "detail": "python-gitbook-master..gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "roman",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-week2-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-week2-projects",
        "peekOfCode": "roman = 'XII'\nroman = \"MCMLXXXIV\"\n#  TODO finish this!\ndef roman_to_integer(roman):\n    numerals = {\n        'I': 1,\n        'V': 5,\n        'X': 10,\n        'L': 50,\n        'C': 100,",
        "detail": "python-gitbook-master..gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "roman",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-week2-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-week2-projects",
        "peekOfCode": "roman = \"MCMLXXXIV\"\n#  TODO finish this!\ndef roman_to_integer(roman):\n    numerals = {\n        'I': 1,\n        'V': 5,\n        'X': 10,\n        'L': 50,\n        'C': 100,\n        'D': 500,",
        "detail": "python-gitbook-master..gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "lst",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-week2-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-week2-projects",
        "peekOfCode": "lst = [2, 2, 3, 3, 3, 4, 4, 4, 4]\n#  O(n^2) because counting in the loop...\ndef find_lucky(lst):\n    lucky = []\n    for num in lst:\n        if num == lst.count(num):\n            lucky.append(num)\n    if not lucky:\n        return -1\n    return max(lucky)",
        "detail": "python-gitbook-master..gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "LinkedListNode",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "class LinkedListNode():\n    def __init__(self, value):\n        self.value = value\n        self.next  = None\nx = LinkedListNode('X')\ny = LinkedListNode('Y')\nz = LinkedListNode('Z')\nx.next = y\ny.next = z\ndelete_node(y)",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "LinkedListNode",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "class LinkedListNode():\n    def __init__(self, value):\n        self.value = value\n        self.next = None\ndef delete_node(node_to_delete):\n    next = node_to_delete.next\n    next.next = None\n    node_to_delete.value = next.value\n    node_to_delete.next = next.next\nx = LinkedListNode('X')",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "LinkedListNode",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "class LinkedListNode():\n    def __init__(self, value):\n        self.value = value\n        self.next = None\ndef reverse(head_of_list):\n    current_node = head_of_list\n    previous_node = None\n    next_node = None\n    # Until we have 'fallen off' the end of the list\n    while current_node:",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "class ListNode(object):\n    def __init__(self, x):\n        self.value = x\n        self.next = None\n[1, 3, 4, 6]\n\"\"\"\nNote: Your solution should have O(n) time complexity, where n is the number of elements in l, since this is what you will be asked to accomplish in an interview.\nYou have a singly linked list l, which is sorted in strictly increasing order, and an integer value. Add value to the list l, preserving its original sorting.\nNote: in examples below and tests preview linked lists are presented as arrays just for simplicity of visualization: in real data you will be given a head node l of the linked list\nExample",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "class ListNode(object):\n    def __init__(self, x):\n        self.value = x\n        self.next = None\ndef mergeTwoLinkedLists(l1, l2):\n    # create empty node to hold the new merged list\n    merged_node = ListNode(0)\n    # end will hold the end node\n    end = merged_node\n    while True:",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "class ListNode(object):\n    def __init__(self, x):\n        self.value = x\n        self.next = None\ndef reverseNodesInKGroups(l, k):\n    # create an empty node to hold the new list\n    new_node = ListNode(0)\n    # set the next value to the list\n    new_node.next = l\n    # set the previous node to the new list",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "LinkedListNode",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "class LinkedListNode:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\nclass Queue:\n    def __init__(self):\n        self.front = None\n        self.rear = None\n    def enqueue(self, item):\n        new_node = LinkedListNode(item)",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "Queue",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "class Queue:\n    def __init__(self):\n        self.front = None\n        self.rear = None\n    def enqueue(self, item):\n        new_node = LinkedListNode(item)\n        # check if queue is empty\n        if self.is_empty():\n            self.front = new_node\n            self.rear = new_node",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "class Stack:\n    def __init__(self):\n        self.data = []\n    def push(self, item):\n        self.data.append(item)\n    # my code for peek method\n    def peek(self, item):\n        return self.data[-1]\n    def pop(self):\n        if len(self.data) > 0:",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "LinkedListNode",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "class LinkedListNode:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\nclass Stack:\n    def __init__(self):\n        self.top = None\n    def push(self, data):\n        # create new node with data\n        new_node = LinkedListNode(data)",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "class Stack:\n    def __init__(self):\n        self.top = None\n    def push(self, data):\n        # create new node with data\n        new_node = LinkedListNode(data)\n        # set current top to new node's next\n        new_node.next = self.top\n        # reset the top pointer to the new node\n        self.top = new_node",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "class Stack(object):\n    def __init__(self):\n        \"\"\"Initialize an empty stack\"\"\"\n        self.items = []\n    def push(self, item):\n        \"\"\"Push a new item onto the stack\"\"\"\n        self.items.append(item)\n    def pop(self):\n        \"\"\"Remove and return the last item\"\"\"\n        # If the stack is empty, return None",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "MaxStack",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "class MaxStack(object):\n    def __init__(self):\n        # Your code here\n        self.stack = Stack()\n        # self.head = []\n        self.max_stack = Stack()\n    def push(self, item):\n        \"\"\"Add a new item onto the top of our stack.\"\"\"\n        # Your code here\n        # self.head.append(item)",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "class Stack:\n    def __init__(self):\n        self.data = []\n    def push(self, item):\n        self.data.append(item)\n    def pop(self):\n        if len(self.data) > 0:\n            return self.data.pop()\n        return \"The stack is empty\"\nclass QueueTwoStacks:",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "QueueTwoStacks",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "class QueueTwoStacks:\n    def __init__(self):\n        # Your code here\n        self.stack1 = Stack()\n        self.stack2 = Stack()\n    def enqueue(self, item):\n        # Your code here\n        self.stack1.push(item)\n    def dequeue(self):\n        # Your code here",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "class Stack:\n    def __init__(self):\n        self.items = []\n    def isEmpty(self):\n        return self.items == []\n    def push(self, item):\n        self.items.append(item)\n    def pop(self):\n        return self.items.pop()\ndef queueOnStacks(requests):",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "pivot_index",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def pivot_index(nums):\n    if len(nums) <= 1:\n        return -1\n    left = 0\n    right = sum(nums)\n    for i in range(len(nums)):\n        right -= nums[i]\n        if right == left:\n            return i\n        left += nums[i]",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "plus_one",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def plus_one(digits):\n    # check the last digit if its not 9 we just add 1\n    # if it is a 9 make it 0\n    # go left check 2nd to last if its not a 9 add 1\n    # if it is a 9\n    index = len(digits) - 1\n    while index >= 0 and digits[index] == 9:\n        digits[index] = 0\n        index -= 1\n    if index == -1:",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "buyAndSellStock",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def buyAndSellStock(prices):\n    length = len(prices)\n    # iterate array, for each item after subtract and store the amount as\n    # highest profit.. replace if needed with a higher profit\n    if prices == sorted(prices, reverse=True) or len(prices) < 2:\n        return 0\n    highest_profit = prices[1] - prices[0]\n    smallest_number = prices[0]\n    for i in range(1, length):\n        # only check if the selected number minus the smallest number before",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "alphabeticShift",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def alphabeticShift(inputString):\n    new_string = ''\n    for letter in inputString:\n        new_letter = ord(letter) + 1\n        if new_letter == 123:\n            new_letter = 97\n        new_string += chr(new_letter)\n    return new_string\n# print(alphabeticShift(inputString))\n\"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "validParenthesesSequence",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def validParenthesesSequence(s):\n    check = []\n    if s == '':\n        return True\n    if s[0] == ')':\n        return False\n    for paren in s:\n        if paren == '(':\n            check.append(paren)\n        else:",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "delete_node",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def delete_node(node_to_delete):\n    next = node_to_delete.next\n    next.next = None\n    node_to_delete.value = next.value\n    node_to_delete.next = next.next\nx = LinkedListNode('X')\ny = LinkedListNode('Y')\nz = LinkedListNode('Z')\nx.next = y\ny.next = z",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "reverse",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def reverse(head_of_list):\n    current_node = head_of_list\n    previous_node = None\n    next_node = None\n    # Until we have 'fallen off' the end of the list\n    while current_node:\n        # Copy a pointer to the next element\n        # before we overwrite current_node.next\n        next_node = current_node.next\n        # Reverse the 'next' pointer",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "insertValueIntoSortedLinkedList",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def insertValueIntoSortedLinkedList(l, value):\n    # create a new node with the value\n    node = ListNode(value)\n    # if there is no list return the new node\n    if l == None:\n        return node\n    else:\n        # else if the list.value (first item in the list) > the new value\n        if l.value > value:\n            # set new values as the first item in the list",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "mergeTwoLinkedLists",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def mergeTwoLinkedLists(l1, l2):\n    # create empty node to hold the new merged list\n    merged_node = ListNode(0)\n    # end will hold the end node\n    end = merged_node\n    while True:\n        # if either list becomes empty join lists\n        if l1 is None:\n            end.next = l2\n            break",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "reverseNodesInKGroups",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def reverseNodesInKGroups(l, k):\n    # create an empty node to hold the new list\n    new_node = ListNode(0)\n    # set the next value to the list\n    new_node.next = l\n    # set the previous node to the new list\n    prev = new_node\n    while True:\n        # set the start to the new node next\n        start = prev.next",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "reverse_list",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def reverse_list(start, end):\n    # set the last reversed group to the new start\n    old_reversed = start\n    # set the new current to the start\n    current = start\n    # set next node to the node start is pointing to\n    next_node = start.next\n    # while the current node is not the last node\n    while current != end:\n        # iterate",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "is_valid",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def is_valid(code):\n    check = []\n    if code == '':\n        return True\n    if code[0] == ')' or code[0] == '}' or code[0] == ']':\n        return False\n    for paren in code:\n        if paren == ' ':\n            continue\n        if paren == '(' or paren == '{' or paren == '[':",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "queueOnStacks",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def queueOnStacks(requests):\n    left = Stack()\n    right = Stack()\n    def insert(x):\n        left.push(x)\n        print('queue:', left.items)\n    def remove():\n        if len(right.items) == 0:\n            while len(left.items) > 0:\n                shifted = left.pop()",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "validBracketSequence",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def validBracketSequence(sequence):\n    pairs = dict(zip('(,[,{', '),],}'))\n    stack = []\n    for item in sequence:\n        if item in pairs:\n            stack.append(pairs[item])\n        elif not (stack and item == stack.pop()):\n            return False\n    return not stack\n# print(validBracketSequence(sequence))",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "fibonacciSimpleSum2",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def fibonacciSimpleSum2(n):\n    # if 0 is less than n and n is less than 5 then we know we can return\n    # true because n will be 1-4 which can be created with 2 fib numbers\n    if 0 < n < 5:\n        return True\n    # first get fibonacci sequence up to n\n    seq = [0, 1]\n    # starting from 2 and ending at n\n    for i in range(2, n):\n        # add seq at i - 2 (0 to start) and seq at i - 1 (1 to start)",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "csBinarySearch",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def csBinarySearch(nums, target):\n    min = 0\n    max = len(nums) - 1\n    while not max < min:\n        guess = (max + min) // 2\n        if nums[guess] == target:\n            return guess\n        elif nums[guess] < target:\n            min = guess + 1\n        else:",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "csSearchRotatedSortedArray",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def csSearchRotatedSortedArray(nums, target):\n    min = 0\n    max = len(nums) - 1\n    while not max < min:\n        guess = (max + min) // 2\n        # print(f'min: {nums[min]} max: {nums[max]} guess:{nums[guess]} target:'\n        #       f' {target}')\n        # if the guess is the target we got it and return the guess\n        if nums[guess] == target:\n            # print('guessed the target')",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "linear_search",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def linear_search(arr, target):\n    # loop through each item in the input array\n    i = len(arr) - 1\n    for idx in range(len(arr)):\n        # check if the item at the current index is equal to the target\n        if arr[i] == target:\n            # return the current index as the match\n            return i\n        i -= 1\n    # if we were able to loop through the entire array, the target is not present",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "recursive_search",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def recursive_search(arr, target):\n    if arr[0] == target:\n        return True\n    elif len(arr[1:]) > 1:\n        return recursive_search(arr[1:], target)\n    return False\n# print(recursive_search(arr, target))\n\"\"\"\nBinary Search\n\"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "binary_search",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def binary_search(arr, target):\n    # 1. Declare min = 0 and max = length of array - 1\n    min = 0\n    max = len(arr) - 1\n    while not max < min:\n        # 2. Figure out the guess value by getting the middle integer between min and max\n        guess = (max + min) // 2\n        # 3. if array[guess] equals the target, we found the element, return the index\n        if arr[guess] == target:\n            return guess",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "binary_recursive_search",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def binary_recursive_search(arr, target, min_index, max_index):\n    if min_index >= max_index:\n        return -1\n    guess = (max_index + min_index) // 2\n    if arr[guess] == target:\n        return guess\n    elif target < arr[guess]:\n        return binary_recursive_search(arr, target, min_index, guess - 1)\n    else:\n        return binary_recursive_search(arr, target, guess + 1, max_index)",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "find_rotation_point",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def find_rotation_point(surnames):\n    # Your code here\n    min = 0\n    max = len(surnames) - 1\n    while not max < min:\n        guess = (min + max) // 2\n        if surnames[guess] < surnames[guess + 1] and surnames[guess] < surnames[\n            guess - 1]:\n            return guess\n        else:",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "find_rotation_point",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def find_rotation_point(surnames):\n    # Your code here\n    # UNDERSTAND\n    # [ 6,   7, 8, 0, 1, 2, 3, 4, 5]\n    #           min max\n    #           mid\n    # [ 7, 0, 1,  2, 3, 4, 5, 6]\n    #  min\n    # max\n    # mid",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "firstDraftWithTypo",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def firstDraftWithTypo(n):\n    # Your code here\n    pass\n    contains_typo = 4\n    min = 0\n    max = len(n) - 1\n    while not max < min:\n        guess = (min + max) // 2\n        # if containsTypo were real this line would be:\n        # if containsTypo(n[guess]) and not containsTypo(n[guess -1]):",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "eating_cookies",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def eating_cookies(n, cache=None):\n    # if n < 0:\n    #     return 0\n    # if n == 0:\n    #     return 1\n    # return eating_cookies(n-1) + eating_cookies(n - 2) + eating_cookies(n -3)\n    # let the cache be 2 longer than n\n    cache = [0] * (n + 2)\n    print(cache)\n    cache[0] = 1",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "removeAdjacent",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def removeAdjacent(s):\n    # add first letter to new string\n    if s == '':\n        return s\n    new_str = s[0]\n    # iterate the string\n    for letter in s:\n        # if the next letter is the same as previous continue\n        if letter == new_str[len(new_str) - 1]:\n            continue",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "reverse_String",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def reverse_String(str):\n    i, j = 0, len(str) - 1\n    print(i, j)\n    while i < j:\n        str[i], str[j] = str[j], str[i]\n        i += 1\n        j -= 1\n    return str\n# print(reverse_String(str))\n\"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "checkPalindrome",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def checkPalindrome(inputString):\n    return inputString == inputString[::-1]\n# print(checkPalindrome(inputString))\n\"\"\"\n*** Data Structures and Algorithms Sprint ***\n---------------------------------------------\n\"\"\"\n\"\"\"\n*** Reverse Linked List ***\n---------------------------",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "reverseLinkedList",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def reverseLinkedList(l):\n    cur = l\n    prev = None\n    next = None\n    while cur:\n        next = cur.next\n        cur.next = prev\n        prev = cur\n        cur = next\n    return prev",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "checkBlanagrams",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def checkBlanagrams(word1, word2):\n    if word1 == '' or word2 == '':\n        return False\n    work_string = ''\n    diff = 0\n    sort1 = sorted(word1)  # O(n) space O(nlogn) time\n    sort2 = sorted(word2)  # O(n) space O(nlogn) time\n    for i in range(len(word1)):  # O(n)\n        # check for substitutions\n        if sort1[i] != sort2[i]:",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "findValueSortedShiftedArray",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def findValueSortedShiftedArray(nums, target):\n    min = 0\n    max = len(nums) - 1\n    while not max < min:\n        guess = (max + min) // 2\n        if nums[guess] == target:\n            return guess\n        elif nums[min] <= nums[guess]:\n            if nums[min] <= target < nums[guess]:\n                max = guess",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "nums",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "nums = [1, 7, 3, 6, 5, 6]\n# nums = [1,2,3]\n#  O(N^2) solution\n# def pivot_index(nums):\n#     # iterate array starting at index 1\n#     # get sum of items on left of i and compare to sum of items on right of i\n#     # if they are equal return i else keep going to the next i\n#     for i in range(len(nums)):\n#         left = sum(nums[:i])\n#         right = sum(nums[i + 1:])",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "prices",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "prices = [3, 100, 1, 97]\n#\n# prices = []\n# prices = [61, 91, 6, 15, 28, 30, 39, 69, 78, 81, 62, 38, 56, 69, 22, 95, 47, 82,\n#           52, 64, 74, 97, 60, 68, 5, 23, 45, 55, 66, 57, 26, 4, 21, 65, 55, 50,\n#           41, 88, 39, 84, 77, 5, 76, 11, 3, 51, 96, 100, 13, 26, 79, 98, 84, 66,\n#           93, 65, 98, 60, 57, 35, 12, 40, 83, 62, 46, 60, 26, 94, 59, 29, 70,\n#           34, 83, 98, 89, 57, 71, 44, 23, 43, 55, 1, 70, 29, 44, 10, 70, 83, 95,\n#           96, 97, 84, 23, 16, 34, 55, 59, 73, 17, 73]\n# def buyAndSellStock(prices):",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "prices",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "prices = [6, 3, 1, 2, 5, 4]\nprices = [8, 5, 3, 1]\nprices = [3, 100, 1, 97]\ndef buyAndSellStock(prices):\n    length = len(prices)\n    # iterate array, for each item after subtract and store the amount as\n    # highest profit.. replace if needed with a higher profit\n    if prices == sorted(prices, reverse=True) or len(prices) < 2:\n        return 0\n    highest_profit = prices[1] - prices[0]",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "prices",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "prices = [8, 5, 3, 1]\nprices = [3, 100, 1, 97]\ndef buyAndSellStock(prices):\n    length = len(prices)\n    # iterate array, for each item after subtract and store the amount as\n    # highest profit.. replace if needed with a higher profit\n    if prices == sorted(prices, reverse=True) or len(prices) < 2:\n        return 0\n    highest_profit = prices[1] - prices[0]\n    smallest_number = prices[0]",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "prices",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "prices = [3, 100, 1, 97]\ndef buyAndSellStock(prices):\n    length = len(prices)\n    # iterate array, for each item after subtract and store the amount as\n    # highest profit.. replace if needed with a higher profit\n    if prices == sorted(prices, reverse=True) or len(prices) < 2:\n        return 0\n    highest_profit = prices[1] - prices[0]\n    smallest_number = prices[0]\n    for i in range(1, length):",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "inputString",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "inputString = \"crazy\"\ndef alphabeticShift(inputString):\n    new_string = ''\n    for letter in inputString:\n        new_letter = ord(letter) + 1\n        if new_letter == 123:\n            new_letter = 97\n        new_string += chr(new_letter)\n    return new_string\n# print(alphabeticShift(inputString))",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "validParenthesesSequence(s)",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "validParenthesesSequence(s) = true;\nFor s = \"()()())\", the output should be\nvalidParenthesesSequence(s) = false\n\"\"\"\ns = \"()()(())\"\ns = \"()()())\"\ndef validParenthesesSequence(s):\n    check = []\n    if s == '':\n        return True",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "validParenthesesSequence(s)",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "validParenthesesSequence(s) = false\n\"\"\"\ns = \"()()(())\"\ns = \"()()())\"\ndef validParenthesesSequence(s):\n    check = []\n    if s == '':\n        return True\n    if s[0] == ')':\n        return False",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "s = \"()()(())\"\ns = \"()()())\"\ndef validParenthesesSequence(s):\n    check = []\n    if s == '':\n        return True\n    if s[0] == ')':\n        return False\n    for paren in s:\n        if paren == '(':",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "s = \"()()())\"\ndef validParenthesesSequence(s):\n    check = []\n    if s == '':\n        return True\n    if s[0] == ')':\n        return False\n    for paren in s:\n        if paren == '(':\n            check.append(paren)",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "x = LinkedListNode('X')\ny = LinkedListNode('Y')\nz = LinkedListNode('Z')\nx.next = y\ny.next = z\ndelete_node(y)\n```\n*Note: We can do this in O(1) time and space! But be aware that our solution will have some side effects...*\n\"\"\"\nclass LinkedListNode():",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "y = LinkedListNode('Y')\nz = LinkedListNode('Z')\nx.next = y\ny.next = z\ndelete_node(y)\n```\n*Note: We can do this in O(1) time and space! But be aware that our solution will have some side effects...*\n\"\"\"\nclass LinkedListNode():\n    def __init__(self, value):",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "z = LinkedListNode('Z')\nx.next = y\ny.next = z\ndelete_node(y)\n```\n*Note: We can do this in O(1) time and space! But be aware that our solution will have some side effects...*\n\"\"\"\nclass LinkedListNode():\n    def __init__(self, value):\n        self.value = value",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "x.next",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "x.next = y\ny.next = z\ndelete_node(y)\n```\n*Note: We can do this in O(1) time and space! But be aware that our solution will have some side effects...*\n\"\"\"\nclass LinkedListNode():\n    def __init__(self, value):\n        self.value = value\n        self.next = None",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "y.next",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "y.next = z\ndelete_node(y)\n```\n*Note: We can do this in O(1) time and space! But be aware that our solution will have some side effects...*\n\"\"\"\nclass LinkedListNode():\n    def __init__(self, value):\n        self.value = value\n        self.next = None\ndef delete_node(node_to_delete):",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "x = LinkedListNode('X')\ny = LinkedListNode('Y')\nz = LinkedListNode('Z')\nx.next = y\ny.next = z\n# print(delete_node(y))\n# print(x.next.value)\n\"\"\"\nGiven a reference to the head node of a singly-linked list, write a function\nthat reverses the linked list in place. The function should return the new head",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "y = LinkedListNode('Y')\nz = LinkedListNode('Z')\nx.next = y\ny.next = z\n# print(delete_node(y))\n# print(x.next.value)\n\"\"\"\nGiven a reference to the head node of a singly-linked list, write a function\nthat reverses the linked list in place. The function should return the new head\nof the reversed list.",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "z = LinkedListNode('Z')\nx.next = y\ny.next = z\n# print(delete_node(y))\n# print(x.next.value)\n\"\"\"\nGiven a reference to the head node of a singly-linked list, write a function\nthat reverses the linked list in place. The function should return the new head\nof the reversed list.\nIn order to do this in O(1) space (in-place), you cannot make a new list, you",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "x.next",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "x.next = y\ny.next = z\n# print(delete_node(y))\n# print(x.next.value)\n\"\"\"\nGiven a reference to the head node of a singly-linked list, write a function\nthat reverses the linked list in place. The function should return the new head\nof the reversed list.\nIn order to do this in O(1) space (in-place), you cannot make a new list, you\nneed to use the existing nodes.",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "y.next",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "y.next = z\n# print(delete_node(y))\n# print(x.next.value)\n\"\"\"\nGiven a reference to the head node of a singly-linked list, write a function\nthat reverses the linked list in place. The function should return the new head\nof the reversed list.\nIn order to do this in O(1) space (in-place), you cannot make a new list, you\nneed to use the existing nodes.\nIn order to do this in O(n) time, you should only have to traverse the list",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "max_stack",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "max_stack = MaxStack()\nmax_stack.push(1)\nmax_stack.push(2)\nmax_stack.push(5)\nmax_stack.pop()\n# print(max_stack.get_max())\n\"\"\"\nYour goal is to define a `Queue` class that uses two stacks. Your `Queue` class\nshould have an `enqueue()` method and a `dequeue()` method that ensures a\n\"first in first out\" (FIFO) order.",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "code",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "code = \"{ [ ] ( ) }\"\ncode = \"{ [ ( ] ) }\"\ncode = \"{ [ }\"\ndef is_valid(code):\n    check = []\n    if code == '':\n        return True\n    if code[0] == ')' or code[0] == '}' or code[0] == ']':\n        return False\n    for paren in code:",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "code",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "code = \"{ [ ( ] ) }\"\ncode = \"{ [ }\"\ndef is_valid(code):\n    check = []\n    if code == '':\n        return True\n    if code[0] == ')' or code[0] == '}' or code[0] == ']':\n        return False\n    for paren in code:\n        if paren == ' ':",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "code",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "code = \"{ [ }\"\ndef is_valid(code):\n    check = []\n    if code == '':\n        return True\n    if code[0] == ')' or code[0] == '}' or code[0] == ']':\n        return False\n    for paren in code:\n        if paren == ' ':\n            continue",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "queueOnStacks(requests)",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "queueOnStacks(requests) = [1, 2].\nAfter the first request, the queue is {1}; after the second it is {1, 2}. Then we do the third request, \"pop\", and add the first element of the queue 1 to the answer array. The queue becomes {2}. After the fourth request, the queue is {2, 3}. Then we perform \"pop\" again and add 2 to the answer array, and the queue becomes {3}.\n\"\"\"\nrequests = [\"push 1\", \"push 2\", \"pop\", \"push 3\", \"pop\"]\nclass Stack:\n    def __init__(self):\n        self.items = []\n    def isEmpty(self):\n        return self.items == []\n    def push(self, item):",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "requests = [\"push 1\", \"push 2\", \"pop\", \"push 3\", \"pop\"]\nclass Stack:\n    def __init__(self):\n        self.items = []\n    def isEmpty(self):\n        return self.items == []\n    def push(self, item):\n        self.items.append(item)\n    def pop(self):\n        return self.items.pop()",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "sequence",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "sequence = \"()\"\ndef validBracketSequence(sequence):\n    pairs = dict(zip('(,[,{', '),],}'))\n    stack = []\n    for item in sequence:\n        if item in pairs:\n            stack.append(pairs[item])\n        elif not (stack and item == stack.pop()):\n            return False\n    return not stack",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "fibonacciSimpleSum2(n)",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "fibonacciSimpleSum2(n) = true.\nExplanation: 1 = 0 + 1 = F0 + F1.\nFor n = 11, the output should be\nfibonacciSimpleSum2(n) = true.\nExplanation: 11 = 3 + 8 = F4 + F6.\nFor n = 60, the output should be\nfibonacciSimpleSum2(n) = true.\nExplanation: 11 = 5 + 55 = F5 + F10.\nFor n = 66, the output should be\nfibonacciSimpleSum2(n) = false",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "fibonacciSimpleSum2(n)",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "fibonacciSimpleSum2(n) = true.\nExplanation: 11 = 3 + 8 = F4 + F6.\nFor n = 60, the output should be\nfibonacciSimpleSum2(n) = true.\nExplanation: 11 = 5 + 55 = F5 + F10.\nFor n = 66, the output should be\nfibonacciSimpleSum2(n) = false\n\"\"\"\ndef fibonacciSimpleSum2(n):\n    # if 0 is less than n and n is less than 5 then we know we can return",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "fibonacciSimpleSum2(n)",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "fibonacciSimpleSum2(n) = true.\nExplanation: 11 = 5 + 55 = F5 + F10.\nFor n = 66, the output should be\nfibonacciSimpleSum2(n) = false\n\"\"\"\ndef fibonacciSimpleSum2(n):\n    # if 0 is less than n and n is less than 5 then we know we can return\n    # true because n will be 1-4 which can be created with 2 fib numbers\n    if 0 < n < 5:\n        return True",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "fibonacciSimpleSum2(n)",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "fibonacciSimpleSum2(n) = false\n\"\"\"\ndef fibonacciSimpleSum2(n):\n    # if 0 is less than n and n is less than 5 then we know we can return\n    # true because n will be 1-4 which can be created with 2 fib numbers\n    if 0 < n < 5:\n        return True\n    # first get fibonacci sequence up to n\n    seq = [0, 1]\n    # starting from 2 and ending at n",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "2^n",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "2^n = 64\nlog_2 64 = 6\nWrite an exponential expression that is identical to this logarithmic expression:\nlog_2 128 = n\n2^7 = 128\nWhat keywords should you look out for that might alert you that logarithms are involved?\ndoubles, halves\n\"\"\"\n\"\"\"\nRewrite the implementation of linear search below so that the algorithm searches from the end of the list to the beginning.",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "2^7",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "2^7 = 128\nWhat keywords should you look out for that might alert you that logarithms are involved?\ndoubles, halves\n\"\"\"\n\"\"\"\nRewrite the implementation of linear search below so that the algorithm searches from the end of the list to the beginning.\n\"\"\"\ndef linear_search(arr, target):\n    # loop through each item in the input array\n    i = len(arr) - 1",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "arr = [1, 2, 3, 4, 5, 6]\ntarget = 3\n# print(linear_search(arr, target))\n\"\"\"\nWrite a recursive search function that receives as input an array of integers and a target integer value. This function should return True if the target element exists in the array, and False otherwise.\nWhat would be the base case(s) we'd have to consider for implementing this function?\nHow should our recursive solution converge on our base case(s)?\nIn your own words, write out the three rules for recursion and how you can identify when a problem is amenable to using a recursive method.\n- problem has an obvious base case\n- the data changes predictably on the way to the base case ",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "target",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "target = 3\n# print(linear_search(arr, target))\n\"\"\"\nWrite a recursive search function that receives as input an array of integers and a target integer value. This function should return True if the target element exists in the array, and False otherwise.\nWhat would be the base case(s) we'd have to consider for implementing this function?\nHow should our recursive solution converge on our base case(s)?\nIn your own words, write out the three rules for recursion and how you can identify when a problem is amenable to using a recursive method.\n- problem has an obvious base case\n- the data changes predictably on the way to the base case \n- the function must call itself",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "arr = [1, 2, 3, 4, 5, 6]\ntarget = 55\ndef binary_recursive_search(arr, target, min_index, max_index):\n    if min_index >= max_index:\n        return -1\n    guess = (max_index + min_index) // 2\n    if arr[guess] == target:\n        return guess\n    elif target < arr[guess]:\n        return binary_recursive_search(arr, target, min_index, guess - 1)",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "target",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "target = 55\ndef binary_recursive_search(arr, target, min_index, max_index):\n    if min_index >= max_index:\n        return -1\n    guess = (max_index + min_index) // 2\n    if arr[guess] == target:\n        return guess\n    elif target < arr[guess]:\n        return binary_recursive_search(arr, target, min_index, guess - 1)\n    else:",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "surnames",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "surnames = [\n    'liu',\n    'mcdowell',\n    'nixon',\n    'sparks',\n    'zhang',\n    'ahmed',  # <-- rotates here!\n    'brandt',\n    'davenport',\n    'farley',",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "surnames",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "surnames = [\n    'sparks',\n    'zhang',\n    'liu',\n    'ahmed',  # <-- rotates here!\n    'brandt',\n    'davenport',\n    'farley',\n    'glover',\n    'kennedy',",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "n = [1, 2, 3, 4, 5, 6, 7, 8, 9]\ndef firstDraftWithTypo(n):\n    # Your code here\n    pass\n    contains_typo = 4\n    min = 0\n    max = len(n) - 1\n    while not max < min:\n        guess = (min + max) // 2\n        # if containsTypo were real this line would be:",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "n = 3\ndef eating_cookies(n, cache=None):\n    # if n < 0:\n    #     return 0\n    # if n == 0:\n    #     return 1\n    # return eating_cookies(n-1) + eating_cookies(n - 2) + eating_cookies(n -3)\n    # let the cache be 2 longer than n\n    cache = [0] * (n + 2)\n    print(cache)",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "removeAdjacent(s)",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "removeAdjacent(s) = \"a\";\nFor s = \"abccaaab\", the output should be\nremoveAdjacent(s) = \"abcab\".\n\"\"\"\n# s = \"aaaaa\"\n# s = \"abccaaab\"\ndef removeAdjacent(s):\n    # add first letter to new string\n    if s == '':\n        return s",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "removeAdjacent(s)",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "removeAdjacent(s) = \"abcab\".\n\"\"\"\n# s = \"aaaaa\"\n# s = \"abccaaab\"\ndef removeAdjacent(s):\n    # add first letter to new string\n    if s == '':\n        return s\n    new_str = s[0]\n    # iterate the string",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "str",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "str = 'reverse'\ndef reverse_String(str):\n    i, j = 0, len(str) - 1\n    print(i, j)\n    while i < j:\n        str[i], str[j] = str[j], str[i]\n        i += 1\n        j -= 1\n    return str\n# print(reverse_String(str))",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "checkPalindrome(inputString)",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "checkPalindrome(inputString) = true;\nFor inputString = \"abac\", the output should be\ncheckPalindrome(inputString) = false;\nFor inputString = \"a\", the output should be\ncheckPalindrome(inputString) = true.\n\"\"\"\ninputString = \"aabaa\"\n# inputString = \"abac\"\n# inputString = \"a\"\ninputString = \"hlbeeykoqqqqokyeeblh\"",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "checkPalindrome(inputString)",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "checkPalindrome(inputString) = false;\nFor inputString = \"a\", the output should be\ncheckPalindrome(inputString) = true.\n\"\"\"\ninputString = \"aabaa\"\n# inputString = \"abac\"\n# inputString = \"a\"\ninputString = \"hlbeeykoqqqqokyeeblh\"\ndef checkPalindrome(inputString):\n    return inputString == inputString[::-1]",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "checkPalindrome(inputString)",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "checkPalindrome(inputString) = true.\n\"\"\"\ninputString = \"aabaa\"\n# inputString = \"abac\"\n# inputString = \"a\"\ninputString = \"hlbeeykoqqqqokyeeblh\"\ndef checkPalindrome(inputString):\n    return inputString == inputString[::-1]\n# print(checkPalindrome(inputString))\n\"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "inputString",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "inputString = \"aabaa\"\n# inputString = \"abac\"\n# inputString = \"a\"\ninputString = \"hlbeeykoqqqqokyeeblh\"\ndef checkPalindrome(inputString):\n    return inputString == inputString[::-1]\n# print(checkPalindrome(inputString))\n\"\"\"\n*** Data Structures and Algorithms Sprint ***\n---------------------------------------------",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "inputString",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "inputString = \"hlbeeykoqqqqokyeeblh\"\ndef checkPalindrome(inputString):\n    return inputString == inputString[::-1]\n# print(checkPalindrome(inputString))\n\"\"\"\n*** Data Structures and Algorithms Sprint ***\n---------------------------------------------\n\"\"\"\n\"\"\"\n*** Reverse Linked List ***",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "reverseLinkedList(l)",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "reverseLinkedList(l) = [5, 4, 3, 2, 1].\n\"\"\"\n# Singly-linked lists are already defined with this interface:\n# class ListNode(object):\n#   def __init__(self, x):\n#     self.value = x\n#     self.next = None\n#\ndef reverseLinkedList(l):\n    cur = l",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "word1",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "word1 = \"tangpam\"\nword2 = \"anagram\"\ndef checkBlanagrams(word1, word2):\n    if word1 == '' or word2 == '':\n        return False\n    work_string = ''\n    diff = 0\n    sort1 = sorted(word1)  # O(n) space O(nlogn) time\n    sort2 = sorted(word2)  # O(n) space O(nlogn) time\n    for i in range(len(word1)):  # O(n)",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "word2",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "word2 = \"anagram\"\ndef checkBlanagrams(word1, word2):\n    if word1 == '' or word2 == '':\n        return False\n    work_string = ''\n    diff = 0\n    sort1 = sorted(word1)  # O(n) space O(nlogn) time\n    sort2 = sorted(word2)  # O(n) space O(nlogn) time\n    for i in range(len(word1)):  # O(n)\n        # check for substitutions",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "nums",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "nums = [4, 5, 6, 7, 0, 1, 2]\ntarget = 0\ndef findValueSortedShiftedArray(nums, target):\n    min = 0\n    max = len(nums) - 1\n    while not max < min:\n        guess = (max + min) // 2\n        if nums[guess] == target:\n            return guess\n        elif nums[min] <= nums[guess]:",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "target",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "target = 0\ndef findValueSortedShiftedArray(nums, target):\n    min = 0\n    max = len(nums) - 1\n    while not max < min:\n        guess = (max + min) // 2\n        if nums[guess] == target:\n            return guess\n        elif nums[min] <= nums[guess]:\n            if nums[min] <= target < nums[guess]:",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "LinkedListNode",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "class LinkedListNode():\n    def __init__(self, value):\n        self.value = value\n        self.next  = None\nx = LinkedListNode('X')\ny = LinkedListNode('Y')\nz = LinkedListNode('Z')\nx.next = y\ny.next = z\ndelete_node(y)",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "LinkedListNode",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "class LinkedListNode():\n    def __init__(self, value):\n        self.value = value\n        self.next = None\ndef delete_node(node_to_delete):\n    next = node_to_delete.next\n    next.next = None\n    node_to_delete.value = next.value\n    node_to_delete.next = next.next\nx = LinkedListNode('X')",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "LinkedListNode",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "class LinkedListNode():\n    def __init__(self, value):\n        self.value = value\n        self.next = None\ndef reverse(head_of_list):\n    current_node = head_of_list\n    previous_node = None\n    next_node = None\n    # Until we have 'fallen off' the end of the list\n    while current_node:",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "class ListNode(object):\n    def __init__(self, x):\n        self.value = x\n        self.next = None\n[1, 3, 4, 6]\n\"\"\"\nNote: Your solution should have O(n) time complexity, where n is the number of elements in l, since this is what you will be asked to accomplish in an interview.\nYou have a singly linked list l, which is sorted in strictly increasing order, and an integer value. Add value to the list l, preserving its original sorting.\nNote: in examples below and tests preview linked lists are presented as arrays just for simplicity of visualization: in real data you will be given a head node l of the linked list\nExample",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "class ListNode(object):\n    def __init__(self, x):\n        self.value = x\n        self.next = None\ndef mergeTwoLinkedLists(l1, l2):\n    # create empty node to hold the new merged list\n    merged_node = ListNode(0)\n    # end will hold the end node\n    end = merged_node\n    while True:",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "class ListNode(object):\n    def __init__(self, x):\n        self.value = x\n        self.next = None\ndef reverseNodesInKGroups(l, k):\n    # create an empty node to hold the new list\n    new_node = ListNode(0)\n    # set the next value to the list\n    new_node.next = l\n    # set the previous node to the new list",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "LinkedListNode",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "class LinkedListNode:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\nclass Queue:\n    def __init__(self):\n        self.front = None\n        self.rear = None\n    def enqueue(self, item):\n        new_node = LinkedListNode(item)",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "Queue",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "class Queue:\n    def __init__(self):\n        self.front = None\n        self.rear = None\n    def enqueue(self, item):\n        new_node = LinkedListNode(item)\n        # check if queue is empty\n        if self.is_empty():\n            self.front = new_node\n            self.rear = new_node",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "class Stack:\n    def __init__(self):\n        self.data = []\n    def push(self, item):\n        self.data.append(item)\n    # my code for peek method\n    def peek(self, item):\n        return self.data[-1]\n    def pop(self):\n        if len(self.data) > 0:",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "LinkedListNode",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "class LinkedListNode:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\nclass Stack:\n    def __init__(self):\n        self.top = None\n    def push(self, data):\n        # create new node with data\n        new_node = LinkedListNode(data)",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "class Stack:\n    def __init__(self):\n        self.top = None\n    def push(self, data):\n        # create new node with data\n        new_node = LinkedListNode(data)\n        # set current top to new node's next\n        new_node.next = self.top\n        # reset the top pointer to the new node\n        self.top = new_node",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "class Stack(object):\n    def __init__(self):\n        \"\"\"Initialize an empty stack\"\"\"\n        self.items = []\n    def push(self, item):\n        \"\"\"Push a new item onto the stack\"\"\"\n        self.items.append(item)\n    def pop(self):\n        \"\"\"Remove and return the last item\"\"\"\n        # If the stack is empty, return None",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "MaxStack",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "class MaxStack(object):\n    def __init__(self):\n        # Your code here\n        self.stack = Stack()\n        # self.head = []\n        self.max_stack = Stack()\n    def push(self, item):\n        \"\"\"Add a new item onto the top of our stack.\"\"\"\n        # Your code here\n        # self.head.append(item)",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "class Stack:\n    def __init__(self):\n        self.data = []\n    def push(self, item):\n        self.data.append(item)\n    def pop(self):\n        if len(self.data) > 0:\n            return self.data.pop()\n        return \"The stack is empty\"\nclass QueueTwoStacks:",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "QueueTwoStacks",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "class QueueTwoStacks:\n    def __init__(self):\n        # Your code here\n        self.stack1 = Stack()\n        self.stack2 = Stack()\n    def enqueue(self, item):\n        # Your code here\n        self.stack1.push(item)\n    def dequeue(self):\n        # Your code here",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "class Stack:\n    def __init__(self):\n        self.items = []\n    def isEmpty(self):\n        return self.items == []\n    def push(self, item):\n        self.items.append(item)\n    def pop(self):\n        return self.items.pop()\ndef queueOnStacks(requests):",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "pivot_index",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def pivot_index(nums):\n    if len(nums) <= 1:\n        return -1\n    left = 0\n    right = sum(nums)\n    for i in range(len(nums)):\n        right -= nums[i]\n        if right == left:\n            return i\n        left += nums[i]",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "plus_one",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def plus_one(digits):\n    # check the last digit if its not 9 we just add 1\n    # if it is a 9 make it 0\n    # go left check 2nd to last if its not a 9 add 1\n    # if it is a 9\n    index = len(digits) - 1\n    while index >= 0 and digits[index] == 9:\n        digits[index] = 0\n        index -= 1\n    if index == -1:",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "buyAndSellStock",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def buyAndSellStock(prices):\n    length = len(prices)\n    # iterate array, for each item after subtract and store the amount as\n    # highest profit.. replace if needed with a higher profit\n    if prices == sorted(prices, reverse=True) or len(prices) < 2:\n        return 0\n    highest_profit = prices[1] - prices[0]\n    smallest_number = prices[0]\n    for i in range(1, length):\n        # only check if the selected number minus the smallest number before",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "alphabeticShift",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def alphabeticShift(inputString):\n    new_string = ''\n    for letter in inputString:\n        new_letter = ord(letter) + 1\n        if new_letter == 123:\n            new_letter = 97\n        new_string += chr(new_letter)\n    return new_string\n# print(alphabeticShift(inputString))\n\"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "validParenthesesSequence",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def validParenthesesSequence(s):\n    check = []\n    if s == '':\n        return True\n    if s[0] == ')':\n        return False\n    for paren in s:\n        if paren == '(':\n            check.append(paren)\n        else:",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "delete_node",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def delete_node(node_to_delete):\n    next = node_to_delete.next\n    next.next = None\n    node_to_delete.value = next.value\n    node_to_delete.next = next.next\nx = LinkedListNode('X')\ny = LinkedListNode('Y')\nz = LinkedListNode('Z')\nx.next = y\ny.next = z",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "reverse",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def reverse(head_of_list):\n    current_node = head_of_list\n    previous_node = None\n    next_node = None\n    # Until we have 'fallen off' the end of the list\n    while current_node:\n        # Copy a pointer to the next element\n        # before we overwrite current_node.next\n        next_node = current_node.next\n        # Reverse the 'next' pointer",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "insertValueIntoSortedLinkedList",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def insertValueIntoSortedLinkedList(l, value):\n    # create a new node with the value\n    node = ListNode(value)\n    # if there is no list return the new node\n    if l == None:\n        return node\n    else:\n        # else if the list.value (first item in the list) > the new value\n        if l.value > value:\n            # set new values as the first item in the list",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "mergeTwoLinkedLists",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def mergeTwoLinkedLists(l1, l2):\n    # create empty node to hold the new merged list\n    merged_node = ListNode(0)\n    # end will hold the end node\n    end = merged_node\n    while True:\n        # if either list becomes empty join lists\n        if l1 is None:\n            end.next = l2\n            break",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "reverseNodesInKGroups",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def reverseNodesInKGroups(l, k):\n    # create an empty node to hold the new list\n    new_node = ListNode(0)\n    # set the next value to the list\n    new_node.next = l\n    # set the previous node to the new list\n    prev = new_node\n    while True:\n        # set the start to the new node next\n        start = prev.next",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "reverse_list",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def reverse_list(start, end):\n    # set the last reversed group to the new start\n    old_reversed = start\n    # set the new current to the start\n    current = start\n    # set next node to the node start is pointing to\n    next_node = start.next\n    # while the current node is not the last node\n    while current != end:\n        # iterate",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "is_valid",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def is_valid(code):\n    check = []\n    if code == '':\n        return True\n    if code[0] == ')' or code[0] == '}' or code[0] == ']':\n        return False\n    for paren in code:\n        if paren == ' ':\n            continue\n        if paren == '(' or paren == '{' or paren == '[':",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "queueOnStacks",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def queueOnStacks(requests):\n    left = Stack()\n    right = Stack()\n    def insert(x):\n        left.push(x)\n        print('queue:', left.items)\n    def remove():\n        if len(right.items) == 0:\n            while len(left.items) > 0:\n                shifted = left.pop()",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "validBracketSequence",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def validBracketSequence(sequence):\n    pairs = dict(zip('(,[,{', '),],}'))\n    stack = []\n    for item in sequence:\n        if item in pairs:\n            stack.append(pairs[item])\n        elif not (stack and item == stack.pop()):\n            return False\n    return not stack\n# print(validBracketSequence(sequence))",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "fibonacciSimpleSum2",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def fibonacciSimpleSum2(n):\n    # if 0 is less than n and n is less than 5 then we know we can return\n    # true because n will be 1-4 which can be created with 2 fib numbers\n    if 0 < n < 5:\n        return True\n    # first get fibonacci sequence up to n\n    seq = [0, 1]\n    # starting from 2 and ending at n\n    for i in range(2, n):\n        # add seq at i - 2 (0 to start) and seq at i - 1 (1 to start)",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "csBinarySearch",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def csBinarySearch(nums, target):\n    min = 0\n    max = len(nums) - 1\n    while not max < min:\n        guess = (max + min) // 2\n        if nums[guess] == target:\n            return guess\n        elif nums[guess] < target:\n            min = guess + 1\n        else:",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "csSearchRotatedSortedArray",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def csSearchRotatedSortedArray(nums, target):\n    min = 0\n    max = len(nums) - 1\n    while not max < min:\n        guess = (max + min) // 2\n        # print(f'min: {nums[min]} max: {nums[max]} guess:{nums[guess]} target:'\n        #       f' {target}')\n        # if the guess is the target we got it and return the guess\n        if nums[guess] == target:\n            # print('guessed the target')",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "linear_search",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def linear_search(arr, target):\n    # loop through each item in the input array\n    i = len(arr) - 1\n    for idx in range(len(arr)):\n        # check if the item at the current index is equal to the target\n        if arr[i] == target:\n            # return the current index as the match\n            return i\n        i -= 1\n    # if we were able to loop through the entire array, the target is not present",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "recursive_search",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def recursive_search(arr, target):\n    if arr[0] == target:\n        return True\n    elif len(arr[1:]) > 1:\n        return recursive_search(arr[1:], target)\n    return False\n# print(recursive_search(arr, target))\n\"\"\"\nBinary Search\n\"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "binary_search",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def binary_search(arr, target):\n    # 1. Declare min = 0 and max = length of array - 1\n    min = 0\n    max = len(arr) - 1\n    while not max < min:\n        # 2. Figure out the guess value by getting the middle integer between min and max\n        guess = (max + min) // 2\n        # 3. if array[guess] equals the target, we found the element, return the index\n        if arr[guess] == target:\n            return guess",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "binary_recursive_search",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def binary_recursive_search(arr, target, min_index, max_index):\n    if min_index >= max_index:\n        return -1\n    guess = (max_index + min_index) // 2\n    if arr[guess] == target:\n        return guess\n    elif target < arr[guess]:\n        return binary_recursive_search(arr, target, min_index, guess - 1)\n    else:\n        return binary_recursive_search(arr, target, guess + 1, max_index)",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "find_rotation_point",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def find_rotation_point(surnames):\n    # Your code here\n    min = 0\n    max = len(surnames) - 1\n    while not max < min:\n        guess = (min + max) // 2\n        if surnames[guess] < surnames[guess + 1] and surnames[guess] < surnames[\n            guess - 1]:\n            return guess\n        else:",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "find_rotation_point",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def find_rotation_point(surnames):\n    # Your code here\n    # UNDERSTAND\n    # [ 6,   7, 8, 0, 1, 2, 3, 4, 5]\n    #           min max\n    #           mid\n    # [ 7, 0, 1,  2, 3, 4, 5, 6]\n    #  min\n    # max\n    # mid",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "firstDraftWithTypo",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def firstDraftWithTypo(n):\n    # Your code here\n    pass\n    contains_typo = 4\n    min = 0\n    max = len(n) - 1\n    while not max < min:\n        guess = (min + max) // 2\n        # if containsTypo were real this line would be:\n        # if containsTypo(n[guess]) and not containsTypo(n[guess -1]):",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "eating_cookies",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def eating_cookies(n, cache=None):\n    # if n < 0:\n    #     return 0\n    # if n == 0:\n    #     return 1\n    # return eating_cookies(n-1) + eating_cookies(n - 2) + eating_cookies(n -3)\n    # let the cache be 2 longer than n\n    cache = [0] * (n + 2)\n    print(cache)\n    cache[0] = 1",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "removeAdjacent",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def removeAdjacent(s):\n    # add first letter to new string\n    if s == '':\n        return s\n    new_str = s[0]\n    # iterate the string\n    for letter in s:\n        # if the next letter is the same as previous continue\n        if letter == new_str[len(new_str) - 1]:\n            continue",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "reverse_String",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def reverse_String(str):\n    i, j = 0, len(str) - 1\n    print(i, j)\n    while i < j:\n        str[i], str[j] = str[j], str[i]\n        i += 1\n        j -= 1\n    return str\n# print(reverse_String(str))\n\"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "checkPalindrome",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def checkPalindrome(inputString):\n    return inputString == inputString[::-1]\n# print(checkPalindrome(inputString))\n\"\"\"\n*** Data Structures and Algorithms Sprint ***\n---------------------------------------------\n\"\"\"\n\"\"\"\n*** Reverse Linked List ***\n---------------------------",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "reverseLinkedList",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def reverseLinkedList(l):\n    cur = l\n    prev = None\n    next = None\n    while cur:\n        next = cur.next\n        cur.next = prev\n        prev = cur\n        cur = next\n    return prev",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "checkBlanagrams",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def checkBlanagrams(word1, word2):\n    if word1 == '' or word2 == '':\n        return False\n    work_string = ''\n    diff = 0\n    sort1 = sorted(word1)  # O(n) space O(nlogn) time\n    sort2 = sorted(word2)  # O(n) space O(nlogn) time\n    for i in range(len(word1)):  # O(n)\n        # check for substitutions\n        if sort1[i] != sort2[i]:",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "findValueSortedShiftedArray",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def findValueSortedShiftedArray(nums, target):\n    min = 0\n    max = len(nums) - 1\n    while not max < min:\n        guess = (max + min) // 2\n        if nums[guess] == target:\n            return guess\n        elif nums[min] <= nums[guess]:\n            if nums[min] <= target < nums[guess]:\n                max = guess",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "nums",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "nums = [1, 7, 3, 6, 5, 6]\n# nums = [1,2,3]\n#  O(N^2) solution\n# def pivot_index(nums):\n#     # iterate array starting at index 1\n#     # get sum of items on left of i and compare to sum of items on right of i\n#     # if they are equal return i else keep going to the next i\n#     for i in range(len(nums)):\n#         left = sum(nums[:i])\n#         right = sum(nums[i + 1:])",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "prices",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "prices = [3, 100, 1, 97]\n#\n# prices = []\n# prices = [61, 91, 6, 15, 28, 30, 39, 69, 78, 81, 62, 38, 56, 69, 22, 95, 47, 82,\n#           52, 64, 74, 97, 60, 68, 5, 23, 45, 55, 66, 57, 26, 4, 21, 65, 55, 50,\n#           41, 88, 39, 84, 77, 5, 76, 11, 3, 51, 96, 100, 13, 26, 79, 98, 84, 66,\n#           93, 65, 98, 60, 57, 35, 12, 40, 83, 62, 46, 60, 26, 94, 59, 29, 70,\n#           34, 83, 98, 89, 57, 71, 44, 23, 43, 55, 1, 70, 29, 44, 10, 70, 83, 95,\n#           96, 97, 84, 23, 16, 34, 55, 59, 73, 17, 73]\n# def buyAndSellStock(prices):",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "prices",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "prices = [6, 3, 1, 2, 5, 4]\nprices = [8, 5, 3, 1]\nprices = [3, 100, 1, 97]\ndef buyAndSellStock(prices):\n    length = len(prices)\n    # iterate array, for each item after subtract and store the amount as\n    # highest profit.. replace if needed with a higher profit\n    if prices == sorted(prices, reverse=True) or len(prices) < 2:\n        return 0\n    highest_profit = prices[1] - prices[0]",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "prices",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "prices = [8, 5, 3, 1]\nprices = [3, 100, 1, 97]\ndef buyAndSellStock(prices):\n    length = len(prices)\n    # iterate array, for each item after subtract and store the amount as\n    # highest profit.. replace if needed with a higher profit\n    if prices == sorted(prices, reverse=True) or len(prices) < 2:\n        return 0\n    highest_profit = prices[1] - prices[0]\n    smallest_number = prices[0]",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "prices",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "prices = [3, 100, 1, 97]\ndef buyAndSellStock(prices):\n    length = len(prices)\n    # iterate array, for each item after subtract and store the amount as\n    # highest profit.. replace if needed with a higher profit\n    if prices == sorted(prices, reverse=True) or len(prices) < 2:\n        return 0\n    highest_profit = prices[1] - prices[0]\n    smallest_number = prices[0]\n    for i in range(1, length):",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "inputString",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "inputString = \"crazy\"\ndef alphabeticShift(inputString):\n    new_string = ''\n    for letter in inputString:\n        new_letter = ord(letter) + 1\n        if new_letter == 123:\n            new_letter = 97\n        new_string += chr(new_letter)\n    return new_string\n# print(alphabeticShift(inputString))",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "validParenthesesSequence(s)",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "validParenthesesSequence(s) = true;\nFor s = \"()()())\", the output should be\nvalidParenthesesSequence(s) = false\n\"\"\"\ns = \"()()(())\"\ns = \"()()())\"\ndef validParenthesesSequence(s):\n    check = []\n    if s == '':\n        return True",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "validParenthesesSequence(s)",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "validParenthesesSequence(s) = false\n\"\"\"\ns = \"()()(())\"\ns = \"()()())\"\ndef validParenthesesSequence(s):\n    check = []\n    if s == '':\n        return True\n    if s[0] == ')':\n        return False",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "s = \"()()(())\"\ns = \"()()())\"\ndef validParenthesesSequence(s):\n    check = []\n    if s == '':\n        return True\n    if s[0] == ')':\n        return False\n    for paren in s:\n        if paren == '(':",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "s = \"()()())\"\ndef validParenthesesSequence(s):\n    check = []\n    if s == '':\n        return True\n    if s[0] == ')':\n        return False\n    for paren in s:\n        if paren == '(':\n            check.append(paren)",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "x = LinkedListNode('X')\ny = LinkedListNode('Y')\nz = LinkedListNode('Z')\nx.next = y\ny.next = z\ndelete_node(y)\n```\n*Note: We can do this in O(1) time and space! But be aware that our solution will have some side effects...*\n\"\"\"\nclass LinkedListNode():",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "y = LinkedListNode('Y')\nz = LinkedListNode('Z')\nx.next = y\ny.next = z\ndelete_node(y)\n```\n*Note: We can do this in O(1) time and space! But be aware that our solution will have some side effects...*\n\"\"\"\nclass LinkedListNode():\n    def __init__(self, value):",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "z = LinkedListNode('Z')\nx.next = y\ny.next = z\ndelete_node(y)\n```\n*Note: We can do this in O(1) time and space! But be aware that our solution will have some side effects...*\n\"\"\"\nclass LinkedListNode():\n    def __init__(self, value):\n        self.value = value",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "x.next",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "x.next = y\ny.next = z\ndelete_node(y)\n```\n*Note: We can do this in O(1) time and space! But be aware that our solution will have some side effects...*\n\"\"\"\nclass LinkedListNode():\n    def __init__(self, value):\n        self.value = value\n        self.next = None",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "y.next",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "y.next = z\ndelete_node(y)\n```\n*Note: We can do this in O(1) time and space! But be aware that our solution will have some side effects...*\n\"\"\"\nclass LinkedListNode():\n    def __init__(self, value):\n        self.value = value\n        self.next = None\ndef delete_node(node_to_delete):",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "x = LinkedListNode('X')\ny = LinkedListNode('Y')\nz = LinkedListNode('Z')\nx.next = y\ny.next = z\n# print(delete_node(y))\n# print(x.next.value)\n\"\"\"\nGiven a reference to the head node of a singly-linked list, write a function\nthat reverses the linked list in place. The function should return the new head",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "y = LinkedListNode('Y')\nz = LinkedListNode('Z')\nx.next = y\ny.next = z\n# print(delete_node(y))\n# print(x.next.value)\n\"\"\"\nGiven a reference to the head node of a singly-linked list, write a function\nthat reverses the linked list in place. The function should return the new head\nof the reversed list.",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "z = LinkedListNode('Z')\nx.next = y\ny.next = z\n# print(delete_node(y))\n# print(x.next.value)\n\"\"\"\nGiven a reference to the head node of a singly-linked list, write a function\nthat reverses the linked list in place. The function should return the new head\nof the reversed list.\nIn order to do this in O(1) space (in-place), you cannot make a new list, you",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "x.next",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "x.next = y\ny.next = z\n# print(delete_node(y))\n# print(x.next.value)\n\"\"\"\nGiven a reference to the head node of a singly-linked list, write a function\nthat reverses the linked list in place. The function should return the new head\nof the reversed list.\nIn order to do this in O(1) space (in-place), you cannot make a new list, you\nneed to use the existing nodes.",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "y.next",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "y.next = z\n# print(delete_node(y))\n# print(x.next.value)\n\"\"\"\nGiven a reference to the head node of a singly-linked list, write a function\nthat reverses the linked list in place. The function should return the new head\nof the reversed list.\nIn order to do this in O(1) space (in-place), you cannot make a new list, you\nneed to use the existing nodes.\nIn order to do this in O(n) time, you should only have to traverse the list",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "max_stack",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "max_stack = MaxStack()\nmax_stack.push(1)\nmax_stack.push(2)\nmax_stack.push(5)\nmax_stack.pop()\n# print(max_stack.get_max())\n\"\"\"\nYour goal is to define a `Queue` class that uses two stacks. Your `Queue` class\nshould have an `enqueue()` method and a `dequeue()` method that ensures a\n\"first in first out\" (FIFO) order.",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "code",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "code = \"{ [ ] ( ) }\"\ncode = \"{ [ ( ] ) }\"\ncode = \"{ [ }\"\ndef is_valid(code):\n    check = []\n    if code == '':\n        return True\n    if code[0] == ')' or code[0] == '}' or code[0] == ']':\n        return False\n    for paren in code:",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "code",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "code = \"{ [ ( ] ) }\"\ncode = \"{ [ }\"\ndef is_valid(code):\n    check = []\n    if code == '':\n        return True\n    if code[0] == ')' or code[0] == '}' or code[0] == ']':\n        return False\n    for paren in code:\n        if paren == ' ':",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "code",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "code = \"{ [ }\"\ndef is_valid(code):\n    check = []\n    if code == '':\n        return True\n    if code[0] == ')' or code[0] == '}' or code[0] == ']':\n        return False\n    for paren in code:\n        if paren == ' ':\n            continue",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "queueOnStacks(requests)",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "queueOnStacks(requests) = [1, 2].\nAfter the first request, the queue is {1}; after the second it is {1, 2}. Then we do the third request, \"pop\", and add the first element of the queue 1 to the answer array. The queue becomes {2}. After the fourth request, the queue is {2, 3}. Then we perform \"pop\" again and add 2 to the answer array, and the queue becomes {3}.\n\"\"\"\nrequests = [\"push 1\", \"push 2\", \"pop\", \"push 3\", \"pop\"]\nclass Stack:\n    def __init__(self):\n        self.items = []\n    def isEmpty(self):\n        return self.items == []\n    def push(self, item):",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "requests = [\"push 1\", \"push 2\", \"pop\", \"push 3\", \"pop\"]\nclass Stack:\n    def __init__(self):\n        self.items = []\n    def isEmpty(self):\n        return self.items == []\n    def push(self, item):\n        self.items.append(item)\n    def pop(self):\n        return self.items.pop()",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "sequence",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "sequence = \"()\"\ndef validBracketSequence(sequence):\n    pairs = dict(zip('(,[,{', '),],}'))\n    stack = []\n    for item in sequence:\n        if item in pairs:\n            stack.append(pairs[item])\n        elif not (stack and item == stack.pop()):\n            return False\n    return not stack",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "fibonacciSimpleSum2(n)",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "fibonacciSimpleSum2(n) = true.\nExplanation: 1 = 0 + 1 = F0 + F1.\nFor n = 11, the output should be\nfibonacciSimpleSum2(n) = true.\nExplanation: 11 = 3 + 8 = F4 + F6.\nFor n = 60, the output should be\nfibonacciSimpleSum2(n) = true.\nExplanation: 11 = 5 + 55 = F5 + F10.\nFor n = 66, the output should be\nfibonacciSimpleSum2(n) = false",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "fibonacciSimpleSum2(n)",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "fibonacciSimpleSum2(n) = true.\nExplanation: 11 = 3 + 8 = F4 + F6.\nFor n = 60, the output should be\nfibonacciSimpleSum2(n) = true.\nExplanation: 11 = 5 + 55 = F5 + F10.\nFor n = 66, the output should be\nfibonacciSimpleSum2(n) = false\n\"\"\"\ndef fibonacciSimpleSum2(n):\n    # if 0 is less than n and n is less than 5 then we know we can return",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "fibonacciSimpleSum2(n)",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "fibonacciSimpleSum2(n) = true.\nExplanation: 11 = 5 + 55 = F5 + F10.\nFor n = 66, the output should be\nfibonacciSimpleSum2(n) = false\n\"\"\"\ndef fibonacciSimpleSum2(n):\n    # if 0 is less than n and n is less than 5 then we know we can return\n    # true because n will be 1-4 which can be created with 2 fib numbers\n    if 0 < n < 5:\n        return True",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "fibonacciSimpleSum2(n)",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "fibonacciSimpleSum2(n) = false\n\"\"\"\ndef fibonacciSimpleSum2(n):\n    # if 0 is less than n and n is less than 5 then we know we can return\n    # true because n will be 1-4 which can be created with 2 fib numbers\n    if 0 < n < 5:\n        return True\n    # first get fibonacci sequence up to n\n    seq = [0, 1]\n    # starting from 2 and ending at n",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "2^n",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "2^n = 64\nlog_2 64 = 6\nWrite an exponential expression that is identical to this logarithmic expression:\nlog_2 128 = n\n2^7 = 128\nWhat keywords should you look out for that might alert you that logarithms are involved?\ndoubles, halves\n\"\"\"\n\"\"\"\nRewrite the implementation of linear search below so that the algorithm searches from the end of the list to the beginning.",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "2^7",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "2^7 = 128\nWhat keywords should you look out for that might alert you that logarithms are involved?\ndoubles, halves\n\"\"\"\n\"\"\"\nRewrite the implementation of linear search below so that the algorithm searches from the end of the list to the beginning.\n\"\"\"\ndef linear_search(arr, target):\n    # loop through each item in the input array\n    i = len(arr) - 1",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "arr = [1, 2, 3, 4, 5, 6]\ntarget = 3\n# print(linear_search(arr, target))\n\"\"\"\nWrite a recursive search function that receives as input an array of integers and a target integer value. This function should return True if the target element exists in the array, and False otherwise.\nWhat would be the base case(s) we'd have to consider for implementing this function?\nHow should our recursive solution converge on our base case(s)?\nIn your own words, write out the three rules for recursion and how you can identify when a problem is amenable to using a recursive method.\n- problem has an obvious base case\n- the data changes predictably on the way to the base case ",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "target",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "target = 3\n# print(linear_search(arr, target))\n\"\"\"\nWrite a recursive search function that receives as input an array of integers and a target integer value. This function should return True if the target element exists in the array, and False otherwise.\nWhat would be the base case(s) we'd have to consider for implementing this function?\nHow should our recursive solution converge on our base case(s)?\nIn your own words, write out the three rules for recursion and how you can identify when a problem is amenable to using a recursive method.\n- problem has an obvious base case\n- the data changes predictably on the way to the base case \n- the function must call itself",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "arr = [1, 2, 3, 4, 5, 6]\ntarget = 55\ndef binary_recursive_search(arr, target, min_index, max_index):\n    if min_index >= max_index:\n        return -1\n    guess = (max_index + min_index) // 2\n    if arr[guess] == target:\n        return guess\n    elif target < arr[guess]:\n        return binary_recursive_search(arr, target, min_index, guess - 1)",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "target",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "target = 55\ndef binary_recursive_search(arr, target, min_index, max_index):\n    if min_index >= max_index:\n        return -1\n    guess = (max_index + min_index) // 2\n    if arr[guess] == target:\n        return guess\n    elif target < arr[guess]:\n        return binary_recursive_search(arr, target, min_index, guess - 1)\n    else:",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "surnames",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "surnames = [\n    'liu',\n    'mcdowell',\n    'nixon',\n    'sparks',\n    'zhang',\n    'ahmed',  # <-- rotates here!\n    'brandt',\n    'davenport',\n    'farley',",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "surnames",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "surnames = [\n    'sparks',\n    'zhang',\n    'liu',\n    'ahmed',  # <-- rotates here!\n    'brandt',\n    'davenport',\n    'farley',\n    'glover',\n    'kennedy',",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "n = [1, 2, 3, 4, 5, 6, 7, 8, 9]\ndef firstDraftWithTypo(n):\n    # Your code here\n    pass\n    contains_typo = 4\n    min = 0\n    max = len(n) - 1\n    while not max < min:\n        guess = (min + max) // 2\n        # if containsTypo were real this line would be:",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "n = 3\ndef eating_cookies(n, cache=None):\n    # if n < 0:\n    #     return 0\n    # if n == 0:\n    #     return 1\n    # return eating_cookies(n-1) + eating_cookies(n - 2) + eating_cookies(n -3)\n    # let the cache be 2 longer than n\n    cache = [0] * (n + 2)\n    print(cache)",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "removeAdjacent(s)",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "removeAdjacent(s) = \"a\";\nFor s = \"abccaaab\", the output should be\nremoveAdjacent(s) = \"abcab\".\n\"\"\"\n# s = \"aaaaa\"\n# s = \"abccaaab\"\ndef removeAdjacent(s):\n    # add first letter to new string\n    if s == '':\n        return s",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "removeAdjacent(s)",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "removeAdjacent(s) = \"abcab\".\n\"\"\"\n# s = \"aaaaa\"\n# s = \"abccaaab\"\ndef removeAdjacent(s):\n    # add first letter to new string\n    if s == '':\n        return s\n    new_str = s[0]\n    # iterate the string",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "str",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "str = 'reverse'\ndef reverse_String(str):\n    i, j = 0, len(str) - 1\n    print(i, j)\n    while i < j:\n        str[i], str[j] = str[j], str[i]\n        i += 1\n        j -= 1\n    return str\n# print(reverse_String(str))",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "checkPalindrome(inputString)",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "checkPalindrome(inputString) = true;\nFor inputString = \"abac\", the output should be\ncheckPalindrome(inputString) = false;\nFor inputString = \"a\", the output should be\ncheckPalindrome(inputString) = true.\n\"\"\"\ninputString = \"aabaa\"\n# inputString = \"abac\"\n# inputString = \"a\"\ninputString = \"hlbeeykoqqqqokyeeblh\"",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "checkPalindrome(inputString)",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "checkPalindrome(inputString) = false;\nFor inputString = \"a\", the output should be\ncheckPalindrome(inputString) = true.\n\"\"\"\ninputString = \"aabaa\"\n# inputString = \"abac\"\n# inputString = \"a\"\ninputString = \"hlbeeykoqqqqokyeeblh\"\ndef checkPalindrome(inputString):\n    return inputString == inputString[::-1]",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "checkPalindrome(inputString)",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "checkPalindrome(inputString) = true.\n\"\"\"\ninputString = \"aabaa\"\n# inputString = \"abac\"\n# inputString = \"a\"\ninputString = \"hlbeeykoqqqqokyeeblh\"\ndef checkPalindrome(inputString):\n    return inputString == inputString[::-1]\n# print(checkPalindrome(inputString))\n\"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "inputString",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "inputString = \"aabaa\"\n# inputString = \"abac\"\n# inputString = \"a\"\ninputString = \"hlbeeykoqqqqokyeeblh\"\ndef checkPalindrome(inputString):\n    return inputString == inputString[::-1]\n# print(checkPalindrome(inputString))\n\"\"\"\n*** Data Structures and Algorithms Sprint ***\n---------------------------------------------",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "inputString",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "inputString = \"hlbeeykoqqqqokyeeblh\"\ndef checkPalindrome(inputString):\n    return inputString == inputString[::-1]\n# print(checkPalindrome(inputString))\n\"\"\"\n*** Data Structures and Algorithms Sprint ***\n---------------------------------------------\n\"\"\"\n\"\"\"\n*** Reverse Linked List ***",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "reverseLinkedList(l)",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "reverseLinkedList(l) = [5, 4, 3, 2, 1].\n\"\"\"\n# Singly-linked lists are already defined with this interface:\n# class ListNode(object):\n#   def __init__(self, x):\n#     self.value = x\n#     self.next = None\n#\ndef reverseLinkedList(l):\n    cur = l",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "word1",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "word1 = \"tangpam\"\nword2 = \"anagram\"\ndef checkBlanagrams(word1, word2):\n    if word1 == '' or word2 == '':\n        return False\n    work_string = ''\n    diff = 0\n    sort1 = sorted(word1)  # O(n) space O(nlogn) time\n    sort2 = sorted(word2)  # O(n) space O(nlogn) time\n    for i in range(len(word1)):  # O(n)",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "word2",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "word2 = \"anagram\"\ndef checkBlanagrams(word1, word2):\n    if word1 == '' or word2 == '':\n        return False\n    work_string = ''\n    diff = 0\n    sort1 = sorted(word1)  # O(n) space O(nlogn) time\n    sort2 = sorted(word2)  # O(n) space O(nlogn) time\n    for i in range(len(word1)):  # O(n)\n        # check for substitutions",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "nums",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "nums = [4, 5, 6, 7, 0, 1, 2]\ntarget = 0\ndef findValueSortedShiftedArray(nums, target):\n    min = 0\n    max = len(nums) - 1\n    while not max < min:\n        guess = (max + min) // 2\n        if nums[guess] == target:\n            return guess\n        elif nums[min] <= nums[guess]:",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "target",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "target = 0\ndef findValueSortedShiftedArray(nums, target):\n    min = 0\n    max = len(nums) - 1\n    while not max < min:\n        guess = (max + min) // 2\n        if nums[guess] == target:\n            return guess\n        elif nums[min] <= nums[guess]:\n            if nums[min] <= target < nums[guess]:",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "BSTNode",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "class BSTNode:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n    def insert(self, value):\n        if value < self.value:\n            if self.left is None:\n                self.left = BSTNode(value)\n            else:",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "BST",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "class BST:\n    def __init__(self, value):\n        self.root = BSTNode(value)\n    def insert(self, value):\n        return self.root.insert(value)\n    def search(self, target):\n        return self.root.search(target)\n    def find_minimum_value(self):\n        return self.root.find_minimum_value().value\n    def delete(self, value):",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "BinaryTreeNode",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "class BinaryTreeNode:\n    def __init__(self, value=0, left=None, right=None):\n        self.value = value\n        self.left = left\n        self.right = right\ndef maxDepth(self, root):\n    # if root is None return 0\n    if root is None:\n        return 0\n    # if root exists get the left depth and the right depth by recursively",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "class TreeNode:\n    def __init__(self, value=0, left=None, right=None):\n        self.value = value\n        self.left = left\n        self.right = right\ndef is_valid_BST(self, root):\n    # if there is no root return False\n    if root is None:\n        return True\n    # traverse the tree to make sure it is valid",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\ndef helper(root, res):\n    if root is None:\n        return\n    helper(root.left, res)\n    res.append(root.val)",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\ndef helper(root, res):\n    if root is None:\n        return\n    res.append(root.val)\n    helper(root.left, res)",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\ndef helper(root, res):\n    if root is None:\n        return\n    helper(root.left, res)\n    helper(root.right, res)",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\ndef breadth_first_traversal(root):\n    if root is None:\n        return []\n    result = []\n    queue = []",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n# go all the way down to left then back to root then right in iterative or\n# recursive\n# for recursive solution keep track of base case (when there is no root) and\n# the recursive way\ndef inorder_traversal(root):",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\ndef build_tree(preorder, inorder):\n    # inorder (left -> right -> root ->)\n    # preorder (root -> left -> right)\n    # the absolute root will be preorder[0]\n    # all items to the left of inorder[root] will be the left subtree",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "Graph",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "class Graph:\n    def __init__(self):\n        self.vertices = {\n            'A': {'B': 1},\n            'B': {'C': 3, 'D': 2, 'E': 1},\n            'C': {'E': 4},\n            'D': {'E': 2},\n            'E': {'F': 3},\n            'F': {},\n            'G': {'D': 1},",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "Graph",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "class Graph:\n    def __init__(self):\n        self.edges = [\n            [0, 1, 0, 0, 0, 0, 0],\n            [0, 0, 3, 3, 1, 0, 0],\n            [0, 0, 0, 0, 4, 0, 0],\n            [0, 0, 0, 0, 2, 0, 0],\n            [0, 0, 0, 0, 0, 3, 0],\n            [0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 1, 0, 0, 0],",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "Vertex",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "class Vertex:\n    def __init__(self, value):\n        self.value = value\n        self.connections = {}\n    def __str__(self):\n        return str(self.value) + ' connections: ' + str(\n            [x.value for x in self.connections])\n    def add_connection(self, vert, weight=0):\n        self.connections[vert] = weight\n    def get_connections(self):",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "Graph",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "class Graph:\n    def __init__(self):\n        self.vertices = {}\n        self.count = 0\n    def __contains__(self, vert):\n        return vert in self.vertices\n    def __iter__(self):\n        return iter(self.vertices.values())\n    def add_vertex(self, value):\n        self.count += 1",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "GraphNode",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "class GraphNode:\n    def __init__(self, label):\n        self.label = label\n        self.neighbors = set()\n        self.color = None\ndef color_graph(graph, colors):\n    # make a graph to pass in\n    # try to get edges count\n    # edges plus 1 is colors\n    pass",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "Graph",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "class Graph:\n    def __init__(self):\n        self.vertices = {\n                            \"A\": {\"B\", \"C\", \"D\"},\n                            \"B\": {},\n                            \"C\": {\"E\", \"F\"},\n                            \"D\": {\"G\"},\n                            \"E\": {\"G\"},\n                            \"F\": {\"J\"},\n                            \"G\": {},",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "Graph",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "class Graph:\n    def __init__(self):\n        self.vertices = {\n                            \"A\": {\"B\", \"C\", \"D\"},\n                            \"B\": {},\n                            \"C\": {\"E\", \"F\"},\n                            \"D\": {\"G\"},\n                            \"E\": {\"G\"},\n                            \"F\": {\"J\"},\n                            \"G\": {},",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "class Solution:\n    def isCompleteTree(self, root: TreeNode) -> bool:\n        # we want to check each node for a right child\n        # if a right child exists and no left child exists we can return false\n        # if the left subtree is missing one or both children where the right\n        # subtree at that level has children return false\n        # init case where a node has no right child\n        no_right_child = False\n        # init case where a node has no children\n        no_children = False",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "maxDepth",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def maxDepth(self, root):\n    # if root is None return 0\n    if root is None:\n        return 0\n    # if root exists get the left depth and the right depth by recursively\n    # calling maxDepth on each side of the subtree\n    left_depth = self.maxDepth(root.left)\n    right_depth = self.maxDepth(root.right)\n    # if the left depth is greater than the right depth return the left depth\n    # plus 1",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "is_valid_BST",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def is_valid_BST(self, root):\n    # if there is no root return False\n    if root is None:\n        return True\n    # traverse the tree to make sure it is valid\n    else:\n        if root.left is None and root.right is None:\n            return True\n        elif root.left is None:\n            if root.right > root:",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "balancedBinaryTree",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def balancedBinaryTree(root):\n    # define method to get the height of the tree\n    def get_height(root):\n        if root is None:\n            return 0\n        return max(get_height(root.left), get_height(root.right)) + 1\n    # if the root is None return True\n    if root is None:\n        return True\n    # get the heights of each subtree",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "minimumDepthBinaryTree",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def minimumDepthBinaryTree(root):\n    # if root is None return 0\n    if root is None:\n        return 0\n    # if root has no children return 1\n    if root.left is None and root.right is None:\n        return 1\n    # if no left child traverse the right tree\n    if root.left is None:\n        return minimumDepthBinaryTree(root.right) + 1",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "helper",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def helper(root, res):\n    if root is None:\n        return\n    helper(root.left, res)\n    res.append(root.val)\n    helper(root.right, res)\ndef inorder_traversal(root):\n    result = []\n    helper(root, result)\n    return result",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "inorder_traversal",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def inorder_traversal(root):\n    result = []\n    helper(root, result)\n    return result\n\"\"\"\nDepth first pre-order traversal\n\"\"\"\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "helper",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def helper(root, res):\n    if root is None:\n        return\n    res.append(root.val)\n    helper(root.left, res)\n    helper(root.right, res)\ndef preorder_traversal(root):\n    result = []\n    helper(root, result)\n    return result",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "preorder_traversal",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def preorder_traversal(root):\n    result = []\n    helper(root, result)\n    return result\n\"\"\"\nDepth first  first post-order traversal\n\"\"\"\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "helper",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def helper(root, res):\n    if root is None:\n        return\n    helper(root.left, res)\n    helper(root.right, res)\n    res.append(root.val)\ndef postorder_traversal(root):\n    result = []\n    helper(root, result)\n    return result",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "postorder_traversal",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def postorder_traversal(root):\n    result = []\n    helper(root, result)\n    return result\n\"\"\"\nBreadth first level order traversal\n\"\"\"\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "breadth_first_traversal",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def breadth_first_traversal(root):\n    if root is None:\n        return []\n    result = []\n    queue = []\n    queue.append(root)\n    while len(queue) != 0:\n        node = queue.pop(0)\n        result.append(node.val)\n        if node.left is not None:",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "inorder_traversal",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def inorder_traversal(root):\n    # base case\n    if root is None:\n        return []\n    # recursively call the function on the left child until no more left\n    # children then the root will be none and the values are returned up the\n    # chain inorder\n    return inorder_traversal(root.left) + [root.val] + inorder_traversal(\n        root.right)\n# the iterative way with a stack",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "build_tree",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def build_tree(preorder, inorder):\n    # inorder (left -> right -> root ->)\n    # preorder (root -> left -> right)\n    # the absolute root will be preorder[0]\n    # all items to the left of inorder[root] will be the left subtree\n    # all items to the right of inorder[root] will be the right subtree\n    # pick the next element in preorder starting with item[0]\n    # create a new node with val set to the element\n    # delete it from preorder\n    # get the index of that element from inorder list using hashMaps to",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "binaryTreeInOrderTraversal",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def binaryTreeInOrderTraversal(root):\n    stack = []\n    result = []\n    while root is not None or stack != []:\n        while root is not None:\n            stack.append(root)\n            root = root.left\n        root = stack.pop()\n        result.append(root.value)\n        root = root.right",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "traverseTree",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def traverseTree(t):\n    queue = []\n    result = []\n    if t is None:\n        return result\n    root = t\n    queue.append(root)\n    while len(queue) > 0:\n        root = queue.pop(0)\n        result.append(root.value)",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "treePaths",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def treePaths(t):\n    if t is None:\n        return []\n    result, stack = [], [(t, '')]\n    while stack:\n        root, el = stack.pop()\n        if root.left is None and root.right is None:\n            result.append(el + str(root.value))\n        if root.right:\n            stack.append((root.right, el + str(root.value) + '->'))",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "color_graph",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def color_graph(graph, colors):\n    # make a graph to pass in\n    # try to get edges count\n    # edges plus 1 is colors\n    pass\n\"\"\"\n*** Demo 2 ***\n--------------\nYou are given a 2d grid of `\"1\"`s and `\"0\"`s that represents a \"map\". The\n`\"1\"`s represent land and the `\"0\"s` represent water.",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "numIslands",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def numIslands(grid):\n    pass\n# print(numIslands(grid))\n\"\"\"\n*** Code signal ***\n-------------------\nYou are given a directed acyclic graph (DAG) that contains N nodes.\nWrite a function that can find all the possible paths from node 0 to node N - 1. You can return the path in any order.\ngraph[a] is a list of all nodes b for which the edge a -> b exists.\nExample:",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "csFindAllPathsFromAToB",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def csFindAllPathsFromAToB(graph):\n    class Graph:\n        def __init__(self):\n            self.verts = {}\n        def add_vertex(self, vert):\n            self.verts[vert] = []\n        def add_edge(self, v_from, v_to):\n            self.verts[v_from].append(v_to)\n        def is_connected(self, v_from, v_to):\n            if v_from in self.verts and v_to in self.verts:",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "floodfill",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def floodfill(image, row, col, color):\n    if image[row][col] != ' ':\n        return\n    image[row][col] = color\n    floodfill(row, col + 1, color)\n    floodfill(row, col - 1, color)\n    floodfill(row + 1, col, color)\n    floodfill(row - 1, col, color)\n\"\"\"\nDemo 2",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "find_judge",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def find_judge(N, trust):\n    \"\"\"\n    Inputs:\n    N -> int\n    trust -> List[List[int]]\n    Output:\n    int\n    \"\"\"\n    # Your code here\n\"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "csFriendCircles",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def csFriendCircles(friendships):\n    # use dfs to ensure visiting every node\n    class Graph:\n        def __init__(self):\n            self.verts = {}\n        def add_vertex(self, vert):\n            self.verts[vert] = []\n        def add_edge(self, v_from, v_to):\n            self.verts[v_from].append(v_to)\n        def is_connected(self, v_from, v_to):",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "get_neighbors",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def get_neighbors(word):\n    neighbors = []\n    for w in words:\n        if len(w) == len(word):\n            diff = 0\n            for i in range(len(w)):\n                if w[i] != word[i]:\n                    diff += 1\n                if diff > 1:\n                    break",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "bfs",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def bfs(start_word, end_word):\n    print('s, e', start_word, end_word)\n    visited = set()\n    q = [[start_word]]\n    while q:\n        path = q.pop(0)\n        v = path[-1]\n        if v not in visited:\n            visited.add(v)\n            if v == end_word:",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "csBSTRangeSum",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def csBSTRangeSum(root, lower, upper):\n    # variable to hold running sum of target numbers\n    range = []\n    # variable to hold the current node\n    cur = root\n    # search the tree to find all numbers within the range of lower and upper\n    # dfs\n    def helper(root):\n        if root is None:\n            return",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "csBinaryTreeInvert",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def csBinaryTreeInvert(root):\n    # use a bft to visit all levels and switch the positions of left and\n    # right children for each node at each level\n    if root is None:\n        return []\n    result = []\n    queue = []\n    queue.append(root)\n    while len(queue) != 0:\n        node = queue.pop(0)",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "reversePairs",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def reversePairs(nums):\n    # EDGE CASE if the array length is less than 2 return 0\n    if len(nums) < 2:\n        return 0\n    # init i to 0 and j to 1\n    i = 0\n    j = 1\n    # init count for reverse pairs found\n    count = 0\n    # iterate the array",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "log2(128)",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "log2(128) = h\n2**7 = 128\n7 <~~ answer\n- Calculate the total number of nodes on a perfect binary tree, given that \n  the height of the tree is 8.\nn = 2h - 1\nn = 2**8 - 1\nn = 256 - 1\nn = 255 <~~ answer\n\"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "2**7",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "2**7 = 128\n7 <~~ answer\n- Calculate the total number of nodes on a perfect binary tree, given that \n  the height of the tree is 8.\nn = 2h - 1\nn = 2**8 - 1\nn = 256 - 1\nn = 255 <~~ answer\n\"\"\"\n\"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "n = 2h - 1\nn = 2**8 - 1\nn = 256 - 1\nn = 255 <~~ answer\n\"\"\"\n\"\"\"\n*** Objective 2 Challenge *** \n-----------------------------\n- In your own words, explain why an unbalanced binary search tree's \nperformance becomes degraded.",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "n = 2**8 - 1\nn = 256 - 1\nn = 255 <~~ answer\n\"\"\"\n\"\"\"\n*** Objective 2 Challenge *** \n-----------------------------\n- In your own words, explain why an unbalanced binary search tree's \nperformance becomes degraded.\nThe worst case performance is linear because each node would potentially need to be traversed",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "n = 256 - 1\nn = 255 <~~ answer\n\"\"\"\n\"\"\"\n*** Objective 2 Challenge *** \n-----------------------------\n- In your own words, explain why an unbalanced binary search tree's \nperformance becomes degraded.\nThe worst case performance is linear because each node would potentially need to be traversed\n\"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "n = 255 <~~ answer\n\"\"\"\n\"\"\"\n*** Objective 2 Challenge *** \n-----------------------------\n- In your own words, explain why an unbalanced binary search tree's \nperformance becomes degraded.\nThe worst case performance is linear because each node would potentially need to be traversed\n\"\"\"\n\"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "preorder",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "preorder = [5,7,22,13,9]\ninorder = [7,5,13,22,9]\nOutput:\n    5\n   / \\\n  7  22\n    /  \\\n   13   9\n   - Preorder Traversal\n--- Visit the root node first",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "inorder",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "inorder = [7,5,13,22,9]\nOutput:\n    5\n   / \\\n  7  22\n    /  \\\n   13   9\n   - Preorder Traversal\n--- Visit the root node first\n--- Traverse the left subtree in preorder",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "preorder",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "preorder = [5, 7, 22, 13, 9]\ninorder = [7, 5, 13, 22, 9]\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\ndef build_tree(preorder, inorder):\n    # inorder (left -> right -> root ->)",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "inorder",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "inorder = [7, 5, 13, 22, 9]\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\ndef build_tree(preorder, inorder):\n    # inorder (left -> right -> root ->)\n    # preorder (root -> left -> right)",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "tree",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "tree = build_tree(preorder, inorder)\n# print('tree:', inorder_traversal(tree))\n\"\"\"\n*** CodeSignal ***\n------------------\n\"\"\"\n\"\"\"\nYou are given a binary tree. Write a function that returns the binary tree's node values using an in-order traversal.\nExample:\nInput: [2,None,3,4]",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "t = {\n    \"value\": 1,\n    \"left\": {\n        \"value\": 2,\n        \"left\": null,\n        \"right\": {\n            \"value\": 3,\n            \"left\": null,\n            \"right\": null\n        }",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "traverseTree(t)",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "traverseTree(t) = [1, 2, 4, 3, 5].\nThis t looks like this:\n     1\n   /   \\\n  2     4\n   \\   /\n    3 5\n\"\"\"\nt = {\n    \"value\": 1,",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "t = {\n    \"value\": 1,\n    \"left\": {\n        \"value\": 2,\n        \"left\": None,\n        \"right\": {\n            \"value\": 3,\n            \"left\": None,\n            \"right\": None\n        }",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "t = {\n    \"value\": 5,\n    \"left\": {\n        \"value\": 2,\n        \"left\": {\n            \"value\": 10,\n            \"left\": null,\n            \"right\": null\n        },\n        \"right\": {",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "treePaths(t)",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "treePaths(t) = [\"5->2->10\", \"5->2->4\", \"5->-3\"].\nThe given tree looks like this:\n    5\n   / \\\n  2  -3\n / \\\n10  4\n\"\"\"\n#\n# Binary trees are already defined with this interface:",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "g_verts",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "g_verts = ['A', 'B', 'C', 'D', 'E']\ng = Graph()\nfor v in g_verts:\n    g.add_vertex(g)\ng.add_edge('A', 'B', 1)\ng.add_edge('B', 'C', 3)\ng.add_edge('B', 'D', 2)\ng.add_edge('E', 'D', 1)\n# for v in g:\n#     for w in v.get_connections():",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "g",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "g = Graph()\nfor v in g_verts:\n    g.add_vertex(g)\ng.add_edge('A', 'B', 1)\ng.add_edge('B', 'C', 3)\ng.add_edge('B', 'D', 2)\ng.add_edge('E', 'D', 1)\n# for v in g:\n#     for w in v.get_connections():\n#         print(\"( %s, %s )\" % (v.get_value(), w.get_value()))",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "grid",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "grid = [\n    [\"1\", \"1\", \"1\", \"1\", \"0\"],\n    [\"1\", \"1\", \"0\", \"1\", \"0\"],\n    [\"1\", \"1\", \"0\", \"0\", \"0\"],\n    [\"0\", \"0\", \"0\", \"0\", \"0\"]\n]\ndef numIslands(grid):\n    pass\n# print(numIslands(grid))\n\"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "graph",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "graph = [[1, 2], [3], [3], [4], []]\ndef csFindAllPathsFromAToB(graph):\n    class Graph:\n        def __init__(self):\n            self.verts = {}\n        def add_vertex(self, vert):\n            self.verts[vert] = []\n        def add_edge(self, v_from, v_to):\n            self.verts[v_from].append(v_to)\n        def is_connected(self, v_from, v_to):",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "image",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "image = [[1,1,1],[1,1,0],[1,0,1]]\nsr = 1, sc = 1, newColor = 2\nOutput: [[2,2,2],[2,2,0],[2,0,1]]\nExplanation:\nFrom the center of the image (with position (sr, sc) = (1, 1)), all pixels\nconnected by a path of the same color as the starting pixel are colored with\nthe new color.\nNote the bottom corner is not colored 2, because it is not 4-directionally\nconnected to the starting pixel.\n```",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "sr",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "sr = 1, sc = 1, newColor = 2\nOutput: [[2,2,2],[2,2,0],[2,0,1]]\nExplanation:\nFrom the center of the image (with position (sr, sc) = (1, 1)), all pixels\nconnected by a path of the same color as the starting pixel are colored with\nthe new color.\nNote the bottom corner is not colored 2, because it is not 4-directionally\nconnected to the starting pixel.\n```\nNotes:",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "friendships",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "friendships = [[1, 1, 0],\n               [1, 1, 0],\n               [0, 0, 1]]\nfriendships = [[1, 1, 0],\n               [1, 1, 1],\n               [0, 1, 1]]\ndef csFriendCircles(friendships):\n    # use dfs to ensure visiting every node\n    class Graph:\n        def __init__(self):",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "friendships",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "friendships = [[1, 1, 0],\n               [1, 1, 1],\n               [0, 1, 1]]\ndef csFriendCircles(friendships):\n    # use dfs to ensure visiting every node\n    class Graph:\n        def __init__(self):\n            self.verts = {}\n        def add_vertex(self, vert):\n            self.verts[vert] = []",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "start_word",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "start_word = 'hit'\nend_word = 'cog'\nreturn: ['hit', 'hot', 'cot', 'cog'] \n\"\"\"\nwords = set()\nwith open('words.txt') as f:\n    for w in f:\n        w = w.strip().lower()\n        words.add(w)\n# create function to get all the neighbors of a word ( only 1 letter diff)",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "end_word",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "end_word = 'cog'\nreturn: ['hit', 'hot', 'cot', 'cog'] \n\"\"\"\nwords = set()\nwith open('words.txt') as f:\n    for w in f:\n        w = w.strip().lower()\n        words.add(w)\n# create function to get all the neighbors of a word ( only 1 letter diff)\ndef get_neighbors(word):",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "words",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "words = set()\nwith open('words.txt') as f:\n    for w in f:\n        w = w.strip().lower()\n        words.add(w)\n# create function to get all the neighbors of a word ( only 1 letter diff)\ndef get_neighbors(word):\n    neighbors = []\n    for w in words:\n        if len(w) == len(word):",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "root = [10, 5, 15, 3, 7, null, 18]\nlower = 7\nupper = 15\n         10\n         / \\\n        5  15\n       / \\    \\\n      3   7    18\nOutput:\n32",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "lower",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "lower = 7\nupper = 15\n         10\n         / \\\n        5  15\n       / \\    \\\n      3   7    18\nOutput:\n32\nExample 2:",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "upper",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "upper = 15\n         10\n         / \\\n        5  15\n       / \\    \\\n      3   7    18\nOutput:\n32\nExample 2:\nInput:",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "root = [10,5,15,3,7,13,18,1,null,6]\nlower = 6\nupper = 10\n           10\n          /  \\\n       5       15\n     / \\     /   \\ \n    3   7  13   18\n   /   /\n  1   6",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "lower",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "lower = 6\nupper = 10\n           10\n          /  \\\n       5       15\n     / \\     /   \\ \n    3   7  13   18\n   /   /\n  1   6\nOutput:",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "upper",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "upper = 10\n           10\n          /  \\\n       5       15\n     / \\     /   \\ \n    3   7  13   18\n   /   /\n  1   6\nOutput:\n23",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "root = [10, 5, 15, 3, 7, None, 18]\nlower = 7\nupper = 15\n#\n# Binary trees are already defined with this interface:\n# class Tree(object):\n#   def __init__(self, x):\n#     self.value = x\n#     self.left = None\n#     self.right = None",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "lower",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "lower = 7\nupper = 15\n#\n# Binary trees are already defined with this interface:\n# class Tree(object):\n#   def __init__(self, x):\n#     self.value = x\n#     self.left = None\n#     self.right = None\n#",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "upper",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "upper = 15\n#\n# Binary trees are already defined with this interface:\n# class Tree(object):\n#   def __init__(self, x):\n#     self.value = x\n#     self.left = None\n#     self.right = None\n#\n# Binary trees are already defined with this interface:",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "nums",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "nums = [1, 3, 2, 3, 1]\nprint(f'reversePairs(nums): {reversePairs(nums)}')\n\"\"\"\n958. Check Completeness of a Binary Tree\nMedium\n1072\n14\nAdd to List\nShare\nGiven the root of a binary tree, determine if it is a complete binary tree.",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "BSTNode",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "class BSTNode:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n    def insert(self, value):\n        if value < self.value:\n            if self.left is None:\n                self.left = BSTNode(value)\n            else:",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "BST",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "class BST:\n    def __init__(self, value):\n        self.root = BSTNode(value)\n    def insert(self, value):\n        return self.root.insert(value)\n    def search(self, target):\n        return self.root.search(target)\n    def find_minimum_value(self):\n        return self.root.find_minimum_value().value\n    def delete(self, value):",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "BinaryTreeNode",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "class BinaryTreeNode:\n    def __init__(self, value=0, left=None, right=None):\n        self.value = value\n        self.left = left\n        self.right = right\ndef maxDepth(self, root):\n    # if root is None return 0\n    if root is None:\n        return 0\n    # if root exists get the left depth and the right depth by recursively",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "class TreeNode:\n    def __init__(self, value=0, left=None, right=None):\n        self.value = value\n        self.left = left\n        self.right = right\ndef is_valid_BST(self, root):\n    # if there is no root return False\n    if root is None:\n        return True\n    # traverse the tree to make sure it is valid",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\ndef helper(root, res):\n    if root is None:\n        return\n    helper(root.left, res)\n    res.append(root.val)",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\ndef helper(root, res):\n    if root is None:\n        return\n    res.append(root.val)\n    helper(root.left, res)",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\ndef helper(root, res):\n    if root is None:\n        return\n    helper(root.left, res)\n    helper(root.right, res)",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\ndef breadth_first_traversal(root):\n    if root is None:\n        return []\n    result = []\n    queue = []",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n# go all the way down to left then back to root then right in iterative or\n# recursive\n# for recursive solution keep track of base case (when there is no root) and\n# the recursive way\ndef inorder_traversal(root):",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\ndef build_tree(preorder, inorder):\n    # inorder (left -> right -> root ->)\n    # preorder (root -> left -> right)\n    # the absolute root will be preorder[0]\n    # all items to the left of inorder[root] will be the left subtree",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "Graph",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "class Graph:\n    def __init__(self):\n        self.vertices = {\n            'A': {'B': 1},\n            'B': {'C': 3, 'D': 2, 'E': 1},\n            'C': {'E': 4},\n            'D': {'E': 2},\n            'E': {'F': 3},\n            'F': {},\n            'G': {'D': 1},",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "Graph",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "class Graph:\n    def __init__(self):\n        self.edges = [\n            [0, 1, 0, 0, 0, 0, 0],\n            [0, 0, 3, 3, 1, 0, 0],\n            [0, 0, 0, 0, 4, 0, 0],\n            [0, 0, 0, 0, 2, 0, 0],\n            [0, 0, 0, 0, 0, 3, 0],\n            [0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 1, 0, 0, 0],",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "Vertex",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "class Vertex:\n    def __init__(self, value):\n        self.value = value\n        self.connections = {}\n    def __str__(self):\n        return str(self.value) + ' connections: ' + str(\n            [x.value for x in self.connections])\n    def add_connection(self, vert, weight=0):\n        self.connections[vert] = weight\n    def get_connections(self):",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "Graph",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "class Graph:\n    def __init__(self):\n        self.vertices = {}\n        self.count = 0\n    def __contains__(self, vert):\n        return vert in self.vertices\n    def __iter__(self):\n        return iter(self.vertices.values())\n    def add_vertex(self, value):\n        self.count += 1",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "GraphNode",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "class GraphNode:\n    def __init__(self, label):\n        self.label = label\n        self.neighbors = set()\n        self.color = None\ndef color_graph(graph, colors):\n    # make a graph to pass in\n    # try to get edges count\n    # edges plus 1 is colors\n    pass",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "Graph",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "class Graph:\n    def __init__(self):\n        self.vertices = {\n                            \"A\": {\"B\", \"C\", \"D\"},\n                            \"B\": {},\n                            \"C\": {\"E\", \"F\"},\n                            \"D\": {\"G\"},\n                            \"E\": {\"G\"},\n                            \"F\": {\"J\"},\n                            \"G\": {},",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "Graph",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "class Graph:\n    def __init__(self):\n        self.vertices = {\n                            \"A\": {\"B\", \"C\", \"D\"},\n                            \"B\": {},\n                            \"C\": {\"E\", \"F\"},\n                            \"D\": {\"G\"},\n                            \"E\": {\"G\"},\n                            \"F\": {\"J\"},\n                            \"G\": {},",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "class Solution:\n    def isCompleteTree(self, root: TreeNode) -> bool:\n        # we want to check each node for a right child\n        # if a right child exists and no left child exists we can return false\n        # if the left subtree is missing one or both children where the right\n        # subtree at that level has children return false\n        # init case where a node has no right child\n        no_right_child = False\n        # init case where a node has no children\n        no_children = False",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "maxDepth",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def maxDepth(self, root):\n    # if root is None return 0\n    if root is None:\n        return 0\n    # if root exists get the left depth and the right depth by recursively\n    # calling maxDepth on each side of the subtree\n    left_depth = self.maxDepth(root.left)\n    right_depth = self.maxDepth(root.right)\n    # if the left depth is greater than the right depth return the left depth\n    # plus 1",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "is_valid_BST",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def is_valid_BST(self, root):\n    # if there is no root return False\n    if root is None:\n        return True\n    # traverse the tree to make sure it is valid\n    else:\n        if root.left is None and root.right is None:\n            return True\n        elif root.left is None:\n            if root.right > root:",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "balancedBinaryTree",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def balancedBinaryTree(root):\n    # define method to get the height of the tree\n    def get_height(root):\n        if root is None:\n            return 0\n        return max(get_height(root.left), get_height(root.right)) + 1\n    # if the root is None return True\n    if root is None:\n        return True\n    # get the heights of each subtree",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "minimumDepthBinaryTree",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def minimumDepthBinaryTree(root):\n    # if root is None return 0\n    if root is None:\n        return 0\n    # if root has no children return 1\n    if root.left is None and root.right is None:\n        return 1\n    # if no left child traverse the right tree\n    if root.left is None:\n        return minimumDepthBinaryTree(root.right) + 1",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "helper",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def helper(root, res):\n    if root is None:\n        return\n    helper(root.left, res)\n    res.append(root.val)\n    helper(root.right, res)\ndef inorder_traversal(root):\n    result = []\n    helper(root, result)\n    return result",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "inorder_traversal",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def inorder_traversal(root):\n    result = []\n    helper(root, result)\n    return result\n\"\"\"\nDepth first pre-order traversal\n\"\"\"\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "helper",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def helper(root, res):\n    if root is None:\n        return\n    res.append(root.val)\n    helper(root.left, res)\n    helper(root.right, res)\ndef preorder_traversal(root):\n    result = []\n    helper(root, result)\n    return result",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "preorder_traversal",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def preorder_traversal(root):\n    result = []\n    helper(root, result)\n    return result\n\"\"\"\nDepth first  first post-order traversal\n\"\"\"\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "helper",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def helper(root, res):\n    if root is None:\n        return\n    helper(root.left, res)\n    helper(root.right, res)\n    res.append(root.val)\ndef postorder_traversal(root):\n    result = []\n    helper(root, result)\n    return result",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "postorder_traversal",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def postorder_traversal(root):\n    result = []\n    helper(root, result)\n    return result\n\"\"\"\nBreadth first level order traversal\n\"\"\"\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "breadth_first_traversal",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def breadth_first_traversal(root):\n    if root is None:\n        return []\n    result = []\n    queue = []\n    queue.append(root)\n    while len(queue) != 0:\n        node = queue.pop(0)\n        result.append(node.val)\n        if node.left is not None:",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "inorder_traversal",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def inorder_traversal(root):\n    # base case\n    if root is None:\n        return []\n    # recursively call the function on the left child until no more left\n    # children then the root will be none and the values are returned up the\n    # chain inorder\n    return inorder_traversal(root.left) + [root.val] + inorder_traversal(\n        root.right)\n# the iterative way with a stack",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "build_tree",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def build_tree(preorder, inorder):\n    # inorder (left -> right -> root ->)\n    # preorder (root -> left -> right)\n    # the absolute root will be preorder[0]\n    # all items to the left of inorder[root] will be the left subtree\n    # all items to the right of inorder[root] will be the right subtree\n    # pick the next element in preorder starting with item[0]\n    # create a new node with val set to the element\n    # delete it from preorder\n    # get the index of that element from inorder list using hashMaps to",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "binaryTreeInOrderTraversal",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def binaryTreeInOrderTraversal(root):\n    stack = []\n    result = []\n    while root is not None or stack != []:\n        while root is not None:\n            stack.append(root)\n            root = root.left\n        root = stack.pop()\n        result.append(root.value)\n        root = root.right",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "traverseTree",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def traverseTree(t):\n    queue = []\n    result = []\n    if t is None:\n        return result\n    root = t\n    queue.append(root)\n    while len(queue) > 0:\n        root = queue.pop(0)\n        result.append(root.value)",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "treePaths",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def treePaths(t):\n    if t is None:\n        return []\n    result, stack = [], [(t, '')]\n    while stack:\n        root, el = stack.pop()\n        if root.left is None and root.right is None:\n            result.append(el + str(root.value))\n        if root.right:\n            stack.append((root.right, el + str(root.value) + '->'))",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "color_graph",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def color_graph(graph, colors):\n    # make a graph to pass in\n    # try to get edges count\n    # edges plus 1 is colors\n    pass\n\"\"\"\n*** Demo 2 ***\n--------------\nYou are given a 2d grid of `\"1\"`s and `\"0\"`s that represents a \"map\". The\n`\"1\"`s represent land and the `\"0\"s` represent water.",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "numIslands",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def numIslands(grid):\n    pass\n# print(numIslands(grid))\n\"\"\"\n*** Code signal ***\n-------------------\nYou are given a directed acyclic graph (DAG) that contains N nodes.\nWrite a function that can find all the possible paths from node 0 to node N - 1. You can return the path in any order.\ngraph[a] is a list of all nodes b for which the edge a -> b exists.\nExample:",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "csFindAllPathsFromAToB",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def csFindAllPathsFromAToB(graph):\n    class Graph:\n        def __init__(self):\n            self.verts = {}\n        def add_vertex(self, vert):\n            self.verts[vert] = []\n        def add_edge(self, v_from, v_to):\n            self.verts[v_from].append(v_to)\n        def is_connected(self, v_from, v_to):\n            if v_from in self.verts and v_to in self.verts:",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "floodfill",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def floodfill(image, row, col, color):\n    if image[row][col] != ' ':\n        return\n    image[row][col] = color\n    floodfill(row, col + 1, color)\n    floodfill(row, col - 1, color)\n    floodfill(row + 1, col, color)\n    floodfill(row - 1, col, color)\n\"\"\"\nDemo 2",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "find_judge",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def find_judge(N, trust):\n    \"\"\"\n    Inputs:\n    N -> int\n    trust -> List[List[int]]\n    Output:\n    int\n    \"\"\"\n    # Your code here\n\"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "csFriendCircles",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def csFriendCircles(friendships):\n    # use dfs to ensure visiting every node\n    class Graph:\n        def __init__(self):\n            self.verts = {}\n        def add_vertex(self, vert):\n            self.verts[vert] = []\n        def add_edge(self, v_from, v_to):\n            self.verts[v_from].append(v_to)\n        def is_connected(self, v_from, v_to):",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "get_neighbors",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def get_neighbors(word):\n    neighbors = []\n    for w in words:\n        if len(w) == len(word):\n            diff = 0\n            for i in range(len(w)):\n                if w[i] != word[i]:\n                    diff += 1\n                if diff > 1:\n                    break",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "bfs",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def bfs(start_word, end_word):\n    print('s, e', start_word, end_word)\n    visited = set()\n    q = [[start_word]]\n    while q:\n        path = q.pop(0)\n        v = path[-1]\n        if v not in visited:\n            visited.add(v)\n            if v == end_word:",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "csBSTRangeSum",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def csBSTRangeSum(root, lower, upper):\n    # variable to hold running sum of target numbers\n    range = []\n    # variable to hold the current node\n    cur = root\n    # search the tree to find all numbers within the range of lower and upper\n    # dfs\n    def helper(root):\n        if root is None:\n            return",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "csBinaryTreeInvert",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def csBinaryTreeInvert(root):\n    # use a bft to visit all levels and switch the positions of left and\n    # right children for each node at each level\n    if root is None:\n        return []\n    result = []\n    queue = []\n    queue.append(root)\n    while len(queue) != 0:\n        node = queue.pop(0)",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "reversePairs",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def reversePairs(nums):\n    # EDGE CASE if the array length is less than 2 return 0\n    if len(nums) < 2:\n        return 0\n    # init i to 0 and j to 1\n    i = 0\n    j = 1\n    # init count for reverse pairs found\n    count = 0\n    # iterate the array",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "log2(128)",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "log2(128) = h\n2**7 = 128\n7 <~~ answer\n- Calculate the total number of nodes on a perfect binary tree, given that \n  the height of the tree is 8.\nn = 2h - 1\nn = 2**8 - 1\nn = 256 - 1\nn = 255 <~~ answer\n\"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "2**7",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "2**7 = 128\n7 <~~ answer\n- Calculate the total number of nodes on a perfect binary tree, given that \n  the height of the tree is 8.\nn = 2h - 1\nn = 2**8 - 1\nn = 256 - 1\nn = 255 <~~ answer\n\"\"\"\n\"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "n = 2h - 1\nn = 2**8 - 1\nn = 256 - 1\nn = 255 <~~ answer\n\"\"\"\n\"\"\"\n*** Objective 2 Challenge *** \n-----------------------------\n- In your own words, explain why an unbalanced binary search tree's \nperformance becomes degraded.",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "n = 2**8 - 1\nn = 256 - 1\nn = 255 <~~ answer\n\"\"\"\n\"\"\"\n*** Objective 2 Challenge *** \n-----------------------------\n- In your own words, explain why an unbalanced binary search tree's \nperformance becomes degraded.\nThe worst case performance is linear because each node would potentially need to be traversed",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "n = 256 - 1\nn = 255 <~~ answer\n\"\"\"\n\"\"\"\n*** Objective 2 Challenge *** \n-----------------------------\n- In your own words, explain why an unbalanced binary search tree's \nperformance becomes degraded.\nThe worst case performance is linear because each node would potentially need to be traversed\n\"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "n = 255 <~~ answer\n\"\"\"\n\"\"\"\n*** Objective 2 Challenge *** \n-----------------------------\n- In your own words, explain why an unbalanced binary search tree's \nperformance becomes degraded.\nThe worst case performance is linear because each node would potentially need to be traversed\n\"\"\"\n\"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "preorder",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "preorder = [5,7,22,13,9]\ninorder = [7,5,13,22,9]\nOutput:\n    5\n   / \\\n  7  22\n    /  \\\n   13   9\n   - Preorder Traversal\n--- Visit the root node first",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "inorder",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "inorder = [7,5,13,22,9]\nOutput:\n    5\n   / \\\n  7  22\n    /  \\\n   13   9\n   - Preorder Traversal\n--- Visit the root node first\n--- Traverse the left subtree in preorder",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "preorder",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "preorder = [5, 7, 22, 13, 9]\ninorder = [7, 5, 13, 22, 9]\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\ndef build_tree(preorder, inorder):\n    # inorder (left -> right -> root ->)",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "inorder",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "inorder = [7, 5, 13, 22, 9]\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\ndef build_tree(preorder, inorder):\n    # inorder (left -> right -> root ->)\n    # preorder (root -> left -> right)",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "tree",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "tree = build_tree(preorder, inorder)\n# print('tree:', inorder_traversal(tree))\n\"\"\"\n*** CodeSignal ***\n------------------\n\"\"\"\n\"\"\"\nYou are given a binary tree. Write a function that returns the binary tree's node values using an in-order traversal.\nExample:\nInput: [2,None,3,4]",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "t = {\n    \"value\": 1,\n    \"left\": {\n        \"value\": 2,\n        \"left\": null,\n        \"right\": {\n            \"value\": 3,\n            \"left\": null,\n            \"right\": null\n        }",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "traverseTree(t)",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "traverseTree(t) = [1, 2, 4, 3, 5].\nThis t looks like this:\n     1\n   /   \\\n  2     4\n   \\   /\n    3 5\n\"\"\"\nt = {\n    \"value\": 1,",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "t = {\n    \"value\": 1,\n    \"left\": {\n        \"value\": 2,\n        \"left\": None,\n        \"right\": {\n            \"value\": 3,\n            \"left\": None,\n            \"right\": None\n        }",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "t = {\n    \"value\": 5,\n    \"left\": {\n        \"value\": 2,\n        \"left\": {\n            \"value\": 10,\n            \"left\": null,\n            \"right\": null\n        },\n        \"right\": {",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "treePaths(t)",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "treePaths(t) = [\"5->2->10\", \"5->2->4\", \"5->-3\"].\nThe given tree looks like this:\n    5\n   / \\\n  2  -3\n / \\\n10  4\n\"\"\"\n#\n# Binary trees are already defined with this interface:",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "g_verts",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "g_verts = ['A', 'B', 'C', 'D', 'E']\ng = Graph()\nfor v in g_verts:\n    g.add_vertex(g)\ng.add_edge('A', 'B', 1)\ng.add_edge('B', 'C', 3)\ng.add_edge('B', 'D', 2)\ng.add_edge('E', 'D', 1)\n# for v in g:\n#     for w in v.get_connections():",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "g",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "g = Graph()\nfor v in g_verts:\n    g.add_vertex(g)\ng.add_edge('A', 'B', 1)\ng.add_edge('B', 'C', 3)\ng.add_edge('B', 'D', 2)\ng.add_edge('E', 'D', 1)\n# for v in g:\n#     for w in v.get_connections():\n#         print(\"( %s, %s )\" % (v.get_value(), w.get_value()))",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "grid",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "grid = [\n    [\"1\", \"1\", \"1\", \"1\", \"0\"],\n    [\"1\", \"1\", \"0\", \"1\", \"0\"],\n    [\"1\", \"1\", \"0\", \"0\", \"0\"],\n    [\"0\", \"0\", \"0\", \"0\", \"0\"]\n]\ndef numIslands(grid):\n    pass\n# print(numIslands(grid))\n\"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "graph",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "graph = [[1, 2], [3], [3], [4], []]\ndef csFindAllPathsFromAToB(graph):\n    class Graph:\n        def __init__(self):\n            self.verts = {}\n        def add_vertex(self, vert):\n            self.verts[vert] = []\n        def add_edge(self, v_from, v_to):\n            self.verts[v_from].append(v_to)\n        def is_connected(self, v_from, v_to):",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "image",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "image = [[1,1,1],[1,1,0],[1,0,1]]\nsr = 1, sc = 1, newColor = 2\nOutput: [[2,2,2],[2,2,0],[2,0,1]]\nExplanation:\nFrom the center of the image (with position (sr, sc) = (1, 1)), all pixels\nconnected by a path of the same color as the starting pixel are colored with\nthe new color.\nNote the bottom corner is not colored 2, because it is not 4-directionally\nconnected to the starting pixel.\n```",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "sr",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "sr = 1, sc = 1, newColor = 2\nOutput: [[2,2,2],[2,2,0],[2,0,1]]\nExplanation:\nFrom the center of the image (with position (sr, sc) = (1, 1)), all pixels\nconnected by a path of the same color as the starting pixel are colored with\nthe new color.\nNote the bottom corner is not colored 2, because it is not 4-directionally\nconnected to the starting pixel.\n```\nNotes:",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "friendships",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "friendships = [[1, 1, 0],\n               [1, 1, 0],\n               [0, 0, 1]]\nfriendships = [[1, 1, 0],\n               [1, 1, 1],\n               [0, 1, 1]]\ndef csFriendCircles(friendships):\n    # use dfs to ensure visiting every node\n    class Graph:\n        def __init__(self):",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "friendships",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "friendships = [[1, 1, 0],\n               [1, 1, 1],\n               [0, 1, 1]]\ndef csFriendCircles(friendships):\n    # use dfs to ensure visiting every node\n    class Graph:\n        def __init__(self):\n            self.verts = {}\n        def add_vertex(self, vert):\n            self.verts[vert] = []",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "start_word",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "start_word = 'hit'\nend_word = 'cog'\nreturn: ['hit', 'hot', 'cot', 'cog'] \n\"\"\"\nwords = set()\nwith open('words.txt') as f:\n    for w in f:\n        w = w.strip().lower()\n        words.add(w)\n# create function to get all the neighbors of a word ( only 1 letter diff)",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "end_word",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "end_word = 'cog'\nreturn: ['hit', 'hot', 'cot', 'cog'] \n\"\"\"\nwords = set()\nwith open('words.txt') as f:\n    for w in f:\n        w = w.strip().lower()\n        words.add(w)\n# create function to get all the neighbors of a word ( only 1 letter diff)\ndef get_neighbors(word):",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "words",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "words = set()\nwith open('words.txt') as f:\n    for w in f:\n        w = w.strip().lower()\n        words.add(w)\n# create function to get all the neighbors of a word ( only 1 letter diff)\ndef get_neighbors(word):\n    neighbors = []\n    for w in words:\n        if len(w) == len(word):",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "root = [10, 5, 15, 3, 7, null, 18]\nlower = 7\nupper = 15\n         10\n         / \\\n        5  15\n       / \\    \\\n      3   7    18\nOutput:\n32",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "lower",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "lower = 7\nupper = 15\n         10\n         / \\\n        5  15\n       / \\    \\\n      3   7    18\nOutput:\n32\nExample 2:",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "upper",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "upper = 15\n         10\n         / \\\n        5  15\n       / \\    \\\n      3   7    18\nOutput:\n32\nExample 2:\nInput:",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "root = [10,5,15,3,7,13,18,1,null,6]\nlower = 6\nupper = 10\n           10\n          /  \\\n       5       15\n     / \\     /   \\ \n    3   7  13   18\n   /   /\n  1   6",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "lower",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "lower = 6\nupper = 10\n           10\n          /  \\\n       5       15\n     / \\     /   \\ \n    3   7  13   18\n   /   /\n  1   6\nOutput:",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "upper",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "upper = 10\n           10\n          /  \\\n       5       15\n     / \\     /   \\ \n    3   7  13   18\n   /   /\n  1   6\nOutput:\n23",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "root = [10, 5, 15, 3, 7, None, 18]\nlower = 7\nupper = 15\n#\n# Binary trees are already defined with this interface:\n# class Tree(object):\n#   def __init__(self, x):\n#     self.value = x\n#     self.left = None\n#     self.right = None",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "lower",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "lower = 7\nupper = 15\n#\n# Binary trees are already defined with this interface:\n# class Tree(object):\n#   def __init__(self, x):\n#     self.value = x\n#     self.left = None\n#     self.right = None\n#",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "upper",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "upper = 15\n#\n# Binary trees are already defined with this interface:\n# class Tree(object):\n#   def __init__(self, x):\n#     self.value = x\n#     self.left = None\n#     self.right = None\n#\n# Binary trees are already defined with this interface:",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "nums",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "nums = [1, 3, 2, 3, 1]\nprint(f'reversePairs(nums): {reversePairs(nums)}')\n\"\"\"\n958. Check Completeness of a Binary Tree\nMedium\n1072\n14\nAdd to List\nShare\nGiven the root of a binary tree, determine if it is a complete binary tree.",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "class ListNode:\n    def __init__(self, key, value):\n        self.key = key\n        self.value = value\n        self.next = None\nclass MyHashTable:\n    def __init__(self):\n        # Your code here\n        self.size = 10\n        self.keys = [None] * self.size",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "MyHashTable",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "class MyHashTable:\n    def __init__(self):\n        # Your code here\n        self.size = 10\n        self.keys = [None] * self.size\n        self.values = [None] * self.size\n        self.item_count = 0\n    def djb2(self, key):\n        str_key = str(key).encode()\n        hash_value = 5381",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "are_words_sorted",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "def are_words_sorted(words, alpha_order):\n    \"\"\"\n    Inputs:\n    words: List[str]\n    alpha_order: str\n    Output:\n    bool\n    \"\"\"\n    # Your code here\n    # map the letters of the string alpha_order to a dictionary",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "csFindTheSingleNumber",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "def csFindTheSingleNumber(nums):\n    appearances = {}\n    # hash the list into a dict with the number of appearances being the value\n    # and the number itself as the key\n    for num in nums:\n        if num in appearances:\n            appearances[num] += 1\n        else:\n            appearances[num] = 1\n    # return the key with the value of 1",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "csAverageOfTopFive",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "def csAverageOfTopFive(scores):\n    students_scores = {}\n    # create a dict with each student as the key and an array of their scores\n    # as the value\n    for score in scores:\n        student = score[0]\n        num = score[1]\n        if student in students_scores:\n            students_scores[student].append(num)\n        else:",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "csMaxNumberOfLambdas",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "def csMaxNumberOfLambdas(text):\n    # create dict to hold number of times letters in lambda appear\n    # (the letter 'a' will need to be twice the amount of other letters for\n    # each valid lambda)\n    lambdas = {\"l\": 0, \"a\": 0, \"m\": 0, \"b\": 0, \"d\": 0}\n    # get number count for valid letters from \"text\"\n    for letter in text:\n        if letter in lambdas:\n            lambdas[letter] += 1\n    minimum_letter = lambdas['l']",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "top_k_frequent",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "def top_k_frequent(words, k):\n    \"\"\"\n    Input:\n    words -> List[str]\n    k -> int\n    Output:\n    List[str]\n    \"\"\"\n    # create dict to hold words frequencies\n    word_freqs = {}",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "frequency_sort",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "def frequency_sort(s: str) -> str:\n    \"\"\"\n    Inputs:\n    s -> str\n    Output:\n    str\n    \"\"\"\n    letter_freq = {}\n    for char in s:\n        if char not in letter_freq:",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "csIsomorphicStrings",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "def csIsomorphicStrings(a, b):\n    if len(set(a)) == len(set(b)):\n        return True\n    return False\n# print(csIsomorphicStrings(a, b))\n\"\"\"\n*** csWordPattern ***\n---------------------\nGiven a pattern and a string a, find if a follows the same pattern.\nHere, to \"follow\" means a full match, such that there is a one-to-one correspondence between a letter in pattern and a non-empty word in s.",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "csWordPattern",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "def csWordPattern(pattern, a):\n    word_arr = a.split(' ')\n    if len(pattern) != len(word_arr):\n        return False\n    pattern_map = {}\n    for i in range(len(pattern)):\n        if pattern[i] not in pattern_map:\n            if word_arr[i] not in pattern_map.values():\n                pattern_map[pattern[i]] = word_arr[i]\n            else:",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "csGroupAnagrams",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "def csGroupAnagrams(strs):\n    result = {}\n    for w in strs:\n        signature = ''.join(sorted(w))\n        if signature not in result:\n            result[signature] = []\n        result[signature].append(w)\n    all_results = []\n    for item in result:\n        all_results.append(result[item])",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "condense_linked_list",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "def condense_linked_list(node):\n    # keep track of seen values\n    seen_values = []\n    cur = node\n    prev = None\n    # iterate linked list from the head\n    while cur is not None:\n        print(cur.value)\n        # if current is in seen values\n        if cur.value in seen_values:",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "first_not_repeating_character",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "def first_not_repeating_character(s):\n    # create hashmap of string and occurences of letters\n    # return the first key with the value of 1\n    chars = {}\n    for letter in s:\n        if letter not in chars:\n            chars[letter] = 1\n        else:\n            chars[letter] += 1\n    for key in chars:",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "uncover_spy",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "def uncover_spy(n, trust):\n    # create map of people who trust\n    # return the person who trusts no one\n    trusts = {}\n    trusted = {}\n    for i in range(1, n + 1):\n        trusts[i] = []\n        trusted[i] = []\n    for group in trust:\n        if group[0] in trusts:",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "hash_table",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "hash_table = MyHashTable();\nhash_table.put(\"a\", 1);\nhash_table.put(\"b\", 2);\nhash_table.get(\"a\");            // returns 1\nhash_table.get(\"c\");            // returns -1 (not found)\nhash_table.put(\"b\", 1);         // update the existing value\nhash_table.get(\"b\");            // returns 1\nhash_table.remove(\"b\");         // remove the mapping for 2\nhash_table.get(\"b\");            // returns -1 (not found)\n```",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "words",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "words = [\"lambd\", \"school\"]\norder = \"hlabcdefgijkmnopqrstuvwxyz\"\ndef are_words_sorted(words, alpha_order):\n    \"\"\"\n    Inputs:\n    words: List[str]\n    alpha_order: str\n    Output:\n    bool\n    \"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "order",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "order = \"hlabcdefgijkmnopqrstuvwxyz\"\ndef are_words_sorted(words, alpha_order):\n    \"\"\"\n    Inputs:\n    words: List[str]\n    alpha_order: str\n    Output:\n    bool\n    \"\"\"\n    # Your code here",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "nums",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "nums = [1, 1, 2, 1]\ndef csFindTheSingleNumber(nums):\n    appearances = {}\n    # hash the list into a dict with the number of appearances being the value\n    # and the number itself as the key\n    for num in nums:\n        if num in appearances:\n            appearances[num] += 1\n        else:\n            appearances[num] = 1",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "scores",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "scores = [[1, 91], [1, 92], [2, 93], [2, 97], [1, 60], [2, 77], [1, 65],\n          [1, 87], [1, 100], [2, 100], [2, 76]]\ndef csAverageOfTopFive(scores):\n    students_scores = {}\n    # create a dict with each student as the key and an array of their scores\n    # as the value\n    for score in scores:\n        student = score[0]\n        num = score[1]\n        if student in students_scores:",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "text",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "text = \"mbxcdatllaas\"\n# text = \"sctlamb\"\n# text = \"lalaaxcmbdtsumbdav\"\ndef csMaxNumberOfLambdas(text):\n    # create dict to hold number of times letters in lambda appear\n    # (the letter 'a' will need to be twice the amount of other letters for\n    # each valid lambda)\n    lambdas = {\"l\": 0, \"a\": 0, \"m\": 0, \"b\": 0, \"d\": 0}\n    # get number count for valid letters from \"text\"\n    for letter in text:",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "words",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "words = [\"lambda\", \"school\", \"rules\", \"lambda\", \"school\", \"rocks\"]\nk = 2\nOutput:\n[\"lambda\", \"school\"]\nExplanation:\n\"lambda\" and \"school\" are the two most frequent words.\n```\nExample 2:\n```plaintext\nInput:",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "k = 2\nOutput:\n[\"lambda\", \"school\"]\nExplanation:\n\"lambda\" and \"school\" are the two most frequent words.\n```\nExample 2:\n```plaintext\nInput:\nwords = [\"the\", \"sky\", \"is\", \"cloudy\", \"the\", \"the\", \"the\", \"cloudy\", \"is\", \"is\"]",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "words",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "words = [\"the\", \"sky\", \"is\", \"cloudy\", \"the\", \"the\", \"the\", \"cloudy\", \"is\", \"is\"]\nk = 4\nOutput:\n[\"the\", \"is\", \"cloudy\", \"sky\"]\nExplanation:\n\"the\", \"is\", \"cloudy\", and \"sky\" are the four most frequent words. The words\nare sorted from highest frequency to lowest.\n```\nNotes:\n- `k` is always valid: `1 <= k <= number of unique elements.",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "k = 4\nOutput:\n[\"the\", \"is\", \"cloudy\", \"sky\"]\nExplanation:\n\"the\", \"is\", \"cloudy\", and \"sky\" are the four most frequent words. The words\nare sorted from highest frequency to lowest.\n```\nNotes:\n- `k` is always valid: `1 <= k <= number of unique elements.\n- words in the input list only contain lowercase letters.",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "words",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "words = [\"the\", \"sky\", \"is\", \"cloudy\", \"the\", \"the\", \"the\", \"cloudy\", \"is\",\n         \"is\"]\nk = 4\nwords = [\"lambda\", \"school\", \"rules\", \"lambda\", \"school\", \"rocks\"]\nk = 2\ndef top_k_frequent(words, k):\n    \"\"\"\n    Input:\n    words -> List[str]\n    k -> int",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "k = 4\nwords = [\"lambda\", \"school\", \"rules\", \"lambda\", \"school\", \"rocks\"]\nk = 2\ndef top_k_frequent(words, k):\n    \"\"\"\n    Input:\n    words -> List[str]\n    k -> int\n    Output:\n    List[str]",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "words",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "words = [\"lambda\", \"school\", \"rules\", \"lambda\", \"school\", \"rocks\"]\nk = 2\ndef top_k_frequent(words, k):\n    \"\"\"\n    Input:\n    words -> List[str]\n    k -> int\n    Output:\n    List[str]\n    \"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "k = 2\ndef top_k_frequent(words, k):\n    \"\"\"\n    Input:\n    words -> List[str]\n    k -> int\n    Output:\n    List[str]\n    \"\"\"\n    # create dict to hold words frequencies",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "s = \"Bbcc\"\ndef frequency_sort(s: str) -> str:\n    \"\"\"\n    Inputs:\n    s -> str\n    Output:\n    str\n    \"\"\"\n    letter_freq = {}\n    for char in s:",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "a = \"odd\"\nb = \"egg\"\nOutput:\ntrue\nExample 2:\nInput:\na = \"foo\"\nb = \"bar\"\nOutput:\nfalse",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "b = \"egg\"\nOutput:\ntrue\nExample 2:\nInput:\na = \"foo\"\nb = \"bar\"\nOutput:\nfalse\nExample 3:",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "a = \"foo\"\nb = \"bar\"\nOutput:\nfalse\nExample 3:\nInput:\na = \"abca\"\nb = \"zbxz\"\nOutput:\ntrue",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "b = \"bar\"\nOutput:\nfalse\nExample 3:\nInput:\na = \"abca\"\nb = \"zbxz\"\nOutput:\ntrue\nExample 4:",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "a = \"abca\"\nb = \"zbxz\"\nOutput:\ntrue\nExample 4:\nInput:\na = \"abc\"\nb = \"\"\nOutput:\nfalse",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "b = \"zbxz\"\nOutput:\ntrue\nExample 4:\nInput:\na = \"abc\"\nb = \"\"\nOutput:\nfalse\n\"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "a = \"abc\"\nb = \"\"\nOutput:\nfalse\n\"\"\"\na = \"odd\"\nb = \"egg\"\ndef csIsomorphicStrings(a, b):\n    if len(set(a)) == len(set(b)):\n        return True",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "b = \"\"\nOutput:\nfalse\n\"\"\"\na = \"odd\"\nb = \"egg\"\ndef csIsomorphicStrings(a, b):\n    if len(set(a)) == len(set(b)):\n        return True\n    return False",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "a = \"odd\"\nb = \"egg\"\ndef csIsomorphicStrings(a, b):\n    if len(set(a)) == len(set(b)):\n        return True\n    return False\n# print(csIsomorphicStrings(a, b))\n\"\"\"\n*** csWordPattern ***\n---------------------",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "b = \"egg\"\ndef csIsomorphicStrings(a, b):\n    if len(set(a)) == len(set(b)):\n        return True\n    return False\n# print(csIsomorphicStrings(a, b))\n\"\"\"\n*** csWordPattern ***\n---------------------\nGiven a pattern and a string a, find if a follows the same pattern.",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "pattern",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "pattern = \"abba\"\na = \"lambda school school lambda\"\nOutput: true\nExample 2:\nInput:\npattern = \"abba\"\na = \"lambda school school coding\"\nOutput:\nfalse\nExample 3:",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "a = \"lambda school school lambda\"\nOutput: true\nExample 2:\nInput:\npattern = \"abba\"\na = \"lambda school school coding\"\nOutput:\nfalse\nExample 3:\nInput:",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "pattern",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "pattern = \"abba\"\na = \"lambda school school coding\"\nOutput:\nfalse\nExample 3:\nInput:\npattern = \"aaaa\"\na = \"lambda school school lambda\"\nOutput: false\nExample 4:",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "a = \"lambda school school coding\"\nOutput:\nfalse\nExample 3:\nInput:\npattern = \"aaaa\"\na = \"lambda school school lambda\"\nOutput: false\nExample 4:\nInput:",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "pattern",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "pattern = \"aaaa\"\na = \"lambda school school lambda\"\nOutput: false\nExample 4:\nInput:\npattern = \"abba\"\na = \"lambda lambda lambda lambda\"\nOutput: false\n\"\"\"\npattern = \"abba\"",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "a = \"lambda school school lambda\"\nOutput: false\nExample 4:\nInput:\npattern = \"abba\"\na = \"lambda lambda lambda lambda\"\nOutput: false\n\"\"\"\npattern = \"abba\"\na = \"lambda school school lambda\"",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "pattern",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "pattern = \"abba\"\na = \"lambda lambda lambda lambda\"\nOutput: false\n\"\"\"\npattern = \"abba\"\na = \"lambda school school lambda\"\n# pattern = \"abba\"\n# a = \"lambda lambda lambda lambda\"\n# pattern = \"aaaa\"\n# a = \"lambda school school lambda\"",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "a = \"lambda lambda lambda lambda\"\nOutput: false\n\"\"\"\npattern = \"abba\"\na = \"lambda school school lambda\"\n# pattern = \"abba\"\n# a = \"lambda lambda lambda lambda\"\n# pattern = \"aaaa\"\n# a = \"lambda school school lambda\"\ndef csWordPattern(pattern, a):",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "pattern",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "pattern = \"abba\"\na = \"lambda school school lambda\"\n# pattern = \"abba\"\n# a = \"lambda lambda lambda lambda\"\n# pattern = \"aaaa\"\n# a = \"lambda school school lambda\"\ndef csWordPattern(pattern, a):\n    word_arr = a.split(' ')\n    if len(pattern) != len(word_arr):\n        return False",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "a = \"lambda school school lambda\"\n# pattern = \"abba\"\n# a = \"lambda lambda lambda lambda\"\n# pattern = \"aaaa\"\n# a = \"lambda school school lambda\"\ndef csWordPattern(pattern, a):\n    word_arr = a.split(' ')\n    if len(pattern) != len(word_arr):\n        return False\n    pattern_map = {}",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "strs",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "strs = [\"apt\",\"pat\",\"ear\",\"tap\",\"are\",\"arm\"]\nOutput:\n[[\"apt\",\"pat\",\"tap\"],[\"ear\",\"are\"],[\"arm\"]]\nExample 2:\nInput:\nstrs = [\"\"]\nOutput:\n[[\"\"]]\nExample 3:\nInput:",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "strs",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "strs = [\"\"]\nOutput:\n[[\"\"]]\nExample 3:\nInput:\nstrs = [\"a\"]\nOutput:\n[[\"a\"]]\n\"\"\"\nstrs = [\"apt\", \"pat\", \"ear\", \"tap\", \"are\", \"arm\"]",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "strs",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "strs = [\"a\"]\nOutput:\n[[\"a\"]]\n\"\"\"\nstrs = [\"apt\", \"pat\", \"ear\", \"tap\", \"are\", \"arm\"]\ndef csGroupAnagrams(strs):\n    result = {}\n    for w in strs:\n        signature = ''.join(sorted(w))\n        if signature not in result:",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "strs",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "strs = [\"apt\", \"pat\", \"ear\", \"tap\", \"are\", \"arm\"]\ndef csGroupAnagrams(strs):\n    result = {}\n    for w in strs:\n        signature = ''.join(sorted(w))\n        if signature not in result:\n            result[signature] = []\n        result[signature].append(w)\n    all_results = []\n    for item in result:",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "first_not_repeating_character(s)",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "first_not_repeating_character(s) = 'c'.\nThere are 2 non-repeating characters in the string: 'c' and 'd'. Return c since it appears in the string first.\nFor s = \"abacabaabacaba\", the output should be\nfirst_not_repeating_character(s) = '_'.\nThere are no characters in this string that do not repeat.\n[execution time limit] 4 seconds (py3)\n[input] string s\nA string that contains only lowercase English letters.\n[output] char\nThe first non-repeating character in s of '_' if there are no characters that do not repeat.",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "first_not_repeating_character(s)",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "first_not_repeating_character(s) = '_'.\nThere are no characters in this string that do not repeat.\n[execution time limit] 4 seconds (py3)\n[input] string s\nA string that contains only lowercase English letters.\n[output] char\nThe first non-repeating character in s of '_' if there are no characters that do not repeat.\n\"\"\"\ns = \"abacabad\"\ndef first_not_repeating_character(s):",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "s = \"abacabad\"\ndef first_not_repeating_character(s):\n    # create hashmap of string and occurences of letters\n    # return the first key with the value of 1\n    chars = {}\n    for letter in s:\n        if letter not in chars:\n            chars[letter] = 1\n        else:\n            chars[letter] += 1",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "n = 3\ntrust = [[1,2],\n [2,3]]\nn = 4\ntrust = [[1, 3],[1, 4],[2, 3],[2, 4],[4, 3]]\ndef uncover_spy(n, trust):\n    # create map of people who trust\n    # return the person who trusts no one\n    trusts = {}\n    trusted = {}",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "trust",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "trust = [[1,2],\n [2,3]]\nn = 4\ntrust = [[1, 3],[1, 4],[2, 3],[2, 4],[4, 3]]\ndef uncover_spy(n, trust):\n    # create map of people who trust\n    # return the person who trusts no one\n    trusts = {}\n    trusted = {}\n    for i in range(1, n + 1):",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "n = 4\ntrust = [[1, 3],[1, 4],[2, 3],[2, 4],[4, 3]]\ndef uncover_spy(n, trust):\n    # create map of people who trust\n    # return the person who trusts no one\n    trusts = {}\n    trusted = {}\n    for i in range(1, n + 1):\n        trusts[i] = []\n        trusted[i] = []",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "trust",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "trust = [[1, 3],[1, 4],[2, 3],[2, 4],[4, 3]]\ndef uncover_spy(n, trust):\n    # create map of people who trust\n    # return the person who trusts no one\n    trusts = {}\n    trusted = {}\n    for i in range(1, n + 1):\n        trusts[i] = []\n        trusted[i] = []\n    for group in trust:",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "class ListNode:\n    def __init__(self, key, value):\n        self.key = key\n        self.value = value\n        self.next = None\nclass MyHashTable:\n    def __init__(self):\n        # Your code here\n        self.size = 10\n        self.keys = [None] * self.size",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "MyHashTable",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "class MyHashTable:\n    def __init__(self):\n        # Your code here\n        self.size = 10\n        self.keys = [None] * self.size\n        self.values = [None] * self.size\n        self.item_count = 0\n    def djb2(self, key):\n        str_key = str(key).encode()\n        hash_value = 5381",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "are_words_sorted",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "def are_words_sorted(words, alpha_order):\n    \"\"\"\n    Inputs:\n    words: List[str]\n    alpha_order: str\n    Output:\n    bool\n    \"\"\"\n    # Your code here\n    # map the letters of the string alpha_order to a dictionary",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "csFindTheSingleNumber",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "def csFindTheSingleNumber(nums):\n    appearances = {}\n    # hash the list into a dict with the number of appearances being the value\n    # and the number itself as the key\n    for num in nums:\n        if num in appearances:\n            appearances[num] += 1\n        else:\n            appearances[num] = 1\n    # return the key with the value of 1",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "csAverageOfTopFive",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "def csAverageOfTopFive(scores):\n    students_scores = {}\n    # create a dict with each student as the key and an array of their scores\n    # as the value\n    for score in scores:\n        student = score[0]\n        num = score[1]\n        if student in students_scores:\n            students_scores[student].append(num)\n        else:",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "csMaxNumberOfLambdas",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "def csMaxNumberOfLambdas(text):\n    # create dict to hold number of times letters in lambda appear\n    # (the letter 'a' will need to be twice the amount of other letters for\n    # each valid lambda)\n    lambdas = {\"l\": 0, \"a\": 0, \"m\": 0, \"b\": 0, \"d\": 0}\n    # get number count for valid letters from \"text\"\n    for letter in text:\n        if letter in lambdas:\n            lambdas[letter] += 1\n    minimum_letter = lambdas['l']",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "top_k_frequent",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "def top_k_frequent(words, k):\n    \"\"\"\n    Input:\n    words -> List[str]\n    k -> int\n    Output:\n    List[str]\n    \"\"\"\n    # create dict to hold words frequencies\n    word_freqs = {}",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "frequency_sort",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "def frequency_sort(s: str) -> str:\n    \"\"\"\n    Inputs:\n    s -> str\n    Output:\n    str\n    \"\"\"\n    letter_freq = {}\n    for char in s:\n        if char not in letter_freq:",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "csIsomorphicStrings",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "def csIsomorphicStrings(a, b):\n    if len(set(a)) == len(set(b)):\n        return True\n    return False\n# print(csIsomorphicStrings(a, b))\n\"\"\"\n*** csWordPattern ***\n---------------------\nGiven a pattern and a string a, find if a follows the same pattern.\nHere, to \"follow\" means a full match, such that there is a one-to-one correspondence between a letter in pattern and a non-empty word in s.",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "csWordPattern",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "def csWordPattern(pattern, a):\n    word_arr = a.split(' ')\n    if len(pattern) != len(word_arr):\n        return False\n    pattern_map = {}\n    for i in range(len(pattern)):\n        if pattern[i] not in pattern_map:\n            if word_arr[i] not in pattern_map.values():\n                pattern_map[pattern[i]] = word_arr[i]\n            else:",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "csGroupAnagrams",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "def csGroupAnagrams(strs):\n    result = {}\n    for w in strs:\n        signature = ''.join(sorted(w))\n        if signature not in result:\n            result[signature] = []\n        result[signature].append(w)\n    all_results = []\n    for item in result:\n        all_results.append(result[item])",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "condense_linked_list",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "def condense_linked_list(node):\n    # keep track of seen values\n    seen_values = []\n    cur = node\n    prev = None\n    # iterate linked list from the head\n    while cur is not None:\n        print(cur.value)\n        # if current is in seen values\n        if cur.value in seen_values:",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "first_not_repeating_character",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "def first_not_repeating_character(s):\n    # create hashmap of string and occurences of letters\n    # return the first key with the value of 1\n    chars = {}\n    for letter in s:\n        if letter not in chars:\n            chars[letter] = 1\n        else:\n            chars[letter] += 1\n    for key in chars:",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "uncover_spy",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "def uncover_spy(n, trust):\n    # create map of people who trust\n    # return the person who trusts no one\n    trusts = {}\n    trusted = {}\n    for i in range(1, n + 1):\n        trusts[i] = []\n        trusted[i] = []\n    for group in trust:\n        if group[0] in trusts:",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "hash_table",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "hash_table = MyHashTable();\nhash_table.put(\"a\", 1);\nhash_table.put(\"b\", 2);\nhash_table.get(\"a\");            // returns 1\nhash_table.get(\"c\");            // returns -1 (not found)\nhash_table.put(\"b\", 1);         // update the existing value\nhash_table.get(\"b\");            // returns 1\nhash_table.remove(\"b\");         // remove the mapping for 2\nhash_table.get(\"b\");            // returns -1 (not found)\n```",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "words",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "words = [\"lambd\", \"school\"]\norder = \"hlabcdefgijkmnopqrstuvwxyz\"\ndef are_words_sorted(words, alpha_order):\n    \"\"\"\n    Inputs:\n    words: List[str]\n    alpha_order: str\n    Output:\n    bool\n    \"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "order",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "order = \"hlabcdefgijkmnopqrstuvwxyz\"\ndef are_words_sorted(words, alpha_order):\n    \"\"\"\n    Inputs:\n    words: List[str]\n    alpha_order: str\n    Output:\n    bool\n    \"\"\"\n    # Your code here",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "nums",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "nums = [1, 1, 2, 1]\ndef csFindTheSingleNumber(nums):\n    appearances = {}\n    # hash the list into a dict with the number of appearances being the value\n    # and the number itself as the key\n    for num in nums:\n        if num in appearances:\n            appearances[num] += 1\n        else:\n            appearances[num] = 1",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "scores",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "scores = [[1, 91], [1, 92], [2, 93], [2, 97], [1, 60], [2, 77], [1, 65],\n          [1, 87], [1, 100], [2, 100], [2, 76]]\ndef csAverageOfTopFive(scores):\n    students_scores = {}\n    # create a dict with each student as the key and an array of their scores\n    # as the value\n    for score in scores:\n        student = score[0]\n        num = score[1]\n        if student in students_scores:",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "text",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "text = \"mbxcdatllaas\"\n# text = \"sctlamb\"\n# text = \"lalaaxcmbdtsumbdav\"\ndef csMaxNumberOfLambdas(text):\n    # create dict to hold number of times letters in lambda appear\n    # (the letter 'a' will need to be twice the amount of other letters for\n    # each valid lambda)\n    lambdas = {\"l\": 0, \"a\": 0, \"m\": 0, \"b\": 0, \"d\": 0}\n    # get number count for valid letters from \"text\"\n    for letter in text:",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "words",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "words = [\"lambda\", \"school\", \"rules\", \"lambda\", \"school\", \"rocks\"]\nk = 2\nOutput:\n[\"lambda\", \"school\"]\nExplanation:\n\"lambda\" and \"school\" are the two most frequent words.\n```\nExample 2:\n```plaintext\nInput:",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "k = 2\nOutput:\n[\"lambda\", \"school\"]\nExplanation:\n\"lambda\" and \"school\" are the two most frequent words.\n```\nExample 2:\n```plaintext\nInput:\nwords = [\"the\", \"sky\", \"is\", \"cloudy\", \"the\", \"the\", \"the\", \"cloudy\", \"is\", \"is\"]",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "words",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "words = [\"the\", \"sky\", \"is\", \"cloudy\", \"the\", \"the\", \"the\", \"cloudy\", \"is\", \"is\"]\nk = 4\nOutput:\n[\"the\", \"is\", \"cloudy\", \"sky\"]\nExplanation:\n\"the\", \"is\", \"cloudy\", and \"sky\" are the four most frequent words. The words\nare sorted from highest frequency to lowest.\n```\nNotes:\n- `k` is always valid: `1 <= k <= number of unique elements.",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "k = 4\nOutput:\n[\"the\", \"is\", \"cloudy\", \"sky\"]\nExplanation:\n\"the\", \"is\", \"cloudy\", and \"sky\" are the four most frequent words. The words\nare sorted from highest frequency to lowest.\n```\nNotes:\n- `k` is always valid: `1 <= k <= number of unique elements.\n- words in the input list only contain lowercase letters.",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "words",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "words = [\"the\", \"sky\", \"is\", \"cloudy\", \"the\", \"the\", \"the\", \"cloudy\", \"is\",\n         \"is\"]\nk = 4\nwords = [\"lambda\", \"school\", \"rules\", \"lambda\", \"school\", \"rocks\"]\nk = 2\ndef top_k_frequent(words, k):\n    \"\"\"\n    Input:\n    words -> List[str]\n    k -> int",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "k = 4\nwords = [\"lambda\", \"school\", \"rules\", \"lambda\", \"school\", \"rocks\"]\nk = 2\ndef top_k_frequent(words, k):\n    \"\"\"\n    Input:\n    words -> List[str]\n    k -> int\n    Output:\n    List[str]",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "words",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "words = [\"lambda\", \"school\", \"rules\", \"lambda\", \"school\", \"rocks\"]\nk = 2\ndef top_k_frequent(words, k):\n    \"\"\"\n    Input:\n    words -> List[str]\n    k -> int\n    Output:\n    List[str]\n    \"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "k = 2\ndef top_k_frequent(words, k):\n    \"\"\"\n    Input:\n    words -> List[str]\n    k -> int\n    Output:\n    List[str]\n    \"\"\"\n    # create dict to hold words frequencies",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "s = \"Bbcc\"\ndef frequency_sort(s: str) -> str:\n    \"\"\"\n    Inputs:\n    s -> str\n    Output:\n    str\n    \"\"\"\n    letter_freq = {}\n    for char in s:",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "a = \"odd\"\nb = \"egg\"\nOutput:\ntrue\nExample 2:\nInput:\na = \"foo\"\nb = \"bar\"\nOutput:\nfalse",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "b = \"egg\"\nOutput:\ntrue\nExample 2:\nInput:\na = \"foo\"\nb = \"bar\"\nOutput:\nfalse\nExample 3:",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "a = \"foo\"\nb = \"bar\"\nOutput:\nfalse\nExample 3:\nInput:\na = \"abca\"\nb = \"zbxz\"\nOutput:\ntrue",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "b = \"bar\"\nOutput:\nfalse\nExample 3:\nInput:\na = \"abca\"\nb = \"zbxz\"\nOutput:\ntrue\nExample 4:",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "a = \"abca\"\nb = \"zbxz\"\nOutput:\ntrue\nExample 4:\nInput:\na = \"abc\"\nb = \"\"\nOutput:\nfalse",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "b = \"zbxz\"\nOutput:\ntrue\nExample 4:\nInput:\na = \"abc\"\nb = \"\"\nOutput:\nfalse\n\"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "a = \"abc\"\nb = \"\"\nOutput:\nfalse\n\"\"\"\na = \"odd\"\nb = \"egg\"\ndef csIsomorphicStrings(a, b):\n    if len(set(a)) == len(set(b)):\n        return True",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "b = \"\"\nOutput:\nfalse\n\"\"\"\na = \"odd\"\nb = \"egg\"\ndef csIsomorphicStrings(a, b):\n    if len(set(a)) == len(set(b)):\n        return True\n    return False",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "a = \"odd\"\nb = \"egg\"\ndef csIsomorphicStrings(a, b):\n    if len(set(a)) == len(set(b)):\n        return True\n    return False\n# print(csIsomorphicStrings(a, b))\n\"\"\"\n*** csWordPattern ***\n---------------------",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "b = \"egg\"\ndef csIsomorphicStrings(a, b):\n    if len(set(a)) == len(set(b)):\n        return True\n    return False\n# print(csIsomorphicStrings(a, b))\n\"\"\"\n*** csWordPattern ***\n---------------------\nGiven a pattern and a string a, find if a follows the same pattern.",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "pattern",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "pattern = \"abba\"\na = \"lambda school school lambda\"\nOutput: true\nExample 2:\nInput:\npattern = \"abba\"\na = \"lambda school school coding\"\nOutput:\nfalse\nExample 3:",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "a = \"lambda school school lambda\"\nOutput: true\nExample 2:\nInput:\npattern = \"abba\"\na = \"lambda school school coding\"\nOutput:\nfalse\nExample 3:\nInput:",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "pattern",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "pattern = \"abba\"\na = \"lambda school school coding\"\nOutput:\nfalse\nExample 3:\nInput:\npattern = \"aaaa\"\na = \"lambda school school lambda\"\nOutput: false\nExample 4:",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "a = \"lambda school school coding\"\nOutput:\nfalse\nExample 3:\nInput:\npattern = \"aaaa\"\na = \"lambda school school lambda\"\nOutput: false\nExample 4:\nInput:",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "pattern",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "pattern = \"aaaa\"\na = \"lambda school school lambda\"\nOutput: false\nExample 4:\nInput:\npattern = \"abba\"\na = \"lambda lambda lambda lambda\"\nOutput: false\n\"\"\"\npattern = \"abba\"",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "a = \"lambda school school lambda\"\nOutput: false\nExample 4:\nInput:\npattern = \"abba\"\na = \"lambda lambda lambda lambda\"\nOutput: false\n\"\"\"\npattern = \"abba\"\na = \"lambda school school lambda\"",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "pattern",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "pattern = \"abba\"\na = \"lambda lambda lambda lambda\"\nOutput: false\n\"\"\"\npattern = \"abba\"\na = \"lambda school school lambda\"\n# pattern = \"abba\"\n# a = \"lambda lambda lambda lambda\"\n# pattern = \"aaaa\"\n# a = \"lambda school school lambda\"",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "a = \"lambda lambda lambda lambda\"\nOutput: false\n\"\"\"\npattern = \"abba\"\na = \"lambda school school lambda\"\n# pattern = \"abba\"\n# a = \"lambda lambda lambda lambda\"\n# pattern = \"aaaa\"\n# a = \"lambda school school lambda\"\ndef csWordPattern(pattern, a):",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "pattern",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "pattern = \"abba\"\na = \"lambda school school lambda\"\n# pattern = \"abba\"\n# a = \"lambda lambda lambda lambda\"\n# pattern = \"aaaa\"\n# a = \"lambda school school lambda\"\ndef csWordPattern(pattern, a):\n    word_arr = a.split(' ')\n    if len(pattern) != len(word_arr):\n        return False",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "a = \"lambda school school lambda\"\n# pattern = \"abba\"\n# a = \"lambda lambda lambda lambda\"\n# pattern = \"aaaa\"\n# a = \"lambda school school lambda\"\ndef csWordPattern(pattern, a):\n    word_arr = a.split(' ')\n    if len(pattern) != len(word_arr):\n        return False\n    pattern_map = {}",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "strs",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "strs = [\"apt\",\"pat\",\"ear\",\"tap\",\"are\",\"arm\"]\nOutput:\n[[\"apt\",\"pat\",\"tap\"],[\"ear\",\"are\"],[\"arm\"]]\nExample 2:\nInput:\nstrs = [\"\"]\nOutput:\n[[\"\"]]\nExample 3:\nInput:",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "strs",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "strs = [\"\"]\nOutput:\n[[\"\"]]\nExample 3:\nInput:\nstrs = [\"a\"]\nOutput:\n[[\"a\"]]\n\"\"\"\nstrs = [\"apt\", \"pat\", \"ear\", \"tap\", \"are\", \"arm\"]",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "strs",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "strs = [\"a\"]\nOutput:\n[[\"a\"]]\n\"\"\"\nstrs = [\"apt\", \"pat\", \"ear\", \"tap\", \"are\", \"arm\"]\ndef csGroupAnagrams(strs):\n    result = {}\n    for w in strs:\n        signature = ''.join(sorted(w))\n        if signature not in result:",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "strs",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "strs = [\"apt\", \"pat\", \"ear\", \"tap\", \"are\", \"arm\"]\ndef csGroupAnagrams(strs):\n    result = {}\n    for w in strs:\n        signature = ''.join(sorted(w))\n        if signature not in result:\n            result[signature] = []\n        result[signature].append(w)\n    all_results = []\n    for item in result:",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "first_not_repeating_character(s)",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "first_not_repeating_character(s) = 'c'.\nThere are 2 non-repeating characters in the string: 'c' and 'd'. Return c since it appears in the string first.\nFor s = \"abacabaabacaba\", the output should be\nfirst_not_repeating_character(s) = '_'.\nThere are no characters in this string that do not repeat.\n[execution time limit] 4 seconds (py3)\n[input] string s\nA string that contains only lowercase English letters.\n[output] char\nThe first non-repeating character in s of '_' if there are no characters that do not repeat.",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "first_not_repeating_character(s)",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "first_not_repeating_character(s) = '_'.\nThere are no characters in this string that do not repeat.\n[execution time limit] 4 seconds (py3)\n[input] string s\nA string that contains only lowercase English letters.\n[output] char\nThe first non-repeating character in s of '_' if there are no characters that do not repeat.\n\"\"\"\ns = \"abacabad\"\ndef first_not_repeating_character(s):",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "s = \"abacabad\"\ndef first_not_repeating_character(s):\n    # create hashmap of string and occurences of letters\n    # return the first key with the value of 1\n    chars = {}\n    for letter in s:\n        if letter not in chars:\n            chars[letter] = 1\n        else:\n            chars[letter] += 1",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "n = 3\ntrust = [[1,2],\n [2,3]]\nn = 4\ntrust = [[1, 3],[1, 4],[2, 3],[2, 4],[4, 3]]\ndef uncover_spy(n, trust):\n    # create map of people who trust\n    # return the person who trusts no one\n    trusts = {}\n    trusted = {}",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "trust",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "trust = [[1,2],\n [2,3]]\nn = 4\ntrust = [[1, 3],[1, 4],[2, 3],[2, 4],[4, 3]]\ndef uncover_spy(n, trust):\n    # create map of people who trust\n    # return the person who trusts no one\n    trusts = {}\n    trusted = {}\n    for i in range(1, n + 1):",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "n = 4\ntrust = [[1, 3],[1, 4],[2, 3],[2, 4],[4, 3]]\ndef uncover_spy(n, trust):\n    # create map of people who trust\n    # return the person who trusts no one\n    trusts = {}\n    trusted = {}\n    for i in range(1, n + 1):\n        trusts[i] = []\n        trusted[i] = []",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "trust",
        "kind": 5,
        "importPath": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "trust = [[1, 3],[1, 4],[2, 3],[2, 4],[4, 3]]\ndef uncover_spy(n, trust):\n    # create map of people who trust\n    # return the person who trusts no one\n    trusts = {}\n    trusted = {}\n    for i in range(1, n + 1):\n        trusts[i] = []\n        trusted[i] = []\n    for group in trust:",
        "detail": "python-gitbook-master..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "dfs_components_grid",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.dfs_components_grid",
        "description": "python-gitbook-master..gitbook.assets.dfs_components_grid",
        "peekOfCode": "def dfs_components_grid(grid: Sequence[Sequence[int]]) -> Iterable[set[tuple[int, int]]]:\n    \"\"\"On a grid of 0s and 1s, find all the components of 1s.\"\"\"\n    unseen = {(r, c) for r, row in enumerate(grid) for c, n in enumerate(row) if n}\n    while unseen:\n        start = unseen.pop()\n        component = {start}\n        to_visit = [start]\n        while to_visit:\n            r, c = to_visit.pop()\n            adjacent = {(r + 1, c), (r - 1, c), (r, c + 1), (r, c - 1)}",
        "detail": "python-gitbook-master..gitbook.assets.dfs_components_grid",
        "documentation": {}
    },
    {
        "label": "dfs_component_dict",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.dfs_component_dict (1)",
        "description": "python-gitbook-master..gitbook.assets.dfs_component_dict (1)",
        "peekOfCode": "def dfs_component_dict(graph: Mapping[Node, Set[Node]], start: Node) -> Iterable[Node]:\n    \"\"\"Find all the nodes connected to the starting node, using DFS on a dict.\"\"\"\n    component = {start}\n    to_visit = [start]\n    while to_visit:\n        node = to_visit.pop()\n        new_nodes = graph[node] - component\n        to_visit.extend(new_nodes)\n        component |= new_nodes\n        yield node",
        "detail": "python-gitbook-master..gitbook.assets.dfs_component_dict (1)",
        "documentation": {}
    },
    {
        "label": "dfs_component_dict",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.dfs_component_dict (2)",
        "description": "python-gitbook-master..gitbook.assets.dfs_component_dict (2)",
        "peekOfCode": "def dfs_component_dict(graph: Mapping[Node, Set[Node]], start: Node) -> Iterable[Node]:\n    \"\"\"Find all the nodes connected to the starting node, using DFS on a dict.\"\"\"\n    component = {start}\n    to_visit = [start]\n    while to_visit:\n        node = to_visit.pop()\n        new_nodes = graph[node] - component\n        to_visit.extend(new_nodes)\n        component |= new_nodes\n        yield node",
        "detail": "python-gitbook-master..gitbook.assets.dfs_component_dict (2)",
        "documentation": {}
    },
    {
        "label": "dfs_component_dict",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.dfs_component_dict",
        "description": "python-gitbook-master..gitbook.assets.dfs_component_dict",
        "peekOfCode": "def dfs_component_dict(graph: Mapping[Node, Set[Node]], start: Node) -> Iterable[Node]:\n    \"\"\"Find all the nodes connected to the starting node, using DFS on a dict.\"\"\"\n    component = {start}\n    to_visit = [start]\n    while to_visit:\n        node = to_visit.pop()\n        new_nodes = graph[node] - component\n        to_visit.extend(new_nodes)\n        component |= new_nodes\n        yield node",
        "detail": "python-gitbook-master..gitbook.assets.dfs_component_dict",
        "documentation": {}
    },
    {
        "label": "dfs_component_dict_recur",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.dfs_component_dict_recur (1)",
        "description": "python-gitbook-master..gitbook.assets.dfs_component_dict_recur (1)",
        "peekOfCode": "def dfs_component_dict_recur(\n    graph: Mapping[Node, Set[Node]],\n    start: Node,\n    component: Optional[Set[Node]] = None\n) -> set[Node]:\n    \"\"\"Recursively find all the nodes connected to start.\"\"\"\n    if component is None:\n        component = set()\n    component.add(start)\n    for new_node in graph[start] - component:",
        "detail": "python-gitbook-master..gitbook.assets.dfs_component_dict_recur (1)",
        "documentation": {}
    },
    {
        "label": "dfs_component_dict_recur",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.dfs_component_dict_recur",
        "description": "python-gitbook-master..gitbook.assets.dfs_component_dict_recur",
        "peekOfCode": "def dfs_component_dict_recur(\n    graph: Mapping[Node, Set[Node]],\n    start: Node,\n    component: Optional[Set[Node]] = None\n) -> set[Node]:\n    \"\"\"Recursively find all the nodes connected to start.\"\"\"\n    if component is None:\n        component = set()\n    component.add(start)\n    for new_node in graph[start] - component:",
        "detail": "python-gitbook-master..gitbook.assets.dfs_component_dict_recur",
        "documentation": {}
    },
    {
        "label": "dfs_paths_dict_recur",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.dfs_paths_dict_recur",
        "description": "python-gitbook-master..gitbook.assets.dfs_paths_dict_recur",
        "peekOfCode": "def dfs_paths_dict_recur(\n    graph: Mapping[Node, set[Node]],\n    start: Node,\n    goal: Node,\n    path: Optional[list[Node]] = None\n) -> Iterable[list[Node]]:\n    \"\"\"Find all the paths from start to goal recursively on a dict.\"\"\"\n    if path is None:\n        path = [start]\n    if start == goal:",
        "detail": "python-gitbook-master..gitbook.assets.dfs_paths_dict_recur",
        "documentation": {}
    },
    {
        "label": "dijkstras_distances_min",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.dijkstras_distances_min (1)",
        "description": "python-gitbook-master..gitbook.assets.dijkstras_distances_min (1)",
        "peekOfCode": "def dijkstras_distances_min(graph: Mapping[Node, Mapping[Node, Rational]], start: Node) -> dict[Node: Rational]:\n    \"\"\"Find the minimum distance from start to all connected nodes on a directed, weighted graph.\"\"\"\n    distances = dict.fromkeys(graph, inf)\n    distances[start] = 0\n    unvisited = set(graph)\n    while unvisited:\n        # Using min like this increases the time complexity compared to a priority queue, but it simplifies things.\n        node = min(unvisited, key=distances.__getitem__)\n        unvisited.remove(node)\n        distance = distances[node]",
        "detail": "python-gitbook-master..gitbook.assets.dijkstras_distances_min (1)",
        "documentation": {}
    },
    {
        "label": "dijkstras_distances_min",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.dijkstras_distances_min",
        "description": "python-gitbook-master..gitbook.assets.dijkstras_distances_min",
        "peekOfCode": "def dijkstras_distances_min(graph: Mapping[Node, Mapping[Node, Rational]], start: Node) -> dict[Node: Rational]:\n    \"\"\"Find the minimum distance from start to all connected nodes on a directed, weighted graph.\"\"\"\n    distances = dict.fromkeys(graph, inf)\n    distances[start] = 0\n    unvisited = set(graph)\n    while unvisited:\n        # Using min like this increases the time complexity compared to a priority queue, but it simplifies things.\n        node = min(unvisited, key=distances.__getitem__)\n        unvisited.remove(node)\n        distance = distances[node]",
        "detail": "python-gitbook-master..gitbook.assets.dijkstras_distances_min",
        "documentation": {}
    },
    {
        "label": "dijkstras_path_pq",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.dijkstras_path_pq (1)",
        "description": "python-gitbook-master..gitbook.assets.dijkstras_path_pq (1)",
        "peekOfCode": "def dijkstras_path_pq(\n    graph: Mapping[Node, Mapping[Node, Real]],\n    start: Node,\n    goal: Node\n) -> dict[Node, Optional[Node]]:\n    \"\"\"Find the shortest path from start to goal in a directed, weighted graph. Return it as a parents dict.\"\"\"\n    distances = {start: 0}\n    parents = {start: None}\n    visited = set()\n    to_visit = [(0, start)]",
        "detail": "python-gitbook-master..gitbook.assets.dijkstras_path_pq (1)",
        "documentation": {}
    },
    {
        "label": "dijkstras_path_pq",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.dijkstras_path_pq",
        "description": "python-gitbook-master..gitbook.assets.dijkstras_path_pq",
        "peekOfCode": "def dijkstras_path_pq(\n    graph: Mapping[Node, Mapping[Node, Real]],\n    start: Node,\n    goal: Node\n) -> dict[Node, Optional[Node]]:\n    \"\"\"Find the shortest path from start to goal in a directed, weighted graph. Return it as a parents dict.\"\"\"\n    distances = {start: 0}\n    parents = {start: None}\n    visited = set()\n    to_visit = [(0, start)]",
        "detail": "python-gitbook-master..gitbook.assets.dijkstras_path_pq",
        "documentation": {}
    },
    {
        "label": "Employee",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.employees",
        "description": "python-gitbook-master..gitbook.assets.employees",
        "peekOfCode": "class Employee(object):\n    def __init__(self, first_name, last_name, job):\n        self.first_name = first_name\n        self.last_name = last_name\n        self.job = job\n    def __eq__(self, other):\n        if isinstance(other, self.__class__):\n            same_name = self.first_name == other.first_name and self.last_name == other.last_name\n            same_job = self.job == other.job\n            if same_name and same_job:",
        "detail": "python-gitbook-master..gitbook.assets.employees",
        "documentation": {}
    },
    {
        "label": "Job",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.employees",
        "description": "python-gitbook-master..gitbook.assets.employees",
        "peekOfCode": "class Job(object):\n    def __init__(self, title, salary):\n        self.title = title\n        self.salary = salary\n    def __str__(self):\n        print(self.title)\n    def __repr__(self):\n        return 'Job(title={}, salary={})'.format(self.title, self.salary)\ndef sort_employees_by_salary(employee_list):\n    \"\"\"",
        "detail": "python-gitbook-master..gitbook.assets.employees",
        "documentation": {}
    },
    {
        "label": "sort_employees_by_salary",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.employees",
        "description": "python-gitbook-master..gitbook.assets.employees",
        "peekOfCode": "def sort_employees_by_salary(employee_list):\n    \"\"\"\n    Returns a new employee list, sorted by low to high salary then last_name\n    \"\"\"\n    employee_list.sort(key=lambda employee: (employee.last_name, employee.job.salary))\n    return employee_list",
        "detail": "python-gitbook-master..gitbook.assets.employees",
        "documentation": {}
    },
    {
        "label": "josephus_problem_recur",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.josephus_problem_recur",
        "description": "python-gitbook-master..gitbook.assets.josephus_problem_recur",
        "peekOfCode": "def josephus_problem_recur(n: int, k: int) -> int:\n    \"\"\"1-indexed, k-skips, Josephus problem, recursively.\"\"\"\n    if n == 1:\n        return 1\n    return (josephus_problem_recur(n - 1, k) + k - 1) % n + 1",
        "detail": "python-gitbook-master..gitbook.assets.josephus_problem_recur",
        "documentation": {}
    },
    {
        "label": "knapsack_simple",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.knapsack_simple",
        "description": "python-gitbook-master..gitbook.assets.knapsack_simple",
        "peekOfCode": "def knapsack_simple(weights: Sequence[int], values: Sequence[int], capacity: int):\n    \"\"\"0-1 knapsack problem. Just return the max value.\"\"\"\n    # Each index is a sub-capacity and each value the best value for that sub-capacity so far.\n    best_values = [0] * (capacity + 1)\n    for weight, value in zip(weights, values):\n        # Iterate backwards so we don't take things twice. Forwards would be the unbounded version of the problem.\n        for sub_capacity in range(capacity, 0, -1):\n            if weight <= sub_capacity:\n                # These three lines can be refactored to one, or a slightly more efficient if instead of max.\n                take_value = value + best_values[sub_capacity - weight]",
        "detail": "python-gitbook-master..gitbook.assets.knapsack_simple",
        "documentation": {}
    },
    {
        "label": "partition",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.partition",
        "description": "python-gitbook-master..gitbook.assets.partition",
        "peekOfCode": "def partition(seq: Sequence[T]) -> tuple[list[T], T, list[T]]:\n    \"\"\"Split sequence into a tuple of lesser or equal values, first value, greater values.\"\"\"\n    pivot, *rest = seq\n    low = [n for n in rest if n <= pivot]\n    high = [n for n in rest if n > pivot]\n    return low, pivot, high",
        "detail": "python-gitbook-master..gitbook.assets.partition",
        "documentation": {}
    },
    {
        "label": "prims",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.prims",
        "description": "python-gitbook-master..gitbook.assets.prims",
        "peekOfCode": "def prims(graph: Mapping[Node, Mapping[Node, int]], start: Node) -> dict[Node, Optional[Node]]:\n    \"\"\"Find the minimum spanning tree of an undirected, weighted graph.\"\"\"\n    parents = {}\n    to_visit = [(0, None, start)]\n    while to_visit:\n        weight, parent, node = heappop(to_visit)\n        if node in parents:\n            continue\n        parents[node] = parent\n        for next_node, weight in graph[node].items():",
        "detail": "python-gitbook-master..gitbook.assets.prims",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.Problem1-PowerPuff",
        "description": "python-gitbook-master..gitbook.assets.Problem1-PowerPuff",
        "peekOfCode": "def main():\n    N = int(input())\n    Q = list(map(int, input().split()))\n    I = list(map(int, input().split()))\n    min = math.inf\n    for i in range(N):\n        if((I[i]//Q[i]) < min):\n            min = I[i] // Q[i]\n    print(min)\nmain()",
        "detail": "python-gitbook-master..gitbook.assets.Problem1-PowerPuff",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.Problem2-Beyblade",
        "description": "python-gitbook-master..gitbook.assets.Problem2-Beyblade",
        "peekOfCode": "def main():\n    # Write code here \n    T = int(input())\n    while(T):\n        N = int(input())\n        G = list(map(int, input().split()))\n        O = list(map(int, input().split()))\n        heapq.heapify(G)\n        heapq.heapify(O)\n        c = 0",
        "detail": "python-gitbook-master..gitbook.assets.Problem2-Beyblade",
        "documentation": {}
    },
    {
        "label": "quickselect",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.quickselect",
        "description": "python-gitbook-master..gitbook.assets.quickselect",
        "peekOfCode": "def quickselect(seq: Sequence[T], k: int) -> T:\n    \"\"\"Find the kth smallest item in a sequence.\"\"\"\n    low, pivot, high = partition(seq)\n    low_len = len(low)\n    if low_len == k:\n        return pivot\n    elif low_len < k:\n        return quickselect(high, k - low_len - 1)\n    else:\n        return quickselect(low, k)",
        "detail": "python-gitbook-master..gitbook.assets.quickselect",
        "documentation": {}
    },
    {
        "label": "quicksort",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.quicksort (1)",
        "description": "python-gitbook-master..gitbook.assets.quicksort (1)",
        "peekOfCode": "def quicksort(seq: Sequence[T]) -> list[T]:\n    if len(seq) < 2:\n        return list(seq)\n    low, pivot, high = partition(seq)\n    return quicksort(low) + [pivot] + quicksort(high)",
        "detail": "python-gitbook-master..gitbook.assets.quicksort (1)",
        "documentation": {}
    },
    {
        "label": "quicksort",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.quicksort (2)",
        "description": "python-gitbook-master..gitbook.assets.quicksort (2)",
        "peekOfCode": "def quicksort(seq: Sequence[T]) -> list[T]:\n    if len(seq) < 2:\n        return list(seq)\n    low, pivot, high = partition(seq)\n    return quicksort(low) + [pivot] + quicksort(high)",
        "detail": "python-gitbook-master..gitbook.assets.quicksort (2)",
        "documentation": {}
    },
    {
        "label": "quicksort",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.quicksort",
        "description": "python-gitbook-master..gitbook.assets.quicksort",
        "peekOfCode": "def quicksort(seq: Sequence[T]) -> list[T]:\n    if len(seq) < 2:\n        return list(seq)\n    low, pivot, high = partition(seq)\n    return quicksort(low) + [pivot] + quicksort(high)",
        "detail": "python-gitbook-master..gitbook.assets.quicksort",
        "documentation": {}
    },
    {
        "label": "selection_sort_iter",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.selection_sort_iter (1)",
        "description": "python-gitbook-master..gitbook.assets.selection_sort_iter (1)",
        "peekOfCode": "def selection_sort_iter(seq: MutableSequence[T]) -> None:\n    \"\"\"Use selection sort iteratively on a list in-place.\"\"\"\n    for i, val in enumerate(seq):\n        min_val = min(seq[i:])\n        min_val_i = seq.index(min_val, i)  # First index of min_val at or after i\n        seq[i] = min_val\n        seq[min_val_i] = val",
        "detail": "python-gitbook-master..gitbook.assets.selection_sort_iter (1)",
        "documentation": {}
    },
    {
        "label": "selection_sort_iter",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.selection_sort_iter",
        "description": "python-gitbook-master..gitbook.assets.selection_sort_iter",
        "peekOfCode": "def selection_sort_iter(seq: MutableSequence[T]) -> None:\n    \"\"\"Use selection sort iteratively on a list in-place.\"\"\"\n    for i, val in enumerate(seq):\n        min_val = min(seq[i:])\n        min_val_i = seq.index(min_val, i)  # First index of min_val at or after i\n        seq[i] = min_val\n        seq[min_val_i] = val",
        "detail": "python-gitbook-master..gitbook.assets.selection_sort_iter",
        "documentation": {}
    },
    {
        "label": "selection_sort_recur",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.selection_sort_recur (1)",
        "description": "python-gitbook-master..gitbook.assets.selection_sort_recur (1)",
        "peekOfCode": "def selection_sort_recur(seq: MutableSequence[T], i=0) -> None:\n    \"\"\"Use selection sort recursively on a list in-place.\"\"\"\n    if i >= len(seq) - 1:\n        return\n    min_val = min(seq[i:])\n    min_val_i = seq.index(min_val, i)\n    seq[min_val_i] = seq[i]\n    seq[i] = min_val\n    selection_sort_recur(seq, i + 1)",
        "detail": "python-gitbook-master..gitbook.assets.selection_sort_recur (1)",
        "documentation": {}
    },
    {
        "label": "selection_sort_recur",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.selection_sort_recur",
        "description": "python-gitbook-master..gitbook.assets.selection_sort_recur",
        "peekOfCode": "def selection_sort_recur(seq: MutableSequence[T], i=0) -> None:\n    \"\"\"Use selection sort recursively on a list in-place.\"\"\"\n    if i >= len(seq) - 1:\n        return\n    min_val = min(seq[i:])\n    min_val_i = seq.index(min_val, i)\n    seq[min_val_i] = seq[i]\n    seq[i] = min_val\n    selection_sort_recur(seq, i + 1)",
        "detail": "python-gitbook-master..gitbook.assets.selection_sort_recur",
        "documentation": {}
    },
    {
        "label": "TestEmployees",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.tests (1)",
        "description": "python-gitbook-master..gitbook.assets.tests (1)",
        "peekOfCode": "class TestEmployees(TestCase):\n    def setUp(self):\n        agent = Job('Agent', 40000)\n        manager = Job('Manager', 50000)\n        self.alice = Employee('Alice', 'Anaheim', manager)\n        self.bob = Employee('Bob', 'Bodega', agent)\n        self.cindy = Employee('Cindy', 'Camille', agent)\n        self.dan = Employee('Dan', 'Dirk', manager)\n        self.employee_list = [self.dan, self.cindy, self.bob, self.alice]\n    def test_equal(self):",
        "detail": "python-gitbook-master..gitbook.assets.tests (1)",
        "documentation": {}
    },
    {
        "label": "TestJobs",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.tests (1)",
        "description": "python-gitbook-master..gitbook.assets.tests (1)",
        "peekOfCode": "class TestJobs(TestCase):\n    def test_str(self):\n        job_title = 'Agent'\n        job = Job(job_title, 40000)\n        self.assertEqual(str(job), job_title)",
        "detail": "python-gitbook-master..gitbook.assets.tests (1)",
        "documentation": {}
    },
    {
        "label": "TestEmployees",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.tests",
        "description": "python-gitbook-master..gitbook.assets.tests",
        "peekOfCode": "class TestEmployees(TestCase):\n    def setUp(self):\n        agent = Job('Agent', 40000)\n        manager = Job('Manager', 50000)\n        self.alice = Employee('Alice', 'Anaheim', manager)\n        self.bob = Employee('Bob', 'Bodega', agent)\n        self.cindy = Employee('Cindy', 'Camille', agent)\n        self.dan = Employee('Dan', 'Dirk', manager)\n        self.employee_list = [self.dan, self.cindy, self.bob, self.alice]\n    def test_equal(self):",
        "detail": "python-gitbook-master..gitbook.assets.tests",
        "documentation": {}
    },
    {
        "label": "TestJobs",
        "kind": 6,
        "importPath": "python-gitbook-master..gitbook.assets.tests",
        "description": "python-gitbook-master..gitbook.assets.tests",
        "peekOfCode": "class TestJobs(TestCase):\n    def test_str(self):\n        job_title = 'Agent'\n        job = Job(job_title, 40000)\n        self.assertEqual(str(job), job_title)",
        "detail": "python-gitbook-master..gitbook.assets.tests",
        "documentation": {}
    },
    {
        "label": "topo_sort_count",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.topo_sort_count",
        "description": "python-gitbook-master..gitbook.assets.topo_sort_count",
        "peekOfCode": "def topo_sort_count(graph: Mapping[Node, Iterable]) -> Iterable[Node]:\n    \"\"\"Find a topological sorting of a graph by counting in-degrees.\"\"\"\n    in_degrees = Counter(chain(*graph.values()))\n    zero_in_degrees = [node for node in graph if not in_degrees[node]]\n    while zero_in_degrees:\n        node = zero_in_degrees.pop()\n        yield node\n        for next_node in graph[node]:\n            in_degrees[next_node] -= 1\n            if not in_degrees[next_node]:",
        "detail": "python-gitbook-master..gitbook.assets.topo_sort_count",
        "documentation": {}
    },
    {
        "label": "valid_nesting_multi",
        "kind": 2,
        "importPath": "python-gitbook-master..gitbook.assets.valid_nesting_multi",
        "description": "python-gitbook-master..gitbook.assets.valid_nesting_multi",
        "peekOfCode": "def valid_nesting_multi(items: Sequence[Node], openers_to_closers: Mapping[Node, Node]) -> bool:\n    \"\"\"The parentheses problem with multiple brackets.\"\"\"\n    openers = openers_to_closers.keys()\n    closers = set(openers_to_closers.values())\n    unmatched_openers = []\n    for item in items:\n        if item in openers:\n            unmatched_openers.append(item)\n        elif item in closers:\n            if not unmatched_openers:",
        "detail": "python-gitbook-master..gitbook.assets.valid_nesting_multi",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC11_maxArea.main",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC11_maxArea.main",
        "peekOfCode": "class Solution:\n    def maxArea(self, height):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC11_maxArea.main",
        "documentation": {}
    },
    {
        "label": "ArrayTests",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC11_maxArea.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC11_maxArea.tests",
        "peekOfCode": "class ArrayTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"maxArea([1, 8, 6, 2, 5, 4, 8, 3, 7]) returns 49\"\"\"\n        self.assertEqual(obj.maxArea([1, 8, 6, 2, 5, 4, 8, 3, 7]), 49)\n    def test_2(self):\n        \"\"\"maxArea([2, 3, 4, 5, 18, 17, 6]) returns 17\"\"\"\n        self.assertEqual(obj.maxArea([2, 3, 4, 5, 18, 17, 6]), 17)\nif __name__ == \"__main__\":\n    unittest.main()",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC11_maxArea.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC11_maxArea.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC11_maxArea.tests",
        "peekOfCode": "obj = Solution()\nclass ArrayTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"maxArea([1, 8, 6, 2, 5, 4, 8, 3, 7]) returns 49\"\"\"\n        self.assertEqual(obj.maxArea([1, 8, 6, 2, 5, 4, 8, 3, 7]), 49)\n    def test_2(self):\n        \"\"\"maxArea([2, 3, 4, 5, 18, 17, 6]) returns 17\"\"\"\n        self.assertEqual(obj.maxArea([2, 3, 4, 5, 18, 17, 6]), 17)\nif __name__ == \"__main__\":\n    unittest.main()",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC11_maxArea.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC121_maxProfit.main",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC121_maxProfit.main",
        "peekOfCode": "class Solution:\n    def maxProfit(self, prices):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC121_maxProfit.main",
        "documentation": {}
    },
    {
        "label": "ArrayTests",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC121_maxProfit.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC121_maxProfit.tests",
        "peekOfCode": "class ArrayTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"maxProfit([7, 1, 5, 3, 6, 4]) --> 5\"\"\"\n        self.assertEqual(obj.maxProfit([7, 1, 5, 3, 6, 4]), 5)\n    def test_2(self):\n        \"\"\"maxProfit([7, 6, 4, 3, 1]) --> 0\"\"\"\n        self.assertEqual(obj.maxProfit([7, 6, 4, 3, 1]), 0)\nif __name__ == \"__main__\":\n    unittest.main()",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC121_maxProfit.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC121_maxProfit.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC121_maxProfit.tests",
        "peekOfCode": "obj = Solution()\nclass ArrayTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"maxProfit([7, 1, 5, 3, 6, 4]) --> 5\"\"\"\n        self.assertEqual(obj.maxProfit([7, 1, 5, 3, 6, 4]), 5)\n    def test_2(self):\n        \"\"\"maxProfit([7, 6, 4, 3, 1]) --> 0\"\"\"\n        self.assertEqual(obj.maxProfit([7, 6, 4, 3, 1]), 0)\nif __name__ == \"__main__\":\n    unittest.main()",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC121_maxProfit.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC128_longestConsecutive.main",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC128_longestConsecutive.main",
        "peekOfCode": "class Solution:\n    def longestConsecutive(self, nums):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC128_longestConsecutive.main",
        "documentation": {}
    },
    {
        "label": "ArrayTests",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC128_longestConsecutive.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC128_longestConsecutive.tests",
        "peekOfCode": "class ArrayTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"Works\"\"\"\n        self.assertEqual(obj.longestConsecutive([100, 4, 200, 1, 3, 2]), 4)\n        self.assertEqual(obj.longestConsecutive([100, 4, 200, 1, 2]), 2)\n        self.assertEqual(obj.longestConsecutive([0, -1]), 2)\nif __name__ == \"__main__\":\n    unittest.main()",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC128_longestConsecutive.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC128_longestConsecutive.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC128_longestConsecutive.tests",
        "peekOfCode": "obj = Solution()\nclass ArrayTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"Works\"\"\"\n        self.assertEqual(obj.longestConsecutive([100, 4, 200, 1, 3, 2]), 4)\n        self.assertEqual(obj.longestConsecutive([100, 4, 200, 1, 2]), 2)\n        self.assertEqual(obj.longestConsecutive([0, -1]), 2)\nif __name__ == \"__main__\":\n    unittest.main()",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC128_longestConsecutive.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC152_maxProduct.main",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC152_maxProduct.main",
        "peekOfCode": "class Solution:\n    def maxProduct(self, nums):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC152_maxProduct.main",
        "documentation": {}
    },
    {
        "label": "ArrayTests",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC152_maxProduct.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC152_maxProduct.tests",
        "peekOfCode": "class ArrayTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"[-2, 3, -4] --> 24\"\"\"\n        self.assertEqual(obj.maxProduct([-2, 3, -4]), 24)\n    def test_2(self):\n        \"\"\"[-4, -3, -2] --> 12\"\"\"\n        self.assertEqual(obj.maxProduct([-4, -3, -2]), 12)\n    def test_3(self):\n        \"\"\"[-2, -3, 7] --> 42\"\"\"\n        self.assertEqual(obj.maxProduct([-2, -3, 7]), 42)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC152_maxProduct.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC152_maxProduct.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC152_maxProduct.tests",
        "peekOfCode": "obj = Solution()\nclass ArrayTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"[-2, 3, -4] --> 24\"\"\"\n        self.assertEqual(obj.maxProduct([-2, 3, -4]), 24)\n    def test_2(self):\n        \"\"\"[-4, -3, -2] --> 12\"\"\"\n        self.assertEqual(obj.maxProduct([-4, -3, -2]), 12)\n    def test_3(self):\n        \"\"\"[-2, -3, 7] --> 42\"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC152_maxProduct.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC153_findMin.main",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC153_findMin.main",
        "peekOfCode": "class Solution:\n    def findMin(self, nums):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC153_findMin.main",
        "documentation": {}
    },
    {
        "label": "ArrayTests",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC153_findMin.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC153_findMin.tests",
        "peekOfCode": "class ArrayTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"[1] returns 1\"\"\"\n        self.assertEqual(obj.findMin([1]), 1)\n    def test_2(self):\n        \"\"\"[1, 2] returns 1\"\"\"\n        self.assertEqual(obj.findMin([1, 2]), 1)\n    def test_3(self):\n        \"\"\"[4,5,6,7,0,1,2] returns 0\"\"\"\n        self.assertEqual(obj.findMin([4, 5, 6, 7, 0, 1, 2]), 0)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC153_findMin.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC153_findMin.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC153_findMin.tests",
        "peekOfCode": "obj = Solution()\nclass ArrayTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"[1] returns 1\"\"\"\n        self.assertEqual(obj.findMin([1]), 1)\n    def test_2(self):\n        \"\"\"[1, 2] returns 1\"\"\"\n        self.assertEqual(obj.findMin([1, 2]), 1)\n    def test_3(self):\n        \"\"\"[4,5,6,7,0,1,2] returns 0\"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC153_findMin.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC15_threeSum.main",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC15_threeSum.main",
        "peekOfCode": "class Solution:\n    def threeSum(self, nums):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC15_threeSum.main",
        "documentation": {}
    },
    {
        "label": "ArrayTests",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC15_threeSum.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC15_threeSum.tests",
        "peekOfCode": "class ArrayTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"threeSum([2, 0, 1, -1]) returns [[-1, 0, 1]]\"\"\"\n        res = obj.threeSum([2, 0, 1, -1])\n        res[0].sort()\n        self.assertEqual(res, [[-1, 0, 1]])\n    def test_2(self):\n        \"\"\"threeSum([-1, 0, 1, 2, -1, -4]) returns [[-1, -1, 2], [-1, 0, 1]]\"\"\"\n        res = obj.threeSum([-1, 0, 1, 2, -1, -4])\n        for l in res:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC15_threeSum.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC15_threeSum.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC15_threeSum.tests",
        "peekOfCode": "obj = Solution()\nclass ArrayTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"threeSum([2, 0, 1, -1]) returns [[-1, 0, 1]]\"\"\"\n        res = obj.threeSum([2, 0, 1, -1])\n        res[0].sort()\n        self.assertEqual(res, [[-1, 0, 1]])\n    def test_2(self):\n        \"\"\"threeSum([-1, 0, 1, 2, -1, -4]) returns [[-1, -1, 2], [-1, 0, 1]]\"\"\"\n        res = obj.threeSum([-1, 0, 1, 2, -1, -4])",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC15_threeSum.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC1_TwoSum.main",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC1_TwoSum.main",
        "peekOfCode": "class Solution:\n    def twoSum(self, nums, target):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC1_TwoSum.main",
        "documentation": {}
    },
    {
        "label": "ArrayTests",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC1_TwoSum.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC1_TwoSum.tests",
        "peekOfCode": "class ArrayTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"twoSum([2,7,11,15], 9) returns [0,1]\"\"\"\n        self.assertEqual(sorted(obj.twoSum([2, 7, 11, 15], 9)), [0, 1])\n    def test_2(self):\n        \"\"\"twoSum([3, 2, 4], 6) returns [1,2]\"\"\"\n        self.assertEqual(sorted(obj.twoSum([3, 2, 4], 6)), [1, 2])\nif __name__ == \"__main__\":\n    unittest.main()",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC1_TwoSum.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC1_TwoSum.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC1_TwoSum.tests",
        "peekOfCode": "obj = Solution()\nclass ArrayTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"twoSum([2,7,11,15], 9) returns [0,1]\"\"\"\n        self.assertEqual(sorted(obj.twoSum([2, 7, 11, 15], 9)), [0, 1])\n    def test_2(self):\n        \"\"\"twoSum([3, 2, 4], 6) returns [1,2]\"\"\"\n        self.assertEqual(sorted(obj.twoSum([3, 2, 4], 6)), [1, 2])\nif __name__ == \"__main__\":\n    unittest.main()",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC1_TwoSum.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC217_containsDuplicate.main",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC217_containsDuplicate.main",
        "peekOfCode": "class Solution:\n    def containsDuplicate(self, nums):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC217_containsDuplicate.main",
        "documentation": {}
    },
    {
        "label": "ArrayTests",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC217_containsDuplicate.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC217_containsDuplicate.tests",
        "peekOfCode": "class ArrayTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"returns True for Arrays with duplicate values\"\"\"\n        self.assertEqual(obj.containsDuplicate([1, 2, 3, 1]), True)\n        self.assertEqual(obj.containsDuplicate([1, 1, 1, 3, 3, 4, 3, 2, 4, 2]), True)\n    def test_2(self):\n        \"\"\"returns False for Arrays with NO duplicate values\"\"\"\n        self.assertEqual(obj.containsDuplicate([1, 2, 3, 4]), False)\nif __name__ == \"__main__\":\n    unittest.main()",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC217_containsDuplicate.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC217_containsDuplicate.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC217_containsDuplicate.tests",
        "peekOfCode": "obj = Solution()\nclass ArrayTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"returns True for Arrays with duplicate values\"\"\"\n        self.assertEqual(obj.containsDuplicate([1, 2, 3, 1]), True)\n        self.assertEqual(obj.containsDuplicate([1, 1, 1, 3, 3, 4, 3, 2, 4, 2]), True)\n    def test_2(self):\n        \"\"\"returns False for Arrays with NO duplicate values\"\"\"\n        self.assertEqual(obj.containsDuplicate([1, 2, 3, 4]), False)\nif __name__ == \"__main__\":",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC217_containsDuplicate.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC238_productExceptSelf.main",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC238_productExceptSelf.main",
        "peekOfCode": "class Solution:\n    def productExceptSelf(self, nums):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC238_productExceptSelf.main",
        "documentation": {}
    },
    {
        "label": "ArrayTests",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC238_productExceptSelf.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC238_productExceptSelf.tests",
        "peekOfCode": "class ArrayTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"productExceptSelf([1,2,3,4]) returns [24, 12, 8, 6]\"\"\"\n        self.assertEqual(obj.productExceptSelf([1, 2, 3, 4]), [24, 12, 8, 6])\n    def test_2(self):\n        \"\"\"productExceptSelf([] returns [])\"\"\"\n        self.assertEqual(obj.productExceptSelf([]), [])\nif __name__ == \"__main__\":\n    unittest.main()",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC238_productExceptSelf.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC238_productExceptSelf.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC238_productExceptSelf.tests",
        "peekOfCode": "obj = Solution()\nclass ArrayTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"productExceptSelf([1,2,3,4]) returns [24, 12, 8, 6]\"\"\"\n        self.assertEqual(obj.productExceptSelf([1, 2, 3, 4]), [24, 12, 8, 6])\n    def test_2(self):\n        \"\"\"productExceptSelf([] returns [])\"\"\"\n        self.assertEqual(obj.productExceptSelf([]), [])\nif __name__ == \"__main__\":\n    unittest.main()",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC238_productExceptSelf.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC33_search.main",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC33_search.main",
        "peekOfCode": "class Solution:\n    def search(self, nums, target):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC33_search.main",
        "documentation": {}
    },
    {
        "label": "ArrayTests",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC33_search.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC33_search.tests",
        "peekOfCode": "class ArrayTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"Works\"\"\"\n        self.assertEqual(obj.search([1], 1), 0)\n        self.assertEqual(obj.search([1, 3], 3), 1)\n        self.assertEqual(obj.search([3, 1], 3), 0)\n        self.assertEqual(obj.search([4, 5, 1, 2, 3], 1), 2)\n        self.assertEqual(obj.search([7, 8, 1, 2, 3, 4, 5, 6], 2), 3)\n        self.assertEqual(obj.search([4, 5, 6, 7, 0, 1, 2], 0), 4)\nif __name__ == \"__main__\":",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC33_search.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC33_search.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC33_search.tests",
        "peekOfCode": "obj = Solution()\nclass ArrayTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"Works\"\"\"\n        self.assertEqual(obj.search([1], 1), 0)\n        self.assertEqual(obj.search([1, 3], 3), 1)\n        self.assertEqual(obj.search([3, 1], 3), 0)\n        self.assertEqual(obj.search([4, 5, 1, 2, 3], 1), 2)\n        self.assertEqual(obj.search([7, 8, 1, 2, 3, 4, 5, 6], 2), 3)\n        self.assertEqual(obj.search([4, 5, 6, 7, 0, 1, 2], 0), 4)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC33_search.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC53_maxSubArray.main",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC53_maxSubArray.main",
        "peekOfCode": "class Solution:\n    def maxSubArray(self, nums):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC53_maxSubArray.main",
        "documentation": {}
    },
    {
        "label": "ArrayTests",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC53_maxSubArray.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC53_maxSubArray.tests",
        "peekOfCode": "class ArrayTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"maxSubArray([-2, 1, -3, 4, -1, 2, 1, -5, 4]) returns 6 for [4,-1,2,1]\"\"\"\n        self.assertEqual(obj.maxSubArray([-2, 1, -3, 4, -1, 2, 1, -5, 4]), 6)\nif __name__ == \"__main__\":\n    unittest.main()",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC53_maxSubArray.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC53_maxSubArray.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC53_maxSubArray.tests",
        "peekOfCode": "obj = Solution()\nclass ArrayTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"maxSubArray([-2, 1, -3, 4, -1, 2, 1, -5, 4]) returns 6 for [4,-1,2,1]\"\"\"\n        self.assertEqual(obj.maxSubArray([-2, 1, -3, 4, -1, 2, 1, -5, 4]), 6)\nif __name__ == \"__main__\":\n    unittest.main()",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.arrays.LC53_maxSubArray.tests",
        "documentation": {}
    },
    {
        "label": "MinStack",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.design.LC155_MinStack.main",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.design.LC155_MinStack.main",
        "peekOfCode": "class MinStack:\n    def __init__(self):\n    def push(self, x):\n    def pop(self):\n    def top(self):\n    def getMin(self):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.design.LC155_MinStack.main",
        "documentation": {}
    },
    {
        "label": "DesignTests",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.design.LC155_MinStack.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.design.LC155_MinStack.tests",
        "peekOfCode": "class DesignTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"top() works for empty and filled out stack\"\"\"\n        min_stack = MinStack()\n        min_stack.top()\n        min_stack.push(11)\n        self.assertEqual(min_stack.top(), 11)\n        min_stack.push(13)\n        self.assertEqual(min_stack.top(), 13)\n        min_stack.pop()",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.design.LC155_MinStack.tests",
        "documentation": {}
    },
    {
        "label": "MyQueue",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.design.LC232_MyQueue.main",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.design.LC232_MyQueue.main",
        "peekOfCode": "class MyQueue:\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n    def push(self, x):\n        \"\"\"\n        Push element x to the back of queue.\n        \"\"\"\n    def pop(self):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.design.LC232_MyQueue.main",
        "documentation": {}
    },
    {
        "label": "DesignTests",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.design.LC232_MyQueue.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.design.LC232_MyQueue.tests",
        "peekOfCode": "class DesignTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"Push and pop work\"\"\"\n        queue = MyQueue()\n        queue.push(1)\n        queue.push(2)\n        queue.push(3)\n        self.assertEqual(queue.pop(), 1)\n        self.assertEqual(queue.pop(), 2)\n        self.assertEqual(queue.pop(), 3)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.design.LC232_MyQueue.tests",
        "documentation": {}
    },
    {
        "label": "NumArray",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.design.LC303_sumRange.main",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.design.LC303_sumRange.main",
        "peekOfCode": "class NumArray:\n    def __init__(self, nums):\n    def sumRange(self, i, j):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.design.LC303_sumRange.main",
        "documentation": {}
    },
    {
        "label": "DesignTests",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.design.LC303_sumRange.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.design.LC303_sumRange.tests",
        "peekOfCode": "class DesignTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"sumRange works\"\"\"\n        obj = NumArray([-2, 0, 3, -5, 2, -1])\n        self.assertEqual(obj.sumRange(0, 2), 1)\n        self.assertEqual(obj.sumRange(2, 5), -1)\n        self.assertEqual(obj.sumRange(0, 5), -3)\n        self.assertEqual(obj.sumRange(2, 2), 3)\nif __name__ == \"__main__\":\n    unittest.main()",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.design.LC303_sumRange.tests",
        "documentation": {}
    },
    {
        "label": "MovingAverage",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.design.LC346_MovingAverage.main",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.design.LC346_MovingAverage.main",
        "peekOfCode": "class MovingAverage:\n    def __init__(self, size):\n    def next(self, val):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.design.LC346_MovingAverage.main",
        "documentation": {}
    },
    {
        "label": "DesignTests",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.design.LC346_MovingAverage.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.design.LC346_MovingAverage.tests",
        "peekOfCode": "class DesignTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"MovingAverage Works\"\"\"\n        m = MovingAverage(3)\n        self.assertEqual(m.next(1), 1)\n        self.assertEqual(m.next(10), 5.5)\n        self.assertEqual(m.next(3), 4.666666666666667)\n        self.assertEqual(m.next(5), 6)\nif __name__ == \"__main__\":\n    unittest.main()",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.design.LC346_MovingAverage.tests",
        "documentation": {}
    },
    {
        "label": "RandomizedSet",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.design.LC380_RandomizedSet.main",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.design.LC380_RandomizedSet.main",
        "peekOfCode": "class RandomizedSet:\n    def __init__(self):\n    def insert(self, val):\n    def remove(self, val):\n    def getRandom(self):\n    def swap(self, arr, i, j):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.design.LC380_RandomizedSet.main",
        "documentation": {}
    },
    {
        "label": "DesignTests",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.design.LC380_RandomizedSet.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.design.LC380_RandomizedSet.tests",
        "peekOfCode": "class DesignTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"insert(val) returns True for successful insertion, False for duplicate insertion\"\"\"\n        random_set = RandomizedSet()\n        self.assertEqual(random_set.insert(4), True)\n        self.assertEqual(random_set.insert(4), False)\n    def test_2(self):\n        \"\"\"remove(val) returns True for successful removal, False if value not present\"\"\"\n        random_set = RandomizedSet()\n        self.assertEqual(random_set.insert(4), True)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.design.LC380_RandomizedSet.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.design.LC384_shuffle.main",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.design.LC384_shuffle.main",
        "peekOfCode": "class Solution:\n    def __init__(self, nums):\n    def reset(self):\n    def shuffle(self):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.design.LC384_shuffle.main",
        "documentation": {}
    },
    {
        "label": "DesignTests",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.design.LC384_shuffle.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.design.LC384_shuffle.tests",
        "peekOfCode": "class DesignTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"Shuffle works\"\"\"\n        deck_of_cards = Solution([num for num in range(52)])\n        deck_of_cards2 = Solution([num for num in range(52)])\n        result_shuffle = deck_of_cards.shuffle()\n        result_shuffle2 = deck_of_cards2.shuffle()\n        self.assertEqual(result_shuffle == result_shuffle2, False)\n    def test_2(self):\n        \"\"\"Reset works\"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.design.LC384_shuffle.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.dynamic_programming.LC198_rob.main",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.dynamic_programming.LC198_rob.main",
        "peekOfCode": "class Solution:\n    def rob(self, nums):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.dynamic_programming.LC198_rob.main",
        "documentation": {}
    },
    {
        "label": "DPTests",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.dynamic_programming.LC198_rob.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.dynamic_programming.LC198_rob.tests",
        "peekOfCode": "class DPTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"rob([1,2,3,1]) returns 4\"\"\"\n        self.assertEqual(obj.rob([1, 2, 3, 1]), 4)\n    def test_2(self):\n        \"\"\"rob([2,1,1,2]) returns 4\"\"\"\n        self.assertEqual(obj.rob([2, 1, 1, 2]), 4)\n    def test_3(self):\n        \"\"\"rob([]) returns 0\"\"\"\n        self.assertEqual(obj.rob([]), 0)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.dynamic_programming.LC198_rob.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.dynamic_programming.LC198_rob.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.dynamic_programming.LC198_rob.tests",
        "peekOfCode": "obj = Solution()\nclass DPTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"rob([1,2,3,1]) returns 4\"\"\"\n        self.assertEqual(obj.rob([1, 2, 3, 1]), 4)\n    def test_2(self):\n        \"\"\"rob([2,1,1,2]) returns 4\"\"\"\n        self.assertEqual(obj.rob([2, 1, 1, 2]), 4)\n    def test_3(self):\n        \"\"\"rob([]) returns 0\"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.dynamic_programming.LC198_rob.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.dynamic_programming.LC300_lengthOfLIS.main",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.dynamic_programming.LC300_lengthOfLIS.main",
        "peekOfCode": "class Solution:\n    def lengthOfLIS(self, nums):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.dynamic_programming.LC300_lengthOfLIS.main",
        "documentation": {}
    },
    {
        "label": "DPTests",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.dynamic_programming.LC300_lengthOfLIS.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.dynamic_programming.LC300_lengthOfLIS.tests",
        "peekOfCode": "class DPTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"lengthOfLIS([10,9,2,5,3,7,101,4]) returns 4 since LIS is [2,3,7,101]\"\"\"\n        self.assertEqual(obj.lengthOfLIS([10, 9, 2, 5, 3, 7, 101, 4]), 4)\n    def test_2(self):\n        \"\"\"lengthOfLIS([0]) returns 1\"\"\"\n        self.assertEqual(obj.lengthOfLIS([0]), 1)\n    def test_3(self):\n        \"\"\"lengthOfLIS([-2, -1]) returns 2\"\"\"\n        self.assertEqual(obj.lengthOfLIS([-2, -1]), 2)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.dynamic_programming.LC300_lengthOfLIS.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.dynamic_programming.LC300_lengthOfLIS.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.dynamic_programming.LC300_lengthOfLIS.tests",
        "peekOfCode": "obj = Solution()\nclass DPTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"lengthOfLIS([10,9,2,5,3,7,101,4]) returns 4 since LIS is [2,3,7,101]\"\"\"\n        self.assertEqual(obj.lengthOfLIS([10, 9, 2, 5, 3, 7, 101, 4]), 4)\n    def test_2(self):\n        \"\"\"lengthOfLIS([0]) returns 1\"\"\"\n        self.assertEqual(obj.lengthOfLIS([0]), 1)\n    def test_3(self):\n        \"\"\"lengthOfLIS([-2, -1]) returns 2\"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.dynamic_programming.LC300_lengthOfLIS.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.dynamic_programming.LC322_coinChange.main",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.dynamic_programming.LC322_coinChange.main",
        "peekOfCode": "class Solution:\n    def coinChange(self, coins, amount):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.dynamic_programming.LC322_coinChange.main",
        "documentation": {}
    },
    {
        "label": "DPTests",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.dynamic_programming.LC322_coinChange.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.dynamic_programming.LC322_coinChange.tests",
        "peekOfCode": "class DPTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"[1, 2, 5], 11 should return 3 for 5 + 5 + 1\"\"\"\n        self.assertEqual(obj.coinChange([1, 2, 5], 11), 3)\n    def test_2(self):\n        \"\"\"[2, 5, 10, 1], 27 should return 4 for 10 + 10 + 5 + 2\"\"\"\n        self.assertEqual(obj.coinChange([2, 5, 10, 1], 27), 4)\n    def test_3(self):\n        \"\"\"[2], 3 should return -1 since change is not possible\"\"\"\n        self.assertEqual(obj.coinChange([2], 3), -1)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.dynamic_programming.LC322_coinChange.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.dynamic_programming.LC322_coinChange.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.dynamic_programming.LC322_coinChange.tests",
        "peekOfCode": "obj = Solution()\nclass DPTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"[1, 2, 5], 11 should return 3 for 5 + 5 + 1\"\"\"\n        self.assertEqual(obj.coinChange([1, 2, 5], 11), 3)\n    def test_2(self):\n        \"\"\"[2, 5, 10, 1], 27 should return 4 for 10 + 10 + 5 + 2\"\"\"\n        self.assertEqual(obj.coinChange([2, 5, 10, 1], 27), 4)\n    def test_3(self):\n        \"\"\"[2], 3 should return -1 since change is not possible\"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.dynamic_programming.LC322_coinChange.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.dynamic_programming.LC55_canJump.main",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.dynamic_programming.LC55_canJump.main",
        "peekOfCode": "class Solution:\n    def canJump(self, nums):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.dynamic_programming.LC55_canJump.main",
        "documentation": {}
    },
    {
        "label": "DPTests",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.dynamic_programming.LC55_canJump.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.dynamic_programming.LC55_canJump.tests",
        "peekOfCode": "class DPTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"[2, 3, 1, 1, 4] returns True\"\"\"\n        self.assertEqual(obj.canJump([2, 3, 1, 1, 4]), True)\n    def test_2(self):\n        \"\"\"[3] returns True\"\"\"\n        self.assertEqual(obj.canJump([3]), True)\n    def test_3(self):\n        \"\"\"[3,2,1,0,4] returns False\"\"\"\n        self.assertEqual(obj.canJump([3, 2, 1, 0, 4]), False)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.dynamic_programming.LC55_canJump.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.dynamic_programming.LC55_canJump.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.dynamic_programming.LC55_canJump.tests",
        "peekOfCode": "obj = Solution()\nclass DPTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"[2, 3, 1, 1, 4] returns True\"\"\"\n        self.assertEqual(obj.canJump([2, 3, 1, 1, 4]), True)\n    def test_2(self):\n        \"\"\"[3] returns True\"\"\"\n        self.assertEqual(obj.canJump([3]), True)\n    def test_3(self):\n        \"\"\"[3,2,1,0,4] returns False\"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.dynamic_programming.LC55_canJump.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.dynamic_programming.LC62_uniquePaths.main",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.dynamic_programming.LC62_uniquePaths.main",
        "peekOfCode": "class Solution:\n    def uniquePaths(self, m, n):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.dynamic_programming.LC62_uniquePaths.main",
        "documentation": {}
    },
    {
        "label": "DPTests",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.dynamic_programming.LC62_uniquePaths.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.dynamic_programming.LC62_uniquePaths.tests",
        "peekOfCode": "class DPTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"uniquePaths(1, 1) --> 1\"\"\"\n        self.assertEqual(obj.uniquePaths(1, 1), 1)\n    def test_2(self):\n        \"\"\"uniquePaths(7, 3) --> 28\"\"\"\n        self.assertEqual(obj.uniquePaths(7, 3), 28)\n    def test_3(self):\n        \"\"\"uniquePaths(6, 3) --> 21\"\"\"\n        self.assertEqual(obj.uniquePaths(6, 3), 21)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.dynamic_programming.LC62_uniquePaths.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.dynamic_programming.LC62_uniquePaths.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.dynamic_programming.LC62_uniquePaths.tests",
        "peekOfCode": "obj = Solution()\nclass DPTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"uniquePaths(1, 1) --> 1\"\"\"\n        self.assertEqual(obj.uniquePaths(1, 1), 1)\n    def test_2(self):\n        \"\"\"uniquePaths(7, 3) --> 28\"\"\"\n        self.assertEqual(obj.uniquePaths(7, 3), 28)\n    def test_3(self):\n        \"\"\"uniquePaths(6, 3) --> 21\"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.dynamic_programming.LC62_uniquePaths.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.dynamic_programming.LC70_climbStairs.main",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.dynamic_programming.LC70_climbStairs.main",
        "peekOfCode": "class Solution:\n    def climbStairs(self, n):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.dynamic_programming.LC70_climbStairs.main",
        "documentation": {}
    },
    {
        "label": "DPTests",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.dynamic_programming.LC70_climbStairs.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.dynamic_programming.LC70_climbStairs.tests",
        "peekOfCode": "class DPTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"Returns 1 way to climb 1 stair\"\"\"\n        self.assertEqual(obj.climbStairs(1), 1)\n    def test_2(self):\n        \"\"\"Returns 2 ways to climb 2 stairs\"\"\"\n        self.assertEqual(obj.climbStairs(2), 2)\n    def test_3(self):\n        \"\"\"Returns 3 ways to climb 3 stairs\"\"\"\n        self.assertEqual(obj.climbStairs(3), 3)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.dynamic_programming.LC70_climbStairs.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.dynamic_programming.LC70_climbStairs.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.dynamic_programming.LC70_climbStairs.tests",
        "peekOfCode": "obj = Solution()\nclass DPTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"Returns 1 way to climb 1 stair\"\"\"\n        self.assertEqual(obj.climbStairs(1), 1)\n    def test_2(self):\n        \"\"\"Returns 2 ways to climb 2 stairs\"\"\"\n        self.assertEqual(obj.climbStairs(2), 2)\n    def test_3(self):\n        \"\"\"Returns 3 ways to climb 3 stairs\"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.dynamic_programming.LC70_climbStairs.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.heaps.LC215_findKthLargest.main",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.heaps.LC215_findKthLargest.main",
        "peekOfCode": "class Solution:\n    def findKthLargest(self, nums, k):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.heaps.LC215_findKthLargest.main",
        "documentation": {}
    },
    {
        "label": "HeapTests",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.heaps.LC215_findKthLargest.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.heaps.LC215_findKthLargest.tests",
        "peekOfCode": "class HeapTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"findKthLargest works\"\"\"\n        self.assertEqual(obj.findKthLargest([3, 2, 3, 1, 2, 4, 5, 5, 6], 4), 4)\nif __name__ == \"__main__\":\n    unittest.main()",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.heaps.LC215_findKthLargest.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.heaps.LC215_findKthLargest.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.heaps.LC215_findKthLargest.tests",
        "peekOfCode": "obj = Solution()\nclass HeapTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"findKthLargest works\"\"\"\n        self.assertEqual(obj.findKthLargest([3, 2, 3, 1, 2, 4, 5, 5, 6], 4), 4)\nif __name__ == \"__main__\":\n    unittest.main()",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.heaps.LC215_findKthLargest.tests",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.heaps.LC23_mergeKLists.main",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.heaps.LC23_mergeKLists.main",
        "peekOfCode": "class ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\nclass Solution:\n    def mergeKLists(self, lists):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.heaps.LC23_mergeKLists.main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.heaps.LC23_mergeKLists.main",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.heaps.LC23_mergeKLists.main",
        "peekOfCode": "class Solution:\n    def mergeKLists(self, lists):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.heaps.LC23_mergeKLists.main",
        "documentation": {}
    },
    {
        "label": "HeapTests",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.heaps.LC23_mergeKLists.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.heaps.LC23_mergeKLists.tests",
        "peekOfCode": "class HeapTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"[[3,5,7], [0,6], [0,6,28]] returns head of [0,0,3,5,6,6,7,28]\"\"\"\n        head1 = ListNode(3)\n        curr = head1\n        for num in [5, 7]:\n            curr.next = ListNode(num)\n            curr = curr.next\n        head2 = ListNode(0)\n        curr = head2",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.heaps.LC23_mergeKLists.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.heaps.LC23_mergeKLists.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.heaps.LC23_mergeKLists.tests",
        "peekOfCode": "obj = Solution()\nclass HeapTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"[[3,5,7], [0,6], [0,6,28]] returns head of [0,0,3,5,6,6,7,28]\"\"\"\n        head1 = ListNode(3)\n        curr = head1\n        for num in [5, 7]:\n            curr.next = ListNode(num)\n            curr = curr.next\n        head2 = ListNode(0)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.heaps.LC23_mergeKLists.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.heaps.LC347_topKFrequent.main",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.heaps.LC347_topKFrequent.main",
        "peekOfCode": "class Solution:\n    def topKFrequent(self, nums, k):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.heaps.LC347_topKFrequent.main",
        "documentation": {}
    },
    {
        "label": "HeapTests",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.heaps.LC347_topKFrequent.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.heaps.LC347_topKFrequent.tests",
        "peekOfCode": "class HeapTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"topKFrequent([1,1,1,2,2,3], 2) returns [1,2]\"\"\"\n        self.assertEqual(sorted(obj.topKFrequent([1, 1, 1, 2, 2, 3], 2)), [1, 2])\n    def test_2(self):\n        \"\"\"topKFrequent([1], 1) returns [1]\"\"\"\n        self.assertEqual(obj.topKFrequent([1], 1), [1])\n    def test_3(self):\n        \"\"\"topKFrequent([], 10) returns []\"\"\"\n        self.assertEqual(obj.topKFrequent([], 10), [])",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.heaps.LC347_topKFrequent.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.heaps.LC347_topKFrequent.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.heaps.LC347_topKFrequent.tests",
        "peekOfCode": "obj = Solution()\nclass HeapTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"topKFrequent([1,1,1,2,2,3], 2) returns [1,2]\"\"\"\n        self.assertEqual(sorted(obj.topKFrequent([1, 1, 1, 2, 2, 3], 2)), [1, 2])\n    def test_2(self):\n        \"\"\"topKFrequent([1], 1) returns [1]\"\"\"\n        self.assertEqual(obj.topKFrequent([1], 1), [1])\n    def test_3(self):\n        \"\"\"topKFrequent([], 10) returns []\"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.heaps.LC347_topKFrequent.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.heaps.LC973_kClosest.main",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.heaps.LC973_kClosest.main",
        "peekOfCode": "class Solution:\n    def kClosest(self, points, K):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.heaps.LC973_kClosest.main",
        "documentation": {}
    },
    {
        "label": "HeapTests",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.heaps.LC973_kClosest.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.heaps.LC973_kClosest.tests",
        "peekOfCode": "class HeapTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"kClosest works\"\"\"\n        res = obj.kClosest([[1, 3], [-2, 2]], 1)[0]\n        res.sort()\n        self.assertEqual(res, [-2, 2])\n        res = obj.kClosest([[3, 3], [5, -1], [-2, 4]], 2)\n        self.assertEqual(len(res), 2)\n        for sublist in res:\n            sublist.sort()",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.heaps.LC973_kClosest.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.heaps.LC973_kClosest.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.heaps.LC973_kClosest.tests",
        "peekOfCode": "obj = Solution()\nclass HeapTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"kClosest works\"\"\"\n        res = obj.kClosest([[1, 3], [-2, 2]], 1)[0]\n        res.sort()\n        self.assertEqual(res, [-2, 2])\n        res = obj.kClosest([[3, 3], [5, -1], [-2, 4]], 2)\n        self.assertEqual(len(res), 2)\n        for sublist in res:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.heaps.LC973_kClosest.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.intervals.LC252_canAttendMeetings.main",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.intervals.LC252_canAttendMeetings.main",
        "peekOfCode": "class Solution:\n    def canAttendMeetings(self, intervals):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.intervals.LC252_canAttendMeetings.main",
        "documentation": {}
    },
    {
        "label": "IntervalTests",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.intervals.LC252_canAttendMeetings.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.intervals.LC252_canAttendMeetings.tests",
        "peekOfCode": "class IntervalTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"returns true for working schedule.\"\"\"\n        self.assertEqual(obj.canAttendMeetings([[7, 10], [2, 4]]), True)\n    def test_2(self):\n        \"\"\"returns true for empty schedule.\"\"\"\n        self.assertEqual(obj.canAttendMeetings([]), True)\n    def test_3(self):\n        \"\"\"returns false for invalid schedule.\"\"\"\n        self.assertEqual(obj.canAttendMeetings([[0, 30], [5, 10], [15, 20]]), False)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.intervals.LC252_canAttendMeetings.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.intervals.LC252_canAttendMeetings.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.intervals.LC252_canAttendMeetings.tests",
        "peekOfCode": "obj = Solution()\nclass IntervalTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"returns true for working schedule.\"\"\"\n        self.assertEqual(obj.canAttendMeetings([[7, 10], [2, 4]]), True)\n    def test_2(self):\n        \"\"\"returns true for empty schedule.\"\"\"\n        self.assertEqual(obj.canAttendMeetings([]), True)\n    def test_3(self):\n        \"\"\"returns false for invalid schedule.\"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.intervals.LC252_canAttendMeetings.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.intervals.LC253_minMeetingRooms.main",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.intervals.LC253_minMeetingRooms.main",
        "peekOfCode": "class Solution:\n    def minMeetingRooms(self, intervals):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.intervals.LC253_minMeetingRooms.main",
        "documentation": {}
    },
    {
        "label": "Interval",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.intervals.LC253_minMeetingRooms.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.intervals.LC253_minMeetingRooms.tests",
        "peekOfCode": "class Interval:\n    def __init__(self, s, e):\n        self.start = s\n        self.end = e\nclass IntervalTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"[] --> returns 0\"\"\"\n        self.assertEqual(obj.minMeetingRooms([]), 0)\n    def test_2(self):\n        \"\"\"[[0, 30]] --> returns 1\"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.intervals.LC253_minMeetingRooms.tests",
        "documentation": {}
    },
    {
        "label": "IntervalTests",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.intervals.LC253_minMeetingRooms.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.intervals.LC253_minMeetingRooms.tests",
        "peekOfCode": "class IntervalTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"[] --> returns 0\"\"\"\n        self.assertEqual(obj.minMeetingRooms([]), 0)\n    def test_2(self):\n        \"\"\"[[0, 30]] --> returns 1\"\"\"\n        self.assertEqual(obj.minMeetingRooms([Interval(0, 30)]), 1)\n    def test_3(self):\n        \"\"\"[[7, 10], [2, 4]] --> returns 1\"\"\"\n        self.assertEqual(obj.minMeetingRooms([Interval(7, 10), Interval(2, 4)]), 1)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.intervals.LC253_minMeetingRooms.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.intervals.LC253_minMeetingRooms.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.intervals.LC253_minMeetingRooms.tests",
        "peekOfCode": "obj = Solution()\nclass Interval:\n    def __init__(self, s, e):\n        self.start = s\n        self.end = e\nclass IntervalTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"[] --> returns 0\"\"\"\n        self.assertEqual(obj.minMeetingRooms([]), 0)\n    def test_2(self):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.intervals.LC253_minMeetingRooms.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.intervals.LC435_eraseOverlapIntervals.main",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.intervals.LC435_eraseOverlapIntervals.main",
        "peekOfCode": "class Solution:\n    def eraseOverlapIntervals(self, intervals):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.intervals.LC435_eraseOverlapIntervals.main",
        "documentation": {}
    },
    {
        "label": "IntervalTests",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.intervals.LC435_eraseOverlapIntervals.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.intervals.LC435_eraseOverlapIntervals.tests",
        "peekOfCode": "class IntervalTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"eraseOverlapIntervals([]) and eraseOverlapIntervals([[1,2]]) return 0\"\"\"\n        self.assertEqual(obj.eraseOverlapIntervals([]), 0)\n        self.assertEqual(obj.eraseOverlapIntervals([[1, 2]]), 0)\n    def test_2(self):\n        \"\"\"eraseOverlapIntervals([[0,2],[1,3],[2,4],[3,5],[4,6]] ) returns 2\"\"\"\n        self.assertEqual(\n            obj.eraseOverlapIntervals([[0, 2], [1, 3], [2, 4], [3, 5], [4, 6]]), 2\n        )",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.intervals.LC435_eraseOverlapIntervals.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.intervals.LC435_eraseOverlapIntervals.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.intervals.LC435_eraseOverlapIntervals.tests",
        "peekOfCode": "obj = Solution()\nclass IntervalTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"eraseOverlapIntervals([]) and eraseOverlapIntervals([[1,2]]) return 0\"\"\"\n        self.assertEqual(obj.eraseOverlapIntervals([]), 0)\n        self.assertEqual(obj.eraseOverlapIntervals([[1, 2]]), 0)\n    def test_2(self):\n        \"\"\"eraseOverlapIntervals([[0,2],[1,3],[2,4],[3,5],[4,6]] ) returns 2\"\"\"\n        self.assertEqual(\n            obj.eraseOverlapIntervals([[0, 2], [1, 3], [2, 4], [3, 5], [4, 6]]), 2",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.intervals.LC435_eraseOverlapIntervals.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.intervals.LC56_merge.main",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.intervals.LC56_merge.main",
        "peekOfCode": "class Solution:\n    def merge(self, intervals):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.intervals.LC56_merge.main",
        "documentation": {}
    },
    {
        "label": "IntervalTests",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.intervals.LC56_merge.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.intervals.LC56_merge.tests",
        "peekOfCode": "class IntervalTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"merge([[1, 4], [2, 3]]) --> [1, 4]\"\"\"\n        self.assertEqual(obj.merge([[1, 4], [2, 3]]), [[1, 4]])\n    def test_2(self):\n        \"\"\"merge([[1, 4], [4, 5]]) --> [1, 5]\"\"\"\n        self.assertEqual(obj.merge([[1, 4], [4, 5]]), [[1, 5]])\n    def test_3(self):\n        \"\"\"merge([[1,3],[2,6],[8,10],[15,18]]) --> [[1,6],[8,10],[15,18]]\"\"\"\n        self.assertEqual(",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.intervals.LC56_merge.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.intervals.LC56_merge.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.intervals.LC56_merge.tests",
        "peekOfCode": "obj = Solution()\nclass IntervalTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"merge([[1, 4], [2, 3]]) --> [1, 4]\"\"\"\n        self.assertEqual(obj.merge([[1, 4], [2, 3]]), [[1, 4]])\n    def test_2(self):\n        \"\"\"merge([[1, 4], [4, 5]]) --> [1, 5]\"\"\"\n        self.assertEqual(obj.merge([[1, 4], [4, 5]]), [[1, 5]])\n    def test_3(self):\n        \"\"\"merge([[1,3],[2,6],[8,10],[15,18]]) --> [[1,6],[8,10],[15,18]]\"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.intervals.LC56_merge.tests",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.linked_lists.LC138_copyRandomList.main",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.linked_lists.LC138_copyRandomList.main",
        "peekOfCode": "class Node:\n    def __init__(self, val, next, random):\n        self.val = val\n        self.next = next\n        self.random = random\nclass Solution:\n    def copyRandomList(self, head):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.linked_lists.LC138_copyRandomList.main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.linked_lists.LC138_copyRandomList.main",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.linked_lists.LC138_copyRandomList.main",
        "peekOfCode": "class Solution:\n    def copyRandomList(self, head):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.linked_lists.LC138_copyRandomList.main",
        "documentation": {}
    },
    {
        "label": "LinkedListTests",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.linked_lists.LC138_copyRandomList.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.linked_lists.LC138_copyRandomList.tests",
        "peekOfCode": "class LinkedListTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"Works when random pointers point to valid node\"\"\"\n        one_node = Node(1, None, None)\n        two_node = Node(2, None, None)\n        one_node.next = two_node\n        one_node.random = two_node\n        two_node.random = two_node\n        res_head = obj.copyRandomList(one_node)\n        self.assertEqual(res_head == one_node, False)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.linked_lists.LC138_copyRandomList.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.linked_lists.LC138_copyRandomList.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.linked_lists.LC138_copyRandomList.tests",
        "peekOfCode": "obj = Solution()\nclass LinkedListTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"Works when random pointers point to valid node\"\"\"\n        one_node = Node(1, None, None)\n        two_node = Node(2, None, None)\n        one_node.next = two_node\n        one_node.random = two_node\n        two_node.random = two_node\n        res_head = obj.copyRandomList(one_node)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.linked_lists.LC138_copyRandomList.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.linked_lists.LC141_hasCycle.main",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.linked_lists.LC141_hasCycle.main",
        "peekOfCode": "class Solution:\n    def hasCycle(self, head):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.linked_lists.LC141_hasCycle.main",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.linked_lists.LC141_hasCycle.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.linked_lists.LC141_hasCycle.tests",
        "peekOfCode": "class ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\nclass LinkedListTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"Return False on empty list\"\"\"\n        self.assertEqual(obj.hasCycle({}), False)\n    def test_2(self):\n        \"\"\"Returns True for circular linked lists\"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.linked_lists.LC141_hasCycle.tests",
        "documentation": {}
    },
    {
        "label": "LinkedListTests",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.linked_lists.LC141_hasCycle.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.linked_lists.LC141_hasCycle.tests",
        "peekOfCode": "class LinkedListTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"Return False on empty list\"\"\"\n        self.assertEqual(obj.hasCycle({}), False)\n    def test_2(self):\n        \"\"\"Returns True for circular linked lists\"\"\"\n        a_node = ListNode(\"A\")\n        b_node = ListNode(\"B\")\n        c_node = ListNode(\"C\")\n        d_node = ListNode(\"D\")",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.linked_lists.LC141_hasCycle.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.linked_lists.LC141_hasCycle.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.linked_lists.LC141_hasCycle.tests",
        "peekOfCode": "obj = Solution()\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\nclass LinkedListTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"Return False on empty list\"\"\"\n        self.assertEqual(obj.hasCycle({}), False)\n    def test_2(self):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.linked_lists.LC141_hasCycle.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.linked_lists.LC143_reorderList.main",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.linked_lists.LC143_reorderList.main",
        "peekOfCode": "class Solution:\n    def reorderList(self, head):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.linked_lists.LC143_reorderList.main",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.linked_lists.LC143_reorderList.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.linked_lists.LC143_reorderList.tests",
        "peekOfCode": "class ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\nclass LinkedListTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"[1,2,3,4,5,6] returns head of [1, 6, 2, 5, 3, 4]\"\"\"\n        head = ListNode(1)\n        curr = head\n        for i in range(2, 7):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.linked_lists.LC143_reorderList.tests",
        "documentation": {}
    },
    {
        "label": "LinkedListTests",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.linked_lists.LC143_reorderList.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.linked_lists.LC143_reorderList.tests",
        "peekOfCode": "class LinkedListTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"[1,2,3,4,5,6] returns head of [1, 6, 2, 5, 3, 4]\"\"\"\n        head = ListNode(1)\n        curr = head\n        for i in range(2, 7):\n            curr.next = ListNode(i)\n            curr = curr.next\n        obj.reorderList(head)\n        curr = head",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.linked_lists.LC143_reorderList.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.linked_lists.LC143_reorderList.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.linked_lists.LC143_reorderList.tests",
        "peekOfCode": "obj = Solution()\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\nclass LinkedListTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"[1,2,3,4,5,6] returns head of [1, 6, 2, 5, 3, 4]\"\"\"\n        head = ListNode(1)\n        curr = head",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.linked_lists.LC143_reorderList.tests",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.linked_lists.LC19_removeNthFromEnd.main",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.linked_lists.LC19_removeNthFromEnd.main",
        "peekOfCode": "class ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\nclass Solution:\n    def removeNthFromEnd(self, head, n):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.linked_lists.LC19_removeNthFromEnd.main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.linked_lists.LC19_removeNthFromEnd.main",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.linked_lists.LC19_removeNthFromEnd.main",
        "peekOfCode": "class Solution:\n    def removeNthFromEnd(self, head, n):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.linked_lists.LC19_removeNthFromEnd.main",
        "documentation": {}
    },
    {
        "label": "LinkedListTests",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.linked_lists.LC19_removeNthFromEnd.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.linked_lists.LC19_removeNthFromEnd.tests",
        "peekOfCode": "class LinkedListTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"removeNthFromEnd([a, b, c, d, e], 2) becomes [a, b, c, e]\"\"\"\n        a_node = ListNode(\"A\")\n        b_node = ListNode(\"B\")\n        c_node = ListNode(\"C\")\n        d_node = ListNode(\"D\")\n        e_node = ListNode(\"E\")\n        a_node.next = b_node\n        b_node.next = c_node",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.linked_lists.LC19_removeNthFromEnd.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.linked_lists.LC19_removeNthFromEnd.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.linked_lists.LC19_removeNthFromEnd.tests",
        "peekOfCode": "obj = Solution()\nclass LinkedListTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"removeNthFromEnd([a, b, c, d, e], 2) becomes [a, b, c, e]\"\"\"\n        a_node = ListNode(\"A\")\n        b_node = ListNode(\"B\")\n        c_node = ListNode(\"C\")\n        d_node = ListNode(\"D\")\n        e_node = ListNode(\"E\")\n        a_node.next = b_node",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.linked_lists.LC19_removeNthFromEnd.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.linked_lists.LC206_reverseList.main",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.linked_lists.LC206_reverseList.main",
        "peekOfCode": "class Solution:\n    def reverseList(self, head):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.linked_lists.LC206_reverseList.main",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.linked_lists.LC206_reverseList.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.linked_lists.LC206_reverseList.tests",
        "peekOfCode": "class ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\nclass LinkedListTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"reverses the list\"\"\"\n        head = ListNode(\"A\")\n        b_node = ListNode(\"B\")\n        head.next = b_node",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.linked_lists.LC206_reverseList.tests",
        "documentation": {}
    },
    {
        "label": "LinkedListTests",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.linked_lists.LC206_reverseList.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.linked_lists.LC206_reverseList.tests",
        "peekOfCode": "class LinkedListTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"reverses the list\"\"\"\n        head = ListNode(\"A\")\n        b_node = ListNode(\"B\")\n        head.next = b_node\n        self.assertEqual(obj.reverseList(head), b_node)\n        self.assertEqual(b_node.next, head)\n        self.assertEqual(head.next, None)\nif __name__ == \"__main__\":",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.linked_lists.LC206_reverseList.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.linked_lists.LC206_reverseList.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.linked_lists.LC206_reverseList.tests",
        "peekOfCode": "obj = Solution()\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\nclass LinkedListTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"reverses the list\"\"\"\n        head = ListNode(\"A\")\n        b_node = ListNode(\"B\")",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.linked_lists.LC206_reverseList.tests",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.linked_lists.LC21_mergeTwoLists.main",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.linked_lists.LC21_mergeTwoLists.main",
        "peekOfCode": "class ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\nclass Solution:\n    def mergeTwoLists(self, l1, l2):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.linked_lists.LC21_mergeTwoLists.main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.linked_lists.LC21_mergeTwoLists.main",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.linked_lists.LC21_mergeTwoLists.main",
        "peekOfCode": "class Solution:\n    def mergeTwoLists(self, l1, l2):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.linked_lists.LC21_mergeTwoLists.main",
        "documentation": {}
    },
    {
        "label": "LinkedListTests",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.linked_lists.LC21_mergeTwoLists.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.linked_lists.LC21_mergeTwoLists.tests",
        "peekOfCode": "class LinkedListTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"[1,3], [2,4,6] returns head of [1,2,3,4,6]\"\"\"\n        one_node = ListNode(1)\n        three_node = ListNode(3)\n        one_node.next = three_node\n        two_node = ListNode(2)\n        four_node = ListNode(4)\n        six_node = ListNode(6)\n        two_node.next = four_node",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.linked_lists.LC21_mergeTwoLists.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.linked_lists.LC21_mergeTwoLists.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.linked_lists.LC21_mergeTwoLists.tests",
        "peekOfCode": "obj = Solution()\nclass LinkedListTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"[1,3], [2,4,6] returns head of [1,2,3,4,6]\"\"\"\n        one_node = ListNode(1)\n        three_node = ListNode(3)\n        one_node.next = three_node\n        two_node = ListNode(2)\n        four_node = ListNode(4)\n        six_node = ListNode(6)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.linked_lists.LC21_mergeTwoLists.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.matrix.LC54_spiralOrder.main",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.matrix.LC54_spiralOrder.main",
        "peekOfCode": "class Solution:\n    def spiralOrder(self, matrix):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.matrix.LC54_spiralOrder.main",
        "documentation": {}
    },
    {
        "label": "MatrixTests",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.matrix.LC54_spiralOrder.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.matrix.LC54_spiralOrder.tests",
        "peekOfCode": "class MatrixTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"[ [ 1, 2, 3 ], [ 4, 5, 6 ], [ 7, 8, 9 ] ] returns [1,2,3,6,9,8,7,4,5]\"\"\"\n        self.assertEqual(\n            obj.spiralOrder([[1, 2, 3], [4, 5, 6], [7, 8, 9]]),\n            [1, 2, 3, 6, 9, 8, 7, 4, 5],\n        )\n    def test_2(self):\n        \"\"\"[[1,2,3,4],[5,6,7,8],[9,10,11,12]] returns [1,2,3,4,8,12,11,10,9,5,6,7]\"\"\"\n        self.assertEqual(",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.matrix.LC54_spiralOrder.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.matrix.LC54_spiralOrder.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.matrix.LC54_spiralOrder.tests",
        "peekOfCode": "obj = Solution()\nclass MatrixTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"[ [ 1, 2, 3 ], [ 4, 5, 6 ], [ 7, 8, 9 ] ] returns [1,2,3,6,9,8,7,4,5]\"\"\"\n        self.assertEqual(\n            obj.spiralOrder([[1, 2, 3], [4, 5, 6], [7, 8, 9]]),\n            [1, 2, 3, 6, 9, 8, 7, 4, 5],\n        )\n    def test_2(self):\n        \"\"\"[[1,2,3,4],[5,6,7,8],[9,10,11,12]] returns [1,2,3,4,8,12,11,10,9,5,6,7]\"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.matrix.LC54_spiralOrder.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.matrix.LC73_setZeroes.main",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.matrix.LC73_setZeroes.main",
        "peekOfCode": "class Solution:\n    def setZeroes(self, matrix):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.matrix.LC73_setZeroes.main",
        "documentation": {}
    },
    {
        "label": "MatrixTests",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.matrix.LC73_setZeroes.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.matrix.LC73_setZeroes.tests",
        "peekOfCode": "class MatrixTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"modifies input matrix.\"\"\"\n        input_matrix = [[0, 1, 2, 0], [3, 4, 5, 2], [1, 3, 1, 5]]\n        obj.setZeroes(input_matrix)\n        self.assertEqual(input_matrix, [[0, 0, 0, 0], [0, 4, 5, 0], [0, 3, 1, 0]])\n    def test_2(self):\n        \"\"\"works\"\"\"\n        input_matrix = [[0, 1, 2, 0], [3, 4, 5, 2], [1, 3, 1, 5]]\n        obj.setZeroes(input_matrix)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.matrix.LC73_setZeroes.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.matrix.LC73_setZeroes.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.matrix.LC73_setZeroes.tests",
        "peekOfCode": "obj = Solution()\nclass MatrixTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"modifies input matrix.\"\"\"\n        input_matrix = [[0, 1, 2, 0], [3, 4, 5, 2], [1, 3, 1, 5]]\n        obj.setZeroes(input_matrix)\n        self.assertEqual(input_matrix, [[0, 0, 0, 0], [0, 4, 5, 0], [0, 3, 1, 0]])\n    def test_2(self):\n        \"\"\"works\"\"\"\n        input_matrix = [[0, 1, 2, 0], [3, 4, 5, 2], [1, 3, 1, 5]]",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.matrix.LC73_setZeroes.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.matrix.LC79_exist.main",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.matrix.LC79_exist.main",
        "peekOfCode": "class Solution:\n    def exist(self, board, word):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.matrix.LC79_exist.main",
        "documentation": {}
    },
    {
        "label": "MatrixTests",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.matrix.LC79_exist.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.matrix.LC79_exist.tests",
        "peekOfCode": "class MatrixTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"returns True correctly.\"\"\"\n        self.assertEqual(\n            obj.exist(\n                [[\"A\", \"B\", \"C\", \"E\"], [\"S\", \"F\", \"C\", \"S\"], [\"A\", \"D\", \"E\", \"E\"]],\n                \"CESEEC\",\n            ),\n            True,\n        )",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.matrix.LC79_exist.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.matrix.LC79_exist.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.matrix.LC79_exist.tests",
        "peekOfCode": "obj = Solution()\nclass MatrixTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"returns True correctly.\"\"\"\n        self.assertEqual(\n            obj.exist(\n                [[\"A\", \"B\", \"C\", \"E\"], [\"S\", \"F\", \"C\", \"S\"], [\"A\", \"D\", \"E\", \"E\"]],\n                \"CESEEC\",\n            ),\n            True,",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.matrix.LC79_exist.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.practice.detect_cycle_directed.main",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.practice.detect_cycle_directed.main",
        "peekOfCode": "class Solution:\n    def hasCycle(self, N, edges):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.practice.detect_cycle_directed.main",
        "documentation": {}
    },
    {
        "label": "PracticeTests",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.practice.detect_cycle_directed.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.practice.detect_cycle_directed.tests",
        "peekOfCode": "class PracticeTests(unittest.TestCase):\n    def test_2(self):\n        \"\"\"returns False correctly\"\"\"\n        self.assertEqual(obj.hasCycle(2, [[0, 1]]), False)\n        self.assertEqual(obj.hasCycle(4, [[0, 1], [0, 2], [1, 2]]), False)\n        #  0\n        #  |  \\\n        #  v    >\n        #  1 ->  2\n    def test_1(self):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.practice.detect_cycle_directed.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.practice.detect_cycle_directed.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.practice.detect_cycle_directed.tests",
        "peekOfCode": "obj = Solution()\nclass PracticeTests(unittest.TestCase):\n    def test_2(self):\n        \"\"\"returns False correctly\"\"\"\n        self.assertEqual(obj.hasCycle(2, [[0, 1]]), False)\n        self.assertEqual(obj.hasCycle(4, [[0, 1], [0, 2], [1, 2]]), False)\n        #  0\n        #  |  \\\n        #  v    >\n        #  1 ->  2",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.practice.detect_cycle_directed.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.practice.detect_cycle_undirected.main",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.practice.detect_cycle_undirected.main",
        "peekOfCode": "class Solution:\n    def hasCycle(self, N, edges):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.practice.detect_cycle_undirected.main",
        "documentation": {}
    },
    {
        "label": "PracticeTests",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.practice.detect_cycle_undirected.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.practice.detect_cycle_undirected.tests",
        "peekOfCode": "class PracticeTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"returns False correctly\"\"\"\n        self.assertEqual(obj.hasCycle(2, [[0, 1]]), False)\n        self.assertEqual(obj.hasCycle(3, [[1, 0], [1, 2]]), False)\n    def test_2(self):\n        \"\"\"returns True correctly\"\"\"\n        self.assertEqual(obj.hasCycle(4, [[1, 0], [0, 3], [1, 2], [2, 3]]), True)\n        self.assertEqual(\n            obj.hasCycle(5, [[1, 0], [0, 2], [2, 1], [0, 3], [3, 4]]), True",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.practice.detect_cycle_undirected.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.practice.detect_cycle_undirected.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.practice.detect_cycle_undirected.tests",
        "peekOfCode": "obj = Solution()\nclass PracticeTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"returns False correctly\"\"\"\n        self.assertEqual(obj.hasCycle(2, [[0, 1]]), False)\n        self.assertEqual(obj.hasCycle(3, [[1, 0], [1, 2]]), False)\n    def test_2(self):\n        \"\"\"returns True correctly\"\"\"\n        self.assertEqual(obj.hasCycle(4, [[1, 0], [0, 3], [1, 2], [2, 3]]), True)\n        self.assertEqual(",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.practice.detect_cycle_undirected.tests",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.practice.LC203_removeElements.main",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.practice.LC203_removeElements.main",
        "peekOfCode": "class ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\nclass Solution:\n    def removeElements(self, head, val):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.practice.LC203_removeElements.main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.practice.LC203_removeElements.main",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.practice.LC203_removeElements.main",
        "peekOfCode": "class Solution:\n    def removeElements(self, head, val):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.practice.LC203_removeElements.main",
        "documentation": {}
    },
    {
        "label": "PracticeTests",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.practice.LC203_removeElements.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.practice.LC203_removeElements.tests",
        "peekOfCode": "class PracticeTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"[1,2,3,4,5,6], val = 6 returns [1,2,3,4,5]\"\"\"\n        head = ListNode(1)\n        curr = head\n        for i in range(2, 7):\n            curr.next = ListNode(i)\n            curr = curr.next\n        obj.removeElements(head, 6)\n        curr = head",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.practice.LC203_removeElements.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.practice.LC203_removeElements.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.practice.LC203_removeElements.tests",
        "peekOfCode": "obj = Solution()\nclass PracticeTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"[1,2,3,4,5,6], val = 6 returns [1,2,3,4,5]\"\"\"\n        head = ListNode(1)\n        curr = head\n        for i in range(2, 7):\n            curr.next = ListNode(i)\n            curr = curr.next\n        obj.removeElements(head, 6)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.practice.LC203_removeElements.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.practice.LC75_sortColors.main",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.practice.LC75_sortColors.main",
        "peekOfCode": "class Solution:\n    def sortColors(self, nums):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.practice.LC75_sortColors.main",
        "documentation": {}
    },
    {
        "label": "PracticeTests",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.practice.LC75_sortColors.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.practice.LC75_sortColors.tests",
        "peekOfCode": "class PracticeTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"works\"\"\"\n        input1 = [2, 0, 2, 1, 1, 0]\n        obj.sortColors(input1)\n        self.assertEqual(input1, [0, 0, 1, 1, 2, 2])\n        input2 = [2]\n        obj.sortColors(input2)\n        self.assertEqual(input2, [2])\nif __name__ == \"__main__\":",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.practice.LC75_sortColors.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.practice.LC75_sortColors.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.practice.LC75_sortColors.tests",
        "peekOfCode": "obj = Solution()\nclass PracticeTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"works\"\"\"\n        input1 = [2, 0, 2, 1, 1, 0]\n        obj.sortColors(input1)\n        self.assertEqual(input1, [0, 0, 1, 1, 2, 2])\n        input2 = [2]\n        obj.sortColors(input2)\n        self.assertEqual(input2, [2])",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.practice.LC75_sortColors.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.practice.LC844_backspaceCompare.main",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.practice.LC844_backspaceCompare.main",
        "peekOfCode": "class Solution:\n    def backspaceCompare(self, S, T):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.practice.LC844_backspaceCompare.main",
        "documentation": {}
    },
    {
        "label": "PracticeTests",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.practice.LC844_backspaceCompare.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.practice.LC844_backspaceCompare.tests",
        "peekOfCode": "class PracticeTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"returns True correctly\"\"\"\n        self.assertEqual(obj.backspaceCompare(\"y#fo##f\", \"y#f#o##f\"), True)\n        self.assertEqual(obj.backspaceCompare(\"a##c\", \"#a#c\"), True)\n    def test_2(self):\n        \"\"\"returns False correctly\"\"\"\n        self.assertEqual(obj.backspaceCompare(\"a#c\", \"b\"), False)\nif __name__ == \"__main__\":\n    unittest.main()",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.practice.LC844_backspaceCompare.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.practice.LC844_backspaceCompare.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.practice.LC844_backspaceCompare.tests",
        "peekOfCode": "obj = Solution()\nclass PracticeTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"returns True correctly\"\"\"\n        self.assertEqual(obj.backspaceCompare(\"y#fo##f\", \"y#f#o##f\"), True)\n        self.assertEqual(obj.backspaceCompare(\"a##c\", \"#a#c\"), True)\n    def test_2(self):\n        \"\"\"returns False correctly\"\"\"\n        self.assertEqual(obj.backspaceCompare(\"a#c\", \"b\"), False)\nif __name__ == \"__main__\":",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.practice.LC844_backspaceCompare.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.practice.LC876_middleNode.main",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.practice.LC876_middleNode.main",
        "peekOfCode": "class Solution:\n    def middleNode(self, head):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.practice.LC876_middleNode.main",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.practice.LC876_middleNode.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.practice.LC876_middleNode.tests",
        "peekOfCode": "class ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\nclass LinkedListTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"Work for LL with odd number of nodes\"\"\"\n        a_node = ListNode(\"A\")\n        b_node = ListNode(\"B\")\n        c_node = ListNode(\"C\")",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.practice.LC876_middleNode.tests",
        "documentation": {}
    },
    {
        "label": "LinkedListTests",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.practice.LC876_middleNode.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.practice.LC876_middleNode.tests",
        "peekOfCode": "class LinkedListTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"Work for LL with odd number of nodes\"\"\"\n        a_node = ListNode(\"A\")\n        b_node = ListNode(\"B\")\n        c_node = ListNode(\"C\")\n        a_node.next = b_node\n        b_node.next = c_node\n        self.assertEqual(obj.middleNode(a_node), b_node)\n    def test_2(self):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.practice.LC876_middleNode.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.practice.LC876_middleNode.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.practice.LC876_middleNode.tests",
        "peekOfCode": "obj = Solution()\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\nclass LinkedListTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"Work for LL with odd number of nodes\"\"\"\n        a_node = ListNode(\"A\")\n        b_node = ListNode(\"B\")",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.practice.LC876_middleNode.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.strings.LC125_isPalindrome.main",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.strings.LC125_isPalindrome.main",
        "peekOfCode": "class Solution:\n    def isPalindrome(self, s):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.strings.LC125_isPalindrome.main",
        "documentation": {}
    },
    {
        "label": "StringTests",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.strings.LC125_isPalindrome.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.strings.LC125_isPalindrome.tests",
        "peekOfCode": "class StringTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"'A man, a plan, a canal: Panama' returns True\"\"\"\n        self.assertEqual(obj.isPalindrome(\"A man, a plan, a canal: Panama\"), True)\n    def test_2(self):\n        \"\"\"'love' returns False\"\"\"\n        self.assertEqual(obj.isPalindrome(\"love\"), False)\n    def test_3(self):\n        \"\"\"'' returns True\"\"\"\n        self.assertEqual(obj.isPalindrome(\"\"), True)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.strings.LC125_isPalindrome.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.strings.LC125_isPalindrome.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.strings.LC125_isPalindrome.tests",
        "peekOfCode": "obj = Solution()\nclass StringTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"'A man, a plan, a canal: Panama' returns True\"\"\"\n        self.assertEqual(obj.isPalindrome(\"A man, a plan, a canal: Panama\"), True)\n    def test_2(self):\n        \"\"\"'love' returns False\"\"\"\n        self.assertEqual(obj.isPalindrome(\"love\"), False)\n    def test_3(self):\n        \"\"\"'' returns True\"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.strings.LC125_isPalindrome.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.strings.LC20_isValid.main",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.strings.LC20_isValid.main",
        "peekOfCode": "class Solution:\n    def isValid(self, s):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.strings.LC20_isValid.main",
        "documentation": {}
    },
    {
        "label": "StringTests",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.strings.LC20_isValid.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.strings.LC20_isValid.tests",
        "peekOfCode": "class StringTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"'(', ')', '{', '}', '[', ']' should return False\"\"\"\n        self.assertEqual(obj.isValid(\"(\"), False)\n        self.assertEqual(obj.isValid(\")\"), False)\n        self.assertEqual(obj.isValid(\"{\"), False)\n        self.assertEqual(obj.isValid(\"}\"), False)\n        self.assertEqual(obj.isValid(\"[\"), False)\n        self.assertEqual(obj.isValid(\"]\"), False)\n    def test_2(self):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.strings.LC20_isValid.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.strings.LC20_isValid.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.strings.LC20_isValid.tests",
        "peekOfCode": "obj = Solution()\nclass StringTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"'(', ')', '{', '}', '[', ']' should return False\"\"\"\n        self.assertEqual(obj.isValid(\"(\"), False)\n        self.assertEqual(obj.isValid(\")\"), False)\n        self.assertEqual(obj.isValid(\"{\"), False)\n        self.assertEqual(obj.isValid(\"}\"), False)\n        self.assertEqual(obj.isValid(\"[\"), False)\n        self.assertEqual(obj.isValid(\"]\"), False)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.strings.LC20_isValid.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.strings.LC242_isAnagram.main",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.strings.LC242_isAnagram.main",
        "peekOfCode": "class Solution:\n    def isAnagram(self, s, t):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.strings.LC242_isAnagram.main",
        "documentation": {}
    },
    {
        "label": "StringTests",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.strings.LC242_isAnagram.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.strings.LC242_isAnagram.tests",
        "peekOfCode": "class StringTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"isAnagram('anagram', 'nagaram') returns True\"\"\"\n        self.assertEqual(obj.isAnagram(\"anagram\", \"nagaram\"), True)\n    def test_2(self):\n        \"\"\"isAnagram('rat', 'car') returns False\"\"\"\n        self.assertEqual(obj.isAnagram(\"rat\", \"car\"), False)\n    def test_3(self):\n        \"\"\"isAnagram('', '') returns True\"\"\"\n        self.assertEqual(obj.isAnagram(\"\", \"\"), True)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.strings.LC242_isAnagram.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.strings.LC242_isAnagram.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.strings.LC242_isAnagram.tests",
        "peekOfCode": "obj = Solution()\nclass StringTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"isAnagram('anagram', 'nagaram') returns True\"\"\"\n        self.assertEqual(obj.isAnagram(\"anagram\", \"nagaram\"), True)\n    def test_2(self):\n        \"\"\"isAnagram('rat', 'car') returns False\"\"\"\n        self.assertEqual(obj.isAnagram(\"rat\", \"car\"), False)\n    def test_3(self):\n        \"\"\"isAnagram('', '') returns True\"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.strings.LC242_isAnagram.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.strings.LC271_encode_decode.main",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.strings.LC271_encode_decode.main",
        "peekOfCode": "class Solution:\n    def encode(self, strs):\n    def decode(self, str):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.strings.LC271_encode_decode.main",
        "documentation": {}
    },
    {
        "label": "StringTests",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.strings.LC271_encode_decode.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.strings.LC271_encode_decode.tests",
        "peekOfCode": "class StringTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"encode returns a string\"\"\"\n        self.assertEqual(type(obj.encode([\"kevin\", \"is\", \"great\"])) is str, True)\n    def test_2(self):\n        \"\"\"decode returns back the correct array\"\"\"\n        #          5/kevin2/is5/great\n        res = obj.encode([\"kevin\", \"is\", \"great\"])\n        self.assertEqual(type(res) is str, True)\n        decoded_res = obj.decode(res)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.strings.LC271_encode_decode.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.strings.LC271_encode_decode.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.strings.LC271_encode_decode.tests",
        "peekOfCode": "obj = Solution()\nclass StringTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"encode returns a string\"\"\"\n        self.assertEqual(type(obj.encode([\"kevin\", \"is\", \"great\"])) is str, True)\n    def test_2(self):\n        \"\"\"decode returns back the correct array\"\"\"\n        #          5/kevin2/is5/great\n        res = obj.encode([\"kevin\", \"is\", \"great\"])\n        self.assertEqual(type(res) is str, True)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.strings.LC271_encode_decode.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.strings.LC3_lengthOfLongestSubstring.main",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.strings.LC3_lengthOfLongestSubstring.main",
        "peekOfCode": "class Solution:\n    def lengthOfLongestSubstring(self, s):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.strings.LC3_lengthOfLongestSubstring.main",
        "documentation": {}
    },
    {
        "label": "StringTests",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.strings.LC3_lengthOfLongestSubstring.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.strings.LC3_lengthOfLongestSubstring.tests",
        "peekOfCode": "class StringTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"'abcabcbb' returns 3\"\"\"\n        self.assertEqual(obj.lengthOfLongestSubstring(\"abcabcbb\"), 3)\n    def test_2(self):\n        \"\"\"'pwwkew' returns 3\"\"\"\n        self.assertEqual(obj.lengthOfLongestSubstring(\"pwwkew\"), 3)\n    def test_3(self):\n        \"\"\"'dvdf' returns 3\"\"\"\n        self.assertEqual(obj.lengthOfLongestSubstring(\"dvdf\"), 3)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.strings.LC3_lengthOfLongestSubstring.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.strings.LC3_lengthOfLongestSubstring.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.strings.LC3_lengthOfLongestSubstring.tests",
        "peekOfCode": "obj = Solution()\nclass StringTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"'abcabcbb' returns 3\"\"\"\n        self.assertEqual(obj.lengthOfLongestSubstring(\"abcabcbb\"), 3)\n    def test_2(self):\n        \"\"\"'pwwkew' returns 3\"\"\"\n        self.assertEqual(obj.lengthOfLongestSubstring(\"pwwkew\"), 3)\n    def test_3(self):\n        \"\"\"'dvdf' returns 3\"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.strings.LC3_lengthOfLongestSubstring.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.strings.LC49_groupAnagrams.main",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.strings.LC49_groupAnagrams.main",
        "peekOfCode": "class Solution:\n    def groupAnagrams(self, strs):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.strings.LC49_groupAnagrams.main",
        "documentation": {}
    },
    {
        "label": "StringTests",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.strings.LC49_groupAnagrams.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.strings.LC49_groupAnagrams.tests",
        "peekOfCode": "class StringTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"['eat', 'tea', 'tan', 'ate', 'nat', 'bat'] returns 3 groups of Anagrams\"\"\"\n        res = obj.groupAnagrams([\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"])\n        res.sort(reverse=True, key=len)\n        for i in range(len(res)):\n            sub_arr = res[i]\n            sub_arr.sort()\n        self.assertEqual(len(res), 3)\n        sub_arr_1 = res[0]",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.strings.LC49_groupAnagrams.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.strings.LC49_groupAnagrams.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.strings.LC49_groupAnagrams.tests",
        "peekOfCode": "obj = Solution()\nclass StringTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"['eat', 'tea', 'tan', 'ate', 'nat', 'bat'] returns 3 groups of Anagrams\"\"\"\n        res = obj.groupAnagrams([\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"])\n        res.sort(reverse=True, key=len)\n        for i in range(len(res)):\n            sub_arr = res[i]\n            sub_arr.sort()\n        self.assertEqual(len(res), 3)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.strings.LC49_groupAnagrams.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.strings.LC5_longestPalindrome.main",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.strings.LC5_longestPalindrome.main",
        "peekOfCode": "class Solution:\n    def longestPalindrome(self, s):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.strings.LC5_longestPalindrome.main",
        "documentation": {}
    },
    {
        "label": "StringTests",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.strings.LC5_longestPalindrome.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.strings.LC5_longestPalindrome.tests",
        "peekOfCode": "class StringTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"'cbbd' returns 'bb'\"\"\"\n        self.assertEqual(obj.longestPalindrome(\"cbbd\"), \"bb\")\n    def test_2(self):\n        \"\"\"'abba' returns 'abba'\"\"\"\n        self.assertEqual(obj.longestPalindrome(\"abba\"), \"abba\")\n    def test_3(self):\n        \"\"\"'abacdfgdcaba' returns 'aba'\"\"\"\n        self.assertEqual(obj.longestPalindrome(\"abacdfgdcaba\"), \"aba\")",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.strings.LC5_longestPalindrome.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.strings.LC5_longestPalindrome.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.strings.LC5_longestPalindrome.tests",
        "peekOfCode": "obj = Solution()\nclass StringTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"'cbbd' returns 'bb'\"\"\"\n        self.assertEqual(obj.longestPalindrome(\"cbbd\"), \"bb\")\n    def test_2(self):\n        \"\"\"'abba' returns 'abba'\"\"\"\n        self.assertEqual(obj.longestPalindrome(\"abba\"), \"abba\")\n    def test_3(self):\n        \"\"\"'abacdfgdcaba' returns 'aba'\"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.strings.LC5_longestPalindrome.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC100_isSameTree.main",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC100_isSameTree.main",
        "peekOfCode": "class Solution:\n    def isSameTree(self, p, q):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC100_isSameTree.main",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC100_isSameTree.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC100_isSameTree.tests",
        "peekOfCode": "class Node:\n    def __init__(self, key):\n        self.left = None\n        self.right = None\n        self.val = key\ndef insert(root, node):\n    if root is None:\n        root = node\n    else:\n        if root.val < node.val:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC100_isSameTree.tests",
        "documentation": {}
    },
    {
        "label": "TreeTests",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC100_isSameTree.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC100_isSameTree.tests",
        "peekOfCode": "class TreeTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"returns True for same trees\"\"\"\n        root = Node(8)\n        insert(root, Node(3))\n        insert(root, Node(10))\n        insert(root, Node(1))\n        insert(root, Node(6))\n        insert(root, Node(14))\n        #          8",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC100_isSameTree.tests",
        "documentation": {}
    },
    {
        "label": "insert",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC100_isSameTree.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC100_isSameTree.tests",
        "peekOfCode": "def insert(root, node):\n    if root is None:\n        root = node\n    else:\n        if root.val < node.val:\n            if root.right is None:\n                root.right = node\n            else:\n                insert(root.right, node)\n        else:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC100_isSameTree.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC100_isSameTree.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC100_isSameTree.tests",
        "peekOfCode": "obj = Solution()\nclass Node:\n    def __init__(self, key):\n        self.left = None\n        self.right = None\n        self.val = key\ndef insert(root, node):\n    if root is None:\n        root = node\n    else:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC100_isSameTree.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC102_levelOrder.main",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC102_levelOrder.main",
        "peekOfCode": "class Solution:\n    def levelOrder(self, root):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC102_levelOrder.main",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC102_levelOrder.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC102_levelOrder.tests",
        "peekOfCode": "class Node:\n    def __init__(self, key):\n        self.left = None\n        self.right = None\n        self.val = key\ndef insert(root, node):\n    if root is None:\n        root = node\n    else:\n        if root.val < node.val:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC102_levelOrder.tests",
        "documentation": {}
    },
    {
        "label": "TreeTests",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC102_levelOrder.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC102_levelOrder.tests",
        "peekOfCode": "class TreeTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"Works.\"\"\"\n        root = Node(8)\n        insert(root, Node(3))\n        insert(root, Node(10))\n        insert(root, Node(1))\n        insert(root, Node(6))\n        insert(root, Node(14))\n        #          8",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC102_levelOrder.tests",
        "documentation": {}
    },
    {
        "label": "insert",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC102_levelOrder.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC102_levelOrder.tests",
        "peekOfCode": "def insert(root, node):\n    if root is None:\n        root = node\n    else:\n        if root.val < node.val:\n            if root.right is None:\n                root.right = node\n            else:\n                insert(root.right, node)\n        else:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC102_levelOrder.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC102_levelOrder.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC102_levelOrder.tests",
        "peekOfCode": "obj = Solution()\nclass Node:\n    def __init__(self, key):\n        self.left = None\n        self.right = None\n        self.val = key\ndef insert(root, node):\n    if root is None:\n        root = node\n    else:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC102_levelOrder.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC104_maxDepth.main",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC104_maxDepth.main",
        "peekOfCode": "class Solution:\n    def maxDepth(self, root):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC104_maxDepth.main",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC104_maxDepth.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC104_maxDepth.tests",
        "peekOfCode": "class Node:\n    def __init__(self, key):\n        self.left = None\n        self.right = None\n        self.val = key\ndef insert(root, node):\n    if root is None:\n        root = node\n    else:\n        if root.val < node.val:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC104_maxDepth.tests",
        "documentation": {}
    },
    {
        "label": "TreeTests",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC104_maxDepth.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC104_maxDepth.tests",
        "peekOfCode": "class TreeTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"Works for Binary Search Tree of 1, 2, and 3 levels\"\"\"\n        root = Node(8)\n        self.assertEqual(obj.maxDepth(root), 1)\n        insert(root, Node(3))\n        insert(root, Node(10))\n        self.assertEqual(obj.maxDepth(root), 2)\n        insert(root, Node(14))\n        self.assertEqual(obj.maxDepth(root), 3)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC104_maxDepth.tests",
        "documentation": {}
    },
    {
        "label": "insert",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC104_maxDepth.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC104_maxDepth.tests",
        "peekOfCode": "def insert(root, node):\n    if root is None:\n        root = node\n    else:\n        if root.val < node.val:\n            if root.right is None:\n                root.right = node\n            else:\n                insert(root.right, node)\n        else:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC104_maxDepth.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC104_maxDepth.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC104_maxDepth.tests",
        "peekOfCode": "obj = Solution()\nclass Node:\n    def __init__(self, key):\n        self.left = None\n        self.right = None\n        self.val = key\ndef insert(root, node):\n    if root is None:\n        root = node\n    else:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC104_maxDepth.tests",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC133_cloneGraph.main",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC133_cloneGraph.main",
        "peekOfCode": "class Node:\n    def __init__(self, val, neighbors):\n        self.val = val\n        self.neighbors = neighbors\nclass Solution:\n    def cloneGraph(self, node):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC133_cloneGraph.main",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC133_cloneGraph.main",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC133_cloneGraph.main",
        "peekOfCode": "class Solution:\n    def cloneGraph(self, node):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC133_cloneGraph.main",
        "documentation": {}
    },
    {
        "label": "GraphTests",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC133_cloneGraph.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC133_cloneGraph.tests",
        "peekOfCode": "class GraphTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"Works for valid graph\"\"\"\n        one_node = Node(1, [])\n        two_node = Node(2, [])\n        one_node.neighbors = [two_node]\n        two_node.neighbors = [one_node]\n        res_node = obj.cloneGraph(one_node)\n        self.assertEqual(res_node != one_node, True)\n        self.assertEqual(len(res_node.neighbors), 1)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC133_cloneGraph.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC133_cloneGraph.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC133_cloneGraph.tests",
        "peekOfCode": "obj = Solution()\nclass GraphTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"Works for valid graph\"\"\"\n        one_node = Node(1, [])\n        two_node = Node(2, [])\n        one_node.neighbors = [two_node]\n        two_node.neighbors = [one_node]\n        res_node = obj.cloneGraph(one_node)\n        self.assertEqual(res_node != one_node, True)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC133_cloneGraph.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC200_numIslands.main",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC200_numIslands.main",
        "peekOfCode": "class Solution:\n    def numIslands(self, grid):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC200_numIslands.main",
        "documentation": {}
    },
    {
        "label": "GraphTests",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC200_numIslands.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC200_numIslands.tests",
        "peekOfCode": "class GraphTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"returns 0 islands correctly.\"\"\"\n        self.assertEqual(\n            obj.numIslands(\n                [\n                    [\"0\", \"0\", \"0\", \"0\", \"0\"],\n                    [\"0\", \"0\", \"0\", \"0\", \"0\"],\n                    [\"0\", \"0\", \"0\", \"0\", \"0\"],\n                ]",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC200_numIslands.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC200_numIslands.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC200_numIslands.tests",
        "peekOfCode": "obj = Solution()\nclass GraphTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"returns 0 islands correctly.\"\"\"\n        self.assertEqual(\n            obj.numIslands(\n                [\n                    [\"0\", \"0\", \"0\", \"0\", \"0\"],\n                    [\"0\", \"0\", \"0\", \"0\", \"0\"],\n                    [\"0\", \"0\", \"0\", \"0\", \"0\"],",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC200_numIslands.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC207_canFinish.main",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC207_canFinish.main",
        "peekOfCode": "class Solution:\n    def canFinish(self, N, edges):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC207_canFinish.main",
        "documentation": {}
    },
    {
        "label": "GraphTests",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC207_canFinish.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC207_canFinish.tests",
        "peekOfCode": "class GraphTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"returns False correctly\"\"\"\n        self.assertEqual(obj.canFinish(1, [[0, 0]]), False)\n        self.assertEqual(obj.canFinish(3, [[0, 1], [2, 1], [2, 2]]), False)\n        self.assertEqual(\n            obj.canFinish(4, [[0, 1], [0, 2], [1, 2], [2, 0], [2, 3], [3, 3]]), False\n        )\n    def test_2(self):\n        \"\"\"returns True correctly\"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC207_canFinish.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC207_canFinish.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC207_canFinish.tests",
        "peekOfCode": "obj = Solution()\nclass GraphTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"returns False correctly\"\"\"\n        self.assertEqual(obj.canFinish(1, [[0, 0]]), False)\n        self.assertEqual(obj.canFinish(3, [[0, 1], [2, 1], [2, 2]]), False)\n        self.assertEqual(\n            obj.canFinish(4, [[0, 1], [0, 2], [1, 2], [2, 0], [2, 3], [3, 3]]), False\n        )\n    def test_2(self):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC207_canFinish.tests",
        "documentation": {}
    },
    {
        "label": "Trie",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC208_trie.main",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC208_trie.main",
        "peekOfCode": "class Trie:\n    def __init__(self):\n    def insert(self, word):\n    def search(self, word):\n    def startsWith(self, prefix):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC208_trie.main",
        "documentation": {}
    },
    {
        "label": "TreeTests",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC208_trie.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC208_trie.tests",
        "peekOfCode": "class TreeTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"insert() and search() work.\"\"\"\n        trie = Trie()\n        trie.insert(\"apple\")\n        self.assertEqual(trie.search(\"apple\"), True)\n        self.assertEqual(trie.search(\"app\"), False)\n        trie.insert(\"app\")\n        self.assertEqual(trie.search(\"app\"), True)\n    def test_2(self):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC208_trie.tests",
        "documentation": {}
    },
    {
        "label": "WordDictionary",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC211_WordDictionary.main",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC211_WordDictionary.main",
        "peekOfCode": "class WordDictionary:\n    def __init__(self):\n    def addWord(self, word):\n    def search(self, word):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC211_WordDictionary.main",
        "documentation": {}
    },
    {
        "label": "TreeTests",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC211_WordDictionary.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC211_WordDictionary.tests",
        "peekOfCode": "class TreeTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"addWord and search works\"\"\"\n        wd = WordDictionary()\n        wd.addWord(\"bad\")\n        wd.addWord(\"dad\")\n        wd.addWord(\"mad\")\n        self.assertEqual(wd.search(\"pad\"), False)\n        self.assertEqual(wd.search(\"ba\"), False)\n        self.assertEqual(wd.search(\"bad\"), True)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC211_WordDictionary.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC226_invertTree.main",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC226_invertTree.main",
        "peekOfCode": "class Solution:\n    def invertTree(self, root):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC226_invertTree.main",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC226_invertTree.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC226_invertTree.tests",
        "peekOfCode": "class Node:\n    def __init__(self, key):\n        self.left = None\n        self.right = None\n        self.val = key\ndef insert(root, node):\n    if root is None:\n        root = node\n    else:\n        if root.val < node.val:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC226_invertTree.tests",
        "documentation": {}
    },
    {
        "label": "TreeTests",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC226_invertTree.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC226_invertTree.tests",
        "peekOfCode": "class TreeTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"Inverts tree\"\"\"\n        root = Node(8)\n        insert(root, Node(3))\n        insert(root, Node(10))\n        insert(root, Node(1))\n        insert(root, Node(6))\n        insert(root, Node(14))\n        #          8",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC226_invertTree.tests",
        "documentation": {}
    },
    {
        "label": "insert",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC226_invertTree.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC226_invertTree.tests",
        "peekOfCode": "def insert(root, node):\n    if root is None:\n        root = node\n    else:\n        if root.val < node.val:\n            if root.right is None:\n                root.right = node\n            else:\n                insert(root.right, node)\n        else:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC226_invertTree.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC226_invertTree.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC226_invertTree.tests",
        "peekOfCode": "obj = Solution()\nclass Node:\n    def __init__(self, key):\n        self.left = None\n        self.right = None\n        self.val = key\ndef insert(root, node):\n    if root is None:\n        root = node\n    else:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC226_invertTree.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC230_kthSmallest.main",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC230_kthSmallest.main",
        "peekOfCode": "class Solution:\n    def kthSmallest(self, root, k):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC230_kthSmallest.main",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC230_kthSmallest.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC230_kthSmallest.tests",
        "peekOfCode": "class Node:\n    def __init__(self, key):\n        self.left = None\n        self.right = None\n        self.val = key\ndef insert(root, node):\n    if root is None:\n        root = node\n    else:\n        if root.val < node.val:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC230_kthSmallest.tests",
        "documentation": {}
    },
    {
        "label": "TreeTests",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC230_kthSmallest.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC230_kthSmallest.tests",
        "peekOfCode": "class TreeTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"Works.\"\"\"\n        root = Node(8)\n        insert(root, Node(3))\n        insert(root, Node(10))\n        insert(root, Node(1))\n        insert(root, Node(6))\n        insert(root, Node(14))\n        #          8",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC230_kthSmallest.tests",
        "documentation": {}
    },
    {
        "label": "insert",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC230_kthSmallest.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC230_kthSmallest.tests",
        "peekOfCode": "def insert(root, node):\n    if root is None:\n        root = node\n    else:\n        if root.val < node.val:\n            if root.right is None:\n                root.right = node\n            else:\n                insert(root.right, node)\n        else:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC230_kthSmallest.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC230_kthSmallest.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC230_kthSmallest.tests",
        "peekOfCode": "obj = Solution()\nclass Node:\n    def __init__(self, key):\n        self.left = None\n        self.right = None\n        self.val = key\ndef insert(root, node):\n    if root is None:\n        root = node\n    else:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC230_kthSmallest.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC235_lowestCommonAncestor.main",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC235_lowestCommonAncestor.main",
        "peekOfCode": "class Solution:\n    def lowestCommonAncestor(self, root, p, q):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC235_lowestCommonAncestor.main",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC235_lowestCommonAncestor.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC235_lowestCommonAncestor.tests",
        "peekOfCode": "class Node:\n    def __init__(self, key):\n        self.left = None\n        self.right = None\n        self.val = key\ndef insert(root, node):\n    if root is None:\n        root = node\n    else:\n        if root.val < node.val:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC235_lowestCommonAncestor.tests",
        "documentation": {}
    },
    {
        "label": "TreeTests",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC235_lowestCommonAncestor.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC235_lowestCommonAncestor.tests",
        "peekOfCode": "class TreeTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"Returns lowest common ancestor.\"\"\"\n        root = Node(8)\n        insert(root, Node(3))\n        insert(root, Node(10))\n        insert(root, Node(1))\n        insert(root, Node(6))\n        insert(root, Node(14))\n        #          8",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC235_lowestCommonAncestor.tests",
        "documentation": {}
    },
    {
        "label": "insert",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC235_lowestCommonAncestor.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC235_lowestCommonAncestor.tests",
        "peekOfCode": "def insert(root, node):\n    if root is None:\n        root = node\n    else:\n        if root.val < node.val:\n            if root.right is None:\n                root.right = node\n            else:\n                insert(root.right, node)\n        else:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC235_lowestCommonAncestor.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC235_lowestCommonAncestor.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC235_lowestCommonAncestor.tests",
        "peekOfCode": "obj = Solution()\nclass Node:\n    def __init__(self, key):\n        self.left = None\n        self.right = None\n        self.val = key\ndef insert(root, node):\n    if root is None:\n        root = node\n    else:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC235_lowestCommonAncestor.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC261_validTree.main",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC261_validTree.main",
        "peekOfCode": "class Solution:\n    def validTree(self, N, edges):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC261_validTree.main",
        "documentation": {}
    },
    {
        "label": "GraphTests",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC261_validTree.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC261_validTree.tests",
        "peekOfCode": "class GraphTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"Returns True correctly\"\"\"\n        self.assertEqual(obj.validTree(5, [[0, 1], [0, 2], [0, 3], [1, 4]]), True)\n        self.assertEqual(obj.validTree(5, [[1, 0], [0, 2], [0, 3], [3, 4]]), True)\n    def test_2(self):\n        \"\"\"Returns False due to seperate components\"\"\"\n        self.assertEqual(obj.validTree(4, [[0, 1], [2, 3]]), False)\n    def test_3(self):\n        \"\"\"Returns False due to cycle\"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC261_validTree.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC261_validTree.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC261_validTree.tests",
        "peekOfCode": "obj = Solution()\nclass GraphTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"Returns True correctly\"\"\"\n        self.assertEqual(obj.validTree(5, [[0, 1], [0, 2], [0, 3], [1, 4]]), True)\n        self.assertEqual(obj.validTree(5, [[1, 0], [0, 2], [0, 3], [3, 4]]), True)\n    def test_2(self):\n        \"\"\"Returns False due to seperate components\"\"\"\n        self.assertEqual(obj.validTree(4, [[0, 1], [2, 3]]), False)\n    def test_3(self):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC261_validTree.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC323_countComponents.main",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC323_countComponents.main",
        "peekOfCode": "class Solution:\n    def countComponents(self, N, edges):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC323_countComponents.main",
        "documentation": {}
    },
    {
        "label": "GraphTests",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC323_countComponents.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC323_countComponents.tests",
        "peekOfCode": "class GraphTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"works\"\"\"\n        self.assertEqual(obj.countComponents(5, [[0, 1], [2, 1], [3, 4]]), 2)\n        self.assertEqual(obj.countComponents(5, [[0, 1], [1, 2], [2, 3], [3, 4]]), 1)\nif __name__ == \"__main__\":\n    unittest.main()",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC323_countComponents.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC323_countComponents.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC323_countComponents.tests",
        "peekOfCode": "obj = Solution()\nclass GraphTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"works\"\"\"\n        self.assertEqual(obj.countComponents(5, [[0, 1], [2, 1], [3, 4]]), 2)\n        self.assertEqual(obj.countComponents(5, [[0, 1], [1, 2], [2, 3], [3, 4]]), 1)\nif __name__ == \"__main__\":\n    unittest.main()",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC323_countComponents.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC331_isValidSerialization.main",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC331_isValidSerialization.main",
        "peekOfCode": "class Solution:\n    def isValidSerialization(self, preorder):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC331_isValidSerialization.main",
        "documentation": {}
    },
    {
        "label": "TreeTests",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC331_isValidSerialization.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC331_isValidSerialization.tests",
        "peekOfCode": "class TreeTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"Returns True correctly\"\"\"\n        self.assertEqual(obj.isValidSerialization(\"9,#,92,#,#\"), True)\n    def test_2(self):\n        \"\"\"Returns False correctly\"\"\"\n        self.assertEqual(obj.isValidSerialization(\"#,#,3,5,#\"), False)\nif __name__ == \"__main__\":\n    unittest.main()",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC331_isValidSerialization.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC331_isValidSerialization.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC331_isValidSerialization.tests",
        "peekOfCode": "obj = Solution()\nclass TreeTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"Returns True correctly\"\"\"\n        self.assertEqual(obj.isValidSerialization(\"9,#,92,#,#\"), True)\n    def test_2(self):\n        \"\"\"Returns False correctly\"\"\"\n        self.assertEqual(obj.isValidSerialization(\"#,#,3,5,#\"), False)\nif __name__ == \"__main__\":\n    unittest.main()",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC331_isValidSerialization.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC572_isSubtree.main",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC572_isSubtree.main",
        "peekOfCode": "class Solution():\n    def isSubtree(self, s, t):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC572_isSubtree.main",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC572_isSubtree.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC572_isSubtree.tests",
        "peekOfCode": "class Node:\n    def __init__(self, key):\n        self.left = None\n        self.right = None\n        self.val = key\ndef insert(root, node):\n    if root is None:\n        root = node\n    else:\n        if root.val < node.val:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC572_isSubtree.tests",
        "documentation": {}
    },
    {
        "label": "TreeTests",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC572_isSubtree.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC572_isSubtree.tests",
        "peekOfCode": "class TreeTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"Returns True correctly.\"\"\"\n        root1 = Node(8)\n        insert(root1, Node(3))\n        insert(root1, Node(10))\n        insert(root1, Node(1))\n        insert(root1, Node(6))\n        insert(root1, Node(14))\n        #          8",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC572_isSubtree.tests",
        "documentation": {}
    },
    {
        "label": "insert",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC572_isSubtree.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC572_isSubtree.tests",
        "peekOfCode": "def insert(root, node):\n    if root is None:\n        root = node\n    else:\n        if root.val < node.val:\n            if root.right is None:\n                root.right = node\n            else:\n                insert(root.right, node)\n        else:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC572_isSubtree.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC572_isSubtree.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC572_isSubtree.tests",
        "peekOfCode": "obj = Solution()\nclass Node:\n    def __init__(self, key):\n        self.left = None\n        self.right = None\n        self.val = key\ndef insert(root, node):\n    if root is None:\n        root = node\n    else:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC572_isSubtree.tests",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC98_isValidBST.main",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC98_isValidBST.main",
        "peekOfCode": "class Solution:\n    def isValidBST(self, root):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC98_isValidBST.main",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC98_isValidBST.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC98_isValidBST.tests",
        "peekOfCode": "class Node:\n    def __init__(self, key):\n        self.left = None\n        self.right = None\n        self.val = key\ndef insert(root, node):\n    if root is None:\n        root = node\n    else:\n        if root.val < node.val:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC98_isValidBST.tests",
        "documentation": {}
    },
    {
        "label": "TreeTests",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC98_isValidBST.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC98_isValidBST.tests",
        "peekOfCode": "class TreeTests(unittest.TestCase):\n    def test_1(self):\n        \"\"\"Returns True for valid BST.\"\"\"\n        root = Node(8)\n        insert(root, Node(3))\n        insert(root, Node(10))\n        insert(root, Node(1))\n        insert(root, Node(6))\n        insert(root, Node(14))\n        #          8",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC98_isValidBST.tests",
        "documentation": {}
    },
    {
        "label": "insert",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC98_isValidBST.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC98_isValidBST.tests",
        "peekOfCode": "def insert(root, node):\n    if root is None:\n        root = node\n    else:\n        if root.val < node.val:\n            if root.right is None:\n                root.right = node\n            else:\n                insert(root.right, node)\n        else:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC98_isValidBST.tests",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC98_isValidBST.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC98_isValidBST.tests",
        "peekOfCode": "obj = Solution()\nclass Node:\n    def __init__(self, key):\n        self.left = None\n        self.right = None\n        self.val = key\ndef insert(root, node):\n    if root is None:\n        root = node\n    else:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.-ds-leetcode.trees_and_graphs.LC98_isValidBST.tests",
        "documentation": {}
    },
    {
        "label": "my_queue",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.avl_tree",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.avl_tree",
        "peekOfCode": "class my_queue:\n    def __init__(self) -> None:\n        self.data: List[Any] = []\n        self.head: int = 0\n        self.tail: int = 0\n    def is_empty(self) -> bool:\n        return self.head == self.tail\n    def push(self, data: Any) -> None:\n        self.data.append(data)\n        self.tail = self.tail + 1",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.avl_tree",
        "documentation": {}
    },
    {
        "label": "my_node",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.avl_tree",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.avl_tree",
        "peekOfCode": "class my_node:\n    def __init__(self, data: Any) -> None:\n        self.data = data\n        self.left: Optional[my_node] = None\n        self.right: Optional[my_node] = None\n        self.height: int = 1\n    def get_data(self) -> Any:\n        return self.data\n    def get_left(self) -> Optional[\"my_node\"]:\n        return self.left",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.avl_tree",
        "documentation": {}
    },
    {
        "label": "AVLtree",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.avl_tree",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.avl_tree",
        "peekOfCode": "class AVLtree:\n    \"\"\"\n    An AVL tree doctest\n    Examples:\n    >>> t = AVLtree()\n    >>> t.insert(4)\n    insert:4\n    >>> print(str(t).replace(\" \\\\n\",\"\\\\n\"))\n     4\n    *************************************",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.avl_tree",
        "documentation": {}
    },
    {
        "label": "get_height",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.avl_tree",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.avl_tree",
        "peekOfCode": "def get_height(node: Optional[\"my_node\"]) -> int:\n    if node is None:\n        return 0\n    return node.get_height()\ndef my_max(a: int, b: int) -> int:\n    if a > b:\n        return a\n    return b\ndef right_rotation(node: my_node) -> my_node:\n    r\"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.avl_tree",
        "documentation": {}
    },
    {
        "label": "my_max",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.avl_tree",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.avl_tree",
        "peekOfCode": "def my_max(a: int, b: int) -> int:\n    if a > b:\n        return a\n    return b\ndef right_rotation(node: my_node) -> my_node:\n    r\"\"\"\n            A                      B\n           / \\                    / \\\n          B   C                  Bl  A\n         / \\       -->          /   / \\",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.avl_tree",
        "documentation": {}
    },
    {
        "label": "right_rotation",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.avl_tree",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.avl_tree",
        "peekOfCode": "def right_rotation(node: my_node) -> my_node:\n    r\"\"\"\n            A                      B\n           / \\                    / \\\n          B   C                  Bl  A\n         / \\       -->          /   / \\\n        Bl  Br                 UB Br  C\n       /\n     UB\n    UB = unbalanced node",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.avl_tree",
        "documentation": {}
    },
    {
        "label": "left_rotation",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.avl_tree",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.avl_tree",
        "peekOfCode": "def left_rotation(node: my_node) -> my_node:\n    \"\"\"\n    a mirror symmetry rotation of the left_rotation\n    \"\"\"\n    print(\"right rotation node:\", node.get_data())\n    ret = node.get_right()\n    assert ret is not None\n    node.set_right(ret.get_left())\n    ret.set_left(node)\n    h1 = my_max(get_height(node.get_right()), get_height(node.get_left())) + 1",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.avl_tree",
        "documentation": {}
    },
    {
        "label": "lr_rotation",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.avl_tree",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.avl_tree",
        "peekOfCode": "def lr_rotation(node: my_node) -> my_node:\n    r\"\"\"\n            A              A                    Br\n           / \\            / \\                  /  \\\n          B   C    LR    Br  C       RR       B    A\n         / \\       -->  /  \\         -->    /     / \\\n        Bl  Br         B   UB              Bl    UB  C\n             \\        /\n             UB     Bl\n    RR = right_rotation   LR = left_rotation",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.avl_tree",
        "documentation": {}
    },
    {
        "label": "rl_rotation",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.avl_tree",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.avl_tree",
        "peekOfCode": "def rl_rotation(node: my_node) -> my_node:\n    right_child = node.get_right()\n    assert right_child is not None\n    node.set_right(right_rotation(right_child))\n    return left_rotation(node)\ndef insert_node(node: Optional[\"my_node\"], data: Any) -> Optional[\"my_node\"]:\n    if node is None:\n        return my_node(data)\n    if data < node.get_data():\n        node.set_left(insert_node(node.get_left(), data))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.avl_tree",
        "documentation": {}
    },
    {
        "label": "insert_node",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.avl_tree",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.avl_tree",
        "peekOfCode": "def insert_node(node: Optional[\"my_node\"], data: Any) -> Optional[\"my_node\"]:\n    if node is None:\n        return my_node(data)\n    if data < node.get_data():\n        node.set_left(insert_node(node.get_left(), data))\n        if (\n            get_height(node.get_left()) - get_height(node.get_right()) == 2\n        ):  # an unbalance detected\n            left_child = node.get_left()\n            assert left_child is not None",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.avl_tree",
        "documentation": {}
    },
    {
        "label": "get_rightMost",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.avl_tree",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.avl_tree",
        "peekOfCode": "def get_rightMost(root: my_node) -> Any:\n    while True:\n        right_child = root.get_right()\n        if right_child is None:\n            break\n        root = right_child\n    return root.get_data()\ndef get_leftMost(root: my_node) -> Any:\n    while True:\n        left_child = root.get_left()",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.avl_tree",
        "documentation": {}
    },
    {
        "label": "get_leftMost",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.avl_tree",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.avl_tree",
        "peekOfCode": "def get_leftMost(root: my_node) -> Any:\n    while True:\n        left_child = root.get_left()\n        if left_child is None:\n            break\n        root = left_child\n    return root.get_data()\ndef del_node(root: my_node, data: Any) -> Optional[\"my_node\"]:\n    left_child = root.get_left()\n    right_child = root.get_right()",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.avl_tree",
        "documentation": {}
    },
    {
        "label": "del_node",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.avl_tree",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.avl_tree",
        "peekOfCode": "def del_node(root: my_node, data: Any) -> Optional[\"my_node\"]:\n    left_child = root.get_left()\n    right_child = root.get_right()\n    if root.get_data() == data:\n        if left_child is not None and right_child is not None:\n            temp_data = get_leftMost(right_child)\n            root.set_data(temp_data)\n            root.set_right(del_node(right_child, temp_data))\n        elif left_child is not None:\n            root = left_child",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.avl_tree",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.basic_binary_tree",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.basic_binary_tree",
        "peekOfCode": "class Node:\n    \"\"\"\n    A Node has data variable and pointers to Nodes to its left and right.\n    \"\"\"\n    def __init__(self, data: int) -> None:\n        self.data = data\n        self.left: Optional[Node] = None\n        self.right: Optional[Node] = None\ndef display(tree: Optional[Node]) -> None:  # In Order traversal of the tree\n    \"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.basic_binary_tree",
        "documentation": {}
    },
    {
        "label": "display",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.basic_binary_tree",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.basic_binary_tree",
        "peekOfCode": "def display(tree: Optional[Node]) -> None:  # In Order traversal of the tree\n    \"\"\"\n    >>> root = Node(1)\n    >>> root.left = Node(0)\n    >>> root.right = Node(2)\n    >>> display(root)\n    0\n    1\n    2\n    >>> display(root.right)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.basic_binary_tree",
        "documentation": {}
    },
    {
        "label": "depth_of_tree",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.basic_binary_tree",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.basic_binary_tree",
        "peekOfCode": "def depth_of_tree(tree: Optional[Node]) -> int:\n    \"\"\"\n    Recursive function that returns the depth of a binary tree.\n    >>> root = Node(0)\n    >>> depth_of_tree(root)\n    1\n    >>> root.left = Node(0)\n    >>> depth_of_tree(root)\n    2\n    >>> root.right = Node(0)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.basic_binary_tree",
        "documentation": {}
    },
    {
        "label": "is_full_binary_tree",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.basic_binary_tree",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.basic_binary_tree",
        "peekOfCode": "def is_full_binary_tree(tree: Node) -> bool:\n    \"\"\"\n    Returns True if this is a full binary tree\n    >>> root = Node(0)\n    >>> is_full_binary_tree(root)\n    True\n    >>> root.left = Node(0)\n    >>> is_full_binary_tree(root)\n    False\n    >>> root.right = Node(0)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.basic_binary_tree",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.basic_binary_tree",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.basic_binary_tree",
        "peekOfCode": "def main() -> None:  # Main function for testing.\n    tree = Node(1)\n    tree.left = Node(2)\n    tree.right = Node(3)\n    tree.left.left = Node(4)\n    tree.left.right = Node(5)\n    tree.left.right.left = Node(6)\n    tree.right.left = Node(7)\n    tree.right.left.left = Node(8)\n    tree.right.left.left.right = Node(9)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.basic_binary_tree",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.binary_search_tree",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.binary_search_tree",
        "peekOfCode": "class Node:\n    def __init__(self, value, parent):\n        self.value = value\n        self.parent = parent  # Added in order to delete a node easier\n        self.left = None\n        self.right = None\n    def __repr__(self):\n        from pprint import pformat\n        if self.left is None and self.right is None:\n            return str(self.value)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.binary_search_tree",
        "documentation": {}
    },
    {
        "label": "BinarySearchTree",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.binary_search_tree",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.binary_search_tree",
        "peekOfCode": "class BinarySearchTree:\n    def __init__(self, root=None):\n        self.root = root\n    def __str__(self):\n        \"\"\"\n        Return a string of all the Nodes using in order traversal\n        \"\"\"\n        return str(self.root)\n    def __reassign_nodes(self, node, new_children):\n        if new_children is not None:  # reset its kids",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.binary_search_tree",
        "documentation": {}
    },
    {
        "label": "postorder",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.binary_search_tree",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.binary_search_tree",
        "peekOfCode": "def postorder(curr_node):\n    \"\"\"\n    postOrder (left, right, self)\n    \"\"\"\n    node_list = list()\n    if curr_node is not None:\n        node_list = postorder(curr_node.left) + postorder(curr_node.right) + [curr_node]\n    return node_list\ndef binary_search_tree():\n    r\"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.binary_search_tree",
        "documentation": {}
    },
    {
        "label": "binary_search_tree",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.binary_search_tree",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.binary_search_tree",
        "peekOfCode": "def binary_search_tree():\n    r\"\"\"\n    Example\n                  8\n                 / \\\n                3   10\n               / \\    \\\n              1   6    14\n                 / \\   /\n                4   7 13",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.binary_search_tree",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.binary_search_tree_recursive",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.binary_search_tree_recursive",
        "peekOfCode": "class Node:\n    def __init__(self, label: int, parent: Optional[\"Node\"]) -> None:\n        self.label = label\n        self.parent = parent\n        self.left: Optional[Node] = None\n        self.right: Optional[Node] = None\nclass BinarySearchTree:\n    def __init__(self) -> None:\n        self.root: Optional[Node] = None\n    def empty(self) -> None:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.binary_search_tree_recursive",
        "documentation": {}
    },
    {
        "label": "BinarySearchTree",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.binary_search_tree_recursive",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.binary_search_tree_recursive",
        "peekOfCode": "class BinarySearchTree:\n    def __init__(self) -> None:\n        self.root: Optional[Node] = None\n    def empty(self) -> None:\n        \"\"\"\n        Empties the tree\n        >>> t = BinarySearchTree()\n        >>> assert t.root is None\n        >>> t.put(8)\n        >>> assert t.root is not None",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.binary_search_tree_recursive",
        "documentation": {}
    },
    {
        "label": "BinarySearchTreeTest",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.binary_search_tree_recursive",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.binary_search_tree_recursive",
        "peekOfCode": "class BinarySearchTreeTest(unittest.TestCase):\n    @staticmethod\n    def _get_binary_search_tree() -> BinarySearchTree:\n        r\"\"\"\n              8\n             / \\\n            3   10\n           / \\    \\\n          1   6    14\n             / \\   /",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.binary_search_tree_recursive",
        "documentation": {}
    },
    {
        "label": "binary_search_tree_example",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.binary_search_tree_recursive",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.binary_search_tree_recursive",
        "peekOfCode": "def binary_search_tree_example() -> None:\n    r\"\"\"\n    Example\n                  8\n                 / \\\n                3   10\n               / \\    \\\n              1   6    14\n                 / \\   /\n                4   7 13",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.binary_search_tree_recursive",
        "documentation": {}
    },
    {
        "label": "binary_tree_mirror_dict",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.binary_tree_mirror",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.binary_tree_mirror",
        "peekOfCode": "def binary_tree_mirror_dict(binary_tree_mirror_dictionary: dict, root: int):\n    if not root or root not in binary_tree_mirror_dictionary:\n        return\n    left_child, right_child = binary_tree_mirror_dictionary[root][:2]\n    binary_tree_mirror_dictionary[root] = [right_child, left_child]\n    binary_tree_mirror_dict(binary_tree_mirror_dictionary, left_child)\n    binary_tree_mirror_dict(binary_tree_mirror_dictionary, right_child)\ndef binary_tree_mirror(binary_tree: dict, root: int = 1) -> dict:\n    \"\"\"\n    >>> binary_tree_mirror({ 1: [2,3], 2: [4,5], 3: [6,7], 7: [8,9]}, 1)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.binary_tree_mirror",
        "documentation": {}
    },
    {
        "label": "binary_tree_mirror",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.binary_tree_mirror",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.binary_tree_mirror",
        "peekOfCode": "def binary_tree_mirror(binary_tree: dict, root: int = 1) -> dict:\n    \"\"\"\n    >>> binary_tree_mirror({ 1: [2,3], 2: [4,5], 3: [6,7], 7: [8,9]}, 1)\n    {1: [3, 2], 2: [5, 4], 3: [7, 6], 7: [9, 8]}\n    >>> binary_tree_mirror({ 1: [2,3], 2: [4,5], 3: [6,7], 4: [10,11]}, 1)\n    {1: [3, 2], 2: [5, 4], 3: [7, 6], 4: [11, 10]}\n    >>> binary_tree_mirror({ 1: [2,3], 2: [4,5], 3: [6,7], 4: [10,11]}, 5)\n    Traceback (most recent call last):\n    ...\n    ValueError: root 5 is not present in the binary_tree",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.binary_tree_mirror",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.binary_tree_traversals",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.binary_tree_traversals",
        "peekOfCode": "class Node:\n    data: int\n    left: Optional[\"Node\"] = None\n    right: Optional[\"Node\"] = None\ndef make_tree() -> Node:\n    return Node(1, Node(2, Node(4), Node(5)), Node(3))\ndef preorder(root: Node):\n    \"\"\"\n    Pre-order traversal visits root node, left subtree, right subtree.\n    >>> preorder(make_tree())",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.binary_tree_traversals",
        "documentation": {}
    },
    {
        "label": "make_tree",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.binary_tree_traversals",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.binary_tree_traversals",
        "peekOfCode": "def make_tree() -> Node:\n    return Node(1, Node(2, Node(4), Node(5)), Node(3))\ndef preorder(root: Node):\n    \"\"\"\n    Pre-order traversal visits root node, left subtree, right subtree.\n    >>> preorder(make_tree())\n    [1, 2, 4, 5, 3]\n    \"\"\"\n    return [root.data] + preorder(root.left) + preorder(root.right) if root else []\ndef postorder(root: Node):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.binary_tree_traversals",
        "documentation": {}
    },
    {
        "label": "preorder",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.binary_tree_traversals",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.binary_tree_traversals",
        "peekOfCode": "def preorder(root: Node):\n    \"\"\"\n    Pre-order traversal visits root node, left subtree, right subtree.\n    >>> preorder(make_tree())\n    [1, 2, 4, 5, 3]\n    \"\"\"\n    return [root.data] + preorder(root.left) + preorder(root.right) if root else []\ndef postorder(root: Node):\n    \"\"\"\n    Post-order traversal visits left subtree, right subtree, root node.",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.binary_tree_traversals",
        "documentation": {}
    },
    {
        "label": "postorder",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.binary_tree_traversals",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.binary_tree_traversals",
        "peekOfCode": "def postorder(root: Node):\n    \"\"\"\n    Post-order traversal visits left subtree, right subtree, root node.\n    >>> postorder(make_tree())\n    [4, 5, 2, 3, 1]\n    \"\"\"\n    return postorder(root.left) + postorder(root.right) + [root.data] if root else []\ndef inorder(root: Node):\n    \"\"\"\n    In-order traversal visits left subtree, root node, right subtree.",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.binary_tree_traversals",
        "documentation": {}
    },
    {
        "label": "inorder",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.binary_tree_traversals",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.binary_tree_traversals",
        "peekOfCode": "def inorder(root: Node):\n    \"\"\"\n    In-order traversal visits left subtree, root node, right subtree.\n    >>> inorder(make_tree())\n    [4, 2, 5, 1, 3]\n    \"\"\"\n    return inorder(root.left) + [root.data] + inorder(root.right) if root else []\ndef height(root: Node):\n    \"\"\"\n    Recursive function for calculating the height of the binary tree.",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.binary_tree_traversals",
        "documentation": {}
    },
    {
        "label": "height",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.binary_tree_traversals",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.binary_tree_traversals",
        "peekOfCode": "def height(root: Node):\n    \"\"\"\n    Recursive function for calculating the height of the binary tree.\n    >>> height(None)\n    0\n    >>> height(make_tree())\n    3\n    \"\"\"\n    return (max(height(root.left), height(root.right)) + 1) if root else 0\ndef level_order_1(root: Node):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.binary_tree_traversals",
        "documentation": {}
    },
    {
        "label": "level_order_1",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.binary_tree_traversals",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.binary_tree_traversals",
        "peekOfCode": "def level_order_1(root: Node):\n    \"\"\"\n    Print whole binary tree in Level Order Traverse.\n    Level Order traverse: Visit nodes of the tree level-by-level.\n    \"\"\"\n    if not root:\n        return\n    temp = root\n    que = [temp]\n    while len(que) > 0:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.binary_tree_traversals",
        "documentation": {}
    },
    {
        "label": "level_order_2",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.binary_tree_traversals",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.binary_tree_traversals",
        "peekOfCode": "def level_order_2(root: Node, level: int):\n    \"\"\"\n    Level-wise traversal: Print all nodes present at the given level of the binary tree\n    \"\"\"\n    if not root:\n        return root\n    if level == 1:\n        print(root.data, end=\" \")\n    elif level > 1:\n        level_order_2(root.left, level - 1)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.binary_tree_traversals",
        "documentation": {}
    },
    {
        "label": "print_left_to_right",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.binary_tree_traversals",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.binary_tree_traversals",
        "peekOfCode": "def print_left_to_right(root: Node, level: int):\n    \"\"\"\n    Print elements on particular level from left to right direction of the binary tree.\n    \"\"\"\n    if not root:\n        return\n    if level == 1:\n        print(root.data, end=\" \")\n    elif level > 1:\n        print_left_to_right(root.left, level - 1)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.binary_tree_traversals",
        "documentation": {}
    },
    {
        "label": "print_right_to_left",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.binary_tree_traversals",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.binary_tree_traversals",
        "peekOfCode": "def print_right_to_left(root: Node, level: int):\n    \"\"\"\n    Print elements on particular level from right to left direction of the binary tree.\n    \"\"\"\n    if not root:\n        return\n    if level == 1:\n        print(root.data, end=\" \")\n    elif level > 1:\n        print_right_to_left(root.right, level - 1)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.binary_tree_traversals",
        "documentation": {}
    },
    {
        "label": "zigzag",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.binary_tree_traversals",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.binary_tree_traversals",
        "peekOfCode": "def zigzag(root: Node):\n    \"\"\"\n    ZigZag traverse: Print node left to right and right to left, alternatively.\n    \"\"\"\n    flag = 0\n    height_tree = height(root)\n    for h in range(1, height_tree + 1):\n        if flag == 0:\n            print_left_to_right(root, h)\n            flag = 1",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.binary_tree_traversals",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.binary_tree_traversals",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.binary_tree_traversals",
        "peekOfCode": "def main():  # Main function for testing.\n    \"\"\"\n    Create binary tree.\n    \"\"\"\n    root = make_tree()\n    \"\"\"\n    All Traversals of the binary are as follows:\n    \"\"\"\n    print(f\"  In-order Traversal is {inorder(root)}\")\n    print(f\" Pre-order Traversal is {preorder(root)}\")",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.binary_tree_traversals",
        "documentation": {}
    },
    {
        "label": "FenwickTree",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.fenwick_tree",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.fenwick_tree",
        "peekOfCode": "class FenwickTree:\n    def __init__(self, SIZE):  # create fenwick tree with size SIZE\n        self.Size = SIZE\n        self.ft = [0 for i in range(0, SIZE)]\n    def update(self, i, val):  # update data (adding) in index i in O(lg N)\n        while i < self.Size:\n            self.ft[i] += val\n            i += i & (-i)\n    def query(self, i):  # query cumulative data from index 0 to i in O(lg N)\n        ret = 0",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.fenwick_tree",
        "documentation": {}
    },
    {
        "label": "SegmentTree",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.lazy_segment_tree",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.lazy_segment_tree",
        "peekOfCode": "class SegmentTree:\n    def __init__(self, size: int) -> None:\n        self.size = size\n        # approximate the overall size of segment tree with given value\n        self.segment_tree = [0 for i in range(0, 4 * size)]\n        # create array to store lazy update\n        self.lazy = [0 for i in range(0, 4 * size)]\n        self.flag = [0 for i in range(0, 4 * size)]  # flag for lazy update\n    def left(self, idx: int) -> int:\n        \"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.lazy_segment_tree",
        "documentation": {}
    },
    {
        "label": "swap",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.lowest_common_ancestor",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.lowest_common_ancestor",
        "peekOfCode": "def swap(a: int, b: int) -> tuple[int, int]:\n    \"\"\"\n    Return a tuple (b, a) when given two integers a and b\n    >>> swap(2,3)\n    (3, 2)\n    >>> swap(3,4)\n    (4, 3)\n    >>> swap(67, 12)\n    (12, 67)\n    \"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.lowest_common_ancestor",
        "documentation": {}
    },
    {
        "label": "create_sparse",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.lowest_common_ancestor",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.lowest_common_ancestor",
        "peekOfCode": "def create_sparse(max_node: int, parent: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    creating sparse table which saves each nodes 2^i-th parent\n    \"\"\"\n    j = 1\n    while (1 << j) < max_node:\n        for i in range(1, max_node + 1):\n            parent[j][i] = parent[j - 1][parent[j - 1][i]]\n        j += 1\n    return parent",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.lowest_common_ancestor",
        "documentation": {}
    },
    {
        "label": "lowest_common_ancestor",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.lowest_common_ancestor",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.lowest_common_ancestor",
        "peekOfCode": "def lowest_common_ancestor(\n    u: int, v: int, level: list[int], parent: list[list[int]]\n) -> list[list[int]]:\n    # u must be deeper in the tree than v\n    if level[u] < level[v]:\n        u, v = swap(u, v)\n    # making depth of u same as depth of v\n    for i in range(18, -1, -1):\n        if level[u] - (1 << i) >= level[v]:\n            u = parent[i][u]",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.lowest_common_ancestor",
        "documentation": {}
    },
    {
        "label": "breadth_first_search",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.lowest_common_ancestor",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.lowest_common_ancestor",
        "peekOfCode": "def breadth_first_search(\n    level: list[int],\n    parent: list[list[int]],\n    max_node: int,\n    graph: dict[int, int],\n    root=1,\n) -> tuple[list[int], list[list[int]]]:\n    \"\"\"\n    sets every nodes direct parent\n    parent of root node is set to 0",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.lowest_common_ancestor",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.lowest_common_ancestor",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.lowest_common_ancestor",
        "peekOfCode": "def main() -> None:\n    max_node = 13\n    # initializing with 0\n    parent = [[0 for _ in range(max_node + 10)] for _ in range(20)]\n    # initializing with -1 which means every node is unvisited\n    level = [-1 for _ in range(max_node + 10)]\n    graph = {\n        1: [2, 3, 4],\n        2: [5],\n        3: [6, 7],",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.lowest_common_ancestor",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.merge_two_binary_trees",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.merge_two_binary_trees",
        "peekOfCode": "class Node:\n    \"\"\"\n    A binary node has value variable and pointers to its left and right node.\n    \"\"\"\n    def __init__(self, value: int = 0) -> None:\n        self.value = value\n        self.left: Optional[Node] = None\n        self.right: Optional[Node] = None\ndef merge_two_binary_trees(tree1: Optional[Node], tree2: Optional[Node]) -> Node:\n    \"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.merge_two_binary_trees",
        "documentation": {}
    },
    {
        "label": "merge_two_binary_trees",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.merge_two_binary_trees",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.merge_two_binary_trees",
        "peekOfCode": "def merge_two_binary_trees(tree1: Optional[Node], tree2: Optional[Node]) -> Node:\n    \"\"\"\n    Returns root node of the merged tree.\n    >>> tree1 = Node(5)\n    >>> tree1.left = Node(6)\n    >>> tree1.right = Node(7)\n    >>> tree1.left.left = Node(2)\n    >>> tree2 = Node(4)\n    >>> tree2.left = Node(5)\n    >>> tree2.right = Node(8)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.merge_two_binary_trees",
        "documentation": {}
    },
    {
        "label": "print_preorder",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.merge_two_binary_trees",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.merge_two_binary_trees",
        "peekOfCode": "def print_preorder(root: Optional[Node]) -> None:\n    \"\"\"\n    Print pre-order traversal of the tree.\n    >>> root = Node(1)\n    >>> root.left = Node(2)\n    >>> root.right = Node(3)\n    >>> print_preorder(root)\n    1\n    2\n    3",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.merge_two_binary_trees",
        "documentation": {}
    },
    {
        "label": "SegmentTree",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.non_recursive_segment_tree",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.non_recursive_segment_tree",
        "peekOfCode": "class SegmentTree:\n    def __init__(self, arr: list[T], fnc: Callable[[T, T], T]) -> None:\n        \"\"\"\n        Segment Tree constructor, it works just with commutative combiner.\n        :param arr: list of elements for the segment tree\n        :param fnc: commutative function for combine two elements\n        >>> SegmentTree(['a', 'b', 'c'], lambda a, b: f'{a}{b}').query(0, 2)\n        'abc'\n        >>> SegmentTree([(1, 2), (2, 3), (3, 4)],\n        ...             lambda a, b: (a[0] + b[0], a[1] + b[1])).query(0, 2)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.non_recursive_segment_tree",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.non_recursive_segment_tree",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.non_recursive_segment_tree",
        "peekOfCode": "T = TypeVar(\"T\")\nclass SegmentTree:\n    def __init__(self, arr: list[T], fnc: Callable[[T, T], T]) -> None:\n        \"\"\"\n        Segment Tree constructor, it works just with commutative combiner.\n        :param arr: list of elements for the segment tree\n        :param fnc: commutative function for combine two elements\n        >>> SegmentTree(['a', 'b', 'c'], lambda a, b: f'{a}{b}').query(0, 2)\n        'abc'\n        >>> SegmentTree([(1, 2), (2, 3), (3, 4)],",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.non_recursive_segment_tree",
        "documentation": {}
    },
    {
        "label": "binomial_coefficient",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.number_of_possible_binary_trees",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.number_of_possible_binary_trees",
        "peekOfCode": "def binomial_coefficient(n: int, k: int) -> int:\n    \"\"\"\n    Since Here we Find the Binomial Coefficient:\n    https://en.wikipedia.org/wiki/Binomial_coefficient\n    C(n,k) = n! / k!(n-k)!\n    :param n: 2 times of Number of nodes\n    :param k: Number of nodes\n    :return:  Integer Value\n    >>> binomial_coefficient(4, 2)\n    6",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.number_of_possible_binary_trees",
        "documentation": {}
    },
    {
        "label": "catalan_number",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.number_of_possible_binary_trees",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.number_of_possible_binary_trees",
        "peekOfCode": "def catalan_number(node_count: int) -> int:\n    \"\"\"\n    We can find Catalan number many ways but here we use Binomial Coefficient because it\n    does the job in O(n)\n    return the Catalan number of n using 2nCn/(n+1).\n    :param n: number of nodes\n    :return: Catalan number of n nodes\n    >>> catalan_number(5)\n    42\n    >>> catalan_number(6)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.number_of_possible_binary_trees",
        "documentation": {}
    },
    {
        "label": "factorial",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.number_of_possible_binary_trees",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.number_of_possible_binary_trees",
        "peekOfCode": "def factorial(n: int) -> int:\n    \"\"\"\n    Return the factorial of a number.\n    :param n: Number to find the Factorial of.\n    :return: Factorial of n.\n    >>> import math\n    >>> all(factorial(i) == math.factorial(i) for i in range(10))\n    True\n    >>> factorial(-5)  # doctest: +ELLIPSIS\n    Traceback (most recent call last):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.number_of_possible_binary_trees",
        "documentation": {}
    },
    {
        "label": "binary_tree_count",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.number_of_possible_binary_trees",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.number_of_possible_binary_trees",
        "peekOfCode": "def binary_tree_count(node_count: int) -> int:\n    \"\"\"\n    Return the number of possible of binary trees.\n    :param n: number of nodes\n    :return: Number of possible binary trees\n    >>> binary_tree_count(5)\n    5040\n    >>> binary_tree_count(6)\n    95040\n    \"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.number_of_possible_binary_trees",
        "documentation": {}
    },
    {
        "label": "RedBlackTree",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.red_black_tree",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.red_black_tree",
        "peekOfCode": "class RedBlackTree:\n    \"\"\"\n    A Red-Black tree, which is a self-balancing BST (binary search\n    tree).\n    This tree has similar performance to AVL trees, but the balancing is\n    less strict, so it will perform faster for writing/deleting nodes\n    and slower for reading in the average case, though, because they're\n    both balanced binary search trees, both will get the same asymptotic\n    performance.\n    To read more about them, https://en.wikipedia.org/wiki/Red–black_tree",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.red_black_tree",
        "documentation": {}
    },
    {
        "label": "color",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.red_black_tree",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.red_black_tree",
        "peekOfCode": "def color(node) -> int:\n    \"\"\"Returns the color of a node, allowing for None leaves.\"\"\"\n    if node is None:\n        return 0\n    else:\n        return node.color\n\"\"\"\nCode for testing the various\nfunctions of the red-black tree.\n\"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.red_black_tree",
        "documentation": {}
    },
    {
        "label": "test_rotations",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.red_black_tree",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.red_black_tree",
        "peekOfCode": "def test_rotations() -> bool:\n    \"\"\"Test that the rotate_left and rotate_right functions work.\"\"\"\n    # Make a tree to test on\n    tree = RedBlackTree(0)\n    tree.left = RedBlackTree(-10, parent=tree)\n    tree.right = RedBlackTree(10, parent=tree)\n    tree.left.left = RedBlackTree(-20, parent=tree.left)\n    tree.left.right = RedBlackTree(-5, parent=tree.left)\n    tree.right.left = RedBlackTree(5, parent=tree.right)\n    tree.right.right = RedBlackTree(20, parent=tree.right)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.red_black_tree",
        "documentation": {}
    },
    {
        "label": "test_insertion_speed",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.red_black_tree",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.red_black_tree",
        "peekOfCode": "def test_insertion_speed() -> bool:\n    \"\"\"Test that the tree balances inserts to O(log(n)) by doing a lot\n    of them.\n    \"\"\"\n    tree = RedBlackTree(-1)\n    for i in range(300000):\n        tree = tree.insert(i)\n    return True\ndef test_insert() -> bool:\n    \"\"\"Test the insert() method of the tree correctly balances, colors,",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.red_black_tree",
        "documentation": {}
    },
    {
        "label": "test_insert",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.red_black_tree",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.red_black_tree",
        "peekOfCode": "def test_insert() -> bool:\n    \"\"\"Test the insert() method of the tree correctly balances, colors,\n    and inserts.\n    \"\"\"\n    tree = RedBlackTree(0)\n    tree.insert(8)\n    tree.insert(-8)\n    tree.insert(4)\n    tree.insert(12)\n    tree.insert(10)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.red_black_tree",
        "documentation": {}
    },
    {
        "label": "test_insert_and_search",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.red_black_tree",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.red_black_tree",
        "peekOfCode": "def test_insert_and_search() -> bool:\n    \"\"\"Tests searching through the tree for values.\"\"\"\n    tree = RedBlackTree(0)\n    tree.insert(8)\n    tree.insert(-8)\n    tree.insert(4)\n    tree.insert(12)\n    tree.insert(10)\n    tree.insert(11)\n    if 5 in tree or -6 in tree or -10 in tree or 13 in tree:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.red_black_tree",
        "documentation": {}
    },
    {
        "label": "test_insert_delete",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.red_black_tree",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.red_black_tree",
        "peekOfCode": "def test_insert_delete() -> bool:\n    \"\"\"Test the insert() and delete() method of the tree, verifying the\n    insertion and removal of elements, and the balancing of the tree.\n    \"\"\"\n    tree = RedBlackTree(0)\n    tree = tree.insert(-12)\n    tree = tree.insert(8)\n    tree = tree.insert(-8)\n    tree = tree.insert(15)\n    tree = tree.insert(4)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.red_black_tree",
        "documentation": {}
    },
    {
        "label": "test_floor_ceil",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.red_black_tree",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.red_black_tree",
        "peekOfCode": "def test_floor_ceil() -> bool:\n    \"\"\"Tests the floor and ceiling functions in the tree.\"\"\"\n    tree = RedBlackTree(0)\n    tree.insert(-16)\n    tree.insert(16)\n    tree.insert(8)\n    tree.insert(24)\n    tree.insert(20)\n    tree.insert(22)\n    tuples = [(-20, None, -16), (-10, -16, 0), (8, 8, 8), (50, 24, None)]",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.red_black_tree",
        "documentation": {}
    },
    {
        "label": "test_min_max",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.red_black_tree",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.red_black_tree",
        "peekOfCode": "def test_min_max() -> bool:\n    \"\"\"Tests the min and max functions in the tree.\"\"\"\n    tree = RedBlackTree(0)\n    tree.insert(-16)\n    tree.insert(16)\n    tree.insert(8)\n    tree.insert(24)\n    tree.insert(20)\n    tree.insert(22)\n    if tree.get_max() != 22 or tree.get_min() != -16:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.red_black_tree",
        "documentation": {}
    },
    {
        "label": "test_tree_traversal",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.red_black_tree",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.red_black_tree",
        "peekOfCode": "def test_tree_traversal() -> bool:\n    \"\"\"Tests the three different tree traversal functions.\"\"\"\n    tree = RedBlackTree(0)\n    tree = tree.insert(-16)\n    tree.insert(16)\n    tree.insert(8)\n    tree.insert(24)\n    tree.insert(20)\n    tree.insert(22)\n    if list(tree.inorder_traverse()) != [-16, 0, 8, 16, 20, 22, 24]:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.red_black_tree",
        "documentation": {}
    },
    {
        "label": "test_tree_chaining",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.red_black_tree",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.red_black_tree",
        "peekOfCode": "def test_tree_chaining() -> bool:\n    \"\"\"Tests the three different tree chaining functions.\"\"\"\n    tree = RedBlackTree(0)\n    tree = tree.insert(-16).insert(16).insert(8).insert(24).insert(20).insert(22)\n    if list(tree.inorder_traverse()) != [-16, 0, 8, 16, 20, 22, 24]:\n        return False\n    if list(tree.preorder_traverse()) != [0, -16, 16, 8, 22, 20, 24]:\n        return False\n    if list(tree.postorder_traverse()) != [-16, 8, 20, 24, 22, 16, 0]:\n        return False",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.red_black_tree",
        "documentation": {}
    },
    {
        "label": "print_results",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.red_black_tree",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.red_black_tree",
        "peekOfCode": "def print_results(msg: str, passes: bool) -> None:\n    print(str(msg), \"works!\" if passes else \"doesn't work :(\")\ndef pytests() -> None:\n    assert test_rotations()\n    assert test_insert()\n    assert test_insert_and_search()\n    assert test_insert_delete()\n    assert test_floor_ceil()\n    assert test_tree_traversal()\n    assert test_tree_chaining()",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.red_black_tree",
        "documentation": {}
    },
    {
        "label": "pytests",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.red_black_tree",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.red_black_tree",
        "peekOfCode": "def pytests() -> None:\n    assert test_rotations()\n    assert test_insert()\n    assert test_insert_and_search()\n    assert test_insert_delete()\n    assert test_floor_ceil()\n    assert test_tree_traversal()\n    assert test_tree_chaining()\ndef main() -> None:\n    \"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.red_black_tree",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.red_black_tree",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.red_black_tree",
        "peekOfCode": "def main() -> None:\n    \"\"\"\n    >>> pytests()\n    \"\"\"\n    print_results(\"Rotating right and left\", test_rotations())\n    print_results(\"Inserting\", test_insert())\n    print_results(\"Searching\", test_insert_and_search())\n    print_results(\"Deleting\", test_insert_delete())\n    print_results(\"Floor and ceil\", test_floor_ceil())\n    print_results(\"Tree traversal\", test_tree_traversal())",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.red_black_tree",
        "documentation": {}
    },
    {
        "label": "SegmentTree",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.segment_tree",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.segment_tree",
        "peekOfCode": "class SegmentTree:\n    def __init__(self, A):\n        self.N = len(A)\n        self.st = [0] * (\n            4 * self.N\n        )  # approximate the overall size of segment tree with array N\n        self.build(1, 0, self.N - 1)\n    def left(self, idx):\n        return idx * 2\n    def right(self, idx):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.segment_tree",
        "documentation": {}
    },
    {
        "label": "SegmentTreeNode",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.segment_tree_other",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.segment_tree_other",
        "peekOfCode": "class SegmentTreeNode:\n    def __init__(self, start, end, val, left=None, right=None):\n        self.start = start\n        self.end = end\n        self.val = val\n        self.mid = (start + end) // 2\n        self.left = left\n        self.right = right\n    def __str__(self):\n        return f\"val: {self.val}, start: {self.start}, end: {self.end}\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.segment_tree_other",
        "documentation": {}
    },
    {
        "label": "SegmentTree",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.segment_tree_other",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.segment_tree_other",
        "peekOfCode": "class SegmentTree:\n    \"\"\"\n    >>> import operator\n    >>> num_arr = SegmentTree([2, 1, 5, 3, 4], operator.add)\n    >>> for node in num_arr.traverse():\n    ...     print(node)\n    ...\n    val: 15, start: 0, end: 4\n    val: 8, start: 0, end: 2\n    val: 7, start: 3, end: 4",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.segment_tree_other",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.treap",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.treap",
        "peekOfCode": "class Node:\n    \"\"\"\n    Treap's node\n    Treap is a binary tree by value and heap by priority\n    \"\"\"\n    def __init__(self, value: Optional[int] = None):\n        self.value = value\n        self.prior = random()\n        self.left: Optional[Node] = None\n        self.right: Optional[Node] = None",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.treap",
        "documentation": {}
    },
    {
        "label": "split",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.treap",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.treap",
        "peekOfCode": "def split(root: Optional[Node], value: int) -> Tuple[Optional[Node], Optional[Node]]:\n    \"\"\"\n    We split current tree into 2 trees with value:\n    Left tree contains all values less than split value.\n    Right tree contains all values greater or equal, than split value\n    \"\"\"\n    if root is None:  # None tree is split into 2 Nones\n        return None, None\n    elif root.value is None:\n        return None, None",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.treap",
        "documentation": {}
    },
    {
        "label": "merge",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.treap",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.treap",
        "peekOfCode": "def merge(left: Optional[Node], right: Optional[Node]) -> Optional[Node]:\n    \"\"\"\n    We merge 2 trees into one.\n    Note: all left tree's values must be less than all right tree's\n    \"\"\"\n    if (not left) or (not right):  # If one node is None, return the other\n        return left or right\n    elif left.prior < right.prior:\n        \"\"\"\n        Left will be root because it has more priority",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.treap",
        "documentation": {}
    },
    {
        "label": "insert",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.treap",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.treap",
        "peekOfCode": "def insert(root: Optional[Node], value: int) -> Optional[Node]:\n    \"\"\"\n    Insert element\n    Split current tree with a value into left, right,\n    Insert new node into the middle\n    Merge left, node, right into root\n    \"\"\"\n    node = Node(value)\n    left, right = split(root, value)\n    return merge(merge(left, node), right)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.treap",
        "documentation": {}
    },
    {
        "label": "erase",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.treap",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.treap",
        "peekOfCode": "def erase(root: Optional[Node], value: int) -> Optional[Node]:\n    \"\"\"\n    Erase element\n    Split all nodes with values less into left,\n    Split all nodes with values greater into right.\n    Merge left, right\n    \"\"\"\n    left, right = split(root, value - 1)\n    _, right = split(right, value)\n    return merge(left, right)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.treap",
        "documentation": {}
    },
    {
        "label": "inorder",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.treap",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.treap",
        "peekOfCode": "def inorder(root: Optional[Node]) -> None:\n    \"\"\"\n    Just recursive print of a tree\n    \"\"\"\n    if not root:  # None\n        return\n    else:\n        inorder(root.left)\n        print(root.value, end=\",\")\n        inorder(root.right)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.treap",
        "documentation": {}
    },
    {
        "label": "interactTreap",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.treap",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.treap",
        "peekOfCode": "def interactTreap(root: Optional[Node], args: str) -> Optional[Node]:\n    \"\"\"\n    Commands:\n    + value to add value into treap\n    - value to erase all nodes with value\n        >>> root = interactTreap(None, \"+1\")\n        >>> inorder(root)\n        1,\n        >>> root = interactTreap(root, \"+3 +5 +17 +19 +2 +16 +4 +0\")\n        >>> inorder(root)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.treap",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.treap",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.treap",
        "peekOfCode": "def main() -> None:\n    \"\"\"After each command, program prints treap\"\"\"\n    root = None\n    print(\n        \"enter numbers to create a tree, + value to add value into treap, \"\n        \"- value to erase all nodes with value. 'q' to quit. \"\n    )\n    args = input()\n    while args != \"q\":\n        root = interactTreap(root, args)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.treap",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.wavelet_tree",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.wavelet_tree",
        "peekOfCode": "class Node:\n    def __init__(self, length: int) -> None:\n        self.minn: int = -1\n        self.maxx: int = -1\n        self.map_left: list[int] = [-1] * length\n        self.left: Optional[Node] = None\n        self.right: Optional[Node] = None\n    def __repr__(self) -> str:\n        \"\"\"\n        >>> node = Node(length=27)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.wavelet_tree",
        "documentation": {}
    },
    {
        "label": "build_tree",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.wavelet_tree",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.wavelet_tree",
        "peekOfCode": "def build_tree(arr: list[int]) -> Node:\n    \"\"\"\n    Builds the tree for arr and returns the root\n    of the constructed tree\n    >>> build_tree(test_array)\n    min_value: 0, max_value: 9\n    \"\"\"\n    root = Node(len(arr))\n    root.minn, root.maxx = min(arr), max(arr)\n    # Leaf node case where the node contains only one unique value",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.wavelet_tree",
        "documentation": {}
    },
    {
        "label": "rank_till_index",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.wavelet_tree",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.wavelet_tree",
        "peekOfCode": "def rank_till_index(node: Node, num: int, index: int) -> int:\n    \"\"\"\n    Returns the number of occurrences of num in interval [0, index] in the list\n    >>> root = build_tree(test_array)\n    >>> rank_till_index(root, 6, 6)\n    1\n    >>> rank_till_index(root, 2, 0)\n    1\n    >>> rank_till_index(root, 1, 10)\n    2",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.wavelet_tree",
        "documentation": {}
    },
    {
        "label": "rank",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.wavelet_tree",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.wavelet_tree",
        "peekOfCode": "def rank(node: Node, num: int, start: int, end: int) -> int:\n    \"\"\"\n    Returns the number of occurrences of num in interval [start, end] in the list\n    >>> root = build_tree(test_array)\n    >>> rank(root, 6, 3, 13)\n    2\n    >>> rank(root, 2, 0, 19)\n    4\n    >>> rank(root, 9, 2 ,2)\n    0",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.wavelet_tree",
        "documentation": {}
    },
    {
        "label": "quantile",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.wavelet_tree",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.wavelet_tree",
        "peekOfCode": "def quantile(node: Node, index: int, start: int, end: int) -> int:\n    \"\"\"\n    Returns the index'th smallest element in interval [start, end] in the list\n    index is 0-indexed\n    >>> root = build_tree(test_array)\n    >>> quantile(root, 2, 2, 5)\n    5\n    >>> quantile(root, 5, 2, 13)\n    4\n    >>> quantile(root, 0, 6, 6)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.wavelet_tree",
        "documentation": {}
    },
    {
        "label": "range_counting",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.wavelet_tree",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.wavelet_tree",
        "peekOfCode": "def range_counting(\n    node: Node, start: int, end: int, start_num: int, end_num: int\n) -> int:\n    \"\"\"\n    Returns the number of elememts in range [start_num, end_num]\n    in interval [start, end] in the list\n    >>> root = build_tree(test_array)\n    >>> range_counting(root, 1, 10, 3, 7)\n    3\n    >>> range_counting(root, 2, 2, 1, 4)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.wavelet_tree",
        "documentation": {}
    },
    {
        "label": "test_array",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.wavelet_tree",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.wavelet_tree",
        "peekOfCode": "test_array = [2, 1, 4, 5, 6, 0, 8, 9, 1, 2, 0, 6, 4, 2, 0, 6, 5, 3, 2, 7]\nclass Node:\n    def __init__(self, length: int) -> None:\n        self.minn: int = -1\n        self.maxx: int = -1\n        self.map_left: list[int] = [-1] * length\n        self.left: Optional[Node] = None\n        self.right: Optional[Node] = None\n    def __repr__(self) -> str:\n        \"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.binary_tree.wavelet_tree",
        "documentation": {}
    },
    {
        "label": "solve",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.CodeChef.DSA Learning Series.Contest 1.Carvans",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.CodeChef.DSA Learning Series.Contest 1.Carvans",
        "peekOfCode": "def solve():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        A = list(map(int,input().split()))\n        count = 0\n        small = float(\"inf\")\n        for each in A:\n            if each < small:\n                small = each",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.CodeChef.DSA Learning Series.Contest 1.Carvans",
        "documentation": {}
    },
    {
        "label": "coinFlip",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.CodeChef.DSA Learning Series.Contest 1.Coin-Flip",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.CodeChef.DSA Learning Series.Contest 1.Coin-Flip",
        "peekOfCode": "def coinFlip(I, N, Q):\n    if N % 2 == 0:\n        return N // 2\n    else:\n        if I == 1:\n            if Q == 1:\n                return N // 2\n            else:\n                return (N // 2) + 1\n        else:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.CodeChef.DSA Learning Series.Contest 1.Coin-Flip",
        "documentation": {}
    },
    {
        "label": "trailingZeros",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.CodeChef.DSA Learning Series.Contest 1.Factorial",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.CodeChef.DSA Learning Series.Contest 1.Factorial",
        "peekOfCode": "def trailingZeros(N):\n    mul = 5\n    zeros = 0\n    while True:\n        zeros += (N // mul)\n        if mul > N:\n            break\n        mul = mul * 5\n    return zeros\nfor _ in range(int(stdin.readline())):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.CodeChef.DSA Learning Series.Contest 1.Factorial",
        "documentation": {}
    },
    {
        "label": "laddus",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.CodeChef.DSA Learning Series.Contest 1.Laddu",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.CodeChef.DSA Learning Series.Contest 1.Laddu",
        "peekOfCode": "def laddus(n, origin, activities):\n    score = 0\n    for i in range(n):\n        if \"TOP_CONTRIBUTOR\" in activities[i]:\n            score += 300\n        elif \"CONTEST_HOSTED\" in activities[i]:\n            score += 50\n        elif \"CONTEST_WON\" in activities[i]:\n            rank = int(activities[i].split()[1])\n            if rank > 20:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.CodeChef.DSA Learning Series.Contest 1.Laddu",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.CodeChef.DSA Learning Series.Contest 1.Lapindromes",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.CodeChef.DSA Learning Series.Contest 1.Lapindromes",
        "peekOfCode": "T = int(input())\nwhile T:\n    s = input()\n    n = len(s)\n    if n % 2 == 0:\n        print(\"YES\") if Counter(s[0 : n//2]) == Counter(s[(n//2) : n]) else print(\"NO\")\n    else:\n        print(\"YES\") if Counter(s[0 : n//2]) == Counter(s[(n//2)+1 : n]) else print(\"NO\")        \n    T -= 1",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.CodeChef.DSA Learning Series.Contest 1.Lapindromes",
        "documentation": {}
    },
    {
        "label": "multiple",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.CodeChef.DSA Learning Series.Contest 1.Multiple-of-Three",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.CodeChef.DSA Learning Series.Contest 1.Multiple-of-Three",
        "peekOfCode": "def multiple(K, d0, d1):\n    mul = d0 + d1\n    fac = (K-3) // 4\n    repeat = ((2 * mul) % 10) + ((4 * mul) % 10) +  ((8 * mul) % 10) + ((6 * mul) % 10)\n    sd = mul + (mul % 10) + (repeat * fac)\n    if (K - 3) % 4 == 1:\n        x = ((2 * mul) % 10)\n    elif (K - 3) % 4 == 2:\n        x = ((2 * mul) % 10) + ((4 * mul) % 10)\n    elif (K - 3) % 4 == 3:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.CodeChef.DSA Learning Series.Contest 1.Multiple-of-Three",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.CodeChef.DSA Learning Series.Contest 1.Reverse-the-Number",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.CodeChef.DSA Learning Series.Contest 1.Reverse-the-Number",
        "peekOfCode": "t = int(input())\nwhile t:\n    print(int(input()[::-1]))\n    t -= 1",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.CodeChef.DSA Learning Series.Contest 1.Reverse-the-Number",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.CodeChef.DSA Learning Series.Contest 1.Smart-Phone",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.CodeChef.DSA Learning Series.Contest 1.Smart-Phone",
        "peekOfCode": "n = int(input())\nprices = []\nfor i in range(n):\n    prices.append(int(input()))\nprices.sort()\nmx = -1\nfor i in range(n):\n    profit = prices[i] * (len(prices) - i)\n    if profit > mx:\n        mx = profit",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.CodeChef.DSA Learning Series.Contest 1.Smart-Phone",
        "documentation": {}
    },
    {
        "label": "prices",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.CodeChef.DSA Learning Series.Contest 1.Smart-Phone",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.CodeChef.DSA Learning Series.Contest 1.Smart-Phone",
        "peekOfCode": "prices = []\nfor i in range(n):\n    prices.append(int(input()))\nprices.sort()\nmx = -1\nfor i in range(n):\n    profit = prices[i] * (len(prices) - i)\n    if profit > mx:\n        mx = profit\nprint(mx)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.CodeChef.DSA Learning Series.Contest 1.Smart-Phone",
        "documentation": {}
    },
    {
        "label": "mx",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.CodeChef.DSA Learning Series.Contest 1.Smart-Phone",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.CodeChef.DSA Learning Series.Contest 1.Smart-Phone",
        "peekOfCode": "mx = -1\nfor i in range(n):\n    profit = prices[i] * (len(prices) - i)\n    if profit > mx:\n        mx = profit\nprint(mx)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.CodeChef.DSA Learning Series.Contest 1.Smart-Phone",
        "documentation": {}
    },
    {
        "label": "power",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.CodeChef.October Long Challenge.Positive-AND",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.CodeChef.October Long Challenge.Positive-AND",
        "peekOfCode": "def power(n):\n    return n != 0 and ((n & (n-1)) == 0) \ndef main():\n    for i in range(int(input())):\n        n = int(input())\n        if n == 1:\n            print(1)\n            continue\n        elif n == 3:\n            print(\"1 3 2\")",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.CodeChef.October Long Challenge.Positive-AND",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.CodeChef.October Long Challenge.Positive-AND",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.CodeChef.October Long Challenge.Positive-AND",
        "peekOfCode": "def main():\n    for i in range(int(input())):\n        n = int(input())\n        if n == 1:\n            print(1)\n            continue\n        elif n == 3:\n            print(\"1 3 2\")\n            continue\n        elif n == 5:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.CodeChef.October Long Challenge.Positive-AND",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.DataStructures.Binary Tree.binaryTree",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.DataStructures.Binary Tree.binaryTree",
        "peekOfCode": "class Node:\n    def __init__(self, data):\n        self.left = None\n        self.right = None\n        self.data = data\n    def insert(self, data):\n        # Checks if node exists\n        if self.data:\n            if data <",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.DataStructures.Binary Tree.binaryTree",
        "documentation": {}
    },
    {
        "label": "bfs",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.DataStructures.Graph.bfs",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.DataStructures.Graph.bfs",
        "peekOfCode": "def bfs(g,N):\n    queue = []\n    visited = [False] * (N)\n    bfs = []\n    queue.append(0)\n    visited[0] = True\n    while queue:\n        cur = queue.pop(0)\n        bfs.append(cur)\n        for neighbour in g[cur]:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.DataStructures.Graph.bfs",
        "documentation": {}
    },
    {
        "label": "initializeStack",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.DataStructures.Stack.Python.arrayStack",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.DataStructures.Stack.Python.arrayStack",
        "peekOfCode": "def initializeStack():\n    stack = []\n    return stack\ndef isEmpty(stack):\n    if len(stack)==0:\n        return True\n    else:\n        return False\ndef pop(stack):\n    if(isEmpty(stack)):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.DataStructures.Stack.Python.arrayStack",
        "documentation": {}
    },
    {
        "label": "isEmpty",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.DataStructures.Stack.Python.arrayStack",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.DataStructures.Stack.Python.arrayStack",
        "peekOfCode": "def isEmpty(stack):\n    if len(stack)==0:\n        return True\n    else:\n        return False\ndef pop(stack):\n    if(isEmpty(stack)):\n        return str(-maxsize -1)\n    return stack.pop()\ndef push(item, stack):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.DataStructures.Stack.Python.arrayStack",
        "documentation": {}
    },
    {
        "label": "pop",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.DataStructures.Stack.Python.arrayStack",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.DataStructures.Stack.Python.arrayStack",
        "peekOfCode": "def pop(stack):\n    if(isEmpty(stack)):\n        return str(-maxsize -1)\n    return stack.pop()\ndef push(item, stack):\n    stack.append(item)\n    print(str(item) + \" pushed into stack\")\ndef peek(stack):\n    if (isEmpty(stack)):\n        return str(-maxsize -1)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.DataStructures.Stack.Python.arrayStack",
        "documentation": {}
    },
    {
        "label": "push",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.DataStructures.Stack.Python.arrayStack",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.DataStructures.Stack.Python.arrayStack",
        "peekOfCode": "def push(item, stack):\n    stack.append(item)\n    print(str(item) + \" pushed into stack\")\ndef peek(stack):\n    if (isEmpty(stack)):\n        return str(-maxsize -1)\n    return stack[len(stack)-1]\n# Driver code to test the functions\nstack = initializeStack()\npush(3, stack)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.DataStructures.Stack.Python.arrayStack",
        "documentation": {}
    },
    {
        "label": "peek",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.DataStructures.Stack.Python.arrayStack",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.DataStructures.Stack.Python.arrayStack",
        "peekOfCode": "def peek(stack):\n    if (isEmpty(stack)):\n        return str(-maxsize -1)\n    return stack[len(stack)-1]\n# Driver code to test the functions\nstack = initializeStack()\npush(3, stack)\npush(4, stack)\npush(5, stack)\nprint(peek(stack))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.DataStructures.Stack.Python.arrayStack",
        "documentation": {}
    },
    {
        "label": "stack",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.DataStructures.Stack.Python.arrayStack",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.DataStructures.Stack.Python.arrayStack",
        "peekOfCode": "stack = initializeStack()\npush(3, stack)\npush(4, stack)\npush(5, stack)\nprint(peek(stack))\nprint(pop(stack))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.DataStructures.Stack.Python.arrayStack",
        "documentation": {}
    },
    {
        "label": "DisjointSet",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.disjoint_set.alternate_disjoint_set",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.disjoint_set.alternate_disjoint_set",
        "peekOfCode": "class DisjointSet:\n    def __init__(self, set_counts: list) -> None:\n        \"\"\"\n        Initialize with a list of the number of items in each set\n        and with rank = 1 for each set\n        \"\"\"\n        self.set_counts = set_counts\n        self.max_set = max(set_counts)\n        num_sets = len(set_counts)\n        self.ranks = [1] * num_sets",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.disjoint_set.alternate_disjoint_set",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.disjoint_set.disjoint_set",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.disjoint_set.disjoint_set",
        "peekOfCode": "class Node:\n    def __init__(self, data):\n        self.data = data\ndef make_set(x):\n    \"\"\"\n    make x as a set.\n    \"\"\"\n    # rank is the distance from x to its' parent\n    # root's rank is 0\n    x.rank = 0",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.disjoint_set.disjoint_set",
        "documentation": {}
    },
    {
        "label": "make_set",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.disjoint_set.disjoint_set",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.disjoint_set.disjoint_set",
        "peekOfCode": "def make_set(x):\n    \"\"\"\n    make x as a set.\n    \"\"\"\n    # rank is the distance from x to its' parent\n    # root's rank is 0\n    x.rank = 0\n    x.parent = x\ndef union_set(x, y):\n    \"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.disjoint_set.disjoint_set",
        "documentation": {}
    },
    {
        "label": "union_set",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.disjoint_set.disjoint_set",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.disjoint_set.disjoint_set",
        "peekOfCode": "def union_set(x, y):\n    \"\"\"\n    union two sets.\n    set with bigger rank should be parent, so that the\n    disjoint set tree will be more flat.\n    \"\"\"\n    x, y = find_set(x), find_set(y)\n    if x.rank > y.rank:\n        y.parent = x\n    else:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.disjoint_set.disjoint_set",
        "documentation": {}
    },
    {
        "label": "find_set",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.disjoint_set.disjoint_set",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.disjoint_set.disjoint_set",
        "peekOfCode": "def find_set(x):\n    \"\"\"\n    return the parent of x\n    \"\"\"\n    if x != x.parent:\n        x.parent = find_set(x.parent)\n    return x.parent\ndef find_python_set(node: Node) -> set:\n    \"\"\"\n    Return a Python Standard Library set that contains i.",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.disjoint_set.disjoint_set",
        "documentation": {}
    },
    {
        "label": "find_python_set",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.disjoint_set.disjoint_set",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.disjoint_set.disjoint_set",
        "peekOfCode": "def find_python_set(node: Node) -> set:\n    \"\"\"\n    Return a Python Standard Library set that contains i.\n    \"\"\"\n    sets = ({0, 1, 2}, {3, 4, 5})\n    for s in sets:\n        if node.data in s:\n            return s\n    raise ValueError(f\"{node.data} is not in {sets}\")\ndef test_disjoint_set():",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.disjoint_set.disjoint_set",
        "documentation": {}
    },
    {
        "label": "test_disjoint_set",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.disjoint_set.disjoint_set",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.disjoint_set.disjoint_set",
        "peekOfCode": "def test_disjoint_set():\n    \"\"\"\n    >>> test_disjoint_set()\n    \"\"\"\n    vertex = [Node(i) for i in range(6)]\n    for v in vertex:\n        make_set(v)\n    union_set(vertex[0], vertex[1])\n    union_set(vertex[1], vertex[2])\n    union_set(vertex[3], vertex[4])",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.disjoint_set.disjoint_set",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.GeeksforGeeks.Arrays.Arrays.reorganize-the-array",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.GeeksforGeeks.Arrays.Arrays.reorganize-the-array",
        "peekOfCode": "T = int(input())\nwhile(T>0):\n    N = int(input())\n    A = [int(x) for x in input().split()]\n    S = set()\n    for i in range(0, len(A)):\n        S.add(A[i])\n    for i in range(0, len(A)):\n        if i in S:\n            A[i] = i",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.GeeksforGeeks.Arrays.Arrays.reorganize-the-array",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.GeeksforGeeks.Exceptionally-Odd",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.GeeksforGeeks.Exceptionally-Odd",
        "peekOfCode": "class Solution:\n    def getOddOccurrence(self, arr, n):\n        # code here\n        ans = 0\n        for i in range(n):\n            ans ^= arr[i]\n        return ans",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.GeeksforGeeks.Exceptionally-Odd",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.GeeksforGeeks.Find-A-Pair-With-Given-Target",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.GeeksforGeeks.Find-A-Pair-With-Given-Target",
        "peekOfCode": "class Node:\n    def __init__(self, val):\n        self.right = None\n        self.data = val\n        self.left = None\n'''\n# root : the root Node of the given BST\n# target : the target sum\ndef isPairPresent(root, target): \n    # code here.",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.GeeksforGeeks.Find-A-Pair-With-Given-Target",
        "documentation": {}
    },
    {
        "label": "isPairPresent",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.GeeksforGeeks.Find-A-Pair-With-Given-Target",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.GeeksforGeeks.Find-A-Pair-With-Given-Target",
        "peekOfCode": "def isPairPresent(root, target): \n    # code here.\n    inorderArr = set()\n    def inorder(node):\n        if node:\n            inorder(node.left)\n            inorderArr.add(node.data)\n            inorder(node.right)\n    inorder(root)\n    for i in inorderArr:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.GeeksforGeeks.Find-A-Pair-With-Given-Target",
        "documentation": {}
    },
    {
        "label": "duplicates",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.GeeksforGeeks.Find-Duplicates",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.GeeksforGeeks.Find-Duplicates",
        "peekOfCode": "def duplicates(arr, n): \n    # code here\n    duplicates = []\n    for i in range(n):\n        arr[arr[i] % n] += n\n    for i in range(n):\n        if (arr[i] / n) >= 2:\n            duplicates.append(i)    \n    duplicates.sort()\n    return duplicates if duplicates else [-1]",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.GeeksforGeeks.Find-Duplicates",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.GeeksforGeeks.Find-Swap-Values",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.GeeksforGeeks.Find-Swap-Values",
        "peekOfCode": "class Solution:\n    def findSwapValues(self,a, n, b, m):\n        # Your code goes here\n        sa = sum(a)\n        sb = sum(b)\n        itb = iter(b)\n        b = dict(zip(itb, itb))\n        for i in a:\n            if ((sb - sa + 2*i) / 2) in b:\n                return 1",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.GeeksforGeeks.Find-Swap-Values",
        "documentation": {}
    },
    {
        "label": "balance",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.GeeksforGeeks.find-the-median-in-the-stream",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.GeeksforGeeks.find-the-median-in-the-stream",
        "peekOfCode": "def balance(minh, maxh):\n    while abs(len(minh)-len(maxh)) > 1:\n        if len(minh) > len(maxh):\n            heapq.heappush(maxh, -heapq.heappop(minh))\n        else:\n            heapq.heappush(minh, -heapq.heappop(maxh))\ndef main():           \n    N = int(input())\n    i = int(input())\n    minh = []",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.GeeksforGeeks.find-the-median-in-the-stream",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.GeeksforGeeks.find-the-median-in-the-stream",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.GeeksforGeeks.find-the-median-in-the-stream",
        "peekOfCode": "def main():           \n    N = int(input())\n    i = int(input())\n    minh = []\n    maxh = [-i]\n    print(i)\n    for _ in range(N-1):\n        inp = int(input())\n        if inp < (-1*maxh[0]):\n            heapq.heappush(maxh, -1*inp)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.GeeksforGeeks.find-the-median-in-the-stream",
        "documentation": {}
    },
    {
        "label": "isPalindrome",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.GeeksforGeeks.Palidrome-Pair",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.GeeksforGeeks.Palidrome-Pair",
        "peekOfCode": "def isPalindrome(s):\n    return s == s[::-1]\ndef palindromePair(arr):\n    res = []\n    size = len(arr)\n    for i in range(size-1):\n        for j in range(i+1, size):\n            cc = arr[i] + arr[j]\n            if isPalindrome(cc):\n                res.append([i, j])",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.GeeksforGeeks.Palidrome-Pair",
        "documentation": {}
    },
    {
        "label": "palindromePair",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.GeeksforGeeks.Palidrome-Pair",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.GeeksforGeeks.Palidrome-Pair",
        "peekOfCode": "def palindromePair(arr):\n    res = []\n    size = len(arr)\n    for i in range(size-1):\n        for j in range(i+1, size):\n            cc = arr[i] + arr[j]\n            if isPalindrome(cc):\n                res.append([i, j])\n            cc = arr[j] + arr[i]\n            if isPalindrome(cc):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.GeeksforGeeks.Palidrome-Pair",
        "documentation": {}
    },
    {
        "label": "Solution1",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.GeeksforGeeks.Zig-Zag-Sort",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.GeeksforGeeks.Zig-Zag-Sort",
        "peekOfCode": "class Solution1:\n    def zigZag(self,arr, n):\n        # code here\n        arr.sort()\n        for i in range(1, n-1, 2):\n            arr[i], arr[i+1] = arr[i+1], arr[i]\n        return arr\nclass Solution2:\n    def zigZag(self,arr, n):\n        # code here",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.GeeksforGeeks.Zig-Zag-Sort",
        "documentation": {}
    },
    {
        "label": "Solution2",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.GeeksforGeeks.Zig-Zag-Sort",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.GeeksforGeeks.Zig-Zag-Sort",
        "peekOfCode": "class Solution2:\n    def zigZag(self,arr, n):\n        # code here\n        flag = True\n        for i in range(n-1):\n            if flag:\n                if arr[i] > arr[i+1]:\n                    arr[i], arr[i+1] = arr[i+1], arr[i]\n            else:\n                if arr[i] < arr[i+1]:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.GeeksforGeeks.Zig-Zag-Sort",
        "documentation": {}
    },
    {
        "label": "flippingBits",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Bit Manipulation.Flipping-Bits",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Bit Manipulation.Flipping-Bits",
        "peekOfCode": "def flippingBits(n):\n    max = (2**32)-1\n    return max-n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n    q = int(input())\n    for q_itr in range(q):\n        n = int(input())\n        result = flippingBits(n)\n        fptr.write(str(result) + '\\n')",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Bit Manipulation.Flipping-Bits",
        "documentation": {}
    },
    {
        "label": "winningLotteryTicket",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Bit Manipulation.Winning-Lotter-Ticket",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Bit Manipulation.Winning-Lotter-Ticket",
        "peekOfCode": "def winningLotteryTicket(tickets):\n    l = [0]*len(tickets)\n    mx = (2**10)-1\n    for i in range(len(tickets)):\n        x = set(tickets[i])\n        if '0' in x:\n            l[i] = l[i]*10 + 1\n        else:\n            l[i] = l[i]*10\n        if '1' in x:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Bit Manipulation.Winning-Lotter-Ticket",
        "documentation": {}
    },
    {
        "label": "flippingMatrix",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Constructive Algorithms.Flipping-The-Matrix",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Constructive Algorithms.Flipping-The-Matrix",
        "peekOfCode": "def flippingMatrix(matrix):\n    n = len(matrix)\n    seen = set()\n    maxes = []\n    for i in range(len(matrix) - 1):\n        for j in range(i + 1, len(matrix[0])):\n            if (i, j) not in seen:\n                ri, rj = mirror_row(i, j, n)\n                di, dj = mirror_col(ri, rj, n)\n                li, lj = mirror_row(di, dj, n)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Constructive Algorithms.Flipping-The-Matrix",
        "documentation": {}
    },
    {
        "label": "mirror_row",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Constructive Algorithms.Flipping-The-Matrix",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Constructive Algorithms.Flipping-The-Matrix",
        "peekOfCode": "def mirror_row(i, j, n):\n    return i, n - j - 1\ndef mirror_col(i, j, n):\n    return n - i - 1, j\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n    q = int(input())\n    for q_itr in range(q):\n        n = int(input())\n        matrix = []",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Constructive Algorithms.Flipping-The-Matrix",
        "documentation": {}
    },
    {
        "label": "mirror_col",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Constructive Algorithms.Flipping-The-Matrix",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Constructive Algorithms.Flipping-The-Matrix",
        "peekOfCode": "def mirror_col(i, j, n):\n    return n - i - 1, j\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n    q = int(input())\n    for q_itr in range(q):\n        n = int(input())\n        matrix = []\n        for _ in range(2*n):\n            matrix.append(list(map(int, input().rstrip().split())))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Constructive Algorithms.Flipping-The-Matrix",
        "documentation": {}
    },
    {
        "label": "minimumBribes",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Constructive Algorithms.New-Year-Chaos",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Constructive Algorithms.New-Year-Chaos",
        "peekOfCode": "def minimumBribes(q):\n    q = [P-1 for P in q]\n    c = 0\n    for i, x in enumerate(q):\n        if x-i > 2:\n            print('Too chaotic')\n            return\n        for j in range(max(x-1,0),i):\n            if q[j] > x:\n                c += 1",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Constructive Algorithms.New-Year-Chaos",
        "documentation": {}
    },
    {
        "label": "maxSubarray",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Dynamic Programming.The-Maximum-Subarray",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Dynamic Programming.The-Maximum-Subarray",
        "peekOfCode": "def maxSubarray(arr):\n    dp = arr.copy()\n    m = max(arr)\n    print(arr, dp)\n    if dp[0] < 0:\n        dp[0] = 0\n    for i in range(1, len(arr)):\n        if arr[i-1] > 0:\n            arr[i] += arr[i-1]\n        if dp[i-1] > 0:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Dynamic Programming.The-Maximum-Subarray",
        "documentation": {}
    },
    {
        "label": "beautifulPairs",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Greedy.Beautiful-Pairs",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Greedy.Beautiful-Pairs",
        "peekOfCode": "def beautifulPairs(A, B):\n    bp = sum((Counter(A) - Counter(B)).values())\n    return len(A)-bp+1 if bp else len(A)-1\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n    n = int(input())\n    A = list(map(int, input().rstrip().split()))\n    B = list(map(int, input().rstrip().split()))\n    result = beautifulPairs(A, B)\n    fptr.write(str(result) + '\\n')",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Greedy.Beautiful-Pairs",
        "documentation": {}
    },
    {
        "label": "getMinimumCost",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Greedy.Greedy-Florist",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Greedy.Greedy-Florist",
        "peekOfCode": "def getMinimumCost(k, c):\n    c = sorted(c)[::-1]\n    m = 1\n    cost = 0\n    for i in range(len(c)):\n        if (i+1) > (k*m):\n            m += 1\n        cost = cost + (m*c[i])\n    return cost        \nif __name__ == '__main__':",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Greedy.Greedy-Florist",
        "documentation": {}
    },
    {
        "label": "gridChallenge",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Greedy.Grid-Challenge",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Greedy.Grid-Challenge",
        "peekOfCode": "def gridChallenge(grid):\n    for i in range(len(grid)):\n        grid[i] = sorted(grid[i])\n    for i in range(len(grid[0])):\n        for j in range(1, len(grid)):\n            if grid[j-1][i] <= grid[j][i]:\n                continue\n            return \"NO\"\n    return \"YES\"\nif __name__ == '__main__':",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Greedy.Grid-Challenge",
        "documentation": {}
    },
    {
        "label": "jimOrders",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Greedy.Jim-and-the-Orders",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Greedy.Jim-and-the-Orders",
        "peekOfCode": "def jimOrders(orders):\n    res = []\n    for i in range(len(orders)):\n        orders[i].append(i+1)\n    orders = sorted(orders, key = lambda x: x[0]+x[1])\n    for i in range(len(orders)):\n        res.append(orders[i][2])     \n    return res  \nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Greedy.Jim-and-the-Orders",
        "documentation": {}
    },
    {
        "label": "largestPermutation",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Greedy.Largest-Permutation",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Greedy.Largest-Permutation",
        "peekOfCode": "def largestPermutation(k, arr):\n    N = len(arr)\n    dic = {arr[x]:x for x in range(N)}\n    swaps = 0\n    for x in range(N, 0, -1):\n        if dic[x] == N - x:\n            continue\n        else:\n            dic[arr[N-x]] = dic[x]\n            arr[dic[x]] = arr[N-x]",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Greedy.Largest-Permutation",
        "documentation": {}
    },
    {
        "label": "luckBalance",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Greedy.Luck-Balance",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Greedy.Luck-Balance",
        "peekOfCode": "def luckBalance(k, contests):\n    contests = sorted(contests, key = lambda x: x[0])\n    luck = 0\n    for i in range(len(contests)-1, -1, -1):\n        if contests[i][1] == 0:\n            luck += contests[i][0]\n        else:\n            if k > 0:\n                luck += contests[i][0]\n                k -= 1",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Greedy.Luck-Balance",
        "documentation": {}
    },
    {
        "label": "marcsCakewalk",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Greedy.Marcs-Cakewalk",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Greedy.Marcs-Cakewalk",
        "peekOfCode": "def marcsCakewalk(calorie):\n    calorie = sorted(calorie)[::-1]\n    miles = 0\n    for i in range(len(calorie)):\n        miles += (2**i) * calorie[i]\n    return miles\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n    n = int(input())\n    calorie = list(map(int, input().rstrip().split()))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Greedy.Marcs-Cakewalk",
        "documentation": {}
    },
    {
        "label": "maximumToys",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Greedy.Mark-and-Toys",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Greedy.Mark-and-Toys",
        "peekOfCode": "def maximumToys(prices, k):\n    prices = sorted(prices)\n    s = 0\n    i = 0\n    while True:\n        if s + prices[i] > k:\n            break\n        s += prices[i]\n        i += 1\n    return i",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Greedy.Mark-and-Toys",
        "documentation": {}
    },
    {
        "label": "maxMin",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Greedy.Max-Min",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Greedy.Max-Min",
        "peekOfCode": "def maxMin(k, arr):\n    arr = sorted(arr)\n    print(arr)\n    mn = math.inf\n    for i in range(0, len(arr)-k+1):\n        if (arr[i+k-1] - arr[i]) < mn:\n            mn = arr[i+k-1] - arr[i]\n    return mn\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Greedy.Max-Min",
        "documentation": {}
    },
    {
        "label": "maximumPerimeterTriangle",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Greedy.Maximum-Perimeter-Triangle",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Greedy.Maximum-Perimeter-Triangle",
        "peekOfCode": "def maximumPerimeterTriangle(sticks):\n    sticks = sorted(sticks)[::-1]\n    for i in range(0, len(sticks)-2):\n        if (sticks[i] < (sticks[i+1] + sticks[i+2])) or (sticks[i] == sticks[i+1] == sticks[i+2]):\n            return sticks[i+2], sticks[i+1], sticks[i]\n    return -1, \nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n    n = int(input())\n    sticks = list(map(int, input().rstrip().split()))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Greedy.Maximum-Perimeter-Triangle",
        "documentation": {}
    },
    {
        "label": "minimumAbsoluteDifference",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Greedy.Minimum-Absolute-Difference-in-an-Array",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Greedy.Minimum-Absolute-Difference-in-an-Array",
        "peekOfCode": "def minimumAbsoluteDifference(arr):\n    mn = math.inf\n    arr = sorted(arr)\n    for i in range(1, len(arr)):\n        if abs(arr[i-1] - arr[i]) < mn:\n            mn = abs(arr[i-1] - arr[i])\n    return mn\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n    n = int(input())",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Greedy.Minimum-Absolute-Difference-in-an-Array",
        "documentation": {}
    },
    {
        "label": "toys",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Greedy.Priyanka-and-Toys",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Greedy.Priyanka-and-Toys",
        "peekOfCode": "def toys(w):\n    w = sorted(w)\n    containers = 1\n    x = w[0]\n    for i in range(1, len(w)):\n        if w[i] > (x+4):\n            x = w[i]\n            containers += 1\n    return containers\nif __name__ == '__main__':",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Greedy.Priyanka-and-Toys",
        "documentation": {}
    },
    {
        "label": "decentNumber",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Greedy.Sherlock-and-the-Beast",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Greedy.Sherlock-and-the-Beast",
        "peekOfCode": "def decentNumber(n):\n    if n % 3 == 0 and n != 0:\n        print(int('5'*n))\n    elif n % 3 == 1 and n >= 10:\n        print(int(((n-10)*'5') + (10*'3')))\n    elif n % 3 == 2 and n >= 5:\n        print(int(((n-5)*'5') + (5*'3')))\n    else:\n        print(-1)       \nif __name__ == '__main__':",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Greedy.Sherlock-and-the-Beast",
        "documentation": {}
    },
    {
        "label": "appendAndDelete",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Implementation.Append-and-Delete",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Implementation.Append-and-Delete",
        "peekOfCode": "def appendAndDelete(s, t, k):\n    x = 0\n    if s == t:\n        return \"Yes\"\n    if k > (len(s) + len(t)):\n        return \"Yes\"\n    for i in range(min(len(s),len(t))):\n        if s[i] == t[i]:\n            if x == 0 and i == min(len(s),len(t))-1:\n                x = (len(s) - i) + (len(t) - i)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Implementation.Append-and-Delete",
        "documentation": {}
    },
    {
        "label": "chocolateFeast",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Implementation.Chocolate-Feast",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Implementation.Chocolate-Feast",
        "peekOfCode": "def chocolateFeast(n, c, m):\n    choc = n//c\n    w = choc\n    while True:\n        if w >= m:\n            choc += w // m\n            w = (w//m) + (w % m)\n            continue\n        return choc        \nif __name__ == '__main__':",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Implementation.Chocolate-Feast",
        "documentation": {}
    },
    {
        "label": "circularArrayRotation",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Implementation.Circular-Array-Rotation",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Implementation.Circular-Array-Rotation",
        "peekOfCode": "def circularArrayRotation(a, k, queries):\n    print(a)\n    print(k)\n    print(queries)\n    x = len(a)\n    A = [0]*x\n    for i in range(0, x):\n        A[(i+k)%x] = a[i]\n    a = []\n    for i in range(len(queries)):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Implementation.Circular-Array-Rotation",
        "documentation": {}
    },
    {
        "label": "minimumLoss",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Search.Minimum-Loss",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Search.Minimum-Loss",
        "peekOfCode": "def minimumLoss(price):\n    m = -math.inf\n    dp = [[0 for _ in range(len(price))] for _ in range(len(price))]\n    for i in range(0, len(price)-1):\n        for j in range(i+1, len(price)):\n            # print(i, j)\n            dp[i][j] = dp[i][j-1] + (price[j] - price[j-1])\n            # print(i, j, dp[i][j])\n    for i in range(0, len(price)-1):\n        for j in range(i+1, len(price)):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Search.Minimum-Loss",
        "documentation": {}
    },
    {
        "label": "minimumLoss",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Search.Minimum-Loss",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Search.Minimum-Loss",
        "peekOfCode": "def minimumLoss(price):\n    m = math.inf\n    prices = {}\n    for i in range(len(price)):\n        prices[price[i]] = i\n    print(prices)\n    sprices = sorted(prices)\n    for i in range(1, len(price)):\n        if (sprices[i]-sprices[i-1] < m) and (prices[sprices[i]]<prices[sprices[i-1]]):\n            m = sprices[i] - sprices[i-1]",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Search.Minimum-Loss",
        "documentation": {}
    },
    {
        "label": "missingNumbers",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Search.Missing-Numbers",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Search.Missing-Numbers",
        "peekOfCode": "def missingNumbers(arr, brr):\n    res = []\n    c = Counter(brr) - Counter(arr)\n    return sorted(c.keys())\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n    n = int(input())\n    arr = list(map(int, input().rstrip().split()))\n    m = int(input())\n    brr = list(map(int, input().rstrip().split()))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Search.Missing-Numbers",
        "documentation": {}
    },
    {
        "label": "closestNumbers",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Sorting.Closest-Numbers",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Sorting.Closest-Numbers",
        "peekOfCode": "def closestNumbers(arr):\n    arr = sorted(arr)\n    mindif = math.inf\n    res = []\n    for i in range(1, len(arr)):\n        if ((abs(arr[i-1]-arr[i])) < mindif):\n            res.clear()\n            res.append(arr[i-1])\n            res.append(arr[i])\n            mindif = abs(arr[i-1] - arr[i])",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Sorting.Closest-Numbers",
        "documentation": {}
    },
    {
        "label": "beautifulBinaryString",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Strings.Beautiful-Binary-String",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Strings.Beautiful-Binary-String",
        "peekOfCode": "def beautifulBinaryString(b):\n    return (len(b)-len(b.replace(\"010\", \"\")))//3    \nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n    n = int(input())\n    b = input()\n    result = beautifulBinaryString(b)\n    fptr.write(str(result) + '\\n')\n    fptr.close()",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Strings.Beautiful-Binary-String",
        "documentation": {}
    },
    {
        "label": "highestValuePalindrome",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Strings.Highest-Value-Palindrome",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Strings.Highest-Value-Palindrome",
        "peekOfCode": "def highestValuePalindrome(s, n, k):\n    changes = 0\n    l = 0\n    h = len(s)-1\n    s = list(s)\n    for i in range(0, n//2):\n        if s[i]!=s[-i-1]:\n            changes += 1\n    if changes > k:\n        return \"-1\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Strings.Highest-Value-Palindrome",
        "documentation": {}
    },
    {
        "label": "makingAnagrams",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Strings.Making-Anagrams",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Strings.Making-Anagrams",
        "peekOfCode": "def makingAnagrams(s1, s2):\n    s1 = Counter(s1)\n    s2 = Counter(s2)\n    res = 0\n    for i in list(s1.keys()):\n        if i in s2:\n            res += abs(s1.get(i) - s2.get(i))\n            del s1[i]\n            del s2[i]\n            continue",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Strings.Making-Anagrams",
        "documentation": {}
    },
    {
        "label": "sherlockAndAnagrams",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Strings.Sherlock-and-Anagrams",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Strings.Sherlock-and-Anagrams",
        "peekOfCode": "def sherlockAndAnagrams(s):\n    if all(value == 0 for value in Counter(s).values()):\n        return 0\n    substrings = []\n    c = 0\n    for i in range(0, len(s)):\n        for j in range(i+1, len(s)+1):\n            substrings.append(s[i:j])\n    sub_counts = [''.join(['{0}{1}'.format(x,y) for (x,y) in sorted(Counter(sub).items())]) for sub in substrings]\n    return sum([(v*(v-1)//2) for v in Counter(sub_counts).values()])",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Strings.Sherlock-and-Anagrams",
        "documentation": {}
    },
    {
        "label": "stringConstruction",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Strings.String-Construction",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Strings.String-Construction",
        "peekOfCode": "def stringConstruction(s):\n    return len(set(s))\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n    q = int(input())\n    for q_itr in range(q):\n        s = input()\n        result = stringConstruction(s)\n        fptr.write(str(result) + '\\n')\n    fptr.close()",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Strings.String-Construction",
        "documentation": {}
    },
    {
        "label": "weightedUniformStrings",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Strings.Weighted-Uniform-Strings",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Strings.Weighted-Uniform-Strings",
        "peekOfCode": "def weightedUniformStrings(s, queries):\n    alphabet = {'a':1, 'b':2, 'c':3, 'd':4, 'e':5, 'f':6, 'g':7, 'h':8, 'i':9, 'j':10, 'k':11, 'l':12, 'm':13, 'n':14, 'o':15, 'p':16, 'q':17, 'r':18, 's':19, 't':20, 'u':21, 'v':22, 'w':23, 'x':24, 'y':25, 'z':26}\n    counter = 1\n    us = set()\n    res = []\n    for i in range(len(s)):\n        weight = alphabet[s[i]]\n        if (i+1!=len(s) and s[i]==s[i+1]):\n            counter += 1\n        else:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Strings.Weighted-Uniform-Strings",
        "documentation": {}
    },
    {
        "label": "aVeryBigSum",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Warmup.A-Very-Big-Sum",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Warmup.A-Very-Big-Sum",
        "peekOfCode": "def aVeryBigSum(ar):\n    return sum(ar)\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n    ar_count = int(input())\n    ar = list(map(int, input().rstrip().split()))\n    result = aVeryBigSum(ar)\n    fptr.write(str(result) + '\\n')\n    fptr.close()",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Warmup.A-Very-Big-Sum",
        "documentation": {}
    },
    {
        "label": "compareTriplets",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Warmup.Compare-the-Triplets",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Warmup.Compare-the-Triplets",
        "peekOfCode": "def compareTriplets(a, b):\n    pa = 0\n    pb = 0\n    x = 0\n    while(x < len(a)):\n        if a[x] > b[x]:\n            pa += 1\n        elif b[x] > a[x]:\n            pb += 1\n        else:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Warmup.Compare-the-Triplets",
        "documentation": {}
    },
    {
        "label": "miniMaxSum",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Warmup.Mini-Max-Sum",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Warmup.Mini-Max-Sum",
        "peekOfCode": "def miniMaxSum(arr):\n    arr = sorted(arr)\n    print(sum(arr[0:4]), sum(arr[1:5]))\nif __name__ == '__main__':\n    arr = list(map(int, input().rstrip().split()))\n    miniMaxSum(arr)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Warmup.Mini-Max-Sum",
        "documentation": {}
    },
    {
        "label": "simpleArraySum",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Warmup.Simple-Array-Sum",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Warmup.Simple-Array-Sum",
        "peekOfCode": "def simpleArraySum(ar):\n    #\n    # Write your code here.\n    #\n    return sum(ar)\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n    ar_count = int(input())\n    ar = list(map(int, input().rstrip().split()))\n    result = simpleArraySum(ar)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Algorithms.Warmup.Simple-Array-Sum",
        "documentation": {}
    },
    {
        "label": "hourglassSum",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Data Structures.2D-Array-DS",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Data Structures.2D-Array-DS",
        "peekOfCode": "def hourglassSum(arr):\n    s = -math.inf\n    maxSum = -math.inf\n    for i in range(len(arr)-2):\n        for j in range(len(arr[0])-2):\n            s = arr[i][j] + arr[i][j+1] + arr[i][j+2] + arr[i+1][j+1] + arr[i+2][j] + arr[i+2][j+1] + arr[i+2][j+2]\n            if (s > maxSum):\n                maxSum = s\n    return maxSum",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Data Structures.2D-Array-DS",
        "documentation": {}
    },
    {
        "label": "reverseArray",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Data Structures.Array-DS",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Data Structures.Array-DS",
        "peekOfCode": "def reverseArray(a):\n    return a[::-1]",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Data Structures.Array-DS",
        "documentation": {}
    },
    {
        "label": "compare_lists",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Data Structures.Compare-Two-Linked-Lists",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Data Structures.Compare-Two-Linked-Lists",
        "peekOfCode": "def compare_lists(llist1, llist2):\n    while llist1 and llist2:\n        if llist1.data == llist2.data:\n            llist1 = llist1.next\n            llist2 = llist2.next\n            continue\n        else:\n            return 0\n    if not llist1 and not llist2:\n        return 1",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Data Structures.Compare-Two-Linked-Lists",
        "documentation": {}
    },
    {
        "label": "has_cycle",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Data Structures.Cycle-Detection",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Data Structures.Cycle-Detection",
        "peekOfCode": "def has_cycle(head):\n    if not head:\n        return 0\n    fast = slow = head\n    while fast and fast.next:\n        fast = fast.next.next\n        slow = slow.next\n        if fast == slow:\n            return 1\n    return 0",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Data Structures.Cycle-Detection",
        "documentation": {}
    },
    {
        "label": "deleteNode",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Data Structures.Delete-A-Node",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Data Structures.Delete-A-Node",
        "peekOfCode": "def deleteNode(head, position):\n    if position == 0:\n        return head.next\n    temp = head\n    ptr = 1\n    while ptr != position:\n        temp = temp.next\n        ptr += 1\n    temp.next = temp.next.next\n    return head",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Data Structures.Delete-A-Node",
        "documentation": {}
    },
    {
        "label": "removeDuplicates",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Data Structures.Delete-Duplicate-Nodes",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Data Structures.Delete-Duplicate-Nodes",
        "peekOfCode": "def removeDuplicates(head):\n    dummy = head\n    while dummy and dummy.next:\n        if dummy.data == dummy.next.data:\n            dummy.next = dummy.next.next\n            continue\n        dummy = dummy.next\n    return head",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Data Structures.Delete-Duplicate-Nodes",
        "documentation": {}
    },
    {
        "label": "dynamicArray",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Data Structures.Dynamic-Array",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Data Structures.Dynamic-Array",
        "peekOfCode": "def dynamicArray(n, queries):\n    Q = len(queries)\n    seqList = [[] for _ in range(n)]\n    lastAnswer = 0    \n    la = []\n    for i in range(Q):\n        t, x, y = queries[i][0], queries[i][1], queries[i][2]\n        if t==1:\n            seqList[(x^lastAnswer)%n].append(y)\n        else:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Data Structures.Dynamic-Array",
        "documentation": {}
    },
    {
        "label": "findMergeNode",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Data Structures.Find-The-Merge-Point-of-Two-Lists",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Data Structures.Find-The-Merge-Point-of-Two-Lists",
        "peekOfCode": "def findMergeNode(head1, head2):\n    ptr1 = head1\n    ptr2 = head2\n    while ptr1 != ptr2:\n        if ptr1.next == None:\n            ptr1 = head2\n        else:\n            ptr1 = ptr1.next\n        if ptr2.next == None:\n            ptr2 = head1",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Data Structures.Find-The-Merge-Point-of-Two-Lists",
        "documentation": {}
    },
    {
        "label": "getNode",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Data Structures.Get-Node-Value",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Data Structures.Get-Node-Value",
        "peekOfCode": "def getNode(head, positionFromTail):\n    length = 0\n    ptr = head\n    while ptr:\n        length += 1\n        ptr = ptr.next\n    if length==1:\n        return head.data\n    ptr = head\n    for _ in range(0, length-positionFromTail-1):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Data Structures.Get-Node-Value",
        "documentation": {}
    },
    {
        "label": "insertNodeAtPosition",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Data Structures.Insert-A-Node-At-A-Specific-Position",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Data Structures.Insert-A-Node-At-A-Specific-Position",
        "peekOfCode": "def insertNodeAtPosition(head, data, position):\n    temp = head\n    ptr = 1\n    while ptr!=position:\n        temp = temp.next\n        ptr += 1\n    sec = temp.next\n    temp.next = SinglyLinkedListNode(data)\n    temp = temp.next\n    temp.next = sec",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Data Structures.Insert-A-Node-At-A-Specific-Position",
        "documentation": {}
    },
    {
        "label": "insertNodeAtHead",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Data Structures.Insert-A-Node-At-The-Head-Of-The-Linked-List",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Data Structures.Insert-A-Node-At-The-Head-Of-The-Linked-List",
        "peekOfCode": "def insertNodeAtHead(llist, data):\n    temp = SinglyLinkedListNode(data)\n    temp.next = llist\n    return temp",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Data Structures.Insert-A-Node-At-The-Head-Of-The-Linked-List",
        "documentation": {}
    },
    {
        "label": "insertNodeAtTail",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Data Structures.Insert-A-Node-At-The-Tail-Of-The-Linked-List",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Data Structures.Insert-A-Node-At-The-Tail-Of-The-Linked-List",
        "peekOfCode": "def insertNodeAtTail(head, data):\n    if head == None:\n        head = SinglyLinkedListNode(data)\n        return head\n    temp = head\n    while temp.next!=None:\n        temp = temp.next\n    temp.next = SinglyLinkedListNode(data)\n    return head",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Data Structures.Insert-A-Node-At-The-Tail-Of-The-Linked-List",
        "documentation": {}
    },
    {
        "label": "sortedInsert",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Data Structures.Insert-a-Node-into-a-Sorted-Doubly-Linked-List",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Data Structures.Insert-a-Node-into-a-Sorted-Doubly-Linked-List",
        "peekOfCode": "def sortedInsert(head, data):\n    ptr = head\n    if data <= ptr.data:\n        dummy = DoublyLinkedListNode(data)\n        dummy.next = head\n        head.prev = dummy\n        return dummy\n    while ptr:\n        if data >= ptr.data:\n            if ptr.next == None:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Data Structures.Insert-a-Node-into-a-Sorted-Doubly-Linked-List",
        "documentation": {}
    },
    {
        "label": "mergeLists",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Data Structures.Merge-Two-Sorted-Lists",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Data Structures.Merge-Two-Sorted-Lists",
        "peekOfCode": "def mergeLists(head1, head2):\n    mergedList = mhead = SinglyLinkedListNode(-1)\n    while head1 and head2:\n        if head1.data < head2.data:\n            mergedList.next = SinglyLinkedListNode(head1.data)\n            head1 = head1.next\n            mergedList = mergedList.next\n        else:\n            mergedList.next = SinglyLinkedListNode(head2.data)\n            head2 = head2.next",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Data Structures.Merge-Two-Sorted-Lists",
        "documentation": {}
    },
    {
        "label": "reversePrint",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Data Structures.Print-In-Reverse",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Data Structures.Print-In-Reverse",
        "peekOfCode": "def reversePrint(head):\n    ans = []\n    while head:\n        ans.append(head.data)\n        head = head.next\n    for i in range(len(ans)-1, -1, -1):\n        print(ans[i])",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Data Structures.Print-In-Reverse",
        "documentation": {}
    },
    {
        "label": "printLinkedList",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Data Structures.Print-the-Elements-of-a-Linked-List",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Data Structures.Print-the-Elements-of-a-Linked-List",
        "peekOfCode": "def printLinkedList(head):\n    while True:\n        print(head.data)\n        head = head.next\n        if not head:\n            break",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Data Structures.Print-the-Elements-of-a-Linked-List",
        "documentation": {}
    },
    {
        "label": "reverse",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Data Structures.Reverse-a-Doubly-Linked-List",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Data Structures.Reverse-a-Doubly-Linked-List",
        "peekOfCode": "def reverse(head):\n    temp = newHead = head\n    while temp:\n        prev = temp.prev\n        temp.prev = temp.next\n        temp.next = prev\n        newHead = temp\n        temp = temp.prev\n    return newHead",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Data Structures.Reverse-a-Doubly-Linked-List",
        "documentation": {}
    },
    {
        "label": "reverse",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Data Structures.Reverse-A-Linked-List",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Data Structures.Reverse-A-Linked-List",
        "peekOfCode": "def reverse(head):\n    if not head:\n        return None\n    temp = prev = head\n    sec = head.next\n    head.next = None\n    while sec.next:\n        temp = sec.next\n        sec.next = prev\n        prev = sec",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Data Structures.Reverse-A-Linked-List",
        "documentation": {}
    },
    {
        "label": "matchingStrings",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Data Structures.Sparse-Arrays",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Data Structures.Sparse-Arrays",
        "peekOfCode": "def matchingStrings(strings, queries):\n    ans = []\n    c = Counter(strings)\n    for i in queries:\n        if i in c:\n            ans.append(c[i])\n        else:\n            ans.append(0)\n    return ans",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Data Structures.Sparse-Arrays",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Data Structures.Tree-InOrder-Traversal",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Data Structures.Tree-InOrder-Traversal",
        "peekOfCode": "class Node:\n    def __init__(self, info): \n        self.info = info  \n        self.left = None  \n        self.right = None \n        self.level = None \n    def __str__(self):\n        return str(self.info) \nclass BinarySearchTree:\n    def __init__(self): ",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Data Structures.Tree-InOrder-Traversal",
        "documentation": {}
    },
    {
        "label": "BinarySearchTree",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Data Structures.Tree-InOrder-Traversal",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Data Structures.Tree-InOrder-Traversal",
        "peekOfCode": "class BinarySearchTree:\n    def __init__(self): \n        self.root = None\n    def create(self, val):  \n        if self.root == None:\n            self.root = Node(val)\n        else:\n            current = self.root\n            while True:\n                if val < current.info:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Data Structures.Tree-InOrder-Traversal",
        "documentation": {}
    },
    {
        "label": "inOrder",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Data Structures.Tree-InOrder-Traversal",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Data Structures.Tree-InOrder-Traversal",
        "peekOfCode": "def inOrder(root):\n    #Write your code here\n    if root.left:\n        inOrder(root.left)\n    print(root.info, end=' ')\n    if root.right:\n        inOrder(root.right)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Data Structures.Tree-InOrder-Traversal",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Data Structures.Tree-PostOrder-Traversal",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Data Structures.Tree-PostOrder-Traversal",
        "peekOfCode": "class Node:\n    def __init__(self, info): \n        self.info = info  \n        self.left = None  \n        self.right = None \n        self.level = None \n    def __str__(self):\n        return str(self.info) \nclass BinarySearchTree:\n    def __init__(self): ",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Data Structures.Tree-PostOrder-Traversal",
        "documentation": {}
    },
    {
        "label": "BinarySearchTree",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Data Structures.Tree-PostOrder-Traversal",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Data Structures.Tree-PostOrder-Traversal",
        "peekOfCode": "class BinarySearchTree:\n    def __init__(self): \n        self.root = None\n    def create(self, val):  \n        if self.root == None:\n            self.root = Node(val)\n        else:\n            current = self.root\n            while True:\n                if val < current.info:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Data Structures.Tree-PostOrder-Traversal",
        "documentation": {}
    },
    {
        "label": "postOrder",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Data Structures.Tree-PostOrder-Traversal",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Data Structures.Tree-PostOrder-Traversal",
        "peekOfCode": "def postOrder(root):\n    #Write your code here\n    if root.left:\n        preOrder(root.left)\n    if root.right:\n        preOrder(root.right)\n    print(root.info, end=' ')",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Data Structures.Tree-PostOrder-Traversal",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Data Structures.Tree-PreOrder-Traversal",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Data Structures.Tree-PreOrder-Traversal",
        "peekOfCode": "class Node:\n    def __init__(self, info): \n        self.info = info  \n        self.left = None  \n        self.right = None \n        self.level = None \n    def __str__(self):\n        return str(self.info) \nclass BinarySearchTree:\n    def __init__(self): ",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Data Structures.Tree-PreOrder-Traversal",
        "documentation": {}
    },
    {
        "label": "BinarySearchTree",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Data Structures.Tree-PreOrder-Traversal",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Data Structures.Tree-PreOrder-Traversal",
        "peekOfCode": "class BinarySearchTree:\n    def __init__(self): \n        self.root = None\n    def create(self, val):  \n        if self.root == None:\n            self.root = Node(val)\n        else:\n            current = self.root\n            while True:\n                if val < current.info:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Data Structures.Tree-PreOrder-Traversal",
        "documentation": {}
    },
    {
        "label": "preOrder",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Data Structures.Tree-PreOrder-Traversal",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Data Structures.Tree-PreOrder-Traversal",
        "peekOfCode": "def preOrder(root):\n    #Write your code here\n    print(root.info, end=' ')\n    if root.left:\n        preOrder(root.left)\n    if root.right:\n        preOrder(root.right)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Data Structures.Tree-PreOrder-Traversal",
        "documentation": {}
    },
    {
        "label": "decodeHuff",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Data Structures.Trees-Huffman-Decoding",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Data Structures.Trees-Huffman-Decoding",
        "peekOfCode": "def decodeHuff(root, s):\n    ans = \"\"\n    current = root\n\t#Enter Your Code Here\n    for i in range(0, len(s)):\n        if s[i] == '0':\n            current = current.left\n        else:\n            current = current.right\n        if current.left == None and current.right == None:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Data Structures.Trees-Huffman-Decoding",
        "documentation": {}
    },
    {
        "label": "waiter",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Data Structures.Waiter",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Data Structures.Waiter",
        "peekOfCode": "def waiter(number, q):\n    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n        return True\n    #\n    # Write your code here.\n    #\n    x = 2",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Data Structures.Waiter",
        "documentation": {}
    },
    {
        "label": "isPalindrome",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Built-Ins.Any-or-All",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Built-Ins.Any-or-All",
        "peekOfCode": "def isPalindrome(num):\n    num = str(num)\n    front = len(num) - 1\n    rear = 0\n    while rear <= front:\n        if not num[front] == num[rear]:\n            return False\n        rear += 1\n        front -= 1\n    return True",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Built-Ins.Any-or-All",
        "documentation": {}
    },
    {
        "label": "isPalindrome",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Built-Ins.Any-or-All",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Built-Ins.Any-or-All",
        "peekOfCode": "def isPalindrome(num):\n    num = str(num)\n    return True if num == num[::-1] else False\nn = int(input())\nnums = list(map(int, input().split()))\nprint(\"True\" if all(x >= 0 for x in nums) and any(isPalindrome(x) for x in nums) else \"False\")",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Built-Ins.Any-or-All",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Built-Ins.Any-or-All",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Built-Ins.Any-or-All",
        "peekOfCode": "n = int(input())\nnums = list(map(int, input().split()))\nprint(\"True\" if all(x >= 0 for x in nums) and any(isPalindrome(x) for x in nums) else \"False\")\n# More Concise Solution using string reversal\n# Enter your code here. Read input from STDIN. Print output to STDOUT\ndef isPalindrome(num):\n    num = str(num)\n    return True if num == num[::-1] else False\nn = int(input())\nnums = list(map(int, input().split()))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Built-Ins.Any-or-All",
        "documentation": {}
    },
    {
        "label": "nums",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Built-Ins.Any-or-All",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Built-Ins.Any-or-All",
        "peekOfCode": "nums = list(map(int, input().split()))\nprint(\"True\" if all(x >= 0 for x in nums) and any(isPalindrome(x) for x in nums) else \"False\")\n# More Concise Solution using string reversal\n# Enter your code here. Read input from STDIN. Print output to STDOUT\ndef isPalindrome(num):\n    num = str(num)\n    return True if num == num[::-1] else False\nn = int(input())\nnums = list(map(int, input().split()))\nprint(\"True\" if all(x >= 0 for x in nums) and any(isPalindrome(x) for x in nums) else \"False\")",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Built-Ins.Any-or-All",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Built-Ins.Any-or-All",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Built-Ins.Any-or-All",
        "peekOfCode": "n = int(input())\nnums = list(map(int, input().split()))\nprint(\"True\" if all(x >= 0 for x in nums) and any(isPalindrome(x) for x in nums) else \"False\")",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Built-Ins.Any-or-All",
        "documentation": {}
    },
    {
        "label": "nums",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Built-Ins.Any-or-All",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Built-Ins.Any-or-All",
        "peekOfCode": "nums = list(map(int, input().split()))\nprint(\"True\" if all(x >= 0 for x in nums) and any(isPalindrome(x) for x in nums) else \"False\")",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Built-Ins.Any-or-All",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Built-Ins.ginortS",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Built-Ins.ginortS",
        "peekOfCode": "s = input()\nprint(*sorted(s, key = lambda x : (x in '02468', x.isdigit(), x.isupper(), x.islower(), x)), sep='')",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Built-Ins.ginortS",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Built-Ins.Zipped",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Built-Ins.Zipped",
        "peekOfCode": "data = [list(map(float, input().split())) for _ in range(s)]\nfor i in zip(*data):\n    print('%.2f'%(sum(i)/s))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Built-Ins.Zipped",
        "documentation": {}
    },
    {
        "label": "is_leap",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Introduction.Write-a-Function",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Introduction.Write-a-Function",
        "peekOfCode": "def is_leap(year):\n    if (year % 4 != 0) or (year % 100 == 0 and year % 400 != 0):\n        leap = False\n    else:\n        leap = True  \n    return leap",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Introduction.Write-a-Function",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Check-Strict-Superset",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Check-Strict-Superset",
        "peekOfCode": "A = set(map(int, input().split()))\nn = int(input())\nfor _ in range(n):\n    x = set(map(int, input().split()))\n    if A >= x:\n        continue\n    else:\n        print(\"False\")\n        exit()\nprint(\"True\")",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Check-Strict-Superset",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Check-Strict-Superset",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Check-Strict-Superset",
        "peekOfCode": "n = int(input())\nfor _ in range(n):\n    x = set(map(int, input().split()))\n    if A >= x:\n        continue\n    else:\n        print(\"False\")\n        exit()\nprint(\"True\")",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Check-Strict-Superset",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Check-Subset",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Check-Subset",
        "peekOfCode": "t = int(input())\nfor _ in range(t):\n    na = int(input())\n    a = set(map(int, input().split()))\n    nb = int(input())\n    b = set(map(int, input().split()))\n    print(\"True\" if a<=b else \"False\")",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Check-Subset",
        "documentation": {}
    },
    {
        "label": "average",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Introduction-to-Sets",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Introduction-to-Sets",
        "peekOfCode": "def average(array):\n    # your code goes here\n    return sum(set(array))/len(set(array))\nif __name__ == '__main__':\n    n = int(input())\n    arr = list(map(int, input().split()))\n    result = average(arr)\n    print(result)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Introduction-to-Sets",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Set-Add",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Set-Add",
        "peekOfCode": "n = int(input())\nc = set()\nfor i in range(n):\n    c.add(input())\nprint(len(c))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Set-Add",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Set-Add",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Set-Add",
        "peekOfCode": "c = set()\nfor i in range(n):\n    c.add(input())\nprint(len(c))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Set-Add",
        "documentation": {}
    },
    {
        "label": "e",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Set-Difference",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Set-Difference",
        "peekOfCode": "e = int(input())\nenglish = set(map(int, input().split()))\nf = int(input())\nfrench = set(map(int, input().split()))\nprint(len(english.intersection(french)))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Set-Difference",
        "documentation": {}
    },
    {
        "label": "english",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Set-Difference",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Set-Difference",
        "peekOfCode": "english = set(map(int, input().split()))\nf = int(input())\nfrench = set(map(int, input().split()))\nprint(len(english.intersection(french)))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Set-Difference",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Set-Difference",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Set-Difference",
        "peekOfCode": "f = int(input())\nfrench = set(map(int, input().split()))\nprint(len(english.intersection(french)))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Set-Difference",
        "documentation": {}
    },
    {
        "label": "french",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Set-Difference",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Set-Difference",
        "peekOfCode": "french = set(map(int, input().split()))\nprint(len(english.intersection(french)))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Set-Difference",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Set-Discard-Remove-Pop",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Set-Discard-Remove-Pop",
        "peekOfCode": "n = int(input())\ns = set(map(int, input().split()))\nN = int(input())\nqueries = [input().split() for i in range(N)]\nfor i in range(N):\n    if queries[i][0] == 'pop':\n        s.pop()\n    if queries[i][0] == 'remove':\n        if int(queries[i][1]) in s:\n            s.remove(int(queries[i][1]))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Set-Discard-Remove-Pop",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Set-Discard-Remove-Pop",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Set-Discard-Remove-Pop",
        "peekOfCode": "s = set(map(int, input().split()))\nN = int(input())\nqueries = [input().split() for i in range(N)]\nfor i in range(N):\n    if queries[i][0] == 'pop':\n        s.pop()\n    if queries[i][0] == 'remove':\n        if int(queries[i][1]) in s:\n            s.remove(int(queries[i][1]))\n    if queries[i][0] == 'discard':",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Set-Discard-Remove-Pop",
        "documentation": {}
    },
    {
        "label": "N",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Set-Discard-Remove-Pop",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Set-Discard-Remove-Pop",
        "peekOfCode": "N = int(input())\nqueries = [input().split() for i in range(N)]\nfor i in range(N):\n    if queries[i][0] == 'pop':\n        s.pop()\n    if queries[i][0] == 'remove':\n        if int(queries[i][1]) in s:\n            s.remove(int(queries[i][1]))\n    if queries[i][0] == 'discard':\n        s.discard(int(queries[i][1]))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Set-Discard-Remove-Pop",
        "documentation": {}
    },
    {
        "label": "queries",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Set-Discard-Remove-Pop",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Set-Discard-Remove-Pop",
        "peekOfCode": "queries = [input().split() for i in range(N)]\nfor i in range(N):\n    if queries[i][0] == 'pop':\n        s.pop()\n    if queries[i][0] == 'remove':\n        if int(queries[i][1]) in s:\n            s.remove(int(queries[i][1]))\n    if queries[i][0] == 'discard':\n        s.discard(int(queries[i][1]))\nprint(sum(s))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Set-Discard-Remove-Pop",
        "documentation": {}
    },
    {
        "label": "e",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Set-Intersection",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Set-Intersection",
        "peekOfCode": "e = int(input())\nenglish = set(map(int, input().split()))\nf = int(input())\nfrench = set(map(int, input().split()))\nprint(len(english.intersection(french)))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Set-Intersection",
        "documentation": {}
    },
    {
        "label": "english",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Set-Intersection",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Set-Intersection",
        "peekOfCode": "english = set(map(int, input().split()))\nf = int(input())\nfrench = set(map(int, input().split()))\nprint(len(english.intersection(french)))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Set-Intersection",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Set-Intersection",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Set-Intersection",
        "peekOfCode": "f = int(input())\nfrench = set(map(int, input().split()))\nprint(len(english.intersection(french)))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Set-Intersection",
        "documentation": {}
    },
    {
        "label": "french",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Set-Intersection",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Set-Intersection",
        "peekOfCode": "french = set(map(int, input().split()))\nprint(len(english.intersection(french)))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Set-Intersection",
        "documentation": {}
    },
    {
        "label": "_",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Set-Mutations",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Set-Mutations",
        "peekOfCode": "_ = int(input())\ns1 = set(map(int, input().split()))\nN = int(input())\nfor _ in range(N):\n    cmd, _ = input().split()\n    s2 = set(map(int, input().split()))\n    if(cmd == \"intersection_update\"):\n        s1.intersection_update(s2)\n    elif(cmd == \"update\"):\n        s1.update(s2)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Set-Mutations",
        "documentation": {}
    },
    {
        "label": "s1",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Set-Mutations",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Set-Mutations",
        "peekOfCode": "s1 = set(map(int, input().split()))\nN = int(input())\nfor _ in range(N):\n    cmd, _ = input().split()\n    s2 = set(map(int, input().split()))\n    if(cmd == \"intersection_update\"):\n        s1.intersection_update(s2)\n    elif(cmd == \"update\"):\n        s1.update(s2)\n    elif(cmd == \"symmetric_difference_update\"):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Set-Mutations",
        "documentation": {}
    },
    {
        "label": "N",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Set-Mutations",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Set-Mutations",
        "peekOfCode": "N = int(input())\nfor _ in range(N):\n    cmd, _ = input().split()\n    s2 = set(map(int, input().split()))\n    if(cmd == \"intersection_update\"):\n        s1.intersection_update(s2)\n    elif(cmd == \"update\"):\n        s1.update(s2)\n    elif(cmd == \"symmetric_difference_update\"):\n        s1.symmetric_difference_update(s2)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Set-Mutations",
        "documentation": {}
    },
    {
        "label": "e",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Set-Symmetric-Difference",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Set-Symmetric-Difference",
        "peekOfCode": "e = int(input())\nenglish = set(map(int, input().split()))\nf = int(input())\nfrench = set(map(int, input().split()))\nprint(len(english.symmetric_difference(french)))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Set-Symmetric-Difference",
        "documentation": {}
    },
    {
        "label": "english",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Set-Symmetric-Difference",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Set-Symmetric-Difference",
        "peekOfCode": "english = set(map(int, input().split()))\nf = int(input())\nfrench = set(map(int, input().split()))\nprint(len(english.symmetric_difference(french)))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Set-Symmetric-Difference",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Set-Symmetric-Difference",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Set-Symmetric-Difference",
        "peekOfCode": "f = int(input())\nfrench = set(map(int, input().split()))\nprint(len(english.symmetric_difference(french)))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Set-Symmetric-Difference",
        "documentation": {}
    },
    {
        "label": "french",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Set-Symmetric-Difference",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Set-Symmetric-Difference",
        "peekOfCode": "french = set(map(int, input().split()))\nprint(len(english.symmetric_difference(french)))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Set-Symmetric-Difference",
        "documentation": {}
    },
    {
        "label": "e",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Set-Union",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Set-Union",
        "peekOfCode": "e = int(input())\nenglish = set(map(int, input().split()))\nf = int(input())\nfrench = set(map(int, input().split()))\nprint(len(english.union(french)))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Set-Union",
        "documentation": {}
    },
    {
        "label": "english",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Set-Union",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Set-Union",
        "peekOfCode": "english = set(map(int, input().split()))\nf = int(input())\nfrench = set(map(int, input().split()))\nprint(len(english.union(french)))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Set-Union",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Set-Union",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Set-Union",
        "peekOfCode": "f = int(input())\nfrench = set(map(int, input().split()))\nprint(len(english.union(french)))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Set-Union",
        "documentation": {}
    },
    {
        "label": "french",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Set-Union",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Set-Union",
        "peekOfCode": "french = set(map(int, input().split()))\nprint(len(english.union(french)))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Set-Union",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Symmetric-Difference",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Symmetric-Difference",
        "peekOfCode": "m = int(input())\nmset = set(map(int, input().split()))\nn = int(input())\nnset = set(map(int, input().split()))\nsym = sorted(list(mset.difference(nset) | nset.difference(mset)))\nprint(*sym, sep='\\n')",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Symmetric-Difference",
        "documentation": {}
    },
    {
        "label": "mset",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Symmetric-Difference",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Symmetric-Difference",
        "peekOfCode": "mset = set(map(int, input().split()))\nn = int(input())\nnset = set(map(int, input().split()))\nsym = sorted(list(mset.difference(nset) | nset.difference(mset)))\nprint(*sym, sep='\\n')",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Symmetric-Difference",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Symmetric-Difference",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Symmetric-Difference",
        "peekOfCode": "n = int(input())\nnset = set(map(int, input().split()))\nsym = sorted(list(mset.difference(nset) | nset.difference(mset)))\nprint(*sym, sep='\\n')",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Symmetric-Difference",
        "documentation": {}
    },
    {
        "label": "nset",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Symmetric-Difference",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Symmetric-Difference",
        "peekOfCode": "nset = set(map(int, input().split()))\nsym = sorted(list(mset.difference(nset) | nset.difference(mset)))\nprint(*sym, sep='\\n')",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Symmetric-Difference",
        "documentation": {}
    },
    {
        "label": "sym",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Symmetric-Difference",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Symmetric-Difference",
        "peekOfCode": "sym = sorted(list(mset.difference(nset) | nset.difference(mset)))\nprint(*sym, sep='\\n')",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.Symmetric-Difference",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.The-Captain's-Room",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.The-Captain's-Room",
        "peekOfCode": "k = int(input())\nl = list(map(int, input().split()))\ncaptain = ((sum(set(l))*k) - sum(l))//(k-1)\nprint(captain)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.The-Captain's-Room",
        "documentation": {}
    },
    {
        "label": "l",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.The-Captain's-Room",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.The-Captain's-Room",
        "peekOfCode": "l = list(map(int, input().split()))\ncaptain = ((sum(set(l))*k) - sum(l))//(k-1)\nprint(captain)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.The-Captain's-Room",
        "documentation": {}
    },
    {
        "label": "captain",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.The-Captain's-Room",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.The-Captain's-Room",
        "peekOfCode": "captain = ((sum(set(l))*k) - sum(l))//(k-1)\nprint(captain)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Sets.The-Captain's-Room",
        "documentation": {}
    },
    {
        "label": "count_substring",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Strings.Find-a-String",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Strings.Find-a-String",
        "peekOfCode": "def count_substring(string, sub_string):\n    c = 0\n    for i in range(0, len(string)-len(sub_string)+1):\n        if string[i:i+len(sub_string)] == sub_string:\n            c += 1\n    return c\nif __name__ == '__main__':\n    string = input().strip()\n    sub_string = input().strip()\n    count = count_substring(string, sub_string)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Strings.Find-a-String",
        "documentation": {}
    },
    {
        "label": "mutate_string",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Strings.Mutations",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Strings.Mutations",
        "peekOfCode": "def mutate_string(string, position, character):\n    return string[0:position] + character + string[position+1:]\nif __name__ == '__main__':\n    s = input()\n    i, c = input().split()\n    s_new = mutate_string(s, int(i), c)\n    print(s_new)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Strings.Mutations",
        "documentation": {}
    },
    {
        "label": "split_and_join",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Strings.String-Split-and-Join",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Strings.String-Split-and-Join",
        "peekOfCode": "def split_and_join(line):\n    # write your code here\n    return \"-\".join(line.split(' '))\nif __name__ == '__main__':\n    line = input()\n    result = split_and_join(line)\n    print(result)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Strings.String-Split-and-Join",
        "documentation": {}
    },
    {
        "label": "swap_case",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Strings.sWAP-cASE",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Strings.sWAP-cASE",
        "peekOfCode": "def swap_case(s):\n    return s.swapcase()\nif __name__ == '__main__':\n    s = input()\n    result = swap_case(s)\n    print(result)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Strings.sWAP-cASE",
        "documentation": {}
    },
    {
        "label": "thickness",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Strings.Text-Alignment",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Strings.Text-Alignment",
        "peekOfCode": "thickness = int(input()) #This must be an odd number\nc = 'H'\n#Top Cone\nfor i in range(thickness):\n    print((c*i).rjust(thickness-1)+c+(c*i).ljust(thickness-1))\n#Top Pillars\nfor i in range(thickness+1):\n    print((c*thickness).center(thickness*2)+(c*thickness).center(thickness*6))\n#Middle Belt\nfor i in range((thickness+1)//2):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Strings.Text-Alignment",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Strings.Text-Alignment",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Strings.Text-Alignment",
        "peekOfCode": "c = 'H'\n#Top Cone\nfor i in range(thickness):\n    print((c*i).rjust(thickness-1)+c+(c*i).ljust(thickness-1))\n#Top Pillars\nfor i in range(thickness+1):\n    print((c*thickness).center(thickness*2)+(c*thickness).center(thickness*6))\n#Middle Belt\nfor i in range((thickness+1)//2):\n    print((c*thickness*5).center(thickness*6))    ",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Strings.Text-Alignment",
        "documentation": {}
    },
    {
        "label": "wrap",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Strings.Text-Wrap",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Strings.Text-Wrap",
        "peekOfCode": "def wrap(string, max_width):\n    return textwrap.fill(string, width=max_width)\nif __name__ == '__main__':\n    string, max_width = raw_input(), int(raw_input())\n    result = wrap(string, max_width)\n    print result",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Strings.Text-Wrap",
        "documentation": {}
    },
    {
        "label": "print_full_name",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Strings.What's-Your-Name",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Strings.What's-Your-Name",
        "peekOfCode": "def print_full_name(a, b):\n    print(\"Hello \"+a+\" \"+b+\"! You just delved into python.\")\nif __name__ == '__main__':\n    first_name = input()\n    last_name = input()\n    print_full_name(first_name, last_name)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Strings.What's-Your-Name",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Mod-Divmod",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Mod-Divmod",
        "peekOfCode": "a = int(input())\nb = int(input())\nprint(a//b)\nprint(a%b)\nprint(divmod(a,b))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Mod-Divmod",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Mod-Divmod",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Mod-Divmod",
        "peekOfCode": "b = int(input())\nprint(a//b)\nprint(a%b)\nprint(divmod(a,b))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.HackerRank.Python.Mod-Divmod",
        "documentation": {}
    },
    {
        "label": "check_prime",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.hashing.number_theory.prime_numbers",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.hashing.number_theory.prime_numbers",
        "peekOfCode": "def check_prime(number):\n    \"\"\"\n    it's not the best solution\n    \"\"\"\n    special_non_primes = [0, 1, 2]\n    if number in special_non_primes[:2]:\n        return 2\n    elif number == special_non_primes[-1]:\n        return 3\n    return all([number % i for i in range(2, number)])",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.hashing.number_theory.prime_numbers",
        "documentation": {}
    },
    {
        "label": "next_prime",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.hashing.number_theory.prime_numbers",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.hashing.number_theory.prime_numbers",
        "peekOfCode": "def next_prime(value, factor=1, **kwargs):\n    value = factor * value\n    first_value_val = value\n    while not check_prime(value):\n        value += 1 if not (\"desc\" in kwargs.keys() and kwargs[\"desc\"] is True) else -1\n    if value == first_value_val:\n        return next_prime(value + 1, **kwargs)\n    return value",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.hashing.number_theory.prime_numbers",
        "documentation": {}
    },
    {
        "label": "DoubleHash",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.hashing.double_hash",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.hashing.double_hash",
        "peekOfCode": "class DoubleHash(HashTable):\n    \"\"\"\n    Hash Table example with open addressing and Double Hash\n    \"\"\"\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n    def __hash_function_2(self, value, data):\n        next_prime_gt = (\n            next_prime(value % self.size_table)\n            if not check_prime(value % self.size_table)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.hashing.double_hash",
        "documentation": {}
    },
    {
        "label": "HashTable",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.hashing.hash_table",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.hashing.hash_table",
        "peekOfCode": "class HashTable:\n    \"\"\"\n    Basic Hash Table example with open addressing and linear probing\n    \"\"\"\n    def __init__(self, size_table, charge_factor=None, lim_charge=None):\n        self.size_table = size_table\n        self.values = [None] * self.size_table\n        self.lim_charge = 0.75 if lim_charge is None else lim_charge\n        self.charge_factor = 1 if charge_factor is None else charge_factor\n        self.__aux_list = []",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.hashing.hash_table",
        "documentation": {}
    },
    {
        "label": "HashTableWithLinkedList",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.hashing.hash_table_with_linked_list",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.hashing.hash_table_with_linked_list",
        "peekOfCode": "class HashTableWithLinkedList(HashTable):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n    def _set_value(self, key, data):\n        self.values[key] = deque([]) if self.values[key] is None else self.values[key]\n        self.values[key].appendleft(data)\n        self._keys[key] = self.values[key]\n    def balanced_factor(self):\n        return (\n            sum([self.charge_factor - len(slot) for slot in self.values])",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.hashing.hash_table_with_linked_list",
        "documentation": {}
    },
    {
        "label": "QuadraticProbing",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.hashing.quadratic_probing",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.hashing.quadratic_probing",
        "peekOfCode": "class QuadraticProbing(HashTable):\n    \"\"\"\n    Basic Hash Table example with open addressing using Quadratic Probing\n    \"\"\"\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n    def _collision_resolution(self, key, data=None):\n        i = 1\n        new_key = self.hash_function(key + i * i)\n        while self.values[new_key] is not None and self.values[new_key] != key:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.hashing.quadratic_probing",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.heap.binomial_heap",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.heap.binomial_heap",
        "peekOfCode": "class Node:\n    \"\"\"\n    Node in a doubly-linked binomial tree, containing:\n        - value\n        - size of left subtree\n        - link to left, right and parent nodes\n    \"\"\"\n    def __init__(self, val):\n        self.val = val\n        # Number of nodes in left subtree",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.heap.binomial_heap",
        "documentation": {}
    },
    {
        "label": "BinomialHeap",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.heap.binomial_heap",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.heap.binomial_heap",
        "peekOfCode": "class BinomialHeap:\n    r\"\"\"\n    Min-oriented priority queue implemented with the Binomial Heap data\n    structure implemented with the BinomialHeap class. It supports:\n        - Insert element in a heap with n elements: Guaranteed logn, amoratized 1\n        - Merge (meld) heaps of size m and n: O(logn + logm)\n        - Delete Min: O(logn)\n        - Peek (return min without deleting it): O(1)\n    Example:\n    Create a random permutation of 30 integers to be inserted and 19 of them deleted",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.heap.binomial_heap",
        "documentation": {}
    },
    {
        "label": "Heap",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.heap.heap",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.heap.heap",
        "peekOfCode": "class Heap:\n    \"\"\"A Max Heap Implementation\n    >>> unsorted = [103, 9, 1, 7, 11, 15, 25, 201, 209, 107, 5]\n    >>> h = Heap()\n    >>> h.build_max_heap(unsorted)\n    >>> print(h)\n    [209, 201, 25, 103, 107, 15, 1, 9, 7, 11, 5]\n    >>>\n    >>> h.extract_max()\n    209",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.heap.heap",
        "documentation": {}
    },
    {
        "label": "Heap",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.heap.heap_generic",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.heap.heap_generic",
        "peekOfCode": "class Heap:\n    \"\"\"\n    A generic Heap class, can be used as min or max by passing the key function\n    accordingly.\n    \"\"\"\n    def __init__(self, key=None):\n        # Stores actual heap items.\n        self.arr = list()\n        # Stores indexes of each item for supporting updates and deletion.\n        self.pos_map = {}",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.heap.heap_generic",
        "documentation": {}
    },
    {
        "label": "test_heap",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.heap.heap_generic",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.heap.heap_generic",
        "peekOfCode": "def test_heap() -> None:\n    \"\"\"\n    >>> h = Heap()  # Max-heap\n    >>> h.insert_item(5, 34)\n    >>> h.insert_item(6, 31)\n    >>> h.insert_item(7, 37)\n    >>> h.get_top()\n    [7, 37]\n    >>> h.extract_top()\n    [7, 37]",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.heap.heap_generic",
        "documentation": {}
    },
    {
        "label": "BinaryHeap",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.heap.max_heap",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.heap.max_heap",
        "peekOfCode": "class BinaryHeap:\n    \"\"\"\n    A max-heap implementation in Python\n    >>> binary_heap = BinaryHeap()\n    >>> binary_heap.insert(6)\n    >>> binary_heap.insert(10)\n    >>> binary_heap.insert(15)\n    >>> binary_heap.insert(12)\n    >>> binary_heap.pop()\n    15",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.heap.max_heap",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.heap.min_heap",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.heap.min_heap",
        "peekOfCode": "class Node:\n    def __init__(self, name, val):\n        self.name = name\n        self.val = val\n    def __str__(self):\n        return f\"{self.__class__.__name__}({self.name}, {self.val})\"\n    def __lt__(self, other):\n        return self.val < other.val\nclass MinHeap:\n    \"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.heap.min_heap",
        "documentation": {}
    },
    {
        "label": "MinHeap",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.heap.min_heap",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.heap.min_heap",
        "peekOfCode": "class MinHeap:\n    \"\"\"\n    >>> r = Node(\"R\", -1)\n    >>> b = Node(\"B\", 6)\n    >>> a = Node(\"A\", 3)\n    >>> x = Node(\"X\", 1)\n    >>> e = Node(\"E\", 4)\n    >>> print(b)\n    Node(B, 6)\n    >>> myMinHeap = MinHeap([r, b, a, x, e])",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.heap.min_heap",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.heap.min_heap",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.heap.min_heap",
        "peekOfCode": "r = Node(\"R\", -1)\nb = Node(\"B\", 6)\na = Node(\"A\", 3)\nx = Node(\"X\", 1)\ne = Node(\"E\", 4)\n# Use one of these two ways to generate Min-Heap\n# Generating Min-Heap from array\nmyMinHeap = MinHeap([r, b, a, x, e])\n# Generating Min-Heap by Insert method\n# myMinHeap.insert(a)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.heap.min_heap",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.heap.min_heap",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.heap.min_heap",
        "peekOfCode": "b = Node(\"B\", 6)\na = Node(\"A\", 3)\nx = Node(\"X\", 1)\ne = Node(\"E\", 4)\n# Use one of these two ways to generate Min-Heap\n# Generating Min-Heap from array\nmyMinHeap = MinHeap([r, b, a, x, e])\n# Generating Min-Heap by Insert method\n# myMinHeap.insert(a)\n# myMinHeap.insert(b)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.heap.min_heap",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.heap.min_heap",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.heap.min_heap",
        "peekOfCode": "a = Node(\"A\", 3)\nx = Node(\"X\", 1)\ne = Node(\"E\", 4)\n# Use one of these two ways to generate Min-Heap\n# Generating Min-Heap from array\nmyMinHeap = MinHeap([r, b, a, x, e])\n# Generating Min-Heap by Insert method\n# myMinHeap.insert(a)\n# myMinHeap.insert(b)\n# myMinHeap.insert(x)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.heap.min_heap",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.heap.min_heap",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.heap.min_heap",
        "peekOfCode": "x = Node(\"X\", 1)\ne = Node(\"E\", 4)\n# Use one of these two ways to generate Min-Heap\n# Generating Min-Heap from array\nmyMinHeap = MinHeap([r, b, a, x, e])\n# Generating Min-Heap by Insert method\n# myMinHeap.insert(a)\n# myMinHeap.insert(b)\n# myMinHeap.insert(x)\n# myMinHeap.insert(r)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.heap.min_heap",
        "documentation": {}
    },
    {
        "label": "e",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.heap.min_heap",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.heap.min_heap",
        "peekOfCode": "e = Node(\"E\", 4)\n# Use one of these two ways to generate Min-Heap\n# Generating Min-Heap from array\nmyMinHeap = MinHeap([r, b, a, x, e])\n# Generating Min-Heap by Insert method\n# myMinHeap.insert(a)\n# myMinHeap.insert(b)\n# myMinHeap.insert(x)\n# myMinHeap.insert(r)\n# myMinHeap.insert(e)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.heap.min_heap",
        "documentation": {}
    },
    {
        "label": "myMinHeap",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.heap.min_heap",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.heap.min_heap",
        "peekOfCode": "myMinHeap = MinHeap([r, b, a, x, e])\n# Generating Min-Heap by Insert method\n# myMinHeap.insert(a)\n# myMinHeap.insert(b)\n# myMinHeap.insert(x)\n# myMinHeap.insert(r)\n# myMinHeap.insert(e)\n# Before\nprint(\"Min Heap - before decrease key\")\nfor i in myMinHeap.heap:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.heap.min_heap",
        "documentation": {}
    },
    {
        "label": "RandomizedHeapNode",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.heap.randomized_heap",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.heap.randomized_heap",
        "peekOfCode": "class RandomizedHeapNode(Generic[T]):\n    \"\"\"\n    One node of the randomized heap. Contains the value and references to\n    two children.\n    \"\"\"\n    def __init__(self, value: T) -> None:\n        self._value: T = value\n        self.left: Optional[RandomizedHeapNode[T]] = None\n        self.right: Optional[RandomizedHeapNode[T]] = None\n    @property",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.heap.randomized_heap",
        "documentation": {}
    },
    {
        "label": "RandomizedHeap",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.heap.randomized_heap",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.heap.randomized_heap",
        "peekOfCode": "class RandomizedHeap(Generic[T]):\n    \"\"\"\n    A data structure that allows inserting a new value and to pop the smallest\n    values. Both operations take O(logN) time where N is the size of the\n    structure.\n    Wiki: https://en.wikipedia.org/wiki/Randomized_meldable_heap\n    >>> RandomizedHeap([2, 3, 1, 5, 1, 7]).to_sorted_list()\n    [1, 1, 2, 3, 5, 7]\n    >>> rh = RandomizedHeap()\n    >>> rh.pop()",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.heap.randomized_heap",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.heap.randomized_heap",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.heap.randomized_heap",
        "peekOfCode": "T = TypeVar(\"T\")\nclass RandomizedHeapNode(Generic[T]):\n    \"\"\"\n    One node of the randomized heap. Contains the value and references to\n    two children.\n    \"\"\"\n    def __init__(self, value: T) -> None:\n        self._value: T = value\n        self.left: Optional[RandomizedHeapNode[T]] = None\n        self.right: Optional[RandomizedHeapNode[T]] = None",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.heap.randomized_heap",
        "documentation": {}
    },
    {
        "label": "SkewNode",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.heap.skew_heap",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.heap.skew_heap",
        "peekOfCode": "class SkewNode(Generic[T]):\n    \"\"\"\n    One node of the skew heap. Contains the value and references to\n    two children.\n    \"\"\"\n    def __init__(self, value: T) -> None:\n        self._value: T = value\n        self.left: Optional[SkewNode[T]] = None\n        self.right: Optional[SkewNode[T]] = None\n    @property",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.heap.skew_heap",
        "documentation": {}
    },
    {
        "label": "SkewHeap",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.heap.skew_heap",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.heap.skew_heap",
        "peekOfCode": "class SkewHeap(Generic[T]):\n    \"\"\"\n    A data structure that allows inserting a new value and to pop the smallest\n    values. Both operations take O(logN) time where N is the size of the\n    structure.\n    Wiki: https://en.wikipedia.org/wiki/Skew_heap\n    Visualisation: https://www.cs.usfca.edu/~galles/visualization/SkewHeap.html\n    >>> list(SkewHeap([2, 3, 1, 5, 1, 7]))\n    [1, 1, 2, 3, 5, 7]\n    >>> sh = SkewHeap()",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.heap.skew_heap",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.heap.skew_heap",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.heap.skew_heap",
        "peekOfCode": "T = TypeVar(\"T\")\nclass SkewNode(Generic[T]):\n    \"\"\"\n    One node of the skew heap. Contains the value and references to\n    two children.\n    \"\"\"\n    def __init__(self, value: T) -> None:\n        self._value: T = value\n        self.left: Optional[SkewNode[T]] = None\n        self.right: Optional[SkewNode[T]] = None",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.heap.skew_heap",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.InterviewBit.Arrays.Largest-Number",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.InterviewBit.Arrays.Largest-Number",
        "peekOfCode": "class Solution:\n    # @param A : tuple of integers\n    # @return a strings\n    def largestNumber(self, A):\n        A = [str(item) for item in A]\n        A = sorted(A, key = lambda s:s*9 )[::-1]\n        return str(int(''.join(A)))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.InterviewBit.Arrays.Largest-Number",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.InterviewBit.Arrays.Min-Steps-in-Infinite-Grid",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.InterviewBit.Arrays.Min-Steps-in-Infinite-Grid",
        "peekOfCode": "class Solution:\n    # @param A : list of integers\n    # @param B : list of integers\n    # @return an integer\n    def coverPoints(self, A, B):\n        moves = 0\n        for i in range(len(A)-1):\n            if abs(A[i]-A[i+1]) <= abs(B[i]-B[i+1]):\n                moves += abs(B[i]-B[i+1])\n            else:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.InterviewBit.Arrays.Min-Steps-in-Infinite-Grid",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.InterviewBit.Arrays.Noble-Integer",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.InterviewBit.Arrays.Noble-Integer",
        "peekOfCode": "class Solution:\n    # @param A : list of integers\n    # @return an integer\n    def solve(self, A):\n        A = [item for item in A if item>=0]\n        A.sort()\n        for i in range(len(A)-1):\n            if A[i] == A[i+1]:\n                continue\n            if A[i] == len(A)-i-1:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.InterviewBit.Arrays.Noble-Integer",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.InterviewBit.Arrays.Pascal-Triangle",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.InterviewBit.Arrays.Pascal-Triangle",
        "peekOfCode": "class Solution:\n    # @param A : integer\n    # @return a list of list of integers\n    def solve(self, A):\n        pas = []\n        if A == 0:\n            pas = []\n        elif A == 1:\n            pas = [[1]]\n        elif A == 2:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.InterviewBit.Arrays.Pascal-Triangle",
        "documentation": {}
    },
    {
        "label": "Solution1",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.InterviewBit.Arrays.Wave-Array",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.InterviewBit.Arrays.Wave-Array",
        "peekOfCode": "class Solution1:\n    # @param A : list of integers\n    # @return a list of integers\n    def wave(self, A):\n        A.sort()\n        for i in range(0, len(A)-1, 2):\n            A[i], A[i+1] = A[i+1], A[i]\n        return A\n# O(n) Solution\nclass Solution2:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.InterviewBit.Arrays.Wave-Array",
        "documentation": {}
    },
    {
        "label": "Solution2",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.InterviewBit.Arrays.Wave-Array",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.InterviewBit.Arrays.Wave-Array",
        "peekOfCode": "class Solution2:\n    # @param A : list of integers\n    # @return a list of integers\n    def wave(self, A):\n        n = len(A)\n        for i in range(0, n, 2):\n            if (i > 0) and A[i] < A[i-1]:\n                A[i], A[i-1] = A[i-1], A[i]\n            if i < (n-1) and A[i] < A[i+1]:\n                A[i], A[i+1] = A[i+1], A[i]",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.InterviewBit.Arrays.Wave-Array",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.InterviewBit.Math.fizzbuzz",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.InterviewBit.Math.fizzbuzz",
        "peekOfCode": "class Solution:\n    # @param A : integer\n    # @return a list of strings\n    def fizzBuzz(self, A):\n        res = []\n        for i in range(1, A+1):\n            if i % 15 == 0:\n               res.append(\"FizzBuzz\")\n               continue\n            if i % 3 == 0:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.InterviewBit.Math.fizzbuzz",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.InterviewBit.Math.trailing-zeros-in-factorial",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.InterviewBit.Math.trailing-zeros-in-factorial",
        "peekOfCode": "class Solution:\n    # @param A : integer\n    # @return an integer\n    def trailingZeroes(self, A):\n        five = 0\n        i = 5\n        while (A/i >= 1):\n            five += int(A/i)\n            i *= 5\n        return five",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.InterviewBit.Math.trailing-zeros-in-factorial",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.InterviewBit.Stacks and Queues.Balanced-Paranthesis",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.InterviewBit.Stacks and Queues.Balanced-Paranthesis",
        "peekOfCode": "class Solution:\n    # @param A : string\n    # @return an integer\n    def solve(self, A):\n        stack = []\n        c = Counter(A)\n        for i in A:\n            if i == '(':\n                stack.append('(')\n                continue",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.InterviewBit.Stacks and Queues.Balanced-Paranthesis",
        "documentation": {}
    },
    {
        "label": "NaiveSolution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.InterviewBit.Stacks and Queues.Max-Special-Product",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.InterviewBit.Stacks and Queues.Max-Special-Product",
        "peekOfCode": "class NaiveSolution:\n    # Naive Solution, TLE\n    # @param A : list of integers\n    # @return an integer\n    def maxSpecialProduct(self, A):\n        ls = 0\n        rs = 0\n        maxProduct = 0\n        sp = 0\n        for i in range(1, len(A)-1):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.InterviewBit.Stacks and Queues.Max-Special-Product",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.InterviewBit.Stacks and Queues.Nearest-Smallest-Element",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.InterviewBit.Stacks and Queues.Nearest-Smallest-Element",
        "peekOfCode": "class Solution:\n    # @param A : list of integers\n    # @return a list of integers\n    def prevSmaller(self, A):\n        G = []\n        stack = []\n        for i in range(len(A)):\n            while stack and stack[-1] >= A[i]:\n                stack.pop()\n            if not stack:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.InterviewBit.Stacks and Queues.Nearest-Smallest-Element",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.InterviewBit.Stacks and Queues.Redundant-Braces",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.InterviewBit.Stacks and Queues.Redundant-Braces",
        "peekOfCode": "class Solution:\n    # @param A : string\n    # @return an integer\n    def braces(self, A):\n        stack = []\n        ops = set(['*', '+', '-', '/'])\n        for i in A:\n            if i == '(':\n                stack.append('(')\n                continue",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.InterviewBit.Stacks and Queues.Redundant-Braces",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.InterviewBit.Stacks and Queues.Simplify-Directory-Path",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.InterviewBit.Stacks and Queues.Simplify-Directory-Path",
        "peekOfCode": "class Solution:\n    # @param A : string\n    # @return a strings\n    def simplifyPath(self, A):\n        A = A.split('/')\n        op = ''\n        stack = []\n        for i in range(len(A)):\n            if A[i].isalpha():\n                stack.append(A[i])",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.InterviewBit.Stacks and Queues.Simplify-Directory-Path",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.InterviewBit.Two Pointers.3Sum",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.InterviewBit.Two Pointers.3Sum",
        "peekOfCode": "class Solution:\n    # @param A : list of integers\n    # @param B : integer\n    # @return an integer\n    def threeSumClosest(self, A, B):\n        A.sort()\n        cs = math.inf\n        for i in range(0, len(A)-2):\n            j = i + 1\n            k = len(A) - 1",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.InterviewBit.Two Pointers.3Sum",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.InterviewBit.Two Pointers.Intersection-of-Sorted-Arrays",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.InterviewBit.Two Pointers.Intersection-of-Sorted-Arrays",
        "peekOfCode": "class Solution:\n    # @param A : tuple of integers\n    # @param B : tuple of integers\n    # @return a list of integers\n    def intersect(self, A, B):\n        s1 = 0\n        s2 = 0\n        e1 = len(A)\n        e2 = len(B)\n        intersection = []",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.InterviewBit.Two Pointers.Intersection-of-Sorted-Arrays",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.InterviewBit.Two Pointers.Merge-Two-Sorted-Lists-II",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.InterviewBit.Two Pointers.Merge-Two-Sorted-Lists-II",
        "peekOfCode": "class Solution:\n    # @param A : list of integers\n    # @param B : list of integers\n    def merge(self, A, B):\n        e2 = len(B)\n        s1 = 0\n        s2 = 0\n        while s2 < e2 and s1 < len(A):\n            if B[s2] <= A[s1]:\n                A.insert(s1, B[s2])",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.InterviewBit.Two Pointers.Merge-Two-Sorted-Lists-II",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.Dynamic Programming.ClimbingStairs",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.Dynamic Programming.ClimbingStairs",
        "peekOfCode": "class Solution:\n    def climbStairs(self, n: int) -> int:\n        def climb(i, n, memo):\n            if(i>n):\n                return 0\n            if(i==n):\n                return 1\n            if(memo[i]>0):\n                return memo[i]\n            memo[i] = climb(i+1, n, memo) + climb(i+2, n, memo)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.Dynamic Programming.ClimbingStairs",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.Dynamic Programming.Fibonacci",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.Dynamic Programming.Fibonacci",
        "peekOfCode": "class Solution:\n    def fib(self, N: int) -> int:\n        if(N==0):\n            return 0\n        if(N==1):\n            return 1\n        dp = [0 for _ in range(N+1)]\n        dp[1] = 1\n        for i in range(2, N+1):\n            dp[i] = dp[i-1] + dp[i-2]",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.Dynamic Programming.Fibonacci",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.Dynamic Programming.MaximumSubArray",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.Dynamic Programming.MaximumSubArray",
        "peekOfCode": "class Solution:\n    def maxSubArray(self, nums: List[int]) -> int:\n        for i in range(1, len(nums)):            \n            if nums[i-1] > 0:\n                nums[i] += nums[i-1]\n        return max(nums)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.Dynamic Programming.MaximumSubArray",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.Dynamic Programming.MinimumPathSum",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.Dynamic Programming.MinimumPathSum",
        "peekOfCode": "class Solution:\n    def minPathSum(self, grid: List[List[int]]) -> int:\n        m, n = len(grid), len(grid[0])\n        for i in range(1, m):\n            grid[i][0] += grid[i-1][0]\n        for j in range(1, n):\n            grid[0][j] += grid[0][j-1]\n        for i in range(1, m):\n            for j in range(1, n):\n                grid[i][j] += min(grid[i-1][j], grid[i][j-1])           ",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.Dynamic Programming.MinimumPathSum",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.Dynamic Programming.NthTribonacci",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.Dynamic Programming.NthTribonacci",
        "peekOfCode": "class Solution:\n    def tribonacci(self, n: int) -> int:\n        if(n==0):\n            return 0\n        if (n==1 or n==2):\n            return 1\n        dp = [0 for _ in range(n+1)]\n        dp[0] = 0\n        dp[1] = 1\n        dp[2] = 1",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.Dynamic Programming.NthTribonacci",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.Dynamic Programming.UniquePaths",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.Dynamic Programming.UniquePaths",
        "peekOfCode": "class Solution:\n    def uniquePaths(self, m: int, n: int) -> int:\n        if(m==1 and n==1):\n            return 1\n        grid = [[0 for _ in range(n)] for _ in range(m)]\n        for i in range(1,m):\n            grid[i][0] = 1\n        for i in range(1,n):\n            grid[0][i] = 1\n        for i in range(1,m):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.Dynamic Programming.UniquePaths",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.AddTwoNumbers",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.AddTwoNumbers",
        "peekOfCode": "class Solution:\n    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:\n        c = 0\n        res = []\n        while(l1 or l2):\n            s = 0 + c\n            if l1:\n                s += int(l1.val)\n                l1 = l1.next\n            if l2:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.AddTwoNumbers",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.AssignCookies",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.AssignCookies",
        "peekOfCode": "class Solution:\n    def findContentChildren(self, g: List[int], s: List[int]) -> int:\n        g = sorted(g)\n        s = sorted(s)\n        content = 0\n        while s and g:\n            if s[-1] >= g[-1]:\n                s.pop()\n                content += 1\n            g.pop()",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.AssignCookies",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.BackSpaceStringCompare",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.BackSpaceStringCompare",
        "peekOfCode": "class Solution:\n    def backspaceCompare(self, S: str, T: str) -> bool:\n        def deleteBackSpace(X):\n            stack = []\n            for i in X:\n                if not i=='#':\n                    stack.append(i)\n                elif(len(stack)==0):\n                    continue\n                else:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.BackSpaceStringCompare",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.BalanceaBST",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.BalanceaBST",
        "peekOfCode": "class Solution:\n    def balanceBST(self, root: TreeNode) -> TreeNode:\n        result = []\n        def inorder(node):\n            if node:\n                if node.left!=None:\n                    inorder(node.left)\n                result.append(int(node.val))\n                if node.right!=None:\n                    inorder(node.right)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.BalanceaBST",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.BestTimeToBuyAndSellStockII",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.BestTimeToBuyAndSellStockII",
        "peekOfCode": "class Solution:\n    def maxProfit(self, prices: List[int]) -> int:\n        profit = 0\n        for i in range(0, len(prices)-1):\n            if(prices[i+1] > prices[i]):\n                profit += prices[i+1] - prices[i]\n        return profit",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.BestTimeToBuyAndSellStockII",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.BitwiseANDofNumbers",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.BitwiseANDofNumbers",
        "peekOfCode": "class Solution:\n    def rangeBitwiseAnd(self, m: int, n: int) -> int:\n        ans = m\n        if not m==0:\n            x = math.log2(m)\n            x = int(x)+1\n            x = 2**x\n        else:\n            return 0\n        if(n>=x):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.BitwiseANDofNumbers",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.BSTtoGST",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.BSTtoGST",
        "peekOfCode": "class Solution:\n    def convertBST(self, root: TreeNode) -> TreeNode:\n        self.ans = 0\n        def add(node):\n            if not node:\n                return\n            add(node.right)\n            self.ans += node.val\n            node.val = self.ans\n            add(node.left)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.BSTtoGST",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.BTInOrderTraversal",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.BTInOrderTraversal",
        "peekOfCode": "class Solution:\n    def inorderTraversal(self, root: TreeNode) -> List[int]:\n        io = []\n        if(root==None):\n            return []\n        def inorder(x):\n            if(x.left!=None):\n                inorder(x.left)\n            io.append(int(x.val))\n            if(x.right!=None):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.BTInOrderTraversal",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.BTInOrderTraversal",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.BTInOrderTraversal",
        "peekOfCode": "class Solution:\n    def inorderTraversal(self, root: TreeNode) -> List[int]:\n        if(root==None):\n            return []\n        stack = []\n        io = []\n        c = root\n        while(c!=None or len(stack)!=0):\n            while(c!=None):\n                stack.append(c)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.BTInOrderTraversal",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.BTPostOrderTraversal",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.BTPostOrderTraversal",
        "peekOfCode": "class Solution:\n    def postorderTraversal(self, root: TreeNode) -> List[int]:\n        if (root==None):\n            return []\n        po = []\n        def postorder(x):\n            if not x:\n                return\n            postorder(x.left)\n            postorder(x.right)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.BTPostOrderTraversal",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.BTPreOrderTraversal",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.BTPreOrderTraversal",
        "peekOfCode": "class Solution:                \n    def preorderTraversal(self, root: TreeNode) -> List[int]:\n        if(root==None):\n            return []\n        po = []\n        def preorder(x):\n            if x:\n                po.append(x.val)\n                preorder(x.left)\n                preorder(x.right)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.BTPreOrderTraversal",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.BTPreOrderTraversal",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.BTPreOrderTraversal",
        "peekOfCode": "class Solution:                \n    def preorderTraversal(self, root: TreeNode) -> List[int]:\n        if(root==None):\n            return []\n        stack = []\n        po = []\n        c = root\n        while(c!=None or len(stack)!=0):\n            while(c!=None):\n                stack.append(c)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.BTPreOrderTraversal",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.CheckIfAStringCanBreakAnotherString",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.CheckIfAStringCanBreakAnotherString",
        "peekOfCode": "class Solution:\n    def count(self, d1, d2):\n        s = 0\n        for i in 'abcdefghijklmnopqrstuvwxyz':\n            s += d1[i] - d2[i]\n            if s < 0:\n                return False\n        return True\n    def checkIfCanBreak(self, s1: str, s2: str) -> bool:\n        d1 = Counter(s1)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.CheckIfAStringCanBreakAnotherString",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.ContainerWithMostWater",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.ContainerWithMostWater",
        "peekOfCode": "class Solution:\n    def maxArea(self, height: List[int]) -> int:\n        i = 0\n        j = len(height)-1\n        maxarea = 0\n        while(i!=j):\n            a = (j-i)*(min(height[i], height[j]))\n            if(a>maxarea):\n                maxarea = a\n            if(height[i]>height[j]):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.ContainerWithMostWater",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.ContainsDuplicate",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.ContainsDuplicate",
        "peekOfCode": "class Solution:\n    def containsDuplicate(self, nums: List[int]) -> bool:\n        return not len(nums) == len(set(nums))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.ContainsDuplicate",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.ContiguousArray",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.ContiguousArray",
        "peekOfCode": "class Solution:\n    def findMaxLength(self, nums: List[int]) -> int:\n        dic = { 0:-1 }\n        ps = 0\n        max_length = 0\n        for idx, number in enumerate(nums):\n            if number:\n                ps += 1\n            else:\n                ps -= 1",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.ContiguousArray",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.CountCompleteTreeNode",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.CountCompleteTreeNode",
        "peekOfCode": "class Solution:\n    def countNodes(self, root: TreeNode) -> int:\n        if not root:\n            return 0\n        self.c = 0\n        def count(node):\n            if node:\n                if node.left:\n                    count(node.left)\n                if node.right:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.CountCompleteTreeNode",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.CountingBits",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.CountingBits",
        "peekOfCode": "class Solution:\n    def countBits(self, num: int) -> List[int]:\n        ans = [0]\n        offset = 1\n        for i in range(1, num+1):\n            if(offset*2 == i):\n                offset = i\n            ans.append(ans[i-offset]+1)\n        return ans",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.CountingBits",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.CountingElements",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.CountingElements",
        "peekOfCode": "class Solution:\n    def countElements(self, arr: List[int]) -> int:\n        s = set()\n        s = set(arr)\n        c = 0\n        for i in range(len(arr)):\n            if(arr[i]+1 in s):\n                c += 1\n        return c",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.CountingElements",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.CourseSchedule",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.CourseSchedule",
        "peekOfCode": "class Solution:\n    def canFinish(self, numCourses, prerequisites) -> bool:\n        adjList = [[] for _ in range(numCourses)]\n        inDegree = [0 for _ in range(numCourses)]\n        queue = deque()\n        visited = 0\n        for i in range(len(prerequisites)):\n            adjList[prerequisites[i][0]].append(prerequisites[i][1])\n        for i in range(numCourses):\n            for j in adjList[i]:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.CourseSchedule",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.DeleteColumnsToMakeSorted",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.DeleteColumnsToMakeSorted",
        "peekOfCode": "class Solution:\n    def minDeletionSize(self, A: List[str]) -> int:\n        s = 0\n        for col in zip(*A):\n            if any(col[i] > col[i+1] for i in range(len(col)-1)):\n                s += 1\n        return s",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.DeleteColumnsToMakeSorted",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.DeleteNodeInABST",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.DeleteNodeInABST",
        "peekOfCode": "class Solution:\n    def deleteNode(self, root, key):\n        if not root:\n            return\n        if key > root.val:\n            root.right = self.deleteNode(root.right, key)\n        elif key < root.val:\n            root.left = self.deleteNode(root.left, key)\n        else:\n            if not root.left:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.DeleteNodeInABST",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.DeleteNodeInALinkedList",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.DeleteNodeInALinkedList",
        "peekOfCode": "class Solution:\n    def deleteNode(self, node):\n        node.val = node.next.val\n        node.next = node.next.next",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.DeleteNodeInALinkedList",
        "documentation": {}
    },
    {
        "label": "MyCircularDeque",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.DesignCircularDeque",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.DesignCircularDeque",
        "peekOfCode": "class MyCircularDeque:\n    def __init__(self, k: int):\n        \"\"\"\n        Initialize your data structure here. Set the size of the deque to be k.\n        \"\"\"\n        self.maxsize = k\n        self.size = 0\n        self.decq = [0]*k\n        self.front = self.rear = -1\n    def insertFront(self, value: int) -> bool:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.DesignCircularDeque",
        "documentation": {}
    },
    {
        "label": "MyCircularDeque",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.DesignCircularDeque",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.DesignCircularDeque",
        "peekOfCode": "class MyCircularDeque:\n    def __init__(self, k: int):\n        \"\"\"\n        Initialize your data structure here. Set the size of the deque to be k.\n        \"\"\"\n        self.decq = []\n        self.maxsize = k\n    def insertFront(self, value: int) -> bool:\n        \"\"\"\n        Adds an item at the front of Deque. Return true if the operation is successful.",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.DesignCircularDeque",
        "documentation": {}
    },
    {
        "label": "MyCircularQueue",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.DesignCircularQueue",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.DesignCircularQueue",
        "peekOfCode": "class MyCircularQueue:\n    def __init__(self, k: int):\n        self.size = 0\n        self.maxsize = k\n        self.cq = [0]*k   \n        self.front = self.rear = -1\n    def enQueue(self, value: int) -> bool:\n        if self.size == self.maxsize:\n            return False\n        else:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.DesignCircularQueue",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.DiameterOfBinaryTree",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.DiameterOfBinaryTree",
        "peekOfCode": "class Solution:\n    def diameterOfBinaryTree(self, root: TreeNode) -> int:\n        self.depth = 1\n        def findDepth(first):\n            if not first:\n                return 0\n            ld = findDepth(first.left)\n            rd = findDepth(first.right)\n            self.depth = max(self.depth, ld+rd+1)\n            return max(ld,rd) + 1",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.DiameterOfBinaryTree",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.FactorialTrailingZeros",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.FactorialTrailingZeros",
        "peekOfCode": "class Solution:\n    def trailingZeroes(self, n: int) -> int:\n        count = 0\n        m = 5\n        while (n/m >= 1):\n            count += int(n/m)\n            m *= 5\n        return count",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.FactorialTrailingZeros",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.Find-Botton-Left-Tree-Value",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.Find-Botton-Left-Tree-Value",
        "peekOfCode": "class Solution:\n    def findBottomLeftValue(self, root: TreeNode) -> int:\n        queue = deque([root])\n        visited = set()\n        while queue:\n            size = len(queue)\n            leftmost = math.inf\n            for i in range(size):\n                node = queue.popleft()\n                if leftmost == math.inf:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.Find-Botton-Left-Tree-Value",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.FindDuplicateSubTrees",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.FindDuplicateSubTrees",
        "peekOfCode": "class Solution:\n    def findDuplicateSubtrees(self, root: TreeNode) -> List[TreeNode]:\n        tree = collections.defaultdict()\n        tree.default_factory = tree.__len__\n        c = collections.Counter()\n        anslist = []\n        def find(node):\n            if node:\n                tid = tree[node.val, find(node.left), find(node.right)]\n                c[tid] += 1",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.FindDuplicateSubTrees",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.FirstUniqueCharacterInAString",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.FirstUniqueCharacterInAString",
        "peekOfCode": "class Solution:\n    def firstUniqChar(self, s: str) -> int:\n        c = Counter(s)\n        for i in range(len(s)):\n            if c[s[i]] == 1:\n                return i\n        return -1",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.FirstUniqueCharacterInAString",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.FizzBuzz",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.FizzBuzz",
        "peekOfCode": "class Solution:\n    def fizzBuzz(self, n: int) -> List[str]:\n        res = []\n        for i in range(1, n+1):\n            if i % 3 == 0 and i % 5 == 0:\n                res.append(\"FizzBuzz\")\n            elif i % 3 == 0:\n                res.append(\"Fizz\")\n            elif i % 5 == 0:\n                res.append(\"Buzz\")",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.FizzBuzz",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.GroupAnagrams",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.GroupAnagrams",
        "peekOfCode": "class Solution:\n    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:\n        word = collections.defaultdict(list)\n        for s in strs:\n            word[tuple(sorted(s))].append(s)\n        return word.values()",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.GroupAnagrams",
        "documentation": {}
    },
    {
        "label": "MyQueue",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.ImplementQueueUsingStacks",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.ImplementQueueUsingStacks",
        "peekOfCode": "class MyQueue:\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.s1 = []\n        self.s2 = []\n    def push(self, x: int) -> None:\n        \"\"\"\n        Push element x to the back of queue.",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.ImplementQueueUsingStacks",
        "documentation": {}
    },
    {
        "label": "MyStack",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.ImplementStackUsingQueues",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.ImplementStackUsingQueues",
        "peekOfCode": "class MyStack:\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.q1 = Queue(maxsize=0)\n        self.q2 = Queue(maxsize=0)\n    def push(self, x: int) -> None:\n        \"\"\"\n        Push element x onto stack.",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.ImplementStackUsingQueues",
        "documentation": {}
    },
    {
        "label": "MyStack",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.ImplementStackUsingQueues",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.ImplementStackUsingQueues",
        "peekOfCode": "class MyStack:\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.q = deque()\n    def push(self, x: int) -> None:\n        \"\"\"\n        Push element x onto stack.\n        \"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.ImplementStackUsingQueues",
        "documentation": {}
    },
    {
        "label": "CustomStack",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.IncrementStack",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.IncrementStack",
        "peekOfCode": "class CustomStack:\n    def __init__(self, maxSize: int):\n        self.stack = []\n        self.maxSize = maxSize\n    def push(self, x: int) -> None:\n        if(len(self.stack) < self.maxSize):\n            self.stack.append(x)\n    def pop(self) -> int:\n        if(len(self.stack)!=0):\n            return self.stack.pop()",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.IncrementStack",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.IntegerReplacement",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.IntegerReplacement",
        "peekOfCode": "class Solution:\n    def integerReplacement(self, n: int) -> int:\n        s = 0\n        while(n!=1):\n            if(n%2==0):\n                n //= 2\n                s += 1\n                continue\n            if(n==3):\n                return s+2",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.IntegerReplacement",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.IntegerToRoman",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.IntegerToRoman",
        "peekOfCode": "class Solution:\n    def intToRoman(self, num: int) -> str:\n        dic = { 1000:'M', 900:'CM', 500:'D', 400:'CD', 100:'C', 90:'XC', 50:'L', 40:'XL', 10:'X', 9:'IX', 5:'V', 4:'IV', 1:'I' }\n        ans = ''\n        for i in dic:\n            while num>=i:\n                ans += dic[i]\n                num -= i\n        return ans",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.IntegerToRoman",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.IntersectionOfTwoArraysII",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.IntersectionOfTwoArraysII",
        "peekOfCode": "class Solution:\n    def intersect(self, nums1: List[int], nums2: List[int]) -> List[int]:\n        if len(nums1) > len(nums2):\n            i = 0\n            while i < len(nums2):\n                if nums2[i] in set(nums1):\n                    nums1.remove(nums2[i])\n                    i += 1 \n                else:\n                    nums2.remove(nums2[i])",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.IntersectionOfTwoArraysII",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.IntersectionOfTwoArraysII",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.IntersectionOfTwoArraysII",
        "peekOfCode": "class Solution:\n    def intersect(self, nums1: List[int], nums2: List[int]) -> List[int]:\n        return list((Counter(nums1)&Counter(nums2)).elements())",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.IntersectionOfTwoArraysII",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.InvertBinaryTree",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.InvertBinaryTree",
        "peekOfCode": "class Solution:\n    def invertTree(self, root: TreeNode) -> TreeNode:\n        def invert(node):\n            if node.left:\n                invert(node.left)\n            if node.right:\n                invert(node.right)\n            temp = node.left\n            node.left = node.right\n            node.right = temp",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.InvertBinaryTree",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.IsSubsequence",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.IsSubsequence",
        "peekOfCode": "class Solution: \n    def isSubsequence(self, s: str, t: str) -> bool:\n        if len(s) == 0:\n            return True\n        if len(t) == 0:\n            return False\n        sp = 0 \n        for tc in t:\n            if s[sp] == tc:\n                sp += 1",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.IsSubsequence",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.LastStoneWeight",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.LastStoneWeight",
        "peekOfCode": "class Solution:\n    def lastStoneWeight(self, stones: List[int]) -> int:\n        while(len(stones)!=1 and len(stones)!=0):\n            stones = sorted(stones)\n            t = abs(stones[-1]-stones[-2])\n            if(t!=0):\n                stones.pop()\n                stones[-1] = t\n            else:\n                stones.pop()",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.LastStoneWeight",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.Lemonade-Change",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.Lemonade-Change",
        "peekOfCode": "class Solution:\n    def lemonadeChange(self, bills: List[int]) -> bool:\n        denom = {\n            5: 0,\n            10: 0,\n            20: 0\n        }\n        for i in range(len(bills)):\n            denom[bills[i]] += 1\n            if bills[i] > 5:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.Lemonade-Change",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.LongestCommonPrefix",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.LongestCommonPrefix",
        "peekOfCode": "class Solution:\n    def longestCommonPrefix(self, strs: List[str]) -> str:\n        x = 0\n        for i in zip(*strs):\n            r = all(a == i[0] for a in i)\n            if r:\n                x += 1\n            else:\n                break\n        return strs[0][0:x] if x else ''",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.LongestCommonPrefix",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.MaximizeSumOfArrayAfterKNegations",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.MaximizeSumOfArrayAfterKNegations",
        "peekOfCode": "class Solution:\n    def largestSumAfterKNegations(self, A: List[int], K: int) -> int:\n        A = sorted(A)\n        for i in range(len(A)):\n            if A[i] < 0:\n                A[i] = -A[i]\n                K -= 1\n            elif A[i] >= 0:\n                if K % 2 == 0:\n                    break",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.MaximizeSumOfArrayAfterKNegations",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.MergeTwoSortedLists",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.MergeTwoSortedLists",
        "peekOfCode": "class Solution:\n    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:\n        dummy = l3 = ListNode(0)\n        while l1 and l2:\n            if l1.val > l2.val:\n                l3.next = ListNode(l2.val)\n                l3 = l3.next\n                l2 = l2.next\n            else:\n                l3.next = ListNode(l1.val)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.MergeTwoSortedLists",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.MergeTwoSortedLists",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.MergeTwoSortedLists",
        "peekOfCode": "class Solution:\n    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:\n        head = l3 = ListNode()\n        while l1 and l2:\n            if l1.val < l2.val:\n                l3.next = ListNode(l1.val)\n                l1 = l1.next\n                l3 = l3.next\n            else:\n                l3.next = ListNode(l2.val)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.MergeTwoSortedLists",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.MiddleOfTheLinkedList",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.MiddleOfTheLinkedList",
        "peekOfCode": "class Solution:\n    def middleNode(self, head: ListNode) -> ListNode:\n        A = [head]\n        while A[-1].next:\n            A.append(A[-1].next)\n        return A[len(A)//2]\n# Solution using Slow and Fast Pointers\nclass Solution:\n    def middleNode(self, head: ListNode) -> ListNode:\n        slowPointer = head",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.MiddleOfTheLinkedList",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.MiddleOfTheLinkedList",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.MiddleOfTheLinkedList",
        "peekOfCode": "class Solution:\n    def middleNode(self, head: ListNode) -> ListNode:\n        slowPointer = head\n        fastPointer = head\n        while(fastPointer and fastPointer.next):\n            slowPointer = slowPointer.next\n            fastPointer = fastPointer.next.next\n        return slowPointer",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.MiddleOfTheLinkedList",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.MinimumSubsequenceInNonIncreasingOrder",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.MinimumSubsequenceInNonIncreasingOrder",
        "peekOfCode": "class Solution:\n    def minSubsequence(self, nums: List[int]) -> List[int]:\n        nums = sorted(nums)[::-1]\n        x = sum(nums)\n        s = 0\n        if len(nums) == 1:\n            return nums\n        for i in range(len(nums)+1):\n            s += nums[i]\n            if s > x-s:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.MinimumSubsequenceInNonIncreasingOrder",
        "documentation": {}
    },
    {
        "label": "MinStack",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.MinStack",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.MinStack",
        "peekOfCode": "class MinStack:\n    def __init__(self):\n        \"\"\"\n        initialize your data structure here.\n        \"\"\"\n        self.stack = []\n        self.min = math.inf\n    def push(self, x: int) -> None:\n        self.x = x\n        self.stack.append(x)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.MinStack",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.MonotonicArray",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.MonotonicArray",
        "peekOfCode": "class Solution:\n    def isMonotonic(self, A: List[int]) -> bool:\n        inc = True\n        dec = True\n        for i in range(0, len(A)-1):\n            if(A[i] > A[i+1]):\n                inc = False\n            if(A[i] < A[i+1]):\n                dec = False\n        return inc or dec",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.MonotonicArray",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.MoveZeroes",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.MoveZeroes",
        "peekOfCode": "class Solution:\n    def moveZeroes(self, nums: List[int]) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        \"\"\"\n        t = nums.count(0)\n        nzpos = 0\n        if(t==0):\n            return nums\n        for i in range(0, len(nums)):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.MoveZeroes",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.Numberof1Bits",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.Numberof1Bits",
        "peekOfCode": "class Solution:\n    def hammingWeight(self, n: int) -> int:\n        return (bin(n).count('1'))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.Numberof1Bits",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.NumberOfIslands",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.NumberOfIslands",
        "peekOfCode": "class Solution:\n    def numIslands(self, grid) -> int:\n        if not grid:\n            return 0\n        r = len(grid)\n        c = len(grid[0])\n        queue = deque()\n        islands = 0\n        for i in range(r):\n            for j in range(c):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.NumberOfIslands",
        "documentation": {}
    },
    {
        "label": "RecentCounter",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.NumberOfRecentCalls",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.NumberOfRecentCalls",
        "peekOfCode": "class RecentCounter:\n    def __init__(self):\n        self.q = collections.deque()\n    def ping(self, t: int) -> int:\n        self.q.append(t)\n        while self.q[0] < t-3000:\n            self.q.popleft()\n        return len(self.q)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.NumberOfRecentCalls",
        "documentation": {}
    },
    {
        "label": "Solution1",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.PalindromeLinkedList",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.PalindromeLinkedList",
        "peekOfCode": "class Solution1:\n    def isPalindrome(self, head: ListNode) -> bool:\n        temp = head\n        stack = []\n        l = 0\n        while temp:\n            l += 1\n            temp = temp.next\n        temp = head\n        for i in range(0, l//2):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.PalindromeLinkedList",
        "documentation": {}
    },
    {
        "label": "Solution2",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.PalindromeLinkedList",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.PalindromeLinkedList",
        "peekOfCode": "class Solution2:\n    def isPalindrome(self, head: ListNode) -> bool:\n        el = []\n        while head:\n            el.append(head.val)\n            head = head.next\n        for i in range(0, len(el)//2):\n            if not el[i] == el[-i-1]:\n                return False\n        return True",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.PalindromeLinkedList",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.PalindromeNumber",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.PalindromeNumber",
        "peekOfCode": "class Solution:\n    def isPalindrome(self, x: int) -> bool:\n        a = []\n        x = str(x)\n        x = list(x)\n        a = x[::-1]\n        if (str(a)==str(x)):\n            return True\n        else:\n            return False",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.PalindromeNumber",
        "documentation": {}
    },
    {
        "label": "Solution1",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.Perfect-Squares",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.Perfect-Squares",
        "peekOfCode": "class Solution1:\n    def numSquares(self, n) -> int:\n        if n <= 3:\n            return n\n        dp = [0 for _ in range(n+1)]\n        dp[1], dp[2], dp[3] = 1, 2, 3\n        for i in range(4, len(dp)):\n            dp[i] = i\n            j = 1\n            while j*j <= i:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.Perfect-Squares",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.Perfect-Squares",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.Perfect-Squares",
        "peekOfCode": "class Solution:\n    def numSquares(self, n: int) -> int:\n        if ceil(sqrt(n)) == floor(sqrt(n)):\n            return 1\n        while n % 4 == 0:\n            n /= 4\n        if n % 8 == 7:\n            return 4\n        j = 1\n        while j*j <= n:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.Perfect-Squares",
        "documentation": {}
    },
    {
        "label": "N",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.Perfect-Squares",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.Perfect-Squares",
        "peekOfCode": "N = a^2 + b^2 + c^2 + d^2\nTheorem: A natural number can be represented as sum of 3 squares of integers.\nN = a^2 + b^2 + c^2\nif and only if the N is not of the form,\nN = 4^a (8b + 7) -- (1)\nLOGIC: \n- if N is a perfect square, return 1\n- if N is of form (1),\n    - keep dividing by 4\n    - divide by 8",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.Perfect-Squares",
        "documentation": {}
    },
    {
        "label": "N",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.Perfect-Squares",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.Perfect-Squares",
        "peekOfCode": "N = a^2 + b^2 + c^2\nif and only if the N is not of the form,\nN = 4^a (8b + 7) -- (1)\nLOGIC: \n- if N is a perfect square, return 1\n- if N is of form (1),\n    - keep dividing by 4\n    - divide by 8\n        - if rem == 7:\n            return 4",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.Perfect-Squares",
        "documentation": {}
    },
    {
        "label": "N",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.Perfect-Squares",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.Perfect-Squares",
        "peekOfCode": "N = 4^a (8b + 7) -- (1)\nLOGIC: \n- if N is a perfect square, return 1\n- if N is of form (1),\n    - keep dividing by 4\n    - divide by 8\n        - if rem == 7:\n            return 4\n- check if N can be split into two perfect squares. If yes, return 2\n- if all fails, return 3",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.Perfect-Squares",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.PerformStringShifts",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.PerformStringShifts",
        "peekOfCode": "class Solution:\n    def stringShift(self, s: str, shift: List[List[int]]) -> str:\n        amount = 0\n        for i in range(len(shift)):\n            if(shift[i][0]==0):\n                amount += (-1)*shift[i][1]\n            else:\n                amount += 1*shift[i][1]\n        print(amount)\n        if amount == 0:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.PerformStringShifts",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.PlusOne",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.PlusOne",
        "peekOfCode": "class Solution:\n    def plusOne(self, digits: List[int]) -> List[int]:\n        carry = 0\n        for i in range(len(digits)-1, -1, -1):\n            if digits[i] != 9:\n                digits[i] += 1\n                break\n            else:\n                digits[i] = 0\n                if i == 0:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.PlusOne",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.PowerOfThree",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.PowerOfThree",
        "peekOfCode": "class Solution:\n    def isPowerOfThree(self, n: int) -> bool:\n        if n < 1:\n            return False\n        if n == 1:\n            return True\n        if sum(list(map(int, str(n)))) % 3 != 0:\n            return False\n        else:\n            while n > 1:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.PowerOfThree",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.PowerOfThree",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.PowerOfThree",
        "peekOfCode": "class Solution:\n    def isPowerOfThree(self, n: int) -> bool:\n        if n < 1:\n            return False\n        else:\n            return 1162261467 % n == 0",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.PowerOfThree",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.PowerOfTwo",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.PowerOfTwo",
        "peekOfCode": "class Solution:\n    def isPowerOfTwo(self, n: int) -> bool:\n        if n == 1:\n            return True\n        if n == 0:\n            return False\n        while n % 2 == 0:\n            n = n / 2\n        if n == 1:\n            return True",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.PowerOfTwo",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.PowerOfTwo",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.PowerOfTwo",
        "peekOfCode": "class Solution:\n    def isPowerOfTwo(self, n: int) -> bool:\n        return n > 0 and bin(n).count('1') == 1",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.PowerOfTwo",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.QueueReconstructionByHeight",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.QueueReconstructionByHeight",
        "peekOfCode": "class Solution:\n    def reconstructQueue(self, people: List[List[int]]) -> List[List[int]]:\n        people.sort(key = lambda x: (-x[0], x[1]))\n        rec = []\n        for p in people:\n            rec.insert(p[1], p)\n        return rec",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.QueueReconstructionByHeight",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.RandomPickWithWeight",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.RandomPickWithWeight",
        "peekOfCode": "class Solution:\n    def __init__(self, w: List[int]):\n        self.w = w\n    def pickIndex(self) -> int:\n        return choices(range(len(self.w)), self.w)[0]\n# Your Solution object will be instantiated and called as such:\n# obj = Solution(w)\n# param_1 = obj.pickIndex()",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.RandomPickWithWeight",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.RemoveDuplicatesFromSortedArray",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.RemoveDuplicatesFromSortedArray",
        "peekOfCode": "class Solution:\n    def removeDuplicates(self, nums: List[int]) -> int:\n        p = 0\n        while p < len(nums)-1:\n            if nums[p] == nums[p+1]:\n                nums.pop(p+1)\n                continue\n            p += 1\n        return len(nums)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.RemoveDuplicatesFromSortedArray",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.RemoveLinkedListElements",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.RemoveLinkedListElements",
        "peekOfCode": "class Solution:\n    def removeElements(self, head: ListNode, val: int) -> ListNode:\n        pointer = ListNode(0)\n        pointer.next = head\n        tempnode = pointer\n        while tempnode.next != None:\n            if tempnode.next.val == val:\n                tempnode.next = tempnode.next.next\n            else:\n                tempnode = tempnode.next",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.RemoveLinkedListElements",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.RemoveNthNodeFromEndOfList",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.RemoveNthNodeFromEndOfList",
        "peekOfCode": "class Solution:\n    def removeNthFromEnd(self, head: ListNode, n: int) -> ListNode:\n        tail = head\n        length = 1\n        while tail.next:\n            length += 1\n            tail = tail.next\n        if(length==1):\n            return None\n        if(length==n):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.RemoveNthNodeFromEndOfList",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.RemoveNthNodeFromEndOfList",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.RemoveNthNodeFromEndOfList",
        "peekOfCode": "class Solution:\n    def removeNthFromEnd(self, head: ListNode, n: int) -> ListNode:\n        dummy = fast = slow = ListNode()\n        dummy.next = head\n        if not head.next:\n            return None \n        for _ in range(n+1):\n            fast = fast.next\n        while fast:\n            fast = fast.next",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.RemoveNthNodeFromEndOfList",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.Reorganize-String",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.Reorganize-String",
        "peekOfCode": "class Solution:\n    def reorganizeString(self, S: str) -> str:\n        l = len(S)\n        A = []\n        for k, v in sorted((S.count(x), x) for x in set(S)):\n            if k > (l+1) / 2 : \n                return \"\"\n            A.extend(k * v)\n        # print(A)\n        ans = [None] * l",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.Reorganize-String",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.RepeatedDNASequences",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.RepeatedDNASequences",
        "peekOfCode": "class Solution:\n    def findRepeatedDnaSequences(self, s: str) -> List[str]:\n        dic = {}\n        ans = []\n        for i in range(0, len(s)-9):\n            if s[i:i+10] not in dic:\n                dic[s[i:i+10]] = 1\n            else:\n                dic[s[i:i+10]] += 1\n        for k, v in dic.items():",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.RepeatedDNASequences",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.ReverseBits",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.ReverseBits",
        "peekOfCode": "class Solution:\n    def reverseBits(self, n: int) -> int:\n        s = str(bin(n))\n        s = s[2:]\n        s = '0'*(32-len(s)) + s\n        s = int(s[::-1], 2)\n        return s",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.ReverseBits",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.ReverseInteger",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.ReverseInteger",
        "peekOfCode": "class Solution:\n    def reverse(self, x: int) -> int:\n        x = str(x)\n        if (x[0] == '-'):\n            a = x[1:2147483648:1]\n            a = a[::-1]\n            if (int(a)>2147483648):\n                return 0\n            return int(\"-\"+a)\n        else:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.ReverseInteger",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.ReverseLinkedList",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.ReverseLinkedList",
        "peekOfCode": "class Solution:\n    def reverseList(self, head: ListNode) -> ListNode:\n        temp = head\n        prev = None\n        while(temp!=None):\n            next = temp.next\n            temp.next = prev\n            prev = temp\n            temp = next            \n        return prev",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.ReverseLinkedList",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.ReverseString",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.ReverseString",
        "peekOfCode": "class Solution:\n    def reverseString(self, s: List[str]) -> None:\n        \"\"\"\n        Do not return anything, modify s in-place instead.\n        \"\"\"\n        head = 0\n        temp = ''\n        tail = len(s) - 1\n        while head < tail:\n            temp = s[head]",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.ReverseString",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.ReverseSubstringBetweenEachPairOfParantheses",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.ReverseSubstringBetweenEachPairOfParantheses",
        "peekOfCode": "class Solution:\n    def reverseParentheses(self, s: str) -> str:\n        stack = []\n        s = list(s)\n        for i in range(len(s)):\n            if s[i] == '(':\n                stack.append(i)\n                continue\n            if s[i] == ')':\n                idx = stack.pop()",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.ReverseSubstringBetweenEachPairOfParantheses",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.RomanToInteger",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.RomanToInteger",
        "peekOfCode": "class Solution:\n    def romanToInt(self, s: str) -> int:\n        ans = 0\n        prev = ''\n        for i in range(len(s)):\n            if(s[i]=='M'):\n                if(prev=='C'):\n                    ans += 800\n                    prev = 'M'\n                    continue",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.RomanToInteger",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.RotateArray",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.RotateArray",
        "peekOfCode": "class Solution:\n    def rotate(self, nums: List[int], k: int) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        \"\"\"\n        x = len(nums)\n        A = [0]*x\n        for i in range(0, x):\n            A[(i+k)%x] = nums[i]\n        for i in range(0, x):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.RotateArray",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.RotateImage",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.RotateImage",
        "peekOfCode": "class Solution:\n    def rotate(self, matrix: List[List[int]]) -> None:\n        \"\"\"\n        Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        n = len(matrix)\n        for x in zip(*matrix):\n            matrix.pop(0)\n            matrix.append(x[::-1])",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.RotateImage",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.RotateList",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.RotateList",
        "peekOfCode": "class Solution:\n    def rotateRight(self, head: ListNode, k: int) -> ListNode:\n        if not head:\n            return None\n        if not k==0:        \n            tail = head\n            length = 1\n            while(tail.next):\n                length += 1\n                tail = tail.next",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.RotateList",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.SearchInsertPosition",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.SearchInsertPosition",
        "peekOfCode": "class Solution:\n    def searchInsert(self, nums: List[int], target: int) -> int:\n        def binary(nums, low, high, target):\n            if low <= high:\n                mid = low + (high - low) // 2\n                if nums[mid] == target:\n                    return mid\n                elif nums[mid] > target:\n                    return binary(nums, low, mid-1, target)\n                else:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.SearchInsertPosition",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.SearchInsertPosition",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.SearchInsertPosition",
        "peekOfCode": "class Solution:\n    def searchInsert(self, nums: List[int], target: int) -> int:\n        low = 0\n        high = len(nums) - 1\n        while low <= high:\n            mid = (low + high) // 2\n            if nums[mid] == target:\n                return mid\n            elif nums[mid] > target:\n                high = mid - 1",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.SearchInsertPosition",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.ShuffleAnArray",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.ShuffleAnArray",
        "peekOfCode": "class Solution:\n    def __init__(self, nums: List[int]):\n        self.nums = nums\n        shuf = self.nums.copy()\n        self.shuf = shuf\n    def reset(self) -> List[int]:\n        \"\"\"\n        Resets the array to its original configuration and return it.\n        \"\"\"\n        self.shuf = self.nums.copy()",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.ShuffleAnArray",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.SimplifyPath",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.SimplifyPath",
        "peekOfCode": "class Solution:\n    def simplifyPath(self, path: str) -> str:\n        if(len(path)==0 or path==None or path==''):\n            return '/'\n        p = path.split('/')\n        stack = []\n        for item in p:\n            if (item=='..'):\n                if(stack):\n                    stack.pop()",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.SimplifyPath",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.SingleNumberII",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.SingleNumberII",
        "peekOfCode": "class Solution:\n    def singleNumber(self, nums: List[int]) -> int:\n        return int(((sum(set(nums))*3) - sum(nums))/2)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.SingleNumberII",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.SingleNumberIII",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.SingleNumberIII",
        "peekOfCode": "class Solution:\n    def singleNumber(self, nums: List[int]) -> List[int]:\n        ans = []\n        for i in set(nums):\n            if nums.count(i)==1:\n                ans.append(i)\n                if(len(ans)==2):\n                    return ans\n        return ans",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.SingleNumberIII",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.SortColors",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.SortColors",
        "peekOfCode": "class Solution:\n    def sortColors(self, nums: List[int]) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        \"\"\"\n        n = Counter(nums)\n        nums.clear()\n        for v in range(3):\n            for i in range(n[v]):\n                nums.append(v)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.SortColors",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.SplitAStringInBalancedStrings",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.SplitAStringInBalancedStrings",
        "peekOfCode": "class Solution:\n    def balancedStringSplit(self, s: str) -> int:\n        c = 0\n        rc = 0\n        lc = 0\n        for i in range(len(s)):\n            if s[i] == 'R':\n                rc += 1\n            if s[i] == 'L':\n                lc += 1",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.SplitAStringInBalancedStrings",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.StringToInteger",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.StringToInteger",
        "peekOfCode": "class Solution:\n    def myAtoi(self, str: str) -> int:\n        if len(str)==0:\n            return 0\n        str = list(str.strip())\n        if len(str)==0:\n            return 0\n        if(str[0]=='-'):\n            s = -1\n        else:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.StringToInteger",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.TaskScheduler",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.TaskScheduler",
        "peekOfCode": "class Solution:\n    def leastInterval(self, tasks: List[str], n: int) -> int:\n        tasksDict = collections.Counter(tasks)\n        heap = []\n        c = 0\n        for k, v in tasksDict.items():\n            heappush(heap, (-v,k))\n        while heap:\n            i = 0\n            stack = []",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.TaskScheduler",
        "documentation": {}
    },
    {
        "label": "NaiveSolution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.TrappingRainWater",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.TrappingRainWater",
        "peekOfCode": "class NaiveSolution:\n    def trap(self, height) -> int:\n        res = 0\n        n = len(height)\n        for i in range(1, n-1):\n            left = height[i]\n            for j in range(i):\n                left = max(left, height[j])\n            right = height[i]\n            for j in range(i+1, n):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.TrappingRainWater",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.TrappingRainWater",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.TrappingRainWater",
        "peekOfCode": "class Solution:\n    def trap(self, height: List[int]) -> int:\n        if height == []:\n            return 0\n        n = len(height)\n        res = 0\n        left = [0 for _ in range(n)]\n        right = [0 for _ in range(n)]\n        left[0] = height[0]\n        right[n-1] = height[n-1]",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.TrappingRainWater",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.Triangle",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.Triangle",
        "peekOfCode": "class Solution:\n    def minimumTotal(self, triangle: List[List[int]]) -> int:\n        dp = [0 for _ in range(len(triangle)+1)]\n        for r in triangle[::-1]:\n            for i in range(len(r)):\n                dp[i] = r[i] + min(dp[i], dp[i+1])      \n        return dp[0]",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.Triangle",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.TwoCityScheduling",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.TwoCityScheduling",
        "peekOfCode": "class Solution:\n    def twoCitySchedCost(self, costs: List[List[int]]) -> int:\n        costs = sorted(costs, key = lambda x: x[0] - x[1])\n        return sum(i[0] for i in costs[0:len(costs)//2]) + sum(j[1] for j in costs[len(costs)//2:len(costs)])",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.TwoCityScheduling",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.twoSum",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.twoSum",
        "peekOfCode": "class Solution:\n    def twoSum(self, nums, target):\n        for i in range(len(nums)):\n            for j in range(i+1,len(nums)):\n                if(nums[i]+nums[j]==target):\n                    return i, j\n# O(n) Solution\nclass Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        dict = { v:k for k, v in enumerate(nums) }",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.twoSum",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.twoSum",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.twoSum",
        "peekOfCode": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        dict = { v:k for k, v in enumerate(nums) }\n        for i in range(len(nums)):\n            if target - nums[i] in dict and nums.index(target - nums[i]) != i:\n                return i, nums.index(target-nums[i])",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.twoSum",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.UniquePathsII",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.UniquePathsII",
        "peekOfCode": "class Solution:\n    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:\n        m = len(obstacleGrid)\n        n = len(obstacleGrid[0])\n        if obstacleGrid[0][0] == 1:\n            return 0\n        obstacleGrid[0][0] = 1\n        for i in range(1, m):\n            obstacleGrid[i][0] = int(obstacleGrid[i][0] == 0 and obstacleGrid[i-1][0] == 1)\n        for i in range(1, n):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.UniquePathsII",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.ValidAnagram",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.ValidAnagram",
        "peekOfCode": "class Solution:\n    def isAnagram(self, s: str, t: str) -> bool:\n        return Counter(s) == Counter(t)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.ValidAnagram",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.ValidPalindrome",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.ValidPalindrome",
        "peekOfCode": "class Solution:\n    def isPalindrome(self, s: str) -> bool:\n        s = ''.join(a for a in s if a.isalnum()).lower()\n        return s == s[::-1]",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.ValidPalindrome",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.ValidParanthesisString",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.ValidParanthesisString",
        "peekOfCode": "class Solution:\n    def checkValidString(self, s: str) -> bool:\n        lb = 0\n        rb = 0\n        for i in s:\n            if(i=='(' or i=='*'):\n                lb += 1\n            else:\n                lb -= 1\n            if lb < 0:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.ValidParanthesisString",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.Walking-Robot-Simulation",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.Walking-Robot-Simulation",
        "peekOfCode": "class Solution(object):\n    def robotSim(self, commands, obstacles):\n        dx = [0, 1, 0, -1]\n        dy = [1, 0, -1, 0]\n        x = y = di = 0\n        obstacleSet = set(map(tuple, obstacles))\n        ans = 0\n        for cmd in commands:\n            if cmd == -2:  #left\n                di = (di - 1) % 4",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.LeetCode.Walking-Robot-Simulation",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.circular_linked_list",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.circular_linked_list",
        "peekOfCode": "class Node:\n    def __init__(self, data: Any):\n        self.data = data\n        self.next = None\nclass CircularLinkedList:\n    def __init__(self):\n        self.head = None\n        self.tail = None\n    def __iter__(self):\n        node = self.head",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.circular_linked_list",
        "documentation": {}
    },
    {
        "label": "CircularLinkedList",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.circular_linked_list",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.circular_linked_list",
        "peekOfCode": "class CircularLinkedList:\n    def __init__(self):\n        self.head = None\n        self.tail = None\n    def __iter__(self):\n        node = self.head\n        while self.head:\n            yield node.data\n            node = node.next\n            if node == self.head:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.circular_linked_list",
        "documentation": {}
    },
    {
        "label": "test_circular_linked_list",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.circular_linked_list",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.circular_linked_list",
        "peekOfCode": "def test_circular_linked_list() -> None:\n    \"\"\"\n    >>> test_circular_linked_list()\n    \"\"\"\n    circular_linked_list = CircularLinkedList()\n    assert len(circular_linked_list) == 0\n    assert circular_linked_list.is_empty() is True\n    assert str(circular_linked_list) == \"\"\n    try:\n        circular_linked_list.delete_front()",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.circular_linked_list",
        "documentation": {}
    },
    {
        "label": "_DoublyLinkedBase",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.deque_doubly",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.deque_doubly",
        "peekOfCode": "class _DoublyLinkedBase:\n    \"\"\"A Private class (to be inherited)\"\"\"\n    class _Node:\n        __slots__ = \"_prev\", \"_data\", \"_next\"\n        def __init__(self, link_p, element, link_n):\n            self._prev = link_p\n            self._data = element\n            self._next = link_n\n        def has_next_and_prev(self):\n            return (",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.deque_doubly",
        "documentation": {}
    },
    {
        "label": "LinkedDeque",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.deque_doubly",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.deque_doubly",
        "peekOfCode": "class LinkedDeque(_DoublyLinkedBase):\n    def first(self):\n        \"\"\"return first element\n        >>> d = LinkedDeque()\n        >>> d.add_first('A').first()\n        'A'\n        >>> d.add_first('B').first()\n        'B'\n        \"\"\"\n        if self.is_empty():",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.deque_doubly",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.doubly_linked_list",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.doubly_linked_list",
        "peekOfCode": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.previous = None\n        self.next = None\n    def __str__(self):\n        return f\"{self.data}\"\nclass DoublyLinkedList:\n    def __init__(self):\n        self.head = None",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.doubly_linked_list",
        "documentation": {}
    },
    {
        "label": "DoublyLinkedList",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.doubly_linked_list",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.doubly_linked_list",
        "peekOfCode": "class DoublyLinkedList:\n    def __init__(self):\n        self.head = None\n        self.tail = None\n    def __iter__(self):\n        \"\"\"\n        >>> linked_list = DoublyLinkedList()\n        >>> linked_list.insert_at_head('b')\n        >>> linked_list.insert_at_head('a')\n        >>> linked_list.insert_at_tail('c')",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.doubly_linked_list",
        "documentation": {}
    },
    {
        "label": "test_doubly_linked_list",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.doubly_linked_list",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.doubly_linked_list",
        "peekOfCode": "def test_doubly_linked_list() -> None:\n    \"\"\"\n    >>> test_doubly_linked_list()\n    \"\"\"\n    linked_list = DoublyLinkedList()\n    assert linked_list.is_empty() is True\n    assert str(linked_list) == \"\"\n    try:\n        linked_list.delete_head()\n        assert False  # This should not happen.",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.doubly_linked_list",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.doubly_linked_list_two",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.doubly_linked_list_two",
        "peekOfCode": "class Node:\n    def __init__(self, data: int, previous=None, next_node=None):\n        self.data = data\n        self.previous = previous\n        self.next = next_node\n    def __str__(self) -> str:\n        return f\"{self.data}\"\n    def get_data(self) -> int:\n        return self.data\n    def get_next(self):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.doubly_linked_list_two",
        "documentation": {}
    },
    {
        "label": "LinkedListIterator",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.doubly_linked_list_two",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.doubly_linked_list_two",
        "peekOfCode": "class LinkedListIterator:\n    def __init__(self, head):\n        self.current = head\n    def __iter__(self):\n        return self\n    def __next__(self):\n        if not self.current:\n            raise StopIteration\n        else:\n            value = self.current.get_data()",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.doubly_linked_list_two",
        "documentation": {}
    },
    {
        "label": "LinkedList",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.doubly_linked_list_two",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.doubly_linked_list_two",
        "peekOfCode": "class LinkedList:\n    def __init__(self):\n        self.head = None  # First node in list\n        self.tail = None  # Last node in list\n    def __str__(self):\n        current = self.head\n        nodes = []\n        while current is not None:\n            nodes.append(current.get_data())\n            current = current.get_next()",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.doubly_linked_list_two",
        "documentation": {}
    },
    {
        "label": "create_linked_list",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.doubly_linked_list_two",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.doubly_linked_list_two",
        "peekOfCode": "def create_linked_list() -> None:\n    \"\"\"\n    >>> new_linked_list = LinkedList()\n    >>> new_linked_list.get_head_data() is None\n    True\n    >>> new_linked_list.get_tail_data() is None\n    True\n    >>> new_linked_list.is_empty()\n    True\n    >>> new_linked_list.insert(10)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.doubly_linked_list_two",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.from_sequence",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.from_sequence",
        "peekOfCode": "class Node:\n    def __init__(self, data=None):\n        self.data = data\n        self.next = None\n    def __repr__(self):\n        \"\"\"Returns a visual representation of the node and all its following nodes.\"\"\"\n        string_rep = \"\"\n        temp = self\n        while temp:\n            string_rep += f\"<{temp.data}> ---> \"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.from_sequence",
        "documentation": {}
    },
    {
        "label": "make_linked_list",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.from_sequence",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.from_sequence",
        "peekOfCode": "def make_linked_list(elements_list):\n    \"\"\"Creates a Linked List from the elements of the given sequence\n    (list/tuple) and returns the head of the Linked List.\"\"\"\n    # if elements_list is empty\n    if not elements_list:\n        raise Exception(\"The Elements List is empty\")\n    # Set first element as Head\n    head = Node(elements_list[0])\n    current = head\n    # Loop through elements from position 1",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.from_sequence",
        "documentation": {}
    },
    {
        "label": "list_data",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.from_sequence",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.from_sequence",
        "peekOfCode": "list_data = [1, 3, 5, 32, 44, 12, 43]\nprint(f\"List: {list_data}\")\nprint(\"Creating Linked List from List.\")\nlinked_list = make_linked_list(list_data)\nprint(\"Linked List:\")\nprint(linked_list)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.from_sequence",
        "documentation": {}
    },
    {
        "label": "linked_list",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.from_sequence",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.from_sequence",
        "peekOfCode": "linked_list = make_linked_list(list_data)\nprint(\"Linked List:\")\nprint(linked_list)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.from_sequence",
        "documentation": {}
    },
    {
        "label": "ContainsLoopError",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.has_loop",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.has_loop",
        "peekOfCode": "class ContainsLoopError(Exception):\n    pass\nclass Node:\n    def __init__(self, data: Any) -> None:\n        self.data = data\n        self.next_node = None\n    def __iter__(self):\n        node = self\n        visited = []\n        while node:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.has_loop",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.has_loop",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.has_loop",
        "peekOfCode": "class Node:\n    def __init__(self, data: Any) -> None:\n        self.data = data\n        self.next_node = None\n    def __iter__(self):\n        node = self\n        visited = []\n        while node:\n            if node in visited:\n                raise ContainsLoopError",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.has_loop",
        "documentation": {}
    },
    {
        "label": "is_palindrome",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.is_palindrome",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.is_palindrome",
        "peekOfCode": "def is_palindrome(head):\n    if not head:\n        return True\n    # split the list to two parts\n    fast, slow = head.next, head\n    while fast and fast.next:\n        fast = fast.next.next\n        slow = slow.next\n    second = slow.next\n    slow.next = None  # Don't forget here! But forget still works!",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.is_palindrome",
        "documentation": {}
    },
    {
        "label": "is_palindrome_stack",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.is_palindrome",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.is_palindrome",
        "peekOfCode": "def is_palindrome_stack(head):\n    if not head or not head.next:\n        return True\n    # 1. Get the midpoint (slow)\n    slow = fast = cur = head\n    while fast and fast.next:\n        fast, slow = fast.next.next, slow.next\n    # 2. Push the second half into the stack\n    stack = [slow.val]\n    while slow.next:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.is_palindrome",
        "documentation": {}
    },
    {
        "label": "is_palindrome_dict",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.is_palindrome",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.is_palindrome",
        "peekOfCode": "def is_palindrome_dict(head):\n    if not head or not head.next:\n        return True\n    d = {}\n    pos = 0\n    while head:\n        if head.val in d.keys():\n            d[head.val].append(pos)\n        else:\n            d[head.val] = [pos]",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.is_palindrome",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.merge_two_lists",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.merge_two_lists",
        "peekOfCode": "class Node:\n    data: int\n    next: Optional[Node]\nclass SortedLinkedList:\n    def __init__(self, ints: Iterable[int]) -> None:\n        self.head: Optional[Node] = None\n        for i in reversed(sorted(ints)):\n            self.head = Node(i, self.head)\n    def __iter__(self) -> Iterator[int]:\n        \"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.merge_two_lists",
        "documentation": {}
    },
    {
        "label": "SortedLinkedList",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.merge_two_lists",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.merge_two_lists",
        "peekOfCode": "class SortedLinkedList:\n    def __init__(self, ints: Iterable[int]) -> None:\n        self.head: Optional[Node] = None\n        for i in reversed(sorted(ints)):\n            self.head = Node(i, self.head)\n    def __iter__(self) -> Iterator[int]:\n        \"\"\"\n        >>> tuple(SortedLinkedList(test_data_odd)) == tuple(sorted(test_data_odd))\n        True\n        >>> tuple(SortedLinkedList(test_data_even)) == tuple(sorted(test_data_even))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.merge_two_lists",
        "documentation": {}
    },
    {
        "label": "merge_lists",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.merge_two_lists",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.merge_two_lists",
        "peekOfCode": "def merge_lists(\n    sll_one: SortedLinkedList, sll_two: SortedLinkedList\n) -> SortedLinkedList:\n    \"\"\"\n    >>> SSL = SortedLinkedList\n    >>> merged = merge_lists(SSL(test_data_odd), SSL(test_data_even))\n    >>> len(merged)\n    16\n    >>> str(merged)\n    '-11 -> -2 -> -1 -> 0 -> 0 -> 1 -> 2 -> 3 -> 3 -> 4 -> 5 -> 6 -> 7 -> 8 -> 9 -> 10'",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.merge_two_lists",
        "documentation": {}
    },
    {
        "label": "test_data_odd",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.merge_two_lists",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.merge_two_lists",
        "peekOfCode": "test_data_odd = (3, 9, -11, 0, 7, 5, 1, -1)\ntest_data_even = (4, 6, 2, 0, 8, 10, 3, -2)\n@dataclass\nclass Node:\n    data: int\n    next: Optional[Node]\nclass SortedLinkedList:\n    def __init__(self, ints: Iterable[int]) -> None:\n        self.head: Optional[Node] = None\n        for i in reversed(sorted(ints)):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.merge_two_lists",
        "documentation": {}
    },
    {
        "label": "test_data_even",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.merge_two_lists",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.merge_two_lists",
        "peekOfCode": "test_data_even = (4, 6, 2, 0, 8, 10, 3, -2)\n@dataclass\nclass Node:\n    data: int\n    next: Optional[Node]\nclass SortedLinkedList:\n    def __init__(self, ints: Iterable[int]) -> None:\n        self.head: Optional[Node] = None\n        for i in reversed(sorted(ints)):\n            self.head = Node(i, self.head)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.merge_two_lists",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.middle_element_of_linked_list",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.middle_element_of_linked_list",
        "peekOfCode": "class Node:\n    def __init__(self, data: int) -> int:\n        self.data = data\n        self.next = None\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n    def push(self, new_data: int) -> int:\n        new_node = Node(new_data)\n        new_node.next = self.head",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.middle_element_of_linked_list",
        "documentation": {}
    },
    {
        "label": "LinkedList",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.middle_element_of_linked_list",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.middle_element_of_linked_list",
        "peekOfCode": "class LinkedList:\n    def __init__(self):\n        self.head = None\n    def push(self, new_data: int) -> int:\n        new_node = Node(new_data)\n        new_node.next = self.head\n        self.head = new_node\n        return self.head.data\n    def middle_element(self) -> int:\n        \"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.middle_element_of_linked_list",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.print_reverse",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.print_reverse",
        "peekOfCode": "class Node:\n    def __init__(self, data=None):\n        self.data = data\n        self.next = None\n    def __repr__(self):\n        \"\"\"Returns a visual representation of the node and all its following nodes.\"\"\"\n        string_rep = []\n        temp = self\n        while temp:\n            string_rep.append(f\"{temp.data}\")",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.print_reverse",
        "documentation": {}
    },
    {
        "label": "make_linked_list",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.print_reverse",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.print_reverse",
        "peekOfCode": "def make_linked_list(elements_list: List):\n    \"\"\"Creates a Linked List from the elements of the given sequence\n    (list/tuple) and returns the head of the Linked List.\n    >>> make_linked_list([])\n    Traceback (most recent call last):\n        ...\n    Exception: The Elements List is empty\n    >>> make_linked_list([7])\n    7\n    >>> make_linked_list(['abc'])",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.print_reverse",
        "documentation": {}
    },
    {
        "label": "print_reverse",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.print_reverse",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.print_reverse",
        "peekOfCode": "def print_reverse(head_node: Node) -> None:\n    \"\"\"Prints the elements of the given Linked List in reverse order\n    >>> print_reverse([])\n    >>> linked_list = make_linked_list([69, 88, 73])\n    >>> print_reverse(linked_list)\n    73\n    88\n    69\n    \"\"\"\n    if head_node is not None and isinstance(head_node, Node):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.print_reverse",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.print_reverse",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.print_reverse",
        "peekOfCode": "def main():\n    from doctest import testmod\n    testmod()\n    linked_list = make_linked_list([14, 52, 14, 12, 43])\n    print(\"Linked List:\")\n    print(linked_list)\n    print(\"Elements in Reverse:\")\n    print_reverse(linked_list)\nif __name__ == \"__main__\":\n    main()",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.print_reverse",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.singly_linked_list",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.singly_linked_list",
        "peekOfCode": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n    def __repr__(self):\n        return f\"Node({self.data})\"\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n    def __iter__(self):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.singly_linked_list",
        "documentation": {}
    },
    {
        "label": "LinkedList",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.singly_linked_list",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.singly_linked_list",
        "peekOfCode": "class LinkedList:\n    def __init__(self):\n        self.head = None\n    def __iter__(self):\n        node = self.head\n        while node:\n            yield node.data\n            node = node.next\n    def __len__(self) -> int:\n        \"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.singly_linked_list",
        "documentation": {}
    },
    {
        "label": "test_singly_linked_list",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.singly_linked_list",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.singly_linked_list",
        "peekOfCode": "def test_singly_linked_list() -> None:\n    \"\"\"\n    >>> test_singly_linked_list()\n    \"\"\"\n    linked_list = LinkedList()\n    assert linked_list.is_empty() is True\n    assert str(linked_list) == \"\"\n    try:\n        linked_list.delete_head()\n        assert False  # This should not happen.",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.singly_linked_list",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.singly_linked_list",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.singly_linked_list",
        "peekOfCode": "def main():\n    from doctest import testmod\n    testmod()\n    linked_list = LinkedList()\n    linked_list.insert_head(input(\"Inserting 1st at head \").strip())\n    linked_list.insert_head(input(\"Inserting 2nd at head \").strip())\n    print(\"\\nPrint list:\")\n    linked_list.print_list()\n    linked_list.insert_tail(input(\"\\nInserting 1st at tail \").strip())\n    linked_list.insert_tail(input(\"Inserting 2nd at tail \").strip())",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.singly_linked_list",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.skip_list",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.skip_list",
        "peekOfCode": "class Node(Generic[KT, VT]):\n    def __init__(self, key: KT, value: VT):\n        self.key = key\n        self.value = value\n        self.forward: list[Node[KT, VT]] = []\n    def __repr__(self) -> str:\n        \"\"\"\n        :return: Visual representation of Node\n        >>> node = Node(\"Key\", 2)\n        >>> repr(node)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.skip_list",
        "documentation": {}
    },
    {
        "label": "SkipList",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.skip_list",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.skip_list",
        "peekOfCode": "class SkipList(Generic[KT, VT]):\n    def __init__(self, p: float = 0.5, max_level: int = 16):\n        self.head = Node(\"root\", None)\n        self.level = 0\n        self.p = p\n        self.max_level = max_level\n    def __str__(self) -> str:\n        \"\"\"\n        :return: Visual representation of SkipList\n        >>> skip_list = SkipList()",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.skip_list",
        "documentation": {}
    },
    {
        "label": "test_insert",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.skip_list",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.skip_list",
        "peekOfCode": "def test_insert():\n    skip_list = SkipList()\n    skip_list.insert(\"Key1\", 3)\n    skip_list.insert(\"Key2\", 12)\n    skip_list.insert(\"Key3\", 41)\n    skip_list.insert(\"Key4\", -19)\n    node = skip_list.head\n    all_values = {}\n    while node.level != 0:\n        node = node.forward[0]",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.skip_list",
        "documentation": {}
    },
    {
        "label": "test_insert_overrides_existing_value",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.skip_list",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.skip_list",
        "peekOfCode": "def test_insert_overrides_existing_value():\n    skip_list = SkipList()\n    skip_list.insert(\"Key1\", 10)\n    skip_list.insert(\"Key1\", 12)\n    skip_list.insert(\"Key5\", 7)\n    skip_list.insert(\"Key7\", 10)\n    skip_list.insert(\"Key10\", 5)\n    skip_list.insert(\"Key7\", 7)\n    skip_list.insert(\"Key5\", 5)\n    skip_list.insert(\"Key10\", 10)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.skip_list",
        "documentation": {}
    },
    {
        "label": "test_searching_empty_list_returns_none",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.skip_list",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.skip_list",
        "peekOfCode": "def test_searching_empty_list_returns_none():\n    skip_list = SkipList()\n    assert skip_list.find(\"Some key\") is None\ndef test_search():\n    skip_list = SkipList()\n    skip_list.insert(\"Key2\", 20)\n    assert skip_list.find(\"Key2\") == 20\n    skip_list.insert(\"Some Key\", 10)\n    skip_list.insert(\"Key2\", 8)\n    skip_list.insert(\"V\", 13)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.skip_list",
        "documentation": {}
    },
    {
        "label": "test_search",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.skip_list",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.skip_list",
        "peekOfCode": "def test_search():\n    skip_list = SkipList()\n    skip_list.insert(\"Key2\", 20)\n    assert skip_list.find(\"Key2\") == 20\n    skip_list.insert(\"Some Key\", 10)\n    skip_list.insert(\"Key2\", 8)\n    skip_list.insert(\"V\", 13)\n    assert skip_list.find(\"Y\") is None\n    assert skip_list.find(\"Key2\") == 8\n    assert skip_list.find(\"Some Key\") == 10",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.skip_list",
        "documentation": {}
    },
    {
        "label": "test_deleting_item_from_empty_list_do_nothing",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.skip_list",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.skip_list",
        "peekOfCode": "def test_deleting_item_from_empty_list_do_nothing():\n    skip_list = SkipList()\n    skip_list.delete(\"Some key\")\n    assert len(skip_list.head.forward) == 0\ndef test_deleted_items_are_not_founded_by_find_method():\n    skip_list = SkipList()\n    skip_list.insert(\"Key1\", 12)\n    skip_list.insert(\"V\", 13)\n    skip_list.insert(\"X\", 14)\n    skip_list.insert(\"Key2\", 15)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.skip_list",
        "documentation": {}
    },
    {
        "label": "test_deleted_items_are_not_founded_by_find_method",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.skip_list",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.skip_list",
        "peekOfCode": "def test_deleted_items_are_not_founded_by_find_method():\n    skip_list = SkipList()\n    skip_list.insert(\"Key1\", 12)\n    skip_list.insert(\"V\", 13)\n    skip_list.insert(\"X\", 14)\n    skip_list.insert(\"Key2\", 15)\n    skip_list.delete(\"V\")\n    skip_list.delete(\"Key2\")\n    assert skip_list.find(\"V\") is None\n    assert skip_list.find(\"Key2\") is None",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.skip_list",
        "documentation": {}
    },
    {
        "label": "test_delete_removes_only_given_key",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.skip_list",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.skip_list",
        "peekOfCode": "def test_delete_removes_only_given_key():\n    skip_list = SkipList()\n    skip_list.insert(\"Key1\", 12)\n    skip_list.insert(\"V\", 13)\n    skip_list.insert(\"X\", 14)\n    skip_list.insert(\"Key2\", 15)\n    skip_list.delete(\"V\")\n    assert skip_list.find(\"V\") is None\n    assert skip_list.find(\"X\") == 14\n    assert skip_list.find(\"Key1\") == 12",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.skip_list",
        "documentation": {}
    },
    {
        "label": "test_delete_doesnt_leave_dead_nodes",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.skip_list",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.skip_list",
        "peekOfCode": "def test_delete_doesnt_leave_dead_nodes():\n    skip_list = SkipList()\n    skip_list.insert(\"Key1\", 12)\n    skip_list.insert(\"V\", 13)\n    skip_list.insert(\"X\", 142)\n    skip_list.insert(\"Key2\", 15)\n    skip_list.delete(\"X\")\n    def traverse_keys(node):\n        yield node.key\n        for forward_node in node.forward:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.skip_list",
        "documentation": {}
    },
    {
        "label": "test_iter_always_yields_sorted_values",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.skip_list",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.skip_list",
        "peekOfCode": "def test_iter_always_yields_sorted_values():\n    def is_sorted(lst):\n        for item, next_item in zip(lst, lst[1:]):\n            if next_item < item:\n                return False\n        return True\n    skip_list = SkipList()\n    for i in range(10):\n        skip_list.insert(i, i)\n    assert is_sorted(list(skip_list))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.skip_list",
        "documentation": {}
    },
    {
        "label": "pytests",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.skip_list",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.skip_list",
        "peekOfCode": "def pytests():\n    for i in range(100):\n        # Repeat test 100 times due to the probabilistic nature of skip list\n        # random values == random bugs\n        test_insert()\n        test_insert_overrides_existing_value()\n        test_searching_empty_list_returns_none()\n        test_search()\n        test_deleting_item_from_empty_list_do_nothing()\n        test_deleted_items_are_not_founded_by_find_method()",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.skip_list",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.skip_list",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.skip_list",
        "peekOfCode": "def main():\n    \"\"\"\n    >>> pytests()\n    \"\"\"\n    skip_list = SkipList()\n    skip_list.insert(2, \"2\")\n    skip_list.insert(4, \"4\")\n    skip_list.insert(6, \"4\")\n    skip_list.insert(4, \"5\")\n    skip_list.insert(8, \"4\")",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.skip_list",
        "documentation": {}
    },
    {
        "label": "KT",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.skip_list",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.skip_list",
        "peekOfCode": "KT = TypeVar(\"KT\")\nVT = TypeVar(\"VT\")\nclass Node(Generic[KT, VT]):\n    def __init__(self, key: KT, value: VT):\n        self.key = key\n        self.value = value\n        self.forward: list[Node[KT, VT]] = []\n    def __repr__(self) -> str:\n        \"\"\"\n        :return: Visual representation of Node",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.skip_list",
        "documentation": {}
    },
    {
        "label": "VT",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.skip_list",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.skip_list",
        "peekOfCode": "VT = TypeVar(\"VT\")\nclass Node(Generic[KT, VT]):\n    def __init__(self, key: KT, value: VT):\n        self.key = key\n        self.value = value\n        self.forward: list[Node[KT, VT]] = []\n    def __repr__(self) -> str:\n        \"\"\"\n        :return: Visual representation of Node\n        >>> node = Node(\"Key\", 2)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.skip_list",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.swap_nodes",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.swap_nodes",
        "peekOfCode": "class Node:\n    def __init__(self, data: Any):\n        self.data = data\n        self.next = None\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n    def print_list(self):\n        temp = self.head\n        while temp is not None:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.swap_nodes",
        "documentation": {}
    },
    {
        "label": "LinkedList",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.swap_nodes",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.swap_nodes",
        "peekOfCode": "class LinkedList:\n    def __init__(self):\n        self.head = None\n    def print_list(self):\n        temp = self.head\n        while temp is not None:\n            print(temp.data, end=\" \")\n            temp = temp.next\n        print()\n    # adding nodes",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.linked_list.swap_nodes",
        "documentation": {}
    },
    {
        "label": "world",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.projects.adventure.adv",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.projects.adventure.adv",
        "peekOfCode": "world = World()\n# You may uncomment the smaller graphs for development and testing purposes.\n# roomGraph={0: [(3, 5), {'n': 1}], 1: [(3, 6), {'s': 0, 'n': 2}], 2: [(3, 7), {'s': 1}]}\n# roomGraph={0: [(3, 5), {'n': 1, 's': 5, 'e': 3, 'w': 7}], 1: [(3, 6), {'s': 0, 'n': 2}], 2: [(3, 7), {'s': 1}], 3: [(4, 5), {'w': 0, 'e': 4}], 4: [(5, 5), {'w': 3}], 5: [(3, 4), {'n': 0, 's': 6}], 6: [(3, 3), {'n': 5}], 7: [(2, 5), {'w': 8, 'e': 0}], 8: [(1, 5), {'e': 7}]}\n# roomGraph={0: [(3, 5), {'n': 1, 's': 5, 'e': 3, 'w': 7}], 1: [(3, 6), {'s': 0, 'n': 2}], 2: [(3, 7), {'s': 1}], 3: [(4, 5), {'w': 0, 'e': 4}], 4: [(5, 5), {'w': 3}], 5: [(3, 4), {'n': 0, 's': 6}], 6: [(3, 3), {'n': 5, 'w': 11}], 7: [(2, 5), {'w': 8, 'e': 0}], 8: [(1, 5), {'e': 7}], 9: [(1, 4), {'n': 8, 's': 10}], 10: [(1, 3), {'n': 9, 'e': 11}], 11: [(2, 3), {'w': 10, 'e': 6}]}\n# roomGraph={0: [(3, 5), {'n': 1, 's': 5, 'e': 3, 'w': 7}], 1: [(3, 6), {'s': 0, 'n': 2, 'e': 12, 'w': 15}], 2: [(3, 7), {'s': 1}], 3: [(4, 5), {'w': 0, 'e': 4}], 4: [(5, 5), {'w': 3}], 5: [(3, 4), {'n': 0, 's': 6}], 6: [(3, 3), {'n': 5, 'w': 11}], 7: [(2, 5), {'w': 8, 'e': 0}], 8: [(1, 5), {'e': 7}], 9: [(1, 4), {'n': 8, 's': 10}], 10: [(1, 3), {'n': 9, 'e': 11}], 11: [(2, 3), {'w': 10, 'e': 6}], 12: [(4, 6), {'w': 1, 'e': 13}], 13: [(5, 6), {'w': 12, 'n': 14}], 14: [(5, 7), {'s': 13}], 15: [(2, 6), {'e': 1, 'w': 16}], 16: [(1, 6), {'n': 17, 'e': 15}], 17: [(1, 7), {'s': 16}]}\nroomGraph = {\n    494: [(1, 8), {\"e\": 457}],\n    492: [(1, 20), {\"e\": 400}],\n    493: [(2, 5), {\"e\": 478}],",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.projects.adventure.adv",
        "documentation": {}
    },
    {
        "label": "roomGraph",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.projects.adventure.adv",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.projects.adventure.adv",
        "peekOfCode": "roomGraph = {\n    494: [(1, 8), {\"e\": 457}],\n    492: [(1, 20), {\"e\": 400}],\n    493: [(2, 5), {\"e\": 478}],\n    457: [(2, 8), {\"e\": 355, \"w\": 494}],\n    484: [(2, 9), {\"n\": 482}],\n    482: [(2, 10), {\"s\": 484, \"e\": 404}],\n    486: [(2, 13), {\"e\": 462}],\n    479: [(2, 15), {\"e\": 418}],\n    465: [(2, 16), {\"e\": 368}],",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.projects.adventure.adv",
        "documentation": {}
    },
    {
        "label": "player",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.projects.adventure.adv",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.projects.adventure.adv",
        "peekOfCode": "player = Player(\"Name\", world.startingRoom)\n# Fill this out\ntraversalPath = []\n# TRAVERSAL TEST\nvisited_rooms = set()\nplayer.currentRoom = world.startingRoom\nvisited_rooms.add(player.currentRoom)\nfor move in traversalPath:\n    player.travel(move)\n    visited_rooms.add(player.currentRoom)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.projects.adventure.adv",
        "documentation": {}
    },
    {
        "label": "traversalPath",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.projects.adventure.adv",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.projects.adventure.adv",
        "peekOfCode": "traversalPath = []\n# TRAVERSAL TEST\nvisited_rooms = set()\nplayer.currentRoom = world.startingRoom\nvisited_rooms.add(player.currentRoom)\nfor move in traversalPath:\n    player.travel(move)\n    visited_rooms.add(player.currentRoom)\nif len(visited_rooms) == len(roomGraph):\n    print(",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.projects.adventure.adv",
        "documentation": {}
    },
    {
        "label": "visited_rooms",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.projects.adventure.adv",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.projects.adventure.adv",
        "peekOfCode": "visited_rooms = set()\nplayer.currentRoom = world.startingRoom\nvisited_rooms.add(player.currentRoom)\nfor move in traversalPath:\n    player.travel(move)\n    visited_rooms.add(player.currentRoom)\nif len(visited_rooms) == len(roomGraph):\n    print(\n        f\"TESTS PASSED: {len(traversalPath)} moves, {len(visited_rooms)} rooms visited\"\n    )",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.projects.adventure.adv",
        "documentation": {}
    },
    {
        "label": "player.currentRoom",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.projects.adventure.adv",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.projects.adventure.adv",
        "peekOfCode": "player.currentRoom = world.startingRoom\nvisited_rooms.add(player.currentRoom)\nfor move in traversalPath:\n    player.travel(move)\n    visited_rooms.add(player.currentRoom)\nif len(visited_rooms) == len(roomGraph):\n    print(\n        f\"TESTS PASSED: {len(traversalPath)} moves, {len(visited_rooms)} rooms visited\"\n    )\nelse:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.projects.adventure.adv",
        "documentation": {}
    },
    {
        "label": "Player",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.projects.adventure.player",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.projects.adventure.player",
        "peekOfCode": "class Player:\n    def __init__(self, name, startingRoom):\n        self.name = name\n        self.currentRoom = startingRoom\n    def travel(self, direction, showRooms=False):\n        nextRoom = self.currentRoom.getRoomInDirection(direction)\n        if nextRoom is not None:\n            self.currentRoom = nextRoom\n            if showRooms:\n                nextRoom.printRoomDescription(self)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.projects.adventure.player",
        "documentation": {}
    },
    {
        "label": "Room",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.projects.adventure.room",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.projects.adventure.room",
        "peekOfCode": "class Room:\n    def __init__(self, name, description, id=0, x=None, y=None):\n        self.id = id\n        self.name = name\n        self.description = description\n        self.n_to = None\n        self.s_to = None\n        self.e_to = None\n        self.w_to = None\n        self.x = x",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.projects.adventure.room",
        "documentation": {}
    },
    {
        "label": "World",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.projects.adventure.world",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.projects.adventure.world",
        "peekOfCode": "class World:\n    def __init__(self):\n        self.startingRoom = None\n        self.rooms = {}\n        self.roomGrid = []\n        self.gridSize = 0\n    def loadGraph(self, roomGraph):\n        numRooms = len(roomGraph)\n        rooms = [None] * numRooms\n        gridSize = 1",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.projects.adventure.world",
        "documentation": {}
    },
    {
        "label": "Queue",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.projects.ancestor.ancestor",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.projects.ancestor.ancestor",
        "peekOfCode": "class Queue:\n    def __init__(self):\n        self.queue = []\n    def enqueue(self, value):\n        self.queue.append(value)\n    def dequeue(self):\n        if self.size() > 0:\n            return self.queue.pop(0)\n        else:\n            return None",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.projects.ancestor.ancestor",
        "documentation": {}
    },
    {
        "label": "Graph",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.projects.ancestor.ancestor",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.projects.ancestor.ancestor",
        "peekOfCode": "class Graph:\n    def __init__(self):\n        self.vertices = {}\n    def add_vertex(self, vertex_id):\n        if vertex_id not in self.vertices:\n            self.vertices[vertex_id] = set()\n    def add_edges(self, v1, v2):\n        if v1 in self.vertices and v2 in self.vertices:\n            self.vertices[v1].add(v2)\n        else:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.projects.ancestor.ancestor",
        "documentation": {}
    },
    {
        "label": "earliest_ancestor",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.projects.ancestor.ancestor",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.projects.ancestor.ancestor",
        "peekOfCode": "def earliest_ancestor(ancestors, starting_node):\n    # build the graph\n    graph = Graph()\n    for pair in ancestors:\n        graph.add_vertex(pair[0])\n        graph.add_vertex(pair[1])\n        # build edges in reverse\n        graph.add_edges(pair[1], pair[0])\n    q = Queue()\n    q.enqueue([starting_node])",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.projects.ancestor.ancestor",
        "documentation": {}
    },
    {
        "label": "Test",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.projects.ancestor.test_ancestor",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.projects.ancestor.test_ancestor",
        "peekOfCode": "class Test(unittest.TestCase):\n    \"\"\"\n       10\n     /\n    1   2   4  11\n     \\ /   / \\ /\n      3   5   8\n       \\ / \\   \\\n        6   7   9\n    \"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.projects.ancestor.test_ancestor",
        "documentation": {}
    },
    {
        "label": "Graph",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.projects.graph.graph",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.projects.graph.graph",
        "peekOfCode": "class Graph:\n    \"\"\"Represent a graph as a dictionary of vertices mapping labels to edges.\"\"\"\n    def __init__(self):\n        self.vertices = {}\n    def add_vertex(self, vertex):\n        \"\"\"\n        Add a vertex to the graph.\n        \"\"\"\n        self.vertices[vertex] = set()\n    def add_edge(self, v1, v2):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.projects.graph.graph",
        "documentation": {}
    },
    {
        "label": "Queue",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.projects.graph.util",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.projects.graph.util",
        "peekOfCode": "class Queue:\n    def __init__(self):\n        self.queue = []\n    def enqueue(self, value):\n        self.queue.append(value)\n    def dequeue(self):\n        if self.size() > 0:\n            return self.queue.pop(0)\n        else:\n            return None",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.projects.graph.util",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.projects.graph.util",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.projects.graph.util",
        "peekOfCode": "class Stack:\n    def __init__(self):\n        self.stack = []\n    def push(self, value):\n        self.stack.append(value)\n    def pop(self):\n        if self.size() > 0:\n            return self.stack.pop()\n        else:\n            return None",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.projects.graph.util",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.projects.islands.islands",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.projects.islands.islands",
        "peekOfCode": "class Stack:\n    def __init__(self):\n        self.stack = []\n    def push(self, value):\n        self.stack.append(value)\n    def pop(self):\n        if self.size() > 0:\n            return self.stack.pop()\n        else:\n            return None",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.projects.islands.islands",
        "documentation": {}
    },
    {
        "label": "get_island_neighbors",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.projects.islands.islands",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.projects.islands.islands",
        "peekOfCode": "def get_island_neighbors(x, y, matrix):\n    neighbors = []\n    # Check if there's a 1 to the north\n    if y > 0 and matrix[y - 1][x] == 1:\n        neighbors.append((x, y - 1))\n    # Check south\n    if y < len(matrix) - 1 and matrix[y + 1][x] == 1:\n        neighbors.append((x, y + 1))\n    # Check east\n    if x < len(matrix[0]) - 1 and matrix[y][x + 1] == 1:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.projects.islands.islands",
        "documentation": {}
    },
    {
        "label": "dft_islands",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.projects.islands.islands",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.projects.islands.islands",
        "peekOfCode": "def dft_islands(start_x, start_y, matrix, visited):\n    \"\"\"\n    Returns an updated visited matrix after a dft of matrix starting from x, y\n    \"\"\"\n    # Create an empty stack and push the starting vertex\n    s = Stack()\n    s.push((start_x, start_y))\n    # While the stack is not empty...\n    while s.size() > 0:\n        # Pop the first vertex",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.projects.islands.islands",
        "documentation": {}
    },
    {
        "label": "island_counter",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.projects.islands.islands",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.projects.islands.islands",
        "peekOfCode": "def island_counter(matrix):\n    # Create a visited matrix with the same dimensions as the islands matrix\n    visited = []\n    matrix_height = len(matrix)\n    matrix_width = len(matrix[0])\n    for i in range(matrix_height):\n        visited.append([False] * matrix_width)\n    # Create a counter, initialize to 0\n    counter = 0\n    # For each cell in the 2d array...",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.projects.islands.islands",
        "documentation": {}
    },
    {
        "label": "islands",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.projects.islands.islands",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.projects.islands.islands",
        "peekOfCode": "islands = [\n    [0, 1, 0, 1, 0],\n    [1, 1, 0, 1, 1],\n    [0, 0, 1, 0, 0],\n    [1, 0, 1, 0, 0],\n    [1, 1, 0, 0, 0],\n]\n# Visit each cell in the 2d array.\n# When you come across a 1, traverse it and mark all connected nodes as visited,\n# then increment a counter",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.projects.islands.islands",
        "documentation": {}
    },
    {
        "label": "big_islands",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.projects.islands.islands",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.projects.islands.islands",
        "peekOfCode": "big_islands = [\n    [1, 0, 0, 1, 1, 0, 1, 1, 0, 1],\n    [0, 0, 1, 1, 0, 1, 0, 0, 0, 0],\n    [0, 1, 1, 1, 0, 0, 0, 1, 0, 1],\n    [0, 0, 1, 0, 0, 1, 0, 0, 1, 1],\n    [0, 0, 1, 1, 0, 1, 0, 1, 1, 0],\n    [0, 1, 0, 1, 1, 1, 0, 1, 0, 0],\n    [0, 0, 1, 0, 0, 1, 1, 0, 0, 0],\n    [1, 0, 1, 1, 0, 0, 0, 1, 1, 0],\n    [0, 1, 1, 0, 0, 0, 1, 1, 0, 0],",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.projects.islands.islands",
        "documentation": {}
    },
    {
        "label": "i1",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.projects.islands.islands",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.projects.islands.islands",
        "peekOfCode": "i1 = island_counter(big_islands)  # 13\ni2 = island_counter(islands)  # returns 4\nprint(f\"Island 1 - Should be 13: \\t {i1}\")\nprint(f\"Island 2 - Should be 04: \\t {i2}\")",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.projects.islands.islands",
        "documentation": {}
    },
    {
        "label": "i2",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.projects.islands.islands",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.projects.islands.islands",
        "peekOfCode": "i2 = island_counter(islands)  # returns 4\nprint(f\"Island 1 - Should be 13: \\t {i1}\")\nprint(f\"Island 2 - Should be 04: \\t {i2}\")",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.projects.islands.islands",
        "documentation": {}
    },
    {
        "label": "Queue",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.projects.social.social",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.projects.social.social",
        "peekOfCode": "class Queue:\n    def __init__(self):\n        self.queue = []\n    def enqueue(self, value):\n        self.queue.append(value)\n    def dequeue(self):\n        if self.size() > 0:\n            return self.queue.pop(0)\n        else:\n            return None",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.projects.social.social",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.projects.social.social",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.projects.social.social",
        "peekOfCode": "class User:\n    def __init__(self, name):\n        self.name = name\n    def __repr__(self):\n        return self.name\nclass SocialGraph:\n    def __init__(self):\n        self.lastID = 0\n        self.users = {}\n        self.friendships = {}",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.projects.social.social",
        "documentation": {}
    },
    {
        "label": "SocialGraph",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.projects.social.social",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.projects.social.social",
        "peekOfCode": "class SocialGraph:\n    def __init__(self):\n        self.lastID = 0\n        self.users = {}\n        self.friendships = {}\n    def addFriendship(self, userID, friendID):\n        \"\"\"\n        Creates a bi-directional friendship\n        \"\"\"\n        if userID == friendID:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.projects.social.social",
        "documentation": {}
    },
    {
        "label": "Queue",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.projects.word_ladder.word_ladder",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.projects.word_ladder.word_ladder",
        "peekOfCode": "class Queue:\n    def __init__(self):\n        self.queue = []\n    def enqueue(self, value):\n        self.queue.append(value)\n    def dequeue(self):\n        if self.size() > 0:\n            return self.queue.pop(0)\n        else:\n            return None",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.projects.word_ladder.word_ladder",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.projects.word_ladder.word_ladder",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.projects.word_ladder.word_ladder",
        "peekOfCode": "class Stack:\n    def __init__(self):\n        self.stack = []\n    def push(self, value):\n        self.stack.append(value)\n    def pop(self):\n        if self.size() > 0:\n            return self.stack.pop()\n        else:\n            return None",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.projects.word_ladder.word_ladder",
        "documentation": {}
    },
    {
        "label": "get_neighbors",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.projects.word_ladder.word_ladder",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.projects.word_ladder.word_ladder",
        "peekOfCode": "def get_neighbors(word):\n    \"\"\"\"\"\n    Return all words from word_list that are exactly 1 letter different\n    \"\"\" \"\"\n    # time complexity: O(length_of_begin_word)\n    # space complexity: O(number_words)\n    neighbors = []\n    letter_list = list(word)  # \"abc\" -> [\"a\", \"b\", \"c\"]\n    letters = [\n        \"a\",",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.projects.word_ladder.word_ladder",
        "documentation": {}
    },
    {
        "label": "word_ladder_path",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.projects.word_ladder.word_ladder",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.projects.word_ladder.word_ladder",
        "peekOfCode": "def word_ladder_path(begin_word, end_word):\n    q = Queue()\n    q.enqueue([begin_word])\n    visited = set()\n    while q.size() > 0:\n        path = q.dequeue()\n        v = path[-1]\n        if v not in visited:\n            if v == end_word:\n                return path",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.projects.word_ladder.word_ladder",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.projects.word_ladder.word_ladder",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.projects.word_ladder.word_ladder",
        "peekOfCode": "f = open(\"words.txt\", \"r\")\nwords = f.read().split(\"\\n\")\nf.close()\nword_set = set()\nfor word in words:\n    word_set.add(word.lower())\n# 1. Is this a graph problem? If so, translate the problem into graph terminology\n# 2. Build the graph\n# 3. Traverse the graph\ndef get_neighbors(word):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.projects.word_ladder.word_ladder",
        "documentation": {}
    },
    {
        "label": "words",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.projects.word_ladder.word_ladder",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.projects.word_ladder.word_ladder",
        "peekOfCode": "words = f.read().split(\"\\n\")\nf.close()\nword_set = set()\nfor word in words:\n    word_set.add(word.lower())\n# 1. Is this a graph problem? If so, translate the problem into graph terminology\n# 2. Build the graph\n# 3. Traverse the graph\ndef get_neighbors(word):\n    \"\"\"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.projects.word_ladder.word_ladder",
        "documentation": {}
    },
    {
        "label": "word_set",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.projects.word_ladder.word_ladder",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.projects.word_ladder.word_ladder",
        "peekOfCode": "word_set = set()\nfor word in words:\n    word_set.add(word.lower())\n# 1. Is this a graph problem? If so, translate the problem into graph terminology\n# 2. Build the graph\n# 3. Traverse the graph\ndef get_neighbors(word):\n    \"\"\"\"\"\n    Return all words from word_list that are exactly 1 letter different\n    \"\"\" \"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.projects.word_ladder.word_ladder",
        "documentation": {}
    },
    {
        "label": "CircularQueue",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.queue.circular_queue",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.queue.circular_queue",
        "peekOfCode": "class CircularQueue:\n    \"\"\"Circular FIFO queue with a fixed capacity\"\"\"\n    def __init__(self, n: int):\n        self.n = n\n        self.array = [None] * self.n\n        self.front = 0  # index of the first element\n        self.rear = 0\n        self.size = 0\n    def __len__(self) -> int:\n        \"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.queue.circular_queue",
        "documentation": {}
    },
    {
        "label": "de",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.queue.double_ended_queue",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.queue.double_ended_queue",
        "peekOfCode": "de = collections.deque([1, 2, 3])\n# using extend() to add numbers to right end\n# adds 4,5,6 to right end\nde.extend([4, 5, 6])\n# printing modified deque\nprint(\"The deque after extending deque at end is : \")\nprint(de)\n# using extendleft() to add numbers to left end\n# adds 7,8,9 to right end\nde.extendleft([7, 8, 9])",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.queue.double_ended_queue",
        "documentation": {}
    },
    {
        "label": "startValue",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.queue.double_ended_queue",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.queue.double_ended_queue",
        "peekOfCode": "startValue = de.pop()\nprint(\"The deque after popping value at end is : \")\nprint(de)\n# get left-end value and eliminate\nendValue = de.popleft()\nprint(\"The deque after popping value at start is : \")\nprint(de)\n# eliminate element searched by value\nde.remove(5)\nprint(\"The deque after eliminating element searched by value : \")",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.queue.double_ended_queue",
        "documentation": {}
    },
    {
        "label": "endValue",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.queue.double_ended_queue",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.queue.double_ended_queue",
        "peekOfCode": "endValue = de.popleft()\nprint(\"The deque after popping value at start is : \")\nprint(de)\n# eliminate element searched by value\nde.remove(5)\nprint(\"The deque after eliminating element searched by value : \")\nprint(de)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.queue.double_ended_queue",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.queue.linked_queue",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.queue.linked_queue",
        "peekOfCode": "class Node:\n    def __init__(self, data: Any) -> None:\n        self.data = data\n        self.next = None\n    def __str__(self) -> str:\n        return f\"{self.data}\"\nclass LinkedQueue:\n    \"\"\"\n    >>> queue = LinkedQueue()\n    >>> queue.is_empty()",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.queue.linked_queue",
        "documentation": {}
    },
    {
        "label": "LinkedQueue",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.queue.linked_queue",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.queue.linked_queue",
        "peekOfCode": "class LinkedQueue:\n    \"\"\"\n    >>> queue = LinkedQueue()\n    >>> queue.is_empty()\n    True\n    >>> queue.put(5)\n    >>> queue.put(9)\n    >>> queue.put('python')\n    >>> queue.is_empty();\n    False",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.queue.linked_queue",
        "documentation": {}
    },
    {
        "label": "OverFlowError",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.queue.priority_queue_using_list",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.queue.priority_queue_using_list",
        "peekOfCode": "class OverFlowError(Exception):\n    pass\nclass UnderFlowError(Exception):\n    pass\nclass FixedPriorityQueue:\n    \"\"\"\n    Tasks can be added to a Priority Queue at any time and in any order but when Tasks\n    are removed then the Task with the highest priority is removed in FIFO order.  In\n    code we will use three levels of priority with priority zero Tasks being the most\n    urgent (high priority) and priority 2 tasks being the least urgent.",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.queue.priority_queue_using_list",
        "documentation": {}
    },
    {
        "label": "UnderFlowError",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.queue.priority_queue_using_list",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.queue.priority_queue_using_list",
        "peekOfCode": "class UnderFlowError(Exception):\n    pass\nclass FixedPriorityQueue:\n    \"\"\"\n    Tasks can be added to a Priority Queue at any time and in any order but when Tasks\n    are removed then the Task with the highest priority is removed in FIFO order.  In\n    code we will use three levels of priority with priority zero Tasks being the most\n    urgent (high priority) and priority 2 tasks being the least urgent.\n    Examples\n    >>> fpq = FixedPriorityQueue()",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.queue.priority_queue_using_list",
        "documentation": {}
    },
    {
        "label": "FixedPriorityQueue",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.queue.priority_queue_using_list",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.queue.priority_queue_using_list",
        "peekOfCode": "class FixedPriorityQueue:\n    \"\"\"\n    Tasks can be added to a Priority Queue at any time and in any order but when Tasks\n    are removed then the Task with the highest priority is removed in FIFO order.  In\n    code we will use three levels of priority with priority zero Tasks being the most\n    urgent (high priority) and priority 2 tasks being the least urgent.\n    Examples\n    >>> fpq = FixedPriorityQueue()\n    >>> fpq.enqueue(0, 10)\n    >>> fpq.enqueue(1, 70)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.queue.priority_queue_using_list",
        "documentation": {}
    },
    {
        "label": "ElementPriorityQueue",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.queue.priority_queue_using_list",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.queue.priority_queue_using_list",
        "peekOfCode": "class ElementPriorityQueue:\n    \"\"\"\n    Element Priority Queue is the same as Fixed Priority Queue except that the value of\n    the element itself is the priority. The rules for priorities are the same the as\n    Fixed Priority Queue.\n    >>> epq = ElementPriorityQueue()\n    >>> epq.enqueue(10)\n    >>> epq.enqueue(70)\n    >>> epq.enqueue(4)\n    >>> epq.enqueue(1)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.queue.priority_queue_using_list",
        "documentation": {}
    },
    {
        "label": "fixed_priority_queue",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.queue.priority_queue_using_list",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.queue.priority_queue_using_list",
        "peekOfCode": "def fixed_priority_queue():\n    fpq = FixedPriorityQueue()\n    fpq.enqueue(0, 10)\n    fpq.enqueue(1, 70)\n    fpq.enqueue(0, 100)\n    fpq.enqueue(2, 1)\n    fpq.enqueue(2, 5)\n    fpq.enqueue(1, 7)\n    fpq.enqueue(2, 4)\n    fpq.enqueue(1, 64)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.queue.priority_queue_using_list",
        "documentation": {}
    },
    {
        "label": "element_priority_queue",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.queue.priority_queue_using_list",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.queue.priority_queue_using_list",
        "peekOfCode": "def element_priority_queue():\n    epq = ElementPriorityQueue()\n    epq.enqueue(10)\n    epq.enqueue(70)\n    epq.enqueue(100)\n    epq.enqueue(1)\n    epq.enqueue(5)\n    epq.enqueue(7)\n    epq.enqueue(4)\n    epq.enqueue(64)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.queue.priority_queue_using_list",
        "documentation": {}
    },
    {
        "label": "Queue",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.queue.queue_on_list",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.queue.queue_on_list",
        "peekOfCode": "class Queue:\n    def __init__(self):\n        self.entries = []\n        self.length = 0\n        self.front = 0\n    def __str__(self):\n        printed = \"<\" + str(self.entries)[1:-1] + \">\"\n        return printed\n    \"\"\"Enqueues {@code item}\n    @param item",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.queue.queue_on_list",
        "documentation": {}
    },
    {
        "label": "Queue",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.queue.queue_on_pseudo_stack",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.queue.queue_on_pseudo_stack",
        "peekOfCode": "class Queue:\n    def __init__(self):\n        self.stack = []\n        self.length = 0\n    def __str__(self):\n        printed = \"<\" + str(self.stack)[1:-1] + \">\"\n        return printed\n    \"\"\"Enqueues {@code item}\n    @param item\n        item to enqueue\"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.queue.queue_on_pseudo_stack",
        "documentation": {}
    },
    {
        "label": "add",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.01_-_add",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.01_-_add",
        "peekOfCode": "def add(param1, param2):\n    return param1 + param2",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.01_-_add",
        "documentation": {}
    },
    {
        "label": "centuryFromYear",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.02_-_centuryFromYear",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.02_-_centuryFromYear",
        "peekOfCode": "def centuryFromYear(year):\n    return ((year - 1) // 100) + 1",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.02_-_centuryFromYear",
        "documentation": {}
    },
    {
        "label": "checkPalindrome",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.03_-_checkPalindrome (2)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.03_-_checkPalindrome (2)",
        "peekOfCode": "def checkPalindrome(inputString):\n    return inputString == inputString[::-1]",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.03_-_checkPalindrome (2)",
        "documentation": {}
    },
    {
        "label": "checkPalindrome",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.03_-_checkPalindrome",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.03_-_checkPalindrome",
        "peekOfCode": "def checkPalindrome(inputString):\n    return inputString == inputString[::-1]",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.03_-_checkPalindrome",
        "documentation": {}
    },
    {
        "label": "adjacentElementsProduct",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.04_-_adjacentElementsProduct",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.04_-_adjacentElementsProduct",
        "peekOfCode": "def adjacentElementsProduct(inputArray):\n    max = inputArray[0] * inputArray[1]\n    for i in range(len(inputArray) - 1):\n        if inputArray[i] * inputArray[i + 1] > max:\n            max = inputArray[i] * inputArray[i + 1]\n    return max",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.04_-_adjacentElementsProduct",
        "documentation": {}
    },
    {
        "label": "shapeArea",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.05_-_shapeArea",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.05_-_shapeArea",
        "peekOfCode": "def shapeArea(n):\n    sum = n * 2 - 1\n    for i in range(1, (n * 2) - 1, 2):\n        sum += i * 2\n    return sum",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.05_-_shapeArea",
        "documentation": {}
    },
    {
        "label": "makeArrayConsecutive2",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.06_-_makeArrayConsecutive2",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.06_-_makeArrayConsecutive2",
        "peekOfCode": "def makeArrayConsecutive2(statues):\n    return max(statues) - min(statues) - len(statues) + 1",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.06_-_makeArrayConsecutive2",
        "documentation": {}
    },
    {
        "label": "almostIncreasingSequence",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.07_-_almostIncreasingSequence",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.07_-_almostIncreasingSequence",
        "peekOfCode": "def almostIncreasingSequence(sequence):\n    i = 0\n    while i < len(sequence) - 1:\n        if not sequence[i] < sequence[i + 1]:\n            if increasingSequence(\n                sequence[:i] + sequence[i + 1 :]\n            ) or increasingSequence(sequence[: i + 1] + sequence[i + 2 :]):\n                return True\n            else:\n                return False",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.07_-_almostIncreasingSequence",
        "documentation": {}
    },
    {
        "label": "increasingSequence",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.07_-_almostIncreasingSequence",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.07_-_almostIncreasingSequence",
        "peekOfCode": "def increasingSequence(sequence):\n    for i in range(len(sequence) - 1):\n        if not sequence[i] < sequence[i + 1]:\n            return False\n    return True",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.07_-_almostIncreasingSequence",
        "documentation": {}
    },
    {
        "label": "matrixElementsSum",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.08_-_matrixElementsSum",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.08_-_matrixElementsSum",
        "peekOfCode": "def matrixElementsSum(matrix):\n    if len(matrix) > 1:\n        for row in range(1, len(matrix)):\n            for room in range(len(matrix[row])):\n                if matrix[row - 1][room] == 0:\n                    matrix[row][room] = 0\n    sum = 0\n    for row in matrix:\n        for room in row:\n            sum += room",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.08_-_matrixElementsSum",
        "documentation": {}
    },
    {
        "label": "allLongestStrings",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.09_-_allLongestStrings",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.09_-_allLongestStrings",
        "peekOfCode": "def allLongestStrings(inputArray):\n    length = max([len(word) for word in inputArray])\n    result = [word for word in inputArray if len(word) == length]\n    return result",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.09_-_allLongestStrings",
        "documentation": {}
    },
    {
        "label": "commonCharacterCount",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.10_-_commonCharacterCount",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.10_-_commonCharacterCount",
        "peekOfCode": "def commonCharacterCount(s1, s2):\n    count = 0\n    word2 = list(s2)\n    for letter in s1:\n        if letter in word2:\n            word2.remove(letter)\n            count += 1\n    return count",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.10_-_commonCharacterCount",
        "documentation": {}
    },
    {
        "label": "isLucky",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.11_-_isLucky",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.11_-_isLucky",
        "peekOfCode": "def isLucky(n):\n    string = str(n)\n    top = [int(x) for x in string[: len(string) // 2]]\n    bottom = [int(x) for x in string[len(string) // 2 :]]\n    return sum(top) == sum(bottom)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.11_-_isLucky",
        "documentation": {}
    },
    {
        "label": "sortByHeight",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.12_-_sortByHeight",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.12_-_sortByHeight",
        "peekOfCode": "def sortByHeight(a):\n    treePositions = [x for x in range(len(a)) if a[x] == -1]\n    people = sorted([x for x in a if x != -1])\n    for tree in treePositions:\n        people.insert(tree, -1)\n    return people",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.12_-_sortByHeight",
        "documentation": {}
    },
    {
        "label": "reverseParentheses",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.13_-_reverseParentheses",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.13_-_reverseParentheses",
        "peekOfCode": "def reverseParentheses(s):\n    while \"(\" in s:\n        match = re.search(\"\\([^()]*\\)\", s)\n        match_string = match.group(0)[1 : len(match.group(0)) - 1]\n        reversed_match_string = match_string[::-1]\n        s = s[: match.start()] + reversed_match_string + s[match.end() :]\n    return s",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.13_-_reverseParentheses",
        "documentation": {}
    },
    {
        "label": "alternatingSums",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.14_-_alternatingSums",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.14_-_alternatingSums",
        "peekOfCode": "def alternatingSums(a):\n    team1 = sum(a[0::2])\n    team2 = sum(a[1::2])\n    return [team1, team2]",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.14_-_alternatingSums",
        "documentation": {}
    },
    {
        "label": "addBorder",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.15_-_addBorder",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.15_-_addBorder",
        "peekOfCode": "def addBorder(picture):\n    picture = [\"*\" + string + \"*\" for string in picture]\n    picture = [(\"*\" * len(picture[0]))] + picture + [(\"*\" * len(picture[0]))]\n    return picture",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.15_-_addBorder",
        "documentation": {}
    },
    {
        "label": "areSimilar",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.16_-_areSimilar",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.16_-_areSimilar",
        "peekOfCode": "def areSimilar(a, b):\n    diff = [i for i in range(len(a)) if a[i] != b[i]]\n    if len(diff) == 2:\n        b[diff[0]], b[diff[1]] = b[diff[1]], b[diff[0]]\n    return a == b",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.16_-_areSimilar",
        "documentation": {}
    },
    {
        "label": "arrayChange",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.17_-_arrayChange",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.17_-_arrayChange",
        "peekOfCode": "def arrayChange(inputArray):\n    count = 0\n    for i in range(1, len(inputArray)):\n        if inputArray[i - 1] >= inputArray[i]:\n            difference = inputArray[i - 1] - inputArray[i]\n            inputArray[i] += difference + 1\n            count += difference + 1\n    return count",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.17_-_arrayChange",
        "documentation": {}
    },
    {
        "label": "palindromeRearranging",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.18_-_palindromeRearranging",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.18_-_palindromeRearranging",
        "peekOfCode": "def palindromeRearranging(inputString):\n    inputList = sorted(inputString)\n    foundMiddle = False\n    while len(inputList) > 1:\n        if inputList[0] == inputList[1]:\n            del inputList[1]\n        elif not foundMiddle:\n            foundMiddle = True\n        else:\n            return False",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.18_-_palindromeRearranging",
        "documentation": {}
    },
    {
        "label": "areEquallyStrong",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.19_-_areEquallyStrong",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.19_-_areEquallyStrong",
        "peekOfCode": "def areEquallyStrong(yourLeft, yourRight, friendsLeft, friendsRight):\n    sameHands = yourLeft == friendsLeft and yourRight == friendsRight\n    differentHands = yourLeft == friendsRight and yourRight == friendsLeft\n    return sameHands or differentHands",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.19_-_areEquallyStrong",
        "documentation": {}
    },
    {
        "label": "arrayMaximalAdjacentDifference",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.20_-_arrayMaximalAdjacentDifference",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.20_-_arrayMaximalAdjacentDifference",
        "peekOfCode": "def arrayMaximalAdjacentDifference(inputArray):\n    diffs = []\n    for i in range(len(inputArray) - 1):\n        diffs.append(abs(inputArray[i] - inputArray[i + 1]))\n    return max(diffs)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.20_-_arrayMaximalAdjacentDifference",
        "documentation": {}
    },
    {
        "label": "isIPv4Address",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.21_-_isIPv4Address",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.21_-_isIPv4Address",
        "peekOfCode": "def isIPv4Address(inputString):\n    strings = [string for string in inputString.split(\".\")]\n    for string in strings:\n        if not string.isdecimal():\n            return False\n    nums = [int(num) for num in strings]\n    return max(nums) <= 255 and min(nums) >= 0 and len(nums) == 4",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.21_-_isIPv4Address",
        "documentation": {}
    },
    {
        "label": "avoidObstacles",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.22_-_avoidObstacles",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.22_-_avoidObstacles",
        "peekOfCode": "def avoidObstacles(inputArray):\n    for length in range(2, max(inputArray) + 2):\n        done = True\n        jump = length\n        while jump < (max(inputArray) + length):\n            if jump in inputArray:\n                done = False\n                break\n            jump += length\n        if done:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.22_-_avoidObstacles",
        "documentation": {}
    },
    {
        "label": "boxBlur",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.23_-_boxBlur",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.23_-_boxBlur",
        "peekOfCode": "def boxBlur(image):\n    outImage = []\n    for row in range(1, len(image) - 1):\n        line = []\n        for pixel in range(1, len(image[row]) - 1):\n            total = (\n                image[row - 1][pixel - 1]\n                + image[row - 1][pixel]\n                + image[row - 1][pixel + 1]\n                + image[row][pixel - 1]",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.23_-_boxBlur",
        "documentation": {}
    },
    {
        "label": "minesweeper",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.24_-_minesweeper",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.24_-_minesweeper",
        "peekOfCode": "def minesweeper(matrix):\n    TOP = 0\n    BOTTOM = len(matrix) - 1\n    LEFT = 0\n    RIGHT = len(matrix[0]) - 1\n    outMatrix = []\n    for row in range(len(matrix)):\n        outRow = []\n        for cell in range(len(matrix[row])):\n            outRow.append(0)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.24_-_minesweeper",
        "documentation": {}
    },
    {
        "label": "arrayReplace",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.25_-_arrayReplace",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.25_-_arrayReplace",
        "peekOfCode": "def arrayReplace(inputArray, elemToReplace, substitutionElem):\n    return [x if x != elemToReplace else substitutionElem for x in inputArray]",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.25_-_arrayReplace",
        "documentation": {}
    },
    {
        "label": "evenDigitsOnly",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.26_-_evenDigitsOnly",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.26_-_evenDigitsOnly",
        "peekOfCode": "def evenDigitsOnly(n):\n    return all(\n        (True if digit in (\"0\", \"2\", \"4\", \"6\", \"8\") else False for digit in str(n))\n    )",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.26_-_evenDigitsOnly",
        "documentation": {}
    },
    {
        "label": "variableName",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.27_-_variableName",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.27_-_variableName",
        "peekOfCode": "def variableName(name):\n    return name.replace(\"_\", \"\").isalnum() and not name[0].isdigit()",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.27_-_variableName",
        "documentation": {}
    },
    {
        "label": "alphabeticShift",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.28_-_alphabeticShift",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.28_-_alphabeticShift",
        "peekOfCode": "def alphabeticShift(inputString):\n    return \"\".join([chr(ord(x) + 1) if x != \"z\" else \"a\" for x in inputString])",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.28_-_alphabeticShift",
        "documentation": {}
    },
    {
        "label": "chessBoardCellColor",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.29_-_chessBoardCellColor",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.29_-_chessBoardCellColor",
        "peekOfCode": "def chessBoardCellColor(cell1, cell2):\n    color1 = ((ord(cell1[0]) - ord(\"A\")) + ord(cell1[1]) - ord(\"1\")) % 2 == 0\n    color2 = ((ord(cell2[0]) - ord(\"A\")) + ord(cell2[1]) - ord(\"1\")) % 2 == 0\n    return color1 == color2",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.29_-_chessBoardCellColor",
        "documentation": {}
    },
    {
        "label": "circleOfNumbers",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.30_-_circleOfNumbers",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.30_-_circleOfNumbers",
        "peekOfCode": "def circleOfNumbers(n, firstNumber):\n    return (firstNumber + (n / 2)) % n",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.30_-_circleOfNumbers",
        "documentation": {}
    },
    {
        "label": "depositProfit",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.31_-_depositProfit",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.31_-_depositProfit",
        "peekOfCode": "def depositProfit(deposit, rate, threshold):\n    year = 0\n    while deposit < threshold:\n        deposit *= 1 + (rate / 100)\n        year += 1\n    return year",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.31_-_depositProfit",
        "documentation": {}
    },
    {
        "label": "absoluteValuesSumMinimization",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.32_-_absoluteValuesSumMinimization",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.32_-_absoluteValuesSumMinimization",
        "peekOfCode": "def absoluteValuesSumMinimization(a):\n    sums = {}\n    for num in a:\n        total = sum([abs(a[i] - num) for i in range(len(a))])\n        if total in sums:\n            sums[total] = min(num, sums[total])\n        else:\n            sums[total] = num\n        print(sums)\n    return sums[min(sums)]",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.32_-_absoluteValuesSumMinimization",
        "documentation": {}
    },
    {
        "label": "stringsRearrangement",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.33_-_stringsRearrangement",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.33_-_stringsRearrangement",
        "peekOfCode": "def stringsRearrangement(inputArray):\n    permutations = itertools.permutations(inputArray)\n    for array in permutations:\n        if testArrangement(array):\n            return True\n    return False\ndef testArrangement(array):\n    for i in range(len(array) - 1):\n        if sum([a != b for a, b in zip(array[i], array[i + 1])]) != 1:\n            return False",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.33_-_stringsRearrangement",
        "documentation": {}
    },
    {
        "label": "testArrangement",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.33_-_stringsRearrangement",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.33_-_stringsRearrangement",
        "peekOfCode": "def testArrangement(array):\n    for i in range(len(array) - 1):\n        if sum([a != b for a, b in zip(array[i], array[i + 1])]) != 1:\n            return False\n    return True",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.33_-_stringsRearrangement",
        "documentation": {}
    },
    {
        "label": "extractEachKth",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.34_-_extractEachKth",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.34_-_extractEachKth",
        "peekOfCode": "def extractEachKth(inputArray, k):\n    return [inputArray[x] for x in range(len(inputArray)) if (x + 1) % k != 0]",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.34_-_extractEachKth",
        "documentation": {}
    },
    {
        "label": "firstDigit",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.35_-_firstDigit",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.35_-_firstDigit",
        "peekOfCode": "def firstDigit(inputString):\n    for char in inputString:\n        if char.isdigit():\n            return char",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.35_-_firstDigit",
        "documentation": {}
    },
    {
        "label": "differentSymbolsNaive",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.36_-_differentSymbolsNaive",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.36_-_differentSymbolsNaive",
        "peekOfCode": "def differentSymbolsNaive(s):\n    return len(set(s))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.36_-_differentSymbolsNaive",
        "documentation": {}
    },
    {
        "label": "arrayMaxConsecutiveSum",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.37_-_arrayMaxConsecutiveSum",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.37_-_arrayMaxConsecutiveSum",
        "peekOfCode": "def arrayMaxConsecutiveSum(inputArray, k):\n    sums = [sum(inputArray[:k])]\n    for i in range(1, len(inputArray) - k + 1):\n        sums.append(sums[i - 1] - inputArray[i - 1] + inputArray[i + k - 1])\n    return max(sums)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.37_-_arrayMaxConsecutiveSum",
        "documentation": {}
    },
    {
        "label": "growingPlant",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.38_-_growingPlant",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.38_-_growingPlant",
        "peekOfCode": "def growingPlant(upSpeed, downSpeed, desiredHeight):\n    height = 0\n    days = 1\n    height += upSpeed\n    while height < desiredHeight:\n        days += 1\n        height -= downSpeed\n        height += upSpeed\n    return days",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.38_-_growingPlant",
        "documentation": {}
    },
    {
        "label": "knapsackLight",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.39_-_knapsackLight",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.39_-_knapsackLight",
        "peekOfCode": "def knapsackLight(value1, weight1, value2, weight2, maxW):\n    if weight1 + weight2 <= maxW:\n        return value1 + value2\n    if weight1 <= maxW and (weight2 > maxW or value1 >= value2):\n        return value1\n    if weight2 <= maxW and (weight1 > maxW or value2 >= value1):\n        return value2\n    return 0",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.39_-_knapsackLight",
        "documentation": {}
    },
    {
        "label": "longestDigitsPrefix",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.40_-_longestDigitsPrefix",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.40_-_longestDigitsPrefix",
        "peekOfCode": "def longestDigitsPrefix(inputString):\n    for char in range(len(inputString)):\n        if not inputString[char].isdigit():\n            return inputString[:char]\n    return inputString",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.40_-_longestDigitsPrefix",
        "documentation": {}
    },
    {
        "label": "digitDegree",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.41_-_digitDegree",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.41_-_digitDegree",
        "peekOfCode": "def digitDegree(n):\n    degree = 0\n    while len(str(n)) > 1:\n        n = sum((int(digit) for digit in str(n)))\n        degree += 1\n    return degree",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.41_-_digitDegree",
        "documentation": {}
    },
    {
        "label": "bishopAndPawn",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.42_-_bishopAndPawn",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.42_-_bishopAndPawn",
        "peekOfCode": "def bishopAndPawn(bishop, pawn):\n    return abs(ord(bishop[0]) - ord(pawn[0])) == abs(ord(bishop[1]) - ord(pawn[1]))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.42_-_bishopAndPawn",
        "documentation": {}
    },
    {
        "label": "isBeautifulString",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.43_-_isBeautifulString",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.43_-_isBeautifulString",
        "peekOfCode": "def isBeautifulString(inputString):\n    for letter in range(ord(\"a\"), ord(\"z\")):\n        if inputString.count(chr(letter)) < inputString.count(chr(letter + 1)):\n            return False\n    return True",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.43_-_isBeautifulString",
        "documentation": {}
    },
    {
        "label": "findEmailDomain",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.44_-_findEmailDomain",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.44_-_findEmailDomain",
        "peekOfCode": "def findEmailDomain(address):\n    return address[address.rfind(\"@\") + 1 :]",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.44_-_findEmailDomain",
        "documentation": {}
    },
    {
        "label": "buildPalindrome",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.45_-_buildPalindrome",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.45_-_buildPalindrome",
        "peekOfCode": "def buildPalindrome(st):\n    if st == st[::-1]:  # Check for initial palindrome\n        return st\n    index = 0\n    subStr = st[index:]\n    while subStr != subStr[::-1]:  # while substring is not a palindrome\n        index += 1\n        subStr = st[index:]\n    return st + st[index - 1 :: -1]",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.45_-_buildPalindrome",
        "documentation": {}
    },
    {
        "label": "electionsWinners",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.46_-_electionsWinners",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.46_-_electionsWinners",
        "peekOfCode": "def electionsWinners(votes, k):\n    winners = 0\n    current_winner = max(votes)\n    for candidate in votes:\n        if k > 0 and candidate + k > current_winner:\n            winners += 1\n        if k == 0 and candidate == current_winner and votes.count(candidate) == 1:\n            winners += 1\n    return winners",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.46_-_electionsWinners",
        "documentation": {}
    },
    {
        "label": "isMAC48Address",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.47_-_isMAC48Address",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.47_-_isMAC48Address",
        "peekOfCode": "def isMAC48Address(inputString):\n    hex_chars = (\n        \"1\",\n        \"2\",\n        \"3\",\n        \"4\",\n        \"5\",\n        \"6\",\n        \"7\",\n        \"8\",",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.47_-_isMAC48Address",
        "documentation": {}
    },
    {
        "label": "isDigit",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.48_-_isDigit",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.48_-_isDigit",
        "peekOfCode": "def isDigit(symbol):\n    return symbol.isdigit()",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.48_-_isDigit",
        "documentation": {}
    },
    {
        "label": "lineEncoding",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.49_-_lineEncoding",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.49_-_lineEncoding",
        "peekOfCode": "def lineEncoding(s):\n    count = 1\n    output = []\n    for char in range(1, len(s)):\n        if s[char] == s[char - 1]:\n            count += 1\n        else:\n            if count > 1:\n                output.append(str(count) + s[char - 1])\n            else:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.49_-_lineEncoding",
        "documentation": {}
    },
    {
        "label": "chessKnight",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.50_-_chessKnight",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.50_-_chessKnight",
        "peekOfCode": "def chessKnight(cell):\n    moves = 0\n    # Starting at the top left, going counter-clockwise\n    if ord(cell[0]) >= ord(\"b\") and ord(cell[1]) <= ord(\"6\"):\n        moves += 1\n    if ord(cell[0]) >= ord(\"c\") and ord(cell[1]) <= ord(\"7\"):\n        moves += 1\n    if ord(cell[0]) >= ord(\"c\") and ord(cell[1]) >= ord(\"2\"):\n        moves += 1\n    if ord(cell[0]) >= ord(\"b\") and ord(cell[1]) >= ord(\"3\"):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.50_-_chessKnight",
        "documentation": {}
    },
    {
        "label": "deleteDigit",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.51_-_deleteDigit",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.51_-_deleteDigit",
        "peekOfCode": "def deleteDigit(n):\n    num = str(n)\n    highest = 0\n    for digit in range(len(num)):\n        output = num[:digit] + num[digit + 1 :]\n        if int(output) > int(highest):\n            highest = output\n    return int(highest)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.51_-_deleteDigit",
        "documentation": {}
    },
    {
        "label": "longestWord",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.52_-_longestWord",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.52_-_longestWord",
        "peekOfCode": "def longestWord(text):\n    longest = []\n    word = []\n    for char in text:\n        if ord(\"A\") <= ord(char) <= ord(\"Z\") or ord(\"a\") <= ord(char) <= ord(\"z\"):\n            word.append(char)\n        else:\n            if len(word) > len(longest):\n                longest = word\n            word = []",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.52_-_longestWord",
        "documentation": {}
    },
    {
        "label": "validTime",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.53_-_validTime",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.53_-_validTime",
        "peekOfCode": "def validTime(time):\n    groups = time.split(\":\")\n    if len(groups) != 2:\n        return False\n    if not (groups[0].isdigit() and groups[1].isdigit()):\n        return False\n    if int(groups[0]) > 23 or int(groups[1]) > 59:\n        return False\n    return True",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.53_-_validTime",
        "documentation": {}
    },
    {
        "label": "sumUpNumbers",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.54_-_sumUpNumbers",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.54_-_sumUpNumbers",
        "peekOfCode": "def sumUpNumbers(inputString):\n    total = 0\n    current_num = []\n    for char in inputString:\n        if char.isdigit():\n            current_num.append(char)\n        else:\n            if len(current_num) > 0:\n                num = int(\"\".join(current_num))\n                total += num",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.54_-_sumUpNumbers",
        "documentation": {}
    },
    {
        "label": "differentSquares",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.55_-_differentSquares",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.55_-_differentSquares",
        "peekOfCode": "def differentSquares(matrix):\n    squares = set()\n    for row in range(len(matrix) - 1):\n        for cell in range(len(matrix[row]) - 1):\n            square = (\n                (matrix[row][cell], matrix[row][cell + 1]),\n                (matrix[row + 1][cell], matrix[row + 1][cell + 1]),\n            )\n            squares.add(square)\n    return len(squares)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.55_-_differentSquares",
        "documentation": {}
    },
    {
        "label": "digitsProduct",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.56_-_digitsProduct",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.56_-_digitsProduct",
        "peekOfCode": "def digitsProduct(product):\n    # New idea: add product to factors\n    # while max(factors) > 10: split that num into factors\n    if product == 0:\n        return 10\n    factors = [product]\n    while max(factors) > 9:\n        factored = findFactors(max(factors))\n        if factored:\n            factors.remove(max(factors))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.56_-_digitsProduct",
        "documentation": {}
    },
    {
        "label": "findFactors",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.56_-_digitsProduct",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.56_-_digitsProduct",
        "peekOfCode": "def findFactors(n):\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return i, n // i\n    return False",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.56_-_digitsProduct",
        "documentation": {}
    },
    {
        "label": "fileNaming",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.57_-_fileNaming",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.57_-_fileNaming",
        "peekOfCode": "def fileNaming(names):\n    outnames = []\n    for name in names:\n        if name in outnames:\n            k = 1\n            while \"{}({})\".format(name, k) in outnames:\n                k += 1\n            name = \"{}({})\".format(name, k)\n        outnames.append(name)\n    return outnames",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.57_-_fileNaming",
        "documentation": {}
    },
    {
        "label": "messageFromBinaryCode",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.58_-_messageFromBinaryCode",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.58_-_messageFromBinaryCode",
        "peekOfCode": "def messageFromBinaryCode(code):\n    output = []\n    for i in range(0, len(code), 8):\n        letter = chr(int(code[i : i + 8], 2))\n        output.append(letter)\n    return \"\".join(output)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.58_-_messageFromBinaryCode",
        "documentation": {}
    },
    {
        "label": "spiralNumbers",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.59_-_spiralNumbers",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.59_-_spiralNumbers",
        "peekOfCode": "def spiralNumbers(n):\n    LEFT = \"left\"\n    RIGHT = \"right\"\n    UP = \"up\"\n    DOWN = \"down\"\n    direction = RIGHT\n    spiral = [[0 for i in range(n)] for j in range(n)]\n    row = 0\n    cell = 0\n    for num in range(1, (n * n) + 1):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.59_-_spiralNumbers",
        "documentation": {}
    },
    {
        "label": "sudoku",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.60_-_sudoku",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.60_-_sudoku",
        "peekOfCode": "def sudoku(grid):\n    match = [i for i in range(1, 10)]\n    for row in grid:\n        if sorted(row) != match:\n            return False\n    for column_index in range(9):\n        column = [grid[row_index][column_index] for row_index in range(9)]\n        if sorted(column) != match:\n            return False\n    for row in range(0, 9, 3):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.60_-_sudoku",
        "documentation": {}
    },
    {
        "label": "addTwoHugeNumbers",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.addTwoHugeNumbers",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.addTwoHugeNumbers",
        "peekOfCode": "def addTwoHugeNumbers(a, b):\n    lst_a = {}\n    lst_b = {}\n    i = 0\n    while a.value != None:\n        i += 1\n        lst_a[i] = a.value\n        if a.next != None:\n            a = a.next\n        else:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.addTwoHugeNumbers",
        "documentation": {}
    },
    {
        "label": "csAlphanumericRestriction",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.alpha",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.alpha",
        "peekOfCode": "def csAlphanumericRestriction(input_str): #c is every char in\ninput string\nis_numeric = False\nis_alpha = False\nfor c in input_str:\n% if c.isnumeric():\nis_numeric = True\nelif c.isalpha():\nis_alpha = True\nelse:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.alpha",
        "documentation": {}
    },
    {
        "label": "is_numeric",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.alpha",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.alpha",
        "peekOfCode": "is_numeric = False\nis_alpha = False\nfor c in input_str:\n% if c.isnumeric():\nis_numeric = True\nelif c.isalpha():\nis_alpha = True\nelse:\n‘ return False\nreturn (is_numeric and not is_alpha) or (is_alpha and not",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.alpha",
        "documentation": {}
    },
    {
        "label": "is_alpha",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.alpha",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.alpha",
        "peekOfCode": "is_alpha = False\nfor c in input_str:\n% if c.isnumeric():\nis_numeric = True\nelif c.isalpha():\nis_alpha = True\nelse:\n‘ return False\nreturn (is_numeric and not is_alpha) or (is_alpha and not\nis_numeric)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.alpha",
        "documentation": {}
    },
    {
        "label": "is_numeric",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.alpha",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.alpha",
        "peekOfCode": "is_numeric = True\nelif c.isalpha():\nis_alpha = True\nelse:\n‘ return False\nreturn (is_numeric and not is_alpha) or (is_alpha and not\nis_numeric)\nI",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.alpha",
        "documentation": {}
    },
    {
        "label": "is_alpha",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.alpha",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.alpha",
        "peekOfCode": "is_alpha = True\nelse:\n‘ return False\nreturn (is_numeric and not is_alpha) or (is_alpha and not\nis_numeric)\nI",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.alpha",
        "documentation": {}
    },
    {
        "label": "csAnythingButFive",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.anithingButFive",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.anithingButFive",
        "peekOfCode": "def csAnythingButFive(start, end):\n    count = 0\n    new_list = []\n    for num in range(start, end + 1):\n        str_num = str(num)\n        if \"5\" in str_num:\n            continue\n        count += 1\n    return count\nprint(csAnythingButFive(1, 5))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.anithingButFive",
        "documentation": {}
    },
    {
        "label": "csBinaryToASCII",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bin-2-ascii",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bin-2-ascii",
        "peekOfCode": "def csBinaryToASCII(binary):\n    string_blocks = (binary[i : i + 8] for i in range(0, len(binary), 8))\n    string = \"\".join(chr(int(char, 2)) for char in string_blocks)\n    return string\nprint(csBinaryToASCII(\"011011000110000101101101011000100110010001100001\"))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bin-2-ascii",
        "documentation": {}
    },
    {
        "label": "csBinaryToASCII",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.binaryToASCII",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.binaryToASCII",
        "peekOfCode": "def csBinaryToASCII(binary):\n    binary_letters = []\n    letters = \"\"\n    if binary == \"\":\n        return \"\"\n    for index in range(0, len(binary), 8):\n        binary_letters.append(binary[index : index + 8])\n    print(binary_letters)\n    for string in binary_letters:\n        binary_int = v = chr(int(string, 2))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.binaryToASCII",
        "documentation": {}
    },
    {
        "label": "checkBlanagrams",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.blanagrams",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.blanagrams",
        "peekOfCode": "def checkBlanagrams(word1, word2):\n    lenWord1 = len(word1)\n    lenWord2 = len(word2)\n    # To store the frequencies of characters\n    # of string word1 and word2\n    freq1 = [0] * 26\n    freq2 = [0] * 26\n    # To store the count of valid pairs\n    count = 0\n    # Update the frequencies of the characters of string word1",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.blanagrams",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "peekOfCode": "class Node:\n    def __init__(self, value):\n        self.value = value\nn = Node(10)\n# [10]\n# lets make a linked list node\nclass LLNode:\n    def __init__(self, value):\n        self.value = value\n        self.next = None",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "documentation": {}
    },
    {
        "label": "LLNode",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "peekOfCode": "class LLNode:\n    def __init__(self, value):\n        self.value = value\n        self.next = None\nl = LLNode(10)\n# [10] -> None\n# lets refactor the linked list node to be a doubly linked list node\nclass DLLNode:\n    def __init__(self, value):\n        self.value = value",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "documentation": {}
    },
    {
        "label": "DLLNode",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "peekOfCode": "class DLLNode:\n    def __init__(self, value):\n        self.value = value\n        self.next = None\n        self.prev = None\ndl = DLLNode(10)\n# None <- [10] -> None\n# Lets refactor the doubly linked list node to be a binary tree node\nclass BTNode:\n    def __init__(self, value):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "documentation": {}
    },
    {
        "label": "BTNode",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "peekOfCode": "class BTNode:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\nbt = BTNode(10)\nbt.left = BTNode(34)\nbt.right = BTNode(12)\n\"\"\"\n[12, 34, 1, 56, 1]",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "documentation": {}
    },
    {
        "label": "BSTNode",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "peekOfCode": "class BSTNode:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n    def insert(self, value):\n        # left case\n        if value < self.value:\n            if self.left is None:\n                self.left = BSTNode(value)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "documentation": {}
    },
    {
        "label": "BinaryTreeNode",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "peekOfCode": "class BinaryTreeNode:\n    def __init__(self, value=0, left=None, right=None):\n        self.value = value\n        self.left = left\n        self.right = right\n\"\"\"\nr = 5\nlh = 1\nrh = \nr1 = 12",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "documentation": {}
    },
    {
        "label": "maxDepthR",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "peekOfCode": "def maxDepthR(self, root):\n    if root is None:\n        return 0\n    else:\n        left_height = self.maxDepthR(root.left)\n        right_height = self.maxDepthR(root.right)\n        return max(left_height, right_height) + 1\ndef maxDepthI(self, root):\n    # Your c\n    pass",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "documentation": {}
    },
    {
        "label": "maxDepthI",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "peekOfCode": "def maxDepthI(self, root):\n    # Your c\n    pass",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "peekOfCode": "n = Node(10)\n# [10]\n# lets make a linked list node\nclass LLNode:\n    def __init__(self, value):\n        self.value = value\n        self.next = None\nl = LLNode(10)\n# [10] -> None\n# lets refactor the linked list node to be a doubly linked list node",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "documentation": {}
    },
    {
        "label": "l",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "peekOfCode": "l = LLNode(10)\n# [10] -> None\n# lets refactor the linked list node to be a doubly linked list node\nclass DLLNode:\n    def __init__(self, value):\n        self.value = value\n        self.next = None\n        self.prev = None\ndl = DLLNode(10)\n# None <- [10] -> None",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "documentation": {}
    },
    {
        "label": "dl",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "peekOfCode": "dl = DLLNode(10)\n# None <- [10] -> None\n# Lets refactor the doubly linked list node to be a binary tree node\nclass BTNode:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\nbt = BTNode(10)\nbt.left = BTNode(34)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "documentation": {}
    },
    {
        "label": "bt",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "peekOfCode": "bt = BTNode(10)\nbt.left = BTNode(34)\nbt.right = BTNode(12)\n\"\"\"\n[12, 34, 1, 56, 1]\n        [12]\n      /      \\\n     [1]      [34]\n    /         /   \\\n  [1]      [12]    [56]",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "documentation": {}
    },
    {
        "label": "bt.left",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "peekOfCode": "bt.left = BTNode(34)\nbt.right = BTNode(12)\n\"\"\"\n[12, 34, 1, 56, 1]\n        [12]\n      /      \\\n     [1]      [34]\n    /         /   \\\n  [1]      [12]    [56]\n          /  \\",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "documentation": {}
    },
    {
        "label": "bt.right",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "peekOfCode": "bt.right = BTNode(12)\n\"\"\"\n[12, 34, 1, 56, 1]\n        [12]\n      /      \\\n     [1]      [34]\n    /         /   \\\n  [1]      [12]    [56]\n          /  \\\n        n     n",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "peekOfCode": "t = BSTNode(10)\nt.insert(20)\nt.insert(15)\nresult = t.search(15)\nprint(result)\n# result [15]\n#        /  \\\n#       n    n\n#\n#        [10] s",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "peekOfCode": "result = t.search(15)\nprint(result)\n# result [15]\n#        /  \\\n#       n    n\n#\n#        [10] s\n#       /    \\\n#      n      [20] s\n#             /   \\",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "documentation": {}
    },
    {
        "label": "max_depth",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "peekOfCode": "max_depth = 2\nleft_height = 0\nright_height = 0\n- if there is no root node then return a zero\n- otherwise\n  - set a left height based on a call to the max depth on the left node\n  - set a right height based on a call to the max depth on the right node\n  - get the max of the left height and the right height then return that plus 1\n** iterative version **\n- create a stack to simulate the call stack",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "documentation": {}
    },
    {
        "label": "left_height",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "peekOfCode": "left_height = 0\nright_height = 0\n- if there is no root node then return a zero\n- otherwise\n  - set a left height based on a call to the max depth on the left node\n  - set a right height based on a call to the max depth on the right node\n  - get the max of the left height and the right height then return that plus 1\n** iterative version **\n- create a stack to simulate the call stack\n- if the root node is not none",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "documentation": {}
    },
    {
        "label": "right_height",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "peekOfCode": "right_height = 0\n- if there is no root node then return a zero\n- otherwise\n  - set a left height based on a call to the max depth on the left node\n  - set a right height based on a call to the max depth on the right node\n  - get the max of the left height and the right height then return that plus 1\n** iterative version **\n- create a stack to simulate the call stack\n- if the root node is not none\n  - append the root node to the stack and also the height of that node (1, root)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "documentation": {}
    },
    {
        "label": "max_depth",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "peekOfCode": "max_depth = 0\n- while the stack is not empty\n  pop the tuple off the stack, extracting the current_depth and the root_node\n  - if the root_node is not none\n    set max_depth to the max of current_depth and the max_depth\n    - push the data of (max_depth + 1, root_node.left) on to the stack\n    - push the data of (max_depth + 1, root_node.right) on to the stack\nreturn the max_depth to the caller\n    5   \n   / \\",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "peekOfCode": "r = 5\nlh = 1\nrh = \nr1 = 12\nlh1 = 1\nrh1 = 1\nr2 = None\nr3 = None\nr4 = 32\nlh = 1",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "documentation": {}
    },
    {
        "label": "lh",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "peekOfCode": "lh = 1\nrh = \nr1 = 12\nlh1 = 1\nrh1 = 1\nr2 = None\nr3 = None\nr4 = 32\nlh = 1\nrh = 1",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "documentation": {}
    },
    {
        "label": "rh",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "peekOfCode": "rh = \nr1 = 12\nlh1 = 1\nrh1 = 1\nr2 = None\nr3 = None\nr4 = 32\nlh = 1\nrh = 1\nr5 = 8",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "documentation": {}
    },
    {
        "label": "r1",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "peekOfCode": "r1 = 12\nlh1 = 1\nrh1 = 1\nr2 = None\nr3 = None\nr4 = 32\nlh = 1\nrh = 1\nr5 = 8\nlh = 0",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "documentation": {}
    },
    {
        "label": "lh1",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "peekOfCode": "lh1 = 1\nrh1 = 1\nr2 = None\nr3 = None\nr4 = 32\nlh = 1\nrh = 1\nr5 = 8\nlh = 0\nrh = 0",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "documentation": {}
    },
    {
        "label": "rh1",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "peekOfCode": "rh1 = 1\nr2 = None\nr3 = None\nr4 = 32\nlh = 1\nrh = 1\nr5 = 8\nlh = 0\nrh = 0\nr6 = None",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "documentation": {}
    },
    {
        "label": "r2",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "peekOfCode": "r2 = None\nr3 = None\nr4 = 32\nlh = 1\nrh = 1\nr5 = 8\nlh = 0\nrh = 0\nr6 = None\nr7 = None",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "documentation": {}
    },
    {
        "label": "r3",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "peekOfCode": "r3 = None\nr4 = 32\nlh = 1\nrh = 1\nr5 = 8\nlh = 0\nrh = 0\nr6 = None\nr7 = None\nr8 = 4",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "documentation": {}
    },
    {
        "label": "r4",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "peekOfCode": "r4 = 32\nlh = 1\nrh = 1\nr5 = 8\nlh = 0\nrh = 0\nr6 = None\nr7 = None\nr8 = 4\nlh = 0",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "documentation": {}
    },
    {
        "label": "lh",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "peekOfCode": "lh = 1\nrh = 1\nr5 = 8\nlh = 0\nrh = 0\nr6 = None\nr7 = None\nr8 = 4\nlh = 0\nrh = 0",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "documentation": {}
    },
    {
        "label": "rh",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "peekOfCode": "rh = 1\nr5 = 8\nlh = 0\nrh = 0\nr6 = None\nr7 = None\nr8 = 4\nlh = 0\nrh = 0\nr9 = None",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "documentation": {}
    },
    {
        "label": "r5",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "peekOfCode": "r5 = 8\nlh = 0\nrh = 0\nr6 = None\nr7 = None\nr8 = 4\nlh = 0\nrh = 0\nr9 = None\nr10 = None",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "documentation": {}
    },
    {
        "label": "lh",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "peekOfCode": "lh = 0\nrh = 0\nr6 = None\nr7 = None\nr8 = 4\nlh = 0\nrh = 0\nr9 = None\nr10 = None\n\"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "documentation": {}
    },
    {
        "label": "rh",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "peekOfCode": "rh = 0\nr6 = None\nr7 = None\nr8 = 4\nlh = 0\nrh = 0\nr9 = None\nr10 = None\n\"\"\"\ndef maxDepthR(self, root):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "documentation": {}
    },
    {
        "label": "r6",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "peekOfCode": "r6 = None\nr7 = None\nr8 = 4\nlh = 0\nrh = 0\nr9 = None\nr10 = None\n\"\"\"\ndef maxDepthR(self, root):\n    if root is None:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "documentation": {}
    },
    {
        "label": "r7",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "peekOfCode": "r7 = None\nr8 = 4\nlh = 0\nrh = 0\nr9 = None\nr10 = None\n\"\"\"\ndef maxDepthR(self, root):\n    if root is None:\n        return 0",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "documentation": {}
    },
    {
        "label": "r8",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "peekOfCode": "r8 = 4\nlh = 0\nrh = 0\nr9 = None\nr10 = None\n\"\"\"\ndef maxDepthR(self, root):\n    if root is None:\n        return 0\n    else:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "documentation": {}
    },
    {
        "label": "lh",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "peekOfCode": "lh = 0\nrh = 0\nr9 = None\nr10 = None\n\"\"\"\ndef maxDepthR(self, root):\n    if root is None:\n        return 0\n    else:\n        left_height = self.maxDepthR(root.left)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "documentation": {}
    },
    {
        "label": "rh",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "peekOfCode": "rh = 0\nr9 = None\nr10 = None\n\"\"\"\ndef maxDepthR(self, root):\n    if root is None:\n        return 0\n    else:\n        left_height = self.maxDepthR(root.left)\n        right_height = self.maxDepthR(root.right)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "documentation": {}
    },
    {
        "label": "r9",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "peekOfCode": "r9 = None\nr10 = None\n\"\"\"\ndef maxDepthR(self, root):\n    if root is None:\n        return 0\n    else:\n        left_height = self.maxDepthR(root.left)\n        right_height = self.maxDepthR(root.right)\n        return max(left_height, right_height) + 1",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "documentation": {}
    },
    {
        "label": "r10",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "peekOfCode": "r10 = None\n\"\"\"\ndef maxDepthR(self, root):\n    if root is None:\n        return 0\n    else:\n        left_height = self.maxDepthR(root.left)\n        right_height = self.maxDepthR(root.right)\n        return max(left_height, right_height) + 1\ndef maxDepthI(self, root):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.bst",
        "documentation": {}
    },
    {
        "label": "add",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.challenges",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.challenges",
        "peekOfCode": "def add(a, b):\n    return a + b\nprint(add(3, 2))\n# \"\"\"\n# Challenge #2:\n# Write a function that takes an integer `minutes` and converts it to seconds.\n# Examples:\n# - convert(5) ➞ 300\n# - convert(3) ➞ 180\n# - convert(2) ➞ 120",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.challenges",
        "documentation": {}
    },
    {
        "label": "convert",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.challenges",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.challenges",
        "peekOfCode": "def convert(minutes):\n    return minutes * 60\nprint(convert(5))\n# \"\"\"\n# Challenge #3:\n# Create a function that takes a string and returns it as an integer.\n# Examples:\n# - string_int(\"6\") ➞ 6\n# - string_int(\"1000\") ➞ 1000\n# - string_int(\"12\") ➞ 12",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.challenges",
        "documentation": {}
    },
    {
        "label": "string_int",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.challenges",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.challenges",
        "peekOfCode": "def string_int(txt):\n    return int(txt)\nprint(string_int(\"6\"))\nprint(string_int(\"1000\"))\nprint(string_int(\"12\"))\n# \"\"\"\n# Challenge #4:\n# Create a function that takes length and width and finds the perimeter of a\n# rectangle.\n# Examples:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.challenges",
        "documentation": {}
    },
    {
        "label": "csCheckPalindrome",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.check-palindrome",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.check-palindrome",
        "peekOfCode": "def csCheckPalindrome(input_str):\n    if input_str[::-1] == input_str:\n        return True\n    return False",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.check-palindrome",
        "documentation": {}
    },
    {
        "label": "concatenateArrays",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.concatenateArrays",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.concatenateArrays",
        "peekOfCode": "def concatenateArrays(a, b):\n    return a + b",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.concatenateArrays",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.condense_linked_list",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.condense_linked_list",
        "peekOfCode": "class ListNode(object):\n  def __init__(self, x):\n    self.value = x\n    self.next = None\ndef condense_linked_list(node):\n   root = ListNode(0)\n   root.next = head\n         p1 = head\n            if p1 is None:\n            return root.next",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.condense_linked_list",
        "documentation": {}
    },
    {
        "label": "condense_linked_list",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.condense_linked_list",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.condense_linked_list",
        "peekOfCode": "def condense_linked_list(node):\n   root = ListNode(0)\n   root.next = head\n         p1 = head\n            if p1 is None:\n            return root.next\n        p = p1.next\n        if p is None:\n            return root.next\n        while p:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.condense_linked_list",
        "documentation": {}
    },
    {
        "label": "plus_one",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_arraysandstrings",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_arraysandstrings",
        "peekOfCode": "def plus_one(digits):\n    # Your code here\n    n = len(digits)\n    # iterate over the list from right to left\n    for i in range(n - 1, -1, -1):\n        # idx = n - 1 - i\n        idx = i\n        # if the current digit is a 9 then set it to a 0\n        if digits[idx] == 9:\n            digits[idx] = 0",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_arraysandstrings",
        "documentation": {}
    },
    {
        "label": "16Bits",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_arraysandstrings",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_arraysandstrings",
        "peekOfCode": "16Bits = 2Bytes\n8Bit, 16Bit, 32Bit, 64Bit, 128Bit\n```\n[123, \"hello\" ]\nA = [\"Hello\", 232, 100]\nA[0] -> @A + offest 0 * 2\nA[1] -> @A + offset 1 * 2 => 100 + 1 * 2\noffest = base addr * size of data in bucket\n          128 64 32 16 8 4 2 1\n00000000   0  1   1  1 1 0 1 1",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_arraysandstrings",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_arraysandstrings",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_arraysandstrings",
        "peekOfCode": "A = [\"Hello\", 232, 100]\nA[0] -> @A + offest 0 * 2\nA[1] -> @A + offset 1 * 2 => 100 + 1 * 2\noffest = base addr * size of data in bucket\n          128 64 32 16 8 4 2 1\n00000000   0  1   1  1 1 0 1 1\n```\n```\n[\n0x100: 00000000",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_arraysandstrings",
        "documentation": {}
    },
    {
        "label": "offest",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_arraysandstrings",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_arraysandstrings",
        "peekOfCode": "offest = base addr * size of data in bucket\n          128 64 32 16 8 4 2 1\n00000000   0  1   1  1 1 0 1 1\n```\n```\n[\n0x100: 00000000\n0x101: 01111011\n0x102:\n0x103:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_arraysandstrings",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_arraysandstrings",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_arraysandstrings",
        "peekOfCode": "a = [(\"bob\", (1, 2, 3, \"dave\"), [{\"bob\": [1, 2, \"Hello\"]}], (123, 22)), (2.7), \"bob\"]\na[0][1][3][1]\n[] -> () -> 1 2 3\n```\n()\n1\n2\n3\n# **CODE**: 3672\n\"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_arraysandstrings",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_arraysandstrings",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_arraysandstrings",
        "peekOfCode": "n = 3\nidx = 3 - 1 - 2\n\"\"\"\ndef plus_one(digits):\n    # Your code here\n    n = len(digits)\n    # iterate over the list from right to left\n    for i in range(n - 1, -1, -1):\n        # idx = n - 1 - i\n        idx = i",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_arraysandstrings",
        "documentation": {}
    },
    {
        "label": "idx",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_arraysandstrings",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_arraysandstrings",
        "peekOfCode": "idx = 3 - 1 - 2\n\"\"\"\ndef plus_one(digits):\n    # Your code here\n    n = len(digits)\n    # iterate over the list from right to left\n    for i in range(n - 1, -1, -1):\n        # idx = n - 1 - i\n        idx = i\n        # if the current digit is a 9 then set it to a 0",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_arraysandstrings",
        "documentation": {}
    },
    {
        "label": "HashTable",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46ht",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46ht",
        "peekOfCode": "class HashTable:\n# \"\"\"\n# A hash table with `capacity` buckets\n# that accepts string keys\n# \"\"\"\ndef __init__(self, capacity):\n    self.capacity = capacity  # Number of buckets in the hash table\n    self.storage = [None] * capacity\n    self.item_count = 0\ndef djb2(self, key):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46ht",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46ht",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46ht",
        "peekOfCode": "class ListNode:\n    def __init__(self, key, value):\n        self.key = key\n        self.value = value\n        self.next = None\nclass MyHashTable:\n    def __init__(self):\n        # Your code here\n        self.capacity = 1000\n        self.size = 0# Number of buckets in the hash table",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46ht",
        "documentation": {}
    },
    {
        "label": "MyHashTable",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46ht",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46ht",
        "peekOfCode": "class MyHashTable:\n    def __init__(self):\n        # Your code here\n        self.capacity = 1000\n        self.size = 0# Number of buckets in the hash table\n        self.storage = [None] * self.capacity\n    # Your code here\n    def put(self, key, value):\n        # Your code here\n        index = self.hash_index(key)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46ht",
        "documentation": {}
    },
    {
        "label": "my_hash",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46ht",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46ht",
        "peekOfCode": "def my_hash(key):\n  sum = 0\n  for c in key:\n    sum += ord(c)\n  return sum\ndef my_hash2(key):\n  sum = 0\n  string_bytes = key.encode()\n  for b in string_bytes:\n    sum += b",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46ht",
        "documentation": {}
    },
    {
        "label": "my_hash2",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46ht",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46ht",
        "peekOfCode": "def my_hash2(key):\n  sum = 0\n  string_bytes = key.encode()\n  for b in string_bytes:\n    sum += b\n  return sum\n# print(my_hash(\"ABC\"))\n# print(my_hash2(\"ABC\"))\n# djb2\n# encode key",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46ht",
        "documentation": {}
    },
    {
        "label": "djb2",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46ht",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46ht",
        "peekOfCode": "def djb2(key):\n  str_key = str(key).encode()\n  hash_value = 5381\n  for b in str_key:\n    # shifted_value = hash_value << 5\n    # add_shift = shifted_value + hash_value\n    # total_hash = add_shift + b\n    # total_hash &= 0xffffffff # 0b11111111111111111111111111111111 32bits\n    # final_hash = total_hash & 0xffffffff\n    hash_value = ((hash_value << 5) + hash_value) + b",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46ht",
        "documentation": {}
    },
    {
        "label": "djb2",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46ht",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46ht",
        "peekOfCode": "def djb2(self, key):\n    \"\"\"\n    DJB2 hash, 32-bit\n    \"\"\"\n    # Cast the key to a string and get bytes\n    str_key = str(key).encode()\n    # Start from an arbitrary large prime\n    hash_value = 5381\n    # Bit-shift and sum value for each character\n    for b in str_key:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46ht",
        "documentation": {}
    },
    {
        "label": "hash_index",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46ht",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46ht",
        "peekOfCode": "def hash_index(self, key):\n    \"\"\"\n    Take an arbitrary key and return a valid integer index\n    between within the storage capacity of the hash table.\n    \"\"\"\n    return self.djb2(key) % self.capacity\ndef put(self, key, value):\n    \"\"\"\n    Store the value with the given key.\n    \"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46ht",
        "documentation": {}
    },
    {
        "label": "put",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46ht",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46ht",
        "peekOfCode": "def put(self, key, value):\n    \"\"\"\n    Store the value with the given key.\n    \"\"\"\n    index = self.hash_index(key)\n    self.storage[index] = value\n    return\ndef delete(self, key):\n    \"\"\"\n    Remove the value stored with the given key.",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46ht",
        "documentation": {}
    },
    {
        "label": "delete",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46ht",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46ht",
        "peekOfCode": "def delete(self, key):\n    \"\"\"\n    Remove the value stored with the given key.\n    \"\"\"\n    index = self.hash_index(key)\n    self.storage[index] = None\ndef get(self, key):\n# \"\"\"\n#     Retrieve the value stored with the given key.\n#     Returns None if the key is not found.",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46ht",
        "documentation": {}
    },
    {
        "label": "get",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46ht",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46ht",
        "peekOfCode": "def get(self, key):\n# \"\"\"\n#     Retrieve the value stored with the given key.\n#     Returns None if the key is not found.\n#     \"\"\"\n    index = self.hash_index(key)\n    return self.storage[index]\n\"\"\"# CODE 7506\n# Demo\n\"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46ht",
        "documentation": {}
    },
    {
        "label": "my_hash_number",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46ht",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46ht",
        "peekOfCode": "my_hash_number = djb2(\"ABCD\")\nprint(my_hash_number)\nstorage = [None] * 10\n\"\"\"# CODE 7506\n\"\"\"\nclass HashTable:\n# \"\"\"\n# A hash table with `capacity` buckets\n# that accepts string keys\n# \"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46ht",
        "documentation": {}
    },
    {
        "label": "storage",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46ht",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46ht",
        "peekOfCode": "storage = [None] * 10\n\"\"\"# CODE 7506\n\"\"\"\nclass HashTable:\n# \"\"\"\n# A hash table with `capacity` buckets\n# that accepts string keys\n# \"\"\"\ndef __init__(self, capacity):\n    self.capacity = capacity  # Number of buckets in the hash table",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46ht",
        "documentation": {}
    },
    {
        "label": "hash_table",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46ht",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46ht",
        "peekOfCode": "hash_table = MyHashTable();\nhash_table.put(\"a\", 1);\nhash_table.put(\"b\", 2);\nhash_table.get(\"a\");            // returns 1\nhash_table.get(\"c\");            // returns -1 (not found)\nhash_table.put(\"b\", 1);         // update the existing value\nhash_table.get(\"b\");            // returns 1\nhash_table.remove(\"b\");         // remove the mapping for 2\nhash_table.get(\"b\");            // returns -1 (not found)\n```",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46ht",
        "documentation": {}
    },
    {
        "label": "greet",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "peekOfCode": "def greet(name=\"world!\"):\n  print(type(name))\n  print(f\"Hello {name}\")\ngreet(\"1234\")\n# lets play with some strings\n# ['capitalize', 'casefold', 'center', 'count', 'encode', 'endswith', 'expandtabs', 'find', 'format', 'format_map', 'index', 'isalnum', 'isalpha', 'isascii', 'isdecimal', 'isdigit', 'isidentifier', 'islower', 'isnumeric', 'isprintable', 'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lower', 'lstrip', 'maketrans', 'partition', 'replace', 'rfind', 'rindex', 'rjust', 'rpartition', 'rsplit', 'rstrip', 'split', 'splitlines', 'startswith', 'strip', 'swapcase', 'title', 'translate', 'upper', 'zfill']\n# print(dir(\"\"))\n# print(help(\"\".count))\na = \"aabbccqqZbqq\".swapcase()\nfor c in a:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "documentation": {}
    },
    {
        "label": "addition",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "peekOfCode": "def addition(a, b):\n    # Your code here\n  try:\n    a = int(a)\n    b = int(b)\n    return a + b\n  except:\n    print(\"please supply valid integer arguments\")\n    return 0\n# tests",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "documentation": {}
    },
    {
        "label": "convert",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "peekOfCode": "def convert(minutes):\n    # Your code here\n    return minutes * 60\nprint(convert(5)) #  ➞ 300\nprint(convert(3)) #  ➞ 180\nprint(convert(2)) # ➞ 120\n\"\"\"\nChallenge #3:\nCreate a function that takes a string and returns it as an integer.\nExamples:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "documentation": {}
    },
    {
        "label": "string_int",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "peekOfCode": "def string_int(txt):\n    # Your code here\n\"\"\"\nChallenge #4:\nCreate a function that takes length and width and finds the perimeter of a\nrectangle.\nExamples:\n- find_perimeter(6, 7) ➞ 26\n- find_perimeter(20, 10) ➞ 60\n- find_perimeter(2, 9) ➞ 22",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "documentation": {}
    },
    {
        "label": "find_perimeter",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "peekOfCode": "def find_perimeter(length, width):\n  result = (length * 2) + (width * 2)\n  return result\n# tests\nprint(find_perimeter(6, 7)) # ➞ 26\nprint(find_perimeter(20, 10)) # ➞ 60\nprint(find_perimeter(2, 9)) # ➞ 22\n\"\"\"\nChallenge #5:\nCreate a function that returns a list of strings sorted by length in ascending",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "documentation": {}
    },
    {
        "label": "sort_by_length",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "peekOfCode": "def sort_by_length(lst):\n  \"\"\"\n    sort a list of stringe using the length of each string as the key\n    input: lst -> list(str)\n    output: -> list(str)\n  \"\"\"\n  return sorted(lst, key=len)\n\"\"\"\nChallenge #6:\nCreate a function that takes a string, checks if it has the same number of \"x\"s",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "documentation": {}
    },
    {
        "label": "XO",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "peekOfCode": "def XO(txt):\n\"\"\"\nChallenge #7:\nGiven an unsorted list, create a function that returns the nth smallest element\n(the smallest element is the first smallest, the second smallest element is the\nsecond smallest, etc).\nExamples:\n- nth_smallest([7, 5, 3, 1], 1) ➞ 1\n- nth_smallest([1, 3, 5, 7], 3) ➞ 5\n- nth_smallest([1, 3, 5, 7], 5) ➞ None",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "documentation": {}
    },
    {
        "label": "nth_smallest",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "peekOfCode": "def nth_smallest(lst, n):\n\"\"\"\nChallenge #8:\nCreate a function that returns the number of arguments it was called with.\nExamples:\n- num_args() ➞ 0\n- num_args(\"foo\") ➞ 1\n- num_args(\"foo\", \"bar\") ➞ 2\n- num_args(True, False) ➞ 2\n- num_args({}) ➞ 1",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "documentation": {}
    },
    {
        "label": "num_args",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "peekOfCode": "def num_args():\n\"\"\"\nChallenge #9:\nWrite a function that creates a dictionary with each (key, value) pair being\nthe (lower case, upper case) versions of a letter, respectively.\nExamples:\n- mapping([\"p\", \"s\"]) ➞ { \"p\": \"P\", \"s\": \"S\" }\n- mapping([\"a\", \"b\", \"c\"]) ➞ { \"a\": \"A\", \"b\": \"B\", \"c\": \"C\" }\n- mapping([\"a\", \"v\", \"y\", \"z\"]) ➞ { \"a\": \"A\", \"v\": \"V\", \"y\": \"Y\", \"z\": \"Z\" }\nNotes:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "documentation": {}
    },
    {
        "label": "mapping",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "peekOfCode": "def mapping(letters):\n\"\"\"\nChallenge #10:\nCreate a function that applies a discount d to every number in the list.\nExamples:\n- get_discounts([2, 4, 6, 11], \"50%\") ➞ [1, 2, 3, 5.5]\n- get_discounts([10, 20, 40, 80], \"75%\") ➞ [7.5, 15, 30, 60]\n- get_discounts([100], \"45%\") ➞ [45]\nNotes:\n- The discount is the percentage of the original price (i.e the discount of",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "documentation": {}
    },
    {
        "label": "get_discounts",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "peekOfCode": "def get_discounts(nums, percentage):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "peekOfCode": "a = 10\na = \"a string\"\na = 1.2\na = []\na = ()\na = {\"name\": \"Tom\"}\nb = []\nb.append(\"Dave\")\nb.append(\"Bob\")\nb.append(\"Joe\")",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "peekOfCode": "a = \"a string\"\na = 1.2\na = []\na = ()\na = {\"name\": \"Tom\"}\nb = []\nb.append(\"Dave\")\nb.append(\"Bob\")\nb.append(\"Joe\")\n# print(type(a))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "peekOfCode": "a = 1.2\na = []\na = ()\na = {\"name\": \"Tom\"}\nb = []\nb.append(\"Dave\")\nb.append(\"Bob\")\nb.append(\"Joe\")\n# print(type(a))\n# print(a[\"name\"])",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "peekOfCode": "a = []\na = ()\na = {\"name\": \"Tom\"}\nb = []\nb.append(\"Dave\")\nb.append(\"Bob\")\nb.append(\"Joe\")\n# print(type(a))\n# print(a[\"name\"])\n# print(dir([]))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "peekOfCode": "a = ()\na = {\"name\": \"Tom\"}\nb = []\nb.append(\"Dave\")\nb.append(\"Bob\")\nb.append(\"Joe\")\n# print(type(a))\n# print(a[\"name\"])\n# print(dir([]))\nprint(b.pop(0))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "peekOfCode": "a = {\"name\": \"Tom\"}\nb = []\nb.append(\"Dave\")\nb.append(\"Bob\")\nb.append(\"Joe\")\n# print(type(a))\n# print(a[\"name\"])\n# print(dir([]))\nprint(b.pop(0))\nprint(b)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "peekOfCode": "b = []\nb.append(\"Dave\")\nb.append(\"Bob\")\nb.append(\"Joe\")\n# print(type(a))\n# print(a[\"name\"])\n# print(dir([]))\nprint(b.pop(0))\nprint(b)\n\"\"\"# PYTHON I CODE: 5976\"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "peekOfCode": "a = [\"Dave\"] * 25\na[20] = \"Steve\"\n# for n in range(12, 25):\n#   print(a[n])\nfor x in enumerate(a):\n  i = x[0]\n  e = x[1]\n  if i == 9:\n    continue\n  print(i)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "documentation": {}
    },
    {
        "label": "a[20]",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "peekOfCode": "a[20] = \"Steve\"\n# for n in range(12, 25):\n#   print(a[n])\nfor x in enumerate(a):\n  i = x[0]\n  e = x[1]\n  if i == 9:\n    continue\n  print(i)\n  print(e)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "peekOfCode": "a = int(input(\"input a number! \"))\nb = int(input(\"input a number! \"))4\nprint(f\"{a + b}\")\n\"\"\"# PYTHON I CODE: 5976\"\"\"\n# lets reuse some code...\ndef greet(name=\"world!\"):\n  print(type(name))\n  print(f\"Hello {name}\")\ngreet(\"1234\")\n# lets play with some strings",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "peekOfCode": "b = int(input(\"input a number! \"))4\nprint(f\"{a + b}\")\n\"\"\"# PYTHON I CODE: 5976\"\"\"\n# lets reuse some code...\ndef greet(name=\"world!\"):\n  print(type(name))\n  print(f\"Hello {name}\")\ngreet(\"1234\")\n# lets play with some strings\n# ['capitalize', 'casefold', 'center', 'count', 'encode', 'endswith', 'expandtabs', 'find', 'format', 'format_map', 'index', 'isalnum', 'isalpha', 'isascii', 'isdecimal', 'isdigit', 'isidentifier', 'islower', 'isnumeric', 'isprintable', 'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lower', 'lstrip', 'maketrans', 'partition', 'replace', 'rfind', 'rindex', 'rjust', 'rpartition', 'rsplit', 'rstrip', 'split', 'splitlines', 'startswith', 'strip', 'swapcase', 'title', 'translate', 'upper', 'zfill']",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "peekOfCode": "a = \"aabbccqqZbqq\".swapcase()\nfor c in a:\n  if a.count(c) != 1:\n    print(c)\n# Lets put it all together\ncmd = \"\"\nwhile cmd != \"exit\":\n  cmd = input(\">> \")\n  if cmd == \"hello\" or cmd == \"hi\":\n    print(\"Hello to you!\")",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "documentation": {}
    },
    {
        "label": "cmd",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "peekOfCode": "cmd = \"\"\nwhile cmd != \"exit\":\n  cmd = input(\">> \")\n  if cmd == \"hello\" or cmd == \"hi\":\n    print(\"Hello to you!\")\n  elif cmd == \"goodbye\":\n    print(\"did you mean exit?\")\n  elif cmd == \"exit\":\n    print(\"Thanks you for using the repl\")\n  else:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "peekOfCode": "a = 3\nb = 2\nc = a + b\nreturn c\nreturn a + b = c\nreturn 3 + 2\n5 - 3 => 2\n5 - 2 => 3\n- addition(-3, -6) ➞ -9\n- addition(7, 3) ➞ 10",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "peekOfCode": "b = 2\nc = a + b\nreturn c\nreturn a + b = c\nreturn 3 + 2\n5 - 3 => 2\n5 - 2 => 3\n- addition(-3, -6) ➞ -9\n- addition(7, 3) ➞ 10\n\"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "peekOfCode": "c = a + b\nreturn c\nreturn a + b = c\nreturn 3 + 2\n5 - 3 => 2\n5 - 2 => 3\n- addition(-3, -6) ➞ -9\n- addition(7, 3) ➞ 10\n\"\"\"\n# - return a plus b",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "peekOfCode": "s = [\"a\", \"ccc\", \"dddd\", \"bb\"]\nd = {1: \"a\", 3: \"ccc\", 4: \"dddd\", 2: \"bb\"}\n\"\"\"\n  what not to do during your plan...\n  eg: go down a massive rabit hole and not read docs:::\n\"\"\"\n# create an empty dictionary\n# create a list to return\n# iterate over each string extract the len of the elem and the val of the elem\n#   use the len as the key and use the str as a val",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "peekOfCode": "d = {1: \"a\", 3: \"ccc\", 4: \"dddd\", 2: \"bb\"}\n\"\"\"\n  what not to do during your plan...\n  eg: go down a massive rabit hole and not read docs:::\n\"\"\"\n# create an empty dictionary\n# create a list to return\n# iterate over each string extract the len of the elem and the val of the elem\n#   use the len as the key and use the str as a val\n# store a prev key -1",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs46_python_i",
        "documentation": {}
    },
    {
        "label": "Animal",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs47_python_ii",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs47_python_ii",
        "peekOfCode": "class Animal:\n    def __init__(self, name=\"\", kind=\"\", color=\"\"):\n        self.name = name\n        self.color = color\n        self.kind = kind\n    def description(self):\n        # return \"%s is a %s %s.\" % (self.name, self.color, self.kind)\n        return f\"{self.name} is a {self.color} {self.kind}\"\n\"\"\"\ninstantiate an instance of the Animal class labeled cat",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs47_python_ii",
        "documentation": {}
    },
    {
        "label": "last",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs47_python_ii",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs47_python_ii",
        "peekOfCode": "def last(a, n):\n    if n > len(a):\n        return \"invalid\"\n    if n == 0:\n        return []\n    return a[0 - n : len(a)]\n# tests\nprint(last([1, 2, 3, 4, 5], 1))  #  ➞ [5]\nprint(last([4, 3, 9, 9, 7, 6], 3))  #  ➞ [9, 7, 6]\nprint(last([1, 2, 3, 4, 5], 7))  # ➞ \"invalid\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs47_python_ii",
        "documentation": {}
    },
    {
        "label": "add_indexes",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs47_python_ii",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs47_python_ii",
        "peekOfCode": "def add_indexes(numbers):\n    pass",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs47_python_ii",
        "documentation": {}
    },
    {
        "label": "output",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs47_python_ii",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs47_python_ii",
        "peekOfCode": "output = []\nmath_module_functions_list = dir(math)\nfor function_string in math_module_functions_list:\n    if function_string[0:2] == \"is\":\n        output.append(function_string)\noutput.sort()\nprint(output)\n# print(func)\n# if func == \"isinf\":\n#   print(\"i got one!\")",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs47_python_ii",
        "documentation": {}
    },
    {
        "label": "math_module_functions_list",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs47_python_ii",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs47_python_ii",
        "peekOfCode": "math_module_functions_list = dir(math)\nfor function_string in math_module_functions_list:\n    if function_string[0:2] == \"is\":\n        output.append(function_string)\noutput.sort()\nprint(output)\n# print(func)\n# if func == \"isinf\":\n#   print(\"i got one!\")\n# print(\"bobinf\".startswith(\"is\"))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs47_python_ii",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs47_python_ii",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs47_python_ii",
        "peekOfCode": "s = \"this is a string\"\ns_l = s.split()\ns_l.reverse()\nreversed_string = \" \".join(s_l)\nprint(s)\nprint(reversed_string)\n\"\"\"\nBelow, you'll find a class definition for animals. Create two new animals `cat`\nand `dog`. Set `cat` to have a name of \"Purrfect\", kind of \"cat\",\nand color of \"brown\". Set `dog` to have a name of \"Fido\",",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs47_python_ii",
        "documentation": {}
    },
    {
        "label": "s_l",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs47_python_ii",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs47_python_ii",
        "peekOfCode": "s_l = s.split()\ns_l.reverse()\nreversed_string = \" \".join(s_l)\nprint(s)\nprint(reversed_string)\n\"\"\"\nBelow, you'll find a class definition for animals. Create two new animals `cat`\nand `dog`. Set `cat` to have a name of \"Purrfect\", kind of \"cat\",\nand color of \"brown\". Set `dog` to have a name of \"Fido\",\nkind of \"dog\", and color of \"black\".",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs47_python_ii",
        "documentation": {}
    },
    {
        "label": "reversed_string",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs47_python_ii",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs47_python_ii",
        "peekOfCode": "reversed_string = \" \".join(s_l)\nprint(s)\nprint(reversed_string)\n\"\"\"\nBelow, you'll find a class definition for animals. Create two new animals `cat`\nand `dog`. Set `cat` to have a name of \"Purrfect\", kind of \"cat\",\nand color of \"brown\". Set `dog` to have a name of \"Fido\",\nkind of \"dog\", and color of \"black\".\n\"\"\"\nclass Animal:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs47_python_ii",
        "documentation": {}
    },
    {
        "label": "cat",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs47_python_ii",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs47_python_ii",
        "peekOfCode": "cat = Animal(\"Purrfect\", \"cat\", \"Brown\")\ndog = Animal()\n# cat.name = \"Purrfect\"\n# cat.kind = \"cat\"\n# cat.color = \"brown\"\ndog.name = \"Fido\"\ndog.kind = \"dog\"\ndog.color = \"black\"\n# print(help([].sort))\n# Should print Purrfect is a brown cat.",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs47_python_ii",
        "documentation": {}
    },
    {
        "label": "dog",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs47_python_ii",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs47_python_ii",
        "peekOfCode": "dog = Animal()\n# cat.name = \"Purrfect\"\n# cat.kind = \"cat\"\n# cat.color = \"brown\"\ndog.name = \"Fido\"\ndog.kind = \"dog\"\ndog.color = \"black\"\n# print(help([].sort))\n# Should print Purrfect is a brown cat.\nprint(cat.description())",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs47_python_ii",
        "documentation": {}
    },
    {
        "label": "dog.name",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs47_python_ii",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs47_python_ii",
        "peekOfCode": "dog.name = \"Fido\"\ndog.kind = \"dog\"\ndog.color = \"black\"\n# print(help([].sort))\n# Should print Purrfect is a brown cat.\nprint(cat.description())\n# Should print Fido is a black dog.\nprint(dog.description())\n\"\"\"# Demo\"\"\"\n\"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs47_python_ii",
        "documentation": {}
    },
    {
        "label": "dog.kind",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs47_python_ii",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs47_python_ii",
        "peekOfCode": "dog.kind = \"dog\"\ndog.color = \"black\"\n# print(help([].sort))\n# Should print Purrfect is a brown cat.\nprint(cat.description())\n# Should print Fido is a black dog.\nprint(dog.description())\n\"\"\"# Demo\"\"\"\n\"\"\"\nChallenge #1:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs47_python_ii",
        "documentation": {}
    },
    {
        "label": "dog.color",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs47_python_ii",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs47_python_ii",
        "peekOfCode": "dog.color = \"black\"\n# print(help([].sort))\n# Should print Purrfect is a brown cat.\nprint(cat.description())\n# Should print Fido is a black dog.\nprint(dog.description())\n\"\"\"# Demo\"\"\"\n\"\"\"\nChallenge #1:\nWrite a function that retrieves the last n elements from a list.",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_cs47_python_ii",
        "documentation": {}
    },
    {
        "label": "my_hash",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_dictionaries",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_dictionaries",
        "peekOfCode": "def my_hash(key):\n    sum = 0\n    c in key:\n        nc = ord(c)\n        print(c)\n        print(nc)\nmy_hash(\"A\")\n\"\"\"\nAdd \"Herb\" to the phonebook with the number 7653420789.\nRemove \"Bill\" from the phonebook.",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_dictionaries",
        "documentation": {}
    },
    {
        "label": "phonebook",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_dictionaries",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_dictionaries",
        "peekOfCode": "phonebook = {\n    \"Abe\": 4569874321,\n    \"Bill\": 7659803241,\n    \"Barry\": 6573214789\n}\n# YOUR CODE HERE\n# Should print Herb is in the phonebook.\nif \"Herb\" in phonebook:\n    print(\"Herb is in the phonebook.\")\n# Should print Bill is not in the phonebook.",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_dictionaries",
        "documentation": {}
    },
    {
        "label": "Entity",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_intro_python_ii",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_intro_python_ii",
        "peekOfCode": "class Entity:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    def __str__(self):\n        return f\"({self.x}, {self.y})\"\nclass Mob(Entity):\n    def __init__(self, x, y):\n        super().__init__(x, y)\n    def move(self, dir):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_intro_python_ii",
        "documentation": {}
    },
    {
        "label": "Mob",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_intro_python_ii",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_intro_python_ii",
        "peekOfCode": "class Mob(Entity):\n    def __init__(self, x, y):\n        super().__init__(x, y)\n    def move(self, dir):\n        if dir == \"n\":\n            self.y -= 1\n        elif dir == \"s\":\n            self.y += 1\n        elif dir == \"w\":\n            self.x -= 1",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_intro_python_ii",
        "documentation": {}
    },
    {
        "label": "last",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_intro_python_ii",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_intro_python_ii",
        "peekOfCode": "def last(a, n):\n    if n > len(a):\n        return \"invalid\"\n    elif n == 0:\n        return []\n    return a[-n:]\nprint(last([1, 2, 3, 4, 5], 1))  # ➞ [5]\nprint(last([4, 3, 9, 9, 7, 6], 3))  # ➞ [9, 7, 6]\nprint(last([1, 2, 3, 4, 5], 7))  #  ➞ \"invalid\"\nprint(last([1, 2, 3, 4, 5], 0))  # ➞ []",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_intro_python_ii",
        "documentation": {}
    },
    {
        "label": "parity",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_intro_python_ii",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_intro_python_ii",
        "peekOfCode": "def parity(input_int):\n    if input_int % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\ndef parity2(input_int):\n    return \"Even\" if input_int % 2 == 0 else \"Odd\"\nprint(parity(0))  #  -> \"Even\"\nprint(parity(1))  #  -> \"Odd\"\nprint(parity(2))  # -> \"Even\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_intro_python_ii",
        "documentation": {}
    },
    {
        "label": "parity2",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_intro_python_ii",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_intro_python_ii",
        "peekOfCode": "def parity2(input_int):\n    return \"Even\" if input_int % 2 == 0 else \"Odd\"\nprint(parity(0))  #  -> \"Even\"\nprint(parity(1))  #  -> \"Odd\"\nprint(parity(2))  # -> \"Even\"\nprint(parity2(0))  #  -> \"Even\"\nprint(parity2(1))  #  -> \"Odd\"\nprint(parity2(2))  # -> \"Even\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_intro_python_ii",
        "documentation": {}
    },
    {
        "label": "numbers",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_intro_python_ii",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_intro_python_ii",
        "peekOfCode": "numbers = [12, 23, 1, 22]\n# print(l[::-1])\n# print(dir([]))\n# min and max\n# print(min(20, 10, 5)) # 5\n# print(max(20, 10, 5)) # 20\n# list index\n# s = \"100\"\n# if \"100\" in l:\n#   print(l.index(s))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_intro_python_ii",
        "documentation": {}
    },
    {
        "label": "l2",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_intro_python_ii",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_intro_python_ii",
        "peekOfCode": "l2 = []\nfor number in numbers:\n    if number % 2 == 0:\n        l2.append(number * 2)\nprint(l2)\nl3 = [number * 2 for number in numbers if number % 2 == 0]\nprint(l3)\n\"\"\"# CODE: 6603\"\"\"\n# Classes and OOP\nclass Entity:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_intro_python_ii",
        "documentation": {}
    },
    {
        "label": "l3",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_intro_python_ii",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_intro_python_ii",
        "peekOfCode": "l3 = [number * 2 for number in numbers if number % 2 == 0]\nprint(l3)\n\"\"\"# CODE: 6603\"\"\"\n# Classes and OOP\nclass Entity:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    def __str__(self):\n        return f\"({self.x}, {self.y})\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_intro_python_ii",
        "documentation": {}
    },
    {
        "label": "e",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_intro_python_ii",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_intro_python_ii",
        "peekOfCode": "e = Entity(10, 20)\n# print(e)\nm = Mob(10, 23)\nprint(m)\nm.move(\"n\")\nprint(m)\n\"\"\"# CODE: 6603\n# Demos\nWrite a function that retrieves the last n elements from a list.\nExamples:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_intro_python_ii",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_intro_python_ii",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_intro_python_ii",
        "peekOfCode": "m = Mob(10, 23)\nprint(m)\nm.move(\"n\")\nprint(m)\n\"\"\"# CODE: 6603\n# Demos\nWrite a function that retrieves the last n elements from a list.\nExamples:\n- last([1, 2, 3, 4, 5], 1) ➞ [5]\n- last([4, 3, 9, 9, 7, 6], 3) ➞ [9, 7, 6]",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_intro_python_ii",
        "documentation": {}
    },
    {
        "label": "LinkedListNode",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_linked_lists",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_linked_lists",
        "peekOfCode": "class LinkedListNode:\n  \"\"\"\n    Simple Singly Linked List Node Class\n    value -> int\n    next -> LinkedListNode\n  \"\"\"\n  def __init__(self, value):\n    self.value = value\n    self.next = None\n  def add_node(self, value):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_linked_lists",
        "documentation": {}
    },
    {
        "label": "LinkedListNode",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_linked_lists",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_linked_lists",
        "peekOfCode": "class LinkedListNode:\n  \"\"\"\n    Simple Doubly Linked List Node Class\n    value -> int\n    next -> LinkedListNode\n    prev -> LinkedListNode\n  \"\"\"\n  def __init__(self, value):\n    self.value = value\n    self.next = None",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_linked_lists",
        "documentation": {}
    },
    {
        "label": "LinkedListNode",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_linked_lists",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_linked_lists",
        "peekOfCode": "class LinkedListNode():\n    def __init__(self, value):\n        self.value = value\n        self.next  = None\ndef reverse(head_of_list):\n  current = head_of_list\n  prev = None\n  next = None\n  while current:\n    next = current.next",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_linked_lists",
        "documentation": {}
    },
    {
        "label": "HashTableEntry",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_linked_lists",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_linked_lists",
        "peekOfCode": "class HashTableEntry:\n    \"\"\"\n    Linked List hash table key/value pair\n    \"\"\"\n    def __init__(self, key, value):\n        self.key = key\n        self.value = value\n        self.next = None\n# Hash table can't have fewer than this many slots\nMIN_CAPACITY = 8",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_linked_lists",
        "documentation": {}
    },
    {
        "label": "HashTable",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_linked_lists",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_linked_lists",
        "peekOfCode": "class HashTable:\n    \"\"\"\n    A hash table that with `capacity` buckets\n    that accepts string keys\n    Implement this.\n    \"\"\"\n    def __init__(self, capacity):\n                self.capacity = capacity  # Number of buckets in the hash table\n        self.storage = [None] * capacity\n        self.item_count = 0",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_linked_lists",
        "documentation": {}
    },
    {
        "label": "print_ll",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_linked_lists",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_linked_lists",
        "peekOfCode": "def print_ll(linked_list_node):\n  current = linked_list_node\n  while current is not None:\n    print(current.value)\n    current = current.next\ndef add_to_ll_storage(linked_list_node):\n  current = linked_list_node\n  while current is not None:\n    ll_storage.append(current)\n    current = current.next",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_linked_lists",
        "documentation": {}
    },
    {
        "label": "add_to_ll_storage",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_linked_lists",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_linked_lists",
        "peekOfCode": "def add_to_ll_storage(linked_list_node):\n  current = linked_list_node\n  while current is not None:\n    ll_storage.append(current)\n    current = current.next\nL1.add_node(12)\nprint_ll(L1)\nL1.add_node(24)\nprint()\nprint_ll(L1)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_linked_lists",
        "documentation": {}
    },
    {
        "label": "reverse",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_linked_lists",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_linked_lists",
        "peekOfCode": "def reverse(head_of_list):\n  current = head_of_list\n  prev = None\n  next = None\n  while current:\n    next = current.next\n    current.next = prev\n    prev = current\n    current = next\n  return prev",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_linked_lists",
        "documentation": {}
    },
    {
        "label": "L1",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_linked_lists",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_linked_lists",
        "peekOfCode": "L1 = Node(34)\nL1.next = Node(45)\nL1.next.next = Node(90)\n# while the current node is not none\n  # do something with the data\n  # traverse to next node\nL1 = [34]-> [45]-> [90] -> None\nNode(45)\nNode(90)\n```",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_linked_lists",
        "documentation": {}
    },
    {
        "label": "L1.next",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_linked_lists",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_linked_lists",
        "peekOfCode": "L1.next = Node(45)\nL1.next.next = Node(90)\n# while the current node is not none\n  # do something with the data\n  # traverse to next node\nL1 = [34]-> [45]-> [90] -> None\nNode(45)\nNode(90)\n```\n\"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_linked_lists",
        "documentation": {}
    },
    {
        "label": "L1.next.next",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_linked_lists",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_linked_lists",
        "peekOfCode": "L1.next.next = Node(90)\n# while the current node is not none\n  # do something with the data\n  # traverse to next node\nL1 = [34]-> [45]-> [90] -> None\nNode(45)\nNode(90)\n```\n\"\"\"\nclass LinkedListNode:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_linked_lists",
        "documentation": {}
    },
    {
        "label": "L1",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_linked_lists",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_linked_lists",
        "peekOfCode": "L1 = [34]-> [45]-> [90] -> None\nNode(45)\nNode(90)\n```\n\"\"\"\nclass LinkedListNode:\n  \"\"\"\n    Simple Singly Linked List Node Class\n    value -> int\n    next -> LinkedListNode",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_linked_lists",
        "documentation": {}
    },
    {
        "label": "ll_storage",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_linked_lists",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_linked_lists",
        "peekOfCode": "ll_storage = []\nL1 = LinkedListNode(34)\nL1.next = LinkedListNode(45)\nL1.next.next = LinkedListNode(90)\ndef print_ll(linked_list_node):\n  current = linked_list_node\n  while current is not None:\n    print(current.value)\n    current = current.next\ndef add_to_ll_storage(linked_list_node):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_linked_lists",
        "documentation": {}
    },
    {
        "label": "L1",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_linked_lists",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_linked_lists",
        "peekOfCode": "L1 = LinkedListNode(34)\nL1.next = LinkedListNode(45)\nL1.next.next = LinkedListNode(90)\ndef print_ll(linked_list_node):\n  current = linked_list_node\n  while current is not None:\n    print(current.value)\n    current = current.next\ndef add_to_ll_storage(linked_list_node):\n  current = linked_list_node",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_linked_lists",
        "documentation": {}
    },
    {
        "label": "L1.next",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_linked_lists",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_linked_lists",
        "peekOfCode": "L1.next = LinkedListNode(45)\nL1.next.next = LinkedListNode(90)\ndef print_ll(linked_list_node):\n  current = linked_list_node\n  while current is not None:\n    print(current.value)\n    current = current.next\ndef add_to_ll_storage(linked_list_node):\n  current = linked_list_node\n  while current is not None:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_linked_lists",
        "documentation": {}
    },
    {
        "label": "L1.next.next",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_linked_lists",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_linked_lists",
        "peekOfCode": "L1.next.next = LinkedListNode(90)\ndef print_ll(linked_list_node):\n  current = linked_list_node\n  while current is not None:\n    print(current.value)\n    current = current.next\ndef add_to_ll_storage(linked_list_node):\n  current = linked_list_node\n  while current is not None:\n    ll_storage.append(current)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_linked_lists",
        "documentation": {}
    },
    {
        "label": "MIN_CAPACITY",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_linked_lists",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_linked_lists",
        "peekOfCode": "MIN_CAPACITY = 8\n[\n 0[\"Lou\", 41] -> [\"Bob\", 41] -> None,\n 1[\"Steve\", 41] -> None,\n 2[\"Jen\", 41] -> None,\n 3[\"Dave\", 41] -> None,\n 4None,\n 5[\"Hector\", 34]-> None,\n 6[\"Lisa\", 41] -> None,\n 7None,",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.copy_of_linked_lists",
        "documentation": {}
    },
    {
        "label": "addTwoDigits",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_001_-_addTwoDigits",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_001_-_addTwoDigits",
        "peekOfCode": "def addTwoDigits(n):\n    return (n // 10) + (n % 10)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_001_-_addTwoDigits",
        "documentation": {}
    },
    {
        "label": "largestNumber",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_002_-_largestNumber",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_002_-_largestNumber",
        "peekOfCode": "def largestNumber(n):\n    return int(\"9\" * n)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_002_-_largestNumber",
        "documentation": {}
    },
    {
        "label": "candies",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_003_-_candies",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_003_-_candies",
        "peekOfCode": "def candies(n, m):\n    return (m // n) * n",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_003_-_candies",
        "documentation": {}
    },
    {
        "label": "seatsInTheater",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_004_-_seatsInTheater",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_004_-_seatsInTheater",
        "peekOfCode": "def seatsInTheater(nCols, nRows, col, row):\n    return (nCols - col + 1) * (nRows - row)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_004_-_seatsInTheater",
        "documentation": {}
    },
    {
        "label": "maxMultiple",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_005_-_maxMultiple",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_005_-_maxMultiple",
        "peekOfCode": "def maxMultiple(divisor, bound):\n    for num in range(bound, 1, -1):\n        if num % divisor == 0:\n            return num\n    return 0",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_005_-_maxMultiple",
        "documentation": {}
    },
    {
        "label": "circleOfNumbers",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_006_-_circleOfNumbers",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_006_-_circleOfNumbers",
        "peekOfCode": "def circleOfNumbers(n, firstNumber):\n    return (firstNumber + (n // 2)) % n",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_006_-_circleOfNumbers",
        "documentation": {}
    },
    {
        "label": "lateRide",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_007_-_lateRide",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_007_-_lateRide",
        "peekOfCode": "def lateRide(n):\n    hours = n // 60\n    minutes = n % 60\n    return (hours // 10) + (hours % 10) + (minutes // 10) + (minutes % 10)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_007_-_lateRide",
        "documentation": {}
    },
    {
        "label": "phoneCall",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_008_-_phoneCall",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_008_-_phoneCall",
        "peekOfCode": "def phoneCall(min1, min2_10, min11, s):\n    if s < min1:\n        return 0\n    if s == min1:\n        return 1\n    if s <= min1 + (min2_10 * 9):\n        s -= min1\n        return (s // min2_10) + 1\n    s -= min1\n    s -= min2_10 * 9",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_008_-_phoneCall",
        "documentation": {}
    },
    {
        "label": "reachNextLevel",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_009_-_reachNextLevel",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_009_-_reachNextLevel",
        "peekOfCode": "def reachNextLevel(experience, threshold, reward):\n    return experience + reward >= threshold",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_009_-_reachNextLevel",
        "documentation": {}
    },
    {
        "label": "knapsackLight",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_010_-_knapsackLight",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_010_-_knapsackLight",
        "peekOfCode": "def knapsackLight(value1, weight1, value2, weight2, maxW):\n    if weight1 + weight2 <= maxW:\n        return value1 + value2\n    if weight1 <= maxW and weight2 <= maxW:\n        return max(value1, value2)\n    if weight1 <= maxW:\n        return value1\n    if weight2 <= maxW:\n        return value2\n    return 0",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_010_-_knapsackLight",
        "documentation": {}
    },
    {
        "label": "extraNumber",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_011_-_extraNumber",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_011_-_extraNumber",
        "peekOfCode": "def extraNumber(a, b, c):\n    if a == b:\n        return c\n    if a == c:\n        return b\n    return a",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_011_-_extraNumber",
        "documentation": {}
    },
    {
        "label": "isInfiniteProcess",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_012_-_isInfiniteProcess",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_012_-_isInfiniteProcess",
        "peekOfCode": "def isInfiniteProcess(a, b):\n    return a > b or (a % 2 != b % 2)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_012_-_isInfiniteProcess",
        "documentation": {}
    },
    {
        "label": "arithmeticExpression",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_013_-_arithmeticExpression",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_013_-_arithmeticExpression",
        "peekOfCode": "def arithmeticExpression(a, b, c):\n    return a + b == c or a - b == c or a * b == c or a / b == c",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_013_-_arithmeticExpression",
        "documentation": {}
    },
    {
        "label": "tennisSet",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_014_-_tennisSet",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_014_-_tennisSet",
        "peekOfCode": "def tennisSet(score1, score2):\n    if max(score1, score2) == 6 and min(score1, score2) < 5:\n        return True\n    if 5 <= min(score1, score2) <= 6 and max(score1, score2) == 7:\n        return True\n    return False",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_014_-_tennisSet",
        "documentation": {}
    },
    {
        "label": "willYou",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_015_-_willYou",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_015_-_willYou",
        "peekOfCode": "def willYou(young, beautiful, loved):\n    return (young and beautiful) != loved",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_015_-_willYou",
        "documentation": {}
    },
    {
        "label": "metroCard",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_016_-_metroCard",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_016_-_metroCard",
        "peekOfCode": "def metroCard(lastNumberOfDays):\n    if lastNumberOfDays == 30 or lastNumberOfDays == 28:\n        return [31]\n    return [28, 30, 31]",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_016_-_metroCard",
        "documentation": {}
    },
    {
        "label": "killKthBit",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_017_-_killKthBit",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_017_-_killKthBit",
        "peekOfCode": "def killKthBit(n, k):\n    return n & ~(2 ** (k - 1))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_017_-_killKthBit",
        "documentation": {}
    },
    {
        "label": "arrayPacking",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_018_-_arrayPacking",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_018_-_arrayPacking",
        "peekOfCode": "def arrayPacking(a):\n    binary_array = [bin(num)[2:].rjust(8, \"0\") for num in a]\n    out_string = \"\".join(binary_array[::-1])\n    return int(out_string, 2)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_018_-_arrayPacking",
        "documentation": {}
    },
    {
        "label": "rangeBitCount",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_019_-_rangeBitCount",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_019_-_rangeBitCount",
        "peekOfCode": "def rangeBitCount(a, b):\n    array = list(range(a, b + 1))\n    binary_array = [bin(num) for num in array]\n    count_array = [binary.count(\"1\") for binary in binary_array]\n    return sum(count_array)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_019_-_rangeBitCount",
        "documentation": {}
    },
    {
        "label": "mirrorBits",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_020_-_mirrorBits",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_020_-_mirrorBits",
        "peekOfCode": "def mirrorBits(a):\n    binary = bin(a)[2:]\n    return int(binary[::-1], 2)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_020_-_mirrorBits",
        "documentation": {}
    },
    {
        "label": "secondRightmostZeroBit",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_021_-_secondRightmostZeroBit",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_021_-_secondRightmostZeroBit",
        "peekOfCode": "def secondRightmostZeroBit(n):\n    return 2 ** bin(n)[::-1].find(\"0\", bin(n)[::-1].find(\"0\") + 1)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_021_-_secondRightmostZeroBit",
        "documentation": {}
    },
    {
        "label": "swapAdjacentBits",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_022_-_swapAdjacentBits",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_022_-_swapAdjacentBits",
        "peekOfCode": "def swapAdjacentBits(n):\n    return ((n >> 1) & 1431655765) | ((n << 1) & 2863311530)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_022_-_swapAdjacentBits",
        "documentation": {}
    },
    {
        "label": "differentRightmostBit",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_023_-_differentRightmostBit",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_023_-_differentRightmostBit",
        "peekOfCode": "def differentRightmostBit(n, m):\n    return 2 ** bin((n ^ m))[::-1].find(\"1\")",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_023_-_differentRightmostBit",
        "documentation": {}
    },
    {
        "label": "equalPairOfBits",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_024_-_equalPairOfBits",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_024_-_equalPairOfBits",
        "peekOfCode": "def equalPairOfBits(n, m):\n    return 2 ** bin(~(n ^ m))[::-1].find(\"1\")",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_024_-_equalPairOfBits",
        "documentation": {}
    },
    {
        "label": "leastFactorial",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_025_-_leastFactorial",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_025_-_leastFactorial",
        "peekOfCode": "def leastFactorial(n):\n    factorial = 1\n    index = 1\n    while factorial < n:\n        index += 1\n        factorial *= index\n    return factorial",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_025_-_leastFactorial",
        "documentation": {}
    },
    {
        "label": "countSumOfTwoRepresentations2",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_026_-_countSumOfTwoRepresentations2",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_026_-_countSumOfTwoRepresentations2",
        "peekOfCode": "def countSumOfTwoRepresentations2(n, l, r):\n    count = 0\n    a = max(n - r, l)\n    b = n - a\n    while a <= r and a <= b:\n        count += 1\n        a += 1\n        b -= 1\n    return count",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_026_-_countSumOfTwoRepresentations2",
        "documentation": {}
    },
    {
        "label": "magicalWell",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_027_-_magicalWell",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_027_-_magicalWell",
        "peekOfCode": "def magicalWell(a, b, n):\n    total = 0\n    for i in range(n):\n        total += a * b\n        a += 1\n        b += 1\n    return total",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_027_-_magicalWell",
        "documentation": {}
    },
    {
        "label": "lineUp",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_028_-_lineUp",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_028_-_lineUp",
        "peekOfCode": "def lineUp(commands):\n    count = 0\n    smart_student = 0\n    dumb_student = 0\n    for command in commands:\n        if command == \"L\":\n            smart_student = (smart_student - 1) % 4\n            dumb_student = (dumb_student + 1) % 4\n        elif command == \"R\":\n            smart_student = (smart_student + 1) % 4",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_028_-_lineUp",
        "documentation": {}
    },
    {
        "label": "additionWithoutCarrying",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_029_-_additionWithoutCarrying",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_029_-_additionWithoutCarrying",
        "peekOfCode": "def additionWithoutCarrying(param1, param2):\n    # Convert numbers to strings\n    str1 = str(param1)\n    str2 = str(param2)\n    # Pad both to the same length with zeroes (to the left of the numbers)\n    length = max(len(str2), len(str1))\n    str1 = str1.rjust(length, \"0\")\n    str2 = str2.rjust(length, \"0\")\n    output = []\n    for num1, num2 in zip(str1, str2):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_029_-_additionWithoutCarrying",
        "documentation": {}
    },
    {
        "label": "appleBoxes",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_030_-_appleBoxes",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_030_-_appleBoxes",
        "peekOfCode": "def appleBoxes(k):\n    red = 0\n    yellow = 0\n    for i in range(1, k + 1, 2):\n        yellow += i * i\n    for i in range(2, k + 1, 2):\n        red += i * i\n    return red - yellow",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_030_-_appleBoxes",
        "documentation": {}
    },
    {
        "label": "increaseNumberRoundness",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_031_-_increaseNumberRoundness",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_031_-_increaseNumberRoundness",
        "peekOfCode": "def increaseNumberRoundness(n):\n    string = str(n)\n    # Check for immediate rejection\n    if \"0\" not in string or len(string) < 2:\n        return False\n    # Since we know there's a 0, if it's not on\n    # the left, then we know to accept\n    if string[-1] != \"0\":\n        return True\n    # If there is only one 0, it must be at the end, so reject.",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_031_-_increaseNumberRoundness",
        "documentation": {}
    },
    {
        "label": "rounders",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_032_-_rounders",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_032_-_rounders",
        "peekOfCode": "def rounders(value):\n    length = len(str(value))\n    magnitude = length - 1\n    for i in range(length - 1):\n        value = int((value / 10) + 0.5)\n    return value * (10 ** magnitude)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_032_-_rounders",
        "documentation": {}
    },
    {
        "label": "candles",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_033_-_candles",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_033_-_candles",
        "peekOfCode": "def candles(candlesNumber, makeNew):\n    totalBurned = 0\n    leftovers = 0\n    while candlesNumber > 0:\n        totalBurned += candlesNumber\n        leftovers += candlesNumber\n        candlesNumber = 0\n        candlesNumber = leftovers // makeNew\n        leftovers = leftovers % makeNew\n    return totalBurned",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_033_-_candles",
        "documentation": {}
    },
    {
        "label": "countBlackCells",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_034_-_countBlackCells",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_034_-_countBlackCells",
        "peekOfCode": "def countBlackCells(n, m):\n    gcd = find_gcd(n, m)\n    line_cells = n + m - gcd\n    line_corner_cells = (gcd - 1) * 2\n    return line_cells + line_corner_cells\ndef find_gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_034_-_countBlackCells",
        "documentation": {}
    },
    {
        "label": "find_gcd",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_034_-_countBlackCells",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_034_-_countBlackCells",
        "peekOfCode": "def find_gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_034_-_countBlackCells",
        "documentation": {}
    },
    {
        "label": "createArray",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_035_-_createArray",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_035_-_createArray",
        "peekOfCode": "def createArray(size):\n    return [1] * size",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_035_-_createArray",
        "documentation": {}
    },
    {
        "label": "arrayReplace",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_036_-_arrayReplace",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_036_-_arrayReplace",
        "peekOfCode": "def arrayReplace(inputArray, elemToReplace, substitutionElem):\n    output = [\n        elem if elem != elemToReplace else substitutionElem for elem in inputArray\n    ]\n    return output",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_036_-_arrayReplace",
        "documentation": {}
    },
    {
        "label": "firstReverseTry",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_037_-_firstReverseTry",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_037_-_firstReverseTry",
        "peekOfCode": "def firstReverseTry(arr):\n    if len(arr) < 2:\n        return arr\n    if len(arr) < 4:\n        return arr[::-1]\n    return arr[-1:] + arr[1:-1] + arr[:1]",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_037_-_firstReverseTry",
        "documentation": {}
    },
    {
        "label": "concatenateArrays",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_038_-_concatenateArrays",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_038_-_concatenateArrays",
        "peekOfCode": "def concatenateArrays(a, b):\n    return a + b",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_038_-_concatenateArrays",
        "documentation": {}
    },
    {
        "label": "removeArrayPart",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_039_-_removeArrayPart",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_039_-_removeArrayPart",
        "peekOfCode": "def removeArrayPart(inputArray, l, r):\n    return inputArray[:l] + inputArray[r + 1 :]",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_039_-_removeArrayPart",
        "documentation": {}
    },
    {
        "label": "isSmooth",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_040_-_isSmooth",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_040_-_isSmooth",
        "peekOfCode": "def isSmooth(arr):\n    if arr[0] != arr[-1]:\n        return False\n    if len(arr) % 2 == 0:\n        middle = arr[len(arr) // 2] + arr[(len(arr) // 2) - 1]\n    else:\n        middle = arr[len(arr) // 2]\n    return arr[0] == middle",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_040_-_isSmooth",
        "documentation": {}
    },
    {
        "label": "replaceMiddle",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_041_-_replaceMiddle",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_041_-_replaceMiddle",
        "peekOfCode": "def replaceMiddle(arr):\n    if len(arr) % 2 != 0:\n        return arr\n    right_middle = len(arr) // 2\n    middle_value = arr[right_middle] + arr[right_middle - 1]\n    return arr[: right_middle - 1] + [middle_value] + arr[right_middle + 1 :]",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_041_-_replaceMiddle",
        "documentation": {}
    },
    {
        "label": "makeArrayConsecutive2",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_042_-_makeArrayConsecutive2",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_042_-_makeArrayConsecutive2",
        "peekOfCode": "def makeArrayConsecutive2(statues):\n    count = 0\n    for i in range(min(statues), max(statues)):\n        if i not in statues:\n            count += 1\n    return count",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_042_-_makeArrayConsecutive2",
        "documentation": {}
    },
    {
        "label": "isPower",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_043_-_isPower",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_043_-_isPower",
        "peekOfCode": "def isPower(n):\n    if n == 1:\n        return True\n    a = 2\n    b = 2\n    while a ** 2 <= n:\n        while a ** b <= n:\n            if a ** b == n:\n                return True\n            b += 1",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_043_-_isPower",
        "documentation": {}
    },
    {
        "label": "isSumOfConsecutive2",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_044_-_isSumOfConsecutive2",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_044_-_isSumOfConsecutive2",
        "peekOfCode": "def isSumOfConsecutive2(n):\n    count = 0\n    right = 2\n    arr = [1, 2]\n    while right <= (n // 2) + 1:\n        total = sum(arr)\n        if total == n:\n            count += 1\n            del arr[0]\n        elif total < n:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_044_-_isSumOfConsecutive2",
        "documentation": {}
    },
    {
        "label": "squareDigitsSequence",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_045_-_squareDigitsSequence",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_045_-_squareDigitsSequence",
        "peekOfCode": "def squareDigitsSequence(a0):\n    sequence = [a0]\n    while sequence[-1] not in sequence[:-1]:\n        next_value = 0\n        for digit in str(sequence[-1]):\n            next_value += int(digit) ** 2\n        sequence.append(next_value)\n    return len(sequence)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_045_-_squareDigitsSequence",
        "documentation": {}
    },
    {
        "label": "pagesNumberingWithInk",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_046_-_pagesNumberingWithInk",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_046_-_pagesNumberingWithInk",
        "peekOfCode": "def pagesNumberingWithInk(current, numberOfDigits):\n    numberOfDigits -= len(str(current))\n    next_digits = len(str(current + 1))\n    while numberOfDigits >= next_digits:\n        current += 1\n        numberOfDigits -= next_digits\n        next_digits = len(str(current))\n    return current",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_046_-_pagesNumberingWithInk",
        "documentation": {}
    },
    {
        "label": "comfortableNumbers",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_047_-_comfortableNumbers",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_047_-_comfortableNumbers",
        "peekOfCode": "def comfortableNumbers(l, r):\n    count = 0\n    for a in range(l, r):\n        for b in range(a + 1, r + 1):\n            a_sum = sum(int(digit) for digit in str(a))\n            b_sum = sum(int(digit) for digit in str(b))\n            if b <= a + a_sum and a >= b - b_sum:\n                count += 1\n    return count",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_047_-_comfortableNumbers",
        "documentation": {}
    },
    {
        "label": "weakNumbers",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_048_-_weakNumbers",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_048_-_weakNumbers",
        "peekOfCode": "def weakNumbers(n):\n    all_factors = [count_factors(num) for num in range(1, n + 1)]\n    weaknesses = []\n    for num, num_factors in enumerate(all_factors, 1):\n        weakness = 0\n        for factor in all_factors[:num]:\n            if factor > num_factors:\n                weakness += 1\n        weaknesses.append(weakness)\n        weakest = max(weaknesses)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_048_-_weakNumbers",
        "documentation": {}
    },
    {
        "label": "count_factors",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_048_-_weakNumbers",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_048_-_weakNumbers",
        "peekOfCode": "def count_factors(n):\n    factors = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            factors += 1\n    return factors\nprint(weakNumbers(500))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_048_-_weakNumbers",
        "documentation": {}
    },
    {
        "label": "rectangleRotation",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_049_-_rectangleRotation",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_049_-_rectangleRotation",
        "peekOfCode": "def rectangleRotation(a, b):\n    n = a / (2 ** 0.5)\n    m = b / (2 ** 0.5)\n    points = (math.floor(n) * math.floor(m)) + (math.ceil(n) * math.ceil(m))\n    if math.floor(n) % 2 != math.floor(m) % 2:\n        points -= 1\n    return points\n# rectangleRotation(6, 4)\nprint(rectangleRotation(8, 6))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.Core_049_-_rectangleRotation",
        "documentation": {}
    },
    {
        "label": "csRaindrops",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs-raindrops",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs-raindrops",
        "peekOfCode": "def csRaindrops(number):\n    output = \"\"\n    if number % 3 == 0:\n        output += \"Pling\"\n    if number % 5 == 0:\n        output += \"Plang\"\n    if number % 7 == 0:\n        output += \"Plong\"\n    if output is \"\":\n        return str(number)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs-raindrops",
        "documentation": {}
    },
    {
        "label": "HashTable",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46ht",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46ht",
        "peekOfCode": "class HashTable:\n# \"\"\"\n# A hash table with `capacity` buckets\n# that accepts string keys\n# \"\"\"\ndef __init__(self, capacity):\n    self.capacity = capacity  # Number of buckets in the hash table\n    self.storage = [None] * capacity\n    self.item_count = 0\ndef djb2(self, key):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46ht",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46ht",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46ht",
        "peekOfCode": "class ListNode:\n    def __init__(self, key, value):\n        self.key = key\n        self.value = value\n        self.next = None\n\"\"\"\n4000    12       89\n[\"ABC\", 10]-->[\"CBA\", 100]-->[\"BAC\", 2342]-->[\"AAAB\", 400]-->None\n   ^\n   |",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46ht",
        "documentation": {}
    },
    {
        "label": "MyHashTable",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46ht",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46ht",
        "peekOfCode": "class MyHashTable:\n    def __init__(self):\n        # Your code here\n        self.capacity = 1000\n        self.size = 0\n        self.storage = [None] * self.capacity\n    # Your code here\n    def djb2(self, key):\n      \"\"\"\n      DJB2 hash, 32-bit",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46ht",
        "documentation": {}
    },
    {
        "label": "my_hash",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46ht",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46ht",
        "peekOfCode": "def my_hash(key):\n  sum = 0\n  for c in key:\n    sum += ord(c)\n  return sum\ndef my_hash2(key):\n  sum = 0\n  string_bytes = key.encode()\n  for b in string_bytes:\n    sum += b",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46ht",
        "documentation": {}
    },
    {
        "label": "my_hash2",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46ht",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46ht",
        "peekOfCode": "def my_hash2(key):\n  sum = 0\n  string_bytes = key.encode()\n  for b in string_bytes:\n    sum += b\n  return sum\n# print(my_hash(\"ABC\"))\n# print(my_hash2(\"ABC\"))\n# djb2\n# encode key",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46ht",
        "documentation": {}
    },
    {
        "label": "djb2",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46ht",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46ht",
        "peekOfCode": "def djb2(key):\n  str_key = str(key).encode()\n  hash_value = 5381\n  for b in str_key:\n    # shifted_value = hash_value << 5\n    # add_shift = shifted_value + hash_value\n    # total_hash = add_shift + b\n    # total_hash &= 0xffffffff # 0b11111111111111111111111111111111 32bits\n    # final_hash = total_hash & 0xffffffff\n    hash_value = ((hash_value << 5) + hash_value) + b",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46ht",
        "documentation": {}
    },
    {
        "label": "djb2",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46ht",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46ht",
        "peekOfCode": "def djb2(self, key):\n    \"\"\"\n    DJB2 hash, 32-bit\n    \"\"\"\n    # Cast the key to a string and get bytes\n    str_key = str(key).encode()\n    # Start from an arbitrary large prime\n    hash_value = 5381\n    # Bit-shift and sum value for each character\n    for b in str_key:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46ht",
        "documentation": {}
    },
    {
        "label": "hash_index",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46ht",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46ht",
        "peekOfCode": "def hash_index(self, key):\n    \"\"\"\n    Take an arbitrary key and return a valid integer index\n    between within the storage capacity of the hash table.\n    \"\"\"\n    return self.djb2(key) % self.capacity\ndef put(self, key, value):\n    \"\"\"\n    Store the value with the given key.\n    \"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46ht",
        "documentation": {}
    },
    {
        "label": "put",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46ht",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46ht",
        "peekOfCode": "def put(self, key, value):\n    \"\"\"\n    Store the value with the given key.\n    \"\"\"\n    index = self.hash_index(key)\n    self.storage[index] = value\n    return\ndef delete(self, key):\n    \"\"\"\n    Remove the value stored with the given key.",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46ht",
        "documentation": {}
    },
    {
        "label": "delete",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46ht",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46ht",
        "peekOfCode": "def delete(self, key):\n    \"\"\"\n    Remove the value stored with the given key.\n    \"\"\"\n    index = self.hash_index(key)\n    self.storage[index] = None\ndef get(self, key):\n# \"\"\"\n#     Retrieve the value stored with the given key.\n#     Returns None if the key is not found.",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46ht",
        "documentation": {}
    },
    {
        "label": "get",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46ht",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46ht",
        "peekOfCode": "def get(self, key):\n# \"\"\"\n#     Retrieve the value stored with the given key.\n#     Returns None if the key is not found.\n#     \"\"\"\n    index = self.hash_index(key)\n    return self.storage[index]\n\"\"\"# CODE 7506\n# Demo\n\"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46ht",
        "documentation": {}
    },
    {
        "label": "hash_index",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46ht",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46ht",
        "peekOfCode": "def hash_index(self, key):\n      \"\"\"\n      Take an arbitrary key and return a valid integer index\n      between within the storage capacity of the hash table.\n      \"\"\"\n      return self.djb2(key) % self.capacity\n    def put(self, key, value):\n        # Your code here\n        index = self.hash_index(key)\n        if self.storage[index] == None:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46ht",
        "documentation": {}
    },
    {
        "label": "my_hash_number",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46ht",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46ht",
        "peekOfCode": "my_hash_number = djb2(\"ABCD\")\nprint(my_hash_number)\nstorage = [None] * 10\n\"\"\"# CODE 7506\n\"\"\"\nclass HashTable:\n# \"\"\"\n# A hash table with `capacity` buckets\n# that accepts string keys\n# \"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46ht",
        "documentation": {}
    },
    {
        "label": "storage",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46ht",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46ht",
        "peekOfCode": "storage = [None] * 10\n\"\"\"# CODE 7506\n\"\"\"\nclass HashTable:\n# \"\"\"\n# A hash table with `capacity` buckets\n# that accepts string keys\n# \"\"\"\ndef __init__(self, capacity):\n    self.capacity = capacity  # Number of buckets in the hash table",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46ht",
        "documentation": {}
    },
    {
        "label": "hash_table",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46ht",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46ht",
        "peekOfCode": "hash_table = MyHashTable();\nhash_table.put(\"a\", 1);\nhash_table.put(\"b\", 2);\nhash_table.get(\"a\");            // returns 1\nhash_table.get(\"c\");            // returns -1 (not found)\nhash_table.put(\"b\", 1);         // update the existing value\nhash_table.get(\"b\");            // returns 1\nhash_table.remove(\"b\");         // remove the mapping for 2\nhash_table.get(\"b\");            // returns -1 (not found)\n```",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46ht",
        "documentation": {}
    },
    {
        "label": "greet",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i (2)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i (2)",
        "peekOfCode": "def greet(name=\"world!\"):\n  print(type(name))\n  print(f\"Hello {name}\")\ngreet(\"1234\")\n# lets play with some strings\n# ['capitalize', 'casefold', 'center', 'count', 'encode', 'endswith', 'expandtabs', 'find', 'format', 'format_map', 'index', 'isalnum', 'isalpha', 'isascii', 'isdecimal', 'isdigit', 'isidentifier', 'islower', 'isnumeric', 'isprintable', 'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lower', 'lstrip', 'maketrans', 'partition', 'replace', 'rfind', 'rindex', 'rjust', 'rpartition', 'rsplit', 'rstrip', 'split', 'splitlines', 'startswith', 'strip', 'swapcase', 'title', 'translate', 'upper', 'zfill']\n# print(dir(\"\"))\nprint(help(\"\".count))\na = \"aabbccqqqq\"\nprint(a.count(\"q\"))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i (2)",
        "documentation": {}
    },
    {
        "label": "addition",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i (2)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i (2)",
        "peekOfCode": "def addition(a, b):\n    # Your code here\n\"\"\"\nChallenge #2:\nWrite a function that takes an integer `minutes` and converts it to seconds.\nExamples:\n- convert(5) ➞ 300\n- convert(3) ➞ 180\n- convert(2) ➞ 120\n\"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i (2)",
        "documentation": {}
    },
    {
        "label": "convert",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i (2)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i (2)",
        "peekOfCode": "def convert(minutes):\n    # Your code here\n\"\"\"\nChallenge #3:\nCreate a function that takes a string and returns it as an integer.\nExamples:\n- string_int(\"6\") ➞ 6\n- string_int(\"1000\") ➞ 1000\n- string_int(\"12\") ➞ 12\n\"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i (2)",
        "documentation": {}
    },
    {
        "label": "string_int",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i (2)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i (2)",
        "peekOfCode": "def string_int(txt):\n    # Your code here\n\"\"\"\nChallenge #4:\nCreate a function that takes length and width and finds the perimeter of a\nrectangle.\nExamples:\n- find_perimeter(6, 7) ➞ 26\n- find_perimeter(20, 10) ➞ 60\n- find_perimeter(2, 9) ➞ 22",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i (2)",
        "documentation": {}
    },
    {
        "label": "find_perimeter",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i (2)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i (2)",
        "peekOfCode": "def find_perimeter(length, width):\n\"\"\"\nChallenge #5:\nCreate a function that returns a list of strings sorted by length in ascending\norder.\nExamples:\n- sort_by_length([\"a\", \"ccc\", \"dddd\", \"bb\"]) ➞ [\"a\", \"bb\", \"ccc\", \"dddd\"]\n- sort_by_length([\"apple\", \"pie\", \"shortcake\"]) ➞ [\"pie\", \"apple\", \"shortcake\"]\n- sort_by_length([\"may\", \"april\", \"september\", \"august\"]) ➞ [\"may\", \"april\", \"august\", \"september\"]\n- sort_by_length([]) ➞ []",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i (2)",
        "documentation": {}
    },
    {
        "label": "sort_by_length",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i (2)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i (2)",
        "peekOfCode": "def sort_by_length(lst):\n\"\"\"\nChallenge #6:\nCreate a function that takes a string, checks if it has the same number of \"x\"s\nand \"o\"s and returns either True or False.\n- Return a boolean value (True or False).\n- The string can contain any character.\n- When no x and no o are in the string, return True.\nExamples:\n- XO(\"ooxx\") ➞ True",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i (2)",
        "documentation": {}
    },
    {
        "label": "XO",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i (2)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i (2)",
        "peekOfCode": "def XO(txt):\n\"\"\"\nChallenge #7:\nGiven an unsorted list, create a function that returns the nth smallest element\n(the smallest element is the first smallest, the second smallest element is the\nsecond smallest, etc).\nExamples:\n- nth_smallest([7, 5, 3, 1], 1) ➞ 1\n- nth_smallest([1, 3, 5, 7], 3) ➞ 5\n- nth_smallest([1, 3, 5, 7], 5) ➞ None",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i (2)",
        "documentation": {}
    },
    {
        "label": "nth_smallest",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i (2)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i (2)",
        "peekOfCode": "def nth_smallest(lst, n):\n\"\"\"\nChallenge #8:\nCreate a function that returns the number of arguments it was called with.\nExamples:\n- num_args() ➞ 0\n- num_args(\"foo\") ➞ 1\n- num_args(\"foo\", \"bar\") ➞ 2\n- num_args(True, False) ➞ 2\n- num_args({}) ➞ 1",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i (2)",
        "documentation": {}
    },
    {
        "label": "num_args",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i (2)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i (2)",
        "peekOfCode": "def num_args():\n\"\"\"\nChallenge #9:\nWrite a function that creates a dictionary with each (key, value) pair being\nthe (lower case, upper case) versions of a letter, respectively.\nExamples:\n- mapping([\"p\", \"s\"]) ➞ { \"p\": \"P\", \"s\": \"S\" }\n- mapping([\"a\", \"b\", \"c\"]) ➞ { \"a\": \"A\", \"b\": \"B\", \"c\": \"C\" }\n- mapping([\"a\", \"v\", \"y\", \"z\"]) ➞ { \"a\": \"A\", \"v\": \"V\", \"y\": \"Y\", \"z\": \"Z\" }\nNotes:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i (2)",
        "documentation": {}
    },
    {
        "label": "mapping",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i (2)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i (2)",
        "peekOfCode": "def mapping(letters):\n\"\"\"\nChallenge #10:\nCreate a function that applies a discount d to every number in the list.\nExamples:\n- get_discounts([2, 4, 6, 11], \"50%\") ➞ [1, 2, 3, 5.5]\n- get_discounts([10, 20, 40, 80], \"75%\") ➞ [7.5, 15, 30, 60]\n- get_discounts([100], \"45%\") ➞ [45]\nNotes:\n- The discount is the percentage of the original price (i.e the discount of",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i (2)",
        "documentation": {}
    },
    {
        "label": "get_discounts",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i (2)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i (2)",
        "peekOfCode": "def get_discounts(nums, percentage):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i (2)",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i (2)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i (2)",
        "peekOfCode": "a = 10\na = \"a string\"\na = 1.2\na = []\na = ()\na = {\"name\": \"Tom\"}\nb = []\nb.append(\"Dave\")\nb.append(\"Bob\")\nb.append(\"Joe\")",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i (2)",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i (2)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i (2)",
        "peekOfCode": "a = \"a string\"\na = 1.2\na = []\na = ()\na = {\"name\": \"Tom\"}\nb = []\nb.append(\"Dave\")\nb.append(\"Bob\")\nb.append(\"Joe\")\n# print(type(a))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i (2)",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i (2)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i (2)",
        "peekOfCode": "a = 1.2\na = []\na = ()\na = {\"name\": \"Tom\"}\nb = []\nb.append(\"Dave\")\nb.append(\"Bob\")\nb.append(\"Joe\")\n# print(type(a))\n# print(a[\"name\"])",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i (2)",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i (2)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i (2)",
        "peekOfCode": "a = []\na = ()\na = {\"name\": \"Tom\"}\nb = []\nb.append(\"Dave\")\nb.append(\"Bob\")\nb.append(\"Joe\")\n# print(type(a))\n# print(a[\"name\"])\n# print(dir([]))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i (2)",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i (2)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i (2)",
        "peekOfCode": "a = ()\na = {\"name\": \"Tom\"}\nb = []\nb.append(\"Dave\")\nb.append(\"Bob\")\nb.append(\"Joe\")\n# print(type(a))\n# print(a[\"name\"])\n# print(dir([]))\nprint(b.pop(0))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i (2)",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i (2)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i (2)",
        "peekOfCode": "a = {\"name\": \"Tom\"}\nb = []\nb.append(\"Dave\")\nb.append(\"Bob\")\nb.append(\"Joe\")\n# print(type(a))\n# print(a[\"name\"])\n# print(dir([]))\nprint(b.pop(0))\nprint(b)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i (2)",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i (2)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i (2)",
        "peekOfCode": "b = []\nb.append(\"Dave\")\nb.append(\"Bob\")\nb.append(\"Joe\")\n# print(type(a))\n# print(a[\"name\"])\n# print(dir([]))\nprint(b.pop(0))\nprint(b)\n\"\"\"# PYTHON I CODE: 5976\"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i (2)",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i (2)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i (2)",
        "peekOfCode": "a = [\"Dave\"] * 25\na[20] = \"Steve\"\n# for n in range(12, 25):\n#   print(a[n])\nfor x in enumerate(a):\n  i = x[0]\n  e = x[1]\n  if i == 9:\n    continue\n  print(i)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i (2)",
        "documentation": {}
    },
    {
        "label": "a[20]",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i (2)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i (2)",
        "peekOfCode": "a[20] = \"Steve\"\n# for n in range(12, 25):\n#   print(a[n])\nfor x in enumerate(a):\n  i = x[0]\n  e = x[1]\n  if i == 9:\n    continue\n  print(i)\n  print(e)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i (2)",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i (2)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i (2)",
        "peekOfCode": "a = int(input(\"input a number! \"))\nb = int(input(\"input a number! \"))4\nprint(f\"{a + b}\")\n\"\"\"# PYTHON I CODE: 5976\"\"\"\n# lets reuse some code...\ndef greet(name=\"world!\"):\n  print(type(name))\n  print(f\"Hello {name}\")\ngreet(\"1234\")\n# lets play with some strings",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i (2)",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i (2)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i (2)",
        "peekOfCode": "b = int(input(\"input a number! \"))4\nprint(f\"{a + b}\")\n\"\"\"# PYTHON I CODE: 5976\"\"\"\n# lets reuse some code...\ndef greet(name=\"world!\"):\n  print(type(name))\n  print(f\"Hello {name}\")\ngreet(\"1234\")\n# lets play with some strings\n# ['capitalize', 'casefold', 'center', 'count', 'encode', 'endswith', 'expandtabs', 'find', 'format', 'format_map', 'index', 'isalnum', 'isalpha', 'isascii', 'isdecimal', 'isdigit', 'isidentifier', 'islower', 'isnumeric', 'isprintable', 'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lower', 'lstrip', 'maketrans', 'partition', 'replace', 'rfind', 'rindex', 'rjust', 'rpartition', 'rsplit', 'rstrip', 'split', 'splitlines', 'startswith', 'strip', 'swapcase', 'title', 'translate', 'upper', 'zfill']",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i (2)",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i (2)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i (2)",
        "peekOfCode": "a = \"aabbccqqqq\"\nprint(a.count(\"q\"))\n# Lets put it all together\n\"\"\"# Challenges\"\"\"\n\"\"\"\nChallenge #1:\nCreate a function that takes two numbers as arguments and return their sum.\nExamples:\n- addition(3, 2) ➞ 5\n- addition(-3, -6) ➞ -9",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i (2)",
        "documentation": {}
    },
    {
        "label": "addition",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i",
        "peekOfCode": "def addition(a, b):\n    # Your code here\n\"\"\"\nChallenge #2:\nWrite a function that takes an integer `minutes` and converts it to seconds.\nExamples:\n- convert(5) ➞ 300\n- convert(3) ➞ 180\n- convert(2) ➞ 120\n\"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i",
        "documentation": {}
    },
    {
        "label": "convert",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i",
        "peekOfCode": "def convert(minutes):\n    # Your code here\n\"\"\"\nChallenge #3:\nCreate a function that takes a string and returns it as an integer.\nExamples:\n- string_int(\"6\") ➞ 6\n- string_int(\"1000\") ➞ 1000\n- string_int(\"12\") ➞ 12\n\"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i",
        "documentation": {}
    },
    {
        "label": "string_int",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i",
        "peekOfCode": "def string_int(txt):\n    # Your code here\n\"\"\"\nChallenge #4:\nCreate a function that takes length and width and finds the perimeter of a\nrectangle.\nExamples:\n- find_perimeter(6, 7) ➞ 26\n- find_perimeter(20, 10) ➞ 60\n- find_perimeter(2, 9) ➞ 22",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i",
        "documentation": {}
    },
    {
        "label": "find_perimeter",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i",
        "peekOfCode": "def find_perimeter(length, width):\n\"\"\"\nChallenge #5:\nCreate a function that returns a list of strings sorted by length in ascending\norder.\nExamples:\n- sort_by_length([\"a\", \"ccc\", \"dddd\", \"bb\"]) ➞ [\"a\", \"bb\", \"ccc\", \"dddd\"]\n- sort_by_length([\"apple\", \"pie\", \"shortcake\"]) ➞ [\"pie\", \"apple\", \"shortcake\"]\n- sort_by_length([\"may\", \"april\", \"september\", \"august\"]) ➞ [\"may\", \"april\", \"august\", \"september\"]\n- sort_by_length([]) ➞ []",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i",
        "documentation": {}
    },
    {
        "label": "sort_by_length",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i",
        "peekOfCode": "def sort_by_length(lst):\n\"\"\"\nChallenge #6:\nCreate a function that takes a string, checks if it has the same number of \"x\"s\nand \"o\"s and returns either True or False.\n- Return a boolean value (True or False).\n- The string can contain any character.\n- When no x and no o are in the string, return True.\nExamples:\n- XO(\"ooxx\") ➞ True",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i",
        "documentation": {}
    },
    {
        "label": "XO",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i",
        "peekOfCode": "def XO(txt):\n\"\"\"\nChallenge #7:\nGiven an unsorted list, create a function that returns the nth smallest element\n(the smallest element is the first smallest, the second smallest element is the\nsecond smallest, etc).\nExamples:\n- nth_smallest([7, 5, 3, 1], 1) ➞ 1\n- nth_smallest([1, 3, 5, 7], 3) ➞ 5\n- nth_smallest([1, 3, 5, 7], 5) ➞ None",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i",
        "documentation": {}
    },
    {
        "label": "nth_smallest",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i",
        "peekOfCode": "def nth_smallest(lst, n):\n\"\"\"\nChallenge #8:\nCreate a function that returns the number of arguments it was called with.\nExamples:\n- num_args() ➞ 0\n- num_args(\"foo\") ➞ 1\n- num_args(\"foo\", \"bar\") ➞ 2\n- num_args(True, False) ➞ 2\n- num_args({}) ➞ 1",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i",
        "documentation": {}
    },
    {
        "label": "num_args",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i",
        "peekOfCode": "def num_args():\n\"\"\"\nChallenge #9:\nWrite a function that creates a dictionary with each (key, value) pair being\nthe (lower case, upper case) versions of a letter, respectively.\nExamples:\n- mapping([\"p\", \"s\"]) ➞ { \"p\": \"P\", \"s\": \"S\" }\n- mapping([\"a\", \"b\", \"c\"]) ➞ { \"a\": \"A\", \"b\": \"B\", \"c\": \"C\" }\n- mapping([\"a\", \"v\", \"y\", \"z\"]) ➞ { \"a\": \"A\", \"v\": \"V\", \"y\": \"Y\", \"z\": \"Z\" }\nNotes:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i",
        "documentation": {}
    },
    {
        "label": "mapping",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i",
        "peekOfCode": "def mapping(letters):\n\"\"\"\nChallenge #10:\nCreate a function that applies a discount d to every number in the list.\nExamples:\n- get_discounts([2, 4, 6, 11], \"50%\") ➞ [1, 2, 3, 5.5]\n- get_discounts([10, 20, 40, 80], \"75%\") ➞ [7.5, 15, 30, 60]\n- get_discounts([100], \"45%\") ➞ [45]\nNotes:\n- The discount is the percentage of the original price (i.e the discount of",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i",
        "documentation": {}
    },
    {
        "label": "get_discounts",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i",
        "peekOfCode": "def get_discounts(nums, percentage):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs46_python_i",
        "documentation": {}
    },
    {
        "label": "print_one_item",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs47_python_iii",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs47_python_iii",
        "peekOfCode": "def print_one_item(items):\n    print(items[0])\n\"\"\"\nLinear Time O(n)\n\"\"\"\ndef print_every_item(items):\n    for item in items:\n        print(item)\n\"\"\"\nQuadratic Time O(n^2)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs47_python_iii",
        "documentation": {}
    },
    {
        "label": "print_every_item",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs47_python_iii",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs47_python_iii",
        "peekOfCode": "def print_every_item(items):\n    for item in items:\n        print(item)\n\"\"\"\nQuadratic Time O(n^2)\n\"\"\"\ndef print_pairs(items):\n    for item_one in items:\n        for item_two in items:\n            print(item_one, item_two)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs47_python_iii",
        "documentation": {}
    },
    {
        "label": "print_pairs",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs47_python_iii",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs47_python_iii",
        "peekOfCode": "def print_pairs(items):\n    for item_one in items:\n        for item_two in items:\n            print(item_one, item_two)\n\"\"\"\nWhat about constants?\n\"\"\"\ndef do_a_bunch_of_stuff(items):  # O(1 + n/2 + 2000) -> O(n)\n    last_idx = len(items) - 1\n    print(items[last_idx])  # O(1)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs47_python_iii",
        "documentation": {}
    },
    {
        "label": "do_a_bunch_of_stuff",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs47_python_iii",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs47_python_iii",
        "peekOfCode": "def do_a_bunch_of_stuff(items):  # O(1 + n/2 + 2000) -> O(n)\n    last_idx = len(items) - 1\n    print(items[last_idx])  # O(1)\n    middle_idx = len(items) / 2\n    idx = 0\n    while idx < middle_idx:  # O(n/2)\n        print(items[idx])\n        idx = idx + 1\n    for num in range(2000):  # O(2000)\n        print(num)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs47_python_iii",
        "documentation": {}
    },
    {
        "label": "do_different_things",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs47_python_iii",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs47_python_iii",
        "peekOfCode": "def do_different_things(items):  # O(n + n^2) -> O(n^2)\n    for item in items:  # O(n)\n        print(item)\n    for item_one in items:  # O(n * n) = O(n^2)\n        for item_two in items:\n            print(item_one, item_two)\n\"\"\"\nBig O is the worst case\n\"\"\"\ndef search_for_thing(items, thing):  # O(n)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs47_python_iii",
        "documentation": {}
    },
    {
        "label": "search_for_thing",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs47_python_iii",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs47_python_iii",
        "peekOfCode": "def search_for_thing(items, thing):  # O(n)\n    for item in items:\n        if item == thing:\n            return True\n    return False\n\"\"\"\nClassify the runtime complexity of the number_of_steps function below using Big O notation.\n\"\"\"\ndef number_of_steps(num):  # O(log(n))\n    steps = 0",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs47_python_iii",
        "documentation": {}
    },
    {
        "label": "number_of_steps",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs47_python_iii",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs47_python_iii",
        "peekOfCode": "def number_of_steps(num):  # O(log(n))\n    steps = 0\n    while num > 0:\n        if num % 2 == 0:\n            num = num // 2\n        else:\n            num = num - 1\n        steps = steps + 1\n    return steps\n# print(number_of_steps(10))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs47_python_iii",
        "documentation": {}
    },
    {
        "label": "print_lambda_n_times",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs47_python_iii",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs47_python_iii",
        "peekOfCode": "def print_lambda_n_times(n):\n    for i in range(n):\n        print(\"lambda\")\ndef get_the_max(items_list):\n    maximum = float(\"-inf\")\n    for item in items_list:\n        if item > maximum:\n            maximum = item\n    return maximum\n\"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs47_python_iii",
        "documentation": {}
    },
    {
        "label": "get_the_max",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs47_python_iii",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs47_python_iii",
        "peekOfCode": "def get_the_max(items_list):\n    maximum = float(\"-inf\")\n    for item in items_list:\n        if item > maximum:\n            maximum = item\n    return maximum\n\"\"\"\nLinear Space O(n)\n\"\"\"\ndef append_to_list_n_times(n):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs47_python_iii",
        "documentation": {}
    },
    {
        "label": "append_to_list_n_times",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs47_python_iii",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs47_python_iii",
        "peekOfCode": "def append_to_list_n_times(n):\n    my_list = []  # O(1)\n    for _ in range(n):  # O(n)\n        my_list.append(\"lambda\")  # O(1)\n    return my_list\n\"\"\"\nUse Big O notation to classify the space complexity of the function below.\n\"\"\"\ndef fibonacci(n):  # O(n)\n    lst = [0, 1]  # O(2)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs47_python_iii",
        "documentation": {}
    },
    {
        "label": "fibonacci",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs47_python_iii",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs47_python_iii",
        "peekOfCode": "def fibonacci(n):  # O(n)\n    lst = [0, 1]  # O(2)\n    for i in range(2, n):  # O(n)\n        lst.append(lst[i - 2] + lst[i - 1])  # O(2)\n    return lst[n - 1]  # O(1)\n\"\"\"\nUse Big O notation to classify the space complexity of the function below.\n\"\"\"\ndef fibonacci_two(n):  # O(1)\n    x, y, z = 0, 1, None  # O(3)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs47_python_iii",
        "documentation": {}
    },
    {
        "label": "fibonacci_two",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs47_python_iii",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs47_python_iii",
        "peekOfCode": "def fibonacci_two(n):  # O(1)\n    x, y, z = 0, 1, None  # O(3)\n    if n == 0:\n        return x\n    if n == 1:\n        return y\n    for i in range(2, n):\n        z = x + y\n        x, y = y, z\n    return z",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs47_python_iii",
        "documentation": {}
    },
    {
        "label": "do_something",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs47_python_iii",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs47_python_iii",
        "peekOfCode": "def do_something(n):  # O(n^2)\n    lst = []  # O(1)\n    for i in range(n):  # O(n)\n        for j in range(n):  # O(n)\n            lst.append(i + j)  # O(n^2 * 2)\n    return lst\n\"\"\"# List Comprehensions\"\"\"\nl = [1, 2, 3, 4, 5]\nfor i in range(len(l)):\n    l[i] = l[i] * 2",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs47_python_iii",
        "documentation": {}
    },
    {
        "label": "single_number",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs47_python_iii",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs47_python_iii",
        "peekOfCode": "def single_number(nums):\n    singles = []\n    for num in nums:\n        if num not in singles:\n            singles.append(num)\n        else:\n            singles.remove(num)\n    return singles.pop()\nprint(single_number([3, 3, 2]))  #  -> 2\nprint(single_number([5, 2, 3, 2, 3]))  # -> 5",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs47_python_iii",
        "documentation": {}
    },
    {
        "label": "phonebook",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs47_python_iii",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs47_python_iii",
        "peekOfCode": "phonebook = {\"Abe\": 4569874321, \"Bill\": 7659803241, \"Barry\": 6573214789}\n# YOUR CODE HERE\nphonebook[\"Herb\"] = 7653420789\ndel phonebook[\"Bill\"]\n# Should print Herb is in the phonebook.\nif \"Herb\" in phonebook:\n    print(\"Herb is in the phonebook.\")\n# Should print Bill is not in the phonebook.\nif \"Bill\" not in phonebook:\n    print(\"Bill is not in the phonebook.\")",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs47_python_iii",
        "documentation": {}
    },
    {
        "label": "phonebook[\"Herb\"]",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs47_python_iii",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs47_python_iii",
        "peekOfCode": "phonebook[\"Herb\"] = 7653420789\ndel phonebook[\"Bill\"]\n# Should print Herb is in the phonebook.\nif \"Herb\" in phonebook:\n    print(\"Herb is in the phonebook.\")\n# Should print Bill is not in the phonebook.\nif \"Bill\" not in phonebook:\n    print(\"Bill is not in the phonebook.\")\n\"\"\"# Mutability\"\"\"\n\"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs47_python_iii",
        "documentation": {}
    },
    {
        "label": "my_list1",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs47_python_iii",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs47_python_iii",
        "peekOfCode": "my_list1 = [1, 2, 3, 4, 5, 6]\nmy_list2 = my_list1\n# How would you verify that my_list1 and my_list2 have the same identity?\nprint(id(my_list1), id(my_list2))\nmy_list1.append(7)\n# Check if my_list1 and my_list2 still have the same identity.\n# If they do, why is that?\nprint(id(my_list1), id(my_list2))\n\"\"\"\nExample Two",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs47_python_iii",
        "documentation": {}
    },
    {
        "label": "my_list2",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs47_python_iii",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs47_python_iii",
        "peekOfCode": "my_list2 = my_list1\n# How would you verify that my_list1 and my_list2 have the same identity?\nprint(id(my_list1), id(my_list2))\nmy_list1.append(7)\n# Check if my_list1 and my_list2 still have the same identity.\n# If they do, why is that?\nprint(id(my_list1), id(my_list2))\n\"\"\"\nExample Two\n\"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs47_python_iii",
        "documentation": {}
    },
    {
        "label": "my_text1",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs47_python_iii",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs47_python_iii",
        "peekOfCode": "my_text1 = \"Lambda School\"\nmy_text2 = my_text1\n# How would you verify that my_text1 and my_text2 have the same identity?\nprint(\"My Text\", id(my_text1), id(my_text2))\nmy_text1 += \" is awesome!\"\n# Check if my_text1 and my_text2 still have the same identity?\nprint(\"My Text\", id(my_text1), id(my_text2))\n# If they do not, why is that?\n# Now check if my_text1 and my_text2 have the same value?\nprint(\"1:\", my_text1, \"2:\", my_text2)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs47_python_iii",
        "documentation": {}
    },
    {
        "label": "my_text2",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs47_python_iii",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs47_python_iii",
        "peekOfCode": "my_text2 = my_text1\n# How would you verify that my_text1 and my_text2 have the same identity?\nprint(\"My Text\", id(my_text1), id(my_text2))\nmy_text1 += \" is awesome!\"\n# Check if my_text1 and my_text2 still have the same identity?\nprint(\"My Text\", id(my_text1), id(my_text2))\n# If they do not, why is that?\n# Now check if my_text1 and my_text2 have the same value?\nprint(\"1:\", my_text1, \"2:\", my_text2)\n# Do they? Explain why or why not.",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs47_python_iii",
        "documentation": {}
    },
    {
        "label": "produce",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs47_python_iii",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs47_python_iii",
        "peekOfCode": "produce = [\"Apple\", \"Banana\", \"Carrot\"]\n# Initialize a tuple and include a reference to the produce list in the tuple\nstore = (\"Bill's Grocery\", produce)\nprint(\"store\", id(store))\n# Add a new item to the produce list\nproduce.append(\"Dragonfruit\")\nprint(\"store\", id(store))\nprint(dir(store))\n# Did you notice that the identity of store remained the same?\n# But I thought if you changed a mutable object, a new object would",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs47_python_iii",
        "documentation": {}
    },
    {
        "label": "store",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs47_python_iii",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs47_python_iii",
        "peekOfCode": "store = (\"Bill's Grocery\", produce)\nprint(\"store\", id(store))\n# Add a new item to the produce list\nproduce.append(\"Dragonfruit\")\nprint(\"store\", id(store))\nprint(dir(store))\n# Did you notice that the identity of store remained the same?\n# But I thought if you changed a mutable object, a new object would\n# be created in memory? Why did that not occur here?\n\"\"\"# Time Complexity",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs47_python_iii",
        "documentation": {}
    },
    {
        "label": "l",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs47_python_iii",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs47_python_iii",
        "peekOfCode": "l = [1, 2, 3, 4, 5]\nfor i in range(len(l)):\n    l[i] = l[i] * 2\nl2 = [l[i] * 2 for i in range(len(l)) if l[i] == 4]\n# for i in range(len(l)):\n# l2.append(l[i] * 2)\nl3 = []\nfor i in range(len(l)):\n    l3.append(l[i] * 2)\nprint(l)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs47_python_iii",
        "documentation": {}
    },
    {
        "label": "l2",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs47_python_iii",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs47_python_iii",
        "peekOfCode": "l2 = [l[i] * 2 for i in range(len(l)) if l[i] == 4]\n# for i in range(len(l)):\n# l2.append(l[i] * 2)\nl3 = []\nfor i in range(len(l)):\n    l3.append(l[i] * 2)\nprint(l)\nprint(l2)\nprint(l3)\nprint(l)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs47_python_iii",
        "documentation": {}
    },
    {
        "label": "l3",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs47_python_iii",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs47_python_iii",
        "peekOfCode": "l3 = []\nfor i in range(len(l)):\n    l3.append(l[i] * 2)\nprint(l)\nprint(l2)\nprint(l3)\nprint(l)\n\"\"\"# DEMO\"\"\"\n\"\"\"\nDemonstration",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.cs47_python_iii",
        "documentation": {}
    },
    {
        "label": "Tree",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.csBinaryTreelnvert",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.csBinaryTreelnvert",
        "peekOfCode": "class Tree(object):\n    def __init__(self, x):\n        self.value = x\n        self.left = None\n        self.right = None\ndef csBinaryTreeInvert(root):\n    if not root or (not root.left and not root.right):\n        return root\n    tmp = root.left\n    root.left = root.right",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.csBinaryTreelnvert",
        "documentation": {}
    },
    {
        "label": "csBinaryTreeInvert",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.csBinaryTreelnvert",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.csBinaryTreelnvert",
        "peekOfCode": "def csBinaryTreeInvert(root):\n    if not root or (not root.left and not root.right):\n        return root\n    tmp = root.left\n    root.left = root.right\n    root.right = tmp\n    csBinaryTreeInvert(root.left)\n    csBinaryTreeInvert(root.right)\n    return root",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.csBinaryTreelnvert",
        "documentation": {}
    },
    {
        "label": "Tree",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.csBSTRangeSum",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.csBSTRangeSum",
        "peekOfCode": "class Tree(object):\n    def __init__(self, x):\n        self.value = x\n        self.left = None\n        self.right = None\ndef csBSTRangeSum(root, lower, upper):\n    if not root:\n        return 0\n    res = 0\n    if lower <= root.value <= upper:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.csBSTRangeSum",
        "documentation": {}
    },
    {
        "label": "csBSTRangeSum",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.csBSTRangeSum",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.csBSTRangeSum",
        "peekOfCode": "def csBSTRangeSum(root, lower, upper):\n    if not root:\n        return 0\n    res = 0\n    if lower <= root.value <= upper:\n        res += root.value\n        res += csBSTRangeSum(root.left, lower, upper)\n        res += csBSTRangeSum(root.right, lower, upper)\n    elif root.value < lower:\n        res += csBSTRangeSum(root.right, lower, upper)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.csBSTRangeSum",
        "documentation": {}
    },
    {
        "label": "dfs",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.csFindAllPathsFromAToB",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.csFindAllPathsFromAToB",
        "peekOfCode": "def dfs(s):\n    # Append the node in path\n    # and set visited\n    path.append(s)\n    visited[s] = True\n    # Path started with a node\n    # having in-degree 0 and\n    # current node has out-degree 0,\n    # print current path\n    if outdeg0[s] and indeg0[path[0]]:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.csFindAllPathsFromAToB",
        "documentation": {}
    },
    {
        "label": "csFindAllPathsFromAToB",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.csFindAllPathsFromAToB",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.csFindAllPathsFromAToB",
        "peekOfCode": "def csFindAllPathsFromAToB(graph):\n    for i in range(graph):\n        # for each node with in-degree 0\n        # print all possible paths\n        if indeg0[i] and adj[i]:\n            path = []\n            visited = [False] * (graph + 1)\n            dfs(i)\n# Driver code\ngraph = 6",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.csFindAllPathsFromAToB",
        "documentation": {}
    },
    {
        "label": "graph",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.csFindAllPathsFromAToB",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.csFindAllPathsFromAToB",
        "peekOfCode": "graph = 6\n# set all nodes unvisited\nvisited = [False] * (graph + 1)\npath = []\n# edges = (a, b): a -> b\nedges = [(5, 0), (5, 2), (2, 3), (4, 0), (4, 1), (3, 1)]\n# adjacency list for nodes\nadj = defaultdict(list)\n# indeg0 and outdeg0 arrays\nindeg0 = [True] * graph",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.csFindAllPathsFromAToB",
        "documentation": {}
    },
    {
        "label": "visited",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.csFindAllPathsFromAToB",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.csFindAllPathsFromAToB",
        "peekOfCode": "visited = [False] * (graph + 1)\npath = []\n# edges = (a, b): a -> b\nedges = [(5, 0), (5, 2), (2, 3), (4, 0), (4, 1), (3, 1)]\n# adjacency list for nodes\nadj = defaultdict(list)\n# indeg0 and outdeg0 arrays\nindeg0 = [True] * graph\noutdeg0 = [True] * graph\nfor edge in edges:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.csFindAllPathsFromAToB",
        "documentation": {}
    },
    {
        "label": "path",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.csFindAllPathsFromAToB",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.csFindAllPathsFromAToB",
        "peekOfCode": "path = []\n# edges = (a, b): a -> b\nedges = [(5, 0), (5, 2), (2, 3), (4, 0), (4, 1), (3, 1)]\n# adjacency list for nodes\nadj = defaultdict(list)\n# indeg0 and outdeg0 arrays\nindeg0 = [True] * graph\noutdeg0 = [True] * graph\nfor edge in edges:\n    u, v = edge[0], edge[1]",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.csFindAllPathsFromAToB",
        "documentation": {}
    },
    {
        "label": "edges",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.csFindAllPathsFromAToB",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.csFindAllPathsFromAToB",
        "peekOfCode": "edges = [(5, 0), (5, 2), (2, 3), (4, 0), (4, 1), (3, 1)]\n# adjacency list for nodes\nadj = defaultdict(list)\n# indeg0 and outdeg0 arrays\nindeg0 = [True] * graph\noutdeg0 = [True] * graph\nfor edge in edges:\n    u, v = edge[0], edge[1]\n    # u -> v\n    adj[u].append(v)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.csFindAllPathsFromAToB",
        "documentation": {}
    },
    {
        "label": "adj",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.csFindAllPathsFromAToB",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.csFindAllPathsFromAToB",
        "peekOfCode": "adj = defaultdict(list)\n# indeg0 and outdeg0 arrays\nindeg0 = [True] * graph\noutdeg0 = [True] * graph\nfor edge in edges:\n    u, v = edge[0], edge[1]\n    # u -> v\n    adj[u].append(v)\n    # set indeg0[v] <- false\n    indeg0[v] = False",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.csFindAllPathsFromAToB",
        "documentation": {}
    },
    {
        "label": "indeg0",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.csFindAllPathsFromAToB",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.csFindAllPathsFromAToB",
        "peekOfCode": "indeg0 = [True] * graph\noutdeg0 = [True] * graph\nfor edge in edges:\n    u, v = edge[0], edge[1]\n    # u -> v\n    adj[u].append(v)\n    # set indeg0[v] <- false\n    indeg0[v] = False\n    # set outdeg0[u] <- false\n    outdeg0[u] = False",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.csFindAllPathsFromAToB",
        "documentation": {}
    },
    {
        "label": "outdeg0",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.csFindAllPathsFromAToB",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.csFindAllPathsFromAToB",
        "peekOfCode": "outdeg0 = [True] * graph\nfor edge in edges:\n    u, v = edge[0], edge[1]\n    # u -> v\n    adj[u].append(v)\n    # set indeg0[v] <- false\n    indeg0[v] = False\n    # set outdeg0[u] <- false\n    outdeg0[u] = False\n# print('All possible paths:')",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.csFindAllPathsFromAToB",
        "documentation": {}
    },
    {
        "label": "csReverseIntegerBits",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.csReverseBits",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.csReverseBits",
        "peekOfCode": "def csReverseIntegerBits(n):\n    rev = 0\n    # traversing bits of 'n' from the right\n    while n > 0:\n        # bitwise left shift 'rev' by 1\n        rev = rev << 1\n        # if current bit is '1'\n        if n & 1 == 1:\n            rev = rev ^ 1\n        # bitwise right shift 'n' by 1",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.csReverseBits",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.csReverseBits",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.csReverseBits",
        "peekOfCode": "n = 267\nprint(csReverseIntegerBits(n))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.csReverseBits",
        "documentation": {}
    },
    {
        "label": "my_hash",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.d3",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.d3",
        "peekOfCode": "def my_hash(key):\n    sum = 0\n    for c in key:\n        nc = ord(c)\n        sum += nc\n    return sum\nstorage = [None] * 10\nh = my_hash(\"CBA\")\nprint(h)\nn = h % len(storage)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.d3",
        "documentation": {}
    },
    {
        "label": "put",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.d3",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.d3",
        "peekOfCode": "def put(key, value):\n    idx = my_hash(key) % len(storage)\n    storage[idx] = value\ndef get(key):\n    idx = my_hash(key) % len(storage)\n    return storage[idx]\nput(\"Tom\", 41)\n# bryan@LAPTOP-9LGJ3JGS:/c/Lambda/CIRRICULUMN/_NOTES/CS-python-notes/WEEKS/wk17/d3$ python3 d3.py\n# 198\n# 8",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.d3",
        "documentation": {}
    },
    {
        "label": "get",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.d3",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.d3",
        "peekOfCode": "def get(key):\n    idx = my_hash(key) % len(storage)\n    return storage[idx]\nput(\"Tom\", 41)\n# bryan@LAPTOP-9LGJ3JGS:/c/Lambda/CIRRICULUMN/_NOTES/CS-python-notes/WEEKS/wk17/d3$ python3 d3.py\n# 198\n# 8\n# bryan@LAPTOP-9LGJ3JGS:/c/Lambda/CIRRICULUMN/_NOTES/CS-python-notes/WEEKS/wk17/d3$",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.d3",
        "documentation": {}
    },
    {
        "label": "storage",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.d3",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.d3",
        "peekOfCode": "storage = [None] * 10\nh = my_hash(\"CBA\")\nprint(h)\nn = h % len(storage)\nprint(n)\ndef put(key, value):\n    idx = my_hash(key) % len(storage)\n    storage[idx] = value\ndef get(key):\n    idx = my_hash(key) % len(storage)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.d3",
        "documentation": {}
    },
    {
        "label": "h",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.d3",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.d3",
        "peekOfCode": "h = my_hash(\"CBA\")\nprint(h)\nn = h % len(storage)\nprint(n)\ndef put(key, value):\n    idx = my_hash(key) % len(storage)\n    storage[idx] = value\ndef get(key):\n    idx = my_hash(key) % len(storage)\n    return storage[idx]",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.d3",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.d3",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.d3",
        "peekOfCode": "n = h % len(storage)\nprint(n)\ndef put(key, value):\n    idx = my_hash(key) % len(storage)\n    storage[idx] = value\ndef get(key):\n    idx = my_hash(key) % len(storage)\n    return storage[idx]\nput(\"Tom\", 41)\n# bryan@LAPTOP-9LGJ3JGS:/c/Lambda/CIRRICULUMN/_NOTES/CS-python-notes/WEEKS/wk17/d3$ python3 d3.py",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.d3",
        "documentation": {}
    },
    {
        "label": "top_k_frequent",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.demo",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.demo",
        "peekOfCode": "def top_k_frequent(words, k):\nwords = [\"the\", \"sky\", \"is\", \"cloudy\", \"the\", \"the\", \"the\", \"cloudy\", \"is\", \"is\"]",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.demo",
        "documentation": {}
    },
    {
        "label": "words",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.demo",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.demo",
        "peekOfCode": "words = [\"lambda\", \"school\", \"rules\", \"lambda\", \"school\", \"rocks\"]\nk = 2\nOutput:\n[\"lambda\", \"school\"]\nExplanation:\n\"lambda\" and \"school\" are the two most frequent words.\n```\nExample 2:\n```plaintext\nInput:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.demo",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.demo",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.demo",
        "peekOfCode": "k = 2\nOutput:\n[\"lambda\", \"school\"]\nExplanation:\n\"lambda\" and \"school\" are the two most frequent words.\n```\nExample 2:\n```plaintext\nInput:\nwords = [\"the\", \"sky\", \"is\", \"cloudy\", \"the\", \"the\", \"the\", \"cloudy\", \"is\", \"is\"]",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.demo",
        "documentation": {}
    },
    {
        "label": "words",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.demo",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.demo",
        "peekOfCode": "words = [\"the\", \"sky\", \"is\", \"cloudy\", \"the\", \"the\", \"the\", \"cloudy\", \"is\", \"is\"]\nk = 4\nOutput:\n[\"the\", \"is\", \"cloudy\", \"sky\"]\nExplanation:\n\"the\", \"is\", \"cloudy\", and \"sky\" are the four most frequent words. The words\nare sorted from highest frequency to lowest.\n```\nNotes:\n- `k` is always valid: `1 <= k <= number of unique elements.",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.demo",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.demo",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.demo",
        "peekOfCode": "k = 4\nOutput:\n[\"the\", \"is\", \"cloudy\", \"sky\"]\nExplanation:\n\"the\", \"is\", \"cloudy\", and \"sky\" are the four most frequent words. The words\nare sorted from highest frequency to lowest.\n```\nNotes:\n- `k` is always valid: `1 <= k <= number of unique elements.\n- words in the input list only contain lowercase letters.",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.demo",
        "documentation": {}
    },
    {
        "label": "words",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.demo",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.demo",
        "peekOfCode": "words = [\"the\", \"sky\", \"is\", \"cloudy\", \"the\", \"the\", \"the\", \"cloudy\", \"is\", \"is\"]",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.demo",
        "documentation": {}
    },
    {
        "label": "Graph",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.find-path-scrap",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.find-path-scrap",
        "peekOfCode": "class Graph:\n    # Constructor\n    def __init__(self, edges, N):\n        # A list of lists to represent an adjacency list\n        self.adjList = [[] for _ in range(N)]\n        # add edges to the undirected graph\n        for (src, dest) in edges:\n            self.adjList[src].append(dest)\n# Perform DFS on the graph and set the departure time of all vertices of the graph\ndef DFS(graph, v, discovered, departure, time):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.find-path-scrap",
        "documentation": {}
    },
    {
        "label": "DFS",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.find-path-scrap",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.find-path-scrap",
        "peekOfCode": "def DFS(graph, v, discovered, departure, time):\n    # mark the current node as discovered\n    discovered[v] = True\n    # do for every edge `v —> u`\n    for u in graph.adjList[v]:\n        # if `u` is not yet discovered\n        if not discovered[u]:\n            time = DFS(graph, u, discovered, departure, time)\n    # ready to backtrack\n    # set departure time of vertex `v`",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.find-path-scrap",
        "documentation": {}
    },
    {
        "label": "isDAG",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.find-path-scrap",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.find-path-scrap",
        "peekOfCode": "def isDAG(graph, N):\n    # keep track of whether a vertex is discovered or not\n    discovered = [False] * N\n    # keep track of the departure time of a vertex in DFS\n    departure = [None] * N\n    time = 0\n    # Perform DFS traversal from all undiscovered vertices\n    # to visit all connected components of a graph\n    for i in range(N):\n        if not discovered[i]:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.find-path-scrap",
        "documentation": {}
    },
    {
        "label": "csFindAddedLetter",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.findAddedLetter",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.findAddedLetter",
        "peekOfCode": "def csFindAddedLetter(str_1, str_2):\n    m1 = {}\n    for i in str_2:\n        if i in m1:\n            m1[i] += 1\n        else:\n            m1[i] = 1\n    for i in str_1:\n        m1[i] -= 1\n    for h1 in m1:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.findAddedLetter",
        "documentation": {}
    },
    {
        "label": "dfs",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.findPathsFromA2B",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.findPathsFromA2B",
        "peekOfCode": "def dfs(s):\n    # Append the node in path\n    # and set visited\n    path.append(s)\n    visited[s] = True\n    # Path started with a node\n    # having in-degree 0 and\n    # current node has out-degree 0,\n    # print current path\n    if outdeg0[s] and indeg0[path[0]]:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.findPathsFromA2B",
        "documentation": {}
    },
    {
        "label": "csFindAllPathsFromAToB",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.findPathsFromA2B",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.findPathsFromA2B",
        "peekOfCode": "def csFindAllPathsFromAToB(graph):\n    for i in range(n):\n        # for each node with in-degree 0\n        # print all possible paths\n        if indeg0[i] and adj[i]:\n            path = []\n            visited = [False] * (n + 1)\n            dfs(i)\n# Driver code\nfrom collections import defaultdict",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.findPathsFromA2B",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.findPathsFromA2B",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.findPathsFromA2B",
        "peekOfCode": "n = 6\n# set all nodes unvisited\nvisited = [False] * (n + 1)\npath = []\n# edges = (a, b): a -> b\nedges = [(5, 0), (5, 2), (2, 3), (4, 0), (4, 1), (3, 1)]\n# adjacency list for nodes\nadj = defaultdict(list)\n# indeg0 and outdeg0 arrays\nindeg0 = [True] * n",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.findPathsFromA2B",
        "documentation": {}
    },
    {
        "label": "visited",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.findPathsFromA2B",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.findPathsFromA2B",
        "peekOfCode": "visited = [False] * (n + 1)\npath = []\n# edges = (a, b): a -> b\nedges = [(5, 0), (5, 2), (2, 3), (4, 0), (4, 1), (3, 1)]\n# adjacency list for nodes\nadj = defaultdict(list)\n# indeg0 and outdeg0 arrays\nindeg0 = [True] * n\noutdeg0 = [True] * n\nfor edge in edges:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.findPathsFromA2B",
        "documentation": {}
    },
    {
        "label": "path",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.findPathsFromA2B",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.findPathsFromA2B",
        "peekOfCode": "path = []\n# edges = (a, b): a -> b\nedges = [(5, 0), (5, 2), (2, 3), (4, 0), (4, 1), (3, 1)]\n# adjacency list for nodes\nadj = defaultdict(list)\n# indeg0 and outdeg0 arrays\nindeg0 = [True] * n\noutdeg0 = [True] * n\nfor edge in edges:\n    u, v = edge[0], edge[1]",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.findPathsFromA2B",
        "documentation": {}
    },
    {
        "label": "edges",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.findPathsFromA2B",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.findPathsFromA2B",
        "peekOfCode": "edges = [(5, 0), (5, 2), (2, 3), (4, 0), (4, 1), (3, 1)]\n# adjacency list for nodes\nadj = defaultdict(list)\n# indeg0 and outdeg0 arrays\nindeg0 = [True] * n\noutdeg0 = [True] * n\nfor edge in edges:\n    u, v = edge[0], edge[1]\n    # u -> v\n    adj[u].append(v)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.findPathsFromA2B",
        "documentation": {}
    },
    {
        "label": "adj",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.findPathsFromA2B",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.findPathsFromA2B",
        "peekOfCode": "adj = defaultdict(list)\n# indeg0 and outdeg0 arrays\nindeg0 = [True] * n\noutdeg0 = [True] * n\nfor edge in edges:\n    u, v = edge[0], edge[1]\n    # u -> v\n    adj[u].append(v)\n    # set indeg0[v] <- false\n    indeg0[v] = False",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.findPathsFromA2B",
        "documentation": {}
    },
    {
        "label": "indeg0",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.findPathsFromA2B",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.findPathsFromA2B",
        "peekOfCode": "indeg0 = [True] * n\noutdeg0 = [True] * n\nfor edge in edges:\n    u, v = edge[0], edge[1]\n    # u -> v\n    adj[u].append(v)\n    # set indeg0[v] <- false\n    indeg0[v] = False\n    # set outdeg0[u] <- false\n    outdeg0[u] = False",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.findPathsFromA2B",
        "documentation": {}
    },
    {
        "label": "outdeg0",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.findPathsFromA2B",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.findPathsFromA2B",
        "peekOfCode": "outdeg0 = [True] * n\nfor edge in edges:\n    u, v = edge[0], edge[1]\n    # u -> v\n    adj[u].append(v)\n    # set indeg0[v] <- false\n    indeg0[v] = False\n    # set outdeg0[u] <- false\n    outdeg0[u] = False\nprint(\"All possible paths:\")",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.findPathsFromA2B",
        "documentation": {}
    },
    {
        "label": "findProfession",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.findProfession",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.findProfession",
        "peekOfCode": "def findProfession(level, pos):\n    # Base case\n    if level == 1:\n        return \"Engineer\"\n    # Recursively find parent's profession. If parent\n    # is a doctar, this node will be a doctal if it is\n    # at odd position and an engineer if at even position\n    if findProfession(level - 1, (pos + 1) // 2) == \"Doctor\":\n        if pos % 2:\n            return \"Doctor\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.findProfession",
        "documentation": {}
    },
    {
        "label": "csFindTheSingleNumber",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.findTheSingleNumber",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.findTheSingleNumber",
        "peekOfCode": "def csFindTheSingleNumber(nums):\n    frequency = Counter(nums)\n    for i in frequency:\n        if frequency[i] == 1:\n            return i",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.findTheSingleNumber",
        "documentation": {}
    },
    {
        "label": "first_not_repeating_character",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.first-non-repeating",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.first-non-repeating",
        "peekOfCode": "def first_not_repeating_character(s):\n    c = {}\n    for i in s:\n        c[i] = c.get(i, 0) + 1\n    return next((i for i in s if c[i] == 1), \"_\")",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.first-non-repeating",
        "documentation": {}
    },
    {
        "label": "DFS",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.friend-circle",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.friend-circle",
        "peekOfCode": "def DFS(friendships, n, visited, v):\n    for x in range(n):\n        # A student is in the friend circle if he/she is friendships with the student represented by\n        # studentIndex and if he/she is not already in a friend circle\n        if friendships[v, x] and visited[x] == 0:\n            if x != v:\n                visited[x] = 1\n                DFS(friendships, n, visited, x)\nn = 4\ndef csFriendCircles(friendships):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.friend-circle",
        "documentation": {}
    },
    {
        "label": "csFriendCircles",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.friend-circle",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.friend-circle",
        "peekOfCode": "def csFriendCircles(friendships):\n    numCircles = 0  # Number of friend circles\n    # Keep track of whether a student is already in a friend circle\n    visited = np.zeros((n))\n    # Start with the first student and recursively find all other students in his/her\n    # friend circle. Then, do the same thing for the next student that is not already\n    # in a friend circle. Repeat until all students are in a friend circle.\n    for i in range(n):\n        if visited[i] == 0:\n            visited[i] = 1",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.friend-circle",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.friend-circle",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.friend-circle",
        "peekOfCode": "n = 4\ndef csFriendCircles(friendships):\n    numCircles = 0  # Number of friend circles\n    # Keep track of whether a student is already in a friend circle\n    visited = np.zeros((n))\n    # Start with the first student and recursively find all other students in his/her\n    # friend circle. Then, do the same thing for the next student that is not already\n    # in a friend circle. Repeat until all students are in a friend circle.\n    for i in range(n):\n        if visited[i] == 0:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.friend-circle",
        "documentation": {}
    },
    {
        "label": "download_all_from_user",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.gist",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.gist",
        "peekOfCode": "def download_all_from_user(user: str):\n    next_page = True\n    page = 1\n    while next_page:\n        url = f\"https://api.github.com/users/{user}/gists?page={page}\"\n        response = requests.get(url)\n        if not len(response.json()):\n            next_page = False\n        else:\n            page += 1",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.gist",
        "documentation": {}
    },
    {
        "label": "download_all",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.gist",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.gist",
        "peekOfCode": "def download_all(gists: list):\n    with PoolExecutor(max_workers=10) as executor:\n        for _ in executor.map(download, gists):\n            pass\ndef download(gist):\n    target = gist[\"id\"] + hashlib.md5(gist[\"updated_at\"].encode(\"utf-8\")).hexdigest()\n    call([\"git\", \"clone\", gist[\"git_pull_url\"], target])\n    description_file = os.path.join(target, \"description.txt\")\n    with open(description_file, \"w\") as f:\n        f.write(f\"{gist['description']}\\n\")",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.gist",
        "documentation": {}
    },
    {
        "label": "download",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.gist",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.gist",
        "peekOfCode": "def download(gist):\n    target = gist[\"id\"] + hashlib.md5(gist[\"updated_at\"].encode(\"utf-8\")).hexdigest()\n    call([\"git\", \"clone\", gist[\"git_pull_url\"], target])\n    description_file = os.path.join(target, \"description.txt\")\n    with open(description_file, \"w\") as f:\n        f.write(f\"{gist['description']}\\n\")\n# Run\nuser = sys.argv[1]\ndownload_all_from_user(user)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.gist",
        "documentation": {}
    },
    {
        "label": "user",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.gist",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.gist",
        "peekOfCode": "user = sys.argv[1]\ndownload_all_from_user(user)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.gist",
        "documentation": {}
    },
    {
        "label": "Vertex",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.h1-raph",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.h1-raph",
        "peekOfCode": "class Vertex:\n    def __init__(self, value):\n        self.value = value\n        self.connections = {}\n    def __str__(self):\n        return (\n            str(self.value)\n            + \" connections: \"\n            + str([x.value for x in self.connections])\n        )",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.h1-raph",
        "documentation": {}
    },
    {
        "label": "Graph",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.h1-raph",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.h1-raph",
        "peekOfCode": "class Graph:\n    def __init__(self):\n        self.vertices = {}\n        self.count = 0\n    def __contains__(self, vert):\n        return vert in self.vertices\n    def __iter__(self):\n        return iter(self.vertices.values())\n    def add_vertex(self, value):\n        self.count += 1",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.h1-raph",
        "documentation": {}
    },
    {
        "label": "g",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.h1-raph",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.h1-raph",
        "peekOfCode": "g = Graph()\nprint(\n    '-----------------------------------------g.add_vertex(\"A\")----------------------------------------------------------'\n)\nA = g.add_vertex(\"A\")\nprint(\"A:\", A)\nprint(\n    '----------------------------------------------g.add_vertex(\"B\")-----------------------------------------------------'\n)\nB = g.add_vertex(\"B\")",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.h1-raph",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.h1-raph",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.h1-raph",
        "peekOfCode": "A = g.add_vertex(\"A\")\nprint(\"A:\", A)\nprint(\n    '----------------------------------------------g.add_vertex(\"B\")-----------------------------------------------------'\n)\nB = g.add_vertex(\"B\")\nprint(\"B:\", B)\nprint(\n    '-------------------------------------------------g.add_vertex(\"C\")--------------------------------------------------'\n)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.h1-raph",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.h1-raph",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.h1-raph",
        "peekOfCode": "B = g.add_vertex(\"B\")\nprint(\"B:\", B)\nprint(\n    '-------------------------------------------------g.add_vertex(\"C\")--------------------------------------------------'\n)\nC = g.add_vertex(\"C\")\nprint(\"C:\", C)\nprint(\n    '-----------------------------------------------------g.add_vertex(\"D\")-----------------------------------------------'\n)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.h1-raph",
        "documentation": {}
    },
    {
        "label": "C",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.h1-raph",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.h1-raph",
        "peekOfCode": "C = g.add_vertex(\"C\")\nprint(\"C:\", C)\nprint(\n    '-----------------------------------------------------g.add_vertex(\"D\")-----------------------------------------------'\n)\nD = g.add_vertex(\"D\")\nprint(\"D:\", D)\nprint(\n    '------------------------------------------------g.add_vertex(\"E\")--------------------------------------------------'\n)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.h1-raph",
        "documentation": {}
    },
    {
        "label": "D",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.h1-raph",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.h1-raph",
        "peekOfCode": "D = g.add_vertex(\"D\")\nprint(\"D:\", D)\nprint(\n    '------------------------------------------------g.add_vertex(\"E\")--------------------------------------------------'\n)\nE = g.add_vertex(\"E\")\nprint(\"E:\", E)\nprint(\n    \"---------------------------------------g.add_edge(A, B, 1)------------------------------------------------------------\"\n)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.h1-raph",
        "documentation": {}
    },
    {
        "label": "E",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.h1-raph",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.h1-raph",
        "peekOfCode": "E = g.add_vertex(\"E\")\nprint(\"E:\", E)\nprint(\n    \"---------------------------------------g.add_edge(A, B, 1)------------------------------------------------------------\"\n)\ng.add_edge(A, B, 1)\nprint(\n    \"---------------------------------------g.add_edge(B, C, 3)----------------------------------------------------------\"\n)\ng.add_edge(B, C, 3)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.h1-raph",
        "documentation": {}
    },
    {
        "label": "hasPathWithGivenSum",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.hasPathWithGivenSum",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.hasPathWithGivenSum",
        "peekOfCode": "def hasPathWithGivenSum(t, s):\n    if t is None:\n        if s == 0:\n            return True\n        else:\n            return False\n    else:\n        if t.left is not None and t.right is not None:\n            return any(\n                [",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.hasPathWithGivenSum",
        "documentation": {}
    },
    {
        "label": "HashTableEntry",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.ht2 (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.ht2 (1)",
        "peekOfCode": "class HashTableEntry:\n    \"\"\"\n    Linked List hash table key/value pair\n    \"\"\"\n    def __init__(self, key, value):\n        self.key = key\n        self.value = value\n        self.next = None\n# Hash table can't have fewer than this many slots\n# MIN_CAPACITY = 8",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.ht2 (1)",
        "documentation": {}
    },
    {
        "label": "HashTable",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.ht2 (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.ht2 (1)",
        "peekOfCode": "class HashTable:\n    \"\"\"\n    A hash table that with `capacity` buckets\n    that accepts string keys\n    Implement this.\n    \"\"\"\n    def __init__(self, capacity):\n        self.capacity = capacity  # Number of buckets in the hash table\n        self.storage = [None] * capacity\n        self.item_count = 0",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.ht2 (1)",
        "documentation": {}
    },
    {
        "label": "HashTableEntry",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.ht2",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.ht2",
        "peekOfCode": "class HashTableEntry:\n    \"\"\"\n    Linked List hash table key/value pair\n    \"\"\"\n    def __init__(self, key, value):\n        self.key = key\n        self.value = value\n        self.next = None\n# Hash table can't have fewer than this many slots\n# MIN_CAPACITY = 8",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.ht2",
        "documentation": {}
    },
    {
        "label": "HashTable",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.ht2",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.ht2",
        "peekOfCode": "class HashTable:\n    \"\"\"\n    A hash table that with `capacity` buckets\n    that accepts string keys\n    Implement this.\n    \"\"\"\n    def __init__(self, capacity):\n        self.capacity = capacity  # Number of buckets in the hash table\n        self.storage = [None] * capacity\n        self.item_count = 0",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.ht2",
        "documentation": {}
    },
    {
        "label": "top_k_frequent",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.ht2",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.ht2",
        "peekOfCode": "def top_k_frequent(words, k):\n    \"\"\"\n    Input:\n    words -> List[str]\n    k -> int\n    Output:\n    List[str]\n    \"\"\"\n    # Your code here",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.ht2",
        "documentation": {}
    },
    {
        "label": "words",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.ht2",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.ht2",
        "peekOfCode": "words = [\"lambda\", \"school\", \"rules\", \"lambda\", \"school\", \"rocks\"]\nk = 2\nOutput:\n[\"lambda\", \"school\"]\nExplanation:\n\"lambda\" and \"school\" are the two most frequent words.\n```\nExample 2:\n```plaintext\nInput:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.ht2",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.ht2",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.ht2",
        "peekOfCode": "k = 2\nOutput:\n[\"lambda\", \"school\"]\nExplanation:\n\"lambda\" and \"school\" are the two most frequent words.\n```\nExample 2:\n```plaintext\nInput:\nwords = [\"the\", \"sky\", \"is\", \"cloudy\", \"the\", \"the\", \"the\", \"cloudy\", \"is\", \"is\"]",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.ht2",
        "documentation": {}
    },
    {
        "label": "words",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.ht2",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.ht2",
        "peekOfCode": "words = [\"the\", \"sky\", \"is\", \"cloudy\", \"the\", \"the\", \"the\", \"cloudy\", \"is\", \"is\"]\nk = 4\nOutput:\n[\"the\", \"is\", \"cloudy\", \"sky\"]\nExplanation:\n\"the\", \"is\", \"cloudy\", and \"sky\" are the four most frequent words. The words\nare sorted from highest frequency to lowest.\n```\nNotes:\n- `k` is always valid: `1 <= k <= number of unique elements.",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.ht2",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.ht2",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.ht2",
        "peekOfCode": "k = 4\nOutput:\n[\"the\", \"is\", \"cloudy\", \"sky\"]\nExplanation:\n\"the\", \"is\", \"cloudy\", and \"sky\" are the four most frequent words. The words\nare sorted from highest frequency to lowest.\n```\nNotes:\n- `k` is always valid: `1 <= k <= number of unique elements.\n- words in the input list only contain lowercase letters.",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.ht2",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.insertValueIntoSortedLinkedList (2)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.insertValueIntoSortedLinkedList (2)",
        "peekOfCode": "class ListNode(object):  # def __init__(self, value):\n    def __init__(self, x):\n        self.value = x  # self.value = value\n        self.next = None  # self.next = None\ndef insertValueIntoSortedLinkedList(l, value):\n    head = l\n    new_item = ListNode(value)\n    if head is None:\n        new_item.next = head\n        head = new_item",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.insertValueIntoSortedLinkedList (2)",
        "documentation": {}
    },
    {
        "label": "insertValueIntoSortedLinkedList",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.insertValueIntoSortedLinkedList (2)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.insertValueIntoSortedLinkedList (2)",
        "peekOfCode": "def insertValueIntoSortedLinkedList(l, value):\n    head = l\n    new_item = ListNode(value)\n    if head is None:\n        new_item.next = head\n        head = new_item\n        return head\n    elif head.value >= new_item.value:\n        new_item.next = head\n        head = new_item",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.insertValueIntoSortedLinkedList (2)",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.insertValueIntoSortedLinkedList",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.insertValueIntoSortedLinkedList",
        "peekOfCode": "class ListNode(object):  # def __init__(self, value):\n    def __init__(self, x):\n        self.value = x  # self.value = value\n        self.next = None  # self.next = None\ndef insertValueIntoSortedLinkedList(l, value):\n    head = l\n    new_item = ListNode(value)\n    if head is None:\n        new_item.next = head\n        head = new_item",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.insertValueIntoSortedLinkedList",
        "documentation": {}
    },
    {
        "label": "insertValueIntoSortedLinkedList",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.insertValueIntoSortedLinkedList",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.insertValueIntoSortedLinkedList",
        "peekOfCode": "def insertValueIntoSortedLinkedList(l, value):\n    head = l\n    new_item = ListNode(value)\n    if head is None:\n        new_item.next = head\n        head = new_item\n        return head\n    elif head.value >= new_item.value:\n        new_item.next = head\n        head = new_item",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.insertValueIntoSortedLinkedList",
        "documentation": {}
    },
    {
        "label": "decrypt",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.isCryptSolution",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.isCryptSolution",
        "peekOfCode": "def decrypt(word, dictionary):\n    lst = []\n    for c in word:\n        lst.append(dictionary[c])\n    return \"\".join(lst)\ndef isCryptSolution(crypt, solution):\n    dict = {}\n    for r in solution:\n        dict[r[0]] = r[1]\n    values = [0] * 3",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.isCryptSolution",
        "documentation": {}
    },
    {
        "label": "isCryptSolution",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.isCryptSolution",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.isCryptSolution",
        "peekOfCode": "def isCryptSolution(crypt, solution):\n    dict = {}\n    for r in solution:\n        dict[r[0]] = r[1]\n    values = [0] * 3\n    for i in range(3):\n        val = decrypt(crypt[i], dict)\n        if val.startswith(\"0\") and len(val) > 1:\n            return False\n        values[i] = int(val)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.isCryptSolution",
        "documentation": {}
    },
    {
        "label": "isSubtree",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.isSubtree",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.isSubtree",
        "peekOfCode": "def isSubtree(t1, t2):\n    def isEqual(left, right):\n        if left == None and right == None:\n            return True\n        if right == None and left != None:\n            return False\n        if left == None and right != None:\n            return False\n        return (\n            left.value == right.value",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.isSubtree",
        "documentation": {}
    },
    {
        "label": "isEqual",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.isTreeSymmetric",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.isTreeSymmetric",
        "peekOfCode": "def isEqual(left, right):\n    if left == None and right == None:\n        return True\n    if right == None and left != None:\n        return False\n    if left == None and right != None:\n        return False\n    if left.value != right.value:\n        return False\n    return isEqual(left.right, right.left) and isEqual(left.left, right.right)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.isTreeSymmetric",
        "documentation": {}
    },
    {
        "label": "isTreeSymmetric",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.isTreeSymmetric",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.isTreeSymmetric",
        "peekOfCode": "def isTreeSymmetric(t):\n    if t == None:\n        return True\n    return isEqual(t.left, t.right)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.isTreeSymmetric",
        "documentation": {}
    },
    {
        "label": "isZigzag",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.isZigZag",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.isZigZag",
        "peekOfCode": "def isZigzag(numbers):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.isZigZag",
        "documentation": {}
    },
    {
        "label": "is_palindrome",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.is_palindrome",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.is_palindrome",
        "peekOfCode": "def is_palindrome(s):\n    if s[::-1] == s:\n        return True\n    return False",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.is_palindrome",
        "documentation": {}
    },
    {
        "label": "csnakeltjazzy",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.jazzy",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.jazzy",
        "peekOfCode": "def csnakeltjazzy(chords):\nnewchords - []\nfor chord in chords: [\nif chord.isdigit(): ‘\nj newchords.appendEchordfl\nelif len(chords) -- 9:\nreturn []\nelse:\naddSeven - chord\naddSeven - addSeven[e:] + \"7\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.jazzy",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.kthmost",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.kthmost",
        "peekOfCode": "class Solution(object):\n    def topKFrequent(self, nums, k):\n        number_frequency = {}\n        frequency_list = {}\n        for i in nums:\n            if i not in number_frequency:\n                number_frequency[i] = 1\n            else:\n                number_frequency[i] += 1\n        for key, value in number_frequency.items():",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.kthmost",
        "documentation": {}
    },
    {
        "label": "ob1",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.kthmost",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.kthmost",
        "peekOfCode": "ob1 = Solution()\nprint(ob1.topKFrequent([1, 1, 1, 1, 2, 2, 3, 3, 3], 2))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.kthmost",
        "documentation": {}
    },
    {
        "label": "kthSmallestInBST",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.kthSmallestInBST",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.kthSmallestInBST",
        "peekOfCode": "def kthSmallestInBST(t, k):\n    def inorder(r):\n        return inorder(r.left) + [r.value] + inorder(r.right) if r else []\n    return inorder(t)[k - 1]",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.kthSmallestInBST",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.linked-list",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.linked-list",
        "peekOfCode": "class Node:\n    # Constructor to initialize the node object\n    def __init__(self, data):\n        self.data = data\n        self.next = None\nclass LinkedList:\n    # Function to initialize head\n    def __init__(self):\n        self.head = None\n    # Function to reverse the linked list",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.linked-list",
        "documentation": {}
    },
    {
        "label": "LinkedList",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.linked-list",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.linked-list",
        "peekOfCode": "class LinkedList:\n    # Function to initialize head\n    def __init__(self):\n        self.head = None\n    # Function to reverse the linked list\n    def reverse(self):\n        prev = None\n        current = self.head\n        while current is not None:\n            next = current.next",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.linked-list",
        "documentation": {}
    },
    {
        "label": "llist",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.linked-list",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.linked-list",
        "peekOfCode": "llist = LinkedList()\nllist.push(20)\nllist.push(4)\nllist.push(15)\nllist.push(85)\nprint(\"Given Linked List\")\nllist.printList()\nllist.reverse()\nprint(\"\\nReversed Linked List\")\nllist.printList()",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.linked-list",
        "documentation": {}
    },
    {
        "label": "LinkedListNode",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.linked_lists",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.linked_lists",
        "peekOfCode": "class LinkedListNode:\n  \"\"\"\n    Simple Singly Linked List Node Class\n    value -> int\n    next -> LinkedListNode\n  \"\"\"\n  def __init__(self, value):\n    self.value = value\n    self.next = None\n  def add_node(self, value):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.linked_lists",
        "documentation": {}
    },
    {
        "label": "LinkedListNode",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.linked_lists",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.linked_lists",
        "peekOfCode": "class LinkedListNode:\n  \"\"\"\n    Simple Doubly Linked List Node Class\n    value -> int\n    next -> LinkedListNode\n    prev -> LinkedListNode\n  \"\"\"\n  def __init__(self, value):\n    self.value = value\n    self.next = None",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.linked_lists",
        "documentation": {}
    },
    {
        "label": "LinkedListNode",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.linked_lists",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.linked_lists",
        "peekOfCode": "class LinkedListNode():\n    def __init__(self, value):\n        self.value = value\n        self.next  = None\ndef reverse(head_of_list):\n  current = head_of_list\n  prev = None\n  next = None\n  while current:\n    next = current.next",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.linked_lists",
        "documentation": {}
    },
    {
        "label": "HashTableEntry",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.linked_lists",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.linked_lists",
        "peekOfCode": "class HashTableEntry:\n    \"\"\"\n    Linked List hash table key/value pair\n    \"\"\"\n    def __init__(self, key, value):\n        self.key = key\n        self.value = value\n        self.next = None\n# Hash table can't have fewer than this many slots\nMIN_CAPACITY = 8",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.linked_lists",
        "documentation": {}
    },
    {
        "label": "HashTable",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.linked_lists",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.linked_lists",
        "peekOfCode": "class HashTable:\n    \"\"\"\n    A hash table that with `capacity` buckets\n    that accepts string keys\n    Implement this.\n    \"\"\"\n    def __init__(self, capacity):\n                self.capacity = capacity  # Number of buckets in the hash table\n        self.storage = [None] * capacity\n        self.item_count = 0",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.linked_lists",
        "documentation": {}
    },
    {
        "label": "print_ll",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.linked_lists",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.linked_lists",
        "peekOfCode": "def print_ll(linked_list_node):\n  current = linked_list_node\n  while current is not None:\n    print(current.value)\n    current = current.next\ndef add_to_ll_storage(linked_list_node):\n  current = linked_list_node\n  while current is not None:\n    ll_storage.append(current)\n    current = current.next",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.linked_lists",
        "documentation": {}
    },
    {
        "label": "add_to_ll_storage",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.linked_lists",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.linked_lists",
        "peekOfCode": "def add_to_ll_storage(linked_list_node):\n  current = linked_list_node\n  while current is not None:\n    ll_storage.append(current)\n    current = current.next\nL1.add_node(12)\nprint_ll(L1)\nL1.add_node(24)\nprint()\nprint_ll(L1)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.linked_lists",
        "documentation": {}
    },
    {
        "label": "reverse",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.linked_lists",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.linked_lists",
        "peekOfCode": "def reverse(head_of_list):\n  current = head_of_list\n  prev = None\n  next = None\n  while current:\n    next = current.next\n    current.next = prev\n    prev = current\n    current = next\n  return prev",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.linked_lists",
        "documentation": {}
    },
    {
        "label": "L1",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.linked_lists",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.linked_lists",
        "peekOfCode": "L1 = Node(34)\nL1.next = Node(45)\nL1.next.next = Node(90)\n# while the current node is not none\n  # do something with the data\n  # traverse to next node\nL1 = [34]-> [45]-> [90] -> None\nNode(45)\nNode(90)\n```",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.linked_lists",
        "documentation": {}
    },
    {
        "label": "L1.next",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.linked_lists",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.linked_lists",
        "peekOfCode": "L1.next = Node(45)\nL1.next.next = Node(90)\n# while the current node is not none\n  # do something with the data\n  # traverse to next node\nL1 = [34]-> [45]-> [90] -> None\nNode(45)\nNode(90)\n```\n\"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.linked_lists",
        "documentation": {}
    },
    {
        "label": "L1.next.next",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.linked_lists",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.linked_lists",
        "peekOfCode": "L1.next.next = Node(90)\n# while the current node is not none\n  # do something with the data\n  # traverse to next node\nL1 = [34]-> [45]-> [90] -> None\nNode(45)\nNode(90)\n```\n\"\"\"\nclass LinkedListNode:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.linked_lists",
        "documentation": {}
    },
    {
        "label": "L1",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.linked_lists",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.linked_lists",
        "peekOfCode": "L1 = [34]-> [45]-> [90] -> None\nNode(45)\nNode(90)\n```\n\"\"\"\nclass LinkedListNode:\n  \"\"\"\n    Simple Singly Linked List Node Class\n    value -> int\n    next -> LinkedListNode",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.linked_lists",
        "documentation": {}
    },
    {
        "label": "ll_storage",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.linked_lists",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.linked_lists",
        "peekOfCode": "ll_storage = []\nL1 = LinkedListNode(34)\nL1.next = LinkedListNode(45)\nL1.next.next = LinkedListNode(90)\ndef print_ll(linked_list_node):\n  current = linked_list_node\n  while current is not None:\n    print(current.value)\n    current = current.next\ndef add_to_ll_storage(linked_list_node):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.linked_lists",
        "documentation": {}
    },
    {
        "label": "L1",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.linked_lists",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.linked_lists",
        "peekOfCode": "L1 = LinkedListNode(34)\nL1.next = LinkedListNode(45)\nL1.next.next = LinkedListNode(90)\ndef print_ll(linked_list_node):\n  current = linked_list_node\n  while current is not None:\n    print(current.value)\n    current = current.next\ndef add_to_ll_storage(linked_list_node):\n  current = linked_list_node",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.linked_lists",
        "documentation": {}
    },
    {
        "label": "L1.next",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.linked_lists",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.linked_lists",
        "peekOfCode": "L1.next = LinkedListNode(45)\nL1.next.next = LinkedListNode(90)\ndef print_ll(linked_list_node):\n  current = linked_list_node\n  while current is not None:\n    print(current.value)\n    current = current.next\ndef add_to_ll_storage(linked_list_node):\n  current = linked_list_node\n  while current is not None:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.linked_lists",
        "documentation": {}
    },
    {
        "label": "L1.next.next",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.linked_lists",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.linked_lists",
        "peekOfCode": "L1.next.next = LinkedListNode(90)\ndef print_ll(linked_list_node):\n  current = linked_list_node\n  while current is not None:\n    print(current.value)\n    current = current.next\ndef add_to_ll_storage(linked_list_node):\n  current = linked_list_node\n  while current is not None:\n    ll_storage.append(current)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.linked_lists",
        "documentation": {}
    },
    {
        "label": "MIN_CAPACITY",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.linked_lists",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.linked_lists",
        "peekOfCode": "MIN_CAPACITY = 8\n[\n 0[\"Lou\", 41] -> [\"Bob\", 41] -> None,\n 1[\"Steve\", 41] -> None,\n 2[\"Jen\", 41] -> None,\n 3[\"Dave\", 41] -> None,\n 4None,\n 5[\"Hector\", 34]-> None,\n 6[\"Lisa\", 41] -> None,\n 7None,",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.linked_lists",
        "documentation": {}
    },
    {
        "label": "csMakeItJazzy",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.makeItJazzy",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.makeItJazzy",
        "peekOfCode": "def csMakeItJazzy(chords):\n    for index in range(len(chords)):\n        if chords[index].__contains__(\"7\"):\n            continue\n        elif chords == []:\n            return []\n        else:\n            chords[index] = chords[index] + \"7\"\n    return chords",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.makeItJazzy",
        "documentation": {}
    },
    {
        "label": "csMaxNumberOfLambdas",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.maxNumberOfLambdas",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.maxNumberOfLambdas",
        "peekOfCode": "def csMaxNumberOfLambdas(text):\n    sub_string = \"lambda\"\n    lambda_count = {\"l\": 0, \"a\": 0, \"m\": 0, \"b\": 0, \"d\": 0, \"a\": 0}\n    counts = []\n    for letter in text:\n        if letter in lambda_count:\n            lambda_count[letter] += 1\n    for key, value in lambda_count.items():\n        counts.append(value)\n    return min(counts)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.maxNumberOfLambdas",
        "documentation": {}
    },
    {
        "label": "add",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def add(param1, param2):\n    return param1 + param2\ndef centuryFromYear(year):\n    return ((year - 1) // 100) + 1\ndef checkPalindrome(inputString):\n    return inputString == inputString[::-1]\ndef adjacentElementsProduct(inputArray):\n    max = inputArray[0] * inputArray[1]\n    for i in range(len(inputArray) - 1):\n        if inputArray[i] * inputArray[i + 1] > max:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "centuryFromYear",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def centuryFromYear(year):\n    return ((year - 1) // 100) + 1\ndef checkPalindrome(inputString):\n    return inputString == inputString[::-1]\ndef adjacentElementsProduct(inputArray):\n    max = inputArray[0] * inputArray[1]\n    for i in range(len(inputArray) - 1):\n        if inputArray[i] * inputArray[i + 1] > max:\n            max = inputArray[i] * inputArray[i + 1]\n    return max",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "checkPalindrome",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def checkPalindrome(inputString):\n    return inputString == inputString[::-1]\ndef adjacentElementsProduct(inputArray):\n    max = inputArray[0] * inputArray[1]\n    for i in range(len(inputArray) - 1):\n        if inputArray[i] * inputArray[i + 1] > max:\n            max = inputArray[i] * inputArray[i + 1]\n    return max\ndef shapeArea(n):\n    sum = n * 2 - 1",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "adjacentElementsProduct",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def adjacentElementsProduct(inputArray):\n    max = inputArray[0] * inputArray[1]\n    for i in range(len(inputArray) - 1):\n        if inputArray[i] * inputArray[i + 1] > max:\n            max = inputArray[i] * inputArray[i + 1]\n    return max\ndef shapeArea(n):\n    sum = n * 2 - 1\n    for i in range(1, (n * 2) - 1, 2):\n        sum += i * 2",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "shapeArea",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def shapeArea(n):\n    sum = n * 2 - 1\n    for i in range(1, (n * 2) - 1, 2):\n        sum += i * 2\n    return sum\ndef makeArrayConsecutive2(statues):\n    return max(statues) - min(statues) - len(statues) + 1\ndef almostIncreasingSequence(sequence):\n    i = 0\n    while i < len(sequence) - 1:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "makeArrayConsecutive2",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def makeArrayConsecutive2(statues):\n    return max(statues) - min(statues) - len(statues) + 1\ndef almostIncreasingSequence(sequence):\n    i = 0\n    while i < len(sequence) - 1:\n        if not sequence[i] < sequence[i + 1]:\n            if increasingSequence(\n                sequence[:i] + sequence[i + 1 :]\n            ) or increasingSequence(sequence[: i + 1] + sequence[i + 2 :]):\n                return True",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "almostIncreasingSequence",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def almostIncreasingSequence(sequence):\n    i = 0\n    while i < len(sequence) - 1:\n        if not sequence[i] < sequence[i + 1]:\n            if increasingSequence(\n                sequence[:i] + sequence[i + 1 :]\n            ) or increasingSequence(sequence[: i + 1] + sequence[i + 2 :]):\n                return True\n            else:\n                return False",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "increasingSequence",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def increasingSequence(sequence):\n    for i in range(len(sequence) - 1):\n        if not sequence[i] < sequence[i + 1]:\n            return False\n    return True\ndef matrixElementsSum(matrix):\n    if len(matrix) > 1:\n        for row in range(1, len(matrix)):\n            for room in range(len(matrix[row])):\n                if matrix[row - 1][room] == 0:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "matrixElementsSum",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def matrixElementsSum(matrix):\n    if len(matrix) > 1:\n        for row in range(1, len(matrix)):\n            for room in range(len(matrix[row])):\n                if matrix[row - 1][room] == 0:\n                    matrix[row][room] = 0\n    sum = 0\n    for row in matrix:\n        for room in row:\n            sum += room",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "allLongestStrings",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def allLongestStrings(inputArray):\n    length = max([len(word) for word in inputArray])\n    result = [word for word in inputArray if len(word) == length]\n    return result\ndef commonCharacterCount(s1, s2):\n    count = 0\n    word2 = list(s2)\n    for letter in s1:\n        if letter in word2:\n            word2.remove(letter)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "commonCharacterCount",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def commonCharacterCount(s1, s2):\n    count = 0\n    word2 = list(s2)\n    for letter in s1:\n        if letter in word2:\n            word2.remove(letter)\n            count += 1\n    return count\ndef isLucky(n):\n    string = str(n)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "isLucky",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def isLucky(n):\n    string = str(n)\n    top = [int(x) for x in string[: len(string) // 2]]\n    bottom = [int(x) for x in string[len(string) // 2 :]]\n    return sum(top) == sum(bottom)\ndef sortByHeight(a):\n    treePositions = [x for x in range(len(a)) if a[x] == -1]\n    people = sorted([x for x in a if x != -1])\n    for tree in treePositions:\n        people.insert(tree, -1)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "sortByHeight",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def sortByHeight(a):\n    treePositions = [x for x in range(len(a)) if a[x] == -1]\n    people = sorted([x for x in a if x != -1])\n    for tree in treePositions:\n        people.insert(tree, -1)\n    return people\nimport re\ndef reverseParentheses(s):\n    while \"(\" in s:\n        match = re.search(\"\\([^()]*\\)\", s)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "reverseParentheses",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def reverseParentheses(s):\n    while \"(\" in s:\n        match = re.search(\"\\([^()]*\\)\", s)\n        match_string = match.group(0)[1 : len(match.group(0)) - 1]\n        reversed_match_string = match_string[::-1]\n        s = s[: match.start()] + reversed_match_string + s[match.end() :]\n    return s\ndef alternatingSums(a):\n    team1 = sum(a[0::2])\n    team2 = sum(a[1::2])",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "alternatingSums",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def alternatingSums(a):\n    team1 = sum(a[0::2])\n    team2 = sum(a[1::2])\n    return [team1, team2]\ndef addBorder(picture):\n    picture = [\"*\" + string + \"*\" for string in picture]\n    picture = [(\"*\" * len(picture[0]))] + picture + [(\"*\" * len(picture[0]))]\n    return picture\ndef areSimilar(a, b):\n    diff = [i for i in range(len(a)) if a[i] != b[i]]",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "addBorder",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def addBorder(picture):\n    picture = [\"*\" + string + \"*\" for string in picture]\n    picture = [(\"*\" * len(picture[0]))] + picture + [(\"*\" * len(picture[0]))]\n    return picture\ndef areSimilar(a, b):\n    diff = [i for i in range(len(a)) if a[i] != b[i]]\n    if len(diff) == 2:\n        b[diff[0]], b[diff[1]] = b[diff[1]], b[diff[0]]\n    return a == b\ndef arrayChange(inputArray):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "areSimilar",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def areSimilar(a, b):\n    diff = [i for i in range(len(a)) if a[i] != b[i]]\n    if len(diff) == 2:\n        b[diff[0]], b[diff[1]] = b[diff[1]], b[diff[0]]\n    return a == b\ndef arrayChange(inputArray):\n    count = 0\n    for i in range(1, len(inputArray)):\n        if inputArray[i - 1] >= inputArray[i]:\n            difference = inputArray[i - 1] - inputArray[i]",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "arrayChange",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def arrayChange(inputArray):\n    count = 0\n    for i in range(1, len(inputArray)):\n        if inputArray[i - 1] >= inputArray[i]:\n            difference = inputArray[i - 1] - inputArray[i]\n            inputArray[i] += difference + 1\n            count += difference + 1\n    return count\ndef palindromeRearranging(inputString):\n    inputList = sorted(inputString)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "palindromeRearranging",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def palindromeRearranging(inputString):\n    inputList = sorted(inputString)\n    foundMiddle = False\n    while len(inputList) > 1:\n        if inputList[0] == inputList[1]:\n            del inputList[1]\n        elif not foundMiddle:\n            foundMiddle = True\n        else:\n            return False",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "areEquallyStrong",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def areEquallyStrong(yourLeft, yourRight, friendsLeft, friendsRight):\n    sameHands = yourLeft == friendsLeft and yourRight == friendsRight\n    differentHands = yourLeft == friendsRight and yourRight == friendsLeft\n    return sameHands or differentHands\ndef arrayMaximalAdjacentDifference(inputArray):\n    diffs = []\n    for i in range(len(inputArray) - 1):\n        diffs.append(abs(inputArray[i] - inputArray[i + 1]))\n    return max(diffs)\ndef isIPv4Address(inputString):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "arrayMaximalAdjacentDifference",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def arrayMaximalAdjacentDifference(inputArray):\n    diffs = []\n    for i in range(len(inputArray) - 1):\n        diffs.append(abs(inputArray[i] - inputArray[i + 1]))\n    return max(diffs)\ndef isIPv4Address(inputString):\n    strings = [string for string in inputString.split(\".\")]\n    for string in strings:\n        if not string.isdecimal():\n            return False",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "isIPv4Address",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def isIPv4Address(inputString):\n    strings = [string for string in inputString.split(\".\")]\n    for string in strings:\n        if not string.isdecimal():\n            return False\n    nums = [int(num) for num in strings]\n    return max(nums) <= 255 and min(nums) >= 0 and len(nums) == 4\ndef avoidObstacles(inputArray):\n    for length in range(2, max(inputArray) + 2):\n        done = True",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "avoidObstacles",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def avoidObstacles(inputArray):\n    for length in range(2, max(inputArray) + 2):\n        done = True\n        jump = length\n        while jump < (max(inputArray) + length):\n            if jump in inputArray:\n                done = False\n                break\n            jump += length\n        if done:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "boxBlur",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def boxBlur(image):\n    outImage = []\n    for row in range(1, len(image) - 1):\n        line = []\n        for pixel in range(1, len(image[row]) - 1):\n            total = (\n                image[row - 1][pixel - 1]\n                + image[row - 1][pixel]\n                + image[row - 1][pixel + 1]\n                + image[row][pixel - 1]",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "minesweeper",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def minesweeper(matrix):\n    TOP = 0\n    BOTTOM = len(matrix) - 1\n    LEFT = 0\n    RIGHT = len(matrix[0]) - 1\n    outMatrix = []\n    for row in range(len(matrix)):\n        outRow = []\n        for cell in range(len(matrix[row])):\n            outRow.append(0)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "arrayReplace",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def arrayReplace(inputArray, elemToReplace, substitutionElem):\n    return [x if x != elemToReplace else substitutionElem for x in inputArray]\ndef evenDigitsOnly(n):\n    return all(\n        (True if digit in (\"0\", \"2\", \"4\", \"6\", \"8\") else False for digit in str(n))\n    )\ndef variableName(name):\n    return name.replace(\"_\", \"\").isalnum() and not name[0].isdigit()\ndef alphabeticShift(inputString):\n    return \"\".join([chr(ord(x) + 1) if x != \"z\" else \"a\" for x in inputString])",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "evenDigitsOnly",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def evenDigitsOnly(n):\n    return all(\n        (True if digit in (\"0\", \"2\", \"4\", \"6\", \"8\") else False for digit in str(n))\n    )\ndef variableName(name):\n    return name.replace(\"_\", \"\").isalnum() and not name[0].isdigit()\ndef alphabeticShift(inputString):\n    return \"\".join([chr(ord(x) + 1) if x != \"z\" else \"a\" for x in inputString])\ndef chessBoardCellColor(cell1, cell2):\n    color1 = ((ord(cell1[0]) - ord(\"A\")) + ord(cell1[1]) - ord(\"1\")) % 2 == 0",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "variableName",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def variableName(name):\n    return name.replace(\"_\", \"\").isalnum() and not name[0].isdigit()\ndef alphabeticShift(inputString):\n    return \"\".join([chr(ord(x) + 1) if x != \"z\" else \"a\" for x in inputString])\ndef chessBoardCellColor(cell1, cell2):\n    color1 = ((ord(cell1[0]) - ord(\"A\")) + ord(cell1[1]) - ord(\"1\")) % 2 == 0\n    color2 = ((ord(cell2[0]) - ord(\"A\")) + ord(cell2[1]) - ord(\"1\")) % 2 == 0\n    return color1 == color2\ndef circleOfNumbers(n, firstNumber):\n    return (firstNumber + (n / 2)) % n",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "alphabeticShift",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def alphabeticShift(inputString):\n    return \"\".join([chr(ord(x) + 1) if x != \"z\" else \"a\" for x in inputString])\ndef chessBoardCellColor(cell1, cell2):\n    color1 = ((ord(cell1[0]) - ord(\"A\")) + ord(cell1[1]) - ord(\"1\")) % 2 == 0\n    color2 = ((ord(cell2[0]) - ord(\"A\")) + ord(cell2[1]) - ord(\"1\")) % 2 == 0\n    return color1 == color2\ndef circleOfNumbers(n, firstNumber):\n    return (firstNumber + (n / 2)) % n\ndef depositProfit(deposit, rate, threshold):\n    year = 0",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "chessBoardCellColor",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def chessBoardCellColor(cell1, cell2):\n    color1 = ((ord(cell1[0]) - ord(\"A\")) + ord(cell1[1]) - ord(\"1\")) % 2 == 0\n    color2 = ((ord(cell2[0]) - ord(\"A\")) + ord(cell2[1]) - ord(\"1\")) % 2 == 0\n    return color1 == color2\ndef circleOfNumbers(n, firstNumber):\n    return (firstNumber + (n / 2)) % n\ndef depositProfit(deposit, rate, threshold):\n    year = 0\n    while deposit < threshold:\n        deposit *= 1 + (rate / 100)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "circleOfNumbers",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def circleOfNumbers(n, firstNumber):\n    return (firstNumber + (n / 2)) % n\ndef depositProfit(deposit, rate, threshold):\n    year = 0\n    while deposit < threshold:\n        deposit *= 1 + (rate / 100)\n        year += 1\n    return year\ndef absoluteValuesSumMinimization(a):\n    sums = {}",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "depositProfit",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def depositProfit(deposit, rate, threshold):\n    year = 0\n    while deposit < threshold:\n        deposit *= 1 + (rate / 100)\n        year += 1\n    return year\ndef absoluteValuesSumMinimization(a):\n    sums = {}\n    for num in a:\n        total = sum([abs(a[i] - num) for i in range(len(a))])",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "absoluteValuesSumMinimization",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def absoluteValuesSumMinimization(a):\n    sums = {}\n    for num in a:\n        total = sum([abs(a[i] - num) for i in range(len(a))])\n        if total in sums:\n            sums[total] = min(num, sums[total])\n        else:\n            sums[total] = num\n        print(sums)\n    return sums[min(sums)]",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "stringsRearrangement",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def stringsRearrangement(inputArray):\n    permutations = itertools.permutations(inputArray)\n    for array in permutations:\n        if testArrangement(array):\n            return True\n    return False\ndef testArrangement(array):\n    for i in range(len(array) - 1):\n        if sum([a != b for a, b in zip(array[i], array[i + 1])]) != 1:\n            return False",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "testArrangement",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def testArrangement(array):\n    for i in range(len(array) - 1):\n        if sum([a != b for a, b in zip(array[i], array[i + 1])]) != 1:\n            return False\n    return True\ndef extractEachKth(inputArray, k):\n    return [inputArray[x] for x in range(len(inputArray)) if (x + 1) % k != 0]\ndef firstDigit(inputString):\n    for char in inputString:\n        if char.isdigit():",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "extractEachKth",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def extractEachKth(inputArray, k):\n    return [inputArray[x] for x in range(len(inputArray)) if (x + 1) % k != 0]\ndef firstDigit(inputString):\n    for char in inputString:\n        if char.isdigit():\n            return char\ndef differentSymbolsNaive(s):\n    return len(set(s))\ndef arrayMaxConsecutiveSum(inputArray, k):\n    sums = [sum(inputArray[:k])]",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "firstDigit",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def firstDigit(inputString):\n    for char in inputString:\n        if char.isdigit():\n            return char\ndef differentSymbolsNaive(s):\n    return len(set(s))\ndef arrayMaxConsecutiveSum(inputArray, k):\n    sums = [sum(inputArray[:k])]\n    for i in range(1, len(inputArray) - k + 1):\n        sums.append(sums[i - 1] - inputArray[i - 1] + inputArray[i + k - 1])",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "differentSymbolsNaive",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def differentSymbolsNaive(s):\n    return len(set(s))\ndef arrayMaxConsecutiveSum(inputArray, k):\n    sums = [sum(inputArray[:k])]\n    for i in range(1, len(inputArray) - k + 1):\n        sums.append(sums[i - 1] - inputArray[i - 1] + inputArray[i + k - 1])\n    return max(sums)\ndef growingPlant(upSpeed, downSpeed, desiredHeight):\n    height = 0\n    days = 1",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "arrayMaxConsecutiveSum",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def arrayMaxConsecutiveSum(inputArray, k):\n    sums = [sum(inputArray[:k])]\n    for i in range(1, len(inputArray) - k + 1):\n        sums.append(sums[i - 1] - inputArray[i - 1] + inputArray[i + k - 1])\n    return max(sums)\ndef growingPlant(upSpeed, downSpeed, desiredHeight):\n    height = 0\n    days = 1\n    height += upSpeed\n    while height < desiredHeight:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "growingPlant",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def growingPlant(upSpeed, downSpeed, desiredHeight):\n    height = 0\n    days = 1\n    height += upSpeed\n    while height < desiredHeight:\n        days += 1\n        height -= downSpeed\n        height += upSpeed\n    return days\ndef knapsackLight(value1, weight1, value2, weight2, maxW):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "knapsackLight",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def knapsackLight(value1, weight1, value2, weight2, maxW):\n    if weight1 + weight2 <= maxW:\n        return value1 + value2\n    if weight1 <= maxW and (weight2 > maxW or value1 >= value2):\n        return value1\n    if weight2 <= maxW and (weight1 > maxW or value2 >= value1):\n        return value2\n    return 0\ndef longestDigitsPrefix(inputString):\n    for char in range(len(inputString)):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "longestDigitsPrefix",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def longestDigitsPrefix(inputString):\n    for char in range(len(inputString)):\n        if not inputString[char].isdigit():\n            return inputString[:char]\n    return inputString\ndef digitDegree(n):\n    degree = 0\n    while len(str(n)) > 1:\n        n = sum((int(digit) for digit in str(n)))\n        degree += 1",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "digitDegree",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def digitDegree(n):\n    degree = 0\n    while len(str(n)) > 1:\n        n = sum((int(digit) for digit in str(n)))\n        degree += 1\n    return degree\ndef bishopAndPawn(bishop, pawn):\n    return abs(ord(bishop[0]) - ord(pawn[0])) == abs(ord(bishop[1]) - ord(pawn[1]))\ndef isBeautifulString(inputString):\n    for letter in range(ord(\"a\"), ord(\"z\")):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "bishopAndPawn",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def bishopAndPawn(bishop, pawn):\n    return abs(ord(bishop[0]) - ord(pawn[0])) == abs(ord(bishop[1]) - ord(pawn[1]))\ndef isBeautifulString(inputString):\n    for letter in range(ord(\"a\"), ord(\"z\")):\n        if inputString.count(chr(letter)) < inputString.count(chr(letter + 1)):\n            return False\n    return True\ndef findEmailDomain(address):\n    return address[address.rfind(\"@\") + 1 :]\ndef buildPalindrome(st):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "isBeautifulString",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def isBeautifulString(inputString):\n    for letter in range(ord(\"a\"), ord(\"z\")):\n        if inputString.count(chr(letter)) < inputString.count(chr(letter + 1)):\n            return False\n    return True\ndef findEmailDomain(address):\n    return address[address.rfind(\"@\") + 1 :]\ndef buildPalindrome(st):\n    if st == st[::-1]:  # Check for initial palindrome\n        return st",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "findEmailDomain",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def findEmailDomain(address):\n    return address[address.rfind(\"@\") + 1 :]\ndef buildPalindrome(st):\n    if st == st[::-1]:  # Check for initial palindrome\n        return st\n    index = 0\n    subStr = st[index:]\n    while subStr != subStr[::-1]:  # while substring is not a palindrome\n        index += 1\n        subStr = st[index:]",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "buildPalindrome",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def buildPalindrome(st):\n    if st == st[::-1]:  # Check for initial palindrome\n        return st\n    index = 0\n    subStr = st[index:]\n    while subStr != subStr[::-1]:  # while substring is not a palindrome\n        index += 1\n        subStr = st[index:]\n    return st + st[index - 1 :: -1]\ndef electionsWinners(votes, k):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "electionsWinners",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def electionsWinners(votes, k):\n    winners = 0\n    current_winner = max(votes)\n    for candidate in votes:\n        if k > 0 and candidate + k > current_winner:\n            winners += 1\n        if k == 0 and candidate == current_winner and votes.count(candidate) == 1:\n            winners += 1\n    return winners\ndef isMAC48Address(inputString):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "isMAC48Address",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def isMAC48Address(inputString):\n    hex_chars = (\n        \"1\",\n        \"2\",\n        \"3\",\n        \"4\",\n        \"5\",\n        \"6\",\n        \"7\",\n        \"8\",",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "isDigit",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def isDigit(symbol):\n    return symbol.isdigit()\ndef lineEncoding(s):\n    count = 1\n    output = []\n    for char in range(1, len(s)):\n        if s[char] == s[char - 1]:\n            count += 1\n        else:\n            if count > 1:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "lineEncoding",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def lineEncoding(s):\n    count = 1\n    output = []\n    for char in range(1, len(s)):\n        if s[char] == s[char - 1]:\n            count += 1\n        else:\n            if count > 1:\n                output.append(str(count) + s[char - 1])\n            else:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "chessKnight",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def chessKnight(cell):\n    moves = 0\n    # Starting at the top left, going counter-clockwise\n    if ord(cell[0]) >= ord(\"b\") and ord(cell[1]) <= ord(\"6\"):\n        moves += 1\n    if ord(cell[0]) >= ord(\"c\") and ord(cell[1]) <= ord(\"7\"):\n        moves += 1\n    if ord(cell[0]) >= ord(\"c\") and ord(cell[1]) >= ord(\"2\"):\n        moves += 1\n    if ord(cell[0]) >= ord(\"b\") and ord(cell[1]) >= ord(\"3\"):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "deleteDigit",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def deleteDigit(n):\n    num = str(n)\n    highest = 0\n    for digit in range(len(num)):\n        output = num[:digit] + num[digit + 1 :]\n        if int(output) > int(highest):\n            highest = output\n    return int(highest)\ndef longestWord(text):\n    longest = []",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "longestWord",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def longestWord(text):\n    longest = []\n    word = []\n    for char in text:\n        if ord(\"A\") <= ord(char) <= ord(\"Z\") or ord(\"a\") <= ord(char) <= ord(\"z\"):\n            word.append(char)\n        else:\n            if len(word) > len(longest):\n                longest = word\n            word = []",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "validTime",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def validTime(time):\n    groups = time.split(\":\")\n    if len(groups) != 2:\n        return False\n    if not (groups[0].isdigit() and groups[1].isdigit()):\n        return False\n    if int(groups[0]) > 23 or int(groups[1]) > 59:\n        return False\n    return True\ndef sumUpNumbers(inputString):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "sumUpNumbers",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def sumUpNumbers(inputString):\n    total = 0\n    current_num = []\n    for char in inputString:\n        if char.isdigit():\n            current_num.append(char)\n        else:\n            if len(current_num) > 0:\n                num = int(\"\".join(current_num))\n                total += num",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "differentSquares",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def differentSquares(matrix):\n    squares = set()\n    for row in range(len(matrix) - 1):\n        for cell in range(len(matrix[row]) - 1):\n            square = (\n                (matrix[row][cell], matrix[row][cell + 1]),\n                (matrix[row + 1][cell], matrix[row + 1][cell + 1]),\n            )\n            squares.add(square)\n    return len(squares)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "digitsProduct",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def digitsProduct(product):\n    # New idea: add product to factors\n    # while max(factors) > 10: split that num into factors\n    if product == 0:\n        return 10\n    factors = [product]\n    while max(factors) > 9:\n        factored = findFactors(max(factors))\n        if factored:\n            factors.remove(max(factors))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "findFactors",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def findFactors(n):\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return i, n // i\n    return False\ndef fileNaming(names):\n    outnames = []\n    for name in names:\n        if name in outnames:\n            k = 1",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "fileNaming",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def fileNaming(names):\n    outnames = []\n    for name in names:\n        if name in outnames:\n            k = 1\n            while \"{}({})\".format(name, k) in outnames:\n                k += 1\n            name = \"{}({})\".format(name, k)\n        outnames.append(name)\n    return outnames",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "messageFromBinaryCode",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def messageFromBinaryCode(code):\n    output = []\n    for i in range(0, len(code), 8):\n        letter = chr(int(code[i : i + 8], 2))\n        output.append(letter)\n    return \"\".join(output)\ndef spiralNumbers(n):\n    LEFT = \"left\"\n    RIGHT = \"right\"\n    UP = \"up\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "spiralNumbers",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def spiralNumbers(n):\n    LEFT = \"left\"\n    RIGHT = \"right\"\n    UP = \"up\"\n    DOWN = \"down\"\n    direction = RIGHT\n    spiral = [[0 for i in range(n)] for j in range(n)]\n    row = 0\n    cell = 0\n    for num in range(1, (n * n) + 1):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "sudoku",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def sudoku(grid):\n    match = [i for i in range(1, 10)]\n    for row in grid:\n        if sorted(row) != match:\n            return False\n    for column_index in range(9):\n        column = [grid[row_index][column_index] for row_index in range(9)]\n        if sorted(column) != match:\n            return False\n    for row in range(0, 9, 3):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "addTwoDigits",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def addTwoDigits(n):\n    return (n // 10) + (n % 10)\ndef largestNumber(n):\n    return int(\"9\" * n)\ndef candies(n, m):\n    return (m // n) * n\ndef seatsInTheater(nCols, nRows, col, row):\n    return (nCols - col + 1) * (nRows - row)\ndef maxMultiple(divisor, bound):\n    for num in range(bound, 1, -1):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "largestNumber",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def largestNumber(n):\n    return int(\"9\" * n)\ndef candies(n, m):\n    return (m // n) * n\ndef seatsInTheater(nCols, nRows, col, row):\n    return (nCols - col + 1) * (nRows - row)\ndef maxMultiple(divisor, bound):\n    for num in range(bound, 1, -1):\n        if num % divisor == 0:\n            return num",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "candies",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def candies(n, m):\n    return (m // n) * n\ndef seatsInTheater(nCols, nRows, col, row):\n    return (nCols - col + 1) * (nRows - row)\ndef maxMultiple(divisor, bound):\n    for num in range(bound, 1, -1):\n        if num % divisor == 0:\n            return num\n    return 0\ndef circleOfNumbers(n, firstNumber):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "seatsInTheater",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def seatsInTheater(nCols, nRows, col, row):\n    return (nCols - col + 1) * (nRows - row)\ndef maxMultiple(divisor, bound):\n    for num in range(bound, 1, -1):\n        if num % divisor == 0:\n            return num\n    return 0\ndef circleOfNumbers(n, firstNumber):\n    return (firstNumber + (n // 2)) % n\ndef lateRide(n):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "maxMultiple",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def maxMultiple(divisor, bound):\n    for num in range(bound, 1, -1):\n        if num % divisor == 0:\n            return num\n    return 0\ndef circleOfNumbers(n, firstNumber):\n    return (firstNumber + (n // 2)) % n\ndef lateRide(n):\n    hours = n // 60\n    minutes = n % 60",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "circleOfNumbers",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def circleOfNumbers(n, firstNumber):\n    return (firstNumber + (n // 2)) % n\ndef lateRide(n):\n    hours = n // 60\n    minutes = n % 60\n    return (hours // 10) + (hours % 10) + (minutes // 10) + (minutes % 10)\ndef phoneCall(min1, min2_10, min11, s):\n    if s < min1:\n        return 0\n    if s == min1:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "lateRide",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def lateRide(n):\n    hours = n // 60\n    minutes = n % 60\n    return (hours // 10) + (hours % 10) + (minutes // 10) + (minutes % 10)\ndef phoneCall(min1, min2_10, min11, s):\n    if s < min1:\n        return 0\n    if s == min1:\n        return 1\n    if s <= min1 + (min2_10 * 9):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "phoneCall",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def phoneCall(min1, min2_10, min11, s):\n    if s < min1:\n        return 0\n    if s == min1:\n        return 1\n    if s <= min1 + (min2_10 * 9):\n        s -= min1\n        return (s // min2_10) + 1\n    s -= min1\n    s -= min2_10 * 9",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "reachNextLevel",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def reachNextLevel(experience, threshold, reward):\n    return experience + reward >= threshold\ndef knapsackLight(value1, weight1, value2, weight2, maxW):\n    if weight1 + weight2 <= maxW:\n        return value1 + value2\n    if weight1 <= maxW and weight2 <= maxW:\n        return max(value1, value2)\n    if weight1 <= maxW:\n        return value1\n    if weight2 <= maxW:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "knapsackLight",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def knapsackLight(value1, weight1, value2, weight2, maxW):\n    if weight1 + weight2 <= maxW:\n        return value1 + value2\n    if weight1 <= maxW and weight2 <= maxW:\n        return max(value1, value2)\n    if weight1 <= maxW:\n        return value1\n    if weight2 <= maxW:\n        return value2\n    return 0",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "extraNumber",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def extraNumber(a, b, c):\n    if a == b:\n        return c\n    if a == c:\n        return b\n    return a\ndef isInfiniteProcess(a, b):\n    return a > b or (a % 2 != b % 2)\ndef arithmeticExpression(a, b, c):\n    return a + b == c or a - b == c or a * b == c or a / b == c",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "isInfiniteProcess",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def isInfiniteProcess(a, b):\n    return a > b or (a % 2 != b % 2)\ndef arithmeticExpression(a, b, c):\n    return a + b == c or a - b == c or a * b == c or a / b == c\ndef tennisSet(score1, score2):\n    if max(score1, score2) == 6 and min(score1, score2) < 5:\n        return True\n    if 5 <= min(score1, score2) <= 6 and max(score1, score2) == 7:\n        return True\n    return False",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "arithmeticExpression",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def arithmeticExpression(a, b, c):\n    return a + b == c or a - b == c or a * b == c or a / b == c\ndef tennisSet(score1, score2):\n    if max(score1, score2) == 6 and min(score1, score2) < 5:\n        return True\n    if 5 <= min(score1, score2) <= 6 and max(score1, score2) == 7:\n        return True\n    return False\ndef willYou(young, beautiful, loved):\n    return (young and beautiful) != loved",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "tennisSet",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def tennisSet(score1, score2):\n    if max(score1, score2) == 6 and min(score1, score2) < 5:\n        return True\n    if 5 <= min(score1, score2) <= 6 and max(score1, score2) == 7:\n        return True\n    return False\ndef willYou(young, beautiful, loved):\n    return (young and beautiful) != loved\ndef metroCard(lastNumberOfDays):\n    if lastNumberOfDays == 30 or lastNumberOfDays == 28:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "willYou",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def willYou(young, beautiful, loved):\n    return (young and beautiful) != loved\ndef metroCard(lastNumberOfDays):\n    if lastNumberOfDays == 30 or lastNumberOfDays == 28:\n        return [31]\n    return [28, 30, 31]\ndef killKthBit(n, k):\n    return n & ~(2 ** (k - 1))\ndef arrayPacking(a):\n    binary_array = [bin(num)[2:].rjust(8, \"0\") for num in a]",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "metroCard",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def metroCard(lastNumberOfDays):\n    if lastNumberOfDays == 30 or lastNumberOfDays == 28:\n        return [31]\n    return [28, 30, 31]\ndef killKthBit(n, k):\n    return n & ~(2 ** (k - 1))\ndef arrayPacking(a):\n    binary_array = [bin(num)[2:].rjust(8, \"0\") for num in a]\n    out_string = \"\".join(binary_array[::-1])\n    return int(out_string, 2)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "killKthBit",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def killKthBit(n, k):\n    return n & ~(2 ** (k - 1))\ndef arrayPacking(a):\n    binary_array = [bin(num)[2:].rjust(8, \"0\") for num in a]\n    out_string = \"\".join(binary_array[::-1])\n    return int(out_string, 2)\ndef rangeBitCount(a, b):\n    array = list(range(a, b + 1))\n    binary_array = [bin(num) for num in array]\n    count_array = [binary.count(\"1\") for binary in binary_array]",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "arrayPacking",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def arrayPacking(a):\n    binary_array = [bin(num)[2:].rjust(8, \"0\") for num in a]\n    out_string = \"\".join(binary_array[::-1])\n    return int(out_string, 2)\ndef rangeBitCount(a, b):\n    array = list(range(a, b + 1))\n    binary_array = [bin(num) for num in array]\n    count_array = [binary.count(\"1\") for binary in binary_array]\n    return sum(count_array)\ndef mirrorBits(a):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "rangeBitCount",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def rangeBitCount(a, b):\n    array = list(range(a, b + 1))\n    binary_array = [bin(num) for num in array]\n    count_array = [binary.count(\"1\") for binary in binary_array]\n    return sum(count_array)\ndef mirrorBits(a):\n    binary = bin(a)[2:]\n    return int(binary[::-1], 2)\ndef secondRightmostZeroBit(n):\n    return 2 ** bin(n)[::-1].find(\"0\", bin(n)[::-1].find(\"0\") + 1)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "mirrorBits",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def mirrorBits(a):\n    binary = bin(a)[2:]\n    return int(binary[::-1], 2)\ndef secondRightmostZeroBit(n):\n    return 2 ** bin(n)[::-1].find(\"0\", bin(n)[::-1].find(\"0\") + 1)\ndef swapAdjacentBits(n):\n    return ((n >> 1) & 1431655765) | ((n << 1) & 2863311530)\ndef differentRightmostBit(n, m):\n    return 2 ** bin((n ^ m))[::-1].find(\"1\")\ndef equalPairOfBits(n, m):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "secondRightmostZeroBit",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def secondRightmostZeroBit(n):\n    return 2 ** bin(n)[::-1].find(\"0\", bin(n)[::-1].find(\"0\") + 1)\ndef swapAdjacentBits(n):\n    return ((n >> 1) & 1431655765) | ((n << 1) & 2863311530)\ndef differentRightmostBit(n, m):\n    return 2 ** bin((n ^ m))[::-1].find(\"1\")\ndef equalPairOfBits(n, m):\n    return 2 ** bin(~(n ^ m))[::-1].find(\"1\")\ndef leastFactorial(n):\n    factorial = 1",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "swapAdjacentBits",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def swapAdjacentBits(n):\n    return ((n >> 1) & 1431655765) | ((n << 1) & 2863311530)\ndef differentRightmostBit(n, m):\n    return 2 ** bin((n ^ m))[::-1].find(\"1\")\ndef equalPairOfBits(n, m):\n    return 2 ** bin(~(n ^ m))[::-1].find(\"1\")\ndef leastFactorial(n):\n    factorial = 1\n    index = 1\n    while factorial < n:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "differentRightmostBit",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def differentRightmostBit(n, m):\n    return 2 ** bin((n ^ m))[::-1].find(\"1\")\ndef equalPairOfBits(n, m):\n    return 2 ** bin(~(n ^ m))[::-1].find(\"1\")\ndef leastFactorial(n):\n    factorial = 1\n    index = 1\n    while factorial < n:\n        index += 1\n        factorial *= index",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "equalPairOfBits",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def equalPairOfBits(n, m):\n    return 2 ** bin(~(n ^ m))[::-1].find(\"1\")\ndef leastFactorial(n):\n    factorial = 1\n    index = 1\n    while factorial < n:\n        index += 1\n        factorial *= index\n    return factorial\ndef countSumOfTwoRepresentations2(n, l, r):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "leastFactorial",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def leastFactorial(n):\n    factorial = 1\n    index = 1\n    while factorial < n:\n        index += 1\n        factorial *= index\n    return factorial\ndef countSumOfTwoRepresentations2(n, l, r):\n    count = 0\n    a = max(n - r, l)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "countSumOfTwoRepresentations2",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def countSumOfTwoRepresentations2(n, l, r):\n    count = 0\n    a = max(n - r, l)\n    b = n - a\n    while a <= r and a <= b:\n        count += 1\n        a += 1\n        b -= 1\n    return count\ndef magicalWell(a, b, n):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "magicalWell",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def magicalWell(a, b, n):\n    total = 0\n    for i in range(n):\n        total += a * b\n        a += 1\n        b += 1\n    return total\ndef lineUp(commands):\n    count = 0\n    smart_student = 0",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "lineUp",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def lineUp(commands):\n    count = 0\n    smart_student = 0\n    dumb_student = 0\n    for command in commands:\n        if command == \"L\":\n            smart_student = (smart_student - 1) % 4\n            dumb_student = (dumb_student + 1) % 4\n        elif command == \"R\":\n            smart_student = (smart_student + 1) % 4",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "additionWithoutCarrying",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def additionWithoutCarrying(param1, param2):\n    # Convert numbers to strings\n    str1 = str(param1)\n    str2 = str(param2)\n    # Pad both to the same length with zeroes (to the left of the numbers)\n    length = max(len(str2), len(str1))\n    str1 = str1.rjust(length, \"0\")\n    str2 = str2.rjust(length, \"0\")\n    output = []\n    for num1, num2 in zip(str1, str2):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "appleBoxes",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def appleBoxes(k):\n    red = 0\n    yellow = 0\n    for i in range(1, k + 1, 2):\n        yellow += i * i\n    for i in range(2, k + 1, 2):\n        red += i * i\n    return red - yellow\ndef increaseNumberRoundness(n):\n    string = str(n)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "increaseNumberRoundness",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def increaseNumberRoundness(n):\n    string = str(n)\n    # Check for immediate rejection\n    if \"0\" not in string or len(string) < 2:\n        return False\n    # Since we know there's a 0, if it's not on\n    # the left, then we know to accept\n    if string[-1] != \"0\":\n        return True\n    # If there is only one 0, it must be at the end, so reject.",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "rounders",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def rounders(value):\n    length = len(str(value))\n    magnitude = length - 1\n    for i in range(length - 1):\n        value = int((value / 10) + 0.5)\n    return value * (10 ** magnitude)\ndef candles(candlesNumber, makeNew):\n    totalBurned = 0\n    leftovers = 0\n    while candlesNumber > 0:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "candles",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def candles(candlesNumber, makeNew):\n    totalBurned = 0\n    leftovers = 0\n    while candlesNumber > 0:\n        totalBurned += candlesNumber\n        leftovers += candlesNumber\n        candlesNumber = 0\n        candlesNumber = leftovers // makeNew\n        leftovers = leftovers % makeNew\n    return totalBurned",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "countBlackCells",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def countBlackCells(n, m):\n    gcd = find_gcd(n, m)\n    line_cells = n + m - gcd\n    line_corner_cells = (gcd - 1) * 2\n    return line_cells + line_corner_cells\ndef find_gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\ndef createArray(size):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "find_gcd",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def find_gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\ndef createArray(size):\n    return [1] * size\ndef arrayReplace(inputArray, elemToReplace, substitutionElem):\n    output = [\n        elem if elem != elemToReplace else substitutionElem for elem in inputArray\n    ]",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "createArray",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def createArray(size):\n    return [1] * size\ndef arrayReplace(inputArray, elemToReplace, substitutionElem):\n    output = [\n        elem if elem != elemToReplace else substitutionElem for elem in inputArray\n    ]\n    return output\ndef firstReverseTry(arr):\n    if len(arr) < 2:\n        return arr",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "arrayReplace",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def arrayReplace(inputArray, elemToReplace, substitutionElem):\n    output = [\n        elem if elem != elemToReplace else substitutionElem for elem in inputArray\n    ]\n    return output\ndef firstReverseTry(arr):\n    if len(arr) < 2:\n        return arr\n    if len(arr) < 4:\n        return arr[::-1]",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "firstReverseTry",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def firstReverseTry(arr):\n    if len(arr) < 2:\n        return arr\n    if len(arr) < 4:\n        return arr[::-1]\n    return arr[-1:] + arr[1:-1] + arr[:1]\ndef concatenateArrays(a, b):\n    return a + b\ndef removeArrayPart(inputArray, l, r):\n    return inputArray[:l] + inputArray[r + 1 :]",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "concatenateArrays",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def concatenateArrays(a, b):\n    return a + b\ndef removeArrayPart(inputArray, l, r):\n    return inputArray[:l] + inputArray[r + 1 :]\ndef isSmooth(arr):\n    if arr[0] != arr[-1]:\n        return False\n    if len(arr) % 2 == 0:\n        middle = arr[len(arr) // 2] + arr[(len(arr) // 2) - 1]\n    else:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "removeArrayPart",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def removeArrayPart(inputArray, l, r):\n    return inputArray[:l] + inputArray[r + 1 :]\ndef isSmooth(arr):\n    if arr[0] != arr[-1]:\n        return False\n    if len(arr) % 2 == 0:\n        middle = arr[len(arr) // 2] + arr[(len(arr) // 2) - 1]\n    else:\n        middle = arr[len(arr) // 2]\n    return arr[0] == middle",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "isSmooth",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def isSmooth(arr):\n    if arr[0] != arr[-1]:\n        return False\n    if len(arr) % 2 == 0:\n        middle = arr[len(arr) // 2] + arr[(len(arr) // 2) - 1]\n    else:\n        middle = arr[len(arr) // 2]\n    return arr[0] == middle\ndef replaceMiddle(arr):\n    if len(arr) % 2 != 0:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "replaceMiddle",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def replaceMiddle(arr):\n    if len(arr) % 2 != 0:\n        return arr\n    right_middle = len(arr) // 2\n    middle_value = arr[right_middle] + arr[right_middle - 1]\n    return arr[: right_middle - 1] + [middle_value] + arr[right_middle + 1 :]\ndef makeArrayConsecutive2(statues):\n    count = 0\n    for i in range(min(statues), max(statues)):\n        if i not in statues:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "makeArrayConsecutive2",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def makeArrayConsecutive2(statues):\n    count = 0\n    for i in range(min(statues), max(statues)):\n        if i not in statues:\n            count += 1\n    return count\ndef isPower(n):\n    if n == 1:\n        return True\n    a = 2",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "isPower",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def isPower(n):\n    if n == 1:\n        return True\n    a = 2\n    b = 2\n    while a ** 2 <= n:\n        while a ** b <= n:\n            if a ** b == n:\n                return True\n            b += 1",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "isSumOfConsecutive2",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def isSumOfConsecutive2(n):\n    count = 0\n    right = 2\n    arr = [1, 2]\n    while right <= (n // 2) + 1:\n        total = sum(arr)\n        if total == n:\n            count += 1\n            del arr[0]\n        elif total < n:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "squareDigitsSequence",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def squareDigitsSequence(a0):\n    sequence = [a0]\n    while sequence[-1] not in sequence[:-1]:\n        next_value = 0\n        for digit in str(sequence[-1]):\n            next_value += int(digit) ** 2\n        sequence.append(next_value)\n    return len(sequence)\ndef pagesNumberingWithInk(current, numberOfDigits):\n    numberOfDigits -= len(str(current))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "pagesNumberingWithInk",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def pagesNumberingWithInk(current, numberOfDigits):\n    numberOfDigits -= len(str(current))\n    next_digits = len(str(current + 1))\n    while numberOfDigits >= next_digits:\n        current += 1\n        numberOfDigits -= next_digits\n        next_digits = len(str(current))\n    return current\ndef comfortableNumbers(l, r):\n    count = 0",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "comfortableNumbers",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def comfortableNumbers(l, r):\n    count = 0\n    for a in range(l, r):\n        for b in range(a + 1, r + 1):\n            a_sum = sum(int(digit) for digit in str(a))\n            b_sum = sum(int(digit) for digit in str(b))\n            if b <= a + a_sum and a >= b - b_sum:\n                count += 1\n    return count\ndef weakNumbers(n):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "weakNumbers",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def weakNumbers(n):\n    all_factors = [count_factors(num) for num in range(1, n + 1)]\n    weaknesses = []\n    for num, num_factors in enumerate(all_factors, 1):\n        weakness = 0\n        for factor in all_factors[:num]:\n            if factor > num_factors:\n                weakness += 1\n        weaknesses.append(weakness)\n        weakest = max(weaknesses)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "count_factors",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def count_factors(n):\n    factors = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            factors += 1\n    return factors\nprint(weakNumbers(500))\nimport math\ndef rectangleRotation(a, b):\n    n = a / (2 ** 0.5)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "rectangleRotation",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "peekOfCode": "def rectangleRotation(a, b):\n    n = a / (2 ** 0.5)\n    m = b / (2 ** 0.5)\n    points = (math.floor(n) * math.floor(m)) + (math.ceil(n) * math.ceil(m))\n    if math.floor(n) % 2 != math.floor(m) % 2:\n        points -= 1\n    return points\n# rectangleRotation(6, 4)\nprint(rectangleRotation(8, 6))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.merged",
        "documentation": {}
    },
    {
        "label": "mergeTwoLinkedLists",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.mergeTwoLinkedLists (2)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.mergeTwoLinkedLists (2)",
        "peekOfCode": "def mergeTwoLinkedLists(l1, l2):\n    if l1 == None and l2 == None:\n        return None\n    merged = ListNode(None)\n    ret = merged\n    # prev = merged.value\n    while l1 != None or l2 != None:\n        if l1 != None:\n            if l2 == None and l1.next == None:\n                merged.value = l1.value",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.mergeTwoLinkedLists (2)",
        "documentation": {}
    },
    {
        "label": "mergeTwoLinkedLists",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.mergeTwoLinkedLists (3)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.mergeTwoLinkedLists (3)",
        "peekOfCode": "def mergeTwoLinkedLists(l1, l2):\n    em = None\n    if l1 is None:\n        return l2\n    if l2 is None:\n        return l1\n    if l1.value <= l2.value:\n        startNode = ListNode(l1.value)\n        l1 = l1.next\n    else:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.mergeTwoLinkedLists (3)",
        "documentation": {}
    },
    {
        "label": "mergeTwoLinkedLists",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.mergeTwoLinkedLists",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.mergeTwoLinkedLists",
        "peekOfCode": "def mergeTwoLinkedLists(l1, l2):\n    em = None\n    if l1 is None:\n        return l2\n    if l2 is None:\n        return l1\n    if l1.value <= l2.value:\n        startNode = ListNode(l1.value)\n        l1 = l1.next\n    else:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.mergeTwoLinkedLists",
        "documentation": {}
    },
    {
        "label": "AngryBird",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "peekOfCode": "class AngryBird:\n    # Slots optimize property access and memory usage and prevent you\n    # from arbitrarily assigning new properties the instance\n    __slots__ = [\"_x\", \"_y\"]\n    # Constructor\n    def __init__(self, x=0, y=0):\n        # Doc String\n        \"\"\"\n        Construct a new AngryBird by setting it's position to (0, 0)\n        \"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "say_hi",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "peekOfCode": "def say_hi(name):\n    \"\"\"<---- Multi-Line Comments and Docstrings\n    This is where you put your content for help() to inform the user\n    about what your function does and how to use it\n    \"\"\"\n    print(f\"Hello {name}!\")\nprint(say_hi(\"Bryan\"))  # Should get the print inside the function, then None\n# Boolean Values\n# Work the same as in JS, except they are title case: True and False\na = True",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "printCopyright",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "peekOfCode": "def printCopyright():\n    print(\"Copyright 2021, Bgoonz\")\n# Lambdas are one liners! (Should be at least, you can use parenthesis to disobey)\ndef avg(num1, num2):\n    return print(num1 + num2)\navg(1, 2)\n# Calling it with keyword arguments, order does not matter\navg(num2=20, num1=1252)\nprintCopyright()\n# We can give parameters default arguments like JS",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "avg",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "peekOfCode": "def avg(num1, num2):\n    return print(num1 + num2)\navg(1, 2)\n# Calling it with keyword arguments, order does not matter\navg(num2=20, num1=1252)\nprintCopyright()\n# We can give parameters default arguments like JS\ndef greeting(name, saying=\"Hello\"):\n    print(saying, name)\ngreeting(\"Mike\")  # Hello Mike",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "greeting",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "peekOfCode": "def greeting(name, saying=\"Hello\"):\n    print(saying, name)\ngreeting(\"Mike\")  # Hello Mike\ngreeting(\"Bryan\", saying=\"Hello there...\")\n# A common gotcha is using a mutable object for a default parameter\n# All invocations of the function reference the same mutable object\ndef append_item(item_name, item_list=[]):  # Will it obey and give us a new list?\n    item_list.append(item_name)\n    return item_list\n# Uses same item list unless otherwise stated which is counterintuitive",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "append_item",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "peekOfCode": "def append_item(item_name, item_list=[]):  # Will it obey and give us a new list?\n    item_list.append(item_name)\n    return item_list\n# Uses same item list unless otherwise stated which is counterintuitive\nprint(append_item(\"notebook\"))\nprint(append_item(\"notebook\"))\nprint(append_item(\"notebook\", []))\n# Errors - Unlike JS, if we pass the incorrect amount of arguments to a function,\n#          it will throw an error\n# avg(1)  # TypeError",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "add",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "peekOfCode": "def add(a, b, *args):\n    # args is a tuple of the rest of the arguments\n    total = a + b\n    for n in args:\n        total += n\n    return total\nprint(add(1, 2))  # args is None, returns 3\nprint(add(1, 2, 3, 4, 5, 6))  # args is (3, 4, 5, 6), returns 21\n# Variable Length Keyword Arguments\ndef print_names_and_countries(greeting, **kwargs):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "print_names_and_countries",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "peekOfCode": "def print_names_and_countries(greeting, **kwargs):\n    # kwargs is a dictionary of the rest of the keyword arguments\n    for k, v in kwargs.items():\n        print(greeting, k, \"from\", v)\nprint_names_and_countries(\n    \"Hey there\", Monica=\"Sweden\", Mike=\"The United States\", Mark=\"China\"\n)\n# We can combine all of these together\ndef example2(arg1, arg2, *args, kw_1=\"cheese\", kw_2=\"horse\", **kwargs):\n    pass",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "example2",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "peekOfCode": "def example2(arg1, arg2, *args, kw_1=\"cheese\", kw_2=\"horse\", **kwargs):\n    pass\n# Lists are mutable arrays\nempty_list = []\nroomates = [\"Beau\", \"Delynn\"]\n# List built-in function makes a list too\nspecials = list()\n# We can use 'in' to test if something is in the list, like 'includes' in JS\nprint(1 in [1, 2, 4])  # True\nprint(2 in [1, 3, 5])  # False",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "isOdd",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "peekOfCode": "def isOdd(num):\n    return num % 2 == 1\nfiltered = filter(isOdd, [1, 2, 3, 4])\nprint(list(filtered))\nfor num in filtered:\n    print(f\"first way: {num}\")\nprint(\"--\" * 20)\n[print(f\"list comprehension: {i}\") for i in [1, 2, 3, 4, 5, 6, 7, 8] if i % 2 == 1]\n# Map\ndef toUpper(str):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "toUpper",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "peekOfCode": "def toUpper(str):\n    return str.upper()\nupperCased = map(toUpper, [\"a\", \"b\", \"c\", \"d\"])\nprint(list(upperCased))\n# Sorted\nsorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"])\nprint(list(sorted_items))  # Notice uppercase comes before lowercase\n# Using a key function to control the sorting and make it case insensitive\nsorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"], key=str.lower)\nprint(sorted_items)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "print_len",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "peekOfCode": "def print_len(item):\n    return print(len(item))\nprint_len(\"Mike\")\nprint_len([1, 5, 2, 10, 3, 10])\nprint_len({1, 5, 10, 9, 10})  # 4 because there is a duplicate here (10)\nprint_len((1, 4, 10, 9, 20))\n# Max will return the max number in a given scenario\nprint(max(1, 2, 35, 1012, 1))\n# Min\nprint(min(1, 5, 2, 10))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "peekOfCode": "a = True\nb = False\n# Logical Operators\n# ! = not, || = or, && = and\nprint(True and True)\nprint(True and not True)\nprint(True or True)\n# Truthiness - Everything is True except...\n# False - None, False, '', [], (), set(), range(0)\n# Number Values",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "peekOfCode": "b = False\n# Logical Operators\n# ! = not, || = or, && = and\nprint(True and True)\nprint(True and not True)\nprint(True or True)\n# Truthiness - Everything is True except...\n# False - None, False, '', [], (), set(), range(0)\n# Number Values\n# Integers are numbers without a floating decimal point",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "peekOfCode": "name = \"Bryan\"\nfor i in range(len(name)):\n    print(name[i])  # B, r, y, a, n\n# We can index starting from the end as well, with negatives\noccupation = \"Full Stack Software Engineer\"\nprint(occupation[-3])  # e\n# We can also get ranges in the index with the [start:stop:step] syntax\nprint(occupation[0:4:1])  # step and stop are optional, stop is exclusive\nprint(occupation[::4])  # beginning to end, every 4th letter\nprint(occupation[4:14:2])  # Let's get weird with it!",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "occupation",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "peekOfCode": "occupation = \"Full Stack Software Engineer\"\nprint(occupation[-3])  # e\n# We can also get ranges in the index with the [start:stop:step] syntax\nprint(occupation[0:4:1])  # step and stop are optional, stop is exclusive\nprint(occupation[::4])  # beginning to end, every 4th letter\nprint(occupation[4:14:2])  # Let's get weird with it!\n# NOTE: Indexing out of range will give you an IndexError\n# We can also get the index og things with the .index() method, similar to indexOf()\nprint(occupation.index(\"Stack\"))\nprint([\"Mike\", \"Barry\", \"Cole\", \"James\", \"Mark\"].index(\"Cole\"))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "first_name",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "peekOfCode": "first_name = \"Bryan\"\nlast_name = \"Guner\"\nprint(\"Your name is {0} {1}\".format(first_name, last_name))\n# Useful String Methods\nprint(\"Hello\".upper())  # HELLO\nprint(\"Hello\".lower())  # hello\nprint(\"HELLO\".islower())  # False\nprint(\"HELLO\".isupper())  # True\nprint(\"Hello\".startswith(\"he\"))  # False\nprint(\"Hello\".endswith(\"lo\"))  # True",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "last_name",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "peekOfCode": "last_name = \"Guner\"\nprint(\"Your name is {0} {1}\".format(first_name, last_name))\n# Useful String Methods\nprint(\"Hello\".upper())  # HELLO\nprint(\"Hello\".lower())  # hello\nprint(\"HELLO\".islower())  # False\nprint(\"HELLO\".isupper())  # True\nprint(\"Hello\".startswith(\"he\"))  # False\nprint(\"Hello\".endswith(\"lo\"))  # True\nprint(\"Hello There\".split())  # [Hello, There]",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "peekOfCode": "a = 3\nb = a\nc = \"heyoo\"\nb = [\"reassignment\", \"is\", \"fine\", \"G!\"]\n# Comparison Operators - Python uses the same equality operators as JS, but no ===\n# < - Less than\n# > - Greater than\n# <= - Less than or Equal\n# >= - Greater than or Equal\n# == - Equal to",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "peekOfCode": "b = a\nc = \"heyoo\"\nb = [\"reassignment\", \"is\", \"fine\", \"G!\"]\n# Comparison Operators - Python uses the same equality operators as JS, but no ===\n# < - Less than\n# > - Greater than\n# <= - Less than or Equal\n# >= - Greater than or Equal\n# == - Equal to\n# != - Not equal to",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "peekOfCode": "c = \"heyoo\"\nb = [\"reassignment\", \"is\", \"fine\", \"G!\"]\n# Comparison Operators - Python uses the same equality operators as JS, but no ===\n# < - Less than\n# > - Greater than\n# <= - Less than or Equal\n# >= - Greater than or Equal\n# == - Equal to\n# != - Not equal to\n# is - Refers to exact same memory location",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "peekOfCode": "b = [\"reassignment\", \"is\", \"fine\", \"G!\"]\n# Comparison Operators - Python uses the same equality operators as JS, but no ===\n# < - Less than\n# > - Greater than\n# <= - Less than or Equal\n# >= - Greater than or Equal\n# == - Equal to\n# != - Not equal to\n# is - Refers to exact same memory location\n# not - !",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "lst",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "peekOfCode": "lst = [1, 2, 3, 4]\nfor i in lst:\n    print(i)\n# Looping over a dictionary\nspam = {\"color\": \"red\", \"age\": 42, \"items\": [(1, \"hey\"), (2, \"hooo!\")]}\nfor v in spam.values():\n    print(v)\n# Loop over a list of tuples and destructuring the values\n# Assuming spam.items returns a list of tuples each containing two items (k, v)\nfor k, v in spam.items():",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "spam",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "peekOfCode": "spam = {\"color\": \"red\", \"age\": 42, \"items\": [(1, \"hey\"), (2, \"hooo!\")]}\nfor v in spam.values():\n    print(v)\n# Loop over a list of tuples and destructuring the values\n# Assuming spam.items returns a list of tuples each containing two items (k, v)\nfor k, v in spam.items():\n    print(f\"{k}: {v}\")\n# While loops as long as the condition is True\n#  - Exit loop early with break\n#  - Exit iteration early with continue",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "spam",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "peekOfCode": "spam = 0\nwhile True:\n    print(\"Sike That's the wrong Numba\")\n    spam += 1\n    if spam < 5:\n        continue\n    break\n# Functions - use def keyword to define a function in Python\ndef printCopyright():\n    print(\"Copyright 2021, Bgoonz\")",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "empty_list",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "peekOfCode": "empty_list = []\nroomates = [\"Beau\", \"Delynn\"]\n# List built-in function makes a list too\nspecials = list()\n# We can use 'in' to test if something is in the list, like 'includes' in JS\nprint(1 in [1, 2, 4])  # True\nprint(2 in [1, 3, 5])  # False\n# Dictionaries - Similar to JS POJO's or Map, containing key value pairs\na = {\"one\": 1, \"two\": 2, \"three\": 3}\nb = dict(one=1, two=2, three=3)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "roomates",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "peekOfCode": "roomates = [\"Beau\", \"Delynn\"]\n# List built-in function makes a list too\nspecials = list()\n# We can use 'in' to test if something is in the list, like 'includes' in JS\nprint(1 in [1, 2, 4])  # True\nprint(2 in [1, 3, 5])  # False\n# Dictionaries - Similar to JS POJO's or Map, containing key value pairs\na = {\"one\": 1, \"two\": 2, \"three\": 3}\nb = dict(one=1, two=2, three=3)\n# Can use 'in' on dictionaries too (for keys)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "specials",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "peekOfCode": "specials = list()\n# We can use 'in' to test if something is in the list, like 'includes' in JS\nprint(1 in [1, 2, 4])  # True\nprint(2 in [1, 3, 5])  # False\n# Dictionaries - Similar to JS POJO's or Map, containing key value pairs\na = {\"one\": 1, \"two\": 2, \"three\": 3}\nb = dict(one=1, two=2, three=3)\n# Can use 'in' on dictionaries too (for keys)\nprint(\"one\" in a)  # True\nprint(3 in b)  # False",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "peekOfCode": "a = {\"one\": 1, \"two\": 2, \"three\": 3}\nb = dict(one=1, two=2, three=3)\n# Can use 'in' on dictionaries too (for keys)\nprint(\"one\" in a)  # True\nprint(3 in b)  # False\n# Sets - Just like JS, unordered collection of distinct objects\nbedroom = {\"bed\", \"tv\", \"computer\", \"clothes\", \"playstation 4\"}\n# bedroom = set(\"bed\", \"tv\", \"computer\", \"clothes\", \"playstation 5\")\nschool_bag = set(\n    [\"book\", \"paper\", \"pencil\", \"pencil\", \"book\", \"book\", \"book\", \"eraser\"]",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "peekOfCode": "b = dict(one=1, two=2, three=3)\n# Can use 'in' on dictionaries too (for keys)\nprint(\"one\" in a)  # True\nprint(3 in b)  # False\n# Sets - Just like JS, unordered collection of distinct objects\nbedroom = {\"bed\", \"tv\", \"computer\", \"clothes\", \"playstation 4\"}\n# bedroom = set(\"bed\", \"tv\", \"computer\", \"clothes\", \"playstation 5\")\nschool_bag = set(\n    [\"book\", \"paper\", \"pencil\", \"pencil\", \"book\", \"book\", \"book\", \"eraser\"]\n)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "bedroom",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "peekOfCode": "bedroom = {\"bed\", \"tv\", \"computer\", \"clothes\", \"playstation 4\"}\n# bedroom = set(\"bed\", \"tv\", \"computer\", \"clothes\", \"playstation 5\")\nschool_bag = set(\n    [\"book\", \"paper\", \"pencil\", \"pencil\", \"book\", \"book\", \"book\", \"eraser\"]\n)\nprint(school_bag)\nprint(bedroom)\n# We can use 'in' on sets as wel\nprint(1 in {1, 2, 3})  # True\nprint(4 in {1, 3, 5})  # False",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "school_bag",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "peekOfCode": "school_bag = set(\n    [\"book\", \"paper\", \"pencil\", \"pencil\", \"book\", \"book\", \"book\", \"eraser\"]\n)\nprint(school_bag)\nprint(bedroom)\n# We can use 'in' on sets as wel\nprint(1 in {1, 2, 3})  # True\nprint(4 in {1, 3, 5})  # False\n# Tuples are immutable lists of items\ntime_blocks = (\"AM\", \"PM\")",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "time_blocks",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "peekOfCode": "time_blocks = (\"AM\", \"PM\")\ncolors = \"red\", \"green\", \"blue\"  # Parenthesis not needed but encouraged\n# The tuple built-in function can be used to convert things to tuples\nprint(tuple(\"abc\"))\nprint(tuple([1, 2, 3]))\n# 'in' may be used on tuples as well\nprint(1 in (1, 2, 3))  # True\nprint(5 in (1, 4, 3))  # False\n# Ranges are immutable lists of numbers, often used with for loops\n#   - start - default: 0, first number in sequence",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "colors",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "peekOfCode": "colors = \"red\", \"green\", \"blue\"  # Parenthesis not needed but encouraged\n# The tuple built-in function can be used to convert things to tuples\nprint(tuple(\"abc\"))\nprint(tuple([1, 2, 3]))\n# 'in' may be used on tuples as well\nprint(1 in (1, 2, 3))  # True\nprint(5 in (1, 4, 3))  # False\n# Ranges are immutable lists of numbers, often used with for loops\n#   - start - default: 0, first number in sequence\n#   - stop - required, next number past last number in sequence",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "range1",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "peekOfCode": "range1 = range(5)  # [0,1,2,3,4]\nrange2 = range(1, 5)  # [1,2,3,4]\nrange3 = range(0, 25, 5)  # [0,5,10,15,20]\nrange4 = range(0)  # []\nfor i in range1:\n    print(i)\n# Built-in functions:\n# Filter\ndef isOdd(num):\n    return num % 2 == 1",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "range2",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "peekOfCode": "range2 = range(1, 5)  # [1,2,3,4]\nrange3 = range(0, 25, 5)  # [0,5,10,15,20]\nrange4 = range(0)  # []\nfor i in range1:\n    print(i)\n# Built-in functions:\n# Filter\ndef isOdd(num):\n    return num % 2 == 1\nfiltered = filter(isOdd, [1, 2, 3, 4])",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "range3",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "peekOfCode": "range3 = range(0, 25, 5)  # [0,5,10,15,20]\nrange4 = range(0)  # []\nfor i in range1:\n    print(i)\n# Built-in functions:\n# Filter\ndef isOdd(num):\n    return num % 2 == 1\nfiltered = filter(isOdd, [1, 2, 3, 4])\nprint(list(filtered))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "range4",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "peekOfCode": "range4 = range(0)  # []\nfor i in range1:\n    print(i)\n# Built-in functions:\n# Filter\ndef isOdd(num):\n    return num % 2 == 1\nfiltered = filter(isOdd, [1, 2, 3, 4])\nprint(list(filtered))\nfor num in filtered:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "filtered",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "peekOfCode": "filtered = filter(isOdd, [1, 2, 3, 4])\nprint(list(filtered))\nfor num in filtered:\n    print(f\"first way: {num}\")\nprint(\"--\" * 20)\n[print(f\"list comprehension: {i}\") for i in [1, 2, 3, 4, 5, 6, 7, 8] if i % 2 == 1]\n# Map\ndef toUpper(str):\n    return str.upper()\nupperCased = map(toUpper, [\"a\", \"b\", \"c\", \"d\"])",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "upperCased",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "peekOfCode": "upperCased = map(toUpper, [\"a\", \"b\", \"c\", \"d\"])\nprint(list(upperCased))\n# Sorted\nsorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"])\nprint(list(sorted_items))  # Notice uppercase comes before lowercase\n# Using a key function to control the sorting and make it case insensitive\nsorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"], key=str.lower)\nprint(sorted_items)\n# You can also reverse the sort\nsorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"], key=str.lower, reverse=True)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "sorted_items",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "peekOfCode": "sorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"])\nprint(list(sorted_items))  # Notice uppercase comes before lowercase\n# Using a key function to control the sorting and make it case insensitive\nsorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"], key=str.lower)\nprint(sorted_items)\n# You can also reverse the sort\nsorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"], key=str.lower, reverse=True)\nprint(sorted_items)\n# Enumerate creates a tuple with an index for what you're enumerating\nquarters = [\"First\", \"Second\", \"Third\", \"Fourth\"]",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "sorted_items",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "peekOfCode": "sorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"], key=str.lower)\nprint(sorted_items)\n# You can also reverse the sort\nsorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"], key=str.lower, reverse=True)\nprint(sorted_items)\n# Enumerate creates a tuple with an index for what you're enumerating\nquarters = [\"First\", \"Second\", \"Third\", \"Fourth\"]\nprint(list(enumerate(quarters)))\nprint(list(enumerate(quarters, start=1)))\n# Zip takes list and combines them as key value pairs, or really however you need",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "sorted_items",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "peekOfCode": "sorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"], key=str.lower, reverse=True)\nprint(sorted_items)\n# Enumerate creates a tuple with an index for what you're enumerating\nquarters = [\"First\", \"Second\", \"Third\", \"Fourth\"]\nprint(list(enumerate(quarters)))\nprint(list(enumerate(quarters, start=1)))\n# Zip takes list and combines them as key value pairs, or really however you need\nkeys = (\"Name\", \"Email\")\nvalues = (\"Buster\", \"cheetoh@johhnydepp.com\")\nzipped = zip(keys, values)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "quarters",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "peekOfCode": "quarters = [\"First\", \"Second\", \"Third\", \"Fourth\"]\nprint(list(enumerate(quarters)))\nprint(list(enumerate(quarters, start=1)))\n# Zip takes list and combines them as key value pairs, or really however you need\nkeys = (\"Name\", \"Email\")\nvalues = (\"Buster\", \"cheetoh@johhnydepp.com\")\nzipped = zip(keys, values)\nprint(list(zipped))\n# You can zip more than 2\nx_coords = [0, 1, 2, 3, 4]",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "keys",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "peekOfCode": "keys = (\"Name\", \"Email\")\nvalues = (\"Buster\", \"cheetoh@johhnydepp.com\")\nzipped = zip(keys, values)\nprint(list(zipped))\n# You can zip more than 2\nx_coords = [0, 1, 2, 3, 4]\ny_coords = [4, 6, 10, 9, 10]\nz_coords = [20, 10, 5, 9, 1]\ncoords = zip(x_coords, y_coords, z_coords)\nprint(list(coords))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "values",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "peekOfCode": "values = (\"Buster\", \"cheetoh@johhnydepp.com\")\nzipped = zip(keys, values)\nprint(list(zipped))\n# You can zip more than 2\nx_coords = [0, 1, 2, 3, 4]\ny_coords = [4, 6, 10, 9, 10]\nz_coords = [20, 10, 5, 9, 1]\ncoords = zip(x_coords, y_coords, z_coords)\nprint(list(coords))\n# Len reports the length of strings along with list and any other object data type",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "zipped",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "peekOfCode": "zipped = zip(keys, values)\nprint(list(zipped))\n# You can zip more than 2\nx_coords = [0, 1, 2, 3, 4]\ny_coords = [4, 6, 10, 9, 10]\nz_coords = [20, 10, 5, 9, 1]\ncoords = zip(x_coords, y_coords, z_coords)\nprint(list(coords))\n# Len reports the length of strings along with list and any other object data type\n# doing this to save myself some typing",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "x_coords",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "peekOfCode": "x_coords = [0, 1, 2, 3, 4]\ny_coords = [4, 6, 10, 9, 10]\nz_coords = [20, 10, 5, 9, 1]\ncoords = zip(x_coords, y_coords, z_coords)\nprint(list(coords))\n# Len reports the length of strings along with list and any other object data type\n# doing this to save myself some typing\ndef print_len(item):\n    return print(len(item))\nprint_len(\"Mike\")",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "y_coords",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "peekOfCode": "y_coords = [4, 6, 10, 9, 10]\nz_coords = [20, 10, 5, 9, 1]\ncoords = zip(x_coords, y_coords, z_coords)\nprint(list(coords))\n# Len reports the length of strings along with list and any other object data type\n# doing this to save myself some typing\ndef print_len(item):\n    return print(len(item))\nprint_len(\"Mike\")\nprint_len([1, 5, 2, 10, 3, 10])",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "z_coords",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "peekOfCode": "z_coords = [20, 10, 5, 9, 1]\ncoords = zip(x_coords, y_coords, z_coords)\nprint(list(coords))\n# Len reports the length of strings along with list and any other object data type\n# doing this to save myself some typing\ndef print_len(item):\n    return print(len(item))\nprint_len(\"Mike\")\nprint_len([1, 5, 2, 10, 3, 10])\nprint_len({1, 5, 10, 9, 10})  # 4 because there is a duplicate here (10)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "coords",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "peekOfCode": "coords = zip(x_coords, y_coords, z_coords)\nprint(list(coords))\n# Len reports the length of strings along with list and any other object data type\n# doing this to save myself some typing\ndef print_len(item):\n    return print(len(item))\nprint_len(\"Mike\")\nprint_len([1, 5, 2, 10, 3, 10])\nprint_len({1, 5, 10, 9, 10})  # 4 because there is a duplicate here (10)\nprint_len((1, 4, 10, 9, 20))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "user",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "peekOfCode": "user = {\"Name\": \"Bob\", \"Email\": \"bob@bob.com\"}\nprint(dir(user))\n# Importing packages and modules\n#  - Module - A Python code in a file or directory\n#  - Package - A module which is a directory containing an __init__.py file\n#  - Submodule - A module which is contained within a package\n#  - Name - An exported function, class, or variable in a module\n# Unlike JS, modules export ALL names contained within them without any special export key\n# Assuming we have the following package with four submodules\n#  math",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "squares",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "peekOfCode": "squares = []\nfor i in range(10):\n    squares.append(i ** 2)\nprint(squares)\n# value = i ** 2\n# loop = for i in range(10)\nsquares = [i ** 2 for i in range(10)]\nprint(list(squares))\nsentence = \"the rocket came back from mars\"\nvowels = [character for character in sentence if character in \"aeiou\"]",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "squares",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "peekOfCode": "squares = [i ** 2 for i in range(10)]\nprint(list(squares))\nsentence = \"the rocket came back from mars\"\nvowels = [character for character in sentence if character in \"aeiou\"]\nprint(vowels)\n# You can also use them on dictionaries. We can use the items() method\n# for the dictionary to loop through it getting the keys and values out at once\nperson = {\"name\": \"Corina\", \"age\": 32, \"height\": 1.4}\n# This loops through and capitalizes the first letter of all keys\nnewPerson = {key.title(): value for key, value in person.items()}",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "sentence",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "peekOfCode": "sentence = \"the rocket came back from mars\"\nvowels = [character for character in sentence if character in \"aeiou\"]\nprint(vowels)\n# You can also use them on dictionaries. We can use the items() method\n# for the dictionary to loop through it getting the keys and values out at once\nperson = {\"name\": \"Corina\", \"age\": 32, \"height\": 1.4}\n# This loops through and capitalizes the first letter of all keys\nnewPerson = {key.title(): value for key, value in person.items()}\nprint(list(newPerson.items()))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "vowels",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "peekOfCode": "vowels = [character for character in sentence if character in \"aeiou\"]\nprint(vowels)\n# You can also use them on dictionaries. We can use the items() method\n# for the dictionary to loop through it getting the keys and values out at once\nperson = {\"name\": \"Corina\", \"age\": 32, \"height\": 1.4}\n# This loops through and capitalizes the first letter of all keys\nnewPerson = {key.title(): value for key, value in person.items()}\nprint(list(newPerson.items()))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "person",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "peekOfCode": "person = {\"name\": \"Corina\", \"age\": 32, \"height\": 1.4}\n# This loops through and capitalizes the first letter of all keys\nnewPerson = {key.title(): value for key, value in person.items()}\nprint(list(newPerson.items()))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "newPerson",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "peekOfCode": "newPerson = {key.title(): value for key, value in person.items()}\nprint(list(newPerson.items()))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.notes",
        "documentation": {}
    },
    {
        "label": "dfs",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.possible-paths-scrap",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.possible-paths-scrap",
        "peekOfCode": "def dfs(s):\n    # Append the node in path\n    # and set visited\n    path.append(s)\n    visited[s] = True\n    # Path started with a node\n    # having in-degree 0 and\n    # current node has out-degree 0,\n    # print current path\n    if outdeg0[s] and indeg0[path[0]]:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.possible-paths-scrap",
        "documentation": {}
    },
    {
        "label": "csFindAllPathsFromAToB",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.possible-paths-scrap",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.possible-paths-scrap",
        "peekOfCode": "def csFindAllPathsFromAToB(graph):\n    for i in range(graph):\n        # for each node with in-degree 0\n        # print all possible paths\n        if indeg0[i] and adj[i]:\n            path = []\n            visited = [False] * (graph + 1)\n            dfs(i)\n# Driver code\ngraph = 6",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.possible-paths-scrap",
        "documentation": {}
    },
    {
        "label": "graph",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.possible-paths-scrap",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.possible-paths-scrap",
        "peekOfCode": "graph = 6\n# set all nodes unvisited\nvisited = [False] * (graph + 1)\npath = []\n# edges = (a, b): a -> b\nedges = [(5, 0), (5, 2), (2, 3), (4, 0), (4, 1), (3, 1)]\n# adjacency list for nodes\nadj = defaultdict(list)\n# indeg0 and outdeg0 arrays\nindeg0 = [True] * graph",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.possible-paths-scrap",
        "documentation": {}
    },
    {
        "label": "visited",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.possible-paths-scrap",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.possible-paths-scrap",
        "peekOfCode": "visited = [False] * (graph + 1)\npath = []\n# edges = (a, b): a -> b\nedges = [(5, 0), (5, 2), (2, 3), (4, 0), (4, 1), (3, 1)]\n# adjacency list for nodes\nadj = defaultdict(list)\n# indeg0 and outdeg0 arrays\nindeg0 = [True] * graph\noutdeg0 = [True] * graph\nfor edge in edges:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.possible-paths-scrap",
        "documentation": {}
    },
    {
        "label": "path",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.possible-paths-scrap",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.possible-paths-scrap",
        "peekOfCode": "path = []\n# edges = (a, b): a -> b\nedges = [(5, 0), (5, 2), (2, 3), (4, 0), (4, 1), (3, 1)]\n# adjacency list for nodes\nadj = defaultdict(list)\n# indeg0 and outdeg0 arrays\nindeg0 = [True] * graph\noutdeg0 = [True] * graph\nfor edge in edges:\n    u, v = edge[0], edge[1]",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.possible-paths-scrap",
        "documentation": {}
    },
    {
        "label": "edges",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.possible-paths-scrap",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.possible-paths-scrap",
        "peekOfCode": "edges = [(5, 0), (5, 2), (2, 3), (4, 0), (4, 1), (3, 1)]\n# adjacency list for nodes\nadj = defaultdict(list)\n# indeg0 and outdeg0 arrays\nindeg0 = [True] * graph\noutdeg0 = [True] * graph\nfor edge in edges:\n    u, v = edge[0], edge[1]\n    # u -> v\n    adj[u].append(v)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.possible-paths-scrap",
        "documentation": {}
    },
    {
        "label": "adj",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.possible-paths-scrap",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.possible-paths-scrap",
        "peekOfCode": "adj = defaultdict(list)\n# indeg0 and outdeg0 arrays\nindeg0 = [True] * graph\noutdeg0 = [True] * graph\nfor edge in edges:\n    u, v = edge[0], edge[1]\n    # u -> v\n    adj[u].append(v)\n    # set indeg0[v] <- false\n    indeg0[v] = False",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.possible-paths-scrap",
        "documentation": {}
    },
    {
        "label": "indeg0",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.possible-paths-scrap",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.possible-paths-scrap",
        "peekOfCode": "indeg0 = [True] * graph\noutdeg0 = [True] * graph\nfor edge in edges:\n    u, v = edge[0], edge[1]\n    # u -> v\n    adj[u].append(v)\n    # set indeg0[v] <- false\n    indeg0[v] = False\n    # set outdeg0[u] <- false\n    outdeg0[u] = False",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.possible-paths-scrap",
        "documentation": {}
    },
    {
        "label": "outdeg0",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.possible-paths-scrap",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.possible-paths-scrap",
        "peekOfCode": "outdeg0 = [True] * graph\nfor edge in edges:\n    u, v = edge[0], edge[1]\n    # u -> v\n    adj[u].append(v)\n    # set indeg0[v] <- false\n    indeg0[v] = False\n    # set outdeg0[u] <- false\n    outdeg0[u] = False\n# print('All possible paths:')",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.possible-paths-scrap",
        "documentation": {}
    },
    {
        "label": "cmd",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.prac",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.prac",
        "peekOfCode": "cmd = \"\"\nwhile cmd != \"exit\":\n    cmd == input(\">>\")\n    if cmd == \"hello\" or cmd == \"hi\":\n        print(\"hello\")\n    elif cmd == \"goodbye\":\n        print(\"did you mean to exit?\")\n    elif cmd == \"exit\":\n        print(\"Thanks for using repl\")\n    else:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.prac",
        "documentation": {}
    },
    {
        "label": "get_count",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.python_challenges",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.python_challenges",
        "peekOfCode": "def get_count(input_str):\n    # Your code here\n    vowel_counts = {}  # this is a dictionary to store the vowels\n    for vowel in \"aeiou\":\n        count = input_str.count(vowel)\n        vowel_counts[vowel] = count\n        print(vowel_counts)\n        counts = vowel_counts.values()\n    return sum(counts)\nprint(get_count(\"adela are mere\"))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.python_challenges",
        "documentation": {}
    },
    {
        "label": "data_type",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.python_challenges",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.python_challenges",
        "peekOfCode": "def data_type(value):\n    # Your code here\n    date = datetime.date\n    if type(value) is int:\n        return \"integer\"\n    elif type(value) is str:\n        return \"string\"\n    elif type(value) is list:\n        return \"list\"\n    elif type(value) is dict:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.python_challenges",
        "documentation": {}
    },
    {
        "label": "emotify",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.python_challenges",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.python_challenges",
        "peekOfCode": "def emotify(txt):\n    # Your code here\n    # ````another option```\n    # new = txt.split(' ')\n    # print(new)\n    # ````````````\n    new_list = list(txt)\n    # print(new_list)\n    sliced_list = new_list[8:]\n    emotion = \"\".join(sliced_list)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.python_challenges",
        "documentation": {}
    },
    {
        "label": "multiply_nums",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.python_challenges",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.python_challenges",
        "peekOfCode": "def multiply_nums(nums):\n    # Your code here\n    # nums = \"2, 4, 6\"\n    integer_list = []\n    new_list = list(nums)\n    sliced_list = new_list[0::3]\n    print(sliced_list)\n    for elem in sliced_list:\n        int_elem = int(elem)\n        integer_list.append(int_elem)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.python_challenges",
        "documentation": {}
    },
    {
        "label": "add_indexes",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.python_challenges",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.python_challenges",
        "peekOfCode": "def add_indexes(numbers):\n    # Your code here\n    new_list = []\n    for index, value in enumerate(numbers):\n        sum = index + value\n        new_list.append(sum)\n    return new_list\nenumerate(my_list)  # tuples of the index and the value of the list\nlist(enumerate(a_list))  # and makes it into an array\nfor item in enumerate(a_list):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.python_challenges",
        "documentation": {}
    },
    {
        "label": "last",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.python_challenges",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.python_challenges",
        "peekOfCode": "def last(a, n):\n    # Your code here\n    if n > len(a):\n        return \"invalid\"\n    elif n == 0:\n        return []\n    else:\n        return a[-n:]  # the last 3/n elements\nprint(last([1, 2, 3, 4, 5], 1))\n\"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.python_challenges",
        "documentation": {}
    },
    {
        "label": "get_middle",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.python_challenges",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.python_challenges",
        "peekOfCode": "def get_middle(input_str):\n    # Your code here\n    return input_str[(len(input_str) - 1) // 2 : (len(input_str) + 2) // 2]\nprint(get_middle(\"test\"))\nprint(get_middle(\"testing\"))\nprint(get_middle(\"middle\"))\nprint(get_middle(\"A\"))\nprint(get_middle(\"beyoudre\"))\nprint(get_middle(\"you\"))\n# Given a string of words, return the length of the shortest word(s).",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.python_challenges",
        "documentation": {}
    },
    {
        "label": "csShortestWord",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.python_challenges",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.python_challenges",
        "peekOfCode": "def csShortestWord(input_str):\n    word = map(len, input_str.split())\n    return min(word)\n# Given an array of integers, return the sum of all the positive integers in the array.\n# Examples:\n# csSumOfPositive([1, 2, 3, -4, 5]) -> 1 + 2 + 3 + 5 = 11\n# csSumOfPositive([-3, -2, -1, 0, 1]) -> 1\n# csSumOfPositive([-3, -2]) -> 0\n# Notes:\n# If the input_arr does not contain any positive integers, the default sum should be 0.",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.python_challenges",
        "documentation": {}
    },
    {
        "label": "csSumOfPositive",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.python_challenges",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.python_challenges",
        "peekOfCode": "def csSumOfPositive(input_arr):\n    new_array = []\n    for num in input_arr:\n        if num > 0:\n            new_array.append(num)\n        else:\n            continue\n    return math.fsum(new_array)\n\"\"\"\nChallenge #10:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.python_challenges",
        "documentation": {}
    },
    {
        "label": "max_and_min",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.python_challenges",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.python_challenges",
        "peekOfCode": "def max_and_min(input_str):\n    # Your code here\n    new_list = list(map(int, input_str.split()))\n    new_string = str(max(new_list)) + \" \" + str(min(new_list))\n    print(type(new_string))\n    return new_string\nprint(max_and_min(\"1 2 3 4 5\"))\nprint(max_and_min(\"1 2 -3 4 5\"))\nprint(max_and_min(\"1 9 3 4 -5\"))\n\"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.python_challenges",
        "documentation": {}
    },
    {
        "label": "get_discounts",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.python_challenges",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.python_challenges",
        "peekOfCode": "def get_discounts(nums, percentage):\n    # Your code here\n    new_percentage = list(percentage)\n    discount_str = int(new_percentage[0] + new_percentage[1])\n    discount = int(discount_str) / 100\n    print(discount)\n    d = []\n    for num in nums:\n        num = discount * num\n        s = str(num)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.python_challenges",
        "documentation": {}
    },
    {
        "label": "csOppositeReverse",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.python_exercises",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.python_exercises",
        "peekOfCode": "def csOppositeReverse(txt):\n    return txt.swapcase()[::-1]\nprint(csOppositeReverse(text))\n# puterea a doua a fiecarui digit intr un numar\ndef csSquareAllDigits(n):\n    return int(\"\".join(str(int(i) ** 2) for i in str(n)))\n# take out the vowels of a string\nimport re\ndef csRemoveTheVowels(txt):\n    # vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.python_exercises",
        "documentation": {}
    },
    {
        "label": "csSquareAllDigits",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.python_exercises",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.python_exercises",
        "peekOfCode": "def csSquareAllDigits(n):\n    return int(\"\".join(str(int(i) ** 2) for i in str(n)))\n# take out the vowels of a string\nimport re\ndef csRemoveTheVowels(txt):\n    # vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    # return \"\".join([l for l in txt if l not in vowels])\n    return re.sub(r\"[AEIOU]\", \"\", txt, flags=re.IGNORECASE)\nprint(csRemoveTheVowels(text))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.python_exercises",
        "documentation": {}
    },
    {
        "label": "csRemoveTheVowels",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.python_exercises",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.python_exercises",
        "peekOfCode": "def csRemoveTheVowels(txt):\n    # vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    # return \"\".join([l for l in txt if l not in vowels])\n    return re.sub(r\"[AEIOU]\", \"\", txt, flags=re.IGNORECASE)\nprint(csRemoveTheVowels(text))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.python_exercises",
        "documentation": {}
    },
    {
        "label": "text",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.python_exercises",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.python_exercises",
        "peekOfCode": "text = \"Adela, hi!\"\n# def csOppositeReverse(txt):\n#   for i in range(len(txt)):\n#     if re.match(\"^[a-z]+$\", txt[i]):\n#        txt[i] = txt[i].upper()\n#        return txt[::-1]\n#     elif re.match(\"^[A-Z]+$\", txt[i]):\n#       txt[i] = txt[i].lower()\n#       return txt[::-1]\ndef csOppositeReverse(txt):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.python_exercises",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack (1)",
        "peekOfCode": "class Stack:\n    def __init__(self):\n        self.storage = []\n    def push(self, item):\n        \"\"\"\n    push the item on to the top of the stack\n    \"\"\"\n        self.storage.append(item)\n    def pop(self):\n        \"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack (1)",
        "documentation": {}
    },
    {
        "label": "Queue",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack (1)",
        "peekOfCode": "class Queue:\n    def __init__(self):\n        self.storage = []\n    def enqueue(self, item):\n        \"\"\"\n    enqueues the item in to the queue\n    \"\"\"\n        self.storage.append(item)\n    def dequeue(self):\n        \"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack (1)",
        "documentation": {}
    },
    {
        "label": "LLNode",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack (1)",
        "peekOfCode": "class LLNode:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n    def __repr__(self):\n        return f\"[{self.data}]\"\nclass LLQueue:\n    def __init__(self):\n        self.front = None\n        self.rear = None",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack (1)",
        "documentation": {}
    },
    {
        "label": "LLQueue",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack (1)",
        "peekOfCode": "class LLQueue:\n    def __init__(self):\n        self.front = None\n        self.rear = None\n    def enqueue(self, item):\n        new_node = LLNode(item)\n        if self.rear is None:\n            self.front = new_node\n            self.rear = new_node\n        else:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack (1)",
        "documentation": {}
    },
    {
        "label": "LLNode",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack (1)",
        "peekOfCode": "class LLNode:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n    def __repr__(self):\n        return f\"[{self.data}]\"\nclass LLStack:\n    def __init__(self):\n        self.top = None\n    def push(self, data):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack (1)",
        "documentation": {}
    },
    {
        "label": "LLStack",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack (1)",
        "peekOfCode": "class LLStack:\n    def __init__(self):\n        self.top = None\n    def push(self, data):\n        new_node = LLNode(data)\n        new_node.next = self.top\n        self.top = new_node\n    def pop(self):\n        if self.top is not None:\n            poped_node = self.top",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack (1)",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack (1)",
        "peekOfCode": "class Stack:\n    def __init__(self):\n        \"\"\"Initialize an empty stack\"\"\"\n        self.items = []\n    def push(self, item):\n        \"\"\"Push a new item onto the stack\"\"\"\n        self.items.append(item)\n    def pop(self):\n        \"\"\"Remove and return the last item\"\"\"\n        # If the stack is empty, return None",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack (1)",
        "documentation": {}
    },
    {
        "label": "MaxStack",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack (1)",
        "peekOfCode": "class MaxStack:\n    def __init__(self):\n        # Your code here\n        self.stack = Stack()\n        self.maxes_stack = Stack()\n    def push(self, item):\n        \"\"\"Add a new item onto the top of our stack.\"\"\"\n        # Your code here\n        self.stack.push(item)\n        if self.maxes_stack.peek() is None or item >= self.maxes_stack.peek():",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack (1)",
        "documentation": {}
    },
    {
        "label": "Song",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack (1)",
        "peekOfCode": "class Song:\n    def __init__(self, name, link):\n        self.name = name\n        self.link = link\n    def __repr__(self):\n        return f\"{self.name}: {self.link}\"\ns1 = Song(\"Bob The Builder\", \"http://www.gogle.co.uk/\")\ns2 = Song(\"Eclipse - Pink Floyd 1\", \"http://www.yashoo.com\")\ns3 = Song(\"Bob The Builder 2\", \"http://www.gogle.co.uk/\")\ns4 = Song(\"Eclipse - Pink Floyd 2\", \"http://www.yashoo.com\")",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack (1)",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack (1)",
        "peekOfCode": "class Stack:\n    def __init__(self):\n        self.data = []\n    def push(self, item):\n        self.data.append(item)\n    def pop(self):\n        if len(self.data) > 0:\n            return self.data.pop()\n        return \"The stack is empty\"\nclass QueueTwoStacks:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack (1)",
        "documentation": {}
    },
    {
        "label": "QueueTwoStacks",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack (1)",
        "peekOfCode": "class QueueTwoStacks:\n    def __init__(self):\n        # Your code here\n        self.in_stack = Stack()\n        self.out_stack = Stack()\n    def enqueue(self, item):\n        # Your code here\n        self.in_stack.push(item)\n    def dequeue(self):\n        # Your code here",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack (1)",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack (1)",
        "peekOfCode": "s = Stack()\ns.push(10)\ns.push(20)\ns.push(30)\nl = []\nl.append(s.pop())\nl.append(s.pop())\nl.append(s.pop())\nprint(l)\n# lets write a simple queue",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack (1)",
        "documentation": {}
    },
    {
        "label": "l",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack (1)",
        "peekOfCode": "l = []\nl.append(s.pop())\nl.append(s.pop())\nl.append(s.pop())\nprint(l)\n# lets write a simple queue\nclass Queue:\n    def __init__(self):\n        self.storage = []\n    def enqueue(self, item):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack (1)",
        "documentation": {}
    },
    {
        "label": "q",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack (1)",
        "peekOfCode": "q = Queue()\nq.enqueue(10)\nq.enqueue(20)\nq.enqueue(30)\nl2 = []\nl2.append(q.dequeue())\nl2.append(q.dequeue())\nl2.append(q.dequeue())\nprint(l2)\n# lets write a more performant queue",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack (1)",
        "documentation": {}
    },
    {
        "label": "l2",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack (1)",
        "peekOfCode": "l2 = []\nl2.append(q.dequeue())\nl2.append(q.dequeue())\nl2.append(q.dequeue())\nprint(l2)\n# lets write a more performant queue\n\"\"\"\n  F      R\n[10]-> [20]-> None\n\"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack (1)",
        "documentation": {}
    },
    {
        "label": "q",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack (1)",
        "peekOfCode": "q = LLQueue()\nq.enqueue(10)\nq.enqueue(20)\nq.enqueue(30)\nl2 = []\nl2.append(q.dequeue())\nl2.append(q.dequeue())\nl2.append(q.dequeue())\nl2.append(q.dequeue())\nprint(l2)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack (1)",
        "documentation": {}
    },
    {
        "label": "l2",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack (1)",
        "peekOfCode": "l2 = []\nl2.append(q.dequeue())\nl2.append(q.dequeue())\nl2.append(q.dequeue())\nl2.append(q.dequeue())\nprint(l2)\n\"\"\"# Break\n# CODE 8119\n\"\"\"\n# lets write a more performant stack",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack (1)",
        "documentation": {}
    },
    {
        "label": "ms",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack (1)",
        "peekOfCode": "ms = MaxStack()\nms.push(20)\nms.push(30)\nms.push(9)\nms.push(102)\nms.push(33)\nms.push(1)\nms.pop()\nms.pop()\nms.pop()",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack (1)",
        "documentation": {}
    },
    {
        "label": "s1",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack (1)",
        "peekOfCode": "s1 = Song(\"Bob The Builder\", \"http://www.gogle.co.uk/\")\ns2 = Song(\"Eclipse - Pink Floyd 1\", \"http://www.yashoo.com\")\ns3 = Song(\"Bob The Builder 2\", \"http://www.gogle.co.uk/\")\ns4 = Song(\"Eclipse - Pink Floyd 2\", \"http://www.yashoo.com\")\ns5 = Song(\"Bob The Builder 3\", \"http://www.gogle.co.uk/\")\ns6 = Song(\"Eclipse - Pink Floyd 3\", \"http://www.yashoo.com\")\ns7 = Song(\"Bob The Builder\", \"http://www.gogle.co.uk/\")\ns8 = Song(\"Eclipse - Pink Floyd Uncut\", \"http://www.yashoo.com\")\nclass Stack:\n    def __init__(self):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack (1)",
        "documentation": {}
    },
    {
        "label": "s2",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack (1)",
        "peekOfCode": "s2 = Song(\"Eclipse - Pink Floyd 1\", \"http://www.yashoo.com\")\ns3 = Song(\"Bob The Builder 2\", \"http://www.gogle.co.uk/\")\ns4 = Song(\"Eclipse - Pink Floyd 2\", \"http://www.yashoo.com\")\ns5 = Song(\"Bob The Builder 3\", \"http://www.gogle.co.uk/\")\ns6 = Song(\"Eclipse - Pink Floyd 3\", \"http://www.yashoo.com\")\ns7 = Song(\"Bob The Builder\", \"http://www.gogle.co.uk/\")\ns8 = Song(\"Eclipse - Pink Floyd Uncut\", \"http://www.yashoo.com\")\nclass Stack:\n    def __init__(self):\n        self.data = []",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack (1)",
        "documentation": {}
    },
    {
        "label": "s3",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack (1)",
        "peekOfCode": "s3 = Song(\"Bob The Builder 2\", \"http://www.gogle.co.uk/\")\ns4 = Song(\"Eclipse - Pink Floyd 2\", \"http://www.yashoo.com\")\ns5 = Song(\"Bob The Builder 3\", \"http://www.gogle.co.uk/\")\ns6 = Song(\"Eclipse - Pink Floyd 3\", \"http://www.yashoo.com\")\ns7 = Song(\"Bob The Builder\", \"http://www.gogle.co.uk/\")\ns8 = Song(\"Eclipse - Pink Floyd Uncut\", \"http://www.yashoo.com\")\nclass Stack:\n    def __init__(self):\n        self.data = []\n    def push(self, item):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack (1)",
        "documentation": {}
    },
    {
        "label": "s4",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack (1)",
        "peekOfCode": "s4 = Song(\"Eclipse - Pink Floyd 2\", \"http://www.yashoo.com\")\ns5 = Song(\"Bob The Builder 3\", \"http://www.gogle.co.uk/\")\ns6 = Song(\"Eclipse - Pink Floyd 3\", \"http://www.yashoo.com\")\ns7 = Song(\"Bob The Builder\", \"http://www.gogle.co.uk/\")\ns8 = Song(\"Eclipse - Pink Floyd Uncut\", \"http://www.yashoo.com\")\nclass Stack:\n    def __init__(self):\n        self.data = []\n    def push(self, item):\n        self.data.append(item)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack (1)",
        "documentation": {}
    },
    {
        "label": "s5",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack (1)",
        "peekOfCode": "s5 = Song(\"Bob The Builder 3\", \"http://www.gogle.co.uk/\")\ns6 = Song(\"Eclipse - Pink Floyd 3\", \"http://www.yashoo.com\")\ns7 = Song(\"Bob The Builder\", \"http://www.gogle.co.uk/\")\ns8 = Song(\"Eclipse - Pink Floyd Uncut\", \"http://www.yashoo.com\")\nclass Stack:\n    def __init__(self):\n        self.data = []\n    def push(self, item):\n        self.data.append(item)\n    def pop(self):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack (1)",
        "documentation": {}
    },
    {
        "label": "s6",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack (1)",
        "peekOfCode": "s6 = Song(\"Eclipse - Pink Floyd 3\", \"http://www.yashoo.com\")\ns7 = Song(\"Bob The Builder\", \"http://www.gogle.co.uk/\")\ns8 = Song(\"Eclipse - Pink Floyd Uncut\", \"http://www.yashoo.com\")\nclass Stack:\n    def __init__(self):\n        self.data = []\n    def push(self, item):\n        self.data.append(item)\n    def pop(self):\n        if len(self.data) > 0:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack (1)",
        "documentation": {}
    },
    {
        "label": "s7",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack (1)",
        "peekOfCode": "s7 = Song(\"Bob The Builder\", \"http://www.gogle.co.uk/\")\ns8 = Song(\"Eclipse - Pink Floyd Uncut\", \"http://www.yashoo.com\")\nclass Stack:\n    def __init__(self):\n        self.data = []\n    def push(self, item):\n        self.data.append(item)\n    def pop(self):\n        if len(self.data) > 0:\n            return self.data.pop()",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack (1)",
        "documentation": {}
    },
    {
        "label": "s8",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack (1)",
        "peekOfCode": "s8 = Song(\"Eclipse - Pink Floyd Uncut\", \"http://www.yashoo.com\")\nclass Stack:\n    def __init__(self):\n        self.data = []\n    def push(self, item):\n        self.data.append(item)\n    def pop(self):\n        if len(self.data) > 0:\n            return self.data.pop()\n        return \"The stack is empty\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack (1)",
        "documentation": {}
    },
    {
        "label": "q",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack (1)",
        "peekOfCode": "q = QueueTwoStacks()\nq.enqueue(s1)\nq.enqueue(s2)\nq.enqueue(s3)\nq.enqueue(s4)\nq.enqueue(s5)\nq.enqueue(s6)\nq.enqueue(s7)\nl3 = []\nl3.append(q.dequeue())",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack (1)",
        "documentation": {}
    },
    {
        "label": "l3",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack (1)",
        "peekOfCode": "l3 = []\nl3.append(q.dequeue())\nl3.append(q.dequeue())\nl3.append(q.dequeue())\nl3.append(q.dequeue())\nl3.append(q.dequeue())\nl3.append(q.dequeue())\nl3.append(q.dequeue())\nprint(l3)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack (1)",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack",
        "peekOfCode": "class Stack:\n  def __init__(self):\n    self.storage = []\n  def push(self, item):\n    \"\"\"\n    push the item on to the top of the stack\n    \"\"\"\n    self.storage.append(item)\n  def pop(self):\n    \"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack",
        "documentation": {}
    },
    {
        "label": "Queue",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack",
        "peekOfCode": "class Queue:\n    def __init__(self):\n        self.storage = []\n    def enqueue(self, item):\n        self.storage.append(item)\n    def pop(self):\n        if len(self.storage) > 0:\n            return self.storage.pop()\n        return \"The Stack is Empty\"\nclass Stack:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack",
        "peekOfCode": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)\n    def pop(self):\n        if not self.items:\n            return None\n        return self.items.pop()\n    def peek(self):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack",
        "documentation": {}
    },
    {
        "label": "MaxStack",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack",
        "peekOfCode": "class MaxStack:\n    def __init__(self):\n    def push(self, item):\n    def pop(self):\n    def get_max(self):\nclass Stack:\n    def __init__(self):\n        self.data = []\n    def push(self, item):\n        self.data.append(item)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack",
        "peekOfCode": "class Stack:\n    def __init__(self):\n        self.data = []\n    def push(self, item):\n        self.data.append(item)\n    def pop(self):\n        if len(self.data) > 0:\n            return self.data.pop()\n        return \"The stack is empty\"\nclass QueueTwoStacks:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack",
        "documentation": {}
    },
    {
        "label": "QueueTwoStacks",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack",
        "peekOfCode": "class QueueTwoStacks:\n    def __init__(self):\n    def enqueue(self, item):\n    def dequeue(self):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack",
        "peekOfCode": "s = Stack()\ns.push(10)\ns.push(20)\ns.push(30)\nl = []\nl.append(s.pop())\nl.append(s.pop())\nl.append(s.pop())\nprint(l)\nclass Queue:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack",
        "documentation": {}
    },
    {
        "label": "l",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack",
        "peekOfCode": "l = []\nl.append(s.pop())\nl.append(s.pop())\nl.append(s.pop())\nprint(l)\nclass Queue:\n    def __init__(self):\n        self.storage = []\n    def enqueue(self, item):\n        self.storage.append(item)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.qandstack",
        "documentation": {}
    },
    {
        "label": "csRaindrops",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.rainDrops",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.rainDrops",
        "peekOfCode": "def csRaindrops(number):\n    output_string = \"\"\n    has_3_factor = output_string + \"Pling\"\n    if number % 3 == 0:\n        output_string += \"Pling\"\n    elif number % 5 == 0:\n        output_string += \"Plang\"\n    elif number % 7 == 0:\n        output_string += \"Plong\"\n    elif output_string is \"\":",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.rainDrops",
        "documentation": {}
    },
    {
        "label": "csRemoveDuplicateWords",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.remove-dupes-from-sentence",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.remove-dupes-from-sentence",
        "peekOfCode": "def csRemoveDuplicateWords(input_str):\n    return \" \".join(dict.fromkeys(input_str.split()))\nprint(\n    csRemoveDuplicateWords(\n        \"alpha bravo bravo golf golf golf delta alpha bravo bravo golf golf golf delta\"\n    )\n)\nprint(csRemoveDuplicateWords(\"my dog is my dog is super smart\"))\nprint(csRemoveDuplicateWords(\"Your tests are broken broken broken broken broken\"))\nprint(",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.remove-dupes-from-sentence",
        "documentation": {}
    },
    {
        "label": "lib",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.remove-dupes-from-sentence",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.remove-dupes-from-sentence",
        "peekOfCode": "lib = BigO()\ncomplexity = lib.test(csRemoveDuplicateWords, \"random\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"sorted\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"reversed\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"partial\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"Ksorted\")",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.remove-dupes-from-sentence",
        "documentation": {}
    },
    {
        "label": "complexity",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.remove-dupes-from-sentence",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.remove-dupes-from-sentence",
        "peekOfCode": "complexity = lib.test(csRemoveDuplicateWords, \"random\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"sorted\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"reversed\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"partial\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"Ksorted\")",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.remove-dupes-from-sentence",
        "documentation": {}
    },
    {
        "label": "complexity",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.remove-dupes-from-sentence",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.remove-dupes-from-sentence",
        "peekOfCode": "complexity = lib.test(csRemoveDuplicateWords, \"sorted\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"reversed\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"partial\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"Ksorted\")",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.remove-dupes-from-sentence",
        "documentation": {}
    },
    {
        "label": "complexity",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.remove-dupes-from-sentence",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.remove-dupes-from-sentence",
        "peekOfCode": "complexity = lib.test(csRemoveDuplicateWords, \"reversed\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"partial\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"Ksorted\")",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.remove-dupes-from-sentence",
        "documentation": {}
    },
    {
        "label": "complexity",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.remove-dupes-from-sentence",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.remove-dupes-from-sentence",
        "peekOfCode": "complexity = lib.test(csRemoveDuplicateWords, \"partial\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"Ksorted\")",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.remove-dupes-from-sentence",
        "documentation": {}
    },
    {
        "label": "complexity",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.remove-dupes-from-sentence",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.remove-dupes-from-sentence",
        "peekOfCode": "complexity = lib.test(csRemoveDuplicateWords, \"Ksorted\")",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.remove-dupes-from-sentence",
        "documentation": {}
    },
    {
        "label": "removeKFromList",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.removeKFromList",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.removeKFromList",
        "peekOfCode": "def removeKFromList(l, k):\n    if l == None:\n        return l\n    while l != None and l.value == k:\n        l = l.next\n    n = l\n    while n != None and n.next != None:\n        if n.next.value == k:\n            n.next = n.next.next\n        else:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.removeKFromList",
        "documentation": {}
    },
    {
        "label": "repeat_it",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.repeat_it",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.repeat_it",
        "peekOfCode": "def repeat_it(input_str):\n    # Your code here\n    new_list = list(input_str)\n    empty = []\n    for index, letter in enumerate(new_list):\n        letter = \"-\" + letter.upper() + (index * letter).lower()\n        empty.append(letter)\n        new_str = \"\".join(empty)\n        transformed = list(new_str)\n        good_string = transformed[1:]",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.repeat_it",
        "documentation": {}
    },
    {
        "label": "csWhereIsBob",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.return-index-of-string-in-list",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.return-index-of-string-in-list",
        "peekOfCode": "def csWhereIsBob(names):\n    bob = \"Bob\"\n    if bob in names:\n        return names.index(\"Bob\")\n    else:\n        return -1",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.return-index-of-string-in-list",
        "documentation": {}
    },
    {
        "label": "csReverseString",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.rev-string",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.rev-string",
        "peekOfCode": "def csReverseString(chars):\n    rev = chars[::-1]\n    print(rev)\n    return rev\n# def csReverseString2(chars):\n#     new_string = ''\n#     index = len(chars)\n#     while index:\n#         index -= 1                    # index = index - 1\n#         new_string += chars[index]  # new_string = new_string + character",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.rev-string",
        "documentation": {}
    },
    {
        "label": "csReverseString2",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.rev-string",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.rev-string",
        "peekOfCode": "def csReverseString2(chars):\n    new_string = \"\"\n    index = len(chars)\n    while index:\n        index -= 1  # index = index - 1\n        new_string += chars[index]  # new_string = new_string + character\n    return new_string\nprint(csReverseString2(\"helloworld\"))\n# Input:\n# chars:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.rev-string",
        "documentation": {}
    },
    {
        "label": "csReverseString",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.reverse-string",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.reverse-string",
        "peekOfCode": "def csReverseString(chars):\n    rev = chars[::-1]\n    print(rev)\n    return rev",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.reverse-string",
        "documentation": {}
    },
    {
        "label": "csReverseIntegerBits",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.reverseIntegerBits",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.reverseIntegerBits",
        "peekOfCode": "def csReverseIntegerBits(n):\n    reversed_num = 0\n    while n > 0:\n        reversed_num = reversed_num << 1\n        if n & 1 == 1:\n            reversed_num = reversed_num ^ 1\n        n = n >> 1\n    return reversed_num",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.reverseIntegerBits",
        "documentation": {}
    },
    {
        "label": "reverseLinkedList",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.reverseLinkedList",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.reverseLinkedList",
        "peekOfCode": "def reverseLinkedList(l):\n    prev = None\n    current = l\n    while current:\n        next = current.next\n        current.next = prev\n        prev = current\n        current = next\n    return prev",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.reverseLinkedList",
        "documentation": {}
    },
    {
        "label": "reverseList",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.reverseNodesInKGroups",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.reverseNodesInKGroups",
        "peekOfCode": "def reverseList(head, tail):\n    prev = None\n    while prev != tail:\n        prev, prev.next, head = head, prev, head.next\n    return prev\ndef reverseNodesInKGroups(l, k):\n    if k < 2:\n        return l\n    p = ListNode(-1)\n    p.next = l",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.reverseNodesInKGroups",
        "documentation": {}
    },
    {
        "label": "reverseNodesInKGroups",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.reverseNodesInKGroups",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.reverseNodesInKGroups",
        "peekOfCode": "def reverseNodesInKGroups(l, k):\n    if k < 2:\n        return l\n    p = ListNode(-1)\n    p.next = l\n    ret = p\n    while True:\n        flag = True\n        tmp = p\n        for i in range(k):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.reverseNodesInKGroups",
        "documentation": {}
    },
    {
        "label": "reverseSentence",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.reverseSentence",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.reverseSentence",
        "peekOfCode": "def reverseSentence(sentence):\n    list = sentence.split(\" \")\n    i, out = list.__len__() - 1, \"\"\n    while i >= 0:\n        out += list[i] + \" \"\n        i -= 1\n    return out[0:-1]",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.reverseSentence",
        "documentation": {}
    },
    {
        "label": "reverse_sentence",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.reverse_string",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.reverse_string",
        "peekOfCode": "def reverse_sentence(sentence):\n    arr = [c for c in sentence]  # or just arr = list(sentence)\n    start = 0\n    end = len(arr) - 1\n    while start < end:\n        # reverse the array from the start index to the end index by\n        # swaping each char with the pair from the other part of the array\n        swap(arr, start, end)\n        start += 1\n        end -= 1",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.reverse_string",
        "documentation": {}
    },
    {
        "label": "swap",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.reverse_string",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.reverse_string",
        "peekOfCode": "def swap(arr, i, j):\n    # swapping two elements from a same array\n    arr[i], arr[j] = arr[j], arr[i]\n    \"\"\"same as\n    temp = arr[i]\n    arr[i] = arr[j]\n    arr[j] = temp\n    \"\"\"\n###########\n# Testing #",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.reverse_string",
        "documentation": {}
    },
    {
        "label": "rotatedRectSum",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.rotatedRectSum",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.rotatedRectSum",
        "peekOfCode": "def rotatedRectSum(matrix, a, b):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.rotatedRectSum",
        "documentation": {}
    },
    {
        "label": "rotateImage",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.rotateImage",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.rotateImage",
        "peekOfCode": "def rotateImage(a):\n    w = len(a)\n    h = w\n    img = [0] * h\n    for col in range(h):\n        img_row = [0] * w\n        for row in range(w):\n            img_row[h - row - 1] = a[row][col]\n        img[col] = img_row\n    return img",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.rotateImage",
        "documentation": {}
    },
    {
        "label": "schoolGroups",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.schoolGroups",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.schoolGroups",
        "peekOfCode": "def schoolGroups(years, groups):\n    alphabet = list(map(chr, range(97, 123)))\n    emp_list = []\n    for year in range(1, years + 1):\n        for group in range(0, groups):\n            emp_list.append(f\"{year}{alphabet[group]}\")\n    # print(emp_list)\n    return \", \".join(emp_list)\nprint(schoolGroups(1, 4))\nprint(schoolGroups(6, 7))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.schoolGroups",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap (2)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap (2)",
        "peekOfCode": "class ListNode(object):\n    def __init__(self, x):\n        self.value = x\n        self.next = None\ndef condense_linked_list(node):\n    root = ListNode(0)\n    root.next = node.next\n    p1 = node.next\n    if p1 is None:\n        return root.next",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap (2)",
        "documentation": {}
    },
    {
        "label": "condense_linked_list",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap (2)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap (2)",
        "peekOfCode": "def condense_linked_list(node):\n    root = ListNode(0)\n    root.next = node.next\n    p1 = node.next\n    if p1 is None:\n        return root.next\n    p = p1.next\n    if p is None:\n        return root.next\n    while p:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap (2)",
        "documentation": {}
    },
    {
        "label": "uncover_spy",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap (3)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap (3)",
        "peekOfCode": "def uncover_spy(n, trust):\n    degrees = [0] * n\n    for i, j in trust:\n        degrees[i - 1] -= 1\n        degrees[j - 1] += 1\n    for i in range(len(degrees)):\n        if degrees[i] == n - 1:\n            return i + 1\n    return -1",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap (3)",
        "documentation": {}
    },
    {
        "label": "Tree",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap (4)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap (4)",
        "peekOfCode": "class Tree(object):\n    def __init__(self, x):\n        self.value = x\n        self.left = None\n        self.right = None\ndef csBSTRangeSum(root, lower, upper):\n    if not root:\n        return 0\n    res = 0\n    if lower <= root.value <= upper:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap (4)",
        "documentation": {}
    },
    {
        "label": "csBSTRangeSum",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap (4)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap (4)",
        "peekOfCode": "def csBSTRangeSum(root, lower, upper):\n    if not root:\n        return 0\n    res = 0\n    if lower <= root.value <= upper:\n        res += root.value\n        res += csBSTRangeSum(root.left, lower, upper)\n        res += csBSTRangeSum(root.right, lower, upper)\n    elif root.value < lower:\n        res += csBSTRangeSum(root.right, lower, upper)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap (4)",
        "documentation": {}
    },
    {
        "label": "top_k_frequent",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap (5)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap (5)",
        "peekOfCode": "def top_k_frequent(words, k):\n    # Initializing a dictionary\n    d = dict()\n    # Iterating through the wordsay\n    for i in words:\n        # If the element is not in\n        # the dictionary, adding it\n        # with the frequency as 1\n        if i not in d:\n            d[i] = 1",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap (5)",
        "documentation": {}
    },
    {
        "label": "K",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap (5)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap (5)",
        "peekOfCode": "K = 3\nprint(top_k_frequent(words, K))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap (5)",
        "documentation": {}
    },
    {
        "label": "languages",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap (6)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap (6)",
        "peekOfCode": "languages = [\"Java\", \"Python\", \"JavaScript\"]\nversions = [14, 3, 6]\nresult = zip(languages, versions)\nprint(list(result))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap (6)",
        "documentation": {}
    },
    {
        "label": "versions",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap (6)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap (6)",
        "peekOfCode": "versions = [14, 3, 6]\nresult = zip(languages, versions)\nprint(list(result))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap (6)",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap (6)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap (6)",
        "peekOfCode": "result = zip(languages, versions)\nprint(list(result))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap (6)",
        "documentation": {}
    },
    {
        "label": "csRemoveDuplicateWords",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap",
        "peekOfCode": "def csRemoveDuplicateWords(input_str):\n    return \" \".join(dict.fromkeys(input_str.split()))\nprint(\n    csRemoveDuplicateWords(\n        \"alpha bravo bravo golf golf golf delta alpha bravo bravo golf golf golf delta\"\n    )\n)\nprint(csRemoveDuplicateWords(\"my dog is my dog is super smart\"))\nprint(csRemoveDuplicateWords(\"Your tests are broken broken broken broken broken\"))\nprint(",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap",
        "documentation": {}
    },
    {
        "label": "lib",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap",
        "peekOfCode": "lib = BigO()\ncomplexity = lib.test(csRemoveDuplicateWords, \"random\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"sorted\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"reversed\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"partial\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"Ksorted\")",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap",
        "documentation": {}
    },
    {
        "label": "complexity",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap",
        "peekOfCode": "complexity = lib.test(csRemoveDuplicateWords, \"random\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"sorted\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"reversed\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"partial\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"Ksorted\")",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap",
        "documentation": {}
    },
    {
        "label": "complexity",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap",
        "peekOfCode": "complexity = lib.test(csRemoveDuplicateWords, \"sorted\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"reversed\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"partial\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"Ksorted\")",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap",
        "documentation": {}
    },
    {
        "label": "complexity",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap",
        "peekOfCode": "complexity = lib.test(csRemoveDuplicateWords, \"reversed\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"partial\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"Ksorted\")",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap",
        "documentation": {}
    },
    {
        "label": "complexity",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap",
        "peekOfCode": "complexity = lib.test(csRemoveDuplicateWords, \"partial\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"Ksorted\")",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap",
        "documentation": {}
    },
    {
        "label": "complexity",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap",
        "peekOfCode": "complexity = lib.test(csRemoveDuplicateWords, \"Ksorted\")",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap2 (2)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap2 (2)",
        "peekOfCode": "class ListNode(object):\n    def __init__(self, x):\n        self.value = x\n        self.next = None\ndef condense_linked_list(node):\n    root = ListNode(node.value)\n    root.next = node\n    p1 = root\n    if p1 is None:\n        return root.next",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap2 (2)",
        "documentation": {}
    },
    {
        "label": "condense_linked_list",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap2 (2)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap2 (2)",
        "peekOfCode": "def condense_linked_list(node):\n    root = ListNode(node.value)\n    root.next = node\n    p1 = root\n    if p1 is None:\n        return root.next\n    p = p1.next\n    if p is None:\n        return root.next\n    while p:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap2 (2)",
        "documentation": {}
    },
    {
        "label": "top_k_frequent",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap2 (3)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap2 (3)",
        "peekOfCode": "def top_k_frequent(words, k):\n    d = dict()\n    for i in words:\n        if i not in d:\n            d[i] = 1\n        else:\n            temp = d[i]\n            temp += 1\n            d[i] = temp\n    if len(d) < k:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap2 (3)",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap2 (3)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap2 (3)",
        "peekOfCode": "k = 3\nprint(top_k_frequent(words, k))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap2 (3)",
        "documentation": {}
    },
    {
        "label": "csRemoveDuplicateWords",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap2",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap2",
        "peekOfCode": "def csRemoveDuplicateWords(input_str):\n    return \" \".join(dict.fromkeys(input_str.split()))\nprint(\n    csRemoveDuplicateWords(\n        \"alpha bravo bravo golf golf golf delta alpha bravo bravo golf golf golf delta\"\n    )\n)\nprint(csRemoveDuplicateWords(\"my dog is my dog is super smart\"))\nprint(csRemoveDuplicateWords(\"Your tests are broken broken broken broken broken\"))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap2",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap3 (2)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap3 (2)",
        "peekOfCode": "class ListNode(object):\n  def __init__(self, x):\n    self.value = x\n    self.next = None\ndef condense_linked_list(node):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap3 (2)",
        "documentation": {}
    },
    {
        "label": "condense_linked_list",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap3 (2)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap3 (2)",
        "peekOfCode": "def condense_linked_list(node):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap3 (2)",
        "documentation": {}
    },
    {
        "label": "csRemoveDuplicateWords",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap3",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap3",
        "peekOfCode": "def csRemoveDuplicateWords(input_str):\n    return \" \".join(dict.fromkeys(input_str.split()))\nprint(\n    csRemoveDuplicateWords(\n        \"alpha bravo bravo golf golf golf delta alpha bravo bravo golf golf golf delta\"\n    )\n)\nprint(csRemoveDuplicateWords(\"my dog is my dog is super smart\"))\nprint(csRemoveDuplicateWords(\"Your tests are broken broken broken broken broken\"))\nprint(",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap3",
        "documentation": {}
    },
    {
        "label": "lib",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap3",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap3",
        "peekOfCode": "lib = BigO()\ncomplexity = lib.test(csRemoveDuplicateWords, \"random\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"sorted\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"reversed\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"partial\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"Ksorted\")",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap3",
        "documentation": {}
    },
    {
        "label": "complexity",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap3",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap3",
        "peekOfCode": "complexity = lib.test(csRemoveDuplicateWords, \"random\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"sorted\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"reversed\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"partial\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"Ksorted\")",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap3",
        "documentation": {}
    },
    {
        "label": "complexity",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap3",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap3",
        "peekOfCode": "complexity = lib.test(csRemoveDuplicateWords, \"sorted\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"reversed\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"partial\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"Ksorted\")",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap3",
        "documentation": {}
    },
    {
        "label": "complexity",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap3",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap3",
        "peekOfCode": "complexity = lib.test(csRemoveDuplicateWords, \"reversed\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"partial\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"Ksorted\")",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap3",
        "documentation": {}
    },
    {
        "label": "complexity",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap3",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap3",
        "peekOfCode": "complexity = lib.test(csRemoveDuplicateWords, \"partial\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"Ksorted\")",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap3",
        "documentation": {}
    },
    {
        "label": "complexity",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap3",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap3",
        "peekOfCode": "complexity = lib.test(csRemoveDuplicateWords, \"Ksorted\")",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap3",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap4",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap4",
        "peekOfCode": "class ListNode(object):\n  def __init__(self, x):\n    self.value = x\n    self.next = None\ndef condense_linked_list(node):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap4",
        "documentation": {}
    },
    {
        "label": "condense_linked_list",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap4",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap4",
        "peekOfCode": "def condense_linked_list(node):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap4",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap5",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap5",
        "peekOfCode": "class ListNode(object):\n    def __init__(self, x):\n        self.value = x\n        self.next = None\ndef condense_linked_list(node):\n    ptr1 = None\n    ptr2 = None\n    dup = None\n    ptr1 = node\n    # Pick elements one by one",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap5",
        "documentation": {}
    },
    {
        "label": "condense_linked_list",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap5",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap5",
        "peekOfCode": "def condense_linked_list(node):\n    ptr1 = None\n    ptr2 = None\n    dup = None\n    ptr1 = node\n    # Pick elements one by one\n    while ptr1 != None and ptr1.next != None:\n        ptr2 = ptr1\n        # Compare the picked element with rest\n        # of the elements",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.scrap5",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.script (2)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.script (2)",
        "peekOfCode": "class Node:\n    def __init__(self, data=None, next=None):\n        self.data = data\n        self.next = next\n# Helper function to print a given linked list\ndef printList(head):\n    ptr = head\n    while ptr:\n        print(ptr.data, end=\" —> \")\n        ptr = ptr.next",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.script (2)",
        "documentation": {}
    },
    {
        "label": "printList",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.script (2)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.script (2)",
        "peekOfCode": "def printList(head):\n    ptr = head\n    while ptr:\n        print(ptr.data, end=\" —> \")\n        ptr = ptr.next\n    print(\"None\")\n# Function to insert a given node at its correct sorted position into\n# a given list sorted in increasing order\ndef sortedInsert(head, newNode):\n    # special case for the head end",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.script (2)",
        "documentation": {}
    },
    {
        "label": "sortedInsert",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.script (2)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.script (2)",
        "peekOfCode": "def sortedInsert(head, newNode):\n    # special case for the head end\n    if head is None or head.data >= newNode.data:\n        newNode.next = head\n        head = newNode\n        return head\n    # Locate the node before the poof insertion\n    current = head\n    while current.next and current.next.data < newNode.data:\n        current = current.next",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.script (2)",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.script",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.script",
        "peekOfCode": "class Node:\n    def __init__(self, data=None, next=None):\n        self.data = data\n        self.next = next\n# Helper function to print a given linked list\ndef printList(head):\n    ptr = head\n    while ptr:\n        print(ptr.data, end=\" —> \")\n        ptr = ptr.next",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.script",
        "documentation": {}
    },
    {
        "label": "printList",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.script",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.script",
        "peekOfCode": "def printList(head):\n    ptr = head\n    while ptr:\n        print(ptr.data, end=\" —> \")\n        ptr = ptr.next\n    print(\"None\")\n# Function to insert a given node at its correct sorted position into\n# a given list sorted in increasing order\ndef sortedInsert(head, newNode):\n    # special case for the head end",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.script",
        "documentation": {}
    },
    {
        "label": "sortedInsert",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.script",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.script",
        "peekOfCode": "def sortedInsert(head, newNode):\n    # special case for the head end\n    if head is None or head.data >= newNode.data:\n        newNode.next = head\n        head = newNode\n        return head\n    # Locate the node before the poof insertion\n    current = head\n    while current.next and current.next.data < newNode.data:\n        current = current.next",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.script",
        "documentation": {}
    },
    {
        "label": "linear_search",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.searching",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.searching",
        "peekOfCode": "def linear_search(data, target):\n    for i in range(len(data)):\n        if data[i] == target:\n            return (i, data[i])\n    return -1\nprint(linear_search(data, target))\n\"\"\"\nSearching (Binary)\n\"\"\"\n# 0 (log(n))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.searching",
        "documentation": {}
    },
    {
        "label": "binary_search",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.searching",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.searching",
        "peekOfCode": "def binary_search(data, target):\n    begin = 0\n    end = len(data) - 1\n    while not end < begin:\n        guess_index = (end + begin) // 2\n        if data[guess_index] == target:\n            return (guess_index, target)\n        elif data[guess_index] < target:\n            begin = guess_index + 1\n        else:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.searching",
        "documentation": {}
    },
    {
        "label": "while_rec",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.searching",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.searching",
        "peekOfCode": "def while_rec(n):  # O(n)\n    if not n > 0:  # O(1)\n        return\n    print(n)  # O(1)\n    while_rec(n - 1)  # O(1)\nstart = time.time()\nwhile_rec(n)\nend = time.time()\nprint(f\"func runtime = {end - start}\")\n# memoization",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.searching",
        "documentation": {}
    },
    {
        "label": "memo_func",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.searching",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.searching",
        "peekOfCode": "def memo_func(f):\n    cache = {}\n    def memo_helper(n):\n        if n not in cache:\n            cache[n] = f(n)\n        return cache[n]\n    return memo_helper\n\"\"\"\n[ 0, 1, 1, 2, 3, 5, 8]\nfib(n) => fib(n - 1) + fib(n - 2)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.searching",
        "documentation": {}
    },
    {
        "label": "fib",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.searching",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.searching",
        "peekOfCode": "def fib(n):\n    if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n@lru_cache(maxsize=1000000)\ndef fib2(n):\n    if n <= 1:\n        return n\n    else:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.searching",
        "documentation": {}
    },
    {
        "label": "fib2",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.searching",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.searching",
        "peekOfCode": "def fib2(n):\n    if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n# fib(46)\n# memfib = memo_func(fib)\n# memfib(46)\nfib(460)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.searching",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.searching",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.searching",
        "peekOfCode": "data = [12, 23, 1, 34, 56, 100]\ntarget = 10\n# starting at the beginning of the data\n# take each value and compare that value to a target value\n# if they are equal return the index of the target value or return the target value\n# if we reach the end of the data, without finding the target then we can return -1\ndef linear_search(data, target):\n    for i in range(len(data)):\n        if data[i] == target:\n            return (i, data[i])",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.searching",
        "documentation": {}
    },
    {
        "label": "target",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.searching",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.searching",
        "peekOfCode": "target = 10\n# starting at the beginning of the data\n# take each value and compare that value to a target value\n# if they are equal return the index of the target value or return the target value\n# if we reach the end of the data, without finding the target then we can return -1\ndef linear_search(data, target):\n    for i in range(len(data)):\n        if data[i] == target:\n            return (i, data[i])\n    return -1",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.searching",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.searching",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.searching",
        "peekOfCode": "data = [12, 23, 45, 67, 99, 200]\ntarget = 99\n# keep track of begin and end\n# while the begin and end do not overlap\n# create a guess index in the middle of the view of data\n# check if the data at the guess index is equal to the target\n# return (guess_index, guess)\n# otherwise is the data at the guess index less than the target\n# set the begin to the guess_index + 1\n# otherwise",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.searching",
        "documentation": {}
    },
    {
        "label": "target",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.searching",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.searching",
        "peekOfCode": "target = 99\n# keep track of begin and end\n# while the begin and end do not overlap\n# create a guess index in the middle of the view of data\n# check if the data at the guess index is equal to the target\n# return (guess_index, guess)\n# otherwise is the data at the guess index less than the target\n# set the begin to the guess_index + 1\n# otherwise\n# set end to the guess_index - 1",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.searching",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.searching",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.searching",
        "peekOfCode": "n = 10\ns = []\nstart = time.time()\nwhile n > 0:  # O(n)\n    print(n)\n    n -= 1\nend = time.time()\nprint(f\"loop runtime = {end - start}\")\n\"\"\"\nRecursive Function",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.searching",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.searching",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.searching",
        "peekOfCode": "s = []\nstart = time.time()\nwhile n > 0:  # O(n)\n    print(n)\n    n -= 1\nend = time.time()\nprint(f\"loop runtime = {end - start}\")\n\"\"\"\nRecursive Function\n\"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.searching",
        "documentation": {}
    },
    {
        "label": "start",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.searching",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.searching",
        "peekOfCode": "start = time.time()\nwhile n > 0:  # O(n)\n    print(n)\n    n -= 1\nend = time.time()\nprint(f\"loop runtime = {end - start}\")\n\"\"\"\nRecursive Function\n\"\"\"\nimport time",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.searching",
        "documentation": {}
    },
    {
        "label": "end",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.searching",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.searching",
        "peekOfCode": "end = time.time()\nprint(f\"loop runtime = {end - start}\")\n\"\"\"\nRecursive Function\n\"\"\"\nimport time\nn = 10\ndef while_rec(n):  # O(n)\n    if not n > 0:  # O(1)\n        return",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.searching",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.searching",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.searching",
        "peekOfCode": "n = 10\ndef while_rec(n):  # O(n)\n    if not n > 0:  # O(1)\n        return\n    print(n)  # O(1)\n    while_rec(n - 1)  # O(1)\nstart = time.time()\nwhile_rec(n)\nend = time.time()\nprint(f\"func runtime = {end - start}\")",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.searching",
        "documentation": {}
    },
    {
        "label": "start",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.searching",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.searching",
        "peekOfCode": "start = time.time()\nwhile_rec(n)\nend = time.time()\nprint(f\"func runtime = {end - start}\")\n# memoization\n# generic memo_func\ndef memo_func(f):\n    cache = {}\n    def memo_helper(n):\n        if n not in cache:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.searching",
        "documentation": {}
    },
    {
        "label": "end",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.searching",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.searching",
        "peekOfCode": "end = time.time()\nprint(f\"func runtime = {end - start}\")\n# memoization\n# generic memo_func\ndef memo_func(f):\n    cache = {}\n    def memo_helper(n):\n        if n not in cache:\n            cache[n] = f(n)\n        return cache[n]",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.searching",
        "documentation": {}
    },
    {
        "label": "binarySearch",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.sorted-scrap",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.sorted-scrap",
        "peekOfCode": "def binarySearch(arr, key):\n    min = 0\n    max = len(arr) - 1\n    while not max < min:\n        guess = (max + min) // 2\n        if key == arr[guess]:\n            return arr[guess]\n        elif key > arr[guess]:\n            min = guess + 1\n        else:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.sorted-scrap",
        "documentation": {}
    },
    {
        "label": "findValueSortedShiftedArray",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.sorted-scrap",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.sorted-scrap",
        "peekOfCode": "def findValueSortedShiftedArray(nums, target):\n    pivot = 3\n    if nums[pivot] == target:\n        return pivot\n    if nums[pivot] >= target:\n        value = binarySearch(nums[pivot + 1 :], target)\n        print(value)\n        if value == target:\n            return nums.index(value)\n##-------------------------------------------------------------------------------------------",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.sorted-scrap",
        "documentation": {}
    },
    {
        "label": "nums1",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.sorted-scrap",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.sorted-scrap",
        "peekOfCode": "nums1 = [4, 5, 6, 7, 0, 1, 2]\ntarget1 = 3\nprint(findValueSortedShiftedArray(nums1, target1))\nprint(\"---------------nums = [4,5,6,7,0,1,2], target = 3--------------------------\")\nprint(findValueSortedShiftedArray([4, 5, 6, 7, 0, 1, 2], 3))\nprint(\n    \"---------------nums = [1, 3, 5, 6]-------target = 5----------------------------------\"\n)\nnums = [1, 3, 5, 6]\ntarget = 5",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.sorted-scrap",
        "documentation": {}
    },
    {
        "label": "target1",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.sorted-scrap",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.sorted-scrap",
        "peekOfCode": "target1 = 3\nprint(findValueSortedShiftedArray(nums1, target1))\nprint(\"---------------nums = [4,5,6,7,0,1,2], target = 3--------------------------\")\nprint(findValueSortedShiftedArray([4, 5, 6, 7, 0, 1, 2], 3))\nprint(\n    \"---------------nums = [1, 3, 5, 6]-------target = 5----------------------------------\"\n)\nnums = [1, 3, 5, 6]\ntarget = 5\nprint(findValueSortedShiftedArray(nums, target))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.sorted-scrap",
        "documentation": {}
    },
    {
        "label": "print(\"---------------nums",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.sorted-scrap",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.sorted-scrap",
        "peekOfCode": "print(\"---------------nums = [4,5,6,7,0,1,2], target = 3--------------------------\")\nprint(findValueSortedShiftedArray([4, 5, 6, 7, 0, 1, 2], 3))\nprint(\n    \"---------------nums = [1, 3, 5, 6]-------target = 5----------------------------------\"\n)\nnums = [1, 3, 5, 6]\ntarget = 5\nprint(findValueSortedShiftedArray(nums, target))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.sorted-scrap",
        "documentation": {}
    },
    {
        "label": "nums",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.sorted-scrap",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.sorted-scrap",
        "peekOfCode": "nums = [1, 3, 5, 6]\ntarget = 5\nprint(findValueSortedShiftedArray(nums, target))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.sorted-scrap",
        "documentation": {}
    },
    {
        "label": "target",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.sorted-scrap",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.sorted-scrap",
        "peekOfCode": "target = 5\nprint(findValueSortedShiftedArray(nums, target))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.sorted-scrap",
        "documentation": {}
    },
    {
        "label": "searchInsert",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.sorted-scrap2",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.sorted-scrap2",
        "peekOfCode": "def searchInsert(nums, target):\n    try:\n        return nums.index(target)\n    except IndexError:  # best to use explicit except\n        for index, value in enumerate(nums):  # more pythonic than range(len(nums))\n            if value > target:\n                return index\n        return len(nums)\nprint(searchInsert([1, 3, 5, 6], 10))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.sorted-scrap2",
        "documentation": {}
    },
    {
        "label": "binarySearch",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.sortedShifted",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.sortedShifted",
        "peekOfCode": "def binarySearch(arr, key):\n    min = 0\n    max = len(arr) - 1\n    while not max < min:\n        guess = (max + min) // 2\n        if key == arr[guess]:\n            return arr[guess]\n        elif key > arr[guess]:\n            min = guess + 1\n        else:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.sortedShifted",
        "documentation": {}
    },
    {
        "label": "findValueSortedShiftedArray",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.sortedShifted",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.sortedShifted",
        "peekOfCode": "def findValueSortedShiftedArray(nums, target):\n    pivot = 3\n    if nums[pivot] == target:\n        return pivot\n    if nums[pivot] >= target:\n        value = binarySearch(nums[pivot + 1 :], target)\n        print(value)\n        if value == target:\n            return nums.index(value)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.sortedShifted",
        "documentation": {}
    },
    {
        "label": "streetLights",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.streetLights",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.streetLights",
        "peekOfCode": "def streetLights(n, lights):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.streetLights",
        "documentation": {}
    },
    {
        "label": "isDifferByOneChar",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.stringsRearrangement",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.stringsRearrangement",
        "peekOfCode": "def isDifferByOneChar(str1, str2):\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count == 1\ndef stringsRearrangement(inputArray):\n    possiblePermutations = itertools.permutations(inputArray)\n    for per in possiblePermutations:\n        allMatch = True",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.stringsRearrangement",
        "documentation": {}
    },
    {
        "label": "stringsRearrangement",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.stringsRearrangement",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.stringsRearrangement",
        "peekOfCode": "def stringsRearrangement(inputArray):\n    possiblePermutations = itertools.permutations(inputArray)\n    for per in possiblePermutations:\n        allMatch = True\n        for i in range(len(per) - 1):\n            if not isDifferByOneChar(per[i], per[i + 1]):\n                allMatch = False\n                break\n        if allMatch:\n            return True",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.stringsRearrangement",
        "documentation": {}
    },
    {
        "label": "sudoku2",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.sudoku2",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.sudoku2",
        "peekOfCode": "def sudoku2(grid):\n    # test row\n    tab = [[False for col in range(9)] for row in range(9)]\n    cols = [[False for col in range(9)] for row in range(9)]\n    rows = [[False for col in range(9)] for row in range(9)]\n    for r in range(9):\n        for c in range(9):\n            if grid[r][c] == \".\":\n                continue\n            v = int(grid[r][c]) - 1",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.sudoku2",
        "documentation": {}
    },
    {
        "label": "checkBlanagrams",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.super-scrap",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.super-scrap",
        "peekOfCode": "def checkBlanagrams(word1, word2):\n    lenWord1 = len(word1)\n    lenWord2 = len(word2)\n    freq1 = [0] * 26\n    freq2 = [0] * 26\n    count = 0\n    for i in range(lenWord1):\n        freq1[ord(word1[i]) - ord(\"a\")] += 1\n    for i in range(lenWord2):\n        freq2[ord(word2[i]) - ord(\"a\")] += 1",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.super-scrap",
        "documentation": {}
    },
    {
        "label": "condense_linked_list",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.temp",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.temp",
        "peekOfCode": "def condense_linked_list(node):\n    head = node\n    curr_node = head.next\n    while curr_node is not None:\n        if curr_node.value == head.value:\n            curr_node = curr_node.next\n            curr_node.next = None\n        curr_node = curr_node.next\n        head = head.next\n    return head",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.temp",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.traversals",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.traversals",
        "peekOfCode": "class TreeNode:\n  def __init__(self, value):\n    self.value = value\n    self.left = None\n    self.right = None\n# pre order\n# visit the root\n# do something with this node\n# visit the left of the root\n# visit the right of the root",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.traversals",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.traversals",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.traversals",
        "peekOfCode": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\nl = TreeNode(3)\nl.right = TreeNode(1)\nl.right.left = TreeNode(5)\ndef inorder_traversal_r(root):\n    def dft(root, output):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.traversals",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.traversals",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.traversals",
        "peekOfCode": "class TreeNode:\n  def __init__(self, val=0, left=None, right=None):\n      self.val = val\n      self.left = left\n      self.right = right\ndef build_tree(preorder, inorder):\n  def helper(left = 0, right = len(inorder)):\n    nonlocal starting_index\n    if left == right:\n      return None",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.traversals",
        "documentation": {}
    },
    {
        "label": "inorder_traversal_r",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.traversals",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.traversals",
        "peekOfCode": "def inorder_traversal_r(root):\n    def dft(root, output):\n      if root:\n        dft(root.left, output)\n        output.append(root.val)\n        dft(root.right, output)\n    output = []\n    dft(root, output)\n    return output\ndef inorder_traversal_i(root):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.traversals",
        "documentation": {}
    },
    {
        "label": "inorder_traversal_i",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.traversals",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.traversals",
        "peekOfCode": "def inorder_traversal_i(root):\n  \"\"\"\n  output list\n  keep track of the data using a stack\n  # keep looping\n    # while root exists\n      # append root to the stack\n      # traverse to the left\n    # if the stack is empty\n      # return my output",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.traversals",
        "documentation": {}
    },
    {
        "label": "build_tree",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.traversals",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.traversals",
        "peekOfCode": "def build_tree(preorder, inorder):\n  def helper(left = 0, right = len(inorder)):\n    nonlocal starting_index\n    if left == right:\n      return None\n    root_value = preorder[starting_index]\n    root = TreeNode(root_value)\n    index = inorder_index_map[root_value]\n    starting_index += 1\n    root.left = helper(left, index)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.traversals",
        "documentation": {}
    },
    {
        "label": "l",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.traversals",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.traversals",
        "peekOfCode": "l = TreeNode(3)\nl.right = TreeNode(1)\nl.right.left = TreeNode(5)\ndef inorder_traversal_r(root):\n    def dft(root, output):\n      if root:\n        dft(root.left, output)\n        output.append(root.val)\n        dft(root.right, output)\n    output = []",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.traversals",
        "documentation": {}
    },
    {
        "label": "l.right",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.traversals",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.traversals",
        "peekOfCode": "l.right = TreeNode(1)\nl.right.left = TreeNode(5)\ndef inorder_traversal_r(root):\n    def dft(root, output):\n      if root:\n        dft(root.left, output)\n        output.append(root.val)\n        dft(root.right, output)\n    output = []\n    dft(root, output)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.traversals",
        "documentation": {}
    },
    {
        "label": "l.right.left",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.traversals",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.traversals",
        "peekOfCode": "l.right.left = TreeNode(5)\ndef inorder_traversal_r(root):\n    def dft(root, output):\n      if root:\n        dft(root.left, output)\n        output.append(root.val)\n        dft(root.right, output)\n    output = []\n    dft(root, output)\n    return output",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.traversals",
        "documentation": {}
    },
    {
        "label": "start1",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.traversals",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.traversals",
        "peekOfCode": "start1 = time.time()\nresult1 = inorder_traversal_i(l)\nend1 = time.time()\nstart2 = time.time()\nresult2 = inorder_traversal_r(l)\nend2 = time.time()\nprint(f\"iterative version took {end1 - start1} seconds with a result of {result1}\")\nprint(f\"recursive version took {end2 - start2} seconds with a result of {result2}\")\n\"\"\"\nYou are given the values from a preorder and an inorder tree traversal. Write a",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.traversals",
        "documentation": {}
    },
    {
        "label": "result1",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.traversals",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.traversals",
        "peekOfCode": "result1 = inorder_traversal_i(l)\nend1 = time.time()\nstart2 = time.time()\nresult2 = inorder_traversal_r(l)\nend2 = time.time()\nprint(f\"iterative version took {end1 - start1} seconds with a result of {result1}\")\nprint(f\"recursive version took {end2 - start2} seconds with a result of {result2}\")\n\"\"\"\nYou are given the values from a preorder and an inorder tree traversal. Write a\nfunction that can take those inputs and output a binary tree.",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.traversals",
        "documentation": {}
    },
    {
        "label": "end1",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.traversals",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.traversals",
        "peekOfCode": "end1 = time.time()\nstart2 = time.time()\nresult2 = inorder_traversal_r(l)\nend2 = time.time()\nprint(f\"iterative version took {end1 - start1} seconds with a result of {result1}\")\nprint(f\"recursive version took {end2 - start2} seconds with a result of {result2}\")\n\"\"\"\nYou are given the values from a preorder and an inorder tree traversal. Write a\nfunction that can take those inputs and output a binary tree.\n*Note: assume that there will not be any duplicates in the tree.*",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.traversals",
        "documentation": {}
    },
    {
        "label": "start2",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.traversals",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.traversals",
        "peekOfCode": "start2 = time.time()\nresult2 = inorder_traversal_r(l)\nend2 = time.time()\nprint(f\"iterative version took {end1 - start1} seconds with a result of {result1}\")\nprint(f\"recursive version took {end2 - start2} seconds with a result of {result2}\")\n\"\"\"\nYou are given the values from a preorder and an inorder tree traversal. Write a\nfunction that can take those inputs and output a binary tree.\n*Note: assume that there will not be any duplicates in the tree.*\nExample:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.traversals",
        "documentation": {}
    },
    {
        "label": "result2",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.traversals",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.traversals",
        "peekOfCode": "result2 = inorder_traversal_r(l)\nend2 = time.time()\nprint(f\"iterative version took {end1 - start1} seconds with a result of {result1}\")\nprint(f\"recursive version took {end2 - start2} seconds with a result of {result2}\")\n\"\"\"\nYou are given the values from a preorder and an inorder tree traversal. Write a\nfunction that can take those inputs and output a binary tree.\n*Note: assume that there will not be any duplicates in the tree.*\nExample:\nInputs:     0 1  2  3 4",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.traversals",
        "documentation": {}
    },
    {
        "label": "end2",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.traversals",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.traversals",
        "peekOfCode": "end2 = time.time()\nprint(f\"iterative version took {end1 - start1} seconds with a result of {result1}\")\nprint(f\"recursive version took {end2 - start2} seconds with a result of {result2}\")\n\"\"\"\nYou are given the values from a preorder and an inorder tree traversal. Write a\nfunction that can take those inputs and output a binary tree.\n*Note: assume that there will not be any duplicates in the tree.*\nExample:\nInputs:     0 1  2  3 4\npreorder = [5,7,22,13,9]",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.traversals",
        "documentation": {}
    },
    {
        "label": "preorder",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.traversals",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.traversals",
        "peekOfCode": "preorder = [5,7,22,13,9]\ninorder = [7,5,13,22,9]\nOutput:\n   [5]\n   / \\\n  7  22\n    /  \\\n   13   9\n# the outer function\n  # inner function take a left and right constraint",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.traversals",
        "documentation": {}
    },
    {
        "label": "inorder",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.traversals",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.traversals",
        "peekOfCode": "inorder = [7,5,13,22,9]\nOutput:\n   [5]\n   / \\\n  7  22\n    /  \\\n   13   9\n# the outer function\n  # inner function take a left and right constraint\n    # get the root value from the preorder list at the starting_index",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.traversals",
        "documentation": {}
    },
    {
        "label": "inorder_index_map",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.traversals",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.traversals",
        "peekOfCode": "inorder_index_map = {7: 0, 5: 1, 13: 2, 22: 3, 9: 4}\nstarting_index = 0\n# start our first call\nreturn innerfunction()\n\"\"\"\n# Definition for a binary tree node.\nclass TreeNode:\n  def __init__(self, val=0, left=None, right=None):\n      self.val = val\n      self.left = left",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.traversals",
        "documentation": {}
    },
    {
        "label": "starting_index",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.traversals",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.traversals",
        "peekOfCode": "starting_index = 0\n# start our first call\nreturn innerfunction()\n\"\"\"\n# Definition for a binary tree node.\nclass TreeNode:\n  def __init__(self, val=0, left=None, right=None):\n      self.val = val\n      self.left = left\n      self.right = right",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.traversals",
        "documentation": {}
    },
    {
        "label": "preorder",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.traversals",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.traversals",
        "peekOfCode": "preorder = [5,7,22,13,9]\ninorder = [7,5,13,22,9]\nt = build_tree(preorder, inorder)\n\"\"\"\n   [5]\n   / \\\n  7  22\n    /  \\\n   13   9\n\"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.traversals",
        "documentation": {}
    },
    {
        "label": "inorder",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.traversals",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.traversals",
        "peekOfCode": "inorder = [7,5,13,22,9]\nt = build_tree(preorder, inorder)\n\"\"\"\n   [5]\n   / \\\n  7  22\n    /  \\\n   13   9\n\"\"\"\nprint(f\"            [{t.val}]\")",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.traversals",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.traversals",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.traversals",
        "peekOfCode": "t = build_tree(preorder, inorder)\n\"\"\"\n   [5]\n   / \\\n  7  22\n    /  \\\n   13   9\n\"\"\"\nprint(f\"            [{t.val}]\")\nprint(f\"     [{t.left.val}]       [{t.right.val}]\")",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.traversals",
        "documentation": {}
    },
    {
        "label": "uncover_spy",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.undercover-spy",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.undercover-spy",
        "peekOfCode": "def uncover_spy(n, trust):\n    trusted = [0 for _ in range(n + 1)]\n    for i, j in trust:\n        trusted[i] -= 1\n        trusted[j] += 1\n        for i in range(1, len(trusted)):\n            if trusted[i] == n - 1:\n                return i\n            return -1",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.undercover-spy",
        "documentation": {}
    },
    {
        "label": "validParenthesesSequence",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.validParenthasesSequence",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.validParenthasesSequence",
        "peekOfCode": "def validParenthesesSequence(s):\n    stack = []\n    # Traversing the Expression\n    for char in s:\n        if char in [\"(\", \"{\", \"[\"]:\n            stack.append(char)\n        else:\n            if not stack:\n                return False\n            current_char = stack.pop()",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.scrap-py.validParenthasesSequence",
        "documentation": {}
    },
    {
        "label": "balanced_parentheses",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.stacks.balanced_parentheses",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.stacks.balanced_parentheses",
        "peekOfCode": "def balanced_parentheses(parentheses: str) -> bool:\n    \"\"\"Use a stack to check if a string of parentheses is balanced.\n    >>> balanced_parentheses(\"([]{})\")\n    True\n    >>> balanced_parentheses(\"[()]{}{[()()]()}\")\n    True\n    >>> balanced_parentheses(\"[(])\")\n    False\n    >>> balanced_parentheses(\"1+2*3-4\")\n    True",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.stacks.balanced_parentheses",
        "documentation": {}
    },
    {
        "label": "dijkstras_two_stack_algorithm",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.stacks.dijkstras_two_stack_algorithm",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.stacks.dijkstras_two_stack_algorithm",
        "peekOfCode": "def dijkstras_two_stack_algorithm(equation: str) -> int:\n    \"\"\"\n    DocTests\n    >>> dijkstras_two_stack_algorithm(\"(5 + 3)\")\n    8\n    >>> dijkstras_two_stack_algorithm(\"((9 - (2 + 9)) + (8 - 1))\")\n    5\n    >>> dijkstras_two_stack_algorithm(\"((((3 - 2) - (2 + 3)) + (2 - 4)) + 3)\")\n    -3\n    :param equation: a string",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.stacks.dijkstras_two_stack_algorithm",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.stacks.dijkstras_two_stack_algorithm",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.stacks.dijkstras_two_stack_algorithm",
        "peekOfCode": "__author__ = \"Alexander Joslin\"\nimport operator as op\nfrom .stack import Stack\ndef dijkstras_two_stack_algorithm(equation: str) -> int:\n    \"\"\"\n    DocTests\n    >>> dijkstras_two_stack_algorithm(\"(5 + 3)\")\n    8\n    >>> dijkstras_two_stack_algorithm(\"((9 - (2 + 9)) + (8 - 1))\")\n    5",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.stacks.dijkstras_two_stack_algorithm",
        "documentation": {}
    },
    {
        "label": "evaluate_postfix",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.stacks.evaluate_postfix_notations",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.stacks.evaluate_postfix_notations",
        "peekOfCode": "def evaluate_postfix(postfix_notation: list) -> int:\n    \"\"\"\n    >>> evaluate_postfix([\"2\", \"1\", \"+\", \"3\", \"*\"])\n    9\n    >>> evaluate_postfix([\"4\", \"13\", \"5\", \"/\", \"+\"])\n    6\n    >>> evaluate_postfix([])\n    0\n    \"\"\"\n    if not postfix_notation:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.stacks.evaluate_postfix_notations",
        "documentation": {}
    },
    {
        "label": "precedence",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.stacks.infix_to_postfix_conversion",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.stacks.infix_to_postfix_conversion",
        "peekOfCode": "def precedence(char: str) -> int:\n    \"\"\"\n    Return integer value representing an operator's precedence, or\n    order of operation.\n    https://en.wikipedia.org/wiki/Order_of_operations\n    \"\"\"\n    return {\"+\": 1, \"-\": 1, \"*\": 2, \"/\": 2, \"^\": 3}.get(char, -1)\ndef infix_to_postfix(expression_str: str) -> str:\n    \"\"\"\n    >>> infix_to_postfix(\"(1*(2+3)+4))\")",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.stacks.infix_to_postfix_conversion",
        "documentation": {}
    },
    {
        "label": "infix_to_postfix",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.stacks.infix_to_postfix_conversion",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.stacks.infix_to_postfix_conversion",
        "peekOfCode": "def infix_to_postfix(expression_str: str) -> str:\n    \"\"\"\n    >>> infix_to_postfix(\"(1*(2+3)+4))\")\n    Traceback (most recent call last):\n    ...\n    ValueError: Mismatched parentheses\n    >>> infix_to_postfix(\"\")\n    ''\n    >>> infix_to_postfix(\"3+2\")\n    '3 2 +'",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.stacks.infix_to_postfix_conversion",
        "documentation": {}
    },
    {
        "label": "infix_2_postfix",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.stacks.infix_to_prefix_conversion",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.stacks.infix_to_prefix_conversion",
        "peekOfCode": "def infix_2_postfix(Infix):\n    Stack = []\n    Postfix = []\n    priority = {\n        \"^\": 3,\n        \"*\": 2,\n        \"/\": 2,\n        \"%\": 2,\n        \"+\": 1,\n        \"-\": 1,",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.stacks.infix_to_prefix_conversion",
        "documentation": {}
    },
    {
        "label": "infix_2_prefix",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.stacks.infix_to_prefix_conversion",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.stacks.infix_to_prefix_conversion",
        "peekOfCode": "def infix_2_prefix(Infix):\n    Infix = list(Infix[::-1])  # reverse the infix equation\n    for i in range(len(Infix)):\n        if Infix[i] == \"(\":\n            Infix[i] = \")\"  # change \"(\" to \")\"\n        elif Infix[i] == \")\":\n            Infix[i] = \"(\"  # change \")\" to \"(\"\n    return (infix_2_postfix(\"\".join(Infix)))[\n        ::-1\n    ]  # call infix_2_postfix on Infix, return reverse of Postfix",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.stacks.infix_to_prefix_conversion",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.stacks.linked_stack",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.stacks.linked_stack",
        "peekOfCode": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n    def __str__(self):\n        return f\"{self.data}\"\nclass LinkedStack:\n    \"\"\"\n    Linked List Stack implementing push (to top),\n    pop (from top) and is_empty",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.stacks.linked_stack",
        "documentation": {}
    },
    {
        "label": "LinkedStack",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.stacks.linked_stack",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.stacks.linked_stack",
        "peekOfCode": "class LinkedStack:\n    \"\"\"\n    Linked List Stack implementing push (to top),\n    pop (from top) and is_empty\n    >>> stack = LinkedStack()\n    >>> stack.is_empty()\n    True\n    >>> stack.push(5)\n    >>> stack.push(9)\n    >>> stack.push('python')",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.stacks.linked_stack",
        "documentation": {}
    },
    {
        "label": "next_greatest_element_slow",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.stacks.next_greater_element",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.stacks.next_greater_element",
        "peekOfCode": "def next_greatest_element_slow(arr: list) -> list:\n    \"\"\"\n    Get the Next Greatest Element (NGE) for all elements in a list.\n    Maximum element present after the current one which is also greater than the\n    current one.\n    >>> next_greatest_element_slow(arr) == expect\n    True\n    \"\"\"\n    result = []\n    for i in range(0, len(arr), 1):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.stacks.next_greater_element",
        "documentation": {}
    },
    {
        "label": "next_greatest_element_fast",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.stacks.next_greater_element",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.stacks.next_greater_element",
        "peekOfCode": "def next_greatest_element_fast(arr: list) -> list:\n    \"\"\"\n    Like next_greatest_element_slow() but changes the loops to use\n    enumerate() instead of range(len()) for the outer loop and\n    for in a slice of arr for the inner loop.\n    >>> next_greatest_element_fast(arr) == expect\n    True\n    \"\"\"\n    result = []\n    for i, outer in enumerate(arr):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.stacks.next_greater_element",
        "documentation": {}
    },
    {
        "label": "next_greatest_element",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.stacks.next_greater_element",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.stacks.next_greater_element",
        "peekOfCode": "def next_greatest_element(arr: list) -> list:\n    \"\"\"\n    Get the Next Greatest Element (NGE) for all elements in a list.\n    Maximum element present after the current one which is also greater than the\n    current one.\n    A naive way to solve this is to take two loops and check for the next bigger\n    number but that will make the time complexity as O(n^2). The better way to solve\n    this would be to use a stack to keep track of maximum number giving a linear time\n    solution.\n    >>> next_greatest_element(arr) == expect",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.stacks.next_greater_element",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.stacks.next_greater_element",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.stacks.next_greater_element",
        "peekOfCode": "arr = [-10, -5, 0, 5, 5.1, 11, 13, 21, 3, 4, -21, -10, -5, -1, 0]\nexpect = [-5, 0, 5, 5.1, 11, 13, 21, -1, 4, -1, -10, -5, -1, 0, -1]\ndef next_greatest_element_slow(arr: list) -> list:\n    \"\"\"\n    Get the Next Greatest Element (NGE) for all elements in a list.\n    Maximum element present after the current one which is also greater than the\n    current one.\n    >>> next_greatest_element_slow(arr) == expect\n    True\n    \"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.stacks.next_greater_element",
        "documentation": {}
    },
    {
        "label": "expect",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.stacks.next_greater_element",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.stacks.next_greater_element",
        "peekOfCode": "expect = [-5, 0, 5, 5.1, 11, 13, 21, -1, 4, -1, -10, -5, -1, 0, -1]\ndef next_greatest_element_slow(arr: list) -> list:\n    \"\"\"\n    Get the Next Greatest Element (NGE) for all elements in a list.\n    Maximum element present after the current one which is also greater than the\n    current one.\n    >>> next_greatest_element_slow(arr) == expect\n    True\n    \"\"\"\n    result = []",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.stacks.next_greater_element",
        "documentation": {}
    },
    {
        "label": "Solve",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.stacks.postfix_evaluation",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.stacks.postfix_evaluation",
        "peekOfCode": "def Solve(Postfix):\n    Stack = []\n    Div = lambda x, y: int(x / y)  # noqa: E731 integer division operation\n    Opr = {\n        \"^\": op.pow,\n        \"*\": op.mul,\n        \"/\": Div,\n        \"+\": op.add,\n        \"-\": op.sub,\n    }  # operators & their respective operation",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.stacks.postfix_evaluation",
        "documentation": {}
    },
    {
        "label": "is_operand",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.stacks.prefix_evaluation",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.stacks.prefix_evaluation",
        "peekOfCode": "def is_operand(c):\n    \"\"\"\n    Return True if the given char c is an operand, e.g. it is a number\n    >>> is_operand(\"1\")\n    True\n    >>> is_operand(\"+\")\n    False\n    \"\"\"\n    return c.isdigit()\ndef evaluate(expression):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.stacks.prefix_evaluation",
        "documentation": {}
    },
    {
        "label": "evaluate",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.stacks.prefix_evaluation",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.stacks.prefix_evaluation",
        "peekOfCode": "def evaluate(expression):\n    \"\"\"\n    Evaluate a given expression in prefix notation.\n    Asserts that the given expression is valid.\n    >>> evaluate(\"+ 9 * 2 6\")\n    21\n    >>> evaluate(\"/ * 10 2 + 4 1 \")\n    4.0\n    \"\"\"\n    stack = []",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.stacks.prefix_evaluation",
        "documentation": {}
    },
    {
        "label": "calc",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.stacks.prefix_evaluation",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.stacks.prefix_evaluation",
        "peekOfCode": "calc = {\n    \"+\": lambda x, y: x + y,\n    \"-\": lambda x, y: x - y,\n    \"*\": lambda x, y: x * y,\n    \"/\": lambda x, y: x / y,\n}\ndef is_operand(c):\n    \"\"\"\n    Return True if the given char c is an operand, e.g. it is a number\n    >>> is_operand(\"1\")",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.stacks.prefix_evaluation",
        "documentation": {}
    },
    {
        "label": "StackOverflowError",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.stacks.stack",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.stacks.stack",
        "peekOfCode": "class StackOverflowError(BaseException):\n    pass\nclass Stack:\n    \"\"\"A stack is an abstract data type that serves as a collection of\n    elements with two principal operations: push() and pop(). push() adds an\n    element to the top of the stack, and pop() removes an element from the top\n    of a stack. The order in which elements come off of a stack are\n    Last In, First Out (LIFO).\n    https://en.wikipedia.org/wiki/Stack_(abstract_data_type)\n    \"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.stacks.stack",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.stacks.stack",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.stacks.stack",
        "peekOfCode": "class Stack:\n    \"\"\"A stack is an abstract data type that serves as a collection of\n    elements with two principal operations: push() and pop(). push() adds an\n    element to the top of the stack, and pop() removes an element from the top\n    of a stack. The order in which elements come off of a stack are\n    Last In, First Out (LIFO).\n    https://en.wikipedia.org/wiki/Stack_(abstract_data_type)\n    \"\"\"\n    def __init__(self, limit: int = 10):\n        self.stack: List[int] = []",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.stacks.stack",
        "documentation": {}
    },
    {
        "label": "test_stack",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.stacks.stack",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.stacks.stack",
        "peekOfCode": "def test_stack() -> None:\n    \"\"\"\n    >>> test_stack()\n    \"\"\"\n    stack = Stack(10)\n    assert bool(stack) is False\n    assert stack.is_empty() is True\n    assert stack.is_full() is False\n    assert str(stack) == \"[]\"\n    try:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.stacks.stack",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.stacks.stack_using_dll",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.stacks.stack_using_dll",
        "peekOfCode": "class Node:\n    def __init__(self, data):\n        self.data = data  # Assign data\n        self.next = None  # Initialize next as null\n        self.prev = None  # Initialize prev as null\nclass Stack:\n    \"\"\"\n    >>> stack = Stack()\n    >>> stack.is_empty()\n    True",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.stacks.stack_using_dll",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.stacks.stack_using_dll",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.stacks.stack_using_dll",
        "peekOfCode": "class Stack:\n    \"\"\"\n    >>> stack = Stack()\n    >>> stack.is_empty()\n    True\n    >>> stack.print_stack()\n    stack elements are:\n    >>> for i in range(4):\n    ...     stack.push(i)\n    ...",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.stacks.stack_using_dll",
        "documentation": {}
    },
    {
        "label": "calculateSpan",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.stacks.stock_span_problem",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.stacks.stock_span_problem",
        "peekOfCode": "def calculateSpan(price, S):\n    n = len(price)\n    # Create a stack and push index of fist element to it\n    st = []\n    st.append(0)\n    # Span value of first element is always 1\n    S[0] = 1\n    # Calculate span values for rest of the elements\n    for i in range(1, n):\n        # Pop elements from stack while stack is not",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.stacks.stock_span_problem",
        "documentation": {}
    },
    {
        "label": "printArray",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.stacks.stock_span_problem",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.stacks.stock_span_problem",
        "peekOfCode": "def printArray(arr, n):\n    for i in range(0, n):\n        print(arr[i], end=\" \")\n# Driver program to test above function\nprice = [10, 4, 5, 90, 120, 80]\nS = [0 for i in range(len(price) + 1)]\n# Fill the span values in array S[]\ncalculateSpan(price, S)\n# Print the calculated span values\nprintArray(S, len(price))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.stacks.stock_span_problem",
        "documentation": {}
    },
    {
        "label": "price",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.stacks.stock_span_problem",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.stacks.stock_span_problem",
        "peekOfCode": "price = [10, 4, 5, 90, 120, 80]\nS = [0 for i in range(len(price) + 1)]\n# Fill the span values in array S[]\ncalculateSpan(price, S)\n# Print the calculated span values\nprintArray(S, len(price))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.stacks.stock_span_problem",
        "documentation": {}
    },
    {
        "label": "S",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.stacks.stock_span_problem",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.stacks.stock_span_problem",
        "peekOfCode": "S = [0 for i in range(len(price) + 1)]\n# Fill the span values in array S[]\ncalculateSpan(price, S)\n# Print the calculated span values\nprintArray(S, len(price))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.stacks.stock_span_problem",
        "documentation": {}
    },
    {
        "label": "TrieNode",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.trie.trie",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.trie.trie",
        "peekOfCode": "class TrieNode:\n    def __init__(self):\n        self.nodes = dict()  # Mapping from char to TrieNode\n        self.is_leaf = False\n    def insert_many(self, words: [str]):\n        \"\"\"\n        Inserts a list of words into the Trie\n        :param words: list of string words\n        :return: None\n        \"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.trie.trie",
        "documentation": {}
    },
    {
        "label": "print_words",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.trie.trie",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.trie.trie",
        "peekOfCode": "def print_words(node: TrieNode, word: str):\n    \"\"\"\n    Prints all the words in a Trie\n    :param node: root node of Trie\n    :param word: Word variable should be empty at start\n    :return: None\n    \"\"\"\n    if node.is_leaf:\n        print(word, end=\" \")\n    for key, value in node.nodes.items():",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.trie.trie",
        "documentation": {}
    },
    {
        "label": "test_trie",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.trie.trie",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.trie.trie",
        "peekOfCode": "def test_trie():\n    words = \"banana bananas bandana band apple all beast\".split()\n    root = TrieNode()\n    root.insert_many(words)\n    # print_words(root, \"\")\n    assert all(root.find(word) for word in words)\n    assert root.find(\"banana\")\n    assert not root.find(\"bandanas\")\n    assert not root.find(\"apps\")\n    assert root.find(\"apple\")",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.trie.trie",
        "documentation": {}
    },
    {
        "label": "print_results",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.trie.trie",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.trie.trie",
        "peekOfCode": "def print_results(msg: str, passes: bool) -> None:\n    print(str(msg), \"works!\" if passes else \"doesn't work :(\")\ndef pytests():\n    assert test_trie()\ndef main():\n    \"\"\"\n    >>> pytests()\n    \"\"\"\n    print_results(\"Testing trie functionality\", test_trie())\nif __name__ == \"__main__\":",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.trie.trie",
        "documentation": {}
    },
    {
        "label": "pytests",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.trie.trie",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.trie.trie",
        "peekOfCode": "def pytests():\n    assert test_trie()\ndef main():\n    \"\"\"\n    >>> pytests()\n    \"\"\"\n    print_results(\"Testing trie functionality\", test_trie())\nif __name__ == \"__main__\":\n    main()",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.trie.trie",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.trie.trie",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.trie.trie",
        "peekOfCode": "def main():\n    \"\"\"\n    >>> pytests()\n    \"\"\"\n    print_results(\"Testing trie functionality\", test_trie())\nif __name__ == \"__main__\":\n    main()",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.trie.trie",
        "documentation": {}
    },
    {
        "label": "backpedal",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.backpedal (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.backpedal (1)",
        "peekOfCode": "def backpedal(goal: Node, parents: Mapping[Node, Optional[Node]]) -> list[Node]:\n    \"\"\"With a dict of parent->child, walk backwards from the goal as far as possible and return the path.\"\"\"\n    back_path = []\n    node = goal\n    while node is not None:\n        back_path.append(node)\n        node = parents[node]\n    return back_path[::-1]",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.backpedal (1)",
        "documentation": {}
    },
    {
        "label": "backpedal",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.backpedal",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.backpedal",
        "peekOfCode": "def backpedal(goal: Node, parents: Mapping[Node, Optional[Node]]) -> list[Node]:\n    \"\"\"With a dict of parent->child, walk backwards from the goal as far as possible and return the path.\"\"\"\n    back_path = []\n    node = goal\n    while node is not None:\n        back_path.append(node)\n        node = parents[node]\n    return back_path[::-1]",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.backpedal",
        "documentation": {}
    },
    {
        "label": "bfs_paths_dict",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.bfs_paths_dict (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.bfs_paths_dict (1)",
        "peekOfCode": "def bfs_paths_dict(\n    graph: Mapping[Node, set[Node]], start: Node, goal: Node\n) -> Iterable[list[Node]]:\n    \"\"\"Find all the paths from start to goal using BFS on a dict.\"\"\"\n    to_visit = deque([[start]])\n    while to_visit:\n        path = to_visit.popleft()\n        node = path[-1]\n        if node == goal:\n            yield path",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.bfs_paths_dict (1)",
        "documentation": {}
    },
    {
        "label": "bfs_paths_dict",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.bfs_paths_dict (2)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.bfs_paths_dict (2)",
        "peekOfCode": "def bfs_paths_dict(\n    graph: Mapping[Node, set[Node]], start: Node, goal: Node\n) -> Iterable[list[Node]]:\n    \"\"\"Find all the paths from start to goal using BFS on a dict.\"\"\"\n    to_visit = deque([[start]])\n    while to_visit:\n        path = to_visit.popleft()\n        node = path[-1]\n        if node == goal:\n            yield path",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.bfs_paths_dict (2)",
        "documentation": {}
    },
    {
        "label": "bfs_paths_dict",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.bfs_paths_dict",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.bfs_paths_dict",
        "peekOfCode": "def bfs_paths_dict(\n    graph: Mapping[Node, set[Node]], start: Node, goal: Node\n) -> Iterable[list[Node]]:\n    \"\"\"Find all the paths from start to goal using BFS on a dict.\"\"\"\n    to_visit = deque([[start]])\n    while to_visit:\n        path = to_visit.popleft()\n        node = path[-1]\n        if node == goal:\n            yield path",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.bfs_paths_dict",
        "documentation": {}
    },
    {
        "label": "bfs_search_dict",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.bfs_search_dict (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.bfs_search_dict (1)",
        "peekOfCode": "def bfs_search_dict(\n    graph: Mapping[Node, Iterable[Node]], start: Node, predicate: Callable[[Node], bool]\n) -> bool:\n    \"\"\"Find the closest node to start that matches the predicate using breadth first search.\"\"\"\n    visited = set()\n    to_visit = deque([start])\n    while to_visit:\n        node = to_visit.popleft()\n        if node in visited:\n            continue",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.bfs_search_dict (1)",
        "documentation": {}
    },
    {
        "label": "bfs_search_dict",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.bfs_search_dict",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.bfs_search_dict",
        "peekOfCode": "def bfs_search_dict(\n    graph: Mapping[Node, Iterable[Node]], start: Node, predicate: Callable[[Node], bool]\n) -> bool:\n    \"\"\"Find the closest node to start that matches the predicate using breadth first search.\"\"\"\n    visited = set()\n    to_visit = deque([start])\n    while to_visit:\n        node = to_visit.popleft()\n        if node in visited:\n            continue",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.bfs_search_dict",
        "documentation": {}
    },
    {
        "label": "bfs_search_grid",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.bfs_search_grid (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.bfs_search_grid (1)",
        "peekOfCode": "def bfs_search_grid(\n    grid: Sequence[Sequence[int]], start: tuple[int, int], goal: tuple[int, int]\n) -> bool:\n    \"\"\"On a grid of 0s and 1s, find if start is connected to goal via a path of 1s.\"\"\"\n    rows = range(len(grid))\n    cols = range(len(grid[0]))\n    seen = {start}\n    to_visit = deque([start])\n    while to_visit:\n        r, c = to_visit.popleft()",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.bfs_search_grid (1)",
        "documentation": {}
    },
    {
        "label": "bfs_search_grid",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.bfs_search_grid",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.bfs_search_grid",
        "peekOfCode": "def bfs_search_grid(\n    grid: Sequence[Sequence[int]], start: tuple[int, int], goal: tuple[int, int]\n) -> bool:\n    \"\"\"On a grid of 0s and 1s, find if start is connected to goal via a path of 1s.\"\"\"\n    rows = range(len(grid))\n    cols = range(len(grid[0]))\n    seen = {start}\n    to_visit = deque([start])\n    while to_visit:\n        r, c = to_visit.popleft()",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.bfs_search_grid",
        "documentation": {}
    },
    {
        "label": "bipartite_matching_single",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.bipartite_matching_single (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.bipartite_matching_single (1)",
        "peekOfCode": "def bipartite_matching_single(graph: Sequence[int]) -> list[int]:\n    matches = list(graph)\n    in_degrees = [0] * len(\n        graph\n    )  # This is an alternate to collections.Counter when the keys are 0-n.\n    for target in graph:\n        in_degrees[target] += 1\n    zero_in_degrees = [\n        node for node, in_degree in enumerate(in_degrees) if not in_degree\n    ]",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.bipartite_matching_single (1)",
        "documentation": {}
    },
    {
        "label": "bipartite_matching_single",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.bipartite_matching_single (2)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.bipartite_matching_single (2)",
        "peekOfCode": "def bipartite_matching_single(graph: Sequence[int]) -> list[int]:\n    matches = list(graph)\n    in_degrees = [0] * len(\n        graph\n    )  # This is an alternate to collections.Counter when the keys are 0-n.\n    for target in graph:\n        in_degrees[target] += 1\n    zero_in_degrees = [\n        node for node, in_degree in enumerate(in_degrees) if not in_degree\n    ]",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.bipartite_matching_single (2)",
        "documentation": {}
    },
    {
        "label": "bipartite_matching_single",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.bipartite_matching_single",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.bipartite_matching_single",
        "peekOfCode": "def bipartite_matching_single(graph: Sequence[int]) -> list[int]:\n    matches = list(graph)\n    in_degrees = [0] * len(\n        graph\n    )  # This is an alternate to collections.Counter when the keys are 0-n.\n    for target in graph:\n        in_degrees[target] += 1\n    zero_in_degrees = [\n        node for node, in_degree in enumerate(in_degrees) if not in_degree\n    ]",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.bipartite_matching_single",
        "documentation": {}
    },
    {
        "label": "bisect_search",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.bisect_search (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.bisect_search (1)",
        "peekOfCode": "def bisect_search(predicate: Callable[[int], bool], low: int, high: int) -> int:\n    \"\"\"Find the lowest int between low and high where predicate(int) is True.\"\"\"\n    while low < high:\n        mid = (\n            low + (high - low) // 2\n        )  # Avoids integer overflow compared to mid = (low + high) // 2\n        if predicate(mid):\n            high = mid\n        else:\n            low = mid + 1",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.bisect_search (1)",
        "documentation": {}
    },
    {
        "label": "bisect_search",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.bisect_search",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.bisect_search",
        "peekOfCode": "def bisect_search(predicate: Callable[[int], bool], low: int, high: int) -> int:\n    \"\"\"Find the lowest int between low and high where predicate(int) is True.\"\"\"\n    while low < high:\n        mid = (\n            low + (high - low) // 2\n        )  # Avoids integer overflow compared to mid = (low + high) // 2\n        if predicate(mid):\n            high = mid\n        else:\n            low = mid + 1",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.bisect_search",
        "documentation": {}
    },
    {
        "label": "bst_make_balanced_recur",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.bst_make_balanced_recur (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.bst_make_balanced_recur (1)",
        "peekOfCode": "def bst_make_balanced_recur(values: Sequence[int]) -> Optional[BTNode]:\n    \"\"\"Make a balanced binary search tree from a sorted sequence of values.\"\"\"\n    if not values:\n        return None\n    mid = len(values) // 2\n    root = BTNode(values[mid])\n    root.left = bst_make_balanced_recur(values[:mid])\n    root.right = bst_make_balanced_recur(values[mid + 1 :])\n    return root",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.bst_make_balanced_recur (1)",
        "documentation": {}
    },
    {
        "label": "bst_make_balanced_recur",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.bst_make_balanced_recur",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.bst_make_balanced_recur",
        "peekOfCode": "def bst_make_balanced_recur(values: Sequence[int]) -> Optional[BTNode]:\n    \"\"\"Make a balanced binary search tree from a sorted sequence of values.\"\"\"\n    if not values:\n        return None\n    mid = len(values) // 2\n    root = BTNode(values[mid])\n    root.left = bst_make_balanced_recur(values[:mid])\n    root.right = bst_make_balanced_recur(values[mid + 1 :])\n    return root",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.bst_make_balanced_recur",
        "documentation": {}
    },
    {
        "label": "bt_inorder_traversal_recur",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.bt_inorder_traversal_recur (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.bt_inorder_traversal_recur (1)",
        "peekOfCode": "def bt_inorder_traversal_recur(root: Optional[BTNode]) -> Iterable[BTNode]:\n    if root is not None:\n        yield from bt_inorder_traversal_recur(root.left)\n        yield root\n        yield from bt_inorder_traversal_recur(root.right)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.bt_inorder_traversal_recur (1)",
        "documentation": {}
    },
    {
        "label": "bt_inorder_traversal_recur",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.bt_inorder_traversal_recur",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.bt_inorder_traversal_recur",
        "peekOfCode": "def bt_inorder_traversal_recur(root: Optional[BTNode]) -> Iterable[BTNode]:\n    if root is not None:\n        yield from bt_inorder_traversal_recur(root.left)\n        yield root\n        yield from bt_inorder_traversal_recur(root.right)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.bt_inorder_traversal_recur",
        "documentation": {}
    },
    {
        "label": "bt_level_order_traversal_iter",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.bt_level_order_traversal_iter (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.bt_level_order_traversal_iter (1)",
        "peekOfCode": "def bt_level_order_traversal_iter(root: BTNode) -> Iterable[list[BTNode]]:\n    # would do a null check here if root was Optional\n    level = deque([root])\n    while level:\n        # modify this line if you needed to grab the values\n        yield list(level)  # copy so it's not messed with\n        for _ in range(len(level)):\n            node = level.popleft()\n            for child in [node.left, node.right]:\n                if child is not None:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.bt_level_order_traversal_iter (1)",
        "documentation": {}
    },
    {
        "label": "bt_level_order_traversal_iter",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.bt_level_order_traversal_iter",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.bt_level_order_traversal_iter",
        "peekOfCode": "def bt_level_order_traversal_iter(root: BTNode) -> Iterable[list[BTNode]]:\n    # would do a null check here if root was Optional\n    level = deque([root])\n    while level:\n        # modify this line if you needed to grab the values\n        yield list(level)  # copy so it's not messed with\n        for _ in range(len(level)):\n            node = level.popleft()\n            for child in [node.left, node.right]:\n                if child is not None:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.bt_level_order_traversal_iter",
        "documentation": {}
    },
    {
        "label": "celebrity",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.celebrity (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.celebrity (1)",
        "peekOfCode": "def celebrity(knows: Callable[[int, int], bool], n: int) -> Optional[int]:\n    candidate = 0\n    for node in range(1, n):\n        if knows(candidate, node):\n            candidate = node\n    if any(knows(candidate, node) for node in range(candidate)):\n        return None\n    if any(not knows(node, candidate) for node in range(n)):\n        return None\n    return candidate",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.celebrity (1)",
        "documentation": {}
    },
    {
        "label": "celebrity",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.celebrity",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.celebrity",
        "peekOfCode": "def celebrity(knows: Callable[[int, int], bool], n: int) -> Optional[int]:\n    candidate = 0\n    for node in range(1, n):\n        if knows(candidate, node):\n            candidate = node\n    if any(knows(candidate, node) for node in range(candidate)):\n        return None\n    if any(not knows(node, candidate) for node in range(n)):\n        return None\n    return candidate",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.celebrity",
        "documentation": {}
    },
    {
        "label": "counting_sort_dict",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.counting_sort_dict (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.counting_sort_dict (1)",
        "peekOfCode": "def counting_sort_dict(\n    items: Iterable[T], key: Callable[[T], int] = lambda x: x\n) -> Iterable[T]:\n    groups = defaultdict(list)\n    for item in items:\n        groups[key(item)].append(item)\n    for k in range(min(groups), max(groups) + 1):\n        yield from groups[k]",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.counting_sort_dict (1)",
        "documentation": {}
    },
    {
        "label": "counting_sort_dict",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.counting_sort_dict (2)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.counting_sort_dict (2)",
        "peekOfCode": "def counting_sort_dict(\n    items: Iterable[T], key: Callable[[T], int] = lambda x: x\n) -> Iterable[T]:\n    groups = defaultdict(list)\n    for item in items:\n        groups[key(item)].append(item)\n    for k in range(min(groups), max(groups) + 1):\n        yield from groups[k]",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.counting_sort_dict (2)",
        "documentation": {}
    },
    {
        "label": "counting_sort_dict",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.counting_sort_dict",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.counting_sort_dict",
        "peekOfCode": "def counting_sort_dict(\n    items: Iterable[T], key: Callable[[T], int] = lambda x: x\n) -> Iterable[T]:\n    groups = defaultdict(list)\n    for item in items:\n        groups[key(item)].append(item)\n    for k in range(min(groups), max(groups) + 1):\n        yield from groups[k]",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.counting_sort_dict",
        "documentation": {}
    },
    {
        "label": "counting_sort_list",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.counting_sort_list (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.counting_sort_list (1)",
        "peekOfCode": "def counting_sort_list(items: Sequence[T], key: Callable[[T], int] = lambda x: x):\n    max_value = max(map(key, items))\n    count = [0] * (max_value + 1)\n    for item in items:\n        count[key(item)] += 1\n    count = list(accumulate(count, initial=0))\n    ret = [None] * len(items)\n    for item in items:\n        i = count[key(item)]\n        ret[i] = item",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.counting_sort_list (1)",
        "documentation": {}
    },
    {
        "label": "counting_sort_list",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.counting_sort_list (2)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.counting_sort_list (2)",
        "peekOfCode": "def counting_sort_list(items: Sequence[T], key: Callable[[T], int] = lambda x: x):\n    max_value = max(map(key, items))\n    count = [0] * (max_value + 1)\n    for item in items:\n        count[key(item)] += 1\n    count = list(accumulate(count, initial=0))\n    ret = [None] * len(items)\n    for item in items:\n        i = count[key(item)]\n        ret[i] = item",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.counting_sort_list (2)",
        "documentation": {}
    },
    {
        "label": "counting_sort_list",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.counting_sort_list",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.counting_sort_list",
        "peekOfCode": "def counting_sort_list(items: Sequence[T], key: Callable[[T], int] = lambda x: x):\n    max_value = max(map(key, items))\n    count = [0] * (max_value + 1)\n    for item in items:\n        count[key(item)] += 1\n    count = list(accumulate(count, initial=0))\n    ret = [None] * len(items)\n    for item in items:\n        i = count[key(item)]\n        ret[i] = item",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.counting_sort_list",
        "documentation": {}
    },
    {
        "label": "threeCharsDistinct",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-week1-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-week1-projects (1)",
        "peekOfCode": "def threeCharsDistinct(s):\n    count = 0\n    for i in range(len(s)):\n        if i < len(s) - 2:\n            # print(i)\n            if s[i] != s[i + 1] and s[i] != s[i + 2] and s[i + 1] != s[i + 2]:\n                count += 1\n    return count\n# print(threeCharsDistinct(s))\nsentence = \"Man bites dog\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-week1-projects (1)",
        "documentation": {}
    },
    {
        "label": "reverseSentence",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-week1-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-week1-projects (1)",
        "peekOfCode": "def reverseSentence(sentence):\n    words_array = sentence.split(' ')\n    words_reversed = ' '.join(reversed(words_array))\n    return words_reversed\n# print(reverseSentence(sentence))\npasscode = '1111'\nattempts = [\"1111\",\n            \"4444\",\n            \"9999\",\n            \"3333\",",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-week1-projects (1)",
        "documentation": {}
    },
    {
        "label": "incorrectPasscodeAttempts",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-week1-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-week1-projects (1)",
        "peekOfCode": "def incorrectPasscodeAttempts(passcode, attempts):\n    count = 0\n    indexes = []\n    if len(attempts) < 10 and passcode not in attempts:\n        return False\n    for attempt in attempts:\n        print('attempt:', attempt)\n        if attempt != passcode:\n            print('count before:', count)\n            count += 1",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-week1-projects (1)",
        "documentation": {}
    },
    {
        "label": "digitSumsDifference",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-week1-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-week1-projects (1)",
        "peekOfCode": "def digitSumsDifference(n):\n    evens_sum = 0\n    odds_sum = 0\n    difference = 0\n    evens = []\n    odds = []\n    for num in str(n):\n        if int(num) % 2 == 0:\n            evens.append(int(num))\n        else:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-week1-projects (1)",
        "documentation": {}
    },
    {
        "label": "digitsManipulations",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-week1-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-week1-projects (1)",
        "peekOfCode": "def digitsManipulations(n):\n    nums = []\n    for num in str(n):\n        nums.append(int(num))\n    return math.prod(nums) - sum(nums)\n#\n# print(digitsManipulations(n))\ns = \"abcde\"\ndef countVowelConsonant(s):\n    vowel_count = 0",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-week1-projects (1)",
        "documentation": {}
    },
    {
        "label": "countVowelConsonant",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-week1-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-week1-projects (1)",
        "peekOfCode": "def countVowelConsonant(s):\n    vowel_count = 0\n    const_count = 0\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for letter in s:\n        if letter in vowels:\n            vowel_count += 1\n        else:\n            const_count += 2\n    return vowel_count + const_count",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-week1-projects (1)",
        "documentation": {}
    },
    {
        "label": "contains_duplicate_2",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-week1-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-week1-projects (1)",
        "peekOfCode": "def contains_duplicate_2(nums):\n    # overall runtime: O(nlogn + n) --> O(n log n)\n    # space complexity: O(1)\n    nums.sort()  # sorting is usually O(n log n)\n    # nums.sort() sorts it in place\n    # everything below this line is O(n)\n    i = 0  # O(1)\n    while i < len(nums) - 1:  # up to O(n)\n        if nums[i] == nums[i + 1]:  # O(1)\n            return True",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-week1-projects (1)",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-week1-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-week1-projects (1)",
        "peekOfCode": "s = 'abacaba'\n# def threeCharsDistinct(s):\n#     count = 0\n#\n#     for i in range(len(s)):\n#         if i < 6:\n#             if s[0] != s[i + 1] and s[i] != s[i + 2] and s[i + 1] != s[i + 2]:\n#                 count += 1\n#     print(count)\ndef threeCharsDistinct(s):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-week1-projects (1)",
        "documentation": {}
    },
    {
        "label": "sentence",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-week1-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-week1-projects (1)",
        "peekOfCode": "sentence = \"Man bites dog\"\ndef reverseSentence(sentence):\n    words_array = sentence.split(' ')\n    words_reversed = ' '.join(reversed(words_array))\n    return words_reversed\n# print(reverseSentence(sentence))\npasscode = '1111'\nattempts = [\"1111\",\n            \"4444\",\n            \"9999\",",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-week1-projects (1)",
        "documentation": {}
    },
    {
        "label": "passcode",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-week1-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-week1-projects (1)",
        "peekOfCode": "passcode = '1111'\nattempts = [\"1111\",\n            \"4444\",\n            \"9999\",\n            \"3333\",\n            \"8888\",\n            \"2222\",\n            \"7777\",\n            \"0000\",\n            \"6666\",",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-week1-projects (1)",
        "documentation": {}
    },
    {
        "label": "attempts",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-week1-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-week1-projects (1)",
        "peekOfCode": "attempts = [\"1111\",\n            \"4444\",\n            \"9999\",\n            \"3333\",\n            \"8888\",\n            \"2222\",\n            \"7777\",\n            \"0000\",\n            \"6666\",\n            \"7285\",",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-week1-projects (1)",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-week1-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-week1-projects (1)",
        "peekOfCode": "n = 412\ndef digitSumsDifference(n):\n    evens_sum = 0\n    odds_sum = 0\n    difference = 0\n    evens = []\n    odds = []\n    for num in str(n):\n        if int(num) % 2 == 0:\n            evens.append(int(num))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-week1-projects (1)",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-week1-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-week1-projects (1)",
        "peekOfCode": "n = 123456\ndef digitsManipulations(n):\n    nums = []\n    for num in str(n):\n        nums.append(int(num))\n    return math.prod(nums) - sum(nums)\n#\n# print(digitsManipulations(n))\ns = \"abcde\"\ndef countVowelConsonant(s):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-week1-projects (1)",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-week1-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-week1-projects (1)",
        "peekOfCode": "s = \"abcde\"\ndef countVowelConsonant(s):\n    vowel_count = 0\n    const_count = 0\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for letter in s:\n        if letter in vowels:\n            vowel_count += 1\n        else:\n            const_count += 2",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-week1-projects (1)",
        "documentation": {}
    },
    {
        "label": "threeCharsDistinct",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-week1-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-week1-projects",
        "peekOfCode": "def threeCharsDistinct(s):\n    count = 0\n    for i in range(len(s)):\n        if i < len(s) - 2:\n            # print(i)\n            if s[i] != s[i + 1] and s[i] != s[i + 2] and s[i + 1] != s[i + 2]:\n                count += 1\n    return count\n# print(threeCharsDistinct(s))\nsentence = \"Man bites dog\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-week1-projects",
        "documentation": {}
    },
    {
        "label": "reverseSentence",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-week1-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-week1-projects",
        "peekOfCode": "def reverseSentence(sentence):\n    words_array = sentence.split(\" \")\n    words_reversed = \" \".join(reversed(words_array))\n    return words_reversed\n# print(reverseSentence(sentence))\npasscode = \"1111\"\nattempts = [\n    \"1111\",\n    \"4444\",\n    \"9999\",",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-week1-projects",
        "documentation": {}
    },
    {
        "label": "incorrectPasscodeAttempts",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-week1-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-week1-projects",
        "peekOfCode": "def incorrectPasscodeAttempts(passcode, attempts):\n    count = 0\n    indexes = []\n    if len(attempts) < 10 and passcode not in attempts:\n        return False\n    for attempt in attempts:\n        print(\"attempt:\", attempt)\n        if attempt != passcode:\n            print(\"count before:\", count)\n            count += 1",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-week1-projects",
        "documentation": {}
    },
    {
        "label": "digitSumsDifference",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-week1-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-week1-projects",
        "peekOfCode": "def digitSumsDifference(n):\n    evens_sum = 0\n    odds_sum = 0\n    difference = 0\n    evens = []\n    odds = []\n    for num in str(n):\n        if int(num) % 2 == 0:\n            evens.append(int(num))\n        else:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-week1-projects",
        "documentation": {}
    },
    {
        "label": "digitsManipulations",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-week1-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-week1-projects",
        "peekOfCode": "def digitsManipulations(n):\n    nums = []\n    for num in str(n):\n        nums.append(int(num))\n    return math.prod(nums) - sum(nums)\n#\n# print(digitsManipulations(n))\ns = \"abcde\"\ndef countVowelConsonant(s):\n    vowel_count = 0",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-week1-projects",
        "documentation": {}
    },
    {
        "label": "countVowelConsonant",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-week1-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-week1-projects",
        "peekOfCode": "def countVowelConsonant(s):\n    vowel_count = 0\n    const_count = 0\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for letter in s:\n        if letter in vowels:\n            vowel_count += 1\n        else:\n            const_count += 2\n    return vowel_count + const_count",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-week1-projects",
        "documentation": {}
    },
    {
        "label": "contains_duplicate_2",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-week1-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-week1-projects",
        "peekOfCode": "def contains_duplicate_2(nums):\n    # overall runtime: O(nlogn + n) --> O(n log n)\n    # space complexity: O(1)\n    nums.sort()  # sorting is usually O(n log n)\n    # nums.sort() sorts it in place\n    # everything below this line is O(n)\n    i = 0  # O(1)\n    while i < len(nums) - 1:  # up to O(n)\n        if nums[i] == nums[i + 1]:  # O(1)\n            return True",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-week1-projects",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-week1-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-week1-projects",
        "peekOfCode": "s = \"abacaba\"\n# def threeCharsDistinct(s):\n#     count = 0\n#\n#     for i in range(len(s)):\n#         if i < 6:\n#             if s[0] != s[i + 1] and s[i] != s[i + 2] and s[i + 1] != s[i + 2]:\n#                 count += 1\n#     print(count)\ndef threeCharsDistinct(s):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-week1-projects",
        "documentation": {}
    },
    {
        "label": "sentence",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-week1-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-week1-projects",
        "peekOfCode": "sentence = \"Man bites dog\"\ndef reverseSentence(sentence):\n    words_array = sentence.split(\" \")\n    words_reversed = \" \".join(reversed(words_array))\n    return words_reversed\n# print(reverseSentence(sentence))\npasscode = \"1111\"\nattempts = [\n    \"1111\",\n    \"4444\",",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-week1-projects",
        "documentation": {}
    },
    {
        "label": "passcode",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-week1-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-week1-projects",
        "peekOfCode": "passcode = \"1111\"\nattempts = [\n    \"1111\",\n    \"4444\",\n    \"9999\",\n    \"3333\",\n    \"8888\",\n    \"2222\",\n    \"7777\",\n    \"0000\",",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-week1-projects",
        "documentation": {}
    },
    {
        "label": "attempts",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-week1-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-week1-projects",
        "peekOfCode": "attempts = [\n    \"1111\",\n    \"4444\",\n    \"9999\",\n    \"3333\",\n    \"8888\",\n    \"2222\",\n    \"7777\",\n    \"0000\",\n    \"6666\",",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-week1-projects",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-week1-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-week1-projects",
        "peekOfCode": "n = 412\ndef digitSumsDifference(n):\n    evens_sum = 0\n    odds_sum = 0\n    difference = 0\n    evens = []\n    odds = []\n    for num in str(n):\n        if int(num) % 2 == 0:\n            evens.append(int(num))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-week1-projects",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-week1-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-week1-projects",
        "peekOfCode": "n = 123456\ndef digitsManipulations(n):\n    nums = []\n    for num in str(n):\n        nums.append(int(num))\n    return math.prod(nums) - sum(nums)\n#\n# print(digitsManipulations(n))\ns = \"abcde\"\ndef countVowelConsonant(s):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-week1-projects",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-week1-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-week1-projects",
        "peekOfCode": "s = \"abcde\"\ndef countVowelConsonant(s):\n    vowel_count = 0\n    const_count = 0\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for letter in s:\n        if letter in vowels:\n            vowel_count += 1\n        else:\n            const_count += 2",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-week1-projects",
        "documentation": {}
    },
    {
        "label": "remove_duplicates",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "def remove_duplicates(nums):\n    # Your code here\n    i = 0\n    while i < len(nums) - 1:\n        if nums[i] == nums[i + 1]:\n            nums.pop(i + 1)\n        else:\n            i = i + 1\n    return nums\n\"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "contains_duplicate",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "def contains_duplicate(nums):\n    # Your code here\n    num_set = set(nums)\n    if len(num_set) == len(nums):\n        return False\n    else:\n        return True\n# print(contains_duplicate([1, 3, 3, 2, 1]))\n\"\"\"\nGiven two strings `a` and `b`, write a function to determine if `a` is an",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "is_anagram",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "def is_anagram(a, b):\n    # Your code here\n    pass\n# # \"\"\"\n# # Example One\n# # \"\"\"\n# # my_list1 = [1, 2, 3, 4, 5, 6]\n# # my_list2 = my_list1\n# # # How would you verify that my_list1 and my_list2 have the same identity?\n# # print(id(my_list1) == id(my_list2))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "fibonacci",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "def fibonacci(n):\n    lst = [0, 1]\n    for i in range(2, n):\n        lst.append(lst[i - 2] + lst[i - 1])\n    return lst[n - 1]\n# # O(n)\n#\n# \"\"\"\n# Use Big O notation to classify the space complexity of the function below.\n# \"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "fibonacci_two",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "def fibonacci_two(n):\n    x, y, z = 0, 1, None\n    if n == 0:\n        return x\n    if n == 1:\n        return y\n    for i in range(2, n):\n        z = x + y\n        x, y = y, z\n    return z",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "do_something",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "def do_something(n):\n    lst = []\n    for i in range(n):\n        for j in range(n):\n            lst.append(i + j)\n    return lst\n# O(n^2)\n# numbers = [2, 0, 0, 0]\n#\n#",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "removeEvens",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "def removeEvens(numbers):\n    return [num for num in numbers if num % 2 != 0]\n# below code didn't pass tests above did\n# for num in numbers:\n#     if num % 2 == 0 and num != 0:\n#         numbers.remove(num)\n# return numbers\n# print(removeEvens(numbers))\nimport statistics\nsequence = [-1, 3, -2, 2]",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "arrayMedian",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "def arrayMedian(sequence):\n    return statistics.median(sequence)\n# print(arrayMedian(sequence))\n#\n# s = \"TuVwXYZ\"\n#\n# # s = \"ABCDEFFDEfghCBA\"\n#\n# # def originalIncreasingSubstrings(s):\n# #     string = ''",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "increasingSubstrings",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "def increasingSubstrings(s):\n    string = ''\n    subs = []\n    i = 0\n    if len(s) == 1:\n        subs.append(s[0])\n    else:\n        for i in range(len(s) - 1):\n            # print(s[i])\n            if not string.startswith(s[i]):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "additionWithoutCarrying",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "def additionWithoutCarrying(param1, param2):\n    # set variable to hold the added row answers\n    result = []\n    # function to find a digit in a number\n    def find_digit(number, place):\n        return number // 10 ** place % 10\n    # get larger number\n    larger = None\n    if param1 > param2:\n        larger = param1",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "evenDigitsNumber",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "def evenDigitsNumber(a):\n    even_count = 0\n    for group in a:\n        if len(str(group)) % 2 == 0:\n            even_count += 1\n    return even_count\n# print(evenDigitsNumber(a))\n# You're writing a new programming language and you'd like it to have the capability of splitting a string into substrings with limited characters. More specifically, we'll call a substring good if the absolute difference in ASCII codes between any two of its characters is less than or equal to k.\n#\n# For example, if k = 3, then the string \"bad\" would be considered good, since the greatest difference in ASCII codes is 3 (between the a and d characters). The string \"nice\" would not be considered good, since there's a difference of 11 between the c and n characters.",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "increasingSubstrings",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "def increasingSubstrings(s):\n    string = ''\n    subs = []\n    i = 0\n    if len(s) == 1:\n        subs.append(s[0])\n    else:\n        for i in range(len(s) - 1):\n            # print(s[i])\n            if not string.startswith(s[i]):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "goodSubstrings",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "def goodSubstrings(strToSplit, k):\n    smallest = ord(strToSplit[0])\n    largest = 0\n    subs = []\n    s = ''\n    for i in range(len(strToSplit)):\n        # print('Letter', strToSplit[i],\n        #       ord(strToSplit[i]))\n        # print(f'smallest: {smallest} largest: {largest}')\n        if ord(strToSplit[i]) < smallest:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "to_lower_case",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "def to_lower_case(string):\n    result = ''\n    for i in range(len(string)):\n        if ord(string[i]) <= 90 or ord(string[i]) <= 65:\n            result += chr(ord(string[i]) + 32)\n        else:\n            result += string[i]\n    return result\n# print(to_lower_case(string))\n\"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "roman_to_integer",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "def roman_to_integer(roman):\n    numerals = {\n        'I': 1,\n        'V': 5,\n        'X': 10,\n        'L': 50,\n        'C': 100,\n        'D': 500,\n        'M': 1000,\n        'IV': 4,",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "find_lucky",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "def find_lucky(lst):\n    lucky = []\n    for num in lst:\n        if num == lst.count(num):\n            lucky.append(num)\n    if not lucky:\n        return -1\n    return max(lucky)\n# print(find_lucky(lst))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "sequence",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "sequence = [-1, 3, -2, 2]\ndef arrayMedian(sequence):\n    return statistics.median(sequence)\n# print(arrayMedian(sequence))\n#\n# s = \"TuVwXYZ\"\n#\n# # s = \"ABCDEFFDEfghCBA\"\n#\n# # def originalIncreasingSubstrings(s):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "s = \"f\"\ndef increasingSubstrings(s):\n    string = ''\n    subs = []\n    i = 0\n    if len(s) == 1:\n        subs.append(s[0])\n    else:\n        for i in range(len(s) - 1):\n            # print(s[i])",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "param1",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "param1 = 456\nparam2 = 1734\ndef additionWithoutCarrying(param1, param2):\n    # set variable to hold the added row answers\n    result = []\n    # function to find a digit in a number\n    def find_digit(number, place):\n        return number // 10 ** place % 10\n    # get larger number\n    larger = None",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "param2",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "param2 = 1734\ndef additionWithoutCarrying(param1, param2):\n    # set variable to hold the added row answers\n    result = []\n    # function to find a digit in a number\n    def find_digit(number, place):\n        return number // 10 ** place % 10\n    # get larger number\n    larger = None\n    if param1 > param2:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "a = [12, 134, 111, 1111, 10]\ndef evenDigitsNumber(a):\n    even_count = 0\n    for group in a:\n        if len(str(group)) % 2 == 0:\n            even_count += 1\n    return even_count\n# print(evenDigitsNumber(a))\n# You're writing a new programming language and you'd like it to have the capability of splitting a string into substrings with limited characters. More specifically, we'll call a substring good if the absolute difference in ASCII codes between any two of its characters is less than or equal to k.\n#",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "strToSplit",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "strToSplit = \"aaabaaabb\"\nk = 0\nstrToSplit = \"aaabaaabb\"\nk = 1\nstrToSplit = \"aaabzaaabb\"\nk = 5\ndef goodSubstrings(strToSplit, k):\n    smallest = ord(strToSplit[0])\n    largest = 0\n    subs = []",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "k = 0\nstrToSplit = \"aaabaaabb\"\nk = 1\nstrToSplit = \"aaabzaaabb\"\nk = 5\ndef goodSubstrings(strToSplit, k):\n    smallest = ord(strToSplit[0])\n    largest = 0\n    subs = []\n    s = ''",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "strToSplit",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "strToSplit = \"aaabaaabb\"\nk = 1\nstrToSplit = \"aaabzaaabb\"\nk = 5\ndef goodSubstrings(strToSplit, k):\n    smallest = ord(strToSplit[0])\n    largest = 0\n    subs = []\n    s = ''\n    for i in range(len(strToSplit)):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "k = 1\nstrToSplit = \"aaabzaaabb\"\nk = 5\ndef goodSubstrings(strToSplit, k):\n    smallest = ord(strToSplit[0])\n    largest = 0\n    subs = []\n    s = ''\n    for i in range(len(strToSplit)):\n        # print('Letter', strToSplit[i],",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "strToSplit",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "strToSplit = \"aaabzaaabb\"\nk = 5\ndef goodSubstrings(strToSplit, k):\n    smallest = ord(strToSplit[0])\n    largest = 0\n    subs = []\n    s = ''\n    for i in range(len(strToSplit)):\n        # print('Letter', strToSplit[i],\n        #       ord(strToSplit[i]))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "k = 5\ndef goodSubstrings(strToSplit, k):\n    smallest = ord(strToSplit[0])\n    largest = 0\n    subs = []\n    s = ''\n    for i in range(len(strToSplit)):\n        # print('Letter', strToSplit[i],\n        #       ord(strToSplit[i]))\n        # print(f'smallest: {smallest} largest: {largest}')",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "string = \"LambdaSchool\"\ndef to_lower_case(string):\n    result = ''\n    for i in range(len(string)):\n        if ord(string[i]) <= 90 or ord(string[i]) <= 65:\n            result += chr(ord(string[i]) + 32)\n        else:\n            result += string[i]\n    return result\n# print(to_lower_case(string))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "roman",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "roman = 'IV'\nroman = 'XII'\nroman = \"MCMLXXXIV\"\n#  TODO finish this!\ndef roman_to_integer(roman):\n    numerals = {\n        'I': 1,\n        'V': 5,\n        'X': 10,\n        'L': 50,",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "roman",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "roman = 'XII'\nroman = \"MCMLXXXIV\"\n#  TODO finish this!\ndef roman_to_integer(roman):\n    numerals = {\n        'I': 1,\n        'V': 5,\n        'X': 10,\n        'L': 50,\n        'C': 100,",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "roman",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "roman = \"MCMLXXXIV\"\n#  TODO finish this!\ndef roman_to_integer(roman):\n    numerals = {\n        'I': 1,\n        'V': 5,\n        'X': 10,\n        'L': 50,\n        'C': 100,\n        'D': 500,",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "lst",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "lst = [2, 2, 3, 3, 3, 4, 4, 4, 4]\n#  O(n^2) because counting in the loop...\ndef find_lucky(lst):\n    lucky = []\n    for num in lst:\n        if num == lst.count(num):\n            lucky.append(num)\n    if not lucky:\n        return -1\n    return max(lucky)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "remove_duplicates",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects",
        "peekOfCode": "def remove_duplicates(nums):\n    # Your code here\n    i = 0\n    while i < len(nums) - 1:\n        if nums[i] == nums[i + 1]:\n            nums.pop(i + 1)\n        else:\n            i = i + 1\n    return nums\n\"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "contains_duplicate",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects",
        "peekOfCode": "def contains_duplicate(nums):\n    # Your code here\n    num_set = set(nums)\n    if len(num_set) == len(nums):\n        return False\n    else:\n        return True\n# print(contains_duplicate([1, 3, 3, 2, 1]))\n\"\"\"\nGiven two strings `a` and `b`, write a function to determine if `a` is an",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "is_anagram",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects",
        "peekOfCode": "def is_anagram(a, b):\n    # Your code here\n    pass\n# # \"\"\"\n# # Example One\n# # \"\"\"\n# # my_list1 = [1, 2, 3, 4, 5, 6]\n# # my_list2 = my_list1\n# # # How would you verify that my_list1 and my_list2 have the same identity?\n# # print(id(my_list1) == id(my_list2))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "fibonacci",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects",
        "peekOfCode": "def fibonacci(n):\n    lst = [0, 1]\n    for i in range(2, n):\n        lst.append(lst[i - 2] + lst[i - 1])\n    return lst[n - 1]\n# # O(n)\n#\n# \"\"\"\n# Use Big O notation to classify the space complexity of the function below.\n# \"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "fibonacci_two",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects",
        "peekOfCode": "def fibonacci_two(n):\n    x, y, z = 0, 1, None\n    if n == 0:\n        return x\n    if n == 1:\n        return y\n    for i in range(2, n):\n        z = x + y\n        x, y = y, z\n    return z",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "do_something",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects",
        "peekOfCode": "def do_something(n):\n    lst = []\n    for i in range(n):\n        for j in range(n):\n            lst.append(i + j)\n    return lst\n# O(n^2)\n# numbers = [2, 0, 0, 0]\n#\n#",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "removeEvens",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects",
        "peekOfCode": "def removeEvens(numbers):\n    return [num for num in numbers if num % 2 != 0]\n# below code didn't pass tests above did\n# for num in numbers:\n#     if num % 2 == 0 and num != 0:\n#         numbers.remove(num)\n# return numbers\n# print(removeEvens(numbers))\nimport statistics\nsequence = [-1, 3, -2, 2]",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "arrayMedian",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects",
        "peekOfCode": "def arrayMedian(sequence):\n    return statistics.median(sequence)\n# print(arrayMedian(sequence))\n#\n# s = \"TuVwXYZ\"\n#\n# # s = \"ABCDEFFDEfghCBA\"\n#\n# # def originalIncreasingSubstrings(s):\n# #     string = ''",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "increasingSubstrings",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects",
        "peekOfCode": "def increasingSubstrings(s):\n    string = \"\"\n    subs = []\n    i = 0\n    if len(s) == 1:\n        subs.append(s[0])\n    else:\n        for i in range(len(s) - 1):\n            # print(s[i])\n            if not string.startswith(s[i]):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "additionWithoutCarrying",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects",
        "peekOfCode": "def additionWithoutCarrying(param1, param2):\n    # set variable to hold the added row answers\n    result = []\n    # function to find a digit in a number\n    def find_digit(number, place):\n        return number // 10 ** place % 10\n    # get larger number\n    larger = None\n    if param1 > param2:\n        larger = param1",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "evenDigitsNumber",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects",
        "peekOfCode": "def evenDigitsNumber(a):\n    even_count = 0\n    for group in a:\n        if len(str(group)) % 2 == 0:\n            even_count += 1\n    return even_count\n# print(evenDigitsNumber(a))\n# You're writing a new programming language and you'd like it to have the capability of splitting a string into substrings with limited characters. More specifically, we'll call a substring good if the absolute difference in ASCII codes between any two of its characters is less than or equal to k.\n#\n# For example, if k = 3, then the string \"bad\" would be considered good, since the greatest difference in ASCII codes is 3 (between the a and d characters). The string \"nice\" would not be considered good, since there's a difference of 11 between the c and n characters.",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "increasingSubstrings",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects",
        "peekOfCode": "def increasingSubstrings(s):\n    string = \"\"\n    subs = []\n    i = 0\n    if len(s) == 1:\n        subs.append(s[0])\n    else:\n        for i in range(len(s) - 1):\n            # print(s[i])\n            if not string.startswith(s[i]):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "goodSubstrings",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects",
        "peekOfCode": "def goodSubstrings(strToSplit, k):\n    smallest = ord(strToSplit[0])\n    largest = 0\n    subs = []\n    s = \"\"\n    for i in range(len(strToSplit)):\n        # print('Letter', strToSplit[i],\n        #       ord(strToSplit[i]))\n        # print(f'smallest: {smallest} largest: {largest}')\n        if ord(strToSplit[i]) < smallest:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "to_lower_case",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects",
        "peekOfCode": "def to_lower_case(string):\n    result = \"\"\n    for i in range(len(string)):\n        if ord(string[i]) <= 90 or ord(string[i]) <= 65:\n            result += chr(ord(string[i]) + 32)\n        else:\n            result += string[i]\n    return result\n# print(to_lower_case(string))\n\"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "roman_to_integer",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects",
        "peekOfCode": "def roman_to_integer(roman):\n    numerals = {\n        \"I\": 1,\n        \"V\": 5,\n        \"X\": 10,\n        \"L\": 50,\n        \"C\": 100,\n        \"D\": 500,\n        \"M\": 1000,\n        \"IV\": 4,",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "find_lucky",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects",
        "peekOfCode": "def find_lucky(lst):\n    lucky = []\n    for num in lst:\n        if num == lst.count(num):\n            lucky.append(num)\n    if not lucky:\n        return -1\n    return max(lucky)\n# print(find_lucky(lst))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "sequence",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects",
        "peekOfCode": "sequence = [-1, 3, -2, 2]\ndef arrayMedian(sequence):\n    return statistics.median(sequence)\n# print(arrayMedian(sequence))\n#\n# s = \"TuVwXYZ\"\n#\n# # s = \"ABCDEFFDEfghCBA\"\n#\n# # def originalIncreasingSubstrings(s):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects",
        "peekOfCode": "s = \"f\"\ndef increasingSubstrings(s):\n    string = \"\"\n    subs = []\n    i = 0\n    if len(s) == 1:\n        subs.append(s[0])\n    else:\n        for i in range(len(s) - 1):\n            # print(s[i])",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "param1",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects",
        "peekOfCode": "param1 = 456\nparam2 = 1734\ndef additionWithoutCarrying(param1, param2):\n    # set variable to hold the added row answers\n    result = []\n    # function to find a digit in a number\n    def find_digit(number, place):\n        return number // 10 ** place % 10\n    # get larger number\n    larger = None",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "param2",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects",
        "peekOfCode": "param2 = 1734\ndef additionWithoutCarrying(param1, param2):\n    # set variable to hold the added row answers\n    result = []\n    # function to find a digit in a number\n    def find_digit(number, place):\n        return number // 10 ** place % 10\n    # get larger number\n    larger = None\n    if param1 > param2:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects",
        "peekOfCode": "a = [12, 134, 111, 1111, 10]\ndef evenDigitsNumber(a):\n    even_count = 0\n    for group in a:\n        if len(str(group)) % 2 == 0:\n            even_count += 1\n    return even_count\n# print(evenDigitsNumber(a))\n# You're writing a new programming language and you'd like it to have the capability of splitting a string into substrings with limited characters. More specifically, we'll call a substring good if the absolute difference in ASCII codes between any two of its characters is less than or equal to k.\n#",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "strToSplit",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects",
        "peekOfCode": "strToSplit = \"aaabaaabb\"\nk = 0\nstrToSplit = \"aaabaaabb\"\nk = 1\nstrToSplit = \"aaabzaaabb\"\nk = 5\ndef goodSubstrings(strToSplit, k):\n    smallest = ord(strToSplit[0])\n    largest = 0\n    subs = []",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects",
        "peekOfCode": "k = 0\nstrToSplit = \"aaabaaabb\"\nk = 1\nstrToSplit = \"aaabzaaabb\"\nk = 5\ndef goodSubstrings(strToSplit, k):\n    smallest = ord(strToSplit[0])\n    largest = 0\n    subs = []\n    s = \"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "strToSplit",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects",
        "peekOfCode": "strToSplit = \"aaabaaabb\"\nk = 1\nstrToSplit = \"aaabzaaabb\"\nk = 5\ndef goodSubstrings(strToSplit, k):\n    smallest = ord(strToSplit[0])\n    largest = 0\n    subs = []\n    s = \"\"\n    for i in range(len(strToSplit)):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects",
        "peekOfCode": "k = 1\nstrToSplit = \"aaabzaaabb\"\nk = 5\ndef goodSubstrings(strToSplit, k):\n    smallest = ord(strToSplit[0])\n    largest = 0\n    subs = []\n    s = \"\"\n    for i in range(len(strToSplit)):\n        # print('Letter', strToSplit[i],",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "strToSplit",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects",
        "peekOfCode": "strToSplit = \"aaabzaaabb\"\nk = 5\ndef goodSubstrings(strToSplit, k):\n    smallest = ord(strToSplit[0])\n    largest = 0\n    subs = []\n    s = \"\"\n    for i in range(len(strToSplit)):\n        # print('Letter', strToSplit[i],\n        #       ord(strToSplit[i]))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects",
        "peekOfCode": "k = 5\ndef goodSubstrings(strToSplit, k):\n    smallest = ord(strToSplit[0])\n    largest = 0\n    subs = []\n    s = \"\"\n    for i in range(len(strToSplit)):\n        # print('Letter', strToSplit[i],\n        #       ord(strToSplit[i]))\n        # print(f'smallest: {smallest} largest: {largest}')",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects",
        "peekOfCode": "string = \"LambdaSchool\"\ndef to_lower_case(string):\n    result = \"\"\n    for i in range(len(string)):\n        if ord(string[i]) <= 90 or ord(string[i]) <= 65:\n            result += chr(ord(string[i]) + 32)\n        else:\n            result += string[i]\n    return result\n# print(to_lower_case(string))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "roman",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects",
        "peekOfCode": "roman = \"IV\"\nroman = \"XII\"\nroman = \"MCMLXXXIV\"\n#  TODO finish this!\ndef roman_to_integer(roman):\n    numerals = {\n        \"I\": 1,\n        \"V\": 5,\n        \"X\": 10,\n        \"L\": 50,",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "roman",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects",
        "peekOfCode": "roman = \"XII\"\nroman = \"MCMLXXXIV\"\n#  TODO finish this!\ndef roman_to_integer(roman):\n    numerals = {\n        \"I\": 1,\n        \"V\": 5,\n        \"X\": 10,\n        \"L\": 50,\n        \"C\": 100,",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "roman",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects",
        "peekOfCode": "roman = \"MCMLXXXIV\"\n#  TODO finish this!\ndef roman_to_integer(roman):\n    numerals = {\n        \"I\": 1,\n        \"V\": 5,\n        \"X\": 10,\n        \"L\": 50,\n        \"C\": 100,\n        \"D\": 500,",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "lst",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects",
        "peekOfCode": "lst = [2, 2, 3, 3, 3, 4, 4, 4, 4]\n#  O(n^2) because counting in the loop...\ndef find_lucky(lst):\n    lucky = []\n    for num in lst:\n        if num == lst.count(num):\n            lucky.append(num)\n    if not lucky:\n        return -1\n    return max(lucky)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "LinkedListNode",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "class LinkedListNode():\n    def __init__(self, value):\n        self.value = value\n        self.next  = None\nx = LinkedListNode('X')\ny = LinkedListNode('Y')\nz = LinkedListNode('Z')\nx.next = y\ny.next = z\ndelete_node(y)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "LinkedListNode",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "class LinkedListNode():\n    def __init__(self, value):\n        self.value = value\n        self.next = None\ndef delete_node(node_to_delete):\n    next = node_to_delete.next\n    next.next = None\n    node_to_delete.value = next.value\n    node_to_delete.next = next.next\nx = LinkedListNode('X')",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "LinkedListNode",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "class LinkedListNode():\n    def __init__(self, value):\n        self.value = value\n        self.next = None\ndef reverse(head_of_list):\n    current_node = head_of_list\n    previous_node = None\n    next_node = None\n    # Until we have 'fallen off' the end of the list\n    while current_node:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "class ListNode(object):\n    def __init__(self, x):\n        self.value = x\n        self.next = None\n[1, 3, 4, 6]\n\"\"\"\nNote: Your solution should have O(n) time complexity, where n is the number of elements in l, since this is what you will be asked to accomplish in an interview.\nYou have a singly linked list l, which is sorted in strictly increasing order, and an integer value. Add value to the list l, preserving its original sorting.\nNote: in examples below and tests preview linked lists are presented as arrays just for simplicity of visualization: in real data you will be given a head node l of the linked list\nExample",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "class ListNode(object):\n    def __init__(self, x):\n        self.value = x\n        self.next = None\ndef mergeTwoLinkedLists(l1, l2):\n    # create empty node to hold the new merged list\n    merged_node = ListNode(0)\n    # end will hold the end node\n    end = merged_node\n    while True:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "class ListNode(object):\n    def __init__(self, x):\n        self.value = x\n        self.next = None\ndef reverseNodesInKGroups(l, k):\n    # create an empty node to hold the new list\n    new_node = ListNode(0)\n    # set the next value to the list\n    new_node.next = l\n    # set the previous node to the new list",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "LinkedListNode",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "class LinkedListNode:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\nclass Queue:\n    def __init__(self):\n        self.front = None\n        self.rear = None\n    def enqueue(self, item):\n        new_node = LinkedListNode(item)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "Queue",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "class Queue:\n    def __init__(self):\n        self.front = None\n        self.rear = None\n    def enqueue(self, item):\n        new_node = LinkedListNode(item)\n        # check if queue is empty\n        if self.is_empty():\n            self.front = new_node\n            self.rear = new_node",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "class Stack:\n    def __init__(self):\n        self.data = []\n    def push(self, item):\n        self.data.append(item)\n    # my code for peek method\n    def peek(self, item):\n        return self.data[-1]\n    def pop(self):\n        if len(self.data) > 0:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "LinkedListNode",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "class LinkedListNode:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\nclass Stack:\n    def __init__(self):\n        self.top = None\n    def push(self, data):\n        # create new node with data\n        new_node = LinkedListNode(data)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "class Stack:\n    def __init__(self):\n        self.top = None\n    def push(self, data):\n        # create new node with data\n        new_node = LinkedListNode(data)\n        # set current top to new node's next\n        new_node.next = self.top\n        # reset the top pointer to the new node\n        self.top = new_node",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "class Stack(object):\n    def __init__(self):\n        \"\"\"Initialize an empty stack\"\"\"\n        self.items = []\n    def push(self, item):\n        \"\"\"Push a new item onto the stack\"\"\"\n        self.items.append(item)\n    def pop(self):\n        \"\"\"Remove and return the last item\"\"\"\n        # If the stack is empty, return None",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "MaxStack",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "class MaxStack(object):\n    def __init__(self):\n        # Your code here\n        self.stack = Stack()\n        # self.head = []\n        self.max_stack = Stack()\n    def push(self, item):\n        \"\"\"Add a new item onto the top of our stack.\"\"\"\n        # Your code here\n        # self.head.append(item)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "class Stack:\n    def __init__(self):\n        self.data = []\n    def push(self, item):\n        self.data.append(item)\n    def pop(self):\n        if len(self.data) > 0:\n            return self.data.pop()\n        return \"The stack is empty\"\nclass QueueTwoStacks:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "QueueTwoStacks",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "class QueueTwoStacks:\n    def __init__(self):\n        # Your code here\n        self.stack1 = Stack()\n        self.stack2 = Stack()\n    def enqueue(self, item):\n        # Your code here\n        self.stack1.push(item)\n    def dequeue(self):\n        # Your code here",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "class Stack:\n    def __init__(self):\n        self.items = []\n    def isEmpty(self):\n        return self.items == []\n    def push(self, item):\n        self.items.append(item)\n    def pop(self):\n        return self.items.pop()\ndef queueOnStacks(requests):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "pivot_index",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def pivot_index(nums):\n    if len(nums) <= 1:\n        return -1\n    left = 0\n    right = sum(nums)\n    for i in range(len(nums)):\n        right -= nums[i]\n        if right == left:\n            return i\n        left += nums[i]",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "plus_one",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def plus_one(digits):\n    # check the last digit if its not 9 we just add 1\n    # if it is a 9 make it 0\n    # go left check 2nd to last if its not a 9 add 1\n    # if it is a 9\n    index = len(digits) - 1\n    while index >= 0 and digits[index] == 9:\n        digits[index] = 0\n        index -= 1\n    if index == -1:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "buyAndSellStock",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def buyAndSellStock(prices):\n    length = len(prices)\n    # iterate array, for each item after subtract and store the amount as\n    # highest profit.. replace if needed with a higher profit\n    if prices == sorted(prices, reverse=True) or len(prices) < 2:\n        return 0\n    highest_profit = prices[1] - prices[0]\n    smallest_number = prices[0]\n    for i in range(1, length):\n        # only check if the selected number minus the smallest number before",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "alphabeticShift",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def alphabeticShift(inputString):\n    new_string = ''\n    for letter in inputString:\n        new_letter = ord(letter) + 1\n        if new_letter == 123:\n            new_letter = 97\n        new_string += chr(new_letter)\n    return new_string\n# print(alphabeticShift(inputString))\n\"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "validParenthesesSequence",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def validParenthesesSequence(s):\n    check = []\n    if s == '':\n        return True\n    if s[0] == ')':\n        return False\n    for paren in s:\n        if paren == '(':\n            check.append(paren)\n        else:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "delete_node",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def delete_node(node_to_delete):\n    next = node_to_delete.next\n    next.next = None\n    node_to_delete.value = next.value\n    node_to_delete.next = next.next\nx = LinkedListNode('X')\ny = LinkedListNode('Y')\nz = LinkedListNode('Z')\nx.next = y\ny.next = z",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "reverse",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def reverse(head_of_list):\n    current_node = head_of_list\n    previous_node = None\n    next_node = None\n    # Until we have 'fallen off' the end of the list\n    while current_node:\n        # Copy a pointer to the next element\n        # before we overwrite current_node.next\n        next_node = current_node.next\n        # Reverse the 'next' pointer",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "insertValueIntoSortedLinkedList",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def insertValueIntoSortedLinkedList(l, value):\n    # create a new node with the value\n    node = ListNode(value)\n    # if there is no list return the new node\n    if l == None:\n        return node\n    else:\n        # else if the list.value (first item in the list) > the new value\n        if l.value > value:\n            # set new values as the first item in the list",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "mergeTwoLinkedLists",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def mergeTwoLinkedLists(l1, l2):\n    # create empty node to hold the new merged list\n    merged_node = ListNode(0)\n    # end will hold the end node\n    end = merged_node\n    while True:\n        # if either list becomes empty join lists\n        if l1 is None:\n            end.next = l2\n            break",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "reverseNodesInKGroups",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def reverseNodesInKGroups(l, k):\n    # create an empty node to hold the new list\n    new_node = ListNode(0)\n    # set the next value to the list\n    new_node.next = l\n    # set the previous node to the new list\n    prev = new_node\n    while True:\n        # set the start to the new node next\n        start = prev.next",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "reverse_list",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def reverse_list(start, end):\n    # set the last reversed group to the new start\n    old_reversed = start\n    # set the new current to the start\n    current = start\n    # set next node to the node start is pointing to\n    next_node = start.next\n    # while the current node is not the last node\n    while current != end:\n        # iterate",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "is_valid",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def is_valid(code):\n    check = []\n    if code == '':\n        return True\n    if code[0] == ')' or code[0] == '}' or code[0] == ']':\n        return False\n    for paren in code:\n        if paren == ' ':\n            continue\n        if paren == '(' or paren == '{' or paren == '[':",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "queueOnStacks",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def queueOnStacks(requests):\n    left = Stack()\n    right = Stack()\n    def insert(x):\n        left.push(x)\n        print('queue:', left.items)\n    def remove():\n        if len(right.items) == 0:\n            while len(left.items) > 0:\n                shifted = left.pop()",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "validBracketSequence",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def validBracketSequence(sequence):\n    pairs = dict(zip('(,[,{', '),],}'))\n    stack = []\n    for item in sequence:\n        if item in pairs:\n            stack.append(pairs[item])\n        elif not (stack and item == stack.pop()):\n            return False\n    return not stack\n# print(validBracketSequence(sequence))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "fibonacciSimpleSum2",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def fibonacciSimpleSum2(n):\n    # if 0 is less than n and n is less than 5 then we know we can return\n    # true because n will be 1-4 which can be created with 2 fib numbers\n    if 0 < n < 5:\n        return True\n    # first get fibonacci sequence up to n\n    seq = [0, 1]\n    # starting from 2 and ending at n\n    for i in range(2, n):\n        # add seq at i - 2 (0 to start) and seq at i - 1 (1 to start)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "csBinarySearch",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def csBinarySearch(nums, target):\n    min = 0\n    max = len(nums) - 1\n    while not max < min:\n        guess = (max + min) // 2\n        if nums[guess] == target:\n            return guess\n        elif nums[guess] < target:\n            min = guess + 1\n        else:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "csSearchRotatedSortedArray",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def csSearchRotatedSortedArray(nums, target):\n    min = 0\n    max = len(nums) - 1\n    while not max < min:\n        guess = (max + min) // 2\n        # print(f'min: {nums[min]} max: {nums[max]} guess:{nums[guess]} target:'\n        #       f' {target}')\n        # if the guess is the target we got it and return the guess\n        if nums[guess] == target:\n            # print('guessed the target')",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "linear_search",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def linear_search(arr, target):\n    # loop through each item in the input array\n    i = len(arr) - 1\n    for idx in range(len(arr)):\n        # check if the item at the current index is equal to the target\n        if arr[i] == target:\n            # return the current index as the match\n            return i\n        i -= 1\n    # if we were able to loop through the entire array, the target is not present",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "recursive_search",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def recursive_search(arr, target):\n    if arr[0] == target:\n        return True\n    elif len(arr[1:]) > 1:\n        return recursive_search(arr[1:], target)\n    return False\n# print(recursive_search(arr, target))\n\"\"\"\nBinary Search\n\"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "binary_search",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def binary_search(arr, target):\n    # 1. Declare min = 0 and max = length of array - 1\n    min = 0\n    max = len(arr) - 1\n    while not max < min:\n        # 2. Figure out the guess value by getting the middle integer between min and max\n        guess = (max + min) // 2\n        # 3. if array[guess] equals the target, we found the element, return the index\n        if arr[guess] == target:\n            return guess",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "binary_recursive_search",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def binary_recursive_search(arr, target, min_index, max_index):\n    if min_index >= max_index:\n        return -1\n    guess = (max_index + min_index) // 2\n    if arr[guess] == target:\n        return guess\n    elif target < arr[guess]:\n        return binary_recursive_search(arr, target, min_index, guess - 1)\n    else:\n        return binary_recursive_search(arr, target, guess + 1, max_index)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "find_rotation_point",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def find_rotation_point(surnames):\n    # Your code here\n    min = 0\n    max = len(surnames) - 1\n    while not max < min:\n        guess = (min + max) // 2\n        if surnames[guess] < surnames[guess + 1] and surnames[guess] < surnames[\n            guess - 1]:\n            return guess\n        else:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "find_rotation_point",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def find_rotation_point(surnames):\n    # Your code here\n    # UNDERSTAND\n    # [ 6,   7, 8, 0, 1, 2, 3, 4, 5]\n    #           min max\n    #           mid\n    # [ 7, 0, 1,  2, 3, 4, 5, 6]\n    #  min\n    # max\n    # mid",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "firstDraftWithTypo",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def firstDraftWithTypo(n):\n    # Your code here\n    pass\n    contains_typo = 4\n    min = 0\n    max = len(n) - 1\n    while not max < min:\n        guess = (min + max) // 2\n        # if containsTypo were real this line would be:\n        # if containsTypo(n[guess]) and not containsTypo(n[guess -1]):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "eating_cookies",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def eating_cookies(n, cache=None):\n    # if n < 0:\n    #     return 0\n    # if n == 0:\n    #     return 1\n    # return eating_cookies(n-1) + eating_cookies(n - 2) + eating_cookies(n -3)\n    # let the cache be 2 longer than n\n    cache = [0] * (n + 2)\n    print(cache)\n    cache[0] = 1",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "removeAdjacent",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def removeAdjacent(s):\n    # add first letter to new string\n    if s == '':\n        return s\n    new_str = s[0]\n    # iterate the string\n    for letter in s:\n        # if the next letter is the same as previous continue\n        if letter == new_str[len(new_str) - 1]:\n            continue",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "reverse_String",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def reverse_String(str):\n    i, j = 0, len(str) - 1\n    print(i, j)\n    while i < j:\n        str[i], str[j] = str[j], str[i]\n        i += 1\n        j -= 1\n    return str\n# print(reverse_String(str))\n\"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "checkPalindrome",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def checkPalindrome(inputString):\n    return inputString == inputString[::-1]\n# print(checkPalindrome(inputString))\n\"\"\"\n*** Data Structures and Algorithms Sprint ***\n---------------------------------------------\n\"\"\"\n\"\"\"\n*** Reverse Linked List ***\n---------------------------",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "reverseLinkedList",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def reverseLinkedList(l):\n    cur = l\n    prev = None\n    next = None\n    while cur:\n        next = cur.next\n        cur.next = prev\n        prev = cur\n        cur = next\n    return prev",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "checkBlanagrams",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def checkBlanagrams(word1, word2):\n    if word1 == '' or word2 == '':\n        return False\n    work_string = ''\n    diff = 0\n    sort1 = sorted(word1)  # O(n) space O(nlogn) time\n    sort2 = sorted(word2)  # O(n) space O(nlogn) time\n    for i in range(len(word1)):  # O(n)\n        # check for substitutions\n        if sort1[i] != sort2[i]:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "findValueSortedShiftedArray",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def findValueSortedShiftedArray(nums, target):\n    min = 0\n    max = len(nums) - 1\n    while not max < min:\n        guess = (max + min) // 2\n        if nums[guess] == target:\n            return guess\n        elif nums[min] <= nums[guess]:\n            if nums[min] <= target < nums[guess]:\n                max = guess",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "nums",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "nums = [1, 7, 3, 6, 5, 6]\n# nums = [1,2,3]\n#  O(N^2) solution\n# def pivot_index(nums):\n#     # iterate array starting at index 1\n#     # get sum of items on left of i and compare to sum of items on right of i\n#     # if they are equal return i else keep going to the next i\n#     for i in range(len(nums)):\n#         left = sum(nums[:i])\n#         right = sum(nums[i + 1:])",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "prices",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "prices = [3, 100, 1, 97]\n#\n# prices = []\n# prices = [61, 91, 6, 15, 28, 30, 39, 69, 78, 81, 62, 38, 56, 69, 22, 95, 47, 82,\n#           52, 64, 74, 97, 60, 68, 5, 23, 45, 55, 66, 57, 26, 4, 21, 65, 55, 50,\n#           41, 88, 39, 84, 77, 5, 76, 11, 3, 51, 96, 100, 13, 26, 79, 98, 84, 66,\n#           93, 65, 98, 60, 57, 35, 12, 40, 83, 62, 46, 60, 26, 94, 59, 29, 70,\n#           34, 83, 98, 89, 57, 71, 44, 23, 43, 55, 1, 70, 29, 44, 10, 70, 83, 95,\n#           96, 97, 84, 23, 16, 34, 55, 59, 73, 17, 73]\n# def buyAndSellStock(prices):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "prices",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "prices = [6, 3, 1, 2, 5, 4]\nprices = [8, 5, 3, 1]\nprices = [3, 100, 1, 97]\ndef buyAndSellStock(prices):\n    length = len(prices)\n    # iterate array, for each item after subtract and store the amount as\n    # highest profit.. replace if needed with a higher profit\n    if prices == sorted(prices, reverse=True) or len(prices) < 2:\n        return 0\n    highest_profit = prices[1] - prices[0]",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "prices",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "prices = [8, 5, 3, 1]\nprices = [3, 100, 1, 97]\ndef buyAndSellStock(prices):\n    length = len(prices)\n    # iterate array, for each item after subtract and store the amount as\n    # highest profit.. replace if needed with a higher profit\n    if prices == sorted(prices, reverse=True) or len(prices) < 2:\n        return 0\n    highest_profit = prices[1] - prices[0]\n    smallest_number = prices[0]",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "prices",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "prices = [3, 100, 1, 97]\ndef buyAndSellStock(prices):\n    length = len(prices)\n    # iterate array, for each item after subtract and store the amount as\n    # highest profit.. replace if needed with a higher profit\n    if prices == sorted(prices, reverse=True) or len(prices) < 2:\n        return 0\n    highest_profit = prices[1] - prices[0]\n    smallest_number = prices[0]\n    for i in range(1, length):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "inputString",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "inputString = \"crazy\"\ndef alphabeticShift(inputString):\n    new_string = ''\n    for letter in inputString:\n        new_letter = ord(letter) + 1\n        if new_letter == 123:\n            new_letter = 97\n        new_string += chr(new_letter)\n    return new_string\n# print(alphabeticShift(inputString))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "validParenthesesSequence(s)",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "validParenthesesSequence(s) = true;\nFor s = \"()()())\", the output should be\nvalidParenthesesSequence(s) = false\n\"\"\"\ns = \"()()(())\"\ns = \"()()())\"\ndef validParenthesesSequence(s):\n    check = []\n    if s == '':\n        return True",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "validParenthesesSequence(s)",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "validParenthesesSequence(s) = false\n\"\"\"\ns = \"()()(())\"\ns = \"()()())\"\ndef validParenthesesSequence(s):\n    check = []\n    if s == '':\n        return True\n    if s[0] == ')':\n        return False",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "s = \"()()(())\"\ns = \"()()())\"\ndef validParenthesesSequence(s):\n    check = []\n    if s == '':\n        return True\n    if s[0] == ')':\n        return False\n    for paren in s:\n        if paren == '(':",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "s = \"()()())\"\ndef validParenthesesSequence(s):\n    check = []\n    if s == '':\n        return True\n    if s[0] == ')':\n        return False\n    for paren in s:\n        if paren == '(':\n            check.append(paren)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "x = LinkedListNode('X')\ny = LinkedListNode('Y')\nz = LinkedListNode('Z')\nx.next = y\ny.next = z\ndelete_node(y)\n```\n*Note: We can do this in O(1) time and space! But be aware that our solution will have some side effects...*\n\"\"\"\nclass LinkedListNode():",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "y = LinkedListNode('Y')\nz = LinkedListNode('Z')\nx.next = y\ny.next = z\ndelete_node(y)\n```\n*Note: We can do this in O(1) time and space! But be aware that our solution will have some side effects...*\n\"\"\"\nclass LinkedListNode():\n    def __init__(self, value):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "z = LinkedListNode('Z')\nx.next = y\ny.next = z\ndelete_node(y)\n```\n*Note: We can do this in O(1) time and space! But be aware that our solution will have some side effects...*\n\"\"\"\nclass LinkedListNode():\n    def __init__(self, value):\n        self.value = value",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "x.next",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "x.next = y\ny.next = z\ndelete_node(y)\n```\n*Note: We can do this in O(1) time and space! But be aware that our solution will have some side effects...*\n\"\"\"\nclass LinkedListNode():\n    def __init__(self, value):\n        self.value = value\n        self.next = None",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "y.next",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "y.next = z\ndelete_node(y)\n```\n*Note: We can do this in O(1) time and space! But be aware that our solution will have some side effects...*\n\"\"\"\nclass LinkedListNode():\n    def __init__(self, value):\n        self.value = value\n        self.next = None\ndef delete_node(node_to_delete):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "x = LinkedListNode('X')\ny = LinkedListNode('Y')\nz = LinkedListNode('Z')\nx.next = y\ny.next = z\n# print(delete_node(y))\n# print(x.next.value)\n\"\"\"\nGiven a reference to the head node of a singly-linked list, write a function\nthat reverses the linked list in place. The function should return the new head",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "y = LinkedListNode('Y')\nz = LinkedListNode('Z')\nx.next = y\ny.next = z\n# print(delete_node(y))\n# print(x.next.value)\n\"\"\"\nGiven a reference to the head node of a singly-linked list, write a function\nthat reverses the linked list in place. The function should return the new head\nof the reversed list.",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "z = LinkedListNode('Z')\nx.next = y\ny.next = z\n# print(delete_node(y))\n# print(x.next.value)\n\"\"\"\nGiven a reference to the head node of a singly-linked list, write a function\nthat reverses the linked list in place. The function should return the new head\nof the reversed list.\nIn order to do this in O(1) space (in-place), you cannot make a new list, you",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "x.next",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "x.next = y\ny.next = z\n# print(delete_node(y))\n# print(x.next.value)\n\"\"\"\nGiven a reference to the head node of a singly-linked list, write a function\nthat reverses the linked list in place. The function should return the new head\nof the reversed list.\nIn order to do this in O(1) space (in-place), you cannot make a new list, you\nneed to use the existing nodes.",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "y.next",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "y.next = z\n# print(delete_node(y))\n# print(x.next.value)\n\"\"\"\nGiven a reference to the head node of a singly-linked list, write a function\nthat reverses the linked list in place. The function should return the new head\nof the reversed list.\nIn order to do this in O(1) space (in-place), you cannot make a new list, you\nneed to use the existing nodes.\nIn order to do this in O(n) time, you should only have to traverse the list",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "max_stack",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "max_stack = MaxStack()\nmax_stack.push(1)\nmax_stack.push(2)\nmax_stack.push(5)\nmax_stack.pop()\n# print(max_stack.get_max())\n\"\"\"\nYour goal is to define a `Queue` class that uses two stacks. Your `Queue` class\nshould have an `enqueue()` method and a `dequeue()` method that ensures a\n\"first in first out\" (FIFO) order.",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "code",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "code = \"{ [ ] ( ) }\"\ncode = \"{ [ ( ] ) }\"\ncode = \"{ [ }\"\ndef is_valid(code):\n    check = []\n    if code == '':\n        return True\n    if code[0] == ')' or code[0] == '}' or code[0] == ']':\n        return False\n    for paren in code:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "code",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "code = \"{ [ ( ] ) }\"\ncode = \"{ [ }\"\ndef is_valid(code):\n    check = []\n    if code == '':\n        return True\n    if code[0] == ')' or code[0] == '}' or code[0] == ']':\n        return False\n    for paren in code:\n        if paren == ' ':",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "code",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "code = \"{ [ }\"\ndef is_valid(code):\n    check = []\n    if code == '':\n        return True\n    if code[0] == ')' or code[0] == '}' or code[0] == ']':\n        return False\n    for paren in code:\n        if paren == ' ':\n            continue",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "queueOnStacks(requests)",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "queueOnStacks(requests) = [1, 2].\nAfter the first request, the queue is {1}; after the second it is {1, 2}. Then we do the third request, \"pop\", and add the first element of the queue 1 to the answer array. The queue becomes {2}. After the fourth request, the queue is {2, 3}. Then we perform \"pop\" again and add 2 to the answer array, and the queue becomes {3}.\n\"\"\"\nrequests = [\"push 1\", \"push 2\", \"pop\", \"push 3\", \"pop\"]\nclass Stack:\n    def __init__(self):\n        self.items = []\n    def isEmpty(self):\n        return self.items == []\n    def push(self, item):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "requests = [\"push 1\", \"push 2\", \"pop\", \"push 3\", \"pop\"]\nclass Stack:\n    def __init__(self):\n        self.items = []\n    def isEmpty(self):\n        return self.items == []\n    def push(self, item):\n        self.items.append(item)\n    def pop(self):\n        return self.items.pop()",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "sequence",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "sequence = \"()\"\ndef validBracketSequence(sequence):\n    pairs = dict(zip('(,[,{', '),],}'))\n    stack = []\n    for item in sequence:\n        if item in pairs:\n            stack.append(pairs[item])\n        elif not (stack and item == stack.pop()):\n            return False\n    return not stack",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "fibonacciSimpleSum2(n)",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "fibonacciSimpleSum2(n) = true.\nExplanation: 1 = 0 + 1 = F0 + F1.\nFor n = 11, the output should be\nfibonacciSimpleSum2(n) = true.\nExplanation: 11 = 3 + 8 = F4 + F6.\nFor n = 60, the output should be\nfibonacciSimpleSum2(n) = true.\nExplanation: 11 = 5 + 55 = F5 + F10.\nFor n = 66, the output should be\nfibonacciSimpleSum2(n) = false",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "fibonacciSimpleSum2(n)",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "fibonacciSimpleSum2(n) = true.\nExplanation: 11 = 3 + 8 = F4 + F6.\nFor n = 60, the output should be\nfibonacciSimpleSum2(n) = true.\nExplanation: 11 = 5 + 55 = F5 + F10.\nFor n = 66, the output should be\nfibonacciSimpleSum2(n) = false\n\"\"\"\ndef fibonacciSimpleSum2(n):\n    # if 0 is less than n and n is less than 5 then we know we can return",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "fibonacciSimpleSum2(n)",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "fibonacciSimpleSum2(n) = true.\nExplanation: 11 = 5 + 55 = F5 + F10.\nFor n = 66, the output should be\nfibonacciSimpleSum2(n) = false\n\"\"\"\ndef fibonacciSimpleSum2(n):\n    # if 0 is less than n and n is less than 5 then we know we can return\n    # true because n will be 1-4 which can be created with 2 fib numbers\n    if 0 < n < 5:\n        return True",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "fibonacciSimpleSum2(n)",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "fibonacciSimpleSum2(n) = false\n\"\"\"\ndef fibonacciSimpleSum2(n):\n    # if 0 is less than n and n is less than 5 then we know we can return\n    # true because n will be 1-4 which can be created with 2 fib numbers\n    if 0 < n < 5:\n        return True\n    # first get fibonacci sequence up to n\n    seq = [0, 1]\n    # starting from 2 and ending at n",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "2^n",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "2^n = 64\nlog_2 64 = 6\nWrite an exponential expression that is identical to this logarithmic expression:\nlog_2 128 = n\n2^7 = 128\nWhat keywords should you look out for that might alert you that logarithms are involved?\ndoubles, halves\n\"\"\"\n\"\"\"\nRewrite the implementation of linear search below so that the algorithm searches from the end of the list to the beginning.",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "2^7",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "2^7 = 128\nWhat keywords should you look out for that might alert you that logarithms are involved?\ndoubles, halves\n\"\"\"\n\"\"\"\nRewrite the implementation of linear search below so that the algorithm searches from the end of the list to the beginning.\n\"\"\"\ndef linear_search(arr, target):\n    # loop through each item in the input array\n    i = len(arr) - 1",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "arr = [1, 2, 3, 4, 5, 6]\ntarget = 3\n# print(linear_search(arr, target))\n\"\"\"\nWrite a recursive search function that receives as input an array of integers and a target integer value. This function should return True if the target element exists in the array, and False otherwise.\nWhat would be the base case(s) we'd have to consider for implementing this function?\nHow should our recursive solution converge on our base case(s)?\nIn your own words, write out the three rules for recursion and how you can identify when a problem is amenable to using a recursive method.\n- problem has an obvious base case\n- the data changes predictably on the way to the base case ",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "target",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "target = 3\n# print(linear_search(arr, target))\n\"\"\"\nWrite a recursive search function that receives as input an array of integers and a target integer value. This function should return True if the target element exists in the array, and False otherwise.\nWhat would be the base case(s) we'd have to consider for implementing this function?\nHow should our recursive solution converge on our base case(s)?\nIn your own words, write out the three rules for recursion and how you can identify when a problem is amenable to using a recursive method.\n- problem has an obvious base case\n- the data changes predictably on the way to the base case \n- the function must call itself",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "arr = [1, 2, 3, 4, 5, 6]\ntarget = 55\ndef binary_recursive_search(arr, target, min_index, max_index):\n    if min_index >= max_index:\n        return -1\n    guess = (max_index + min_index) // 2\n    if arr[guess] == target:\n        return guess\n    elif target < arr[guess]:\n        return binary_recursive_search(arr, target, min_index, guess - 1)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "target",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "target = 55\ndef binary_recursive_search(arr, target, min_index, max_index):\n    if min_index >= max_index:\n        return -1\n    guess = (max_index + min_index) // 2\n    if arr[guess] == target:\n        return guess\n    elif target < arr[guess]:\n        return binary_recursive_search(arr, target, min_index, guess - 1)\n    else:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "surnames",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "surnames = [\n    'liu',\n    'mcdowell',\n    'nixon',\n    'sparks',\n    'zhang',\n    'ahmed',  # <-- rotates here!\n    'brandt',\n    'davenport',\n    'farley',",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "surnames",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "surnames = [\n    'sparks',\n    'zhang',\n    'liu',\n    'ahmed',  # <-- rotates here!\n    'brandt',\n    'davenport',\n    'farley',\n    'glover',\n    'kennedy',",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "n = [1, 2, 3, 4, 5, 6, 7, 8, 9]\ndef firstDraftWithTypo(n):\n    # Your code here\n    pass\n    contains_typo = 4\n    min = 0\n    max = len(n) - 1\n    while not max < min:\n        guess = (min + max) // 2\n        # if containsTypo were real this line would be:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "n = 3\ndef eating_cookies(n, cache=None):\n    # if n < 0:\n    #     return 0\n    # if n == 0:\n    #     return 1\n    # return eating_cookies(n-1) + eating_cookies(n - 2) + eating_cookies(n -3)\n    # let the cache be 2 longer than n\n    cache = [0] * (n + 2)\n    print(cache)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "removeAdjacent(s)",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "removeAdjacent(s) = \"a\";\nFor s = \"abccaaab\", the output should be\nremoveAdjacent(s) = \"abcab\".\n\"\"\"\n# s = \"aaaaa\"\n# s = \"abccaaab\"\ndef removeAdjacent(s):\n    # add first letter to new string\n    if s == '':\n        return s",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "removeAdjacent(s)",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "removeAdjacent(s) = \"abcab\".\n\"\"\"\n# s = \"aaaaa\"\n# s = \"abccaaab\"\ndef removeAdjacent(s):\n    # add first letter to new string\n    if s == '':\n        return s\n    new_str = s[0]\n    # iterate the string",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "str",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "str = 'reverse'\ndef reverse_String(str):\n    i, j = 0, len(str) - 1\n    print(i, j)\n    while i < j:\n        str[i], str[j] = str[j], str[i]\n        i += 1\n        j -= 1\n    return str\n# print(reverse_String(str))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "checkPalindrome(inputString)",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "checkPalindrome(inputString) = true;\nFor inputString = \"abac\", the output should be\ncheckPalindrome(inputString) = false;\nFor inputString = \"a\", the output should be\ncheckPalindrome(inputString) = true.\n\"\"\"\ninputString = \"aabaa\"\n# inputString = \"abac\"\n# inputString = \"a\"\ninputString = \"hlbeeykoqqqqokyeeblh\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "checkPalindrome(inputString)",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "checkPalindrome(inputString) = false;\nFor inputString = \"a\", the output should be\ncheckPalindrome(inputString) = true.\n\"\"\"\ninputString = \"aabaa\"\n# inputString = \"abac\"\n# inputString = \"a\"\ninputString = \"hlbeeykoqqqqokyeeblh\"\ndef checkPalindrome(inputString):\n    return inputString == inputString[::-1]",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "checkPalindrome(inputString)",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "checkPalindrome(inputString) = true.\n\"\"\"\ninputString = \"aabaa\"\n# inputString = \"abac\"\n# inputString = \"a\"\ninputString = \"hlbeeykoqqqqokyeeblh\"\ndef checkPalindrome(inputString):\n    return inputString == inputString[::-1]\n# print(checkPalindrome(inputString))\n\"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "inputString",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "inputString = \"aabaa\"\n# inputString = \"abac\"\n# inputString = \"a\"\ninputString = \"hlbeeykoqqqqokyeeblh\"\ndef checkPalindrome(inputString):\n    return inputString == inputString[::-1]\n# print(checkPalindrome(inputString))\n\"\"\"\n*** Data Structures and Algorithms Sprint ***\n---------------------------------------------",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "inputString",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "inputString = \"hlbeeykoqqqqokyeeblh\"\ndef checkPalindrome(inputString):\n    return inputString == inputString[::-1]\n# print(checkPalindrome(inputString))\n\"\"\"\n*** Data Structures and Algorithms Sprint ***\n---------------------------------------------\n\"\"\"\n\"\"\"\n*** Reverse Linked List ***",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "reverseLinkedList(l)",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "reverseLinkedList(l) = [5, 4, 3, 2, 1].\n\"\"\"\n# Singly-linked lists are already defined with this interface:\n# class ListNode(object):\n#   def __init__(self, x):\n#     self.value = x\n#     self.next = None\n#\ndef reverseLinkedList(l):\n    cur = l",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "word1",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "word1 = \"tangpam\"\nword2 = \"anagram\"\ndef checkBlanagrams(word1, word2):\n    if word1 == '' or word2 == '':\n        return False\n    work_string = ''\n    diff = 0\n    sort1 = sorted(word1)  # O(n) space O(nlogn) time\n    sort2 = sorted(word2)  # O(n) space O(nlogn) time\n    for i in range(len(word1)):  # O(n)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "word2",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "word2 = \"anagram\"\ndef checkBlanagrams(word1, word2):\n    if word1 == '' or word2 == '':\n        return False\n    work_string = ''\n    diff = 0\n    sort1 = sorted(word1)  # O(n) space O(nlogn) time\n    sort2 = sorted(word2)  # O(n) space O(nlogn) time\n    for i in range(len(word1)):  # O(n)\n        # check for substitutions",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "nums",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "nums = [4, 5, 6, 7, 0, 1, 2]\ntarget = 0\ndef findValueSortedShiftedArray(nums, target):\n    min = 0\n    max = len(nums) - 1\n    while not max < min:\n        guess = (max + min) // 2\n        if nums[guess] == target:\n            return guess\n        elif nums[min] <= nums[guess]:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "target",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "target = 0\ndef findValueSortedShiftedArray(nums, target):\n    min = 0\n    max = len(nums) - 1\n    while not max < min:\n        guess = (max + min) // 2\n        if nums[guess] == target:\n            return guess\n        elif nums[min] <= nums[guess]:\n            if nums[min] <= target < nums[guess]:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "LinkedListNode",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "class LinkedListNode():\n    def __init__(self, value):\n        self.value = value\n        self.next  = None\nx = LinkedListNode('X')\ny = LinkedListNode('Y')\nz = LinkedListNode('Z')\nx.next = y\ny.next = z\ndelete_node(y)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "LinkedListNode",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "class LinkedListNode:\n    def __init__(self, value):\n        self.value = value\n        self.next = None\ndef delete_node(node_to_delete):\n    next = node_to_delete.next\n    next.next = None\n    node_to_delete.value = next.value\n    node_to_delete.next = next.next\nx = LinkedListNode(\"X\")",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "LinkedListNode",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "class LinkedListNode:\n    def __init__(self, value):\n        self.value = value\n        self.next = None\ndef reverse(head_of_list):\n    current_node = head_of_list\n    previous_node = None\n    next_node = None\n    # Until we have 'fallen off' the end of the list\n    while current_node:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "class ListNode(object):\n    def __init__(self, x):\n        self.value = x\n        self.next = None\n[1, 3, 4, 6]\n\"\"\"\nNote: Your solution should have O(n) time complexity, where n is the number of elements in l, since this is what you will be asked to accomplish in an interview.\nYou have a singly linked list l, which is sorted in strictly increasing order, and an integer value. Add value to the list l, preserving its original sorting.\nNote: in examples below and tests preview linked lists are presented as arrays just for simplicity of visualization: in real data you will be given a head node l of the linked list\nExample",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "class ListNode(object):\n    def __init__(self, x):\n        self.value = x\n        self.next = None\ndef mergeTwoLinkedLists(l1, l2):\n    # create empty node to hold the new merged list\n    merged_node = ListNode(0)\n    # end will hold the end node\n    end = merged_node\n    while True:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "class ListNode(object):\n    def __init__(self, x):\n        self.value = x\n        self.next = None\ndef reverseNodesInKGroups(l, k):\n    # create an empty node to hold the new list\n    new_node = ListNode(0)\n    # set the next value to the list\n    new_node.next = l\n    # set the previous node to the new list",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "LinkedListNode",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "class LinkedListNode:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\nclass Queue:\n    def __init__(self):\n        self.front = None\n        self.rear = None\n    def enqueue(self, item):\n        new_node = LinkedListNode(item)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "Queue",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "class Queue:\n    def __init__(self):\n        self.front = None\n        self.rear = None\n    def enqueue(self, item):\n        new_node = LinkedListNode(item)\n        # check if queue is empty\n        if self.is_empty():\n            self.front = new_node\n            self.rear = new_node",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "class Stack:\n    def __init__(self):\n        self.data = []\n    def push(self, item):\n        self.data.append(item)\n    # my code for peek method\n    def peek(self, item):\n        return self.data[-1]\n    def pop(self):\n        if len(self.data) > 0:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "LinkedListNode",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "class LinkedListNode:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\nclass Stack:\n    def __init__(self):\n        self.top = None\n    def push(self, data):\n        # create new node with data\n        new_node = LinkedListNode(data)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "class Stack:\n    def __init__(self):\n        self.top = None\n    def push(self, data):\n        # create new node with data\n        new_node = LinkedListNode(data)\n        # set current top to new node's next\n        new_node.next = self.top\n        # reset the top pointer to the new node\n        self.top = new_node",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "class Stack(object):\n    def __init__(self):\n        \"\"\"Initialize an empty stack\"\"\"\n        self.items = []\n    def push(self, item):\n        \"\"\"Push a new item onto the stack\"\"\"\n        self.items.append(item)\n    def pop(self):\n        \"\"\"Remove and return the last item\"\"\"\n        # If the stack is empty, return None",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "MaxStack",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "class MaxStack(object):\n    def __init__(self):\n        # Your code here\n        self.stack = Stack()\n        # self.head = []\n        self.max_stack = Stack()\n    def push(self, item):\n        \"\"\"Add a new item onto the top of our stack.\"\"\"\n        # Your code here\n        # self.head.append(item)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "class Stack:\n    def __init__(self):\n        self.data = []\n    def push(self, item):\n        self.data.append(item)\n    def pop(self):\n        if len(self.data) > 0:\n            return self.data.pop()\n        return \"The stack is empty\"\nclass QueueTwoStacks:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "QueueTwoStacks",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "class QueueTwoStacks:\n    def __init__(self):\n        # Your code here\n        self.stack1 = Stack()\n        self.stack2 = Stack()\n    def enqueue(self, item):\n        # Your code here\n        self.stack1.push(item)\n    def dequeue(self):\n        # Your code here",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "class Stack:\n    def __init__(self):\n        self.items = []\n    def isEmpty(self):\n        return self.items == []\n    def push(self, item):\n        self.items.append(item)\n    def pop(self):\n        return self.items.pop()\ndef queueOnStacks(requests):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "pivot_index",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def pivot_index(nums):\n    if len(nums) <= 1:\n        return -1\n    left = 0\n    right = sum(nums)\n    for i in range(len(nums)):\n        right -= nums[i]\n        if right == left:\n            return i\n        left += nums[i]",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "plus_one",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def plus_one(digits):\n    # check the last digit if its not 9 we just add 1\n    # if it is a 9 make it 0\n    # go left check 2nd to last if its not a 9 add 1\n    # if it is a 9\n    index = len(digits) - 1\n    while index >= 0 and digits[index] == 9:\n        digits[index] = 0\n        index -= 1\n    if index == -1:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "buyAndSellStock",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def buyAndSellStock(prices):\n    length = len(prices)\n    # iterate array, for each item after subtract and store the amount as\n    # highest profit.. replace if needed with a higher profit\n    if prices == sorted(prices, reverse=True) or len(prices) < 2:\n        return 0\n    highest_profit = prices[1] - prices[0]\n    smallest_number = prices[0]\n    for i in range(1, length):\n        # only check if the selected number minus the smallest number before",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "alphabeticShift",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def alphabeticShift(inputString):\n    new_string = \"\"\n    for letter in inputString:\n        new_letter = ord(letter) + 1\n        if new_letter == 123:\n            new_letter = 97\n        new_string += chr(new_letter)\n    return new_string\n# print(alphabeticShift(inputString))\n\"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "validParenthesesSequence",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def validParenthesesSequence(s):\n    check = []\n    if s == \"\":\n        return True\n    if s[0] == \")\":\n        return False\n    for paren in s:\n        if paren == \"(\":\n            check.append(paren)\n        else:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "delete_node",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def delete_node(node_to_delete):\n    next = node_to_delete.next\n    next.next = None\n    node_to_delete.value = next.value\n    node_to_delete.next = next.next\nx = LinkedListNode(\"X\")\ny = LinkedListNode(\"Y\")\nz = LinkedListNode(\"Z\")\nx.next = y\ny.next = z",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "reverse",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def reverse(head_of_list):\n    current_node = head_of_list\n    previous_node = None\n    next_node = None\n    # Until we have 'fallen off' the end of the list\n    while current_node:\n        # Copy a pointer to the next element\n        # before we overwrite current_node.next\n        next_node = current_node.next\n        # Reverse the 'next' pointer",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "insertValueIntoSortedLinkedList",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def insertValueIntoSortedLinkedList(l, value):\n    # create a new node with the value\n    node = ListNode(value)\n    # if there is no list return the new node\n    if l == None:\n        return node\n    else:\n        # else if the list.value (first item in the list) > the new value\n        if l.value > value:\n            # set new values as the first item in the list",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "mergeTwoLinkedLists",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def mergeTwoLinkedLists(l1, l2):\n    # create empty node to hold the new merged list\n    merged_node = ListNode(0)\n    # end will hold the end node\n    end = merged_node\n    while True:\n        # if either list becomes empty join lists\n        if l1 is None:\n            end.next = l2\n            break",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "reverseNodesInKGroups",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def reverseNodesInKGroups(l, k):\n    # create an empty node to hold the new list\n    new_node = ListNode(0)\n    # set the next value to the list\n    new_node.next = l\n    # set the previous node to the new list\n    prev = new_node\n    while True:\n        # set the start to the new node next\n        start = prev.next",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "reverse_list",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def reverse_list(start, end):\n    # set the last reversed group to the new start\n    old_reversed = start\n    # set the new current to the start\n    current = start\n    # set next node to the node start is pointing to\n    next_node = start.next\n    # while the current node is not the last node\n    while current != end:\n        # iterate",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "is_valid",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def is_valid(code):\n    check = []\n    if code == \"\":\n        return True\n    if code[0] == \")\" or code[0] == \"}\" or code[0] == \"]\":\n        return False\n    for paren in code:\n        if paren == \" \":\n            continue\n        if paren == \"(\" or paren == \"{\" or paren == \"[\":",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "queueOnStacks",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def queueOnStacks(requests):\n    left = Stack()\n    right = Stack()\n    def insert(x):\n        left.push(x)\n        print(\"queue:\", left.items)\n    def remove():\n        if len(right.items) == 0:\n            while len(left.items) > 0:\n                shifted = left.pop()",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "validBracketSequence",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def validBracketSequence(sequence):\n    pairs = dict(zip(\"(,[,{\", \"),],}\"))\n    stack = []\n    for item in sequence:\n        if item in pairs:\n            stack.append(pairs[item])\n        elif not (stack and item == stack.pop()):\n            return False\n    return not stack\n# print(validBracketSequence(sequence))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "fibonacciSimpleSum2",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def fibonacciSimpleSum2(n):\n    # if 0 is less than n and n is less than 5 then we know we can return\n    # true because n will be 1-4 which can be created with 2 fib numbers\n    if 0 < n < 5:\n        return True\n    # first get fibonacci sequence up to n\n    seq = [0, 1]\n    # starting from 2 and ending at n\n    for i in range(2, n):\n        # add seq at i - 2 (0 to start) and seq at i - 1 (1 to start)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "csBinarySearch",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def csBinarySearch(nums, target):\n    min = 0\n    max = len(nums) - 1\n    while not max < min:\n        guess = (max + min) // 2\n        if nums[guess] == target:\n            return guess\n        elif nums[guess] < target:\n            min = guess + 1\n        else:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "csSearchRotatedSortedArray",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def csSearchRotatedSortedArray(nums, target):\n    min = 0\n    max = len(nums) - 1\n    while not max < min:\n        guess = (max + min) // 2\n        # print(f'min: {nums[min]} max: {nums[max]} guess:{nums[guess]} target:'\n        #       f' {target}')\n        # if the guess is the target we got it and return the guess\n        if nums[guess] == target:\n            # print('guessed the target')",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "linear_search",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def linear_search(arr, target):\n    # loop through each item in the input array\n    i = len(arr) - 1\n    for idx in range(len(arr)):\n        # check if the item at the current index is equal to the target\n        if arr[i] == target:\n            # return the current index as the match\n            return i\n        i -= 1\n    # if we were able to loop through the entire array, the target is not present",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "recursive_search",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def recursive_search(arr, target):\n    if arr[0] == target:\n        return True\n    elif len(arr[1:]) > 1:\n        return recursive_search(arr[1:], target)\n    return False\n# print(recursive_search(arr, target))\n\"\"\"\nBinary Search\n\"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "binary_search",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def binary_search(arr, target):\n    # 1. Declare min = 0 and max = length of array - 1\n    min = 0\n    max = len(arr) - 1\n    while not max < min:\n        # 2. Figure out the guess value by getting the middle integer between min and max\n        guess = (max + min) // 2\n        # 3. if array[guess] equals the target, we found the element, return the index\n        if arr[guess] == target:\n            return guess",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "binary_recursive_search",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def binary_recursive_search(arr, target, min_index, max_index):\n    if min_index >= max_index:\n        return -1\n    guess = (max_index + min_index) // 2\n    if arr[guess] == target:\n        return guess\n    elif target < arr[guess]:\n        return binary_recursive_search(arr, target, min_index, guess - 1)\n    else:\n        return binary_recursive_search(arr, target, guess + 1, max_index)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "find_rotation_point",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def find_rotation_point(surnames):\n    # Your code here\n    min = 0\n    max = len(surnames) - 1\n    while not max < min:\n        guess = (min + max) // 2\n        if (\n            surnames[guess] < surnames[guess + 1]\n            and surnames[guess] < surnames[guess - 1]\n        ):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "find_rotation_point",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def find_rotation_point(surnames):\n    # Your code here\n    # UNDERSTAND\n    # [ 6,   7, 8, 0, 1, 2, 3, 4, 5]\n    #           min max\n    #           mid\n    # [ 7, 0, 1,  2, 3, 4, 5, 6]\n    #  min\n    # max\n    # mid",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "firstDraftWithTypo",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def firstDraftWithTypo(n):\n    # Your code here\n    pass\n    contains_typo = 4\n    min = 0\n    max = len(n) - 1\n    while not max < min:\n        guess = (min + max) // 2\n        # if containsTypo were real this line would be:\n        # if containsTypo(n[guess]) and not containsTypo(n[guess -1]):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "eating_cookies",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def eating_cookies(n, cache=None):\n    # if n < 0:\n    #     return 0\n    # if n == 0:\n    #     return 1\n    # return eating_cookies(n-1) + eating_cookies(n - 2) + eating_cookies(n -3)\n    # let the cache be 2 longer than n\n    cache = [0] * (n + 2)\n    print(cache)\n    cache[0] = 1",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "removeAdjacent",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def removeAdjacent(s):\n    # add first letter to new string\n    if s == \"\":\n        return s\n    new_str = s[0]\n    # iterate the string\n    for letter in s:\n        # if the next letter is the same as previous continue\n        if letter == new_str[len(new_str) - 1]:\n            continue",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "reverse_String",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def reverse_String(str):\n    i, j = 0, len(str) - 1\n    print(i, j)\n    while i < j:\n        str[i], str[j] = str[j], str[i]\n        i += 1\n        j -= 1\n    return str\n# print(reverse_String(str))\n\"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "checkPalindrome",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def checkPalindrome(inputString):\n    return inputString == inputString[::-1]\n# print(checkPalindrome(inputString))\n\"\"\"\n*** Data Structures and Algorithms Sprint ***\n---------------------------------------------\n\"\"\"\n\"\"\"\n*** Reverse Linked List ***\n---------------------------",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "reverseLinkedList",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def reverseLinkedList(l):\n    cur = l\n    prev = None\n    next = None\n    while cur:\n        next = cur.next\n        cur.next = prev\n        prev = cur\n        cur = next\n    return prev",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "checkBlanagrams",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def checkBlanagrams(word1, word2):\n    if word1 == \"\" or word2 == \"\":\n        return False\n    work_string = \"\"\n    diff = 0\n    sort1 = sorted(word1)  # O(n) space O(nlogn) time\n    sort2 = sorted(word2)  # O(n) space O(nlogn) time\n    for i in range(len(word1)):  # O(n)\n        # check for substitutions\n        if sort1[i] != sort2[i]:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "findValueSortedShiftedArray",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def findValueSortedShiftedArray(nums, target):\n    min = 0\n    max = len(nums) - 1\n    while not max < min:\n        guess = (max + min) // 2\n        if nums[guess] == target:\n            return guess\n        elif nums[min] <= nums[guess]:\n            if nums[min] <= target < nums[guess]:\n                max = guess",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "nums",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "nums = [1, 7, 3, 6, 5, 6]\n# nums = [1,2,3]\n#  O(N^2) solution\n# def pivot_index(nums):\n#     # iterate array starting at index 1\n#     # get sum of items on left of i and compare to sum of items on right of i\n#     # if they are equal return i else keep going to the next i\n#     for i in range(len(nums)):\n#         left = sum(nums[:i])\n#         right = sum(nums[i + 1:])",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "prices",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "prices = [3, 100, 1, 97]\n#\n# prices = []\n# prices = [61, 91, 6, 15, 28, 30, 39, 69, 78, 81, 62, 38, 56, 69, 22, 95, 47, 82,\n#           52, 64, 74, 97, 60, 68, 5, 23, 45, 55, 66, 57, 26, 4, 21, 65, 55, 50,\n#           41, 88, 39, 84, 77, 5, 76, 11, 3, 51, 96, 100, 13, 26, 79, 98, 84, 66,\n#           93, 65, 98, 60, 57, 35, 12, 40, 83, 62, 46, 60, 26, 94, 59, 29, 70,\n#           34, 83, 98, 89, 57, 71, 44, 23, 43, 55, 1, 70, 29, 44, 10, 70, 83, 95,\n#           96, 97, 84, 23, 16, 34, 55, 59, 73, 17, 73]\n# def buyAndSellStock(prices):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "prices",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "prices = [6, 3, 1, 2, 5, 4]\nprices = [8, 5, 3, 1]\nprices = [3, 100, 1, 97]\ndef buyAndSellStock(prices):\n    length = len(prices)\n    # iterate array, for each item after subtract and store the amount as\n    # highest profit.. replace if needed with a higher profit\n    if prices == sorted(prices, reverse=True) or len(prices) < 2:\n        return 0\n    highest_profit = prices[1] - prices[0]",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "prices",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "prices = [8, 5, 3, 1]\nprices = [3, 100, 1, 97]\ndef buyAndSellStock(prices):\n    length = len(prices)\n    # iterate array, for each item after subtract and store the amount as\n    # highest profit.. replace if needed with a higher profit\n    if prices == sorted(prices, reverse=True) or len(prices) < 2:\n        return 0\n    highest_profit = prices[1] - prices[0]\n    smallest_number = prices[0]",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "prices",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "prices = [3, 100, 1, 97]\ndef buyAndSellStock(prices):\n    length = len(prices)\n    # iterate array, for each item after subtract and store the amount as\n    # highest profit.. replace if needed with a higher profit\n    if prices == sorted(prices, reverse=True) or len(prices) < 2:\n        return 0\n    highest_profit = prices[1] - prices[0]\n    smallest_number = prices[0]\n    for i in range(1, length):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "inputString",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "inputString = \"crazy\"\ndef alphabeticShift(inputString):\n    new_string = \"\"\n    for letter in inputString:\n        new_letter = ord(letter) + 1\n        if new_letter == 123:\n            new_letter = 97\n        new_string += chr(new_letter)\n    return new_string\n# print(alphabeticShift(inputString))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "validParenthesesSequence(s)",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "validParenthesesSequence(s) = true;\nFor s = \"()()())\", the output should be\nvalidParenthesesSequence(s) = false\n\"\"\"\ns = \"()()(())\"\ns = \"()()())\"\ndef validParenthesesSequence(s):\n    check = []\n    if s == \"\":\n        return True",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "validParenthesesSequence(s)",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "validParenthesesSequence(s) = false\n\"\"\"\ns = \"()()(())\"\ns = \"()()())\"\ndef validParenthesesSequence(s):\n    check = []\n    if s == \"\":\n        return True\n    if s[0] == \")\":\n        return False",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "s = \"()()(())\"\ns = \"()()())\"\ndef validParenthesesSequence(s):\n    check = []\n    if s == \"\":\n        return True\n    if s[0] == \")\":\n        return False\n    for paren in s:\n        if paren == \"(\":",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "s = \"()()())\"\ndef validParenthesesSequence(s):\n    check = []\n    if s == \"\":\n        return True\n    if s[0] == \")\":\n        return False\n    for paren in s:\n        if paren == \"(\":\n            check.append(paren)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "x = LinkedListNode('X')\ny = LinkedListNode('Y')\nz = LinkedListNode('Z')\nx.next = y\ny.next = z\ndelete_node(y)\n```\n*Note: We can do this in O(1) time and space! But be aware that our solution will have some side effects...*\n\"\"\"\nclass LinkedListNode:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "y = LinkedListNode('Y')\nz = LinkedListNode('Z')\nx.next = y\ny.next = z\ndelete_node(y)\n```\n*Note: We can do this in O(1) time and space! But be aware that our solution will have some side effects...*\n\"\"\"\nclass LinkedListNode:\n    def __init__(self, value):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "z = LinkedListNode('Z')\nx.next = y\ny.next = z\ndelete_node(y)\n```\n*Note: We can do this in O(1) time and space! But be aware that our solution will have some side effects...*\n\"\"\"\nclass LinkedListNode:\n    def __init__(self, value):\n        self.value = value",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "x.next",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "x.next = y\ny.next = z\ndelete_node(y)\n```\n*Note: We can do this in O(1) time and space! But be aware that our solution will have some side effects...*\n\"\"\"\nclass LinkedListNode:\n    def __init__(self, value):\n        self.value = value\n        self.next = None",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "y.next",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "y.next = z\ndelete_node(y)\n```\n*Note: We can do this in O(1) time and space! But be aware that our solution will have some side effects...*\n\"\"\"\nclass LinkedListNode:\n    def __init__(self, value):\n        self.value = value\n        self.next = None\ndef delete_node(node_to_delete):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "x = LinkedListNode(\"X\")\ny = LinkedListNode(\"Y\")\nz = LinkedListNode(\"Z\")\nx.next = y\ny.next = z\n# print(delete_node(y))\n# print(x.next.value)\n\"\"\"\nGiven a reference to the head node of a singly-linked list, write a function\nthat reverses the linked list in place. The function should return the new head",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "y = LinkedListNode(\"Y\")\nz = LinkedListNode(\"Z\")\nx.next = y\ny.next = z\n# print(delete_node(y))\n# print(x.next.value)\n\"\"\"\nGiven a reference to the head node of a singly-linked list, write a function\nthat reverses the linked list in place. The function should return the new head\nof the reversed list.",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "z = LinkedListNode(\"Z\")\nx.next = y\ny.next = z\n# print(delete_node(y))\n# print(x.next.value)\n\"\"\"\nGiven a reference to the head node of a singly-linked list, write a function\nthat reverses the linked list in place. The function should return the new head\nof the reversed list.\nIn order to do this in O(1) space (in-place), you cannot make a new list, you",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "x.next",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "x.next = y\ny.next = z\n# print(delete_node(y))\n# print(x.next.value)\n\"\"\"\nGiven a reference to the head node of a singly-linked list, write a function\nthat reverses the linked list in place. The function should return the new head\nof the reversed list.\nIn order to do this in O(1) space (in-place), you cannot make a new list, you\nneed to use the existing nodes.",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "y.next",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "y.next = z\n# print(delete_node(y))\n# print(x.next.value)\n\"\"\"\nGiven a reference to the head node of a singly-linked list, write a function\nthat reverses the linked list in place. The function should return the new head\nof the reversed list.\nIn order to do this in O(1) space (in-place), you cannot make a new list, you\nneed to use the existing nodes.\nIn order to do this in O(n) time, you should only have to traverse the list",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "max_stack",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "max_stack = MaxStack()\nmax_stack.push(1)\nmax_stack.push(2)\nmax_stack.push(5)\nmax_stack.pop()\n# print(max_stack.get_max())\n\"\"\"\nYour goal is to define a `Queue` class that uses two stacks. Your `Queue` class\nshould have an `enqueue()` method and a `dequeue()` method that ensures a\n\"first in first out\" (FIFO) order.",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "code",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "code = \"{ [ ] ( ) }\"\ncode = \"{ [ ( ] ) }\"\ncode = \"{ [ }\"\ndef is_valid(code):\n    check = []\n    if code == \"\":\n        return True\n    if code[0] == \")\" or code[0] == \"}\" or code[0] == \"]\":\n        return False\n    for paren in code:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "code",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "code = \"{ [ ( ] ) }\"\ncode = \"{ [ }\"\ndef is_valid(code):\n    check = []\n    if code == \"\":\n        return True\n    if code[0] == \")\" or code[0] == \"}\" or code[0] == \"]\":\n        return False\n    for paren in code:\n        if paren == \" \":",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "code",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "code = \"{ [ }\"\ndef is_valid(code):\n    check = []\n    if code == \"\":\n        return True\n    if code[0] == \")\" or code[0] == \"}\" or code[0] == \"]\":\n        return False\n    for paren in code:\n        if paren == \" \":\n            continue",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "queueOnStacks(requests)",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "queueOnStacks(requests) = [1, 2].\nAfter the first request, the queue is {1}; after the second it is {1, 2}. Then we do the third request, \"pop\", and add the first element of the queue 1 to the answer array. The queue becomes {2}. After the fourth request, the queue is {2, 3}. Then we perform \"pop\" again and add 2 to the answer array, and the queue becomes {3}.\n\"\"\"\nrequests = [\"push 1\", \"push 2\", \"pop\", \"push 3\", \"pop\"]\nclass Stack:\n    def __init__(self):\n        self.items = []\n    def isEmpty(self):\n        return self.items == []\n    def push(self, item):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "requests = [\"push 1\", \"push 2\", \"pop\", \"push 3\", \"pop\"]\nclass Stack:\n    def __init__(self):\n        self.items = []\n    def isEmpty(self):\n        return self.items == []\n    def push(self, item):\n        self.items.append(item)\n    def pop(self):\n        return self.items.pop()",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "sequence",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "sequence = \"()\"\ndef validBracketSequence(sequence):\n    pairs = dict(zip(\"(,[,{\", \"),],}\"))\n    stack = []\n    for item in sequence:\n        if item in pairs:\n            stack.append(pairs[item])\n        elif not (stack and item == stack.pop()):\n            return False\n    return not stack",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "fibonacciSimpleSum2(n)",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "fibonacciSimpleSum2(n) = true.\nExplanation: 1 = 0 + 1 = F0 + F1.\nFor n = 11, the output should be\nfibonacciSimpleSum2(n) = true.\nExplanation: 11 = 3 + 8 = F4 + F6.\nFor n = 60, the output should be\nfibonacciSimpleSum2(n) = true.\nExplanation: 11 = 5 + 55 = F5 + F10.\nFor n = 66, the output should be\nfibonacciSimpleSum2(n) = false",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "fibonacciSimpleSum2(n)",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "fibonacciSimpleSum2(n) = true.\nExplanation: 11 = 3 + 8 = F4 + F6.\nFor n = 60, the output should be\nfibonacciSimpleSum2(n) = true.\nExplanation: 11 = 5 + 55 = F5 + F10.\nFor n = 66, the output should be\nfibonacciSimpleSum2(n) = false\n\"\"\"\ndef fibonacciSimpleSum2(n):\n    # if 0 is less than n and n is less than 5 then we know we can return",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "fibonacciSimpleSum2(n)",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "fibonacciSimpleSum2(n) = true.\nExplanation: 11 = 5 + 55 = F5 + F10.\nFor n = 66, the output should be\nfibonacciSimpleSum2(n) = false\n\"\"\"\ndef fibonacciSimpleSum2(n):\n    # if 0 is less than n and n is less than 5 then we know we can return\n    # true because n will be 1-4 which can be created with 2 fib numbers\n    if 0 < n < 5:\n        return True",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "fibonacciSimpleSum2(n)",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "fibonacciSimpleSum2(n) = false\n\"\"\"\ndef fibonacciSimpleSum2(n):\n    # if 0 is less than n and n is less than 5 then we know we can return\n    # true because n will be 1-4 which can be created with 2 fib numbers\n    if 0 < n < 5:\n        return True\n    # first get fibonacci sequence up to n\n    seq = [0, 1]\n    # starting from 2 and ending at n",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "2^n",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "2^n = 64\nlog_2 64 = 6\nWrite an exponential expression that is identical to this logarithmic expression:\nlog_2 128 = n\n2^7 = 128\nWhat keywords should you look out for that might alert you that logarithms are involved?\ndoubles, halves\n\"\"\"\n\"\"\"\nRewrite the implementation of linear search below so that the algorithm searches from the end of the list to the beginning.",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "2^7",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "2^7 = 128\nWhat keywords should you look out for that might alert you that logarithms are involved?\ndoubles, halves\n\"\"\"\n\"\"\"\nRewrite the implementation of linear search below so that the algorithm searches from the end of the list to the beginning.\n\"\"\"\ndef linear_search(arr, target):\n    # loop through each item in the input array\n    i = len(arr) - 1",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "arr = [1, 2, 3, 4, 5, 6]\ntarget = 3\n# print(linear_search(arr, target))\n\"\"\"\nWrite a recursive search function that receives as input an array of integers and a target integer value. This function should return True if the target element exists in the array, and False otherwise.\nWhat would be the base case(s) we'd have to consider for implementing this function?\nHow should our recursive solution converge on our base case(s)?\nIn your own words, write out the three rules for recursion and how you can identify when a problem is amenable to using a recursive method.\n- problem has an obvious base case\n- the data changes predictably on the way to the base case ",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "target",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "target = 3\n# print(linear_search(arr, target))\n\"\"\"\nWrite a recursive search function that receives as input an array of integers and a target integer value. This function should return True if the target element exists in the array, and False otherwise.\nWhat would be the base case(s) we'd have to consider for implementing this function?\nHow should our recursive solution converge on our base case(s)?\nIn your own words, write out the three rules for recursion and how you can identify when a problem is amenable to using a recursive method.\n- problem has an obvious base case\n- the data changes predictably on the way to the base case \n- the function must call itself",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "arr = [1, 2, 3, 4, 5, 6]\ntarget = 55\ndef binary_recursive_search(arr, target, min_index, max_index):\n    if min_index >= max_index:\n        return -1\n    guess = (max_index + min_index) // 2\n    if arr[guess] == target:\n        return guess\n    elif target < arr[guess]:\n        return binary_recursive_search(arr, target, min_index, guess - 1)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "target",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "target = 55\ndef binary_recursive_search(arr, target, min_index, max_index):\n    if min_index >= max_index:\n        return -1\n    guess = (max_index + min_index) // 2\n    if arr[guess] == target:\n        return guess\n    elif target < arr[guess]:\n        return binary_recursive_search(arr, target, min_index, guess - 1)\n    else:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "surnames",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "surnames = [\n    'liu',\n    'mcdowell',\n    'nixon',\n    'sparks',\n    'zhang',\n    'ahmed',  # <-- rotates here!\n    'brandt',\n    'davenport',\n    'farley',",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "surnames",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "surnames = [\n    \"sparks\",\n    \"zhang\",\n    \"liu\",\n    \"ahmed\",  # <-- rotates here!\n    \"brandt\",\n    \"davenport\",\n    \"farley\",\n    \"glover\",\n    \"kennedy\",",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "n = [1, 2, 3, 4, 5, 6, 7, 8, 9]\ndef firstDraftWithTypo(n):\n    # Your code here\n    pass\n    contains_typo = 4\n    min = 0\n    max = len(n) - 1\n    while not max < min:\n        guess = (min + max) // 2\n        # if containsTypo were real this line would be:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "n = 3\ndef eating_cookies(n, cache=None):\n    # if n < 0:\n    #     return 0\n    # if n == 0:\n    #     return 1\n    # return eating_cookies(n-1) + eating_cookies(n - 2) + eating_cookies(n -3)\n    # let the cache be 2 longer than n\n    cache = [0] * (n + 2)\n    print(cache)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "removeAdjacent(s)",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "removeAdjacent(s) = \"a\";\nFor s = \"abccaaab\", the output should be\nremoveAdjacent(s) = \"abcab\".\n\"\"\"\n# s = \"aaaaa\"\n# s = \"abccaaab\"\ndef removeAdjacent(s):\n    # add first letter to new string\n    if s == \"\":\n        return s",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "removeAdjacent(s)",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "removeAdjacent(s) = \"abcab\".\n\"\"\"\n# s = \"aaaaa\"\n# s = \"abccaaab\"\ndef removeAdjacent(s):\n    # add first letter to new string\n    if s == \"\":\n        return s\n    new_str = s[0]\n    # iterate the string",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "str",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "str = \"reverse\"\ndef reverse_String(str):\n    i, j = 0, len(str) - 1\n    print(i, j)\n    while i < j:\n        str[i], str[j] = str[j], str[i]\n        i += 1\n        j -= 1\n    return str\n# print(reverse_String(str))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "checkPalindrome(inputString)",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "checkPalindrome(inputString) = true;\nFor inputString = \"abac\", the output should be\ncheckPalindrome(inputString) = false;\nFor inputString = \"a\", the output should be\ncheckPalindrome(inputString) = true.\n\"\"\"\ninputString = \"aabaa\"\n# inputString = \"abac\"\n# inputString = \"a\"\ninputString = \"hlbeeykoqqqqokyeeblh\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "checkPalindrome(inputString)",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "checkPalindrome(inputString) = false;\nFor inputString = \"a\", the output should be\ncheckPalindrome(inputString) = true.\n\"\"\"\ninputString = \"aabaa\"\n# inputString = \"abac\"\n# inputString = \"a\"\ninputString = \"hlbeeykoqqqqokyeeblh\"\ndef checkPalindrome(inputString):\n    return inputString == inputString[::-1]",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "checkPalindrome(inputString)",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "checkPalindrome(inputString) = true.\n\"\"\"\ninputString = \"aabaa\"\n# inputString = \"abac\"\n# inputString = \"a\"\ninputString = \"hlbeeykoqqqqokyeeblh\"\ndef checkPalindrome(inputString):\n    return inputString == inputString[::-1]\n# print(checkPalindrome(inputString))\n\"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "inputString",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "inputString = \"aabaa\"\n# inputString = \"abac\"\n# inputString = \"a\"\ninputString = \"hlbeeykoqqqqokyeeblh\"\ndef checkPalindrome(inputString):\n    return inputString == inputString[::-1]\n# print(checkPalindrome(inputString))\n\"\"\"\n*** Data Structures and Algorithms Sprint ***\n---------------------------------------------",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "inputString",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "inputString = \"hlbeeykoqqqqokyeeblh\"\ndef checkPalindrome(inputString):\n    return inputString == inputString[::-1]\n# print(checkPalindrome(inputString))\n\"\"\"\n*** Data Structures and Algorithms Sprint ***\n---------------------------------------------\n\"\"\"\n\"\"\"\n*** Reverse Linked List ***",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "reverseLinkedList(l)",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "reverseLinkedList(l) = [5, 4, 3, 2, 1].\n\"\"\"\n# Singly-linked lists are already defined with this interface:\n# class ListNode(object):\n#   def __init__(self, x):\n#     self.value = x\n#     self.next = None\n#\ndef reverseLinkedList(l):\n    cur = l",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "word1",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "word1 = \"tangpam\"\nword2 = \"anagram\"\ndef checkBlanagrams(word1, word2):\n    if word1 == \"\" or word2 == \"\":\n        return False\n    work_string = \"\"\n    diff = 0\n    sort1 = sorted(word1)  # O(n) space O(nlogn) time\n    sort2 = sorted(word2)  # O(n) space O(nlogn) time\n    for i in range(len(word1)):  # O(n)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "word2",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "word2 = \"anagram\"\ndef checkBlanagrams(word1, word2):\n    if word1 == \"\" or word2 == \"\":\n        return False\n    work_string = \"\"\n    diff = 0\n    sort1 = sorted(word1)  # O(n) space O(nlogn) time\n    sort2 = sorted(word2)  # O(n) space O(nlogn) time\n    for i in range(len(word1)):  # O(n)\n        # check for substitutions",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "nums",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "nums = [4, 5, 6, 7, 0, 1, 2]\ntarget = 0\ndef findValueSortedShiftedArray(nums, target):\n    min = 0\n    max = len(nums) - 1\n    while not max < min:\n        guess = (max + min) // 2\n        if nums[guess] == target:\n            return guess\n        elif nums[min] <= nums[guess]:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "target",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "target = 0\ndef findValueSortedShiftedArray(nums, target):\n    min = 0\n    max = len(nums) - 1\n    while not max < min:\n        guess = (max + min) // 2\n        if nums[guess] == target:\n            return guess\n        elif nums[min] <= nums[guess]:\n            if nums[min] <= target < nums[guess]:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "BSTNode",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "class BSTNode:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n    def insert(self, value):\n        if value < self.value:\n            if self.left is None:\n                self.left = BSTNode(value)\n            else:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "BST",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "class BST:\n    def __init__(self, value):\n        self.root = BSTNode(value)\n    def insert(self, value):\n        return self.root.insert(value)\n    def search(self, target):\n        return self.root.search(target)\n    def find_minimum_value(self):\n        return self.root.find_minimum_value().value\n    def delete(self, value):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "BinaryTreeNode",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "class BinaryTreeNode:\n    def __init__(self, value=0, left=None, right=None):\n        self.value = value\n        self.left = left\n        self.right = right\ndef maxDepth(self, root):\n    # if root is None return 0\n    if root is None:\n        return 0\n    # if root exists get the left depth and the right depth by recursively",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "class TreeNode:\n    def __init__(self, value=0, left=None, right=None):\n        self.value = value\n        self.left = left\n        self.right = right\ndef is_valid_BST(self, root):\n    # if there is no root return False\n    if root is None:\n        return True\n    # traverse the tree to make sure it is valid",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\ndef helper(root, res):\n    if root is None:\n        return\n    helper(root.left, res)\n    res.append(root.val)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\ndef helper(root, res):\n    if root is None:\n        return\n    res.append(root.val)\n    helper(root.left, res)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\ndef helper(root, res):\n    if root is None:\n        return\n    helper(root.left, res)\n    helper(root.right, res)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\ndef breadth_first_traversal(root):\n    if root is None:\n        return []\n    result = []\n    queue = []",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n# go all the way down to left then back to root then right in iterative or\n# recursive\n# for recursive solution keep track of base case (when there is no root) and\n# the recursive way\ndef inorder_traversal(root):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\ndef build_tree(preorder, inorder):\n    # inorder (left -> right -> root ->)\n    # preorder (root -> left -> right)\n    # the absolute root will be preorder[0]\n    # all items to the left of inorder[root] will be the left subtree",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "Graph",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "class Graph:\n    def __init__(self):\n        self.vertices = {\n            'A': {'B': 1},\n            'B': {'C': 3, 'D': 2, 'E': 1},\n            'C': {'E': 4},\n            'D': {'E': 2},\n            'E': {'F': 3},\n            'F': {},\n            'G': {'D': 1},",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "Graph",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "class Graph:\n    def __init__(self):\n        self.edges = [\n            [0, 1, 0, 0, 0, 0, 0],\n            [0, 0, 3, 3, 1, 0, 0],\n            [0, 0, 0, 0, 4, 0, 0],\n            [0, 0, 0, 0, 2, 0, 0],\n            [0, 0, 0, 0, 0, 3, 0],\n            [0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 1, 0, 0, 0],",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "Vertex",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "class Vertex:\n    def __init__(self, value):\n        self.value = value\n        self.connections = {}\n    def __str__(self):\n        return str(self.value) + ' connections: ' + str(\n            [x.value for x in self.connections])\n    def add_connection(self, vert, weight=0):\n        self.connections[vert] = weight\n    def get_connections(self):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "Graph",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "class Graph:\n    def __init__(self):\n        self.vertices = {}\n        self.count = 0\n    def __contains__(self, vert):\n        return vert in self.vertices\n    def __iter__(self):\n        return iter(self.vertices.values())\n    def add_vertex(self, value):\n        self.count += 1",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "GraphNode",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "class GraphNode:\n    def __init__(self, label):\n        self.label = label\n        self.neighbors = set()\n        self.color = None\ndef color_graph(graph, colors):\n    # make a graph to pass in\n    # try to get edges count\n    # edges plus 1 is colors\n    pass",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "Graph",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "class Graph:\n    def __init__(self):\n        self.vertices = {\n                            \"A\": {\"B\", \"C\", \"D\"},\n                            \"B\": {},\n                            \"C\": {\"E\", \"F\"},\n                            \"D\": {\"G\"},\n                            \"E\": {\"G\"},\n                            \"F\": {\"J\"},\n                            \"G\": {},",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "Graph",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "class Graph:\n    def __init__(self):\n        self.vertices = {\n                            \"A\": {\"B\", \"C\", \"D\"},\n                            \"B\": {},\n                            \"C\": {\"E\", \"F\"},\n                            \"D\": {\"G\"},\n                            \"E\": {\"G\"},\n                            \"F\": {\"J\"},\n                            \"G\": {},",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "class Solution:\n    def isCompleteTree(self, root: TreeNode) -> bool:\n        # we want to check each node for a right child\n        # if a right child exists and no left child exists we can return false\n        # if the left subtree is missing one or both children where the right\n        # subtree at that level has children return false\n        # init case where a node has no right child\n        no_right_child = False\n        # init case where a node has no children\n        no_children = False",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "maxDepth",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def maxDepth(self, root):\n    # if root is None return 0\n    if root is None:\n        return 0\n    # if root exists get the left depth and the right depth by recursively\n    # calling maxDepth on each side of the subtree\n    left_depth = self.maxDepth(root.left)\n    right_depth = self.maxDepth(root.right)\n    # if the left depth is greater than the right depth return the left depth\n    # plus 1",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "is_valid_BST",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def is_valid_BST(self, root):\n    # if there is no root return False\n    if root is None:\n        return True\n    # traverse the tree to make sure it is valid\n    else:\n        if root.left is None and root.right is None:\n            return True\n        elif root.left is None:\n            if root.right > root:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "balancedBinaryTree",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def balancedBinaryTree(root):\n    # define method to get the height of the tree\n    def get_height(root):\n        if root is None:\n            return 0\n        return max(get_height(root.left), get_height(root.right)) + 1\n    # if the root is None return True\n    if root is None:\n        return True\n    # get the heights of each subtree",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "minimumDepthBinaryTree",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def minimumDepthBinaryTree(root):\n    # if root is None return 0\n    if root is None:\n        return 0\n    # if root has no children return 1\n    if root.left is None and root.right is None:\n        return 1\n    # if no left child traverse the right tree\n    if root.left is None:\n        return minimumDepthBinaryTree(root.right) + 1",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "helper",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def helper(root, res):\n    if root is None:\n        return\n    helper(root.left, res)\n    res.append(root.val)\n    helper(root.right, res)\ndef inorder_traversal(root):\n    result = []\n    helper(root, result)\n    return result",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "inorder_traversal",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def inorder_traversal(root):\n    result = []\n    helper(root, result)\n    return result\n\"\"\"\nDepth first pre-order traversal\n\"\"\"\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "helper",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def helper(root, res):\n    if root is None:\n        return\n    res.append(root.val)\n    helper(root.left, res)\n    helper(root.right, res)\ndef preorder_traversal(root):\n    result = []\n    helper(root, result)\n    return result",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "preorder_traversal",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def preorder_traversal(root):\n    result = []\n    helper(root, result)\n    return result\n\"\"\"\nDepth first  first post-order traversal\n\"\"\"\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "helper",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def helper(root, res):\n    if root is None:\n        return\n    helper(root.left, res)\n    helper(root.right, res)\n    res.append(root.val)\ndef postorder_traversal(root):\n    result = []\n    helper(root, result)\n    return result",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "postorder_traversal",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def postorder_traversal(root):\n    result = []\n    helper(root, result)\n    return result\n\"\"\"\nBreadth first level order traversal\n\"\"\"\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "breadth_first_traversal",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def breadth_first_traversal(root):\n    if root is None:\n        return []\n    result = []\n    queue = []\n    queue.append(root)\n    while len(queue) != 0:\n        node = queue.pop(0)\n        result.append(node.val)\n        if node.left is not None:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "inorder_traversal",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def inorder_traversal(root):\n    # base case\n    if root is None:\n        return []\n    # recursively call the function on the left child until no more left\n    # children then the root will be none and the values are returned up the\n    # chain inorder\n    return inorder_traversal(root.left) + [root.val] + inorder_traversal(\n        root.right)\n# the iterative way with a stack",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "build_tree",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def build_tree(preorder, inorder):\n    # inorder (left -> right -> root ->)\n    # preorder (root -> left -> right)\n    # the absolute root will be preorder[0]\n    # all items to the left of inorder[root] will be the left subtree\n    # all items to the right of inorder[root] will be the right subtree\n    # pick the next element in preorder starting with item[0]\n    # create a new node with val set to the element\n    # delete it from preorder\n    # get the index of that element from inorder list using hashMaps to",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "binaryTreeInOrderTraversal",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def binaryTreeInOrderTraversal(root):\n    stack = []\n    result = []\n    while root is not None or stack != []:\n        while root is not None:\n            stack.append(root)\n            root = root.left\n        root = stack.pop()\n        result.append(root.value)\n        root = root.right",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "traverseTree",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def traverseTree(t):\n    queue = []\n    result = []\n    if t is None:\n        return result\n    root = t\n    queue.append(root)\n    while len(queue) > 0:\n        root = queue.pop(0)\n        result.append(root.value)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "treePaths",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def treePaths(t):\n    if t is None:\n        return []\n    result, stack = [], [(t, '')]\n    while stack:\n        root, el = stack.pop()\n        if root.left is None and root.right is None:\n            result.append(el + str(root.value))\n        if root.right:\n            stack.append((root.right, el + str(root.value) + '->'))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "color_graph",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def color_graph(graph, colors):\n    # make a graph to pass in\n    # try to get edges count\n    # edges plus 1 is colors\n    pass\n\"\"\"\n*** Demo 2 ***\n--------------\nYou are given a 2d grid of `\"1\"`s and `\"0\"`s that represents a \"map\". The\n`\"1\"`s represent land and the `\"0\"s` represent water.",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "numIslands",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def numIslands(grid):\n    pass\n# print(numIslands(grid))\n\"\"\"\n*** Code signal ***\n-------------------\nYou are given a directed acyclic graph (DAG) that contains N nodes.\nWrite a function that can find all the possible paths from node 0 to node N - 1. You can return the path in any order.\ngraph[a] is a list of all nodes b for which the edge a -> b exists.\nExample:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "csFindAllPathsFromAToB",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def csFindAllPathsFromAToB(graph):\n    class Graph:\n        def __init__(self):\n            self.verts = {}\n        def add_vertex(self, vert):\n            self.verts[vert] = []\n        def add_edge(self, v_from, v_to):\n            self.verts[v_from].append(v_to)\n        def is_connected(self, v_from, v_to):\n            if v_from in self.verts and v_to in self.verts:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "floodfill",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def floodfill(image, row, col, color):\n    if image[row][col] != ' ':\n        return\n    image[row][col] = color\n    floodfill(row, col + 1, color)\n    floodfill(row, col - 1, color)\n    floodfill(row + 1, col, color)\n    floodfill(row - 1, col, color)\n\"\"\"\nDemo 2",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "find_judge",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def find_judge(N, trust):\n    \"\"\"\n    Inputs:\n    N -> int\n    trust -> List[List[int]]\n    Output:\n    int\n    \"\"\"\n    # Your code here\n\"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "csFriendCircles",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def csFriendCircles(friendships):\n    # use dfs to ensure visiting every node\n    class Graph:\n        def __init__(self):\n            self.verts = {}\n        def add_vertex(self, vert):\n            self.verts[vert] = []\n        def add_edge(self, v_from, v_to):\n            self.verts[v_from].append(v_to)\n        def is_connected(self, v_from, v_to):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "get_neighbors",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def get_neighbors(word):\n    neighbors = []\n    for w in words:\n        if len(w) == len(word):\n            diff = 0\n            for i in range(len(w)):\n                if w[i] != word[i]:\n                    diff += 1\n                if diff > 1:\n                    break",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "bfs",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def bfs(start_word, end_word):\n    print('s, e', start_word, end_word)\n    visited = set()\n    q = [[start_word]]\n    while q:\n        path = q.pop(0)\n        v = path[-1]\n        if v not in visited:\n            visited.add(v)\n            if v == end_word:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "csBSTRangeSum",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def csBSTRangeSum(root, lower, upper):\n    # variable to hold running sum of target numbers\n    range = []\n    # variable to hold the current node\n    cur = root\n    # search the tree to find all numbers within the range of lower and upper\n    # dfs\n    def helper(root):\n        if root is None:\n            return",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "csBinaryTreeInvert",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def csBinaryTreeInvert(root):\n    # use a bft to visit all levels and switch the positions of left and\n    # right children for each node at each level\n    if root is None:\n        return []\n    result = []\n    queue = []\n    queue.append(root)\n    while len(queue) != 0:\n        node = queue.pop(0)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "reversePairs",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def reversePairs(nums):\n    # EDGE CASE if the array length is less than 2 return 0\n    if len(nums) < 2:\n        return 0\n    # init i to 0 and j to 1\n    i = 0\n    j = 1\n    # init count for reverse pairs found\n    count = 0\n    # iterate the array",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "log2(128)",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "log2(128) = h\n2**7 = 128\n7 <~~ answer\n- Calculate the total number of nodes on a perfect binary tree, given that \n  the height of the tree is 8.\nn = 2h - 1\nn = 2**8 - 1\nn = 256 - 1\nn = 255 <~~ answer\n\"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "2**7",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "2**7 = 128\n7 <~~ answer\n- Calculate the total number of nodes on a perfect binary tree, given that \n  the height of the tree is 8.\nn = 2h - 1\nn = 2**8 - 1\nn = 256 - 1\nn = 255 <~~ answer\n\"\"\"\n\"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "n = 2h - 1\nn = 2**8 - 1\nn = 256 - 1\nn = 255 <~~ answer\n\"\"\"\n\"\"\"\n*** Objective 2 Challenge *** \n-----------------------------\n- In your own words, explain why an unbalanced binary search tree's \nperformance becomes degraded.",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "n = 2**8 - 1\nn = 256 - 1\nn = 255 <~~ answer\n\"\"\"\n\"\"\"\n*** Objective 2 Challenge *** \n-----------------------------\n- In your own words, explain why an unbalanced binary search tree's \nperformance becomes degraded.\nThe worst case performance is linear because each node would potentially need to be traversed",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "n = 256 - 1\nn = 255 <~~ answer\n\"\"\"\n\"\"\"\n*** Objective 2 Challenge *** \n-----------------------------\n- In your own words, explain why an unbalanced binary search tree's \nperformance becomes degraded.\nThe worst case performance is linear because each node would potentially need to be traversed\n\"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "n = 255 <~~ answer\n\"\"\"\n\"\"\"\n*** Objective 2 Challenge *** \n-----------------------------\n- In your own words, explain why an unbalanced binary search tree's \nperformance becomes degraded.\nThe worst case performance is linear because each node would potentially need to be traversed\n\"\"\"\n\"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "preorder",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "preorder = [5,7,22,13,9]\ninorder = [7,5,13,22,9]\nOutput:\n    5\n   / \\\n  7  22\n    /  \\\n   13   9\n   - Preorder Traversal\n--- Visit the root node first",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "inorder",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "inorder = [7,5,13,22,9]\nOutput:\n    5\n   / \\\n  7  22\n    /  \\\n   13   9\n   - Preorder Traversal\n--- Visit the root node first\n--- Traverse the left subtree in preorder",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "preorder",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "preorder = [5, 7, 22, 13, 9]\ninorder = [7, 5, 13, 22, 9]\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\ndef build_tree(preorder, inorder):\n    # inorder (left -> right -> root ->)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "inorder",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "inorder = [7, 5, 13, 22, 9]\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\ndef build_tree(preorder, inorder):\n    # inorder (left -> right -> root ->)\n    # preorder (root -> left -> right)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "tree",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "tree = build_tree(preorder, inorder)\n# print('tree:', inorder_traversal(tree))\n\"\"\"\n*** CodeSignal ***\n------------------\n\"\"\"\n\"\"\"\nYou are given a binary tree. Write a function that returns the binary tree's node values using an in-order traversal.\nExample:\nInput: [2,None,3,4]",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "t = {\n    \"value\": 1,\n    \"left\": {\n        \"value\": 2,\n        \"left\": null,\n        \"right\": {\n            \"value\": 3,\n            \"left\": null,\n            \"right\": null\n        }",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "traverseTree(t)",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "traverseTree(t) = [1, 2, 4, 3, 5].\nThis t looks like this:\n     1\n   /   \\\n  2     4\n   \\   /\n    3 5\n\"\"\"\nt = {\n    \"value\": 1,",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "t = {\n    \"value\": 1,\n    \"left\": {\n        \"value\": 2,\n        \"left\": None,\n        \"right\": {\n            \"value\": 3,\n            \"left\": None,\n            \"right\": None\n        }",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "t = {\n    \"value\": 5,\n    \"left\": {\n        \"value\": 2,\n        \"left\": {\n            \"value\": 10,\n            \"left\": null,\n            \"right\": null\n        },\n        \"right\": {",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "treePaths(t)",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "treePaths(t) = [\"5->2->10\", \"5->2->4\", \"5->-3\"].\nThe given tree looks like this:\n    5\n   / \\\n  2  -3\n / \\\n10  4\n\"\"\"\n#\n# Binary trees are already defined with this interface:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "g_verts",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "g_verts = ['A', 'B', 'C', 'D', 'E']\ng = Graph()\nfor v in g_verts:\n    g.add_vertex(g)\ng.add_edge('A', 'B', 1)\ng.add_edge('B', 'C', 3)\ng.add_edge('B', 'D', 2)\ng.add_edge('E', 'D', 1)\n# for v in g:\n#     for w in v.get_connections():",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "g",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "g = Graph()\nfor v in g_verts:\n    g.add_vertex(g)\ng.add_edge('A', 'B', 1)\ng.add_edge('B', 'C', 3)\ng.add_edge('B', 'D', 2)\ng.add_edge('E', 'D', 1)\n# for v in g:\n#     for w in v.get_connections():\n#         print(\"( %s, %s )\" % (v.get_value(), w.get_value()))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "grid",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "grid = [\n    [\"1\", \"1\", \"1\", \"1\", \"0\"],\n    [\"1\", \"1\", \"0\", \"1\", \"0\"],\n    [\"1\", \"1\", \"0\", \"0\", \"0\"],\n    [\"0\", \"0\", \"0\", \"0\", \"0\"]\n]\ndef numIslands(grid):\n    pass\n# print(numIslands(grid))\n\"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "graph",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "graph = [[1, 2], [3], [3], [4], []]\ndef csFindAllPathsFromAToB(graph):\n    class Graph:\n        def __init__(self):\n            self.verts = {}\n        def add_vertex(self, vert):\n            self.verts[vert] = []\n        def add_edge(self, v_from, v_to):\n            self.verts[v_from].append(v_to)\n        def is_connected(self, v_from, v_to):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "image",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "image = [[1,1,1],[1,1,0],[1,0,1]]\nsr = 1, sc = 1, newColor = 2\nOutput: [[2,2,2],[2,2,0],[2,0,1]]\nExplanation:\nFrom the center of the image (with position (sr, sc) = (1, 1)), all pixels\nconnected by a path of the same color as the starting pixel are colored with\nthe new color.\nNote the bottom corner is not colored 2, because it is not 4-directionally\nconnected to the starting pixel.\n```",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "sr",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "sr = 1, sc = 1, newColor = 2\nOutput: [[2,2,2],[2,2,0],[2,0,1]]\nExplanation:\nFrom the center of the image (with position (sr, sc) = (1, 1)), all pixels\nconnected by a path of the same color as the starting pixel are colored with\nthe new color.\nNote the bottom corner is not colored 2, because it is not 4-directionally\nconnected to the starting pixel.\n```\nNotes:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "friendships",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "friendships = [[1, 1, 0],\n               [1, 1, 0],\n               [0, 0, 1]]\nfriendships = [[1, 1, 0],\n               [1, 1, 1],\n               [0, 1, 1]]\ndef csFriendCircles(friendships):\n    # use dfs to ensure visiting every node\n    class Graph:\n        def __init__(self):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "friendships",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "friendships = [[1, 1, 0],\n               [1, 1, 1],\n               [0, 1, 1]]\ndef csFriendCircles(friendships):\n    # use dfs to ensure visiting every node\n    class Graph:\n        def __init__(self):\n            self.verts = {}\n        def add_vertex(self, vert):\n            self.verts[vert] = []",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "start_word",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "start_word = 'hit'\nend_word = 'cog'\nreturn: ['hit', 'hot', 'cot', 'cog'] \n\"\"\"\nwords = set()\nwith open('words.txt') as f:\n    for w in f:\n        w = w.strip().lower()\n        words.add(w)\n# create function to get all the neighbors of a word ( only 1 letter diff)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "end_word",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "end_word = 'cog'\nreturn: ['hit', 'hot', 'cot', 'cog'] \n\"\"\"\nwords = set()\nwith open('words.txt') as f:\n    for w in f:\n        w = w.strip().lower()\n        words.add(w)\n# create function to get all the neighbors of a word ( only 1 letter diff)\ndef get_neighbors(word):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "words",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "words = set()\nwith open('words.txt') as f:\n    for w in f:\n        w = w.strip().lower()\n        words.add(w)\n# create function to get all the neighbors of a word ( only 1 letter diff)\ndef get_neighbors(word):\n    neighbors = []\n    for w in words:\n        if len(w) == len(word):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "root = [10, 5, 15, 3, 7, null, 18]\nlower = 7\nupper = 15\n         10\n         / \\\n        5  15\n       / \\    \\\n      3   7    18\nOutput:\n32",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "lower",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "lower = 7\nupper = 15\n         10\n         / \\\n        5  15\n       / \\    \\\n      3   7    18\nOutput:\n32\nExample 2:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "upper",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "upper = 15\n         10\n         / \\\n        5  15\n       / \\    \\\n      3   7    18\nOutput:\n32\nExample 2:\nInput:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "root = [10,5,15,3,7,13,18,1,null,6]\nlower = 6\nupper = 10\n           10\n          /  \\\n       5       15\n     / \\     /   \\ \n    3   7  13   18\n   /   /\n  1   6",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "lower",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "lower = 6\nupper = 10\n           10\n          /  \\\n       5       15\n     / \\     /   \\ \n    3   7  13   18\n   /   /\n  1   6\nOutput:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "upper",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "upper = 10\n           10\n          /  \\\n       5       15\n     / \\     /   \\ \n    3   7  13   18\n   /   /\n  1   6\nOutput:\n23",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "root = [10, 5, 15, 3, 7, None, 18]\nlower = 7\nupper = 15\n#\n# Binary trees are already defined with this interface:\n# class Tree(object):\n#   def __init__(self, x):\n#     self.value = x\n#     self.left = None\n#     self.right = None",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "lower",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "lower = 7\nupper = 15\n#\n# Binary trees are already defined with this interface:\n# class Tree(object):\n#   def __init__(self, x):\n#     self.value = x\n#     self.left = None\n#     self.right = None\n#",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "upper",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "upper = 15\n#\n# Binary trees are already defined with this interface:\n# class Tree(object):\n#   def __init__(self, x):\n#     self.value = x\n#     self.left = None\n#     self.right = None\n#\n# Binary trees are already defined with this interface:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "nums",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "nums = [1, 3, 2, 3, 1]\nprint(f'reversePairs(nums): {reversePairs(nums)}')\n\"\"\"\n958. Check Completeness of a Binary Tree\nMedium\n1072\n14\nAdd to List\nShare\nGiven the root of a binary tree, determine if it is a complete binary tree.",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "BSTNode",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "class BSTNode:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n    def insert(self, value):\n        if value < self.value:\n            if self.left is None:\n                self.left = BSTNode(value)\n            else:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "BST",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "class BST:\n    def __init__(self, value):\n        self.root = BSTNode(value)\n    def insert(self, value):\n        return self.root.insert(value)\n    def search(self, target):\n        return self.root.search(target)\n    def find_minimum_value(self):\n        return self.root.find_minimum_value().value\n    def delete(self, value):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "BinaryTreeNode",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "class BinaryTreeNode:\n    def __init__(self, value=0, left=None, right=None):\n        self.value = value\n        self.left = left\n        self.right = right\ndef maxDepth(self, root):\n    # if root is None return 0\n    if root is None:\n        return 0\n    # if root exists get the left depth and the right depth by recursively",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "class TreeNode:\n    def __init__(self, value=0, left=None, right=None):\n        self.value = value\n        self.left = left\n        self.right = right\ndef is_valid_BST(self, root):\n    # if there is no root return False\n    if root is None:\n        return True\n    # traverse the tree to make sure it is valid",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\ndef helper(root, res):\n    if root is None:\n        return\n    helper(root.left, res)\n    res.append(root.val)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\ndef helper(root, res):\n    if root is None:\n        return\n    res.append(root.val)\n    helper(root.left, res)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\ndef helper(root, res):\n    if root is None:\n        return\n    helper(root.left, res)\n    helper(root.right, res)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\ndef breadth_first_traversal(root):\n    if root is None:\n        return []\n    result = []\n    queue = []",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n# go all the way down to left then back to root then right in iterative or\n# recursive\n# for recursive solution keep track of base case (when there is no root) and\n# the recursive way\ndef inorder_traversal(root):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\ndef build_tree(preorder, inorder):\n    # inorder (left -> right -> root ->)\n    # preorder (root -> left -> right)\n    # the absolute root will be preorder[0]\n    # all items to the left of inorder[root] will be the left subtree",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "Graph",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "class Graph:\n    def __init__(self):\n        self.vertices = {\n            \"A\": {\"B\": 1},\n            \"B\": {\"C\": 3, \"D\": 2, \"E\": 1},\n            \"C\": {\"E\": 4},\n            \"D\": {\"E\": 2},\n            \"E\": {\"F\": 3},\n            \"F\": {},\n            \"G\": {\"D\": 1},",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "Graph",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "class Graph:\n    def __init__(self):\n        self.edges = [\n            [0, 1, 0, 0, 0, 0, 0],\n            [0, 0, 3, 3, 1, 0, 0],\n            [0, 0, 0, 0, 4, 0, 0],\n            [0, 0, 0, 0, 2, 0, 0],\n            [0, 0, 0, 0, 0, 3, 0],\n            [0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 1, 0, 0, 0],",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "Vertex",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "class Vertex:\n    def __init__(self, value):\n        self.value = value\n        self.connections = {}\n    def __str__(self):\n        return (\n            str(self.value)\n            + \" connections: \"\n            + str([x.value for x in self.connections])\n        )",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "Graph",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "class Graph:\n    def __init__(self):\n        self.vertices = {}\n        self.count = 0\n    def __contains__(self, vert):\n        return vert in self.vertices\n    def __iter__(self):\n        return iter(self.vertices.values())\n    def add_vertex(self, value):\n        self.count += 1",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "GraphNode",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "class GraphNode:\n    def __init__(self, label):\n        self.label = label\n        self.neighbors = set()\n        self.color = None\ndef color_graph(graph, colors):\n    # make a graph to pass in\n    # try to get edges count\n    # edges plus 1 is colors\n    pass",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "Graph",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "class Graph:\n    def __init__(self):\n        self.vertices = {\n                            \"A\": {\"B\", \"C\", \"D\"},\n                            \"B\": {},\n                            \"C\": {\"E\", \"F\"},\n                            \"D\": {\"G\"},\n                            \"E\": {\"G\"},\n                            \"F\": {\"J\"},\n                            \"G\": {},",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "Graph",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "class Graph:\n    def __init__(self):\n        self.vertices = {\n                            \"A\": {\"B\", \"C\", \"D\"},\n                            \"B\": {},\n                            \"C\": {\"E\", \"F\"},\n                            \"D\": {\"G\"},\n                            \"E\": {\"G\"},\n                            \"F\": {\"J\"},\n                            \"G\": {},",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "class Solution:\n    def isCompleteTree(self, root: TreeNode) -> bool:\n        # we want to check each node for a right child\n        # if a right child exists and no left child exists we can return false\n        # if the left subtree is missing one or both children where the right\n        # subtree at that level has children return false\n        # init case where a node has no right child\n        no_right_child = False\n        # init case where a node has no children\n        no_children = False",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "maxDepth",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def maxDepth(self, root):\n    # if root is None return 0\n    if root is None:\n        return 0\n    # if root exists get the left depth and the right depth by recursively\n    # calling maxDepth on each side of the subtree\n    left_depth = self.maxDepth(root.left)\n    right_depth = self.maxDepth(root.right)\n    # if the left depth is greater than the right depth return the left depth\n    # plus 1",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "is_valid_BST",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def is_valid_BST(self, root):\n    # if there is no root return False\n    if root is None:\n        return True\n    # traverse the tree to make sure it is valid\n    else:\n        if root.left is None and root.right is None:\n            return True\n        elif root.left is None:\n            if root.right > root:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "balancedBinaryTree",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def balancedBinaryTree(root):\n    # define method to get the height of the tree\n    def get_height(root):\n        if root is None:\n            return 0\n        return max(get_height(root.left), get_height(root.right)) + 1\n    # if the root is None return True\n    if root is None:\n        return True\n    # get the heights of each subtree",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "minimumDepthBinaryTree",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def minimumDepthBinaryTree(root):\n    # if root is None return 0\n    if root is None:\n        return 0\n    # if root has no children return 1\n    if root.left is None and root.right is None:\n        return 1\n    # if no left child traverse the right tree\n    if root.left is None:\n        return minimumDepthBinaryTree(root.right) + 1",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "helper",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def helper(root, res):\n    if root is None:\n        return\n    helper(root.left, res)\n    res.append(root.val)\n    helper(root.right, res)\ndef inorder_traversal(root):\n    result = []\n    helper(root, result)\n    return result",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "inorder_traversal",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def inorder_traversal(root):\n    result = []\n    helper(root, result)\n    return result\n\"\"\"\nDepth first pre-order traversal\n\"\"\"\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "helper",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def helper(root, res):\n    if root is None:\n        return\n    res.append(root.val)\n    helper(root.left, res)\n    helper(root.right, res)\ndef preorder_traversal(root):\n    result = []\n    helper(root, result)\n    return result",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "preorder_traversal",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def preorder_traversal(root):\n    result = []\n    helper(root, result)\n    return result\n\"\"\"\nDepth first  first post-order traversal\n\"\"\"\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "helper",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def helper(root, res):\n    if root is None:\n        return\n    helper(root.left, res)\n    helper(root.right, res)\n    res.append(root.val)\ndef postorder_traversal(root):\n    result = []\n    helper(root, result)\n    return result",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "postorder_traversal",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def postorder_traversal(root):\n    result = []\n    helper(root, result)\n    return result\n\"\"\"\nBreadth first level order traversal\n\"\"\"\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "breadth_first_traversal",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def breadth_first_traversal(root):\n    if root is None:\n        return []\n    result = []\n    queue = []\n    queue.append(root)\n    while len(queue) != 0:\n        node = queue.pop(0)\n        result.append(node.val)\n        if node.left is not None:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "inorder_traversal",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def inorder_traversal(root):\n    # base case\n    if root is None:\n        return []\n    # recursively call the function on the left child until no more left\n    # children then the root will be none and the values are returned up the\n    # chain inorder\n    return inorder_traversal(root.left) + [root.val] + inorder_traversal(root.right)\n# the iterative way with a stack\n# declare the stack and the result array",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "build_tree",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def build_tree(preorder, inorder):\n    # inorder (left -> right -> root ->)\n    # preorder (root -> left -> right)\n    # the absolute root will be preorder[0]\n    # all items to the left of inorder[root] will be the left subtree\n    # all items to the right of inorder[root] will be the right subtree\n    # pick the next element in preorder starting with item[0]\n    # create a new node with val set to the element\n    # delete it from preorder\n    # get the index of that element from inorder list using hashMaps to",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "binaryTreeInOrderTraversal",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def binaryTreeInOrderTraversal(root):\n    stack = []\n    result = []\n    while root is not None or stack != []:\n        while root is not None:\n            stack.append(root)\n            root = root.left\n        root = stack.pop()\n        result.append(root.value)\n        root = root.right",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "traverseTree",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def traverseTree(t):\n    queue = []\n    result = []\n    if t is None:\n        return result\n    root = t\n    queue.append(root)\n    while len(queue) > 0:\n        root = queue.pop(0)\n        result.append(root.value)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "treePaths",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def treePaths(t):\n    if t is None:\n        return []\n    result, stack = [], [(t, \"\")]\n    while stack:\n        root, el = stack.pop()\n        if root.left is None and root.right is None:\n            result.append(el + str(root.value))\n        if root.right:\n            stack.append((root.right, el + str(root.value) + \"->\"))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "color_graph",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def color_graph(graph, colors):\n    # make a graph to pass in\n    # try to get edges count\n    # edges plus 1 is colors\n    pass\n\"\"\"\n*** Demo 2 ***\n--------------\nYou are given a 2d grid of `\"1\"`s and `\"0\"`s that represents a \"map\". The\n`\"1\"`s represent land and the `\"0\"s` represent water.",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "numIslands",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def numIslands(grid):\n    pass\n# print(numIslands(grid))\n\"\"\"\n*** Code signal ***\n-------------------\nYou are given a directed acyclic graph (DAG) that contains N nodes.\nWrite a function that can find all the possible paths from node 0 to node N - 1. You can return the path in any order.\ngraph[a] is a list of all nodes b for which the edge a -> b exists.\nExample:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "csFindAllPathsFromAToB",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def csFindAllPathsFromAToB(graph):\n    class Graph:\n        def __init__(self):\n            self.verts = {}\n        def add_vertex(self, vert):\n            self.verts[vert] = []\n        def add_edge(self, v_from, v_to):\n            self.verts[v_from].append(v_to)\n        def is_connected(self, v_from, v_to):\n            if v_from in self.verts and v_to in self.verts:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "floodfill",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def floodfill(image, row, col, color):\n    if image[row][col] != \" \":\n        return\n    image[row][col] = color\n    floodfill(row, col + 1, color)\n    floodfill(row, col - 1, color)\n    floodfill(row + 1, col, color)\n    floodfill(row - 1, col, color)\n\"\"\"\nDemo 2",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "find_judge",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def find_judge(N, trust):\n    \"\"\"\n    Inputs:\n    N -> int\n    trust -> List[List[int]]\n    Output:\n    int\n    \"\"\"\n    # Your code here\n\"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "csFriendCircles",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def csFriendCircles(friendships):\n    # use dfs to ensure visiting every node\n    class Graph:\n        def __init__(self):\n            self.verts = {}\n        def add_vertex(self, vert):\n            self.verts[vert] = []\n        def add_edge(self, v_from, v_to):\n            self.verts[v_from].append(v_to)\n        def is_connected(self, v_from, v_to):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "get_neighbors",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def get_neighbors(word):\n    neighbors = []\n    for w in words:\n        if len(w) == len(word):\n            diff = 0\n            for i in range(len(w)):\n                if w[i] != word[i]:\n                    diff += 1\n                if diff > 1:\n                    break",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "bfs",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def bfs(start_word, end_word):\n    print(\"s, e\", start_word, end_word)\n    visited = set()\n    q = [[start_word]]\n    while q:\n        path = q.pop(0)\n        v = path[-1]\n        if v not in visited:\n            visited.add(v)\n            if v == end_word:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "csBSTRangeSum",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def csBSTRangeSum(root, lower, upper):\n    # variable to hold running sum of target numbers\n    range = []\n    # variable to hold the current node\n    cur = root\n    # search the tree to find all numbers within the range of lower and upper\n    # dfs\n    def helper(root):\n        if root is None:\n            return",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "csBinaryTreeInvert",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def csBinaryTreeInvert(root):\n    # use a bft to visit all levels and switch the positions of left and\n    # right children for each node at each level\n    if root is None:\n        return []\n    result = []\n    queue = []\n    queue.append(root)\n    while len(queue) != 0:\n        node = queue.pop(0)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "reversePairs",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def reversePairs(nums):\n    # EDGE CASE if the array length is less than 2 return 0\n    if len(nums) < 2:\n        return 0\n    # init i to 0 and j to 1\n    i = 0\n    j = 1\n    # init count for reverse pairs found\n    count = 0\n    # iterate the array",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "log2(128)",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "log2(128) = h\n2**7 = 128\n7 <~~ answer\n- Calculate the total number of nodes on a perfect binary tree, given that \n  the height of the tree is 8.\nn = 2h - 1\nn = 2**8 - 1\nn = 256 - 1\nn = 255 <~~ answer\n\"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "2**7",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "2**7 = 128\n7 <~~ answer\n- Calculate the total number of nodes on a perfect binary tree, given that \n  the height of the tree is 8.\nn = 2h - 1\nn = 2**8 - 1\nn = 256 - 1\nn = 255 <~~ answer\n\"\"\"\n\"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "n = 2h - 1\nn = 2**8 - 1\nn = 256 - 1\nn = 255 <~~ answer\n\"\"\"\n\"\"\"\n*** Objective 2 Challenge *** \n-----------------------------\n- In your own words, explain why an unbalanced binary search tree's \nperformance becomes degraded.",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "n = 2**8 - 1\nn = 256 - 1\nn = 255 <~~ answer\n\"\"\"\n\"\"\"\n*** Objective 2 Challenge *** \n-----------------------------\n- In your own words, explain why an unbalanced binary search tree's \nperformance becomes degraded.\nThe worst case performance is linear because each node would potentially need to be traversed",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "n = 256 - 1\nn = 255 <~~ answer\n\"\"\"\n\"\"\"\n*** Objective 2 Challenge *** \n-----------------------------\n- In your own words, explain why an unbalanced binary search tree's \nperformance becomes degraded.\nThe worst case performance is linear because each node would potentially need to be traversed\n\"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "n = 255 <~~ answer\n\"\"\"\n\"\"\"\n*** Objective 2 Challenge *** \n-----------------------------\n- In your own words, explain why an unbalanced binary search tree's \nperformance becomes degraded.\nThe worst case performance is linear because each node would potentially need to be traversed\n\"\"\"\n\"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "preorder",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "preorder = [5,7,22,13,9]\ninorder = [7,5,13,22,9]\nOutput:\n    5\n   / \\\n  7  22\n    /  \\\n   13   9\n   - Preorder Traversal\n--- Visit the root node first",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "inorder",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "inorder = [7,5,13,22,9]\nOutput:\n    5\n   / \\\n  7  22\n    /  \\\n   13   9\n   - Preorder Traversal\n--- Visit the root node first\n--- Traverse the left subtree in preorder",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "preorder",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "preorder = [5, 7, 22, 13, 9]\ninorder = [7, 5, 13, 22, 9]\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\ndef build_tree(preorder, inorder):\n    # inorder (left -> right -> root ->)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "inorder",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "inorder = [7, 5, 13, 22, 9]\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\ndef build_tree(preorder, inorder):\n    # inorder (left -> right -> root ->)\n    # preorder (root -> left -> right)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "tree",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "tree = build_tree(preorder, inorder)\n# print('tree:', inorder_traversal(tree))\n\"\"\"\n*** CodeSignal ***\n------------------\n\"\"\"\n\"\"\"\nYou are given a binary tree. Write a function that returns the binary tree's node values using an in-order traversal.\nExample:\nInput: [2,None,3,4]",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "t = {\n    \"value\": 1,\n    \"left\": {\n        \"value\": 2,\n        \"left\": null,\n        \"right\": {\n            \"value\": 3,\n            \"left\": null,\n            \"right\": null\n        }",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "traverseTree(t)",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "traverseTree(t) = [1, 2, 4, 3, 5].\nThis t looks like this:\n     1\n   /   \\\n  2     4\n   \\   /\n    3 5\n\"\"\"\nt = {\n    \"value\": 1,",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "t = {\n    \"value\": 1,\n    \"left\": {\n        \"value\": 2,\n        \"left\": None,\n        \"right\": {\"value\": 3, \"left\": None, \"right\": None},\n    },\n    \"right\": {\n        \"value\": 4,\n        \"left\": {\"value\": 5, \"left\": None, \"right\": None},",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "t = {\n    \"value\": 5,\n    \"left\": {\n        \"value\": 2,\n        \"left\": {\n            \"value\": 10,\n            \"left\": null,\n            \"right\": null\n        },\n        \"right\": {",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "treePaths(t)",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "treePaths(t) = [\"5->2->10\", \"5->2->4\", \"5->-3\"].\nThe given tree looks like this:\n    5\n   / \\\n  2  -3\n / \\\n10  4\n\"\"\"\n#\n# Binary trees are already defined with this interface:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "g_verts",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "g_verts = [\"A\", \"B\", \"C\", \"D\", \"E\"]\ng = Graph()\nfor v in g_verts:\n    g.add_vertex(g)\ng.add_edge(\"A\", \"B\", 1)\ng.add_edge(\"B\", \"C\", 3)\ng.add_edge(\"B\", \"D\", 2)\ng.add_edge(\"E\", \"D\", 1)\n# for v in g:\n#     for w in v.get_connections():",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "g",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "g = Graph()\nfor v in g_verts:\n    g.add_vertex(g)\ng.add_edge(\"A\", \"B\", 1)\ng.add_edge(\"B\", \"C\", 3)\ng.add_edge(\"B\", \"D\", 2)\ng.add_edge(\"E\", \"D\", 1)\n# for v in g:\n#     for w in v.get_connections():\n#         print(\"( %s, %s )\" % (v.get_value(), w.get_value()))",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "grid",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "grid = [\n    [\"1\", \"1\", \"1\", \"1\", \"0\"],\n    [\"1\", \"1\", \"0\", \"1\", \"0\"],\n    [\"1\", \"1\", \"0\", \"0\", \"0\"],\n    [\"0\", \"0\", \"0\", \"0\", \"0\"],\n]\ndef numIslands(grid):\n    pass\n# print(numIslands(grid))\n\"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "graph",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "graph = [[1, 2], [3], [3], [4], []]\ndef csFindAllPathsFromAToB(graph):\n    class Graph:\n        def __init__(self):\n            self.verts = {}\n        def add_vertex(self, vert):\n            self.verts[vert] = []\n        def add_edge(self, v_from, v_to):\n            self.verts[v_from].append(v_to)\n        def is_connected(self, v_from, v_to):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "image",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "image = [[1,1,1],[1,1,0],[1,0,1]]\nsr = 1, sc = 1, newColor = 2\nOutput: [[2,2,2],[2,2,0],[2,0,1]]\nExplanation:\nFrom the center of the image (with position (sr, sc) = (1, 1)), all pixels\nconnected by a path of the same color as the starting pixel are colored with\nthe new color.\nNote the bottom corner is not colored 2, because it is not 4-directionally\nconnected to the starting pixel.\n```",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "sr",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "sr = 1, sc = 1, newColor = 2\nOutput: [[2,2,2],[2,2,0],[2,0,1]]\nExplanation:\nFrom the center of the image (with position (sr, sc) = (1, 1)), all pixels\nconnected by a path of the same color as the starting pixel are colored with\nthe new color.\nNote the bottom corner is not colored 2, because it is not 4-directionally\nconnected to the starting pixel.\n```\nNotes:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "friendships",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "friendships = [[1, 1, 0], [1, 1, 0], [0, 0, 1]]\nfriendships = [[1, 1, 0], [1, 1, 1], [0, 1, 1]]\ndef csFriendCircles(friendships):\n    # use dfs to ensure visiting every node\n    class Graph:\n        def __init__(self):\n            self.verts = {}\n        def add_vertex(self, vert):\n            self.verts[vert] = []\n        def add_edge(self, v_from, v_to):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "friendships",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "friendships = [[1, 1, 0], [1, 1, 1], [0, 1, 1]]\ndef csFriendCircles(friendships):\n    # use dfs to ensure visiting every node\n    class Graph:\n        def __init__(self):\n            self.verts = {}\n        def add_vertex(self, vert):\n            self.verts[vert] = []\n        def add_edge(self, v_from, v_to):\n            self.verts[v_from].append(v_to)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "start_word",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "start_word = 'hit'\nend_word = 'cog'\nreturn: ['hit', 'hot', 'cot', 'cog'] \n\"\"\"\nwords = set()\nwith open(\"words.txt\") as f:\n    for w in f:\n        w = w.strip().lower()\n        words.add(w)\n# create function to get all the neighbors of a word ( only 1 letter diff)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "end_word",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "end_word = 'cog'\nreturn: ['hit', 'hot', 'cot', 'cog'] \n\"\"\"\nwords = set()\nwith open(\"words.txt\") as f:\n    for w in f:\n        w = w.strip().lower()\n        words.add(w)\n# create function to get all the neighbors of a word ( only 1 letter diff)\ndef get_neighbors(word):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "words",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "words = set()\nwith open(\"words.txt\") as f:\n    for w in f:\n        w = w.strip().lower()\n        words.add(w)\n# create function to get all the neighbors of a word ( only 1 letter diff)\ndef get_neighbors(word):\n    neighbors = []\n    for w in words:\n        if len(w) == len(word):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "root = [10, 5, 15, 3, 7, null, 18]\nlower = 7\nupper = 15\n         10\n         / \\\n        5  15\n       / \\    \\\n      3   7    18\nOutput:\n32",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "lower",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "lower = 7\nupper = 15\n         10\n         / \\\n        5  15\n       / \\    \\\n      3   7    18\nOutput:\n32\nExample 2:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "upper",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "upper = 15\n         10\n         / \\\n        5  15\n       / \\    \\\n      3   7    18\nOutput:\n32\nExample 2:\nInput:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "root = [10,5,15,3,7,13,18,1,null,6]\nlower = 6\nupper = 10\n           10\n          /  \\\n       5       15\n     / \\     /   \\ \n    3   7  13   18\n   /   /\n  1   6",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "lower",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "lower = 6\nupper = 10\n           10\n          /  \\\n       5       15\n     / \\     /   \\ \n    3   7  13   18\n   /   /\n  1   6\nOutput:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "upper",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "upper = 10\n           10\n          /  \\\n       5       15\n     / \\     /   \\ \n    3   7  13   18\n   /   /\n  1   6\nOutput:\n23",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "root = [10, 5, 15, 3, 7, None, 18]\nlower = 7\nupper = 15\n#\n# Binary trees are already defined with this interface:\n# class Tree(object):\n#   def __init__(self, x):\n#     self.value = x\n#     self.left = None\n#     self.right = None",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "lower",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "lower = 7\nupper = 15\n#\n# Binary trees are already defined with this interface:\n# class Tree(object):\n#   def __init__(self, x):\n#     self.value = x\n#     self.left = None\n#     self.right = None\n#",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "upper",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "upper = 15\n#\n# Binary trees are already defined with this interface:\n# class Tree(object):\n#   def __init__(self, x):\n#     self.value = x\n#     self.left = None\n#     self.right = None\n#\n# Binary trees are already defined with this interface:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "nums",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "nums = [1, 3, 2, 3, 1]\nprint(f\"reversePairs(nums): {reversePairs(nums)}\")\n\"\"\"\n958. Check Completeness of a Binary Tree\nMedium\n1072\n14\nAdd to List\nShare\nGiven the root of a binary tree, determine if it is a complete binary tree.",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "class ListNode:\n    def __init__(self, key, value):\n        self.key = key\n        self.value = value\n        self.next = None\nclass MyHashTable:\n    def __init__(self):\n        # Your code here\n        self.size = 10\n        self.keys = [None] * self.size",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "MyHashTable",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "class MyHashTable:\n    def __init__(self):\n        # Your code here\n        self.size = 10\n        self.keys = [None] * self.size\n        self.values = [None] * self.size\n        self.item_count = 0\n    def djb2(self, key):\n        str_key = str(key).encode()\n        hash_value = 5381",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "are_words_sorted",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "def are_words_sorted(words, alpha_order):\n    \"\"\"\n    Inputs:\n    words: List[str]\n    alpha_order: str\n    Output:\n    bool\n    \"\"\"\n    # Your code here\n    # map the letters of the string alpha_order to a dictionary",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "csFindTheSingleNumber",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "def csFindTheSingleNumber(nums):\n    appearances = {}\n    # hash the list into a dict with the number of appearances being the value\n    # and the number itself as the key\n    for num in nums:\n        if num in appearances:\n            appearances[num] += 1\n        else:\n            appearances[num] = 1\n    # return the key with the value of 1",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "csAverageOfTopFive",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "def csAverageOfTopFive(scores):\n    students_scores = {}\n    # create a dict with each student as the key and an array of their scores\n    # as the value\n    for score in scores:\n        student = score[0]\n        num = score[1]\n        if student in students_scores:\n            students_scores[student].append(num)\n        else:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "csMaxNumberOfLambdas",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "def csMaxNumberOfLambdas(text):\n    # create dict to hold number of times letters in lambda appear\n    # (the letter 'a' will need to be twice the amount of other letters for\n    # each valid lambda)\n    lambdas = {\"l\": 0, \"a\": 0, \"m\": 0, \"b\": 0, \"d\": 0}\n    # get number count for valid letters from \"text\"\n    for letter in text:\n        if letter in lambdas:\n            lambdas[letter] += 1\n    minimum_letter = lambdas['l']",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "top_k_frequent",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "def top_k_frequent(words, k):\n    \"\"\"\n    Input:\n    words -> List[str]\n    k -> int\n    Output:\n    List[str]\n    \"\"\"\n    # create dict to hold words frequencies\n    word_freqs = {}",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "frequency_sort",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "def frequency_sort(s: str) -> str:\n    \"\"\"\n    Inputs:\n    s -> str\n    Output:\n    str\n    \"\"\"\n    letter_freq = {}\n    for char in s:\n        if char not in letter_freq:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "csIsomorphicStrings",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "def csIsomorphicStrings(a, b):\n    if len(set(a)) == len(set(b)):\n        return True\n    return False\n# print(csIsomorphicStrings(a, b))\n\"\"\"\n*** csWordPattern ***\n---------------------\nGiven a pattern and a string a, find if a follows the same pattern.\nHere, to \"follow\" means a full match, such that there is a one-to-one correspondence between a letter in pattern and a non-empty word in s.",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "csWordPattern",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "def csWordPattern(pattern, a):\n    word_arr = a.split(' ')\n    if len(pattern) != len(word_arr):\n        return False\n    pattern_map = {}\n    for i in range(len(pattern)):\n        if pattern[i] not in pattern_map:\n            if word_arr[i] not in pattern_map.values():\n                pattern_map[pattern[i]] = word_arr[i]\n            else:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "csGroupAnagrams",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "def csGroupAnagrams(strs):\n    result = {}\n    for w in strs:\n        signature = ''.join(sorted(w))\n        if signature not in result:\n            result[signature] = []\n        result[signature].append(w)\n    all_results = []\n    for item in result:\n        all_results.append(result[item])",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "condense_linked_list",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "def condense_linked_list(node):\n    # keep track of seen values\n    seen_values = []\n    cur = node\n    prev = None\n    # iterate linked list from the head\n    while cur is not None:\n        print(cur.value)\n        # if current is in seen values\n        if cur.value in seen_values:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "first_not_repeating_character",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "def first_not_repeating_character(s):\n    # create hashmap of string and occurences of letters\n    # return the first key with the value of 1\n    chars = {}\n    for letter in s:\n        if letter not in chars:\n            chars[letter] = 1\n        else:\n            chars[letter] += 1\n    for key in chars:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "uncover_spy",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "def uncover_spy(n, trust):\n    # create map of people who trust\n    # return the person who trusts no one\n    trusts = {}\n    trusted = {}\n    for i in range(1, n + 1):\n        trusts[i] = []\n        trusted[i] = []\n    for group in trust:\n        if group[0] in trusts:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "hash_table",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "hash_table = MyHashTable();\nhash_table.put(\"a\", 1);\nhash_table.put(\"b\", 2);\nhash_table.get(\"a\");            // returns 1\nhash_table.get(\"c\");            // returns -1 (not found)\nhash_table.put(\"b\", 1);         // update the existing value\nhash_table.get(\"b\");            // returns 1\nhash_table.remove(\"b\");         // remove the mapping for 2\nhash_table.get(\"b\");            // returns -1 (not found)\n```",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "words",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "words = [\"lambd\", \"school\"]\norder = \"hlabcdefgijkmnopqrstuvwxyz\"\ndef are_words_sorted(words, alpha_order):\n    \"\"\"\n    Inputs:\n    words: List[str]\n    alpha_order: str\n    Output:\n    bool\n    \"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "order",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "order = \"hlabcdefgijkmnopqrstuvwxyz\"\ndef are_words_sorted(words, alpha_order):\n    \"\"\"\n    Inputs:\n    words: List[str]\n    alpha_order: str\n    Output:\n    bool\n    \"\"\"\n    # Your code here",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "nums",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "nums = [1, 1, 2, 1]\ndef csFindTheSingleNumber(nums):\n    appearances = {}\n    # hash the list into a dict with the number of appearances being the value\n    # and the number itself as the key\n    for num in nums:\n        if num in appearances:\n            appearances[num] += 1\n        else:\n            appearances[num] = 1",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "scores",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "scores = [[1, 91], [1, 92], [2, 93], [2, 97], [1, 60], [2, 77], [1, 65],\n          [1, 87], [1, 100], [2, 100], [2, 76]]\ndef csAverageOfTopFive(scores):\n    students_scores = {}\n    # create a dict with each student as the key and an array of their scores\n    # as the value\n    for score in scores:\n        student = score[0]\n        num = score[1]\n        if student in students_scores:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "text",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "text = \"mbxcdatllaas\"\n# text = \"sctlamb\"\n# text = \"lalaaxcmbdtsumbdav\"\ndef csMaxNumberOfLambdas(text):\n    # create dict to hold number of times letters in lambda appear\n    # (the letter 'a' will need to be twice the amount of other letters for\n    # each valid lambda)\n    lambdas = {\"l\": 0, \"a\": 0, \"m\": 0, \"b\": 0, \"d\": 0}\n    # get number count for valid letters from \"text\"\n    for letter in text:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "words",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "words = [\"lambda\", \"school\", \"rules\", \"lambda\", \"school\", \"rocks\"]\nk = 2\nOutput:\n[\"lambda\", \"school\"]\nExplanation:\n\"lambda\" and \"school\" are the two most frequent words.\n```\nExample 2:\n```plaintext\nInput:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "k = 2\nOutput:\n[\"lambda\", \"school\"]\nExplanation:\n\"lambda\" and \"school\" are the two most frequent words.\n```\nExample 2:\n```plaintext\nInput:\nwords = [\"the\", \"sky\", \"is\", \"cloudy\", \"the\", \"the\", \"the\", \"cloudy\", \"is\", \"is\"]",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "words",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "words = [\"the\", \"sky\", \"is\", \"cloudy\", \"the\", \"the\", \"the\", \"cloudy\", \"is\", \"is\"]\nk = 4\nOutput:\n[\"the\", \"is\", \"cloudy\", \"sky\"]\nExplanation:\n\"the\", \"is\", \"cloudy\", and \"sky\" are the four most frequent words. The words\nare sorted from highest frequency to lowest.\n```\nNotes:\n- `k` is always valid: `1 <= k <= number of unique elements.",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "k = 4\nOutput:\n[\"the\", \"is\", \"cloudy\", \"sky\"]\nExplanation:\n\"the\", \"is\", \"cloudy\", and \"sky\" are the four most frequent words. The words\nare sorted from highest frequency to lowest.\n```\nNotes:\n- `k` is always valid: `1 <= k <= number of unique elements.\n- words in the input list only contain lowercase letters.",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "words",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "words = [\"the\", \"sky\", \"is\", \"cloudy\", \"the\", \"the\", \"the\", \"cloudy\", \"is\",\n         \"is\"]\nk = 4\nwords = [\"lambda\", \"school\", \"rules\", \"lambda\", \"school\", \"rocks\"]\nk = 2\ndef top_k_frequent(words, k):\n    \"\"\"\n    Input:\n    words -> List[str]\n    k -> int",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "k = 4\nwords = [\"lambda\", \"school\", \"rules\", \"lambda\", \"school\", \"rocks\"]\nk = 2\ndef top_k_frequent(words, k):\n    \"\"\"\n    Input:\n    words -> List[str]\n    k -> int\n    Output:\n    List[str]",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "words",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "words = [\"lambda\", \"school\", \"rules\", \"lambda\", \"school\", \"rocks\"]\nk = 2\ndef top_k_frequent(words, k):\n    \"\"\"\n    Input:\n    words -> List[str]\n    k -> int\n    Output:\n    List[str]\n    \"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "k = 2\ndef top_k_frequent(words, k):\n    \"\"\"\n    Input:\n    words -> List[str]\n    k -> int\n    Output:\n    List[str]\n    \"\"\"\n    # create dict to hold words frequencies",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "s = \"Bbcc\"\ndef frequency_sort(s: str) -> str:\n    \"\"\"\n    Inputs:\n    s -> str\n    Output:\n    str\n    \"\"\"\n    letter_freq = {}\n    for char in s:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "a = \"odd\"\nb = \"egg\"\nOutput:\ntrue\nExample 2:\nInput:\na = \"foo\"\nb = \"bar\"\nOutput:\nfalse",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "b = \"egg\"\nOutput:\ntrue\nExample 2:\nInput:\na = \"foo\"\nb = \"bar\"\nOutput:\nfalse\nExample 3:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "a = \"foo\"\nb = \"bar\"\nOutput:\nfalse\nExample 3:\nInput:\na = \"abca\"\nb = \"zbxz\"\nOutput:\ntrue",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "b = \"bar\"\nOutput:\nfalse\nExample 3:\nInput:\na = \"abca\"\nb = \"zbxz\"\nOutput:\ntrue\nExample 4:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "a = \"abca\"\nb = \"zbxz\"\nOutput:\ntrue\nExample 4:\nInput:\na = \"abc\"\nb = \"\"\nOutput:\nfalse",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "b = \"zbxz\"\nOutput:\ntrue\nExample 4:\nInput:\na = \"abc\"\nb = \"\"\nOutput:\nfalse\n\"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "a = \"abc\"\nb = \"\"\nOutput:\nfalse\n\"\"\"\na = \"odd\"\nb = \"egg\"\ndef csIsomorphicStrings(a, b):\n    if len(set(a)) == len(set(b)):\n        return True",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "b = \"\"\nOutput:\nfalse\n\"\"\"\na = \"odd\"\nb = \"egg\"\ndef csIsomorphicStrings(a, b):\n    if len(set(a)) == len(set(b)):\n        return True\n    return False",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "a = \"odd\"\nb = \"egg\"\ndef csIsomorphicStrings(a, b):\n    if len(set(a)) == len(set(b)):\n        return True\n    return False\n# print(csIsomorphicStrings(a, b))\n\"\"\"\n*** csWordPattern ***\n---------------------",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "b = \"egg\"\ndef csIsomorphicStrings(a, b):\n    if len(set(a)) == len(set(b)):\n        return True\n    return False\n# print(csIsomorphicStrings(a, b))\n\"\"\"\n*** csWordPattern ***\n---------------------\nGiven a pattern and a string a, find if a follows the same pattern.",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "pattern",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "pattern = \"abba\"\na = \"lambda school school lambda\"\nOutput: true\nExample 2:\nInput:\npattern = \"abba\"\na = \"lambda school school coding\"\nOutput:\nfalse\nExample 3:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "a = \"lambda school school lambda\"\nOutput: true\nExample 2:\nInput:\npattern = \"abba\"\na = \"lambda school school coding\"\nOutput:\nfalse\nExample 3:\nInput:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "pattern",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "pattern = \"abba\"\na = \"lambda school school coding\"\nOutput:\nfalse\nExample 3:\nInput:\npattern = \"aaaa\"\na = \"lambda school school lambda\"\nOutput: false\nExample 4:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "a = \"lambda school school coding\"\nOutput:\nfalse\nExample 3:\nInput:\npattern = \"aaaa\"\na = \"lambda school school lambda\"\nOutput: false\nExample 4:\nInput:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "pattern",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "pattern = \"aaaa\"\na = \"lambda school school lambda\"\nOutput: false\nExample 4:\nInput:\npattern = \"abba\"\na = \"lambda lambda lambda lambda\"\nOutput: false\n\"\"\"\npattern = \"abba\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "a = \"lambda school school lambda\"\nOutput: false\nExample 4:\nInput:\npattern = \"abba\"\na = \"lambda lambda lambda lambda\"\nOutput: false\n\"\"\"\npattern = \"abba\"\na = \"lambda school school lambda\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "pattern",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "pattern = \"abba\"\na = \"lambda lambda lambda lambda\"\nOutput: false\n\"\"\"\npattern = \"abba\"\na = \"lambda school school lambda\"\n# pattern = \"abba\"\n# a = \"lambda lambda lambda lambda\"\n# pattern = \"aaaa\"\n# a = \"lambda school school lambda\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "a = \"lambda lambda lambda lambda\"\nOutput: false\n\"\"\"\npattern = \"abba\"\na = \"lambda school school lambda\"\n# pattern = \"abba\"\n# a = \"lambda lambda lambda lambda\"\n# pattern = \"aaaa\"\n# a = \"lambda school school lambda\"\ndef csWordPattern(pattern, a):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "pattern",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "pattern = \"abba\"\na = \"lambda school school lambda\"\n# pattern = \"abba\"\n# a = \"lambda lambda lambda lambda\"\n# pattern = \"aaaa\"\n# a = \"lambda school school lambda\"\ndef csWordPattern(pattern, a):\n    word_arr = a.split(' ')\n    if len(pattern) != len(word_arr):\n        return False",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "a = \"lambda school school lambda\"\n# pattern = \"abba\"\n# a = \"lambda lambda lambda lambda\"\n# pattern = \"aaaa\"\n# a = \"lambda school school lambda\"\ndef csWordPattern(pattern, a):\n    word_arr = a.split(' ')\n    if len(pattern) != len(word_arr):\n        return False\n    pattern_map = {}",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "strs",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "strs = [\"apt\",\"pat\",\"ear\",\"tap\",\"are\",\"arm\"]\nOutput:\n[[\"apt\",\"pat\",\"tap\"],[\"ear\",\"are\"],[\"arm\"]]\nExample 2:\nInput:\nstrs = [\"\"]\nOutput:\n[[\"\"]]\nExample 3:\nInput:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "strs",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "strs = [\"\"]\nOutput:\n[[\"\"]]\nExample 3:\nInput:\nstrs = [\"a\"]\nOutput:\n[[\"a\"]]\n\"\"\"\nstrs = [\"apt\", \"pat\", \"ear\", \"tap\", \"are\", \"arm\"]",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "strs",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "strs = [\"a\"]\nOutput:\n[[\"a\"]]\n\"\"\"\nstrs = [\"apt\", \"pat\", \"ear\", \"tap\", \"are\", \"arm\"]\ndef csGroupAnagrams(strs):\n    result = {}\n    for w in strs:\n        signature = ''.join(sorted(w))\n        if signature not in result:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "strs",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "strs = [\"apt\", \"pat\", \"ear\", \"tap\", \"are\", \"arm\"]\ndef csGroupAnagrams(strs):\n    result = {}\n    for w in strs:\n        signature = ''.join(sorted(w))\n        if signature not in result:\n            result[signature] = []\n        result[signature].append(w)\n    all_results = []\n    for item in result:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "first_not_repeating_character(s)",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "first_not_repeating_character(s) = 'c'.\nThere are 2 non-repeating characters in the string: 'c' and 'd'. Return c since it appears in the string first.\nFor s = \"abacabaabacaba\", the output should be\nfirst_not_repeating_character(s) = '_'.\nThere are no characters in this string that do not repeat.\n[execution time limit] 4 seconds (py3)\n[input] string s\nA string that contains only lowercase English letters.\n[output] char\nThe first non-repeating character in s of '_' if there are no characters that do not repeat.",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "first_not_repeating_character(s)",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "first_not_repeating_character(s) = '_'.\nThere are no characters in this string that do not repeat.\n[execution time limit] 4 seconds (py3)\n[input] string s\nA string that contains only lowercase English letters.\n[output] char\nThe first non-repeating character in s of '_' if there are no characters that do not repeat.\n\"\"\"\ns = \"abacabad\"\ndef first_not_repeating_character(s):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "s = \"abacabad\"\ndef first_not_repeating_character(s):\n    # create hashmap of string and occurences of letters\n    # return the first key with the value of 1\n    chars = {}\n    for letter in s:\n        if letter not in chars:\n            chars[letter] = 1\n        else:\n            chars[letter] += 1",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "n = 3\ntrust = [[1,2],\n [2,3]]\nn = 4\ntrust = [[1, 3],[1, 4],[2, 3],[2, 4],[4, 3]]\ndef uncover_spy(n, trust):\n    # create map of people who trust\n    # return the person who trusts no one\n    trusts = {}\n    trusted = {}",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "trust",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "trust = [[1,2],\n [2,3]]\nn = 4\ntrust = [[1, 3],[1, 4],[2, 3],[2, 4],[4, 3]]\ndef uncover_spy(n, trust):\n    # create map of people who trust\n    # return the person who trusts no one\n    trusts = {}\n    trusted = {}\n    for i in range(1, n + 1):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "n = 4\ntrust = [[1, 3],[1, 4],[2, 3],[2, 4],[4, 3]]\ndef uncover_spy(n, trust):\n    # create map of people who trust\n    # return the person who trusts no one\n    trusts = {}\n    trusted = {}\n    for i in range(1, n + 1):\n        trusts[i] = []\n        trusted[i] = []",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "trust",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "trust = [[1, 3],[1, 4],[2, 3],[2, 4],[4, 3]]\ndef uncover_spy(n, trust):\n    # create map of people who trust\n    # return the person who trusts no one\n    trusts = {}\n    trusted = {}\n    for i in range(1, n + 1):\n        trusts[i] = []\n        trusted[i] = []\n    for group in trust:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "class ListNode:\n    def __init__(self, key, value):\n        self.key = key\n        self.value = value\n        self.next = None\nclass MyHashTable:\n    def __init__(self):\n        # Your code here\n        self.size = 10\n        self.keys = [None] * self.size",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "MyHashTable",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "class MyHashTable:\n    def __init__(self):\n        # Your code here\n        self.size = 10\n        self.keys = [None] * self.size\n        self.values = [None] * self.size\n        self.item_count = 0\n    def djb2(self, key):\n        str_key = str(key).encode()\n        hash_value = 5381",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "are_words_sorted",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "def are_words_sorted(words, alpha_order):\n    \"\"\"\n    Inputs:\n    words: List[str]\n    alpha_order: str\n    Output:\n    bool\n    \"\"\"\n    # Your code here\n    # map the letters of the string alpha_order to a dictionary",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "csFindTheSingleNumber",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "def csFindTheSingleNumber(nums):\n    appearances = {}\n    # hash the list into a dict with the number of appearances being the value\n    # and the number itself as the key\n    for num in nums:\n        if num in appearances:\n            appearances[num] += 1\n        else:\n            appearances[num] = 1\n    # return the key with the value of 1",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "csAverageOfTopFive",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "def csAverageOfTopFive(scores):\n    students_scores = {}\n    # create a dict with each student as the key and an array of their scores\n    # as the value\n    for score in scores:\n        student = score[0]\n        num = score[1]\n        if student in students_scores:\n            students_scores[student].append(num)\n        else:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "csMaxNumberOfLambdas",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "def csMaxNumberOfLambdas(text):\n    # create dict to hold number of times letters in lambda appear\n    # (the letter 'a' will need to be twice the amount of other letters for\n    # each valid lambda)\n    lambdas = {\"l\": 0, \"a\": 0, \"m\": 0, \"b\": 0, \"d\": 0}\n    # get number count for valid letters from \"text\"\n    for letter in text:\n        if letter in lambdas:\n            lambdas[letter] += 1\n    minimum_letter = lambdas[\"l\"]",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "top_k_frequent",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "def top_k_frequent(words, k):\n    \"\"\"\n    Input:\n    words -> List[str]\n    k -> int\n    Output:\n    List[str]\n    \"\"\"\n    # create dict to hold words frequencies\n    word_freqs = {}",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "frequency_sort",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "def frequency_sort(s: str) -> str:\n    \"\"\"\n    Inputs:\n    s -> str\n    Output:\n    str\n    \"\"\"\n    letter_freq = {}\n    for char in s:\n        if char not in letter_freq:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "csIsomorphicStrings",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "def csIsomorphicStrings(a, b):\n    if len(set(a)) == len(set(b)):\n        return True\n    return False\n# print(csIsomorphicStrings(a, b))\n\"\"\"\n*** csWordPattern ***\n---------------------\nGiven a pattern and a string a, find if a follows the same pattern.\nHere, to \"follow\" means a full match, such that there is a one-to-one correspondence between a letter in pattern and a non-empty word in s.",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "csWordPattern",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "def csWordPattern(pattern, a):\n    word_arr = a.split(\" \")\n    if len(pattern) != len(word_arr):\n        return False\n    pattern_map = {}\n    for i in range(len(pattern)):\n        if pattern[i] not in pattern_map:\n            if word_arr[i] not in pattern_map.values():\n                pattern_map[pattern[i]] = word_arr[i]\n            else:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "csGroupAnagrams",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "def csGroupAnagrams(strs):\n    result = {}\n    for w in strs:\n        signature = \"\".join(sorted(w))\n        if signature not in result:\n            result[signature] = []\n        result[signature].append(w)\n    all_results = []\n    for item in result:\n        all_results.append(result[item])",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "condense_linked_list",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "def condense_linked_list(node):\n    # keep track of seen values\n    seen_values = []\n    cur = node\n    prev = None\n    # iterate linked list from the head\n    while cur is not None:\n        print(cur.value)\n        # if current is in seen values\n        if cur.value in seen_values:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "first_not_repeating_character",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "def first_not_repeating_character(s):\n    # create hashmap of string and occurences of letters\n    # return the first key with the value of 1\n    chars = {}\n    for letter in s:\n        if letter not in chars:\n            chars[letter] = 1\n        else:\n            chars[letter] += 1\n    for key in chars:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "uncover_spy",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "def uncover_spy(n, trust):\n    # create map of people who trust\n    # return the person who trusts no one\n    trusts = {}\n    trusted = {}\n    for i in range(1, n + 1):\n        trusts[i] = []\n        trusted[i] = []\n    for group in trust:\n        if group[0] in trusts:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "hash_table",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "hash_table = MyHashTable();\nhash_table.put(\"a\", 1);\nhash_table.put(\"b\", 2);\nhash_table.get(\"a\");            // returns 1\nhash_table.get(\"c\");            // returns -1 (not found)\nhash_table.put(\"b\", 1);         // update the existing value\nhash_table.get(\"b\");            // returns 1\nhash_table.remove(\"b\");         // remove the mapping for 2\nhash_table.get(\"b\");            // returns -1 (not found)\n```",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "words",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "words = [\"lambd\", \"school\"]\norder = \"hlabcdefgijkmnopqrstuvwxyz\"\ndef are_words_sorted(words, alpha_order):\n    \"\"\"\n    Inputs:\n    words: List[str]\n    alpha_order: str\n    Output:\n    bool\n    \"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "order",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "order = \"hlabcdefgijkmnopqrstuvwxyz\"\ndef are_words_sorted(words, alpha_order):\n    \"\"\"\n    Inputs:\n    words: List[str]\n    alpha_order: str\n    Output:\n    bool\n    \"\"\"\n    # Your code here",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "nums",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "nums = [1, 1, 2, 1]\ndef csFindTheSingleNumber(nums):\n    appearances = {}\n    # hash the list into a dict with the number of appearances being the value\n    # and the number itself as the key\n    for num in nums:\n        if num in appearances:\n            appearances[num] += 1\n        else:\n            appearances[num] = 1",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "scores",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "scores = [\n    [1, 91],\n    [1, 92],\n    [2, 93],\n    [2, 97],\n    [1, 60],\n    [2, 77],\n    [1, 65],\n    [1, 87],\n    [1, 100],",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "text",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "text = \"mbxcdatllaas\"\n# text = \"sctlamb\"\n# text = \"lalaaxcmbdtsumbdav\"\ndef csMaxNumberOfLambdas(text):\n    # create dict to hold number of times letters in lambda appear\n    # (the letter 'a' will need to be twice the amount of other letters for\n    # each valid lambda)\n    lambdas = {\"l\": 0, \"a\": 0, \"m\": 0, \"b\": 0, \"d\": 0}\n    # get number count for valid letters from \"text\"\n    for letter in text:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "words",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "words = [\"lambda\", \"school\", \"rules\", \"lambda\", \"school\", \"rocks\"]\nk = 2\nOutput:\n[\"lambda\", \"school\"]\nExplanation:\n\"lambda\" and \"school\" are the two most frequent words.\n```\nExample 2:\n```plaintext\nInput:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "k = 2\nOutput:\n[\"lambda\", \"school\"]\nExplanation:\n\"lambda\" and \"school\" are the two most frequent words.\n```\nExample 2:\n```plaintext\nInput:\nwords = [\"the\", \"sky\", \"is\", \"cloudy\", \"the\", \"the\", \"the\", \"cloudy\", \"is\", \"is\"]",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "words",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "words = [\"the\", \"sky\", \"is\", \"cloudy\", \"the\", \"the\", \"the\", \"cloudy\", \"is\", \"is\"]\nk = 4\nOutput:\n[\"the\", \"is\", \"cloudy\", \"sky\"]\nExplanation:\n\"the\", \"is\", \"cloudy\", and \"sky\" are the four most frequent words. The words\nare sorted from highest frequency to lowest.\n```\nNotes:\n- `k` is always valid: `1 <= k <= number of unique elements.",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "k = 4\nOutput:\n[\"the\", \"is\", \"cloudy\", \"sky\"]\nExplanation:\n\"the\", \"is\", \"cloudy\", and \"sky\" are the four most frequent words. The words\nare sorted from highest frequency to lowest.\n```\nNotes:\n- `k` is always valid: `1 <= k <= number of unique elements.\n- words in the input list only contain lowercase letters.",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "words",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "words = [\"the\", \"sky\", \"is\", \"cloudy\", \"the\", \"the\", \"the\", \"cloudy\", \"is\", \"is\"]\nk = 4\nwords = [\"lambda\", \"school\", \"rules\", \"lambda\", \"school\", \"rocks\"]\nk = 2\ndef top_k_frequent(words, k):\n    \"\"\"\n    Input:\n    words -> List[str]\n    k -> int\n    Output:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "k = 4\nwords = [\"lambda\", \"school\", \"rules\", \"lambda\", \"school\", \"rocks\"]\nk = 2\ndef top_k_frequent(words, k):\n    \"\"\"\n    Input:\n    words -> List[str]\n    k -> int\n    Output:\n    List[str]",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "words",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "words = [\"lambda\", \"school\", \"rules\", \"lambda\", \"school\", \"rocks\"]\nk = 2\ndef top_k_frequent(words, k):\n    \"\"\"\n    Input:\n    words -> List[str]\n    k -> int\n    Output:\n    List[str]\n    \"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "k = 2\ndef top_k_frequent(words, k):\n    \"\"\"\n    Input:\n    words -> List[str]\n    k -> int\n    Output:\n    List[str]\n    \"\"\"\n    # create dict to hold words frequencies",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "s = \"Bbcc\"\ndef frequency_sort(s: str) -> str:\n    \"\"\"\n    Inputs:\n    s -> str\n    Output:\n    str\n    \"\"\"\n    letter_freq = {}\n    for char in s:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "a = \"odd\"\nb = \"egg\"\nOutput:\ntrue\nExample 2:\nInput:\na = \"foo\"\nb = \"bar\"\nOutput:\nfalse",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "b = \"egg\"\nOutput:\ntrue\nExample 2:\nInput:\na = \"foo\"\nb = \"bar\"\nOutput:\nfalse\nExample 3:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "a = \"foo\"\nb = \"bar\"\nOutput:\nfalse\nExample 3:\nInput:\na = \"abca\"\nb = \"zbxz\"\nOutput:\ntrue",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "b = \"bar\"\nOutput:\nfalse\nExample 3:\nInput:\na = \"abca\"\nb = \"zbxz\"\nOutput:\ntrue\nExample 4:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "a = \"abca\"\nb = \"zbxz\"\nOutput:\ntrue\nExample 4:\nInput:\na = \"abc\"\nb = \"\"\nOutput:\nfalse",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "b = \"zbxz\"\nOutput:\ntrue\nExample 4:\nInput:\na = \"abc\"\nb = \"\"\nOutput:\nfalse\n\"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "a = \"abc\"\nb = \"\"\nOutput:\nfalse\n\"\"\"\na = \"odd\"\nb = \"egg\"\ndef csIsomorphicStrings(a, b):\n    if len(set(a)) == len(set(b)):\n        return True",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "b = \"\"\nOutput:\nfalse\n\"\"\"\na = \"odd\"\nb = \"egg\"\ndef csIsomorphicStrings(a, b):\n    if len(set(a)) == len(set(b)):\n        return True\n    return False",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "a = \"odd\"\nb = \"egg\"\ndef csIsomorphicStrings(a, b):\n    if len(set(a)) == len(set(b)):\n        return True\n    return False\n# print(csIsomorphicStrings(a, b))\n\"\"\"\n*** csWordPattern ***\n---------------------",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "b = \"egg\"\ndef csIsomorphicStrings(a, b):\n    if len(set(a)) == len(set(b)):\n        return True\n    return False\n# print(csIsomorphicStrings(a, b))\n\"\"\"\n*** csWordPattern ***\n---------------------\nGiven a pattern and a string a, find if a follows the same pattern.",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "pattern",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "pattern = \"abba\"\na = \"lambda school school lambda\"\nOutput: true\nExample 2:\nInput:\npattern = \"abba\"\na = \"lambda school school coding\"\nOutput:\nfalse\nExample 3:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "a = \"lambda school school lambda\"\nOutput: true\nExample 2:\nInput:\npattern = \"abba\"\na = \"lambda school school coding\"\nOutput:\nfalse\nExample 3:\nInput:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "pattern",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "pattern = \"abba\"\na = \"lambda school school coding\"\nOutput:\nfalse\nExample 3:\nInput:\npattern = \"aaaa\"\na = \"lambda school school lambda\"\nOutput: false\nExample 4:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "a = \"lambda school school coding\"\nOutput:\nfalse\nExample 3:\nInput:\npattern = \"aaaa\"\na = \"lambda school school lambda\"\nOutput: false\nExample 4:\nInput:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "pattern",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "pattern = \"aaaa\"\na = \"lambda school school lambda\"\nOutput: false\nExample 4:\nInput:\npattern = \"abba\"\na = \"lambda lambda lambda lambda\"\nOutput: false\n\"\"\"\npattern = \"abba\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "a = \"lambda school school lambda\"\nOutput: false\nExample 4:\nInput:\npattern = \"abba\"\na = \"lambda lambda lambda lambda\"\nOutput: false\n\"\"\"\npattern = \"abba\"\na = \"lambda school school lambda\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "pattern",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "pattern = \"abba\"\na = \"lambda lambda lambda lambda\"\nOutput: false\n\"\"\"\npattern = \"abba\"\na = \"lambda school school lambda\"\n# pattern = \"abba\"\n# a = \"lambda lambda lambda lambda\"\n# pattern = \"aaaa\"\n# a = \"lambda school school lambda\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "a = \"lambda lambda lambda lambda\"\nOutput: false\n\"\"\"\npattern = \"abba\"\na = \"lambda school school lambda\"\n# pattern = \"abba\"\n# a = \"lambda lambda lambda lambda\"\n# pattern = \"aaaa\"\n# a = \"lambda school school lambda\"\ndef csWordPattern(pattern, a):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "pattern",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "pattern = \"abba\"\na = \"lambda school school lambda\"\n# pattern = \"abba\"\n# a = \"lambda lambda lambda lambda\"\n# pattern = \"aaaa\"\n# a = \"lambda school school lambda\"\ndef csWordPattern(pattern, a):\n    word_arr = a.split(\" \")\n    if len(pattern) != len(word_arr):\n        return False",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "a = \"lambda school school lambda\"\n# pattern = \"abba\"\n# a = \"lambda lambda lambda lambda\"\n# pattern = \"aaaa\"\n# a = \"lambda school school lambda\"\ndef csWordPattern(pattern, a):\n    word_arr = a.split(\" \")\n    if len(pattern) != len(word_arr):\n        return False\n    pattern_map = {}",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "strs",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "strs = [\"apt\",\"pat\",\"ear\",\"tap\",\"are\",\"arm\"]\nOutput:\n[[\"apt\",\"pat\",\"tap\"],[\"ear\",\"are\"],[\"arm\"]]\nExample 2:\nInput:\nstrs = [\"\"]\nOutput:\n[[\"\"]]\nExample 3:\nInput:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "strs",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "strs = [\"\"]\nOutput:\n[[\"\"]]\nExample 3:\nInput:\nstrs = [\"a\"]\nOutput:\n[[\"a\"]]\n\"\"\"\nstrs = [\"apt\", \"pat\", \"ear\", \"tap\", \"are\", \"arm\"]",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "strs",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "strs = [\"a\"]\nOutput:\n[[\"a\"]]\n\"\"\"\nstrs = [\"apt\", \"pat\", \"ear\", \"tap\", \"are\", \"arm\"]\ndef csGroupAnagrams(strs):\n    result = {}\n    for w in strs:\n        signature = \"\".join(sorted(w))\n        if signature not in result:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "strs",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "strs = [\"apt\", \"pat\", \"ear\", \"tap\", \"are\", \"arm\"]\ndef csGroupAnagrams(strs):\n    result = {}\n    for w in strs:\n        signature = \"\".join(sorted(w))\n        if signature not in result:\n            result[signature] = []\n        result[signature].append(w)\n    all_results = []\n    for item in result:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "first_not_repeating_character(s)",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "first_not_repeating_character(s) = 'c'.\nThere are 2 non-repeating characters in the string: 'c' and 'd'. Return c since it appears in the string first.\nFor s = \"abacabaabacaba\", the output should be\nfirst_not_repeating_character(s) = '_'.\nThere are no characters in this string that do not repeat.\n[execution time limit] 4 seconds (py3)\n[input] string s\nA string that contains only lowercase English letters.\n[output] char\nThe first non-repeating character in s of '_' if there are no characters that do not repeat.",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "first_not_repeating_character(s)",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "first_not_repeating_character(s) = '_'.\nThere are no characters in this string that do not repeat.\n[execution time limit] 4 seconds (py3)\n[input] string s\nA string that contains only lowercase English letters.\n[output] char\nThe first non-repeating character in s of '_' if there are no characters that do not repeat.\n\"\"\"\ns = \"abacabad\"\ndef first_not_repeating_character(s):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "s = \"abacabad\"\ndef first_not_repeating_character(s):\n    # create hashmap of string and occurences of letters\n    # return the first key with the value of 1\n    chars = {}\n    for letter in s:\n        if letter not in chars:\n            chars[letter] = 1\n        else:\n            chars[letter] += 1",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "n = 3\ntrust = [[1, 2], [2, 3]]\nn = 4\ntrust = [[1, 3], [1, 4], [2, 3], [2, 4], [4, 3]]\ndef uncover_spy(n, trust):\n    # create map of people who trust\n    # return the person who trusts no one\n    trusts = {}\n    trusted = {}\n    for i in range(1, n + 1):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "trust",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "trust = [[1, 2], [2, 3]]\nn = 4\ntrust = [[1, 3], [1, 4], [2, 3], [2, 4], [4, 3]]\ndef uncover_spy(n, trust):\n    # create map of people who trust\n    # return the person who trusts no one\n    trusts = {}\n    trusted = {}\n    for i in range(1, n + 1):\n        trusts[i] = []",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "n = 4\ntrust = [[1, 3], [1, 4], [2, 3], [2, 4], [4, 3]]\ndef uncover_spy(n, trust):\n    # create map of people who trust\n    # return the person who trusts no one\n    trusts = {}\n    trusted = {}\n    for i in range(1, n + 1):\n        trusts[i] = []\n        trusted[i] = []",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "trust",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "trust = [[1, 3], [1, 4], [2, 3], [2, 4], [4, 3]]\ndef uncover_spy(n, trust):\n    # create map of people who trust\n    # return the person who trusts no one\n    trusts = {}\n    trusted = {}\n    for i in range(1, n + 1):\n        trusts[i] = []\n        trusted[i] = []\n    for group in trust:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "dfs_components_grid",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.dfs_components_grid",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.dfs_components_grid",
        "peekOfCode": "def dfs_components_grid(\n    grid: Sequence[Sequence[int]]\n) -> Iterable[set[tuple[int, int]]]:\n    \"\"\"On a grid of 0s and 1s, find all the components of 1s.\"\"\"\n    unseen = {(r, c) for r, row in enumerate(grid) for c, n in enumerate(row) if n}\n    while unseen:\n        start = unseen.pop()\n        component = {start}\n        to_visit = [start]\n        while to_visit:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.dfs_components_grid",
        "documentation": {}
    },
    {
        "label": "dfs_component_dict",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.dfs_component_dict (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.dfs_component_dict (1)",
        "peekOfCode": "def dfs_component_dict(graph: Mapping[Node, Set[Node]], start: Node) -> Iterable[Node]:\n    \"\"\"Find all the nodes connected to the starting node, using DFS on a dict.\"\"\"\n    component = {start}\n    to_visit = [start]\n    while to_visit:\n        node = to_visit.pop()\n        new_nodes = graph[node] - component\n        to_visit.extend(new_nodes)\n        component |= new_nodes\n        yield node",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.dfs_component_dict (1)",
        "documentation": {}
    },
    {
        "label": "dfs_component_dict",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.dfs_component_dict (2)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.dfs_component_dict (2)",
        "peekOfCode": "def dfs_component_dict(graph: Mapping[Node, Set[Node]], start: Node) -> Iterable[Node]:\n    \"\"\"Find all the nodes connected to the starting node, using DFS on a dict.\"\"\"\n    component = {start}\n    to_visit = [start]\n    while to_visit:\n        node = to_visit.pop()\n        new_nodes = graph[node] - component\n        to_visit.extend(new_nodes)\n        component |= new_nodes\n        yield node",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.dfs_component_dict (2)",
        "documentation": {}
    },
    {
        "label": "dfs_component_dict",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.dfs_component_dict",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.dfs_component_dict",
        "peekOfCode": "def dfs_component_dict(graph: Mapping[Node, Set[Node]], start: Node) -> Iterable[Node]:\n    \"\"\"Find all the nodes connected to the starting node, using DFS on a dict.\"\"\"\n    component = {start}\n    to_visit = [start]\n    while to_visit:\n        node = to_visit.pop()\n        new_nodes = graph[node] - component\n        to_visit.extend(new_nodes)\n        component |= new_nodes\n        yield node",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.dfs_component_dict",
        "documentation": {}
    },
    {
        "label": "dfs_component_dict_recur",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.dfs_component_dict_recur (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.dfs_component_dict_recur (1)",
        "peekOfCode": "def dfs_component_dict_recur(\n    graph: Mapping[Node, Set[Node]], start: Node, component: Optional[Set[Node]] = None\n) -> set[Node]:\n    \"\"\"Recursively find all the nodes connected to start.\"\"\"\n    if component is None:\n        component = set()\n    component.add(start)\n    for new_node in graph[start] - component:\n        dfs_component_dict_recur(graph, new_node, component)\n    return component",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.dfs_component_dict_recur (1)",
        "documentation": {}
    },
    {
        "label": "dfs_component_dict_recur",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.dfs_component_dict_recur",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.dfs_component_dict_recur",
        "peekOfCode": "def dfs_component_dict_recur(\n    graph: Mapping[Node, Set[Node]], start: Node, component: Optional[Set[Node]] = None\n) -> set[Node]:\n    \"\"\"Recursively find all the nodes connected to start.\"\"\"\n    if component is None:\n        component = set()\n    component.add(start)\n    for new_node in graph[start] - component:\n        dfs_component_dict_recur(graph, new_node, component)\n    return component",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.dfs_component_dict_recur",
        "documentation": {}
    },
    {
        "label": "dfs_paths_dict_recur",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.dfs_paths_dict_recur",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.dfs_paths_dict_recur",
        "peekOfCode": "def dfs_paths_dict_recur(\n    graph: Mapping[Node, set[Node]],\n    start: Node,\n    goal: Node,\n    path: Optional[list[Node]] = None,\n) -> Iterable[list[Node]]:\n    \"\"\"Find all the paths from start to goal recursively on a dict.\"\"\"\n    if path is None:\n        path = [start]\n    if start == goal:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.dfs_paths_dict_recur",
        "documentation": {}
    },
    {
        "label": "dijkstras_distances_min",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.dijkstras_distances_min (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.dijkstras_distances_min (1)",
        "peekOfCode": "def dijkstras_distances_min(\n    graph: Mapping[Node, Mapping[Node, Rational]], start: Node\n) -> dict[Node:Rational]:\n    \"\"\"Find the minimum distance from start to all connected nodes on a directed, weighted graph.\"\"\"\n    distances = dict.fromkeys(graph, inf)\n    distances[start] = 0\n    unvisited = set(graph)\n    while unvisited:\n        # Using min like this increases the time complexity compared to a priority queue, but it simplifies things.\n        node = min(unvisited, key=distances.__getitem__)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.dijkstras_distances_min (1)",
        "documentation": {}
    },
    {
        "label": "dijkstras_distances_min",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.dijkstras_distances_min",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.dijkstras_distances_min",
        "peekOfCode": "def dijkstras_distances_min(\n    graph: Mapping[Node, Mapping[Node, Rational]], start: Node\n) -> dict[Node:Rational]:\n    \"\"\"Find the minimum distance from start to all connected nodes on a directed, weighted graph.\"\"\"\n    distances = dict.fromkeys(graph, inf)\n    distances[start] = 0\n    unvisited = set(graph)\n    while unvisited:\n        # Using min like this increases the time complexity compared to a priority queue, but it simplifies things.\n        node = min(unvisited, key=distances.__getitem__)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.dijkstras_distances_min",
        "documentation": {}
    },
    {
        "label": "dijkstras_path_pq",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.dijkstras_path_pq (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.dijkstras_path_pq (1)",
        "peekOfCode": "def dijkstras_path_pq(\n    graph: Mapping[Node, Mapping[Node, Real]], start: Node, goal: Node\n) -> dict[Node, Optional[Node]]:\n    \"\"\"Find the shortest path from start to goal in a directed, weighted graph. Return it as a parents dict.\"\"\"\n    distances = {start: 0}\n    parents = {start: None}\n    visited = set()\n    to_visit = [(0, start)]\n    while to_visit:\n        distance, node = heappop(to_visit)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.dijkstras_path_pq (1)",
        "documentation": {}
    },
    {
        "label": "dijkstras_path_pq",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.dijkstras_path_pq",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.dijkstras_path_pq",
        "peekOfCode": "def dijkstras_path_pq(\n    graph: Mapping[Node, Mapping[Node, Real]], start: Node, goal: Node\n) -> dict[Node, Optional[Node]]:\n    \"\"\"Find the shortest path from start to goal in a directed, weighted graph. Return it as a parents dict.\"\"\"\n    distances = {start: 0}\n    parents = {start: None}\n    visited = set()\n    to_visit = [(0, start)]\n    while to_visit:\n        distance, node = heappop(to_visit)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.dijkstras_path_pq",
        "documentation": {}
    },
    {
        "label": "Employee",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.employees",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.employees",
        "peekOfCode": "class Employee(object):\n    def __init__(self, first_name, last_name, job):\n        self.first_name = first_name\n        self.last_name = last_name\n        self.job = job\n    def __eq__(self, other):\n        if isinstance(other, self.__class__):\n            same_name = (\n                self.first_name == other.first_name\n                and self.last_name == other.last_name",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.employees",
        "documentation": {}
    },
    {
        "label": "Job",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.employees",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.employees",
        "peekOfCode": "class Job(object):\n    def __init__(self, title, salary):\n        self.title = title\n        self.salary = salary\n    def __str__(self):\n        print(self.title)\n    def __repr__(self):\n        return \"Job(title={}, salary={})\".format(self.title, self.salary)\ndef sort_employees_by_salary(employee_list):\n    \"\"\"",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.employees",
        "documentation": {}
    },
    {
        "label": "sort_employees_by_salary",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.employees",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.employees",
        "peekOfCode": "def sort_employees_by_salary(employee_list):\n    \"\"\"\n    Returns a new employee list, sorted by low to high salary then last_name\n    \"\"\"\n    employee_list.sort(key=lambda employee: (employee.last_name, employee.job.salary))\n    return employee_list",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.employees",
        "documentation": {}
    },
    {
        "label": "josephus_problem_recur",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.josephus_problem_recur",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.josephus_problem_recur",
        "peekOfCode": "def josephus_problem_recur(n: int, k: int) -> int:\n    \"\"\"1-indexed, k-skips, Josephus problem, recursively.\"\"\"\n    if n == 1:\n        return 1\n    return (josephus_problem_recur(n - 1, k) + k - 1) % n + 1",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.josephus_problem_recur",
        "documentation": {}
    },
    {
        "label": "knapsack_simple",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.knapsack_simple",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.knapsack_simple",
        "peekOfCode": "def knapsack_simple(weights: Sequence[int], values: Sequence[int], capacity: int):\n    \"\"\"0-1 knapsack problem. Just return the max value.\"\"\"\n    # Each index is a sub-capacity and each value the best value for that sub-capacity so far.\n    best_values = [0] * (capacity + 1)\n    for weight, value in zip(weights, values):\n        # Iterate backwards so we don't take things twice. Forwards would be the unbounded version of the problem.\n        for sub_capacity in range(capacity, 0, -1):\n            if weight <= sub_capacity:\n                # These three lines can be refactored to one, or a slightly more efficient if instead of max.\n                take_value = value + best_values[sub_capacity - weight]",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.knapsack_simple",
        "documentation": {}
    },
    {
        "label": "partition",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.partition",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.partition",
        "peekOfCode": "def partition(seq: Sequence[T]) -> tuple[list[T], T, list[T]]:\n    \"\"\"Split sequence into a tuple of lesser or equal values, first value, greater values.\"\"\"\n    pivot, *rest = seq\n    low = [n for n in rest if n <= pivot]\n    high = [n for n in rest if n > pivot]\n    return low, pivot, high",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.partition",
        "documentation": {}
    },
    {
        "label": "prims",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.prims",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.prims",
        "peekOfCode": "def prims(\n    graph: Mapping[Node, Mapping[Node, int]], start: Node\n) -> dict[Node, Optional[Node]]:\n    \"\"\"Find the minimum spanning tree of an undirected, weighted graph.\"\"\"\n    parents = {}\n    to_visit = [(0, None, start)]\n    while to_visit:\n        weight, parent, node = heappop(to_visit)\n        if node in parents:\n            continue",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.prims",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.Problem1-PowerPuff",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.Problem1-PowerPuff",
        "peekOfCode": "def main():\n    N = int(input())\n    Q = list(map(int, input().split()))\n    I = list(map(int, input().split()))\n    min = math.inf\n    for i in range(N):\n        if((I[i]//Q[i]) < min):\n            min = I[i] // Q[i]\n    print(min)\nmain()",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.Problem1-PowerPuff",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.Problem2-Beyblade",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.Problem2-Beyblade",
        "peekOfCode": "def main():\n    # Write code here \n    T = int(input())\n    while(T):\n        N = int(input())\n        G = list(map(int, input().split()))\n        O = list(map(int, input().split()))\n        heapq.heapify(G)\n        heapq.heapify(O)\n        c = 0",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.Problem2-Beyblade",
        "documentation": {}
    },
    {
        "label": "quickselect",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.quickselect",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.quickselect",
        "peekOfCode": "def quickselect(seq: Sequence[T], k: int) -> T:\n    \"\"\"Find the kth smallest item in a sequence.\"\"\"\n    low, pivot, high = partition(seq)\n    low_len = len(low)\n    if low_len == k:\n        return pivot\n    elif low_len < k:\n        return quickselect(high, k - low_len - 1)\n    else:\n        return quickselect(low, k)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.quickselect",
        "documentation": {}
    },
    {
        "label": "quicksort",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.quicksort (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.quicksort (1)",
        "peekOfCode": "def quicksort(seq: Sequence[T]) -> list[T]:\n    if len(seq) < 2:\n        return list(seq)\n    low, pivot, high = partition(seq)\n    return quicksort(low) + [pivot] + quicksort(high)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.quicksort (1)",
        "documentation": {}
    },
    {
        "label": "quicksort",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.quicksort (2)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.quicksort (2)",
        "peekOfCode": "def quicksort(seq: Sequence[T]) -> list[T]:\n    if len(seq) < 2:\n        return list(seq)\n    low, pivot, high = partition(seq)\n    return quicksort(low) + [pivot] + quicksort(high)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.quicksort (2)",
        "documentation": {}
    },
    {
        "label": "quicksort",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.quicksort",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.quicksort",
        "peekOfCode": "def quicksort(seq: Sequence[T]) -> list[T]:\n    if len(seq) < 2:\n        return list(seq)\n    low, pivot, high = partition(seq)\n    return quicksort(low) + [pivot] + quicksort(high)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.quicksort",
        "documentation": {}
    },
    {
        "label": "selection_sort_iter",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.selection_sort_iter (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.selection_sort_iter (1)",
        "peekOfCode": "def selection_sort_iter(seq: MutableSequence[T]) -> None:\n    \"\"\"Use selection sort iteratively on a list in-place.\"\"\"\n    for i, val in enumerate(seq):\n        min_val = min(seq[i:])\n        min_val_i = seq.index(min_val, i)  # First index of min_val at or after i\n        seq[i] = min_val\n        seq[min_val_i] = val",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.selection_sort_iter (1)",
        "documentation": {}
    },
    {
        "label": "selection_sort_iter",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.selection_sort_iter",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.selection_sort_iter",
        "peekOfCode": "def selection_sort_iter(seq: MutableSequence[T]) -> None:\n    \"\"\"Use selection sort iteratively on a list in-place.\"\"\"\n    for i, val in enumerate(seq):\n        min_val = min(seq[i:])\n        min_val_i = seq.index(min_val, i)  # First index of min_val at or after i\n        seq[i] = min_val\n        seq[min_val_i] = val",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.selection_sort_iter",
        "documentation": {}
    },
    {
        "label": "selection_sort_recur",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.selection_sort_recur (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.selection_sort_recur (1)",
        "peekOfCode": "def selection_sort_recur(seq: MutableSequence[T], i=0) -> None:\n    \"\"\"Use selection sort recursively on a list in-place.\"\"\"\n    if i >= len(seq) - 1:\n        return\n    min_val = min(seq[i:])\n    min_val_i = seq.index(min_val, i)\n    seq[min_val_i] = seq[i]\n    seq[i] = min_val\n    selection_sort_recur(seq, i + 1)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.selection_sort_recur (1)",
        "documentation": {}
    },
    {
        "label": "selection_sort_recur",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.selection_sort_recur",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.selection_sort_recur",
        "peekOfCode": "def selection_sort_recur(seq: MutableSequence[T], i=0) -> None:\n    \"\"\"Use selection sort recursively on a list in-place.\"\"\"\n    if i >= len(seq) - 1:\n        return\n    min_val = min(seq[i:])\n    min_val_i = seq.index(min_val, i)\n    seq[min_val_i] = seq[i]\n    seq[i] = min_val\n    selection_sort_recur(seq, i + 1)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.selection_sort_recur",
        "documentation": {}
    },
    {
        "label": "TestEmployees",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.tests (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.tests (1)",
        "peekOfCode": "class TestEmployees(TestCase):\n    def setUp(self):\n        agent = Job(\"Agent\", 40000)\n        manager = Job(\"Manager\", 50000)\n        self.alice = Employee(\"Alice\", \"Anaheim\", manager)\n        self.bob = Employee(\"Bob\", \"Bodega\", agent)\n        self.cindy = Employee(\"Cindy\", \"Camille\", agent)\n        self.dan = Employee(\"Dan\", \"Dirk\", manager)\n        self.employee_list = [self.dan, self.cindy, self.bob, self.alice]\n    def test_equal(self):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.tests (1)",
        "documentation": {}
    },
    {
        "label": "TestJobs",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.tests (1)",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.tests (1)",
        "peekOfCode": "class TestJobs(TestCase):\n    def test_str(self):\n        job_title = \"Agent\"\n        job = Job(job_title, 40000)\n        self.assertEqual(str(job), job_title)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.tests (1)",
        "documentation": {}
    },
    {
        "label": "TestEmployees",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.tests",
        "peekOfCode": "class TestEmployees(TestCase):\n    def setUp(self):\n        agent = Job(\"Agent\", 40000)\n        manager = Job(\"Manager\", 50000)\n        self.alice = Employee(\"Alice\", \"Anaheim\", manager)\n        self.bob = Employee(\"Bob\", \"Bodega\", agent)\n        self.cindy = Employee(\"Cindy\", \"Camille\", agent)\n        self.dan = Employee(\"Dan\", \"Dirk\", manager)\n        self.employee_list = [self.dan, self.cindy, self.bob, self.alice]\n    def test_equal(self):",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.tests",
        "documentation": {}
    },
    {
        "label": "TestJobs",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.tests",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.tests",
        "peekOfCode": "class TestJobs(TestCase):\n    def test_str(self):\n        job_title = \"Agent\"\n        job = Job(job_title, 40000)\n        self.assertEqual(str(job), job_title)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.tests",
        "documentation": {}
    },
    {
        "label": "topo_sort_count",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.topo_sort_count",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.topo_sort_count",
        "peekOfCode": "def topo_sort_count(graph: Mapping[Node, Iterable]) -> Iterable[Node]:\n    \"\"\"Find a topological sorting of a graph by counting in-degrees.\"\"\"\n    in_degrees = Counter(chain(*graph.values()))\n    zero_in_degrees = [node for node in graph if not in_degrees[node]]\n    while zero_in_degrees:\n        node = zero_in_degrees.pop()\n        yield node\n        for next_node in graph[node]:\n            in_degrees[next_node] -= 1\n            if not in_degrees[next_node]:",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.topo_sort_count",
        "documentation": {}
    },
    {
        "label": "valid_nesting_multi",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP..gitbook.assets.valid_nesting_multi",
        "description": "python-gitbook-master._BACKUP..gitbook.assets.valid_nesting_multi",
        "peekOfCode": "def valid_nesting_multi(\n    items: Sequence[Node], openers_to_closers: Mapping[Node, Node]\n) -> bool:\n    \"\"\"The parentheses problem with multiple brackets.\"\"\"\n    openers = openers_to_closers.keys()\n    closers = set(openers_to_closers.values())\n    unmatched_openers = []\n    for item in items:\n        if item in openers:\n            unmatched_openers.append(item)",
        "detail": "python-gitbook-master._BACKUP..gitbook.assets.valid_nesting_multi",
        "documentation": {}
    },
    {
        "label": "LinkedListNode",
        "kind": 6,
        "importPath": "python-gitbook-master._BACKUP.z_HTML-VERSIONS._NOTES.linked-list",
        "description": "python-gitbook-master._BACKUP.z_HTML-VERSIONS._NOTES.linked-list",
        "peekOfCode": "class LinkedListNode:\n    def __init__(self, value):\n        self.value = value\n        self.next = None\n    def add_node(self, value):\n        # set current as a ref to self\n        current = self\n        # thile there is still more nodes\n        while current.next is not None:\n            # traverse to the next node",
        "detail": "python-gitbook-master._BACKUP.z_HTML-VERSIONS._NOTES.linked-list",
        "documentation": {}
    },
    {
        "label": "print_ll",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP.z_HTML-VERSIONS._NOTES.linked-list",
        "description": "python-gitbook-master._BACKUP.z_HTML-VERSIONS._NOTES.linked-list",
        "peekOfCode": "def print_ll(linked_list_node):\n    current = linked_list_node\n    while current is not None:\n        print(current.value)\n        current = current.next\ndef add_to_ll_storage(linked_list_node):\n    current = linked_list_node\n    while current is not None:\n        ll_storage.append(current)\n        current = current.next",
        "detail": "python-gitbook-master._BACKUP.z_HTML-VERSIONS._NOTES.linked-list",
        "documentation": {}
    },
    {
        "label": "add_to_ll_storage",
        "kind": 2,
        "importPath": "python-gitbook-master._BACKUP.z_HTML-VERSIONS._NOTES.linked-list",
        "description": "python-gitbook-master._BACKUP.z_HTML-VERSIONS._NOTES.linked-list",
        "peekOfCode": "def add_to_ll_storage(linked_list_node):\n    current = linked_list_node\n    while current is not None:\n        ll_storage.append(current)\n        current = current.next\nll_storage = []\nL1 = LinkedListNode(34)\nL1.next = LinkedListNode(45)\nL1.next.next = LinkedListNode(90)\nL1.add_node(12)",
        "detail": "python-gitbook-master._BACKUP.z_HTML-VERSIONS._NOTES.linked-list",
        "documentation": {}
    },
    {
        "label": "ll_storage",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP.z_HTML-VERSIONS._NOTES.linked-list",
        "description": "python-gitbook-master._BACKUP.z_HTML-VERSIONS._NOTES.linked-list",
        "peekOfCode": "ll_storage = []\nL1 = LinkedListNode(34)\nL1.next = LinkedListNode(45)\nL1.next.next = LinkedListNode(90)\nL1.add_node(12)\nprint_ll(L1)\nL1.add_node(24)\nprint(\"--------------------------------------------\\n\")\nprint_ll(L1)\nprint(\"--------------------------------------------\\n\")",
        "detail": "python-gitbook-master._BACKUP.z_HTML-VERSIONS._NOTES.linked-list",
        "documentation": {}
    },
    {
        "label": "L1",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP.z_HTML-VERSIONS._NOTES.linked-list",
        "description": "python-gitbook-master._BACKUP.z_HTML-VERSIONS._NOTES.linked-list",
        "peekOfCode": "L1 = LinkedListNode(34)\nL1.next = LinkedListNode(45)\nL1.next.next = LinkedListNode(90)\nL1.add_node(12)\nprint_ll(L1)\nL1.add_node(24)\nprint(\"--------------------------------------------\\n\")\nprint_ll(L1)\nprint(\"--------------------------------------------\\n\")\nL1.add_node(102)",
        "detail": "python-gitbook-master._BACKUP.z_HTML-VERSIONS._NOTES.linked-list",
        "documentation": {}
    },
    {
        "label": "L1.next",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP.z_HTML-VERSIONS._NOTES.linked-list",
        "description": "python-gitbook-master._BACKUP.z_HTML-VERSIONS._NOTES.linked-list",
        "peekOfCode": "L1.next = LinkedListNode(45)\nL1.next.next = LinkedListNode(90)\nL1.add_node(12)\nprint_ll(L1)\nL1.add_node(24)\nprint(\"--------------------------------------------\\n\")\nprint_ll(L1)\nprint(\"--------------------------------------------\\n\")\nL1.add_node(102)\nprint_ll(L1)",
        "detail": "python-gitbook-master._BACKUP.z_HTML-VERSIONS._NOTES.linked-list",
        "documentation": {}
    },
    {
        "label": "L1.next.next",
        "kind": 5,
        "importPath": "python-gitbook-master._BACKUP.z_HTML-VERSIONS._NOTES.linked-list",
        "description": "python-gitbook-master._BACKUP.z_HTML-VERSIONS._NOTES.linked-list",
        "peekOfCode": "L1.next.next = LinkedListNode(90)\nL1.add_node(12)\nprint_ll(L1)\nL1.add_node(24)\nprint(\"--------------------------------------------\\n\")\nprint_ll(L1)\nprint(\"--------------------------------------------\\n\")\nL1.add_node(102)\nprint_ll(L1)\nL1.insert_node(123, 90)",
        "detail": "python-gitbook-master._BACKUP.z_HTML-VERSIONS._NOTES.linked-list",
        "documentation": {}
    },
    {
        "label": "LinkedListNode",
        "kind": 6,
        "importPath": "z_HTML-VERSIONS._NOTES.linked-list",
        "description": "z_HTML-VERSIONS._NOTES.linked-list",
        "peekOfCode": "class LinkedListNode:\n    def __init__(self, value):\n        self.value = value\n        self.next = None\n    def add_node(self, value):\n        # set current as a ref to self\n        current = self\n        # thile there is still more nodes\n        while current.next is not None:\n            # traverse to the next node",
        "detail": "z_HTML-VERSIONS._NOTES.linked-list",
        "documentation": {}
    },
    {
        "label": "print_ll",
        "kind": 2,
        "importPath": "z_HTML-VERSIONS._NOTES.linked-list",
        "description": "z_HTML-VERSIONS._NOTES.linked-list",
        "peekOfCode": "def print_ll(linked_list_node):\n    current = linked_list_node\n    while current is not None:\n        print(current.value)\n        current = current.next\ndef add_to_ll_storage(linked_list_node):\n    current = linked_list_node\n    while current is not None:\n        ll_storage.append(current)\n        current = current.next",
        "detail": "z_HTML-VERSIONS._NOTES.linked-list",
        "documentation": {}
    },
    {
        "label": "add_to_ll_storage",
        "kind": 2,
        "importPath": "z_HTML-VERSIONS._NOTES.linked-list",
        "description": "z_HTML-VERSIONS._NOTES.linked-list",
        "peekOfCode": "def add_to_ll_storage(linked_list_node):\n    current = linked_list_node\n    while current is not None:\n        ll_storage.append(current)\n        current = current.next\nll_storage = []\nL1 = LinkedListNode(34)\nL1.next = LinkedListNode(45)\nL1.next.next = LinkedListNode(90)\nL1.add_node(12)",
        "detail": "z_HTML-VERSIONS._NOTES.linked-list",
        "documentation": {}
    },
    {
        "label": "ll_storage",
        "kind": 5,
        "importPath": "z_HTML-VERSIONS._NOTES.linked-list",
        "description": "z_HTML-VERSIONS._NOTES.linked-list",
        "peekOfCode": "ll_storage = []\nL1 = LinkedListNode(34)\nL1.next = LinkedListNode(45)\nL1.next.next = LinkedListNode(90)\nL1.add_node(12)\nprint_ll(L1)\nL1.add_node(24)\nprint(\"--------------------------------------------\\n\")\nprint_ll(L1)\nprint(\"--------------------------------------------\\n\")",
        "detail": "z_HTML-VERSIONS._NOTES.linked-list",
        "documentation": {}
    },
    {
        "label": "L1",
        "kind": 5,
        "importPath": "z_HTML-VERSIONS._NOTES.linked-list",
        "description": "z_HTML-VERSIONS._NOTES.linked-list",
        "peekOfCode": "L1 = LinkedListNode(34)\nL1.next = LinkedListNode(45)\nL1.next.next = LinkedListNode(90)\nL1.add_node(12)\nprint_ll(L1)\nL1.add_node(24)\nprint(\"--------------------------------------------\\n\")\nprint_ll(L1)\nprint(\"--------------------------------------------\\n\")\nL1.add_node(102)",
        "detail": "z_HTML-VERSIONS._NOTES.linked-list",
        "documentation": {}
    },
    {
        "label": "L1.next",
        "kind": 5,
        "importPath": "z_HTML-VERSIONS._NOTES.linked-list",
        "description": "z_HTML-VERSIONS._NOTES.linked-list",
        "peekOfCode": "L1.next = LinkedListNode(45)\nL1.next.next = LinkedListNode(90)\nL1.add_node(12)\nprint_ll(L1)\nL1.add_node(24)\nprint(\"--------------------------------------------\\n\")\nprint_ll(L1)\nprint(\"--------------------------------------------\\n\")\nL1.add_node(102)\nprint_ll(L1)",
        "detail": "z_HTML-VERSIONS._NOTES.linked-list",
        "documentation": {}
    },
    {
        "label": "L1.next.next",
        "kind": 5,
        "importPath": "z_HTML-VERSIONS._NOTES.linked-list",
        "description": "z_HTML-VERSIONS._NOTES.linked-list",
        "peekOfCode": "L1.next.next = LinkedListNode(90)\nL1.add_node(12)\nprint_ll(L1)\nL1.add_node(24)\nprint(\"--------------------------------------------\\n\")\nprint_ll(L1)\nprint(\"--------------------------------------------\\n\")\nL1.add_node(102)\nprint_ll(L1)\nL1.insert_node(123, 90)",
        "detail": "z_HTML-VERSIONS._NOTES.linked-list",
        "documentation": {}
    },
    {
        "label": "backpedal",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.backpedal (1)",
        "description": "_BACKUP..gitbook.assets.backpedal (1)",
        "peekOfCode": "def backpedal(goal: Node, parents: Mapping[Node, Optional[Node]]) -> list[Node]:\n    \"\"\"With a dict of parent->child, walk backwards from the goal as far as possible and return the path.\"\"\"\n    back_path = []\n    node = goal\n    while node is not None:\n        back_path.append(node)\n        node = parents[node]\n    return back_path[::-1]",
        "detail": "_BACKUP..gitbook.assets.backpedal (1)",
        "documentation": {}
    },
    {
        "label": "backpedal",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.backpedal",
        "description": "_BACKUP..gitbook.assets.backpedal",
        "peekOfCode": "def backpedal(goal: Node, parents: Mapping[Node, Optional[Node]]) -> list[Node]:\n    \"\"\"With a dict of parent->child, walk backwards from the goal as far as possible and return the path.\"\"\"\n    back_path = []\n    node = goal\n    while node is not None:\n        back_path.append(node)\n        node = parents[node]\n    return back_path[::-1]",
        "detail": "_BACKUP..gitbook.assets.backpedal",
        "documentation": {}
    },
    {
        "label": "bfs_paths_dict",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.bfs_paths_dict (1)",
        "description": "_BACKUP..gitbook.assets.bfs_paths_dict (1)",
        "peekOfCode": "def bfs_paths_dict(\n    graph: Mapping[Node, set[Node]], start: Node, goal: Node\n) -> Iterable[list[Node]]:\n    \"\"\"Find all the paths from start to goal using BFS on a dict.\"\"\"\n    to_visit = deque([[start]])\n    while to_visit:\n        path = to_visit.popleft()\n        node = path[-1]\n        if node == goal:\n            yield path",
        "detail": "_BACKUP..gitbook.assets.bfs_paths_dict (1)",
        "documentation": {}
    },
    {
        "label": "bfs_paths_dict",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.bfs_paths_dict (2)",
        "description": "_BACKUP..gitbook.assets.bfs_paths_dict (2)",
        "peekOfCode": "def bfs_paths_dict(\n    graph: Mapping[Node, set[Node]], start: Node, goal: Node\n) -> Iterable[list[Node]]:\n    \"\"\"Find all the paths from start to goal using BFS on a dict.\"\"\"\n    to_visit = deque([[start]])\n    while to_visit:\n        path = to_visit.popleft()\n        node = path[-1]\n        if node == goal:\n            yield path",
        "detail": "_BACKUP..gitbook.assets.bfs_paths_dict (2)",
        "documentation": {}
    },
    {
        "label": "bfs_paths_dict",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.bfs_paths_dict",
        "description": "_BACKUP..gitbook.assets.bfs_paths_dict",
        "peekOfCode": "def bfs_paths_dict(\n    graph: Mapping[Node, set[Node]], start: Node, goal: Node\n) -> Iterable[list[Node]]:\n    \"\"\"Find all the paths from start to goal using BFS on a dict.\"\"\"\n    to_visit = deque([[start]])\n    while to_visit:\n        path = to_visit.popleft()\n        node = path[-1]\n        if node == goal:\n            yield path",
        "detail": "_BACKUP..gitbook.assets.bfs_paths_dict",
        "documentation": {}
    },
    {
        "label": "bfs_search_dict",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.bfs_search_dict (1)",
        "description": "_BACKUP..gitbook.assets.bfs_search_dict (1)",
        "peekOfCode": "def bfs_search_dict(\n    graph: Mapping[Node, Iterable[Node]], start: Node, predicate: Callable[[Node], bool]\n) -> bool:\n    \"\"\"Find the closest node to start that matches the predicate using breadth first search.\"\"\"\n    visited = set()\n    to_visit = deque([start])\n    while to_visit:\n        node = to_visit.popleft()\n        if node in visited:\n            continue",
        "detail": "_BACKUP..gitbook.assets.bfs_search_dict (1)",
        "documentation": {}
    },
    {
        "label": "bfs_search_dict",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.bfs_search_dict",
        "description": "_BACKUP..gitbook.assets.bfs_search_dict",
        "peekOfCode": "def bfs_search_dict(\n    graph: Mapping[Node, Iterable[Node]], start: Node, predicate: Callable[[Node], bool]\n) -> bool:\n    \"\"\"Find the closest node to start that matches the predicate using breadth first search.\"\"\"\n    visited = set()\n    to_visit = deque([start])\n    while to_visit:\n        node = to_visit.popleft()\n        if node in visited:\n            continue",
        "detail": "_BACKUP..gitbook.assets.bfs_search_dict",
        "documentation": {}
    },
    {
        "label": "bfs_search_grid",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.bfs_search_grid (1)",
        "description": "_BACKUP..gitbook.assets.bfs_search_grid (1)",
        "peekOfCode": "def bfs_search_grid(\n    grid: Sequence[Sequence[int]], start: tuple[int, int], goal: tuple[int, int]\n) -> bool:\n    \"\"\"On a grid of 0s and 1s, find if start is connected to goal via a path of 1s.\"\"\"\n    rows = range(len(grid))\n    cols = range(len(grid[0]))\n    seen = {start}\n    to_visit = deque([start])\n    while to_visit:\n        r, c = to_visit.popleft()",
        "detail": "_BACKUP..gitbook.assets.bfs_search_grid (1)",
        "documentation": {}
    },
    {
        "label": "bfs_search_grid",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.bfs_search_grid",
        "description": "_BACKUP..gitbook.assets.bfs_search_grid",
        "peekOfCode": "def bfs_search_grid(\n    grid: Sequence[Sequence[int]], start: tuple[int, int], goal: tuple[int, int]\n) -> bool:\n    \"\"\"On a grid of 0s and 1s, find if start is connected to goal via a path of 1s.\"\"\"\n    rows = range(len(grid))\n    cols = range(len(grid[0]))\n    seen = {start}\n    to_visit = deque([start])\n    while to_visit:\n        r, c = to_visit.popleft()",
        "detail": "_BACKUP..gitbook.assets.bfs_search_grid",
        "documentation": {}
    },
    {
        "label": "bipartite_matching_single",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.bipartite_matching_single (1)",
        "description": "_BACKUP..gitbook.assets.bipartite_matching_single (1)",
        "peekOfCode": "def bipartite_matching_single(graph: Sequence[int]) -> list[int]:\n    matches = list(graph)\n    in_degrees = [0] * len(\n        graph\n    )  # This is an alternate to collections.Counter when the keys are 0-n.\n    for target in graph:\n        in_degrees[target] += 1\n    zero_in_degrees = [\n        node for node, in_degree in enumerate(in_degrees) if not in_degree\n    ]",
        "detail": "_BACKUP..gitbook.assets.bipartite_matching_single (1)",
        "documentation": {}
    },
    {
        "label": "bipartite_matching_single",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.bipartite_matching_single (2)",
        "description": "_BACKUP..gitbook.assets.bipartite_matching_single (2)",
        "peekOfCode": "def bipartite_matching_single(graph: Sequence[int]) -> list[int]:\n    matches = list(graph)\n    in_degrees = [0] * len(\n        graph\n    )  # This is an alternate to collections.Counter when the keys are 0-n.\n    for target in graph:\n        in_degrees[target] += 1\n    zero_in_degrees = [\n        node for node, in_degree in enumerate(in_degrees) if not in_degree\n    ]",
        "detail": "_BACKUP..gitbook.assets.bipartite_matching_single (2)",
        "documentation": {}
    },
    {
        "label": "bipartite_matching_single",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.bipartite_matching_single",
        "description": "_BACKUP..gitbook.assets.bipartite_matching_single",
        "peekOfCode": "def bipartite_matching_single(graph: Sequence[int]) -> list[int]:\n    matches = list(graph)\n    in_degrees = [0] * len(\n        graph\n    )  # This is an alternate to collections.Counter when the keys are 0-n.\n    for target in graph:\n        in_degrees[target] += 1\n    zero_in_degrees = [\n        node for node, in_degree in enumerate(in_degrees) if not in_degree\n    ]",
        "detail": "_BACKUP..gitbook.assets.bipartite_matching_single",
        "documentation": {}
    },
    {
        "label": "bisect_search",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.bisect_search (1)",
        "description": "_BACKUP..gitbook.assets.bisect_search (1)",
        "peekOfCode": "def bisect_search(predicate: Callable[[int], bool], low: int, high: int) -> int:\n    \"\"\"Find the lowest int between low and high where predicate(int) is True.\"\"\"\n    while low < high:\n        mid = (\n            low + (high - low) // 2\n        )  # Avoids integer overflow compared to mid = (low + high) // 2\n        if predicate(mid):\n            high = mid\n        else:\n            low = mid + 1",
        "detail": "_BACKUP..gitbook.assets.bisect_search (1)",
        "documentation": {}
    },
    {
        "label": "bisect_search",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.bisect_search",
        "description": "_BACKUP..gitbook.assets.bisect_search",
        "peekOfCode": "def bisect_search(predicate: Callable[[int], bool], low: int, high: int) -> int:\n    \"\"\"Find the lowest int between low and high where predicate(int) is True.\"\"\"\n    while low < high:\n        mid = (\n            low + (high - low) // 2\n        )  # Avoids integer overflow compared to mid = (low + high) // 2\n        if predicate(mid):\n            high = mid\n        else:\n            low = mid + 1",
        "detail": "_BACKUP..gitbook.assets.bisect_search",
        "documentation": {}
    },
    {
        "label": "bst_make_balanced_recur",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.bst_make_balanced_recur (1)",
        "description": "_BACKUP..gitbook.assets.bst_make_balanced_recur (1)",
        "peekOfCode": "def bst_make_balanced_recur(values: Sequence[int]) -> Optional[BTNode]:\n    \"\"\"Make a balanced binary search tree from a sorted sequence of values.\"\"\"\n    if not values:\n        return None\n    mid = len(values) // 2\n    root = BTNode(values[mid])\n    root.left = bst_make_balanced_recur(values[:mid])\n    root.right = bst_make_balanced_recur(values[mid + 1 :])\n    return root",
        "detail": "_BACKUP..gitbook.assets.bst_make_balanced_recur (1)",
        "documentation": {}
    },
    {
        "label": "bst_make_balanced_recur",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.bst_make_balanced_recur",
        "description": "_BACKUP..gitbook.assets.bst_make_balanced_recur",
        "peekOfCode": "def bst_make_balanced_recur(values: Sequence[int]) -> Optional[BTNode]:\n    \"\"\"Make a balanced binary search tree from a sorted sequence of values.\"\"\"\n    if not values:\n        return None\n    mid = len(values) // 2\n    root = BTNode(values[mid])\n    root.left = bst_make_balanced_recur(values[:mid])\n    root.right = bst_make_balanced_recur(values[mid + 1 :])\n    return root",
        "detail": "_BACKUP..gitbook.assets.bst_make_balanced_recur",
        "documentation": {}
    },
    {
        "label": "bt_inorder_traversal_recur",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.bt_inorder_traversal_recur (1)",
        "description": "_BACKUP..gitbook.assets.bt_inorder_traversal_recur (1)",
        "peekOfCode": "def bt_inorder_traversal_recur(root: Optional[BTNode]) -> Iterable[BTNode]:\n    if root is not None:\n        yield from bt_inorder_traversal_recur(root.left)\n        yield root\n        yield from bt_inorder_traversal_recur(root.right)",
        "detail": "_BACKUP..gitbook.assets.bt_inorder_traversal_recur (1)",
        "documentation": {}
    },
    {
        "label": "bt_inorder_traversal_recur",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.bt_inorder_traversal_recur",
        "description": "_BACKUP..gitbook.assets.bt_inorder_traversal_recur",
        "peekOfCode": "def bt_inorder_traversal_recur(root: Optional[BTNode]) -> Iterable[BTNode]:\n    if root is not None:\n        yield from bt_inorder_traversal_recur(root.left)\n        yield root\n        yield from bt_inorder_traversal_recur(root.right)",
        "detail": "_BACKUP..gitbook.assets.bt_inorder_traversal_recur",
        "documentation": {}
    },
    {
        "label": "bt_level_order_traversal_iter",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.bt_level_order_traversal_iter (1)",
        "description": "_BACKUP..gitbook.assets.bt_level_order_traversal_iter (1)",
        "peekOfCode": "def bt_level_order_traversal_iter(root: BTNode) -> Iterable[list[BTNode]]:\n    # would do a null check here if root was Optional\n    level = deque([root])\n    while level:\n        # modify this line if you needed to grab the values\n        yield list(level)  # copy so it's not messed with\n        for _ in range(len(level)):\n            node = level.popleft()\n            for child in [node.left, node.right]:\n                if child is not None:",
        "detail": "_BACKUP..gitbook.assets.bt_level_order_traversal_iter (1)",
        "documentation": {}
    },
    {
        "label": "bt_level_order_traversal_iter",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.bt_level_order_traversal_iter",
        "description": "_BACKUP..gitbook.assets.bt_level_order_traversal_iter",
        "peekOfCode": "def bt_level_order_traversal_iter(root: BTNode) -> Iterable[list[BTNode]]:\n    # would do a null check here if root was Optional\n    level = deque([root])\n    while level:\n        # modify this line if you needed to grab the values\n        yield list(level)  # copy so it's not messed with\n        for _ in range(len(level)):\n            node = level.popleft()\n            for child in [node.left, node.right]:\n                if child is not None:",
        "detail": "_BACKUP..gitbook.assets.bt_level_order_traversal_iter",
        "documentation": {}
    },
    {
        "label": "celebrity",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.celebrity (1)",
        "description": "_BACKUP..gitbook.assets.celebrity (1)",
        "peekOfCode": "def celebrity(knows: Callable[[int, int], bool], n: int) -> Optional[int]:\n    candidate = 0\n    for node in range(1, n):\n        if knows(candidate, node):\n            candidate = node\n    if any(knows(candidate, node) for node in range(candidate)):\n        return None\n    if any(not knows(node, candidate) for node in range(n)):\n        return None\n    return candidate",
        "detail": "_BACKUP..gitbook.assets.celebrity (1)",
        "documentation": {}
    },
    {
        "label": "celebrity",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.celebrity",
        "description": "_BACKUP..gitbook.assets.celebrity",
        "peekOfCode": "def celebrity(knows: Callable[[int, int], bool], n: int) -> Optional[int]:\n    candidate = 0\n    for node in range(1, n):\n        if knows(candidate, node):\n            candidate = node\n    if any(knows(candidate, node) for node in range(candidate)):\n        return None\n    if any(not knows(node, candidate) for node in range(n)):\n        return None\n    return candidate",
        "detail": "_BACKUP..gitbook.assets.celebrity",
        "documentation": {}
    },
    {
        "label": "counting_sort_dict",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.counting_sort_dict (1)",
        "description": "_BACKUP..gitbook.assets.counting_sort_dict (1)",
        "peekOfCode": "def counting_sort_dict(\n    items: Iterable[T], key: Callable[[T], int] = lambda x: x\n) -> Iterable[T]:\n    groups = defaultdict(list)\n    for item in items:\n        groups[key(item)].append(item)\n    for k in range(min(groups), max(groups) + 1):\n        yield from groups[k]",
        "detail": "_BACKUP..gitbook.assets.counting_sort_dict (1)",
        "documentation": {}
    },
    {
        "label": "counting_sort_dict",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.counting_sort_dict (2)",
        "description": "_BACKUP..gitbook.assets.counting_sort_dict (2)",
        "peekOfCode": "def counting_sort_dict(\n    items: Iterable[T], key: Callable[[T], int] = lambda x: x\n) -> Iterable[T]:\n    groups = defaultdict(list)\n    for item in items:\n        groups[key(item)].append(item)\n    for k in range(min(groups), max(groups) + 1):\n        yield from groups[k]",
        "detail": "_BACKUP..gitbook.assets.counting_sort_dict (2)",
        "documentation": {}
    },
    {
        "label": "counting_sort_dict",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.counting_sort_dict",
        "description": "_BACKUP..gitbook.assets.counting_sort_dict",
        "peekOfCode": "def counting_sort_dict(\n    items: Iterable[T], key: Callable[[T], int] = lambda x: x\n) -> Iterable[T]:\n    groups = defaultdict(list)\n    for item in items:\n        groups[key(item)].append(item)\n    for k in range(min(groups), max(groups) + 1):\n        yield from groups[k]",
        "detail": "_BACKUP..gitbook.assets.counting_sort_dict",
        "documentation": {}
    },
    {
        "label": "counting_sort_list",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.counting_sort_list (1)",
        "description": "_BACKUP..gitbook.assets.counting_sort_list (1)",
        "peekOfCode": "def counting_sort_list(items: Sequence[T], key: Callable[[T], int] = lambda x: x):\n    max_value = max(map(key, items))\n    count = [0] * (max_value + 1)\n    for item in items:\n        count[key(item)] += 1\n    count = list(accumulate(count, initial=0))\n    ret = [None] * len(items)\n    for item in items:\n        i = count[key(item)]\n        ret[i] = item",
        "detail": "_BACKUP..gitbook.assets.counting_sort_list (1)",
        "documentation": {}
    },
    {
        "label": "counting_sort_list",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.counting_sort_list (2)",
        "description": "_BACKUP..gitbook.assets.counting_sort_list (2)",
        "peekOfCode": "def counting_sort_list(items: Sequence[T], key: Callable[[T], int] = lambda x: x):\n    max_value = max(map(key, items))\n    count = [0] * (max_value + 1)\n    for item in items:\n        count[key(item)] += 1\n    count = list(accumulate(count, initial=0))\n    ret = [None] * len(items)\n    for item in items:\n        i = count[key(item)]\n        ret[i] = item",
        "detail": "_BACKUP..gitbook.assets.counting_sort_list (2)",
        "documentation": {}
    },
    {
        "label": "counting_sort_list",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.counting_sort_list",
        "description": "_BACKUP..gitbook.assets.counting_sort_list",
        "peekOfCode": "def counting_sort_list(items: Sequence[T], key: Callable[[T], int] = lambda x: x):\n    max_value = max(map(key, items))\n    count = [0] * (max_value + 1)\n    for item in items:\n        count[key(item)] += 1\n    count = list(accumulate(count, initial=0))\n    ret = [None] * len(items)\n    for item in items:\n        i = count[key(item)]\n        ret[i] = item",
        "detail": "_BACKUP..gitbook.assets.counting_sort_list",
        "documentation": {}
    },
    {
        "label": "threeCharsDistinct",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-week1-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-week1-projects (1)",
        "peekOfCode": "def threeCharsDistinct(s):\n    count = 0\n    for i in range(len(s)):\n        if i < len(s) - 2:\n            # print(i)\n            if s[i] != s[i + 1] and s[i] != s[i + 2] and s[i + 1] != s[i + 2]:\n                count += 1\n    return count\n# print(threeCharsDistinct(s))\nsentence = \"Man bites dog\"",
        "detail": "_BACKUP..gitbook.assets.cs-week1-projects (1)",
        "documentation": {}
    },
    {
        "label": "reverseSentence",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-week1-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-week1-projects (1)",
        "peekOfCode": "def reverseSentence(sentence):\n    words_array = sentence.split(' ')\n    words_reversed = ' '.join(reversed(words_array))\n    return words_reversed\n# print(reverseSentence(sentence))\npasscode = '1111'\nattempts = [\"1111\",\n            \"4444\",\n            \"9999\",\n            \"3333\",",
        "detail": "_BACKUP..gitbook.assets.cs-week1-projects (1)",
        "documentation": {}
    },
    {
        "label": "incorrectPasscodeAttempts",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-week1-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-week1-projects (1)",
        "peekOfCode": "def incorrectPasscodeAttempts(passcode, attempts):\n    count = 0\n    indexes = []\n    if len(attempts) < 10 and passcode not in attempts:\n        return False\n    for attempt in attempts:\n        print('attempt:', attempt)\n        if attempt != passcode:\n            print('count before:', count)\n            count += 1",
        "detail": "_BACKUP..gitbook.assets.cs-week1-projects (1)",
        "documentation": {}
    },
    {
        "label": "digitSumsDifference",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-week1-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-week1-projects (1)",
        "peekOfCode": "def digitSumsDifference(n):\n    evens_sum = 0\n    odds_sum = 0\n    difference = 0\n    evens = []\n    odds = []\n    for num in str(n):\n        if int(num) % 2 == 0:\n            evens.append(int(num))\n        else:",
        "detail": "_BACKUP..gitbook.assets.cs-week1-projects (1)",
        "documentation": {}
    },
    {
        "label": "digitsManipulations",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-week1-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-week1-projects (1)",
        "peekOfCode": "def digitsManipulations(n):\n    nums = []\n    for num in str(n):\n        nums.append(int(num))\n    return math.prod(nums) - sum(nums)\n#\n# print(digitsManipulations(n))\ns = \"abcde\"\ndef countVowelConsonant(s):\n    vowel_count = 0",
        "detail": "_BACKUP..gitbook.assets.cs-week1-projects (1)",
        "documentation": {}
    },
    {
        "label": "countVowelConsonant",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-week1-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-week1-projects (1)",
        "peekOfCode": "def countVowelConsonant(s):\n    vowel_count = 0\n    const_count = 0\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for letter in s:\n        if letter in vowels:\n            vowel_count += 1\n        else:\n            const_count += 2\n    return vowel_count + const_count",
        "detail": "_BACKUP..gitbook.assets.cs-week1-projects (1)",
        "documentation": {}
    },
    {
        "label": "contains_duplicate_2",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-week1-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-week1-projects (1)",
        "peekOfCode": "def contains_duplicate_2(nums):\n    # overall runtime: O(nlogn + n) --> O(n log n)\n    # space complexity: O(1)\n    nums.sort()  # sorting is usually O(n log n)\n    # nums.sort() sorts it in place\n    # everything below this line is O(n)\n    i = 0  # O(1)\n    while i < len(nums) - 1:  # up to O(n)\n        if nums[i] == nums[i + 1]:  # O(1)\n            return True",
        "detail": "_BACKUP..gitbook.assets.cs-week1-projects (1)",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-week1-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-week1-projects (1)",
        "peekOfCode": "s = 'abacaba'\n# def threeCharsDistinct(s):\n#     count = 0\n#\n#     for i in range(len(s)):\n#         if i < 6:\n#             if s[0] != s[i + 1] and s[i] != s[i + 2] and s[i + 1] != s[i + 2]:\n#                 count += 1\n#     print(count)\ndef threeCharsDistinct(s):",
        "detail": "_BACKUP..gitbook.assets.cs-week1-projects (1)",
        "documentation": {}
    },
    {
        "label": "sentence",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-week1-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-week1-projects (1)",
        "peekOfCode": "sentence = \"Man bites dog\"\ndef reverseSentence(sentence):\n    words_array = sentence.split(' ')\n    words_reversed = ' '.join(reversed(words_array))\n    return words_reversed\n# print(reverseSentence(sentence))\npasscode = '1111'\nattempts = [\"1111\",\n            \"4444\",\n            \"9999\",",
        "detail": "_BACKUP..gitbook.assets.cs-week1-projects (1)",
        "documentation": {}
    },
    {
        "label": "passcode",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-week1-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-week1-projects (1)",
        "peekOfCode": "passcode = '1111'\nattempts = [\"1111\",\n            \"4444\",\n            \"9999\",\n            \"3333\",\n            \"8888\",\n            \"2222\",\n            \"7777\",\n            \"0000\",\n            \"6666\",",
        "detail": "_BACKUP..gitbook.assets.cs-week1-projects (1)",
        "documentation": {}
    },
    {
        "label": "attempts",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-week1-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-week1-projects (1)",
        "peekOfCode": "attempts = [\"1111\",\n            \"4444\",\n            \"9999\",\n            \"3333\",\n            \"8888\",\n            \"2222\",\n            \"7777\",\n            \"0000\",\n            \"6666\",\n            \"7285\",",
        "detail": "_BACKUP..gitbook.assets.cs-week1-projects (1)",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-week1-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-week1-projects (1)",
        "peekOfCode": "n = 412\ndef digitSumsDifference(n):\n    evens_sum = 0\n    odds_sum = 0\n    difference = 0\n    evens = []\n    odds = []\n    for num in str(n):\n        if int(num) % 2 == 0:\n            evens.append(int(num))",
        "detail": "_BACKUP..gitbook.assets.cs-week1-projects (1)",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-week1-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-week1-projects (1)",
        "peekOfCode": "n = 123456\ndef digitsManipulations(n):\n    nums = []\n    for num in str(n):\n        nums.append(int(num))\n    return math.prod(nums) - sum(nums)\n#\n# print(digitsManipulations(n))\ns = \"abcde\"\ndef countVowelConsonant(s):",
        "detail": "_BACKUP..gitbook.assets.cs-week1-projects (1)",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-week1-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-week1-projects (1)",
        "peekOfCode": "s = \"abcde\"\ndef countVowelConsonant(s):\n    vowel_count = 0\n    const_count = 0\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for letter in s:\n        if letter in vowels:\n            vowel_count += 1\n        else:\n            const_count += 2",
        "detail": "_BACKUP..gitbook.assets.cs-week1-projects (1)",
        "documentation": {}
    },
    {
        "label": "threeCharsDistinct",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-week1-projects",
        "description": "_BACKUP..gitbook.assets.cs-week1-projects",
        "peekOfCode": "def threeCharsDistinct(s):\n    count = 0\n    for i in range(len(s)):\n        if i < len(s) - 2:\n            # print(i)\n            if s[i] != s[i + 1] and s[i] != s[i + 2] and s[i + 1] != s[i + 2]:\n                count += 1\n    return count\n# print(threeCharsDistinct(s))\nsentence = \"Man bites dog\"",
        "detail": "_BACKUP..gitbook.assets.cs-week1-projects",
        "documentation": {}
    },
    {
        "label": "reverseSentence",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-week1-projects",
        "description": "_BACKUP..gitbook.assets.cs-week1-projects",
        "peekOfCode": "def reverseSentence(sentence):\n    words_array = sentence.split(\" \")\n    words_reversed = \" \".join(reversed(words_array))\n    return words_reversed\n# print(reverseSentence(sentence))\npasscode = \"1111\"\nattempts = [\n    \"1111\",\n    \"4444\",\n    \"9999\",",
        "detail": "_BACKUP..gitbook.assets.cs-week1-projects",
        "documentation": {}
    },
    {
        "label": "incorrectPasscodeAttempts",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-week1-projects",
        "description": "_BACKUP..gitbook.assets.cs-week1-projects",
        "peekOfCode": "def incorrectPasscodeAttempts(passcode, attempts):\n    count = 0\n    indexes = []\n    if len(attempts) < 10 and passcode not in attempts:\n        return False\n    for attempt in attempts:\n        print(\"attempt:\", attempt)\n        if attempt != passcode:\n            print(\"count before:\", count)\n            count += 1",
        "detail": "_BACKUP..gitbook.assets.cs-week1-projects",
        "documentation": {}
    },
    {
        "label": "digitSumsDifference",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-week1-projects",
        "description": "_BACKUP..gitbook.assets.cs-week1-projects",
        "peekOfCode": "def digitSumsDifference(n):\n    evens_sum = 0\n    odds_sum = 0\n    difference = 0\n    evens = []\n    odds = []\n    for num in str(n):\n        if int(num) % 2 == 0:\n            evens.append(int(num))\n        else:",
        "detail": "_BACKUP..gitbook.assets.cs-week1-projects",
        "documentation": {}
    },
    {
        "label": "digitsManipulations",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-week1-projects",
        "description": "_BACKUP..gitbook.assets.cs-week1-projects",
        "peekOfCode": "def digitsManipulations(n):\n    nums = []\n    for num in str(n):\n        nums.append(int(num))\n    return math.prod(nums) - sum(nums)\n#\n# print(digitsManipulations(n))\ns = \"abcde\"\ndef countVowelConsonant(s):\n    vowel_count = 0",
        "detail": "_BACKUP..gitbook.assets.cs-week1-projects",
        "documentation": {}
    },
    {
        "label": "countVowelConsonant",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-week1-projects",
        "description": "_BACKUP..gitbook.assets.cs-week1-projects",
        "peekOfCode": "def countVowelConsonant(s):\n    vowel_count = 0\n    const_count = 0\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for letter in s:\n        if letter in vowels:\n            vowel_count += 1\n        else:\n            const_count += 2\n    return vowel_count + const_count",
        "detail": "_BACKUP..gitbook.assets.cs-week1-projects",
        "documentation": {}
    },
    {
        "label": "contains_duplicate_2",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-week1-projects",
        "description": "_BACKUP..gitbook.assets.cs-week1-projects",
        "peekOfCode": "def contains_duplicate_2(nums):\n    # overall runtime: O(nlogn + n) --> O(n log n)\n    # space complexity: O(1)\n    nums.sort()  # sorting is usually O(n log n)\n    # nums.sort() sorts it in place\n    # everything below this line is O(n)\n    i = 0  # O(1)\n    while i < len(nums) - 1:  # up to O(n)\n        if nums[i] == nums[i + 1]:  # O(1)\n            return True",
        "detail": "_BACKUP..gitbook.assets.cs-week1-projects",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-week1-projects",
        "description": "_BACKUP..gitbook.assets.cs-week1-projects",
        "peekOfCode": "s = \"abacaba\"\n# def threeCharsDistinct(s):\n#     count = 0\n#\n#     for i in range(len(s)):\n#         if i < 6:\n#             if s[0] != s[i + 1] and s[i] != s[i + 2] and s[i + 1] != s[i + 2]:\n#                 count += 1\n#     print(count)\ndef threeCharsDistinct(s):",
        "detail": "_BACKUP..gitbook.assets.cs-week1-projects",
        "documentation": {}
    },
    {
        "label": "sentence",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-week1-projects",
        "description": "_BACKUP..gitbook.assets.cs-week1-projects",
        "peekOfCode": "sentence = \"Man bites dog\"\ndef reverseSentence(sentence):\n    words_array = sentence.split(\" \")\n    words_reversed = \" \".join(reversed(words_array))\n    return words_reversed\n# print(reverseSentence(sentence))\npasscode = \"1111\"\nattempts = [\n    \"1111\",\n    \"4444\",",
        "detail": "_BACKUP..gitbook.assets.cs-week1-projects",
        "documentation": {}
    },
    {
        "label": "passcode",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-week1-projects",
        "description": "_BACKUP..gitbook.assets.cs-week1-projects",
        "peekOfCode": "passcode = \"1111\"\nattempts = [\n    \"1111\",\n    \"4444\",\n    \"9999\",\n    \"3333\",\n    \"8888\",\n    \"2222\",\n    \"7777\",\n    \"0000\",",
        "detail": "_BACKUP..gitbook.assets.cs-week1-projects",
        "documentation": {}
    },
    {
        "label": "attempts",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-week1-projects",
        "description": "_BACKUP..gitbook.assets.cs-week1-projects",
        "peekOfCode": "attempts = [\n    \"1111\",\n    \"4444\",\n    \"9999\",\n    \"3333\",\n    \"8888\",\n    \"2222\",\n    \"7777\",\n    \"0000\",\n    \"6666\",",
        "detail": "_BACKUP..gitbook.assets.cs-week1-projects",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-week1-projects",
        "description": "_BACKUP..gitbook.assets.cs-week1-projects",
        "peekOfCode": "n = 412\ndef digitSumsDifference(n):\n    evens_sum = 0\n    odds_sum = 0\n    difference = 0\n    evens = []\n    odds = []\n    for num in str(n):\n        if int(num) % 2 == 0:\n            evens.append(int(num))",
        "detail": "_BACKUP..gitbook.assets.cs-week1-projects",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-week1-projects",
        "description": "_BACKUP..gitbook.assets.cs-week1-projects",
        "peekOfCode": "n = 123456\ndef digitsManipulations(n):\n    nums = []\n    for num in str(n):\n        nums.append(int(num))\n    return math.prod(nums) - sum(nums)\n#\n# print(digitsManipulations(n))\ns = \"abcde\"\ndef countVowelConsonant(s):",
        "detail": "_BACKUP..gitbook.assets.cs-week1-projects",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-week1-projects",
        "description": "_BACKUP..gitbook.assets.cs-week1-projects",
        "peekOfCode": "s = \"abcde\"\ndef countVowelConsonant(s):\n    vowel_count = 0\n    const_count = 0\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for letter in s:\n        if letter in vowels:\n            vowel_count += 1\n        else:\n            const_count += 2",
        "detail": "_BACKUP..gitbook.assets.cs-week1-projects",
        "documentation": {}
    },
    {
        "label": "remove_duplicates",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-week2-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "def remove_duplicates(nums):\n    # Your code here\n    i = 0\n    while i < len(nums) - 1:\n        if nums[i] == nums[i + 1]:\n            nums.pop(i + 1)\n        else:\n            i = i + 1\n    return nums\n\"\"\"",
        "detail": "_BACKUP..gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "contains_duplicate",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-week2-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "def contains_duplicate(nums):\n    # Your code here\n    num_set = set(nums)\n    if len(num_set) == len(nums):\n        return False\n    else:\n        return True\n# print(contains_duplicate([1, 3, 3, 2, 1]))\n\"\"\"\nGiven two strings `a` and `b`, write a function to determine if `a` is an",
        "detail": "_BACKUP..gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "is_anagram",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-week2-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "def is_anagram(a, b):\n    # Your code here\n    pass\n# # \"\"\"\n# # Example One\n# # \"\"\"\n# # my_list1 = [1, 2, 3, 4, 5, 6]\n# # my_list2 = my_list1\n# # # How would you verify that my_list1 and my_list2 have the same identity?\n# # print(id(my_list1) == id(my_list2))",
        "detail": "_BACKUP..gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "fibonacci",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-week2-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "def fibonacci(n):\n    lst = [0, 1]\n    for i in range(2, n):\n        lst.append(lst[i - 2] + lst[i - 1])\n    return lst[n - 1]\n# # O(n)\n#\n# \"\"\"\n# Use Big O notation to classify the space complexity of the function below.\n# \"\"\"",
        "detail": "_BACKUP..gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "fibonacci_two",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-week2-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "def fibonacci_two(n):\n    x, y, z = 0, 1, None\n    if n == 0:\n        return x\n    if n == 1:\n        return y\n    for i in range(2, n):\n        z = x + y\n        x, y = y, z\n    return z",
        "detail": "_BACKUP..gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "do_something",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-week2-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "def do_something(n):\n    lst = []\n    for i in range(n):\n        for j in range(n):\n            lst.append(i + j)\n    return lst\n# O(n^2)\n# numbers = [2, 0, 0, 0]\n#\n#",
        "detail": "_BACKUP..gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "removeEvens",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-week2-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "def removeEvens(numbers):\n    return [num for num in numbers if num % 2 != 0]\n# below code didn't pass tests above did\n# for num in numbers:\n#     if num % 2 == 0 and num != 0:\n#         numbers.remove(num)\n# return numbers\n# print(removeEvens(numbers))\nimport statistics\nsequence = [-1, 3, -2, 2]",
        "detail": "_BACKUP..gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "arrayMedian",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-week2-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "def arrayMedian(sequence):\n    return statistics.median(sequence)\n# print(arrayMedian(sequence))\n#\n# s = \"TuVwXYZ\"\n#\n# # s = \"ABCDEFFDEfghCBA\"\n#\n# # def originalIncreasingSubstrings(s):\n# #     string = ''",
        "detail": "_BACKUP..gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "increasingSubstrings",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-week2-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "def increasingSubstrings(s):\n    string = ''\n    subs = []\n    i = 0\n    if len(s) == 1:\n        subs.append(s[0])\n    else:\n        for i in range(len(s) - 1):\n            # print(s[i])\n            if not string.startswith(s[i]):",
        "detail": "_BACKUP..gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "additionWithoutCarrying",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-week2-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "def additionWithoutCarrying(param1, param2):\n    # set variable to hold the added row answers\n    result = []\n    # function to find a digit in a number\n    def find_digit(number, place):\n        return number // 10 ** place % 10\n    # get larger number\n    larger = None\n    if param1 > param2:\n        larger = param1",
        "detail": "_BACKUP..gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "evenDigitsNumber",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-week2-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "def evenDigitsNumber(a):\n    even_count = 0\n    for group in a:\n        if len(str(group)) % 2 == 0:\n            even_count += 1\n    return even_count\n# print(evenDigitsNumber(a))\n# You're writing a new programming language and you'd like it to have the capability of splitting a string into substrings with limited characters. More specifically, we'll call a substring good if the absolute difference in ASCII codes between any two of its characters is less than or equal to k.\n#\n# For example, if k = 3, then the string \"bad\" would be considered good, since the greatest difference in ASCII codes is 3 (between the a and d characters). The string \"nice\" would not be considered good, since there's a difference of 11 between the c and n characters.",
        "detail": "_BACKUP..gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "increasingSubstrings",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-week2-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "def increasingSubstrings(s):\n    string = ''\n    subs = []\n    i = 0\n    if len(s) == 1:\n        subs.append(s[0])\n    else:\n        for i in range(len(s) - 1):\n            # print(s[i])\n            if not string.startswith(s[i]):",
        "detail": "_BACKUP..gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "goodSubstrings",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-week2-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "def goodSubstrings(strToSplit, k):\n    smallest = ord(strToSplit[0])\n    largest = 0\n    subs = []\n    s = ''\n    for i in range(len(strToSplit)):\n        # print('Letter', strToSplit[i],\n        #       ord(strToSplit[i]))\n        # print(f'smallest: {smallest} largest: {largest}')\n        if ord(strToSplit[i]) < smallest:",
        "detail": "_BACKUP..gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "to_lower_case",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-week2-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "def to_lower_case(string):\n    result = ''\n    for i in range(len(string)):\n        if ord(string[i]) <= 90 or ord(string[i]) <= 65:\n            result += chr(ord(string[i]) + 32)\n        else:\n            result += string[i]\n    return result\n# print(to_lower_case(string))\n\"\"\"",
        "detail": "_BACKUP..gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "roman_to_integer",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-week2-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "def roman_to_integer(roman):\n    numerals = {\n        'I': 1,\n        'V': 5,\n        'X': 10,\n        'L': 50,\n        'C': 100,\n        'D': 500,\n        'M': 1000,\n        'IV': 4,",
        "detail": "_BACKUP..gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "find_lucky",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-week2-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "def find_lucky(lst):\n    lucky = []\n    for num in lst:\n        if num == lst.count(num):\n            lucky.append(num)\n    if not lucky:\n        return -1\n    return max(lucky)\n# print(find_lucky(lst))",
        "detail": "_BACKUP..gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "sequence",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-week2-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "sequence = [-1, 3, -2, 2]\ndef arrayMedian(sequence):\n    return statistics.median(sequence)\n# print(arrayMedian(sequence))\n#\n# s = \"TuVwXYZ\"\n#\n# # s = \"ABCDEFFDEfghCBA\"\n#\n# # def originalIncreasingSubstrings(s):",
        "detail": "_BACKUP..gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-week2-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "s = \"f\"\ndef increasingSubstrings(s):\n    string = ''\n    subs = []\n    i = 0\n    if len(s) == 1:\n        subs.append(s[0])\n    else:\n        for i in range(len(s) - 1):\n            # print(s[i])",
        "detail": "_BACKUP..gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "param1",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-week2-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "param1 = 456\nparam2 = 1734\ndef additionWithoutCarrying(param1, param2):\n    # set variable to hold the added row answers\n    result = []\n    # function to find a digit in a number\n    def find_digit(number, place):\n        return number // 10 ** place % 10\n    # get larger number\n    larger = None",
        "detail": "_BACKUP..gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "param2",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-week2-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "param2 = 1734\ndef additionWithoutCarrying(param1, param2):\n    # set variable to hold the added row answers\n    result = []\n    # function to find a digit in a number\n    def find_digit(number, place):\n        return number // 10 ** place % 10\n    # get larger number\n    larger = None\n    if param1 > param2:",
        "detail": "_BACKUP..gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-week2-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "a = [12, 134, 111, 1111, 10]\ndef evenDigitsNumber(a):\n    even_count = 0\n    for group in a:\n        if len(str(group)) % 2 == 0:\n            even_count += 1\n    return even_count\n# print(evenDigitsNumber(a))\n# You're writing a new programming language and you'd like it to have the capability of splitting a string into substrings with limited characters. More specifically, we'll call a substring good if the absolute difference in ASCII codes between any two of its characters is less than or equal to k.\n#",
        "detail": "_BACKUP..gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "strToSplit",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-week2-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "strToSplit = \"aaabaaabb\"\nk = 0\nstrToSplit = \"aaabaaabb\"\nk = 1\nstrToSplit = \"aaabzaaabb\"\nk = 5\ndef goodSubstrings(strToSplit, k):\n    smallest = ord(strToSplit[0])\n    largest = 0\n    subs = []",
        "detail": "_BACKUP..gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-week2-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "k = 0\nstrToSplit = \"aaabaaabb\"\nk = 1\nstrToSplit = \"aaabzaaabb\"\nk = 5\ndef goodSubstrings(strToSplit, k):\n    smallest = ord(strToSplit[0])\n    largest = 0\n    subs = []\n    s = ''",
        "detail": "_BACKUP..gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "strToSplit",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-week2-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "strToSplit = \"aaabaaabb\"\nk = 1\nstrToSplit = \"aaabzaaabb\"\nk = 5\ndef goodSubstrings(strToSplit, k):\n    smallest = ord(strToSplit[0])\n    largest = 0\n    subs = []\n    s = ''\n    for i in range(len(strToSplit)):",
        "detail": "_BACKUP..gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-week2-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "k = 1\nstrToSplit = \"aaabzaaabb\"\nk = 5\ndef goodSubstrings(strToSplit, k):\n    smallest = ord(strToSplit[0])\n    largest = 0\n    subs = []\n    s = ''\n    for i in range(len(strToSplit)):\n        # print('Letter', strToSplit[i],",
        "detail": "_BACKUP..gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "strToSplit",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-week2-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "strToSplit = \"aaabzaaabb\"\nk = 5\ndef goodSubstrings(strToSplit, k):\n    smallest = ord(strToSplit[0])\n    largest = 0\n    subs = []\n    s = ''\n    for i in range(len(strToSplit)):\n        # print('Letter', strToSplit[i],\n        #       ord(strToSplit[i]))",
        "detail": "_BACKUP..gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-week2-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "k = 5\ndef goodSubstrings(strToSplit, k):\n    smallest = ord(strToSplit[0])\n    largest = 0\n    subs = []\n    s = ''\n    for i in range(len(strToSplit)):\n        # print('Letter', strToSplit[i],\n        #       ord(strToSplit[i]))\n        # print(f'smallest: {smallest} largest: {largest}')",
        "detail": "_BACKUP..gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-week2-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "string = \"LambdaSchool\"\ndef to_lower_case(string):\n    result = ''\n    for i in range(len(string)):\n        if ord(string[i]) <= 90 or ord(string[i]) <= 65:\n            result += chr(ord(string[i]) + 32)\n        else:\n            result += string[i]\n    return result\n# print(to_lower_case(string))",
        "detail": "_BACKUP..gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "roman",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-week2-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "roman = 'IV'\nroman = 'XII'\nroman = \"MCMLXXXIV\"\n#  TODO finish this!\ndef roman_to_integer(roman):\n    numerals = {\n        'I': 1,\n        'V': 5,\n        'X': 10,\n        'L': 50,",
        "detail": "_BACKUP..gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "roman",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-week2-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "roman = 'XII'\nroman = \"MCMLXXXIV\"\n#  TODO finish this!\ndef roman_to_integer(roman):\n    numerals = {\n        'I': 1,\n        'V': 5,\n        'X': 10,\n        'L': 50,\n        'C': 100,",
        "detail": "_BACKUP..gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "roman",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-week2-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "roman = \"MCMLXXXIV\"\n#  TODO finish this!\ndef roman_to_integer(roman):\n    numerals = {\n        'I': 1,\n        'V': 5,\n        'X': 10,\n        'L': 50,\n        'C': 100,\n        'D': 500,",
        "detail": "_BACKUP..gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "lst",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-week2-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-week2-projects (1)",
        "peekOfCode": "lst = [2, 2, 3, 3, 3, 4, 4, 4, 4]\n#  O(n^2) because counting in the loop...\ndef find_lucky(lst):\n    lucky = []\n    for num in lst:\n        if num == lst.count(num):\n            lucky.append(num)\n    if not lucky:\n        return -1\n    return max(lucky)",
        "detail": "_BACKUP..gitbook.assets.cs-week2-projects (1)",
        "documentation": {}
    },
    {
        "label": "remove_duplicates",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-week2-projects",
        "description": "_BACKUP..gitbook.assets.cs-week2-projects",
        "peekOfCode": "def remove_duplicates(nums):\n    # Your code here\n    i = 0\n    while i < len(nums) - 1:\n        if nums[i] == nums[i + 1]:\n            nums.pop(i + 1)\n        else:\n            i = i + 1\n    return nums\n\"\"\"",
        "detail": "_BACKUP..gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "contains_duplicate",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-week2-projects",
        "description": "_BACKUP..gitbook.assets.cs-week2-projects",
        "peekOfCode": "def contains_duplicate(nums):\n    # Your code here\n    num_set = set(nums)\n    if len(num_set) == len(nums):\n        return False\n    else:\n        return True\n# print(contains_duplicate([1, 3, 3, 2, 1]))\n\"\"\"\nGiven two strings `a` and `b`, write a function to determine if `a` is an",
        "detail": "_BACKUP..gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "is_anagram",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-week2-projects",
        "description": "_BACKUP..gitbook.assets.cs-week2-projects",
        "peekOfCode": "def is_anagram(a, b):\n    # Your code here\n    pass\n# # \"\"\"\n# # Example One\n# # \"\"\"\n# # my_list1 = [1, 2, 3, 4, 5, 6]\n# # my_list2 = my_list1\n# # # How would you verify that my_list1 and my_list2 have the same identity?\n# # print(id(my_list1) == id(my_list2))",
        "detail": "_BACKUP..gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "fibonacci",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-week2-projects",
        "description": "_BACKUP..gitbook.assets.cs-week2-projects",
        "peekOfCode": "def fibonacci(n):\n    lst = [0, 1]\n    for i in range(2, n):\n        lst.append(lst[i - 2] + lst[i - 1])\n    return lst[n - 1]\n# # O(n)\n#\n# \"\"\"\n# Use Big O notation to classify the space complexity of the function below.\n# \"\"\"",
        "detail": "_BACKUP..gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "fibonacci_two",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-week2-projects",
        "description": "_BACKUP..gitbook.assets.cs-week2-projects",
        "peekOfCode": "def fibonacci_two(n):\n    x, y, z = 0, 1, None\n    if n == 0:\n        return x\n    if n == 1:\n        return y\n    for i in range(2, n):\n        z = x + y\n        x, y = y, z\n    return z",
        "detail": "_BACKUP..gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "do_something",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-week2-projects",
        "description": "_BACKUP..gitbook.assets.cs-week2-projects",
        "peekOfCode": "def do_something(n):\n    lst = []\n    for i in range(n):\n        for j in range(n):\n            lst.append(i + j)\n    return lst\n# O(n^2)\n# numbers = [2, 0, 0, 0]\n#\n#",
        "detail": "_BACKUP..gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "removeEvens",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-week2-projects",
        "description": "_BACKUP..gitbook.assets.cs-week2-projects",
        "peekOfCode": "def removeEvens(numbers):\n    return [num for num in numbers if num % 2 != 0]\n# below code didn't pass tests above did\n# for num in numbers:\n#     if num % 2 == 0 and num != 0:\n#         numbers.remove(num)\n# return numbers\n# print(removeEvens(numbers))\nimport statistics\nsequence = [-1, 3, -2, 2]",
        "detail": "_BACKUP..gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "arrayMedian",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-week2-projects",
        "description": "_BACKUP..gitbook.assets.cs-week2-projects",
        "peekOfCode": "def arrayMedian(sequence):\n    return statistics.median(sequence)\n# print(arrayMedian(sequence))\n#\n# s = \"TuVwXYZ\"\n#\n# # s = \"ABCDEFFDEfghCBA\"\n#\n# # def originalIncreasingSubstrings(s):\n# #     string = ''",
        "detail": "_BACKUP..gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "increasingSubstrings",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-week2-projects",
        "description": "_BACKUP..gitbook.assets.cs-week2-projects",
        "peekOfCode": "def increasingSubstrings(s):\n    string = \"\"\n    subs = []\n    i = 0\n    if len(s) == 1:\n        subs.append(s[0])\n    else:\n        for i in range(len(s) - 1):\n            # print(s[i])\n            if not string.startswith(s[i]):",
        "detail": "_BACKUP..gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "additionWithoutCarrying",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-week2-projects",
        "description": "_BACKUP..gitbook.assets.cs-week2-projects",
        "peekOfCode": "def additionWithoutCarrying(param1, param2):\n    # set variable to hold the added row answers\n    result = []\n    # function to find a digit in a number\n    def find_digit(number, place):\n        return number // 10 ** place % 10\n    # get larger number\n    larger = None\n    if param1 > param2:\n        larger = param1",
        "detail": "_BACKUP..gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "evenDigitsNumber",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-week2-projects",
        "description": "_BACKUP..gitbook.assets.cs-week2-projects",
        "peekOfCode": "def evenDigitsNumber(a):\n    even_count = 0\n    for group in a:\n        if len(str(group)) % 2 == 0:\n            even_count += 1\n    return even_count\n# print(evenDigitsNumber(a))\n# You're writing a new programming language and you'd like it to have the capability of splitting a string into substrings with limited characters. More specifically, we'll call a substring good if the absolute difference in ASCII codes between any two of its characters is less than or equal to k.\n#\n# For example, if k = 3, then the string \"bad\" would be considered good, since the greatest difference in ASCII codes is 3 (between the a and d characters). The string \"nice\" would not be considered good, since there's a difference of 11 between the c and n characters.",
        "detail": "_BACKUP..gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "increasingSubstrings",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-week2-projects",
        "description": "_BACKUP..gitbook.assets.cs-week2-projects",
        "peekOfCode": "def increasingSubstrings(s):\n    string = \"\"\n    subs = []\n    i = 0\n    if len(s) == 1:\n        subs.append(s[0])\n    else:\n        for i in range(len(s) - 1):\n            # print(s[i])\n            if not string.startswith(s[i]):",
        "detail": "_BACKUP..gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "goodSubstrings",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-week2-projects",
        "description": "_BACKUP..gitbook.assets.cs-week2-projects",
        "peekOfCode": "def goodSubstrings(strToSplit, k):\n    smallest = ord(strToSplit[0])\n    largest = 0\n    subs = []\n    s = \"\"\n    for i in range(len(strToSplit)):\n        # print('Letter', strToSplit[i],\n        #       ord(strToSplit[i]))\n        # print(f'smallest: {smallest} largest: {largest}')\n        if ord(strToSplit[i]) < smallest:",
        "detail": "_BACKUP..gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "to_lower_case",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-week2-projects",
        "description": "_BACKUP..gitbook.assets.cs-week2-projects",
        "peekOfCode": "def to_lower_case(string):\n    result = \"\"\n    for i in range(len(string)):\n        if ord(string[i]) <= 90 or ord(string[i]) <= 65:\n            result += chr(ord(string[i]) + 32)\n        else:\n            result += string[i]\n    return result\n# print(to_lower_case(string))\n\"\"\"",
        "detail": "_BACKUP..gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "roman_to_integer",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-week2-projects",
        "description": "_BACKUP..gitbook.assets.cs-week2-projects",
        "peekOfCode": "def roman_to_integer(roman):\n    numerals = {\n        \"I\": 1,\n        \"V\": 5,\n        \"X\": 10,\n        \"L\": 50,\n        \"C\": 100,\n        \"D\": 500,\n        \"M\": 1000,\n        \"IV\": 4,",
        "detail": "_BACKUP..gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "find_lucky",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-week2-projects",
        "description": "_BACKUP..gitbook.assets.cs-week2-projects",
        "peekOfCode": "def find_lucky(lst):\n    lucky = []\n    for num in lst:\n        if num == lst.count(num):\n            lucky.append(num)\n    if not lucky:\n        return -1\n    return max(lucky)\n# print(find_lucky(lst))",
        "detail": "_BACKUP..gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "sequence",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-week2-projects",
        "description": "_BACKUP..gitbook.assets.cs-week2-projects",
        "peekOfCode": "sequence = [-1, 3, -2, 2]\ndef arrayMedian(sequence):\n    return statistics.median(sequence)\n# print(arrayMedian(sequence))\n#\n# s = \"TuVwXYZ\"\n#\n# # s = \"ABCDEFFDEfghCBA\"\n#\n# # def originalIncreasingSubstrings(s):",
        "detail": "_BACKUP..gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-week2-projects",
        "description": "_BACKUP..gitbook.assets.cs-week2-projects",
        "peekOfCode": "s = \"f\"\ndef increasingSubstrings(s):\n    string = \"\"\n    subs = []\n    i = 0\n    if len(s) == 1:\n        subs.append(s[0])\n    else:\n        for i in range(len(s) - 1):\n            # print(s[i])",
        "detail": "_BACKUP..gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "param1",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-week2-projects",
        "description": "_BACKUP..gitbook.assets.cs-week2-projects",
        "peekOfCode": "param1 = 456\nparam2 = 1734\ndef additionWithoutCarrying(param1, param2):\n    # set variable to hold the added row answers\n    result = []\n    # function to find a digit in a number\n    def find_digit(number, place):\n        return number // 10 ** place % 10\n    # get larger number\n    larger = None",
        "detail": "_BACKUP..gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "param2",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-week2-projects",
        "description": "_BACKUP..gitbook.assets.cs-week2-projects",
        "peekOfCode": "param2 = 1734\ndef additionWithoutCarrying(param1, param2):\n    # set variable to hold the added row answers\n    result = []\n    # function to find a digit in a number\n    def find_digit(number, place):\n        return number // 10 ** place % 10\n    # get larger number\n    larger = None\n    if param1 > param2:",
        "detail": "_BACKUP..gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-week2-projects",
        "description": "_BACKUP..gitbook.assets.cs-week2-projects",
        "peekOfCode": "a = [12, 134, 111, 1111, 10]\ndef evenDigitsNumber(a):\n    even_count = 0\n    for group in a:\n        if len(str(group)) % 2 == 0:\n            even_count += 1\n    return even_count\n# print(evenDigitsNumber(a))\n# You're writing a new programming language and you'd like it to have the capability of splitting a string into substrings with limited characters. More specifically, we'll call a substring good if the absolute difference in ASCII codes between any two of its characters is less than or equal to k.\n#",
        "detail": "_BACKUP..gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "strToSplit",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-week2-projects",
        "description": "_BACKUP..gitbook.assets.cs-week2-projects",
        "peekOfCode": "strToSplit = \"aaabaaabb\"\nk = 0\nstrToSplit = \"aaabaaabb\"\nk = 1\nstrToSplit = \"aaabzaaabb\"\nk = 5\ndef goodSubstrings(strToSplit, k):\n    smallest = ord(strToSplit[0])\n    largest = 0\n    subs = []",
        "detail": "_BACKUP..gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-week2-projects",
        "description": "_BACKUP..gitbook.assets.cs-week2-projects",
        "peekOfCode": "k = 0\nstrToSplit = \"aaabaaabb\"\nk = 1\nstrToSplit = \"aaabzaaabb\"\nk = 5\ndef goodSubstrings(strToSplit, k):\n    smallest = ord(strToSplit[0])\n    largest = 0\n    subs = []\n    s = \"\"",
        "detail": "_BACKUP..gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "strToSplit",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-week2-projects",
        "description": "_BACKUP..gitbook.assets.cs-week2-projects",
        "peekOfCode": "strToSplit = \"aaabaaabb\"\nk = 1\nstrToSplit = \"aaabzaaabb\"\nk = 5\ndef goodSubstrings(strToSplit, k):\n    smallest = ord(strToSplit[0])\n    largest = 0\n    subs = []\n    s = \"\"\n    for i in range(len(strToSplit)):",
        "detail": "_BACKUP..gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-week2-projects",
        "description": "_BACKUP..gitbook.assets.cs-week2-projects",
        "peekOfCode": "k = 1\nstrToSplit = \"aaabzaaabb\"\nk = 5\ndef goodSubstrings(strToSplit, k):\n    smallest = ord(strToSplit[0])\n    largest = 0\n    subs = []\n    s = \"\"\n    for i in range(len(strToSplit)):\n        # print('Letter', strToSplit[i],",
        "detail": "_BACKUP..gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "strToSplit",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-week2-projects",
        "description": "_BACKUP..gitbook.assets.cs-week2-projects",
        "peekOfCode": "strToSplit = \"aaabzaaabb\"\nk = 5\ndef goodSubstrings(strToSplit, k):\n    smallest = ord(strToSplit[0])\n    largest = 0\n    subs = []\n    s = \"\"\n    for i in range(len(strToSplit)):\n        # print('Letter', strToSplit[i],\n        #       ord(strToSplit[i]))",
        "detail": "_BACKUP..gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-week2-projects",
        "description": "_BACKUP..gitbook.assets.cs-week2-projects",
        "peekOfCode": "k = 5\ndef goodSubstrings(strToSplit, k):\n    smallest = ord(strToSplit[0])\n    largest = 0\n    subs = []\n    s = \"\"\n    for i in range(len(strToSplit)):\n        # print('Letter', strToSplit[i],\n        #       ord(strToSplit[i]))\n        # print(f'smallest: {smallest} largest: {largest}')",
        "detail": "_BACKUP..gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-week2-projects",
        "description": "_BACKUP..gitbook.assets.cs-week2-projects",
        "peekOfCode": "string = \"LambdaSchool\"\ndef to_lower_case(string):\n    result = \"\"\n    for i in range(len(string)):\n        if ord(string[i]) <= 90 or ord(string[i]) <= 65:\n            result += chr(ord(string[i]) + 32)\n        else:\n            result += string[i]\n    return result\n# print(to_lower_case(string))",
        "detail": "_BACKUP..gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "roman",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-week2-projects",
        "description": "_BACKUP..gitbook.assets.cs-week2-projects",
        "peekOfCode": "roman = \"IV\"\nroman = \"XII\"\nroman = \"MCMLXXXIV\"\n#  TODO finish this!\ndef roman_to_integer(roman):\n    numerals = {\n        \"I\": 1,\n        \"V\": 5,\n        \"X\": 10,\n        \"L\": 50,",
        "detail": "_BACKUP..gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "roman",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-week2-projects",
        "description": "_BACKUP..gitbook.assets.cs-week2-projects",
        "peekOfCode": "roman = \"XII\"\nroman = \"MCMLXXXIV\"\n#  TODO finish this!\ndef roman_to_integer(roman):\n    numerals = {\n        \"I\": 1,\n        \"V\": 5,\n        \"X\": 10,\n        \"L\": 50,\n        \"C\": 100,",
        "detail": "_BACKUP..gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "roman",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-week2-projects",
        "description": "_BACKUP..gitbook.assets.cs-week2-projects",
        "peekOfCode": "roman = \"MCMLXXXIV\"\n#  TODO finish this!\ndef roman_to_integer(roman):\n    numerals = {\n        \"I\": 1,\n        \"V\": 5,\n        \"X\": 10,\n        \"L\": 50,\n        \"C\": 100,\n        \"D\": 500,",
        "detail": "_BACKUP..gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "lst",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-week2-projects",
        "description": "_BACKUP..gitbook.assets.cs-week2-projects",
        "peekOfCode": "lst = [2, 2, 3, 3, 3, 4, 4, 4, 4]\n#  O(n^2) because counting in the loop...\ndef find_lucky(lst):\n    lucky = []\n    for num in lst:\n        if num == lst.count(num):\n            lucky.append(num)\n    if not lucky:\n        return -1\n    return max(lucky)",
        "detail": "_BACKUP..gitbook.assets.cs-week2-projects",
        "documentation": {}
    },
    {
        "label": "LinkedListNode",
        "kind": 6,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "class LinkedListNode():\n    def __init__(self, value):\n        self.value = value\n        self.next  = None\nx = LinkedListNode('X')\ny = LinkedListNode('Y')\nz = LinkedListNode('Z')\nx.next = y\ny.next = z\ndelete_node(y)",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "LinkedListNode",
        "kind": 6,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "class LinkedListNode():\n    def __init__(self, value):\n        self.value = value\n        self.next = None\ndef delete_node(node_to_delete):\n    next = node_to_delete.next\n    next.next = None\n    node_to_delete.value = next.value\n    node_to_delete.next = next.next\nx = LinkedListNode('X')",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "LinkedListNode",
        "kind": 6,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "class LinkedListNode():\n    def __init__(self, value):\n        self.value = value\n        self.next = None\ndef reverse(head_of_list):\n    current_node = head_of_list\n    previous_node = None\n    next_node = None\n    # Until we have 'fallen off' the end of the list\n    while current_node:",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "class ListNode(object):\n    def __init__(self, x):\n        self.value = x\n        self.next = None\n[1, 3, 4, 6]\n\"\"\"\nNote: Your solution should have O(n) time complexity, where n is the number of elements in l, since this is what you will be asked to accomplish in an interview.\nYou have a singly linked list l, which is sorted in strictly increasing order, and an integer value. Add value to the list l, preserving its original sorting.\nNote: in examples below and tests preview linked lists are presented as arrays just for simplicity of visualization: in real data you will be given a head node l of the linked list\nExample",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "class ListNode(object):\n    def __init__(self, x):\n        self.value = x\n        self.next = None\ndef mergeTwoLinkedLists(l1, l2):\n    # create empty node to hold the new merged list\n    merged_node = ListNode(0)\n    # end will hold the end node\n    end = merged_node\n    while True:",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "class ListNode(object):\n    def __init__(self, x):\n        self.value = x\n        self.next = None\ndef reverseNodesInKGroups(l, k):\n    # create an empty node to hold the new list\n    new_node = ListNode(0)\n    # set the next value to the list\n    new_node.next = l\n    # set the previous node to the new list",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "LinkedListNode",
        "kind": 6,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "class LinkedListNode:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\nclass Queue:\n    def __init__(self):\n        self.front = None\n        self.rear = None\n    def enqueue(self, item):\n        new_node = LinkedListNode(item)",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "Queue",
        "kind": 6,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "class Queue:\n    def __init__(self):\n        self.front = None\n        self.rear = None\n    def enqueue(self, item):\n        new_node = LinkedListNode(item)\n        # check if queue is empty\n        if self.is_empty():\n            self.front = new_node\n            self.rear = new_node",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "class Stack:\n    def __init__(self):\n        self.data = []\n    def push(self, item):\n        self.data.append(item)\n    # my code for peek method\n    def peek(self, item):\n        return self.data[-1]\n    def pop(self):\n        if len(self.data) > 0:",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "LinkedListNode",
        "kind": 6,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "class LinkedListNode:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\nclass Stack:\n    def __init__(self):\n        self.top = None\n    def push(self, data):\n        # create new node with data\n        new_node = LinkedListNode(data)",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "class Stack:\n    def __init__(self):\n        self.top = None\n    def push(self, data):\n        # create new node with data\n        new_node = LinkedListNode(data)\n        # set current top to new node's next\n        new_node.next = self.top\n        # reset the top pointer to the new node\n        self.top = new_node",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "class Stack(object):\n    def __init__(self):\n        \"\"\"Initialize an empty stack\"\"\"\n        self.items = []\n    def push(self, item):\n        \"\"\"Push a new item onto the stack\"\"\"\n        self.items.append(item)\n    def pop(self):\n        \"\"\"Remove and return the last item\"\"\"\n        # If the stack is empty, return None",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "MaxStack",
        "kind": 6,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "class MaxStack(object):\n    def __init__(self):\n        # Your code here\n        self.stack = Stack()\n        # self.head = []\n        self.max_stack = Stack()\n    def push(self, item):\n        \"\"\"Add a new item onto the top of our stack.\"\"\"\n        # Your code here\n        # self.head.append(item)",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "class Stack:\n    def __init__(self):\n        self.data = []\n    def push(self, item):\n        self.data.append(item)\n    def pop(self):\n        if len(self.data) > 0:\n            return self.data.pop()\n        return \"The stack is empty\"\nclass QueueTwoStacks:",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "QueueTwoStacks",
        "kind": 6,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "class QueueTwoStacks:\n    def __init__(self):\n        # Your code here\n        self.stack1 = Stack()\n        self.stack2 = Stack()\n    def enqueue(self, item):\n        # Your code here\n        self.stack1.push(item)\n    def dequeue(self):\n        # Your code here",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "class Stack:\n    def __init__(self):\n        self.items = []\n    def isEmpty(self):\n        return self.items == []\n    def push(self, item):\n        self.items.append(item)\n    def pop(self):\n        return self.items.pop()\ndef queueOnStacks(requests):",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "pivot_index",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def pivot_index(nums):\n    if len(nums) <= 1:\n        return -1\n    left = 0\n    right = sum(nums)\n    for i in range(len(nums)):\n        right -= nums[i]\n        if right == left:\n            return i\n        left += nums[i]",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "plus_one",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def plus_one(digits):\n    # check the last digit if its not 9 we just add 1\n    # if it is a 9 make it 0\n    # go left check 2nd to last if its not a 9 add 1\n    # if it is a 9\n    index = len(digits) - 1\n    while index >= 0 and digits[index] == 9:\n        digits[index] = 0\n        index -= 1\n    if index == -1:",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "buyAndSellStock",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def buyAndSellStock(prices):\n    length = len(prices)\n    # iterate array, for each item after subtract and store the amount as\n    # highest profit.. replace if needed with a higher profit\n    if prices == sorted(prices, reverse=True) or len(prices) < 2:\n        return 0\n    highest_profit = prices[1] - prices[0]\n    smallest_number = prices[0]\n    for i in range(1, length):\n        # only check if the selected number minus the smallest number before",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "alphabeticShift",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def alphabeticShift(inputString):\n    new_string = ''\n    for letter in inputString:\n        new_letter = ord(letter) + 1\n        if new_letter == 123:\n            new_letter = 97\n        new_string += chr(new_letter)\n    return new_string\n# print(alphabeticShift(inputString))\n\"\"\"",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "validParenthesesSequence",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def validParenthesesSequence(s):\n    check = []\n    if s == '':\n        return True\n    if s[0] == ')':\n        return False\n    for paren in s:\n        if paren == '(':\n            check.append(paren)\n        else:",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "delete_node",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def delete_node(node_to_delete):\n    next = node_to_delete.next\n    next.next = None\n    node_to_delete.value = next.value\n    node_to_delete.next = next.next\nx = LinkedListNode('X')\ny = LinkedListNode('Y')\nz = LinkedListNode('Z')\nx.next = y\ny.next = z",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "reverse",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def reverse(head_of_list):\n    current_node = head_of_list\n    previous_node = None\n    next_node = None\n    # Until we have 'fallen off' the end of the list\n    while current_node:\n        # Copy a pointer to the next element\n        # before we overwrite current_node.next\n        next_node = current_node.next\n        # Reverse the 'next' pointer",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "insertValueIntoSortedLinkedList",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def insertValueIntoSortedLinkedList(l, value):\n    # create a new node with the value\n    node = ListNode(value)\n    # if there is no list return the new node\n    if l == None:\n        return node\n    else:\n        # else if the list.value (first item in the list) > the new value\n        if l.value > value:\n            # set new values as the first item in the list",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "mergeTwoLinkedLists",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def mergeTwoLinkedLists(l1, l2):\n    # create empty node to hold the new merged list\n    merged_node = ListNode(0)\n    # end will hold the end node\n    end = merged_node\n    while True:\n        # if either list becomes empty join lists\n        if l1 is None:\n            end.next = l2\n            break",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "reverseNodesInKGroups",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def reverseNodesInKGroups(l, k):\n    # create an empty node to hold the new list\n    new_node = ListNode(0)\n    # set the next value to the list\n    new_node.next = l\n    # set the previous node to the new list\n    prev = new_node\n    while True:\n        # set the start to the new node next\n        start = prev.next",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "reverse_list",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def reverse_list(start, end):\n    # set the last reversed group to the new start\n    old_reversed = start\n    # set the new current to the start\n    current = start\n    # set next node to the node start is pointing to\n    next_node = start.next\n    # while the current node is not the last node\n    while current != end:\n        # iterate",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "is_valid",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def is_valid(code):\n    check = []\n    if code == '':\n        return True\n    if code[0] == ')' or code[0] == '}' or code[0] == ']':\n        return False\n    for paren in code:\n        if paren == ' ':\n            continue\n        if paren == '(' or paren == '{' or paren == '[':",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "queueOnStacks",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def queueOnStacks(requests):\n    left = Stack()\n    right = Stack()\n    def insert(x):\n        left.push(x)\n        print('queue:', left.items)\n    def remove():\n        if len(right.items) == 0:\n            while len(left.items) > 0:\n                shifted = left.pop()",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "validBracketSequence",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def validBracketSequence(sequence):\n    pairs = dict(zip('(,[,{', '),],}'))\n    stack = []\n    for item in sequence:\n        if item in pairs:\n            stack.append(pairs[item])\n        elif not (stack and item == stack.pop()):\n            return False\n    return not stack\n# print(validBracketSequence(sequence))",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "fibonacciSimpleSum2",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def fibonacciSimpleSum2(n):\n    # if 0 is less than n and n is less than 5 then we know we can return\n    # true because n will be 1-4 which can be created with 2 fib numbers\n    if 0 < n < 5:\n        return True\n    # first get fibonacci sequence up to n\n    seq = [0, 1]\n    # starting from 2 and ending at n\n    for i in range(2, n):\n        # add seq at i - 2 (0 to start) and seq at i - 1 (1 to start)",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "csBinarySearch",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def csBinarySearch(nums, target):\n    min = 0\n    max = len(nums) - 1\n    while not max < min:\n        guess = (max + min) // 2\n        if nums[guess] == target:\n            return guess\n        elif nums[guess] < target:\n            min = guess + 1\n        else:",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "csSearchRotatedSortedArray",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def csSearchRotatedSortedArray(nums, target):\n    min = 0\n    max = len(nums) - 1\n    while not max < min:\n        guess = (max + min) // 2\n        # print(f'min: {nums[min]} max: {nums[max]} guess:{nums[guess]} target:'\n        #       f' {target}')\n        # if the guess is the target we got it and return the guess\n        if nums[guess] == target:\n            # print('guessed the target')",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "linear_search",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def linear_search(arr, target):\n    # loop through each item in the input array\n    i = len(arr) - 1\n    for idx in range(len(arr)):\n        # check if the item at the current index is equal to the target\n        if arr[i] == target:\n            # return the current index as the match\n            return i\n        i -= 1\n    # if we were able to loop through the entire array, the target is not present",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "recursive_search",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def recursive_search(arr, target):\n    if arr[0] == target:\n        return True\n    elif len(arr[1:]) > 1:\n        return recursive_search(arr[1:], target)\n    return False\n# print(recursive_search(arr, target))\n\"\"\"\nBinary Search\n\"\"\"",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "binary_search",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def binary_search(arr, target):\n    # 1. Declare min = 0 and max = length of array - 1\n    min = 0\n    max = len(arr) - 1\n    while not max < min:\n        # 2. Figure out the guess value by getting the middle integer between min and max\n        guess = (max + min) // 2\n        # 3. if array[guess] equals the target, we found the element, return the index\n        if arr[guess] == target:\n            return guess",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "binary_recursive_search",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def binary_recursive_search(arr, target, min_index, max_index):\n    if min_index >= max_index:\n        return -1\n    guess = (max_index + min_index) // 2\n    if arr[guess] == target:\n        return guess\n    elif target < arr[guess]:\n        return binary_recursive_search(arr, target, min_index, guess - 1)\n    else:\n        return binary_recursive_search(arr, target, guess + 1, max_index)",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "find_rotation_point",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def find_rotation_point(surnames):\n    # Your code here\n    min = 0\n    max = len(surnames) - 1\n    while not max < min:\n        guess = (min + max) // 2\n        if surnames[guess] < surnames[guess + 1] and surnames[guess] < surnames[\n            guess - 1]:\n            return guess\n        else:",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "find_rotation_point",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def find_rotation_point(surnames):\n    # Your code here\n    # UNDERSTAND\n    # [ 6,   7, 8, 0, 1, 2, 3, 4, 5]\n    #           min max\n    #           mid\n    # [ 7, 0, 1,  2, 3, 4, 5, 6]\n    #  min\n    # max\n    # mid",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "firstDraftWithTypo",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def firstDraftWithTypo(n):\n    # Your code here\n    pass\n    contains_typo = 4\n    min = 0\n    max = len(n) - 1\n    while not max < min:\n        guess = (min + max) // 2\n        # if containsTypo were real this line would be:\n        # if containsTypo(n[guess]) and not containsTypo(n[guess -1]):",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "eating_cookies",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def eating_cookies(n, cache=None):\n    # if n < 0:\n    #     return 0\n    # if n == 0:\n    #     return 1\n    # return eating_cookies(n-1) + eating_cookies(n - 2) + eating_cookies(n -3)\n    # let the cache be 2 longer than n\n    cache = [0] * (n + 2)\n    print(cache)\n    cache[0] = 1",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "removeAdjacent",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def removeAdjacent(s):\n    # add first letter to new string\n    if s == '':\n        return s\n    new_str = s[0]\n    # iterate the string\n    for letter in s:\n        # if the next letter is the same as previous continue\n        if letter == new_str[len(new_str) - 1]:\n            continue",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "reverse_String",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def reverse_String(str):\n    i, j = 0, len(str) - 1\n    print(i, j)\n    while i < j:\n        str[i], str[j] = str[j], str[i]\n        i += 1\n        j -= 1\n    return str\n# print(reverse_String(str))\n\"\"\"",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "checkPalindrome",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def checkPalindrome(inputString):\n    return inputString == inputString[::-1]\n# print(checkPalindrome(inputString))\n\"\"\"\n*** Data Structures and Algorithms Sprint ***\n---------------------------------------------\n\"\"\"\n\"\"\"\n*** Reverse Linked List ***\n---------------------------",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "reverseLinkedList",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def reverseLinkedList(l):\n    cur = l\n    prev = None\n    next = None\n    while cur:\n        next = cur.next\n        cur.next = prev\n        prev = cur\n        cur = next\n    return prev",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "checkBlanagrams",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def checkBlanagrams(word1, word2):\n    if word1 == '' or word2 == '':\n        return False\n    work_string = ''\n    diff = 0\n    sort1 = sorted(word1)  # O(n) space O(nlogn) time\n    sort2 = sorted(word2)  # O(n) space O(nlogn) time\n    for i in range(len(word1)):  # O(n)\n        # check for substitutions\n        if sort1[i] != sort2[i]:",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "findValueSortedShiftedArray",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "def findValueSortedShiftedArray(nums, target):\n    min = 0\n    max = len(nums) - 1\n    while not max < min:\n        guess = (max + min) // 2\n        if nums[guess] == target:\n            return guess\n        elif nums[min] <= nums[guess]:\n            if nums[min] <= target < nums[guess]:\n                max = guess",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "nums",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "nums = [1, 7, 3, 6, 5, 6]\n# nums = [1,2,3]\n#  O(N^2) solution\n# def pivot_index(nums):\n#     # iterate array starting at index 1\n#     # get sum of items on left of i and compare to sum of items on right of i\n#     # if they are equal return i else keep going to the next i\n#     for i in range(len(nums)):\n#         left = sum(nums[:i])\n#         right = sum(nums[i + 1:])",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "prices",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "prices = [3, 100, 1, 97]\n#\n# prices = []\n# prices = [61, 91, 6, 15, 28, 30, 39, 69, 78, 81, 62, 38, 56, 69, 22, 95, 47, 82,\n#           52, 64, 74, 97, 60, 68, 5, 23, 45, 55, 66, 57, 26, 4, 21, 65, 55, 50,\n#           41, 88, 39, 84, 77, 5, 76, 11, 3, 51, 96, 100, 13, 26, 79, 98, 84, 66,\n#           93, 65, 98, 60, 57, 35, 12, 40, 83, 62, 46, 60, 26, 94, 59, 29, 70,\n#           34, 83, 98, 89, 57, 71, 44, 23, 43, 55, 1, 70, 29, 44, 10, 70, 83, 95,\n#           96, 97, 84, 23, 16, 34, 55, 59, 73, 17, 73]\n# def buyAndSellStock(prices):",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "prices",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "prices = [6, 3, 1, 2, 5, 4]\nprices = [8, 5, 3, 1]\nprices = [3, 100, 1, 97]\ndef buyAndSellStock(prices):\n    length = len(prices)\n    # iterate array, for each item after subtract and store the amount as\n    # highest profit.. replace if needed with a higher profit\n    if prices == sorted(prices, reverse=True) or len(prices) < 2:\n        return 0\n    highest_profit = prices[1] - prices[0]",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "prices",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "prices = [8, 5, 3, 1]\nprices = [3, 100, 1, 97]\ndef buyAndSellStock(prices):\n    length = len(prices)\n    # iterate array, for each item after subtract and store the amount as\n    # highest profit.. replace if needed with a higher profit\n    if prices == sorted(prices, reverse=True) or len(prices) < 2:\n        return 0\n    highest_profit = prices[1] - prices[0]\n    smallest_number = prices[0]",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "prices",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "prices = [3, 100, 1, 97]\ndef buyAndSellStock(prices):\n    length = len(prices)\n    # iterate array, for each item after subtract and store the amount as\n    # highest profit.. replace if needed with a higher profit\n    if prices == sorted(prices, reverse=True) or len(prices) < 2:\n        return 0\n    highest_profit = prices[1] - prices[0]\n    smallest_number = prices[0]\n    for i in range(1, length):",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "inputString",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "inputString = \"crazy\"\ndef alphabeticShift(inputString):\n    new_string = ''\n    for letter in inputString:\n        new_letter = ord(letter) + 1\n        if new_letter == 123:\n            new_letter = 97\n        new_string += chr(new_letter)\n    return new_string\n# print(alphabeticShift(inputString))",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "validParenthesesSequence(s)",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "validParenthesesSequence(s) = true;\nFor s = \"()()())\", the output should be\nvalidParenthesesSequence(s) = false\n\"\"\"\ns = \"()()(())\"\ns = \"()()())\"\ndef validParenthesesSequence(s):\n    check = []\n    if s == '':\n        return True",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "validParenthesesSequence(s)",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "validParenthesesSequence(s) = false\n\"\"\"\ns = \"()()(())\"\ns = \"()()())\"\ndef validParenthesesSequence(s):\n    check = []\n    if s == '':\n        return True\n    if s[0] == ')':\n        return False",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "s = \"()()(())\"\ns = \"()()())\"\ndef validParenthesesSequence(s):\n    check = []\n    if s == '':\n        return True\n    if s[0] == ')':\n        return False\n    for paren in s:\n        if paren == '(':",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "s = \"()()())\"\ndef validParenthesesSequence(s):\n    check = []\n    if s == '':\n        return True\n    if s[0] == ')':\n        return False\n    for paren in s:\n        if paren == '(':\n            check.append(paren)",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "x = LinkedListNode('X')\ny = LinkedListNode('Y')\nz = LinkedListNode('Z')\nx.next = y\ny.next = z\ndelete_node(y)\n```\n*Note: We can do this in O(1) time and space! But be aware that our solution will have some side effects...*\n\"\"\"\nclass LinkedListNode():",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "y = LinkedListNode('Y')\nz = LinkedListNode('Z')\nx.next = y\ny.next = z\ndelete_node(y)\n```\n*Note: We can do this in O(1) time and space! But be aware that our solution will have some side effects...*\n\"\"\"\nclass LinkedListNode():\n    def __init__(self, value):",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "z = LinkedListNode('Z')\nx.next = y\ny.next = z\ndelete_node(y)\n```\n*Note: We can do this in O(1) time and space! But be aware that our solution will have some side effects...*\n\"\"\"\nclass LinkedListNode():\n    def __init__(self, value):\n        self.value = value",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "x.next",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "x.next = y\ny.next = z\ndelete_node(y)\n```\n*Note: We can do this in O(1) time and space! But be aware that our solution will have some side effects...*\n\"\"\"\nclass LinkedListNode():\n    def __init__(self, value):\n        self.value = value\n        self.next = None",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "y.next",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "y.next = z\ndelete_node(y)\n```\n*Note: We can do this in O(1) time and space! But be aware that our solution will have some side effects...*\n\"\"\"\nclass LinkedListNode():\n    def __init__(self, value):\n        self.value = value\n        self.next = None\ndef delete_node(node_to_delete):",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "x = LinkedListNode('X')\ny = LinkedListNode('Y')\nz = LinkedListNode('Z')\nx.next = y\ny.next = z\n# print(delete_node(y))\n# print(x.next.value)\n\"\"\"\nGiven a reference to the head node of a singly-linked list, write a function\nthat reverses the linked list in place. The function should return the new head",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "y = LinkedListNode('Y')\nz = LinkedListNode('Z')\nx.next = y\ny.next = z\n# print(delete_node(y))\n# print(x.next.value)\n\"\"\"\nGiven a reference to the head node of a singly-linked list, write a function\nthat reverses the linked list in place. The function should return the new head\nof the reversed list.",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "z = LinkedListNode('Z')\nx.next = y\ny.next = z\n# print(delete_node(y))\n# print(x.next.value)\n\"\"\"\nGiven a reference to the head node of a singly-linked list, write a function\nthat reverses the linked list in place. The function should return the new head\nof the reversed list.\nIn order to do this in O(1) space (in-place), you cannot make a new list, you",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "x.next",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "x.next = y\ny.next = z\n# print(delete_node(y))\n# print(x.next.value)\n\"\"\"\nGiven a reference to the head node of a singly-linked list, write a function\nthat reverses the linked list in place. The function should return the new head\nof the reversed list.\nIn order to do this in O(1) space (in-place), you cannot make a new list, you\nneed to use the existing nodes.",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "y.next",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "y.next = z\n# print(delete_node(y))\n# print(x.next.value)\n\"\"\"\nGiven a reference to the head node of a singly-linked list, write a function\nthat reverses the linked list in place. The function should return the new head\nof the reversed list.\nIn order to do this in O(1) space (in-place), you cannot make a new list, you\nneed to use the existing nodes.\nIn order to do this in O(n) time, you should only have to traverse the list",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "max_stack",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "max_stack = MaxStack()\nmax_stack.push(1)\nmax_stack.push(2)\nmax_stack.push(5)\nmax_stack.pop()\n# print(max_stack.get_max())\n\"\"\"\nYour goal is to define a `Queue` class that uses two stacks. Your `Queue` class\nshould have an `enqueue()` method and a `dequeue()` method that ensures a\n\"first in first out\" (FIFO) order.",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "code",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "code = \"{ [ ] ( ) }\"\ncode = \"{ [ ( ] ) }\"\ncode = \"{ [ }\"\ndef is_valid(code):\n    check = []\n    if code == '':\n        return True\n    if code[0] == ')' or code[0] == '}' or code[0] == ']':\n        return False\n    for paren in code:",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "code",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "code = \"{ [ ( ] ) }\"\ncode = \"{ [ }\"\ndef is_valid(code):\n    check = []\n    if code == '':\n        return True\n    if code[0] == ')' or code[0] == '}' or code[0] == ']':\n        return False\n    for paren in code:\n        if paren == ' ':",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "code",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "code = \"{ [ }\"\ndef is_valid(code):\n    check = []\n    if code == '':\n        return True\n    if code[0] == ')' or code[0] == '}' or code[0] == ']':\n        return False\n    for paren in code:\n        if paren == ' ':\n            continue",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "queueOnStacks(requests)",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "queueOnStacks(requests) = [1, 2].\nAfter the first request, the queue is {1}; after the second it is {1, 2}. Then we do the third request, \"pop\", and add the first element of the queue 1 to the answer array. The queue becomes {2}. After the fourth request, the queue is {2, 3}. Then we perform \"pop\" again and add 2 to the answer array, and the queue becomes {3}.\n\"\"\"\nrequests = [\"push 1\", \"push 2\", \"pop\", \"push 3\", \"pop\"]\nclass Stack:\n    def __init__(self):\n        self.items = []\n    def isEmpty(self):\n        return self.items == []\n    def push(self, item):",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "requests = [\"push 1\", \"push 2\", \"pop\", \"push 3\", \"pop\"]\nclass Stack:\n    def __init__(self):\n        self.items = []\n    def isEmpty(self):\n        return self.items == []\n    def push(self, item):\n        self.items.append(item)\n    def pop(self):\n        return self.items.pop()",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "sequence",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "sequence = \"()\"\ndef validBracketSequence(sequence):\n    pairs = dict(zip('(,[,{', '),],}'))\n    stack = []\n    for item in sequence:\n        if item in pairs:\n            stack.append(pairs[item])\n        elif not (stack and item == stack.pop()):\n            return False\n    return not stack",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "fibonacciSimpleSum2(n)",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "fibonacciSimpleSum2(n) = true.\nExplanation: 1 = 0 + 1 = F0 + F1.\nFor n = 11, the output should be\nfibonacciSimpleSum2(n) = true.\nExplanation: 11 = 3 + 8 = F4 + F6.\nFor n = 60, the output should be\nfibonacciSimpleSum2(n) = true.\nExplanation: 11 = 5 + 55 = F5 + F10.\nFor n = 66, the output should be\nfibonacciSimpleSum2(n) = false",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "fibonacciSimpleSum2(n)",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "fibonacciSimpleSum2(n) = true.\nExplanation: 11 = 3 + 8 = F4 + F6.\nFor n = 60, the output should be\nfibonacciSimpleSum2(n) = true.\nExplanation: 11 = 5 + 55 = F5 + F10.\nFor n = 66, the output should be\nfibonacciSimpleSum2(n) = false\n\"\"\"\ndef fibonacciSimpleSum2(n):\n    # if 0 is less than n and n is less than 5 then we know we can return",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "fibonacciSimpleSum2(n)",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "fibonacciSimpleSum2(n) = true.\nExplanation: 11 = 5 + 55 = F5 + F10.\nFor n = 66, the output should be\nfibonacciSimpleSum2(n) = false\n\"\"\"\ndef fibonacciSimpleSum2(n):\n    # if 0 is less than n and n is less than 5 then we know we can return\n    # true because n will be 1-4 which can be created with 2 fib numbers\n    if 0 < n < 5:\n        return True",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "fibonacciSimpleSum2(n)",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "fibonacciSimpleSum2(n) = false\n\"\"\"\ndef fibonacciSimpleSum2(n):\n    # if 0 is less than n and n is less than 5 then we know we can return\n    # true because n will be 1-4 which can be created with 2 fib numbers\n    if 0 < n < 5:\n        return True\n    # first get fibonacci sequence up to n\n    seq = [0, 1]\n    # starting from 2 and ending at n",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "2^n",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "2^n = 64\nlog_2 64 = 6\nWrite an exponential expression that is identical to this logarithmic expression:\nlog_2 128 = n\n2^7 = 128\nWhat keywords should you look out for that might alert you that logarithms are involved?\ndoubles, halves\n\"\"\"\n\"\"\"\nRewrite the implementation of linear search below so that the algorithm searches from the end of the list to the beginning.",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "2^7",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "2^7 = 128\nWhat keywords should you look out for that might alert you that logarithms are involved?\ndoubles, halves\n\"\"\"\n\"\"\"\nRewrite the implementation of linear search below so that the algorithm searches from the end of the list to the beginning.\n\"\"\"\ndef linear_search(arr, target):\n    # loop through each item in the input array\n    i = len(arr) - 1",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "arr = [1, 2, 3, 4, 5, 6]\ntarget = 3\n# print(linear_search(arr, target))\n\"\"\"\nWrite a recursive search function that receives as input an array of integers and a target integer value. This function should return True if the target element exists in the array, and False otherwise.\nWhat would be the base case(s) we'd have to consider for implementing this function?\nHow should our recursive solution converge on our base case(s)?\nIn your own words, write out the three rules for recursion and how you can identify when a problem is amenable to using a recursive method.\n- problem has an obvious base case\n- the data changes predictably on the way to the base case ",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "target",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "target = 3\n# print(linear_search(arr, target))\n\"\"\"\nWrite a recursive search function that receives as input an array of integers and a target integer value. This function should return True if the target element exists in the array, and False otherwise.\nWhat would be the base case(s) we'd have to consider for implementing this function?\nHow should our recursive solution converge on our base case(s)?\nIn your own words, write out the three rules for recursion and how you can identify when a problem is amenable to using a recursive method.\n- problem has an obvious base case\n- the data changes predictably on the way to the base case \n- the function must call itself",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "arr = [1, 2, 3, 4, 5, 6]\ntarget = 55\ndef binary_recursive_search(arr, target, min_index, max_index):\n    if min_index >= max_index:\n        return -1\n    guess = (max_index + min_index) // 2\n    if arr[guess] == target:\n        return guess\n    elif target < arr[guess]:\n        return binary_recursive_search(arr, target, min_index, guess - 1)",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "target",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "target = 55\ndef binary_recursive_search(arr, target, min_index, max_index):\n    if min_index >= max_index:\n        return -1\n    guess = (max_index + min_index) // 2\n    if arr[guess] == target:\n        return guess\n    elif target < arr[guess]:\n        return binary_recursive_search(arr, target, min_index, guess - 1)\n    else:",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "surnames",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "surnames = [\n    'liu',\n    'mcdowell',\n    'nixon',\n    'sparks',\n    'zhang',\n    'ahmed',  # <-- rotates here!\n    'brandt',\n    'davenport',\n    'farley',",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "surnames",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "surnames = [\n    'sparks',\n    'zhang',\n    'liu',\n    'ahmed',  # <-- rotates here!\n    'brandt',\n    'davenport',\n    'farley',\n    'glover',\n    'kennedy',",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "n = [1, 2, 3, 4, 5, 6, 7, 8, 9]\ndef firstDraftWithTypo(n):\n    # Your code here\n    pass\n    contains_typo = 4\n    min = 0\n    max = len(n) - 1\n    while not max < min:\n        guess = (min + max) // 2\n        # if containsTypo were real this line would be:",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "n = 3\ndef eating_cookies(n, cache=None):\n    # if n < 0:\n    #     return 0\n    # if n == 0:\n    #     return 1\n    # return eating_cookies(n-1) + eating_cookies(n - 2) + eating_cookies(n -3)\n    # let the cache be 2 longer than n\n    cache = [0] * (n + 2)\n    print(cache)",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "removeAdjacent(s)",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "removeAdjacent(s) = \"a\";\nFor s = \"abccaaab\", the output should be\nremoveAdjacent(s) = \"abcab\".\n\"\"\"\n# s = \"aaaaa\"\n# s = \"abccaaab\"\ndef removeAdjacent(s):\n    # add first letter to new string\n    if s == '':\n        return s",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "removeAdjacent(s)",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "removeAdjacent(s) = \"abcab\".\n\"\"\"\n# s = \"aaaaa\"\n# s = \"abccaaab\"\ndef removeAdjacent(s):\n    # add first letter to new string\n    if s == '':\n        return s\n    new_str = s[0]\n    # iterate the string",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "str",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "str = 'reverse'\ndef reverse_String(str):\n    i, j = 0, len(str) - 1\n    print(i, j)\n    while i < j:\n        str[i], str[j] = str[j], str[i]\n        i += 1\n        j -= 1\n    return str\n# print(reverse_String(str))",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "checkPalindrome(inputString)",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "checkPalindrome(inputString) = true;\nFor inputString = \"abac\", the output should be\ncheckPalindrome(inputString) = false;\nFor inputString = \"a\", the output should be\ncheckPalindrome(inputString) = true.\n\"\"\"\ninputString = \"aabaa\"\n# inputString = \"abac\"\n# inputString = \"a\"\ninputString = \"hlbeeykoqqqqokyeeblh\"",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "checkPalindrome(inputString)",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "checkPalindrome(inputString) = false;\nFor inputString = \"a\", the output should be\ncheckPalindrome(inputString) = true.\n\"\"\"\ninputString = \"aabaa\"\n# inputString = \"abac\"\n# inputString = \"a\"\ninputString = \"hlbeeykoqqqqokyeeblh\"\ndef checkPalindrome(inputString):\n    return inputString == inputString[::-1]",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "checkPalindrome(inputString)",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "checkPalindrome(inputString) = true.\n\"\"\"\ninputString = \"aabaa\"\n# inputString = \"abac\"\n# inputString = \"a\"\ninputString = \"hlbeeykoqqqqokyeeblh\"\ndef checkPalindrome(inputString):\n    return inputString == inputString[::-1]\n# print(checkPalindrome(inputString))\n\"\"\"",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "inputString",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "inputString = \"aabaa\"\n# inputString = \"abac\"\n# inputString = \"a\"\ninputString = \"hlbeeykoqqqqokyeeblh\"\ndef checkPalindrome(inputString):\n    return inputString == inputString[::-1]\n# print(checkPalindrome(inputString))\n\"\"\"\n*** Data Structures and Algorithms Sprint ***\n---------------------------------------------",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "inputString",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "inputString = \"hlbeeykoqqqqokyeeblh\"\ndef checkPalindrome(inputString):\n    return inputString == inputString[::-1]\n# print(checkPalindrome(inputString))\n\"\"\"\n*** Data Structures and Algorithms Sprint ***\n---------------------------------------------\n\"\"\"\n\"\"\"\n*** Reverse Linked List ***",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "reverseLinkedList(l)",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "reverseLinkedList(l) = [5, 4, 3, 2, 1].\n\"\"\"\n# Singly-linked lists are already defined with this interface:\n# class ListNode(object):\n#   def __init__(self, x):\n#     self.value = x\n#     self.next = None\n#\ndef reverseLinkedList(l):\n    cur = l",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "word1",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "word1 = \"tangpam\"\nword2 = \"anagram\"\ndef checkBlanagrams(word1, word2):\n    if word1 == '' or word2 == '':\n        return False\n    work_string = ''\n    diff = 0\n    sort1 = sorted(word1)  # O(n) space O(nlogn) time\n    sort2 = sorted(word2)  # O(n) space O(nlogn) time\n    for i in range(len(word1)):  # O(n)",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "word2",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "word2 = \"anagram\"\ndef checkBlanagrams(word1, word2):\n    if word1 == '' or word2 == '':\n        return False\n    work_string = ''\n    diff = 0\n    sort1 = sorted(word1)  # O(n) space O(nlogn) time\n    sort2 = sorted(word2)  # O(n) space O(nlogn) time\n    for i in range(len(word1)):  # O(n)\n        # check for substitutions",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "nums",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "nums = [4, 5, 6, 7, 0, 1, 2]\ntarget = 0\ndef findValueSortedShiftedArray(nums, target):\n    min = 0\n    max = len(nums) - 1\n    while not max < min:\n        guess = (max + min) // 2\n        if nums[guess] == target:\n            return guess\n        elif nums[min] <= nums[guess]:",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "target",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "peekOfCode": "target = 0\ndef findValueSortedShiftedArray(nums, target):\n    min = 0\n    max = len(nums) - 1\n    while not max < min:\n        guess = (max + min) // 2\n        if nums[guess] == target:\n            return guess\n        elif nums[min] <= nums[guess]:\n            if nums[min] <= target < nums[guess]:",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects (1)",
        "documentation": {}
    },
    {
        "label": "LinkedListNode",
        "kind": 6,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "class LinkedListNode():\n    def __init__(self, value):\n        self.value = value\n        self.next  = None\nx = LinkedListNode('X')\ny = LinkedListNode('Y')\nz = LinkedListNode('Z')\nx.next = y\ny.next = z\ndelete_node(y)",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "LinkedListNode",
        "kind": 6,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "class LinkedListNode:\n    def __init__(self, value):\n        self.value = value\n        self.next = None\ndef delete_node(node_to_delete):\n    next = node_to_delete.next\n    next.next = None\n    node_to_delete.value = next.value\n    node_to_delete.next = next.next\nx = LinkedListNode(\"X\")",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "LinkedListNode",
        "kind": 6,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "class LinkedListNode:\n    def __init__(self, value):\n        self.value = value\n        self.next = None\ndef reverse(head_of_list):\n    current_node = head_of_list\n    previous_node = None\n    next_node = None\n    # Until we have 'fallen off' the end of the list\n    while current_node:",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "class ListNode(object):\n    def __init__(self, x):\n        self.value = x\n        self.next = None\n[1, 3, 4, 6]\n\"\"\"\nNote: Your solution should have O(n) time complexity, where n is the number of elements in l, since this is what you will be asked to accomplish in an interview.\nYou have a singly linked list l, which is sorted in strictly increasing order, and an integer value. Add value to the list l, preserving its original sorting.\nNote: in examples below and tests preview linked lists are presented as arrays just for simplicity of visualization: in real data you will be given a head node l of the linked list\nExample",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "class ListNode(object):\n    def __init__(self, x):\n        self.value = x\n        self.next = None\ndef mergeTwoLinkedLists(l1, l2):\n    # create empty node to hold the new merged list\n    merged_node = ListNode(0)\n    # end will hold the end node\n    end = merged_node\n    while True:",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "class ListNode(object):\n    def __init__(self, x):\n        self.value = x\n        self.next = None\ndef reverseNodesInKGroups(l, k):\n    # create an empty node to hold the new list\n    new_node = ListNode(0)\n    # set the next value to the list\n    new_node.next = l\n    # set the previous node to the new list",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "LinkedListNode",
        "kind": 6,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "class LinkedListNode:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\nclass Queue:\n    def __init__(self):\n        self.front = None\n        self.rear = None\n    def enqueue(self, item):\n        new_node = LinkedListNode(item)",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "Queue",
        "kind": 6,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "class Queue:\n    def __init__(self):\n        self.front = None\n        self.rear = None\n    def enqueue(self, item):\n        new_node = LinkedListNode(item)\n        # check if queue is empty\n        if self.is_empty():\n            self.front = new_node\n            self.rear = new_node",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "class Stack:\n    def __init__(self):\n        self.data = []\n    def push(self, item):\n        self.data.append(item)\n    # my code for peek method\n    def peek(self, item):\n        return self.data[-1]\n    def pop(self):\n        if len(self.data) > 0:",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "LinkedListNode",
        "kind": 6,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "class LinkedListNode:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\nclass Stack:\n    def __init__(self):\n        self.top = None\n    def push(self, data):\n        # create new node with data\n        new_node = LinkedListNode(data)",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "class Stack:\n    def __init__(self):\n        self.top = None\n    def push(self, data):\n        # create new node with data\n        new_node = LinkedListNode(data)\n        # set current top to new node's next\n        new_node.next = self.top\n        # reset the top pointer to the new node\n        self.top = new_node",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "class Stack(object):\n    def __init__(self):\n        \"\"\"Initialize an empty stack\"\"\"\n        self.items = []\n    def push(self, item):\n        \"\"\"Push a new item onto the stack\"\"\"\n        self.items.append(item)\n    def pop(self):\n        \"\"\"Remove and return the last item\"\"\"\n        # If the stack is empty, return None",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "MaxStack",
        "kind": 6,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "class MaxStack(object):\n    def __init__(self):\n        # Your code here\n        self.stack = Stack()\n        # self.head = []\n        self.max_stack = Stack()\n    def push(self, item):\n        \"\"\"Add a new item onto the top of our stack.\"\"\"\n        # Your code here\n        # self.head.append(item)",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "class Stack:\n    def __init__(self):\n        self.data = []\n    def push(self, item):\n        self.data.append(item)\n    def pop(self):\n        if len(self.data) > 0:\n            return self.data.pop()\n        return \"The stack is empty\"\nclass QueueTwoStacks:",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "QueueTwoStacks",
        "kind": 6,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "class QueueTwoStacks:\n    def __init__(self):\n        # Your code here\n        self.stack1 = Stack()\n        self.stack2 = Stack()\n    def enqueue(self, item):\n        # Your code here\n        self.stack1.push(item)\n    def dequeue(self):\n        # Your code here",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "class Stack:\n    def __init__(self):\n        self.items = []\n    def isEmpty(self):\n        return self.items == []\n    def push(self, item):\n        self.items.append(item)\n    def pop(self):\n        return self.items.pop()\ndef queueOnStacks(requests):",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "pivot_index",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def pivot_index(nums):\n    if len(nums) <= 1:\n        return -1\n    left = 0\n    right = sum(nums)\n    for i in range(len(nums)):\n        right -= nums[i]\n        if right == left:\n            return i\n        left += nums[i]",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "plus_one",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def plus_one(digits):\n    # check the last digit if its not 9 we just add 1\n    # if it is a 9 make it 0\n    # go left check 2nd to last if its not a 9 add 1\n    # if it is a 9\n    index = len(digits) - 1\n    while index >= 0 and digits[index] == 9:\n        digits[index] = 0\n        index -= 1\n    if index == -1:",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "buyAndSellStock",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def buyAndSellStock(prices):\n    length = len(prices)\n    # iterate array, for each item after subtract and store the amount as\n    # highest profit.. replace if needed with a higher profit\n    if prices == sorted(prices, reverse=True) or len(prices) < 2:\n        return 0\n    highest_profit = prices[1] - prices[0]\n    smallest_number = prices[0]\n    for i in range(1, length):\n        # only check if the selected number minus the smallest number before",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "alphabeticShift",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def alphabeticShift(inputString):\n    new_string = \"\"\n    for letter in inputString:\n        new_letter = ord(letter) + 1\n        if new_letter == 123:\n            new_letter = 97\n        new_string += chr(new_letter)\n    return new_string\n# print(alphabeticShift(inputString))\n\"\"\"",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "validParenthesesSequence",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def validParenthesesSequence(s):\n    check = []\n    if s == \"\":\n        return True\n    if s[0] == \")\":\n        return False\n    for paren in s:\n        if paren == \"(\":\n            check.append(paren)\n        else:",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "delete_node",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def delete_node(node_to_delete):\n    next = node_to_delete.next\n    next.next = None\n    node_to_delete.value = next.value\n    node_to_delete.next = next.next\nx = LinkedListNode(\"X\")\ny = LinkedListNode(\"Y\")\nz = LinkedListNode(\"Z\")\nx.next = y\ny.next = z",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "reverse",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def reverse(head_of_list):\n    current_node = head_of_list\n    previous_node = None\n    next_node = None\n    # Until we have 'fallen off' the end of the list\n    while current_node:\n        # Copy a pointer to the next element\n        # before we overwrite current_node.next\n        next_node = current_node.next\n        # Reverse the 'next' pointer",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "insertValueIntoSortedLinkedList",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def insertValueIntoSortedLinkedList(l, value):\n    # create a new node with the value\n    node = ListNode(value)\n    # if there is no list return the new node\n    if l == None:\n        return node\n    else:\n        # else if the list.value (first item in the list) > the new value\n        if l.value > value:\n            # set new values as the first item in the list",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "mergeTwoLinkedLists",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def mergeTwoLinkedLists(l1, l2):\n    # create empty node to hold the new merged list\n    merged_node = ListNode(0)\n    # end will hold the end node\n    end = merged_node\n    while True:\n        # if either list becomes empty join lists\n        if l1 is None:\n            end.next = l2\n            break",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "reverseNodesInKGroups",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def reverseNodesInKGroups(l, k):\n    # create an empty node to hold the new list\n    new_node = ListNode(0)\n    # set the next value to the list\n    new_node.next = l\n    # set the previous node to the new list\n    prev = new_node\n    while True:\n        # set the start to the new node next\n        start = prev.next",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "reverse_list",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def reverse_list(start, end):\n    # set the last reversed group to the new start\n    old_reversed = start\n    # set the new current to the start\n    current = start\n    # set next node to the node start is pointing to\n    next_node = start.next\n    # while the current node is not the last node\n    while current != end:\n        # iterate",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "is_valid",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def is_valid(code):\n    check = []\n    if code == \"\":\n        return True\n    if code[0] == \")\" or code[0] == \"}\" or code[0] == \"]\":\n        return False\n    for paren in code:\n        if paren == \" \":\n            continue\n        if paren == \"(\" or paren == \"{\" or paren == \"[\":",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "queueOnStacks",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def queueOnStacks(requests):\n    left = Stack()\n    right = Stack()\n    def insert(x):\n        left.push(x)\n        print(\"queue:\", left.items)\n    def remove():\n        if len(right.items) == 0:\n            while len(left.items) > 0:\n                shifted = left.pop()",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "validBracketSequence",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def validBracketSequence(sequence):\n    pairs = dict(zip(\"(,[,{\", \"),],}\"))\n    stack = []\n    for item in sequence:\n        if item in pairs:\n            stack.append(pairs[item])\n        elif not (stack and item == stack.pop()):\n            return False\n    return not stack\n# print(validBracketSequence(sequence))",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "fibonacciSimpleSum2",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def fibonacciSimpleSum2(n):\n    # if 0 is less than n and n is less than 5 then we know we can return\n    # true because n will be 1-4 which can be created with 2 fib numbers\n    if 0 < n < 5:\n        return True\n    # first get fibonacci sequence up to n\n    seq = [0, 1]\n    # starting from 2 and ending at n\n    for i in range(2, n):\n        # add seq at i - 2 (0 to start) and seq at i - 1 (1 to start)",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "csBinarySearch",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def csBinarySearch(nums, target):\n    min = 0\n    max = len(nums) - 1\n    while not max < min:\n        guess = (max + min) // 2\n        if nums[guess] == target:\n            return guess\n        elif nums[guess] < target:\n            min = guess + 1\n        else:",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "csSearchRotatedSortedArray",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def csSearchRotatedSortedArray(nums, target):\n    min = 0\n    max = len(nums) - 1\n    while not max < min:\n        guess = (max + min) // 2\n        # print(f'min: {nums[min]} max: {nums[max]} guess:{nums[guess]} target:'\n        #       f' {target}')\n        # if the guess is the target we got it and return the guess\n        if nums[guess] == target:\n            # print('guessed the target')",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "linear_search",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def linear_search(arr, target):\n    # loop through each item in the input array\n    i = len(arr) - 1\n    for idx in range(len(arr)):\n        # check if the item at the current index is equal to the target\n        if arr[i] == target:\n            # return the current index as the match\n            return i\n        i -= 1\n    # if we were able to loop through the entire array, the target is not present",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "recursive_search",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def recursive_search(arr, target):\n    if arr[0] == target:\n        return True\n    elif len(arr[1:]) > 1:\n        return recursive_search(arr[1:], target)\n    return False\n# print(recursive_search(arr, target))\n\"\"\"\nBinary Search\n\"\"\"",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "binary_search",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def binary_search(arr, target):\n    # 1. Declare min = 0 and max = length of array - 1\n    min = 0\n    max = len(arr) - 1\n    while not max < min:\n        # 2. Figure out the guess value by getting the middle integer between min and max\n        guess = (max + min) // 2\n        # 3. if array[guess] equals the target, we found the element, return the index\n        if arr[guess] == target:\n            return guess",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "binary_recursive_search",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def binary_recursive_search(arr, target, min_index, max_index):\n    if min_index >= max_index:\n        return -1\n    guess = (max_index + min_index) // 2\n    if arr[guess] == target:\n        return guess\n    elif target < arr[guess]:\n        return binary_recursive_search(arr, target, min_index, guess - 1)\n    else:\n        return binary_recursive_search(arr, target, guess + 1, max_index)",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "find_rotation_point",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def find_rotation_point(surnames):\n    # Your code here\n    min = 0\n    max = len(surnames) - 1\n    while not max < min:\n        guess = (min + max) // 2\n        if (\n            surnames[guess] < surnames[guess + 1]\n            and surnames[guess] < surnames[guess - 1]\n        ):",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "find_rotation_point",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def find_rotation_point(surnames):\n    # Your code here\n    # UNDERSTAND\n    # [ 6,   7, 8, 0, 1, 2, 3, 4, 5]\n    #           min max\n    #           mid\n    # [ 7, 0, 1,  2, 3, 4, 5, 6]\n    #  min\n    # max\n    # mid",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "firstDraftWithTypo",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def firstDraftWithTypo(n):\n    # Your code here\n    pass\n    contains_typo = 4\n    min = 0\n    max = len(n) - 1\n    while not max < min:\n        guess = (min + max) // 2\n        # if containsTypo were real this line would be:\n        # if containsTypo(n[guess]) and not containsTypo(n[guess -1]):",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "eating_cookies",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def eating_cookies(n, cache=None):\n    # if n < 0:\n    #     return 0\n    # if n == 0:\n    #     return 1\n    # return eating_cookies(n-1) + eating_cookies(n - 2) + eating_cookies(n -3)\n    # let the cache be 2 longer than n\n    cache = [0] * (n + 2)\n    print(cache)\n    cache[0] = 1",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "removeAdjacent",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def removeAdjacent(s):\n    # add first letter to new string\n    if s == \"\":\n        return s\n    new_str = s[0]\n    # iterate the string\n    for letter in s:\n        # if the next letter is the same as previous continue\n        if letter == new_str[len(new_str) - 1]:\n            continue",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "reverse_String",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def reverse_String(str):\n    i, j = 0, len(str) - 1\n    print(i, j)\n    while i < j:\n        str[i], str[j] = str[j], str[i]\n        i += 1\n        j -= 1\n    return str\n# print(reverse_String(str))\n\"\"\"",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "checkPalindrome",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def checkPalindrome(inputString):\n    return inputString == inputString[::-1]\n# print(checkPalindrome(inputString))\n\"\"\"\n*** Data Structures and Algorithms Sprint ***\n---------------------------------------------\n\"\"\"\n\"\"\"\n*** Reverse Linked List ***\n---------------------------",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "reverseLinkedList",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def reverseLinkedList(l):\n    cur = l\n    prev = None\n    next = None\n    while cur:\n        next = cur.next\n        cur.next = prev\n        prev = cur\n        cur = next\n    return prev",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "checkBlanagrams",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def checkBlanagrams(word1, word2):\n    if word1 == \"\" or word2 == \"\":\n        return False\n    work_string = \"\"\n    diff = 0\n    sort1 = sorted(word1)  # O(n) space O(nlogn) time\n    sort2 = sorted(word2)  # O(n) space O(nlogn) time\n    for i in range(len(word1)):  # O(n)\n        # check for substitutions\n        if sort1[i] != sort2[i]:",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "findValueSortedShiftedArray",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "def findValueSortedShiftedArray(nums, target):\n    min = 0\n    max = len(nums) - 1\n    while not max < min:\n        guess = (max + min) // 2\n        if nums[guess] == target:\n            return guess\n        elif nums[min] <= nums[guess]:\n            if nums[min] <= target < nums[guess]:\n                max = guess",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "nums",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "nums = [1, 7, 3, 6, 5, 6]\n# nums = [1,2,3]\n#  O(N^2) solution\n# def pivot_index(nums):\n#     # iterate array starting at index 1\n#     # get sum of items on left of i and compare to sum of items on right of i\n#     # if they are equal return i else keep going to the next i\n#     for i in range(len(nums)):\n#         left = sum(nums[:i])\n#         right = sum(nums[i + 1:])",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "prices",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "prices = [3, 100, 1, 97]\n#\n# prices = []\n# prices = [61, 91, 6, 15, 28, 30, 39, 69, 78, 81, 62, 38, 56, 69, 22, 95, 47, 82,\n#           52, 64, 74, 97, 60, 68, 5, 23, 45, 55, 66, 57, 26, 4, 21, 65, 55, 50,\n#           41, 88, 39, 84, 77, 5, 76, 11, 3, 51, 96, 100, 13, 26, 79, 98, 84, 66,\n#           93, 65, 98, 60, 57, 35, 12, 40, 83, 62, 46, 60, 26, 94, 59, 29, 70,\n#           34, 83, 98, 89, 57, 71, 44, 23, 43, 55, 1, 70, 29, 44, 10, 70, 83, 95,\n#           96, 97, 84, 23, 16, 34, 55, 59, 73, 17, 73]\n# def buyAndSellStock(prices):",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "prices",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "prices = [6, 3, 1, 2, 5, 4]\nprices = [8, 5, 3, 1]\nprices = [3, 100, 1, 97]\ndef buyAndSellStock(prices):\n    length = len(prices)\n    # iterate array, for each item after subtract and store the amount as\n    # highest profit.. replace if needed with a higher profit\n    if prices == sorted(prices, reverse=True) or len(prices) < 2:\n        return 0\n    highest_profit = prices[1] - prices[0]",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "prices",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "prices = [8, 5, 3, 1]\nprices = [3, 100, 1, 97]\ndef buyAndSellStock(prices):\n    length = len(prices)\n    # iterate array, for each item after subtract and store the amount as\n    # highest profit.. replace if needed with a higher profit\n    if prices == sorted(prices, reverse=True) or len(prices) < 2:\n        return 0\n    highest_profit = prices[1] - prices[0]\n    smallest_number = prices[0]",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "prices",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "prices = [3, 100, 1, 97]\ndef buyAndSellStock(prices):\n    length = len(prices)\n    # iterate array, for each item after subtract and store the amount as\n    # highest profit.. replace if needed with a higher profit\n    if prices == sorted(prices, reverse=True) or len(prices) < 2:\n        return 0\n    highest_profit = prices[1] - prices[0]\n    smallest_number = prices[0]\n    for i in range(1, length):",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "inputString",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "inputString = \"crazy\"\ndef alphabeticShift(inputString):\n    new_string = \"\"\n    for letter in inputString:\n        new_letter = ord(letter) + 1\n        if new_letter == 123:\n            new_letter = 97\n        new_string += chr(new_letter)\n    return new_string\n# print(alphabeticShift(inputString))",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "validParenthesesSequence(s)",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "validParenthesesSequence(s) = true;\nFor s = \"()()())\", the output should be\nvalidParenthesesSequence(s) = false\n\"\"\"\ns = \"()()(())\"\ns = \"()()())\"\ndef validParenthesesSequence(s):\n    check = []\n    if s == \"\":\n        return True",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "validParenthesesSequence(s)",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "validParenthesesSequence(s) = false\n\"\"\"\ns = \"()()(())\"\ns = \"()()())\"\ndef validParenthesesSequence(s):\n    check = []\n    if s == \"\":\n        return True\n    if s[0] == \")\":\n        return False",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "s = \"()()(())\"\ns = \"()()())\"\ndef validParenthesesSequence(s):\n    check = []\n    if s == \"\":\n        return True\n    if s[0] == \")\":\n        return False\n    for paren in s:\n        if paren == \"(\":",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "s = \"()()())\"\ndef validParenthesesSequence(s):\n    check = []\n    if s == \"\":\n        return True\n    if s[0] == \")\":\n        return False\n    for paren in s:\n        if paren == \"(\":\n            check.append(paren)",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "x = LinkedListNode('X')\ny = LinkedListNode('Y')\nz = LinkedListNode('Z')\nx.next = y\ny.next = z\ndelete_node(y)\n```\n*Note: We can do this in O(1) time and space! But be aware that our solution will have some side effects...*\n\"\"\"\nclass LinkedListNode:",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "y = LinkedListNode('Y')\nz = LinkedListNode('Z')\nx.next = y\ny.next = z\ndelete_node(y)\n```\n*Note: We can do this in O(1) time and space! But be aware that our solution will have some side effects...*\n\"\"\"\nclass LinkedListNode:\n    def __init__(self, value):",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "z = LinkedListNode('Z')\nx.next = y\ny.next = z\ndelete_node(y)\n```\n*Note: We can do this in O(1) time and space! But be aware that our solution will have some side effects...*\n\"\"\"\nclass LinkedListNode:\n    def __init__(self, value):\n        self.value = value",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "x.next",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "x.next = y\ny.next = z\ndelete_node(y)\n```\n*Note: We can do this in O(1) time and space! But be aware that our solution will have some side effects...*\n\"\"\"\nclass LinkedListNode:\n    def __init__(self, value):\n        self.value = value\n        self.next = None",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "y.next",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "y.next = z\ndelete_node(y)\n```\n*Note: We can do this in O(1) time and space! But be aware that our solution will have some side effects...*\n\"\"\"\nclass LinkedListNode:\n    def __init__(self, value):\n        self.value = value\n        self.next = None\ndef delete_node(node_to_delete):",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "x = LinkedListNode(\"X\")\ny = LinkedListNode(\"Y\")\nz = LinkedListNode(\"Z\")\nx.next = y\ny.next = z\n# print(delete_node(y))\n# print(x.next.value)\n\"\"\"\nGiven a reference to the head node of a singly-linked list, write a function\nthat reverses the linked list in place. The function should return the new head",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "y = LinkedListNode(\"Y\")\nz = LinkedListNode(\"Z\")\nx.next = y\ny.next = z\n# print(delete_node(y))\n# print(x.next.value)\n\"\"\"\nGiven a reference to the head node of a singly-linked list, write a function\nthat reverses the linked list in place. The function should return the new head\nof the reversed list.",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "z = LinkedListNode(\"Z\")\nx.next = y\ny.next = z\n# print(delete_node(y))\n# print(x.next.value)\n\"\"\"\nGiven a reference to the head node of a singly-linked list, write a function\nthat reverses the linked list in place. The function should return the new head\nof the reversed list.\nIn order to do this in O(1) space (in-place), you cannot make a new list, you",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "x.next",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "x.next = y\ny.next = z\n# print(delete_node(y))\n# print(x.next.value)\n\"\"\"\nGiven a reference to the head node of a singly-linked list, write a function\nthat reverses the linked list in place. The function should return the new head\nof the reversed list.\nIn order to do this in O(1) space (in-place), you cannot make a new list, you\nneed to use the existing nodes.",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "y.next",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "y.next = z\n# print(delete_node(y))\n# print(x.next.value)\n\"\"\"\nGiven a reference to the head node of a singly-linked list, write a function\nthat reverses the linked list in place. The function should return the new head\nof the reversed list.\nIn order to do this in O(1) space (in-place), you cannot make a new list, you\nneed to use the existing nodes.\nIn order to do this in O(n) time, you should only have to traverse the list",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "max_stack",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "max_stack = MaxStack()\nmax_stack.push(1)\nmax_stack.push(2)\nmax_stack.push(5)\nmax_stack.pop()\n# print(max_stack.get_max())\n\"\"\"\nYour goal is to define a `Queue` class that uses two stacks. Your `Queue` class\nshould have an `enqueue()` method and a `dequeue()` method that ensures a\n\"first in first out\" (FIFO) order.",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "code",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "code = \"{ [ ] ( ) }\"\ncode = \"{ [ ( ] ) }\"\ncode = \"{ [ }\"\ndef is_valid(code):\n    check = []\n    if code == \"\":\n        return True\n    if code[0] == \")\" or code[0] == \"}\" or code[0] == \"]\":\n        return False\n    for paren in code:",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "code",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "code = \"{ [ ( ] ) }\"\ncode = \"{ [ }\"\ndef is_valid(code):\n    check = []\n    if code == \"\":\n        return True\n    if code[0] == \")\" or code[0] == \"}\" or code[0] == \"]\":\n        return False\n    for paren in code:\n        if paren == \" \":",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "code",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "code = \"{ [ }\"\ndef is_valid(code):\n    check = []\n    if code == \"\":\n        return True\n    if code[0] == \")\" or code[0] == \"}\" or code[0] == \"]\":\n        return False\n    for paren in code:\n        if paren == \" \":\n            continue",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "queueOnStacks(requests)",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "queueOnStacks(requests) = [1, 2].\nAfter the first request, the queue is {1}; after the second it is {1, 2}. Then we do the third request, \"pop\", and add the first element of the queue 1 to the answer array. The queue becomes {2}. After the fourth request, the queue is {2, 3}. Then we perform \"pop\" again and add 2 to the answer array, and the queue becomes {3}.\n\"\"\"\nrequests = [\"push 1\", \"push 2\", \"pop\", \"push 3\", \"pop\"]\nclass Stack:\n    def __init__(self):\n        self.items = []\n    def isEmpty(self):\n        return self.items == []\n    def push(self, item):",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "requests = [\"push 1\", \"push 2\", \"pop\", \"push 3\", \"pop\"]\nclass Stack:\n    def __init__(self):\n        self.items = []\n    def isEmpty(self):\n        return self.items == []\n    def push(self, item):\n        self.items.append(item)\n    def pop(self):\n        return self.items.pop()",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "sequence",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "sequence = \"()\"\ndef validBracketSequence(sequence):\n    pairs = dict(zip(\"(,[,{\", \"),],}\"))\n    stack = []\n    for item in sequence:\n        if item in pairs:\n            stack.append(pairs[item])\n        elif not (stack and item == stack.pop()):\n            return False\n    return not stack",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "fibonacciSimpleSum2(n)",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "fibonacciSimpleSum2(n) = true.\nExplanation: 1 = 0 + 1 = F0 + F1.\nFor n = 11, the output should be\nfibonacciSimpleSum2(n) = true.\nExplanation: 11 = 3 + 8 = F4 + F6.\nFor n = 60, the output should be\nfibonacciSimpleSum2(n) = true.\nExplanation: 11 = 5 + 55 = F5 + F10.\nFor n = 66, the output should be\nfibonacciSimpleSum2(n) = false",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "fibonacciSimpleSum2(n)",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "fibonacciSimpleSum2(n) = true.\nExplanation: 11 = 3 + 8 = F4 + F6.\nFor n = 60, the output should be\nfibonacciSimpleSum2(n) = true.\nExplanation: 11 = 5 + 55 = F5 + F10.\nFor n = 66, the output should be\nfibonacciSimpleSum2(n) = false\n\"\"\"\ndef fibonacciSimpleSum2(n):\n    # if 0 is less than n and n is less than 5 then we know we can return",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "fibonacciSimpleSum2(n)",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "fibonacciSimpleSum2(n) = true.\nExplanation: 11 = 5 + 55 = F5 + F10.\nFor n = 66, the output should be\nfibonacciSimpleSum2(n) = false\n\"\"\"\ndef fibonacciSimpleSum2(n):\n    # if 0 is less than n and n is less than 5 then we know we can return\n    # true because n will be 1-4 which can be created with 2 fib numbers\n    if 0 < n < 5:\n        return True",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "fibonacciSimpleSum2(n)",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "fibonacciSimpleSum2(n) = false\n\"\"\"\ndef fibonacciSimpleSum2(n):\n    # if 0 is less than n and n is less than 5 then we know we can return\n    # true because n will be 1-4 which can be created with 2 fib numbers\n    if 0 < n < 5:\n        return True\n    # first get fibonacci sequence up to n\n    seq = [0, 1]\n    # starting from 2 and ending at n",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "2^n",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "2^n = 64\nlog_2 64 = 6\nWrite an exponential expression that is identical to this logarithmic expression:\nlog_2 128 = n\n2^7 = 128\nWhat keywords should you look out for that might alert you that logarithms are involved?\ndoubles, halves\n\"\"\"\n\"\"\"\nRewrite the implementation of linear search below so that the algorithm searches from the end of the list to the beginning.",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "2^7",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "2^7 = 128\nWhat keywords should you look out for that might alert you that logarithms are involved?\ndoubles, halves\n\"\"\"\n\"\"\"\nRewrite the implementation of linear search below so that the algorithm searches from the end of the list to the beginning.\n\"\"\"\ndef linear_search(arr, target):\n    # loop through each item in the input array\n    i = len(arr) - 1",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "arr = [1, 2, 3, 4, 5, 6]\ntarget = 3\n# print(linear_search(arr, target))\n\"\"\"\nWrite a recursive search function that receives as input an array of integers and a target integer value. This function should return True if the target element exists in the array, and False otherwise.\nWhat would be the base case(s) we'd have to consider for implementing this function?\nHow should our recursive solution converge on our base case(s)?\nIn your own words, write out the three rules for recursion and how you can identify when a problem is amenable to using a recursive method.\n- problem has an obvious base case\n- the data changes predictably on the way to the base case ",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "target",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "target = 3\n# print(linear_search(arr, target))\n\"\"\"\nWrite a recursive search function that receives as input an array of integers and a target integer value. This function should return True if the target element exists in the array, and False otherwise.\nWhat would be the base case(s) we'd have to consider for implementing this function?\nHow should our recursive solution converge on our base case(s)?\nIn your own words, write out the three rules for recursion and how you can identify when a problem is amenable to using a recursive method.\n- problem has an obvious base case\n- the data changes predictably on the way to the base case \n- the function must call itself",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "arr = [1, 2, 3, 4, 5, 6]\ntarget = 55\ndef binary_recursive_search(arr, target, min_index, max_index):\n    if min_index >= max_index:\n        return -1\n    guess = (max_index + min_index) // 2\n    if arr[guess] == target:\n        return guess\n    elif target < arr[guess]:\n        return binary_recursive_search(arr, target, min_index, guess - 1)",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "target",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "target = 55\ndef binary_recursive_search(arr, target, min_index, max_index):\n    if min_index >= max_index:\n        return -1\n    guess = (max_index + min_index) // 2\n    if arr[guess] == target:\n        return guess\n    elif target < arr[guess]:\n        return binary_recursive_search(arr, target, min_index, guess - 1)\n    else:",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "surnames",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "surnames = [\n    'liu',\n    'mcdowell',\n    'nixon',\n    'sparks',\n    'zhang',\n    'ahmed',  # <-- rotates here!\n    'brandt',\n    'davenport',\n    'farley',",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "surnames",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "surnames = [\n    \"sparks\",\n    \"zhang\",\n    \"liu\",\n    \"ahmed\",  # <-- rotates here!\n    \"brandt\",\n    \"davenport\",\n    \"farley\",\n    \"glover\",\n    \"kennedy\",",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "n = [1, 2, 3, 4, 5, 6, 7, 8, 9]\ndef firstDraftWithTypo(n):\n    # Your code here\n    pass\n    contains_typo = 4\n    min = 0\n    max = len(n) - 1\n    while not max < min:\n        guess = (min + max) // 2\n        # if containsTypo were real this line would be:",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "n = 3\ndef eating_cookies(n, cache=None):\n    # if n < 0:\n    #     return 0\n    # if n == 0:\n    #     return 1\n    # return eating_cookies(n-1) + eating_cookies(n - 2) + eating_cookies(n -3)\n    # let the cache be 2 longer than n\n    cache = [0] * (n + 2)\n    print(cache)",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "removeAdjacent(s)",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "removeAdjacent(s) = \"a\";\nFor s = \"abccaaab\", the output should be\nremoveAdjacent(s) = \"abcab\".\n\"\"\"\n# s = \"aaaaa\"\n# s = \"abccaaab\"\ndef removeAdjacent(s):\n    # add first letter to new string\n    if s == \"\":\n        return s",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "removeAdjacent(s)",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "removeAdjacent(s) = \"abcab\".\n\"\"\"\n# s = \"aaaaa\"\n# s = \"abccaaab\"\ndef removeAdjacent(s):\n    # add first letter to new string\n    if s == \"\":\n        return s\n    new_str = s[0]\n    # iterate the string",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "str",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "str = \"reverse\"\ndef reverse_String(str):\n    i, j = 0, len(str) - 1\n    print(i, j)\n    while i < j:\n        str[i], str[j] = str[j], str[i]\n        i += 1\n        j -= 1\n    return str\n# print(reverse_String(str))",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "checkPalindrome(inputString)",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "checkPalindrome(inputString) = true;\nFor inputString = \"abac\", the output should be\ncheckPalindrome(inputString) = false;\nFor inputString = \"a\", the output should be\ncheckPalindrome(inputString) = true.\n\"\"\"\ninputString = \"aabaa\"\n# inputString = \"abac\"\n# inputString = \"a\"\ninputString = \"hlbeeykoqqqqokyeeblh\"",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "checkPalindrome(inputString)",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "checkPalindrome(inputString) = false;\nFor inputString = \"a\", the output should be\ncheckPalindrome(inputString) = true.\n\"\"\"\ninputString = \"aabaa\"\n# inputString = \"abac\"\n# inputString = \"a\"\ninputString = \"hlbeeykoqqqqokyeeblh\"\ndef checkPalindrome(inputString):\n    return inputString == inputString[::-1]",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "checkPalindrome(inputString)",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "checkPalindrome(inputString) = true.\n\"\"\"\ninputString = \"aabaa\"\n# inputString = \"abac\"\n# inputString = \"a\"\ninputString = \"hlbeeykoqqqqokyeeblh\"\ndef checkPalindrome(inputString):\n    return inputString == inputString[::-1]\n# print(checkPalindrome(inputString))\n\"\"\"",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "inputString",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "inputString = \"aabaa\"\n# inputString = \"abac\"\n# inputString = \"a\"\ninputString = \"hlbeeykoqqqqokyeeblh\"\ndef checkPalindrome(inputString):\n    return inputString == inputString[::-1]\n# print(checkPalindrome(inputString))\n\"\"\"\n*** Data Structures and Algorithms Sprint ***\n---------------------------------------------",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "inputString",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "inputString = \"hlbeeykoqqqqokyeeblh\"\ndef checkPalindrome(inputString):\n    return inputString == inputString[::-1]\n# print(checkPalindrome(inputString))\n\"\"\"\n*** Data Structures and Algorithms Sprint ***\n---------------------------------------------\n\"\"\"\n\"\"\"\n*** Reverse Linked List ***",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "reverseLinkedList(l)",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "reverseLinkedList(l) = [5, 4, 3, 2, 1].\n\"\"\"\n# Singly-linked lists are already defined with this interface:\n# class ListNode(object):\n#   def __init__(self, x):\n#     self.value = x\n#     self.next = None\n#\ndef reverseLinkedList(l):\n    cur = l",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "word1",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "word1 = \"tangpam\"\nword2 = \"anagram\"\ndef checkBlanagrams(word1, word2):\n    if word1 == \"\" or word2 == \"\":\n        return False\n    work_string = \"\"\n    diff = 0\n    sort1 = sorted(word1)  # O(n) space O(nlogn) time\n    sort2 = sorted(word2)  # O(n) space O(nlogn) time\n    for i in range(len(word1)):  # O(n)",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "word2",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "word2 = \"anagram\"\ndef checkBlanagrams(word1, word2):\n    if word1 == \"\" or word2 == \"\":\n        return False\n    work_string = \"\"\n    diff = 0\n    sort1 = sorted(word1)  # O(n) space O(nlogn) time\n    sort2 = sorted(word2)  # O(n) space O(nlogn) time\n    for i in range(len(word1)):  # O(n)\n        # check for substitutions",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "nums",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "nums = [4, 5, 6, 7, 0, 1, 2]\ntarget = 0\ndef findValueSortedShiftedArray(nums, target):\n    min = 0\n    max = len(nums) - 1\n    while not max < min:\n        guess = (max + min) // 2\n        if nums[guess] == target:\n            return guess\n        elif nums[min] <= nums[guess]:",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "target",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "peekOfCode": "target = 0\ndef findValueSortedShiftedArray(nums, target):\n    min = 0\n    max = len(nums) - 1\n    while not max < min:\n        guess = (max + min) // 2\n        if nums[guess] == target:\n            return guess\n        elif nums[min] <= nums[guess]:\n            if nums[min] <= target < nums[guess]:",
        "detail": "_BACKUP..gitbook.assets.cs-weeks3-4-projects",
        "documentation": {}
    },
    {
        "label": "BSTNode",
        "kind": 6,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "class BSTNode:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n    def insert(self, value):\n        if value < self.value:\n            if self.left is None:\n                self.left = BSTNode(value)\n            else:",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "BST",
        "kind": 6,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "class BST:\n    def __init__(self, value):\n        self.root = BSTNode(value)\n    def insert(self, value):\n        return self.root.insert(value)\n    def search(self, target):\n        return self.root.search(target)\n    def find_minimum_value(self):\n        return self.root.find_minimum_value().value\n    def delete(self, value):",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "BinaryTreeNode",
        "kind": 6,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "class BinaryTreeNode:\n    def __init__(self, value=0, left=None, right=None):\n        self.value = value\n        self.left = left\n        self.right = right\ndef maxDepth(self, root):\n    # if root is None return 0\n    if root is None:\n        return 0\n    # if root exists get the left depth and the right depth by recursively",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "class TreeNode:\n    def __init__(self, value=0, left=None, right=None):\n        self.value = value\n        self.left = left\n        self.right = right\ndef is_valid_BST(self, root):\n    # if there is no root return False\n    if root is None:\n        return True\n    # traverse the tree to make sure it is valid",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\ndef helper(root, res):\n    if root is None:\n        return\n    helper(root.left, res)\n    res.append(root.val)",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\ndef helper(root, res):\n    if root is None:\n        return\n    res.append(root.val)\n    helper(root.left, res)",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\ndef helper(root, res):\n    if root is None:\n        return\n    helper(root.left, res)\n    helper(root.right, res)",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\ndef breadth_first_traversal(root):\n    if root is None:\n        return []\n    result = []\n    queue = []",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n# go all the way down to left then back to root then right in iterative or\n# recursive\n# for recursive solution keep track of base case (when there is no root) and\n# the recursive way\ndef inorder_traversal(root):",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\ndef build_tree(preorder, inorder):\n    # inorder (left -> right -> root ->)\n    # preorder (root -> left -> right)\n    # the absolute root will be preorder[0]\n    # all items to the left of inorder[root] will be the left subtree",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "Graph",
        "kind": 6,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "class Graph:\n    def __init__(self):\n        self.vertices = {\n            'A': {'B': 1},\n            'B': {'C': 3, 'D': 2, 'E': 1},\n            'C': {'E': 4},\n            'D': {'E': 2},\n            'E': {'F': 3},\n            'F': {},\n            'G': {'D': 1},",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "Graph",
        "kind": 6,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "class Graph:\n    def __init__(self):\n        self.edges = [\n            [0, 1, 0, 0, 0, 0, 0],\n            [0, 0, 3, 3, 1, 0, 0],\n            [0, 0, 0, 0, 4, 0, 0],\n            [0, 0, 0, 0, 2, 0, 0],\n            [0, 0, 0, 0, 0, 3, 0],\n            [0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 1, 0, 0, 0],",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "Vertex",
        "kind": 6,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "class Vertex:\n    def __init__(self, value):\n        self.value = value\n        self.connections = {}\n    def __str__(self):\n        return str(self.value) + ' connections: ' + str(\n            [x.value for x in self.connections])\n    def add_connection(self, vert, weight=0):\n        self.connections[vert] = weight\n    def get_connections(self):",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "Graph",
        "kind": 6,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "class Graph:\n    def __init__(self):\n        self.vertices = {}\n        self.count = 0\n    def __contains__(self, vert):\n        return vert in self.vertices\n    def __iter__(self):\n        return iter(self.vertices.values())\n    def add_vertex(self, value):\n        self.count += 1",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "GraphNode",
        "kind": 6,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "class GraphNode:\n    def __init__(self, label):\n        self.label = label\n        self.neighbors = set()\n        self.color = None\ndef color_graph(graph, colors):\n    # make a graph to pass in\n    # try to get edges count\n    # edges plus 1 is colors\n    pass",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "Graph",
        "kind": 6,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "class Graph:\n    def __init__(self):\n        self.vertices = {\n                            \"A\": {\"B\", \"C\", \"D\"},\n                            \"B\": {},\n                            \"C\": {\"E\", \"F\"},\n                            \"D\": {\"G\"},\n                            \"E\": {\"G\"},\n                            \"F\": {\"J\"},\n                            \"G\": {},",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "Graph",
        "kind": 6,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "class Graph:\n    def __init__(self):\n        self.vertices = {\n                            \"A\": {\"B\", \"C\", \"D\"},\n                            \"B\": {},\n                            \"C\": {\"E\", \"F\"},\n                            \"D\": {\"G\"},\n                            \"E\": {\"G\"},\n                            \"F\": {\"J\"},\n                            \"G\": {},",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "class Solution:\n    def isCompleteTree(self, root: TreeNode) -> bool:\n        # we want to check each node for a right child\n        # if a right child exists and no left child exists we can return false\n        # if the left subtree is missing one or both children where the right\n        # subtree at that level has children return false\n        # init case where a node has no right child\n        no_right_child = False\n        # init case where a node has no children\n        no_children = False",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "maxDepth",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def maxDepth(self, root):\n    # if root is None return 0\n    if root is None:\n        return 0\n    # if root exists get the left depth and the right depth by recursively\n    # calling maxDepth on each side of the subtree\n    left_depth = self.maxDepth(root.left)\n    right_depth = self.maxDepth(root.right)\n    # if the left depth is greater than the right depth return the left depth\n    # plus 1",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "is_valid_BST",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def is_valid_BST(self, root):\n    # if there is no root return False\n    if root is None:\n        return True\n    # traverse the tree to make sure it is valid\n    else:\n        if root.left is None and root.right is None:\n            return True\n        elif root.left is None:\n            if root.right > root:",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "balancedBinaryTree",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def balancedBinaryTree(root):\n    # define method to get the height of the tree\n    def get_height(root):\n        if root is None:\n            return 0\n        return max(get_height(root.left), get_height(root.right)) + 1\n    # if the root is None return True\n    if root is None:\n        return True\n    # get the heights of each subtree",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "minimumDepthBinaryTree",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def minimumDepthBinaryTree(root):\n    # if root is None return 0\n    if root is None:\n        return 0\n    # if root has no children return 1\n    if root.left is None and root.right is None:\n        return 1\n    # if no left child traverse the right tree\n    if root.left is None:\n        return minimumDepthBinaryTree(root.right) + 1",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "helper",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def helper(root, res):\n    if root is None:\n        return\n    helper(root.left, res)\n    res.append(root.val)\n    helper(root.right, res)\ndef inorder_traversal(root):\n    result = []\n    helper(root, result)\n    return result",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "inorder_traversal",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def inorder_traversal(root):\n    result = []\n    helper(root, result)\n    return result\n\"\"\"\nDepth first pre-order traversal\n\"\"\"\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "helper",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def helper(root, res):\n    if root is None:\n        return\n    res.append(root.val)\n    helper(root.left, res)\n    helper(root.right, res)\ndef preorder_traversal(root):\n    result = []\n    helper(root, result)\n    return result",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "preorder_traversal",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def preorder_traversal(root):\n    result = []\n    helper(root, result)\n    return result\n\"\"\"\nDepth first  first post-order traversal\n\"\"\"\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "helper",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def helper(root, res):\n    if root is None:\n        return\n    helper(root.left, res)\n    helper(root.right, res)\n    res.append(root.val)\ndef postorder_traversal(root):\n    result = []\n    helper(root, result)\n    return result",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "postorder_traversal",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def postorder_traversal(root):\n    result = []\n    helper(root, result)\n    return result\n\"\"\"\nBreadth first level order traversal\n\"\"\"\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "breadth_first_traversal",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def breadth_first_traversal(root):\n    if root is None:\n        return []\n    result = []\n    queue = []\n    queue.append(root)\n    while len(queue) != 0:\n        node = queue.pop(0)\n        result.append(node.val)\n        if node.left is not None:",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "inorder_traversal",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def inorder_traversal(root):\n    # base case\n    if root is None:\n        return []\n    # recursively call the function on the left child until no more left\n    # children then the root will be none and the values are returned up the\n    # chain inorder\n    return inorder_traversal(root.left) + [root.val] + inorder_traversal(\n        root.right)\n# the iterative way with a stack",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "build_tree",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def build_tree(preorder, inorder):\n    # inorder (left -> right -> root ->)\n    # preorder (root -> left -> right)\n    # the absolute root will be preorder[0]\n    # all items to the left of inorder[root] will be the left subtree\n    # all items to the right of inorder[root] will be the right subtree\n    # pick the next element in preorder starting with item[0]\n    # create a new node with val set to the element\n    # delete it from preorder\n    # get the index of that element from inorder list using hashMaps to",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "binaryTreeInOrderTraversal",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def binaryTreeInOrderTraversal(root):\n    stack = []\n    result = []\n    while root is not None or stack != []:\n        while root is not None:\n            stack.append(root)\n            root = root.left\n        root = stack.pop()\n        result.append(root.value)\n        root = root.right",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "traverseTree",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def traverseTree(t):\n    queue = []\n    result = []\n    if t is None:\n        return result\n    root = t\n    queue.append(root)\n    while len(queue) > 0:\n        root = queue.pop(0)\n        result.append(root.value)",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "treePaths",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def treePaths(t):\n    if t is None:\n        return []\n    result, stack = [], [(t, '')]\n    while stack:\n        root, el = stack.pop()\n        if root.left is None and root.right is None:\n            result.append(el + str(root.value))\n        if root.right:\n            stack.append((root.right, el + str(root.value) + '->'))",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "color_graph",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def color_graph(graph, colors):\n    # make a graph to pass in\n    # try to get edges count\n    # edges plus 1 is colors\n    pass\n\"\"\"\n*** Demo 2 ***\n--------------\nYou are given a 2d grid of `\"1\"`s and `\"0\"`s that represents a \"map\". The\n`\"1\"`s represent land and the `\"0\"s` represent water.",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "numIslands",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def numIslands(grid):\n    pass\n# print(numIslands(grid))\n\"\"\"\n*** Code signal ***\n-------------------\nYou are given a directed acyclic graph (DAG) that contains N nodes.\nWrite a function that can find all the possible paths from node 0 to node N - 1. You can return the path in any order.\ngraph[a] is a list of all nodes b for which the edge a -> b exists.\nExample:",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "csFindAllPathsFromAToB",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def csFindAllPathsFromAToB(graph):\n    class Graph:\n        def __init__(self):\n            self.verts = {}\n        def add_vertex(self, vert):\n            self.verts[vert] = []\n        def add_edge(self, v_from, v_to):\n            self.verts[v_from].append(v_to)\n        def is_connected(self, v_from, v_to):\n            if v_from in self.verts and v_to in self.verts:",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "floodfill",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def floodfill(image, row, col, color):\n    if image[row][col] != ' ':\n        return\n    image[row][col] = color\n    floodfill(row, col + 1, color)\n    floodfill(row, col - 1, color)\n    floodfill(row + 1, col, color)\n    floodfill(row - 1, col, color)\n\"\"\"\nDemo 2",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "find_judge",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def find_judge(N, trust):\n    \"\"\"\n    Inputs:\n    N -> int\n    trust -> List[List[int]]\n    Output:\n    int\n    \"\"\"\n    # Your code here\n\"\"\"",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "csFriendCircles",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def csFriendCircles(friendships):\n    # use dfs to ensure visiting every node\n    class Graph:\n        def __init__(self):\n            self.verts = {}\n        def add_vertex(self, vert):\n            self.verts[vert] = []\n        def add_edge(self, v_from, v_to):\n            self.verts[v_from].append(v_to)\n        def is_connected(self, v_from, v_to):",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "get_neighbors",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def get_neighbors(word):\n    neighbors = []\n    for w in words:\n        if len(w) == len(word):\n            diff = 0\n            for i in range(len(w)):\n                if w[i] != word[i]:\n                    diff += 1\n                if diff > 1:\n                    break",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "bfs",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def bfs(start_word, end_word):\n    print('s, e', start_word, end_word)\n    visited = set()\n    q = [[start_word]]\n    while q:\n        path = q.pop(0)\n        v = path[-1]\n        if v not in visited:\n            visited.add(v)\n            if v == end_word:",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "csBSTRangeSum",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def csBSTRangeSum(root, lower, upper):\n    # variable to hold running sum of target numbers\n    range = []\n    # variable to hold the current node\n    cur = root\n    # search the tree to find all numbers within the range of lower and upper\n    # dfs\n    def helper(root):\n        if root is None:\n            return",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "csBinaryTreeInvert",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def csBinaryTreeInvert(root):\n    # use a bft to visit all levels and switch the positions of left and\n    # right children for each node at each level\n    if root is None:\n        return []\n    result = []\n    queue = []\n    queue.append(root)\n    while len(queue) != 0:\n        node = queue.pop(0)",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "reversePairs",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "def reversePairs(nums):\n    # EDGE CASE if the array length is less than 2 return 0\n    if len(nums) < 2:\n        return 0\n    # init i to 0 and j to 1\n    i = 0\n    j = 1\n    # init count for reverse pairs found\n    count = 0\n    # iterate the array",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "log2(128)",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "log2(128) = h\n2**7 = 128\n7 <~~ answer\n- Calculate the total number of nodes on a perfect binary tree, given that \n  the height of the tree is 8.\nn = 2h - 1\nn = 2**8 - 1\nn = 256 - 1\nn = 255 <~~ answer\n\"\"\"",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "2**7",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "2**7 = 128\n7 <~~ answer\n- Calculate the total number of nodes on a perfect binary tree, given that \n  the height of the tree is 8.\nn = 2h - 1\nn = 2**8 - 1\nn = 256 - 1\nn = 255 <~~ answer\n\"\"\"\n\"\"\"",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "n = 2h - 1\nn = 2**8 - 1\nn = 256 - 1\nn = 255 <~~ answer\n\"\"\"\n\"\"\"\n*** Objective 2 Challenge *** \n-----------------------------\n- In your own words, explain why an unbalanced binary search tree's \nperformance becomes degraded.",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "n = 2**8 - 1\nn = 256 - 1\nn = 255 <~~ answer\n\"\"\"\n\"\"\"\n*** Objective 2 Challenge *** \n-----------------------------\n- In your own words, explain why an unbalanced binary search tree's \nperformance becomes degraded.\nThe worst case performance is linear because each node would potentially need to be traversed",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "n = 256 - 1\nn = 255 <~~ answer\n\"\"\"\n\"\"\"\n*** Objective 2 Challenge *** \n-----------------------------\n- In your own words, explain why an unbalanced binary search tree's \nperformance becomes degraded.\nThe worst case performance is linear because each node would potentially need to be traversed\n\"\"\"",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "n = 255 <~~ answer\n\"\"\"\n\"\"\"\n*** Objective 2 Challenge *** \n-----------------------------\n- In your own words, explain why an unbalanced binary search tree's \nperformance becomes degraded.\nThe worst case performance is linear because each node would potentially need to be traversed\n\"\"\"\n\"\"\"",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "preorder",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "preorder = [5,7,22,13,9]\ninorder = [7,5,13,22,9]\nOutput:\n    5\n   / \\\n  7  22\n    /  \\\n   13   9\n   - Preorder Traversal\n--- Visit the root node first",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "inorder",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "inorder = [7,5,13,22,9]\nOutput:\n    5\n   / \\\n  7  22\n    /  \\\n   13   9\n   - Preorder Traversal\n--- Visit the root node first\n--- Traverse the left subtree in preorder",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "preorder",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "preorder = [5, 7, 22, 13, 9]\ninorder = [7, 5, 13, 22, 9]\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\ndef build_tree(preorder, inorder):\n    # inorder (left -> right -> root ->)",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "inorder",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "inorder = [7, 5, 13, 22, 9]\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\ndef build_tree(preorder, inorder):\n    # inorder (left -> right -> root ->)\n    # preorder (root -> left -> right)",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "tree",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "tree = build_tree(preorder, inorder)\n# print('tree:', inorder_traversal(tree))\n\"\"\"\n*** CodeSignal ***\n------------------\n\"\"\"\n\"\"\"\nYou are given a binary tree. Write a function that returns the binary tree's node values using an in-order traversal.\nExample:\nInput: [2,None,3,4]",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "t = {\n    \"value\": 1,\n    \"left\": {\n        \"value\": 2,\n        \"left\": null,\n        \"right\": {\n            \"value\": 3,\n            \"left\": null,\n            \"right\": null\n        }",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "traverseTree(t)",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "traverseTree(t) = [1, 2, 4, 3, 5].\nThis t looks like this:\n     1\n   /   \\\n  2     4\n   \\   /\n    3 5\n\"\"\"\nt = {\n    \"value\": 1,",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "t = {\n    \"value\": 1,\n    \"left\": {\n        \"value\": 2,\n        \"left\": None,\n        \"right\": {\n            \"value\": 3,\n            \"left\": None,\n            \"right\": None\n        }",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "t = {\n    \"value\": 5,\n    \"left\": {\n        \"value\": 2,\n        \"left\": {\n            \"value\": 10,\n            \"left\": null,\n            \"right\": null\n        },\n        \"right\": {",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "treePaths(t)",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "treePaths(t) = [\"5->2->10\", \"5->2->4\", \"5->-3\"].\nThe given tree looks like this:\n    5\n   / \\\n  2  -3\n / \\\n10  4\n\"\"\"\n#\n# Binary trees are already defined with this interface:",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "g_verts",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "g_verts = ['A', 'B', 'C', 'D', 'E']\ng = Graph()\nfor v in g_verts:\n    g.add_vertex(g)\ng.add_edge('A', 'B', 1)\ng.add_edge('B', 'C', 3)\ng.add_edge('B', 'D', 2)\ng.add_edge('E', 'D', 1)\n# for v in g:\n#     for w in v.get_connections():",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "g",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "g = Graph()\nfor v in g_verts:\n    g.add_vertex(g)\ng.add_edge('A', 'B', 1)\ng.add_edge('B', 'C', 3)\ng.add_edge('B', 'D', 2)\ng.add_edge('E', 'D', 1)\n# for v in g:\n#     for w in v.get_connections():\n#         print(\"( %s, %s )\" % (v.get_value(), w.get_value()))",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "grid",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "grid = [\n    [\"1\", \"1\", \"1\", \"1\", \"0\"],\n    [\"1\", \"1\", \"0\", \"1\", \"0\"],\n    [\"1\", \"1\", \"0\", \"0\", \"0\"],\n    [\"0\", \"0\", \"0\", \"0\", \"0\"]\n]\ndef numIslands(grid):\n    pass\n# print(numIslands(grid))\n\"\"\"",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "graph",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "graph = [[1, 2], [3], [3], [4], []]\ndef csFindAllPathsFromAToB(graph):\n    class Graph:\n        def __init__(self):\n            self.verts = {}\n        def add_vertex(self, vert):\n            self.verts[vert] = []\n        def add_edge(self, v_from, v_to):\n            self.verts[v_from].append(v_to)\n        def is_connected(self, v_from, v_to):",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "image",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "image = [[1,1,1],[1,1,0],[1,0,1]]\nsr = 1, sc = 1, newColor = 2\nOutput: [[2,2,2],[2,2,0],[2,0,1]]\nExplanation:\nFrom the center of the image (with position (sr, sc) = (1, 1)), all pixels\nconnected by a path of the same color as the starting pixel are colored with\nthe new color.\nNote the bottom corner is not colored 2, because it is not 4-directionally\nconnected to the starting pixel.\n```",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "sr",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "sr = 1, sc = 1, newColor = 2\nOutput: [[2,2,2],[2,2,0],[2,0,1]]\nExplanation:\nFrom the center of the image (with position (sr, sc) = (1, 1)), all pixels\nconnected by a path of the same color as the starting pixel are colored with\nthe new color.\nNote the bottom corner is not colored 2, because it is not 4-directionally\nconnected to the starting pixel.\n```\nNotes:",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "friendships",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "friendships = [[1, 1, 0],\n               [1, 1, 0],\n               [0, 0, 1]]\nfriendships = [[1, 1, 0],\n               [1, 1, 1],\n               [0, 1, 1]]\ndef csFriendCircles(friendships):\n    # use dfs to ensure visiting every node\n    class Graph:\n        def __init__(self):",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "friendships",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "friendships = [[1, 1, 0],\n               [1, 1, 1],\n               [0, 1, 1]]\ndef csFriendCircles(friendships):\n    # use dfs to ensure visiting every node\n    class Graph:\n        def __init__(self):\n            self.verts = {}\n        def add_vertex(self, vert):\n            self.verts[vert] = []",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "start_word",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "start_word = 'hit'\nend_word = 'cog'\nreturn: ['hit', 'hot', 'cot', 'cog'] \n\"\"\"\nwords = set()\nwith open('words.txt') as f:\n    for w in f:\n        w = w.strip().lower()\n        words.add(w)\n# create function to get all the neighbors of a word ( only 1 letter diff)",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "end_word",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "end_word = 'cog'\nreturn: ['hit', 'hot', 'cot', 'cog'] \n\"\"\"\nwords = set()\nwith open('words.txt') as f:\n    for w in f:\n        w = w.strip().lower()\n        words.add(w)\n# create function to get all the neighbors of a word ( only 1 letter diff)\ndef get_neighbors(word):",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "words",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "words = set()\nwith open('words.txt') as f:\n    for w in f:\n        w = w.strip().lower()\n        words.add(w)\n# create function to get all the neighbors of a word ( only 1 letter diff)\ndef get_neighbors(word):\n    neighbors = []\n    for w in words:\n        if len(w) == len(word):",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "root = [10, 5, 15, 3, 7, null, 18]\nlower = 7\nupper = 15\n         10\n         / \\\n        5  15\n       / \\    \\\n      3   7    18\nOutput:\n32",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "lower",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "lower = 7\nupper = 15\n         10\n         / \\\n        5  15\n       / \\    \\\n      3   7    18\nOutput:\n32\nExample 2:",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "upper",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "upper = 15\n         10\n         / \\\n        5  15\n       / \\    \\\n      3   7    18\nOutput:\n32\nExample 2:\nInput:",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "root = [10,5,15,3,7,13,18,1,null,6]\nlower = 6\nupper = 10\n           10\n          /  \\\n       5       15\n     / \\     /   \\ \n    3   7  13   18\n   /   /\n  1   6",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "lower",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "lower = 6\nupper = 10\n           10\n          /  \\\n       5       15\n     / \\     /   \\ \n    3   7  13   18\n   /   /\n  1   6\nOutput:",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "upper",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "upper = 10\n           10\n          /  \\\n       5       15\n     / \\     /   \\ \n    3   7  13   18\n   /   /\n  1   6\nOutput:\n23",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "root = [10, 5, 15, 3, 7, None, 18]\nlower = 7\nupper = 15\n#\n# Binary trees are already defined with this interface:\n# class Tree(object):\n#   def __init__(self, x):\n#     self.value = x\n#     self.left = None\n#     self.right = None",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "lower",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "lower = 7\nupper = 15\n#\n# Binary trees are already defined with this interface:\n# class Tree(object):\n#   def __init__(self, x):\n#     self.value = x\n#     self.left = None\n#     self.right = None\n#",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "upper",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "upper = 15\n#\n# Binary trees are already defined with this interface:\n# class Tree(object):\n#   def __init__(self, x):\n#     self.value = x\n#     self.left = None\n#     self.right = None\n#\n# Binary trees are already defined with this interface:",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "nums",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "peekOfCode": "nums = [1, 3, 2, 3, 1]\nprint(f'reversePairs(nums): {reversePairs(nums)}')\n\"\"\"\n958. Check Completeness of a Binary Tree\nMedium\n1072\n14\nAdd to List\nShare\nGiven the root of a binary tree, determine if it is a complete binary tree.",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects (1)",
        "documentation": {}
    },
    {
        "label": "BSTNode",
        "kind": 6,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "class BSTNode:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n    def insert(self, value):\n        if value < self.value:\n            if self.left is None:\n                self.left = BSTNode(value)\n            else:",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "BST",
        "kind": 6,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "class BST:\n    def __init__(self, value):\n        self.root = BSTNode(value)\n    def insert(self, value):\n        return self.root.insert(value)\n    def search(self, target):\n        return self.root.search(target)\n    def find_minimum_value(self):\n        return self.root.find_minimum_value().value\n    def delete(self, value):",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "BinaryTreeNode",
        "kind": 6,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "class BinaryTreeNode:\n    def __init__(self, value=0, left=None, right=None):\n        self.value = value\n        self.left = left\n        self.right = right\ndef maxDepth(self, root):\n    # if root is None return 0\n    if root is None:\n        return 0\n    # if root exists get the left depth and the right depth by recursively",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "class TreeNode:\n    def __init__(self, value=0, left=None, right=None):\n        self.value = value\n        self.left = left\n        self.right = right\ndef is_valid_BST(self, root):\n    # if there is no root return False\n    if root is None:\n        return True\n    # traverse the tree to make sure it is valid",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\ndef helper(root, res):\n    if root is None:\n        return\n    helper(root.left, res)\n    res.append(root.val)",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\ndef helper(root, res):\n    if root is None:\n        return\n    res.append(root.val)\n    helper(root.left, res)",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\ndef helper(root, res):\n    if root is None:\n        return\n    helper(root.left, res)\n    helper(root.right, res)",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\ndef breadth_first_traversal(root):\n    if root is None:\n        return []\n    result = []\n    queue = []",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n# go all the way down to left then back to root then right in iterative or\n# recursive\n# for recursive solution keep track of base case (when there is no root) and\n# the recursive way\ndef inorder_traversal(root):",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\ndef build_tree(preorder, inorder):\n    # inorder (left -> right -> root ->)\n    # preorder (root -> left -> right)\n    # the absolute root will be preorder[0]\n    # all items to the left of inorder[root] will be the left subtree",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "Graph",
        "kind": 6,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "class Graph:\n    def __init__(self):\n        self.vertices = {\n            \"A\": {\"B\": 1},\n            \"B\": {\"C\": 3, \"D\": 2, \"E\": 1},\n            \"C\": {\"E\": 4},\n            \"D\": {\"E\": 2},\n            \"E\": {\"F\": 3},\n            \"F\": {},\n            \"G\": {\"D\": 1},",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "Graph",
        "kind": 6,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "class Graph:\n    def __init__(self):\n        self.edges = [\n            [0, 1, 0, 0, 0, 0, 0],\n            [0, 0, 3, 3, 1, 0, 0],\n            [0, 0, 0, 0, 4, 0, 0],\n            [0, 0, 0, 0, 2, 0, 0],\n            [0, 0, 0, 0, 0, 3, 0],\n            [0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 1, 0, 0, 0],",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "Vertex",
        "kind": 6,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "class Vertex:\n    def __init__(self, value):\n        self.value = value\n        self.connections = {}\n    def __str__(self):\n        return (\n            str(self.value)\n            + \" connections: \"\n            + str([x.value for x in self.connections])\n        )",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "Graph",
        "kind": 6,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "class Graph:\n    def __init__(self):\n        self.vertices = {}\n        self.count = 0\n    def __contains__(self, vert):\n        return vert in self.vertices\n    def __iter__(self):\n        return iter(self.vertices.values())\n    def add_vertex(self, value):\n        self.count += 1",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "GraphNode",
        "kind": 6,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "class GraphNode:\n    def __init__(self, label):\n        self.label = label\n        self.neighbors = set()\n        self.color = None\ndef color_graph(graph, colors):\n    # make a graph to pass in\n    # try to get edges count\n    # edges plus 1 is colors\n    pass",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "Graph",
        "kind": 6,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "class Graph:\n    def __init__(self):\n        self.vertices = {\n                            \"A\": {\"B\", \"C\", \"D\"},\n                            \"B\": {},\n                            \"C\": {\"E\", \"F\"},\n                            \"D\": {\"G\"},\n                            \"E\": {\"G\"},\n                            \"F\": {\"J\"},\n                            \"G\": {},",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "Graph",
        "kind": 6,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "class Graph:\n    def __init__(self):\n        self.vertices = {\n                            \"A\": {\"B\", \"C\", \"D\"},\n                            \"B\": {},\n                            \"C\": {\"E\", \"F\"},\n                            \"D\": {\"G\"},\n                            \"E\": {\"G\"},\n                            \"F\": {\"J\"},\n                            \"G\": {},",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "class Solution:\n    def isCompleteTree(self, root: TreeNode) -> bool:\n        # we want to check each node for a right child\n        # if a right child exists and no left child exists we can return false\n        # if the left subtree is missing one or both children where the right\n        # subtree at that level has children return false\n        # init case where a node has no right child\n        no_right_child = False\n        # init case where a node has no children\n        no_children = False",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "maxDepth",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def maxDepth(self, root):\n    # if root is None return 0\n    if root is None:\n        return 0\n    # if root exists get the left depth and the right depth by recursively\n    # calling maxDepth on each side of the subtree\n    left_depth = self.maxDepth(root.left)\n    right_depth = self.maxDepth(root.right)\n    # if the left depth is greater than the right depth return the left depth\n    # plus 1",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "is_valid_BST",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def is_valid_BST(self, root):\n    # if there is no root return False\n    if root is None:\n        return True\n    # traverse the tree to make sure it is valid\n    else:\n        if root.left is None and root.right is None:\n            return True\n        elif root.left is None:\n            if root.right > root:",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "balancedBinaryTree",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def balancedBinaryTree(root):\n    # define method to get the height of the tree\n    def get_height(root):\n        if root is None:\n            return 0\n        return max(get_height(root.left), get_height(root.right)) + 1\n    # if the root is None return True\n    if root is None:\n        return True\n    # get the heights of each subtree",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "minimumDepthBinaryTree",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def minimumDepthBinaryTree(root):\n    # if root is None return 0\n    if root is None:\n        return 0\n    # if root has no children return 1\n    if root.left is None and root.right is None:\n        return 1\n    # if no left child traverse the right tree\n    if root.left is None:\n        return minimumDepthBinaryTree(root.right) + 1",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "helper",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def helper(root, res):\n    if root is None:\n        return\n    helper(root.left, res)\n    res.append(root.val)\n    helper(root.right, res)\ndef inorder_traversal(root):\n    result = []\n    helper(root, result)\n    return result",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "inorder_traversal",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def inorder_traversal(root):\n    result = []\n    helper(root, result)\n    return result\n\"\"\"\nDepth first pre-order traversal\n\"\"\"\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "helper",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def helper(root, res):\n    if root is None:\n        return\n    res.append(root.val)\n    helper(root.left, res)\n    helper(root.right, res)\ndef preorder_traversal(root):\n    result = []\n    helper(root, result)\n    return result",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "preorder_traversal",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def preorder_traversal(root):\n    result = []\n    helper(root, result)\n    return result\n\"\"\"\nDepth first  first post-order traversal\n\"\"\"\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "helper",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def helper(root, res):\n    if root is None:\n        return\n    helper(root.left, res)\n    helper(root.right, res)\n    res.append(root.val)\ndef postorder_traversal(root):\n    result = []\n    helper(root, result)\n    return result",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "postorder_traversal",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def postorder_traversal(root):\n    result = []\n    helper(root, result)\n    return result\n\"\"\"\nBreadth first level order traversal\n\"\"\"\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "breadth_first_traversal",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def breadth_first_traversal(root):\n    if root is None:\n        return []\n    result = []\n    queue = []\n    queue.append(root)\n    while len(queue) != 0:\n        node = queue.pop(0)\n        result.append(node.val)\n        if node.left is not None:",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "inorder_traversal",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def inorder_traversal(root):\n    # base case\n    if root is None:\n        return []\n    # recursively call the function on the left child until no more left\n    # children then the root will be none and the values are returned up the\n    # chain inorder\n    return inorder_traversal(root.left) + [root.val] + inorder_traversal(root.right)\n# the iterative way with a stack\n# declare the stack and the result array",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "build_tree",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def build_tree(preorder, inorder):\n    # inorder (left -> right -> root ->)\n    # preorder (root -> left -> right)\n    # the absolute root will be preorder[0]\n    # all items to the left of inorder[root] will be the left subtree\n    # all items to the right of inorder[root] will be the right subtree\n    # pick the next element in preorder starting with item[0]\n    # create a new node with val set to the element\n    # delete it from preorder\n    # get the index of that element from inorder list using hashMaps to",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "binaryTreeInOrderTraversal",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def binaryTreeInOrderTraversal(root):\n    stack = []\n    result = []\n    while root is not None or stack != []:\n        while root is not None:\n            stack.append(root)\n            root = root.left\n        root = stack.pop()\n        result.append(root.value)\n        root = root.right",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "traverseTree",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def traverseTree(t):\n    queue = []\n    result = []\n    if t is None:\n        return result\n    root = t\n    queue.append(root)\n    while len(queue) > 0:\n        root = queue.pop(0)\n        result.append(root.value)",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "treePaths",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def treePaths(t):\n    if t is None:\n        return []\n    result, stack = [], [(t, \"\")]\n    while stack:\n        root, el = stack.pop()\n        if root.left is None and root.right is None:\n            result.append(el + str(root.value))\n        if root.right:\n            stack.append((root.right, el + str(root.value) + \"->\"))",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "color_graph",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def color_graph(graph, colors):\n    # make a graph to pass in\n    # try to get edges count\n    # edges plus 1 is colors\n    pass\n\"\"\"\n*** Demo 2 ***\n--------------\nYou are given a 2d grid of `\"1\"`s and `\"0\"`s that represents a \"map\". The\n`\"1\"`s represent land and the `\"0\"s` represent water.",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "numIslands",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def numIslands(grid):\n    pass\n# print(numIslands(grid))\n\"\"\"\n*** Code signal ***\n-------------------\nYou are given a directed acyclic graph (DAG) that contains N nodes.\nWrite a function that can find all the possible paths from node 0 to node N - 1. You can return the path in any order.\ngraph[a] is a list of all nodes b for which the edge a -> b exists.\nExample:",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "csFindAllPathsFromAToB",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def csFindAllPathsFromAToB(graph):\n    class Graph:\n        def __init__(self):\n            self.verts = {}\n        def add_vertex(self, vert):\n            self.verts[vert] = []\n        def add_edge(self, v_from, v_to):\n            self.verts[v_from].append(v_to)\n        def is_connected(self, v_from, v_to):\n            if v_from in self.verts and v_to in self.verts:",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "floodfill",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def floodfill(image, row, col, color):\n    if image[row][col] != \" \":\n        return\n    image[row][col] = color\n    floodfill(row, col + 1, color)\n    floodfill(row, col - 1, color)\n    floodfill(row + 1, col, color)\n    floodfill(row - 1, col, color)\n\"\"\"\nDemo 2",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "find_judge",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def find_judge(N, trust):\n    \"\"\"\n    Inputs:\n    N -> int\n    trust -> List[List[int]]\n    Output:\n    int\n    \"\"\"\n    # Your code here\n\"\"\"",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "csFriendCircles",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def csFriendCircles(friendships):\n    # use dfs to ensure visiting every node\n    class Graph:\n        def __init__(self):\n            self.verts = {}\n        def add_vertex(self, vert):\n            self.verts[vert] = []\n        def add_edge(self, v_from, v_to):\n            self.verts[v_from].append(v_to)\n        def is_connected(self, v_from, v_to):",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "get_neighbors",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def get_neighbors(word):\n    neighbors = []\n    for w in words:\n        if len(w) == len(word):\n            diff = 0\n            for i in range(len(w)):\n                if w[i] != word[i]:\n                    diff += 1\n                if diff > 1:\n                    break",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "bfs",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def bfs(start_word, end_word):\n    print(\"s, e\", start_word, end_word)\n    visited = set()\n    q = [[start_word]]\n    while q:\n        path = q.pop(0)\n        v = path[-1]\n        if v not in visited:\n            visited.add(v)\n            if v == end_word:",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "csBSTRangeSum",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def csBSTRangeSum(root, lower, upper):\n    # variable to hold running sum of target numbers\n    range = []\n    # variable to hold the current node\n    cur = root\n    # search the tree to find all numbers within the range of lower and upper\n    # dfs\n    def helper(root):\n        if root is None:\n            return",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "csBinaryTreeInvert",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def csBinaryTreeInvert(root):\n    # use a bft to visit all levels and switch the positions of left and\n    # right children for each node at each level\n    if root is None:\n        return []\n    result = []\n    queue = []\n    queue.append(root)\n    while len(queue) != 0:\n        node = queue.pop(0)",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "reversePairs",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "def reversePairs(nums):\n    # EDGE CASE if the array length is less than 2 return 0\n    if len(nums) < 2:\n        return 0\n    # init i to 0 and j to 1\n    i = 0\n    j = 1\n    # init count for reverse pairs found\n    count = 0\n    # iterate the array",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "log2(128)",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "log2(128) = h\n2**7 = 128\n7 <~~ answer\n- Calculate the total number of nodes on a perfect binary tree, given that \n  the height of the tree is 8.\nn = 2h - 1\nn = 2**8 - 1\nn = 256 - 1\nn = 255 <~~ answer\n\"\"\"",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "2**7",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "2**7 = 128\n7 <~~ answer\n- Calculate the total number of nodes on a perfect binary tree, given that \n  the height of the tree is 8.\nn = 2h - 1\nn = 2**8 - 1\nn = 256 - 1\nn = 255 <~~ answer\n\"\"\"\n\"\"\"",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "n = 2h - 1\nn = 2**8 - 1\nn = 256 - 1\nn = 255 <~~ answer\n\"\"\"\n\"\"\"\n*** Objective 2 Challenge *** \n-----------------------------\n- In your own words, explain why an unbalanced binary search tree's \nperformance becomes degraded.",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "n = 2**8 - 1\nn = 256 - 1\nn = 255 <~~ answer\n\"\"\"\n\"\"\"\n*** Objective 2 Challenge *** \n-----------------------------\n- In your own words, explain why an unbalanced binary search tree's \nperformance becomes degraded.\nThe worst case performance is linear because each node would potentially need to be traversed",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "n = 256 - 1\nn = 255 <~~ answer\n\"\"\"\n\"\"\"\n*** Objective 2 Challenge *** \n-----------------------------\n- In your own words, explain why an unbalanced binary search tree's \nperformance becomes degraded.\nThe worst case performance is linear because each node would potentially need to be traversed\n\"\"\"",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "n = 255 <~~ answer\n\"\"\"\n\"\"\"\n*** Objective 2 Challenge *** \n-----------------------------\n- In your own words, explain why an unbalanced binary search tree's \nperformance becomes degraded.\nThe worst case performance is linear because each node would potentially need to be traversed\n\"\"\"\n\"\"\"",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "preorder",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "preorder = [5,7,22,13,9]\ninorder = [7,5,13,22,9]\nOutput:\n    5\n   / \\\n  7  22\n    /  \\\n   13   9\n   - Preorder Traversal\n--- Visit the root node first",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "inorder",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "inorder = [7,5,13,22,9]\nOutput:\n    5\n   / \\\n  7  22\n    /  \\\n   13   9\n   - Preorder Traversal\n--- Visit the root node first\n--- Traverse the left subtree in preorder",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "preorder",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "preorder = [5, 7, 22, 13, 9]\ninorder = [7, 5, 13, 22, 9]\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\ndef build_tree(preorder, inorder):\n    # inorder (left -> right -> root ->)",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "inorder",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "inorder = [7, 5, 13, 22, 9]\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\ndef build_tree(preorder, inorder):\n    # inorder (left -> right -> root ->)\n    # preorder (root -> left -> right)",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "tree",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "tree = build_tree(preorder, inorder)\n# print('tree:', inorder_traversal(tree))\n\"\"\"\n*** CodeSignal ***\n------------------\n\"\"\"\n\"\"\"\nYou are given a binary tree. Write a function that returns the binary tree's node values using an in-order traversal.\nExample:\nInput: [2,None,3,4]",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "t = {\n    \"value\": 1,\n    \"left\": {\n        \"value\": 2,\n        \"left\": null,\n        \"right\": {\n            \"value\": 3,\n            \"left\": null,\n            \"right\": null\n        }",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "traverseTree(t)",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "traverseTree(t) = [1, 2, 4, 3, 5].\nThis t looks like this:\n     1\n   /   \\\n  2     4\n   \\   /\n    3 5\n\"\"\"\nt = {\n    \"value\": 1,",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "t = {\n    \"value\": 1,\n    \"left\": {\n        \"value\": 2,\n        \"left\": None,\n        \"right\": {\"value\": 3, \"left\": None, \"right\": None},\n    },\n    \"right\": {\n        \"value\": 4,\n        \"left\": {\"value\": 5, \"left\": None, \"right\": None},",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "t = {\n    \"value\": 5,\n    \"left\": {\n        \"value\": 2,\n        \"left\": {\n            \"value\": 10,\n            \"left\": null,\n            \"right\": null\n        },\n        \"right\": {",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "treePaths(t)",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "treePaths(t) = [\"5->2->10\", \"5->2->4\", \"5->-3\"].\nThe given tree looks like this:\n    5\n   / \\\n  2  -3\n / \\\n10  4\n\"\"\"\n#\n# Binary trees are already defined with this interface:",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "g_verts",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "g_verts = [\"A\", \"B\", \"C\", \"D\", \"E\"]\ng = Graph()\nfor v in g_verts:\n    g.add_vertex(g)\ng.add_edge(\"A\", \"B\", 1)\ng.add_edge(\"B\", \"C\", 3)\ng.add_edge(\"B\", \"D\", 2)\ng.add_edge(\"E\", \"D\", 1)\n# for v in g:\n#     for w in v.get_connections():",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "g",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "g = Graph()\nfor v in g_verts:\n    g.add_vertex(g)\ng.add_edge(\"A\", \"B\", 1)\ng.add_edge(\"B\", \"C\", 3)\ng.add_edge(\"B\", \"D\", 2)\ng.add_edge(\"E\", \"D\", 1)\n# for v in g:\n#     for w in v.get_connections():\n#         print(\"( %s, %s )\" % (v.get_value(), w.get_value()))",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "grid",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "grid = [\n    [\"1\", \"1\", \"1\", \"1\", \"0\"],\n    [\"1\", \"1\", \"0\", \"1\", \"0\"],\n    [\"1\", \"1\", \"0\", \"0\", \"0\"],\n    [\"0\", \"0\", \"0\", \"0\", \"0\"],\n]\ndef numIslands(grid):\n    pass\n# print(numIslands(grid))\n\"\"\"",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "graph",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "graph = [[1, 2], [3], [3], [4], []]\ndef csFindAllPathsFromAToB(graph):\n    class Graph:\n        def __init__(self):\n            self.verts = {}\n        def add_vertex(self, vert):\n            self.verts[vert] = []\n        def add_edge(self, v_from, v_to):\n            self.verts[v_from].append(v_to)\n        def is_connected(self, v_from, v_to):",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "image",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "image = [[1,1,1],[1,1,0],[1,0,1]]\nsr = 1, sc = 1, newColor = 2\nOutput: [[2,2,2],[2,2,0],[2,0,1]]\nExplanation:\nFrom the center of the image (with position (sr, sc) = (1, 1)), all pixels\nconnected by a path of the same color as the starting pixel are colored with\nthe new color.\nNote the bottom corner is not colored 2, because it is not 4-directionally\nconnected to the starting pixel.\n```",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "sr",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "sr = 1, sc = 1, newColor = 2\nOutput: [[2,2,2],[2,2,0],[2,0,1]]\nExplanation:\nFrom the center of the image (with position (sr, sc) = (1, 1)), all pixels\nconnected by a path of the same color as the starting pixel are colored with\nthe new color.\nNote the bottom corner is not colored 2, because it is not 4-directionally\nconnected to the starting pixel.\n```\nNotes:",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "friendships",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "friendships = [[1, 1, 0], [1, 1, 0], [0, 0, 1]]\nfriendships = [[1, 1, 0], [1, 1, 1], [0, 1, 1]]\ndef csFriendCircles(friendships):\n    # use dfs to ensure visiting every node\n    class Graph:\n        def __init__(self):\n            self.verts = {}\n        def add_vertex(self, vert):\n            self.verts[vert] = []\n        def add_edge(self, v_from, v_to):",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "friendships",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "friendships = [[1, 1, 0], [1, 1, 1], [0, 1, 1]]\ndef csFriendCircles(friendships):\n    # use dfs to ensure visiting every node\n    class Graph:\n        def __init__(self):\n            self.verts = {}\n        def add_vertex(self, vert):\n            self.verts[vert] = []\n        def add_edge(self, v_from, v_to):\n            self.verts[v_from].append(v_to)",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "start_word",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "start_word = 'hit'\nend_word = 'cog'\nreturn: ['hit', 'hot', 'cot', 'cog'] \n\"\"\"\nwords = set()\nwith open(\"words.txt\") as f:\n    for w in f:\n        w = w.strip().lower()\n        words.add(w)\n# create function to get all the neighbors of a word ( only 1 letter diff)",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "end_word",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "end_word = 'cog'\nreturn: ['hit', 'hot', 'cot', 'cog'] \n\"\"\"\nwords = set()\nwith open(\"words.txt\") as f:\n    for w in f:\n        w = w.strip().lower()\n        words.add(w)\n# create function to get all the neighbors of a word ( only 1 letter diff)\ndef get_neighbors(word):",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "words",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "words = set()\nwith open(\"words.txt\") as f:\n    for w in f:\n        w = w.strip().lower()\n        words.add(w)\n# create function to get all the neighbors of a word ( only 1 letter diff)\ndef get_neighbors(word):\n    neighbors = []\n    for w in words:\n        if len(w) == len(word):",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "root = [10, 5, 15, 3, 7, null, 18]\nlower = 7\nupper = 15\n         10\n         / \\\n        5  15\n       / \\    \\\n      3   7    18\nOutput:\n32",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "lower",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "lower = 7\nupper = 15\n         10\n         / \\\n        5  15\n       / \\    \\\n      3   7    18\nOutput:\n32\nExample 2:",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "upper",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "upper = 15\n         10\n         / \\\n        5  15\n       / \\    \\\n      3   7    18\nOutput:\n32\nExample 2:\nInput:",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "root = [10,5,15,3,7,13,18,1,null,6]\nlower = 6\nupper = 10\n           10\n          /  \\\n       5       15\n     / \\     /   \\ \n    3   7  13   18\n   /   /\n  1   6",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "lower",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "lower = 6\nupper = 10\n           10\n          /  \\\n       5       15\n     / \\     /   \\ \n    3   7  13   18\n   /   /\n  1   6\nOutput:",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "upper",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "upper = 10\n           10\n          /  \\\n       5       15\n     / \\     /   \\ \n    3   7  13   18\n   /   /\n  1   6\nOutput:\n23",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "root = [10, 5, 15, 3, 7, None, 18]\nlower = 7\nupper = 15\n#\n# Binary trees are already defined with this interface:\n# class Tree(object):\n#   def __init__(self, x):\n#     self.value = x\n#     self.left = None\n#     self.right = None",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "lower",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "lower = 7\nupper = 15\n#\n# Binary trees are already defined with this interface:\n# class Tree(object):\n#   def __init__(self, x):\n#     self.value = x\n#     self.left = None\n#     self.right = None\n#",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "upper",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "upper = 15\n#\n# Binary trees are already defined with this interface:\n# class Tree(object):\n#   def __init__(self, x):\n#     self.value = x\n#     self.left = None\n#     self.right = None\n#\n# Binary trees are already defined with this interface:",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "nums",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "peekOfCode": "nums = [1, 3, 2, 3, 1]\nprint(f\"reversePairs(nums): {reversePairs(nums)}\")\n\"\"\"\n958. Check Completeness of a Binary Tree\nMedium\n1072\n14\nAdd to List\nShare\nGiven the root of a binary tree, determine if it is a complete binary tree.",
        "detail": "_BACKUP..gitbook.assets.cs-weeks5-6-projects",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "class ListNode:\n    def __init__(self, key, value):\n        self.key = key\n        self.value = value\n        self.next = None\nclass MyHashTable:\n    def __init__(self):\n        # Your code here\n        self.size = 10\n        self.keys = [None] * self.size",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "MyHashTable",
        "kind": 6,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "class MyHashTable:\n    def __init__(self):\n        # Your code here\n        self.size = 10\n        self.keys = [None] * self.size\n        self.values = [None] * self.size\n        self.item_count = 0\n    def djb2(self, key):\n        str_key = str(key).encode()\n        hash_value = 5381",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "are_words_sorted",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "def are_words_sorted(words, alpha_order):\n    \"\"\"\n    Inputs:\n    words: List[str]\n    alpha_order: str\n    Output:\n    bool\n    \"\"\"\n    # Your code here\n    # map the letters of the string alpha_order to a dictionary",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "csFindTheSingleNumber",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "def csFindTheSingleNumber(nums):\n    appearances = {}\n    # hash the list into a dict with the number of appearances being the value\n    # and the number itself as the key\n    for num in nums:\n        if num in appearances:\n            appearances[num] += 1\n        else:\n            appearances[num] = 1\n    # return the key with the value of 1",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "csAverageOfTopFive",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "def csAverageOfTopFive(scores):\n    students_scores = {}\n    # create a dict with each student as the key and an array of their scores\n    # as the value\n    for score in scores:\n        student = score[0]\n        num = score[1]\n        if student in students_scores:\n            students_scores[student].append(num)\n        else:",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "csMaxNumberOfLambdas",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "def csMaxNumberOfLambdas(text):\n    # create dict to hold number of times letters in lambda appear\n    # (the letter 'a' will need to be twice the amount of other letters for\n    # each valid lambda)\n    lambdas = {\"l\": 0, \"a\": 0, \"m\": 0, \"b\": 0, \"d\": 0}\n    # get number count for valid letters from \"text\"\n    for letter in text:\n        if letter in lambdas:\n            lambdas[letter] += 1\n    minimum_letter = lambdas['l']",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "top_k_frequent",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "def top_k_frequent(words, k):\n    \"\"\"\n    Input:\n    words -> List[str]\n    k -> int\n    Output:\n    List[str]\n    \"\"\"\n    # create dict to hold words frequencies\n    word_freqs = {}",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "frequency_sort",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "def frequency_sort(s: str) -> str:\n    \"\"\"\n    Inputs:\n    s -> str\n    Output:\n    str\n    \"\"\"\n    letter_freq = {}\n    for char in s:\n        if char not in letter_freq:",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "csIsomorphicStrings",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "def csIsomorphicStrings(a, b):\n    if len(set(a)) == len(set(b)):\n        return True\n    return False\n# print(csIsomorphicStrings(a, b))\n\"\"\"\n*** csWordPattern ***\n---------------------\nGiven a pattern and a string a, find if a follows the same pattern.\nHere, to \"follow\" means a full match, such that there is a one-to-one correspondence between a letter in pattern and a non-empty word in s.",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "csWordPattern",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "def csWordPattern(pattern, a):\n    word_arr = a.split(' ')\n    if len(pattern) != len(word_arr):\n        return False\n    pattern_map = {}\n    for i in range(len(pattern)):\n        if pattern[i] not in pattern_map:\n            if word_arr[i] not in pattern_map.values():\n                pattern_map[pattern[i]] = word_arr[i]\n            else:",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "csGroupAnagrams",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "def csGroupAnagrams(strs):\n    result = {}\n    for w in strs:\n        signature = ''.join(sorted(w))\n        if signature not in result:\n            result[signature] = []\n        result[signature].append(w)\n    all_results = []\n    for item in result:\n        all_results.append(result[item])",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "condense_linked_list",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "def condense_linked_list(node):\n    # keep track of seen values\n    seen_values = []\n    cur = node\n    prev = None\n    # iterate linked list from the head\n    while cur is not None:\n        print(cur.value)\n        # if current is in seen values\n        if cur.value in seen_values:",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "first_not_repeating_character",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "def first_not_repeating_character(s):\n    # create hashmap of string and occurences of letters\n    # return the first key with the value of 1\n    chars = {}\n    for letter in s:\n        if letter not in chars:\n            chars[letter] = 1\n        else:\n            chars[letter] += 1\n    for key in chars:",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "uncover_spy",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "def uncover_spy(n, trust):\n    # create map of people who trust\n    # return the person who trusts no one\n    trusts = {}\n    trusted = {}\n    for i in range(1, n + 1):\n        trusts[i] = []\n        trusted[i] = []\n    for group in trust:\n        if group[0] in trusts:",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "hash_table",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "hash_table = MyHashTable();\nhash_table.put(\"a\", 1);\nhash_table.put(\"b\", 2);\nhash_table.get(\"a\");            // returns 1\nhash_table.get(\"c\");            // returns -1 (not found)\nhash_table.put(\"b\", 1);         // update the existing value\nhash_table.get(\"b\");            // returns 1\nhash_table.remove(\"b\");         // remove the mapping for 2\nhash_table.get(\"b\");            // returns -1 (not found)\n```",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "words",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "words = [\"lambd\", \"school\"]\norder = \"hlabcdefgijkmnopqrstuvwxyz\"\ndef are_words_sorted(words, alpha_order):\n    \"\"\"\n    Inputs:\n    words: List[str]\n    alpha_order: str\n    Output:\n    bool\n    \"\"\"",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "order",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "order = \"hlabcdefgijkmnopqrstuvwxyz\"\ndef are_words_sorted(words, alpha_order):\n    \"\"\"\n    Inputs:\n    words: List[str]\n    alpha_order: str\n    Output:\n    bool\n    \"\"\"\n    # Your code here",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "nums",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "nums = [1, 1, 2, 1]\ndef csFindTheSingleNumber(nums):\n    appearances = {}\n    # hash the list into a dict with the number of appearances being the value\n    # and the number itself as the key\n    for num in nums:\n        if num in appearances:\n            appearances[num] += 1\n        else:\n            appearances[num] = 1",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "scores",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "scores = [[1, 91], [1, 92], [2, 93], [2, 97], [1, 60], [2, 77], [1, 65],\n          [1, 87], [1, 100], [2, 100], [2, 76]]\ndef csAverageOfTopFive(scores):\n    students_scores = {}\n    # create a dict with each student as the key and an array of their scores\n    # as the value\n    for score in scores:\n        student = score[0]\n        num = score[1]\n        if student in students_scores:",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "text",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "text = \"mbxcdatllaas\"\n# text = \"sctlamb\"\n# text = \"lalaaxcmbdtsumbdav\"\ndef csMaxNumberOfLambdas(text):\n    # create dict to hold number of times letters in lambda appear\n    # (the letter 'a' will need to be twice the amount of other letters for\n    # each valid lambda)\n    lambdas = {\"l\": 0, \"a\": 0, \"m\": 0, \"b\": 0, \"d\": 0}\n    # get number count for valid letters from \"text\"\n    for letter in text:",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "words",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "words = [\"lambda\", \"school\", \"rules\", \"lambda\", \"school\", \"rocks\"]\nk = 2\nOutput:\n[\"lambda\", \"school\"]\nExplanation:\n\"lambda\" and \"school\" are the two most frequent words.\n```\nExample 2:\n```plaintext\nInput:",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "k = 2\nOutput:\n[\"lambda\", \"school\"]\nExplanation:\n\"lambda\" and \"school\" are the two most frequent words.\n```\nExample 2:\n```plaintext\nInput:\nwords = [\"the\", \"sky\", \"is\", \"cloudy\", \"the\", \"the\", \"the\", \"cloudy\", \"is\", \"is\"]",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "words",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "words = [\"the\", \"sky\", \"is\", \"cloudy\", \"the\", \"the\", \"the\", \"cloudy\", \"is\", \"is\"]\nk = 4\nOutput:\n[\"the\", \"is\", \"cloudy\", \"sky\"]\nExplanation:\n\"the\", \"is\", \"cloudy\", and \"sky\" are the four most frequent words. The words\nare sorted from highest frequency to lowest.\n```\nNotes:\n- `k` is always valid: `1 <= k <= number of unique elements.",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "k = 4\nOutput:\n[\"the\", \"is\", \"cloudy\", \"sky\"]\nExplanation:\n\"the\", \"is\", \"cloudy\", and \"sky\" are the four most frequent words. The words\nare sorted from highest frequency to lowest.\n```\nNotes:\n- `k` is always valid: `1 <= k <= number of unique elements.\n- words in the input list only contain lowercase letters.",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "words",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "words = [\"the\", \"sky\", \"is\", \"cloudy\", \"the\", \"the\", \"the\", \"cloudy\", \"is\",\n         \"is\"]\nk = 4\nwords = [\"lambda\", \"school\", \"rules\", \"lambda\", \"school\", \"rocks\"]\nk = 2\ndef top_k_frequent(words, k):\n    \"\"\"\n    Input:\n    words -> List[str]\n    k -> int",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "k = 4\nwords = [\"lambda\", \"school\", \"rules\", \"lambda\", \"school\", \"rocks\"]\nk = 2\ndef top_k_frequent(words, k):\n    \"\"\"\n    Input:\n    words -> List[str]\n    k -> int\n    Output:\n    List[str]",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "words",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "words = [\"lambda\", \"school\", \"rules\", \"lambda\", \"school\", \"rocks\"]\nk = 2\ndef top_k_frequent(words, k):\n    \"\"\"\n    Input:\n    words -> List[str]\n    k -> int\n    Output:\n    List[str]\n    \"\"\"",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "k = 2\ndef top_k_frequent(words, k):\n    \"\"\"\n    Input:\n    words -> List[str]\n    k -> int\n    Output:\n    List[str]\n    \"\"\"\n    # create dict to hold words frequencies",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "s = \"Bbcc\"\ndef frequency_sort(s: str) -> str:\n    \"\"\"\n    Inputs:\n    s -> str\n    Output:\n    str\n    \"\"\"\n    letter_freq = {}\n    for char in s:",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "a = \"odd\"\nb = \"egg\"\nOutput:\ntrue\nExample 2:\nInput:\na = \"foo\"\nb = \"bar\"\nOutput:\nfalse",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "b = \"egg\"\nOutput:\ntrue\nExample 2:\nInput:\na = \"foo\"\nb = \"bar\"\nOutput:\nfalse\nExample 3:",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "a = \"foo\"\nb = \"bar\"\nOutput:\nfalse\nExample 3:\nInput:\na = \"abca\"\nb = \"zbxz\"\nOutput:\ntrue",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "b = \"bar\"\nOutput:\nfalse\nExample 3:\nInput:\na = \"abca\"\nb = \"zbxz\"\nOutput:\ntrue\nExample 4:",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "a = \"abca\"\nb = \"zbxz\"\nOutput:\ntrue\nExample 4:\nInput:\na = \"abc\"\nb = \"\"\nOutput:\nfalse",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "b = \"zbxz\"\nOutput:\ntrue\nExample 4:\nInput:\na = \"abc\"\nb = \"\"\nOutput:\nfalse\n\"\"\"",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "a = \"abc\"\nb = \"\"\nOutput:\nfalse\n\"\"\"\na = \"odd\"\nb = \"egg\"\ndef csIsomorphicStrings(a, b):\n    if len(set(a)) == len(set(b)):\n        return True",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "b = \"\"\nOutput:\nfalse\n\"\"\"\na = \"odd\"\nb = \"egg\"\ndef csIsomorphicStrings(a, b):\n    if len(set(a)) == len(set(b)):\n        return True\n    return False",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "a = \"odd\"\nb = \"egg\"\ndef csIsomorphicStrings(a, b):\n    if len(set(a)) == len(set(b)):\n        return True\n    return False\n# print(csIsomorphicStrings(a, b))\n\"\"\"\n*** csWordPattern ***\n---------------------",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "b = \"egg\"\ndef csIsomorphicStrings(a, b):\n    if len(set(a)) == len(set(b)):\n        return True\n    return False\n# print(csIsomorphicStrings(a, b))\n\"\"\"\n*** csWordPattern ***\n---------------------\nGiven a pattern and a string a, find if a follows the same pattern.",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "pattern",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "pattern = \"abba\"\na = \"lambda school school lambda\"\nOutput: true\nExample 2:\nInput:\npattern = \"abba\"\na = \"lambda school school coding\"\nOutput:\nfalse\nExample 3:",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "a = \"lambda school school lambda\"\nOutput: true\nExample 2:\nInput:\npattern = \"abba\"\na = \"lambda school school coding\"\nOutput:\nfalse\nExample 3:\nInput:",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "pattern",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "pattern = \"abba\"\na = \"lambda school school coding\"\nOutput:\nfalse\nExample 3:\nInput:\npattern = \"aaaa\"\na = \"lambda school school lambda\"\nOutput: false\nExample 4:",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "a = \"lambda school school coding\"\nOutput:\nfalse\nExample 3:\nInput:\npattern = \"aaaa\"\na = \"lambda school school lambda\"\nOutput: false\nExample 4:\nInput:",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "pattern",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "pattern = \"aaaa\"\na = \"lambda school school lambda\"\nOutput: false\nExample 4:\nInput:\npattern = \"abba\"\na = \"lambda lambda lambda lambda\"\nOutput: false\n\"\"\"\npattern = \"abba\"",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "a = \"lambda school school lambda\"\nOutput: false\nExample 4:\nInput:\npattern = \"abba\"\na = \"lambda lambda lambda lambda\"\nOutput: false\n\"\"\"\npattern = \"abba\"\na = \"lambda school school lambda\"",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "pattern",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "pattern = \"abba\"\na = \"lambda lambda lambda lambda\"\nOutput: false\n\"\"\"\npattern = \"abba\"\na = \"lambda school school lambda\"\n# pattern = \"abba\"\n# a = \"lambda lambda lambda lambda\"\n# pattern = \"aaaa\"\n# a = \"lambda school school lambda\"",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "a = \"lambda lambda lambda lambda\"\nOutput: false\n\"\"\"\npattern = \"abba\"\na = \"lambda school school lambda\"\n# pattern = \"abba\"\n# a = \"lambda lambda lambda lambda\"\n# pattern = \"aaaa\"\n# a = \"lambda school school lambda\"\ndef csWordPattern(pattern, a):",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "pattern",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "pattern = \"abba\"\na = \"lambda school school lambda\"\n# pattern = \"abba\"\n# a = \"lambda lambda lambda lambda\"\n# pattern = \"aaaa\"\n# a = \"lambda school school lambda\"\ndef csWordPattern(pattern, a):\n    word_arr = a.split(' ')\n    if len(pattern) != len(word_arr):\n        return False",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "a = \"lambda school school lambda\"\n# pattern = \"abba\"\n# a = \"lambda lambda lambda lambda\"\n# pattern = \"aaaa\"\n# a = \"lambda school school lambda\"\ndef csWordPattern(pattern, a):\n    word_arr = a.split(' ')\n    if len(pattern) != len(word_arr):\n        return False\n    pattern_map = {}",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "strs",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "strs = [\"apt\",\"pat\",\"ear\",\"tap\",\"are\",\"arm\"]\nOutput:\n[[\"apt\",\"pat\",\"tap\"],[\"ear\",\"are\"],[\"arm\"]]\nExample 2:\nInput:\nstrs = [\"\"]\nOutput:\n[[\"\"]]\nExample 3:\nInput:",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "strs",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "strs = [\"\"]\nOutput:\n[[\"\"]]\nExample 3:\nInput:\nstrs = [\"a\"]\nOutput:\n[[\"a\"]]\n\"\"\"\nstrs = [\"apt\", \"pat\", \"ear\", \"tap\", \"are\", \"arm\"]",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "strs",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "strs = [\"a\"]\nOutput:\n[[\"a\"]]\n\"\"\"\nstrs = [\"apt\", \"pat\", \"ear\", \"tap\", \"are\", \"arm\"]\ndef csGroupAnagrams(strs):\n    result = {}\n    for w in strs:\n        signature = ''.join(sorted(w))\n        if signature not in result:",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "strs",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "strs = [\"apt\", \"pat\", \"ear\", \"tap\", \"are\", \"arm\"]\ndef csGroupAnagrams(strs):\n    result = {}\n    for w in strs:\n        signature = ''.join(sorted(w))\n        if signature not in result:\n            result[signature] = []\n        result[signature].append(w)\n    all_results = []\n    for item in result:",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "first_not_repeating_character(s)",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "first_not_repeating_character(s) = 'c'.\nThere are 2 non-repeating characters in the string: 'c' and 'd'. Return c since it appears in the string first.\nFor s = \"abacabaabacaba\", the output should be\nfirst_not_repeating_character(s) = '_'.\nThere are no characters in this string that do not repeat.\n[execution time limit] 4 seconds (py3)\n[input] string s\nA string that contains only lowercase English letters.\n[output] char\nThe first non-repeating character in s of '_' if there are no characters that do not repeat.",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "first_not_repeating_character(s)",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "first_not_repeating_character(s) = '_'.\nThere are no characters in this string that do not repeat.\n[execution time limit] 4 seconds (py3)\n[input] string s\nA string that contains only lowercase English letters.\n[output] char\nThe first non-repeating character in s of '_' if there are no characters that do not repeat.\n\"\"\"\ns = \"abacabad\"\ndef first_not_repeating_character(s):",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "s = \"abacabad\"\ndef first_not_repeating_character(s):\n    # create hashmap of string and occurences of letters\n    # return the first key with the value of 1\n    chars = {}\n    for letter in s:\n        if letter not in chars:\n            chars[letter] = 1\n        else:\n            chars[letter] += 1",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "n = 3\ntrust = [[1,2],\n [2,3]]\nn = 4\ntrust = [[1, 3],[1, 4],[2, 3],[2, 4],[4, 3]]\ndef uncover_spy(n, trust):\n    # create map of people who trust\n    # return the person who trusts no one\n    trusts = {}\n    trusted = {}",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "trust",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "trust = [[1,2],\n [2,3]]\nn = 4\ntrust = [[1, 3],[1, 4],[2, 3],[2, 4],[4, 3]]\ndef uncover_spy(n, trust):\n    # create map of people who trust\n    # return the person who trusts no one\n    trusts = {}\n    trusted = {}\n    for i in range(1, n + 1):",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "n = 4\ntrust = [[1, 3],[1, 4],[2, 3],[2, 4],[4, 3]]\ndef uncover_spy(n, trust):\n    # create map of people who trust\n    # return the person who trusts no one\n    trusts = {}\n    trusted = {}\n    for i in range(1, n + 1):\n        trusts[i] = []\n        trusted[i] = []",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "trust",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "peekOfCode": "trust = [[1, 3],[1, 4],[2, 3],[2, 4],[4, 3]]\ndef uncover_spy(n, trust):\n    # create map of people who trust\n    # return the person who trusts no one\n    trusts = {}\n    trusted = {}\n    for i in range(1, n + 1):\n        trusts[i] = []\n        trusted[i] = []\n    for group in trust:",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects (1)",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "class ListNode:\n    def __init__(self, key, value):\n        self.key = key\n        self.value = value\n        self.next = None\nclass MyHashTable:\n    def __init__(self):\n        # Your code here\n        self.size = 10\n        self.keys = [None] * self.size",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "MyHashTable",
        "kind": 6,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "class MyHashTable:\n    def __init__(self):\n        # Your code here\n        self.size = 10\n        self.keys = [None] * self.size\n        self.values = [None] * self.size\n        self.item_count = 0\n    def djb2(self, key):\n        str_key = str(key).encode()\n        hash_value = 5381",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "are_words_sorted",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "def are_words_sorted(words, alpha_order):\n    \"\"\"\n    Inputs:\n    words: List[str]\n    alpha_order: str\n    Output:\n    bool\n    \"\"\"\n    # Your code here\n    # map the letters of the string alpha_order to a dictionary",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "csFindTheSingleNumber",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "def csFindTheSingleNumber(nums):\n    appearances = {}\n    # hash the list into a dict with the number of appearances being the value\n    # and the number itself as the key\n    for num in nums:\n        if num in appearances:\n            appearances[num] += 1\n        else:\n            appearances[num] = 1\n    # return the key with the value of 1",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "csAverageOfTopFive",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "def csAverageOfTopFive(scores):\n    students_scores = {}\n    # create a dict with each student as the key and an array of their scores\n    # as the value\n    for score in scores:\n        student = score[0]\n        num = score[1]\n        if student in students_scores:\n            students_scores[student].append(num)\n        else:",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "csMaxNumberOfLambdas",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "def csMaxNumberOfLambdas(text):\n    # create dict to hold number of times letters in lambda appear\n    # (the letter 'a' will need to be twice the amount of other letters for\n    # each valid lambda)\n    lambdas = {\"l\": 0, \"a\": 0, \"m\": 0, \"b\": 0, \"d\": 0}\n    # get number count for valid letters from \"text\"\n    for letter in text:\n        if letter in lambdas:\n            lambdas[letter] += 1\n    minimum_letter = lambdas[\"l\"]",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "top_k_frequent",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "def top_k_frequent(words, k):\n    \"\"\"\n    Input:\n    words -> List[str]\n    k -> int\n    Output:\n    List[str]\n    \"\"\"\n    # create dict to hold words frequencies\n    word_freqs = {}",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "frequency_sort",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "def frequency_sort(s: str) -> str:\n    \"\"\"\n    Inputs:\n    s -> str\n    Output:\n    str\n    \"\"\"\n    letter_freq = {}\n    for char in s:\n        if char not in letter_freq:",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "csIsomorphicStrings",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "def csIsomorphicStrings(a, b):\n    if len(set(a)) == len(set(b)):\n        return True\n    return False\n# print(csIsomorphicStrings(a, b))\n\"\"\"\n*** csWordPattern ***\n---------------------\nGiven a pattern and a string a, find if a follows the same pattern.\nHere, to \"follow\" means a full match, such that there is a one-to-one correspondence between a letter in pattern and a non-empty word in s.",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "csWordPattern",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "def csWordPattern(pattern, a):\n    word_arr = a.split(\" \")\n    if len(pattern) != len(word_arr):\n        return False\n    pattern_map = {}\n    for i in range(len(pattern)):\n        if pattern[i] not in pattern_map:\n            if word_arr[i] not in pattern_map.values():\n                pattern_map[pattern[i]] = word_arr[i]\n            else:",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "csGroupAnagrams",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "def csGroupAnagrams(strs):\n    result = {}\n    for w in strs:\n        signature = \"\".join(sorted(w))\n        if signature not in result:\n            result[signature] = []\n        result[signature].append(w)\n    all_results = []\n    for item in result:\n        all_results.append(result[item])",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "condense_linked_list",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "def condense_linked_list(node):\n    # keep track of seen values\n    seen_values = []\n    cur = node\n    prev = None\n    # iterate linked list from the head\n    while cur is not None:\n        print(cur.value)\n        # if current is in seen values\n        if cur.value in seen_values:",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "first_not_repeating_character",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "def first_not_repeating_character(s):\n    # create hashmap of string and occurences of letters\n    # return the first key with the value of 1\n    chars = {}\n    for letter in s:\n        if letter not in chars:\n            chars[letter] = 1\n        else:\n            chars[letter] += 1\n    for key in chars:",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "uncover_spy",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "def uncover_spy(n, trust):\n    # create map of people who trust\n    # return the person who trusts no one\n    trusts = {}\n    trusted = {}\n    for i in range(1, n + 1):\n        trusts[i] = []\n        trusted[i] = []\n    for group in trust:\n        if group[0] in trusts:",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "hash_table",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "hash_table = MyHashTable();\nhash_table.put(\"a\", 1);\nhash_table.put(\"b\", 2);\nhash_table.get(\"a\");            // returns 1\nhash_table.get(\"c\");            // returns -1 (not found)\nhash_table.put(\"b\", 1);         // update the existing value\nhash_table.get(\"b\");            // returns 1\nhash_table.remove(\"b\");         // remove the mapping for 2\nhash_table.get(\"b\");            // returns -1 (not found)\n```",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "words",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "words = [\"lambd\", \"school\"]\norder = \"hlabcdefgijkmnopqrstuvwxyz\"\ndef are_words_sorted(words, alpha_order):\n    \"\"\"\n    Inputs:\n    words: List[str]\n    alpha_order: str\n    Output:\n    bool\n    \"\"\"",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "order",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "order = \"hlabcdefgijkmnopqrstuvwxyz\"\ndef are_words_sorted(words, alpha_order):\n    \"\"\"\n    Inputs:\n    words: List[str]\n    alpha_order: str\n    Output:\n    bool\n    \"\"\"\n    # Your code here",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "nums",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "nums = [1, 1, 2, 1]\ndef csFindTheSingleNumber(nums):\n    appearances = {}\n    # hash the list into a dict with the number of appearances being the value\n    # and the number itself as the key\n    for num in nums:\n        if num in appearances:\n            appearances[num] += 1\n        else:\n            appearances[num] = 1",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "scores",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "scores = [\n    [1, 91],\n    [1, 92],\n    [2, 93],\n    [2, 97],\n    [1, 60],\n    [2, 77],\n    [1, 65],\n    [1, 87],\n    [1, 100],",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "text",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "text = \"mbxcdatllaas\"\n# text = \"sctlamb\"\n# text = \"lalaaxcmbdtsumbdav\"\ndef csMaxNumberOfLambdas(text):\n    # create dict to hold number of times letters in lambda appear\n    # (the letter 'a' will need to be twice the amount of other letters for\n    # each valid lambda)\n    lambdas = {\"l\": 0, \"a\": 0, \"m\": 0, \"b\": 0, \"d\": 0}\n    # get number count for valid letters from \"text\"\n    for letter in text:",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "words",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "words = [\"lambda\", \"school\", \"rules\", \"lambda\", \"school\", \"rocks\"]\nk = 2\nOutput:\n[\"lambda\", \"school\"]\nExplanation:\n\"lambda\" and \"school\" are the two most frequent words.\n```\nExample 2:\n```plaintext\nInput:",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "k = 2\nOutput:\n[\"lambda\", \"school\"]\nExplanation:\n\"lambda\" and \"school\" are the two most frequent words.\n```\nExample 2:\n```plaintext\nInput:\nwords = [\"the\", \"sky\", \"is\", \"cloudy\", \"the\", \"the\", \"the\", \"cloudy\", \"is\", \"is\"]",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "words",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "words = [\"the\", \"sky\", \"is\", \"cloudy\", \"the\", \"the\", \"the\", \"cloudy\", \"is\", \"is\"]\nk = 4\nOutput:\n[\"the\", \"is\", \"cloudy\", \"sky\"]\nExplanation:\n\"the\", \"is\", \"cloudy\", and \"sky\" are the four most frequent words. The words\nare sorted from highest frequency to lowest.\n```\nNotes:\n- `k` is always valid: `1 <= k <= number of unique elements.",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "k = 4\nOutput:\n[\"the\", \"is\", \"cloudy\", \"sky\"]\nExplanation:\n\"the\", \"is\", \"cloudy\", and \"sky\" are the four most frequent words. The words\nare sorted from highest frequency to lowest.\n```\nNotes:\n- `k` is always valid: `1 <= k <= number of unique elements.\n- words in the input list only contain lowercase letters.",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "words",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "words = [\"the\", \"sky\", \"is\", \"cloudy\", \"the\", \"the\", \"the\", \"cloudy\", \"is\", \"is\"]\nk = 4\nwords = [\"lambda\", \"school\", \"rules\", \"lambda\", \"school\", \"rocks\"]\nk = 2\ndef top_k_frequent(words, k):\n    \"\"\"\n    Input:\n    words -> List[str]\n    k -> int\n    Output:",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "k = 4\nwords = [\"lambda\", \"school\", \"rules\", \"lambda\", \"school\", \"rocks\"]\nk = 2\ndef top_k_frequent(words, k):\n    \"\"\"\n    Input:\n    words -> List[str]\n    k -> int\n    Output:\n    List[str]",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "words",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "words = [\"lambda\", \"school\", \"rules\", \"lambda\", \"school\", \"rocks\"]\nk = 2\ndef top_k_frequent(words, k):\n    \"\"\"\n    Input:\n    words -> List[str]\n    k -> int\n    Output:\n    List[str]\n    \"\"\"",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "k = 2\ndef top_k_frequent(words, k):\n    \"\"\"\n    Input:\n    words -> List[str]\n    k -> int\n    Output:\n    List[str]\n    \"\"\"\n    # create dict to hold words frequencies",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "s = \"Bbcc\"\ndef frequency_sort(s: str) -> str:\n    \"\"\"\n    Inputs:\n    s -> str\n    Output:\n    str\n    \"\"\"\n    letter_freq = {}\n    for char in s:",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "a = \"odd\"\nb = \"egg\"\nOutput:\ntrue\nExample 2:\nInput:\na = \"foo\"\nb = \"bar\"\nOutput:\nfalse",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "b = \"egg\"\nOutput:\ntrue\nExample 2:\nInput:\na = \"foo\"\nb = \"bar\"\nOutput:\nfalse\nExample 3:",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "a = \"foo\"\nb = \"bar\"\nOutput:\nfalse\nExample 3:\nInput:\na = \"abca\"\nb = \"zbxz\"\nOutput:\ntrue",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "b = \"bar\"\nOutput:\nfalse\nExample 3:\nInput:\na = \"abca\"\nb = \"zbxz\"\nOutput:\ntrue\nExample 4:",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "a = \"abca\"\nb = \"zbxz\"\nOutput:\ntrue\nExample 4:\nInput:\na = \"abc\"\nb = \"\"\nOutput:\nfalse",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "b = \"zbxz\"\nOutput:\ntrue\nExample 4:\nInput:\na = \"abc\"\nb = \"\"\nOutput:\nfalse\n\"\"\"",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "a = \"abc\"\nb = \"\"\nOutput:\nfalse\n\"\"\"\na = \"odd\"\nb = \"egg\"\ndef csIsomorphicStrings(a, b):\n    if len(set(a)) == len(set(b)):\n        return True",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "b = \"\"\nOutput:\nfalse\n\"\"\"\na = \"odd\"\nb = \"egg\"\ndef csIsomorphicStrings(a, b):\n    if len(set(a)) == len(set(b)):\n        return True\n    return False",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "a = \"odd\"\nb = \"egg\"\ndef csIsomorphicStrings(a, b):\n    if len(set(a)) == len(set(b)):\n        return True\n    return False\n# print(csIsomorphicStrings(a, b))\n\"\"\"\n*** csWordPattern ***\n---------------------",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "b = \"egg\"\ndef csIsomorphicStrings(a, b):\n    if len(set(a)) == len(set(b)):\n        return True\n    return False\n# print(csIsomorphicStrings(a, b))\n\"\"\"\n*** csWordPattern ***\n---------------------\nGiven a pattern and a string a, find if a follows the same pattern.",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "pattern",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "pattern = \"abba\"\na = \"lambda school school lambda\"\nOutput: true\nExample 2:\nInput:\npattern = \"abba\"\na = \"lambda school school coding\"\nOutput:\nfalse\nExample 3:",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "a = \"lambda school school lambda\"\nOutput: true\nExample 2:\nInput:\npattern = \"abba\"\na = \"lambda school school coding\"\nOutput:\nfalse\nExample 3:\nInput:",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "pattern",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "pattern = \"abba\"\na = \"lambda school school coding\"\nOutput:\nfalse\nExample 3:\nInput:\npattern = \"aaaa\"\na = \"lambda school school lambda\"\nOutput: false\nExample 4:",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "a = \"lambda school school coding\"\nOutput:\nfalse\nExample 3:\nInput:\npattern = \"aaaa\"\na = \"lambda school school lambda\"\nOutput: false\nExample 4:\nInput:",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "pattern",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "pattern = \"aaaa\"\na = \"lambda school school lambda\"\nOutput: false\nExample 4:\nInput:\npattern = \"abba\"\na = \"lambda lambda lambda lambda\"\nOutput: false\n\"\"\"\npattern = \"abba\"",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "a = \"lambda school school lambda\"\nOutput: false\nExample 4:\nInput:\npattern = \"abba\"\na = \"lambda lambda lambda lambda\"\nOutput: false\n\"\"\"\npattern = \"abba\"\na = \"lambda school school lambda\"",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "pattern",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "pattern = \"abba\"\na = \"lambda lambda lambda lambda\"\nOutput: false\n\"\"\"\npattern = \"abba\"\na = \"lambda school school lambda\"\n# pattern = \"abba\"\n# a = \"lambda lambda lambda lambda\"\n# pattern = \"aaaa\"\n# a = \"lambda school school lambda\"",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "a = \"lambda lambda lambda lambda\"\nOutput: false\n\"\"\"\npattern = \"abba\"\na = \"lambda school school lambda\"\n# pattern = \"abba\"\n# a = \"lambda lambda lambda lambda\"\n# pattern = \"aaaa\"\n# a = \"lambda school school lambda\"\ndef csWordPattern(pattern, a):",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "pattern",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "pattern = \"abba\"\na = \"lambda school school lambda\"\n# pattern = \"abba\"\n# a = \"lambda lambda lambda lambda\"\n# pattern = \"aaaa\"\n# a = \"lambda school school lambda\"\ndef csWordPattern(pattern, a):\n    word_arr = a.split(\" \")\n    if len(pattern) != len(word_arr):\n        return False",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "a = \"lambda school school lambda\"\n# pattern = \"abba\"\n# a = \"lambda lambda lambda lambda\"\n# pattern = \"aaaa\"\n# a = \"lambda school school lambda\"\ndef csWordPattern(pattern, a):\n    word_arr = a.split(\" \")\n    if len(pattern) != len(word_arr):\n        return False\n    pattern_map = {}",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "strs",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "strs = [\"apt\",\"pat\",\"ear\",\"tap\",\"are\",\"arm\"]\nOutput:\n[[\"apt\",\"pat\",\"tap\"],[\"ear\",\"are\"],[\"arm\"]]\nExample 2:\nInput:\nstrs = [\"\"]\nOutput:\n[[\"\"]]\nExample 3:\nInput:",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "strs",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "strs = [\"\"]\nOutput:\n[[\"\"]]\nExample 3:\nInput:\nstrs = [\"a\"]\nOutput:\n[[\"a\"]]\n\"\"\"\nstrs = [\"apt\", \"pat\", \"ear\", \"tap\", \"are\", \"arm\"]",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "strs",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "strs = [\"a\"]\nOutput:\n[[\"a\"]]\n\"\"\"\nstrs = [\"apt\", \"pat\", \"ear\", \"tap\", \"are\", \"arm\"]\ndef csGroupAnagrams(strs):\n    result = {}\n    for w in strs:\n        signature = \"\".join(sorted(w))\n        if signature not in result:",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "strs",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "strs = [\"apt\", \"pat\", \"ear\", \"tap\", \"are\", \"arm\"]\ndef csGroupAnagrams(strs):\n    result = {}\n    for w in strs:\n        signature = \"\".join(sorted(w))\n        if signature not in result:\n            result[signature] = []\n        result[signature].append(w)\n    all_results = []\n    for item in result:",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "first_not_repeating_character(s)",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "first_not_repeating_character(s) = 'c'.\nThere are 2 non-repeating characters in the string: 'c' and 'd'. Return c since it appears in the string first.\nFor s = \"abacabaabacaba\", the output should be\nfirst_not_repeating_character(s) = '_'.\nThere are no characters in this string that do not repeat.\n[execution time limit] 4 seconds (py3)\n[input] string s\nA string that contains only lowercase English letters.\n[output] char\nThe first non-repeating character in s of '_' if there are no characters that do not repeat.",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "first_not_repeating_character(s)",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "first_not_repeating_character(s) = '_'.\nThere are no characters in this string that do not repeat.\n[execution time limit] 4 seconds (py3)\n[input] string s\nA string that contains only lowercase English letters.\n[output] char\nThe first non-repeating character in s of '_' if there are no characters that do not repeat.\n\"\"\"\ns = \"abacabad\"\ndef first_not_repeating_character(s):",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "s = \"abacabad\"\ndef first_not_repeating_character(s):\n    # create hashmap of string and occurences of letters\n    # return the first key with the value of 1\n    chars = {}\n    for letter in s:\n        if letter not in chars:\n            chars[letter] = 1\n        else:\n            chars[letter] += 1",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "n = 3\ntrust = [[1, 2], [2, 3]]\nn = 4\ntrust = [[1, 3], [1, 4], [2, 3], [2, 4], [4, 3]]\ndef uncover_spy(n, trust):\n    # create map of people who trust\n    # return the person who trusts no one\n    trusts = {}\n    trusted = {}\n    for i in range(1, n + 1):",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "trust",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "trust = [[1, 2], [2, 3]]\nn = 4\ntrust = [[1, 3], [1, 4], [2, 3], [2, 4], [4, 3]]\ndef uncover_spy(n, trust):\n    # create map of people who trust\n    # return the person who trusts no one\n    trusts = {}\n    trusted = {}\n    for i in range(1, n + 1):\n        trusts[i] = []",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "n = 4\ntrust = [[1, 3], [1, 4], [2, 3], [2, 4], [4, 3]]\ndef uncover_spy(n, trust):\n    # create map of people who trust\n    # return the person who trusts no one\n    trusts = {}\n    trusted = {}\n    for i in range(1, n + 1):\n        trusts[i] = []\n        trusted[i] = []",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "trust",
        "kind": 5,
        "importPath": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "description": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "peekOfCode": "trust = [[1, 3], [1, 4], [2, 3], [2, 4], [4, 3]]\ndef uncover_spy(n, trust):\n    # create map of people who trust\n    # return the person who trusts no one\n    trusts = {}\n    trusted = {}\n    for i in range(1, n + 1):\n        trusts[i] = []\n        trusted[i] = []\n    for group in trust:",
        "detail": "_BACKUP..gitbook.assets.cs-weeks7-8-projects",
        "documentation": {}
    },
    {
        "label": "dfs_components_grid",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.dfs_components_grid",
        "description": "_BACKUP..gitbook.assets.dfs_components_grid",
        "peekOfCode": "def dfs_components_grid(\n    grid: Sequence[Sequence[int]]\n) -> Iterable[set[tuple[int, int]]]:\n    \"\"\"On a grid of 0s and 1s, find all the components of 1s.\"\"\"\n    unseen = {(r, c) for r, row in enumerate(grid) for c, n in enumerate(row) if n}\n    while unseen:\n        start = unseen.pop()\n        component = {start}\n        to_visit = [start]\n        while to_visit:",
        "detail": "_BACKUP..gitbook.assets.dfs_components_grid",
        "documentation": {}
    },
    {
        "label": "dfs_component_dict",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.dfs_component_dict (1)",
        "description": "_BACKUP..gitbook.assets.dfs_component_dict (1)",
        "peekOfCode": "def dfs_component_dict(graph: Mapping[Node, Set[Node]], start: Node) -> Iterable[Node]:\n    \"\"\"Find all the nodes connected to the starting node, using DFS on a dict.\"\"\"\n    component = {start}\n    to_visit = [start]\n    while to_visit:\n        node = to_visit.pop()\n        new_nodes = graph[node] - component\n        to_visit.extend(new_nodes)\n        component |= new_nodes\n        yield node",
        "detail": "_BACKUP..gitbook.assets.dfs_component_dict (1)",
        "documentation": {}
    },
    {
        "label": "dfs_component_dict",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.dfs_component_dict (2)",
        "description": "_BACKUP..gitbook.assets.dfs_component_dict (2)",
        "peekOfCode": "def dfs_component_dict(graph: Mapping[Node, Set[Node]], start: Node) -> Iterable[Node]:\n    \"\"\"Find all the nodes connected to the starting node, using DFS on a dict.\"\"\"\n    component = {start}\n    to_visit = [start]\n    while to_visit:\n        node = to_visit.pop()\n        new_nodes = graph[node] - component\n        to_visit.extend(new_nodes)\n        component |= new_nodes\n        yield node",
        "detail": "_BACKUP..gitbook.assets.dfs_component_dict (2)",
        "documentation": {}
    },
    {
        "label": "dfs_component_dict",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.dfs_component_dict",
        "description": "_BACKUP..gitbook.assets.dfs_component_dict",
        "peekOfCode": "def dfs_component_dict(graph: Mapping[Node, Set[Node]], start: Node) -> Iterable[Node]:\n    \"\"\"Find all the nodes connected to the starting node, using DFS on a dict.\"\"\"\n    component = {start}\n    to_visit = [start]\n    while to_visit:\n        node = to_visit.pop()\n        new_nodes = graph[node] - component\n        to_visit.extend(new_nodes)\n        component |= new_nodes\n        yield node",
        "detail": "_BACKUP..gitbook.assets.dfs_component_dict",
        "documentation": {}
    },
    {
        "label": "dfs_component_dict_recur",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.dfs_component_dict_recur (1)",
        "description": "_BACKUP..gitbook.assets.dfs_component_dict_recur (1)",
        "peekOfCode": "def dfs_component_dict_recur(\n    graph: Mapping[Node, Set[Node]], start: Node, component: Optional[Set[Node]] = None\n) -> set[Node]:\n    \"\"\"Recursively find all the nodes connected to start.\"\"\"\n    if component is None:\n        component = set()\n    component.add(start)\n    for new_node in graph[start] - component:\n        dfs_component_dict_recur(graph, new_node, component)\n    return component",
        "detail": "_BACKUP..gitbook.assets.dfs_component_dict_recur (1)",
        "documentation": {}
    },
    {
        "label": "dfs_component_dict_recur",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.dfs_component_dict_recur",
        "description": "_BACKUP..gitbook.assets.dfs_component_dict_recur",
        "peekOfCode": "def dfs_component_dict_recur(\n    graph: Mapping[Node, Set[Node]], start: Node, component: Optional[Set[Node]] = None\n) -> set[Node]:\n    \"\"\"Recursively find all the nodes connected to start.\"\"\"\n    if component is None:\n        component = set()\n    component.add(start)\n    for new_node in graph[start] - component:\n        dfs_component_dict_recur(graph, new_node, component)\n    return component",
        "detail": "_BACKUP..gitbook.assets.dfs_component_dict_recur",
        "documentation": {}
    },
    {
        "label": "dfs_paths_dict_recur",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.dfs_paths_dict_recur",
        "description": "_BACKUP..gitbook.assets.dfs_paths_dict_recur",
        "peekOfCode": "def dfs_paths_dict_recur(\n    graph: Mapping[Node, set[Node]],\n    start: Node,\n    goal: Node,\n    path: Optional[list[Node]] = None,\n) -> Iterable[list[Node]]:\n    \"\"\"Find all the paths from start to goal recursively on a dict.\"\"\"\n    if path is None:\n        path = [start]\n    if start == goal:",
        "detail": "_BACKUP..gitbook.assets.dfs_paths_dict_recur",
        "documentation": {}
    },
    {
        "label": "dijkstras_distances_min",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.dijkstras_distances_min (1)",
        "description": "_BACKUP..gitbook.assets.dijkstras_distances_min (1)",
        "peekOfCode": "def dijkstras_distances_min(\n    graph: Mapping[Node, Mapping[Node, Rational]], start: Node\n) -> dict[Node:Rational]:\n    \"\"\"Find the minimum distance from start to all connected nodes on a directed, weighted graph.\"\"\"\n    distances = dict.fromkeys(graph, inf)\n    distances[start] = 0\n    unvisited = set(graph)\n    while unvisited:\n        # Using min like this increases the time complexity compared to a priority queue, but it simplifies things.\n        node = min(unvisited, key=distances.__getitem__)",
        "detail": "_BACKUP..gitbook.assets.dijkstras_distances_min (1)",
        "documentation": {}
    },
    {
        "label": "dijkstras_distances_min",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.dijkstras_distances_min",
        "description": "_BACKUP..gitbook.assets.dijkstras_distances_min",
        "peekOfCode": "def dijkstras_distances_min(\n    graph: Mapping[Node, Mapping[Node, Rational]], start: Node\n) -> dict[Node:Rational]:\n    \"\"\"Find the minimum distance from start to all connected nodes on a directed, weighted graph.\"\"\"\n    distances = dict.fromkeys(graph, inf)\n    distances[start] = 0\n    unvisited = set(graph)\n    while unvisited:\n        # Using min like this increases the time complexity compared to a priority queue, but it simplifies things.\n        node = min(unvisited, key=distances.__getitem__)",
        "detail": "_BACKUP..gitbook.assets.dijkstras_distances_min",
        "documentation": {}
    },
    {
        "label": "dijkstras_path_pq",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.dijkstras_path_pq (1)",
        "description": "_BACKUP..gitbook.assets.dijkstras_path_pq (1)",
        "peekOfCode": "def dijkstras_path_pq(\n    graph: Mapping[Node, Mapping[Node, Real]], start: Node, goal: Node\n) -> dict[Node, Optional[Node]]:\n    \"\"\"Find the shortest path from start to goal in a directed, weighted graph. Return it as a parents dict.\"\"\"\n    distances = {start: 0}\n    parents = {start: None}\n    visited = set()\n    to_visit = [(0, start)]\n    while to_visit:\n        distance, node = heappop(to_visit)",
        "detail": "_BACKUP..gitbook.assets.dijkstras_path_pq (1)",
        "documentation": {}
    },
    {
        "label": "dijkstras_path_pq",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.dijkstras_path_pq",
        "description": "_BACKUP..gitbook.assets.dijkstras_path_pq",
        "peekOfCode": "def dijkstras_path_pq(\n    graph: Mapping[Node, Mapping[Node, Real]], start: Node, goal: Node\n) -> dict[Node, Optional[Node]]:\n    \"\"\"Find the shortest path from start to goal in a directed, weighted graph. Return it as a parents dict.\"\"\"\n    distances = {start: 0}\n    parents = {start: None}\n    visited = set()\n    to_visit = [(0, start)]\n    while to_visit:\n        distance, node = heappop(to_visit)",
        "detail": "_BACKUP..gitbook.assets.dijkstras_path_pq",
        "documentation": {}
    },
    {
        "label": "Employee",
        "kind": 6,
        "importPath": "_BACKUP..gitbook.assets.employees",
        "description": "_BACKUP..gitbook.assets.employees",
        "peekOfCode": "class Employee(object):\n    def __init__(self, first_name, last_name, job):\n        self.first_name = first_name\n        self.last_name = last_name\n        self.job = job\n    def __eq__(self, other):\n        if isinstance(other, self.__class__):\n            same_name = (\n                self.first_name == other.first_name\n                and self.last_name == other.last_name",
        "detail": "_BACKUP..gitbook.assets.employees",
        "documentation": {}
    },
    {
        "label": "Job",
        "kind": 6,
        "importPath": "_BACKUP..gitbook.assets.employees",
        "description": "_BACKUP..gitbook.assets.employees",
        "peekOfCode": "class Job(object):\n    def __init__(self, title, salary):\n        self.title = title\n        self.salary = salary\n    def __str__(self):\n        print(self.title)\n    def __repr__(self):\n        return \"Job(title={}, salary={})\".format(self.title, self.salary)\ndef sort_employees_by_salary(employee_list):\n    \"\"\"",
        "detail": "_BACKUP..gitbook.assets.employees",
        "documentation": {}
    },
    {
        "label": "sort_employees_by_salary",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.employees",
        "description": "_BACKUP..gitbook.assets.employees",
        "peekOfCode": "def sort_employees_by_salary(employee_list):\n    \"\"\"\n    Returns a new employee list, sorted by low to high salary then last_name\n    \"\"\"\n    employee_list.sort(key=lambda employee: (employee.last_name, employee.job.salary))\n    return employee_list",
        "detail": "_BACKUP..gitbook.assets.employees",
        "documentation": {}
    },
    {
        "label": "josephus_problem_recur",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.josephus_problem_recur",
        "description": "_BACKUP..gitbook.assets.josephus_problem_recur",
        "peekOfCode": "def josephus_problem_recur(n: int, k: int) -> int:\n    \"\"\"1-indexed, k-skips, Josephus problem, recursively.\"\"\"\n    if n == 1:\n        return 1\n    return (josephus_problem_recur(n - 1, k) + k - 1) % n + 1",
        "detail": "_BACKUP..gitbook.assets.josephus_problem_recur",
        "documentation": {}
    },
    {
        "label": "knapsack_simple",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.knapsack_simple",
        "description": "_BACKUP..gitbook.assets.knapsack_simple",
        "peekOfCode": "def knapsack_simple(weights: Sequence[int], values: Sequence[int], capacity: int):\n    \"\"\"0-1 knapsack problem. Just return the max value.\"\"\"\n    # Each index is a sub-capacity and each value the best value for that sub-capacity so far.\n    best_values = [0] * (capacity + 1)\n    for weight, value in zip(weights, values):\n        # Iterate backwards so we don't take things twice. Forwards would be the unbounded version of the problem.\n        for sub_capacity in range(capacity, 0, -1):\n            if weight <= sub_capacity:\n                # These three lines can be refactored to one, or a slightly more efficient if instead of max.\n                take_value = value + best_values[sub_capacity - weight]",
        "detail": "_BACKUP..gitbook.assets.knapsack_simple",
        "documentation": {}
    },
    {
        "label": "partition",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.partition",
        "description": "_BACKUP..gitbook.assets.partition",
        "peekOfCode": "def partition(seq: Sequence[T]) -> tuple[list[T], T, list[T]]:\n    \"\"\"Split sequence into a tuple of lesser or equal values, first value, greater values.\"\"\"\n    pivot, *rest = seq\n    low = [n for n in rest if n <= pivot]\n    high = [n for n in rest if n > pivot]\n    return low, pivot, high",
        "detail": "_BACKUP..gitbook.assets.partition",
        "documentation": {}
    },
    {
        "label": "prims",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.prims",
        "description": "_BACKUP..gitbook.assets.prims",
        "peekOfCode": "def prims(\n    graph: Mapping[Node, Mapping[Node, int]], start: Node\n) -> dict[Node, Optional[Node]]:\n    \"\"\"Find the minimum spanning tree of an undirected, weighted graph.\"\"\"\n    parents = {}\n    to_visit = [(0, None, start)]\n    while to_visit:\n        weight, parent, node = heappop(to_visit)\n        if node in parents:\n            continue",
        "detail": "_BACKUP..gitbook.assets.prims",
        "documentation": {}
    },
    {
        "label": "quickselect",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.quickselect",
        "description": "_BACKUP..gitbook.assets.quickselect",
        "peekOfCode": "def quickselect(seq: Sequence[T], k: int) -> T:\n    \"\"\"Find the kth smallest item in a sequence.\"\"\"\n    low, pivot, high = partition(seq)\n    low_len = len(low)\n    if low_len == k:\n        return pivot\n    elif low_len < k:\n        return quickselect(high, k - low_len - 1)\n    else:\n        return quickselect(low, k)",
        "detail": "_BACKUP..gitbook.assets.quickselect",
        "documentation": {}
    },
    {
        "label": "quicksort",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.quicksort (1)",
        "description": "_BACKUP..gitbook.assets.quicksort (1)",
        "peekOfCode": "def quicksort(seq: Sequence[T]) -> list[T]:\n    if len(seq) < 2:\n        return list(seq)\n    low, pivot, high = partition(seq)\n    return quicksort(low) + [pivot] + quicksort(high)",
        "detail": "_BACKUP..gitbook.assets.quicksort (1)",
        "documentation": {}
    },
    {
        "label": "quicksort",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.quicksort (2)",
        "description": "_BACKUP..gitbook.assets.quicksort (2)",
        "peekOfCode": "def quicksort(seq: Sequence[T]) -> list[T]:\n    if len(seq) < 2:\n        return list(seq)\n    low, pivot, high = partition(seq)\n    return quicksort(low) + [pivot] + quicksort(high)",
        "detail": "_BACKUP..gitbook.assets.quicksort (2)",
        "documentation": {}
    },
    {
        "label": "quicksort",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.quicksort",
        "description": "_BACKUP..gitbook.assets.quicksort",
        "peekOfCode": "def quicksort(seq: Sequence[T]) -> list[T]:\n    if len(seq) < 2:\n        return list(seq)\n    low, pivot, high = partition(seq)\n    return quicksort(low) + [pivot] + quicksort(high)",
        "detail": "_BACKUP..gitbook.assets.quicksort",
        "documentation": {}
    },
    {
        "label": "selection_sort_iter",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.selection_sort_iter (1)",
        "description": "_BACKUP..gitbook.assets.selection_sort_iter (1)",
        "peekOfCode": "def selection_sort_iter(seq: MutableSequence[T]) -> None:\n    \"\"\"Use selection sort iteratively on a list in-place.\"\"\"\n    for i, val in enumerate(seq):\n        min_val = min(seq[i:])\n        min_val_i = seq.index(min_val, i)  # First index of min_val at or after i\n        seq[i] = min_val\n        seq[min_val_i] = val",
        "detail": "_BACKUP..gitbook.assets.selection_sort_iter (1)",
        "documentation": {}
    },
    {
        "label": "selection_sort_iter",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.selection_sort_iter",
        "description": "_BACKUP..gitbook.assets.selection_sort_iter",
        "peekOfCode": "def selection_sort_iter(seq: MutableSequence[T]) -> None:\n    \"\"\"Use selection sort iteratively on a list in-place.\"\"\"\n    for i, val in enumerate(seq):\n        min_val = min(seq[i:])\n        min_val_i = seq.index(min_val, i)  # First index of min_val at or after i\n        seq[i] = min_val\n        seq[min_val_i] = val",
        "detail": "_BACKUP..gitbook.assets.selection_sort_iter",
        "documentation": {}
    },
    {
        "label": "selection_sort_recur",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.selection_sort_recur (1)",
        "description": "_BACKUP..gitbook.assets.selection_sort_recur (1)",
        "peekOfCode": "def selection_sort_recur(seq: MutableSequence[T], i=0) -> None:\n    \"\"\"Use selection sort recursively on a list in-place.\"\"\"\n    if i >= len(seq) - 1:\n        return\n    min_val = min(seq[i:])\n    min_val_i = seq.index(min_val, i)\n    seq[min_val_i] = seq[i]\n    seq[i] = min_val\n    selection_sort_recur(seq, i + 1)",
        "detail": "_BACKUP..gitbook.assets.selection_sort_recur (1)",
        "documentation": {}
    },
    {
        "label": "selection_sort_recur",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.selection_sort_recur",
        "description": "_BACKUP..gitbook.assets.selection_sort_recur",
        "peekOfCode": "def selection_sort_recur(seq: MutableSequence[T], i=0) -> None:\n    \"\"\"Use selection sort recursively on a list in-place.\"\"\"\n    if i >= len(seq) - 1:\n        return\n    min_val = min(seq[i:])\n    min_val_i = seq.index(min_val, i)\n    seq[min_val_i] = seq[i]\n    seq[i] = min_val\n    selection_sort_recur(seq, i + 1)",
        "detail": "_BACKUP..gitbook.assets.selection_sort_recur",
        "documentation": {}
    },
    {
        "label": "TestEmployees",
        "kind": 6,
        "importPath": "_BACKUP..gitbook.assets.tests (1)",
        "description": "_BACKUP..gitbook.assets.tests (1)",
        "peekOfCode": "class TestEmployees(TestCase):\n    def setUp(self):\n        agent = Job(\"Agent\", 40000)\n        manager = Job(\"Manager\", 50000)\n        self.alice = Employee(\"Alice\", \"Anaheim\", manager)\n        self.bob = Employee(\"Bob\", \"Bodega\", agent)\n        self.cindy = Employee(\"Cindy\", \"Camille\", agent)\n        self.dan = Employee(\"Dan\", \"Dirk\", manager)\n        self.employee_list = [self.dan, self.cindy, self.bob, self.alice]\n    def test_equal(self):",
        "detail": "_BACKUP..gitbook.assets.tests (1)",
        "documentation": {}
    },
    {
        "label": "TestJobs",
        "kind": 6,
        "importPath": "_BACKUP..gitbook.assets.tests (1)",
        "description": "_BACKUP..gitbook.assets.tests (1)",
        "peekOfCode": "class TestJobs(TestCase):\n    def test_str(self):\n        job_title = \"Agent\"\n        job = Job(job_title, 40000)\n        self.assertEqual(str(job), job_title)",
        "detail": "_BACKUP..gitbook.assets.tests (1)",
        "documentation": {}
    },
    {
        "label": "TestEmployees",
        "kind": 6,
        "importPath": "_BACKUP..gitbook.assets.tests",
        "description": "_BACKUP..gitbook.assets.tests",
        "peekOfCode": "class TestEmployees(TestCase):\n    def setUp(self):\n        agent = Job(\"Agent\", 40000)\n        manager = Job(\"Manager\", 50000)\n        self.alice = Employee(\"Alice\", \"Anaheim\", manager)\n        self.bob = Employee(\"Bob\", \"Bodega\", agent)\n        self.cindy = Employee(\"Cindy\", \"Camille\", agent)\n        self.dan = Employee(\"Dan\", \"Dirk\", manager)\n        self.employee_list = [self.dan, self.cindy, self.bob, self.alice]\n    def test_equal(self):",
        "detail": "_BACKUP..gitbook.assets.tests",
        "documentation": {}
    },
    {
        "label": "TestJobs",
        "kind": 6,
        "importPath": "_BACKUP..gitbook.assets.tests",
        "description": "_BACKUP..gitbook.assets.tests",
        "peekOfCode": "class TestJobs(TestCase):\n    def test_str(self):\n        job_title = \"Agent\"\n        job = Job(job_title, 40000)\n        self.assertEqual(str(job), job_title)",
        "detail": "_BACKUP..gitbook.assets.tests",
        "documentation": {}
    },
    {
        "label": "topo_sort_count",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.topo_sort_count",
        "description": "_BACKUP..gitbook.assets.topo_sort_count",
        "peekOfCode": "def topo_sort_count(graph: Mapping[Node, Iterable]) -> Iterable[Node]:\n    \"\"\"Find a topological sorting of a graph by counting in-degrees.\"\"\"\n    in_degrees = Counter(chain(*graph.values()))\n    zero_in_degrees = [node for node in graph if not in_degrees[node]]\n    while zero_in_degrees:\n        node = zero_in_degrees.pop()\n        yield node\n        for next_node in graph[node]:\n            in_degrees[next_node] -= 1\n            if not in_degrees[next_node]:",
        "detail": "_BACKUP..gitbook.assets.topo_sort_count",
        "documentation": {}
    },
    {
        "label": "valid_nesting_multi",
        "kind": 2,
        "importPath": "_BACKUP..gitbook.assets.valid_nesting_multi",
        "description": "_BACKUP..gitbook.assets.valid_nesting_multi",
        "peekOfCode": "def valid_nesting_multi(\n    items: Sequence[Node], openers_to_closers: Mapping[Node, Node]\n) -> bool:\n    \"\"\"The parentheses problem with multiple brackets.\"\"\"\n    openers = openers_to_closers.keys()\n    closers = set(openers_to_closers.values())\n    unmatched_openers = []\n    for item in items:\n        if item in openers:\n            unmatched_openers.append(item)",
        "detail": "_BACKUP..gitbook.assets.valid_nesting_multi",
        "documentation": {}
    },
    {
        "label": "LinkedListNode",
        "kind": 6,
        "importPath": "_BACKUP.z_HTML-VERSIONS._NOTES.linked-list",
        "description": "_BACKUP.z_HTML-VERSIONS._NOTES.linked-list",
        "peekOfCode": "class LinkedListNode:\n    def __init__(self, value):\n        self.value = value\n        self.next = None\n    def add_node(self, value):\n        # set current as a ref to self\n        current = self\n        # thile there is still more nodes\n        while current.next is not None:\n            # traverse to the next node",
        "detail": "_BACKUP.z_HTML-VERSIONS._NOTES.linked-list",
        "documentation": {}
    },
    {
        "label": "print_ll",
        "kind": 2,
        "importPath": "_BACKUP.z_HTML-VERSIONS._NOTES.linked-list",
        "description": "_BACKUP.z_HTML-VERSIONS._NOTES.linked-list",
        "peekOfCode": "def print_ll(linked_list_node):\n    current = linked_list_node\n    while current is not None:\n        print(current.value)\n        current = current.next\ndef add_to_ll_storage(linked_list_node):\n    current = linked_list_node\n    while current is not None:\n        ll_storage.append(current)\n        current = current.next",
        "detail": "_BACKUP.z_HTML-VERSIONS._NOTES.linked-list",
        "documentation": {}
    },
    {
        "label": "add_to_ll_storage",
        "kind": 2,
        "importPath": "_BACKUP.z_HTML-VERSIONS._NOTES.linked-list",
        "description": "_BACKUP.z_HTML-VERSIONS._NOTES.linked-list",
        "peekOfCode": "def add_to_ll_storage(linked_list_node):\n    current = linked_list_node\n    while current is not None:\n        ll_storage.append(current)\n        current = current.next\nll_storage = []\nL1 = LinkedListNode(34)\nL1.next = LinkedListNode(45)\nL1.next.next = LinkedListNode(90)\nL1.add_node(12)",
        "detail": "_BACKUP.z_HTML-VERSIONS._NOTES.linked-list",
        "documentation": {}
    },
    {
        "label": "ll_storage",
        "kind": 5,
        "importPath": "_BACKUP.z_HTML-VERSIONS._NOTES.linked-list",
        "description": "_BACKUP.z_HTML-VERSIONS._NOTES.linked-list",
        "peekOfCode": "ll_storage = []\nL1 = LinkedListNode(34)\nL1.next = LinkedListNode(45)\nL1.next.next = LinkedListNode(90)\nL1.add_node(12)\nprint_ll(L1)\nL1.add_node(24)\nprint(\"--------------------------------------------\\n\")\nprint_ll(L1)\nprint(\"--------------------------------------------\\n\")",
        "detail": "_BACKUP.z_HTML-VERSIONS._NOTES.linked-list",
        "documentation": {}
    },
    {
        "label": "L1",
        "kind": 5,
        "importPath": "_BACKUP.z_HTML-VERSIONS._NOTES.linked-list",
        "description": "_BACKUP.z_HTML-VERSIONS._NOTES.linked-list",
        "peekOfCode": "L1 = LinkedListNode(34)\nL1.next = LinkedListNode(45)\nL1.next.next = LinkedListNode(90)\nL1.add_node(12)\nprint_ll(L1)\nL1.add_node(24)\nprint(\"--------------------------------------------\\n\")\nprint_ll(L1)\nprint(\"--------------------------------------------\\n\")\nL1.add_node(102)",
        "detail": "_BACKUP.z_HTML-VERSIONS._NOTES.linked-list",
        "documentation": {}
    },
    {
        "label": "L1.next",
        "kind": 5,
        "importPath": "_BACKUP.z_HTML-VERSIONS._NOTES.linked-list",
        "description": "_BACKUP.z_HTML-VERSIONS._NOTES.linked-list",
        "peekOfCode": "L1.next = LinkedListNode(45)\nL1.next.next = LinkedListNode(90)\nL1.add_node(12)\nprint_ll(L1)\nL1.add_node(24)\nprint(\"--------------------------------------------\\n\")\nprint_ll(L1)\nprint(\"--------------------------------------------\\n\")\nL1.add_node(102)\nprint_ll(L1)",
        "detail": "_BACKUP.z_HTML-VERSIONS._NOTES.linked-list",
        "documentation": {}
    },
    {
        "label": "L1.next.next",
        "kind": 5,
        "importPath": "_BACKUP.z_HTML-VERSIONS._NOTES.linked-list",
        "description": "_BACKUP.z_HTML-VERSIONS._NOTES.linked-list",
        "peekOfCode": "L1.next.next = LinkedListNode(90)\nL1.add_node(12)\nprint_ll(L1)\nL1.add_node(24)\nprint(\"--------------------------------------------\\n\")\nprint_ll(L1)\nprint(\"--------------------------------------------\\n\")\nL1.add_node(102)\nprint_ll(L1)\nL1.insert_node(123, 90)",
        "detail": "_BACKUP.z_HTML-VERSIONS._NOTES.linked-list",
        "documentation": {}
    }
]