jQuery(document).ready(function() {
	"use strict";

	const $ = jQuery;
	//
	// $(document).setNav();
	//
	// $(window).resize(function() {
	// 	$(document).setNav();
	// });

	var sliderLayout = $('#tg_blog_slider_layout').val();

	if ($(window).width() >= 960 && $(window).height() < 800) {
		if (sliderLayout == 'slider' || sliderLayout == 'fixed-slider') {
			$('#post_featured_slider').css('height', '400px');
			$('#post_featured_slider li .slider_image').css('height', '400px');
		} else {
			$('#post_featured_slider').css('height', '250px');
			$('#post_featured_slider li .slider_image').css('height', '250px');
		}
	} else {
		if (sliderLayout == 'slider' || sliderLayout == 'fixed-slider') {
			$('#post_featured_slider').css('height', '500px');
			$('#post_featured_slider li .slider_image').css('height', '500px');
		} else {
			$('#post_featured_slider').css('height', '300px');
			$('#post_featured_slider li .slider_image').css('height', '300px');
		}
	}

	$(window).resize(function() {
		if ($(window).width() >= 960 && $(window).height() < 800) {
			if (sliderLayout == 'slider' || sliderLayout == 'fixed-slider') {
				$('#post_featured_slider').css('height', '400px');
				$('#post_featured_slider li .slider_image').css('height', '400px');
			} else {
				$('#post_featured_slider').css('height', '250px');
				$('#post_featured_slider li .slider_image').css('height', '250px');
			}
		} else {
			if (sliderLayout == 'slider' || sliderLayout == 'fixed-slider') {
				$('#post_featured_slider').css('height', '500px');
				$('#post_featured_slider li .slider_image').css('height', '500px');
			} else {
				$('#post_featured_slider').css('height', '300px');
				$('#post_featured_slider li .slider_image').css('height', '300px');
			}
		}
	});

	$('.fancy_video, .lightbox_vimeo, .lightbox_youtube').magnificPopup({
		src: $(this).attr('href'),
		type: 'inline',
		removalDelay: 300,
		mainClass: 'mfp-fade'
	});

	$('a.fancy-gallery, .pp_gallery a').magnificPopup({
		type: 'image',
		removalDelay: 300,
		mainClass: 'mfp-fade',
		gallery: {
			enabled: true
		}
	});

	$('.img_frame').magnificPopup({
		type: 'image',
		removalDelay: 300,
		mainClass: 'mfp-fade'
	});

	$('#menu_expand_wrapper a').on('click', function() {
		$('#menu_wrapper').fadeIn();
		$('#custom_logo').animate({ 'left': '15px', 'opacity': 1 }, 400);
		$('#menu_close').animate({ 'left': '-10px', 'opacity': 1 }, 400);
		$(this).animate({ 'left': '-60px', 'opacity': 0 }, 400);
		$('#menu_border_wrapper select').animate({ 'left': '0', 'opacity': 1 }, 400).fadeIn();
	});

	$('#menu_close').on('click', function() {
		$('#custom_logo').animate({ 'left': '-200px', 'opacity': 0 }, 400);
		$(this).stop().animate({ 'left': '-200px', 'opacity': 0 }, 400);
		$('#menu_expand_wrapper a').animate({ 'left': '20px', 'opacity': 1 }, 400);
		$('#menu_border_wrapper select').animate({ 'left': '-200px', 'opacity': 0 }, 400).fadeOut();
		$('#menu_wrapper').fadeOut();
	});

	$(window).resize(function() {
		if ($(this).width() < 768) {
			$('#menu_expand_wrapper a').trigger('click');
		}
	});

	var isDisableRightClick = $('#pp_enable_right_click').val();

	if (isDisableRightClick != '') {
		$(this).bind("contextmenu", function(e) {
			e.preventDefault();
		});
	}

	function rePortfolioLayout() {

		var $container = $('#portfolio_filter_wrapper, .portfolio_filter_wrapper');
		var windowWidth = $container.width();

		if ($('#pp_menu_layout').val() == 'leftmenu' && $(window).width() > 768) {
			windowWidth = parseInt(windowWidth + 265);
		}

		var $portfolioColumn = $container.data('columns');
		var columnValue;
		var masonryOpts;

		if ($('#pp_menu_layout').val() == 'leftmenu') {
			var windowWidth = $container.width();
		}

		if (windowWidth > 959) {
			columnValue = parseInt(windowWidth / $portfolioColumn);
		} else if (windowWidth < 959 && windowWidth > 480) {
			columnValue = parseInt(windowWidth / $portfolioColumn);
		} else if (windowWidth <= 480) {
			columnValue = 480;
		}

		masonryOpts = {
			columnWidth: columnValue
		};

		$container.isotope({
			resizable: false,
			itemSelector: '.element',
			masonry: masonryOpts
		}).isotope();

	}

	// cache jQuery window
	var $window = $(window);

	// cache container
	var $container = $('#portfolio_filter_wrapper, .portfolio_filter_wrapper');

	// start up isotope with default settings
	$container.imagesLoaded(function() {
		rePortfolioLayout();
		$window.smartresize(rePortfolioLayout);

		$container.children('.element').children('.gallery_type').each(function() {
			$(this).addClass('fadeIn');
		});

		$container.children('.element').children('.portfolio_type').each(function() {
			$(this).addClass('fadeIn');
		});

		$container.children('.element').mouseenter(function() {
			$(this).addClass('hover');
		});

		$container.children('.element').mouseleave(function() {
			$container.children('.element').removeClass('hover');
		});

		$(this).addClass('visible');
	});

	//Add to top button when scrolling
	$(window).scroll(function() {

		if ($(this).scrollTop() > 200) {
			$('#toTop').css({ opacity: 0.5, "visibility": "visible" });
		} else if ($(this).scrollTop() == 0) {
			$('#toTop').css({ opacity: 0, "visibility": "hidden" });
		}
	});

	$('#toTop, .hr_totop').on('click', function() {
		$('body,html').animate({ scrollTop: 0 }, 800);
	});

	var isDisableDragging = $('#pp_enable_dragging').val();

	if (isDisableDragging != '') {
		$("img").mousedown(function() {
			return false;
		});
	}

	if ($('#pp_topbar').val() == 0) {
		var topBarHeight = $('.header_style_wrapper').height();
	} else {
		var topBarHeight = parseInt($('.header_style_wrapper').height() - $('.header_style_wrapper .above_top_bar').height());
	}

	var logoHeight = $('#custom_logo img').height();
	var logoMargin = parseInt($('#custom_logo').css('marginTop'));
	var menuPaddingTop = parseInt($('#menu_wrapper div .nav li > a').css('paddingTop'));
	var menuPaddingBottom = parseInt($('#menu_wrapper div .nav li > a').css('paddingBottom'));
	var SearchPaddingTop = parseInt($('.top_bar #searchform button').css('paddingTop'));

	$('#wrapper').css('paddingTop', parseInt($('.header_style_wrapper').height()) + 'px');

	$(window).resize(function() {
		if ($(this).width() > 768) {
			$('#wrapper').css('paddingTop', parseInt($('.header_style_wrapper').height()) + 'px');
			$('.logo_wrapper').css('marginTop', '');
			$('.top_bar #searchform button').css('paddingTop', '');
		} else {
			$('#wrapper').css('paddingTop', parseInt($('.header_style_wrapper').height()) + 'px');
		}
	});

	$(window).scroll(function() {
		if ($('#pp_fixed_menu').val() == 1) {
			if ($(this).scrollTop() >= 200) {
				$('.header_style_wrapper .above_top_bar').hide();
				$('.extend_top_contact_info').hide();
				$('#search_icon').hide();
				$('.post_share_wrapper').hide();

				$('.top_bar').addClass('scroll');

				if ($(window).width() > 960) {
					$('#mobile_nav_icon').hide();
				}
			} else if ($(this).scrollTop() < 200) {
				$('.header_style_wrapper .above_top_bar').show();
				$('.extend_top_contact_info').show();

				$('#custom_logo img').removeClass('zoom');
				$('#custom_logo img').css('maxHeight', '');

				$('#custom_logo').css('marginTop', parseInt(logoMargin) + 'px');

				$('#menu_wrapper div .nav > li > a').css('paddingTop', menuPaddingTop + 'px');
				$('#menu_wrapper div .nav > li > a').css('paddingBottom', menuPaddingBottom + 'px');
				;

				$('.top_bar').removeClass('scroll');
				$('#mobile_nav_icon').show();
				$('#search_icon').show();
				$('.post_share_wrapper').show();
			}
		} else {
			if ($(this).scrollTop() >= 200) {
				$('.header_style_wrapper').addClass('nofixed');
			} else {
				$('.header_style_wrapper').removeClass('nofixed');
			}
		}
	});

	$('.post_img img').imagesLoaded(function() {
		$(this).parent('.post_img').addClass('fadeIn');
	});

	$(document).mouseenter(function() {
		$('body').addClass('hover');
	});

	$(document).mouseleave(function() {
		$('body').removeClass('hover');
	});

	var siteBaseURL = $('#pp_homepage_url').val();
	if ($('#pp_ajax_search').val() != '') {
		$('#s').on('input', function() {
			$.ajax({
				url: siteBaseURL + "/wp-admin/admin-ajax.php",
				type: 'POST',
				data: 'action=letsblog_ajax_search&s=' + $('#s').val(),
				success: function(results) {
					$("#autocomplete").html(results);

					if (results != '') {
						$("#autocomplete").addClass('visible');
						$("#autocomplete").show();
						$("body.js_nav .mobile_menu_wrapper").css('overflow', 'visible');
					} else {
						$("#autocomplete").hide();
						$("body.js_nav .mobile_menu_wrapper").css('overflow', 'scroll');
					}
				}
			})
		});

		$("#s").keypress(function(event) {
			if (event.which == 13) {
				event.preventDefault();
				$("form#searchform").submit();
			}
		});

		$('#s').focus(function() {
			if ($('#autocomplete').html() != '') {
				$("#autocomplete").addClass('visible');
				$("#autocomplete").fadeIn();
			}
		});

		$('#s').blur(function() {
			$("#autocomplete").fadeOut();
		});
	}

	$('.animated').imagesLoaded(function() {
		var windowWidth = $(window).width();

		if (windowWidth >= 960) {
			$(this).waypoint(function(direction) {
				var animationClass = $(this).data('animation');

				$(this).addClass(animationClass, direction === 'down');

			}, { offset: '100%' });
		}
	});

	$('#mobile_nav_icon').on('click', function() {
		$('body,html').animate({ scrollTop: 0 }, 100);
		$('body').toggleClass('js_nav');
		$('body').addClass('overflow_hidden');

		if (is_touch_device()) {
			$('body.js_nav').css('overflow', 'auto');
		}
	});

	$('#search_icon').on('click', function() {
		$('body,html').animate({ scrollTop: 0 }, 100);
		$('body').toggleClass('js_nav');
		$('body').addClass('overflow_hidden');
		$('.mobile_menu_wrapper').find('#searchform').find('#s').focus();

		if (is_touch_device()) {
			$('body.js_nav').css('overflow', 'auto');
		}
	});

	$('#close_mobile_menu').on('click', function() {
		$('body').removeClass('js_nav');
		$('body').removeClass('overflow_hidden');
	});

	$('.mobile_menu_close a').on('click', function() {
		$('body').removeClass('js_nav');
		$('body').removeClass('overflow_hidden');
	});

	$('.close_alert').on('click', function() {
		var target = $(this).data('target');
		$('#' + target).fadeOut();
	});

	$('.tooltip').tooltipster();

	$('#option_wrapper').mouseenter(function() {
		$('body').addClass('overflow_hidden');
	});

	$('#option_wrapper').mouseleave(function() {
		$('body').removeClass('overflow_hidden');
	});

	$('.animate').waypoint(function(direction) {
		var windowWidth = $(window).width();

		$(this).addClass('visible', direction === 'down');

	}, { offset: '80%' });

	if ($.browser.msie && parseFloat($.browser.version) < 10) {
		$('.animate').css('opacity', 1);
		$('.animate').css('visibility', 'visible');

		$('.animated').each(function() {
			$(this).css('opacity', 1);
			$(this).css('visibility', 'visible');
		});
	}

	$('#page_share, #post_share_text').click(function() {
		$('#overlay_background').addClass('visible');
		$('#overlay_background').addClass('share_open');
		$('#fullscreen_share_wrapper').css('visibility', 'visible');
	});

	$('#overlay_background').click(function() {
		if (!$('body').hasClass('js_nav')) {
			$('#overlay_background').removeClass('visible');
			$('#overlay_background').removeClass('share_open');
			$('#fullscreen_share_wrapper').css('visibility', 'hidden');
		}
	});



	// Email signup handler
	$('.v3-email-signup__form').submit(function(e) {
		e.preventDefault();

		var form = $(this);
		var container = form.closest('.v3-email-signup');

		var email = form.find('[name=email]').removeClass('v3-email-signup__input--error');
		var success = container.find('.v3-email-signup__success').addClass('v3-email-signup__success--hidden');
		var error = container.find('.v3-email-signup__error').addClass('hidden');
		var main = container.find('.v3-email-signup__main');

		if (!email.val()) return;

		form.find('[type=submit]').attr('disabled', 'true');

		$.ajax({
			method: "POST",
			url: "/Home/SubscribeToNewsletter",
			crossDomain: true,
			contentType: 'application/x-www-form-urlencoded',
			dataType: 'json',
			data: {
				email: email.val(),
			},
		})
		.success(function() {
			main.addClass('hidden');
			success.removeClass('v3-email-signup__success--hidden');
		})
		.error(function() {
			error.removeClass('hidden');
			email.addClass('v3-email-signup__input--error');
		})
		.complete(function() {
			form.find('[type=submit]').removeAttr('disabled');
		});
	});

	// Footer email signup handler
	$('#newsletter-subscribe-footer').submit(function(e) {
		e.preventDefault();

		var form = $(this);
		var container = form.closest('.v3_page-footer__email-signup');

		var email = form.find('[name=email]').removeClass('v3-email-signup__input--error');
		var success = container.find('.v3-email-signup__success').addClass('hidden');
		var error = container.find('.v3-email-signup__error').addClass('hidden');
		var main = container.find('.v3_page-footer__email-signup__main');

		if (!email.val()) return;

		form.find('[type=submit]').attr('disabled', 'true');

		$.ajax({
			method: "POST",
			url: "/Home/SubscribeToNewsletter",
			crossDomain: true,
			contentType: 'application/x-www-form-urlencoded',
			dataType: 'json',
			data: {
				email: email.val(),
			},
		})
		.success(function() {
			main.addClass('hidden');
			success.removeClass('hidden');
		})
		.error(function() {
			error.removeClass('hidden');
			email.addClass('v3-email-signup__input--error');
		})
		.complete(function() {
			form.find('[type=submit]').removeAttr('disabled');
		});
	});

});

jQuery(window).on('resize load', adjustIframes);




// New JS for v3

(function() {
	// below is the combination the main site's nav code in v3/layout/nav and it's dependencies. it's been run through the babel REPL since it was written for esnext but we don't have a build process here. all of that code is in pre-babel-nav-code.js in this dir. yes this is a horrible mess but i wasn't about to add a full build process just for this nav code. if you need to edit any of this then make the changes in pre-babel-nav-code.js then run it through babel and dump the result here.
	// DONT EDIT BELOW CODE -------------------------------------------------

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

	var debounce = function () {
		/**
		 * lodash (Custom Build) <https://lodash.com/>
		 * Build: `lodash modularize exports="npm" -o ./`
		 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
		 * Released under MIT license <https://lodash.com/license>
		 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
		 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
		 */

		var FUNC_ERROR_TEXT = 'Expected a function';
		var NAN = 0 / 0;
		var symbolTag = '[object Symbol]';
		var reTrim = /^\s+|\s+$/g;
		var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
		var reIsBinary = /^0b[01]+$/i;
		var reIsOctal = /^0o[0-7]+$/i;
		var freeParseInt = parseInt;
		var freeGlobal = (typeof global === 'undefined' ? 'undefined' : _typeof(global)) == 'object' && global && global.Object === Object && global;
		var freeSelf = (typeof self === 'undefined' ? 'undefined' : _typeof(self)) == 'object' && self && self.Object === Object && self;
		var root = freeGlobal || freeSelf || Function('return this')();
		var objectProto = Object.prototype;
		var objectToString = objectProto.toString;
		var nativeMax = Math.max,
			nativeMin = Math.min;

		var now = function now() {
			return root.Date.now();
		};

		function debounce(func, wait, options) {
			var lastArgs,
				lastThis,
				maxWait,
				result,
				timerId,
				lastCallTime,
				lastInvokeTime = 0,
				leading = false,
				maxing = false,
				trailing = true;

			if (typeof func != 'function') {
				throw new TypeError(FUNC_ERROR_TEXT);
			}
			wait = toNumber(wait) || 0;
			if (isObject(options)) {
				leading = !!options.leading;
				maxing = 'maxWait' in options;
				maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
				trailing = 'trailing' in options ? !!options.trailing : trailing;
			}

			function invokeFunc(time) {
				var args = lastArgs,
					thisArg = lastThis;

				lastArgs = lastThis = undefined;
				lastInvokeTime = time;
				result = func.apply(thisArg, args);
				return result;
			}

			function leadingEdge(time) {
				// Reset any `maxWait` timer.
				lastInvokeTime = time;
				// Start the timer for the trailing edge.
				timerId = setTimeout(timerExpired, wait);
				// Invoke the leading edge.
				return leading ? invokeFunc(time) : result;
			}

			function remainingWait(time) {
				var timeSinceLastCall = time - lastCallTime,
					timeSinceLastInvoke = time - lastInvokeTime,
					result = wait - timeSinceLastCall;

				return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;
			}

			function shouldInvoke(time) {
				var timeSinceLastCall = time - lastCallTime,
					timeSinceLastInvoke = time - lastInvokeTime;

				return lastCallTime === undefined || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
			}

			function timerExpired() {
				var time = now();
				if (shouldInvoke(time)) {
					return trailingEdge(time);
				}
				// Restart the timer.
				timerId = setTimeout(timerExpired, remainingWait(time));
			}

			function trailingEdge(time) {
				timerId = undefined;

				if (trailing && lastArgs) {
					return invokeFunc(time);
				}
				lastArgs = lastThis = undefined;
				return result;
			}

			function cancel() {
				if (timerId !== undefined) {
					clearTimeout(timerId);
				}
				lastInvokeTime = 0;
				lastArgs = lastCallTime = lastThis = timerId = undefined;
			}

			function flush() {
				return timerId === undefined ? result : trailingEdge(now());
			}

			function debounced() {
				var time = now(),
					isInvoking = shouldInvoke(time);

				lastArgs = arguments;
				lastThis = this;
				lastCallTime = time;

				if (isInvoking) {
					if (timerId === undefined) {
						return leadingEdge(lastCallTime);
					}
					if (maxing) {
						timerId = setTimeout(timerExpired, wait);
						return invokeFunc(lastCallTime);
					}
				}
				if (timerId === undefined) {
					timerId = setTimeout(timerExpired, wait);
				}
				return result;
			}
			debounced.cancel = cancel;
			debounced.flush = flush;
			return debounced;
		}

		function isObject(value) {
			var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);
			return !!value && (type == 'object' || type == 'function');
		}

		function isObjectLike(value) {
			return !!value && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) == 'object';
		}

		function isSymbol(value) {
			return (typeof value === 'undefined' ? 'undefined' : _typeof(value)) == 'symbol' || isObjectLike(value) && objectToString.call(value) == symbolTag;
		}

		function toNumber(value) {
			if (typeof value == 'number') {
				return value;
			}
			if (isSymbol(value)) {
				return NAN;
			}
			if (isObject(value)) {
				var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
				value = isObject(other) ? other + '' : other;
			}
			if (typeof value != 'string') {
				return value === 0 ? value : +value;
			}
			value = value.replace(reTrim, '');
			var isBinary = reIsBinary.test(value);
			return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
		}

		return debounce;
	}();

	var ariaControls = 'aria-controls';
	var ariaExpanded = 'aria-expanded';

// https://www.w3.org/TR/wai-aria-practices-1.1/#disclosure
	function initializeAriaDisclosure(_ref) {
		var button = _ref.button,
			section = _ref.section,
			activeClassName = _ref.activeClassName,
			onOpen = _ref.onOpen,
			onClose = _ref.onClose;

		var id = section.id || 'bs-' + Math.random().toString(36).substring(7); // Create unique id if doesn't have id already

		section.id = id;
		button.setAttribute(ariaControls, id);

		var open = function open() {
			executeOptionalCallback(onOpen);
			section.classList.add(activeClassName);
			button.setAttribute(ariaExpanded, true);
		};

		var close = function close() {
			section.classList.remove(activeClassName);
			button.setAttribute(ariaExpanded, false);
			executeOptionalCallback(onClose);
		};

		var toggle = function toggle() {
			if (section.classList.contains(activeClassName)) {
				close();
				return;
			}

			open();
		};

		button.addEventListener('click', toggle);

		return { open: open, close: close, toggle: toggle };
	}

	var hoverableNavItems = [];

	var dropdownState = new Map();
	var openHandlers = new Map();
	var closeHandlers = new Map();

	var hoverTarget = void 0,
		focusTarget = void 0,
		underline = void 0;

	var activeUnderlineClass = 'v3-main-nav__underline--active';

	var drawUnderline = debounce(function () {
		var expandedDropdown = [].concat(_toConsumableArray(dropdownState.entries())).find(function (x) {
			return x[1] === true;
		});

		if (expandedDropdown) {
			expandedDropdown = expandedDropdown[0];
		}

		var target = hoverTarget || focusTarget || expandedDropdown;

		if (!target) {
			underline.classList.remove(activeUnderlineClass);
			return;
		}

		underline.classList.add(activeUnderlineClass);

		var _ref2 = [target.offsetLeft, target.offsetWidth],
			left = _ref2[0],
			width = _ref2[1];

		var padding = 16;
		var offset = 5;

		left += padding - offset;

		var right = target.offsetParent.offsetWidth - (left + offset) - width + padding * 2 - offset + (target.parentNode.lastElementChild === target ? -1 * padding : 0);

		underline.style.left = left + 'px';
		underline.style.right = right + 'px';
	}, 25, { leading: false, trailing: true }); // Debounced so blur/mouseout don't trigger two rerenders if immediately switch to new underline target

	function mouseOver(target) {
		hoverTarget = target;
		drawUnderline();
	}

	function mouseOut() {
		hoverTarget = null;
		drawUnderline();
	}

	function focus(target) {
		focusTarget = target;
		drawUnderline();
	}

	function blur() {
		focusTarget = null;
		drawUnderline();
	}

	var dropdownCloseFunctions = new Set();

	function closeAllNavDropdowns() {
		var _iteratorNormalCompletion = true;
		var _didIteratorError = false;
		var _iteratorError = undefined;

		try {
			for (var _iterator = dropdownCloseFunctions[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
				var fn = _step.value;

				if (fn && typeof fn === 'function') {
					fn();
				}
			}
		} catch (err) {
			_didIteratorError = true;
			_iteratorError = err;
		} finally {
			try {
				if (!_iteratorNormalCompletion && _iterator.return) {
					_iterator.return();
				}
			} finally {
				if (_didIteratorError) {
					throw _iteratorError;
				}
			}
		}

		drawUnderline();
	}

	function initializeDropdown(_ref3) {
		var navItem = _ref3.navItem,
			toggle = _ref3.toggle,
			dropdown = _ref3.dropdown;

		var onOpen = function onOpen() {
			var _iteratorNormalCompletion2 = true;
			var _didIteratorError2 = false;
			var _iteratorError2 = undefined;

			try {
				for (var _iterator2 = dropdownState[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
					var _step2$value = _slicedToArray(_step2.value, 2),
						item = _step2$value[0],
						state = _step2$value[1];

					if (!state) {
						continue;
					}

					if (closeHandlers.has(item)) {
						closeHandlers.get(item)();
					}
				}
			} catch (err) {
				_didIteratorError2 = true;
				_iteratorError2 = err;
			} finally {
				try {
					if (!_iteratorNormalCompletion2 && _iterator2.return) {
						_iterator2.return();
					}
				} finally {
					if (_didIteratorError2) {
						throw _iteratorError2;
					}
				}
			}

			if (openHandlers.has(navItem)) {
				openHandlers.get(navItem)();
			}

			dropdownState.set(navItem, true);
		};

		var onClose = function onClose() {
			dropdownState.set(navItem, false);

			var activeColumns = navItem.querySelectorAll('.v3-inner-nav__column--active');

			var _iteratorNormalCompletion3 = true;
			var _didIteratorError3 = false;
			var _iteratorError3 = undefined;

			try {
				for (var _iterator3 = activeColumns[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
					var column = _step3.value;

					column.classList.remove('v3-inner-nav__column--active');
				}
			} catch (err) {
				_didIteratorError3 = true;
				_iteratorError3 = err;
			} finally {
				try {
					if (!_iteratorNormalCompletion3 && _iterator3.return) {
						_iterator3.return();
					}
				} finally {
					if (_didIteratorError3) {
						throw _iteratorError3;
					}
				}
			}

			var activeTabs = navItem.querySelectorAll('.v3-inner-nav__discipline--trigger');

			var _iteratorNormalCompletion4 = true;
			var _didIteratorError4 = false;
			var _iteratorError4 = undefined;

			try {
				for (var _iterator4 = activeTabs[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
					var tab = _step4.value;

					tab.classList.remove('v3-inner-nav__discipline--trigger');
				}
			} catch (err) {
				_didIteratorError4 = true;
				_iteratorError4 = err;
			} finally {
				try {
					if (!_iteratorNormalCompletion4 && _iterator4.return) {
						_iterator4.return();
					}
				} finally {
					if (_didIteratorError4) {
						throw _iteratorError4;
					}
				}
			}
		};

		var _initializeAriaDisclo = initializeAriaDisclosure({
				section: dropdown,
				button: toggle,
				activeClassName: 'v3-main-nav__dropdown--active',
				onOpen: onOpen,
				onClose: onClose
			}),
			open = _initializeAriaDisclo.open,
			close = _initializeAriaDisclo.close,
			toggleDisclosure = _initializeAriaDisclo.toggle;

		closeHandlers.set(navItem, close);
		var resetTabs = initializeInnerNavTabs(navItem);

		openHandlers.set(navItem, resetTabs);

		dropdownCloseFunctions.add(close);

		if (!navItem.id) {
			navItem.id = 'bs-' + Math.random().toString(36).substring(7);
		}

		document.addEventListener('click', function (e) {
			if (!e.target.closest('#' + navItem.id)) {
				close();
				drawUnderline();
			}
		});
	}

	function initializeMainNav() {
		hoverableNavItems = [].concat(_toConsumableArray(document.querySelectorAll('.v3-main-nav__item--hover')));
		underline = document.querySelector('.v3-main-nav__underline');

		var _iteratorNormalCompletion5 = true;
		var _didIteratorError5 = false;
		var _iteratorError5 = undefined;

		try {
			for (var _iterator5 = hoverableNavItems[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
				var item = _step5.value;

				item.addEventListener('mouseover', mouseOver.bind(null, item));
				item.addEventListener('mouseout', mouseOut);

				var focusable = item.querySelector('.v3-main-nav__focusable');

				if (!focusable) {
					continue;
				}

				focusable.addEventListener('focus', focus.bind(null, item));
				focusable.addEventListener('blur', blur);

				var dropdown = item.querySelector('.v3-main-nav__dropdown');

				if (!dropdown) {
					continue;
				}

				initializeDropdown({ navItem: item, toggle: focusable, dropdown: dropdown });
			}
		} catch (err) {
			_didIteratorError5 = true;
			_iteratorError5 = err;
		} finally {
			try {
				if (!_iteratorNormalCompletion5 && _iterator5.return) {
					_iterator5.return();
				}
			} finally {
				if (_didIteratorError5) {
					throw _iteratorError5;
				}
			}
		}
	}

	var activeDisciplineClass = 'v3-inner-nav__discipline-tab--active';
	var hideSectionClass = 'v3-inner-nav__section--hide';
	var activeSectionClass = 'v3-inner-nav__section--active';

	var didEnter = sessionStorage.getItem('viewed-nav') === 'true';

	var isSwitching = false;

	var onSwitch = new Map();

	function switchToTab(tabs, sections, tabToSection) {
		return function (tab) {
			var opening = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

			if (isSwitching) {
				return;
			}

			var currentTab = tabs.find(function (x) {
				return x.classList.contains(activeDisciplineClass);
			});

			if (currentTab === tab && !opening) {
				return;
			}

			isSwitching = true;

			if (onSwitch.has(tab)) {
				onSwitch.get(tab)();
			}

			var startTime = void 0;
			var section = tabToSection.get(tab) || sections.find(function (x) {
				return !!x;
			});

			var animate = function animate(timestamp) {
				if (!startTime) {
					startTime = timestamp;

					tabs.forEach(function (d) {
						return d.classList.remove(activeDisciplineClass);
					});
					if (tab) {
						tab.classList.add(activeDisciplineClass);
					}

					sections.filter(function (x) {
						return x !== section;
					}).forEach(function (s) {
						return s.classList.replace(activeSectionClass, hideSectionClass);
					});

					var animation = opening ? didEnter ? animateSubsequentEntry : animateFirstEntry : animateSwitchTabs;

					animation({ tabs: tabs, tab: tab, section: section });

					return window.requestAnimationFrame(animate);
				}

				if (timestamp - startTime < 200) {
					return window.requestAnimationFrame(animate);
				}

				section.classList.add(activeSectionClass);
				sections.filter(function (x) {
					return x !== section;
				}).forEach(function (s) {
					return s.classList.remove(hideSectionClass);
				});

				didEnter = true;
				sessionStorage.setItem('viewed-nav', 'true');

				isSwitching = false;
			};

			return window.requestAnimationFrame(animate);
		};
	}

	var Timing = function Timing(element, duration) {
		var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

		_classCallCheck(this, Timing);

		this.element = element;
		this.duration = duration;
		this.offset = offset;
	};

	var initialTabTriggerClassname = 'v3-inner-nav__discipline--trigger';
	var initialTabSetupClassname = 'v3-inner-nav__discipline--first-entry';
	var initialColumnTriggerClassname = 'v3-inner-nav__column--trigger';
	var initialColumnSetupClassname = 'v3-inner-nav__column--first-entry';

	var activeColumnClassname = 'v3-inner-nav__column--active';

	var subTabTriggerClassname = 'v3-inner-nav__discipline--trigger';
	var subTabSetupClassname = 'v3-inner-nav__discipline--entry';
	var subColumnTriggerClassname = 'v3-inner-nav__column--trigger';
	var subColumnSetupClassname = 'v3-inner-nav__column--entry';

	var switchColumnTriggerClassname = 'v3-inner-nav__column--trigger';
	var switchColumnSetupClassname = 'v3-inner-nav__column--switch';

	var TimingInstruction = function () {
		_createClass(TimingInstruction, null, [{
			key: 'EnterInstruction',
			get: function get() {
				return 'enter';
			}
		}, {
			key: 'CleanupInstruction',
			get: function get() {
				return 'cleanup';
			}
		}, {
			key: 'InitializeInstruction',
			get: function get() {
				return 'initialize';
			}
		}]);

		function TimingInstruction(element, instruction, time) {
			_classCallCheck(this, TimingInstruction);

			this.element = element;
			this.instruction = instruction;
			this.time = time;
		}

		_createClass(TimingInstruction, [{
			key: 'isTab',
			value: function isTab() {
				return this.element.className.includes('discipline');
			}
		}, {
			key: 'executeInitial',
			value: function executeInitial() {
				switch (this.instruction) {
					case TimingInstruction.EnterInstruction:
						return this.element.classList.add(this.isTab() ? initialTabTriggerClassname : initialColumnTriggerClassname);

					case TimingInstruction.CleanupInstruction:
						this.element.classList.remove(initialTabSetupClassname, initialColumnTriggerClassname, initialColumnSetupClassname);
						this.element.classList.add(activeColumnClassname);
						return;

					case TimingInstruction.InitializeInstruction:
						this.element.classList.remove(activeColumnClassname);
						return this.element.classList.add(this.isTab() ? initialTabSetupClassname : initialColumnSetupClassname);

					default:
						return;
				}
			}
		}, {
			key: 'executeSubsequent',
			value: function executeSubsequent() {
				switch (this.instruction) {
					case TimingInstruction.EnterInstruction:
						return this.element.classList.add(this.isTab() ? subTabTriggerClassname : subColumnTriggerClassname);

					case TimingInstruction.CleanupInstruction:
						this.element.classList.remove(subTabSetupClassname, subColumnTriggerClassname, subColumnSetupClassname);
						if (!this.isTab()) {
							this.element.classList.add(activeColumnClassname);
						}
						return;

					case TimingInstruction.InitializeInstruction:
						if (!this.isTab()) {
							this.element.classList.remove(activeColumnClassname);
						}
						return this.element.classList.add(this.isTab() ? subTabSetupClassname : subColumnSetupClassname);

					default:
						return;
				}
			}
		}, {
			key: 'executeSwitch',
			value: function executeSwitch() {
				switch (this.instruction) {
					case TimingInstruction.InitializeInstruction:
						this.element.classList.remove(activeColumnClassname);
						return this.element.classList.add(switchColumnSetupClassname);

					case TimingInstruction.EnterInstruction:
						return this.element.classList.add(switchColumnTriggerClassname);

					case TimingInstruction.CleanupInstruction:
						if (!this.isTab()) {
							this.element.classList.add(activeColumnClassname);
						}
						return this.element.classList.remove(switchColumnSetupClassname, switchColumnTriggerClassname);

					default:
						return;
				}
			}
		}], [{
			key: 'enter',
			value: function enter(element, time) {
				return new TimingInstruction(element, TimingInstruction.EnterInstruction, time);
			}
		}, {
			key: 'cleanup',
			value: function cleanup(element, time) {
				return new TimingInstruction(element, TimingInstruction.CleanupInstruction, time);
			}
		}, {
			key: 'initialize',
			value: function initialize(element) {
				var time = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;

				return new TimingInstruction(element, TimingInstruction.InitializeInstruction, time);
			}
		}]);

		return TimingInstruction;
	}();

	function createTimingQueue(timings) {
		var queue = [];

		var _iteratorNormalCompletion6 = true;
		var _didIteratorError6 = false;
		var _iteratorError6 = undefined;

		try {
			for (var _iterator6 = timings[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
				var timing = _step6.value;

				queue.push(TimingInstruction.enter(timing.element, timing.offset));
				queue.push(TimingInstruction.cleanup(timing.element, timing.offset + timing.duration));
				queue.push(TimingInstruction.initialize(timing.element));
			}
		} catch (err) {
			_didIteratorError6 = true;
			_iteratorError6 = err;
		} finally {
			try {
				if (!_iteratorNormalCompletion6 && _iterator6.return) {
					_iterator6.return();
				}
			} finally {
				if (_didIteratorError6) {
					throw _iteratorError6;
				}
			}
		}

		queue.sort(function (a, b) {
			return a.time <= b.time ? -1 : 1;
		});

		return queue;
	}

	function getFirstEntryTiming(tabs, columns) {
		var timing = new Set();

		// 200ms for dropdown to appear first
		var cumulativeOffset = 200;

		for (var i = 0; i < tabs.length; ++i) {
			var tab = tabs[i];

			timing.add(new Timing(tab, 450, cumulativeOffset));

			cumulativeOffset += 50;
		}

		if (tabs && tabs.length) {
			cumulativeOffset += 100; // 100ms delay
		}

		for (var j = 0; j < columns.length; ++j) {
			var column = columns[j];

			timing.add(new Timing(column, 450, cumulativeOffset));

			cumulativeOffset += 150;
		}

		return createTimingQueue([].concat(_toConsumableArray(timing)));
	}

	function getSubsequentEntryTiming(tabs, columns) {
		var timing = new Set();

		// 200ms for dropdown to appear first
		var cumulativeOffset = 200;

		for (var i = 0; i < tabs.length; ++i) {
			var tab = tabs[i];

			timing.add(new Timing(tab, 450, cumulativeOffset));
		}

		if (tabs && tabs.length) {
			cumulativeOffset += 150; // 150ms delay
		}

		for (var j = 0; j < columns.length; ++j) {
			var column = columns[j];

			timing.add(new Timing(column, 250, cumulativeOffset));
		}

		return createTimingQueue([].concat(_toConsumableArray(timing)));
	}

	function getSwitchTabsTiming(tabs, columns) {
		var timing = [];

		for (var j = 0; j < columns.length; ++j) {
			var column = columns[j];

			timing.push(TimingInstruction.initialize(column, -1));
			timing.push(TimingInstruction.enter(column, 200));
			timing.push(TimingInstruction.cleanup(column, 450));
		}

		timing.sort(function (a, b) {
			return a.time <= b.time ? -1 : 1;
		});

		return timing;
	}

	function createAnimationFunction(timingFunction, executeSelector) {
		return function (_ref4) {
			var tabs = _ref4.tabs,
				tab = _ref4.tab,
				section = _ref4.section;

			var columns = [].concat(_toConsumableArray(section.querySelectorAll('.v3-inner-nav__column, .v3-inner-nav__divider')));
			var timingQueue = timingFunction(tabs, columns);

			var startTime = void 0;

			var animate = function animate(timestamp) {
				if (!startTime) {
					startTime = timestamp;
				}

				while (timingQueue.length && timestamp - startTime >= timingQueue[0].time) {
					var instruction = timingQueue.shift();

					executeSelector(instruction);
				}

				if (!timingQueue.length) {
					return;
				}

				return window.requestAnimationFrame(animate);
			};

			return window.requestAnimationFrame(animate);
		};
	}

	function initializeUnderline(tabs, wrapper) {
		var underline = wrapper.querySelector('.v3-inner-nav__underline');

		if (!underline || !tabs || !tabs.length) {
			return;
		}

		var _createAnimatedUnderl = createAnimatedUnderline({ underline: underline }),
			setTargetState = _createAnimatedUnderl.setTargetState;

		var setHoverTarget = setTargetState.bind(null, 'hover');
		var setActiveTarget = setTargetState.bind(null, 'active');

		setHoverTarget(null, false);
		setActiveTarget(null, false);

		function mouseOver(target) {
			setHoverTarget(target, true);
		}

		function mouseOut(target) {
			setHoverTarget(target, false);
		}

		var _iteratorNormalCompletion7 = true;
		var _didIteratorError7 = false;
		var _iteratorError7 = undefined;

		try {
			var _loop = function _loop() {
				var tab = _step7.value;

				tab.parentNode.addEventListener('mouseover', mouseOver.bind(null, tab));
				tab.parentNode.addEventListener('mouseout', mouseOut.bind(null, tab));

				if (tab.classList.contains(activeDisciplineClass)) {
					setActiveTarget(tab, true);
				}

				onSwitch.set(tab, function () {
					return setActiveTarget(tab, true);
				});
			};

			for (var _iterator7 = tabs[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
				_loop();
			}
		} catch (err) {
			_didIteratorError7 = true;
			_iteratorError7 = err;
		} finally {
			try {
				if (!_iteratorNormalCompletion7 && _iterator7.return) {
					_iterator7.return();
				}
			} finally {
				if (_didIteratorError7) {
					throw _iteratorError7;
				}
			}
		}
	}

	var animateFirstEntry = createAnimationFunction(getFirstEntryTiming, function (i) {
		return i.executeInitial();
	});
	var animateSubsequentEntry = createAnimationFunction(getSubsequentEntryTiming, function (i) {
		return i.executeSubsequent();
	});
	var animateSwitchTabs = createAnimationFunction(getSwitchTabsTiming, function (i) {
		return i.executeSwitch();
	});

	function initializeInnerNavTabs(item) {
		var disciplines = [].concat(_toConsumableArray(item.querySelectorAll('.v3-inner-nav__discipline-tab')));
		var sections = [].concat(_toConsumableArray(item.querySelectorAll('.v3-inner-nav__section')));

		var mapping = disciplines.reduce(function (acc, x, i) {
			return acc.set(x, sections[i]);
		}, new Map());

		initializeAriaTabs({
			wrapper: item,
			tabPanelMapping: mapping,
			switchToTab: switchToTab(disciplines, sections, mapping)
		});

		initializeUnderline(disciplines, item);

		return switchToTab(disciplines, sections, mapping).bind(null, disciplines[0], true);
	}

	function createAnimatedUnderline(_ref5) {
		var underline = _ref5.underline,
			activeClassname = _ref5.activeClassname,
			_ref5$setRight = _ref5.setRight,
			setRight = _ref5$setRight === undefined ? false : _ref5$setRight,
			_ref5$offset = _ref5.offset,
			offset = _ref5$offset === undefined ? 0 : _ref5$offset,
			_ref5$padding = _ref5.padding,
			padding = _ref5$padding === undefined ? 0 : _ref5$padding,
			_ref5$setWidth = _ref5.setWidth,
			setWidth = _ref5$setWidth === undefined ? false : _ref5$setWidth;

		var targets = new Map();

		function getTarget() {
			var _iteratorNormalCompletion8 = true;
			var _didIteratorError8 = false;
			var _iteratorError8 = undefined;

			try {
				for (var _iterator8 = targets[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
					var _step8$value = _slicedToArray(_step8.value, 2),
						category = _step8$value[0],
						targetMaps = _step8$value[1];

					if (!targetMaps) {
						continue;
					}

					var _iteratorNormalCompletion9 = true;
					var _didIteratorError9 = false;
					var _iteratorError9 = undefined;

					try {
						for (var _iterator9 = targetMaps[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
							var _step9$value = _slicedToArray(_step9.value, 2),
								target = _step9$value[0],
								isActive = _step9$value[1];

							if (isActive) {
								return target;
							}
						}
					} catch (err) {
						_didIteratorError9 = true;
						_iteratorError9 = err;
					} finally {
						try {
							if (!_iteratorNormalCompletion9 && _iterator9.return) {
								_iterator9.return();
							}
						} finally {
							if (_didIteratorError9) {
								throw _iteratorError9;
							}
						}
					}
				}
			} catch (err) {
				_didIteratorError8 = true;
				_iteratorError8 = err;
			} finally {
				try {
					if (!_iteratorNormalCompletion8 && _iterator8.return) {
						_iterator8.return();
					}
				} finally {
					if (_didIteratorError8) {
						throw _iteratorError8;
					}
				}
			}
		}

		var drawUnderline = debounce(function () {
			var target = getTarget();

			if (!target && !activeClassname) {
				return;
			}

			if (activeClassname) {
				if (!target) {
					underline.classList.remove(activeClassname);
					return;
				}

				underline.classList.add(activeClassname);
			}

			var _ref6 = [target.offsetLeft, target.offsetWidth],
				left = _ref6[0],
				width = _ref6[1];


			if (setRight) {
				left += padding - offset;
				underline.style.left = left + 'px';

				var right = target.offsetParent.offsetWidth - (left + offset) - width + padding * 2 - offset + (target.parentNode.lastElementChild === target ? -1 * padding : 0);

				underline.style.right = right + 'px';
			} else if (setWidth) {
				left += padding - offset;
				underline.style.left = left + 'px';
				underline.style.width = width + 'px';
			} else {
				left += width / 2;
				underline.style.left = left + 'px';
			}
		}, 25, { leading: false, trailing: true }); // Debounced so blur/mouseout don't trigger two rerenders if immediately switch to new underline target


		var setTargetState = function setTargetState(category, target, shouldUnderline) {
			if (!targets.has(category)) {
				targets.set(category, new Map());
			}

			if (!target) {
				return;
			}

			// Clear others in same category
			if (shouldUnderline) {
				var _iteratorNormalCompletion10 = true;
				var _didIteratorError10 = false;
				var _iteratorError10 = undefined;

				try {
					for (var _iterator10 = targets.get(category)[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {
						var _step10$value = _slicedToArray(_step10.value, 1),
							key = _step10$value[0];

						if (key === target) {
							continue;
						}

						targets.get(category).set(key, false);
					}
				} catch (err) {
					_didIteratorError10 = true;
					_iteratorError10 = err;
				} finally {
					try {
						if (!_iteratorNormalCompletion10 && _iterator10.return) {
							_iterator10.return();
						}
					} finally {
						if (_didIteratorError10) {
							throw _iteratorError10;
						}
					}
				}
			}

			targets.get(category).set(target, shouldUnderline);

			drawUnderline();
		};

		return {
			setTargetState: setTargetState
		};
	}

	function executeOptionalCallback(cb) {
		if (cb && typeof cb === 'function') {
			for (var _len = arguments.length, data = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
				data[_key - 1] = arguments[_key];
			}

			return cb.apply(undefined, data);
		}
	}

// From https://github.com/w3c/aria-practices/blob/master/examples/js/utils.js
	var isFocusable = function isFocusable(element) {
		if (element.tabIndex > 0 || element.tabIndex === 0 && element.getAttribute('tabIndex') !== null) {
			return true;
		}

		if (element.disabled) {
			return false;
		}

		switch (element.nodeName) {
			case 'A':
				return !!element.href && element.rel !== 'ignore';
			case 'INPUT':
				return element.type !== 'hidden' && element.type !== 'file';
			case 'BUTTON':
			case 'SELECT':
			case 'TEXTAREA':
				return true;
			default:
				return false;
		}
	};

	/**
	 * Find and returns all children of an element that can receive focus e.g. inputs, buttons, links, etc.
	 * @param {HTMLElement}     element   Root element to start recursively searching from
	 * @returns {[HTMLElement]}           Flattened array of children of element that can receive focus; ordered as in dom focus order
	 */
	var getFocusableChildren = function getFocusableChildren(element) {
		var checkChild = function checkChild(output, toProcess) {
			if (!toProcess.length) {
				return output;
			}

			var node = toProcess.shift();

			if (isFocusable(node)) {
				output.push(node);
			} else if (node.hasChildNodes()) {
				toProcess = [].concat(_toConsumableArray(node.childNodes)).concat(toProcess);
			}

			return checkChild(output, toProcess);
		};

		return checkChild([], [element]);
	};

	/**
	 * Check if element has any focusable children
	 * @param {HTMLElement}     element     Root element to check if any children are focusable from
	 * @returns {boolean}                   Return true iff any children of element are focusable
	 */
	var anyFocusableChildren = function anyFocusableChildren(element) {
		var checkChild = function checkChild(toProcess) {
			if (!toProcess.length) {
				return false;
			}

			var node = toProcess.shift();

			if (isFocusable(node)) {
				return true;
			}

			if (node.hasChildNodes()) {
				toProcess = [].concat(_toConsumableArray(node.childNodes)).concat(toProcess);
			}

			return checkChild(toProcess);
		};

		return checkChild([element]);
	};

// Fixed mod to work with negative numbers in the expected way
	function mod(a, b) {
		var val = a % b;

		while (val < 0) {
			val += b;
		}

		return val;
	}

	function initializeAriaTabs(_ref7) {
		var tabPanelMapping = _ref7.tabPanelMapping,
			switchToTab = _ref7.switchToTab,
			wrapper = _ref7.wrapper,
			onFocus = _ref7.onFocus,
			onBlur = _ref7.onBlur;

		var tabs = [].concat(_toConsumableArray(tabPanelMapping.keys()));
		var panels = [].concat(_toConsumableArray(tabPanelMapping.values()));

		var tabIsFocused = false;

		var blur = function blur() {
			tabIsFocused = false;
			executeOptionalCallback(onBlur);
		};
		var activateTab = function activateTab(tab) {
			var shouldFocus = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
			return function () {
				switchToTab(tab);

				tabs.forEach(function (t) {
					t.setAttribute('tabindex', '-1');
					t.setAttribute('aria-selected', 'false');
				});

				tab.setAttribute('tabindex', '0');
				tab.setAttribute('aria-selected', 'true');
				if (shouldFocus) {
					tabIsFocused = true;
					tab.focus();
					executeOptionalCallback(onFocus);
				} else {
					tabIsFocused = false;
					tab.blur();
					executeOptionalCallback(onBlur);
				}

				panels.forEach(function (p) {
					return p.removeAttribute('tabindex');
				});

				var panel = tabPanelMapping.get(tab);

				// Should focus panel itself if no focusable children
				if (!anyFocusableChildren(panel)) {
					panel.setAttribute('tabindex', '0');
				}
			};
		};

		var _iteratorNormalCompletion11 = true;
		var _didIteratorError11 = false;
		var _iteratorError11 = undefined;

		try {
			var _loop2 = function _loop2() {
				var tab = _step11.value;

				var timeout = void 0;

				tab.addEventListener('blur', blur);
				tab.addEventListener('mousedown', function () {
					return timeout = setTimeout(function () {
						activateTab(tab, false)();
						timeout = null;
					}, 25);
				});
				tab.addEventListener('focus', function (e) {
					if (timeout) {
						e.preventDefault();
						return;
					}

					activateTab(tab, true)();
				});
			};

			for (var _iterator11 = tabs[Symbol.iterator](), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {
				_loop2();
			}
		} catch (err) {
			_didIteratorError11 = true;
			_iteratorError11 = err;
		} finally {
			try {
				if (!_iteratorNormalCompletion11 && _iterator11.return) {
					_iterator11.return();
				}
			} finally {
				if (_didIteratorError11) {
					throw _iteratorError11;
				}
			}
		}

		var currentTabIndex = function currentTabIndex() {
			return tabs.findIndex(function (x) {
				return x === document.activeElement;
			});
		};
		var nextTab = function nextTab() {
			return tabs[mod(currentTabIndex() + 1, tabs.length)];
		};
		var prevTab = function prevTab() {
			return tabs[mod(currentTabIndex() - 1, tabs.length)];
		};

		var keyHandlers = {
			ArrowLeft: function ArrowLeft() {
				return activateTab(prevTab(), true)();
			},
			ArrowRight: function ArrowRight() {
				return activateTab(nextTab(), true)();
			},
			Home: function Home() {
				return activateTab(tabs[0], true)();
			},
			End: function End() {
				return activateTab(tabs[tabs.length - 1], true)();
			}
		};

		document.addEventListener('keydown', function (e) {
			if (!tabIsFocused) {
				return;
			}

			if (!Object.keys(keyHandlers).includes(e.code)) {
				return;
			}

			e.preventDefault();

			return keyHandlers[e.code]();
		});
	}

	var isTransitioning = false;

	function openMobileNav() {
		var sidebar = document.querySelector('.v3-mobile-sidebar');
		var menu = document.querySelector('.v3-mobile-nav__inner');
		var backdrop = document.querySelector('.v3-mobile-sidebar__backdrop');

		if (!sidebar || !menu || !backdrop || isTransitioning) {
			return;
		}

		// Reset nested inner navs on open
		[].concat(_toConsumableArray(document.querySelectorAll('.v3-mobile-nav__wrapper'))).forEach(function (x) {
			x.className = x.className.replace(/v3-mobile-nav__wrapper--active/g, '');

			if (x.className.includes('--main')) {
				x.className += ' v3-mobile-nav__wrapper--active';
			}
		});

		isTransitioning = true;

		sidebar.style.visibility = 'visible';

		sidebar.getBoundingClientRect(); // relayout

		menu.style.marginRight = '0';
		backdrop.style.opacity = '0.8';

		setTimeout(function () {
			isTransitioning = false;
			document.body.style.height = '100%';
			document.body.style.overflow = 'hidden';
		}, 375);
	}

	function closeMobileNav() {
		var sidebar = document.querySelector('.v3-mobile-sidebar');
		var menu = document.querySelector('.v3-mobile-nav__inner');
		var backdrop = document.querySelector('.v3-mobile-sidebar__backdrop');

		if (!sidebar || !menu || !backdrop || isTransitioning) {
			return;
		}

		isTransitioning = true;

		document.body.style.height = '';
		document.body.style.overflow = '';
		backdrop.style.opacity = '0';
		menu.style.marginRight = '-' + menu.clientWidth + 'px';

		setTimeout(function () {
			sidebar.style.visibility = 'hidden';
			isTransitioning = false;
		}, 375);
	}

	function transitionInnerNav(next) {
		var firstRan = undefined;
		var transitioning = false;

		var current = document.querySelector('.v3-mobile-nav__wrapper--active');

		if (!current || !next) {
			return;
		}

		var targetLevel = parseInt(next.dataset.mobileNavLevel);
		var currentLevel = parseInt(current.dataset.mobileNavLevel);

		var direction = targetLevel > currentLevel ? 'left' : 'right';

		var animate = function animate(timestamp) {
			if (firstRan && timestamp - firstRan >= 375) {
				next.className = next.className.replace(/v3-mobile-nav__wrapper--entering-(left|right)/g, '').trim() + ' v3-mobile-nav__wrapper--active';
				current.className = current.className.replace(/v3-mobile-nav__wrapper--exiting-(left|right)/g, '').trim();
				return;
			}

			if (!firstRan) {
				next.className += ' v3-mobile-nav__wrapper--in-' + direction;
				current.className = current.className.replace(/v3-mobile-nav__wrapper--active/g, '').trim() + (' v3-mobile-nav__wrapper--out-' + direction);
				firstRan = timestamp;
				next.getBoundingClientRect(); // force dom update
			}

			if (!transitioning) {
				next.className = next.className.replace(/v3-mobile-nav__wrapper--in-/g, 'v3-mobile-nav__wrapper--entering-').trim();
				current.className = current.className.replace(/v3-mobile-nav__wrapper--out-/g, 'v3-mobile-nav__wrapper--exiting-').trim();
				transitioning = true;
			}

			return window.requestAnimationFrame(animate);
		};

		return window.requestAnimationFrame(animate);
	}

	function registerMobileNavLinks() {
		[].concat(_toConsumableArray(document.querySelectorAll('.v3-mobile-nav__item *[data-mobile-nav-target]'))).forEach(function (button) {
			var target = document.querySelector('.v3-mobile-nav__wrapper[data-mobile-nav-tag="' + button.dataset.mobileNavTarget + '"]');

			if (!target) {
				return;
			}

			button.addEventListener('click', function (e) {
				e.preventDefault();

				transitionInnerNav(target);
			});
		});

		[].concat(_toConsumableArray(document.querySelectorAll('.v3-mobile-nav__item .v3-mobile-nav__prev'))).forEach(function (button) {
			var wrapper = button.closest('.v3-mobile-nav__wrapper');

			if (!wrapper) {
				return;
			}

			var tag = wrapper.dataset.mobileNavTag;

			var targetButton = document.querySelector('.v3-mobile-nav__item *[data-mobile-nav-target="' + tag + '"]');

			if (!targetButton) {
				return;
			}

			var targetWrapper = targetButton.closest('.v3-mobile-nav__wrapper');

			if (!targetWrapper) {
				return;
			}

			button.addEventListener('click', function () {
				return transitionInnerNav(targetWrapper);
			});
		});
	}

	function initializeMobileNav() {
		var button = document.querySelector('.v3-nav--mobile .v3-page-header__menu');

		if (!button) {
			return;
		}

		button.addEventListener('click', openMobileNav);

		var backdrop = document.querySelector('.v3-mobile-sidebar__backdrop');

		if (backdrop) {
			backdrop.addEventListener('click', closeMobileNav);
		}

		[].concat(_toConsumableArray(document.querySelectorAll('.v3-mobile-nav__close'))).forEach(function (button) {
			button.addEventListener('click', closeMobileNav);
		});

		var menu = document.querySelector('.v3-mobile-nav__inner');

		if (menu) {
			menu.style.marginRight = '-' + menu.clientWidth + 'px';

			window.addEventListener('resize', debounce(function () {
				return menu.style.marginRight = '-' + menu.clientWidth + 'px';
			}, 10, { leading: true, trailing: true }));
		}

		registerMobileNavLinks();
	}

	function continueIfFailed(cb) {
		try {
			cb();
		} catch (e) {
			console.error(e);
		}
	}

	function runAll() {
		for (var _len2 = arguments.length, cbs = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
			cbs[_key2] = arguments[_key2];
		}

		return cbs.forEach(continueIfFailed);
	}

	function initializeNavs() {
		runAll(initializeMobileNav, initializeMainNav);
	}

	initializeNavs();
	// ----------------------------------------------------------------------
	// Do not edit the above code. see notes at top of the wrapping function.
})();
