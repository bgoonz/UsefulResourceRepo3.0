[
  {
    "label": "os",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "os",
    "description": "os",
    "detail": "os",
    "documentation": {}
  },
  {
    "label": "system",
    "importPath": "os",
    "description": "os",
    "isExtraImport": true,
    "detail": "os",
    "documentation": {}
  },
  {
    "label": "system",
    "importPath": "os",
    "description": "os",
    "isExtraImport": true,
    "detail": "os",
    "documentation": {}
  },
  {
    "label": "path",
    "importPath": "os",
    "description": "os",
    "isExtraImport": true,
    "detail": "os",
    "documentation": {}
  },
  {
    "label": "system",
    "importPath": "os",
    "description": "os",
    "isExtraImport": true,
    "detail": "os",
    "documentation": {}
  },
  {
    "label": "system",
    "importPath": "os",
    "description": "os",
    "isExtraImport": true,
    "detail": "os",
    "documentation": {}
  },
  {
    "label": "path",
    "importPath": "os",
    "description": "os",
    "isExtraImport": true,
    "detail": "os",
    "documentation": {}
  },
  {
    "label": "system",
    "importPath": "os",
    "description": "os",
    "isExtraImport": true,
    "detail": "os",
    "documentation": {}
  },
  {
    "label": "path",
    "importPath": "os",
    "description": "os",
    "isExtraImport": true,
    "detail": "os",
    "documentation": {}
  },
  {
    "label": "system",
    "importPath": "os",
    "description": "os",
    "isExtraImport": true,
    "detail": "os",
    "documentation": {}
  },
  {
    "label": "path",
    "importPath": "os",
    "description": "os",
    "isExtraImport": true,
    "detail": "os",
    "documentation": {}
  },
  {
    "label": "time",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "time",
    "description": "time",
    "detail": "time",
    "documentation": {}
  },
  {
    "label": "sleep",
    "importPath": "time",
    "description": "time",
    "isExtraImport": true,
    "detail": "time",
    "documentation": {}
  },
  {
    "label": "sleep",
    "importPath": "time",
    "description": "time",
    "isExtraImport": true,
    "detail": "time",
    "documentation": {}
  },
  {
    "label": "gmtime",
    "importPath": "time",
    "description": "time",
    "isExtraImport": true,
    "detail": "time",
    "documentation": {}
  },
  {
    "label": "strftime",
    "importPath": "time",
    "description": "time",
    "isExtraImport": true,
    "detail": "time",
    "documentation": {}
  },
  {
    "label": "strftime",
    "importPath": "time",
    "description": "time",
    "isExtraImport": true,
    "detail": "time",
    "documentation": {}
  },
  {
    "label": "sleep",
    "importPath": "time",
    "description": "time",
    "isExtraImport": true,
    "detail": "time",
    "documentation": {}
  },
  {
    "label": "sleep",
    "importPath": "time",
    "description": "time",
    "isExtraImport": true,
    "detail": "time",
    "documentation": {}
  },
  {
    "label": "time",
    "importPath": "time",
    "description": "time",
    "isExtraImport": true,
    "detail": "time",
    "documentation": {}
  },
  {
    "label": "sleep",
    "importPath": "time",
    "description": "time",
    "isExtraImport": true,
    "detail": "time",
    "documentation": {}
  },
  {
    "label": "sleep",
    "importPath": "time",
    "description": "time",
    "isExtraImport": true,
    "detail": "time",
    "documentation": {}
  },
  {
    "label": "time",
    "importPath": "time",
    "description": "time",
    "isExtraImport": true,
    "detail": "time",
    "documentation": {}
  },
  {
    "label": "gmtime",
    "importPath": "time",
    "description": "time",
    "isExtraImport": true,
    "detail": "time",
    "documentation": {}
  },
  {
    "label": "strftime",
    "importPath": "time",
    "description": "time",
    "isExtraImport": true,
    "detail": "time",
    "documentation": {}
  },
  {
    "label": "strftime",
    "importPath": "time",
    "description": "time",
    "isExtraImport": true,
    "detail": "time",
    "documentation": {}
  },
  {
    "label": "sleep",
    "importPath": "time",
    "description": "time",
    "isExtraImport": true,
    "detail": "time",
    "documentation": {}
  },
  {
    "label": "sleep",
    "importPath": "time",
    "description": "time",
    "isExtraImport": true,
    "detail": "time",
    "documentation": {}
  },
  {
    "label": "time",
    "importPath": "time",
    "description": "time",
    "isExtraImport": true,
    "detail": "time",
    "documentation": {}
  },
  {
    "label": "sleep",
    "importPath": "time",
    "description": "time",
    "isExtraImport": true,
    "detail": "time",
    "documentation": {}
  },
  {
    "label": "sleep",
    "importPath": "time",
    "description": "time",
    "isExtraImport": true,
    "detail": "time",
    "documentation": {}
  },
  {
    "label": "time",
    "importPath": "time",
    "description": "time",
    "isExtraImport": true,
    "detail": "time",
    "documentation": {}
  },
  {
    "label": "curses",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "curses",
    "description": "curses",
    "detail": "curses",
    "documentation": {}
  },
  {
    "label": "sys",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "sys",
    "description": "sys",
    "detail": "sys",
    "documentation": {}
  },
  {
    "label": "exit",
    "importPath": "sys",
    "description": "sys",
    "isExtraImport": true,
    "detail": "sys",
    "documentation": {}
  },
  {
    "label": "argv",
    "importPath": "sys",
    "description": "sys",
    "isExtraImport": true,
    "detail": "sys",
    "documentation": {}
  },
  {
    "label": "argv",
    "importPath": "sys",
    "description": "sys",
    "isExtraImport": true,
    "detail": "sys",
    "documentation": {}
  },
  {
    "label": "exit",
    "importPath": "sys",
    "description": "sys",
    "isExtraImport": true,
    "detail": "sys",
    "documentation": {}
  },
  {
    "label": "argv",
    "importPath": "sys",
    "description": "sys",
    "isExtraImport": true,
    "detail": "sys",
    "documentation": {}
  },
  {
    "label": "exit",
    "importPath": "sys",
    "description": "sys",
    "isExtraImport": true,
    "detail": "sys",
    "documentation": {}
  },
  {
    "label": "argv",
    "importPath": "sys",
    "description": "sys",
    "isExtraImport": true,
    "detail": "sys",
    "documentation": {}
  },
  {
    "label": "exit",
    "importPath": "sys",
    "description": "sys",
    "isExtraImport": true,
    "detail": "sys",
    "documentation": {}
  },
  {
    "label": "argv",
    "importPath": "sys",
    "description": "sys",
    "isExtraImport": true,
    "detail": "sys",
    "documentation": {}
  },
  {
    "label": "exit",
    "importPath": "sys",
    "description": "sys",
    "isExtraImport": true,
    "detail": "sys",
    "documentation": {}
  },
  {
    "label": "argv",
    "importPath": "sys",
    "description": "sys",
    "isExtraImport": true,
    "detail": "sys",
    "documentation": {}
  },
  {
    "label": "exit",
    "importPath": "sys",
    "description": "sys",
    "isExtraImport": true,
    "detail": "sys",
    "documentation": {}
  },
  {
    "label": "argv",
    "importPath": "sys",
    "description": "sys",
    "isExtraImport": true,
    "detail": "sys",
    "documentation": {}
  },
  {
    "label": "exit",
    "importPath": "sys",
    "description": "sys",
    "isExtraImport": true,
    "detail": "sys",
    "documentation": {}
  },
  {
    "label": "argv",
    "importPath": "sys",
    "description": "sys",
    "isExtraImport": true,
    "detail": "sys",
    "documentation": {}
  },
  {
    "label": "argv",
    "importPath": "sys",
    "description": "sys",
    "isExtraImport": true,
    "detail": "sys",
    "documentation": {}
  },
  {
    "label": "argv",
    "importPath": "sys",
    "description": "sys",
    "isExtraImport": true,
    "detail": "sys",
    "documentation": {}
  },
  {
    "label": "exit",
    "importPath": "sys",
    "description": "sys",
    "isExtraImport": true,
    "detail": "sys",
    "documentation": {}
  },
  {
    "label": "argv",
    "importPath": "sys",
    "description": "sys",
    "isExtraImport": true,
    "detail": "sys",
    "documentation": {}
  },
  {
    "label": "argv",
    "importPath": "sys",
    "description": "sys",
    "isExtraImport": true,
    "detail": "sys",
    "documentation": {}
  },
  {
    "label": "argv",
    "importPath": "sys",
    "description": "sys",
    "isExtraImport": true,
    "detail": "sys",
    "documentation": {}
  },
  {
    "label": "argv",
    "importPath": "sys",
    "description": "sys",
    "isExtraImport": true,
    "detail": "sys",
    "documentation": {}
  },
  {
    "label": "exit",
    "importPath": "sys",
    "description": "sys",
    "isExtraImport": true,
    "detail": "sys",
    "documentation": {}
  },
  {
    "label": "argv",
    "importPath": "sys",
    "description": "sys",
    "isExtraImport": true,
    "detail": "sys",
    "documentation": {}
  },
  {
    "label": "exit",
    "importPath": "sys",
    "description": "sys",
    "isExtraImport": true,
    "detail": "sys",
    "documentation": {}
  },
  {
    "label": "argv",
    "importPath": "sys",
    "description": "sys",
    "isExtraImport": true,
    "detail": "sys",
    "documentation": {}
  },
  {
    "label": "exit",
    "importPath": "sys",
    "description": "sys",
    "isExtraImport": true,
    "detail": "sys",
    "documentation": {}
  },
  {
    "label": "argv",
    "importPath": "sys",
    "description": "sys",
    "isExtraImport": true,
    "detail": "sys",
    "documentation": {}
  },
  {
    "label": "argv",
    "importPath": "sys",
    "description": "sys",
    "isExtraImport": true,
    "detail": "sys",
    "documentation": {}
  },
  {
    "label": "exit",
    "importPath": "sys",
    "description": "sys",
    "isExtraImport": true,
    "detail": "sys",
    "documentation": {}
  },
  {
    "label": "argv",
    "importPath": "sys",
    "description": "sys",
    "isExtraImport": true,
    "detail": "sys",
    "documentation": {}
  },
  {
    "label": "exit",
    "importPath": "sys",
    "description": "sys",
    "isExtraImport": true,
    "detail": "sys",
    "documentation": {}
  },
  {
    "label": "argv",
    "importPath": "sys",
    "description": "sys",
    "isExtraImport": true,
    "detail": "sys",
    "documentation": {}
  },
  {
    "label": "exit",
    "importPath": "sys",
    "description": "sys",
    "isExtraImport": true,
    "detail": "sys",
    "documentation": {}
  },
  {
    "label": "argv",
    "importPath": "sys",
    "description": "sys",
    "isExtraImport": true,
    "detail": "sys",
    "documentation": {}
  },
  {
    "label": "argv",
    "importPath": "sys",
    "description": "sys",
    "isExtraImport": true,
    "detail": "sys",
    "documentation": {}
  },
  {
    "label": "exit",
    "importPath": "sys",
    "description": "sys",
    "isExtraImport": true,
    "detail": "sys",
    "documentation": {}
  },
  {
    "label": "argv",
    "importPath": "sys",
    "description": "sys",
    "isExtraImport": true,
    "detail": "sys",
    "documentation": {}
  },
  {
    "label": "argv",
    "importPath": "sys",
    "description": "sys",
    "isExtraImport": true,
    "detail": "sys",
    "documentation": {}
  },
  {
    "label": "exit",
    "importPath": "sys",
    "description": "sys",
    "isExtraImport": true,
    "detail": "sys",
    "documentation": {}
  },
  {
    "label": "tkinter",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "tkinter",
    "description": "tkinter",
    "detail": "tkinter",
    "documentation": {}
  },
  {
    "label": "Tk",
    "importPath": "tkinter",
    "description": "tkinter",
    "isExtraImport": true,
    "detail": "tkinter",
    "documentation": {}
  },
  {
    "label": "Canvas",
    "importPath": "tkinter",
    "description": "tkinter",
    "isExtraImport": true,
    "detail": "tkinter",
    "documentation": {}
  },
  {
    "label": "*",
    "importPath": "tkinter",
    "description": "tkinter",
    "isExtraImport": true,
    "detail": "tkinter",
    "documentation": {}
  },
  {
    "label": "*",
    "importPath": "tkinter",
    "description": "tkinter",
    "isExtraImport": true,
    "detail": "tkinter",
    "documentation": {}
  },
  {
    "label": "Tk",
    "importPath": "tkinter",
    "description": "tkinter",
    "isExtraImport": true,
    "detail": "tkinter",
    "documentation": {}
  },
  {
    "label": "Tk",
    "importPath": "tkinter",
    "description": "tkinter",
    "isExtraImport": true,
    "detail": "tkinter",
    "documentation": {}
  },
  {
    "label": "Canvas",
    "importPath": "tkinter",
    "description": "tkinter",
    "isExtraImport": true,
    "detail": "tkinter",
    "documentation": {}
  },
  {
    "label": "*",
    "importPath": "tkinter",
    "description": "tkinter",
    "isExtraImport": true,
    "detail": "tkinter",
    "documentation": {}
  },
  {
    "label": "Tk",
    "importPath": "tkinter",
    "description": "tkinter",
    "isExtraImport": true,
    "detail": "tkinter",
    "documentation": {}
  },
  {
    "label": "random",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "random",
    "description": "random",
    "detail": "random",
    "documentation": {}
  },
  {
    "label": "choice",
    "importPath": "random",
    "description": "random",
    "isExtraImport": true,
    "detail": "random",
    "documentation": {}
  },
  {
    "label": "randint",
    "importPath": "random",
    "description": "random",
    "isExtraImport": true,
    "detail": "random",
    "documentation": {}
  },
  {
    "label": "randint",
    "importPath": "random",
    "description": "random",
    "isExtraImport": true,
    "detail": "random",
    "documentation": {}
  },
  {
    "label": "randint",
    "importPath": "random",
    "description": "random",
    "isExtraImport": true,
    "detail": "random",
    "documentation": {}
  },
  {
    "label": "randint",
    "importPath": "random",
    "description": "random",
    "isExtraImport": true,
    "detail": "random",
    "documentation": {}
  },
  {
    "label": "randint",
    "importPath": "random",
    "description": "random",
    "isExtraImport": true,
    "detail": "random",
    "documentation": {}
  },
  {
    "label": "randint",
    "importPath": "random",
    "description": "random",
    "isExtraImport": true,
    "detail": "random",
    "documentation": {}
  },
  {
    "label": "randint",
    "importPath": "random",
    "description": "random",
    "isExtraImport": true,
    "detail": "random",
    "documentation": {}
  },
  {
    "label": "randint",
    "importPath": "random",
    "description": "random",
    "isExtraImport": true,
    "detail": "random",
    "documentation": {}
  },
  {
    "label": "randint",
    "importPath": "random",
    "description": "random",
    "isExtraImport": true,
    "detail": "random",
    "documentation": {}
  },
  {
    "label": "randint",
    "importPath": "random",
    "description": "random",
    "isExtraImport": true,
    "detail": "random",
    "documentation": {}
  },
  {
    "label": "choice",
    "importPath": "random",
    "description": "random",
    "isExtraImport": true,
    "detail": "random",
    "documentation": {}
  },
  {
    "label": "randint",
    "importPath": "random",
    "description": "random",
    "isExtraImport": true,
    "detail": "random",
    "documentation": {}
  },
  {
    "label": "randint",
    "importPath": "random",
    "description": "random",
    "isExtraImport": true,
    "detail": "random",
    "documentation": {}
  },
  {
    "label": "randint",
    "importPath": "random",
    "description": "random",
    "isExtraImport": true,
    "detail": "random",
    "documentation": {}
  },
  {
    "label": "randint",
    "importPath": "random",
    "description": "random",
    "isExtraImport": true,
    "detail": "random",
    "documentation": {}
  },
  {
    "label": "randint",
    "importPath": "random",
    "description": "random",
    "isExtraImport": true,
    "detail": "random",
    "documentation": {}
  },
  {
    "label": "choice",
    "importPath": "random",
    "description": "random",
    "isExtraImport": true,
    "detail": "random",
    "documentation": {}
  },
  {
    "label": "choice",
    "importPath": "random",
    "description": "random",
    "isExtraImport": true,
    "detail": "random",
    "documentation": {}
  },
  {
    "label": "randint",
    "importPath": "random",
    "description": "random",
    "isExtraImport": true,
    "detail": "random",
    "documentation": {}
  },
  {
    "label": "randint",
    "importPath": "random",
    "description": "random",
    "isExtraImport": true,
    "detail": "random",
    "documentation": {}
  },
  {
    "label": "randint",
    "importPath": "random",
    "description": "random",
    "isExtraImport": true,
    "detail": "random",
    "documentation": {}
  },
  {
    "label": "randint",
    "importPath": "random",
    "description": "random",
    "isExtraImport": true,
    "detail": "random",
    "documentation": {}
  },
  {
    "label": "randint",
    "importPath": "random",
    "description": "random",
    "isExtraImport": true,
    "detail": "random",
    "documentation": {}
  },
  {
    "label": "randint",
    "importPath": "random",
    "description": "random",
    "isExtraImport": true,
    "detail": "random",
    "documentation": {}
  },
  {
    "label": "randint",
    "importPath": "random",
    "description": "random",
    "isExtraImport": true,
    "detail": "random",
    "documentation": {}
  },
  {
    "label": "randint",
    "importPath": "random",
    "description": "random",
    "isExtraImport": true,
    "detail": "random",
    "documentation": {}
  },
  {
    "label": "randint",
    "importPath": "random",
    "description": "random",
    "isExtraImport": true,
    "detail": "random",
    "documentation": {}
  },
  {
    "label": "randint",
    "importPath": "random",
    "description": "random",
    "isExtraImport": true,
    "detail": "random",
    "documentation": {}
  },
  {
    "label": "randint",
    "importPath": "random",
    "description": "random",
    "isExtraImport": true,
    "detail": "random",
    "documentation": {}
  },
  {
    "label": "randint",
    "importPath": "random",
    "description": "random",
    "isExtraImport": true,
    "detail": "random",
    "documentation": {}
  },
  {
    "label": "randint",
    "importPath": "random",
    "description": "random",
    "isExtraImport": true,
    "detail": "random",
    "documentation": {}
  },
  {
    "label": "randint",
    "importPath": "random",
    "description": "random",
    "isExtraImport": true,
    "detail": "random",
    "documentation": {}
  },
  {
    "label": "randint",
    "importPath": "random",
    "description": "random",
    "isExtraImport": true,
    "detail": "random",
    "documentation": {}
  },
  {
    "label": "argparse",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "argparse",
    "description": "argparse",
    "detail": "argparse",
    "documentation": {}
  },
  {
    "label": "datetime",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "datetime",
    "description": "datetime",
    "detail": "datetime",
    "documentation": {}
  },
  {
    "label": "datetime",
    "importPath": "datetime",
    "description": "datetime",
    "isExtraImport": true,
    "detail": "datetime",
    "documentation": {}
  },
  {
    "label": "timedelta",
    "importPath": "datetime",
    "description": "datetime",
    "isExtraImport": true,
    "detail": "datetime",
    "documentation": {}
  },
  {
    "label": "date",
    "importPath": "datetime",
    "description": "datetime",
    "isExtraImport": true,
    "detail": "datetime",
    "documentation": {}
  },
  {
    "label": "timedelta",
    "importPath": "datetime",
    "description": "datetime",
    "isExtraImport": true,
    "detail": "datetime",
    "documentation": {}
  },
  {
    "label": "datetime",
    "importPath": "datetime",
    "description": "datetime",
    "isExtraImport": true,
    "detail": "datetime",
    "documentation": {}
  },
  {
    "label": "datetime",
    "importPath": "datetime",
    "description": "datetime",
    "isExtraImport": true,
    "detail": "datetime",
    "documentation": {}
  },
  {
    "label": "date",
    "importPath": "datetime",
    "description": "datetime",
    "isExtraImport": true,
    "detail": "datetime",
    "documentation": {}
  },
  {
    "label": "date",
    "importPath": "datetime",
    "description": "datetime",
    "isExtraImport": true,
    "detail": "datetime",
    "documentation": {}
  },
  {
    "label": "date",
    "importPath": "datetime",
    "description": "datetime",
    "isExtraImport": true,
    "detail": "datetime",
    "documentation": {}
  },
  {
    "label": "timedelta",
    "importPath": "datetime",
    "description": "datetime",
    "isExtraImport": true,
    "detail": "datetime",
    "documentation": {}
  },
  {
    "label": "datetime",
    "importPath": "datetime",
    "description": "datetime",
    "isExtraImport": true,
    "detail": "datetime",
    "documentation": {}
  },
  {
    "label": "datetime",
    "importPath": "datetime",
    "description": "datetime",
    "isExtraImport": true,
    "detail": "datetime",
    "documentation": {}
  },
  {
    "label": "date",
    "importPath": "datetime",
    "description": "datetime",
    "isExtraImport": true,
    "detail": "datetime",
    "documentation": {}
  },
  {
    "label": "date",
    "importPath": "datetime",
    "description": "datetime",
    "isExtraImport": true,
    "detail": "datetime",
    "documentation": {}
  },
  {
    "label": "datetime",
    "importPath": "datetime",
    "description": "datetime",
    "isExtraImport": true,
    "detail": "datetime",
    "documentation": {}
  },
  {
    "label": "date",
    "importPath": "datetime",
    "description": "datetime",
    "isExtraImport": true,
    "detail": "datetime",
    "documentation": {}
  },
  {
    "label": "datetime",
    "importPath": "datetime",
    "description": "datetime",
    "isExtraImport": true,
    "detail": "datetime",
    "documentation": {}
  },
  {
    "label": "datetime",
    "importPath": "datetime",
    "description": "datetime",
    "isExtraImport": true,
    "detail": "datetime",
    "documentation": {}
  },
  {
    "label": "timedelta",
    "importPath": "datetime",
    "description": "datetime",
    "isExtraImport": true,
    "detail": "datetime",
    "documentation": {}
  },
  {
    "label": "date",
    "importPath": "datetime",
    "description": "datetime",
    "isExtraImport": true,
    "detail": "datetime",
    "documentation": {}
  },
  {
    "label": "timedelta",
    "importPath": "datetime",
    "description": "datetime",
    "isExtraImport": true,
    "detail": "datetime",
    "documentation": {}
  },
  {
    "label": "datetime",
    "importPath": "datetime",
    "description": "datetime",
    "isExtraImport": true,
    "detail": "datetime",
    "documentation": {}
  },
  {
    "label": "datetime",
    "importPath": "datetime",
    "description": "datetime",
    "isExtraImport": true,
    "detail": "datetime",
    "documentation": {}
  },
  {
    "label": "date",
    "importPath": "datetime",
    "description": "datetime",
    "isExtraImport": true,
    "detail": "datetime",
    "documentation": {}
  },
  {
    "label": "date",
    "importPath": "datetime",
    "description": "datetime",
    "isExtraImport": true,
    "detail": "datetime",
    "documentation": {}
  },
  {
    "label": "timedelta",
    "importPath": "datetime",
    "description": "datetime",
    "isExtraImport": true,
    "detail": "datetime",
    "documentation": {}
  },
  {
    "label": "datetime",
    "importPath": "datetime",
    "description": "datetime",
    "isExtraImport": true,
    "detail": "datetime",
    "documentation": {}
  },
  {
    "label": "datetime",
    "importPath": "datetime",
    "description": "datetime",
    "isExtraImport": true,
    "detail": "datetime",
    "documentation": {}
  },
  {
    "label": "date",
    "importPath": "datetime",
    "description": "datetime",
    "isExtraImport": true,
    "detail": "datetime",
    "documentation": {}
  },
  {
    "label": "date",
    "importPath": "datetime",
    "description": "datetime",
    "isExtraImport": true,
    "detail": "datetime",
    "documentation": {}
  },
  {
    "label": "pathlib",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "pathlib",
    "description": "pathlib",
    "detail": "pathlib",
    "documentation": {}
  },
  {
    "label": "Path",
    "importPath": "pathlib",
    "description": "pathlib",
    "isExtraImport": true,
    "detail": "pathlib",
    "documentation": {}
  },
  {
    "label": "Path",
    "importPath": "pathlib",
    "description": "pathlib",
    "isExtraImport": true,
    "detail": "pathlib",
    "documentation": {}
  },
  {
    "label": "Path",
    "importPath": "pathlib",
    "description": "pathlib",
    "isExtraImport": true,
    "detail": "pathlib",
    "documentation": {}
  },
  {
    "label": "Path",
    "importPath": "pathlib",
    "description": "pathlib",
    "isExtraImport": true,
    "detail": "pathlib",
    "documentation": {}
  },
  {
    "label": "Path",
    "importPath": "pathlib",
    "description": "pathlib",
    "isExtraImport": true,
    "detail": "pathlib",
    "documentation": {}
  },
  {
    "label": "Path",
    "importPath": "pathlib",
    "description": "pathlib",
    "isExtraImport": true,
    "detail": "pathlib",
    "documentation": {}
  },
  {
    "label": "Path",
    "importPath": "pathlib",
    "description": "pathlib",
    "isExtraImport": true,
    "detail": "pathlib",
    "documentation": {}
  },
  {
    "label": "Path",
    "importPath": "pathlib",
    "description": "pathlib",
    "isExtraImport": true,
    "detail": "pathlib",
    "documentation": {}
  },
  {
    "label": "Path",
    "importPath": "pathlib",
    "description": "pathlib",
    "isExtraImport": true,
    "detail": "pathlib",
    "documentation": {}
  },
  {
    "label": "Path",
    "importPath": "pathlib",
    "description": "pathlib",
    "isExtraImport": true,
    "detail": "pathlib",
    "documentation": {}
  },
  {
    "label": "urllib.parse",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "urllib.parse",
    "description": "urllib.parse",
    "detail": "urllib.parse",
    "documentation": {}
  },
  {
    "label": "quote",
    "importPath": "urllib.parse",
    "description": "urllib.parse",
    "isExtraImport": true,
    "detail": "urllib.parse",
    "documentation": {}
  },
  {
    "label": "quote",
    "importPath": "urllib.parse",
    "description": "urllib.parse",
    "isExtraImport": true,
    "detail": "urllib.parse",
    "documentation": {}
  },
  {
    "label": "quote",
    "importPath": "urllib.parse",
    "description": "urllib.parse",
    "isExtraImport": true,
    "detail": "urllib.parse",
    "documentation": {}
  },
  {
    "label": "quote",
    "importPath": "urllib.parse",
    "description": "urllib.parse",
    "isExtraImport": true,
    "detail": "urllib.parse",
    "documentation": {}
  },
  {
    "label": "quote",
    "importPath": "urllib.parse",
    "description": "urllib.parse",
    "isExtraImport": true,
    "detail": "urllib.parse",
    "documentation": {}
  },
  {
    "label": "urlsplit",
    "importPath": "urllib.parse",
    "description": "urllib.parse",
    "isExtraImport": true,
    "detail": "urllib.parse",
    "documentation": {}
  },
  {
    "label": "urlparse",
    "importPath": "urllib.parse",
    "description": "urllib.parse",
    "isExtraImport": true,
    "detail": "urllib.parse",
    "documentation": {}
  },
  {
    "label": "quote",
    "importPath": "urllib.parse",
    "description": "urllib.parse",
    "isExtraImport": true,
    "detail": "urllib.parse",
    "documentation": {}
  },
  {
    "label": "urlsplit",
    "importPath": "urllib.parse",
    "description": "urllib.parse",
    "isExtraImport": true,
    "detail": "urllib.parse",
    "documentation": {}
  },
  {
    "label": "urlparse",
    "importPath": "urllib.parse",
    "description": "urllib.parse",
    "isExtraImport": true,
    "detail": "urllib.parse",
    "documentation": {}
  },
  {
    "label": "quote",
    "importPath": "urllib.parse",
    "description": "urllib.parse",
    "isExtraImport": true,
    "detail": "urllib.parse",
    "documentation": {}
  },
  {
    "label": "quote",
    "importPath": "urllib.parse",
    "description": "urllib.parse",
    "isExtraImport": true,
    "detail": "urllib.parse",
    "documentation": {}
  },
  {
    "label": "quote",
    "importPath": "urllib.parse",
    "description": "urllib.parse",
    "isExtraImport": true,
    "detail": "urllib.parse",
    "documentation": {}
  },
  {
    "label": "quote",
    "importPath": "urllib.parse",
    "description": "urllib.parse",
    "isExtraImport": true,
    "detail": "urllib.parse",
    "documentation": {}
  },
  {
    "label": "unittest",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "unittest",
    "description": "unittest",
    "detail": "unittest",
    "documentation": {}
  },
  {
    "label": "turtle",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "turtle",
    "description": "turtle",
    "detail": "turtle",
    "documentation": {}
  },
  {
    "label": "json",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "json",
    "description": "json",
    "detail": "json",
    "documentation": {}
  },
  {
    "label": "load",
    "importPath": "json",
    "description": "json",
    "isExtraImport": true,
    "detail": "json",
    "documentation": {}
  },
  {
    "label": "load",
    "importPath": "json",
    "description": "json",
    "isExtraImport": true,
    "detail": "json",
    "documentation": {}
  },
  {
    "label": "dump",
    "importPath": "json",
    "description": "json",
    "isExtraImport": true,
    "detail": "json",
    "documentation": {}
  },
  {
    "label": "load",
    "importPath": "json",
    "description": "json",
    "isExtraImport": true,
    "detail": "json",
    "documentation": {}
  },
  {
    "label": "dump",
    "importPath": "json",
    "description": "json",
    "isExtraImport": true,
    "detail": "json",
    "documentation": {}
  },
  {
    "label": "load",
    "importPath": "json",
    "description": "json",
    "isExtraImport": true,
    "detail": "json",
    "documentation": {}
  },
  {
    "label": "load",
    "importPath": "json",
    "description": "json",
    "isExtraImport": true,
    "detail": "json",
    "documentation": {}
  },
  {
    "label": "dump",
    "importPath": "json",
    "description": "json",
    "isExtraImport": true,
    "detail": "json",
    "documentation": {}
  },
  {
    "label": "load",
    "importPath": "json",
    "description": "json",
    "isExtraImport": true,
    "detail": "json",
    "documentation": {}
  },
  {
    "label": "dump",
    "importPath": "json",
    "description": "json",
    "isExtraImport": true,
    "detail": "json",
    "documentation": {}
  },
  {
    "label": "load",
    "importPath": "json",
    "description": "json",
    "isExtraImport": true,
    "detail": "json",
    "documentation": {}
  },
  {
    "label": "load",
    "importPath": "json",
    "description": "json",
    "isExtraImport": true,
    "detail": "json",
    "documentation": {}
  },
  {
    "label": "dump",
    "importPath": "json",
    "description": "json",
    "isExtraImport": true,
    "detail": "json",
    "documentation": {}
  },
  {
    "label": "load",
    "importPath": "json",
    "description": "json",
    "isExtraImport": true,
    "detail": "json",
    "documentation": {}
  },
  {
    "label": "dump",
    "importPath": "json",
    "description": "json",
    "isExtraImport": true,
    "detail": "json",
    "documentation": {}
  },
  {
    "label": "load",
    "importPath": "json",
    "description": "json",
    "isExtraImport": true,
    "detail": "json",
    "documentation": {}
  },
  {
    "label": "load",
    "importPath": "json",
    "description": "json",
    "isExtraImport": true,
    "detail": "json",
    "documentation": {}
  },
  {
    "label": "dump",
    "importPath": "json",
    "description": "json",
    "isExtraImport": true,
    "detail": "json",
    "documentation": {}
  },
  {
    "label": "load",
    "importPath": "json",
    "description": "json",
    "isExtraImport": true,
    "detail": "json",
    "documentation": {}
  },
  {
    "label": "dump",
    "importPath": "json",
    "description": "json",
    "isExtraImport": true,
    "detail": "json",
    "documentation": {}
  },
  {
    "label": "requests",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "requests",
    "description": "requests",
    "detail": "requests",
    "documentation": {}
  },
  {
    "label": "unidecode",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "unidecode",
    "description": "unidecode",
    "detail": "unidecode",
    "documentation": {}
  },
  {
    "label": "Flask",
    "importPath": "flask",
    "description": "flask",
    "isExtraImport": true,
    "detail": "flask",
    "documentation": {}
  },
  {
    "label": "Flask",
    "importPath": "flask",
    "description": "flask",
    "isExtraImport": true,
    "detail": "flask",
    "documentation": {}
  },
  {
    "label": "request",
    "importPath": "flask",
    "description": "flask",
    "isExtraImport": true,
    "detail": "flask",
    "documentation": {}
  },
  {
    "label": "Flask",
    "importPath": "flask",
    "description": "flask",
    "isExtraImport": true,
    "detail": "flask",
    "documentation": {}
  },
  {
    "label": "render_template",
    "importPath": "flask",
    "description": "flask",
    "isExtraImport": true,
    "detail": "flask",
    "documentation": {}
  },
  {
    "label": "request",
    "importPath": "flask",
    "description": "flask",
    "isExtraImport": true,
    "detail": "flask",
    "documentation": {}
  },
  {
    "label": "redirect",
    "importPath": "flask",
    "description": "flask",
    "isExtraImport": true,
    "detail": "flask",
    "documentation": {}
  },
  {
    "label": "url_for",
    "importPath": "flask",
    "description": "flask",
    "isExtraImport": true,
    "detail": "flask",
    "documentation": {}
  },
  {
    "label": "Flask",
    "importPath": "flask",
    "description": "flask",
    "isExtraImport": true,
    "detail": "flask",
    "documentation": {}
  },
  {
    "label": "Flask",
    "importPath": "flask",
    "description": "flask",
    "isExtraImport": true,
    "detail": "flask",
    "documentation": {}
  },
  {
    "label": "request",
    "importPath": "flask",
    "description": "flask",
    "isExtraImport": true,
    "detail": "flask",
    "documentation": {}
  },
  {
    "label": "Ask",
    "importPath": "flask_ask",
    "description": "flask_ask",
    "isExtraImport": true,
    "detail": "flask_ask",
    "documentation": {}
  },
  {
    "label": "question",
    "importPath": "flask_ask",
    "description": "flask_ask",
    "isExtraImport": true,
    "detail": "flask_ask",
    "documentation": {}
  },
  {
    "label": "statement",
    "importPath": "flask_ask",
    "description": "flask_ask",
    "isExtraImport": true,
    "detail": "flask_ask",
    "documentation": {}
  },
  {
    "label": "Ask",
    "importPath": "flask_ask",
    "description": "flask_ask",
    "isExtraImport": true,
    "detail": "flask_ask",
    "documentation": {}
  },
  {
    "label": "question",
    "importPath": "flask_ask",
    "description": "flask_ask",
    "isExtraImport": true,
    "detail": "flask_ask",
    "documentation": {}
  },
  {
    "label": "statement",
    "importPath": "flask_ask",
    "description": "flask_ask",
    "isExtraImport": true,
    "detail": "flask_ask",
    "documentation": {}
  },
  {
    "label": "fnmatch",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "fnmatch",
    "description": "fnmatch",
    "detail": "fnmatch",
    "documentation": {}
  },
  {
    "label": "simple_package",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "simple_package",
    "description": "simple_package",
    "detail": "simple_package",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "division",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "division",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "division",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "division",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "division",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "division",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "division",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "division",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "division",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "division",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "division",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "division",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "division",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "division",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "division",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "division",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "division",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "division",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "division",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "division",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "division",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "division",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "division",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "division",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "division",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "division",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "division",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "division",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "division",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "division",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "division",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "division",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "division",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "unicode_literals",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "unicode_literals",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "division",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "division",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "division",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "division",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "division",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "division",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "division",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "division",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "division",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "division",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "division",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "division",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "division",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "division",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "division",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "division",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "division",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "division",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "division",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "division",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "division",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "division",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "division",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "division",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "division",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "division",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "division",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "division",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "division",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "division",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "division",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "division",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "print_function",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "division",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "aiohttp",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "aiohttp",
    "description": "aiohttp",
    "detail": "aiohttp",
    "documentation": {}
  },
  {
    "label": "asyncio",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "asyncio",
    "description": "asyncio",
    "detail": "asyncio",
    "documentation": {}
  },
  {
    "label": "os.path",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "os.path",
    "description": "os.path",
    "detail": "os.path",
    "documentation": {}
  },
  {
    "label": "basename",
    "importPath": "os.path",
    "description": "os.path",
    "isExtraImport": true,
    "detail": "os.path",
    "documentation": {}
  },
  {
    "label": "expanduser",
    "importPath": "os.path",
    "description": "os.path",
    "isExtraImport": true,
    "detail": "os.path",
    "documentation": {}
  },
  {
    "label": "join",
    "importPath": "os.path",
    "description": "os.path",
    "isExtraImport": true,
    "detail": "os.path",
    "documentation": {}
  },
  {
    "label": "expanduser",
    "importPath": "os.path",
    "description": "os.path",
    "isExtraImport": true,
    "detail": "os.path",
    "documentation": {}
  },
  {
    "label": "join",
    "importPath": "os.path",
    "description": "os.path",
    "isExtraImport": true,
    "detail": "os.path",
    "documentation": {}
  },
  {
    "label": "isfile",
    "importPath": "os.path",
    "description": "os.path",
    "isExtraImport": true,
    "detail": "os.path",
    "documentation": {}
  },
  {
    "label": "join",
    "importPath": "os.path",
    "description": "os.path",
    "isExtraImport": true,
    "detail": "os.path",
    "documentation": {}
  },
  {
    "label": "expanduser",
    "importPath": "os.path",
    "description": "os.path",
    "isExtraImport": true,
    "detail": "os.path",
    "documentation": {}
  },
  {
    "label": "expanduser",
    "importPath": "os.path",
    "description": "os.path",
    "isExtraImport": true,
    "detail": "os.path",
    "documentation": {}
  },
  {
    "label": "join",
    "importPath": "os.path",
    "description": "os.path",
    "isExtraImport": true,
    "detail": "os.path",
    "documentation": {}
  },
  {
    "label": "expanduser",
    "importPath": "os.path",
    "description": "os.path",
    "isExtraImport": true,
    "detail": "os.path",
    "documentation": {}
  },
  {
    "label": "join",
    "importPath": "os.path",
    "description": "os.path",
    "isExtraImport": true,
    "detail": "os.path",
    "documentation": {}
  },
  {
    "label": "isfile",
    "importPath": "os.path",
    "description": "os.path",
    "isExtraImport": true,
    "detail": "os.path",
    "documentation": {}
  },
  {
    "label": "join",
    "importPath": "os.path",
    "description": "os.path",
    "isExtraImport": true,
    "detail": "os.path",
    "documentation": {}
  },
  {
    "label": "expanduser",
    "importPath": "os.path",
    "description": "os.path",
    "isExtraImport": true,
    "detail": "os.path",
    "documentation": {}
  },
  {
    "label": "basename",
    "importPath": "os.path",
    "description": "os.path",
    "isExtraImport": true,
    "detail": "os.path",
    "documentation": {}
  },
  {
    "label": "basename",
    "importPath": "os.path",
    "description": "os.path",
    "isExtraImport": true,
    "detail": "os.path",
    "documentation": {}
  },
  {
    "label": "basename",
    "importPath": "os.path",
    "description": "os.path",
    "isExtraImport": true,
    "detail": "os.path",
    "documentation": {}
  },
  {
    "label": "expanduser",
    "importPath": "os.path",
    "description": "os.path",
    "isExtraImport": true,
    "detail": "os.path",
    "documentation": {}
  },
  {
    "label": "join",
    "importPath": "os.path",
    "description": "os.path",
    "isExtraImport": true,
    "detail": "os.path",
    "documentation": {}
  },
  {
    "label": "expanduser",
    "importPath": "os.path",
    "description": "os.path",
    "isExtraImport": true,
    "detail": "os.path",
    "documentation": {}
  },
  {
    "label": "join",
    "importPath": "os.path",
    "description": "os.path",
    "isExtraImport": true,
    "detail": "os.path",
    "documentation": {}
  },
  {
    "label": "isfile",
    "importPath": "os.path",
    "description": "os.path",
    "isExtraImport": true,
    "detail": "os.path",
    "documentation": {}
  },
  {
    "label": "join",
    "importPath": "os.path",
    "description": "os.path",
    "isExtraImport": true,
    "detail": "os.path",
    "documentation": {}
  },
  {
    "label": "expanduser",
    "importPath": "os.path",
    "description": "os.path",
    "isExtraImport": true,
    "detail": "os.path",
    "documentation": {}
  },
  {
    "label": "expanduser",
    "importPath": "os.path",
    "description": "os.path",
    "isExtraImport": true,
    "detail": "os.path",
    "documentation": {}
  },
  {
    "label": "join",
    "importPath": "os.path",
    "description": "os.path",
    "isExtraImport": true,
    "detail": "os.path",
    "documentation": {}
  },
  {
    "label": "expanduser",
    "importPath": "os.path",
    "description": "os.path",
    "isExtraImport": true,
    "detail": "os.path",
    "documentation": {}
  },
  {
    "label": "join",
    "importPath": "os.path",
    "description": "os.path",
    "isExtraImport": true,
    "detail": "os.path",
    "documentation": {}
  },
  {
    "label": "isfile",
    "importPath": "os.path",
    "description": "os.path",
    "isExtraImport": true,
    "detail": "os.path",
    "documentation": {}
  },
  {
    "label": "join",
    "importPath": "os.path",
    "description": "os.path",
    "isExtraImport": true,
    "detail": "os.path",
    "documentation": {}
  },
  {
    "label": "expanduser",
    "importPath": "os.path",
    "description": "os.path",
    "isExtraImport": true,
    "detail": "os.path",
    "documentation": {}
  },
  {
    "label": "progressbar",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "progressbar",
    "description": "progressbar",
    "detail": "progressbar",
    "documentation": {}
  },
  {
    "label": "speech_recognition",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "speech_recognition",
    "description": "speech_recognition",
    "detail": "speech_recognition",
    "documentation": {}
  },
  {
    "label": "AudioSegment",
    "importPath": "pydub",
    "description": "pydub",
    "isExtraImport": true,
    "detail": "pydub",
    "documentation": {}
  },
  {
    "label": "AudioSegment",
    "importPath": "pydub",
    "description": "pydub",
    "isExtraImport": true,
    "detail": "pydub",
    "documentation": {}
  },
  {
    "label": "split_on_silence",
    "importPath": "pydub.silence",
    "description": "pydub.silence",
    "isExtraImport": true,
    "detail": "pydub.silence",
    "documentation": {}
  },
  {
    "label": "split_on_silence",
    "importPath": "pydub.silence",
    "description": "pydub.silence",
    "isExtraImport": true,
    "detail": "pydub.silence",
    "documentation": {}
  },
  {
    "label": "PyPDF2",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "PyPDF2",
    "description": "PyPDF2",
    "detail": "PyPDF2",
    "documentation": {}
  },
  {
    "label": "pyttsx3",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "pyttsx3",
    "description": "pyttsx3",
    "detail": "pyttsx3",
    "documentation": {}
  },
  {
    "label": "sqlite3",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "sqlite3",
    "description": "sqlite3",
    "detail": "sqlite3",
    "documentation": {}
  },
  {
    "label": "open",
    "importPath": "PIL.Image",
    "description": "PIL.Image",
    "isExtraImport": true,
    "detail": "PIL.Image",
    "documentation": {}
  },
  {
    "label": "open",
    "importPath": "PIL.Image",
    "description": "PIL.Image",
    "isExtraImport": true,
    "detail": "PIL.Image",
    "documentation": {}
  },
  {
    "label": "open",
    "importPath": "PIL.Image",
    "description": "PIL.Image",
    "isExtraImport": true,
    "detail": "PIL.Image",
    "documentation": {}
  },
  {
    "label": "open",
    "importPath": "PIL.Image",
    "description": "PIL.Image",
    "isExtraImport": true,
    "detail": "PIL.Image",
    "documentation": {}
  },
  {
    "label": "PhotoImage",
    "importPath": "PIL.ImageTk",
    "description": "PIL.ImageTk",
    "isExtraImport": true,
    "detail": "PIL.ImageTk",
    "documentation": {}
  },
  {
    "label": "PhotoImage",
    "importPath": "PIL.ImageTk",
    "description": "PIL.ImageTk",
    "isExtraImport": true,
    "detail": "PIL.ImageTk",
    "documentation": {}
  },
  {
    "label": "PhotoImage",
    "importPath": "PIL.ImageTk",
    "description": "PIL.ImageTk",
    "isExtraImport": true,
    "detail": "PIL.ImageTk",
    "documentation": {}
  },
  {
    "label": "PhotoImage",
    "importPath": "PIL.ImageTk",
    "description": "PIL.ImageTk",
    "isExtraImport": true,
    "detail": "PIL.ImageTk",
    "documentation": {}
  },
  {
    "label": "subprocess",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "subprocess",
    "description": "subprocess",
    "detail": "subprocess",
    "documentation": {}
  },
  {
    "label": "PIPE",
    "importPath": "subprocess",
    "description": "subprocess",
    "isExtraImport": true,
    "detail": "subprocess",
    "documentation": {}
  },
  {
    "label": "Popen",
    "importPath": "subprocess",
    "description": "subprocess",
    "isExtraImport": true,
    "detail": "subprocess",
    "documentation": {}
  },
  {
    "label": "PIPE",
    "importPath": "subprocess",
    "description": "subprocess",
    "isExtraImport": true,
    "detail": "subprocess",
    "documentation": {}
  },
  {
    "label": "Popen",
    "importPath": "subprocess",
    "description": "subprocess",
    "isExtraImport": true,
    "detail": "subprocess",
    "documentation": {}
  },
  {
    "label": "call",
    "importPath": "subprocess",
    "description": "subprocess",
    "isExtraImport": true,
    "detail": "subprocess",
    "documentation": {}
  },
  {
    "label": "call",
    "importPath": "subprocess",
    "description": "subprocess",
    "isExtraImport": true,
    "detail": "subprocess",
    "documentation": {}
  },
  {
    "label": "call",
    "importPath": "subprocess",
    "description": "subprocess",
    "isExtraImport": true,
    "detail": "subprocess",
    "documentation": {}
  },
  {
    "label": "PIPE",
    "importPath": "subprocess",
    "description": "subprocess",
    "isExtraImport": true,
    "detail": "subprocess",
    "documentation": {}
  },
  {
    "label": "Popen",
    "importPath": "subprocess",
    "description": "subprocess",
    "isExtraImport": true,
    "detail": "subprocess",
    "documentation": {}
  },
  {
    "label": "run",
    "importPath": "subprocess",
    "description": "subprocess",
    "isExtraImport": true,
    "detail": "subprocess",
    "documentation": {}
  },
  {
    "label": "PIPE",
    "importPath": "subprocess",
    "description": "subprocess",
    "isExtraImport": true,
    "detail": "subprocess",
    "documentation": {}
  },
  {
    "label": "call",
    "importPath": "subprocess",
    "description": "subprocess",
    "isExtraImport": true,
    "detail": "subprocess",
    "documentation": {}
  },
  {
    "label": "call",
    "importPath": "subprocess",
    "description": "subprocess",
    "isExtraImport": true,
    "detail": "subprocess",
    "documentation": {}
  },
  {
    "label": "call",
    "importPath": "subprocess",
    "description": "subprocess",
    "isExtraImport": true,
    "detail": "subprocess",
    "documentation": {}
  },
  {
    "label": "PIPE",
    "importPath": "subprocess",
    "description": "subprocess",
    "isExtraImport": true,
    "detail": "subprocess",
    "documentation": {}
  },
  {
    "label": "Popen",
    "importPath": "subprocess",
    "description": "subprocess",
    "isExtraImport": true,
    "detail": "subprocess",
    "documentation": {}
  },
  {
    "label": "run",
    "importPath": "subprocess",
    "description": "subprocess",
    "isExtraImport": true,
    "detail": "subprocess",
    "documentation": {}
  },
  {
    "label": "PIPE",
    "importPath": "subprocess",
    "description": "subprocess",
    "isExtraImport": true,
    "detail": "subprocess",
    "documentation": {}
  },
  {
    "label": "PIPE",
    "importPath": "subprocess",
    "description": "subprocess",
    "isExtraImport": true,
    "detail": "subprocess",
    "documentation": {}
  },
  {
    "label": "Popen",
    "importPath": "subprocess",
    "description": "subprocess",
    "isExtraImport": true,
    "detail": "subprocess",
    "documentation": {}
  },
  {
    "label": "PIPE",
    "importPath": "subprocess",
    "description": "subprocess",
    "isExtraImport": true,
    "detail": "subprocess",
    "documentation": {}
  },
  {
    "label": "Popen",
    "importPath": "subprocess",
    "description": "subprocess",
    "isExtraImport": true,
    "detail": "subprocess",
    "documentation": {}
  },
  {
    "label": "call",
    "importPath": "subprocess",
    "description": "subprocess",
    "isExtraImport": true,
    "detail": "subprocess",
    "documentation": {}
  },
  {
    "label": "*",
    "importPath": "subprocess",
    "description": "subprocess",
    "isExtraImport": true,
    "detail": "subprocess",
    "documentation": {}
  },
  {
    "label": "*",
    "importPath": "subprocess",
    "description": "subprocess",
    "isExtraImport": true,
    "detail": "subprocess",
    "documentation": {}
  },
  {
    "label": "*",
    "importPath": "subprocess",
    "description": "subprocess",
    "isExtraImport": true,
    "detail": "subprocess",
    "documentation": {}
  },
  {
    "label": "Popen",
    "importPath": "subprocess",
    "description": "subprocess",
    "isExtraImport": true,
    "detail": "subprocess",
    "documentation": {}
  },
  {
    "label": "PIPE",
    "importPath": "subprocess",
    "description": "subprocess",
    "isExtraImport": true,
    "detail": "subprocess",
    "documentation": {}
  },
  {
    "label": "*",
    "importPath": "subprocess",
    "description": "subprocess",
    "isExtraImport": true,
    "detail": "subprocess",
    "documentation": {}
  },
  {
    "label": "*",
    "importPath": "subprocess",
    "description": "subprocess",
    "isExtraImport": true,
    "detail": "subprocess",
    "documentation": {}
  },
  {
    "label": "call",
    "importPath": "subprocess",
    "description": "subprocess",
    "isExtraImport": true,
    "detail": "subprocess",
    "documentation": {}
  },
  {
    "label": "call",
    "importPath": "subprocess",
    "description": "subprocess",
    "isExtraImport": true,
    "detail": "subprocess",
    "documentation": {}
  },
  {
    "label": "logging",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "logging",
    "description": "logging",
    "detail": "logging",
    "documentation": {}
  },
  {
    "label": "shutil",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "shutil",
    "description": "shutil",
    "detail": "shutil",
    "documentation": {}
  },
  {
    "label": "stat",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "stat",
    "description": "stat",
    "detail": "stat",
    "documentation": {}
  },
  {
    "label": "errno",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "errno",
    "description": "errno",
    "detail": "errno",
    "documentation": {}
  },
  {
    "label": "platform",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "platform",
    "description": "platform",
    "detail": "platform",
    "documentation": {}
  },
  {
    "label": "pyglet",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "pyglet",
    "description": "pyglet",
    "detail": "pyglet",
    "documentation": {}
  },
  {
    "label": "Tuple",
    "importPath": "typing",
    "description": "typing",
    "isExtraImport": true,
    "detail": "typing",
    "documentation": {}
  },
  {
    "label": "Tuple",
    "importPath": "typing",
    "description": "typing",
    "isExtraImport": true,
    "detail": "typing",
    "documentation": {}
  },
  {
    "label": "numpy",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "numpy",
    "description": "numpy",
    "detail": "numpy",
    "documentation": {}
  },
  {
    "label": "array",
    "importPath": "numpy",
    "description": "numpy",
    "isExtraImport": true,
    "detail": "numpy",
    "documentation": {}
  },
  {
    "label": "zeros",
    "importPath": "numpy",
    "description": "numpy",
    "isExtraImport": true,
    "detail": "numpy",
    "documentation": {}
  },
  {
    "label": "full",
    "importPath": "numpy",
    "description": "numpy",
    "isExtraImport": true,
    "detail": "numpy",
    "documentation": {}
  },
  {
    "label": "argmin",
    "importPath": "numpy",
    "description": "numpy",
    "isExtraImport": true,
    "detail": "numpy",
    "documentation": {}
  },
  {
    "label": "inf",
    "importPath": "numpy",
    "description": "numpy",
    "isExtraImport": true,
    "detail": "numpy",
    "documentation": {}
  },
  {
    "label": "ndim",
    "importPath": "numpy",
    "description": "numpy",
    "isExtraImport": true,
    "detail": "numpy",
    "documentation": {}
  },
  {
    "label": "array",
    "importPath": "numpy",
    "description": "numpy",
    "isExtraImport": true,
    "detail": "numpy",
    "documentation": {}
  },
  {
    "label": "zeros",
    "importPath": "numpy",
    "description": "numpy",
    "isExtraImport": true,
    "detail": "numpy",
    "documentation": {}
  },
  {
    "label": "full",
    "importPath": "numpy",
    "description": "numpy",
    "isExtraImport": true,
    "detail": "numpy",
    "documentation": {}
  },
  {
    "label": "argmin",
    "importPath": "numpy",
    "description": "numpy",
    "isExtraImport": true,
    "detail": "numpy",
    "documentation": {}
  },
  {
    "label": "inf",
    "importPath": "numpy",
    "description": "numpy",
    "isExtraImport": true,
    "detail": "numpy",
    "documentation": {}
  },
  {
    "label": "ndim",
    "importPath": "numpy",
    "description": "numpy",
    "isExtraImport": true,
    "detail": "numpy",
    "documentation": {}
  },
  {
    "label": "matplotlib.pyplot",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "matplotlib.pyplot",
    "description": "matplotlib.pyplot",
    "detail": "matplotlib.pyplot",
    "documentation": {}
  },
  {
    "label": "FPDF",
    "importPath": "fpdf",
    "description": "fpdf",
    "isExtraImport": true,
    "detail": "fpdf",
    "documentation": {}
  },
  {
    "label": "FPDF",
    "importPath": "fpdf",
    "description": "fpdf",
    "isExtraImport": true,
    "detail": "fpdf",
    "documentation": {}
  },
  {
    "label": "defaultdict",
    "importPath": "collections",
    "description": "collections",
    "isExtraImport": true,
    "detail": "collections",
    "documentation": {}
  },
  {
    "label": "OrderedDict",
    "importPath": "collections",
    "description": "collections",
    "isExtraImport": true,
    "detail": "collections",
    "documentation": {}
  },
  {
    "label": "deque",
    "importPath": "collections",
    "description": "collections",
    "isExtraImport": true,
    "detail": "collections",
    "documentation": {}
  },
  {
    "label": "OrderedDict",
    "importPath": "collections",
    "description": "collections",
    "isExtraImport": true,
    "detail": "collections",
    "documentation": {}
  },
  {
    "label": "Counter",
    "importPath": "collections",
    "description": "collections",
    "isExtraImport": true,
    "detail": "collections",
    "documentation": {}
  },
  {
    "label": "defaultdict",
    "importPath": "collections",
    "description": "collections",
    "isExtraImport": true,
    "detail": "collections",
    "documentation": {}
  },
  {
    "label": "defaultdict",
    "importPath": "collections",
    "description": "collections",
    "isExtraImport": true,
    "detail": "collections",
    "documentation": {}
  },
  {
    "label": "Counter",
    "importPath": "collections",
    "description": "collections",
    "isExtraImport": true,
    "detail": "collections",
    "documentation": {}
  },
  {
    "label": "defaultdict",
    "importPath": "collections",
    "description": "collections",
    "isExtraImport": true,
    "detail": "collections",
    "documentation": {}
  },
  {
    "label": "deque",
    "importPath": "collections",
    "description": "collections",
    "isExtraImport": true,
    "detail": "collections",
    "documentation": {}
  },
  {
    "label": "deque",
    "importPath": "collections",
    "description": "collections",
    "isExtraImport": true,
    "detail": "collections",
    "documentation": {}
  },
  {
    "label": "deque",
    "importPath": "collections",
    "description": "collections",
    "isExtraImport": true,
    "detail": "collections",
    "documentation": {}
  },
  {
    "label": "defaultdict",
    "importPath": "collections",
    "description": "collections",
    "isExtraImport": true,
    "detail": "collections",
    "documentation": {}
  },
  {
    "label": "OrderedDict",
    "importPath": "collections",
    "description": "collections",
    "isExtraImport": true,
    "detail": "collections",
    "documentation": {}
  },
  {
    "label": "OrderedDict",
    "importPath": "collections",
    "description": "collections",
    "isExtraImport": true,
    "detail": "collections",
    "documentation": {}
  },
  {
    "label": "Counter",
    "importPath": "collections",
    "description": "collections",
    "isExtraImport": true,
    "detail": "collections",
    "documentation": {}
  },
  {
    "label": "defaultdict",
    "importPath": "collections",
    "description": "collections",
    "isExtraImport": true,
    "detail": "collections",
    "documentation": {}
  },
  {
    "label": "defaultdict",
    "importPath": "collections",
    "description": "collections",
    "isExtraImport": true,
    "detail": "collections",
    "documentation": {}
  },
  {
    "label": "Counter",
    "importPath": "collections",
    "description": "collections",
    "isExtraImport": true,
    "detail": "collections",
    "documentation": {}
  },
  {
    "label": "defaultdict",
    "importPath": "collections",
    "description": "collections",
    "isExtraImport": true,
    "detail": "collections",
    "documentation": {}
  },
  {
    "label": "defaultdict",
    "importPath": "collections",
    "description": "collections",
    "isExtraImport": true,
    "detail": "collections",
    "documentation": {}
  },
  {
    "label": "defaultdict",
    "importPath": "collections",
    "description": "collections",
    "isExtraImport": true,
    "detail": "collections",
    "documentation": {}
  },
  {
    "label": "defaultdict",
    "importPath": "collections",
    "description": "collections",
    "isExtraImport": true,
    "detail": "collections",
    "documentation": {}
  },
  {
    "label": "docopt",
    "importPath": "docopt",
    "description": "docopt",
    "isExtraImport": true,
    "detail": "docopt",
    "documentation": {}
  },
  {
    "label": "docopt",
    "importPath": "docopt",
    "description": "docopt",
    "isExtraImport": true,
    "detail": "docopt",
    "documentation": {}
  },
  {
    "label": "docopt",
    "importPath": "docopt",
    "description": "docopt",
    "isExtraImport": true,
    "detail": "docopt",
    "documentation": {}
  },
  {
    "label": "docopt",
    "importPath": "docopt",
    "description": "docopt",
    "isExtraImport": true,
    "detail": "docopt",
    "documentation": {}
  },
  {
    "label": "docopt",
    "importPath": "docopt",
    "description": "docopt",
    "isExtraImport": true,
    "detail": "docopt",
    "documentation": {}
  },
  {
    "label": "docopt",
    "importPath": "docopt",
    "description": "docopt",
    "isExtraImport": true,
    "detail": "docopt",
    "documentation": {}
  },
  {
    "label": "docopt",
    "importPath": "docopt",
    "description": "docopt",
    "isExtraImport": true,
    "detail": "docopt",
    "documentation": {}
  },
  {
    "label": "docopt",
    "importPath": "docopt",
    "description": "docopt",
    "isExtraImport": true,
    "detail": "docopt",
    "documentation": {}
  },
  {
    "label": "docopt",
    "importPath": "docopt",
    "description": "docopt",
    "isExtraImport": true,
    "detail": "docopt",
    "documentation": {}
  },
  {
    "label": "docopt",
    "importPath": "docopt",
    "description": "docopt",
    "isExtraImport": true,
    "detail": "docopt",
    "documentation": {}
  },
  {
    "label": "docopt",
    "importPath": "docopt",
    "description": "docopt",
    "isExtraImport": true,
    "detail": "docopt",
    "documentation": {}
  },
  {
    "label": "docopt",
    "importPath": "docopt",
    "description": "docopt",
    "isExtraImport": true,
    "detail": "docopt",
    "documentation": {}
  },
  {
    "label": "ships",
    "importPath": "battleserver",
    "description": "battleserver",
    "isExtraImport": true,
    "detail": "battleserver",
    "documentation": {}
  },
  {
    "label": "DEFAULT_X",
    "importPath": "battleserver",
    "description": "battleserver",
    "isExtraImport": true,
    "detail": "battleserver",
    "documentation": {}
  },
  {
    "label": "DEFAULT_Y",
    "importPath": "battleserver",
    "description": "battleserver",
    "isExtraImport": true,
    "detail": "battleserver",
    "documentation": {}
  },
  {
    "label": "ships",
    "importPath": "battleserver",
    "description": "battleserver",
    "isExtraImport": true,
    "detail": "battleserver",
    "documentation": {}
  },
  {
    "label": "DEFAULT_X",
    "importPath": "battleserver",
    "description": "battleserver",
    "isExtraImport": true,
    "detail": "battleserver",
    "documentation": {}
  },
  {
    "label": "DEFAULT_Y",
    "importPath": "battleserver",
    "description": "battleserver",
    "isExtraImport": true,
    "detail": "battleserver",
    "documentation": {}
  },
  {
    "label": "ships",
    "importPath": "battleserver",
    "description": "battleserver",
    "isExtraImport": true,
    "detail": "battleserver",
    "documentation": {}
  },
  {
    "label": "DEFAULT_X",
    "importPath": "battleserver",
    "description": "battleserver",
    "isExtraImport": true,
    "detail": "battleserver",
    "documentation": {}
  },
  {
    "label": "DEFAULT_Y",
    "importPath": "battleserver",
    "description": "battleserver",
    "isExtraImport": true,
    "detail": "battleserver",
    "documentation": {}
  },
  {
    "label": "ships",
    "importPath": "battleserver",
    "description": "battleserver",
    "isExtraImport": true,
    "detail": "battleserver",
    "documentation": {}
  },
  {
    "label": "DEFAULT_X",
    "importPath": "battleserver",
    "description": "battleserver",
    "isExtraImport": true,
    "detail": "battleserver",
    "documentation": {}
  },
  {
    "label": "DEFAULT_Y",
    "importPath": "battleserver",
    "description": "battleserver",
    "isExtraImport": true,
    "detail": "battleserver",
    "documentation": {}
  },
  {
    "label": "string",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "string",
    "description": "string",
    "detail": "string",
    "documentation": {}
  },
  {
    "label": "ascii_uppercase",
    "importPath": "string",
    "description": "string",
    "isExtraImport": true,
    "detail": "string",
    "documentation": {}
  },
  {
    "label": "ascii_uppercase",
    "importPath": "string",
    "description": "string",
    "isExtraImport": true,
    "detail": "string",
    "documentation": {}
  },
  {
    "label": "ascii_lowercase",
    "importPath": "string",
    "description": "string",
    "isExtraImport": true,
    "detail": "string",
    "documentation": {}
  },
  {
    "label": "ascii_lowercase",
    "importPath": "string",
    "description": "string",
    "isExtraImport": true,
    "detail": "string",
    "documentation": {}
  },
  {
    "label": "ascii_uppercase",
    "importPath": "string",
    "description": "string",
    "isExtraImport": true,
    "detail": "string",
    "documentation": {}
  },
  {
    "label": "ascii_uppercase",
    "importPath": "string",
    "description": "string",
    "isExtraImport": true,
    "detail": "string",
    "documentation": {}
  },
  {
    "label": "ascii_lowercase",
    "importPath": "string",
    "description": "string",
    "isExtraImport": true,
    "detail": "string",
    "documentation": {}
  },
  {
    "label": "ascii_lowercase",
    "importPath": "string",
    "description": "string",
    "isExtraImport": true,
    "detail": "string",
    "documentation": {}
  },
  {
    "label": "pprint",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "pprint",
    "description": "pprint",
    "detail": "pprint",
    "documentation": {}
  },
  {
    "label": "pprint",
    "importPath": "pprint",
    "description": "pprint",
    "isExtraImport": true,
    "detail": "pprint",
    "documentation": {}
  },
  {
    "label": "pprint",
    "importPath": "pprint",
    "description": "pprint",
    "isExtraImport": true,
    "detail": "pprint",
    "documentation": {}
  },
  {
    "label": "pprint",
    "importPath": "pprint",
    "description": "pprint",
    "isExtraImport": true,
    "detail": "pprint",
    "documentation": {}
  },
  {
    "label": "pprint",
    "importPath": "pprint",
    "description": "pprint",
    "isExtraImport": true,
    "detail": "pprint",
    "documentation": {}
  },
  {
    "label": "pprint",
    "importPath": "pprint",
    "description": "pprint",
    "isExtraImport": true,
    "detail": "pprint",
    "documentation": {}
  },
  {
    "label": "pprint",
    "importPath": "pprint",
    "description": "pprint",
    "isExtraImport": true,
    "detail": "pprint",
    "documentation": {}
  },
  {
    "label": "pprint",
    "importPath": "pprint",
    "description": "pprint",
    "isExtraImport": true,
    "detail": "pprint",
    "documentation": {}
  },
  {
    "label": "pprint",
    "importPath": "pprint",
    "description": "pprint",
    "isExtraImport": true,
    "detail": "pprint",
    "documentation": {}
  },
  {
    "label": "re",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "re",
    "description": "re",
    "detail": "re",
    "documentation": {}
  },
  {
    "label": "timeit",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "timeit",
    "description": "timeit",
    "detail": "timeit",
    "documentation": {}
  },
  {
    "label": "threading",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "threading",
    "description": "threading",
    "detail": "threading",
    "documentation": {}
  },
  {
    "label": "Thread",
    "importPath": "threading",
    "description": "threading",
    "isExtraImport": true,
    "detail": "threading",
    "documentation": {}
  },
  {
    "label": "Thread",
    "importPath": "threading",
    "description": "threading",
    "isExtraImport": true,
    "detail": "threading",
    "documentation": {}
  },
  {
    "label": "Background",
    "importPath": "Background",
    "description": "Background",
    "isExtraImport": true,
    "detail": "Background",
    "documentation": {}
  },
  {
    "label": "Background",
    "importPath": "Background",
    "description": "Background",
    "isExtraImport": true,
    "detail": "Background",
    "documentation": {}
  },
  {
    "label": "simplegui",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "simplegui",
    "description": "simplegui",
    "detail": "simplegui",
    "documentation": {}
  },
  {
    "label": "BeautifulSoup",
    "importPath": "bs4",
    "description": "bs4",
    "isExtraImport": true,
    "detail": "bs4",
    "documentation": {}
  },
  {
    "label": "BeautifulSoup",
    "importPath": "bs4",
    "description": "bs4",
    "isExtraImport": true,
    "detail": "bs4",
    "documentation": {}
  },
  {
    "label": "BeautifulSoup",
    "importPath": "bs4",
    "description": "bs4",
    "isExtraImport": true,
    "detail": "bs4",
    "documentation": {}
  },
  {
    "label": "BeautifulSoup",
    "importPath": "bs4",
    "description": "bs4",
    "isExtraImport": true,
    "detail": "bs4",
    "documentation": {}
  },
  {
    "label": "SoupStrainer",
    "importPath": "bs4",
    "description": "bs4",
    "isExtraImport": true,
    "detail": "bs4",
    "documentation": {}
  },
  {
    "label": "BeautifulSoup",
    "importPath": "bs4",
    "description": "bs4",
    "isExtraImport": true,
    "detail": "bs4",
    "documentation": {}
  },
  {
    "label": "SoupStrainer",
    "importPath": "bs4",
    "description": "bs4",
    "isExtraImport": true,
    "detail": "bs4",
    "documentation": {}
  },
  {
    "label": "BeautifulSoup",
    "importPath": "bs4",
    "description": "bs4",
    "isExtraImport": true,
    "detail": "bs4",
    "documentation": {}
  },
  {
    "label": "BeautifulSoup",
    "importPath": "bs4",
    "description": "bs4",
    "isExtraImport": true,
    "detail": "bs4",
    "documentation": {}
  },
  {
    "label": "BeautifulSoup",
    "importPath": "bs4",
    "description": "bs4",
    "isExtraImport": true,
    "detail": "bs4",
    "documentation": {}
  },
  {
    "label": "SoupStrainer",
    "importPath": "bs4",
    "description": "bs4",
    "isExtraImport": true,
    "detail": "bs4",
    "documentation": {}
  },
  {
    "label": "BeautifulSoup",
    "importPath": "bs4",
    "description": "bs4",
    "isExtraImport": true,
    "detail": "bs4",
    "documentation": {}
  },
  {
    "label": "SoupStrainer",
    "importPath": "bs4",
    "description": "bs4",
    "isExtraImport": true,
    "detail": "bs4",
    "documentation": {}
  },
  {
    "label": "BeautifulSoup",
    "importPath": "bs4",
    "description": "bs4",
    "isExtraImport": true,
    "detail": "bs4",
    "documentation": {}
  },
  {
    "label": "csv",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "csv",
    "description": "csv",
    "detail": "csv",
    "documentation": {}
  },
  {
    "label": "writer",
    "importPath": "csv",
    "description": "csv",
    "isExtraImport": true,
    "detail": "csv",
    "documentation": {}
  },
  {
    "label": "writer",
    "importPath": "csv",
    "description": "csv",
    "isExtraImport": true,
    "detail": "csv",
    "documentation": {}
  },
  {
    "label": "functools",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "functools",
    "description": "functools",
    "detail": "functools",
    "documentation": {}
  },
  {
    "label": "wraps",
    "importPath": "functools",
    "description": "functools",
    "isExtraImport": true,
    "detail": "functools",
    "documentation": {}
  },
  {
    "label": "reduce",
    "importPath": "functools",
    "description": "functools",
    "isExtraImport": true,
    "detail": "functools",
    "documentation": {}
  },
  {
    "label": "reduce",
    "importPath": "functools",
    "description": "functools",
    "isExtraImport": true,
    "detail": "functools",
    "documentation": {}
  },
  {
    "label": "wraps",
    "importPath": "functools",
    "description": "functools",
    "isExtraImport": true,
    "detail": "functools",
    "documentation": {}
  },
  {
    "label": "wraps",
    "importPath": "functools",
    "description": "functools",
    "isExtraImport": true,
    "detail": "functools",
    "documentation": {}
  },
  {
    "label": "wraps",
    "importPath": "functools",
    "description": "functools",
    "isExtraImport": true,
    "detail": "functools",
    "documentation": {}
  },
  {
    "label": "reduce",
    "importPath": "functools",
    "description": "functools",
    "isExtraImport": true,
    "detail": "functools",
    "documentation": {}
  },
  {
    "label": "reduce",
    "importPath": "functools",
    "description": "functools",
    "isExtraImport": true,
    "detail": "functools",
    "documentation": {}
  },
  {
    "label": "wraps",
    "importPath": "functools",
    "description": "functools",
    "isExtraImport": true,
    "detail": "functools",
    "documentation": {}
  },
  {
    "label": "sets",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "sets",
    "description": "sets",
    "detail": "sets",
    "documentation": {}
  },
  {
    "label": "tensorflow",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "tensorflow",
    "description": "tensorflow",
    "detail": "tensorflow",
    "documentation": {}
  },
  {
    "label": "pygame",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "pygame",
    "description": "pygame",
    "detail": "pygame",
    "documentation": {}
  },
  {
    "label": "psutil",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "psutil",
    "description": "psutil",
    "detail": "psutil",
    "documentation": {}
  },
  {
    "label": "watcher",
    "importPath": "obs",
    "description": "obs",
    "isExtraImport": true,
    "detail": "obs",
    "documentation": {}
  },
  {
    "label": "watcher",
    "importPath": "obs",
    "description": "obs",
    "isExtraImport": true,
    "detail": "obs",
    "documentation": {}
  },
  {
    "label": "itertools",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "itertools",
    "description": "itertools",
    "detail": "itertools",
    "documentation": {}
  },
  {
    "label": "product",
    "importPath": "itertools",
    "description": "itertools",
    "isExtraImport": true,
    "detail": "itertools",
    "documentation": {}
  },
  {
    "label": "filterfalse",
    "importPath": "itertools",
    "description": "itertools",
    "isExtraImport": true,
    "detail": "itertools",
    "documentation": {}
  },
  {
    "label": "combinations",
    "importPath": "itertools",
    "description": "itertools",
    "isExtraImport": true,
    "detail": "itertools",
    "documentation": {}
  },
  {
    "label": "permutations",
    "importPath": "itertools",
    "description": "itertools",
    "isExtraImport": true,
    "detail": "itertools",
    "documentation": {}
  },
  {
    "label": "permutations",
    "importPath": "itertools",
    "description": "itertools",
    "isExtraImport": true,
    "detail": "itertools",
    "documentation": {}
  },
  {
    "label": "product",
    "importPath": "itertools",
    "description": "itertools",
    "isExtraImport": true,
    "detail": "itertools",
    "documentation": {}
  },
  {
    "label": "filterfalse",
    "importPath": "itertools",
    "description": "itertools",
    "isExtraImport": true,
    "detail": "itertools",
    "documentation": {}
  },
  {
    "label": "permutations",
    "importPath": "itertools",
    "description": "itertools",
    "isExtraImport": true,
    "detail": "itertools",
    "documentation": {}
  },
  {
    "label": "permutations",
    "importPath": "itertools",
    "description": "itertools",
    "isExtraImport": true,
    "detail": "itertools",
    "documentation": {}
  },
  {
    "label": "combinations",
    "importPath": "itertools",
    "description": "itertools",
    "isExtraImport": true,
    "detail": "itertools",
    "documentation": {}
  },
  {
    "label": "pickle",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "pickle",
    "description": "pickle",
    "detail": "pickle",
    "documentation": {}
  },
  {
    "label": "seaborn",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "seaborn",
    "description": "seaborn",
    "detail": "seaborn",
    "documentation": {}
  },
  {
    "label": "calendar",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "calendar",
    "description": "calendar",
    "detail": "calendar",
    "documentation": {}
  },
  {
    "label": "credentials",
    "importPath": "firebase_admin",
    "description": "firebase_admin",
    "isExtraImport": true,
    "detail": "firebase_admin",
    "documentation": {}
  },
  {
    "label": "firestore",
    "importPath": "firebase_admin",
    "description": "firebase_admin",
    "isExtraImport": true,
    "detail": "firebase_admin",
    "documentation": {}
  },
  {
    "label": "initialize_app",
    "importPath": "firebase_admin",
    "description": "firebase_admin",
    "isExtraImport": true,
    "detail": "firebase_admin",
    "documentation": {}
  },
  {
    "label": "credentials",
    "importPath": "firebase_admin",
    "description": "firebase_admin",
    "isExtraImport": true,
    "detail": "firebase_admin",
    "documentation": {}
  },
  {
    "label": "firestore",
    "importPath": "firebase_admin",
    "description": "firebase_admin",
    "isExtraImport": true,
    "detail": "firebase_admin",
    "documentation": {}
  },
  {
    "label": "initialize_app",
    "importPath": "firebase_admin",
    "description": "firebase_admin",
    "isExtraImport": true,
    "detail": "firebase_admin",
    "documentation": {}
  },
  {
    "label": "twilio",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "twilio",
    "description": "twilio",
    "detail": "twilio",
    "documentation": {}
  },
  {
    "label": "Client",
    "importPath": "twilio.rest",
    "description": "twilio.rest",
    "isExtraImport": true,
    "detail": "twilio.rest",
    "documentation": {}
  },
  {
    "label": "Client",
    "importPath": "twilio.rest",
    "description": "twilio.rest",
    "isExtraImport": true,
    "detail": "twilio.rest",
    "documentation": {}
  },
  {
    "label": "sieve",
    "importPath": "sympy",
    "description": "sympy",
    "isExtraImport": true,
    "detail": "sympy",
    "documentation": {}
  },
  {
    "label": "nextprime",
    "importPath": "sympy",
    "description": "sympy",
    "isExtraImport": true,
    "detail": "sympy",
    "documentation": {}
  },
  {
    "label": "sieve",
    "importPath": "sympy",
    "description": "sympy",
    "isExtraImport": true,
    "detail": "sympy",
    "documentation": {}
  },
  {
    "label": "nextprime",
    "importPath": "sympy",
    "description": "sympy",
    "isExtraImport": true,
    "detail": "sympy",
    "documentation": {}
  },
  {
    "label": "sieve",
    "importPath": "sympy",
    "description": "sympy",
    "isExtraImport": true,
    "detail": "sympy",
    "documentation": {}
  },
  {
    "label": "nextprime",
    "importPath": "sympy",
    "description": "sympy",
    "isExtraImport": true,
    "detail": "sympy",
    "documentation": {}
  },
  {
    "label": "sieve",
    "importPath": "sympy",
    "description": "sympy",
    "isExtraImport": true,
    "detail": "sympy",
    "documentation": {}
  },
  {
    "label": "nextprime",
    "importPath": "sympy",
    "description": "sympy",
    "isExtraImport": true,
    "detail": "sympy",
    "documentation": {}
  },
  {
    "label": "RoboBrowser",
    "importPath": "robobrowser",
    "description": "robobrowser",
    "isExtraImport": true,
    "detail": "robobrowser",
    "documentation": {}
  },
  {
    "label": "RoboBrowser",
    "importPath": "robobrowser",
    "description": "robobrowser",
    "isExtraImport": true,
    "detail": "robobrowser",
    "documentation": {}
  },
  {
    "label": "RoboBrowser",
    "importPath": "robobrowser",
    "description": "robobrowser",
    "isExtraImport": true,
    "detail": "robobrowser",
    "documentation": {}
  },
  {
    "label": "RoboBrowser",
    "importPath": "robobrowser",
    "description": "robobrowser",
    "isExtraImport": true,
    "detail": "robobrowser",
    "documentation": {}
  },
  {
    "label": "RoboBrowser",
    "importPath": "robobrowser",
    "description": "robobrowser",
    "isExtraImport": true,
    "detail": "robobrowser",
    "documentation": {}
  },
  {
    "label": "RoboBrowser",
    "importPath": "robobrowser",
    "description": "robobrowser",
    "isExtraImport": true,
    "detail": "robobrowser",
    "documentation": {}
  },
  {
    "label": "RoboBrowser",
    "importPath": "robobrowser",
    "description": "robobrowser",
    "isExtraImport": true,
    "detail": "robobrowser",
    "documentation": {}
  },
  {
    "label": "RoboBrowser",
    "importPath": "robobrowser",
    "description": "robobrowser",
    "isExtraImport": true,
    "detail": "robobrowser",
    "documentation": {}
  },
  {
    "label": "cherrypy",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "cherrypy",
    "description": "cherrypy",
    "detail": "cherrypy",
    "documentation": {}
  },
  {
    "label": "cups",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "cups",
    "description": "cups",
    "detail": "cups",
    "documentation": {}
  },
  {
    "label": "uuid",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "uuid",
    "description": "uuid",
    "detail": "uuid",
    "documentation": {}
  },
  {
    "label": "tempfile",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "tempfile",
    "description": "tempfile",
    "detail": "tempfile",
    "documentation": {}
  },
  {
    "label": "pyautogui",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "pyautogui",
    "description": "pyautogui",
    "detail": "pyautogui",
    "documentation": {}
  },
  {
    "label": "Image",
    "importPath": "PIL",
    "description": "PIL",
    "isExtraImport": true,
    "detail": "PIL",
    "documentation": {}
  },
  {
    "label": "ImageGrab",
    "importPath": "PIL",
    "description": "PIL",
    "isExtraImport": true,
    "detail": "PIL",
    "documentation": {}
  },
  {
    "label": "Image",
    "importPath": "PIL",
    "description": "PIL",
    "isExtraImport": true,
    "detail": "PIL",
    "documentation": {}
  },
  {
    "label": "ImageGrab",
    "importPath": "PIL",
    "description": "PIL",
    "isExtraImport": true,
    "detail": "PIL",
    "documentation": {}
  },
  {
    "label": "Image",
    "importPath": "PIL",
    "description": "PIL",
    "isExtraImport": true,
    "detail": "PIL",
    "documentation": {}
  },
  {
    "label": "Image",
    "importPath": "PIL",
    "description": "PIL",
    "isExtraImport": true,
    "detail": "PIL",
    "documentation": {}
  },
  {
    "label": "Image",
    "importPath": "PIL",
    "description": "PIL",
    "isExtraImport": true,
    "detail": "PIL",
    "documentation": {}
  },
  {
    "label": "Image",
    "importPath": "PIL",
    "description": "PIL",
    "isExtraImport": true,
    "detail": "PIL",
    "documentation": {}
  },
  {
    "label": "ImageGrab",
    "importPath": "PIL",
    "description": "PIL",
    "isExtraImport": true,
    "detail": "PIL",
    "documentation": {}
  },
  {
    "label": "RMSprop",
    "importPath": "tensorflow.keras.optimizers",
    "description": "tensorflow.keras.optimizers",
    "isExtraImport": true,
    "detail": "tensorflow.keras.optimizers",
    "documentation": {}
  },
  {
    "label": "RMSprop",
    "importPath": "tensorflow.keras.optimizers",
    "description": "tensorflow.keras.optimizers",
    "isExtraImport": true,
    "detail": "tensorflow.keras.optimizers",
    "documentation": {}
  },
  {
    "label": "ImageDataGenerator",
    "importPath": "tensorflow.keras.preprocessing.image",
    "description": "tensorflow.keras.preprocessing.image",
    "isExtraImport": true,
    "detail": "tensorflow.keras.preprocessing.image",
    "documentation": {}
  },
  {
    "label": "ImageDataGenerator",
    "importPath": "tensorflow.keras.preprocessing.image",
    "description": "tensorflow.keras.preprocessing.image",
    "isExtraImport": true,
    "detail": "tensorflow.keras.preprocessing.image",
    "documentation": {}
  },
  {
    "label": "askopenfilename",
    "importPath": "tkinter.filedialog",
    "description": "tkinter.filedialog",
    "isExtraImport": true,
    "detail": "tkinter.filedialog",
    "documentation": {}
  },
  {
    "label": "askopenfilename",
    "importPath": "tkinter.filedialog",
    "description": "tkinter.filedialog",
    "isExtraImport": true,
    "detail": "tkinter.filedialog",
    "documentation": {}
  },
  {
    "label": "image",
    "importPath": "keras.preprocessing",
    "description": "keras.preprocessing",
    "isExtraImport": true,
    "detail": "keras.preprocessing",
    "documentation": {}
  },
  {
    "label": "image",
    "importPath": "keras.preprocessing",
    "description": "keras.preprocessing",
    "isExtraImport": true,
    "detail": "keras.preprocessing",
    "documentation": {}
  },
  {
    "label": "socket",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "socket",
    "description": "socket",
    "detail": "socket",
    "documentation": {}
  },
  {
    "label": "pytube",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "pytube",
    "description": "pytube",
    "detail": "pytube",
    "documentation": {}
  },
  {
    "label": "dateutil.parser",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "dateutil.parser",
    "description": "dateutil.parser",
    "detail": "dateutil.parser",
    "documentation": {}
  },
  {
    "label": "parse",
    "importPath": "dateutil.parser",
    "description": "dateutil.parser",
    "isExtraImport": true,
    "detail": "dateutil.parser",
    "documentation": {}
  },
  {
    "label": "parse",
    "importPath": "dateutil.parser",
    "description": "dateutil.parser",
    "isExtraImport": true,
    "detail": "dateutil.parser",
    "documentation": {}
  },
  {
    "label": "parse",
    "importPath": "dateutil.parser",
    "description": "dateutil.parser",
    "isExtraImport": true,
    "detail": "dateutil.parser",
    "documentation": {}
  },
  {
    "label": "parse",
    "importPath": "dateutil.parser",
    "description": "dateutil.parser",
    "isExtraImport": true,
    "detail": "dateutil.parser",
    "documentation": {}
  },
  {
    "label": "DayLocator",
    "importPath": "matplotlib.dates",
    "description": "matplotlib.dates",
    "isExtraImport": true,
    "detail": "matplotlib.dates",
    "documentation": {}
  },
  {
    "label": "HourLocator",
    "importPath": "matplotlib.dates",
    "description": "matplotlib.dates",
    "isExtraImport": true,
    "detail": "matplotlib.dates",
    "documentation": {}
  },
  {
    "label": "DateFormatter",
    "importPath": "matplotlib.dates",
    "description": "matplotlib.dates",
    "isExtraImport": true,
    "detail": "matplotlib.dates",
    "documentation": {}
  },
  {
    "label": "DayLocator",
    "importPath": "matplotlib.dates",
    "description": "matplotlib.dates",
    "isExtraImport": true,
    "detail": "matplotlib.dates",
    "documentation": {}
  },
  {
    "label": "HourLocator",
    "importPath": "matplotlib.dates",
    "description": "matplotlib.dates",
    "isExtraImport": true,
    "detail": "matplotlib.dates",
    "documentation": {}
  },
  {
    "label": "DateFormatter",
    "importPath": "matplotlib.dates",
    "description": "matplotlib.dates",
    "isExtraImport": true,
    "detail": "matplotlib.dates",
    "documentation": {}
  },
  {
    "label": "DayLocator",
    "importPath": "matplotlib.dates",
    "description": "matplotlib.dates",
    "isExtraImport": true,
    "detail": "matplotlib.dates",
    "documentation": {}
  },
  {
    "label": "HourLocator",
    "importPath": "matplotlib.dates",
    "description": "matplotlib.dates",
    "isExtraImport": true,
    "detail": "matplotlib.dates",
    "documentation": {}
  },
  {
    "label": "DateFormatter",
    "importPath": "matplotlib.dates",
    "description": "matplotlib.dates",
    "isExtraImport": true,
    "detail": "matplotlib.dates",
    "documentation": {}
  },
  {
    "label": "DayLocator",
    "importPath": "matplotlib.dates",
    "description": "matplotlib.dates",
    "isExtraImport": true,
    "detail": "matplotlib.dates",
    "documentation": {}
  },
  {
    "label": "HourLocator",
    "importPath": "matplotlib.dates",
    "description": "matplotlib.dates",
    "isExtraImport": true,
    "detail": "matplotlib.dates",
    "documentation": {}
  },
  {
    "label": "DateFormatter",
    "importPath": "matplotlib.dates",
    "description": "matplotlib.dates",
    "isExtraImport": true,
    "detail": "matplotlib.dates",
    "documentation": {}
  },
  {
    "label": "Gtk",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "Gtk",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "GObject",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "GLib",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "Gio",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "Pango",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "Gdk",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "Gtk",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "Gedit",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "Vte",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "GObject",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "GLib",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "Gio",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "Pango",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "Gdk",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "Gtk",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "Gedit",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "Vte",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "GObject",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "GLib",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "Gio",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "Pango",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "Gdk",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "Gtk",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "Gedit",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "Vte",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "GObject",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "GLib",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "Gio",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "Pango",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "Gdk",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "Gtk",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "Gedit",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "Vte",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "GObject",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "GLib",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "Gio",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "Pango",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "Gdk",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "Gtk",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "Gedit",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "Vte",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "GObject",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "GLib",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "Gio",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "Pango",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "Gdk",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "Gtk",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "Gedit",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "Vte",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "Gtk",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "Gtk",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "GObject",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "GLib",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "Gio",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "Pango",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "Gdk",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "Gtk",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "Gedit",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "Vte",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "GObject",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "GLib",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "Gio",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "Pango",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "Gdk",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "Gtk",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "Gedit",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "Vte",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "GObject",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "GLib",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "Gio",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "Pango",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "Gdk",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "Gtk",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "Gedit",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "Vte",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "GObject",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "GLib",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "Gio",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "Pango",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "Gdk",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "Gtk",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "Gedit",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "Vte",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "GObject",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "GLib",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "Gio",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "Pango",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "Gdk",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "Gtk",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "Gedit",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "Vte",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "GObject",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "GLib",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "Gio",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "Pango",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "Gdk",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "Gtk",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "Gedit",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "Vte",
    "importPath": "gi.repository",
    "description": "gi.repository",
    "isExtraImport": true,
    "detail": "gi.repository",
    "documentation": {}
  },
  {
    "label": "types",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "types",
    "description": "types",
    "detail": "types",
    "documentation": {}
  },
  {
    "label": "GenericAlias",
    "importPath": "types",
    "description": "types",
    "isExtraImport": true,
    "detail": "types",
    "documentation": {}
  },
  {
    "label": "GenericAlias",
    "importPath": "types",
    "description": "types",
    "isExtraImport": true,
    "detail": "types",
    "documentation": {}
  },
  {
    "label": "weakref",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "weakref",
    "description": "weakref",
    "detail": "weakref",
    "documentation": {}
  },
  {
    "label": "dispatch_table",
    "importPath": "copyreg",
    "description": "copyreg",
    "isExtraImport": true,
    "detail": "copyreg",
    "documentation": {}
  },
  {
    "label": "dispatch_table",
    "importPath": "copyreg",
    "description": "copyreg",
    "isExtraImport": true,
    "detail": "copyreg",
    "documentation": {}
  },
  {
    "label": "math",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "math",
    "description": "math",
    "detail": "math",
    "documentation": {}
  },
  {
    "label": "isinf",
    "importPath": "math",
    "description": "math",
    "isExtraImport": true,
    "detail": "math",
    "documentation": {}
  },
  {
    "label": "ceil",
    "importPath": "math",
    "description": "math",
    "isExtraImport": true,
    "detail": "math",
    "documentation": {}
  },
  {
    "label": "sqrt",
    "importPath": "math",
    "description": "math",
    "isExtraImport": true,
    "detail": "math",
    "documentation": {}
  },
  {
    "label": "sqrt",
    "importPath": "math",
    "description": "math",
    "isExtraImport": true,
    "detail": "math",
    "documentation": {}
  },
  {
    "label": "ceil",
    "importPath": "math",
    "description": "math",
    "isExtraImport": true,
    "detail": "math",
    "documentation": {}
  },
  {
    "label": "floor",
    "importPath": "math",
    "description": "math",
    "isExtraImport": true,
    "detail": "math",
    "documentation": {}
  },
  {
    "label": "*",
    "importPath": "math",
    "description": "math",
    "isExtraImport": true,
    "detail": "math",
    "documentation": {}
  },
  {
    "label": "sqrt",
    "importPath": "math",
    "description": "math",
    "isExtraImport": true,
    "detail": "math",
    "documentation": {}
  },
  {
    "label": "ceil",
    "importPath": "math",
    "description": "math",
    "isExtraImport": true,
    "detail": "math",
    "documentation": {}
  },
  {
    "label": "floor",
    "importPath": "math",
    "description": "math",
    "isExtraImport": true,
    "detail": "math",
    "documentation": {}
  },
  {
    "label": "*",
    "importPath": "math",
    "description": "math",
    "isExtraImport": true,
    "detail": "math",
    "documentation": {}
  },
  {
    "label": "ceil",
    "importPath": "math",
    "description": "math",
    "isExtraImport": true,
    "detail": "math",
    "documentation": {}
  },
  {
    "label": "sqrt",
    "importPath": "math",
    "description": "math",
    "isExtraImport": true,
    "detail": "math",
    "documentation": {}
  },
  {
    "label": "isinf",
    "importPath": "math",
    "description": "math",
    "isExtraImport": true,
    "detail": "math",
    "documentation": {}
  },
  {
    "label": "ceil",
    "importPath": "math",
    "description": "math",
    "isExtraImport": true,
    "detail": "math",
    "documentation": {}
  },
  {
    "label": "floor",
    "importPath": "math",
    "description": "math",
    "isExtraImport": true,
    "detail": "math",
    "documentation": {}
  },
  {
    "label": "*",
    "importPath": "math",
    "description": "math",
    "isExtraImport": true,
    "detail": "math",
    "documentation": {}
  },
  {
    "label": "urllib2",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "urllib2",
    "description": "urllib2",
    "detail": "urllib2",
    "documentation": {}
  },
  {
    "label": "BeautifulSoup",
    "importPath": "BeautifulSoup",
    "description": "BeautifulSoup",
    "isExtraImport": true,
    "detail": "BeautifulSoup",
    "documentation": {}
  },
  {
    "label": "BeautifulSoup",
    "importPath": "BeautifulSoup",
    "description": "BeautifulSoup",
    "isExtraImport": true,
    "detail": "BeautifulSoup",
    "documentation": {}
  },
  {
    "label": "BeautifulSoup",
    "importPath": "BeautifulSoup",
    "description": "BeautifulSoup",
    "isExtraImport": true,
    "detail": "BeautifulSoup",
    "documentation": {}
  },
  {
    "label": "BeautifulSoup",
    "importPath": "BeautifulSoup",
    "description": "BeautifulSoup",
    "isExtraImport": true,
    "detail": "BeautifulSoup",
    "documentation": {}
  },
  {
    "label": "cdist",
    "importPath": "scipy.spatial.distance",
    "description": "scipy.spatial.distance",
    "isExtraImport": true,
    "detail": "scipy.spatial.distance",
    "documentation": {}
  },
  {
    "label": "cdist",
    "importPath": "scipy.spatial.distance",
    "description": "scipy.spatial.distance",
    "isExtraImport": true,
    "detail": "scipy.spatial.distance",
    "documentation": {}
  },
  {
    "label": "nbformat",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "nbformat",
    "description": "nbformat",
    "detail": "nbformat",
    "documentation": {}
  },
  {
    "label": "base64",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "base64",
    "description": "base64",
    "detail": "base64",
    "documentation": {}
  },
  {
    "label": "b64decode",
    "importPath": "base64",
    "description": "base64",
    "isExtraImport": true,
    "detail": "base64",
    "documentation": {}
  },
  {
    "label": "b64decode",
    "importPath": "base64",
    "description": "base64",
    "isExtraImport": true,
    "detail": "base64",
    "documentation": {}
  },
  {
    "label": "b64decode",
    "importPath": "base64",
    "description": "base64",
    "isExtraImport": true,
    "detail": "base64",
    "documentation": {}
  },
  {
    "label": "b64decode",
    "importPath": "base64",
    "description": "base64",
    "isExtraImport": true,
    "detail": "base64",
    "documentation": {}
  },
  {
    "label": "b64decode",
    "importPath": "base64",
    "description": "base64",
    "isExtraImport": true,
    "detail": "base64",
    "documentation": {}
  },
  {
    "label": "b64decode",
    "importPath": "base64",
    "description": "base64",
    "isExtraImport": true,
    "detail": "base64",
    "documentation": {}
  },
  {
    "label": "b64decode",
    "importPath": "base64",
    "description": "base64",
    "isExtraImport": true,
    "detail": "base64",
    "documentation": {}
  },
  {
    "label": "b64decode",
    "importPath": "base64",
    "description": "base64",
    "isExtraImport": true,
    "detail": "base64",
    "documentation": {}
  },
  {
    "label": "WordCloud",
    "importPath": "wordcloud",
    "description": "wordcloud",
    "isExtraImport": true,
    "detail": "wordcloud",
    "documentation": {}
  },
  {
    "label": "WordCloud",
    "importPath": "wordcloud",
    "description": "wordcloud",
    "isExtraImport": true,
    "detail": "wordcloud",
    "documentation": {}
  },
  {
    "label": "WordCloud",
    "importPath": "wordcloud",
    "description": "wordcloud",
    "isExtraImport": true,
    "detail": "wordcloud",
    "documentation": {}
  },
  {
    "label": "WordCloud",
    "importPath": "wordcloud",
    "description": "wordcloud",
    "isExtraImport": true,
    "detail": "wordcloud",
    "documentation": {}
  },
  {
    "label": "urllib.request",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "urllib.request",
    "description": "urllib.request",
    "detail": "urllib.request",
    "documentation": {}
  },
  {
    "label": "git",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "git",
    "description": "git",
    "detail": "git",
    "documentation": {}
  },
  {
    "label": "urllib",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "urllib",
    "description": "urllib",
    "detail": "urllib",
    "documentation": {}
  },
  {
    "label": "hashlib",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "hashlib",
    "description": "hashlib",
    "detail": "hashlib",
    "documentation": {}
  },
  {
    "label": "OptionParser",
    "importPath": "optparse",
    "description": "optparse",
    "isExtraImport": true,
    "detail": "optparse",
    "documentation": {}
  },
  {
    "label": "OptionParser",
    "importPath": "optparse",
    "description": "optparse",
    "isExtraImport": true,
    "detail": "optparse",
    "documentation": {}
  },
  {
    "label": "OptionParser",
    "importPath": "optparse",
    "description": "optparse",
    "isExtraImport": true,
    "detail": "optparse",
    "documentation": {}
  },
  {
    "label": "OptionParser",
    "importPath": "optparse",
    "description": "optparse",
    "isExtraImport": true,
    "detail": "optparse",
    "documentation": {}
  },
  {
    "label": "OptionParser",
    "importPath": "optparse",
    "description": "optparse",
    "isExtraImport": true,
    "detail": "optparse",
    "documentation": {}
  },
  {
    "label": "OptionParser",
    "importPath": "optparse",
    "description": "optparse",
    "isExtraImport": true,
    "detail": "optparse",
    "documentation": {}
  },
  {
    "label": "OptionParser",
    "importPath": "optparse",
    "description": "optparse",
    "isExtraImport": true,
    "detail": "optparse",
    "documentation": {}
  },
  {
    "label": "OptionParser",
    "importPath": "optparse",
    "description": "optparse",
    "isExtraImport": true,
    "detail": "optparse",
    "documentation": {}
  },
  {
    "label": "BaseHTTPServer",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "BaseHTTPServer",
    "description": "BaseHTTPServer",
    "detail": "BaseHTTPServer",
    "documentation": {}
  },
  {
    "label": "SimpleHTTPRequestHandler",
    "importPath": "SimpleHTTPServer",
    "description": "SimpleHTTPServer",
    "isExtraImport": true,
    "detail": "SimpleHTTPServer",
    "documentation": {}
  },
  {
    "label": "SimpleHTTPRequestHandler",
    "importPath": "SimpleHTTPServer",
    "description": "SimpleHTTPServer",
    "isExtraImport": true,
    "detail": "SimpleHTTPServer",
    "documentation": {}
  },
  {
    "label": "pygithub3",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "pygithub3",
    "description": "pygithub3",
    "detail": "pygithub3",
    "documentation": {}
  },
  {
    "label": "logging,",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "logging.",
    "description": "logging.",
    "detail": "logging.",
    "documentation": {}
  },
  {
    "label": "smtplib",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "smtplib",
    "description": "smtplib",
    "detail": "smtplib",
    "documentation": {}
  },
  {
    "label": "MIMEText",
    "importPath": "email.mime.text",
    "description": "email.mime.text",
    "isExtraImport": true,
    "detail": "email.mime.text",
    "documentation": {}
  },
  {
    "label": "MIMEText",
    "importPath": "email.mime.text",
    "description": "email.mime.text",
    "isExtraImport": true,
    "detail": "email.mime.text",
    "documentation": {}
  },
  {
    "label": "MIMEText",
    "importPath": "email.mime.text",
    "description": "email.mime.text",
    "isExtraImport": true,
    "detail": "email.mime.text",
    "documentation": {}
  },
  {
    "label": "MIMEText",
    "importPath": "email.mime.text",
    "description": "email.mime.text",
    "isExtraImport": true,
    "detail": "email.mime.text",
    "documentation": {}
  },
  {
    "label": "MIMEText",
    "importPath": "email.mime.text",
    "description": "email.mime.text",
    "isExtraImport": true,
    "detail": "email.mime.text",
    "documentation": {}
  },
  {
    "label": "MIMEText",
    "importPath": "email.mime.text",
    "description": "email.mime.text",
    "isExtraImport": true,
    "detail": "email.mime.text",
    "documentation": {}
  },
  {
    "label": "MIMEText",
    "importPath": "email.mime.text",
    "description": "email.mime.text",
    "isExtraImport": true,
    "detail": "email.mime.text",
    "documentation": {}
  },
  {
    "label": "MIMEText",
    "importPath": "email.mime.text",
    "description": "email.mime.text",
    "isExtraImport": true,
    "detail": "email.mime.text",
    "documentation": {}
  },
  {
    "label": "MIMEText",
    "importPath": "email.mime.text",
    "description": "email.mime.text",
    "isExtraImport": true,
    "detail": "email.mime.text",
    "documentation": {}
  },
  {
    "label": "MIMEText",
    "importPath": "email.mime.text",
    "description": "email.mime.text",
    "isExtraImport": true,
    "detail": "email.mime.text",
    "documentation": {}
  },
  {
    "label": "MIMEText",
    "importPath": "email.mime.text",
    "description": "email.mime.text",
    "isExtraImport": true,
    "detail": "email.mime.text",
    "documentation": {}
  },
  {
    "label": "MIMEText",
    "importPath": "email.mime.text",
    "description": "email.mime.text",
    "isExtraImport": true,
    "detail": "email.mime.text",
    "documentation": {}
  },
  {
    "label": "MIMEText",
    "importPath": "email.mime.text",
    "description": "email.mime.text",
    "isExtraImport": true,
    "detail": "email.mime.text",
    "documentation": {}
  },
  {
    "label": "MIMEText",
    "importPath": "email.mime.text",
    "description": "email.mime.text",
    "isExtraImport": true,
    "detail": "email.mime.text",
    "documentation": {}
  },
  {
    "label": "MIMEText",
    "importPath": "email.mime.text",
    "description": "email.mime.text",
    "isExtraImport": true,
    "detail": "email.mime.text",
    "documentation": {}
  },
  {
    "label": "MIMEText",
    "importPath": "email.mime.text",
    "description": "email.mime.text",
    "isExtraImport": true,
    "detail": "email.mime.text",
    "documentation": {}
  },
  {
    "label": "sys,",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "sys.",
    "description": "sys.",
    "detail": "sys.",
    "documentation": {}
  },
  {
    "label": "HttpResponse",
    "importPath": "django.http",
    "description": "django.http",
    "isExtraImport": true,
    "detail": "django.http",
    "documentation": {}
  },
  {
    "label": "HttpResponse",
    "importPath": "django.http",
    "description": "django.http",
    "isExtraImport": true,
    "detail": "django.http",
    "documentation": {}
  },
  {
    "label": "never_cache",
    "importPath": "django.views.decorators.cache",
    "description": "django.views.decorators.cache",
    "isExtraImport": true,
    "detail": "django.views.decorators.cache",
    "documentation": {}
  },
  {
    "label": "never_cache",
    "importPath": "django.views.decorators.cache",
    "description": "django.views.decorators.cache",
    "isExtraImport": true,
    "detail": "django.views.decorators.cache",
    "documentation": {}
  },
  {
    "label": "csrf_exempt",
    "importPath": "django.views.decorators.csrf",
    "description": "django.views.decorators.csrf",
    "isExtraImport": true,
    "detail": "django.views.decorators.csrf",
    "documentation": {}
  },
  {
    "label": "csrf_exempt",
    "importPath": "django.views.decorators.csrf",
    "description": "django.views.decorators.csrf",
    "isExtraImport": true,
    "detail": "django.views.decorators.csrf",
    "documentation": {}
  },
  {
    "label": "require_http_methods",
    "importPath": "django.views.decorators.http",
    "description": "django.views.decorators.http",
    "isExtraImport": true,
    "detail": "django.views.decorators.http",
    "documentation": {}
  },
  {
    "label": "require_http_methods",
    "importPath": "django.views.decorators.http",
    "description": "django.views.decorators.http",
    "isExtraImport": true,
    "detail": "django.views.decorators.http",
    "documentation": {}
  },
  {
    "label": "EmailReplyParser",
    "importPath": "email_reply_parser",
    "description": "email_reply_parser",
    "isExtraImport": true,
    "detail": "email_reply_parser",
    "documentation": {}
  },
  {
    "label": "EmailReplyParser",
    "importPath": "email_reply_parser",
    "description": "email_reply_parser",
    "isExtraImport": true,
    "detail": "email_reply_parser",
    "documentation": {}
  },
  {
    "label": "parseaddr",
    "importPath": "email.utils",
    "description": "email.utils",
    "isExtraImport": true,
    "detail": "email.utils",
    "documentation": {}
  },
  {
    "label": "parseaddr",
    "importPath": "email.utils",
    "description": "email.utils",
    "isExtraImport": true,
    "detail": "email.utils",
    "documentation": {}
  },
  {
    "label": "process_inbound_email",
    "importPath": "sentry.tasks.email",
    "description": "sentry.tasks.email",
    "isExtraImport": true,
    "detail": "sentry.tasks.email",
    "documentation": {}
  },
  {
    "label": "process_inbound_email",
    "importPath": "sentry.tasks.email",
    "description": "sentry.tasks.email",
    "isExtraImport": true,
    "detail": "sentry.tasks.email",
    "documentation": {}
  },
  {
    "label": "email_to_group_id",
    "importPath": "sentry.utils.email",
    "description": "sentry.utils.email",
    "isExtraImport": true,
    "detail": "sentry.utils.email",
    "documentation": {}
  },
  {
    "label": "group_id_to_email",
    "importPath": "sentry.utils.email",
    "description": "sentry.utils.email",
    "isExtraImport": true,
    "detail": "sentry.utils.email",
    "documentation": {}
  },
  {
    "label": "email_to_group_id",
    "importPath": "sentry.utils.email",
    "description": "sentry.utils.email",
    "isExtraImport": true,
    "detail": "sentry.utils.email",
    "documentation": {}
  },
  {
    "label": "group_id_to_email",
    "importPath": "sentry.utils.email",
    "description": "sentry.utils.email",
    "isExtraImport": true,
    "detail": "sentry.utils.email",
    "documentation": {}
  },
  {
    "label": "requests.exceptions",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "requests.exceptions",
    "description": "requests.exceptions",
    "detail": "requests.exceptions",
    "documentation": {}
  },
  {
    "label": "urllib3",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "urllib3",
    "description": "urllib3",
    "detail": "urllib3",
    "documentation": {}
  },
  {
    "label": "unicodedata",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "unicodedata",
    "description": "unicodedata",
    "detail": "unicodedata",
    "documentation": {}
  },
  {
    "label": "pandas",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "pandas",
    "description": "pandas",
    "detail": "pandas",
    "documentation": {}
  },
  {
    "label": "pygtk",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "pygtk",
    "description": "pygtk",
    "detail": "pygtk",
    "documentation": {}
  },
  {
    "label": "gtk",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "gtk",
    "description": "gtk",
    "detail": "gtk",
    "documentation": {}
  },
  {
    "label": "gtksourceview2",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "gtksourceview2",
    "description": "gtksourceview2",
    "detail": "gtksourceview2",
    "documentation": {}
  },
  {
    "label": "pango",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "pango",
    "description": "pango",
    "detail": "pango",
    "documentation": {}
  },
  {
    "label": "mul",
    "importPath": "operator",
    "description": "operator",
    "isExtraImport": true,
    "detail": "operator",
    "documentation": {}
  },
  {
    "label": "mul",
    "importPath": "operator",
    "description": "operator",
    "isExtraImport": true,
    "detail": "operator",
    "documentation": {}
  },
  {
    "label": "poisson",
    "importPath": "numpy.random",
    "description": "numpy.random",
    "isExtraImport": true,
    "detail": "numpy.random",
    "documentation": {}
  },
  {
    "label": "poisson",
    "importPath": "numpy.random",
    "description": "numpy.random",
    "isExtraImport": true,
    "detail": "numpy.random",
    "documentation": {}
  },
  {
    "label": "poisson",
    "importPath": "numpy.random",
    "description": "numpy.random",
    "isExtraImport": true,
    "detail": "numpy.random",
    "documentation": {}
  },
  {
    "label": "poisson",
    "importPath": "numpy.random",
    "description": "numpy.random",
    "isExtraImport": true,
    "detail": "numpy.random",
    "documentation": {}
  },
  {
    "label": "poisson",
    "importPath": "numpy.random",
    "description": "numpy.random",
    "isExtraImport": true,
    "detail": "numpy.random",
    "documentation": {}
  },
  {
    "label": "poisson",
    "importPath": "numpy.random",
    "description": "numpy.random",
    "isExtraImport": true,
    "detail": "numpy.random",
    "documentation": {}
  },
  {
    "label": "poisson",
    "importPath": "numpy.random",
    "description": "numpy.random",
    "isExtraImport": true,
    "detail": "numpy.random",
    "documentation": {}
  },
  {
    "label": "poisson",
    "importPath": "numpy.random",
    "description": "numpy.random",
    "isExtraImport": true,
    "detail": "numpy.random",
    "documentation": {}
  },
  {
    "label": "SlackClient",
    "importPath": "slackclient",
    "description": "slackclient",
    "isExtraImport": true,
    "detail": "slackclient",
    "documentation": {}
  },
  {
    "label": "SlackClient",
    "importPath": "slackclient",
    "description": "slackclient",
    "isExtraImport": true,
    "detail": "slackclient",
    "documentation": {}
  },
  {
    "label": "SlackClient",
    "importPath": "slackclient",
    "description": "slackclient",
    "isExtraImport": true,
    "detail": "slackclient",
    "documentation": {}
  },
  {
    "label": "SlackClient",
    "importPath": "slackclient",
    "description": "slackclient",
    "isExtraImport": true,
    "detail": "slackclient",
    "documentation": {}
  },
  {
    "label": "urllib.error",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "urllib.error",
    "description": "urllib.error",
    "detail": "urllib.error",
    "documentation": {}
  },
  {
    "label": "getopt",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "getopt",
    "description": "getopt",
    "detail": "getopt",
    "documentation": {}
  },
  {
    "label": "convert_from_path",
    "importPath": "pdf2image",
    "description": "pdf2image",
    "isExtraImport": true,
    "detail": "pdf2image",
    "documentation": {}
  },
  {
    "label": "convert_from_path",
    "importPath": "pdf2image",
    "description": "pdf2image",
    "isExtraImport": true,
    "detail": "pdf2image",
    "documentation": {}
  },
  {
    "label": "pylab",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "pylab",
    "description": "pylab",
    "detail": "pylab",
    "documentation": {}
  },
  {
    "label": "Human",
    "importPath": "human",
    "description": "human",
    "isExtraImport": true,
    "detail": "human",
    "documentation": {}
  },
  {
    "label": "Human",
    "importPath": "human",
    "description": "human",
    "isExtraImport": true,
    "detail": "human",
    "documentation": {}
  },
  {
    "label": "Human",
    "importPath": "human",
    "description": "human",
    "isExtraImport": true,
    "detail": "human",
    "documentation": {}
  },
  {
    "label": "Superhero",
    "importPath": "superhero",
    "description": "superhero",
    "isExtraImport": true,
    "detail": "superhero",
    "documentation": {}
  },
  {
    "label": "Superhero",
    "importPath": "superhero",
    "description": "superhero",
    "isExtraImport": true,
    "detail": "superhero",
    "documentation": {}
  },
  {
    "label": "Superhero",
    "importPath": "superhero",
    "description": "superhero",
    "isExtraImport": true,
    "detail": "superhero",
    "documentation": {}
  },
  {
    "label": "Bat",
    "importPath": "bat",
    "description": "bat",
    "isExtraImport": true,
    "detail": "bat",
    "documentation": {}
  },
  {
    "label": "Bat",
    "importPath": "bat",
    "description": "bat",
    "isExtraImport": true,
    "detail": "bat",
    "documentation": {}
  },
  {
    "label": "Bat",
    "importPath": "bat",
    "description": "bat",
    "isExtraImport": true,
    "detail": "bat",
    "documentation": {}
  },
  {
    "label": "mysql.connector",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "mysql.connector",
    "description": "mysql.connector",
    "detail": "mysql.connector",
    "documentation": {}
  },
  {
    "label": "errorcode",
    "importPath": "mysql.connector",
    "description": "mysql.connector",
    "isExtraImport": true,
    "detail": "mysql.connector",
    "documentation": {}
  },
  {
    "label": "errorcode",
    "importPath": "mysql.connector",
    "description": "mysql.connector",
    "isExtraImport": true,
    "detail": "mysql.connector",
    "documentation": {}
  },
  {
    "label": "*",
    "importPath": "z3",
    "description": "z3",
    "isExtraImport": true,
    "detail": "z3",
    "documentation": {}
  },
  {
    "label": "*",
    "importPath": "z3",
    "description": "z3",
    "isExtraImport": true,
    "detail": "z3",
    "documentation": {}
  },
  {
    "label": "*",
    "importPath": "z3",
    "description": "z3",
    "isExtraImport": true,
    "detail": "z3",
    "documentation": {}
  },
  {
    "label": "*",
    "importPath": "z3",
    "description": "z3",
    "isExtraImport": true,
    "detail": "z3",
    "documentation": {}
  },
  {
    "label": "Lea",
    "importPath": "lea",
    "description": "lea",
    "isExtraImport": true,
    "detail": "lea",
    "documentation": {}
  },
  {
    "label": "Lea",
    "importPath": "lea",
    "description": "lea",
    "isExtraImport": true,
    "detail": "lea",
    "documentation": {}
  },
  {
    "label": "Lea",
    "importPath": "lea",
    "description": "lea",
    "isExtraImport": true,
    "detail": "lea",
    "documentation": {}
  },
  {
    "label": "Lea",
    "importPath": "lea",
    "description": "lea",
    "isExtraImport": true,
    "detail": "lea",
    "documentation": {}
  },
  {
    "label": "locale",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "locale",
    "description": "locale",
    "detail": "locale",
    "documentation": {}
  },
  {
    "label": "publish_cmdline",
    "importPath": "docutils.core",
    "description": "docutils.core",
    "isExtraImport": true,
    "detail": "docutils.core",
    "documentation": {}
  },
  {
    "label": "default_description",
    "importPath": "docutils.core",
    "description": "docutils.core",
    "isExtraImport": true,
    "detail": "docutils.core",
    "documentation": {}
  },
  {
    "label": "publish_cmdline",
    "importPath": "docutils.core",
    "description": "docutils.core",
    "isExtraImport": true,
    "detail": "docutils.core",
    "documentation": {}
  },
  {
    "label": "default_description",
    "importPath": "docutils.core",
    "description": "docutils.core",
    "isExtraImport": true,
    "detail": "docutils.core",
    "documentation": {}
  },
  {
    "label": "publish_cmdline",
    "importPath": "docutils.core",
    "description": "docutils.core",
    "isExtraImport": true,
    "detail": "docutils.core",
    "documentation": {}
  },
  {
    "label": "default_description",
    "importPath": "docutils.core",
    "description": "docutils.core",
    "isExtraImport": true,
    "detail": "docutils.core",
    "documentation": {}
  },
  {
    "label": "publish_cmdline",
    "importPath": "docutils.core",
    "description": "docutils.core",
    "isExtraImport": true,
    "detail": "docutils.core",
    "documentation": {}
  },
  {
    "label": "default_description",
    "importPath": "docutils.core",
    "description": "docutils.core",
    "isExtraImport": true,
    "detail": "docutils.core",
    "documentation": {}
  },
  {
    "label": "numba",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "numba",
    "description": "numba",
    "detail": "numba",
    "documentation": {}
  },
  {
    "label": "codecs",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "codecs",
    "description": "codecs",
    "detail": "codecs",
    "documentation": {}
  },
  {
    "label": "markdown",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "markdown",
    "description": "markdown",
    "detail": "markdown",
    "documentation": {}
  },
  {
    "label": "gettext",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "gettext",
    "description": "gettext",
    "detail": "gettext",
    "documentation": {}
  },
  {
    "label": "*",
    "importPath": "gpdefs",
    "description": "gpdefs",
    "isExtraImport": true,
    "detail": "gpdefs",
    "documentation": {}
  },
  {
    "label": "*",
    "importPath": "gpdefs",
    "description": "gpdefs",
    "isExtraImport": true,
    "detail": "gpdefs",
    "documentation": {}
  },
  {
    "label": "*",
    "importPath": "gpdefs",
    "description": "gpdefs",
    "isExtraImport": true,
    "detail": "gpdefs",
    "documentation": {}
  },
  {
    "label": "*",
    "importPath": "gpdefs",
    "description": "gpdefs",
    "isExtraImport": true,
    "detail": "gpdefs",
    "documentation": {}
  },
  {
    "label": "*",
    "importPath": "gpdefs",
    "description": "gpdefs",
    "isExtraImport": true,
    "detail": "gpdefs",
    "documentation": {}
  },
  {
    "label": "*",
    "importPath": "gpdefs",
    "description": "gpdefs",
    "isExtraImport": true,
    "detail": "gpdefs",
    "documentation": {}
  },
  {
    "label": "*",
    "importPath": "gpdefs",
    "description": "gpdefs",
    "isExtraImport": true,
    "detail": "gpdefs",
    "documentation": {}
  },
  {
    "label": "*",
    "importPath": "gpdefs",
    "description": "gpdefs",
    "isExtraImport": true,
    "detail": "gpdefs",
    "documentation": {}
  },
  {
    "label": "*",
    "importPath": "gpdefs",
    "description": "gpdefs",
    "isExtraImport": true,
    "detail": "gpdefs",
    "documentation": {}
  },
  {
    "label": "*",
    "importPath": "gpdefs",
    "description": "gpdefs",
    "isExtraImport": true,
    "detail": "gpdefs",
    "documentation": {}
  },
  {
    "label": "*",
    "importPath": "gpdefs",
    "description": "gpdefs",
    "isExtraImport": true,
    "detail": "gpdefs",
    "documentation": {}
  },
  {
    "label": "*",
    "importPath": "gpdefs",
    "description": "gpdefs",
    "isExtraImport": true,
    "detail": "gpdefs",
    "documentation": {}
  },
  {
    "label": "SIGTERM",
    "importPath": "signal",
    "description": "signal",
    "isExtraImport": true,
    "detail": "signal",
    "documentation": {}
  },
  {
    "label": "SIGKILL",
    "importPath": "signal",
    "description": "signal",
    "isExtraImport": true,
    "detail": "signal",
    "documentation": {}
  },
  {
    "label": "SIGTERM",
    "importPath": "signal",
    "description": "signal",
    "isExtraImport": true,
    "detail": "signal",
    "documentation": {}
  },
  {
    "label": "SIGKILL",
    "importPath": "signal",
    "description": "signal",
    "isExtraImport": true,
    "detail": "signal",
    "documentation": {}
  },
  {
    "label": "SIGTERM",
    "importPath": "signal",
    "description": "signal",
    "isExtraImport": true,
    "detail": "signal",
    "documentation": {}
  },
  {
    "label": "SIGKILL",
    "importPath": "signal",
    "description": "signal",
    "isExtraImport": true,
    "detail": "signal",
    "documentation": {}
  },
  {
    "label": "SIGTERM",
    "importPath": "signal",
    "description": "signal",
    "isExtraImport": true,
    "detail": "signal",
    "documentation": {}
  },
  {
    "label": "SIGKILL",
    "importPath": "signal",
    "description": "signal",
    "isExtraImport": true,
    "detail": "signal",
    "documentation": {}
  },
  {
    "label": "SIGTERM",
    "importPath": "signal",
    "description": "signal",
    "isExtraImport": true,
    "detail": "signal",
    "documentation": {}
  },
  {
    "label": "SIGKILL",
    "importPath": "signal",
    "description": "signal",
    "isExtraImport": true,
    "detail": "signal",
    "documentation": {}
  },
  {
    "label": "SIGTERM",
    "importPath": "signal",
    "description": "signal",
    "isExtraImport": true,
    "detail": "signal",
    "documentation": {}
  },
  {
    "label": "SIGKILL",
    "importPath": "signal",
    "description": "signal",
    "isExtraImport": true,
    "detail": "signal",
    "documentation": {}
  },
  {
    "label": "SIGTERM",
    "importPath": "signal",
    "description": "signal",
    "isExtraImport": true,
    "detail": "signal",
    "documentation": {}
  },
  {
    "label": "SIGKILL",
    "importPath": "signal",
    "description": "signal",
    "isExtraImport": true,
    "detail": "signal",
    "documentation": {}
  },
  {
    "label": "SIGTERM",
    "importPath": "signal",
    "description": "signal",
    "isExtraImport": true,
    "detail": "signal",
    "documentation": {}
  },
  {
    "label": "SIGKILL",
    "importPath": "signal",
    "description": "signal",
    "isExtraImport": true,
    "detail": "signal",
    "documentation": {}
  },
  {
    "label": "SIGTERM",
    "importPath": "signal",
    "description": "signal",
    "isExtraImport": true,
    "detail": "signal",
    "documentation": {}
  },
  {
    "label": "SIGKILL",
    "importPath": "signal",
    "description": "signal",
    "isExtraImport": true,
    "detail": "signal",
    "documentation": {}
  },
  {
    "label": "SIGTERM",
    "importPath": "signal",
    "description": "signal",
    "isExtraImport": true,
    "detail": "signal",
    "documentation": {}
  },
  {
    "label": "SIGKILL",
    "importPath": "signal",
    "description": "signal",
    "isExtraImport": true,
    "detail": "signal",
    "documentation": {}
  },
  {
    "label": "SIGTERM",
    "importPath": "signal",
    "description": "signal",
    "isExtraImport": true,
    "detail": "signal",
    "documentation": {}
  },
  {
    "label": "SIGKILL",
    "importPath": "signal",
    "description": "signal",
    "isExtraImport": true,
    "detail": "signal",
    "documentation": {}
  },
  {
    "label": "SIGTERM",
    "importPath": "signal",
    "description": "signal",
    "isExtraImport": true,
    "detail": "signal",
    "documentation": {}
  },
  {
    "label": "SIGKILL",
    "importPath": "signal",
    "description": "signal",
    "isExtraImport": true,
    "detail": "signal",
    "documentation": {}
  },
  {
    "label": "scrapy",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "scrapy",
    "description": "scrapy",
    "detail": "scrapy",
    "documentation": {}
  },
  {
    "label": "re,",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "re.",
    "description": "re.",
    "detail": "re.",
    "documentation": {}
  },
  {
    "label": "readline",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "readline",
    "description": "readline",
    "detail": "readline",
    "documentation": {}
  },
  {
    "label": "mock",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "mock",
    "description": "mock",
    "detail": "mock",
    "documentation": {}
  },
  {
    "label": "TestCase",
    "importPath": "sentry.testutils",
    "description": "sentry.testutils",
    "isExtraImport": true,
    "detail": "sentry.testutils",
    "documentation": {}
  },
  {
    "label": "TestCase",
    "importPath": "sentry.testutils",
    "description": "sentry.testutils",
    "isExtraImport": true,
    "detail": "sentry.testutils",
    "documentation": {}
  },
  {
    "label": "MAXINT",
    "importPath": "xmlrpc.client",
    "description": "xmlrpc.client",
    "isExtraImport": true,
    "detail": "xmlrpc.client",
    "documentation": {}
  },
  {
    "label": "MAXINT",
    "importPath": "xmlrpc.client",
    "description": "xmlrpc.client",
    "isExtraImport": true,
    "detail": "xmlrpc.client",
    "documentation": {}
  },
  {
    "label": "webdriver",
    "importPath": "selenium",
    "description": "selenium",
    "isExtraImport": true,
    "detail": "selenium",
    "documentation": {}
  },
  {
    "label": "webdriver",
    "importPath": "selenium",
    "description": "selenium",
    "isExtraImport": true,
    "detail": "selenium",
    "documentation": {}
  },
  {
    "label": "webdriver",
    "importPath": "selenium",
    "description": "selenium",
    "isExtraImport": true,
    "detail": "selenium",
    "documentation": {}
  },
  {
    "label": "webdriver",
    "importPath": "selenium",
    "description": "selenium",
    "isExtraImport": true,
    "detail": "selenium",
    "documentation": {}
  },
  {
    "label": "webdriver",
    "importPath": "selenium",
    "description": "selenium",
    "isExtraImport": true,
    "detail": "selenium",
    "documentation": {}
  },
  {
    "label": "webdriver",
    "importPath": "selenium",
    "description": "selenium",
    "isExtraImport": true,
    "detail": "selenium",
    "documentation": {}
  },
  {
    "label": "webdriver",
    "importPath": "selenium",
    "description": "selenium",
    "isExtraImport": true,
    "detail": "selenium",
    "documentation": {}
  },
  {
    "label": "webdriver",
    "importPath": "selenium",
    "description": "selenium",
    "isExtraImport": true,
    "detail": "selenium",
    "documentation": {}
  },
  {
    "label": "webdriver",
    "importPath": "selenium",
    "description": "selenium",
    "isExtraImport": true,
    "detail": "selenium",
    "documentation": {}
  },
  {
    "label": "webdriver",
    "importPath": "selenium",
    "description": "selenium",
    "isExtraImport": true,
    "detail": "selenium",
    "documentation": {}
  },
  {
    "label": "webdriver",
    "importPath": "selenium",
    "description": "selenium",
    "isExtraImport": true,
    "detail": "selenium",
    "documentation": {}
  },
  {
    "label": "BytesIO",
    "importPath": "io",
    "description": "io",
    "isExtraImport": true,
    "detail": "io",
    "documentation": {}
  },
  {
    "label": "BytesIO",
    "importPath": "io",
    "description": "io",
    "isExtraImport": true,
    "detail": "io",
    "documentation": {}
  },
  {
    "label": "BytesIO",
    "importPath": "io",
    "description": "io",
    "isExtraImport": true,
    "detail": "io",
    "documentation": {}
  },
  {
    "label": "add_new_task",
    "importPath": "dbfunctions",
    "description": "dbfunctions",
    "isExtraImport": true,
    "detail": "dbfunctions",
    "documentation": {}
  },
  {
    "label": "get_complete_tasks",
    "importPath": "dbfunctions",
    "description": "dbfunctions",
    "isExtraImport": true,
    "detail": "dbfunctions",
    "documentation": {}
  },
  {
    "label": "get_incomplete_tasks",
    "importPath": "dbfunctions",
    "description": "dbfunctions",
    "isExtraImport": true,
    "detail": "dbfunctions",
    "documentation": {}
  },
  {
    "label": "mark_task_complete",
    "importPath": "dbfunctions",
    "description": "dbfunctions",
    "isExtraImport": true,
    "detail": "dbfunctions",
    "documentation": {}
  },
  {
    "label": "raw_input",
    "importPath": "fileinfo",
    "description": "fileinfo",
    "isExtraImport": true,
    "detail": "fileinfo",
    "documentation": {}
  },
  {
    "label": "ThreadPoolExecutor",
    "importPath": "concurrent.futures",
    "description": "concurrent.futures",
    "isExtraImport": true,
    "detail": "concurrent.futures",
    "documentation": {}
  },
  {
    "label": "ThreadPoolExecutor",
    "importPath": "concurrent.futures",
    "description": "concurrent.futures",
    "isExtraImport": true,
    "detail": "concurrent.futures",
    "documentation": {}
  },
  {
    "label": "ThreadPoolExecutor",
    "importPath": "concurrent.futures",
    "description": "concurrent.futures",
    "isExtraImport": true,
    "detail": "concurrent.futures",
    "documentation": {}
  },
  {
    "label": "*",
    "importPath": "db_common",
    "description": "db_common",
    "isExtraImport": true,
    "detail": "db_common",
    "documentation": {}
  },
  {
    "label": "parseQuestionsFile",
    "importPath": "parse_questions",
    "description": "parse_questions",
    "isExtraImport": true,
    "detail": "parse_questions",
    "documentation": {}
  },
  {
    "label": "cgi,",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "cgi.",
    "description": "cgi.",
    "detail": "cgi.",
    "documentation": {}
  },
  {
    "label": "os,",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "os.",
    "description": "os.",
    "detail": "os.",
    "documentation": {}
  },
  {
    "label": "bdb",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "bdb",
    "description": "bdb",
    "detail": "bdb",
    "documentation": {}
  },
  {
    "label": "traceback",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "traceback",
    "description": "traceback",
    "detail": "traceback",
    "documentation": {}
  },
  {
    "label": "cStringIO",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "cStringIO",
    "description": "cStringIO",
    "detail": "cStringIO",
    "documentation": {}
  },
  {
    "label": "pg_encoder",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "pg_encoder",
    "description": "pg_encoder",
    "detail": "pg_encoder",
    "documentation": {}
  },
  {
    "label": "pg_logger",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "pg_logger",
    "description": "pg_logger",
    "detail": "pg_logger",
    "documentation": {}
  },
  {
    "label": "setHTML",
    "importPath": "pg_logger",
    "description": "pg_logger",
    "isExtraImport": true,
    "detail": "pg_logger",
    "documentation": {}
  },
  {
    "label": "cgi",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "cgi",
    "description": "cgi",
    "detail": "cgi",
    "documentation": {}
  },
  {
    "label": "Library",
    "importPath": "django.template",
    "description": "django.template",
    "isExtraImport": true,
    "detail": "django.template",
    "documentation": {}
  },
  {
    "label": "Node",
    "importPath": "django.template",
    "description": "django.template",
    "isExtraImport": true,
    "detail": "django.template",
    "documentation": {}
  },
  {
    "label": "resolve_variable",
    "importPath": "django.template",
    "description": "django.template",
    "isExtraImport": true,
    "detail": "django.template",
    "documentation": {}
  },
  {
    "label": "GChartWrapper",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "GChartWrapper",
    "description": "GChartWrapper",
    "detail": "GChartWrapper",
    "documentation": {}
  },
  {
    "label": "*",
    "importPath": "GChartWrapper.constants",
    "description": "GChartWrapper.constants",
    "isExtraImport": true,
    "detail": "GChartWrapper.constants",
    "documentation": {}
  },
  {
    "label": "Encoder",
    "importPath": "GChartWrapper.encoding",
    "description": "GChartWrapper.encoding",
    "isExtraImport": true,
    "detail": "GChartWrapper.encoding",
    "documentation": {}
  },
  {
    "label": "copy",
    "importPath": "copy",
    "description": "copy",
    "isExtraImport": true,
    "detail": "copy",
    "documentation": {}
  },
  {
    "label": "TNode",
    "importPath": "bintree_module",
    "description": "bintree_module",
    "isExtraImport": true,
    "detail": "bintree_module",
    "documentation": {}
  },
  {
    "label": "TNode",
    "importPath": "bintree_module",
    "description": "bintree_module",
    "isExtraImport": true,
    "detail": "bintree_module",
    "documentation": {}
  },
  {
    "label": "BST",
    "importPath": "bintree_module",
    "description": "bintree_module",
    "isExtraImport": true,
    "detail": "bintree_module",
    "documentation": {}
  },
  {
    "label": "TNode",
    "importPath": "bintree_module",
    "description": "bintree_module",
    "isExtraImport": true,
    "detail": "bintree_module",
    "documentation": {}
  },
  {
    "label": "html_module",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "html_module",
    "description": "html_module",
    "detail": "html_module",
    "documentation": {}
  },
  {
    "label": "html_module,",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "html_module.",
    "description": "html_module.",
    "detail": "html_module.",
    "documentation": {}
  },
  {
    "label": "route",
    "importPath": "bottle",
    "description": "bottle",
    "isExtraImport": true,
    "detail": "bottle",
    "documentation": {}
  },
  {
    "label": "get",
    "importPath": "bottle",
    "description": "bottle",
    "isExtraImport": true,
    "detail": "bottle",
    "documentation": {}
  },
  {
    "label": "request",
    "importPath": "bottle",
    "description": "bottle",
    "isExtraImport": true,
    "detail": "bottle",
    "documentation": {}
  },
  {
    "label": "run",
    "importPath": "bottle",
    "description": "bottle",
    "isExtraImport": true,
    "detail": "bottle",
    "documentation": {}
  },
  {
    "label": "template",
    "importPath": "bottle",
    "description": "bottle",
    "isExtraImport": true,
    "detail": "bottle",
    "documentation": {}
  },
  {
    "label": "static_file",
    "importPath": "bottle",
    "description": "bottle",
    "isExtraImport": true,
    "detail": "bottle",
    "documentation": {}
  },
  {
    "label": "route",
    "importPath": "bottle",
    "description": "bottle",
    "isExtraImport": true,
    "detail": "bottle",
    "documentation": {}
  },
  {
    "label": "get",
    "importPath": "bottle",
    "description": "bottle",
    "isExtraImport": true,
    "detail": "bottle",
    "documentation": {}
  },
  {
    "label": "request",
    "importPath": "bottle",
    "description": "bottle",
    "isExtraImport": true,
    "detail": "bottle",
    "documentation": {}
  },
  {
    "label": "run",
    "importPath": "bottle",
    "description": "bottle",
    "isExtraImport": true,
    "detail": "bottle",
    "documentation": {}
  },
  {
    "label": "template",
    "importPath": "bottle",
    "description": "bottle",
    "isExtraImport": true,
    "detail": "bottle",
    "documentation": {}
  },
  {
    "label": "static_file",
    "importPath": "bottle",
    "description": "bottle",
    "isExtraImport": true,
    "detail": "bottle",
    "documentation": {}
  },
  {
    "label": "StringIO",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "StringIO",
    "description": "StringIO",
    "detail": "StringIO",
    "documentation": {}
  },
  {
    "label": "doctest",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "doctest",
    "description": "doctest",
    "detail": "doctest",
    "documentation": {}
  },
  {
    "label": "ColorTable",
    "importPath": "htmlexample_module",
    "description": "htmlexample_module",
    "isExtraImport": true,
    "detail": "htmlexample_module",
    "documentation": {}
  },
  {
    "label": "tornado.ioloop",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "tornado.ioloop",
    "description": "tornado.ioloop",
    "detail": "tornado.ioloop",
    "documentation": {}
  },
  {
    "label": "tornado.options",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "tornado.options",
    "description": "tornado.options",
    "detail": "tornado.options",
    "documentation": {}
  },
  {
    "label": "define",
    "importPath": "tornado.options",
    "description": "tornado.options",
    "isExtraImport": true,
    "detail": "tornado.options",
    "documentation": {}
  },
  {
    "label": "options",
    "importPath": "tornado.options",
    "description": "tornado.options",
    "isExtraImport": true,
    "detail": "tornado.options",
    "documentation": {}
  },
  {
    "label": "tornado.web",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "tornado.web",
    "description": "tornado.web",
    "detail": "tornado.web",
    "documentation": {}
  },
  {
    "label": "tornado.websocket",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "tornado.websocket",
    "description": "tornado.websocket",
    "detail": "tornado.websocket",
    "documentation": {}
  },
  {
    "label": "inspect",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "inspect",
    "description": "inspect",
    "detail": "inspect",
    "documentation": {}
  },
  {
    "label": "webapp2",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "webapp2",
    "description": "webapp2",
    "detail": "webapp2",
    "documentation": {}
  },
  {
    "label": "jinja2,",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "jinja2.",
    "description": "jinja2.",
    "detail": "jinja2.",
    "documentation": {}
  },
  {
    "label": "watchfn",
    "importPath": "watch_module",
    "description": "watch_module",
    "isExtraImport": true,
    "detail": "watch_module",
    "documentation": {}
  },
  {
    "label": "watchedlist",
    "importPath": "watch_module",
    "description": "watch_module",
    "isExtraImport": true,
    "detail": "watch_module",
    "documentation": {}
  },
  {
    "label": "resource",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "resource",
    "description": "resource",
    "detail": "resource",
    "documentation": {}
  },
  {
    "label": "call_opt_backend",
    "importPath": "call_opt_backend",
    "description": "call_opt_backend",
    "isExtraImport": true,
    "detail": "call_opt_backend",
    "documentation": {}
  },
  {
    "label": "imp",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "imp",
    "description": "imp",
    "detail": "imp",
    "documentation": {}
  },
  {
    "label": "encode_doctest",
    "importPath": "doctest_reader",
    "description": "doctest_reader",
    "isExtraImport": true,
    "detail": "doctest_reader",
    "documentation": {}
  },
  {
    "label": "bellman_ford",
    "kind": 2,
    "importPath": "by-catagory.data-structures-algos.00eedbab69.bellman_ford",
    "description": "by-catagory.data-structures-algos.00eedbab69.bellman_ford",
    "peekOfCode": "def bellman_ford(graph, source):\n    weight = {}\n    pre_node = {}\n    initialize_single_source(graph, source, weight, pre_node)\n    for i in range(1, len(graph)):\n        for node in graph:\n            for adjacent in graph[node]:\n                if weight[adjacent] > weight[node] + graph[node][adjacent]:\n                    weight[adjacent] = weight[node] + graph[node][adjacent]\n                    pre_node[adjacent] = node",
    "detail": "by-catagory.data-structures-algos.00eedbab69.bellman_ford",
    "documentation": {}
  },
  {
    "label": "initialize_single_source",
    "kind": 2,
    "importPath": "by-catagory.data-structures-algos.00eedbab69.bellman_ford",
    "description": "by-catagory.data-structures-algos.00eedbab69.bellman_ford",
    "peekOfCode": "def initialize_single_source(graph, source, weight, pre_node):\n    for node in graph:\n        weight[node] = float('inf')\n        pre_node[node] = None\n    weight[source] = 0",
    "detail": "by-catagory.data-structures-algos.00eedbab69.bellman_ford",
    "documentation": {}
  },
  {
    "label": "Application",
    "kind": 6,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "class Application(tk.Frame):\n\t\tdef __init__(self, master=None):\n\t\t\t\tsuper().__init__(master)\n\t\t\t\tself.master = master\n\t\t\t\tself.pack()\n\t\t\t\tself.createWidgets()\n\t\tdef createWidgets(self):\n\t\t\t\tself.hello = tk.Button(self)\n\t\t\t\tself.hello[\"text\"] = \"Quiz Rules\"\n\t\t\t\tself.hello[\"command\"] = self.sayHello",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "s",
    "kind": 2,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "def s(str):\n  for letter in str:\n    sys.stdout.write(letter)\n    sys.stdout.flush()\n    slp(0.05)\n  print()\ndef slow(str):\n  for letter in str:\n    sys.stdout.write(letter)\n    sys.stdout.flush()",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "slow",
    "kind": 2,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "def slow(str):\n  for letter in str:\n    sys.stdout.write(letter)\n    sys.stdout.flush()\n    slp(0.005)\n  print()\ndef cr():\n\t\tprint(\"\\033c\",end=\"\",flush=True)\ndef t():\n\tslp(1.5)",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "cr",
    "kind": 2,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "def cr():\n\t\tprint(\"\\033c\",end=\"\",flush=True)\ndef t():\n\tslp(1.5)\n\tcr()\n#keep this comment or else I'll report you: made by IndyRishi and Wilke000\ns(\"Hello! Welcome to my quiz!\")\nimport tkinter as tk\nclass Application(tk.Frame):\n\t\tdef __init__(self, master=None):",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "t",
    "kind": 2,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "def t():\n\tslp(1.5)\n\tcr()\n#keep this comment or else I'll report you: made by IndyRishi and Wilke000\ns(\"Hello! Welcome to my quiz!\")\nimport tkinter as tk\nclass Application(tk.Frame):\n\t\tdef __init__(self, master=None):\n\t\t\t\tsuper().__init__(master)\n\t\t\t\tself.master = master",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\t\t\t\tself.master",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\t\t\t\tself.master = master\n\t\t\t\tself.pack()\n\t\t\t\tself.createWidgets()\n\t\tdef createWidgets(self):\n\t\t\t\tself.hello = tk.Button(self)\n\t\t\t\tself.hello[\"text\"] = \"Quiz Rules\"\n\t\t\t\tself.hello[\"command\"] = self.sayHello\n\t\t\t\tself.hello.pack(side=\"top\")\n\t\t\t\tself.quit = tk.Button(self,text=\"START QUIZ\",command=self.master.destroy)\n\t\t\t\tself.quit.pack(side=\"bottom\")",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\t\t\t\tself.hello",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\t\t\t\tself.hello = tk.Button(self)\n\t\t\t\tself.hello[\"text\"] = \"Quiz Rules\"\n\t\t\t\tself.hello[\"command\"] = self.sayHello\n\t\t\t\tself.hello.pack(side=\"top\")\n\t\t\t\tself.quit = tk.Button(self,text=\"START QUIZ\",command=self.master.destroy)\n\t\t\t\tself.quit.pack(side=\"bottom\")\n\t\tdef sayHello(self):\n\t\t\t\tself.display = tk.Label(self,text=\"I will say the definition, you say the word lowercase, no spaces.\\n If you put the wrong answer three times you go to the next question. Spelling counts.\")\n\t\t\t\tself.display.pack()\nroot = tk.Tk()",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\t\t\t\tself.hello[\"text\"]",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\t\t\t\tself.hello[\"text\"] = \"Quiz Rules\"\n\t\t\t\tself.hello[\"command\"] = self.sayHello\n\t\t\t\tself.hello.pack(side=\"top\")\n\t\t\t\tself.quit = tk.Button(self,text=\"START QUIZ\",command=self.master.destroy)\n\t\t\t\tself.quit.pack(side=\"bottom\")\n\t\tdef sayHello(self):\n\t\t\t\tself.display = tk.Label(self,text=\"I will say the definition, you say the word lowercase, no spaces.\\n If you put the wrong answer three times you go to the next question. Spelling counts.\")\n\t\t\t\tself.display.pack()\nroot = tk.Tk()\napp = Application(master=root)",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\t\t\t\tself.hello[\"command\"]",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\t\t\t\tself.hello[\"command\"] = self.sayHello\n\t\t\t\tself.hello.pack(side=\"top\")\n\t\t\t\tself.quit = tk.Button(self,text=\"START QUIZ\",command=self.master.destroy)\n\t\t\t\tself.quit.pack(side=\"bottom\")\n\t\tdef sayHello(self):\n\t\t\t\tself.display = tk.Label(self,text=\"I will say the definition, you say the word lowercase, no spaces.\\n If you put the wrong answer three times you go to the next question. Spelling counts.\")\n\t\t\t\tself.display.pack()\nroot = tk.Tk()\napp = Application(master=root)\napp.mainloop()",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\t\t\t\tself.quit",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\t\t\t\tself.quit = tk.Button(self,text=\"START QUIZ\",command=self.master.destroy)\n\t\t\t\tself.quit.pack(side=\"bottom\")\n\t\tdef sayHello(self):\n\t\t\t\tself.display = tk.Label(self,text=\"I will say the definition, you say the word lowercase, no spaces.\\n If you put the wrong answer three times you go to the next question. Spelling counts.\")\n\t\t\t\tself.display.pack()\nroot = tk.Tk()\napp = Application(master=root)\napp.mainloop()\nscoreboardxyz = 0\ns(\"I will say the definition, you say the word lowercase, no spaces. If you put the wrong answer three times you go to the next question. Spelling counts\")",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\t\t\t\tself.display",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\t\t\t\tself.display = tk.Label(self,text=\"I will say the definition, you say the word lowercase, no spaces.\\n If you put the wrong answer three times you go to the next question. Spelling counts.\")\n\t\t\t\tself.display.pack()\nroot = tk.Tk()\napp = Application(master=root)\napp.mainloop()\nscoreboardxyz = 0\ns(\"I will say the definition, you say the word lowercase, no spaces. If you put the wrong answer three times you go to the next question. Spelling counts\")\nq1 = input(\"definition:\\t\\n\")\nif q1 == \"word\":\n\ts(\"Correct!\\n\")",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "root",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "root = tk.Tk()\napp = Application(master=root)\napp.mainloop()\nscoreboardxyz = 0\ns(\"I will say the definition, you say the word lowercase, no spaces. If you put the wrong answer three times you go to the next question. Spelling counts\")\nq1 = input(\"definition:\\t\\n\")\nif q1 == \"word\":\n\ts(\"Correct!\\n\")\n\tt()\n\tscoreboardxyz = scoreboardxyz + 1",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "app",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "app = Application(master=root)\napp.mainloop()\nscoreboardxyz = 0\ns(\"I will say the definition, you say the word lowercase, no spaces. If you put the wrong answer three times you go to the next question. Spelling counts\")\nq1 = input(\"definition:\\t\\n\")\nif q1 == \"word\":\n\ts(\"Correct!\\n\")\n\tt()\n\tscoreboardxyz = scoreboardxyz + 1\nelse:",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "scoreboardxyz",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "scoreboardxyz = 0\ns(\"I will say the definition, you say the word lowercase, no spaces. If you put the wrong answer three times you go to the next question. Spelling counts\")\nq1 = input(\"definition:\\t\\n\")\nif q1 == \"word\":\n\ts(\"Correct!\\n\")\n\tt()\n\tscoreboardxyz = scoreboardxyz + 1\nelse:\n\ts(\"Incorrect. Try again.\\n\")\n\tq1 = input(\"definition:\\t\\n\")",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "q1",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "q1 = input(\"definition:\\t\\n\")\nif q1 == \"word\":\n\ts(\"Correct!\\n\")\n\tt()\n\tscoreboardxyz = scoreboardxyz + 1\nelse:\n\ts(\"Incorrect. Try again.\\n\")\n\tq1 = input(\"definition:\\t\\n\")\n\tif q1 == \"word\":\n\t\ts(\"Correct!\\n\")",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\tscoreboardxyz",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\tscoreboardxyz = scoreboardxyz + 1\nelse:\n\ts(\"Incorrect. Try again.\\n\")\n\tq1 = input(\"definition:\\t\\n\")\n\tif q1 == \"word\":\n\t\ts(\"Correct!\\n\")\n\t\tt()\n\t\tscoreboardxyz = scoreboardxyz + 1\n\telse:\n\t\ts(\"Incorrect. Last chance!\\n\")",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\tq1",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\tq1 = input(\"definition:\\t\\n\")\n\tif q1 == \"word\":\n\t\ts(\"Correct!\\n\")\n\t\tt()\n\t\tscoreboardxyz = scoreboardxyz + 1\n\telse:\n\t\ts(\"Incorrect. Last chance!\\n\")\n\t\tq1 = input(\"definition:\\t\\n\")\n\t\tif q1 == \"word\":\n\t\t\ts(\"Correct!\\n\")",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\t\tscoreboardxyz",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\t\tscoreboardxyz = scoreboardxyz + 1\n\telse:\n\t\ts(\"Incorrect. Last chance!\\n\")\n\t\tq1 = input(\"definition:\\t\\n\")\n\t\tif q1 == \"word\":\n\t\t\ts(\"Correct!\\n\")\n\t\t\tt()\n\t\t\tscoreboardxyz = scoreboardxyz + 1\n\t\telse:\n\t\t\ts(\"Incorrect. The correct answer was word. Next question.\\n\")",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\t\tq1",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\t\tq1 = input(\"definition:\\t\\n\")\n\t\tif q1 == \"word\":\n\t\t\ts(\"Correct!\\n\")\n\t\t\tt()\n\t\t\tscoreboardxyz = scoreboardxyz + 1\n\t\telse:\n\t\t\ts(\"Incorrect. The correct answer was word. Next question.\\n\")\n\t\t\tt()\nq2 = input(\"definition:\\t\\n\")\nif q2 == \"word\":",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\t\t\tscoreboardxyz",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\t\t\tscoreboardxyz = scoreboardxyz + 1\n\t\telse:\n\t\t\ts(\"Incorrect. The correct answer was word. Next question.\\n\")\n\t\t\tt()\nq2 = input(\"definition:\\t\\n\")\nif q2 == \"word\":\n\ts(\"Correct!\\n\")\n\tt()\n\tscoreboardxyz = scoreboardxyz + 1\nelse:",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "q2",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "q2 = input(\"definition:\\t\\n\")\nif q2 == \"word\":\n\ts(\"Correct!\\n\")\n\tt()\n\tscoreboardxyz = scoreboardxyz + 1\nelse:\n\ts(\"Incorrect. Try again.\\n\")\n\tt()\n\tq2 = input(\"definition:\\t\\n\")\n\tif q2 == \"word\":",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\tscoreboardxyz",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\tscoreboardxyz = scoreboardxyz + 1\nelse:\n\ts(\"Incorrect. Try again.\\n\")\n\tt()\n\tq2 = input(\"definition:\\t\\n\")\n\tif q2 == \"word\":\n\t\ts(\"Correct!\\n\")\n\t\tt()\n\t\tscoreboardxyz = scoreboardxyz + 1\n\telse:",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\tq2",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\tq2 = input(\"definition:\\t\\n\")\n\tif q2 == \"word\":\n\t\ts(\"Correct!\\n\")\n\t\tt()\n\t\tscoreboardxyz = scoreboardxyz + 1\n\telse:\n\t\ts(\"Incorrect. Last chance!\\n\")\n\t\tt()\n\t\tq2 = input(\"definition:\\t\\n\")\n\t\tif q2 == \"word\":",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\t\tscoreboardxyz",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\t\tscoreboardxyz = scoreboardxyz + 1\n\telse:\n\t\ts(\"Incorrect. Last chance!\\n\")\n\t\tt()\n\t\tq2 = input(\"definition:\\t\\n\")\n\t\tif q2 == \"word\":\n\t\t\ts(\"Correct!\\n\")\n\t\t\tt()\n\t\t\tscoreboardxyz = scoreboardxyz + 1\n\t\telse:",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\t\tq2",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\t\tq2 = input(\"definition:\\t\\n\")\n\t\tif q2 == \"word\":\n\t\t\ts(\"Correct!\\n\")\n\t\t\tt()\n\t\t\tscoreboardxyz = scoreboardxyz + 1\n\t\telse:\n\t\t\ts(\"Incorrect. The correct answer was word. Next question.\\n\")\n\t\t\tt()\nq3 = input(\"definition::\\t\\n\")\nif q3 == \"word\":",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\t\t\tscoreboardxyz",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\t\t\tscoreboardxyz = scoreboardxyz + 1\n\t\telse:\n\t\t\ts(\"Incorrect. The correct answer was word. Next question.\\n\")\n\t\t\tt()\nq3 = input(\"definition::\\t\\n\")\nif q3 == \"word\":\n\ts(\"Correct!\\n\")\n\tt()\n\tscoreboardxyz = scoreboardxyz + 1\nelse:",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "q3",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "q3 = input(\"definition::\\t\\n\")\nif q3 == \"word\":\n\ts(\"Correct!\\n\")\n\tt()\n\tscoreboardxyz = scoreboardxyz + 1\nelse:\n\ts(\"Incorrect. Try again.\\n\")\n\tt()\n\tq3 = input(\"definition::\\t\\n\")\n\tif q3 == \"word\":",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\tscoreboardxyz",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\tscoreboardxyz = scoreboardxyz + 1\nelse:\n\ts(\"Incorrect. Try again.\\n\")\n\tt()\n\tq3 = input(\"definition::\\t\\n\")\n\tif q3 == \"word\":\n\t\ts(\"Correct!\\n\")\n\t\tt()\n\t\tscoreboardxyz = scoreboardxyz + 1\n\telse:",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\tq3",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\tq3 = input(\"definition::\\t\\n\")\n\tif q3 == \"word\":\n\t\ts(\"Correct!\\n\")\n\t\tt()\n\t\tscoreboardxyz = scoreboardxyz + 1\n\telse:\n\t\ts(\"Incorrect. Last chance!\\n\")\n\t\tt()\n\t\tq3 = input(\"definition::\\t\\n\")\n\t\tif q3 == \"word\":",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\t\tscoreboardxyz",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\t\tscoreboardxyz = scoreboardxyz + 1\n\telse:\n\t\ts(\"Incorrect. Last chance!\\n\")\n\t\tt()\n\t\tq3 = input(\"definition::\\t\\n\")\n\t\tif q3 == \"word\":\n\t\t\ts(\"Correct!\\n\")\n\t\t\tt()\n\t\t\tscoreboardxyz = scoreboardxyz + 1\n\t\telse:",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\t\tq3",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\t\tq3 = input(\"definition::\\t\\n\")\n\t\tif q3 == \"word\":\n\t\t\ts(\"Correct!\\n\")\n\t\t\tt()\n\t\t\tscoreboardxyz = scoreboardxyz + 1\n\t\telse:\n\t\t\ts(\"Incorrect. The correct answer was word. Next question.\\n\")\n\t\t\tt()\nq4 = input(\"definition:\\t\\n\")\nif q4 == \"word\":",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\t\t\tscoreboardxyz",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\t\t\tscoreboardxyz = scoreboardxyz + 1\n\t\telse:\n\t\t\ts(\"Incorrect. The correct answer was word. Next question.\\n\")\n\t\t\tt()\nq4 = input(\"definition:\\t\\n\")\nif q4 == \"word\":\n\ts(\"Correct!\\n\")\n\tt()\n\tscoreboardxyz = scoreboardxyz + 1\nelse:",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "q4",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "q4 = input(\"definition:\\t\\n\")\nif q4 == \"word\":\n\ts(\"Correct!\\n\")\n\tt()\n\tscoreboardxyz = scoreboardxyz + 1\nelse:\n\t\ts(\"Incorrect. Try again.\\n\")\n\t\tt()\n\t\tq4 = input(\"definition\\t\\n\")\n\t\tif q4 == \"word\":",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\tscoreboardxyz",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\tscoreboardxyz = scoreboardxyz + 1\nelse:\n\t\ts(\"Incorrect. Try again.\\n\")\n\t\tt()\n\t\tq4 = input(\"definition\\t\\n\")\n\t\tif q4 == \"word\":\n\t\t\ts(\"Correct!\\n\")\n\t\t\tt()\n\t\t\tscoreboardxyz = scoreboardxyz + 1\n\t\telse:",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\t\tq4",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\t\tq4 = input(\"definition\\t\\n\")\n\t\tif q4 == \"word\":\n\t\t\ts(\"Correct!\\n\")\n\t\t\tt()\n\t\t\tscoreboardxyz = scoreboardxyz + 1\n\t\telse:\n\t\t\ts(\"Incorrect. Last chance!\\n\")\n\t\t\tt()\n\t\t\tq4 = input(\"definition:\\t\")\n\t\tif q4 == \"word\":",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\t\t\tscoreboardxyz",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\t\t\tscoreboardxyz = scoreboardxyz + 1\n\t\telse:\n\t\t\ts(\"Incorrect. Last chance!\\n\")\n\t\t\tt()\n\t\t\tq4 = input(\"definition:\\t\")\n\t\tif q4 == \"word\":\n\t\t\ts(\"Correct!\\n\")\n\t\t\tt()\n\t\t\tscoreboardxyz = scoreboardxyz + 1\n\t\telse:",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\t\t\tq4",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\t\t\tq4 = input(\"definition:\\t\")\n\t\tif q4 == \"word\":\n\t\t\ts(\"Correct!\\n\")\n\t\t\tt()\n\t\t\tscoreboardxyz = scoreboardxyz + 1\n\t\telse:\n\t\t\t\ts(\"Incorrect. The correct answer was word. Next question.\\n\")\n\t\t\t\tt()\nq5 = input(\"definition:\\t\\n\")\nif q5 == \"word\":",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\t\t\tscoreboardxyz",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\t\t\tscoreboardxyz = scoreboardxyz + 1\n\t\telse:\n\t\t\t\ts(\"Incorrect. The correct answer was word. Next question.\\n\")\n\t\t\t\tt()\nq5 = input(\"definition:\\t\\n\")\nif q5 == \"word\":\n\ts(\"Correct!\\n\")\n\tt()\n\tscoreboardxyz = scoreboardxyz + 1\nelse:",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "q5",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "q5 = input(\"definition:\\t\\n\")\nif q5 == \"word\":\n\ts(\"Correct!\\n\")\n\tt()\n\tscoreboardxyz = scoreboardxyz + 1\nelse:\n\ts(\"Incorrect. Try again.\\n\")\n\tt()\n\tq5 = input(\"definition:\\t\\n\")\n\tif q5 == \"word\":",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\tscoreboardxyz",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\tscoreboardxyz = scoreboardxyz + 1\nelse:\n\ts(\"Incorrect. Try again.\\n\")\n\tt()\n\tq5 = input(\"definition:\\t\\n\")\n\tif q5 == \"word\":\n\t\ts(\"Correct!\\n\")\n\t\tt()\n\t\tscoreboardxyz = scoreboardxyz + 1\n\telse:",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\tq5",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\tq5 = input(\"definition:\\t\\n\")\n\tif q5 == \"word\":\n\t\ts(\"Correct!\\n\")\n\t\tt()\n\t\tscoreboardxyz = scoreboardxyz + 1\n\telse:\n\t\ts(\"Incorrect. Last chance!\\n\")\n\t\tt()\n\t\tq5 = input(\"definition:\\t\\n\")\n\t\tif q5 == \"word\":",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\t\tscoreboardxyz",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\t\tscoreboardxyz = scoreboardxyz + 1\n\telse:\n\t\ts(\"Incorrect. Last chance!\\n\")\n\t\tt()\n\t\tq5 = input(\"definition:\\t\\n\")\n\t\tif q5 == \"word\":\n\t\t\ts(\"Correct!\\n\")\n\t\t\tt()\n\t\t\tscoreboardxyz = scoreboardxyz + 1\n\t\telse:",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\t\tq5",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\t\tq5 = input(\"definition:\\t\\n\")\n\t\tif q5 == \"word\":\n\t\t\ts(\"Correct!\\n\")\n\t\t\tt()\n\t\t\tscoreboardxyz = scoreboardxyz + 1\n\t\telse:\n\t\t\ts(\"Incorrect. The correct answer was word. Next question.\\n\")\n\t\t\tt()\nq6 = input(\"definition:\\t\\n\")\nif q6 == \"word\":",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\t\t\tscoreboardxyz",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\t\t\tscoreboardxyz = scoreboardxyz + 1\n\t\telse:\n\t\t\ts(\"Incorrect. The correct answer was word. Next question.\\n\")\n\t\t\tt()\nq6 = input(\"definition:\\t\\n\")\nif q6 == \"word\":\n\ts(\"Correct!\\n\")\n\tt()\n\tscoreboardxyz = scoreboardxyz + 1\nelse:",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "q6",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "q6 = input(\"definition:\\t\\n\")\nif q6 == \"word\":\n\ts(\"Correct!\\n\")\n\tt()\n\tscoreboardxyz = scoreboardxyz + 1\nelse:\n\ts(\"Incorrect. Try again.\\n\")\n\tt()\n\tq6 = input(\"definition:\\t\\n\")\n\tif q6 == \"word\":",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\tscoreboardxyz",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\tscoreboardxyz = scoreboardxyz + 1\nelse:\n\ts(\"Incorrect. Try again.\\n\")\n\tt()\n\tq6 = input(\"definition:\\t\\n\")\n\tif q6 == \"word\":\n\t\ts(\"Correct!\\n\")\n\t\tt()\n\t\tscoreboardxyz = scoreboardxyz + 1\n\telse:",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\tq6",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\tq6 = input(\"definition:\\t\\n\")\n\tif q6 == \"word\":\n\t\ts(\"Correct!\\n\")\n\t\tt()\n\t\tscoreboardxyz = scoreboardxyz + 1\n\telse:\n\t\ts(\"Incorrect. Last chance!\\n\")\n\t\tt()\n\t\tq6 = input(\"definition:\\t\\n\")\n\t\tif q6 == \"word\":",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\t\tscoreboardxyz",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\t\tscoreboardxyz = scoreboardxyz + 1\n\telse:\n\t\ts(\"Incorrect. Last chance!\\n\")\n\t\tt()\n\t\tq6 = input(\"definition:\\t\\n\")\n\t\tif q6 == \"word\":\n\t\t\ts(\"Correct!\\n\")\n\t\t\tt()\n\t\t\tscoreboardxyz = scoreboardxyz + 1\n\t\telse:",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\t\tq6",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\t\tq6 = input(\"definition:\\t\\n\")\n\t\tif q6 == \"word\":\n\t\t\ts(\"Correct!\\n\")\n\t\t\tt()\n\t\t\tscoreboardxyz = scoreboardxyz + 1\n\t\telse:\n\t\t\ts(\"Incorrect. The correct answer was word. Next question.\\n\")\n\t\t\tt()\nq7 = input(\"definition:\\t\\n\")\nif q7 == \"word\":",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\t\t\tscoreboardxyz",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\t\t\tscoreboardxyz = scoreboardxyz + 1\n\t\telse:\n\t\t\ts(\"Incorrect. The correct answer was word. Next question.\\n\")\n\t\t\tt()\nq7 = input(\"definition:\\t\\n\")\nif q7 == \"word\":\n\ts(\"Correct!\\n\")\n\tt()\n\tscoreboardxyz = scoreboardxyz + 1\nelse:",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "q7",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "q7 = input(\"definition:\\t\\n\")\nif q7 == \"word\":\n\ts(\"Correct!\\n\")\n\tt()\n\tscoreboardxyz = scoreboardxyz + 1\nelse:\n\ts(\"Incorrect. Try again.\\n\")\n\tt()\n\tq7 = input(\"definition:\\t\\n\")\n\tif q7 == \"word\":",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\tscoreboardxyz",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\tscoreboardxyz = scoreboardxyz + 1\nelse:\n\ts(\"Incorrect. Try again.\\n\")\n\tt()\n\tq7 = input(\"definition:\\t\\n\")\n\tif q7 == \"word\":\n\t\ts(\"Correct!\\n\")\n\t\tt()\n\t\tscoreboardxyz = scoreboardxyz + 1\n\telse:",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\tq7",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\tq7 = input(\"definition:\\t\\n\")\n\tif q7 == \"word\":\n\t\ts(\"Correct!\\n\")\n\t\tt()\n\t\tscoreboardxyz = scoreboardxyz + 1\n\telse:\n\t\ts(\"Incorrect. Last chance!\\n\")\n\t\tt()\n\t\tq7 = input(\"definition:\\t\\n\")\n\t\tif q7 == \"word\":",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\t\tscoreboardxyz",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\t\tscoreboardxyz = scoreboardxyz + 1\n\telse:\n\t\ts(\"Incorrect. Last chance!\\n\")\n\t\tt()\n\t\tq7 = input(\"definition:\\t\\n\")\n\t\tif q7 == \"word\":\n\t\t\ts(\"Correct!\\n\")\n\t\t\tt()\n\t\t\tscoreboardxyz = scoreboardxyz + 1\n\t\telse:",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\t\tq7",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\t\tq7 = input(\"definition:\\t\\n\")\n\t\tif q7 == \"word\":\n\t\t\ts(\"Correct!\\n\")\n\t\t\tt()\n\t\t\tscoreboardxyz = scoreboardxyz + 1\n\t\telse:\n\t\t\ts(\"Incorrect. The correct answer was word. Next question.\\n\")\n\t\t\tt()\nq8 = input(\"definition:\\t\\n\")\nif q8 == \"word\":",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\t\t\tscoreboardxyz",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\t\t\tscoreboardxyz = scoreboardxyz + 1\n\t\telse:\n\t\t\ts(\"Incorrect. The correct answer was word. Next question.\\n\")\n\t\t\tt()\nq8 = input(\"definition:\\t\\n\")\nif q8 == \"word\":\n\ts(\"Correct!\\n\")\n\tt()\n\tscoreboardxyz = scoreboardxyz + 1\nelse:",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "q8",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "q8 = input(\"definition:\\t\\n\")\nif q8 == \"word\":\n\ts(\"Correct!\\n\")\n\tt()\n\tscoreboardxyz = scoreboardxyz + 1\nelse:\n\ts(\"Incorrect. Try again.\\n\")\n\tt()\n\tq8 = input(\"definition:\\t\\n\")\n\tif q8 == \"word\":",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\tscoreboardxyz",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\tscoreboardxyz = scoreboardxyz + 1\nelse:\n\ts(\"Incorrect. Try again.\\n\")\n\tt()\n\tq8 = input(\"definition:\\t\\n\")\n\tif q8 == \"word\":\n\t\ts(\"Correct!\\n\")\n\t\tt()\n\t\tscoreboardxyz = scoreboardxyz + 1\n\telse:",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\tq8",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\tq8 = input(\"definition:\\t\\n\")\n\tif q8 == \"word\":\n\t\ts(\"Correct!\\n\")\n\t\tt()\n\t\tscoreboardxyz = scoreboardxyz + 1\n\telse:\n\t\ts(\"Incorrect. Last chance!\\n\")\n\t\tt()\n\t\tq8 = input(\"definition:\\t\\n\")\n\t\tif q8 == \"word\":",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\t\tscoreboardxyz",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\t\tscoreboardxyz = scoreboardxyz + 1\n\telse:\n\t\ts(\"Incorrect. Last chance!\\n\")\n\t\tt()\n\t\tq8 = input(\"definition:\\t\\n\")\n\t\tif q8 == \"word\":\n\t\t\ts(\"Correct!\\n\")\n\t\t\tt()\n\t\t\tscoreboardxyz = scoreboardxyz + 1\n\t\telse:",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\t\tq8",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\t\tq8 = input(\"definition:\\t\\n\")\n\t\tif q8 == \"word\":\n\t\t\ts(\"Correct!\\n\")\n\t\t\tt()\n\t\t\tscoreboardxyz = scoreboardxyz + 1\n\t\telse:\n\t\t\ts(\"Incorrect. The correct answer was word. Next question.\\n\")\n\t\t\tt()\nq9 = input(\"definition:\\t\\n\")\nif q9 == \"word\":",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\t\t\tscoreboardxyz",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\t\t\tscoreboardxyz = scoreboardxyz + 1\n\t\telse:\n\t\t\ts(\"Incorrect. The correct answer was word. Next question.\\n\")\n\t\t\tt()\nq9 = input(\"definition:\\t\\n\")\nif q9 == \"word\":\n\ts(\"Correct!\\n\")\n\tt()\n\tscoreboardxyz = scoreboardxyz + 1\nelse:",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "q9",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "q9 = input(\"definition:\\t\\n\")\nif q9 == \"word\":\n\ts(\"Correct!\\n\")\n\tt()\n\tscoreboardxyz = scoreboardxyz + 1\nelse:\n\ts(\"Incorrect. Try again.\\n\")\n\tt()\n\tq9 = input(\"definition:\\t\\n\")\n\tif q9 == \"word\":",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\tscoreboardxyz",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\tscoreboardxyz = scoreboardxyz + 1\nelse:\n\ts(\"Incorrect. Try again.\\n\")\n\tt()\n\tq9 = input(\"definition:\\t\\n\")\n\tif q9 == \"word\":\n\t\ts(\"Correct!\\n\")\n\t\tt()\n\t\tscoreboardxyz = scoreboardxyz + 1\n\telse:",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\tq9",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\tq9 = input(\"definition:\\t\\n\")\n\tif q9 == \"word\":\n\t\ts(\"Correct!\\n\")\n\t\tt()\n\t\tscoreboardxyz = scoreboardxyz + 1\n\telse:\n\t\ts(\"Incorrect. Last chance!\\n\")\n\t\tt()\n\t\tq9 = input(\"definition:\\t\\n\")\n\t\tif q9 == \"word\":",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\t\tscoreboardxyz",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\t\tscoreboardxyz = scoreboardxyz + 1\n\telse:\n\t\ts(\"Incorrect. Last chance!\\n\")\n\t\tt()\n\t\tq9 = input(\"definition:\\t\\n\")\n\t\tif q9 == \"word\":\n\t\t\ts(\"Correct!\\n\")\n\t\t\tt()\n\t\t\tscoreboardxyz = scoreboardxyz + 1\n\t\telse:",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\t\tq9",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\t\tq9 = input(\"definition:\\t\\n\")\n\t\tif q9 == \"word\":\n\t\t\ts(\"Correct!\\n\")\n\t\t\tt()\n\t\t\tscoreboardxyz = scoreboardxyz + 1\n\t\telse:\n\t\t\ts(\"Incorrect. The correct answer was word. Next question.\\n\")\n\t\t\tt()\nq10 = input(\"definition:\\t\\n\")\nif q10 == \"word\":",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\t\t\tscoreboardxyz",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\t\t\tscoreboardxyz = scoreboardxyz + 1\n\t\telse:\n\t\t\ts(\"Incorrect. The correct answer was word. Next question.\\n\")\n\t\t\tt()\nq10 = input(\"definition:\\t\\n\")\nif q10 == \"word\":\n\ts(\"Correct!\\n\")\n\tt()\n\tscoreboardxyz = scoreboardxyz + 1\nelse:",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "q10",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "q10 = input(\"definition:\\t\\n\")\nif q10 == \"word\":\n\ts(\"Correct!\\n\")\n\tt()\n\tscoreboardxyz = scoreboardxyz + 1\nelse:\n\ts(\"Incorrect. Try again.\\n\")\n\tq10 = input(\"definition:\\t\\n\")\n\tif q10 == \"word\":\n\t\ts(\"Correct!\\n\")",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\tscoreboardxyz",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\tscoreboardxyz = scoreboardxyz + 1\nelse:\n\ts(\"Incorrect. Try again.\\n\")\n\tq10 = input(\"definition:\\t\\n\")\n\tif q10 == \"word\":\n\t\ts(\"Correct!\\n\")\n\t\tt()\n\t\tscoreboardxyz = scoreboardxyz + 1\n\telse:\n\t\ts(\"Incorrect. Last chance!\\n\")",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\tq10",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\tq10 = input(\"definition:\\t\\n\")\n\tif q10 == \"word\":\n\t\ts(\"Correct!\\n\")\n\t\tt()\n\t\tscoreboardxyz = scoreboardxyz + 1\n\telse:\n\t\ts(\"Incorrect. Last chance!\\n\")\n\t\tt()\n\t\tq10 = input(\"definition:\\t\\n\")\n\t\tif q10 == \"word\":",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\t\tscoreboardxyz",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\t\tscoreboardxyz = scoreboardxyz + 1\n\telse:\n\t\ts(\"Incorrect. Last chance!\\n\")\n\t\tt()\n\t\tq10 = input(\"definition:\\t\\n\")\n\t\tif q10 == \"word\":\n\t\t\ts(\"Correct!\\n\")\n\t\t\tt()\n\t\t\tscoreboardxyz = scoreboardxyz + 1\n\t\telse:",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\t\tq10",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\t\tq10 = input(\"definition:\\t\\n\")\n\t\tif q10 == \"word\":\n\t\t\ts(\"Correct!\\n\")\n\t\t\tt()\n\t\t\tscoreboardxyz = scoreboardxyz + 1\n\t\telse:\n\t\t\ts(\"Incorrect. The correct answer was word. Next question.\\n\")\n\t\t\tt()\nq11 = input(\"definition:\\t\\n\")\nif q11 == \"word\":",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\t\t\tscoreboardxyz",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\t\t\tscoreboardxyz = scoreboardxyz + 1\n\t\telse:\n\t\t\ts(\"Incorrect. The correct answer was word. Next question.\\n\")\n\t\t\tt()\nq11 = input(\"definition:\\t\\n\")\nif q11 == \"word\":\n\ts(\"Correct!\\n\")\n\tt()\n\tscoreboardxyz = scoreboardxyz + 1\nelse:",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "q11",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "q11 = input(\"definition:\\t\\n\")\nif q11 == \"word\":\n\ts(\"Correct!\\n\")\n\tt()\n\tscoreboardxyz = scoreboardxyz + 1\nelse:\n\ts(\"Incorrect. Try again.\\n\")\n\tt()\n\tq11 = input(\"definition:\\t\\n\")\n\tif q11 == \"word\":",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\tscoreboardxyz",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\tscoreboardxyz = scoreboardxyz + 1\nelse:\n\ts(\"Incorrect. Try again.\\n\")\n\tt()\n\tq11 = input(\"definition:\\t\\n\")\n\tif q11 == \"word\":\n\t\ts(\"Correct!\\n\")\n\t\tt()\n\t\tscoreboardxyz = scoreboardxyz + 1\n\telse:",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\tq11",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\tq11 = input(\"definition:\\t\\n\")\n\tif q11 == \"word\":\n\t\ts(\"Correct!\\n\")\n\t\tt()\n\t\tscoreboardxyz = scoreboardxyz + 1\n\telse:\n\t\ts(\"Incorrect. Last chance!\\n\")\n\t\tt()\n\t\tq11 = input(\"definition:\\t\\n\")\n\t\tif q11 == \"word\":",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\t\tscoreboardxyz",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\t\tscoreboardxyz = scoreboardxyz + 1\n\telse:\n\t\ts(\"Incorrect. Last chance!\\n\")\n\t\tt()\n\t\tq11 = input(\"definition:\\t\\n\")\n\t\tif q11 == \"word\":\n\t\t\ts(\"Correct!\\n\")\n\t\t\tt()\n\t\t\tscoreboardxyz = scoreboardxyz + 1\n\t\telse:",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\t\tq11",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\t\tq11 = input(\"definition:\\t\\n\")\n\t\tif q11 == \"word\":\n\t\t\ts(\"Correct!\\n\")\n\t\t\tt()\n\t\t\tscoreboardxyz = scoreboardxyz + 1\n\t\telse:\n\t\t\ts(\"Incorrect. The correct answer was word. Next question.\\n\")\n\t\t\tt()\nq12 = input(\"definition:\\t\\n\")\nif q12 == \"word\":",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\t\t\tscoreboardxyz",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\t\t\tscoreboardxyz = scoreboardxyz + 1\n\t\telse:\n\t\t\ts(\"Incorrect. The correct answer was word. Next question.\\n\")\n\t\t\tt()\nq12 = input(\"definition:\\t\\n\")\nif q12 == \"word\":\n\ts(\"Correct!\\n\")\n\tt()\n\tscoreboardxyz = scoreboardxyz + 1\nelse:",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "q12",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "q12 = input(\"definition:\\t\\n\")\nif q12 == \"word\":\n\ts(\"Correct!\\n\")\n\tt()\n\tscoreboardxyz = scoreboardxyz + 1\nelse:\n\ts(\"Incorrect. Try again.\\n\")\n\tt()\n\tq12 = input(\"definition:\\t\\n\")\n\tif q12 == \"word\":",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\tscoreboardxyz",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\tscoreboardxyz = scoreboardxyz + 1\nelse:\n\ts(\"Incorrect. Try again.\\n\")\n\tt()\n\tq12 = input(\"definition:\\t\\n\")\n\tif q12 == \"word\":\n\t\ts(\"Correct!\\n\")\n\t\tt()\n\t\tscoreboardxyz = scoreboardxyz + 1\n\telse:",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\tq12",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\tq12 = input(\"definition:\\t\\n\")\n\tif q12 == \"word\":\n\t\ts(\"Correct!\\n\")\n\t\tt()\n\t\tscoreboardxyz = scoreboardxyz + 1\n\telse:\n\t\ts(\"Incorrect. Last chance!\\n\")\n\t\tt()\n\t\tq12 = input(\"definition:\\t\\n\")\n\t\tif q12 == \"word\":",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\t\tscoreboardxyz",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\t\tscoreboardxyz = scoreboardxyz + 1\n\telse:\n\t\ts(\"Incorrect. Last chance!\\n\")\n\t\tt()\n\t\tq12 = input(\"definition:\\t\\n\")\n\t\tif q12 == \"word\":\n\t\t\ts(\"Correct!\\n\")\n\t\t\tt()\n\t\t\tscoreboardxyz = scoreboardxyz + 1\n\t\telse:",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\t\tq12",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\t\tq12 = input(\"definition:\\t\\n\")\n\t\tif q12 == \"word\":\n\t\t\ts(\"Correct!\\n\")\n\t\t\tt()\n\t\t\tscoreboardxyz = scoreboardxyz + 1\n\t\telse:\n\t\t\ts(\"Incorrect. The correct answer was word. Next question.\\n\")\n\t\t\tt()\nq13 = input(\"definition:\\t\\n\")\nif q13 == \"word\":",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\t\t\tscoreboardxyz",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\t\t\tscoreboardxyz = scoreboardxyz + 1\n\t\telse:\n\t\t\ts(\"Incorrect. The correct answer was word. Next question.\\n\")\n\t\t\tt()\nq13 = input(\"definition:\\t\\n\")\nif q13 == \"word\":\n\ts(\"Correct!\\n\")\n\tt()\n\tscoreboardxyz = scoreboardxyz + 1\nelse:",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "q13",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "q13 = input(\"definition:\\t\\n\")\nif q13 == \"word\":\n\ts(\"Correct!\\n\")\n\tt()\n\tscoreboardxyz = scoreboardxyz + 1\nelse:\n\ts(\"Incorrect. Try again.\\n\")\n\tt()\n\tq13 = input(\"definition:\\t\\n\")\n\tif q13 == \"word\":",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\tscoreboardxyz",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\tscoreboardxyz = scoreboardxyz + 1\nelse:\n\ts(\"Incorrect. Try again.\\n\")\n\tt()\n\tq13 = input(\"definition:\\t\\n\")\n\tif q13 == \"word\":\n\t\ts(\"Correct!\\n\")\n\t\tt()\n\t\tscoreboardxyz = scoreboardxyz + 1\n\telse:",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\tq13",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\tq13 = input(\"definition:\\t\\n\")\n\tif q13 == \"word\":\n\t\ts(\"Correct!\\n\")\n\t\tt()\n\t\tscoreboardxyz = scoreboardxyz + 1\n\telse:\n\t\ts(\"Incorrect. Last chance!\\n\")\n\t\tt()\n\t\tq13 = input(\"definition:\\t\\n\")\n\t\tif q13 == \"word\":",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\t\tscoreboardxyz",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\t\tscoreboardxyz = scoreboardxyz + 1\n\telse:\n\t\ts(\"Incorrect. Last chance!\\n\")\n\t\tt()\n\t\tq13 = input(\"definition:\\t\\n\")\n\t\tif q13 == \"word\":\n\t\t\ts(\"Correct!\\n\")\n\t\t\tt()\n\t\t\tscoreboardxyz = scoreboardxyz + 1\n\t\telse:",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\t\tq13",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\t\tq13 = input(\"definition:\\t\\n\")\n\t\tif q13 == \"word\":\n\t\t\ts(\"Correct!\\n\")\n\t\t\tt()\n\t\t\tscoreboardxyz = scoreboardxyz + 1\n\t\telse:\n\t\t\ts(\"Incorrect. The correct answer was word. Next question.\\n\")\n\t\t\tt()\nq14 = input(\"definition:\\t\\n\")\nif q14 == \"word\":",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\t\t\tscoreboardxyz",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\t\t\tscoreboardxyz = scoreboardxyz + 1\n\t\telse:\n\t\t\ts(\"Incorrect. The correct answer was word. Next question.\\n\")\n\t\t\tt()\nq14 = input(\"definition:\\t\\n\")\nif q14 == \"word\":\n\ts(\"Correct!\\n\")\n\tt()\n\tscoreboardxyz = scoreboardxyz + 1\nelse:",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "q14",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "q14 = input(\"definition:\\t\\n\")\nif q14 == \"word\":\n\ts(\"Correct!\\n\")\n\tt()\n\tscoreboardxyz = scoreboardxyz + 1\nelse:\n\ts(\"Incorrect. Try again.\\n\")\n\tt()\n\tq14 = input(\"definition:\\t\\n\")\n\tif q14 == \"word\":",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\tscoreboardxyz",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\tscoreboardxyz = scoreboardxyz + 1\nelse:\n\ts(\"Incorrect. Try again.\\n\")\n\tt()\n\tq14 = input(\"definition:\\t\\n\")\n\tif q14 == \"word\":\n\t\ts(\"Correct!\\n\")\n\t\tt()\n\t\tscoreboardxyz = scoreboardxyz + 1\n\telse:",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\tq14",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\tq14 = input(\"definition:\\t\\n\")\n\tif q14 == \"word\":\n\t\ts(\"Correct!\\n\")\n\t\tt()\n\t\tscoreboardxyz = scoreboardxyz + 1\n\telse:\n\t\ts(\"Incorrect. Last chance!\\n\")\n\t\tt()\n\t\tq14 = input(\"definition:\\t\\n\")\n\t\tif q14 == \"word\":",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\t\tscoreboardxyz",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\t\tscoreboardxyz = scoreboardxyz + 1\n\telse:\n\t\ts(\"Incorrect. Last chance!\\n\")\n\t\tt()\n\t\tq14 = input(\"definition:\\t\\n\")\n\t\tif q14 == \"word\":\n\t\t\ts(\"Correct!\\n\")\n\t\t\tt()\n\t\t\tscoreboardxyz = scoreboardxyz + 1\n\t\telse:",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\t\tq14",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\t\tq14 = input(\"definition:\\t\\n\")\n\t\tif q14 == \"word\":\n\t\t\ts(\"Correct!\\n\")\n\t\t\tt()\n\t\t\tscoreboardxyz = scoreboardxyz + 1\n\t\telse:\n\t\t\ts(\"Incorrect. The correct answer was word. Next question.\\n\")\n\t\t\tt()\nq15 = input(\"definition:\\t\\n\")\nif q15 == \"word\":",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\t\t\tscoreboardxyz",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\t\t\tscoreboardxyz = scoreboardxyz + 1\n\t\telse:\n\t\t\ts(\"Incorrect. The correct answer was word. Next question.\\n\")\n\t\t\tt()\nq15 = input(\"definition:\\t\\n\")\nif q15 == \"word\":\n\ts(\"Correct!\\n\")\n\tt()\n\tscoreboardxyz = scoreboardxyz + 1\nelse:",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "q15",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "q15 = input(\"definition:\\t\\n\")\nif q15 == \"word\":\n\ts(\"Correct!\\n\")\n\tt()\n\tscoreboardxyz = scoreboardxyz + 1\nelse:\n\ts(\"Incorrect. Try again.\\n\")\n\tt()\n\tq15 = input(\"definition:\\t\\n\")\n\tif q15 == \"word\":",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\tscoreboardxyz",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\tscoreboardxyz = scoreboardxyz + 1\nelse:\n\ts(\"Incorrect. Try again.\\n\")\n\tt()\n\tq15 = input(\"definition:\\t\\n\")\n\tif q15 == \"word\":\n\t\ts(\"Correct!\\n\")\n\t\tt()\n\t\tscoreboardxyz = scoreboardxyz + 1\n\telse:",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\tq15",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\tq15 = input(\"definition:\\t\\n\")\n\tif q15 == \"word\":\n\t\ts(\"Correct!\\n\")\n\t\tt()\n\t\tscoreboardxyz = scoreboardxyz + 1\n\telse:\n\t\ts(\"Incorrect. Last chance!\\n\")\n\t\tt()\n\t\tq15 = input(\"definition:\\t\\n\")\n\t\tif q15 == \"word\":",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\t\tscoreboardxyz",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\t\tscoreboardxyz = scoreboardxyz + 1\n\telse:\n\t\ts(\"Incorrect. Last chance!\\n\")\n\t\tt()\n\t\tq15 = input(\"definition:\\t\\n\")\n\t\tif q15 == \"word\":\n\t\t\ts(\"Correct!\\n\")\n\t\t\tt()\n\t\t\tscoreboardxyz = scoreboardxyz + 1\n\t\telse:",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\t\tq15",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\t\tq15 = input(\"definition:\\t\\n\")\n\t\tif q15 == \"word\":\n\t\t\ts(\"Correct!\\n\")\n\t\t\tt()\n\t\t\tscoreboardxyz = scoreboardxyz + 1\n\t\telse:\n\t\t\ts(\"Incorrect. The correct answer was word. Next question.\\n\")\n\t\t\tt()\nq16 = input(\"definition:\\t\\n\")\nif q16 == \"word\":",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\t\t\tscoreboardxyz",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\t\t\tscoreboardxyz = scoreboardxyz + 1\n\t\telse:\n\t\t\ts(\"Incorrect. The correct answer was word. Next question.\\n\")\n\t\t\tt()\nq16 = input(\"definition:\\t\\n\")\nif q16 == \"word\":\n\ts(\"Correct!\\n\")\n\tt()\n\tscoreboardxyz = scoreboardxyz + 1\nelse:",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "q16",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "q16 = input(\"definition:\\t\\n\")\nif q16 == \"word\":\n\ts(\"Correct!\\n\")\n\tt()\n\tscoreboardxyz = scoreboardxyz + 1\nelse:\n\ts(\"Incorrect. Try again.\\n\")\n\tt()\n\tq16 = input(\"definition:\\t\\n\")\n\tif q16 == \"word\":",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\tscoreboardxyz",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\tscoreboardxyz = scoreboardxyz + 1\nelse:\n\ts(\"Incorrect. Try again.\\n\")\n\tt()\n\tq16 = input(\"definition:\\t\\n\")\n\tif q16 == \"word\":\n\t\ts(\"Correct!\\n\")\n\t\tt()\n\t\tscoreboardxyz = scoreboardxyz + 1\n\telse:",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\tq16",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\tq16 = input(\"definition:\\t\\n\")\n\tif q16 == \"word\":\n\t\ts(\"Correct!\\n\")\n\t\tt()\n\t\tscoreboardxyz = scoreboardxyz + 1\n\telse:\n\t\ts(\"Incorrect. Last chance!\\n\")\n\t\tt()\n\t\tq16 = input(\"definition:\\t\\n\")\n\t\tif q16 == \"word\":",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\t\tscoreboardxyz",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\t\tscoreboardxyz = scoreboardxyz + 1\n\telse:\n\t\ts(\"Incorrect. Last chance!\\n\")\n\t\tt()\n\t\tq16 = input(\"definition:\\t\\n\")\n\t\tif q16 == \"word\":\n\t\t\ts(\"Correct!\\n\")\n\t\t\tt()\n\t\t\tscoreboardxyz = scoreboardxyz + 1\n\t\telse:",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\t\tq16",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\t\tq16 = input(\"definition:\\t\\n\")\n\t\tif q16 == \"word\":\n\t\t\ts(\"Correct!\\n\")\n\t\t\tt()\n\t\t\tscoreboardxyz = scoreboardxyz + 1\n\t\telse:\n\t\t\ts(\"Incorrect. The correct answer was word. Next question.\\n\")\n\t\t\tt()\nq17 = input(\"definition:\\t\\n\")\nif q17 == \"word\":",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\t\t\tscoreboardxyz",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\t\t\tscoreboardxyz = scoreboardxyz + 1\n\t\telse:\n\t\t\ts(\"Incorrect. The correct answer was word. Next question.\\n\")\n\t\t\tt()\nq17 = input(\"definition:\\t\\n\")\nif q17 == \"word\":\n\ts(\"Correct!\\n\")\n\tt()\n\tscoreboardxyz = scoreboardxyz + 1\nelse:",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "q17",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "q17 = input(\"definition:\\t\\n\")\nif q17 == \"word\":\n\ts(\"Correct!\\n\")\n\tt()\n\tscoreboardxyz = scoreboardxyz + 1\nelse:\n\ts(\"Incorrect. Try again.\\n\")\n\tt()\n\tq17 = input(\"definition:\\t\\n\")\n\tif q17 == \"word\":",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\tscoreboardxyz",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\tscoreboardxyz = scoreboardxyz + 1\nelse:\n\ts(\"Incorrect. Try again.\\n\")\n\tt()\n\tq17 = input(\"definition:\\t\\n\")\n\tif q17 == \"word\":\n\t\ts(\"Correct!\\n\")\n\t\tt()\n\t\tscoreboardxyz = scoreboardxyz + 1\n\telse:",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\tq17",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\tq17 = input(\"definition:\\t\\n\")\n\tif q17 == \"word\":\n\t\ts(\"Correct!\\n\")\n\t\tt()\n\t\tscoreboardxyz = scoreboardxyz + 1\n\telse:\n\t\ts(\"Incorrect. Last chance!\\n\")\n\t\tt()\n\t\tq17 = input(\"definition:\\t\\n\")\n\t\tif q17 == \"word\":",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\t\tscoreboardxyz",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\t\tscoreboardxyz = scoreboardxyz + 1\n\telse:\n\t\ts(\"Incorrect. Last chance!\\n\")\n\t\tt()\n\t\tq17 = input(\"definition:\\t\\n\")\n\t\tif q17 == \"word\":\n\t\t\ts(\"Correct!\\n\")\n\t\t\tt()\n\t\t\tscoreboardxyz = scoreboardxyz + 1\n\t\telse:",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\t\tq17",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\t\tq17 = input(\"definition:\\t\\n\")\n\t\tif q17 == \"word\":\n\t\t\ts(\"Correct!\\n\")\n\t\t\tt()\n\t\t\tscoreboardxyz = scoreboardxyz + 1\n\t\telse:\n\t\t\ts(\"Incorrect. The correct answer was word. Next question.\\n\")\n\t\t\tt()\nq18 = input(\"definition:\\t\\n\")\nif q18 == \"word\":",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\t\t\tscoreboardxyz",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\t\t\tscoreboardxyz = scoreboardxyz + 1\n\t\telse:\n\t\t\ts(\"Incorrect. The correct answer was word. Next question.\\n\")\n\t\t\tt()\nq18 = input(\"definition:\\t\\n\")\nif q18 == \"word\":\n\ts(\"Correct!\\n\")\n\tt()\n\tscoreboardxyz = scoreboardxyz + 1\nelse:",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "q18",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "q18 = input(\"definition:\\t\\n\")\nif q18 == \"word\":\n\ts(\"Correct!\\n\")\n\tt()\n\tscoreboardxyz = scoreboardxyz + 1\nelse:\n\ts(\"Incorrect. Try again.\\n\")\n\tt()\n\tq18 = input(\"definition:\\t\\n\")\n\tif q18 == \"word\":",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\tscoreboardxyz",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\tscoreboardxyz = scoreboardxyz + 1\nelse:\n\ts(\"Incorrect. Try again.\\n\")\n\tt()\n\tq18 = input(\"definition:\\t\\n\")\n\tif q18 == \"word\":\n\t\ts(\"Correct!\\n\")\n\t\tt()\n\t\tscoreboardxyz = scoreboardxyz + 1\n\telse:",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\tq18",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\tq18 = input(\"definition:\\t\\n\")\n\tif q18 == \"word\":\n\t\ts(\"Correct!\\n\")\n\t\tt()\n\t\tscoreboardxyz = scoreboardxyz + 1\n\telse:\n\t\ts(\"Incorrect. Last chance!\\n\")\n\t\tt()\n\t\tq18 = input(\"definition:\\tt\\n\")\n\t\tif q18 == \"word\":",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\t\tscoreboardxyz",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\t\tscoreboardxyz = scoreboardxyz + 1\n\telse:\n\t\ts(\"Incorrect. Last chance!\\n\")\n\t\tt()\n\t\tq18 = input(\"definition:\\tt\\n\")\n\t\tif q18 == \"word\":\n\t\t\ts(\"Correct!\\n\")\n\t\t\tt()\n\t\t\tscoreboardxyz = scoreboardxyz + 1\n\t\telse:",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\t\tq18",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\t\tq18 = input(\"definition:\\tt\\n\")\n\t\tif q18 == \"word\":\n\t\t\ts(\"Correct!\\n\")\n\t\t\tt()\n\t\t\tscoreboardxyz = scoreboardxyz + 1\n\t\telse:\n\t\t\ts(\"Incorrect. The correct answer was word. Next question.\\n\")\n\t\t\tt()\nq19 = input(\"definition:\\t\\n\")\nif q19 == \"word\":",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\t\t\tscoreboardxyz",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\t\t\tscoreboardxyz = scoreboardxyz + 1\n\t\telse:\n\t\t\ts(\"Incorrect. The correct answer was word. Next question.\\n\")\n\t\t\tt()\nq19 = input(\"definition:\\t\\n\")\nif q19 == \"word\":\n\ts(\"Correct!\\n\")\n\tt()\n\tscoreboardxyz = scoreboardxyz + 1\nelse:",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "q19",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "q19 = input(\"definition:\\t\\n\")\nif q19 == \"word\":\n\ts(\"Correct!\\n\")\n\tt()\n\tscoreboardxyz = scoreboardxyz + 1\nelse:\n\ts(\"Incorrect. Try again.\\n\")\n\tt()\n\tq19 = input(\"definition:\\t\\n\")\n\tif q19 == \"word\":",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\tscoreboardxyz",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\tscoreboardxyz = scoreboardxyz + 1\nelse:\n\ts(\"Incorrect. Try again.\\n\")\n\tt()\n\tq19 = input(\"definition:\\t\\n\")\n\tif q19 == \"word\":\n\t\ts(\"Correct!\\n\")\n\t\tt()\n\t\tscoreboardxyz = scoreboardxyz + 1\n\telse:",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\tq19",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\tq19 = input(\"definition:\\t\\n\")\n\tif q19 == \"word\":\n\t\ts(\"Correct!\\n\")\n\t\tt()\n\t\tscoreboardxyz = scoreboardxyz + 1\n\telse:\n\t\ts(\"Incorrect. Last chance!\\n\")\n\t\tt()\n\t\tq19 = input(\"definition:\\t\\n\")\n\t\tif q19 == \"word\":",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\t\tscoreboardxyz",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\t\tscoreboardxyz = scoreboardxyz + 1\n\telse:\n\t\ts(\"Incorrect. Last chance!\\n\")\n\t\tt()\n\t\tq19 = input(\"definition:\\t\\n\")\n\t\tif q19 == \"word\":\n\t\t\ts(\"Correct!\\n\")\n\t\t\tt()\n\t\t\tscoreboardxyz = scoreboardxyz + 1\n\t\telse:",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\t\tq19",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\t\tq19 = input(\"definition:\\t\\n\")\n\t\tif q19 == \"word\":\n\t\t\ts(\"Correct!\\n\")\n\t\t\tt()\n\t\t\tscoreboardxyz = scoreboardxyz + 1\n\t\telse:\n\t\t\ts(\"Incorrect. The correct answer was word. Next question.\\n\")\n\t\t\tt()\nq20 = input(\"definition:\\t\\n\")\nif q20 == \"word\":",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\t\t\tscoreboardxyz",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\t\t\tscoreboardxyz = scoreboardxyz + 1\n\t\telse:\n\t\t\ts(\"Incorrect. The correct answer was word. Next question.\\n\")\n\t\t\tt()\nq20 = input(\"definition:\\t\\n\")\nif q20 == \"word\":\n\ts(\"Correct! Thank you for playing.\\n\")\n\tt()\n\tscoreboardxyz = scoreboardxyz + 1\n\tprint(\"Your score was\",scoreboardxyz,\"out of 20.\")",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "q20",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "q20 = input(\"definition:\\t\\n\")\nif q20 == \"word\":\n\ts(\"Correct! Thank you for playing.\\n\")\n\tt()\n\tscoreboardxyz = scoreboardxyz + 1\n\tprint(\"Your score was\",scoreboardxyz,\"out of 20.\")\nelse:\n\ts(\"Incorrect. Try again.\\n\")\n\tt()\n\tq20 = input(\"definition:\\t\\n\")",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\tscoreboardxyz",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\tscoreboardxyz = scoreboardxyz + 1\n\tprint(\"Your score was\",scoreboardxyz,\"out of 20.\")\nelse:\n\ts(\"Incorrect. Try again.\\n\")\n\tt()\n\tq20 = input(\"definition:\\t\\n\")\n\tif q20 == \"word\":\n\t\ts(\"Correct! Thank you for playing.\\n\")\n\t\tt()\n\t\tscoreboardxyz = scoreboardxyz + 1",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\tq20",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\tq20 = input(\"definition:\\t\\n\")\n\tif q20 == \"word\":\n\t\ts(\"Correct! Thank you for playing.\\n\")\n\t\tt()\n\t\tscoreboardxyz = scoreboardxyz + 1\n\t\ts(\"Your score was\",scoreboardxyz,\"out of 20.\")\n\telse:\n\t\ts(\"Incorrect. Last chance!\\n\")\n\t\tt()\n\t\tq20 = input(\"definition:\\t\\n\")",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\t\tscoreboardxyz",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\t\tscoreboardxyz = scoreboardxyz + 1\n\t\ts(\"Your score was\",scoreboardxyz,\"out of 20.\")\n\telse:\n\t\ts(\"Incorrect. Last chance!\\n\")\n\t\tt()\n\t\tq20 = input(\"definition:\\t\\n\")\n\t\tif q20 == \"word\":\n\t\t\ts(\"Correct! Thank you  for playing.\\n\")\n\t\t\tt()\n\t\t\tslp(1)",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\t\tq20",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\t\tq20 = input(\"definition:\\t\\n\")\n\t\tif q20 == \"word\":\n\t\t\ts(\"Correct! Thank you  for playing.\\n\")\n\t\t\tt()\n\t\t\tslp(1)\n\t\t\tt()\n\t\t\tscoreboardxyz = scoreboardxyz + 1\n\t\t\tprint(\"Your score was\",scoreboardxyz,\"out of 20.\")\n\t\telse:\n\t\t\ts(\"Incorrect. The correct answer was word. Thank you for playing.\\n\")",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "\t\t\tscoreboardxyz",
    "kind": 5,
    "importPath": "by-catagory.misc.01bff0989e.python-quiz-template",
    "description": "by-catagory.misc.01bff0989e.python-quiz-template",
    "peekOfCode": "\t\t\tscoreboardxyz = scoreboardxyz + 1\n\t\t\tprint(\"Your score was\",scoreboardxyz,\"out of 20.\")\n\t\telse:\n\t\t\ts(\"Incorrect. The correct answer was word. Thank you for playing.\\n\")\n\t\t\tt()\n\t\t\tprint(\"Your score was\",scoreboardxyz,\"out of 20.\")\nprint('Made with python 3.8.2')\nslow(\"\"\"\n          .?77777777777777$.            \n          777..777777777777$+           ",
    "detail": "by-catagory.misc.01bff0989e.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "input_str",
    "kind": 5,
    "importPath": "by-catagory.practice.1a9b72a1e2.prac5",
    "description": "by-catagory.practice.1a9b72a1e2.prac5",
    "peekOfCode": "input_str = input(\"Enter a list of numbers: \")\nlist1 = input_str.split()\ninput_str = input(\"Enter another list of numbers: \")\nlist2 = input_str.split()\nprint(\"\\nCommon elements: \")\nif len(list1) > len(list2):\n    list2 = list(dict.fromkeys(list2))\n    for x in list2:\n        if x in list1:\n            print(x, end=\" \")",
    "detail": "by-catagory.practice.1a9b72a1e2.prac5",
    "documentation": {}
  },
  {
    "label": "list1",
    "kind": 5,
    "importPath": "by-catagory.practice.1a9b72a1e2.prac5",
    "description": "by-catagory.practice.1a9b72a1e2.prac5",
    "peekOfCode": "list1 = input_str.split()\ninput_str = input(\"Enter another list of numbers: \")\nlist2 = input_str.split()\nprint(\"\\nCommon elements: \")\nif len(list1) > len(list2):\n    list2 = list(dict.fromkeys(list2))\n    for x in list2:\n        if x in list1:\n            print(x, end=\" \")\nelse:",
    "detail": "by-catagory.practice.1a9b72a1e2.prac5",
    "documentation": {}
  },
  {
    "label": "input_str",
    "kind": 5,
    "importPath": "by-catagory.practice.1a9b72a1e2.prac5",
    "description": "by-catagory.practice.1a9b72a1e2.prac5",
    "peekOfCode": "input_str = input(\"Enter another list of numbers: \")\nlist2 = input_str.split()\nprint(\"\\nCommon elements: \")\nif len(list1) > len(list2):\n    list2 = list(dict.fromkeys(list2))\n    for x in list2:\n        if x in list1:\n            print(x, end=\" \")\nelse:\n    list1 = list(dict.fromkeys(list1))",
    "detail": "by-catagory.practice.1a9b72a1e2.prac5",
    "documentation": {}
  },
  {
    "label": "list2",
    "kind": 5,
    "importPath": "by-catagory.practice.1a9b72a1e2.prac5",
    "description": "by-catagory.practice.1a9b72a1e2.prac5",
    "peekOfCode": "list2 = input_str.split()\nprint(\"\\nCommon elements: \")\nif len(list1) > len(list2):\n    list2 = list(dict.fromkeys(list2))\n    for x in list2:\n        if x in list1:\n            print(x, end=\" \")\nelse:\n    list1 = list(dict.fromkeys(list1))\n    for x in list1:",
    "detail": "by-catagory.practice.1a9b72a1e2.prac5",
    "documentation": {}
  },
  {
    "label": "n1",
    "kind": 5,
    "importPath": "by-catagory.practice.1a9b72a1e2.prac5",
    "description": "by-catagory.practice.1a9b72a1e2.prac5",
    "peekOfCode": "n1 = int(input(\"Enter the length of first list: \"))\nlist3 = []\ncount = 0\n# generating n1 random numners and storing them in list3\nwhile count < n1:\n    list3.append(random.randrange(0, 11, 1))\n    count += 1\nprint(\"First list: \", list3)\nn2 = int(input(\"Enter the length of second list: \"))\nlist4 = []",
    "detail": "by-catagory.practice.1a9b72a1e2.prac5",
    "documentation": {}
  },
  {
    "label": "list3",
    "kind": 5,
    "importPath": "by-catagory.practice.1a9b72a1e2.prac5",
    "description": "by-catagory.practice.1a9b72a1e2.prac5",
    "peekOfCode": "list3 = []\ncount = 0\n# generating n1 random numners and storing them in list3\nwhile count < n1:\n    list3.append(random.randrange(0, 11, 1))\n    count += 1\nprint(\"First list: \", list3)\nn2 = int(input(\"Enter the length of second list: \"))\nlist4 = []\ncount = 0",
    "detail": "by-catagory.practice.1a9b72a1e2.prac5",
    "documentation": {}
  },
  {
    "label": "count",
    "kind": 5,
    "importPath": "by-catagory.practice.1a9b72a1e2.prac5",
    "description": "by-catagory.practice.1a9b72a1e2.prac5",
    "peekOfCode": "count = 0\n# generating n1 random numners and storing them in list3\nwhile count < n1:\n    list3.append(random.randrange(0, 11, 1))\n    count += 1\nprint(\"First list: \", list3)\nn2 = int(input(\"Enter the length of second list: \"))\nlist4 = []\ncount = 0\n# generating n2 random numners and storing them in list4",
    "detail": "by-catagory.practice.1a9b72a1e2.prac5",
    "documentation": {}
  },
  {
    "label": "n2",
    "kind": 5,
    "importPath": "by-catagory.practice.1a9b72a1e2.prac5",
    "description": "by-catagory.practice.1a9b72a1e2.prac5",
    "peekOfCode": "n2 = int(input(\"Enter the length of second list: \"))\nlist4 = []\ncount = 0\n# generating n2 random numners and storing them in list4\nwhile count < n1:\n    list4.append(random.randrange(0, 11, 1))\n    count += 1\nprint(\"Second list: \", list4)\nprint(\"\\nCommon elements: \")\nif n1 > n2:",
    "detail": "by-catagory.practice.1a9b72a1e2.prac5",
    "documentation": {}
  },
  {
    "label": "list4",
    "kind": 5,
    "importPath": "by-catagory.practice.1a9b72a1e2.prac5",
    "description": "by-catagory.practice.1a9b72a1e2.prac5",
    "peekOfCode": "list4 = []\ncount = 0\n# generating n2 random numners and storing them in list4\nwhile count < n1:\n    list4.append(random.randrange(0, 11, 1))\n    count += 1\nprint(\"Second list: \", list4)\nprint(\"\\nCommon elements: \")\nif n1 > n2:\n    list4 = list(dict.fromkeys(list4))",
    "detail": "by-catagory.practice.1a9b72a1e2.prac5",
    "documentation": {}
  },
  {
    "label": "count",
    "kind": 5,
    "importPath": "by-catagory.practice.1a9b72a1e2.prac5",
    "description": "by-catagory.practice.1a9b72a1e2.prac5",
    "peekOfCode": "count = 0\n# generating n2 random numners and storing them in list4\nwhile count < n1:\n    list4.append(random.randrange(0, 11, 1))\n    count += 1\nprint(\"Second list: \", list4)\nprint(\"\\nCommon elements: \")\nif n1 > n2:\n    list4 = list(dict.fromkeys(list4))\n    for x in list4:",
    "detail": "by-catagory.practice.1a9b72a1e2.prac5",
    "documentation": {}
  },
  {
    "label": "process_dir",
    "kind": 2,
    "importPath": "by-catagory.utilities.1adb8b9465.gendirhtml",
    "description": "by-catagory.utilities.1adb8b9465.gendirhtml",
    "peekOfCode": "def process_dir(top_dir, opts):\n    glob_patt = opts.filter or '*'\n    path_top_dir: Path\n    path_top_dir = Path(top_dir)\n    index_file = None\n    index_path = Path(path_top_dir, opts.output_file)\n    if opts.verbose:\n        print(f'Traversing dir {path_top_dir.absolute()}')\n    try:\n        index_file = open(index_path, 'w')",
    "detail": "by-catagory.utilities.1adb8b9465.gendirhtml",
    "documentation": {}
  },
  {
    "label": "pretty_size",
    "kind": 2,
    "importPath": "by-catagory.utilities.1adb8b9465.gendirhtml",
    "description": "by-catagory.utilities.1adb8b9465.gendirhtml",
    "peekOfCode": "def pretty_size(bytes, units=UNITS_MAPPING):\n    \"\"\"Human-readable file sizes.\n    ripped from https://pypi.python.org/pypi/hurry.filesize/\n    \"\"\"\n    for factor, suffix in units:\n        if bytes >= factor:\n            break\n    amount = int(bytes / factor)\n    if isinstance(suffix, tuple):\n        singular, multiple = suffix",
    "detail": "by-catagory.utilities.1adb8b9465.gendirhtml",
    "documentation": {}
  },
  {
    "label": "DEFAULT_OUTPUT_FILE",
    "kind": 5,
    "importPath": "by-catagory.utilities.1adb8b9465.gendirhtml",
    "description": "by-catagory.utilities.1adb8b9465.gendirhtml",
    "peekOfCode": "DEFAULT_OUTPUT_FILE = 'index.html'\ndef process_dir(top_dir, opts):\n    glob_patt = opts.filter or '*'\n    path_top_dir: Path\n    path_top_dir = Path(top_dir)\n    index_file = None\n    index_path = Path(path_top_dir, opts.output_file)\n    if opts.verbose:\n        print(f'Traversing dir {path_top_dir.absolute()}')\n    try:",
    "detail": "by-catagory.utilities.1adb8b9465.gendirhtml",
    "documentation": {}
  },
  {
    "label": "UNITS_MAPPING",
    "kind": 5,
    "importPath": "by-catagory.utilities.1adb8b9465.gendirhtml",
    "description": "by-catagory.utilities.1adb8b9465.gendirhtml",
    "peekOfCode": "UNITS_MAPPING = [\n    (1024 ** 5, ' PB'),\n    (1024 ** 4, ' TB'),\n    (1024 ** 3, ' GB'),\n    (1024 ** 2, ' MB'),\n    (1024 ** 1, ' KB'),\n    (1024 ** 0, (' byte', ' bytes')),\n]\ndef pretty_size(bytes, units=UNITS_MAPPING):\n    \"\"\"Human-readable file sizes.",
    "detail": "by-catagory.utilities.1adb8b9465.gendirhtml",
    "documentation": {}
  },
  {
    "label": "sumZero",
    "kind": 2,
    "importPath": "by-extension.python.01-FindUniqueIntegers",
    "description": "by-extension.python.01-FindUniqueIntegers",
    "peekOfCode": "def sumZero(self, n: int):\n    \"\"\"\n    :type n: int\n    :rtype: List[int]\n    \"\"\"\n    # time complexity: O(1); create one range of digits\n    # space complexity:  O(1); one unit of space\n    # What's going on here?  Let's say n = 5.\n    # Return a range of numbers which starts at 1-5, ends at 5, steps every 2\n    # So that means it starts at -4, ends at 5, steps every 2",
    "detail": "by-extension.python.01-FindUniqueIntegers",
    "documentation": {}
  },
  {
    "label": "calculate_current_moves",
    "kind": 2,
    "importPath": "by-extension.python.02-MinMovesString",
    "description": "by-extension.python.02-MinMovesString",
    "peekOfCode": "def calculate_current_moves(start_sub, end_sub):\n    sub_length = end_sub - start_sub\n    # get current number of moves to add to total\n    current_moves = sub_length // 3\n    # add current number of moves to total\n    return current_moves\ndef calculate_min_moves(string):\n    # initialize start and end of first possible subsequence\n    start_sub = 0\n    end_sub = 1",
    "detail": "by-extension.python.02-MinMovesString",
    "documentation": {}
  },
  {
    "label": "calculate_min_moves",
    "kind": 2,
    "importPath": "by-extension.python.02-MinMovesString",
    "description": "by-extension.python.02-MinMovesString",
    "peekOfCode": "def calculate_min_moves(string):\n    # initialize start and end of first possible subsequence\n    start_sub = 0\n    end_sub = 1\n    # initialize counter for number of moves\n    moves = 0\n    # initialize string length\n    length = len(string)\n    # loop until index of subsequence end gets to end of string\n    while end_sub < length:",
    "detail": "by-extension.python.02-MinMovesString",
    "documentation": {}
  },
  {
    "label": "is_valid",
    "kind": 2,
    "importPath": "by-extension.python.03-FindPossibleValidIPs",
    "description": "by-extension.python.03-FindPossibleValidIPs",
    "peekOfCode": "def is_valid(possible_ip): \n    # splitting at period\n    ip_address = possible_ip.split(\".\") \n    # checking for corner cases \n    for subaddress in ip_address: \n        # get length of subaddress\n        length_subaddress = len(subaddress)\n        # get int of subaddress\n        int_subaddress = int(subaddress)\n        # get first digit of subaddress",
    "detail": "by-extension.python.03-FindPossibleValidIPs",
    "documentation": {}
  },
  {
    "label": "convert_string_to_ip",
    "kind": 2,
    "importPath": "by-extension.python.03-FindPossibleValidIPs",
    "description": "by-extension.python.03-FindPossibleValidIPs",
    "peekOfCode": "def convert_string_to_ip(string): \n    # get string length\n    length = len(string) \n    # if string of digits > 12, it's not an IP; return empty array\n    if length > 12: \n        return [] \n    # else set current possible ip as string AND\n    current_possible_ip = string \n    # initialize empty valid ip list\n    valid_ip_list = [] ",
    "detail": "by-extension.python.03-FindPossibleValidIPs",
    "documentation": {}
  },
  {
    "label": "A",
    "kind": 5,
    "importPath": "by-extension.python.03-FindPossibleValidIPs",
    "description": "by-extension.python.03-FindPossibleValidIPs",
    "peekOfCode": "A = \"25525511135\"\n# B = \"25505011535\"\nprint(convert_string_to_ip(A)) \n# print(convert_string_to_ip(B))",
    "detail": "by-extension.python.03-FindPossibleValidIPs",
    "documentation": {}
  },
  {
    "label": "min_swap",
    "kind": 2,
    "importPath": "by-extension.python.04-MinSwapsPalindrome",
    "description": "by-extension.python.04-MinSwapsPalindrome",
    "peekOfCode": "def min_swap(string):\n    # convert string to list\n    list_of_string = list(string)\n    # check if list_of_string can be palindrome\n    odd = 0\n    letter = [0] * 26\n    for i in list_of_string: \n        # get unicode char of current letter\n        unicode_i = ord(i)\n        # get unicode char of letter 'a'",
    "detail": "by-extension.python.04-MinSwapsPalindrome",
    "documentation": {}
  },
  {
    "label": "longest_substring",
    "kind": 2,
    "importPath": "by-extension.python.05-LongestSubstringWithout3",
    "description": "by-extension.python.05-LongestSubstringWithout3",
    "peekOfCode": "def longest_substring(s):\n    # initialize final string\n    final_string = \"\"\n    length = len(s)\n    x = 0\n    # loop through s\n    while len(s) >= 2:\n        beginning = s[0]\n        middle = s[1]\n        if len(s) > 2:",
    "detail": "by-extension.python.05-LongestSubstringWithout3",
    "documentation": {}
  },
  {
    "label": "TestMixedSorting",
    "kind": 6,
    "importPath": "by-extension.python.05_mixed_sorting",
    "description": "by-extension.python.05_mixed_sorting",
    "peekOfCode": "class TestMixedSorting(unittest.TestCase):\n    def test_1(self):\n        self.assertEqual(mixed_sorting(\n            [8, 13, 11, 90, -5, 4]), [4, 13, 11, 8, -5, 90])\n    def test_2(self):\n        self.assertEqual(mixed_sorting([1, 2, 3, 6, 5, 4]), [5, 2, 3, 4, 1, 6])\nif __name__ == '__main__':\n    unittest.main(verbosity=2)",
    "detail": "by-extension.python.05_mixed_sorting",
    "documentation": {}
  },
  {
    "label": "mixed_sorting",
    "kind": 2,
    "importPath": "by-extension.python.05_mixed_sorting",
    "description": "by-extension.python.05_mixed_sorting",
    "peekOfCode": "def mixed_sorting(nums):\n    positions = []\n    odd = []\n    even = []\n    sorted_list = []\n    for i in nums:\n        if i%2 == 0:\n            even.append(i)\n            positions.append(\"E\")\n        else:",
    "detail": "by-extension.python.05_mixed_sorting",
    "documentation": {}
  },
  {
    "label": "nums",
    "kind": 5,
    "importPath": "by-extension.python.05_mixed_sorting",
    "description": "by-extension.python.05_mixed_sorting",
    "peekOfCode": "nums = [8, 13, 11, 90, -5, 4]\nOutput\n[4, 13, 11, 8, -5, 90]\nExplanation\nThe even numbers are sorted in increasing order, the odd numbers are sorted in \ndecreasing number, and the relative positions were \n[even, odd, odd, even, odd, even] and remain the same after sorting.\n\"\"\"\n# solution\nimport unittest",
    "detail": "by-extension.python.05_mixed_sorting",
    "documentation": {}
  },
  {
    "label": "lexi_smallest",
    "kind": 2,
    "importPath": "by-extension.python.06-LexicographicallySmallestString",
    "description": "by-extension.python.06-LexicographicallySmallestString",
    "peekOfCode": "def lexi_smallest(s):\n    length = len(s)\n    length_one_short = length - 1\n    for x in range(length_one_short):\n        i_one_short = x - 1\n        x_one_long = x + 1\n        if s[x] > s[x_one_long]:\n            return s[:x] + s[x_one_long:]\n    return s[:-1]\n# abcd",
    "detail": "by-extension.python.06-LexicographicallySmallestString",
    "documentation": {}
  },
  {
    "label": "no_three_consecutive",
    "kind": 2,
    "importPath": "by-extension.python.07-StringWithout3IdenticalConLetters",
    "description": "by-extension.python.07-StringWithout3IdenticalConLetters",
    "peekOfCode": "def no_three_consecutive(s):\n    final_string = s[0:2]\n    length = len(s)\n    # loop through original string\n    for x in range(2, length):\n        string_x = s[x]\n        string_x_one_short = s[x-1]\n        string_x_two_short = s[x-2]\n        if string_x == string_x_one_short and string_x == string_x_two_short:\n            # don't append if previous chars are same",
    "detail": "by-extension.python.07-StringWithout3IdenticalConLetters",
    "documentation": {}
  },
  {
    "label": "longest_semialternating_ss",
    "kind": 2,
    "importPath": "by-extension.python.08-LongestSemiAlternatingSubString",
    "description": "by-extension.python.08-LongestSemiAlternatingSubString",
    "peekOfCode": "def longest_semialternating_ss(s):\n    length = len(s)\n    if not s or length == 0:\n        return 0\n    if length < 3:\n        return length\n    beginning = 0\n    end = 1\n    # first character\n    comparison_char = s[0] ",
    "detail": "by-extension.python.08-LongestSemiAlternatingSubString",
    "documentation": {}
  },
  {
    "label": "longest_semi",
    "kind": 2,
    "importPath": "by-extension.python.08-LongestSemiAlternatingSubString",
    "description": "by-extension.python.08-LongestSemiAlternatingSubString",
    "peekOfCode": "def longest_semi(s):\n    max_length = 0\n    left = 0\n    for right in range(len(s)):\n        if right - left + 1 >= 3 and s[right] == s[right-1] == s[right-2]:\n            left = right - 1\n        max_length = max(max_length, right-left+1)\n    return max_length\n# 7 \nprint(longest_semialternating_ss(\"baaabbabbb\"))",
    "detail": "by-extension.python.08-LongestSemiAlternatingSubString",
    "documentation": {}
  },
  {
    "label": "min_steps_equal_piles",
    "kind": 2,
    "importPath": "by-extension.python.09-MinStepsToMakePilesEqualHeight",
    "description": "by-extension.python.09-MinStepsToMakePilesEqualHeight",
    "peekOfCode": "def min_steps_equal_piles(piles):\n    steps = 0\n    length = len(piles)\n    if piles == []:\n        return 0\n    else:\n        # get sorted list\n        sorted_piles = set(piles)\n        sorted_piles = sorted(sorted_piles)\n        # get min, max and 2nd max",
    "detail": "by-extension.python.09-MinStepsToMakePilesEqualHeight",
    "documentation": {}
  },
  {
    "label": "k_days_later",
    "kind": 2,
    "importPath": "by-extension.python.10-DayOfWeekThatIsKDaysLater",
    "description": "by-extension.python.10-DayOfWeekThatIsKDaysLater",
    "peekOfCode": "def k_days_later(s, k):\n    days_of_week = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"]\n    remainder = k % 7\n    s_index = days_of_week.index(s)\n    move_forward = remainder + s_index\n    if move_forward < 7:\n        return days_of_week[move_forward]\n    else:\n        correct_day_index = move_forward - 7\n        return days_of_week[correct_day_index]",
    "detail": "by-extension.python.10-DayOfWeekThatIsKDaysLater",
    "documentation": {}
  },
  {
    "label": "oranges_rotting",
    "kind": 2,
    "importPath": "by-extension.python.12-RottingOranges",
    "description": "by-extension.python.12-RottingOranges",
    "peekOfCode": "def oranges_rotting(grid):\n    minute_count = 0\n    def create_set(grid, target_value):\n        result = set()\n        for y in range(len(grid)):\n            for x in range(len(grid[0])):\n                if grid[y][x] == target_value:\n                    result.add((x,y))\n        return result\n    # create a set of rotten & fresh orange locations",
    "detail": "by-extension.python.12-RottingOranges",
    "documentation": {}
  },
  {
    "label": "grid",
    "kind": 5,
    "importPath": "by-extension.python.12-RottingOranges",
    "description": "by-extension.python.12-RottingOranges",
    "peekOfCode": "grid = [[2,1,1],[1,1,0],[0,1,1]]\nprint(oranges_rotting(grid))\n# -1\ngrid = [[2,1,1],[0,1,1],[1,0,1]]\nprint(oranges_rotting(grid))\n# 0\ngrid = [[0,2]]\nprint(oranges_rotting(grid))",
    "detail": "by-extension.python.12-RottingOranges",
    "documentation": {}
  },
  {
    "label": "grid",
    "kind": 5,
    "importPath": "by-extension.python.12-RottingOranges",
    "description": "by-extension.python.12-RottingOranges",
    "peekOfCode": "grid = [[2,1,1],[0,1,1],[1,0,1]]\nprint(oranges_rotting(grid))\n# 0\ngrid = [[0,2]]\nprint(oranges_rotting(grid))",
    "detail": "by-extension.python.12-RottingOranges",
    "documentation": {}
  },
  {
    "label": "grid",
    "kind": 5,
    "importPath": "by-extension.python.12-RottingOranges",
    "description": "by-extension.python.12-RottingOranges",
    "peekOfCode": "grid = [[0,2]]\nprint(oranges_rotting(grid))",
    "detail": "by-extension.python.12-RottingOranges",
    "documentation": {}
  },
  {
    "label": "bottles",
    "kind": 2,
    "importPath": "by-extension.python.13-MilkBottles",
    "description": "by-extension.python.13-MilkBottles",
    "peekOfCode": "def bottles(n):\n    bottles_to_drink = int((3*n-1)/2)\n    return bottles_to_drink\nprint(bottles(18))",
    "detail": "by-extension.python.13-MilkBottles",
    "documentation": {}
  },
  {
    "label": "BinarySearchTree",
    "kind": 6,
    "importPath": "by-extension.python.14-FindLargestBSTSubtreeInGivenBT",
    "description": "by-extension.python.14-FindLargestBSTSubtreeInGivenBT",
    "peekOfCode": "class BinarySearchTree:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n    def largest_BST(self):      \n        # Set the initial values for calling  \n        # largestBSTUtil()  \n        Min = [999999999999] # For minimum value in right subtree  \n        Max = [-999999999999] # For maximum value in left subtree  ",
    "detail": "by-extension.python.14-FindLargestBSTSubtreeInGivenBT",
    "documentation": {}
  },
  {
    "label": "t",
    "kind": 5,
    "importPath": "by-extension.python.56",
    "description": "by-extension.python.56",
    "peekOfCode": "t = turtle.Turtle()\nt.circle(50)",
    "detail": "by-extension.python.56",
    "documentation": {}
  },
  {
    "label": "solution",
    "kind": 2,
    "importPath": "by-extension.python.A solution to project euler problem 3",
    "description": "by-extension.python.A solution to project euler problem 3",
    "peekOfCode": "def solution(n: int = 600851475143) -> int:\n    \"\"\"Returns the largest prime factor of a given number n.\n    >>> solution(13195)\n    29\n    >>> solution(10)\n    5\n    >>> solution(17)\n    17\n    >>> solution(3.4)\n    3",
    "detail": "by-extension.python.A solution to project euler problem 3",
    "documentation": {}
  },
  {
    "label": "IInd_func",
    "kind": 2,
    "importPath": "by-extension.python.Aakanksha",
    "description": "by-extension.python.Aakanksha",
    "peekOfCode": "def IInd_func():\n  count1=0\n  for j in range(5):\n    a=0\n    count=0\n    user_pwd = input(\"\")        #password you remember\n    for i in range(len(pwd)):\n      if user_pwd[i] == pwd[a]:       #comparing remembered pwd with fixed pwd\n        a +=1\n        count+=1 ",
    "detail": "by-extension.python.Aakanksha",
    "documentation": {}
  },
  {
    "label": "number1",
    "kind": 5,
    "importPath": "by-extension.python.ABC",
    "description": "by-extension.python.ABC",
    "peekOfCode": "number1 = input(\"First number: \") \nnumber2 = input(\"\\nSecond number: \") \n# Adding two numbers \n# User might also enter float numbers \nsum = float(number1) + float(number2) \n# Display the sum \n# will print value in float \nprint(\"The sum of {0} and {1} is {2}\" .format(number1, number2, sum))",
    "detail": "by-extension.python.ABC",
    "documentation": {}
  },
  {
    "label": "number2",
    "kind": 5,
    "importPath": "by-extension.python.ABC",
    "description": "by-extension.python.ABC",
    "peekOfCode": "number2 = input(\"\\nSecond number: \") \n# Adding two numbers \n# User might also enter float numbers \nsum = float(number1) + float(number2) \n# Display the sum \n# will print value in float \nprint(\"The sum of {0} and {1} is {2}\" .format(number1, number2, sum))",
    "detail": "by-extension.python.ABC",
    "documentation": {}
  },
  {
    "label": "sum",
    "kind": 5,
    "importPath": "by-extension.python.ABC",
    "description": "by-extension.python.ABC",
    "peekOfCode": "sum = float(number1) + float(number2) \n# Display the sum \n# will print value in float \nprint(\"The sum of {0} and {1} is {2}\" .format(number1, number2, sum))",
    "detail": "by-extension.python.ABC",
    "documentation": {}
  },
  {
    "label": "num1",
    "kind": 5,
    "importPath": "by-extension.python.add 2 number",
    "description": "by-extension.python.add 2 number",
    "peekOfCode": "num1 = 15\nnum2 = 12\n# Adding two nos \nsum = num1 + num2 \n# printing values \nprint(\"Sum of {0} and {1} is {2}\" .format(num1, num2, sum))",
    "detail": "by-extension.python.add 2 number",
    "documentation": {}
  },
  {
    "label": "num2",
    "kind": 5,
    "importPath": "by-extension.python.add 2 number",
    "description": "by-extension.python.add 2 number",
    "peekOfCode": "num2 = 12\n# Adding two nos \nsum = num1 + num2 \n# printing values \nprint(\"Sum of {0} and {1} is {2}\" .format(num1, num2, sum))",
    "detail": "by-extension.python.add 2 number",
    "documentation": {}
  },
  {
    "label": "sum",
    "kind": 5,
    "importPath": "by-extension.python.add 2 number",
    "description": "by-extension.python.add 2 number",
    "peekOfCode": "sum = num1 + num2 \n# printing values \nprint(\"Sum of {0} and {1} is {2}\" .format(num1, num2, sum))",
    "detail": "by-extension.python.add 2 number",
    "documentation": {}
  },
  {
    "label": "num1",
    "kind": 5,
    "importPath": "by-extension.python.add 2 numbers",
    "description": "by-extension.python.add 2 numbers",
    "peekOfCode": "num1 = 1.5\nnum2 = 6.3\n# Add two numbers\nsum = num1 + num2\n# Display the sum\nprint('The sum of {0} and {1} is {2}'.format(num1, num2, sum))",
    "detail": "by-extension.python.add 2 numbers",
    "documentation": {}
  },
  {
    "label": "num2",
    "kind": 5,
    "importPath": "by-extension.python.add 2 numbers",
    "description": "by-extension.python.add 2 numbers",
    "peekOfCode": "num2 = 6.3\n# Add two numbers\nsum = num1 + num2\n# Display the sum\nprint('The sum of {0} and {1} is {2}'.format(num1, num2, sum))",
    "detail": "by-extension.python.add 2 numbers",
    "documentation": {}
  },
  {
    "label": "sum",
    "kind": 5,
    "importPath": "by-extension.python.add 2 numbers",
    "description": "by-extension.python.add 2 numbers",
    "peekOfCode": "sum = num1 + num2\n# Display the sum\nprint('The sum of {0} and {1} is {2}'.format(num1, num2, sum))",
    "detail": "by-extension.python.add 2 numbers",
    "documentation": {}
  },
  {
    "label": "num1",
    "kind": 5,
    "importPath": "by-extension.python.add two no",
    "description": "by-extension.python.add two no",
    "peekOfCode": "num1 = 1.5\nnum2 = 6.3\nsum = num1 + num2\nprint('The sum of {0} and {1} is {2}'.format(num1, num2, sum))",
    "detail": "by-extension.python.add two no",
    "documentation": {}
  },
  {
    "label": "num2",
    "kind": 5,
    "importPath": "by-extension.python.add two no",
    "description": "by-extension.python.add two no",
    "peekOfCode": "num2 = 6.3\nsum = num1 + num2\nprint('The sum of {0} and {1} is {2}'.format(num1, num2, sum))",
    "detail": "by-extension.python.add two no",
    "documentation": {}
  },
  {
    "label": "sum",
    "kind": 5,
    "importPath": "by-extension.python.add two no",
    "description": "by-extension.python.add two no",
    "peekOfCode": "sum = num1 + num2\nprint('The sum of {0} and {1} is {2}'.format(num1, num2, sum))",
    "detail": "by-extension.python.add two no",
    "documentation": {}
  },
  {
    "label": "num1",
    "kind": 5,
    "importPath": "by-extension.python.add two number",
    "description": "by-extension.python.add two number",
    "peekOfCode": "num1 = 1.5\nnum2 = 6.3\n# Add two numbers\nsum = num1 + num2\n# Display the sum\nprint('The sum of {0} and {1} is {2}'.format(num1, num2, sum))",
    "detail": "by-extension.python.add two number",
    "documentation": {}
  },
  {
    "label": "num2",
    "kind": 5,
    "importPath": "by-extension.python.add two number",
    "description": "by-extension.python.add two number",
    "peekOfCode": "num2 = 6.3\n# Add two numbers\nsum = num1 + num2\n# Display the sum\nprint('The sum of {0} and {1} is {2}'.format(num1, num2, sum))",
    "detail": "by-extension.python.add two number",
    "documentation": {}
  },
  {
    "label": "sum",
    "kind": 5,
    "importPath": "by-extension.python.add two number",
    "description": "by-extension.python.add two number",
    "peekOfCode": "sum = num1 + num2\n# Display the sum\nprint('The sum of {0} and {1} is {2}'.format(num1, num2, sum))",
    "detail": "by-extension.python.add two number",
    "documentation": {}
  },
  {
    "label": "num1",
    "kind": 5,
    "importPath": "by-extension.python.Add two numbers",
    "description": "by-extension.python.Add two numbers",
    "peekOfCode": "num1 = 1.5\nnum2 = 6.3\n# Add two numbers\nsum = num1 + num2\n# Display the sum\nprint('The sum of {0} and {1} is {2}'.format(num1, num2, sum))",
    "detail": "by-extension.python.Add two numbers",
    "documentation": {}
  },
  {
    "label": "num2",
    "kind": 5,
    "importPath": "by-extension.python.Add two numbers",
    "description": "by-extension.python.Add two numbers",
    "peekOfCode": "num2 = 6.3\n# Add two numbers\nsum = num1 + num2\n# Display the sum\nprint('The sum of {0} and {1} is {2}'.format(num1, num2, sum))",
    "detail": "by-extension.python.Add two numbers",
    "documentation": {}
  },
  {
    "label": "sum",
    "kind": 5,
    "importPath": "by-extension.python.Add two numbers",
    "description": "by-extension.python.Add two numbers",
    "peekOfCode": "sum = num1 + num2\n# Display the sum\nprint('The sum of {0} and {1} is {2}'.format(num1, num2, sum))",
    "detail": "by-extension.python.Add two numbers",
    "documentation": {}
  },
  {
    "label": "a",
    "kind": 5,
    "importPath": "by-extension.python.addtwonumber",
    "description": "by-extension.python.addtwonumber",
    "peekOfCode": "a = int(input(\"enter first number: \"))\nb = int(input(\"enter second number: \"))\nsum = a + b\nprint(\"sum:\", sum)",
    "detail": "by-extension.python.addtwonumber",
    "documentation": {}
  },
  {
    "label": "b",
    "kind": 5,
    "importPath": "by-extension.python.addtwonumber",
    "description": "by-extension.python.addtwonumber",
    "peekOfCode": "b = int(input(\"enter second number: \"))\nsum = a + b\nprint(\"sum:\", sum)",
    "detail": "by-extension.python.addtwonumber",
    "documentation": {}
  },
  {
    "label": "sum",
    "kind": 5,
    "importPath": "by-extension.python.addtwonumber",
    "description": "by-extension.python.addtwonumber",
    "peekOfCode": "sum = a + b\nprint(\"sum:\", sum)",
    "detail": "by-extension.python.addtwonumber",
    "documentation": {}
  },
  {
    "label": "num1",
    "kind": 5,
    "importPath": "by-extension.python.add_2_number",
    "description": "by-extension.python.add_2_number",
    "peekOfCode": "num1 = 15\nnum2 = 12\n# Adding two nos\nsum = num1 + num2\n# printing values\nprint(\"Sum of {0} and {1} is {2}\".format(num1, num2, sum))",
    "detail": "by-extension.python.add_2_number",
    "documentation": {}
  },
  {
    "label": "num2",
    "kind": 5,
    "importPath": "by-extension.python.add_2_number",
    "description": "by-extension.python.add_2_number",
    "peekOfCode": "num2 = 12\n# Adding two nos\nsum = num1 + num2\n# printing values\nprint(\"Sum of {0} and {1} is {2}\".format(num1, num2, sum))",
    "detail": "by-extension.python.add_2_number",
    "documentation": {}
  },
  {
    "label": "sum",
    "kind": 5,
    "importPath": "by-extension.python.add_2_number",
    "description": "by-extension.python.add_2_number",
    "peekOfCode": "sum = num1 + num2\n# printing values\nprint(\"Sum of {0} and {1} is {2}\".format(num1, num2, sum))",
    "detail": "by-extension.python.add_2_number",
    "documentation": {}
  },
  {
    "label": "num1",
    "kind": 5,
    "importPath": "by-extension.python.add_2_numbers",
    "description": "by-extension.python.add_2_numbers",
    "peekOfCode": "num1 = 1.5\nnum2 = 6.3\n# Add two numbers\nsum = num1 + num2\n# Display the sum\nprint(\"The sum of {0} and {1} is {2}\".format(num1, num2, sum))",
    "detail": "by-extension.python.add_2_numbers",
    "documentation": {}
  },
  {
    "label": "num2",
    "kind": 5,
    "importPath": "by-extension.python.add_2_numbers",
    "description": "by-extension.python.add_2_numbers",
    "peekOfCode": "num2 = 6.3\n# Add two numbers\nsum = num1 + num2\n# Display the sum\nprint(\"The sum of {0} and {1} is {2}\".format(num1, num2, sum))",
    "detail": "by-extension.python.add_2_numbers",
    "documentation": {}
  },
  {
    "label": "sum",
    "kind": 5,
    "importPath": "by-extension.python.add_2_numbers",
    "description": "by-extension.python.add_2_numbers",
    "peekOfCode": "sum = num1 + num2\n# Display the sum\nprint(\"The sum of {0} and {1} is {2}\".format(num1, num2, sum))",
    "detail": "by-extension.python.add_2_numbers",
    "documentation": {}
  },
  {
    "label": "Node",
    "kind": 6,
    "importPath": "by-extension.python.Add_two_Linked_List",
    "description": "by-extension.python.Add_two_Linked_List",
    "peekOfCode": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\nclass Linked_List:\n    def __init__(self):\n        self.head = None\n    def Insert_At_Beginning(self, new_data):\n        new_node = Node(new_data)\n        if self.head is None:",
    "detail": "by-extension.python.Add_two_Linked_List",
    "documentation": {}
  },
  {
    "label": "Linked_List",
    "kind": 6,
    "importPath": "by-extension.python.Add_two_Linked_List",
    "description": "by-extension.python.Add_two_Linked_List",
    "peekOfCode": "class Linked_List:\n    def __init__(self):\n        self.head = None\n    def Insert_At_Beginning(self, new_data):\n        new_node = Node(new_data)\n        if self.head is None:\n            self.head = new_node\n            return\n        new_node.next = self.head\n        self.head = new_node",
    "detail": "by-extension.python.Add_two_Linked_List",
    "documentation": {}
  },
  {
    "label": "num1",
    "kind": 5,
    "importPath": "by-extension.python.add_two_no",
    "description": "by-extension.python.add_two_no",
    "peekOfCode": "num1 = 1.5\nnum2 = 6.3\nsum = num1 + num2\nprint(\"The sum of {0} and {1} is {2}\".format(num1, num2, sum))",
    "detail": "by-extension.python.add_two_no",
    "documentation": {}
  },
  {
    "label": "num2",
    "kind": 5,
    "importPath": "by-extension.python.add_two_no",
    "description": "by-extension.python.add_two_no",
    "peekOfCode": "num2 = 6.3\nsum = num1 + num2\nprint(\"The sum of {0} and {1} is {2}\".format(num1, num2, sum))",
    "detail": "by-extension.python.add_two_no",
    "documentation": {}
  },
  {
    "label": "sum",
    "kind": 5,
    "importPath": "by-extension.python.add_two_no",
    "description": "by-extension.python.add_two_no",
    "peekOfCode": "sum = num1 + num2\nprint(\"The sum of {0} and {1} is {2}\".format(num1, num2, sum))",
    "detail": "by-extension.python.add_two_no",
    "documentation": {}
  },
  {
    "label": "num1",
    "kind": 5,
    "importPath": "by-extension.python.add_two_number",
    "description": "by-extension.python.add_two_number",
    "peekOfCode": "num1 = 1.5\nnum2 = 6.3\n# Add two numbers\nsum = num1 + num2\n# Display the sum\nprint(\"The sum of {0} and {1} is {2}\".format(num1, num2, sum))",
    "detail": "by-extension.python.add_two_number",
    "documentation": {}
  },
  {
    "label": "num2",
    "kind": 5,
    "importPath": "by-extension.python.add_two_number",
    "description": "by-extension.python.add_two_number",
    "peekOfCode": "num2 = 6.3\n# Add two numbers\nsum = num1 + num2\n# Display the sum\nprint(\"The sum of {0} and {1} is {2}\".format(num1, num2, sum))",
    "detail": "by-extension.python.add_two_number",
    "documentation": {}
  },
  {
    "label": "sum",
    "kind": 5,
    "importPath": "by-extension.python.add_two_number",
    "description": "by-extension.python.add_two_number",
    "peekOfCode": "sum = num1 + num2\n# Display the sum\nprint(\"The sum of {0} and {1} is {2}\".format(num1, num2, sum))",
    "detail": "by-extension.python.add_two_number",
    "documentation": {}
  },
  {
    "label": "num1",
    "kind": 5,
    "importPath": "by-extension.python.Add_two_numbers",
    "description": "by-extension.python.Add_two_numbers",
    "peekOfCode": "num1 = 1.5\nnum2 = 6.3\n# Add two numbers\nsum = num1 + num2\n# Display the sum\nprint(\"The sum of {0} and {1} is {2}\".format(num1, num2, sum))",
    "detail": "by-extension.python.Add_two_numbers",
    "documentation": {}
  },
  {
    "label": "num2",
    "kind": 5,
    "importPath": "by-extension.python.Add_two_numbers",
    "description": "by-extension.python.Add_two_numbers",
    "peekOfCode": "num2 = 6.3\n# Add two numbers\nsum = num1 + num2\n# Display the sum\nprint(\"The sum of {0} and {1} is {2}\".format(num1, num2, sum))",
    "detail": "by-extension.python.Add_two_numbers",
    "documentation": {}
  },
  {
    "label": "sum",
    "kind": 5,
    "importPath": "by-extension.python.Add_two_numbers",
    "description": "by-extension.python.Add_two_numbers",
    "peekOfCode": "sum = num1 + num2\n# Display the sum\nprint(\"The sum of {0} and {1} is {2}\".format(num1, num2, sum))",
    "detail": "by-extension.python.Add_two_numbers",
    "documentation": {}
  },
  {
    "label": "Repeat",
    "kind": 2,
    "importPath": "by-extension.python.aj",
    "description": "by-extension.python.aj",
    "peekOfCode": "def Repeat(x): \n    _size = len(x) \n    repeated = [] \n    for i in range(_size): \n        k = i + 1\n        for j in range(k, _size): \n            if x[i] == x[j] and x[i] not in repeated: \n                repeated.append(x[i]) \n    return repeated \nlist1 = [10, 20, 30, 20, 20, 30, 40,  ",
    "detail": "by-extension.python.aj",
    "documentation": {}
  },
  {
    "label": "list1",
    "kind": 5,
    "importPath": "by-extension.python.aj",
    "description": "by-extension.python.aj",
    "peekOfCode": "list1 = [10, 20, 30, 20, 20, 30, 40,  \n         50, -20, 60, 60, -20, -20] \nprint(Repeat(list1))",
    "detail": "by-extension.python.aj",
    "documentation": {}
  },
  {
    "label": "get_headlines",
    "kind": 2,
    "importPath": "by-extension.python.alexa_news_headlines",
    "description": "by-extension.python.alexa_news_headlines",
    "peekOfCode": "def get_headlines():\n    user_pass_dict = {'user': 'USERNAME', 'passwd': \"PASSWORD\", 'api_type': 'json'}\n    sess = requests.Session()\n    sess.headers.update({'User-Agent': 'I am testing Alexa: nobi'})\n    sess.post(\"https://www.reddit.com/api/login/\", data=user_pass_dict)\n    time.sleep(1)\n    url = \"https://reddit.com/r/worldnews/.json?limit=10\"\n    html = sess.get(url)\n    data = json.loads(html.content.decode(\"utf-8\"))\n    titles = [unidecode.unidecode(listing['data']['title']) for listing in data['data']['children']]",
    "detail": "by-extension.python.alexa_news_headlines",
    "documentation": {}
  },
  {
    "label": "homepage",
    "kind": 2,
    "importPath": "by-extension.python.alexa_news_headlines",
    "description": "by-extension.python.alexa_news_headlines",
    "peekOfCode": "def homepage():\n    return \"hi there!\"\n@ask.launch\ndef start_skill():\n    welcome_message = \"Hello there, would you like to hear the news?\"\n    return question(welcome_message)\n@ask.intent(\"YesIntent\")\ndef share_headlines():\n    headlines = get_headlines()\n    headline_msg = \"The current world news headlines are {}\".format(headlines)",
    "detail": "by-extension.python.alexa_news_headlines",
    "documentation": {}
  },
  {
    "label": "start_skill",
    "kind": 2,
    "importPath": "by-extension.python.alexa_news_headlines",
    "description": "by-extension.python.alexa_news_headlines",
    "peekOfCode": "def start_skill():\n    welcome_message = \"Hello there, would you like to hear the news?\"\n    return question(welcome_message)\n@ask.intent(\"YesIntent\")\ndef share_headlines():\n    headlines = get_headlines()\n    headline_msg = \"The current world news headlines are {}\".format(headlines)\n    return statement(headline_msg)\n@ask.intent(\"NooIntent\")\ndef no_intent():",
    "detail": "by-extension.python.alexa_news_headlines",
    "documentation": {}
  },
  {
    "label": "share_headlines",
    "kind": 2,
    "importPath": "by-extension.python.alexa_news_headlines",
    "description": "by-extension.python.alexa_news_headlines",
    "peekOfCode": "def share_headlines():\n    headlines = get_headlines()\n    headline_msg = \"The current world news headlines are {}\".format(headlines)\n    return statement(headline_msg)\n@ask.intent(\"NooIntent\")\ndef no_intent():\n    bye_text = \"I am not sure why you then turned me on. Anyways, bye for now!\"\n    return statement(bye_text)\nif __name__ == \"__main__\":\n    app.run(port=8000, debug=True)",
    "detail": "by-extension.python.alexa_news_headlines",
    "documentation": {}
  },
  {
    "label": "no_intent",
    "kind": 2,
    "importPath": "by-extension.python.alexa_news_headlines",
    "description": "by-extension.python.alexa_news_headlines",
    "peekOfCode": "def no_intent():\n    bye_text = \"I am not sure why you then turned me on. Anyways, bye for now!\"\n    return statement(bye_text)\nif __name__ == \"__main__\":\n    app.run(port=8000, debug=True)",
    "detail": "by-extension.python.alexa_news_headlines",
    "documentation": {}
  },
  {
    "label": "app",
    "kind": 5,
    "importPath": "by-extension.python.alexa_news_headlines",
    "description": "by-extension.python.alexa_news_headlines",
    "peekOfCode": "app = Flask(__name__)\nask = Ask(app, \"/reddit_reader\")\ndef get_headlines():\n    user_pass_dict = {'user': 'USERNAME', 'passwd': \"PASSWORD\", 'api_type': 'json'}\n    sess = requests.Session()\n    sess.headers.update({'User-Agent': 'I am testing Alexa: nobi'})\n    sess.post(\"https://www.reddit.com/api/login/\", data=user_pass_dict)\n    time.sleep(1)\n    url = \"https://reddit.com/r/worldnews/.json?limit=10\"\n    html = sess.get(url)",
    "detail": "by-extension.python.alexa_news_headlines",
    "documentation": {}
  },
  {
    "label": "ask",
    "kind": 5,
    "importPath": "by-extension.python.alexa_news_headlines",
    "description": "by-extension.python.alexa_news_headlines",
    "peekOfCode": "ask = Ask(app, \"/reddit_reader\")\ndef get_headlines():\n    user_pass_dict = {'user': 'USERNAME', 'passwd': \"PASSWORD\", 'api_type': 'json'}\n    sess = requests.Session()\n    sess.headers.update({'User-Agent': 'I am testing Alexa: nobi'})\n    sess.post(\"https://www.reddit.com/api/login/\", data=user_pass_dict)\n    time.sleep(1)\n    url = \"https://reddit.com/r/worldnews/.json?limit=10\"\n    html = sess.get(url)\n    data = json.loads(html.content.decode(\"utf-8\"))",
    "detail": "by-extension.python.alexa_news_headlines",
    "documentation": {}
  },
  {
    "label": "hashString",
    "kind": 2,
    "importPath": "by-extension.python.anagram-detection",
    "description": "by-extension.python.anagram-detection",
    "peekOfCode": "def hashString(str):\n  # Map characters to prime numbers to multiply\n  charMap = {\n    'a': 2,\n    'b': 3,\n    'c': 5,\n    'd': 7,\n    'e': 11,\n    'f': 13,\n    'g': 17,",
    "detail": "by-extension.python.anagram-detection",
    "documentation": {}
  },
  {
    "label": "anagramDetection",
    "kind": 2,
    "importPath": "by-extension.python.anagram-detection",
    "description": "by-extension.python.anagram-detection",
    "peekOfCode": "def anagramDetection(parent, child):\n  length = len(child)\n  anagram = hashString(child)\n  total = 0\n  for i in range(0, len(parent) - length):\n    if hashString(parent[i: i + length]) == anagram:\n      total = total + 1\n  return total",
    "detail": "by-extension.python.anagram-detection",
    "documentation": {}
  },
  {
    "label": "get_file_names",
    "kind": 2,
    "importPath": "by-extension.python.anyMimeSearch",
    "description": "by-extension.python.anyMimeSearch",
    "peekOfCode": "def get_file_names(filepath, pattern):\n    matches = []\n    if os.path.exists(filepath):\n        for root, dirnames, filenames in os.walk(filepath):\n            for filename in fnmatch.filter(filenames, pattern):\n                # matches.append(os.path.join(root, filename))  # full path\n                matches.append(os.path.join(filename))  # just file name\n        if matches:\n            print(\"Found {} files:\".format(len(matches)))\n            output_files(matches)",
    "detail": "by-extension.python.anyMimeSearch",
    "documentation": {}
  },
  {
    "label": "output_files",
    "kind": 2,
    "importPath": "by-extension.python.anyMimeSearch",
    "description": "by-extension.python.anyMimeSearch",
    "peekOfCode": "def output_files(list_of_files):\n    for filename in list_of_files:\n        print(filename)\nif __name__ == '__main__':\n    get_file_names(PATH, PATTERN)",
    "detail": "by-extension.python.anyMimeSearch",
    "documentation": {}
  },
  {
    "label": "PATH",
    "kind": 5,
    "importPath": "by-extension.python.anyMimeSearch",
    "description": "by-extension.python.anyMimeSearch",
    "peekOfCode": "PATH = './'\nPATTERN = '*.'\ndef get_file_names(filepath, pattern):\n    matches = []\n    if os.path.exists(filepath):\n        for root, dirnames, filenames in os.walk(filepath):\n            for filename in fnmatch.filter(filenames, pattern):\n                # matches.append(os.path.join(root, filename))  # full path\n                matches.append(os.path.join(filename))  # just file name\n        if matches:",
    "detail": "by-extension.python.anyMimeSearch",
    "documentation": {}
  },
  {
    "label": "PATTERN",
    "kind": 5,
    "importPath": "by-extension.python.anyMimeSearch",
    "description": "by-extension.python.anyMimeSearch",
    "peekOfCode": "PATTERN = '*.'\ndef get_file_names(filepath, pattern):\n    matches = []\n    if os.path.exists(filepath):\n        for root, dirnames, filenames in os.walk(filepath):\n            for filename in fnmatch.filter(filenames, pattern):\n                # matches.append(os.path.join(root, filename))  # full path\n                matches.append(os.path.join(filename))  # just file name\n        if matches:\n            print(\"Found {} files:\".format(len(matches)))",
    "detail": "by-extension.python.anyMimeSearch",
    "documentation": {}
  },
  {
    "label": "hello",
    "kind": 2,
    "importPath": "by-extension.python.app",
    "description": "by-extension.python.app",
    "peekOfCode": "def hello():\n    message = request.args.get(\"message\")\n    if not message:\n        message = \"Hello World!\"\n    return simple_package.echo(message)\n@app.route(\"/shout\")\ndef shout():\n    message = request.args.get(\"message\")\n    if not message:\n        message = \"Hello World!\"",
    "detail": "by-extension.python.app",
    "documentation": {}
  },
  {
    "label": "shout",
    "kind": 2,
    "importPath": "by-extension.python.app",
    "description": "by-extension.python.app",
    "peekOfCode": "def shout():\n    message = request.args.get(\"message\")\n    if not message:\n        message = \"Hello World!\"\n    return simple_package.shout(message)",
    "detail": "by-extension.python.app",
    "documentation": {}
  },
  {
    "label": "app",
    "kind": 5,
    "importPath": "by-extension.python.app",
    "description": "by-extension.python.app",
    "peekOfCode": "app = Flask(__name__)\n@app.route(\"/\")\ndef hello():\n    message = request.args.get(\"message\")\n    if not message:\n        message = \"Hello World!\"\n    return simple_package.echo(message)\n@app.route(\"/shout\")\ndef shout():\n    message = request.args.get(\"message\")",
    "detail": "by-extension.python.app",
    "documentation": {}
  },
  {
    "label": "a",
    "kind": 5,
    "importPath": "by-extension.python.Area of triangle",
    "description": "by-extension.python.Area of triangle",
    "peekOfCode": "a = 5\nb = 6\nc = 7\n# a = float(input('Enter first side: '))\n# b = float(input('Enter second side: '))\n# c = float(input('Enter third side: '))\n# calculate the semi-perimeter\ns = (a + b + c) / 2\n# calculate the area\narea = (s*(s-a)*(s-b)*(s-c)) ** 0.5",
    "detail": "by-extension.python.Area of triangle",
    "documentation": {}
  },
  {
    "label": "b",
    "kind": 5,
    "importPath": "by-extension.python.Area of triangle",
    "description": "by-extension.python.Area of triangle",
    "peekOfCode": "b = 6\nc = 7\n# a = float(input('Enter first side: '))\n# b = float(input('Enter second side: '))\n# c = float(input('Enter third side: '))\n# calculate the semi-perimeter\ns = (a + b + c) / 2\n# calculate the area\narea = (s*(s-a)*(s-b)*(s-c)) ** 0.5\nprint('The area of the triangle is %0.2f' %area)",
    "detail": "by-extension.python.Area of triangle",
    "documentation": {}
  },
  {
    "label": "c",
    "kind": 5,
    "importPath": "by-extension.python.Area of triangle",
    "description": "by-extension.python.Area of triangle",
    "peekOfCode": "c = 7\n# a = float(input('Enter first side: '))\n# b = float(input('Enter second side: '))\n# c = float(input('Enter third side: '))\n# calculate the semi-perimeter\ns = (a + b + c) / 2\n# calculate the area\narea = (s*(s-a)*(s-b)*(s-c)) ** 0.5\nprint('The area of the triangle is %0.2f' %area)",
    "detail": "by-extension.python.Area of triangle",
    "documentation": {}
  },
  {
    "label": "s",
    "kind": 5,
    "importPath": "by-extension.python.Area of triangle",
    "description": "by-extension.python.Area of triangle",
    "peekOfCode": "s = (a + b + c) / 2\n# calculate the area\narea = (s*(s-a)*(s-b)*(s-c)) ** 0.5\nprint('The area of the triangle is %0.2f' %area)",
    "detail": "by-extension.python.Area of triangle",
    "documentation": {}
  },
  {
    "label": "area",
    "kind": 5,
    "importPath": "by-extension.python.Area of triangle",
    "description": "by-extension.python.Area of triangle",
    "peekOfCode": "area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\nprint('The area of the triangle is %0.2f' %area)",
    "detail": "by-extension.python.Area of triangle",
    "documentation": {}
  },
  {
    "label": "a",
    "kind": 5,
    "importPath": "by-extension.python.Areaoftriangle",
    "description": "by-extension.python.Areaoftriangle",
    "peekOfCode": "a = 5\nb = 6\nc = 7\n# Uncomment below to take inputs from the user\n# a = float(input('Enter first side: '))\n# b = float(input('Enter second side: '))\n# c = float(input('Enter third side: '))\n# calculate the semi-perimeter\ns = (a + b + c) / 2\n# calculate the area",
    "detail": "by-extension.python.Areaoftriangle",
    "documentation": {}
  },
  {
    "label": "b",
    "kind": 5,
    "importPath": "by-extension.python.Areaoftriangle",
    "description": "by-extension.python.Areaoftriangle",
    "peekOfCode": "b = 6\nc = 7\n# Uncomment below to take inputs from the user\n# a = float(input('Enter first side: '))\n# b = float(input('Enter second side: '))\n# c = float(input('Enter third side: '))\n# calculate the semi-perimeter\ns = (a + b + c) / 2\n# calculate the area\narea = (s*(s-a)*(s-b)*(s-c)) ** 0.5",
    "detail": "by-extension.python.Areaoftriangle",
    "documentation": {}
  },
  {
    "label": "c",
    "kind": 5,
    "importPath": "by-extension.python.Areaoftriangle",
    "description": "by-extension.python.Areaoftriangle",
    "peekOfCode": "c = 7\n# Uncomment below to take inputs from the user\n# a = float(input('Enter first side: '))\n# b = float(input('Enter second side: '))\n# c = float(input('Enter third side: '))\n# calculate the semi-perimeter\ns = (a + b + c) / 2\n# calculate the area\narea = (s*(s-a)*(s-b)*(s-c)) ** 0.5\nprint('The area of the triangle is %0.2f' %area)",
    "detail": "by-extension.python.Areaoftriangle",
    "documentation": {}
  },
  {
    "label": "s",
    "kind": 5,
    "importPath": "by-extension.python.Areaoftriangle",
    "description": "by-extension.python.Areaoftriangle",
    "peekOfCode": "s = (a + b + c) / 2\n# calculate the area\narea = (s*(s-a)*(s-b)*(s-c)) ** 0.5\nprint('The area of the triangle is %0.2f' %area)",
    "detail": "by-extension.python.Areaoftriangle",
    "documentation": {}
  },
  {
    "label": "area",
    "kind": 5,
    "importPath": "by-extension.python.Areaoftriangle",
    "description": "by-extension.python.Areaoftriangle",
    "peekOfCode": "area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\nprint('The area of the triangle is %0.2f' %area)",
    "detail": "by-extension.python.Areaoftriangle",
    "documentation": {}
  },
  {
    "label": "a",
    "kind": 5,
    "importPath": "by-extension.python.Area_of_triangle",
    "description": "by-extension.python.Area_of_triangle",
    "peekOfCode": "a = 5\nb = 6\nc = 7\n# a = float(input('Enter first side: '))\n# b = float(input('Enter second side: '))\n# c = float(input('Enter third side: '))\n# calculate the semi-perimeter\ns = (a + b + c) / 2\n# calculate the area\narea = (s * (s - a) * (s - b) * (s - c)) ** 0.5",
    "detail": "by-extension.python.Area_of_triangle",
    "documentation": {}
  },
  {
    "label": "b",
    "kind": 5,
    "importPath": "by-extension.python.Area_of_triangle",
    "description": "by-extension.python.Area_of_triangle",
    "peekOfCode": "b = 6\nc = 7\n# a = float(input('Enter first side: '))\n# b = float(input('Enter second side: '))\n# c = float(input('Enter third side: '))\n# calculate the semi-perimeter\ns = (a + b + c) / 2\n# calculate the area\narea = (s * (s - a) * (s - b) * (s - c)) ** 0.5\nprint(\"The area of the triangle is %0.2f\" % area)",
    "detail": "by-extension.python.Area_of_triangle",
    "documentation": {}
  },
  {
    "label": "c",
    "kind": 5,
    "importPath": "by-extension.python.Area_of_triangle",
    "description": "by-extension.python.Area_of_triangle",
    "peekOfCode": "c = 7\n# a = float(input('Enter first side: '))\n# b = float(input('Enter second side: '))\n# c = float(input('Enter third side: '))\n# calculate the semi-perimeter\ns = (a + b + c) / 2\n# calculate the area\narea = (s * (s - a) * (s - b) * (s - c)) ** 0.5\nprint(\"The area of the triangle is %0.2f\" % area)",
    "detail": "by-extension.python.Area_of_triangle",
    "documentation": {}
  },
  {
    "label": "s",
    "kind": 5,
    "importPath": "by-extension.python.Area_of_triangle",
    "description": "by-extension.python.Area_of_triangle",
    "peekOfCode": "s = (a + b + c) / 2\n# calculate the area\narea = (s * (s - a) * (s - b) * (s - c)) ** 0.5\nprint(\"The area of the triangle is %0.2f\" % area)",
    "detail": "by-extension.python.Area_of_triangle",
    "documentation": {}
  },
  {
    "label": "area",
    "kind": 5,
    "importPath": "by-extension.python.Area_of_triangle",
    "description": "by-extension.python.Area_of_triangle",
    "peekOfCode": "area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\nprint(\"The area of the triangle is %0.2f\" % area)",
    "detail": "by-extension.python.Area_of_triangle",
    "documentation": {}
  },
  {
    "label": "sumOfSeries",
    "kind": 2,
    "importPath": "by-extension.python.ARKA",
    "description": "by-extension.python.ARKA",
    "peekOfCode": "def sumOfSeries(n): \n\tx = (n * (n + 1) / 2) \n\treturn (int)(x * x) \n# Driver Function \nn = 5\nprint(sumOfSeries(n))",
    "detail": "by-extension.python.ARKA",
    "documentation": {}
  },
  {
    "label": "\tx",
    "kind": 5,
    "importPath": "by-extension.python.ARKA",
    "description": "by-extension.python.ARKA",
    "peekOfCode": "\tx = (n * (n + 1) / 2) \n\treturn (int)(x * x) \n# Driver Function \nn = 5\nprint(sumOfSeries(n))",
    "detail": "by-extension.python.ARKA",
    "documentation": {}
  },
  {
    "label": "n",
    "kind": 5,
    "importPath": "by-extension.python.ARKA",
    "description": "by-extension.python.ARKA",
    "peekOfCode": "n = 5\nprint(sumOfSeries(n))",
    "detail": "by-extension.python.ARKA",
    "documentation": {}
  },
  {
    "label": "num",
    "kind": 5,
    "importPath": "by-extension.python.armstrongnumber",
    "description": "by-extension.python.armstrongnumber",
    "peekOfCode": "num = int(input(\"Enter a number: \"))\n# initialize sum\nsum = 0\n# find the sum of the cube of each digit\ntemp = num\nwhile temp > 0:\n   digit = temp % 10\n   sum += digit ** 3\n   temp //= 10\n# display the result",
    "detail": "by-extension.python.armstrongnumber",
    "documentation": {}
  },
  {
    "label": "sum",
    "kind": 5,
    "importPath": "by-extension.python.armstrongnumber",
    "description": "by-extension.python.armstrongnumber",
    "peekOfCode": "sum = 0\n# find the sum of the cube of each digit\ntemp = num\nwhile temp > 0:\n   digit = temp % 10\n   sum += digit ** 3\n   temp //= 10\n# display the result\nif num == sum:\n   print(num,\"is an Armstrong number\")",
    "detail": "by-extension.python.armstrongnumber",
    "documentation": {}
  },
  {
    "label": "temp",
    "kind": 5,
    "importPath": "by-extension.python.armstrongnumber",
    "description": "by-extension.python.armstrongnumber",
    "peekOfCode": "temp = num\nwhile temp > 0:\n   digit = temp % 10\n   sum += digit ** 3\n   temp //= 10\n# display the result\nif num == sum:\n   print(num,\"is an Armstrong number\")\nelse:\n   print(num,\"is not an Armstrong number\")",
    "detail": "by-extension.python.armstrongnumber",
    "documentation": {}
  },
  {
    "label": "array_pair_sum_tests",
    "kind": 6,
    "importPath": "by-extension.python.array-pair-sum",
    "description": "by-extension.python.array-pair-sum",
    "peekOfCode": "class array_pair_sum_tests(unittest.TestCase):\n    def setUp(self):\n        self.arr1 = [3, 4, 5, 6, 7]\n        self.arr2 = [3, 4, 5, 4, 4]\n        self.result1 = [[3, 7], [4, 6]]\n        self.result2 = [[3, 5], [4, 4], [4, 4], [4, 4]]\n    def test_one(self):\n        self.assertEqual(\n            array_pair_sum_iterative(self.arr1, 10), self.result1)\n        self.assertEqual(",
    "detail": "by-extension.python.array-pair-sum",
    "documentation": {}
  },
  {
    "label": "array_pair_sum_iterative",
    "kind": 2,
    "importPath": "by-extension.python.array-pair-sum",
    "description": "by-extension.python.array-pair-sum",
    "peekOfCode": "def array_pair_sum_iterative(arr, k):\n    \"\"\"\n    returns the array of pairs using an iterative method.\n    complexity: O(n^2)\n    \"\"\"\n    result = []\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == k:\n                result.append([arr[i], arr[j]])",
    "detail": "by-extension.python.array-pair-sum",
    "documentation": {}
  },
  {
    "label": "array_pair_sum_sort",
    "kind": 2,
    "importPath": "by-extension.python.array-pair-sum",
    "description": "by-extension.python.array-pair-sum",
    "peekOfCode": "def array_pair_sum_sort(arr, k):\n    \"\"\"\n    first sort the array and then use binary search to find pairs.\n    complexity: O(nlogn)\n    \"\"\"\n    result = []\n    arr.sort()\n    for i in range(len(arr)):\n        if k - arr[i] in arr[i+1:]:\n            result.append([arr[i], k - arr[i]])",
    "detail": "by-extension.python.array-pair-sum",
    "documentation": {}
  },
  {
    "label": "array_pair_sum_hash_table",
    "kind": 2,
    "importPath": "by-extension.python.array-pair-sum",
    "description": "by-extension.python.array-pair-sum",
    "peekOfCode": "def array_pair_sum_hash_table(arr, k):\n    \"\"\"\n    Use a hash table to store array elements of pairs.\n    complexity: O(n)\n    \"\"\"\n    result = []\n    hash_table = {}\n    for e in arr:\n        if e in hash_table:\n            result.append([k - e, e])",
    "detail": "by-extension.python.array-pair-sum",
    "documentation": {}
  },
  {
    "label": "c",
    "kind": 5,
    "importPath": "by-extension.python.ASCIIvaluecharacter",
    "description": "by-extension.python.ASCIIvaluecharacter",
    "peekOfCode": "c = 'p'\nprint(\"The ASCII value of '\" + c + \"' is\", ord(c))",
    "detail": "by-extension.python.ASCIIvaluecharacter",
    "documentation": {}
  },
  {
    "label": "InvalidSyntax",
    "kind": 6,
    "importPath": "by-extension.python.assembler",
    "description": "by-extension.python.assembler",
    "peekOfCode": "class InvalidSyntax(Exception):\n    def __init__(self):\n        pass\n# class for represent a token\nclass Token():\n    def __init__(self, token, t):\n        self.token = token\n        self.t = t\n# def initRegister():\n#     global register",
    "detail": "by-extension.python.assembler",
    "documentation": {}
  },
  {
    "label": "Token",
    "kind": 6,
    "importPath": "by-extension.python.assembler",
    "description": "by-extension.python.assembler",
    "peekOfCode": "class Token():\n    def __init__(self, token, t):\n        self.token = token\n        self.t = t\n# def initRegister():\n#     global register\n#     for i in range(9):\n#         register.append(0)\ndef loadFile(fileName):\n    \"\"\"",
    "detail": "by-extension.python.assembler",
    "documentation": {}
  },
  {
    "label": "loadFile",
    "kind": 2,
    "importPath": "by-extension.python.assembler",
    "description": "by-extension.python.assembler",
    "peekOfCode": "def loadFile(fileName):\n    \"\"\"\n        loadFile: This function loads the file and reads its lines.\n    \"\"\"\n    global lines\n    fo = open(fileName)\n    for line in fo:\n        lines.append(line)\n    fo.close()\ndef scanner(string):",
    "detail": "by-extension.python.assembler",
    "documentation": {}
  },
  {
    "label": "scanner",
    "kind": 2,
    "importPath": "by-extension.python.assembler",
    "description": "by-extension.python.assembler",
    "peekOfCode": "def scanner(string):\n    \"\"\"\n        scanner: This function builds the tokens by the content of the file.\n        The tokens will be saved in list 'tokens'\n    \"\"\"\n    global tokens\n    token = \"\"\n    state = 0  # init state\n    for ch in string:\n        if state == 0:",
    "detail": "by-extension.python.assembler",
    "documentation": {}
  },
  {
    "label": "scan",
    "kind": 2,
    "importPath": "by-extension.python.assembler",
    "description": "by-extension.python.assembler",
    "peekOfCode": "def scan():\n    \"\"\"\n        scan: applys function scanner() to each line of the source code.\n    \"\"\"\n    global lines\n    assert len(lines) > 0, \"no lines\"\n    for line in lines:\n        try:\n            scanner(line)\n        except InvalidSyntax:",
    "detail": "by-extension.python.assembler",
    "documentation": {}
  },
  {
    "label": "parser",
    "kind": 2,
    "importPath": "by-extension.python.assembler",
    "description": "by-extension.python.assembler",
    "peekOfCode": "def parser():\n    \"\"\"\n        parser: parses the tokens of the list 'tokens'\n    \"\"\"\n    global tokens\n    global eax, ebx, ecx, edx\n    assert len(tokens) > 0, \"no tokens\"\n    pointer = 0  # pointer for tokens\n    token = Token(\"\", \"\")\n    tmpToken = Token(\"\", \"\")",
    "detail": "by-extension.python.assembler",
    "documentation": {}
  },
  {
    "label": "registerLabels",
    "kind": 2,
    "importPath": "by-extension.python.assembler",
    "description": "by-extension.python.assembler",
    "peekOfCode": "def registerLabels():\n    \"\"\"\n        This function search for labels / subprogram-labels and registers this in the 'jumps' list.\n    \"\"\"\n    for i in range(len(tokens)):\n        if (tokens[i].t == \"label\"):\n            jumps[tokens[i].token] = i\n        elif tokens[i].t == \"subprogram\":\n            jumps[tokens[i].token] = i\ndef resetInterpreter():",
    "detail": "by-extension.python.assembler",
    "documentation": {}
  },
  {
    "label": "resetInterpreter",
    "kind": 2,
    "importPath": "by-extension.python.assembler",
    "description": "by-extension.python.assembler",
    "peekOfCode": "def resetInterpreter():\n    \"\"\"\n        resets the interpreter mind.\n    \"\"\"\n    global eax, ebx, ecx, edx, zeroFlag, stack\n    global variables, jumps, lines, tokens, returnStack\n    eax = 0\n    ebx = 0\n    ecx = 0\n    edx = 0",
    "detail": "by-extension.python.assembler",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "by-extension.python.assembler",
    "description": "by-extension.python.assembler",
    "peekOfCode": "def main():\n    \"\"\"\n        reads textfiles from the command-line and interprets them. \n    \"\"\"\n    # [1:] because the first argument is the program itself.\n    for arg in sys.argv[1:]:\n        resetInterpreter()  # resets interpreter mind\n        try:\n            loadFile(arg)\n            scan()",
    "detail": "by-extension.python.assembler",
    "documentation": {}
  },
  {
    "label": "lines",
    "kind": 5,
    "importPath": "by-extension.python.assembler",
    "description": "by-extension.python.assembler",
    "peekOfCode": "lines = []  # contains the lines of the file.\ntokens = []  # contains all tokens of the source code.\n# register eax, ebx,..., ecx\neax = 0\nebx = 0\necx = 0\nedx = 0\n# status register\nzeroFlag = False\n# stack data structure",
    "detail": "by-extension.python.assembler",
    "documentation": {}
  },
  {
    "label": "tokens",
    "kind": 5,
    "importPath": "by-extension.python.assembler",
    "description": "by-extension.python.assembler",
    "peekOfCode": "tokens = []  # contains all tokens of the source code.\n# register eax, ebx,..., ecx\neax = 0\nebx = 0\necx = 0\nedx = 0\n# status register\nzeroFlag = False\n# stack data structure\n# push --> append",
    "detail": "by-extension.python.assembler",
    "documentation": {}
  },
  {
    "label": "eax",
    "kind": 5,
    "importPath": "by-extension.python.assembler",
    "description": "by-extension.python.assembler",
    "peekOfCode": "eax = 0\nebx = 0\necx = 0\nedx = 0\n# status register\nzeroFlag = False\n# stack data structure\n# push --> append\n# pop --> pop\nstack = []",
    "detail": "by-extension.python.assembler",
    "documentation": {}
  },
  {
    "label": "ebx",
    "kind": 5,
    "importPath": "by-extension.python.assembler",
    "description": "by-extension.python.assembler",
    "peekOfCode": "ebx = 0\necx = 0\nedx = 0\n# status register\nzeroFlag = False\n# stack data structure\n# push --> append\n# pop --> pop\nstack = []\n# jump link table ",
    "detail": "by-extension.python.assembler",
    "documentation": {}
  },
  {
    "label": "ecx",
    "kind": 5,
    "importPath": "by-extension.python.assembler",
    "description": "by-extension.python.assembler",
    "peekOfCode": "ecx = 0\nedx = 0\n# status register\nzeroFlag = False\n# stack data structure\n# push --> append\n# pop --> pop\nstack = []\n# jump link table \njumps = {}",
    "detail": "by-extension.python.assembler",
    "documentation": {}
  },
  {
    "label": "edx",
    "kind": 5,
    "importPath": "by-extension.python.assembler",
    "description": "by-extension.python.assembler",
    "peekOfCode": "edx = 0\n# status register\nzeroFlag = False\n# stack data structure\n# push --> append\n# pop --> pop\nstack = []\n# jump link table \njumps = {}\n# variable table",
    "detail": "by-extension.python.assembler",
    "documentation": {}
  },
  {
    "label": "zeroFlag",
    "kind": 5,
    "importPath": "by-extension.python.assembler",
    "description": "by-extension.python.assembler",
    "peekOfCode": "zeroFlag = False\n# stack data structure\n# push --> append\n# pop --> pop\nstack = []\n# jump link table \njumps = {}\n# variable table\nvariables = {}\n# return stack for subprograms",
    "detail": "by-extension.python.assembler",
    "documentation": {}
  },
  {
    "label": "stack",
    "kind": 5,
    "importPath": "by-extension.python.assembler",
    "description": "by-extension.python.assembler",
    "peekOfCode": "stack = []\n# jump link table \njumps = {}\n# variable table\nvariables = {}\n# return stack for subprograms\nreturnStack = []\n# simple exception class \nclass InvalidSyntax(Exception):\n    def __init__(self):",
    "detail": "by-extension.python.assembler",
    "documentation": {}
  },
  {
    "label": "jumps",
    "kind": 5,
    "importPath": "by-extension.python.assembler",
    "description": "by-extension.python.assembler",
    "peekOfCode": "jumps = {}\n# variable table\nvariables = {}\n# return stack for subprograms\nreturnStack = []\n# simple exception class \nclass InvalidSyntax(Exception):\n    def __init__(self):\n        pass\n# class for represent a token",
    "detail": "by-extension.python.assembler",
    "documentation": {}
  },
  {
    "label": "variables",
    "kind": 5,
    "importPath": "by-extension.python.assembler",
    "description": "by-extension.python.assembler",
    "peekOfCode": "variables = {}\n# return stack for subprograms\nreturnStack = []\n# simple exception class \nclass InvalidSyntax(Exception):\n    def __init__(self):\n        pass\n# class for represent a token\nclass Token():\n    def __init__(self, token, t):",
    "detail": "by-extension.python.assembler",
    "documentation": {}
  },
  {
    "label": "returnStack",
    "kind": 5,
    "importPath": "by-extension.python.assembler",
    "description": "by-extension.python.assembler",
    "peekOfCode": "returnStack = []\n# simple exception class \nclass InvalidSyntax(Exception):\n    def __init__(self):\n        pass\n# class for represent a token\nclass Token():\n    def __init__(self, token, t):\n        self.token = token\n        self.t = t",
    "detail": "by-extension.python.assembler",
    "documentation": {}
  },
  {
    "label": "download",
    "kind": 2,
    "importPath": "by-extension.python.async_downloader",
    "description": "by-extension.python.async_downloader",
    "peekOfCode": "def download(ways):\n    if not ways:\n        print('Ways list is empty. Downloading is impossible')\n        return\n    print('downloading..')\n    success_files = set()\n    failure_files = set()\n    event_loop = asyncio.get_event_loop()\n    try:\n        event_loop.run_until_complete(",
    "detail": "by-extension.python.async_downloader",
    "documentation": {}
  },
  {
    "label": "test",
    "kind": 2,
    "importPath": "by-extension.python.async_downloader",
    "description": "by-extension.python.async_downloader",
    "peekOfCode": "def test():\n    ways = ['https://www.wikipedia.org',\n            'https://www.ya.ru',\n            'https://www.duckduckgo.com',\n            'https://www.fail-path.unknown',\n            ]\n    download(ways)\nif __name__ == \"__main__\":\n    test()",
    "detail": "by-extension.python.async_downloader",
    "documentation": {}
  },
  {
    "label": "AudioToText",
    "kind": 6,
    "importPath": "by-extension.python.audio-2-text",
    "description": "by-extension.python.audio-2-text",
    "peekOfCode": "class AudioToText:\n    \"\"\" Converts an audio file to text. \"\"\"\n    def __init__(self, fileInput, fileOutput, language):\n        \"\"\" Initialize. \"\"\"\n        self.input = fileInput\n        self.output = fileOutput\n        self.language = language\n        self.minSilenceLen = 500                # The minimum length for silent sections in milliseconds.\n        self.silenceThresh = 14                 # The upper bound for how quiet silent in dBFS.\n        self.keepSilence = 500                  # How much silence to keep in ms or a bool.",
    "detail": "by-extension.python.audio-2-text",
    "documentation": {}
  },
  {
    "label": "book",
    "kind": 5,
    "importPath": "by-extension.python.audiobook_gen",
    "description": "by-extension.python.audiobook_gen",
    "peekOfCode": "book = open(input('Enter the book name: '), 'rb')\npg_no = int(input(\"Enter the page number from which you want the system to start reading text: \"))\npdf_Reader = PyPDF2.PdfFileReader(book)\npages = pdf_Reader.numPages\nspeaker = pyttsx3.init()\nfor num in range((pg_no-1), pages):\n    page = pdf_Reader.getPage(num)\n    text = page.extractText()\n    speaker.say(text)\n    speaker.runAndWait()",
    "detail": "by-extension.python.audiobook_gen",
    "documentation": {}
  },
  {
    "label": "pg_no",
    "kind": 5,
    "importPath": "by-extension.python.audiobook_gen",
    "description": "by-extension.python.audiobook_gen",
    "peekOfCode": "pg_no = int(input(\"Enter the page number from which you want the system to start reading text: \"))\npdf_Reader = PyPDF2.PdfFileReader(book)\npages = pdf_Reader.numPages\nspeaker = pyttsx3.init()\nfor num in range((pg_no-1), pages):\n    page = pdf_Reader.getPage(num)\n    text = page.extractText()\n    speaker.say(text)\n    speaker.runAndWait()",
    "detail": "by-extension.python.audiobook_gen",
    "documentation": {}
  },
  {
    "label": "pdf_Reader",
    "kind": 5,
    "importPath": "by-extension.python.audiobook_gen",
    "description": "by-extension.python.audiobook_gen",
    "peekOfCode": "pdf_Reader = PyPDF2.PdfFileReader(book)\npages = pdf_Reader.numPages\nspeaker = pyttsx3.init()\nfor num in range((pg_no-1), pages):\n    page = pdf_Reader.getPage(num)\n    text = page.extractText()\n    speaker.say(text)\n    speaker.runAndWait()",
    "detail": "by-extension.python.audiobook_gen",
    "documentation": {}
  },
  {
    "label": "pages",
    "kind": 5,
    "importPath": "by-extension.python.audiobook_gen",
    "description": "by-extension.python.audiobook_gen",
    "peekOfCode": "pages = pdf_Reader.numPages\nspeaker = pyttsx3.init()\nfor num in range((pg_no-1), pages):\n    page = pdf_Reader.getPage(num)\n    text = page.extractText()\n    speaker.say(text)\n    speaker.runAndWait()",
    "detail": "by-extension.python.audiobook_gen",
    "documentation": {}
  },
  {
    "label": "speaker",
    "kind": 5,
    "importPath": "by-extension.python.audiobook_gen",
    "description": "by-extension.python.audiobook_gen",
    "peekOfCode": "speaker = pyttsx3.init()\nfor num in range((pg_no-1), pages):\n    page = pdf_Reader.getPage(num)\n    text = page.extractText()\n    speaker.say(text)\n    speaker.runAndWait()",
    "detail": "by-extension.python.audiobook_gen",
    "documentation": {}
  },
  {
    "label": "fh",
    "kind": 5,
    "importPath": "by-extension.python.avg_xdspam_confidence",
    "description": "by-extension.python.avg_xdspam_confidence",
    "peekOfCode": "fh = open('mbox-short.txt')\n#The 'mbox-short.txt' file can be downloaded from the link: https://www.py4e.com/code3/mbox-short.txt\nsum = 0\ncount = 0\nfor fx in fh:\n\tfx = fx.rstrip()\n\tif not fx.startswith(\"X-DSPAM-Confidence:\") :\n\t\tcontinue\n\tfy = fx[19:]\n\tcount = count + 1",
    "detail": "by-extension.python.avg_xdspam_confidence",
    "documentation": {}
  },
  {
    "label": "sum",
    "kind": 5,
    "importPath": "by-extension.python.avg_xdspam_confidence",
    "description": "by-extension.python.avg_xdspam_confidence",
    "peekOfCode": "sum = 0\ncount = 0\nfor fx in fh:\n\tfx = fx.rstrip()\n\tif not fx.startswith(\"X-DSPAM-Confidence:\") :\n\t\tcontinue\n\tfy = fx[19:]\n\tcount = count + 1\n\tsum = sum + float(fy)\nprint ('Average spam confidence: ',sum/count)",
    "detail": "by-extension.python.avg_xdspam_confidence",
    "documentation": {}
  },
  {
    "label": "count",
    "kind": 5,
    "importPath": "by-extension.python.avg_xdspam_confidence",
    "description": "by-extension.python.avg_xdspam_confidence",
    "peekOfCode": "count = 0\nfor fx in fh:\n\tfx = fx.rstrip()\n\tif not fx.startswith(\"X-DSPAM-Confidence:\") :\n\t\tcontinue\n\tfy = fx[19:]\n\tcount = count + 1\n\tsum = sum + float(fy)\nprint ('Average spam confidence: ',sum/count)",
    "detail": "by-extension.python.avg_xdspam_confidence",
    "documentation": {}
  },
  {
    "label": "\tfx",
    "kind": 5,
    "importPath": "by-extension.python.avg_xdspam_confidence",
    "description": "by-extension.python.avg_xdspam_confidence",
    "peekOfCode": "\tfx = fx.rstrip()\n\tif not fx.startswith(\"X-DSPAM-Confidence:\") :\n\t\tcontinue\n\tfy = fx[19:]\n\tcount = count + 1\n\tsum = sum + float(fy)\nprint ('Average spam confidence: ',sum/count)",
    "detail": "by-extension.python.avg_xdspam_confidence",
    "documentation": {}
  },
  {
    "label": "\tfy",
    "kind": 5,
    "importPath": "by-extension.python.avg_xdspam_confidence",
    "description": "by-extension.python.avg_xdspam_confidence",
    "peekOfCode": "\tfy = fx[19:]\n\tcount = count + 1\n\tsum = sum + float(fy)\nprint ('Average spam confidence: ',sum/count)",
    "detail": "by-extension.python.avg_xdspam_confidence",
    "documentation": {}
  },
  {
    "label": "\tcount",
    "kind": 5,
    "importPath": "by-extension.python.avg_xdspam_confidence",
    "description": "by-extension.python.avg_xdspam_confidence",
    "peekOfCode": "\tcount = count + 1\n\tsum = sum + float(fy)\nprint ('Average spam confidence: ',sum/count)",
    "detail": "by-extension.python.avg_xdspam_confidence",
    "documentation": {}
  },
  {
    "label": "\tsum",
    "kind": 5,
    "importPath": "by-extension.python.avg_xdspam_confidence",
    "description": "by-extension.python.avg_xdspam_confidence",
    "peekOfCode": "\tsum = sum + float(fy)\nprint ('Average spam confidence: ',sum/count)",
    "detail": "by-extension.python.avg_xdspam_confidence",
    "documentation": {}
  },
  {
    "label": "solution",
    "kind": 2,
    "importPath": "by-extension.python.A_solution_to_project_euler_problem_3",
    "description": "by-extension.python.A_solution_to_project_euler_problem_3",
    "peekOfCode": "def solution(n: int = 600851475143) -> int:\n    \"\"\"Returns the largest prime factor of a given number n.\n    >>> solution(13195)\n    29\n    >>> solution(10)\n    5\n    >>> solution(17)\n    17\n    >>> solution(3.4)\n    3",
    "detail": "by-extension.python.A_solution_to_project_euler_problem_3",
    "documentation": {}
  },
  {
    "label": "connect_database",
    "kind": 2,
    "importPath": "by-extension.python.backend",
    "description": "by-extension.python.backend",
    "peekOfCode": "def connect_database():\n    global conn\n    global cur\n    conn = sqlite3.connect(\"bankmanaging.db\")\n    cur = conn.cursor()\n    cur.execute(\n        \"create table if not exists bank (acc_no int, name text, age int, address text, balance int, account_type text, mobile_number int)\")\n    cur.execute(\"create table if not exists staff (name text, pass text,salary int, position text)\")\n    cur.execute(\"create table if not exists admin (name text, pass text)\")\n    cur.execute(\"insert into admin values('arpit','123')\")",
    "detail": "by-extension.python.backend",
    "documentation": {}
  },
  {
    "label": "check_admin",
    "kind": 2,
    "importPath": "by-extension.python.backend",
    "description": "by-extension.python.backend",
    "peekOfCode": "def check_admin(name, password):\n    cur.execute(\"select * from admin\")\n    data = cur.fetchall()\n    if data[0][0] == name and data[0][1] == password:\n        return True\n    return\n# create employee in database\ndef create_employee(name, password, salary, positon):\n    print(password)\n    cur.execute(\"insert into staff values(?,?,?,?)\", (name, password, salary, positon))",
    "detail": "by-extension.python.backend",
    "documentation": {}
  },
  {
    "label": "create_employee",
    "kind": 2,
    "importPath": "by-extension.python.backend",
    "description": "by-extension.python.backend",
    "peekOfCode": "def create_employee(name, password, salary, positon):\n    print(password)\n    cur.execute(\"insert into staff values(?,?,?,?)\", (name, password, salary, positon))\n    conn.commit()\n# check employee details in dabase for employee login\ndef check_employee(name, password):\n    print(password)\n    print(name)\n    cur.execute(\"select name,pass from staff\")\n    data = cur.fetchall()",
    "detail": "by-extension.python.backend",
    "documentation": {}
  },
  {
    "label": "check_employee",
    "kind": 2,
    "importPath": "by-extension.python.backend",
    "description": "by-extension.python.backend",
    "peekOfCode": "def check_employee(name, password):\n    print(password)\n    print(name)\n    cur.execute(\"select name,pass from staff\")\n    data = cur.fetchall()\n    print(data)\n    if len(data) == 0:\n        return False\n    for i in range(len(data)):\n        if data[i][0] == name and data[i][1] == password:",
    "detail": "by-extension.python.backend",
    "documentation": {}
  },
  {
    "label": "create_customer",
    "kind": 2,
    "importPath": "by-extension.python.backend",
    "description": "by-extension.python.backend",
    "peekOfCode": "def create_customer(name, age, address, balance, acc_type, mobile_number):\n    global acc_no\n    cur.execute(\"insert into bank values(?,?,?,?,?,?,?)\",\n                (acc_no, name, age, address, balance, acc_type, mobile_number))\n    conn.commit()\n    acc_no = acc_no + 1\n    return acc_no - 1\n# check account in database\ndef check_acc_no(acc_no):\n    cur.execute(\"select acc_no from bank\")",
    "detail": "by-extension.python.backend",
    "documentation": {}
  },
  {
    "label": "check_acc_no",
    "kind": 2,
    "importPath": "by-extension.python.backend",
    "description": "by-extension.python.backend",
    "peekOfCode": "def check_acc_no(acc_no):\n    cur.execute(\"select acc_no from bank\")\n    list_acc_no = cur.fetchall()\n    for i in range(len(list_acc_no)):\n        if list_acc_no[i][0] == int(acc_no):\n            return True\n    return False\n# get all details of a particular customer from database\ndef get_details(acc_no):\n    cur.execute(\"select * from bank where acc_no=?\", (acc_no))",
    "detail": "by-extension.python.backend",
    "documentation": {}
  },
  {
    "label": "get_details",
    "kind": 2,
    "importPath": "by-extension.python.backend",
    "description": "by-extension.python.backend",
    "peekOfCode": "def get_details(acc_no):\n    cur.execute(\"select * from bank where acc_no=?\", (acc_no))\n    global detail\n    detail = cur.fetchall()\n    print(detail)\n    if len(detail) == 0:\n        return False\n    else:\n        return (detail[0][0], detail[0][1], detail[0][2], detail[0][3], detail[0][4], detail[0][5], detail[0][6])\n# add new balance of customer in bank database",
    "detail": "by-extension.python.backend",
    "documentation": {}
  },
  {
    "label": "update_balance",
    "kind": 2,
    "importPath": "by-extension.python.backend",
    "description": "by-extension.python.backend",
    "peekOfCode": "def update_balance(new_money, acc_no):\n    cur.execute(\"select balance from bank where acc_no=?\", (acc_no,))\n    bal = cur.fetchall()\n    bal = bal[0][0]\n    new_bal = bal + int(new_money)\n    cur.execute(\"update bank set balance=? where acc_no=?\", (new_bal, acc_no))\n    conn.commit()\n# deduct balance from customer bank database\ndef deduct_balance(new_money, acc_no):\n    cur.execute(\"select balance from bank where acc_no=?\", (acc_no,))",
    "detail": "by-extension.python.backend",
    "documentation": {}
  },
  {
    "label": "deduct_balance",
    "kind": 2,
    "importPath": "by-extension.python.backend",
    "description": "by-extension.python.backend",
    "peekOfCode": "def deduct_balance(new_money, acc_no):\n    cur.execute(\"select balance from bank where acc_no=?\", (acc_no,))\n    bal = cur.fetchall()\n    bal = bal[0][0]\n    if bal < int(new_money):\n        return False\n    else:\n        new_bal = bal - int(new_money)\n        cur.execute(\"update bank set balance=? where acc_no=?\", (new_bal, acc_no))\n        conn.commit()",
    "detail": "by-extension.python.backend",
    "documentation": {}
  },
  {
    "label": "check_balance",
    "kind": 2,
    "importPath": "by-extension.python.backend",
    "description": "by-extension.python.backend",
    "peekOfCode": "def check_balance(acc_no):\n    cur.execute(\"select balance from bank where acc_no=?\", (acc_no))\n    bal = cur.fetchall()\n    return bal[0][0]\n# update_name_in_bank_table\ndef update_name_in_bank_table(new_name, acc_no):\n    print(new_name)\n    conn.execute(\"update bank set name='{}' where acc_no={}\".format(new_name, acc_no))\n    conn.commit()\n# update_age_in_bank_table",
    "detail": "by-extension.python.backend",
    "documentation": {}
  },
  {
    "label": "update_name_in_bank_table",
    "kind": 2,
    "importPath": "by-extension.python.backend",
    "description": "by-extension.python.backend",
    "peekOfCode": "def update_name_in_bank_table(new_name, acc_no):\n    print(new_name)\n    conn.execute(\"update bank set name='{}' where acc_no={}\".format(new_name, acc_no))\n    conn.commit()\n# update_age_in_bank_table\ndef update_age_in_bank_table(new_name, acc_no):\n    print(new_name)\n    conn.execute(\"update bank set age={} where acc_no={}\".format(new_name, acc_no))\n    conn.commit()\n# update_address_in_bank_table",
    "detail": "by-extension.python.backend",
    "documentation": {}
  },
  {
    "label": "update_age_in_bank_table",
    "kind": 2,
    "importPath": "by-extension.python.backend",
    "description": "by-extension.python.backend",
    "peekOfCode": "def update_age_in_bank_table(new_name, acc_no):\n    print(new_name)\n    conn.execute(\"update bank set age={} where acc_no={}\".format(new_name, acc_no))\n    conn.commit()\n# update_address_in_bank_table\ndef update_address_in_bank_table(new_name, acc_no):\n    print(new_name)\n    conn.execute(\"update bank set address='{}' where acc_no={}\".format(new_name, acc_no))\n    conn.commit()\n# list of all customers in bank",
    "detail": "by-extension.python.backend",
    "documentation": {}
  },
  {
    "label": "update_address_in_bank_table",
    "kind": 2,
    "importPath": "by-extension.python.backend",
    "description": "by-extension.python.backend",
    "peekOfCode": "def update_address_in_bank_table(new_name, acc_no):\n    print(new_name)\n    conn.execute(\"update bank set address='{}' where acc_no={}\".format(new_name, acc_no))\n    conn.commit()\n# list of all customers in bank\ndef list_all_customers():\n    cur.execute(\"select * from bank\")\n    deatil = cur.fetchall()\n    return deatil\n# delete account from database",
    "detail": "by-extension.python.backend",
    "documentation": {}
  },
  {
    "label": "list_all_customers",
    "kind": 2,
    "importPath": "by-extension.python.backend",
    "description": "by-extension.python.backend",
    "peekOfCode": "def list_all_customers():\n    cur.execute(\"select * from bank\")\n    deatil = cur.fetchall()\n    return deatil\n# delete account from database\ndef delete_acc(acc_no):\n    cur.execute(\"delete from bank where acc_no=?\", (acc_no))\n    conn.commit()\n# show employees detail from staff table\ndef show_employees():",
    "detail": "by-extension.python.backend",
    "documentation": {}
  },
  {
    "label": "delete_acc",
    "kind": 2,
    "importPath": "by-extension.python.backend",
    "description": "by-extension.python.backend",
    "peekOfCode": "def delete_acc(acc_no):\n    cur.execute(\"delete from bank where acc_no=?\", (acc_no))\n    conn.commit()\n# show employees detail from staff table\ndef show_employees():\n    cur.execute(\"select name, salary, position,pass from staff\")\n    detail = cur.fetchall()\n    return detail\n# return all money in bank\ndef all_money():",
    "detail": "by-extension.python.backend",
    "documentation": {}
  },
  {
    "label": "show_employees",
    "kind": 2,
    "importPath": "by-extension.python.backend",
    "description": "by-extension.python.backend",
    "peekOfCode": "def show_employees():\n    cur.execute(\"select name, salary, position,pass from staff\")\n    detail = cur.fetchall()\n    return detail\n# return all money in bank\ndef all_money():\n    cur.execute(\"select balance from bank\")\n    bal = cur.fetchall()\n    print(bal)\n    if len(bal) == 0:",
    "detail": "by-extension.python.backend",
    "documentation": {}
  },
  {
    "label": "all_money",
    "kind": 2,
    "importPath": "by-extension.python.backend",
    "description": "by-extension.python.backend",
    "peekOfCode": "def all_money():\n    cur.execute(\"select balance from bank\")\n    bal = cur.fetchall()\n    print(bal)\n    if len(bal) == 0:\n        return False\n    else:\n        total = 0\n        for i in bal:\n            total = total + i[0]",
    "detail": "by-extension.python.backend",
    "documentation": {}
  },
  {
    "label": "show_employees_for_update",
    "kind": 2,
    "importPath": "by-extension.python.backend",
    "description": "by-extension.python.backend",
    "peekOfCode": "def show_employees_for_update():\n    cur.execute(\"select * from staff\")\n    detail = cur.fetchall()\n    return detail\n# update employee name from data base\ndef update_employee_name(new_name, old_name):\n    print(new_name, old_name)\n    cur.execute(\"update staff set name='{}' where name='{}'\".format(new_name, old_name))\n    conn.commit()\ndef update_employee_password(new_pass, old_name):",
    "detail": "by-extension.python.backend",
    "documentation": {}
  },
  {
    "label": "update_employee_name",
    "kind": 2,
    "importPath": "by-extension.python.backend",
    "description": "by-extension.python.backend",
    "peekOfCode": "def update_employee_name(new_name, old_name):\n    print(new_name, old_name)\n    cur.execute(\"update staff set name='{}' where name='{}'\".format(new_name, old_name))\n    conn.commit()\ndef update_employee_password(new_pass, old_name):\n    print(new_pass, old_name)\n    cur.execute(\"update staff set pass='{}' where name='{}'\".format(new_pass, old_name))\n    conn.commit()\ndef update_employee_salary(new_salary, old_name):\n    print(new_salary, old_name)",
    "detail": "by-extension.python.backend",
    "documentation": {}
  },
  {
    "label": "update_employee_password",
    "kind": 2,
    "importPath": "by-extension.python.backend",
    "description": "by-extension.python.backend",
    "peekOfCode": "def update_employee_password(new_pass, old_name):\n    print(new_pass, old_name)\n    cur.execute(\"update staff set pass='{}' where name='{}'\".format(new_pass, old_name))\n    conn.commit()\ndef update_employee_salary(new_salary, old_name):\n    print(new_salary, old_name)\n    cur.execute(\"update staff set salary={} where name='{}'\".format(new_salary, old_name))\n    conn.commit()\ndef update_employee_position(new_pos, old_name):\n    print(new_pos, old_name)",
    "detail": "by-extension.python.backend",
    "documentation": {}
  },
  {
    "label": "update_employee_salary",
    "kind": 2,
    "importPath": "by-extension.python.backend",
    "description": "by-extension.python.backend",
    "peekOfCode": "def update_employee_salary(new_salary, old_name):\n    print(new_salary, old_name)\n    cur.execute(\"update staff set salary={} where name='{}'\".format(new_salary, old_name))\n    conn.commit()\ndef update_employee_position(new_pos, old_name):\n    print(new_pos, old_name)\n    cur.execute(\"update staff set position='{}' where name='{}'\".format(new_pos, old_name))\n    conn.commit()\n# get name and balance from bank of a particular account number\ndef get_detail(acc_no):",
    "detail": "by-extension.python.backend",
    "documentation": {}
  },
  {
    "label": "update_employee_position",
    "kind": 2,
    "importPath": "by-extension.python.backend",
    "description": "by-extension.python.backend",
    "peekOfCode": "def update_employee_position(new_pos, old_name):\n    print(new_pos, old_name)\n    cur.execute(\"update staff set position='{}' where name='{}'\".format(new_pos, old_name))\n    conn.commit()\n# get name and balance from bank of a particular account number\ndef get_detail(acc_no):\n    cur.execute(\"select name, balance from bank where acc_no=?\", (acc_no))\n    details = cur.fetchall()\n    return details\ndef check_name_in_staff(name):",
    "detail": "by-extension.python.backend",
    "documentation": {}
  },
  {
    "label": "get_detail",
    "kind": 2,
    "importPath": "by-extension.python.backend",
    "description": "by-extension.python.backend",
    "peekOfCode": "def get_detail(acc_no):\n    cur.execute(\"select name, balance from bank where acc_no=?\", (acc_no))\n    details = cur.fetchall()\n    return details\ndef check_name_in_staff(name):\n    cur = conn.cursor()\n    cur.execute(\"select name from staff\")\n    details = cur.fetchall()\n    for i in details:\n        if i[0] == name:",
    "detail": "by-extension.python.backend",
    "documentation": {}
  },
  {
    "label": "check_name_in_staff",
    "kind": 2,
    "importPath": "by-extension.python.backend",
    "description": "by-extension.python.backend",
    "peekOfCode": "def check_name_in_staff(name):\n    cur = conn.cursor()\n    cur.execute(\"select name from staff\")\n    details = cur.fetchall()\n    for i in details:\n        if i[0] == name:\n            return True\n    return False",
    "detail": "by-extension.python.backend",
    "documentation": {}
  },
  {
    "label": "Background",
    "kind": 6,
    "importPath": "by-extension.python.Background",
    "description": "by-extension.python.Background",
    "peekOfCode": "class Background(Canvas):\n    \"\"\"\n    Classe para gerar um plano de fundo animado\n    \"\"\"\n    __background = []\n    __stop = False\n    def __init__(self, tk_instance, *geometry, fp=\"background.png\", animation_speed=50):\n        # Verifica se o parâmetro tk_instance é uma instância de Tk\n        if not isinstance(tk_instance, Tk): raise TypeError(\"The tk_instance argument must be an instance of Tk.\")\n        # Recebe o caminho de imagem e a velocidade da animação",
    "detail": "by-extension.python.Background",
    "documentation": {}
  },
  {
    "label": "Backup",
    "kind": 6,
    "importPath": "by-extension.python.backup",
    "description": "by-extension.python.backup",
    "peekOfCode": "class Backup:\n    def __init__(self, src, dst, rsync_location=None, logfile=None, max_backups=5):\n        \"\"\"\n        Wrapper object representing an rsync time-machine like backup using the rsync\n        link-dest option. Keeps n number of differential backups.\n        Inputs:\n            src: source folder to be backed up.\n            dst: destination of the backup.\n            rsync_location: if running Windows, the location of the cygwin\n                rsync.exe binary.",
    "detail": "by-extension.python.backup",
    "documentation": {}
  },
  {
    "label": "today",
    "kind": 5,
    "importPath": "by-extension.python.backup_automater_services",
    "description": "by-extension.python.backup_automater_services",
    "peekOfCode": "today = datetime.date.today()  # Get Today's date\ntodaystr = today.isoformat()  # Format it so we can use the format to create the directory\nconfdir = os.getenv(\"my_config\")  # Set the variable by getting the value from the OS setting\ndropbox = os.getenv(\"dropbox\")  # Set the variable by getting the value from the OS setting\nconffile = 'services.conf'  # Set the variable as the name of the configuration file\nconffilename = os.path.join(confdir, conffile)  # Set the variable by combining the path and the file name\nsourcedir = os.path.expanduser('~/Library/Services/')  # Source directory of where the scripts are located\n# Combine several settings to create\ndestdir = os.path.join(dropbox, \"My_backups\" + \"/\" + \"Automater_services\" + todaystr + \"/\")\n# the destination backup directory",
    "detail": "by-extension.python.backup_automater_services",
    "documentation": {}
  },
  {
    "label": "todaystr",
    "kind": 5,
    "importPath": "by-extension.python.backup_automater_services",
    "description": "by-extension.python.backup_automater_services",
    "peekOfCode": "todaystr = today.isoformat()  # Format it so we can use the format to create the directory\nconfdir = os.getenv(\"my_config\")  # Set the variable by getting the value from the OS setting\ndropbox = os.getenv(\"dropbox\")  # Set the variable by getting the value from the OS setting\nconffile = 'services.conf'  # Set the variable as the name of the configuration file\nconffilename = os.path.join(confdir, conffile)  # Set the variable by combining the path and the file name\nsourcedir = os.path.expanduser('~/Library/Services/')  # Source directory of where the scripts are located\n# Combine several settings to create\ndestdir = os.path.join(dropbox, \"My_backups\" + \"/\" + \"Automater_services\" + todaystr + \"/\")\n# the destination backup directory\nfor file_name in open(conffilename):  # Walk through the configuration file",
    "detail": "by-extension.python.backup_automater_services",
    "documentation": {}
  },
  {
    "label": "confdir",
    "kind": 5,
    "importPath": "by-extension.python.backup_automater_services",
    "description": "by-extension.python.backup_automater_services",
    "peekOfCode": "confdir = os.getenv(\"my_config\")  # Set the variable by getting the value from the OS setting\ndropbox = os.getenv(\"dropbox\")  # Set the variable by getting the value from the OS setting\nconffile = 'services.conf'  # Set the variable as the name of the configuration file\nconffilename = os.path.join(confdir, conffile)  # Set the variable by combining the path and the file name\nsourcedir = os.path.expanduser('~/Library/Services/')  # Source directory of where the scripts are located\n# Combine several settings to create\ndestdir = os.path.join(dropbox, \"My_backups\" + \"/\" + \"Automater_services\" + todaystr + \"/\")\n# the destination backup directory\nfor file_name in open(conffilename):  # Walk through the configuration file\n    fname = file_name.strip()  # Strip out the blank lines from the configuration file",
    "detail": "by-extension.python.backup_automater_services",
    "documentation": {}
  },
  {
    "label": "dropbox",
    "kind": 5,
    "importPath": "by-extension.python.backup_automater_services",
    "description": "by-extension.python.backup_automater_services",
    "peekOfCode": "dropbox = os.getenv(\"dropbox\")  # Set the variable by getting the value from the OS setting\nconffile = 'services.conf'  # Set the variable as the name of the configuration file\nconffilename = os.path.join(confdir, conffile)  # Set the variable by combining the path and the file name\nsourcedir = os.path.expanduser('~/Library/Services/')  # Source directory of where the scripts are located\n# Combine several settings to create\ndestdir = os.path.join(dropbox, \"My_backups\" + \"/\" + \"Automater_services\" + todaystr + \"/\")\n# the destination backup directory\nfor file_name in open(conffilename):  # Walk through the configuration file\n    fname = file_name.strip()  # Strip out the blank lines from the configuration file\n    if fname:  # For the lines that are not blank",
    "detail": "by-extension.python.backup_automater_services",
    "documentation": {}
  },
  {
    "label": "conffile",
    "kind": 5,
    "importPath": "by-extension.python.backup_automater_services",
    "description": "by-extension.python.backup_automater_services",
    "peekOfCode": "conffile = 'services.conf'  # Set the variable as the name of the configuration file\nconffilename = os.path.join(confdir, conffile)  # Set the variable by combining the path and the file name\nsourcedir = os.path.expanduser('~/Library/Services/')  # Source directory of where the scripts are located\n# Combine several settings to create\ndestdir = os.path.join(dropbox, \"My_backups\" + \"/\" + \"Automater_services\" + todaystr + \"/\")\n# the destination backup directory\nfor file_name in open(conffilename):  # Walk through the configuration file\n    fname = file_name.strip()  # Strip out the blank lines from the configuration file\n    if fname:  # For the lines that are not blank\n        sourcefile = os.path.join(sourcedir, fname)  # Get the name of the source files to backup",
    "detail": "by-extension.python.backup_automater_services",
    "documentation": {}
  },
  {
    "label": "conffilename",
    "kind": 5,
    "importPath": "by-extension.python.backup_automater_services",
    "description": "by-extension.python.backup_automater_services",
    "peekOfCode": "conffilename = os.path.join(confdir, conffile)  # Set the variable by combining the path and the file name\nsourcedir = os.path.expanduser('~/Library/Services/')  # Source directory of where the scripts are located\n# Combine several settings to create\ndestdir = os.path.join(dropbox, \"My_backups\" + \"/\" + \"Automater_services\" + todaystr + \"/\")\n# the destination backup directory\nfor file_name in open(conffilename):  # Walk through the configuration file\n    fname = file_name.strip()  # Strip out the blank lines from the configuration file\n    if fname:  # For the lines that are not blank\n        sourcefile = os.path.join(sourcedir, fname)  # Get the name of the source files to backup\n        destfile = os.path.join(destdir, fname)  # Get the name of the destination file names",
    "detail": "by-extension.python.backup_automater_services",
    "documentation": {}
  },
  {
    "label": "sourcedir",
    "kind": 5,
    "importPath": "by-extension.python.backup_automater_services",
    "description": "by-extension.python.backup_automater_services",
    "peekOfCode": "sourcedir = os.path.expanduser('~/Library/Services/')  # Source directory of where the scripts are located\n# Combine several settings to create\ndestdir = os.path.join(dropbox, \"My_backups\" + \"/\" + \"Automater_services\" + todaystr + \"/\")\n# the destination backup directory\nfor file_name in open(conffilename):  # Walk through the configuration file\n    fname = file_name.strip()  # Strip out the blank lines from the configuration file\n    if fname:  # For the lines that are not blank\n        sourcefile = os.path.join(sourcedir, fname)  # Get the name of the source files to backup\n        destfile = os.path.join(destdir, fname)  # Get the name of the destination file names\n        shutil.copytree(sourcefile, destfile)  # Copy the directories",
    "detail": "by-extension.python.backup_automater_services",
    "documentation": {}
  },
  {
    "label": "destdir",
    "kind": 5,
    "importPath": "by-extension.python.backup_automater_services",
    "description": "by-extension.python.backup_automater_services",
    "peekOfCode": "destdir = os.path.join(dropbox, \"My_backups\" + \"/\" + \"Automater_services\" + todaystr + \"/\")\n# the destination backup directory\nfor file_name in open(conffilename):  # Walk through the configuration file\n    fname = file_name.strip()  # Strip out the blank lines from the configuration file\n    if fname:  # For the lines that are not blank\n        sourcefile = os.path.join(sourcedir, fname)  # Get the name of the source files to backup\n        destfile = os.path.join(destdir, fname)  # Get the name of the destination file names\n        shutil.copytree(sourcefile, destfile)  # Copy the directories",
    "detail": "by-extension.python.backup_automater_services",
    "documentation": {}
  },
  {
    "label": "balancedBrackets",
    "kind": 2,
    "importPath": "by-extension.python.balanced-brackets",
    "description": "by-extension.python.balanced-brackets",
    "peekOfCode": "def balancedBrackets(string):\n  stack = []\n  # Process every character on input\n  for char in string:\n    # Assign an initial value in case the stack is empty\n    last = 0\n    # Assign the value of the last element if stack is not empty\n    if stack:\n      last = stack[len(stack) - 1]\n    if stack and last in brackets and brackets[last] == char:",
    "detail": "by-extension.python.balanced-brackets",
    "documentation": {}
  },
  {
    "label": "brackets",
    "kind": 5,
    "importPath": "by-extension.python.balanced-brackets",
    "description": "by-extension.python.balanced-brackets",
    "peekOfCode": "brackets = {\n  '(': ')',\n  '{': '}',\n  '[': ']'\n}\n# On each input string, process it using the balance checker\ndef balancedBrackets(string):\n  stack = []\n  # Process every character on input\n  for char in string:",
    "detail": "by-extension.python.balanced-brackets",
    "documentation": {}
  },
  {
    "label": "Stack",
    "kind": 6,
    "importPath": "by-extension.python.balance_parenthesis",
    "description": "by-extension.python.balance_parenthesis",
    "peekOfCode": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)\n    def pop(self):\n        return self.items.pop()\n    def is_empty(self):\n        return self.items == []\n    def peek(self):",
    "detail": "by-extension.python.balance_parenthesis",
    "documentation": {}
  },
  {
    "label": "is_same",
    "kind": 2,
    "importPath": "by-extension.python.balance_parenthesis",
    "description": "by-extension.python.balance_parenthesis",
    "peekOfCode": "def is_same(p1, p2):\n        if p1 == '(' and p2 == ')':\n                return True\n        elif p1 == '[' and p2 == ']':\n                return True\n        elif p1 == '{' and p2 == '}':\n                return True\n        else:\n                return False\ndef is_balanced(check_string):",
    "detail": "by-extension.python.balance_parenthesis",
    "documentation": {}
  },
  {
    "label": "is_balanced",
    "kind": 2,
    "importPath": "by-extension.python.balance_parenthesis",
    "description": "by-extension.python.balance_parenthesis",
    "peekOfCode": "def is_balanced(check_string):\n        s = Stack()\n        index = 0\n        is_bal = True\n        while index < len(check_string) and is_bal:\n                paren = check_string[index]\n                if paren in '{[(':\n                        s.push(paren)\n                else:\n                        if s.is_empty():",
    "detail": "by-extension.python.balance_parenthesis",
    "documentation": {}
  },
  {
    "label": "BallObject",
    "kind": 6,
    "importPath": "by-extension.python.ball",
    "description": "by-extension.python.ball",
    "peekOfCode": "class BallObject(pyglet.shapes.Circle):\n    def __init__(self, *args, **kwargs):\n        super(BallObject, self).__init__(*args, **kwargs)\n        self.color = (255, 180, 0)\n        self.velocity_x, self.velocity_y = 0.0, 0.0\n    def update(self, win_size: Tuple, border: Tuple, other_object, dt) -> None:\n        speed = [2.37, 2.49, 2.54, 2.62, 2.71, 2.85, 2.96, 3.08, 3.17, 3.25]    # more choices more randomness\n        rn = random.choice(speed)\n        newx = self.x + self.velocity_x\n        newy = self.y + self.velocity_y",
    "detail": "by-extension.python.ball",
    "documentation": {}
  },
  {
    "label": "base_check",
    "kind": 2,
    "importPath": "by-extension.python.Base Converter Number system",
    "description": "by-extension.python.Base Converter Number system",
    "peekOfCode": "def base_check(xnumber, xbase):\n    for char in xnumber[len(xnumber ) -1]:\n        if int(char) >= int(xbase):\n            return False\n    return True\ndef convert_from_10(xnumber, xbase, arr, ybase):\n    if int(xbase) == 2 or int(xbase) == 4 or int(xbase) == 6 or int(xbase) == 8:\n        if xnumber == 0:\n            return arr\n        else:",
    "detail": "by-extension.python.Base Converter Number system",
    "documentation": {}
  },
  {
    "label": "convert_from_10",
    "kind": 2,
    "importPath": "by-extension.python.Base Converter Number system",
    "description": "by-extension.python.Base Converter Number system",
    "peekOfCode": "def convert_from_10(xnumber, xbase, arr, ybase):\n    if int(xbase) == 2 or int(xbase) == 4 or int(xbase) == 6 or int(xbase) == 8:\n        if xnumber == 0:\n            return arr\n        else:\n            quotient = int(xnumber) // int(xbase)\n            remainder = int(xnumber) % int(xbase)\n            arr.append(remainder)\n            dividend = quotient\n            convert_from_10(dividend, xbase, arr, base)",
    "detail": "by-extension.python.Base Converter Number system",
    "documentation": {}
  },
  {
    "label": "convert_to_10",
    "kind": 2,
    "importPath": "by-extension.python.Base Converter Number system",
    "description": "by-extension.python.Base Converter Number system",
    "peekOfCode": "def convert_to_10(xnumber, xbase, arr, ybase):\n    if int(xbase) == 10:\n        for char in xnumber:\n            arr.append(char)\n        flipped = arr[::-1]\n        ans = 0\n        j = 0\n        for i in flipped:\n            ans = ans + (int(i) * (int(ybase) ** j))\n            j = j + 1",
    "detail": "by-extension.python.Base Converter Number system",
    "documentation": {}
  },
  {
    "label": "arrayfrom",
    "kind": 5,
    "importPath": "by-extension.python.Base Converter Number system",
    "description": "by-extension.python.Base Converter Number system",
    "peekOfCode": "arrayfrom = []\narrayto = []\nis_base_possible = False\nnumber = input(\"Enter the number you would like to convert: \")\nwhile not is_base_possible:\n    base = input(\"What is the base of this number? \")\n    is_base_possible = base_check(number, base)\n    if not is_base_possible:\n        print(f\"The number {number} is not a base {base} number\")\n        base = input",
    "detail": "by-extension.python.Base Converter Number system",
    "documentation": {}
  },
  {
    "label": "arrayto",
    "kind": 5,
    "importPath": "by-extension.python.Base Converter Number system",
    "description": "by-extension.python.Base Converter Number system",
    "peekOfCode": "arrayto = []\nis_base_possible = False\nnumber = input(\"Enter the number you would like to convert: \")\nwhile not is_base_possible:\n    base = input(\"What is the base of this number? \")\n    is_base_possible = base_check(number, base)\n    if not is_base_possible:\n        print(f\"The number {number} is not a base {base} number\")\n        base = input\n    else:",
    "detail": "by-extension.python.Base Converter Number system",
    "documentation": {}
  },
  {
    "label": "is_base_possible",
    "kind": 5,
    "importPath": "by-extension.python.Base Converter Number system",
    "description": "by-extension.python.Base Converter Number system",
    "peekOfCode": "is_base_possible = False\nnumber = input(\"Enter the number you would like to convert: \")\nwhile not is_base_possible:\n    base = input(\"What is the base of this number? \")\n    is_base_possible = base_check(number, base)\n    if not is_base_possible:\n        print(f\"The number {number} is not a base {base} number\")\n        base = input\n    else:\n        break",
    "detail": "by-extension.python.Base Converter Number system",
    "documentation": {}
  },
  {
    "label": "number",
    "kind": 5,
    "importPath": "by-extension.python.Base Converter Number system",
    "description": "by-extension.python.Base Converter Number system",
    "peekOfCode": "number = input(\"Enter the number you would like to convert: \")\nwhile not is_base_possible:\n    base = input(\"What is the base of this number? \")\n    is_base_possible = base_check(number, base)\n    if not is_base_possible:\n        print(f\"The number {number} is not a base {base} number\")\n        base = input\n    else:\n        break\ndBase = input(\"What is the base you would like to convert to? \")",
    "detail": "by-extension.python.Base Converter Number system",
    "documentation": {}
  },
  {
    "label": "dBase",
    "kind": 5,
    "importPath": "by-extension.python.Base Converter Number system",
    "description": "by-extension.python.Base Converter Number system",
    "peekOfCode": "dBase = input(\"What is the base you would like to convert to? \")\nif int(base) == 10:\n    convert_from_10(number, dBase, arrayfrom, base)\n    answer = arrayfrom[::-1]  # reverses the array\n    print(f\"In base {dBase} this number is: \")\n    print(*answer, sep='')\nelif int(dBase) == 10:\n    answer = convert_to_10(number, dBase, arrayto, base)\n    print(f\"In base {dBase} this number is: {answer} \")\nelse:",
    "detail": "by-extension.python.Base Converter Number system",
    "documentation": {}
  },
  {
    "label": "base_check",
    "kind": 2,
    "importPath": "by-extension.python.Base_Converter_Number_system",
    "description": "by-extension.python.Base_Converter_Number_system",
    "peekOfCode": "def base_check(xnumber, xbase):\n    for char in xnumber[len(xnumber ) -1]:\n        if int(char) >= int(xbase):\n            return False\n    return True\ndef convert_from_10(xnumber, xbase, arr, ybase):\n    if int(xbase) == 2 or int(xbase) == 4 or int(xbase) == 6 or int(xbase) == 8:\n        if xnumber == 0:\n            return arr\n        else:",
    "detail": "by-extension.python.Base_Converter_Number_system",
    "documentation": {}
  },
  {
    "label": "convert_from_10",
    "kind": 2,
    "importPath": "by-extension.python.Base_Converter_Number_system",
    "description": "by-extension.python.Base_Converter_Number_system",
    "peekOfCode": "def convert_from_10(xnumber, xbase, arr, ybase):\n    if int(xbase) == 2 or int(xbase) == 4 or int(xbase) == 6 or int(xbase) == 8:\n        if xnumber == 0:\n            return arr\n        else:\n            quotient = int(xnumber) // int(xbase)\n            remainder = int(xnumber) % int(xbase)\n            arr.append(remainder)\n            dividend = quotient\n            convert_from_10(dividend, xbase, arr, base)",
    "detail": "by-extension.python.Base_Converter_Number_system",
    "documentation": {}
  },
  {
    "label": "convert_to_10",
    "kind": 2,
    "importPath": "by-extension.python.Base_Converter_Number_system",
    "description": "by-extension.python.Base_Converter_Number_system",
    "peekOfCode": "def convert_to_10(xnumber, xbase, arr, ybase):\n    if int(xbase) == 10:\n        for char in xnumber:\n            arr.append(char)\n        flipped = arr[::-1]\n        ans = 0\n        j = 0\n        for i in flipped:\n            ans = ans + (int(i) * (int(ybase) ** j))\n            j = j + 1",
    "detail": "by-extension.python.Base_Converter_Number_system",
    "documentation": {}
  },
  {
    "label": "arrayfrom",
    "kind": 5,
    "importPath": "by-extension.python.Base_Converter_Number_system",
    "description": "by-extension.python.Base_Converter_Number_system",
    "peekOfCode": "arrayfrom = []\narrayto = []\nis_base_possible = False\nnumber = input(\"Enter the number you would like to convert: \")\nwhile not is_base_possible:\n    base = input(\"What is the base of this number? \")\n    is_base_possible = base_check(number, base)\n    if not is_base_possible:\n        print(f\"The number {number} is not a base {base} number\")\n        base = input",
    "detail": "by-extension.python.Base_Converter_Number_system",
    "documentation": {}
  },
  {
    "label": "arrayto",
    "kind": 5,
    "importPath": "by-extension.python.Base_Converter_Number_system",
    "description": "by-extension.python.Base_Converter_Number_system",
    "peekOfCode": "arrayto = []\nis_base_possible = False\nnumber = input(\"Enter the number you would like to convert: \")\nwhile not is_base_possible:\n    base = input(\"What is the base of this number? \")\n    is_base_possible = base_check(number, base)\n    if not is_base_possible:\n        print(f\"The number {number} is not a base {base} number\")\n        base = input\n    else:",
    "detail": "by-extension.python.Base_Converter_Number_system",
    "documentation": {}
  },
  {
    "label": "is_base_possible",
    "kind": 5,
    "importPath": "by-extension.python.Base_Converter_Number_system",
    "description": "by-extension.python.Base_Converter_Number_system",
    "peekOfCode": "is_base_possible = False\nnumber = input(\"Enter the number you would like to convert: \")\nwhile not is_base_possible:\n    base = input(\"What is the base of this number? \")\n    is_base_possible = base_check(number, base)\n    if not is_base_possible:\n        print(f\"The number {number} is not a base {base} number\")\n        base = input\n    else:\n        break",
    "detail": "by-extension.python.Base_Converter_Number_system",
    "documentation": {}
  },
  {
    "label": "number",
    "kind": 5,
    "importPath": "by-extension.python.Base_Converter_Number_system",
    "description": "by-extension.python.Base_Converter_Number_system",
    "peekOfCode": "number = input(\"Enter the number you would like to convert: \")\nwhile not is_base_possible:\n    base = input(\"What is the base of this number? \")\n    is_base_possible = base_check(number, base)\n    if not is_base_possible:\n        print(f\"The number {number} is not a base {base} number\")\n        base = input\n    else:\n        break\ndBase = input(\"What is the base you would like to convert to? \")",
    "detail": "by-extension.python.Base_Converter_Number_system",
    "documentation": {}
  },
  {
    "label": "dBase",
    "kind": 5,
    "importPath": "by-extension.python.Base_Converter_Number_system",
    "description": "by-extension.python.Base_Converter_Number_system",
    "peekOfCode": "dBase = input(\"What is the base you would like to convert to? \")\nif int(base) == 10:\n    convert_from_10(number, dBase, arrayfrom, base)\n    answer = arrayfrom[::-1]  # reverses the array\n    print(f\"In base {dBase} this number is: \")\n    print(*answer, sep='')\nelif int(dBase) == 10:\n    answer = convert_to_10(number, dBase, arrayto, base)\n    print(f\"In base {dBase} this number is: {answer} \")\nelse:",
    "detail": "by-extension.python.Base_Converter_Number_system",
    "documentation": {}
  },
  {
    "label": "plt.rcParams['font.family']",
    "kind": 5,
    "importPath": "by-extension.python.base_graph",
    "description": "by-extension.python.base_graph",
    "peekOfCode": "plt.rcParams['font.family'] = 'MEIRYO'\nplt.rcParams[\"font.size\"] = 18\nw, h, dpi = 1920, 1080, 144\nfig = plt.figure(figsize=(w / dpi, h / dpi), dpi=dpi, facecolor='white')\nx = np.arange(-0.2, 7, 0.001)\ny1 = 3 * np.sin(x)\ny2 = 2.3 * np.sin(x )\nplt.xticks(np.linspace(0, np.pi * 2.5, num=6, endpoint=True))\nplt.yticks(np.linspace(-11, 11, num=23, endpoint=True))\nplt.grid(True)",
    "detail": "by-extension.python.base_graph",
    "documentation": {}
  },
  {
    "label": "plt.rcParams[\"font.size\"]",
    "kind": 5,
    "importPath": "by-extension.python.base_graph",
    "description": "by-extension.python.base_graph",
    "peekOfCode": "plt.rcParams[\"font.size\"] = 18\nw, h, dpi = 1920, 1080, 144\nfig = plt.figure(figsize=(w / dpi, h / dpi), dpi=dpi, facecolor='white')\nx = np.arange(-0.2, 7, 0.001)\ny1 = 3 * np.sin(x)\ny2 = 2.3 * np.sin(x )\nplt.xticks(np.linspace(0, np.pi * 2.5, num=6, endpoint=True))\nplt.yticks(np.linspace(-11, 11, num=23, endpoint=True))\nplt.grid(True)\nplt.plot(x, y1, label=\"電流\")",
    "detail": "by-extension.python.base_graph",
    "documentation": {}
  },
  {
    "label": "fig",
    "kind": 5,
    "importPath": "by-extension.python.base_graph",
    "description": "by-extension.python.base_graph",
    "peekOfCode": "fig = plt.figure(figsize=(w / dpi, h / dpi), dpi=dpi, facecolor='white')\nx = np.arange(-0.2, 7, 0.001)\ny1 = 3 * np.sin(x)\ny2 = 2.3 * np.sin(x )\nplt.xticks(np.linspace(0, np.pi * 2.5, num=6, endpoint=True))\nplt.yticks(np.linspace(-11, 11, num=23, endpoint=True))\nplt.grid(True)\nplt.plot(x, y1, label=\"電流\")\nplt.plot(x, y2, label='両端電圧')\nplt.legend()",
    "detail": "by-extension.python.base_graph",
    "documentation": {}
  },
  {
    "label": "x",
    "kind": 5,
    "importPath": "by-extension.python.base_graph",
    "description": "by-extension.python.base_graph",
    "peekOfCode": "x = np.arange(-0.2, 7, 0.001)\ny1 = 3 * np.sin(x)\ny2 = 2.3 * np.sin(x )\nplt.xticks(np.linspace(0, np.pi * 2.5, num=6, endpoint=True))\nplt.yticks(np.linspace(-11, 11, num=23, endpoint=True))\nplt.grid(True)\nplt.plot(x, y1, label=\"電流\")\nplt.plot(x, y2, label='両端電圧')\nplt.legend()\nplt.legend(bbox_to_anchor=(1, 1), loc='upper right', borderaxespad=1)",
    "detail": "by-extension.python.base_graph",
    "documentation": {}
  },
  {
    "label": "y1",
    "kind": 5,
    "importPath": "by-extension.python.base_graph",
    "description": "by-extension.python.base_graph",
    "peekOfCode": "y1 = 3 * np.sin(x)\ny2 = 2.3 * np.sin(x )\nplt.xticks(np.linspace(0, np.pi * 2.5, num=6, endpoint=True))\nplt.yticks(np.linspace(-11, 11, num=23, endpoint=True))\nplt.grid(True)\nplt.plot(x, y1, label=\"電流\")\nplt.plot(x, y2, label='両端電圧')\nplt.legend()\nplt.legend(bbox_to_anchor=(1, 1), loc='upper right', borderaxespad=1)\nplt.show()",
    "detail": "by-extension.python.base_graph",
    "documentation": {}
  },
  {
    "label": "y2",
    "kind": 5,
    "importPath": "by-extension.python.base_graph",
    "description": "by-extension.python.base_graph",
    "peekOfCode": "y2 = 2.3 * np.sin(x )\nplt.xticks(np.linspace(0, np.pi * 2.5, num=6, endpoint=True))\nplt.yticks(np.linspace(-11, 11, num=23, endpoint=True))\nplt.grid(True)\nplt.plot(x, y1, label=\"電流\")\nplt.plot(x, y2, label='両端電圧')\nplt.legend()\nplt.legend(bbox_to_anchor=(1, 1), loc='upper right', borderaxespad=1)\nplt.show()",
    "detail": "by-extension.python.base_graph",
    "documentation": {}
  },
  {
    "label": "BaseJobResource",
    "kind": 6,
    "importPath": "by-extension.python.base_job",
    "description": "by-extension.python.base_job",
    "peekOfCode": "class BaseJobResource(Resource):\n    def dispatch_request(\n        self, provider: str, owner_name: str, repo_name: str, build_number: int, job_number: int, *args, **kwargs\n    ) -> Response:\n        queryset = Job.query.join(Build, Build.id == Job.build_id).join(\n            Repository, Repository.id == Build.repository_id\n        ).filter(\n            Repository.provider == RepositoryProvider(provider),\n            Repository.owner_name == owner_name,\n            Repository.name == repo_name,",
    "detail": "by-extension.python.base_job",
    "documentation": {}
  },
  {
    "label": "kilometers",
    "kind": 5,
    "importPath": "by-extension.python.basic example",
    "description": "by-extension.python.basic example",
    "peekOfCode": "kilometers = float(input(\"Enter value in kilometers: \"))\n# conversion factor\nconv_fac = 0.621371\n# calculate miles\nmiles = kilometers * conv_fac\nprint('%0.2f kilometers is equal to %0.2f miles' %(kilometers,miles))",
    "detail": "by-extension.python.basic example",
    "documentation": {}
  },
  {
    "label": "conv_fac",
    "kind": 5,
    "importPath": "by-extension.python.basic example",
    "description": "by-extension.python.basic example",
    "peekOfCode": "conv_fac = 0.621371\n# calculate miles\nmiles = kilometers * conv_fac\nprint('%0.2f kilometers is equal to %0.2f miles' %(kilometers,miles))",
    "detail": "by-extension.python.basic example",
    "documentation": {}
  },
  {
    "label": "miles",
    "kind": 5,
    "importPath": "by-extension.python.basic example",
    "description": "by-extension.python.basic example",
    "peekOfCode": "miles = kilometers * conv_fac\nprint('%0.2f kilometers is equal to %0.2f miles' %(kilometers,miles))",
    "detail": "by-extension.python.basic example",
    "documentation": {}
  },
  {
    "label": "ListNode",
    "kind": 6,
    "importPath": "by-extension.python.basic-linked-list",
    "description": "by-extension.python.basic-linked-list",
    "peekOfCode": "class ListNode:\n  def _init_(self,val):\n    self.val = val\n    self.next = None\n# initiation of linked list\nheadNode = ListNode(1)\nsecondNode = ListNode(2)\nthirdNode = ListNode(3)\nheadNode.next = secondNode\nsecondNode.next = thirdNode",
    "detail": "by-extension.python.basic-linked-list",
    "documentation": {}
  },
  {
    "label": "headNode",
    "kind": 5,
    "importPath": "by-extension.python.basic-linked-list",
    "description": "by-extension.python.basic-linked-list",
    "peekOfCode": "headNode = ListNode(1)\nsecondNode = ListNode(2)\nthirdNode = ListNode(3)\nheadNode.next = secondNode\nsecondNode.next = thirdNode\n# iterate through the linked list\ncurNode = headNode\nwhile curNode:\n  print(curNode.val)\n  curNode = curNode.next",
    "detail": "by-extension.python.basic-linked-list",
    "documentation": {}
  },
  {
    "label": "secondNode",
    "kind": 5,
    "importPath": "by-extension.python.basic-linked-list",
    "description": "by-extension.python.basic-linked-list",
    "peekOfCode": "secondNode = ListNode(2)\nthirdNode = ListNode(3)\nheadNode.next = secondNode\nsecondNode.next = thirdNode\n# iterate through the linked list\ncurNode = headNode\nwhile curNode:\n  print(curNode.val)\n  curNode = curNode.next\n# insert new listnode with value of 5 in between the secondNode and thirdNode",
    "detail": "by-extension.python.basic-linked-list",
    "documentation": {}
  },
  {
    "label": "thirdNode",
    "kind": 5,
    "importPath": "by-extension.python.basic-linked-list",
    "description": "by-extension.python.basic-linked-list",
    "peekOfCode": "thirdNode = ListNode(3)\nheadNode.next = secondNode\nsecondNode.next = thirdNode\n# iterate through the linked list\ncurNode = headNode\nwhile curNode:\n  print(curNode.val)\n  curNode = curNode.next\n# insert new listnode with value of 5 in between the secondNode and thirdNode\ncurNode = headNode",
    "detail": "by-extension.python.basic-linked-list",
    "documentation": {}
  },
  {
    "label": "headNode.next",
    "kind": 5,
    "importPath": "by-extension.python.basic-linked-list",
    "description": "by-extension.python.basic-linked-list",
    "peekOfCode": "headNode.next = secondNode\nsecondNode.next = thirdNode\n# iterate through the linked list\ncurNode = headNode\nwhile curNode:\n  print(curNode.val)\n  curNode = curNode.next\n# insert new listnode with value of 5 in between the secondNode and thirdNode\ncurNode = headNode\nwhile curNode.val != 2:",
    "detail": "by-extension.python.basic-linked-list",
    "documentation": {}
  },
  {
    "label": "secondNode.next",
    "kind": 5,
    "importPath": "by-extension.python.basic-linked-list",
    "description": "by-extension.python.basic-linked-list",
    "peekOfCode": "secondNode.next = thirdNode\n# iterate through the linked list\ncurNode = headNode\nwhile curNode:\n  print(curNode.val)\n  curNode = curNode.next\n# insert new listnode with value of 5 in between the secondNode and thirdNode\ncurNode = headNode\nwhile curNode.val != 2:\n  curNode = curNode.next",
    "detail": "by-extension.python.basic-linked-list",
    "documentation": {}
  },
  {
    "label": "curNode",
    "kind": 5,
    "importPath": "by-extension.python.basic-linked-list",
    "description": "by-extension.python.basic-linked-list",
    "peekOfCode": "curNode = headNode\nwhile curNode:\n  print(curNode.val)\n  curNode = curNode.next\n# insert new listnode with value of 5 in between the secondNode and thirdNode\ncurNode = headNode\nwhile curNode.val != 2:\n  curNode = curNode.next\nnewNode = ListNode(5)\nnewNode.next = curNode.next",
    "detail": "by-extension.python.basic-linked-list",
    "documentation": {}
  },
  {
    "label": "curNode",
    "kind": 5,
    "importPath": "by-extension.python.basic-linked-list",
    "description": "by-extension.python.basic-linked-list",
    "peekOfCode": "curNode = headNode\nwhile curNode.val != 2:\n  curNode = curNode.next\nnewNode = ListNode(5)\nnewNode.next = curNode.next\ncurNode.next = newNode\n# remove the listnode with value of 5\ncurNode = headNode\nwhile curNode.next.val != 5:\n  curNode = curNode.next",
    "detail": "by-extension.python.basic-linked-list",
    "documentation": {}
  },
  {
    "label": "newNode",
    "kind": 5,
    "importPath": "by-extension.python.basic-linked-list",
    "description": "by-extension.python.basic-linked-list",
    "peekOfCode": "newNode = ListNode(5)\nnewNode.next = curNode.next\ncurNode.next = newNode\n# remove the listnode with value of 5\ncurNode = headNode\nwhile curNode.next.val != 5:\n  curNode = curNode.next\n  curNode.next = curNode.next.next",
    "detail": "by-extension.python.basic-linked-list",
    "documentation": {}
  },
  {
    "label": "newNode.next",
    "kind": 5,
    "importPath": "by-extension.python.basic-linked-list",
    "description": "by-extension.python.basic-linked-list",
    "peekOfCode": "newNode.next = curNode.next\ncurNode.next = newNode\n# remove the listnode with value of 5\ncurNode = headNode\nwhile curNode.next.val != 5:\n  curNode = curNode.next\n  curNode.next = curNode.next.next",
    "detail": "by-extension.python.basic-linked-list",
    "documentation": {}
  },
  {
    "label": "curNode.next",
    "kind": 5,
    "importPath": "by-extension.python.basic-linked-list",
    "description": "by-extension.python.basic-linked-list",
    "peekOfCode": "curNode.next = newNode\n# remove the listnode with value of 5\ncurNode = headNode\nwhile curNode.next.val != 5:\n  curNode = curNode.next\n  curNode.next = curNode.next.next",
    "detail": "by-extension.python.basic-linked-list",
    "documentation": {}
  },
  {
    "label": "curNode",
    "kind": 5,
    "importPath": "by-extension.python.basic-linked-list",
    "description": "by-extension.python.basic-linked-list",
    "peekOfCode": "curNode = headNode\nwhile curNode.next.val != 5:\n  curNode = curNode.next\n  curNode.next = curNode.next.next",
    "detail": "by-extension.python.basic-linked-list",
    "documentation": {}
  },
  {
    "label": "pdf",
    "kind": 5,
    "importPath": "by-extension.python.basic",
    "description": "by-extension.python.basic",
    "peekOfCode": "pdf = FPDF()\n# Set Author Name of the PDF\npdf.set_author('@NavonilDas')\n# Set Subject of The PDF\npdf.set_subject('python')\n# Set the Title of the PDF\npdf.set_title('Generating PDF with Python')\npdf.add_page()\n# Set Font family Courier with font size 28\npdf.set_font(\"Courier\", '', 18)",
    "detail": "by-extension.python.basic",
    "documentation": {}
  },
  {
    "label": "kilometers",
    "kind": 5,
    "importPath": "by-extension.python.basic_example",
    "description": "by-extension.python.basic_example",
    "peekOfCode": "kilometers = float(input(\"Enter value in kilometers: \"))\n# conversion factor\nconv_fac = 0.621371\n# calculate miles\nmiles = kilometers * conv_fac\nprint(\"%0.2f kilometers is equal to %0.2f miles\" % (kilometers, miles))",
    "detail": "by-extension.python.basic_example",
    "documentation": {}
  },
  {
    "label": "conv_fac",
    "kind": 5,
    "importPath": "by-extension.python.basic_example",
    "description": "by-extension.python.basic_example",
    "peekOfCode": "conv_fac = 0.621371\n# calculate miles\nmiles = kilometers * conv_fac\nprint(\"%0.2f kilometers is equal to %0.2f miles\" % (kilometers, miles))",
    "detail": "by-extension.python.basic_example",
    "documentation": {}
  },
  {
    "label": "miles",
    "kind": 5,
    "importPath": "by-extension.python.basic_example",
    "description": "by-extension.python.basic_example",
    "peekOfCode": "miles = kilometers * conv_fac\nprint(\"%0.2f kilometers is equal to %0.2f miles\" % (kilometers, miles))",
    "detail": "by-extension.python.basic_example",
    "documentation": {}
  },
  {
    "label": "batch_rename",
    "kind": 2,
    "importPath": "by-extension.python.batch_file_rename",
    "description": "by-extension.python.batch_file_rename",
    "peekOfCode": "def batch_rename(work_dir, old_ext, new_ext):\n    \"\"\"\n    This will batch rename a group of files in a given directory,\n    once you pass the current and new extensions\n    \"\"\"\n    # files = os.listdir(work_dir)\n    for filename in os.listdir(work_dir):\n        # Get the file extension\n        split_file = os.path.splitext(filename)\n        # Unpack tuple element",
    "detail": "by-extension.python.batch_file_rename",
    "documentation": {}
  },
  {
    "label": "get_parser",
    "kind": 2,
    "importPath": "by-extension.python.batch_file_rename",
    "description": "by-extension.python.batch_file_rename",
    "peekOfCode": "def get_parser():\n    parser = argparse.ArgumentParser(description='change extension of files in a working directory')\n    parser.add_argument('work_dir', metavar='WORK_DIR', type=str, nargs=1,\n                        help='the directory where to change extension')\n    parser.add_argument('old_ext', metavar='OLD_EXT', type=str, nargs=1, help='old extension')\n    parser.add_argument('new_ext', metavar='NEW_EXT', type=str, nargs=1, help='new extension')\n    return parser\ndef main():\n    \"\"\"\n    This will be called if the script is directly invoked.",
    "detail": "by-extension.python.batch_file_rename",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "by-extension.python.batch_file_rename",
    "description": "by-extension.python.batch_file_rename",
    "peekOfCode": "def main():\n    \"\"\"\n    This will be called if the script is directly invoked.\n    \"\"\"\n    # adding command line argument\n    parser = get_parser()\n    args = vars(parser.parse_args())\n    # Set the variable work_dir with the first argument passed\n    work_dir = args['work_dir'][0]\n    # Set the variable old_ext with the second argument passed",
    "detail": "by-extension.python.batch_file_rename",
    "documentation": {}
  },
  {
    "label": "__author__",
    "kind": 5,
    "importPath": "by-extension.python.batch_file_rename",
    "description": "by-extension.python.batch_file_rename",
    "peekOfCode": "__author__ = 'Craig Richards'\n__version__ = '1.0'\nimport argparse\nimport os\ndef batch_rename(work_dir, old_ext, new_ext):\n    \"\"\"\n    This will batch rename a group of files in a given directory,\n    once you pass the current and new extensions\n    \"\"\"\n    # files = os.listdir(work_dir)",
    "detail": "by-extension.python.batch_file_rename",
    "documentation": {}
  },
  {
    "label": "__version__",
    "kind": 5,
    "importPath": "by-extension.python.batch_file_rename",
    "description": "by-extension.python.batch_file_rename",
    "peekOfCode": "__version__ = '1.0'\nimport argparse\nimport os\ndef batch_rename(work_dir, old_ext, new_ext):\n    \"\"\"\n    This will batch rename a group of files in a given directory,\n    once you pass the current and new extensions\n    \"\"\"\n    # files = os.listdir(work_dir)\n    for filename in os.listdir(work_dir):",
    "detail": "by-extension.python.batch_file_rename",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "by-extension.python.battleplayer",
    "description": "by-extension.python.battleplayer",
    "peekOfCode": "def main(args):\n    cmd = args['--server_command']\n    sizex, sizey = [int(i) for i in args['--size'].split(',')]\n    delay = float(args['--delay'])\n    if '--size' not in cmd:\n        cmd += f\" --size={sizex},{sizey}\"\n    smart = args['--smart']\n    if not cmd: return 1\n    pipe = Popen(cmd.split(' '), stdout=PIPE, stdin=PIPE, bufsize=1, close_fds=ON_POSIX, universal_newlines=True)\n    child_stdin, child_stdout = pipe.stdin, pipe.stdout",
    "detail": "by-extension.python.battleplayer",
    "documentation": {}
  },
  {
    "label": "__author__",
    "kind": 5,
    "importPath": "by-extension.python.battleplayer",
    "description": "by-extension.python.battleplayer",
    "peekOfCode": "__author__ = \"Lilian Besson\"\n__name_of_app__ = \"Battle Client\"\n__version__ = \"0.1\"\nimport sys\nfrom collections import defaultdict\nfrom time import sleep\nfrom random import choice\nfrom docopt import docopt\nimport numpy as np\n# https://stackoverflow.com/a/4896288/5889533",
    "detail": "by-extension.python.battleplayer",
    "documentation": {}
  },
  {
    "label": "__name_of_app__",
    "kind": 5,
    "importPath": "by-extension.python.battleplayer",
    "description": "by-extension.python.battleplayer",
    "peekOfCode": "__name_of_app__ = \"Battle Client\"\n__version__ = \"0.1\"\nimport sys\nfrom collections import defaultdict\nfrom time import sleep\nfrom random import choice\nfrom docopt import docopt\nimport numpy as np\n# https://stackoverflow.com/a/4896288/5889533\nfrom subprocess import PIPE, Popen",
    "detail": "by-extension.python.battleplayer",
    "documentation": {}
  },
  {
    "label": "__version__",
    "kind": 5,
    "importPath": "by-extension.python.battleplayer",
    "description": "by-extension.python.battleplayer",
    "peekOfCode": "__version__ = \"0.1\"\nimport sys\nfrom collections import defaultdict\nfrom time import sleep\nfrom random import choice\nfrom docopt import docopt\nimport numpy as np\n# https://stackoverflow.com/a/4896288/5889533\nfrom subprocess import PIPE, Popen\nON_POSIX = 'posix' in sys.builtin_module_names",
    "detail": "by-extension.python.battleplayer",
    "documentation": {}
  },
  {
    "label": "ON_POSIX",
    "kind": 5,
    "importPath": "by-extension.python.battleplayer",
    "description": "by-extension.python.battleplayer",
    "peekOfCode": "ON_POSIX = 'posix' in sys.builtin_module_names\nfrom battleserver import ships, DEFAULT_X, DEFAULT_Y\nlength_of_ships = defaultdict(lambda: min(ships.values()))\nlength_of_ships.update({k.lower(): v for k,v in ships.items()})\n# --- Documentation\ndocumentation = f\"\"\"{__name_of_app__}.\nUsage:\n    battleplayer.py [--delay=<t>] [--smart] [--size=<xy>] [--server_command=<cmd>]\n    battleplayer.py (-h | --help)\n    battleplayer.py --version",
    "detail": "by-extension.python.battleplayer",
    "documentation": {}
  },
  {
    "label": "length_of_ships",
    "kind": 5,
    "importPath": "by-extension.python.battleplayer",
    "description": "by-extension.python.battleplayer",
    "peekOfCode": "length_of_ships = defaultdict(lambda: min(ships.values()))\nlength_of_ships.update({k.lower(): v for k,v in ships.items()})\n# --- Documentation\ndocumentation = f\"\"\"{__name_of_app__}.\nUsage:\n    battleplayer.py [--delay=<t>] [--smart] [--size=<xy>] [--server_command=<cmd>]\n    battleplayer.py (-h | --help)\n    battleplayer.py --version\nOptions:\n    -h --help       Show this screen.",
    "detail": "by-extension.python.battleplayer",
    "documentation": {}
  },
  {
    "label": "documentation",
    "kind": 5,
    "importPath": "by-extension.python.battleplayer",
    "description": "by-extension.python.battleplayer",
    "peekOfCode": "documentation = f\"\"\"{__name_of_app__}.\nUsage:\n    battleplayer.py [--delay=<t>] [--smart] [--size=<xy>] [--server_command=<cmd>]\n    battleplayer.py (-h | --help)\n    battleplayer.py --version\nOptions:\n    -h --help       Show this screen.\n    --version       Show version.\n    --server_command=<cmd>  Play against a server launched by 'cmd' [default: ./battleserver.py --random --play].\n    --size=<xy>     Set size of the board [default: {DEFAULT_X},{DEFAULT_Y}].",
    "detail": "by-extension.python.battleplayer",
    "documentation": {}
  },
  {
    "label": "Board",
    "kind": 6,
    "importPath": "by-extension.python.battleserver",
    "description": "by-extension.python.battleserver",
    "peekOfCode": "class Board(object):\n    def __init__(self, x=DEFAULT_X, y=DEFAULT_Y):\n        self.x = y\n        self.y = x\n        self.board = np.zeros((x, y), dtype=np.uint8)\n    def __getitem__(self, *args, **kwargs): return self.board.__getitem__(*args, **kwargs)\n    def __setitem__(self, *args, **kwargs): return self.board.__setitem__(*args, **kwargs)\n    def is_empty(self):\n        return np.all(self.board == 0)\n    def get_ship(self, x, y):",
    "detail": "by-extension.python.battleserver",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "by-extension.python.battleserver",
    "description": "by-extension.python.battleserver",
    "peekOfCode": "def main(args):\n    # pprint(args)  # DEBUG\n    sizex, sizey = [int(i) for i in args['--size'].split(',')]\n    if min(sizex, sizey) < max_length:\n        print(f\"Error: <xy> both must be >= {max_length}.\")\n        return 1\n    board = Board(x=sizex, y=sizey)\n    for name in ships.keys():\n        if args[f'--{name.lower()}']:\n            if args[f'--{name.lower()}'] == 'r' or args['--random']:",
    "detail": "by-extension.python.battleserver",
    "documentation": {}
  },
  {
    "label": "__author__",
    "kind": 5,
    "importPath": "by-extension.python.battleserver",
    "description": "by-extension.python.battleserver",
    "peekOfCode": "__author__ = \"Lilian Besson\"\n__name_of_app__ = \"Battle Server\"\n__version__ = \"0.1\"\nimport sys\nfrom string import ascii_uppercase\nfrom collections import OrderedDict\nfrom pprint import pprint\nfrom docopt import docopt\nimport numpy as np\n# --- Ships",
    "detail": "by-extension.python.battleserver",
    "documentation": {}
  },
  {
    "label": "__name_of_app__",
    "kind": 5,
    "importPath": "by-extension.python.battleserver",
    "description": "by-extension.python.battleserver",
    "peekOfCode": "__name_of_app__ = \"Battle Server\"\n__version__ = \"0.1\"\nimport sys\nfrom string import ascii_uppercase\nfrom collections import OrderedDict\nfrom pprint import pprint\nfrom docopt import docopt\nimport numpy as np\n# --- Ships\nDEFAULT_X = DEFAULT_Y = 5",
    "detail": "by-extension.python.battleserver",
    "documentation": {}
  },
  {
    "label": "__version__",
    "kind": 5,
    "importPath": "by-extension.python.battleserver",
    "description": "by-extension.python.battleserver",
    "peekOfCode": "__version__ = \"0.1\"\nimport sys\nfrom string import ascii_uppercase\nfrom collections import OrderedDict\nfrom pprint import pprint\nfrom docopt import docopt\nimport numpy as np\n# --- Ships\nDEFAULT_X = DEFAULT_Y = 5\nships = OrderedDict({",
    "detail": "by-extension.python.battleserver",
    "documentation": {}
  },
  {
    "label": "DEFAULT_X",
    "kind": 5,
    "importPath": "by-extension.python.battleserver",
    "description": "by-extension.python.battleserver",
    "peekOfCode": "DEFAULT_X = DEFAULT_Y = 5\nships = OrderedDict({\n    \"Carrier\": 5,\n    \"Battleship\": 4,\n    \"cRuiser\": 3,\n    \"Submarine\": 3,\n    \"Destroyer\": 2,\n})\nmax_length = max(l for l in ships.values())\nsymbol_of_ship = OrderedDict({",
    "detail": "by-extension.python.battleserver",
    "documentation": {}
  },
  {
    "label": "ships",
    "kind": 5,
    "importPath": "by-extension.python.battleserver",
    "description": "by-extension.python.battleserver",
    "peekOfCode": "ships = OrderedDict({\n    \"Carrier\": 5,\n    \"Battleship\": 4,\n    \"cRuiser\": 3,\n    \"Submarine\": 3,\n    \"Destroyer\": 2,\n})\nmax_length = max(l for l in ships.values())\nsymbol_of_ship = OrderedDict({\n    name: str.lower(list(set(name).intersection(ascii_uppercase))[0])",
    "detail": "by-extension.python.battleserver",
    "documentation": {}
  },
  {
    "label": "max_length",
    "kind": 5,
    "importPath": "by-extension.python.battleserver",
    "description": "by-extension.python.battleserver",
    "peekOfCode": "max_length = max(l for l in ships.values())\nsymbol_of_ship = OrderedDict({\n    name: str.lower(list(set(name).intersection(ascii_uppercase))[0])\n    for name in ships.keys()\n})\nship_of_symbol = OrderedDict({v: k for k, v in symbol_of_ship.items()})\n# --- Documentation\ndocumentation = f\"\"\"{__name_of_app__}.\nUsage:\n    battleserver.py {' '.join([f'[--{name.lower()}=<x,y,dir>]' for name in ships.keys()])} [--random] [--size=<xy>] (--show | --play)",
    "detail": "by-extension.python.battleserver",
    "documentation": {}
  },
  {
    "label": "symbol_of_ship",
    "kind": 5,
    "importPath": "by-extension.python.battleserver",
    "description": "by-extension.python.battleserver",
    "peekOfCode": "symbol_of_ship = OrderedDict({\n    name: str.lower(list(set(name).intersection(ascii_uppercase))[0])\n    for name in ships.keys()\n})\nship_of_symbol = OrderedDict({v: k for k, v in symbol_of_ship.items()})\n# --- Documentation\ndocumentation = f\"\"\"{__name_of_app__}.\nUsage:\n    battleserver.py {' '.join([f'[--{name.lower()}=<x,y,dir>]' for name in ships.keys()])} [--random] [--size=<xy>] (--show | --play)\n    battleserver.py (-h | --help)",
    "detail": "by-extension.python.battleserver",
    "documentation": {}
  },
  {
    "label": "ship_of_symbol",
    "kind": 5,
    "importPath": "by-extension.python.battleserver",
    "description": "by-extension.python.battleserver",
    "peekOfCode": "ship_of_symbol = OrderedDict({v: k for k, v in symbol_of_ship.items()})\n# --- Documentation\ndocumentation = f\"\"\"{__name_of_app__}.\nUsage:\n    battleserver.py {' '.join([f'[--{name.lower()}=<x,y,dir>]' for name in ships.keys()])} [--random] [--size=<xy>] (--show | --play)\n    battleserver.py (-h | --help)\n    battleserver.py --version\nOptions:\n    -h --help       Show this screen.\n    --version       Show version.",
    "detail": "by-extension.python.battleserver",
    "documentation": {}
  },
  {
    "label": "documentation",
    "kind": 5,
    "importPath": "by-extension.python.battleserver",
    "description": "by-extension.python.battleserver",
    "peekOfCode": "documentation = f\"\"\"{__name_of_app__}.\nUsage:\n    battleserver.py {' '.join([f'[--{name.lower()}=<x,y,dir>]' for name in ships.keys()])} [--random] [--size=<xy>] (--show | --play)\n    battleserver.py (-h | --help)\n    battleserver.py --version\nOptions:\n    -h --help       Show this screen.\n    --version       Show version.\n    --show          Print the board.\n    --play          Let you play a \"one player\" game interactively.",
    "detail": "by-extension.python.battleserver",
    "documentation": {}
  },
  {
    "label": "symbol_of_uint8",
    "kind": 5,
    "importPath": "by-extension.python.battleserver",
    "description": "by-extension.python.battleserver",
    "peekOfCode": "symbol_of_uint8 = OrderedDict({0: '-'})\nsymbol_of_uint8.update({\n    i+1: symbol_of_ship[name]\n    for i, name in enumerate(ships.keys())\n})\nuint8_of_symbol = OrderedDict({v: k for k, v in symbol_of_uint8.items()})\nclass Board(object):\n    def __init__(self, x=DEFAULT_X, y=DEFAULT_Y):\n        self.x = y\n        self.y = x",
    "detail": "by-extension.python.battleserver",
    "documentation": {}
  },
  {
    "label": "uint8_of_symbol",
    "kind": 5,
    "importPath": "by-extension.python.battleserver",
    "description": "by-extension.python.battleserver",
    "peekOfCode": "uint8_of_symbol = OrderedDict({v: k for k, v in symbol_of_uint8.items()})\nclass Board(object):\n    def __init__(self, x=DEFAULT_X, y=DEFAULT_Y):\n        self.x = y\n        self.y = x\n        self.board = np.zeros((x, y), dtype=np.uint8)\n    def __getitem__(self, *args, **kwargs): return self.board.__getitem__(*args, **kwargs)\n    def __setitem__(self, *args, **kwargs): return self.board.__setitem__(*args, **kwargs)\n    def is_empty(self):\n        return np.all(self.board == 0)",
    "detail": "by-extension.python.battleserver",
    "documentation": {}
  },
  {
    "label": "bellman_ford",
    "kind": 2,
    "importPath": "by-extension.python.bellman_ford",
    "description": "by-extension.python.bellman_ford",
    "peekOfCode": "def bellman_ford(graph, source):\n    weight = {}\n    pre_node = {}\n    initialize_single_source(graph, source, weight, pre_node)\n    for i in range(1, len(graph)):\n        for node in graph:\n            for adjacent in graph[node]:\n                if weight[adjacent] > weight[node] + graph[node][adjacent]:\n                    weight[adjacent] = weight[node] + graph[node][adjacent]\n                    pre_node[adjacent] = node",
    "detail": "by-extension.python.bellman_ford",
    "documentation": {}
  },
  {
    "label": "initialize_single_source",
    "kind": 2,
    "importPath": "by-extension.python.bellman_ford",
    "description": "by-extension.python.bellman_ford",
    "peekOfCode": "def initialize_single_source(graph, source, weight, pre_node):\n    for node in graph:\n        weight[node] = float(\"inf\")\n        pre_node[node] = None\n    weight[source] = 0",
    "detail": "by-extension.python.bellman_ford",
    "documentation": {}
  },
  {
    "label": "reverse",
    "kind": 2,
    "importPath": "by-extension.python.best-way",
    "description": "by-extension.python.best-way",
    "peekOfCode": "def reverse(string):\n    string = string[::-1]\n    return string",
    "detail": "by-extension.python.best-way",
    "documentation": {}
  },
  {
    "label": "Entry",
    "kind": 6,
    "importPath": "by-extension.python.bibtex_beautifier",
    "description": "by-extension.python.bibtex_beautifier",
    "peekOfCode": "class Entry(object):\n\tdef __init__(self):\n\t\tself.entry_type = 'UNKNOWN'\n\t\tself.entry_name = ''\n\t\tself.rows = { }\n\tdef ParseFromString(self, text):\n\t\tm = re.match('\\s*@\\s*(\\w+)\\s*({)\\s*', text)\n\t\tif not m:\n\t\t\treturn None\n\t\tself.entry_type = m.group(1)",
    "detail": "by-extension.python.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "Format",
    "kind": 2,
    "importPath": "by-extension.python.bibtex_beautifier",
    "description": "by-extension.python.bibtex_beautifier",
    "peekOfCode": "def Format(text):\n\treturn ' '.join(text.split())\ndef Capitalize(text):\n\tword_start = True\n\ts = ''\n\tfor c in text.lower():\n\t\tif word_start:\n\t\t\tc = c.upper()\n\t\tword_start = not c.isalpha()\n\t\ts = s + c",
    "detail": "by-extension.python.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "Capitalize",
    "kind": 2,
    "importPath": "by-extension.python.bibtex_beautifier",
    "description": "by-extension.python.bibtex_beautifier",
    "peekOfCode": "def Capitalize(text):\n\tword_start = True\n\ts = ''\n\tfor c in text.lower():\n\t\tif word_start:\n\t\t\tc = c.upper()\n\t\tword_start = not c.isalpha()\n\t\ts = s + c\n\treturn s\ndef FindMatchingParenthesis(text):",
    "detail": "by-extension.python.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "FindMatchingParenthesis",
    "kind": 2,
    "importPath": "by-extension.python.bibtex_beautifier",
    "description": "by-extension.python.bibtex_beautifier",
    "peekOfCode": "def FindMatchingParenthesis(text):\n\tnesting = 1\n\tend = 0\n\tfor i in range(1, len(text)):\n\t\tif text[i] == '{':\n\t\t\tnesting = nesting + 1\n\t\telif text[i] == '}':\n\t\t\tnesting = nesting - 1\n\t\tend = i\n\t\tif nesting == 0:",
    "detail": "by-extension.python.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "RemoveBraces",
    "kind": 2,
    "importPath": "by-extension.python.bibtex_beautifier",
    "description": "by-extension.python.bibtex_beautifier",
    "peekOfCode": "def RemoveBraces(text):\n\tif text[0] == '{':\n\t\t text = text[1:]\n\tif text[-1] == '}':\n\t\t text = text[:-1]\n\treturn text\ndef NormalizeAuthor(text):\n\tparts = text.split(',', 1)\n\tif len(parts) >= 2:\n\t\treturn parts[1].strip() + ' ' + parts[0].strip()",
    "detail": "by-extension.python.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "NormalizeAuthor",
    "kind": 2,
    "importPath": "by-extension.python.bibtex_beautifier",
    "description": "by-extension.python.bibtex_beautifier",
    "peekOfCode": "def NormalizeAuthor(text):\n\tparts = text.split(',', 1)\n\tif len(parts) >= 2:\n\t\treturn parts[1].strip() + ' ' + parts[0].strip()\n\treturn parts[0].strip()\ndef NormalizeAuthors(text):\n\tauthors = text.split(' and ')\n\treturn ' and '.join([NormalizeAuthor(author) for author in authors])\ndef NormalizePages(text):\n\tparts = text.split('--', 1)",
    "detail": "by-extension.python.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "NormalizeAuthors",
    "kind": 2,
    "importPath": "by-extension.python.bibtex_beautifier",
    "description": "by-extension.python.bibtex_beautifier",
    "peekOfCode": "def NormalizeAuthors(text):\n\tauthors = text.split(' and ')\n\treturn ' and '.join([NormalizeAuthor(author) for author in authors])\ndef NormalizePages(text):\n\tparts = text.split('--', 1)\n\tif not '--' in text:\n\t\tparts = text.split('-', 1)\n\tnormalized = parts[0].strip()\n\tif len(parts) >= 2:\n\t\tnormalized = parts[0].strip() + '--' + parts[1].strip()",
    "detail": "by-extension.python.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "NormalizePages",
    "kind": 2,
    "importPath": "by-extension.python.bibtex_beautifier",
    "description": "by-extension.python.bibtex_beautifier",
    "peekOfCode": "def NormalizePages(text):\n\tparts = text.split('--', 1)\n\tif not '--' in text:\n\t\tparts = text.split('-', 1)\n\tnormalized = parts[0].strip()\n\tif len(parts) >= 2:\n\t\tnormalized = parts[0].strip() + '--' + parts[1].strip()\n\treturn normalized\ndef SafeParseInt(text):\n\ttry:",
    "detail": "by-extension.python.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "SafeParseInt",
    "kind": 2,
    "importPath": "by-extension.python.bibtex_beautifier",
    "description": "by-extension.python.bibtex_beautifier",
    "peekOfCode": "def SafeParseInt(text):\n\ttry:\n        \treturn int(text)\n\texcept ValueError:\n\t\treturn None\ndef NormalizeYear(text):\n\tyear = SafeParseInt(text)\n\tif not year:\n\t\treturn text.strip()\n\tif (year >= 10) and (year <= 99):",
    "detail": "by-extension.python.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "NormalizeYear",
    "kind": 2,
    "importPath": "by-extension.python.bibtex_beautifier",
    "description": "by-extension.python.bibtex_beautifier",
    "peekOfCode": "def NormalizeYear(text):\n\tyear = SafeParseInt(text)\n\tif not year:\n\t\treturn text.strip()\n\tif (year >= 10) and (year <= 99):\n\t\treturn str(1900 + year)\n\treturn str(year)\ndef NormalizeMonth(text):\n\tprefix = text[:3].lower()\n\tif prefix in months:",
    "detail": "by-extension.python.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "NormalizeMonth",
    "kind": 2,
    "importPath": "by-extension.python.bibtex_beautifier",
    "description": "by-extension.python.bibtex_beautifier",
    "peekOfCode": "def NormalizeMonth(text):\n\tprefix = text[:3].lower()\n\tif prefix in months:\n\t\treturn months[prefix]\n\treturn text\n# An entry object\nclass Entry(object):\n\tdef __init__(self):\n\t\tself.entry_type = 'UNKNOWN'\n\t\tself.entry_name = ''",
    "detail": "by-extension.python.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "ParseEntries",
    "kind": 2,
    "importPath": "by-extension.python.bibtex_beautifier",
    "description": "by-extension.python.bibtex_beautifier",
    "peekOfCode": "def ParseEntries(text):\n\tentries = []\n\twhile True:\n\t\te = Entry()\n\t\ttext = e.ParseFromString(text)\n\t\tif not text:\n\t\t\tbreak\n\t\tentries.append(e)\n\treturn entries\ndef SortEntries(entries):",
    "detail": "by-extension.python.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "SortEntries",
    "kind": 2,
    "importPath": "by-extension.python.bibtex_beautifier",
    "description": "by-extension.python.bibtex_beautifier",
    "peekOfCode": "def SortEntries(entries):\n\tentries.sort(key=lambda e: e.entry_name)\n\tentries.sort(key=lambda e: e.entry_type)\n\tentries.sort(key=lambda e: e.SortKey())\n\treturn entries\ndef ReadFile():\n\tlines = []\n\twith open(sys.argv[1], 'r') as f:\n\t\tfor line in f:\n\t\t\tif line.strip().startswith('%'):",
    "detail": "by-extension.python.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "ReadFile",
    "kind": 2,
    "importPath": "by-extension.python.bibtex_beautifier",
    "description": "by-extension.python.bibtex_beautifier",
    "peekOfCode": "def ReadFile():\n\tlines = []\n\twith open(sys.argv[1], 'r') as f:\n\t\tfor line in f:\n\t\t\tif line.strip().startswith('%'):\n\t\t\t\tprint(line.strip())\n\t\t\telse:\n\t\t\t\tlines.append(line)\n\ttext = '\\n'.join(lines)\n\treturn text",
    "detail": "by-extension.python.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "by-extension.python.bibtex_beautifier",
    "description": "by-extension.python.bibtex_beautifier",
    "peekOfCode": "def main():\n\ttext = ReadFile()\n\tentries = ParseEntries(text)\n\tentries = SortEntries(entries)\n\tfor entry in entries:\n\t\tprint(entry.ToString())\nif __name__ == '__main__':\n    main()",
    "detail": "by-extension.python.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "months",
    "kind": 5,
    "importPath": "by-extension.python.bibtex_beautifier",
    "description": "by-extension.python.bibtex_beautifier",
    "peekOfCode": "months = {\n                'jan'  :  'January',\n                'feb'  :  'February',\n                'mar'  :  'March',\n                'apr'  :  'April',\n                'may'  :  'May',\n                'jun'  :  'June',\n                'jul'  :  'July',\n                'aug'  :  'August',\n                'sep'  :  'September',",
    "detail": "by-extension.python.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\tword_start",
    "kind": 5,
    "importPath": "by-extension.python.bibtex_beautifier",
    "description": "by-extension.python.bibtex_beautifier",
    "peekOfCode": "\tword_start = True\n\ts = ''\n\tfor c in text.lower():\n\t\tif word_start:\n\t\t\tc = c.upper()\n\t\tword_start = not c.isalpha()\n\t\ts = s + c\n\treturn s\ndef FindMatchingParenthesis(text):\n\tnesting = 1",
    "detail": "by-extension.python.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\ts",
    "kind": 5,
    "importPath": "by-extension.python.bibtex_beautifier",
    "description": "by-extension.python.bibtex_beautifier",
    "peekOfCode": "\ts = ''\n\tfor c in text.lower():\n\t\tif word_start:\n\t\t\tc = c.upper()\n\t\tword_start = not c.isalpha()\n\t\ts = s + c\n\treturn s\ndef FindMatchingParenthesis(text):\n\tnesting = 1\n\tend = 0",
    "detail": "by-extension.python.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\t\t\tc",
    "kind": 5,
    "importPath": "by-extension.python.bibtex_beautifier",
    "description": "by-extension.python.bibtex_beautifier",
    "peekOfCode": "\t\t\tc = c.upper()\n\t\tword_start = not c.isalpha()\n\t\ts = s + c\n\treturn s\ndef FindMatchingParenthesis(text):\n\tnesting = 1\n\tend = 0\n\tfor i in range(1, len(text)):\n\t\tif text[i] == '{':\n\t\t\tnesting = nesting + 1",
    "detail": "by-extension.python.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\t\tword_start",
    "kind": 5,
    "importPath": "by-extension.python.bibtex_beautifier",
    "description": "by-extension.python.bibtex_beautifier",
    "peekOfCode": "\t\tword_start = not c.isalpha()\n\t\ts = s + c\n\treturn s\ndef FindMatchingParenthesis(text):\n\tnesting = 1\n\tend = 0\n\tfor i in range(1, len(text)):\n\t\tif text[i] == '{':\n\t\t\tnesting = nesting + 1\n\t\telif text[i] == '}':",
    "detail": "by-extension.python.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\t\ts",
    "kind": 5,
    "importPath": "by-extension.python.bibtex_beautifier",
    "description": "by-extension.python.bibtex_beautifier",
    "peekOfCode": "\t\ts = s + c\n\treturn s\ndef FindMatchingParenthesis(text):\n\tnesting = 1\n\tend = 0\n\tfor i in range(1, len(text)):\n\t\tif text[i] == '{':\n\t\t\tnesting = nesting + 1\n\t\telif text[i] == '}':\n\t\t\tnesting = nesting - 1",
    "detail": "by-extension.python.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\tnesting",
    "kind": 5,
    "importPath": "by-extension.python.bibtex_beautifier",
    "description": "by-extension.python.bibtex_beautifier",
    "peekOfCode": "\tnesting = 1\n\tend = 0\n\tfor i in range(1, len(text)):\n\t\tif text[i] == '{':\n\t\t\tnesting = nesting + 1\n\t\telif text[i] == '}':\n\t\t\tnesting = nesting - 1\n\t\tend = i\n\t\tif nesting == 0:\n\t\t\tbreak",
    "detail": "by-extension.python.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\tend",
    "kind": 5,
    "importPath": "by-extension.python.bibtex_beautifier",
    "description": "by-extension.python.bibtex_beautifier",
    "peekOfCode": "\tend = 0\n\tfor i in range(1, len(text)):\n\t\tif text[i] == '{':\n\t\t\tnesting = nesting + 1\n\t\telif text[i] == '}':\n\t\t\tnesting = nesting - 1\n\t\tend = i\n\t\tif nesting == 0:\n\t\t\tbreak\n\tend = end + 1",
    "detail": "by-extension.python.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\t\t\tnesting",
    "kind": 5,
    "importPath": "by-extension.python.bibtex_beautifier",
    "description": "by-extension.python.bibtex_beautifier",
    "peekOfCode": "\t\t\tnesting = nesting + 1\n\t\telif text[i] == '}':\n\t\t\tnesting = nesting - 1\n\t\tend = i\n\t\tif nesting == 0:\n\t\t\tbreak\n\tend = end + 1\n\treturn (text[:end], text[end:])\ndef RemoveBraces(text):\n\tif text[0] == '{':",
    "detail": "by-extension.python.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\t\t\tnesting",
    "kind": 5,
    "importPath": "by-extension.python.bibtex_beautifier",
    "description": "by-extension.python.bibtex_beautifier",
    "peekOfCode": "\t\t\tnesting = nesting - 1\n\t\tend = i\n\t\tif nesting == 0:\n\t\t\tbreak\n\tend = end + 1\n\treturn (text[:end], text[end:])\ndef RemoveBraces(text):\n\tif text[0] == '{':\n\t\t text = text[1:]\n\tif text[-1] == '}':",
    "detail": "by-extension.python.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\t\tend",
    "kind": 5,
    "importPath": "by-extension.python.bibtex_beautifier",
    "description": "by-extension.python.bibtex_beautifier",
    "peekOfCode": "\t\tend = i\n\t\tif nesting == 0:\n\t\t\tbreak\n\tend = end + 1\n\treturn (text[:end], text[end:])\ndef RemoveBraces(text):\n\tif text[0] == '{':\n\t\t text = text[1:]\n\tif text[-1] == '}':\n\t\t text = text[:-1]",
    "detail": "by-extension.python.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\tend",
    "kind": 5,
    "importPath": "by-extension.python.bibtex_beautifier",
    "description": "by-extension.python.bibtex_beautifier",
    "peekOfCode": "\tend = end + 1\n\treturn (text[:end], text[end:])\ndef RemoveBraces(text):\n\tif text[0] == '{':\n\t\t text = text[1:]\n\tif text[-1] == '}':\n\t\t text = text[:-1]\n\treturn text\ndef NormalizeAuthor(text):\n\tparts = text.split(',', 1)",
    "detail": "by-extension.python.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\tparts",
    "kind": 5,
    "importPath": "by-extension.python.bibtex_beautifier",
    "description": "by-extension.python.bibtex_beautifier",
    "peekOfCode": "\tparts = text.split(',', 1)\n\tif len(parts) >= 2:\n\t\treturn parts[1].strip() + ' ' + parts[0].strip()\n\treturn parts[0].strip()\ndef NormalizeAuthors(text):\n\tauthors = text.split(' and ')\n\treturn ' and '.join([NormalizeAuthor(author) for author in authors])\ndef NormalizePages(text):\n\tparts = text.split('--', 1)\n\tif not '--' in text:",
    "detail": "by-extension.python.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\tauthors",
    "kind": 5,
    "importPath": "by-extension.python.bibtex_beautifier",
    "description": "by-extension.python.bibtex_beautifier",
    "peekOfCode": "\tauthors = text.split(' and ')\n\treturn ' and '.join([NormalizeAuthor(author) for author in authors])\ndef NormalizePages(text):\n\tparts = text.split('--', 1)\n\tif not '--' in text:\n\t\tparts = text.split('-', 1)\n\tnormalized = parts[0].strip()\n\tif len(parts) >= 2:\n\t\tnormalized = parts[0].strip() + '--' + parts[1].strip()\n\treturn normalized",
    "detail": "by-extension.python.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\tparts",
    "kind": 5,
    "importPath": "by-extension.python.bibtex_beautifier",
    "description": "by-extension.python.bibtex_beautifier",
    "peekOfCode": "\tparts = text.split('--', 1)\n\tif not '--' in text:\n\t\tparts = text.split('-', 1)\n\tnormalized = parts[0].strip()\n\tif len(parts) >= 2:\n\t\tnormalized = parts[0].strip() + '--' + parts[1].strip()\n\treturn normalized\ndef SafeParseInt(text):\n\ttry:\n        \treturn int(text)",
    "detail": "by-extension.python.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\t\tparts",
    "kind": 5,
    "importPath": "by-extension.python.bibtex_beautifier",
    "description": "by-extension.python.bibtex_beautifier",
    "peekOfCode": "\t\tparts = text.split('-', 1)\n\tnormalized = parts[0].strip()\n\tif len(parts) >= 2:\n\t\tnormalized = parts[0].strip() + '--' + parts[1].strip()\n\treturn normalized\ndef SafeParseInt(text):\n\ttry:\n        \treturn int(text)\n\texcept ValueError:\n\t\treturn None",
    "detail": "by-extension.python.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\tnormalized",
    "kind": 5,
    "importPath": "by-extension.python.bibtex_beautifier",
    "description": "by-extension.python.bibtex_beautifier",
    "peekOfCode": "\tnormalized = parts[0].strip()\n\tif len(parts) >= 2:\n\t\tnormalized = parts[0].strip() + '--' + parts[1].strip()\n\treturn normalized\ndef SafeParseInt(text):\n\ttry:\n        \treturn int(text)\n\texcept ValueError:\n\t\treturn None\ndef NormalizeYear(text):",
    "detail": "by-extension.python.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\t\tnormalized",
    "kind": 5,
    "importPath": "by-extension.python.bibtex_beautifier",
    "description": "by-extension.python.bibtex_beautifier",
    "peekOfCode": "\t\tnormalized = parts[0].strip() + '--' + parts[1].strip()\n\treturn normalized\ndef SafeParseInt(text):\n\ttry:\n        \treturn int(text)\n\texcept ValueError:\n\t\treturn None\ndef NormalizeYear(text):\n\tyear = SafeParseInt(text)\n\tif not year:",
    "detail": "by-extension.python.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\tyear",
    "kind": 5,
    "importPath": "by-extension.python.bibtex_beautifier",
    "description": "by-extension.python.bibtex_beautifier",
    "peekOfCode": "\tyear = SafeParseInt(text)\n\tif not year:\n\t\treturn text.strip()\n\tif (year >= 10) and (year <= 99):\n\t\treturn str(1900 + year)\n\treturn str(year)\ndef NormalizeMonth(text):\n\tprefix = text[:3].lower()\n\tif prefix in months:\n\t\treturn months[prefix]",
    "detail": "by-extension.python.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\tprefix",
    "kind": 5,
    "importPath": "by-extension.python.bibtex_beautifier",
    "description": "by-extension.python.bibtex_beautifier",
    "peekOfCode": "\tprefix = text[:3].lower()\n\tif prefix in months:\n\t\treturn months[prefix]\n\treturn text\n# An entry object\nclass Entry(object):\n\tdef __init__(self):\n\t\tself.entry_type = 'UNKNOWN'\n\t\tself.entry_name = ''\n\t\tself.rows = { }",
    "detail": "by-extension.python.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\t\tself.entry_type",
    "kind": 5,
    "importPath": "by-extension.python.bibtex_beautifier",
    "description": "by-extension.python.bibtex_beautifier",
    "peekOfCode": "\t\tself.entry_type = 'UNKNOWN'\n\t\tself.entry_name = ''\n\t\tself.rows = { }\n\tdef ParseFromString(self, text):\n\t\tm = re.match('\\s*@\\s*(\\w+)\\s*({)\\s*', text)\n\t\tif not m:\n\t\t\treturn None\n\t\tself.entry_type = m.group(1)\n\t\tself.entry_type = self.NormalizedEntryType()\n\t\ttext = text[m.end(2):]",
    "detail": "by-extension.python.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\t\tself.entry_name",
    "kind": 5,
    "importPath": "by-extension.python.bibtex_beautifier",
    "description": "by-extension.python.bibtex_beautifier",
    "peekOfCode": "\t\tself.entry_name = ''\n\t\tself.rows = { }\n\tdef ParseFromString(self, text):\n\t\tm = re.match('\\s*@\\s*(\\w+)\\s*({)\\s*', text)\n\t\tif not m:\n\t\t\treturn None\n\t\tself.entry_type = m.group(1)\n\t\tself.entry_type = self.NormalizedEntryType()\n\t\ttext = text[m.end(2):]\n\t\ttext, rest = FindMatchingParenthesis(text)",
    "detail": "by-extension.python.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\t\tself.rows",
    "kind": 5,
    "importPath": "by-extension.python.bibtex_beautifier",
    "description": "by-extension.python.bibtex_beautifier",
    "peekOfCode": "\t\tself.rows = { }\n\tdef ParseFromString(self, text):\n\t\tm = re.match('\\s*@\\s*(\\w+)\\s*({)\\s*', text)\n\t\tif not m:\n\t\t\treturn None\n\t\tself.entry_type = m.group(1)\n\t\tself.entry_type = self.NormalizedEntryType()\n\t\ttext = text[m.end(2):]\n\t\ttext, rest = FindMatchingParenthesis(text)\n\t\tm = re.match('\\s*([^\\s]+)\\s*,\\s*', text)",
    "detail": "by-extension.python.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\t\tm",
    "kind": 5,
    "importPath": "by-extension.python.bibtex_beautifier",
    "description": "by-extension.python.bibtex_beautifier",
    "peekOfCode": "\t\tm = re.match('\\s*@\\s*(\\w+)\\s*({)\\s*', text)\n\t\tif not m:\n\t\t\treturn None\n\t\tself.entry_type = m.group(1)\n\t\tself.entry_type = self.NormalizedEntryType()\n\t\ttext = text[m.end(2):]\n\t\ttext, rest = FindMatchingParenthesis(text)\n\t\tm = re.match('\\s*([^\\s]+)\\s*,\\s*', text)\n\t\tif m:\n\t\t\tself.entry_name = m.group(1)",
    "detail": "by-extension.python.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\t\tself.entry_type",
    "kind": 5,
    "importPath": "by-extension.python.bibtex_beautifier",
    "description": "by-extension.python.bibtex_beautifier",
    "peekOfCode": "\t\tself.entry_type = m.group(1)\n\t\tself.entry_type = self.NormalizedEntryType()\n\t\ttext = text[m.end(2):]\n\t\ttext, rest = FindMatchingParenthesis(text)\n\t\tm = re.match('\\s*([^\\s]+)\\s*,\\s*', text)\n\t\tif m:\n\t\t\tself.entry_name = m.group(1)\n\t\t\ttext = text[m.end():]\n\t\twhile text:\n\t\t\ttext = self.ParseRow(text)",
    "detail": "by-extension.python.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\t\tself.entry_type",
    "kind": 5,
    "importPath": "by-extension.python.bibtex_beautifier",
    "description": "by-extension.python.bibtex_beautifier",
    "peekOfCode": "\t\tself.entry_type = self.NormalizedEntryType()\n\t\ttext = text[m.end(2):]\n\t\ttext, rest = FindMatchingParenthesis(text)\n\t\tm = re.match('\\s*([^\\s]+)\\s*,\\s*', text)\n\t\tif m:\n\t\t\tself.entry_name = m.group(1)\n\t\t\ttext = text[m.end():]\n\t\twhile text:\n\t\t\ttext = self.ParseRow(text)\n\t\treturn rest",
    "detail": "by-extension.python.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\t\ttext",
    "kind": 5,
    "importPath": "by-extension.python.bibtex_beautifier",
    "description": "by-extension.python.bibtex_beautifier",
    "peekOfCode": "\t\ttext = text[m.end(2):]\n\t\ttext, rest = FindMatchingParenthesis(text)\n\t\tm = re.match('\\s*([^\\s]+)\\s*,\\s*', text)\n\t\tif m:\n\t\t\tself.entry_name = m.group(1)\n\t\t\ttext = text[m.end():]\n\t\twhile text:\n\t\t\ttext = self.ParseRow(text)\n\t\treturn rest\n\tdef ParseRow(self, text):",
    "detail": "by-extension.python.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\t\tm",
    "kind": 5,
    "importPath": "by-extension.python.bibtex_beautifier",
    "description": "by-extension.python.bibtex_beautifier",
    "peekOfCode": "\t\tm = re.match('\\s*([^\\s]+)\\s*,\\s*', text)\n\t\tif m:\n\t\t\tself.entry_name = m.group(1)\n\t\t\ttext = text[m.end():]\n\t\twhile text:\n\t\t\ttext = self.ParseRow(text)\n\t\treturn rest\n\tdef ParseRow(self, text):\n\t\tm = re.match('\\s*,?\\s*([\\w-]+)\\s*=\\s*', text)\n\t\tif not m:",
    "detail": "by-extension.python.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\t\t\tself.entry_name",
    "kind": 5,
    "importPath": "by-extension.python.bibtex_beautifier",
    "description": "by-extension.python.bibtex_beautifier",
    "peekOfCode": "\t\t\tself.entry_name = m.group(1)\n\t\t\ttext = text[m.end():]\n\t\twhile text:\n\t\t\ttext = self.ParseRow(text)\n\t\treturn rest\n\tdef ParseRow(self, text):\n\t\tm = re.match('\\s*,?\\s*([\\w-]+)\\s*=\\s*', text)\n\t\tif not m:\n\t\t\treturn None\n\t\tkey = m.group(1)",
    "detail": "by-extension.python.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\t\t\ttext",
    "kind": 5,
    "importPath": "by-extension.python.bibtex_beautifier",
    "description": "by-extension.python.bibtex_beautifier",
    "peekOfCode": "\t\t\ttext = text[m.end():]\n\t\twhile text:\n\t\t\ttext = self.ParseRow(text)\n\t\treturn rest\n\tdef ParseRow(self, text):\n\t\tm = re.match('\\s*,?\\s*([\\w-]+)\\s*=\\s*', text)\n\t\tif not m:\n\t\t\treturn None\n\t\tkey = m.group(1)\n\t\tif not self.entry_type == 'String':",
    "detail": "by-extension.python.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\t\t\ttext",
    "kind": 5,
    "importPath": "by-extension.python.bibtex_beautifier",
    "description": "by-extension.python.bibtex_beautifier",
    "peekOfCode": "\t\t\ttext = self.ParseRow(text)\n\t\treturn rest\n\tdef ParseRow(self, text):\n\t\tm = re.match('\\s*,?\\s*([\\w-]+)\\s*=\\s*', text)\n\t\tif not m:\n\t\t\treturn None\n\t\tkey = m.group(1)\n\t\tif not self.entry_type == 'String':\n\t\t\tkey = Capitalize(key)\n\t\ttext = text[m.end():]",
    "detail": "by-extension.python.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\t\tm",
    "kind": 5,
    "importPath": "by-extension.python.bibtex_beautifier",
    "description": "by-extension.python.bibtex_beautifier",
    "peekOfCode": "\t\tm = re.match('\\s*,?\\s*([\\w-]+)\\s*=\\s*', text)\n\t\tif not m:\n\t\t\treturn None\n\t\tkey = m.group(1)\n\t\tif not self.entry_type == 'String':\n\t\t\tkey = Capitalize(key)\n\t\ttext = text[m.end():]\n\t\tvalue = ''\n\t\tif text[0] == '{':\n\t\t\tvalue, rest = FindMatchingParenthesis(text)",
    "detail": "by-extension.python.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\t\tkey",
    "kind": 5,
    "importPath": "by-extension.python.bibtex_beautifier",
    "description": "by-extension.python.bibtex_beautifier",
    "peekOfCode": "\t\tkey = m.group(1)\n\t\tif not self.entry_type == 'String':\n\t\t\tkey = Capitalize(key)\n\t\ttext = text[m.end():]\n\t\tvalue = ''\n\t\tif text[0] == '{':\n\t\t\tvalue, rest = FindMatchingParenthesis(text)\n\t\t\tvalue = RemoveBraces(value)\n\t\telif text[0] == '\\\"':\n\t\t\tm = re.match('^\"([^\\\"]+)\"\\s*,?\\s*', text)",
    "detail": "by-extension.python.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\t\t\tkey",
    "kind": 5,
    "importPath": "by-extension.python.bibtex_beautifier",
    "description": "by-extension.python.bibtex_beautifier",
    "peekOfCode": "\t\t\tkey = Capitalize(key)\n\t\ttext = text[m.end():]\n\t\tvalue = ''\n\t\tif text[0] == '{':\n\t\t\tvalue, rest = FindMatchingParenthesis(text)\n\t\t\tvalue = RemoveBraces(value)\n\t\telif text[0] == '\\\"':\n\t\t\tm = re.match('^\"([^\\\"]+)\"\\s*,?\\s*', text)\n\t\t\tvalue = m.group(1)\n\t\t\trest = text[m.end():]",
    "detail": "by-extension.python.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\t\ttext",
    "kind": 5,
    "importPath": "by-extension.python.bibtex_beautifier",
    "description": "by-extension.python.bibtex_beautifier",
    "peekOfCode": "\t\ttext = text[m.end():]\n\t\tvalue = ''\n\t\tif text[0] == '{':\n\t\t\tvalue, rest = FindMatchingParenthesis(text)\n\t\t\tvalue = RemoveBraces(value)\n\t\telif text[0] == '\\\"':\n\t\t\tm = re.match('^\"([^\\\"]+)\"\\s*,?\\s*', text)\n\t\t\tvalue = m.group(1)\n\t\t\trest = text[m.end():]\n\t\telse:",
    "detail": "by-extension.python.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\t\tvalue",
    "kind": 5,
    "importPath": "by-extension.python.bibtex_beautifier",
    "description": "by-extension.python.bibtex_beautifier",
    "peekOfCode": "\t\tvalue = ''\n\t\tif text[0] == '{':\n\t\t\tvalue, rest = FindMatchingParenthesis(text)\n\t\t\tvalue = RemoveBraces(value)\n\t\telif text[0] == '\\\"':\n\t\t\tm = re.match('^\"([^\\\"]+)\"\\s*,?\\s*', text)\n\t\t\tvalue = m.group(1)\n\t\t\trest = text[m.end():]\n\t\telse:\n\t\t\tm = re.match('\\s*(\\w+)\\s*,?\\s*', text)",
    "detail": "by-extension.python.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\t\t\tvalue",
    "kind": 5,
    "importPath": "by-extension.python.bibtex_beautifier",
    "description": "by-extension.python.bibtex_beautifier",
    "peekOfCode": "\t\t\tvalue = RemoveBraces(value)\n\t\telif text[0] == '\\\"':\n\t\t\tm = re.match('^\"([^\\\"]+)\"\\s*,?\\s*', text)\n\t\t\tvalue = m.group(1)\n\t\t\trest = text[m.end():]\n\t\telse:\n\t\t\tm = re.match('\\s*(\\w+)\\s*,?\\s*', text)\n\t\t\tvalue = m.group(1)\n\t\t\trest = text[m.end():]\n\t\tself.rows[key] = value.strip()",
    "detail": "by-extension.python.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\t\t\tm",
    "kind": 5,
    "importPath": "by-extension.python.bibtex_beautifier",
    "description": "by-extension.python.bibtex_beautifier",
    "peekOfCode": "\t\t\tm = re.match('^\"([^\\\"]+)\"\\s*,?\\s*', text)\n\t\t\tvalue = m.group(1)\n\t\t\trest = text[m.end():]\n\t\telse:\n\t\t\tm = re.match('\\s*(\\w+)\\s*,?\\s*', text)\n\t\t\tvalue = m.group(1)\n\t\t\trest = text[m.end():]\n\t\tself.rows[key] = value.strip()\n\t\treturn rest\n\tdef NormalizedEntryType(self):",
    "detail": "by-extension.python.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\t\t\tvalue",
    "kind": 5,
    "importPath": "by-extension.python.bibtex_beautifier",
    "description": "by-extension.python.bibtex_beautifier",
    "peekOfCode": "\t\t\tvalue = m.group(1)\n\t\t\trest = text[m.end():]\n\t\telse:\n\t\t\tm = re.match('\\s*(\\w+)\\s*,?\\s*', text)\n\t\t\tvalue = m.group(1)\n\t\t\trest = text[m.end():]\n\t\tself.rows[key] = value.strip()\n\t\treturn rest\n\tdef NormalizedEntryType(self):\n\t\tentry_type = self.entry_type.lower()",
    "detail": "by-extension.python.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\t\t\trest",
    "kind": 5,
    "importPath": "by-extension.python.bibtex_beautifier",
    "description": "by-extension.python.bibtex_beautifier",
    "peekOfCode": "\t\t\trest = text[m.end():]\n\t\telse:\n\t\t\tm = re.match('\\s*(\\w+)\\s*,?\\s*', text)\n\t\t\tvalue = m.group(1)\n\t\t\trest = text[m.end():]\n\t\tself.rows[key] = value.strip()\n\t\treturn rest\n\tdef NormalizedEntryType(self):\n\t\tentry_type = self.entry_type.lower()\n\t\tif entry_type in entry_types:",
    "detail": "by-extension.python.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\t\t\tm",
    "kind": 5,
    "importPath": "by-extension.python.bibtex_beautifier",
    "description": "by-extension.python.bibtex_beautifier",
    "peekOfCode": "\t\t\tm = re.match('\\s*(\\w+)\\s*,?\\s*', text)\n\t\t\tvalue = m.group(1)\n\t\t\trest = text[m.end():]\n\t\tself.rows[key] = value.strip()\n\t\treturn rest\n\tdef NormalizedEntryType(self):\n\t\tentry_type = self.entry_type.lower()\n\t\tif entry_type in entry_types:\n\t\t\tentry_type = entry_types[entry_type]\n\t\treturn entry_type",
    "detail": "by-extension.python.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\t\t\tvalue",
    "kind": 5,
    "importPath": "by-extension.python.bibtex_beautifier",
    "description": "by-extension.python.bibtex_beautifier",
    "peekOfCode": "\t\t\tvalue = m.group(1)\n\t\t\trest = text[m.end():]\n\t\tself.rows[key] = value.strip()\n\t\treturn rest\n\tdef NormalizedEntryType(self):\n\t\tentry_type = self.entry_type.lower()\n\t\tif entry_type in entry_types:\n\t\t\tentry_type = entry_types[entry_type]\n\t\treturn entry_type\n\tdef ToString(self):",
    "detail": "by-extension.python.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\t\t\trest",
    "kind": 5,
    "importPath": "by-extension.python.bibtex_beautifier",
    "description": "by-extension.python.bibtex_beautifier",
    "peekOfCode": "\t\t\trest = text[m.end():]\n\t\tself.rows[key] = value.strip()\n\t\treturn rest\n\tdef NormalizedEntryType(self):\n\t\tentry_type = self.entry_type.lower()\n\t\tif entry_type in entry_types:\n\t\t\tentry_type = entry_types[entry_type]\n\t\treturn entry_type\n\tdef ToString(self):\n\t\ts = '@' + self.entry_type + '{'",
    "detail": "by-extension.python.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\t\tself.rows[key]",
    "kind": 5,
    "importPath": "by-extension.python.bibtex_beautifier",
    "description": "by-extension.python.bibtex_beautifier",
    "peekOfCode": "\t\tself.rows[key] = value.strip()\n\t\treturn rest\n\tdef NormalizedEntryType(self):\n\t\tentry_type = self.entry_type.lower()\n\t\tif entry_type in entry_types:\n\t\t\tentry_type = entry_types[entry_type]\n\t\treturn entry_type\n\tdef ToString(self):\n\t\ts = '@' + self.entry_type + '{'\n\t\tif self.entry_name:",
    "detail": "by-extension.python.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\t\tentry_type",
    "kind": 5,
    "importPath": "by-extension.python.bibtex_beautifier",
    "description": "by-extension.python.bibtex_beautifier",
    "peekOfCode": "\t\tentry_type = self.entry_type.lower()\n\t\tif entry_type in entry_types:\n\t\t\tentry_type = entry_types[entry_type]\n\t\treturn entry_type\n\tdef ToString(self):\n\t\ts = '@' + self.entry_type + '{'\n\t\tif self.entry_name:\n\t\t\ts += self.entry_name + ','\n\t\ts += '\\n'\n\t\tkeys = sorted(self.rows.keys())",
    "detail": "by-extension.python.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\t\t\tentry_type",
    "kind": 5,
    "importPath": "by-extension.python.bibtex_beautifier",
    "description": "by-extension.python.bibtex_beautifier",
    "peekOfCode": "\t\t\tentry_type = entry_types[entry_type]\n\t\treturn entry_type\n\tdef ToString(self):\n\t\ts = '@' + self.entry_type + '{'\n\t\tif self.entry_name:\n\t\t\ts += self.entry_name + ','\n\t\ts += '\\n'\n\t\tkeys = sorted(self.rows.keys())\n\t\tfor key in keys:\n\t\t\ts += + 4*' '",
    "detail": "by-extension.python.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\t\ts",
    "kind": 5,
    "importPath": "by-extension.python.bibtex_beautifier",
    "description": "by-extension.python.bibtex_beautifier",
    "peekOfCode": "\t\ts = '@' + self.entry_type + '{'\n\t\tif self.entry_name:\n\t\t\ts += self.entry_name + ','\n\t\ts += '\\n'\n\t\tkeys = sorted(self.rows.keys())\n\t\tfor key in keys:\n\t\t\ts += + 4*' '\n\t\t\ts += key\n\t\t\ts += max(0, 13-len(key))*' '\n\t\t\ts += ' = '",
    "detail": "by-extension.python.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\t\tkeys",
    "kind": 5,
    "importPath": "by-extension.python.bibtex_beautifier",
    "description": "by-extension.python.bibtex_beautifier",
    "peekOfCode": "\t\tkeys = sorted(self.rows.keys())\n\t\tfor key in keys:\n\t\t\ts += + 4*' '\n\t\t\ts += key\n\t\t\ts += max(0, 13-len(key))*' '\n\t\t\ts += ' = '\n\t\t\tvalue = self.rows[key]\n\t\t\tif (not self.entry_type == 'String'):\n\t\t\t\tif (key in ['Author', 'Editor']):\n\t\t\t\t\tvalue = NormalizeAuthors(value)",
    "detail": "by-extension.python.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\t\t\tvalue",
    "kind": 5,
    "importPath": "by-extension.python.bibtex_beautifier",
    "description": "by-extension.python.bibtex_beautifier",
    "peekOfCode": "\t\t\tvalue = self.rows[key]\n\t\t\tif (not self.entry_type == 'String'):\n\t\t\t\tif (key in ['Author', 'Editor']):\n\t\t\t\t\tvalue = NormalizeAuthors(value)\n\t\t\t\tif (key == 'Pages'):\n\t\t\t\t\tvalue = NormalizePages(value)\n\t\t\t\tif (key == 'Year'):\n\t\t\t\t\tvalue = NormalizeYear(value)\n\t\t\t\tif (key == 'Month'):\n\t\t\t\t\tvalue = NormalizeMonth(value)",
    "detail": "by-extension.python.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\t\t\t\t\tvalue",
    "kind": 5,
    "importPath": "by-extension.python.bibtex_beautifier",
    "description": "by-extension.python.bibtex_beautifier",
    "peekOfCode": "\t\t\t\t\tvalue = NormalizeAuthors(value)\n\t\t\t\tif (key == 'Pages'):\n\t\t\t\t\tvalue = NormalizePages(value)\n\t\t\t\tif (key == 'Year'):\n\t\t\t\t\tvalue = NormalizeYear(value)\n\t\t\t\tif (key == 'Month'):\n\t\t\t\t\tvalue = NormalizeMonth(value)\n\t\t\ts += '{' + Format(value) + '}'\n\t\t\tif self.entry_type != 'String':\n\t\t\t\ts += ','",
    "detail": "by-extension.python.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\t\t\t\t\tvalue",
    "kind": 5,
    "importPath": "by-extension.python.bibtex_beautifier",
    "description": "by-extension.python.bibtex_beautifier",
    "peekOfCode": "\t\t\t\t\tvalue = NormalizePages(value)\n\t\t\t\tif (key == 'Year'):\n\t\t\t\t\tvalue = NormalizeYear(value)\n\t\t\t\tif (key == 'Month'):\n\t\t\t\t\tvalue = NormalizeMonth(value)\n\t\t\ts += '{' + Format(value) + '}'\n\t\t\tif self.entry_type != 'String':\n\t\t\t\ts += ','\n\t\t\ts += '\\n'\n\t\treturn s + '}\\n'",
    "detail": "by-extension.python.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\t\t\t\t\tvalue",
    "kind": 5,
    "importPath": "by-extension.python.bibtex_beautifier",
    "description": "by-extension.python.bibtex_beautifier",
    "peekOfCode": "\t\t\t\t\tvalue = NormalizeYear(value)\n\t\t\t\tif (key == 'Month'):\n\t\t\t\t\tvalue = NormalizeMonth(value)\n\t\t\ts += '{' + Format(value) + '}'\n\t\t\tif self.entry_type != 'String':\n\t\t\t\ts += ','\n\t\t\ts += '\\n'\n\t\treturn s + '}\\n'\n\tdef SortKey(self):\n\t\tpriorities = {",
    "detail": "by-extension.python.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\t\t\t\t\tvalue",
    "kind": 5,
    "importPath": "by-extension.python.bibtex_beautifier",
    "description": "by-extension.python.bibtex_beautifier",
    "peekOfCode": "\t\t\t\t\tvalue = NormalizeMonth(value)\n\t\t\ts += '{' + Format(value) + '}'\n\t\t\tif self.entry_type != 'String':\n\t\t\t\ts += ','\n\t\t\ts += '\\n'\n\t\treturn s + '}\\n'\n\tdef SortKey(self):\n\t\tpriorities = {\n               \t\t'String'        : -99,\n               \t\t'Proceedings'   : 99,",
    "detail": "by-extension.python.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\t\tpriorities",
    "kind": 5,
    "importPath": "by-extension.python.bibtex_beautifier",
    "description": "by-extension.python.bibtex_beautifier",
    "peekOfCode": "\t\tpriorities = {\n               \t\t'String'        : -99,\n               \t\t'Proceedings'   : 99,\n               \t\t'Book'          : 99,\n\t      \t}\n\t\tif self.entry_type in priorities:\n\t\t\treturn priorities[self.entry_type]\n\t\treturn 0\ndef ParseEntries(text):\n\tentries = []",
    "detail": "by-extension.python.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\tentries",
    "kind": 5,
    "importPath": "by-extension.python.bibtex_beautifier",
    "description": "by-extension.python.bibtex_beautifier",
    "peekOfCode": "\tentries = []\n\twhile True:\n\t\te = Entry()\n\t\ttext = e.ParseFromString(text)\n\t\tif not text:\n\t\t\tbreak\n\t\tentries.append(e)\n\treturn entries\ndef SortEntries(entries):\n\tentries.sort(key=lambda e: e.entry_name)",
    "detail": "by-extension.python.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\t\te",
    "kind": 5,
    "importPath": "by-extension.python.bibtex_beautifier",
    "description": "by-extension.python.bibtex_beautifier",
    "peekOfCode": "\t\te = Entry()\n\t\ttext = e.ParseFromString(text)\n\t\tif not text:\n\t\t\tbreak\n\t\tentries.append(e)\n\treturn entries\ndef SortEntries(entries):\n\tentries.sort(key=lambda e: e.entry_name)\n\tentries.sort(key=lambda e: e.entry_type)\n\tentries.sort(key=lambda e: e.SortKey())",
    "detail": "by-extension.python.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\t\ttext",
    "kind": 5,
    "importPath": "by-extension.python.bibtex_beautifier",
    "description": "by-extension.python.bibtex_beautifier",
    "peekOfCode": "\t\ttext = e.ParseFromString(text)\n\t\tif not text:\n\t\t\tbreak\n\t\tentries.append(e)\n\treturn entries\ndef SortEntries(entries):\n\tentries.sort(key=lambda e: e.entry_name)\n\tentries.sort(key=lambda e: e.entry_type)\n\tentries.sort(key=lambda e: e.SortKey())\n\treturn entries",
    "detail": "by-extension.python.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\tlines",
    "kind": 5,
    "importPath": "by-extension.python.bibtex_beautifier",
    "description": "by-extension.python.bibtex_beautifier",
    "peekOfCode": "\tlines = []\n\twith open(sys.argv[1], 'r') as f:\n\t\tfor line in f:\n\t\t\tif line.strip().startswith('%'):\n\t\t\t\tprint(line.strip())\n\t\t\telse:\n\t\t\t\tlines.append(line)\n\ttext = '\\n'.join(lines)\n\treturn text\n# main",
    "detail": "by-extension.python.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\ttext",
    "kind": 5,
    "importPath": "by-extension.python.bibtex_beautifier",
    "description": "by-extension.python.bibtex_beautifier",
    "peekOfCode": "\ttext = '\\n'.join(lines)\n\treturn text\n# main\ndef main():\n\ttext = ReadFile()\n\tentries = ParseEntries(text)\n\tentries = SortEntries(entries)\n\tfor entry in entries:\n\t\tprint(entry.ToString())\nif __name__ == '__main__':",
    "detail": "by-extension.python.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\ttext",
    "kind": 5,
    "importPath": "by-extension.python.bibtex_beautifier",
    "description": "by-extension.python.bibtex_beautifier",
    "peekOfCode": "\ttext = ReadFile()\n\tentries = ParseEntries(text)\n\tentries = SortEntries(entries)\n\tfor entry in entries:\n\t\tprint(entry.ToString())\nif __name__ == '__main__':\n    main()",
    "detail": "by-extension.python.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\tentries",
    "kind": 5,
    "importPath": "by-extension.python.bibtex_beautifier",
    "description": "by-extension.python.bibtex_beautifier",
    "peekOfCode": "\tentries = ParseEntries(text)\n\tentries = SortEntries(entries)\n\tfor entry in entries:\n\t\tprint(entry.ToString())\nif __name__ == '__main__':\n    main()",
    "detail": "by-extension.python.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\tentries",
    "kind": 5,
    "importPath": "by-extension.python.bibtex_beautifier",
    "description": "by-extension.python.bibtex_beautifier",
    "peekOfCode": "\tentries = SortEntries(entries)\n\tfor entry in entries:\n\t\tprint(entry.ToString())\nif __name__ == '__main__':\n    main()",
    "detail": "by-extension.python.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "pascal_triangle",
    "kind": 2,
    "importPath": "by-extension.python.Binary Coefficients",
    "description": "by-extension.python.Binary Coefficients",
    "peekOfCode": "def pascal_triangle(lineNumber):\n    list1 = list()\n    list1.append([1])\n    i = 1\n    while (i <= lineNumber):\n        j = 1\n        l = []\n        l.append(1)\n        while (j < i):\n            l.append(list1[i - 1][j] + list1[i - 1][j - 1])",
    "detail": "by-extension.python.Binary Coefficients",
    "documentation": {}
  },
  {
    "label": "binomial_coef",
    "kind": 2,
    "importPath": "by-extension.python.Binary Coefficients",
    "description": "by-extension.python.Binary Coefficients",
    "peekOfCode": "def binomial_coef(n, k):\n    pascalTriangle = pascal_triangle(n)\n    return (pascalTriangle[n][k - 1])",
    "detail": "by-extension.python.Binary Coefficients",
    "documentation": {}
  },
  {
    "label": "binarySearchApp",
    "kind": 2,
    "importPath": "by-extension.python.binary search",
    "description": "by-extension.python.binary search",
    "peekOfCode": "def binarySearchAppr (arr, start, end, x):\n# check condition\n   if end >= start:\n      mid = start + (end- start)//2\n      # If element is present at the middle\n      if arr[mid] == x:\n      return mid\n      # If element is smaller than mid\n      elif arr[mid] > x:\n      return binarySearchAppr(arr, start, mid-1, x)",
    "detail": "by-extension.python.binary search",
    "documentation": {}
  },
  {
    "label": "arr",
    "kind": 5,
    "importPath": "by-extension.python.binary search",
    "description": "by-extension.python.binary search",
    "peekOfCode": "arr = sorted(['t','u','t','o','r','i','a','l'])\n   x ='r'\n   result = binarySearchAppr(arr, 0, len(arr)-1, x)\nif result != -1:\n   print (\"Element is present at index \"+str(result))\nelse:\n   print (\"Element is not present in array\")",
    "detail": "by-extension.python.binary search",
    "documentation": {}
  },
  {
    "label": "pascal_triangle",
    "kind": 2,
    "importPath": "by-extension.python.Binary_Coefficients",
    "description": "by-extension.python.Binary_Coefficients",
    "peekOfCode": "def pascal_triangle(lineNumber):\n    list1 = list()\n    list1.append([1])\n    i = 1\n    while i <= lineNumber:\n        j = 1\n        l = []\n        l.append(1)\n        while j < i:\n            l.append(list1[i - 1][j] + list1[i - 1][j - 1])",
    "detail": "by-extension.python.Binary_Coefficients",
    "documentation": {}
  },
  {
    "label": "binomial_coef",
    "kind": 2,
    "importPath": "by-extension.python.Binary_Coefficients",
    "description": "by-extension.python.Binary_Coefficients",
    "peekOfCode": "def binomial_coef(n, k):\n    pascalTriangle = pascal_triangle(n)\n    return pascalTriangle[n][k - 1]",
    "detail": "by-extension.python.Binary_Coefficients",
    "documentation": {}
  },
  {
    "label": "Binary_Search",
    "kind": 2,
    "importPath": "by-extension.python.Binary_Insertion_Sort",
    "description": "by-extension.python.Binary_Insertion_Sort",
    "peekOfCode": "def Binary_Search(Test_arr, low, high, k):\n    if high >= low:\n        Mid = (low+high)//2\n        if Test_arr[Mid] < k:\n            return Binary_Search(Test_arr, Mid+1, high, k)\n        elif Test_arr[Mid] > k:\n            return Binary_Search(Test_arr, low, Mid-1, k)\n        else:\n            return Mid\n    else:",
    "detail": "by-extension.python.Binary_Insertion_Sort",
    "documentation": {}
  },
  {
    "label": "Insertion_Sort",
    "kind": 2,
    "importPath": "by-extension.python.Binary_Insertion_Sort",
    "description": "by-extension.python.Binary_Insertion_Sort",
    "peekOfCode": "def Insertion_Sort(Test_arr):\n    for i in range(1, len(Test_arr)):\n        val = Test_arr[i]\n        j = Binary_Search(Test_arr[:i], 0, len(Test_arr[:i])-1, val)\n        Test_arr.pop(i)\n        Test_arr.insert(j, val)\n    return Test_arr\nif __name__ == \"__main__\":\n    Test_list = input(\"Enter the list of Numbers: \").split()\n    Test_list = [int(i) for i in Test_list]",
    "detail": "by-extension.python.Binary_Insertion_Sort",
    "documentation": {}
  },
  {
    "label": "binary_search",
    "kind": 2,
    "importPath": "by-extension.python.binary_search",
    "description": "by-extension.python.binary_search",
    "peekOfCode": "def binary_search(collection, target):\n    left, right, counter = 0, len(collection), 0\n    while left != right:\n        c = (left + right) // 2\n        if target == collection[c]:\n            counter += 1\n            print(\"Step %i -->\" % counter, [collection[c]])\n            return c, counter\n        elif target < collection[c]:\n            counter += 1",
    "detail": "by-extension.python.binary_search",
    "documentation": {}
  },
  {
    "label": "visualization",
    "kind": 2,
    "importPath": "by-extension.python.binary_search",
    "description": "by-extension.python.binary_search",
    "peekOfCode": "def visualization():\n    length = 10\n    collection = [item for item in range(0, length)]\n    target = randint(0, length - 1)\n    print(\"Initial list:\", collection)\n    print(\"The number of which must be found:\", target)\n    print(\"Visualization of algorithm work.\")\n    result, counter = binary_search(collection, target)\n    if result != -1:\n        print(\"Result of searching:\", result)",
    "detail": "by-extension.python.binary_search",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "by-extension.python.binary_search",
    "description": "by-extension.python.binary_search",
    "peekOfCode": "def main():\n    elapsed_time = timeit.timeit(visualization, number=1)\n    print(\"Elapsed time: \", round(elapsed_time, 7), \"sec.\")\nif __name__ == \"__main__\":\n    main()",
    "detail": "by-extension.python.binary_search",
    "documentation": {}
  },
  {
    "label": "Node",
    "kind": 6,
    "importPath": "by-extension.python.binary_search_tree",
    "description": "by-extension.python.binary_search_tree",
    "peekOfCode": "class Node:\n    \"\"\"Class for node of a tree\"\"\"\n    def __init__(self, info):\n        \"\"\"Initialising a node\"\"\"\n        self.info = info\n        self.left = None\n        self.right = None\n        # self.level = None\n    def __str__(self):\n        return str(self.info)",
    "detail": "by-extension.python.binary_search_tree",
    "documentation": {}
  },
  {
    "label": "BinarySearchTree",
    "kind": 6,
    "importPath": "by-extension.python.binary_search_tree",
    "description": "by-extension.python.binary_search_tree",
    "peekOfCode": "class BinarySearchTree:\n    \"\"\"Class for BST\"\"\"\n    def __init__(self):\n        \"\"\"Initialising a BST\"\"\"\n        self.root = None\n    def insert(self, val):\n        \"\"\"Creating a BST with root value as val\"\"\"\n        # Check if tree has root with None value\n        if self.root is None:\n            self.root = Node(val)",
    "detail": "by-extension.python.binary_search_tree",
    "documentation": {}
  },
  {
    "label": "is_bst",
    "kind": 2,
    "importPath": "by-extension.python.binary_search_tree",
    "description": "by-extension.python.binary_search_tree",
    "peekOfCode": "def is_bst(node, lower_lim=None, upper_lim=None):\n    \"\"\"Function to find is a binary tree is a binary search tree.\"\"\"\n    if lower_lim is not None and node.info < lower_lim:\n        return False\n    if upper_lim is not None and node.info > upper_lim:\n        return False\n    is_left_bst = True\n    is_right_bst = True\n    if node.left is not None:\n        is_left_bst = is_bst(node.left, lower_lim, node.info)",
    "detail": "by-extension.python.binary_search_tree",
    "documentation": {}
  },
  {
    "label": "postorder",
    "kind": 2,
    "importPath": "by-extension.python.binary_search_tree",
    "description": "by-extension.python.binary_search_tree",
    "peekOfCode": "def postorder(node):\n    # L R N : Left , Right, Node\n    if node is None:\n        return\n    if node.left:\n        postorder(node.left)\n    if node.right:\n        postorder(node.right)\n    print(node.info)\ndef inorder(node):",
    "detail": "by-extension.python.binary_search_tree",
    "documentation": {}
  },
  {
    "label": "inorder",
    "kind": 2,
    "importPath": "by-extension.python.binary_search_tree",
    "description": "by-extension.python.binary_search_tree",
    "peekOfCode": "def inorder(node):\n    # L N R : Left, Node , Right\n    if node is None:\n        return\n    if node.left:\n        inorder(node.left)\n    print(node.info)\n    if node.right:\n        inorder(node.right)\ndef preorder(node):",
    "detail": "by-extension.python.binary_search_tree",
    "documentation": {}
  },
  {
    "label": "preorder",
    "kind": 2,
    "importPath": "by-extension.python.binary_search_tree",
    "description": "by-extension.python.binary_search_tree",
    "peekOfCode": "def preorder(node):\n    # N L R : Node , Left, Right\n    if node is None:\n        return\n    print(node.info)\n    if node.left:\n        preorder(node.left)\n    if node.right:\n        preorder(node.right)\n# Levelwise",
    "detail": "by-extension.python.binary_search_tree",
    "documentation": {}
  },
  {
    "label": "bfs",
    "kind": 2,
    "importPath": "by-extension.python.binary_search_tree",
    "description": "by-extension.python.binary_search_tree",
    "peekOfCode": "def bfs(node):\n    queue = []\n    if node:\n        queue.append(node)\n    while queue != []:\n        temp = queue.pop(0)\n        print(temp.info)\n        if temp.left:\n            queue.append(temp.left)\n        if temp.right:",
    "detail": "by-extension.python.binary_search_tree",
    "documentation": {}
  },
  {
    "label": "preorder_itr",
    "kind": 2,
    "importPath": "by-extension.python.binary_search_tree",
    "description": "by-extension.python.binary_search_tree",
    "peekOfCode": "def preorder_itr(node):\n    # N L R : Node, Left , Right\n    stack = [node]\n    values = []\n    while stack != []:\n        temp = stack.pop()\n        print(temp.info)\n        values.append(temp.info)\n        if temp.right:\n            stack.append(temp.right)",
    "detail": "by-extension.python.binary_search_tree",
    "documentation": {}
  },
  {
    "label": "inorder_itr",
    "kind": 2,
    "importPath": "by-extension.python.binary_search_tree",
    "description": "by-extension.python.binary_search_tree",
    "peekOfCode": "def inorder_itr(node):\n    # L N R : Left, Node, Right\n    # 1) Create an empty stack S.\n    # 2) Initialize current node as root\n    # 3) Push the current node to S and set current = current->left until current is NULL\n    # 4) If current is NULL and stack is not empty then \n    #     a) Pop the top item from stack.\n    #     b) Print the popped item, set current = popped_item->right \n    #     c) Go to step 3.\n    # 5) If current is NULL and stack is empty then we are done.",
    "detail": "by-extension.python.binary_search_tree",
    "documentation": {}
  },
  {
    "label": "postorder_itr",
    "kind": 2,
    "importPath": "by-extension.python.binary_search_tree",
    "description": "by-extension.python.binary_search_tree",
    "peekOfCode": "def postorder_itr(node):\n    # L R N\n    # 1. Push root to first stack.\n    # 2. Loop while first stack is not empty\n    # 2.1 Pop a node from first stack and push it to second stack\n    # 2.2 Push left and right children of the popped node to first stack\n    # 3. Print contents of second stack\n    s1, s2 = [node], []\n    while s1 != []:\n        temp = s1.pop()",
    "detail": "by-extension.python.binary_search_tree",
    "documentation": {}
  },
  {
    "label": "bst_frm_pre",
    "kind": 2,
    "importPath": "by-extension.python.binary_search_tree",
    "description": "by-extension.python.binary_search_tree",
    "peekOfCode": "def bst_frm_pre(pre_list):\n    box = Node(pre_list[0])\n    if len(pre_list) > 1:\n        if len(pre_list) == 2:\n            if pre_list[1] > pre_list[0]:\n                box.right = Node(pre_list[1])\n            else:\n                box.left = Node(pre_list[1])\n        else:\n            all_less = False",
    "detail": "by-extension.python.binary_search_tree",
    "documentation": {}
  },
  {
    "label": "lca",
    "kind": 2,
    "importPath": "by-extension.python.binary_search_tree",
    "description": "by-extension.python.binary_search_tree",
    "peekOfCode": "def lca(t_node, c1, c2):\n    if c1 == c2:\n        return c1\n    current = t_node\n    while current:\n        if c1 < current.info and c2 < current.info:\n            current = current.left\n        elif c1 > current.info and c2 > current.info:\n            current = current.right\n        else:",
    "detail": "by-extension.python.binary_search_tree",
    "documentation": {}
  },
  {
    "label": "vertical_middle_level",
    "kind": 2,
    "importPath": "by-extension.python.binary_search_tree",
    "description": "by-extension.python.binary_search_tree",
    "peekOfCode": "def vertical_middle_level(t_node):\n    e = (t_node, 0)         # 0 indicates level 0, to left we have -ve and to right +ve\n    queue = [e]\n    ans = []\n    # Do a level-order traversal and assign level-value to each node\n    while queue != []:\n        temp, level = queue.pop(0)\n        if level == 0:\n            ans.append(str(temp.info))\n        if temp.left:",
    "detail": "by-extension.python.binary_search_tree",
    "documentation": {}
  },
  {
    "label": "get_level",
    "kind": 2,
    "importPath": "by-extension.python.binary_search_tree",
    "description": "by-extension.python.binary_search_tree",
    "peekOfCode": "def get_level(n, val):\n    c_level = 0\n    while n.info != val:\n        if val < n.info:\n            n = n.left\n        elif val > n.info:\n            n = n.right\n        c_level += 1\n        if n is None:\n            return -1 ",
    "detail": "by-extension.python.binary_search_tree",
    "documentation": {}
  },
  {
    "label": "depth",
    "kind": 2,
    "importPath": "by-extension.python.binary_search_tree",
    "description": "by-extension.python.binary_search_tree",
    "peekOfCode": "def depth(node):\n    if node is None:\n        return 0\n    l_depth, r_depth = 0, 0\n    if node.left:\n        l_depth = depth(node.left)\n    if node.right:\n        r_depth = depth(node.right)\n    # print(node.info, l_depth, r_depth)\n    return 1 + max(l_depth, r_depth)",
    "detail": "by-extension.python.binary_search_tree",
    "documentation": {}
  },
  {
    "label": "t",
    "kind": 5,
    "importPath": "by-extension.python.binary_search_tree",
    "description": "by-extension.python.binary_search_tree",
    "peekOfCode": "t = BinarySearchTree()\nt.insert(10)\nt.insert(5)\nt.insert(15)\nt.insert(3)\nt.insert(1)\nt.insert(0)\nt.insert(2)\nt.insert(7)\nt.insert(12)",
    "detail": "by-extension.python.binary_search_tree",
    "documentation": {}
  },
  {
    "label": "binaryToDecimal",
    "kind": 2,
    "importPath": "by-extension.python.Binary_to_Decimal",
    "description": "by-extension.python.Binary_to_Decimal",
    "peekOfCode": "def binaryToDecimal(binary): \n\t\"\"\"\n\t>>> binaryToDecimal(111110000)\n\t496\n\t>>> binaryToDecimal(10100)\n\t20\n\t>>> binaryToDecimal(101011)\n\t43\n\t\"\"\"\n\tdecimal, i, n = 0, 0, 0",
    "detail": "by-extension.python.Binary_to_Decimal",
    "documentation": {}
  },
  {
    "label": "\t\tdec",
    "kind": 5,
    "importPath": "by-extension.python.Binary_to_Decimal",
    "description": "by-extension.python.Binary_to_Decimal",
    "peekOfCode": "\t\tdec = binary % 10\n\t\tdecimal = decimal + dec * pow(2, i) \n\t\tbinary = binary//10\n\t\ti += 1\n\tprint(decimal)\t \nbinaryToDecimal(100)",
    "detail": "by-extension.python.Binary_to_Decimal",
    "documentation": {}
  },
  {
    "label": "\t\tdecimal",
    "kind": 5,
    "importPath": "by-extension.python.Binary_to_Decimal",
    "description": "by-extension.python.Binary_to_Decimal",
    "peekOfCode": "\t\tdecimal = decimal + dec * pow(2, i) \n\t\tbinary = binary//10\n\t\ti += 1\n\tprint(decimal)\t \nbinaryToDecimal(100)",
    "detail": "by-extension.python.Binary_to_Decimal",
    "documentation": {}
  },
  {
    "label": "\t\tbinary",
    "kind": 5,
    "importPath": "by-extension.python.Binary_to_Decimal",
    "description": "by-extension.python.Binary_to_Decimal",
    "peekOfCode": "\t\tbinary = binary//10\n\t\ti += 1\n\tprint(decimal)\t \nbinaryToDecimal(100)",
    "detail": "by-extension.python.Binary_to_Decimal",
    "documentation": {}
  },
  {
    "label": "checkBinod",
    "kind": 2,
    "importPath": "by-extension.python.binod",
    "description": "by-extension.python.binod",
    "peekOfCode": "def checkBinod(file):#Trying to find Binod In File Insted Of Manohar Ka Kotha\n    # master\n    with open(file, \"r\") as f:\n        # master\n        fileContent = f.read()\n    if 'binod' in fileContent.lower():\n        print(\n            f'**************Congratulations Binod found in {f}********************')\n        return True\n    else:",
    "detail": "by-extension.python.binod",
    "documentation": {}
  },
  {
    "label": "Bird",
    "kind": 6,
    "importPath": "by-extension.python.Bird",
    "description": "by-extension.python.Bird",
    "peekOfCode": "class Bird(Thread):\n    \"\"\"\n    Classe para criar um pássaro\n    \"\"\"\n    __tag = \"Bird\"\n    __isAlive = None\n    __going_up = False\n    __going_down = 0\n    __times_skipped = 0\n    __running = False",
    "detail": "by-extension.python.Bird",
    "documentation": {}
  },
  {
    "label": "birthdays",
    "kind": 5,
    "importPath": "by-extension.python.birthdays",
    "description": "by-extension.python.birthdays",
    "peekOfCode": "birthdays = {'Alice': 'Apr 1', 'Bob': 'Dec 12', 'Carol': 'Mar 4'}\nwhile True:\n   print('Enter a name: (blank to quit)')\n name = input()\n if name == '':\n   break\n if name in birthdays:\n   print(birthdays[name] + ' is the birthday of ' + name)\n else:\n   print('I do not have birthday information for ' + name)",
    "detail": "by-extension.python.birthdays",
    "documentation": {}
  },
  {
    "label": "pseudo",
    "kind": 5,
    "importPath": "by-extension.python.bitbucket_repolist",
    "description": "by-extension.python.bitbucket_repolist",
    "peekOfCode": "pseudo = argv[1] if len(argv) > 1 else \"lbesson\"\njsonfile = \"bitbucket_{}.json\".format(pseudo)\nsystem(\"curl --silent https://bitbucket.org/api/1.0/users/\" + pseudo + \" > \" + jsonfile)\nb = load(open(jsonfile, 'r'))\n# for i in b['repositories']:\n#     print(i['slug'])\nlist_of_repo = sorted([i['slug'] for i in b['repositories']])\nfor i in list_of_repo:\n    print(i)",
    "detail": "by-extension.python.bitbucket_repolist",
    "documentation": {}
  },
  {
    "label": "jsonfile",
    "kind": 5,
    "importPath": "by-extension.python.bitbucket_repolist",
    "description": "by-extension.python.bitbucket_repolist",
    "peekOfCode": "jsonfile = \"bitbucket_{}.json\".format(pseudo)\nsystem(\"curl --silent https://bitbucket.org/api/1.0/users/\" + pseudo + \" > \" + jsonfile)\nb = load(open(jsonfile, 'r'))\n# for i in b['repositories']:\n#     print(i['slug'])\nlist_of_repo = sorted([i['slug'] for i in b['repositories']])\nfor i in list_of_repo:\n    print(i)",
    "detail": "by-extension.python.bitbucket_repolist",
    "documentation": {}
  },
  {
    "label": "b",
    "kind": 5,
    "importPath": "by-extension.python.bitbucket_repolist",
    "description": "by-extension.python.bitbucket_repolist",
    "peekOfCode": "b = load(open(jsonfile, 'r'))\n# for i in b['repositories']:\n#     print(i['slug'])\nlist_of_repo = sorted([i['slug'] for i in b['repositories']])\nfor i in list_of_repo:\n    print(i)",
    "detail": "by-extension.python.bitbucket_repolist",
    "documentation": {}
  },
  {
    "label": "list_of_repo",
    "kind": 5,
    "importPath": "by-extension.python.bitbucket_repolist",
    "description": "by-extension.python.bitbucket_repolist",
    "peekOfCode": "list_of_repo = sorted([i['slug'] for i in b['repositories']])\nfor i in list_of_repo:\n    print(i)",
    "detail": "by-extension.python.bitbucket_repolist",
    "documentation": {}
  },
  {
    "label": "dealer_choice",
    "kind": 2,
    "importPath": "by-extension.python.blackjack",
    "description": "by-extension.python.blackjack",
    "peekOfCode": "def dealer_choice():\n    if sum(d_cards) < 17:\n        while sum(d_cards) < 17:\n            random.shuffle(deck)\n            d_cards.append(deck.pop())\n    print(\"Dealer has total \" + str(sum(d_cards)) + \"with the cards \", d_cards)\n    if sum(p_cards) == sum(d_cards):\n        print(\"***************The match is tie !!****************\")\n        exit()\n    if sum(d_cards) == 21:",
    "detail": "by-extension.python.blackjack",
    "documentation": {}
  },
  {
    "label": "deck",
    "kind": 5,
    "importPath": "by-extension.python.blackjack",
    "description": "by-extension.python.blackjack",
    "peekOfCode": "deck = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 11] * 4\nrandom.shuffle(deck)\nprint(\n    \"                       **********************************************************                                    \")\nprint(\n    \"                                   Welcome to the game Casino - BLACK JACK !                                         \")\nprint(\n    \"                       **********************************************************                                    \")\nd_cards = []  # Initialising dealer's cards\np_cards = []  # Initialising player's cards",
    "detail": "by-extension.python.blackjack",
    "documentation": {}
  },
  {
    "label": "d_cards",
    "kind": 5,
    "importPath": "by-extension.python.blackjack",
    "description": "by-extension.python.blackjack",
    "peekOfCode": "d_cards = []  # Initialising dealer's cards\np_cards = []  # Initialising player's cards\nwhile len(d_cards) != 2:\n    random.shuffle(deck)\n    d_cards.append(deck.pop())\n    if len(d_cards) == 2:\n        print('The cards dealer has are X ', d_cards[1])\n# Displaying the Player's cards\nwhile len(p_cards) != 2:\n    random.shuffle(deck)",
    "detail": "by-extension.python.blackjack",
    "documentation": {}
  },
  {
    "label": "p_cards",
    "kind": 5,
    "importPath": "by-extension.python.blackjack",
    "description": "by-extension.python.blackjack",
    "peekOfCode": "p_cards = []  # Initialising player's cards\nwhile len(d_cards) != 2:\n    random.shuffle(deck)\n    d_cards.append(deck.pop())\n    if len(d_cards) == 2:\n        print('The cards dealer has are X ', d_cards[1])\n# Displaying the Player's cards\nwhile len(p_cards) != 2:\n    random.shuffle(deck)\n    p_cards.append(deck.pop())",
    "detail": "by-extension.python.blackjack",
    "documentation": {}
  },
  {
    "label": "Card",
    "kind": 6,
    "importPath": "by-extension.python.blackJackGUI",
    "description": "by-extension.python.blackJackGUI",
    "peekOfCode": "class Card:\n    def __init__(self, suit, rank):\n        if (suit in SUITS) and (rank in RANKS):\n            self.suit = suit\n            self.rank = rank\n        else:\n            self.suit = None\n            self.rank = None\n            print((\"Invalid card: \", suit, rank))\n    def __str__(self):",
    "detail": "by-extension.python.blackJackGUI",
    "documentation": {}
  },
  {
    "label": "Hand",
    "kind": 6,
    "importPath": "by-extension.python.blackJackGUI",
    "description": "by-extension.python.blackJackGUI",
    "peekOfCode": "class Hand:\n    def __init__(self):\n        self.hand = []\n    def __str__(self):\n        return string_list_join(\"Hand\", self.hand)\n    def add_card(self, card):\n        self.hand.append(card)\n    def get_value(self):\n        var = []\n        self.hand_value = 0",
    "detail": "by-extension.python.blackJackGUI",
    "documentation": {}
  },
  {
    "label": "Deck",
    "kind": 6,
    "importPath": "by-extension.python.blackJackGUI",
    "description": "by-extension.python.blackJackGUI",
    "peekOfCode": "class Deck:\n    def __init__(self):\n        self.Deck = [Card(suit, rank) for suit in SUITS for rank in RANKS]\n    def shuffle(self):\n        random.shuffle(self.Deck)\n    def deal_card(self):\n        return random.choice(self.Deck)\n    def __str__(self):\n        return string_list_join(\"Deck\", self.Deck)\ndef deal():",
    "detail": "by-extension.python.blackJackGUI",
    "documentation": {}
  },
  {
    "label": "string_list_join",
    "kind": 2,
    "importPath": "by-extension.python.blackJackGUI",
    "description": "by-extension.python.blackJackGUI",
    "peekOfCode": "def string_list_join(string, string_list):\n    ans = string + \" contains \"\n    for i in range(len(string_list)):\n        ans += str(string_list[i]) + \" \"\n    return ans\nclass Hand:\n    def __init__(self):\n        self.hand = []\n    def __str__(self):\n        return string_list_join(\"Hand\", self.hand)",
    "detail": "by-extension.python.blackJackGUI",
    "documentation": {}
  },
  {
    "label": "deal",
    "kind": 2,
    "importPath": "by-extension.python.blackJackGUI",
    "description": "by-extension.python.blackJackGUI",
    "peekOfCode": "def deal():\n    global outcome, in_play, score1, score2, player_card, dealer_card, deck\n    outcome = \"\"\n    player_card = Hand()\n    dealer_card = Hand()\n    deck = Deck()\n    for i in range(2):\n        player_card.add_card(deck.deal_card())\n        dealer_card.add_card(deck.deal_card())\n    in_play = True",
    "detail": "by-extension.python.blackJackGUI",
    "documentation": {}
  },
  {
    "label": "stand",
    "kind": 2,
    "importPath": "by-extension.python.blackJackGUI",
    "description": "by-extension.python.blackJackGUI",
    "peekOfCode": "def stand():\n    if in_play == True:\n        while dealer_card.get_value() < 17:\n            dealer_card.add_card(deck.deal_card())\n    if dealer_card.get_value() > 21:\n        outcome = \"you won!!\"\n    elif player_card.get_value() <= dealer_card.get_value():\n        outcome = \"you lose\"\n    else:\n        outcome = \"you won!!\"",
    "detail": "by-extension.python.blackJackGUI",
    "documentation": {}
  },
  {
    "label": "hit",
    "kind": 2,
    "importPath": "by-extension.python.blackJackGUI",
    "description": "by-extension.python.blackJackGUI",
    "peekOfCode": "def hit():\n    global outcome, in_play, score1, score2, player_card, dealer_card, deck\n    if in_play == True:\n        player_card.add_card(deck.deal_card())\n    if player_card.get_value() > 21:\n        outcome = \"you are busted\"\n        in_play = False\n    score1 = str(player_card.get_value())\n    score2 = str(dealer_card.get_value())\ndef draw(canvas):",
    "detail": "by-extension.python.blackJackGUI",
    "documentation": {}
  },
  {
    "label": "draw",
    "kind": 2,
    "importPath": "by-extension.python.blackJackGUI",
    "description": "by-extension.python.blackJackGUI",
    "peekOfCode": "def draw(canvas):\n    canvas.draw_text(outcome, [250, 150], 25, 'White')\n    canvas.draw_text(\"BlackJack\", [250, 50], 40, 'Black')\n    canvas.draw_text(score1, [100, 100], 40, 'Red')\n    player_card.draw(canvas, [20, 300])\n    dealer_card.draw(canvas, [300, 300])\n    canvas.draw_text(score2, [400, 100], 40, 'Red')\nframe = simplegui.create_frame(\"Blackjack\", 600, 600)\nframe.set_canvas_background(\"Green\")\nframe.add_button(\"Deal\", deal, 200)",
    "detail": "by-extension.python.blackJackGUI",
    "documentation": {}
  },
  {
    "label": "CARD_SIZE",
    "kind": 5,
    "importPath": "by-extension.python.blackJackGUI",
    "description": "by-extension.python.blackJackGUI",
    "peekOfCode": "CARD_SIZE = (72, 96)\nCARD_CENTER = (36, 48)\ncard_images = simplegui.load_image(\"http://storage.googleapis.com/codeskulptor-assets/cards_jfitz.png\")\nin_play = False\noutcome = \"\"\nscore = 0\nSUITS = ('C', 'S', 'H', 'D')\nRANKS = ('A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K')\nVALUES = {'A': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'T': 10, 'J': 10, 'Q': 10, 'K': 10}\nclass Card:",
    "detail": "by-extension.python.blackJackGUI",
    "documentation": {}
  },
  {
    "label": "CARD_CENTER",
    "kind": 5,
    "importPath": "by-extension.python.blackJackGUI",
    "description": "by-extension.python.blackJackGUI",
    "peekOfCode": "CARD_CENTER = (36, 48)\ncard_images = simplegui.load_image(\"http://storage.googleapis.com/codeskulptor-assets/cards_jfitz.png\")\nin_play = False\noutcome = \"\"\nscore = 0\nSUITS = ('C', 'S', 'H', 'D')\nRANKS = ('A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K')\nVALUES = {'A': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'T': 10, 'J': 10, 'Q': 10, 'K': 10}\nclass Card:\n    def __init__(self, suit, rank):",
    "detail": "by-extension.python.blackJackGUI",
    "documentation": {}
  },
  {
    "label": "card_images",
    "kind": 5,
    "importPath": "by-extension.python.blackJackGUI",
    "description": "by-extension.python.blackJackGUI",
    "peekOfCode": "card_images = simplegui.load_image(\"http://storage.googleapis.com/codeskulptor-assets/cards_jfitz.png\")\nin_play = False\noutcome = \"\"\nscore = 0\nSUITS = ('C', 'S', 'H', 'D')\nRANKS = ('A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K')\nVALUES = {'A': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'T': 10, 'J': 10, 'Q': 10, 'K': 10}\nclass Card:\n    def __init__(self, suit, rank):\n        if (suit in SUITS) and (rank in RANKS):",
    "detail": "by-extension.python.blackJackGUI",
    "documentation": {}
  },
  {
    "label": "in_play",
    "kind": 5,
    "importPath": "by-extension.python.blackJackGUI",
    "description": "by-extension.python.blackJackGUI",
    "peekOfCode": "in_play = False\noutcome = \"\"\nscore = 0\nSUITS = ('C', 'S', 'H', 'D')\nRANKS = ('A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K')\nVALUES = {'A': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'T': 10, 'J': 10, 'Q': 10, 'K': 10}\nclass Card:\n    def __init__(self, suit, rank):\n        if (suit in SUITS) and (rank in RANKS):\n            self.suit = suit",
    "detail": "by-extension.python.blackJackGUI",
    "documentation": {}
  },
  {
    "label": "outcome",
    "kind": 5,
    "importPath": "by-extension.python.blackJackGUI",
    "description": "by-extension.python.blackJackGUI",
    "peekOfCode": "outcome = \"\"\nscore = 0\nSUITS = ('C', 'S', 'H', 'D')\nRANKS = ('A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K')\nVALUES = {'A': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'T': 10, 'J': 10, 'Q': 10, 'K': 10}\nclass Card:\n    def __init__(self, suit, rank):\n        if (suit in SUITS) and (rank in RANKS):\n            self.suit = suit\n            self.rank = rank",
    "detail": "by-extension.python.blackJackGUI",
    "documentation": {}
  },
  {
    "label": "score",
    "kind": 5,
    "importPath": "by-extension.python.blackJackGUI",
    "description": "by-extension.python.blackJackGUI",
    "peekOfCode": "score = 0\nSUITS = ('C', 'S', 'H', 'D')\nRANKS = ('A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K')\nVALUES = {'A': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'T': 10, 'J': 10, 'Q': 10, 'K': 10}\nclass Card:\n    def __init__(self, suit, rank):\n        if (suit in SUITS) and (rank in RANKS):\n            self.suit = suit\n            self.rank = rank\n        else:",
    "detail": "by-extension.python.blackJackGUI",
    "documentation": {}
  },
  {
    "label": "SUITS",
    "kind": 5,
    "importPath": "by-extension.python.blackJackGUI",
    "description": "by-extension.python.blackJackGUI",
    "peekOfCode": "SUITS = ('C', 'S', 'H', 'D')\nRANKS = ('A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K')\nVALUES = {'A': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'T': 10, 'J': 10, 'Q': 10, 'K': 10}\nclass Card:\n    def __init__(self, suit, rank):\n        if (suit in SUITS) and (rank in RANKS):\n            self.suit = suit\n            self.rank = rank\n        else:\n            self.suit = None",
    "detail": "by-extension.python.blackJackGUI",
    "documentation": {}
  },
  {
    "label": "RANKS",
    "kind": 5,
    "importPath": "by-extension.python.blackJackGUI",
    "description": "by-extension.python.blackJackGUI",
    "peekOfCode": "RANKS = ('A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K')\nVALUES = {'A': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'T': 10, 'J': 10, 'Q': 10, 'K': 10}\nclass Card:\n    def __init__(self, suit, rank):\n        if (suit in SUITS) and (rank in RANKS):\n            self.suit = suit\n            self.rank = rank\n        else:\n            self.suit = None\n            self.rank = None",
    "detail": "by-extension.python.blackJackGUI",
    "documentation": {}
  },
  {
    "label": "VALUES",
    "kind": 5,
    "importPath": "by-extension.python.blackJackGUI",
    "description": "by-extension.python.blackJackGUI",
    "peekOfCode": "VALUES = {'A': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'T': 10, 'J': 10, 'Q': 10, 'K': 10}\nclass Card:\n    def __init__(self, suit, rank):\n        if (suit in SUITS) and (rank in RANKS):\n            self.suit = suit\n            self.rank = rank\n        else:\n            self.suit = None\n            self.rank = None\n            print((\"Invalid card: \", suit, rank))",
    "detail": "by-extension.python.blackJackGUI",
    "documentation": {}
  },
  {
    "label": "frame",
    "kind": 5,
    "importPath": "by-extension.python.blackJackGUI",
    "description": "by-extension.python.blackJackGUI",
    "peekOfCode": "frame = simplegui.create_frame(\"Blackjack\", 600, 600)\nframe.set_canvas_background(\"Green\")\nframe.add_button(\"Deal\", deal, 200)\nframe.add_button(\"Hit\", hit, 200)\nframe.add_button(\"Stand\", stand, 200)\nframe.set_draw_handler(draw)\ndeal()\nframe.start()",
    "detail": "by-extension.python.blackJackGUI",
    "documentation": {}
  },
  {
    "label": "Colour",
    "kind": 6,
    "importPath": "by-extension.python.blackjack_rr",
    "description": "by-extension.python.blackjack_rr",
    "peekOfCode": "class Colour:\n    BLACK = '\\033[30m'\n    RED = '\\033[91m'\n    GREEN = '\\033[32m'\n    END = '\\033[0m'\nsuits = (Colour.RED +  'Hearts' + Colour.END, Colour.RED + 'Diamonds' + Colour.END, Colour.BLACK + 'Spades' + Colour.END, Colour.BLACK + 'Clubs' + Colour.END)\nranks = ('Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'Ten', 'Jack', 'Queen', 'King', 'Ace')\nvalues = {'Two': 2, 'Three': 3, 'Four': 4, 'Five': 5, 'Six': 6, 'Seven': 7, 'Eight': 8,\n          'Nine': 9, 'Ten': 10, 'Jack': 10, 'Queen': 10, 'King': 10, 'Ace': 11}\nplaying = True",
    "detail": "by-extension.python.blackjack_rr",
    "documentation": {}
  },
  {
    "label": "Card",
    "kind": 6,
    "importPath": "by-extension.python.blackjack_rr",
    "description": "by-extension.python.blackjack_rr",
    "peekOfCode": "class Card:\n    def __init__(self, suit, rank):\n        self.suit = suit\n        self.rank = rank\n    def __str__(self):\n        return self.rank + ' of ' + self.suit\nclass Deck:\n    def __init__(self):\n        self.deck = []\n        for suit in suits:",
    "detail": "by-extension.python.blackjack_rr",
    "documentation": {}
  },
  {
    "label": "Deck",
    "kind": 6,
    "importPath": "by-extension.python.blackjack_rr",
    "description": "by-extension.python.blackjack_rr",
    "peekOfCode": "class Deck:\n    def __init__(self):\n        self.deck = []\n        for suit in suits:\n            for rank in ranks:\n                self.deck.append(Card(suit, rank))\n    def __str__(self):\n        deck_comp = ''\n        for card in self.deck:\n            deck_comp += '\\n ' + card.__str__()",
    "detail": "by-extension.python.blackjack_rr",
    "documentation": {}
  },
  {
    "label": "Hand",
    "kind": 6,
    "importPath": "by-extension.python.blackjack_rr",
    "description": "by-extension.python.blackjack_rr",
    "peekOfCode": "class Hand:\n    def __init__(self):\n        self.cards = []\n        self.value = 0\n        self.aces = 0  # to keep track of aces\n    def add_card(self, card):\n        self.cards.append(card)\n        self.value += values[card.rank]\n        if card.rank == 'Ace':\n            self.aces += 1",
    "detail": "by-extension.python.blackjack_rr",
    "documentation": {}
  },
  {
    "label": "Chips",
    "kind": 6,
    "importPath": "by-extension.python.blackjack_rr",
    "description": "by-extension.python.blackjack_rr",
    "peekOfCode": "class Chips:\n    def __init__(self):\n        self.total = 100\n        self.bet = 0\n    def win_bet(self):\n        self.total += self.bet\n    def lose_bet(self):\n        self.total -= self.bet\ndef take_bet(chips):\n    while True:",
    "detail": "by-extension.python.blackjack_rr",
    "documentation": {}
  },
  {
    "label": "take_bet",
    "kind": 2,
    "importPath": "by-extension.python.blackjack_rr",
    "description": "by-extension.python.blackjack_rr",
    "peekOfCode": "def take_bet(chips):\n    while True:\n        try:\n            chips.bet = int(input('How many chips would you like to bet? '))\n        except ValueError:\n            print('Your bet must be an integer! Try again.')\n        else:\n            if chips.bet > chips.total or chips.bet <= 0:\n                print(\n                    \"Your bet cannot exceed your balance and you have to enter a positive bet! Your current balance is: \",",
    "detail": "by-extension.python.blackjack_rr",
    "documentation": {}
  },
  {
    "label": "hit",
    "kind": 2,
    "importPath": "by-extension.python.blackjack_rr",
    "description": "by-extension.python.blackjack_rr",
    "peekOfCode": "def hit(deck, hand):\n    hand.add_card(deck.deal())\n    hand.adjust_for_ace()\ndef hit_or_stand(deck, hand):\n    global playing\n    while True:\n        x = input(\"Would you like to Hit or Stand? Enter '1' or '0' \")\n        if x.lower() == '1':\n            hit(deck, hand)\n        elif x.lower() == '0':",
    "detail": "by-extension.python.blackjack_rr",
    "documentation": {}
  },
  {
    "label": "hit_or_stand",
    "kind": 2,
    "importPath": "by-extension.python.blackjack_rr",
    "description": "by-extension.python.blackjack_rr",
    "peekOfCode": "def hit_or_stand(deck, hand):\n    global playing\n    while True:\n        x = input(\"Would you like to Hit or Stand? Enter '1' or '0' \")\n        if x.lower() == '1':\n            hit(deck, hand)\n        elif x.lower() == '0':\n            print(\"You chose to stand. Dealer will hit.\")\n            playing = False\n        else:",
    "detail": "by-extension.python.blackjack_rr",
    "documentation": {}
  },
  {
    "label": "show_some",
    "kind": 2,
    "importPath": "by-extension.python.blackjack_rr",
    "description": "by-extension.python.blackjack_rr",
    "peekOfCode": "def show_some(player, dealer):\n    print(\"\\nDealer's Hand:\")\n    print(\" { hidden card }\")\n    print('', dealer.cards[1])\n    print(\"\\nYour Hand:\", *player.cards, sep='\\n ')\ndef show_all(player, dealer):\n    print(\"\\nDealer's Hand:\", *dealer.cards, sep='\\n ')\n    print(\"Dealer's Hand =\", dealer.value)\n    print(\"\\nYour Hand:\", *player.cards, sep='\\n ')\n    print(\"Your Hand =\", player.value)",
    "detail": "by-extension.python.blackjack_rr",
    "documentation": {}
  },
  {
    "label": "show_all",
    "kind": 2,
    "importPath": "by-extension.python.blackjack_rr",
    "description": "by-extension.python.blackjack_rr",
    "peekOfCode": "def show_all(player, dealer):\n    print(\"\\nDealer's Hand:\", *dealer.cards, sep='\\n ')\n    print(\"Dealer's Hand =\", dealer.value)\n    print(\"\\nYour Hand:\", *player.cards, sep='\\n ')\n    print(\"Your Hand =\", player.value)\ndef player_busts(player, dealer, chips):\n    print(\"You are BUSTED !\")\n    chips.lose_bet()\ndef player_wins(player, dealer, chips):\n    print(\"You are the winner!\")",
    "detail": "by-extension.python.blackjack_rr",
    "documentation": {}
  },
  {
    "label": "player_busts",
    "kind": 2,
    "importPath": "by-extension.python.blackjack_rr",
    "description": "by-extension.python.blackjack_rr",
    "peekOfCode": "def player_busts(player, dealer, chips):\n    print(\"You are BUSTED !\")\n    chips.lose_bet()\ndef player_wins(player, dealer, chips):\n    print(\"You are the winner!\")\n    chips.win_bet()\ndef dealer_busts(player, dealer, chips):\n    print(\"Dealer has BUSTED !\")\n    chips.win_bet()\ndef dealer_wins(player, dealer, chips):",
    "detail": "by-extension.python.blackjack_rr",
    "documentation": {}
  },
  {
    "label": "player_wins",
    "kind": 2,
    "importPath": "by-extension.python.blackjack_rr",
    "description": "by-extension.python.blackjack_rr",
    "peekOfCode": "def player_wins(player, dealer, chips):\n    print(\"You are the winner!\")\n    chips.win_bet()\ndef dealer_busts(player, dealer, chips):\n    print(\"Dealer has BUSTED !\")\n    chips.win_bet()\ndef dealer_wins(player, dealer, chips):\n    print(\"Dealer is the winner!\")\n    chips.lose_bet()\ndef push(player, dealer):",
    "detail": "by-extension.python.blackjack_rr",
    "documentation": {}
  },
  {
    "label": "dealer_busts",
    "kind": 2,
    "importPath": "by-extension.python.blackjack_rr",
    "description": "by-extension.python.blackjack_rr",
    "peekOfCode": "def dealer_busts(player, dealer, chips):\n    print(\"Dealer has BUSTED !\")\n    chips.win_bet()\ndef dealer_wins(player, dealer, chips):\n    print(\"Dealer is the winner!\")\n    chips.lose_bet()\ndef push(player, dealer):\n    print(\"The match is tie !\")\n# GAMEPLAY\nplayer_chips = Chips()",
    "detail": "by-extension.python.blackjack_rr",
    "documentation": {}
  },
  {
    "label": "dealer_wins",
    "kind": 2,
    "importPath": "by-extension.python.blackjack_rr",
    "description": "by-extension.python.blackjack_rr",
    "peekOfCode": "def dealer_wins(player, dealer, chips):\n    print(\"Dealer is the winner!\")\n    chips.lose_bet()\ndef push(player, dealer):\n    print(\"The match is tie !\")\n# GAMEPLAY\nplayer_chips = Chips()\nwhile True:\n    print(\"\\t              **********************************************************\")\n    print(",
    "detail": "by-extension.python.blackjack_rr",
    "documentation": {}
  },
  {
    "label": "push",
    "kind": 2,
    "importPath": "by-extension.python.blackjack_rr",
    "description": "by-extension.python.blackjack_rr",
    "peekOfCode": "def push(player, dealer):\n    print(\"The match is tie !\")\n# GAMEPLAY\nplayer_chips = Chips()\nwhile True:\n    print(\"\\t              **********************************************************\")\n    print(\n        \"\\t                       Welcome to the game Casino - BLACK JACK !                                                     \")\n    print(\"\\t              **********************************************************\")\n    print(Colour.BLACK + \"\\t                                   ***************\")",
    "detail": "by-extension.python.blackjack_rr",
    "documentation": {}
  },
  {
    "label": "suits",
    "kind": 5,
    "importPath": "by-extension.python.blackjack_rr",
    "description": "by-extension.python.blackjack_rr",
    "peekOfCode": "suits = (Colour.RED +  'Hearts' + Colour.END, Colour.RED + 'Diamonds' + Colour.END, Colour.BLACK + 'Spades' + Colour.END, Colour.BLACK + 'Clubs' + Colour.END)\nranks = ('Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'Ten', 'Jack', 'Queen', 'King', 'Ace')\nvalues = {'Two': 2, 'Three': 3, 'Four': 4, 'Five': 5, 'Six': 6, 'Seven': 7, 'Eight': 8,\n          'Nine': 9, 'Ten': 10, 'Jack': 10, 'Queen': 10, 'King': 10, 'Ace': 11}\nplaying = True\nclass Card:\n    def __init__(self, suit, rank):\n        self.suit = suit\n        self.rank = rank\n    def __str__(self):",
    "detail": "by-extension.python.blackjack_rr",
    "documentation": {}
  },
  {
    "label": "ranks",
    "kind": 5,
    "importPath": "by-extension.python.blackjack_rr",
    "description": "by-extension.python.blackjack_rr",
    "peekOfCode": "ranks = ('Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'Ten', 'Jack', 'Queen', 'King', 'Ace')\nvalues = {'Two': 2, 'Three': 3, 'Four': 4, 'Five': 5, 'Six': 6, 'Seven': 7, 'Eight': 8,\n          'Nine': 9, 'Ten': 10, 'Jack': 10, 'Queen': 10, 'King': 10, 'Ace': 11}\nplaying = True\nclass Card:\n    def __init__(self, suit, rank):\n        self.suit = suit\n        self.rank = rank\n    def __str__(self):\n        return self.rank + ' of ' + self.suit",
    "detail": "by-extension.python.blackjack_rr",
    "documentation": {}
  },
  {
    "label": "values",
    "kind": 5,
    "importPath": "by-extension.python.blackjack_rr",
    "description": "by-extension.python.blackjack_rr",
    "peekOfCode": "values = {'Two': 2, 'Three': 3, 'Four': 4, 'Five': 5, 'Six': 6, 'Seven': 7, 'Eight': 8,\n          'Nine': 9, 'Ten': 10, 'Jack': 10, 'Queen': 10, 'King': 10, 'Ace': 11}\nplaying = True\nclass Card:\n    def __init__(self, suit, rank):\n        self.suit = suit\n        self.rank = rank\n    def __str__(self):\n        return self.rank + ' of ' + self.suit\nclass Deck:",
    "detail": "by-extension.python.blackjack_rr",
    "documentation": {}
  },
  {
    "label": "playing",
    "kind": 5,
    "importPath": "by-extension.python.blackjack_rr",
    "description": "by-extension.python.blackjack_rr",
    "peekOfCode": "playing = True\nclass Card:\n    def __init__(self, suit, rank):\n        self.suit = suit\n        self.rank = rank\n    def __str__(self):\n        return self.rank + ' of ' + self.suit\nclass Deck:\n    def __init__(self):\n        self.deck = []",
    "detail": "by-extension.python.blackjack_rr",
    "documentation": {}
  },
  {
    "label": "player_chips",
    "kind": 5,
    "importPath": "by-extension.python.blackjack_rr",
    "description": "by-extension.python.blackjack_rr",
    "peekOfCode": "player_chips = Chips()\nwhile True:\n    print(\"\\t              **********************************************************\")\n    print(\n        \"\\t                       Welcome to the game Casino - BLACK JACK !                                                     \")\n    print(\"\\t              **********************************************************\")\n    print(Colour.BLACK + \"\\t                                   ***************\")\n    print(\"\\t                                   * A           *\")\n    print(\"\\t                                   *             *\")\n    print(\"\\t                                   *      *      *\")",
    "detail": "by-extension.python.blackjack_rr",
    "documentation": {}
  },
  {
    "label": "response",
    "kind": 5,
    "importPath": "by-extension.python.blogscraping",
    "description": "by-extension.python.blogscraping",
    "peekOfCode": "response = requests.get('http://codedemos.com/sampleblog/')\nsoup = BeautifulSoup(response.text, 'html.parser')\nposts = soup.find_all(class_='post-preview')\nwith open('posts.csv', 'w') as csv_file:\n    csv_writer = writer(csv_file)\n    headers = ['Title', 'Link', 'Date']\n    csv_writer.writerow(headers)\n    for post in posts:\n        title = post.find(class_='post-title').get_text().replace('\\n', '')\n        link = post.find('a')['href']",
    "detail": "by-extension.python.blogscraping",
    "documentation": {}
  },
  {
    "label": "soup",
    "kind": 5,
    "importPath": "by-extension.python.blogscraping",
    "description": "by-extension.python.blogscraping",
    "peekOfCode": "soup = BeautifulSoup(response.text, 'html.parser')\nposts = soup.find_all(class_='post-preview')\nwith open('posts.csv', 'w') as csv_file:\n    csv_writer = writer(csv_file)\n    headers = ['Title', 'Link', 'Date']\n    csv_writer.writerow(headers)\n    for post in posts:\n        title = post.find(class_='post-title').get_text().replace('\\n', '')\n        link = post.find('a')['href']\n        date = post.select('.post-date')[0].get_text()",
    "detail": "by-extension.python.blogscraping",
    "documentation": {}
  },
  {
    "label": "posts",
    "kind": 5,
    "importPath": "by-extension.python.blogscraping",
    "description": "by-extension.python.blogscraping",
    "peekOfCode": "posts = soup.find_all(class_='post-preview')\nwith open('posts.csv', 'w') as csv_file:\n    csv_writer = writer(csv_file)\n    headers = ['Title', 'Link', 'Date']\n    csv_writer.writerow(headers)\n    for post in posts:\n        title = post.find(class_='post-title').get_text().replace('\\n', '')\n        link = post.find('a')['href']\n        date = post.select('.post-date')[0].get_text()\n        csv_writer.writerow([title, link, date])",
    "detail": "by-extension.python.blogscraping",
    "documentation": {}
  },
  {
    "label": "SequenceLabelling",
    "kind": 6,
    "importPath": "by-extension.python.blog_tensorflow_sequence_labelling",
    "description": "by-extension.python.blog_tensorflow_sequence_labelling",
    "peekOfCode": "class SequenceLabelling:\n    def __init__(self, data, target, dropout, num_hidden=200, num_layers=3):\n        self.data = data\n        self.target = target\n        self.dropout = dropout\n        self._num_hidden = num_hidden\n        self._num_layers = num_layers\n        self.prediction\n        self.error\n        self.optimize",
    "detail": "by-extension.python.blog_tensorflow_sequence_labelling",
    "documentation": {}
  },
  {
    "label": "lazy_property",
    "kind": 2,
    "importPath": "by-extension.python.blog_tensorflow_sequence_labelling",
    "description": "by-extension.python.blog_tensorflow_sequence_labelling",
    "peekOfCode": "def lazy_property(function):\n    attribute = '_' + function.__name__\n    @property\n    @functools.wraps(function)\n    def wrapper(self):\n        if not hasattr(self, attribute):\n            setattr(self, attribute, function(self))\n        return getattr(self, attribute)\n    return wrapper\nclass SequenceLabelling:",
    "detail": "by-extension.python.blog_tensorflow_sequence_labelling",
    "documentation": {}
  },
  {
    "label": "read_dataset",
    "kind": 2,
    "importPath": "by-extension.python.blog_tensorflow_sequence_labelling",
    "description": "by-extension.python.blog_tensorflow_sequence_labelling",
    "peekOfCode": "def read_dataset():\n    dataset = sets.Ocr()\n    dataset = sets.OneHot(dataset.target, depth=2)(dataset, columns=['target'])\n    dataset['data'] = dataset.data.reshape(\n        dataset.data.shape[:-2] + (-1,)).astype(float)\n    train, test = sets.Split(0.66)(dataset)\n    return train, test\nif __name__ == '__main__':\n    train, test = read_dataset()\n    _, length, image_size = train.data.shape",
    "detail": "by-extension.python.blog_tensorflow_sequence_labelling",
    "documentation": {}
  },
  {
    "label": {
      "name": "",
      "kind": 2,
      "peekOfCode": "def  DBZ():\n    # IF  NO.  OF  BOOKS  IS     ZERO(0)     THAN  DELETE  IT  AUTOMATICALLY\n    display=\"select * from books\"\n    mycur.execute(display)\n    data2=mycur.fetchall()\n    for y in data2:\n        if y[6]<=0:\n            delete=\"delete from books where  Numbers_of_book<=0\"\n            mycur.execute(delete)\n            mycon.commit()"
    },
    "kind": 2,
    "importPath": "by-extension.python.bookstore_manangement_system",
    "description": "by-extension.python.bookstore_manangement_system",
    "peekOfCode": "def  DBZ():\n    # IF  NO.  OF  BOOKS  IS     ZERO(0)     THAN  DELETE  IT  AUTOMATICALLY\n    display=\"select * from books\"\n    mycur.execute(display)\n    data2=mycur.fetchall()\n    for y in data2:\n        if y[6]<=0:\n            delete=\"delete from books where  Numbers_of_book<=0\"\n            mycur.execute(delete)\n            mycon.commit()",
    "detail": "by-extension.python.bookstore_manangement_system",
    "documentation": {}
  },
  {
    "label": "separator",
    "kind": 2,
    "importPath": "by-extension.python.bookstore_manangement_system",
    "description": "by-extension.python.bookstore_manangement_system",
    "peekOfCode": "def separator():\n    print()\n    print(\"\\t\\t========================================\")\n    print()\ndef end_separator():\n    print()\n    print()",
    "detail": "by-extension.python.bookstore_manangement_system",
    "documentation": {}
  },
  {
    "label": "end_separator",
    "kind": 2,
    "importPath": "by-extension.python.bookstore_manangement_system",
    "description": "by-extension.python.bookstore_manangement_system",
    "peekOfCode": "def end_separator():\n    print()\n    print()\ndef   login():\n    user_name=input(\" USER NAME  ---  \")\n    passw=input(\" PASSWORD  ---  \")\n    display='select * from login'\n    mycur.execute(display)",
    "detail": "by-extension.python.bookstore_manangement_system",
    "documentation": {}
  },
  {
    "label": {
      "name": "",
      "kind": 2,
      "peekOfCode": "def   login():\n    user_name=input(\" USER NAME  ---  \")\n    passw=input(\" PASSWORD  ---  \")\n    display='select * from login'\n    mycur.execute(display)\n    data2=mycur.fetchall()\n    for y in data2:\n        if y[1]==user_name  and  y[2]==passw:\n            pass\n        else:"
    },
    "kind": 2,
    "importPath": "by-extension.python.bookstore_manangement_system",
    "description": "by-extension.python.bookstore_manangement_system",
    "peekOfCode": "def   login():\n    user_name=input(\" USER NAME  ---  \")\n    passw=input(\" PASSWORD  ---  \")\n    display='select * from login'\n    mycur.execute(display)\n    data2=mycur.fetchall()\n    for y in data2:\n        if y[1]==user_name  and  y[2]==passw:\n            pass\n        else:",
    "detail": "by-extension.python.bookstore_manangement_system",
    "documentation": {}
  },
  {
    "label": "ViewAll",
    "kind": 2,
    "importPath": "by-extension.python.bookstore_manangement_system",
    "description": "by-extension.python.bookstore_manangement_system",
    "peekOfCode": "def ViewAll():\n    print(\"\\u0332\".join(\"BOOK NAMES~~\"))\n    print(\"------------------------------------\")\n    display='select * from books'\n    mycur.execute(display)\n    data2=mycur.fetchall()\n    c=0\n    for y in data2:\n        c=c+1\n        print(c,\"-->\",y[1])",
    "detail": "by-extension.python.bookstore_manangement_system",
    "documentation": {}
  },
  {
    "label": {
      "name": "",
      "kind": 2,
      "peekOfCode": "def  CNB1():\n    if y[6]==0:\n        separator()\n        print(\" NOW  THIS  BOOK  IS  NOT  AVAILABLE \")\n    elif y[6]>0 and y[6]<=8:\n        separator()\n        print(\"WARNING!!!!!!!!!!!!!!!!!!!!!!!\")\n        print(\"NO.  OF THIS BOOK IS LOW\",\"\\tONLY\",y[6]-1,\"LEFT\")\n        print()"
    },
    "kind": 2,
    "importPath": "by-extension.python.bookstore_manangement_system",
    "description": "by-extension.python.bookstore_manangement_system",
    "peekOfCode": "def  CNB1():\n    if y[6]==0:\n        separator()\n        print(\" NOW  THIS  BOOK  IS  NOT  AVAILABLE \")\n    elif y[6]>0 and y[6]<=8:\n        separator()\n        print(\"WARNING!!!!!!!!!!!!!!!!!!!!!!!\")\n        print(\"NO.  OF THIS BOOK IS LOW\",\"\\tONLY\",y[6]-1,\"LEFT\")\n        print()",
    "detail": "by-extension.python.bookstore_manangement_system",
    "documentation": {}
  },
  {
    "label": {
      "name": "",
      "kind": 2,
      "peekOfCode": "def  CNB2():\n    if y[6]<=8:\n        separator()\n        print(\"WARNING!!!!!!!!!!!!!!!!!!!!!!!\")\n        print(\"NO.  OF THIS BOOK IS LOW\",\"\\tONLY\",y[6],\"LEFT\")\n    else:\n        separator()\n        print(\"NO.  OF  BOOKS  LEFT  IS \",y[6])"
    },
    "kind": 2,
    "importPath": "by-extension.python.bookstore_manangement_system",
    "description": "by-extension.python.bookstore_manangement_system",
    "peekOfCode": "def  CNB2():\n    if y[6]<=8:\n        separator()\n        print(\"WARNING!!!!!!!!!!!!!!!!!!!!!!!\")\n        print(\"NO.  OF THIS BOOK IS LOW\",\"\\tONLY\",y[6],\"LEFT\")\n    else:\n        separator()\n        print(\"NO.  OF  BOOKS  LEFT  IS \",y[6])",
    "detail": "by-extension.python.bookstore_manangement_system",
    "documentation": {}
  },
  {
    "label": "Ball",
    "kind": 6,
    "importPath": "by-extension.python.brickout-game",
    "description": "by-extension.python.brickout-game",
    "peekOfCode": "class Ball(object):\n    def __init__(self, screen, radius, x, y):\n        self.__screen = screen\n        self._radius = radius\n        self._xLoc = x\n        self._yLoc = y\n        self.__xVel = 7\n        self.__yVel = 2\n        w, h = pygame.display.get_surface().get_size()\n        self.__width = w",
    "detail": "by-extension.python.brickout-game",
    "documentation": {}
  },
  {
    "label": "Paddle",
    "kind": 6,
    "importPath": "by-extension.python.brickout-game",
    "description": "by-extension.python.brickout-game",
    "peekOfCode": "class Paddle(object):\n    def __init__(self, screen, width, height, x, y):\n        self.__screen = screen\n        self._width = width\n        self._height = height\n        self._xLoc = x\n        self._yLoc = y\n        w, h = pygame.display.get_surface().get_size()\n        self.__W = w\n        self.__H = h",
    "detail": "by-extension.python.brickout-game",
    "documentation": {}
  },
  {
    "label": "Brick",
    "kind": 6,
    "importPath": "by-extension.python.brickout-game",
    "description": "by-extension.python.brickout-game",
    "peekOfCode": "class Brick(pygame.sprite.Sprite):\n    def __init__(self, screen, width, height, x, y):\n        self.__screen = screen\n        self._width = width\n        self._height = height\n        self._xLoc = x\n        self._yLoc = y\n        w, h = pygame.display.get_surface().get_size()\n        self.__W = w\n        self.__H = h",
    "detail": "by-extension.python.brickout-game",
    "documentation": {}
  },
  {
    "label": "BrickWall",
    "kind": 6,
    "importPath": "by-extension.python.brickout-game",
    "description": "by-extension.python.brickout-game",
    "peekOfCode": "class BrickWall(pygame.sprite.Group):\n    def __init__(self, screen, x, y, width, height):\n        self.__screen = screen\n        self._x = x\n        self._y = y\n        self._width = width\n        self._height = height\n        self._bricks = []\n        X = x\n        Y = y",
    "detail": "by-extension.python.brickout-game",
    "documentation": {}
  },
  {
    "label": "BLACK",
    "kind": 5,
    "importPath": "by-extension.python.brickout-game",
    "description": "by-extension.python.brickout-game",
    "peekOfCode": "BLACK = (0, 0, 0)\nWHITE = (255, 255, 255)\nGREEN = (0, 255, 0)\nRED = (255, 0, 0)\npygame.init()\n# Setting the width and height of the screen [width, height]\nsize = (700, 500)\nscreen = pygame.display.set_mode(size)\n\"\"\"\n    This is a simple Ball class for respresenting a ball ",
    "detail": "by-extension.python.brickout-game",
    "documentation": {}
  },
  {
    "label": "WHITE",
    "kind": 5,
    "importPath": "by-extension.python.brickout-game",
    "description": "by-extension.python.brickout-game",
    "peekOfCode": "WHITE = (255, 255, 255)\nGREEN = (0, 255, 0)\nRED = (255, 0, 0)\npygame.init()\n# Setting the width and height of the screen [width, height]\nsize = (700, 500)\nscreen = pygame.display.set_mode(size)\n\"\"\"\n    This is a simple Ball class for respresenting a ball \n    in the game. ",
    "detail": "by-extension.python.brickout-game",
    "documentation": {}
  },
  {
    "label": "GREEN",
    "kind": 5,
    "importPath": "by-extension.python.brickout-game",
    "description": "by-extension.python.brickout-game",
    "peekOfCode": "GREEN = (0, 255, 0)\nRED = (255, 0, 0)\npygame.init()\n# Setting the width and height of the screen [width, height]\nsize = (700, 500)\nscreen = pygame.display.set_mode(size)\n\"\"\"\n    This is a simple Ball class for respresenting a ball \n    in the game. \n\"\"\"",
    "detail": "by-extension.python.brickout-game",
    "documentation": {}
  },
  {
    "label": "RED",
    "kind": 5,
    "importPath": "by-extension.python.brickout-game",
    "description": "by-extension.python.brickout-game",
    "peekOfCode": "RED = (255, 0, 0)\npygame.init()\n# Setting the width and height of the screen [width, height]\nsize = (700, 500)\nscreen = pygame.display.set_mode(size)\n\"\"\"\n    This is a simple Ball class for respresenting a ball \n    in the game. \n\"\"\"\nclass Ball(object):",
    "detail": "by-extension.python.brickout-game",
    "documentation": {}
  },
  {
    "label": "size",
    "kind": 5,
    "importPath": "by-extension.python.brickout-game",
    "description": "by-extension.python.brickout-game",
    "peekOfCode": "size = (700, 500)\nscreen = pygame.display.set_mode(size)\n\"\"\"\n    This is a simple Ball class for respresenting a ball \n    in the game. \n\"\"\"\nclass Ball(object):\n    def __init__(self, screen, radius, x, y):\n        self.__screen = screen\n        self._radius = radius",
    "detail": "by-extension.python.brickout-game",
    "documentation": {}
  },
  {
    "label": "screen",
    "kind": 5,
    "importPath": "by-extension.python.brickout-game",
    "description": "by-extension.python.brickout-game",
    "peekOfCode": "screen = pygame.display.set_mode(size)\n\"\"\"\n    This is a simple Ball class for respresenting a ball \n    in the game. \n\"\"\"\nclass Ball(object):\n    def __init__(self, screen, radius, x, y):\n        self.__screen = screen\n        self._radius = radius\n        self._xLoc = x",
    "detail": "by-extension.python.brickout-game",
    "documentation": {}
  },
  {
    "label": "ball",
    "kind": 5,
    "importPath": "by-extension.python.brickout-game",
    "description": "by-extension.python.brickout-game",
    "peekOfCode": "ball = Ball(screen, 25, random.randint(1, 700), 250)\npaddle = Paddle(screen, 100, 20, 250, 450)\nbrickWall = BrickWall(screen, 25, 25, 150, 50)\nisGameOver = False  # determines whether game is lose\ngameStatus = True  # game is still running\nscore = 0  # score for the game.\npygame.display.set_caption(\"Brickout-game\")\n# Loop until the user clicks the close button.\ndone = False\n# Used to manage how fast the screen updates",
    "detail": "by-extension.python.brickout-game",
    "documentation": {}
  },
  {
    "label": "paddle",
    "kind": 5,
    "importPath": "by-extension.python.brickout-game",
    "description": "by-extension.python.brickout-game",
    "peekOfCode": "paddle = Paddle(screen, 100, 20, 250, 450)\nbrickWall = BrickWall(screen, 25, 25, 150, 50)\nisGameOver = False  # determines whether game is lose\ngameStatus = True  # game is still running\nscore = 0  # score for the game.\npygame.display.set_caption(\"Brickout-game\")\n# Loop until the user clicks the close button.\ndone = False\n# Used to manage how fast the screen updates\nclock = pygame.time.Clock()",
    "detail": "by-extension.python.brickout-game",
    "documentation": {}
  },
  {
    "label": "brickWall",
    "kind": 5,
    "importPath": "by-extension.python.brickout-game",
    "description": "by-extension.python.brickout-game",
    "peekOfCode": "brickWall = BrickWall(screen, 25, 25, 150, 50)\nisGameOver = False  # determines whether game is lose\ngameStatus = True  # game is still running\nscore = 0  # score for the game.\npygame.display.set_caption(\"Brickout-game\")\n# Loop until the user clicks the close button.\ndone = False\n# Used to manage how fast the screen updates\nclock = pygame.time.Clock()\n# for displaying text in the game ",
    "detail": "by-extension.python.brickout-game",
    "documentation": {}
  },
  {
    "label": "isGameOver",
    "kind": 5,
    "importPath": "by-extension.python.brickout-game",
    "description": "by-extension.python.brickout-game",
    "peekOfCode": "isGameOver = False  # determines whether game is lose\ngameStatus = True  # game is still running\nscore = 0  # score for the game.\npygame.display.set_caption(\"Brickout-game\")\n# Loop until the user clicks the close button.\ndone = False\n# Used to manage how fast the screen updates\nclock = pygame.time.Clock()\n# for displaying text in the game \npygame.font.init()  # you have to call this at the start,",
    "detail": "by-extension.python.brickout-game",
    "documentation": {}
  },
  {
    "label": "gameStatus",
    "kind": 5,
    "importPath": "by-extension.python.brickout-game",
    "description": "by-extension.python.brickout-game",
    "peekOfCode": "gameStatus = True  # game is still running\nscore = 0  # score for the game.\npygame.display.set_caption(\"Brickout-game\")\n# Loop until the user clicks the close button.\ndone = False\n# Used to manage how fast the screen updates\nclock = pygame.time.Clock()\n# for displaying text in the game \npygame.font.init()  # you have to call this at the start,\n# if you want to use this module.",
    "detail": "by-extension.python.brickout-game",
    "documentation": {}
  },
  {
    "label": "score",
    "kind": 5,
    "importPath": "by-extension.python.brickout-game",
    "description": "by-extension.python.brickout-game",
    "peekOfCode": "score = 0  # score for the game.\npygame.display.set_caption(\"Brickout-game\")\n# Loop until the user clicks the close button.\ndone = False\n# Used to manage how fast the screen updates\nclock = pygame.time.Clock()\n# for displaying text in the game \npygame.font.init()  # you have to call this at the start,\n# if you want to use this module.\n# message for game over",
    "detail": "by-extension.python.brickout-game",
    "documentation": {}
  },
  {
    "label": "done",
    "kind": 5,
    "importPath": "by-extension.python.brickout-game",
    "description": "by-extension.python.brickout-game",
    "peekOfCode": "done = False\n# Used to manage how fast the screen updates\nclock = pygame.time.Clock()\n# for displaying text in the game \npygame.font.init()  # you have to call this at the start,\n# if you want to use this module.\n# message for game over\nmgGameOver = pygame.font.SysFont('Comic Sans MS', 40)\n# message for winning the game.\nmgWin = pygame.font.SysFont('Comic Sans MS', 40)",
    "detail": "by-extension.python.brickout-game",
    "documentation": {}
  },
  {
    "label": "clock",
    "kind": 5,
    "importPath": "by-extension.python.brickout-game",
    "description": "by-extension.python.brickout-game",
    "peekOfCode": "clock = pygame.time.Clock()\n# for displaying text in the game \npygame.font.init()  # you have to call this at the start,\n# if you want to use this module.\n# message for game over\nmgGameOver = pygame.font.SysFont('Comic Sans MS', 40)\n# message for winning the game.\nmgWin = pygame.font.SysFont('Comic Sans MS', 40)\n# message for score\nmgScore = pygame.font.SysFont('Comic Sans MS', 40)",
    "detail": "by-extension.python.brickout-game",
    "documentation": {}
  },
  {
    "label": "mgGameOver",
    "kind": 5,
    "importPath": "by-extension.python.brickout-game",
    "description": "by-extension.python.brickout-game",
    "peekOfCode": "mgGameOver = pygame.font.SysFont('Comic Sans MS', 40)\n# message for winning the game.\nmgWin = pygame.font.SysFont('Comic Sans MS', 40)\n# message for score\nmgScore = pygame.font.SysFont('Comic Sans MS', 40)\ntextsurfaceGameOver = mgGameOver.render('Game Over!', False, (0, 0, 0))\ntextsurfaceWin = mgWin.render(\"You win!\", False, (0, 0, 0))\ntextsurfaceScore = mgScore.render(\"score: \" + str(score), False, (0, 0, 0))\n# -------- Main Program Loop -----------\nwhile not done:",
    "detail": "by-extension.python.brickout-game",
    "documentation": {}
  },
  {
    "label": "mgWin",
    "kind": 5,
    "importPath": "by-extension.python.brickout-game",
    "description": "by-extension.python.brickout-game",
    "peekOfCode": "mgWin = pygame.font.SysFont('Comic Sans MS', 40)\n# message for score\nmgScore = pygame.font.SysFont('Comic Sans MS', 40)\ntextsurfaceGameOver = mgGameOver.render('Game Over!', False, (0, 0, 0))\ntextsurfaceWin = mgWin.render(\"You win!\", False, (0, 0, 0))\ntextsurfaceScore = mgScore.render(\"score: \" + str(score), False, (0, 0, 0))\n# -------- Main Program Loop -----------\nwhile not done:\n    # --- Main event loop\n    for event in pygame.event.get():",
    "detail": "by-extension.python.brickout-game",
    "documentation": {}
  },
  {
    "label": "mgScore",
    "kind": 5,
    "importPath": "by-extension.python.brickout-game",
    "description": "by-extension.python.brickout-game",
    "peekOfCode": "mgScore = pygame.font.SysFont('Comic Sans MS', 40)\ntextsurfaceGameOver = mgGameOver.render('Game Over!', False, (0, 0, 0))\ntextsurfaceWin = mgWin.render(\"You win!\", False, (0, 0, 0))\ntextsurfaceScore = mgScore.render(\"score: \" + str(score), False, (0, 0, 0))\n# -------- Main Program Loop -----------\nwhile not done:\n    # --- Main event loop\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            done = True",
    "detail": "by-extension.python.brickout-game",
    "documentation": {}
  },
  {
    "label": "textsurfaceGameOver",
    "kind": 5,
    "importPath": "by-extension.python.brickout-game",
    "description": "by-extension.python.brickout-game",
    "peekOfCode": "textsurfaceGameOver = mgGameOver.render('Game Over!', False, (0, 0, 0))\ntextsurfaceWin = mgWin.render(\"You win!\", False, (0, 0, 0))\ntextsurfaceScore = mgScore.render(\"score: \" + str(score), False, (0, 0, 0))\n# -------- Main Program Loop -----------\nwhile not done:\n    # --- Main event loop\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            done = True\n    # --- Game logic should go here",
    "detail": "by-extension.python.brickout-game",
    "documentation": {}
  },
  {
    "label": "textsurfaceWin",
    "kind": 5,
    "importPath": "by-extension.python.brickout-game",
    "description": "by-extension.python.brickout-game",
    "peekOfCode": "textsurfaceWin = mgWin.render(\"You win!\", False, (0, 0, 0))\ntextsurfaceScore = mgScore.render(\"score: \" + str(score), False, (0, 0, 0))\n# -------- Main Program Loop -----------\nwhile not done:\n    # --- Main event loop\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            done = True\n    # --- Game logic should go here\n    # --- Screen-clearing code goes here",
    "detail": "by-extension.python.brickout-game",
    "documentation": {}
  },
  {
    "label": "textsurfaceScore",
    "kind": 5,
    "importPath": "by-extension.python.brickout-game",
    "description": "by-extension.python.brickout-game",
    "peekOfCode": "textsurfaceScore = mgScore.render(\"score: \" + str(score), False, (0, 0, 0))\n# -------- Main Program Loop -----------\nwhile not done:\n    # --- Main event loop\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            done = True\n    # --- Game logic should go here\n    # --- Screen-clearing code goes here\n    # Here, we clear the screen to white. Don't put other drawing commands",
    "detail": "by-extension.python.brickout-game",
    "documentation": {}
  },
  {
    "label": "oddEvenSort",
    "kind": 2,
    "importPath": "by-extension.python.brickSort",
    "description": "by-extension.python.brickSort",
    "peekOfCode": "def oddEvenSort(arr, n): \n    # Initially array is unsorted \n    isSorted = 0\n    while isSorted == 0: \n        isSorted = 1\n        temp = 0\n        for i in range(1, n-1, 2): \n            if arr[i] > arr[i+1]: \n                arr[i], arr[i+1] = arr[i+1], arr[i] \n                isSorted = 0",
    "detail": "by-extension.python.brickSort",
    "documentation": {}
  },
  {
    "label": "arr",
    "kind": 5,
    "importPath": "by-extension.python.brickSort",
    "description": "by-extension.python.brickSort",
    "peekOfCode": "arr = [34, 2, 10, -9] \nn = len(arr) \noddEvenSort(arr, n); \nfor i in range(0, n): \n    print(arr[i], end =\" \")",
    "detail": "by-extension.python.brickSort",
    "documentation": {}
  },
  {
    "label": "n",
    "kind": 5,
    "importPath": "by-extension.python.brickSort",
    "description": "by-extension.python.brickSort",
    "peekOfCode": "n = len(arr) \noddEvenSort(arr, n); \nfor i in range(0, n): \n    print(arr[i], end =\" \")",
    "detail": "by-extension.python.brickSort",
    "documentation": {}
  },
  {
    "label": "findPassword",
    "kind": 2,
    "importPath": "by-extension.python.BruteForce",
    "description": "by-extension.python.BruteForce",
    "peekOfCode": "def findPassword(chars, function, show=50, format_=\"%s\"):\n    password = None\n    attempts = 0\n    size = 1\n    stop = False\n    while not stop:\n        # Obtém todas as combinações possíveis com os dígitos do parâmetro \"chars\".\n        for pw in product(chars, repeat=size):\n            password = \"\".join(pw)\n            # Imprime a senha que será tentada.",
    "detail": "by-extension.python.BruteForce",
    "documentation": {}
  },
  {
    "label": "getChars",
    "kind": 2,
    "importPath": "by-extension.python.BruteForce",
    "description": "by-extension.python.BruteForce",
    "peekOfCode": "def getChars():\n    \"\"\"\n    Método para obter uma lista contendo todas as\n    letras do alfabeto e números.\n    \"\"\"\n    chars = []\n    # Acrescenta à lista todas as letras maiúsculas\n    for id_ in range(ord(\"A\"), ord(\"Z\") + 1):\n        chars.append(chr(id_))\n    # Acrescenta à lista todas as letras minúsculas",
    "detail": "by-extension.python.BruteForce",
    "documentation": {}
  },
  {
    "label": "bubbleSort",
    "kind": 2,
    "importPath": "by-extension.python.bubblesortpgm",
    "description": "by-extension.python.bubblesortpgm",
    "peekOfCode": "def bubbleSort(arr):\n\tn = len(arr)\n\t# Traverse through all array elements\n\tfor i in range(n):\n\t\tnot_swap = True\n\t\t# Last i elements are already in place\n\t\tfor j in range(0, n-i-1):\n\t\t\t# traverse the array from 0 to n-i-1\n\t\t\t# Swap if the element found is greater\n\t\t\t# than the next element",
    "detail": "by-extension.python.bubblesortpgm",
    "documentation": {}
  },
  {
    "label": "\tn",
    "kind": 5,
    "importPath": "by-extension.python.bubblesortpgm",
    "description": "by-extension.python.bubblesortpgm",
    "peekOfCode": "\tn = len(arr)\n\t# Traverse through all array elements\n\tfor i in range(n):\n\t\tnot_swap = True\n\t\t# Last i elements are already in place\n\t\tfor j in range(0, n-i-1):\n\t\t\t# traverse the array from 0 to n-i-1\n\t\t\t# Swap if the element found is greater\n\t\t\t# than the next element\n\t\t\tif arr[j] > arr[j+1] :",
    "detail": "by-extension.python.bubblesortpgm",
    "documentation": {}
  },
  {
    "label": "\t\tnot_swap",
    "kind": 5,
    "importPath": "by-extension.python.bubblesortpgm",
    "description": "by-extension.python.bubblesortpgm",
    "peekOfCode": "\t\tnot_swap = True\n\t\t# Last i elements are already in place\n\t\tfor j in range(0, n-i-1):\n\t\t\t# traverse the array from 0 to n-i-1\n\t\t\t# Swap if the element found is greater\n\t\t\t# than the next element\n\t\t\tif arr[j] > arr[j+1] :\n\t\t\t\tarr[j], arr[j+1] = arr[j+1], arr[j]\n\t\t\t\tnot_swap = False\n\t\tif not_swap:",
    "detail": "by-extension.python.bubblesortpgm",
    "documentation": {}
  },
  {
    "label": "\t\t\t\tnot_swap",
    "kind": 5,
    "importPath": "by-extension.python.bubblesortpgm",
    "description": "by-extension.python.bubblesortpgm",
    "peekOfCode": "\t\t\t\tnot_swap = False\n\t\tif not_swap:\n\t\t\tbreak\n# Driver code to test above\narr = [64, 34, 25, 12, 22, 11, 90]\nbubbleSort(arr)\nprint (\"Sorted array is:\")\nfor i in range(len(arr)):\n\tprint (\"%d\" %arr[i]),",
    "detail": "by-extension.python.bubblesortpgm",
    "documentation": {}
  },
  {
    "label": "arr",
    "kind": 5,
    "importPath": "by-extension.python.bubblesortpgm",
    "description": "by-extension.python.bubblesortpgm",
    "peekOfCode": "arr = [64, 34, 25, 12, 22, 11, 90]\nbubbleSort(arr)\nprint (\"Sorted array is:\")\nfor i in range(len(arr)):\n\tprint (\"%d\" %arr[i]),",
    "detail": "by-extension.python.bubblesortpgm",
    "documentation": {}
  },
  {
    "label": "bubble_sort",
    "kind": 2,
    "importPath": "by-extension.python.Bubble_sort",
    "description": "by-extension.python.Bubble_sort",
    "peekOfCode": "def bubble_sort(collection):\n    counter = 0\n    length = len(collection)\n    for i in range(0, length - 1):\n        is_sorted = True\n        for j in range(0, length - 1):\n            if collection[j] > collection[j + 1]:\n                collection[j], collection[j + 1] = collection[j + 1], collection[j]\n                is_sorted = False\n        counter += 1",
    "detail": "by-extension.python.Bubble_sort",
    "documentation": {}
  },
  {
    "label": "visualization",
    "kind": 2,
    "importPath": "by-extension.python.Bubble_sort",
    "description": "by-extension.python.Bubble_sort",
    "peekOfCode": "def visualization():\n    length = 10\n    collection = [randint(0, length) for _ in range(length)]\n    print(\"Initial list:\", collection)\n    print(\"Visualization of algorithm work.\")\n    collection, counter = bubble_sort(collection)\n    print(\"Final list:\", collection)\n    print(\"Total numbers of passages:\", counter)\ndef main():\n    elapsed_time = timeit.timeit(visualization, number=1)",
    "detail": "by-extension.python.Bubble_sort",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "by-extension.python.Bubble_sort",
    "description": "by-extension.python.Bubble_sort",
    "peekOfCode": "def main():\n    elapsed_time = timeit.timeit(visualization, number=1)\n    print(\"Elapsed time: \", round(elapsed_time, 7), \"sec.\")\nif __name__ == \"__main__\":\n    main()",
    "detail": "by-extension.python.Bubble_sort",
    "documentation": {}
  },
  {
    "label": "bubblesort",
    "kind": 2,
    "importPath": "by-extension.python.Bubble_Sorting_Prog",
    "description": "by-extension.python.Bubble_Sorting_Prog",
    "peekOfCode": "def bubblesort(list):\n# Swap the elements to arrange in order\n    for iter_num in range(len(list)-1,0,-1):\n        for idx in range(iter_num):\n            if list[idx]>list[idx+1]:\n                temp = list[idx]\n                list[idx] = list[idx+1]\n                list[idx+1] = temp\nlist = [19,2,31,45,6,11,121,27]\nbubblesort(list)",
    "detail": "by-extension.python.Bubble_Sorting_Prog",
    "documentation": {}
  },
  {
    "label": "list",
    "kind": 5,
    "importPath": "by-extension.python.Bubble_Sorting_Prog",
    "description": "by-extension.python.Bubble_Sorting_Prog",
    "peekOfCode": "list = [19,2,31,45,6,11,121,27]\nbubblesort(list)\nprint(list)",
    "detail": "by-extension.python.Bubble_Sorting_Prog",
    "documentation": {}
  },
  {
    "label": "bucket_sort",
    "kind": 2,
    "importPath": "by-extension.python.bucket_sort",
    "description": "by-extension.python.bucket_sort",
    "peekOfCode": "def bucket_sort(collection):\n    length = len(collection)\n    buckets_list = [0 for _ in range(length + 1)]\n    print(\"\\tBuckets list before sorting - {}\".format(buckets_list))\n    for j in range(length):\n        buckets_list[collection[j]] += 1\n    print(\"\\tBuckets list after sorting - {}\".format(buckets_list))\n    counter = 0\n    for i in range(length + 1):\n        for j in range(buckets_list[i]):",
    "detail": "by-extension.python.bucket_sort",
    "documentation": {}
  },
  {
    "label": "visualization",
    "kind": 2,
    "importPath": "by-extension.python.bucket_sort",
    "description": "by-extension.python.bucket_sort",
    "peekOfCode": "def visualization():\n    length = 10\n    collection = [randint(0, length) for _ in range(length)]\n    print(\"Initial list:\", collection)\n    print(\"Visualization of algorithm work.\")\n    collection = bucket_sort(collection)\n    print(\"Final list:\", collection)\ndef main():\n    elapsed_time = timeit.timeit(visualization, number=1)\n    print(\"Elapsed time: \", round(elapsed_time, 7), \"sec.\")",
    "detail": "by-extension.python.bucket_sort",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "by-extension.python.bucket_sort",
    "description": "by-extension.python.bucket_sort",
    "peekOfCode": "def main():\n    elapsed_time = timeit.timeit(visualization, number=1)\n    print(\"Elapsed time: \", round(elapsed_time, 7), \"sec.\")\nif __name__ == \"__main__\":\n    main()",
    "detail": "by-extension.python.bucket_sort",
    "documentation": {}
  },
  {
    "label": "res",
    "kind": 2,
    "importPath": "by-extension.python.Calculate resistance",
    "description": "by-extension.python.Calculate resistance",
    "peekOfCode": "def res(R1, R2):\n      sum = R1 + R2\n      if (option ==\"series\"):\n          return sum\n      else:\n          return (R1 * R2)/(R1 + R2)\nResistance1 = int(input(\"Enter R1 : \"))\nResistance2 = int(input(\"Enter R2 : \"))\noption = str(input(\"Enter series or parallel :\"))\nprint(\"\\n\")",
    "detail": "by-extension.python.Calculate resistance",
    "documentation": {}
  },
  {
    "label": "Resistance1",
    "kind": 5,
    "importPath": "by-extension.python.Calculate resistance",
    "description": "by-extension.python.Calculate resistance",
    "peekOfCode": "Resistance1 = int(input(\"Enter R1 : \"))\nResistance2 = int(input(\"Enter R2 : \"))\noption = str(input(\"Enter series or parallel :\"))\nprint(\"\\n\")\nR = res(Resistance1,Resistance2 )\nprint(\"The total resistance is\", R)",
    "detail": "by-extension.python.Calculate resistance",
    "documentation": {}
  },
  {
    "label": "Resistance2",
    "kind": 5,
    "importPath": "by-extension.python.Calculate resistance",
    "description": "by-extension.python.Calculate resistance",
    "peekOfCode": "Resistance2 = int(input(\"Enter R2 : \"))\noption = str(input(\"Enter series or parallel :\"))\nprint(\"\\n\")\nR = res(Resistance1,Resistance2 )\nprint(\"The total resistance is\", R)",
    "detail": "by-extension.python.Calculate resistance",
    "documentation": {}
  },
  {
    "label": "option",
    "kind": 5,
    "importPath": "by-extension.python.Calculate resistance",
    "description": "by-extension.python.Calculate resistance",
    "peekOfCode": "option = str(input(\"Enter series or parallel :\"))\nprint(\"\\n\")\nR = res(Resistance1,Resistance2 )\nprint(\"The total resistance is\", R)",
    "detail": "by-extension.python.Calculate resistance",
    "documentation": {}
  },
  {
    "label": "R",
    "kind": 5,
    "importPath": "by-extension.python.Calculate resistance",
    "description": "by-extension.python.Calculate resistance",
    "peekOfCode": "R = res(Resistance1,Resistance2 )\nprint(\"The total resistance is\", R)",
    "detail": "by-extension.python.Calculate resistance",
    "documentation": {}
  },
  {
    "label": "day_offset",
    "kind": 2,
    "importPath": "by-extension.python.calculate-day-in-your-head",
    "description": "by-extension.python.calculate-day-in-your-head",
    "peekOfCode": "def day_offset(y, m, d):\n    # Add 1 if y > 2000 to account for the fact that 2000 was a leap year.\n    year_offset = ( y - 2000 ) + ( ( y - 2000 ) // 4 ) + ( y > 2000 )\n    # Account for wrongly computed leap years\n    year_offset -= ( y - 2000 ) // 100\n    # Add back 1 year if the target year is a leap year but the target day\n    # is after the 29th (in other words, the leap day hasn't happened yet).\n    if y % 100:\n        year_offset += ( y < 2000 ) and not( y % 4 ) and ( m > 2 )\n        year_offset -= ( y > 2000 ) and not( y % 4 ) and ( m < 3 )",
    "detail": "by-extension.python.calculate-day-in-your-head",
    "documentation": {}
  },
  {
    "label": "days",
    "kind": 5,
    "importPath": "by-extension.python.calculate-day-in-your-head",
    "description": "by-extension.python.calculate-day-in-your-head",
    "peekOfCode": "days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\nadjustment = [0, 1, -1, 0, 0, 1, 1, 2, 3, 3, 4, 4]\ndef day_offset(y, m, d):\n    # Add 1 if y > 2000 to account for the fact that 2000 was a leap year.\n    year_offset = ( y - 2000 ) + ( ( y - 2000 ) // 4 ) + ( y > 2000 )\n    # Account for wrongly computed leap years\n    year_offset -= ( y - 2000 ) // 100\n    # Add back 1 year if the target year is a leap year but the target day\n    # is after the 29th (in other words, the leap day hasn't happened yet).\n    if y % 100:",
    "detail": "by-extension.python.calculate-day-in-your-head",
    "documentation": {}
  },
  {
    "label": "adjustment",
    "kind": 5,
    "importPath": "by-extension.python.calculate-day-in-your-head",
    "description": "by-extension.python.calculate-day-in-your-head",
    "peekOfCode": "adjustment = [0, 1, -1, 0, 0, 1, 1, 2, 3, 3, 4, 4]\ndef day_offset(y, m, d):\n    # Add 1 if y > 2000 to account for the fact that 2000 was a leap year.\n    year_offset = ( y - 2000 ) + ( ( y - 2000 ) // 4 ) + ( y > 2000 )\n    # Account for wrongly computed leap years\n    year_offset -= ( y - 2000 ) // 100\n    # Add back 1 year if the target year is a leap year but the target day\n    # is after the 29th (in other words, the leap day hasn't happened yet).\n    if y % 100:\n        year_offset += ( y < 2000 ) and not( y % 4 ) and ( m > 2 )",
    "detail": "by-extension.python.calculate-day-in-your-head",
    "documentation": {}
  },
  {
    "label": "res",
    "kind": 2,
    "importPath": "by-extension.python.Calculate_resistance",
    "description": "by-extension.python.Calculate_resistance",
    "peekOfCode": "def res(R1, R2):\n    sum = R1 + R2\n    if option == \"series\":\n        return sum\n    else:\n        return (R1 * R2) / (R1 + R2)\nResistance1 = int(input(\"Enter R1 : \"))\nResistance2 = int(input(\"Enter R2 : \"))\noption = str(input(\"Enter series or parallel :\"))\nprint(\"\\n\")",
    "detail": "by-extension.python.Calculate_resistance",
    "documentation": {}
  },
  {
    "label": "Resistance1",
    "kind": 5,
    "importPath": "by-extension.python.Calculate_resistance",
    "description": "by-extension.python.Calculate_resistance",
    "peekOfCode": "Resistance1 = int(input(\"Enter R1 : \"))\nResistance2 = int(input(\"Enter R2 : \"))\noption = str(input(\"Enter series or parallel :\"))\nprint(\"\\n\")\nR = res(Resistance1, Resistance2)\nprint(\"The total resistance is\", R)",
    "detail": "by-extension.python.Calculate_resistance",
    "documentation": {}
  },
  {
    "label": "Resistance2",
    "kind": 5,
    "importPath": "by-extension.python.Calculate_resistance",
    "description": "by-extension.python.Calculate_resistance",
    "peekOfCode": "Resistance2 = int(input(\"Enter R2 : \"))\noption = str(input(\"Enter series or parallel :\"))\nprint(\"\\n\")\nR = res(Resistance1, Resistance2)\nprint(\"The total resistance is\", R)",
    "detail": "by-extension.python.Calculate_resistance",
    "documentation": {}
  },
  {
    "label": "option",
    "kind": 5,
    "importPath": "by-extension.python.Calculate_resistance",
    "description": "by-extension.python.Calculate_resistance",
    "peekOfCode": "option = str(input(\"Enter series or parallel :\"))\nprint(\"\\n\")\nR = res(Resistance1, Resistance2)\nprint(\"The total resistance is\", R)",
    "detail": "by-extension.python.Calculate_resistance",
    "documentation": {}
  },
  {
    "label": "R",
    "kind": 5,
    "importPath": "by-extension.python.Calculate_resistance",
    "description": "by-extension.python.Calculate_resistance",
    "peekOfCode": "R = res(Resistance1, Resistance2)\nprint(\"The total resistance is\", R)",
    "detail": "by-extension.python.Calculate_resistance",
    "documentation": {}
  },
  {
    "label": "formation_num",
    "kind": 5,
    "importPath": "by-extension.python.calculator",
    "description": "by-extension.python.calculator",
    "peekOfCode": "formation_num = 32 # defining no of signs, we are using it on on multiple places\nprint('*' * formation_num) # for formation\ntitle = '   A simple python calculator'\nprint(title)\nprint('-' * formation_num) # for formation\nnum1 = float(input('   Type first number: '))\nnum2 = float(input('   Type second number: '))\noperator = input('   Type operator: ')\naddition = num1 + num2\nsubtraction = num1 - num2",
    "detail": "by-extension.python.calculator",
    "documentation": {}
  },
  {
    "label": "title",
    "kind": 5,
    "importPath": "by-extension.python.calculator",
    "description": "by-extension.python.calculator",
    "peekOfCode": "title = '   A simple python calculator'\nprint(title)\nprint('-' * formation_num) # for formation\nnum1 = float(input('   Type first number: '))\nnum2 = float(input('   Type second number: '))\noperator = input('   Type operator: ')\naddition = num1 + num2\nsubtraction = num1 - num2\nmultiplication = num1 * num2\ndivision = num1 / num2",
    "detail": "by-extension.python.calculator",
    "documentation": {}
  },
  {
    "label": "num1",
    "kind": 5,
    "importPath": "by-extension.python.calculator",
    "description": "by-extension.python.calculator",
    "peekOfCode": "num1 = float(input('   Type first number: '))\nnum2 = float(input('   Type second number: '))\noperator = input('   Type operator: ')\naddition = num1 + num2\nsubtraction = num1 - num2\nmultiplication = num1 * num2\ndivision = num1 / num2\nif operator == '+':\n   print(f'   Result: {num1} + {num2} = {addition}')\nelif operator == '-':",
    "detail": "by-extension.python.calculator",
    "documentation": {}
  },
  {
    "label": "num2",
    "kind": 5,
    "importPath": "by-extension.python.calculator",
    "description": "by-extension.python.calculator",
    "peekOfCode": "num2 = float(input('   Type second number: '))\noperator = input('   Type operator: ')\naddition = num1 + num2\nsubtraction = num1 - num2\nmultiplication = num1 * num2\ndivision = num1 / num2\nif operator == '+':\n   print(f'   Result: {num1} + {num2} = {addition}')\nelif operator == '-':\n   print(f'   Result: {num1} - {num2} = {subtraction}')",
    "detail": "by-extension.python.calculator",
    "documentation": {}
  },
  {
    "label": "operator",
    "kind": 5,
    "importPath": "by-extension.python.calculator",
    "description": "by-extension.python.calculator",
    "peekOfCode": "operator = input('   Type operator: ')\naddition = num1 + num2\nsubtraction = num1 - num2\nmultiplication = num1 * num2\ndivision = num1 / num2\nif operator == '+':\n   print(f'   Result: {num1} + {num2} = {addition}')\nelif operator == '-':\n   print(f'   Result: {num1} - {num2} = {subtraction}')\nelif operator == '*':",
    "detail": "by-extension.python.calculator",
    "documentation": {}
  },
  {
    "label": "addition",
    "kind": 5,
    "importPath": "by-extension.python.calculator",
    "description": "by-extension.python.calculator",
    "peekOfCode": "addition = num1 + num2\nsubtraction = num1 - num2\nmultiplication = num1 * num2\ndivision = num1 / num2\nif operator == '+':\n   print(f'   Result: {num1} + {num2} = {addition}')\nelif operator == '-':\n   print(f'   Result: {num1} - {num2} = {subtraction}')\nelif operator == '*':\n   print(f'   Result: {num1} * {num2} = {multiplication}')",
    "detail": "by-extension.python.calculator",
    "documentation": {}
  },
  {
    "label": "subtraction",
    "kind": 5,
    "importPath": "by-extension.python.calculator",
    "description": "by-extension.python.calculator",
    "peekOfCode": "subtraction = num1 - num2\nmultiplication = num1 * num2\ndivision = num1 / num2\nif operator == '+':\n   print(f'   Result: {num1} + {num2} = {addition}')\nelif operator == '-':\n   print(f'   Result: {num1} - {num2} = {subtraction}')\nelif operator == '*':\n   print(f'   Result: {num1} * {num2} = {multiplication}')\nelif operator == '/':",
    "detail": "by-extension.python.calculator",
    "documentation": {}
  },
  {
    "label": "multiplication",
    "kind": 5,
    "importPath": "by-extension.python.calculator",
    "description": "by-extension.python.calculator",
    "peekOfCode": "multiplication = num1 * num2\ndivision = num1 / num2\nif operator == '+':\n   print(f'   Result: {num1} + {num2} = {addition}')\nelif operator == '-':\n   print(f'   Result: {num1} - {num2} = {subtraction}')\nelif operator == '*':\n   print(f'   Result: {num1} * {num2} = {multiplication}')\nelif operator == '/':\n   print(f'   Result: {num1} / {num2} = {division}')",
    "detail": "by-extension.python.calculator",
    "documentation": {}
  },
  {
    "label": "division",
    "kind": 5,
    "importPath": "by-extension.python.calculator",
    "description": "by-extension.python.calculator",
    "peekOfCode": "division = num1 / num2\nif operator == '+':\n   print(f'   Result: {num1} + {num2} = {addition}')\nelif operator == '-':\n   print(f'   Result: {num1} - {num2} = {subtraction}')\nelif operator == '*':\n   print(f'   Result: {num1} * {num2} = {multiplication}')\nelif operator == '/':\n   print(f'   Result: {num1} / {num2} = {division}')\nelse :",
    "detail": "by-extension.python.calculator",
    "documentation": {}
  },
  {
    "label": "add",
    "kind": 2,
    "importPath": "by-extension.python.calculatorproject",
    "description": "by-extension.python.calculatorproject",
    "peekOfCode": "def add(x, y):\n    return x + y\ndef subtract(x, y):\n    return x - y\ndef multiply(x, y):\n    return x * y\ndef divide(x, y):\n    return x / y\nprint(\"Select operation.\")\nprint(\"1.Add\")",
    "detail": "by-extension.python.calculatorproject",
    "documentation": {}
  },
  {
    "label": "subtract",
    "kind": 2,
    "importPath": "by-extension.python.calculatorproject",
    "description": "by-extension.python.calculatorproject",
    "peekOfCode": "def subtract(x, y):\n    return x - y\ndef multiply(x, y):\n    return x * y\ndef divide(x, y):\n    return x / y\nprint(\"Select operation.\")\nprint(\"1.Add\")\nprint(\"2.Subtract\")\nprint(\"3.Multiply\")",
    "detail": "by-extension.python.calculatorproject",
    "documentation": {}
  },
  {
    "label": "multiply",
    "kind": 2,
    "importPath": "by-extension.python.calculatorproject",
    "description": "by-extension.python.calculatorproject",
    "peekOfCode": "def multiply(x, y):\n    return x * y\ndef divide(x, y):\n    return x / y\nprint(\"Select operation.\")\nprint(\"1.Add\")\nprint(\"2.Subtract\")\nprint(\"3.Multiply\")\nprint(\"4.Divide\")\nwhile True:",
    "detail": "by-extension.python.calculatorproject",
    "documentation": {}
  },
  {
    "label": "divide",
    "kind": 2,
    "importPath": "by-extension.python.calculatorproject",
    "description": "by-extension.python.calculatorproject",
    "peekOfCode": "def divide(x, y):\n    return x / y\nprint(\"Select operation.\")\nprint(\"1.Add\")\nprint(\"2.Subtract\")\nprint(\"3.Multiply\")\nprint(\"4.Divide\")\nwhile True:\n    # Take input from the user\n    choice = input(\"Enter choice(1/2/3/4): \")",
    "detail": "by-extension.python.calculatorproject",
    "documentation": {}
  },
  {
    "label": "shape",
    "kind": 5,
    "importPath": "by-extension.python.calc_area",
    "description": "by-extension.python.calc_area",
    "peekOfCode": "shape = int(input(\"Enter 1 for square, 2 for rectangle, 3 for circle, or 4 for triangle: \"))\nif shape == 1:\n  side = float(input(\"Enter length of side: \"))\n  print(\"Area of square = \" + str(side**2))\nelif shape == 2:\n  l = float(input(\"Enter length: \"))\n  b = float(input(\"Enter breadth: \"))\n  print(\"Area of rectangle = \" + str(l*b))\nelif shape == 3:\n  r = float(input(\"Enter radius: \"))",
    "detail": "by-extension.python.calc_area",
    "documentation": {}
  },
  {
    "label": "maximizeWindow",
    "kind": 2,
    "importPath": "by-extension.python.calc_interets",
    "description": "by-extension.python.calc_interets",
    "peekOfCode": "def maximizeWindow():\n    \"\"\" Experimental function to try to maximize a plot.\n    - Tries as well as possible to maximize the figure.\n    - Cf. https://stackoverflow.com/q/12439588/\n    \"\"\"\n    try:\n        figManager = plt.get_current_fig_manager()\n        figManager.window.showMaximized()\n    except:\n        try:",
    "detail": "by-extension.python.calc_interets",
    "documentation": {}
  },
  {
    "label": "palette",
    "kind": 2,
    "importPath": "by-extension.python.calc_interets",
    "description": "by-extension.python.calc_interets",
    "peekOfCode": "def palette(nb):\n    \"\"\" Use a smart palette from seaborn, for nb different things to plot.\n    - Ref: http://seaborn.pydata.org/generated/seaborn.hls_palette.html#seaborn.hls_palette\n    \"\"\"\n    return sns.hls_palette(nb + 1)[:nb]\ndef calc_interets(comptes, taux=taux2020):\n    \"\"\" Calcule une estimation de mes intérêts.\"\"\"\n    interet_fin_annee = sum(comptes[k] * taux[k] / 100.0 for k in type_comptes)\n    for k in type_comptes:\n        print(\"Pour mon <blue>compte {:>4}<white>, avec <magenta>{:>10,.2f} €<white>, et un <cyan<taux à <u>{:>4,.2f}%<U><white> {} <green>intérêt ~= {:>6.2f} €<white>.\".format(k.upper(), comptes[k], taux[k], '→', comptes[k] * taux[k] / 100.0))",
    "detail": "by-extension.python.calc_interets",
    "documentation": {}
  },
  {
    "label": "calc_interets",
    "kind": 2,
    "importPath": "by-extension.python.calc_interets",
    "description": "by-extension.python.calc_interets",
    "peekOfCode": "def calc_interets(comptes, taux=taux2020):\n    \"\"\" Calcule une estimation de mes intérêts.\"\"\"\n    interet_fin_annee = sum(comptes[k] * taux[k] / 100.0 for k in type_comptes)\n    for k in type_comptes:\n        print(\"Pour mon <blue>compte {:>4}<white>, avec <magenta>{:>10,.2f} €<white>, et un <cyan<taux à <u>{:>4,.2f}%<U><white> {} <green>intérêt ~= {:>6.2f} €<white>.\".format(k.upper(), comptes[k], taux[k], '→', comptes[k] * taux[k] / 100.0))\n    print(\"<green>Intérêt estimé pour 2016 : {:.2f} €.<white>\".format(interet_fin_annee))\n    print(\"<red>Attention<white> : les vrais intérêts sont calculés toutes les quinzaines, mon estimation n'est pas précise !\")\n    return interet_fin_annee\ndef main(comptes, taux=taux2020):\n    \"\"\" Affiche un beau diagramme camembert montrant la répartition de ses économies. \"\"\"",
    "detail": "by-extension.python.calc_interets",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "by-extension.python.calc_interets",
    "description": "by-extension.python.calc_interets",
    "peekOfCode": "def main(comptes, taux=taux2020):\n    \"\"\" Affiche un beau diagramme camembert montrant la répartition de ses économies. \"\"\"\n    argenttotal = sum(comptes.values())\n    interets = sum(round(comptes[k] * taux[k] / 100.0, 3) for k in type_comptes)\n    print(\"Affichage d'un diagrame camembert en cours...\")\n    valeurs = list(comptes.values())\n    print(\"Valeurs du diagrame : <black>{}<white>\".format(valeurs))\n    etiquettes = []\n    legendes = []\n    for k in type_comptes:",
    "detail": "by-extension.python.calc_interets",
    "documentation": {}
  },
  {
    "label": "taux2020",
    "kind": 5,
    "importPath": "by-extension.python.calc_interets",
    "description": "by-extension.python.calc_interets",
    "peekOfCode": "taux2020 = {'CCP' : 0.00,\n            'LA'  : 0.73,\n            'LEP' : 1.25,  # XXX I don't own a LEP anymore\n            'LJ'  : 1.65,  # XXX I don't own a LJ anymore\n            'PEA' : 0.00,  # XXX I don't own a PEA anymore\n            'PEL' : 2.36,\n            'CCP2': 0.00,\n            }\npath_comptes = \"/home/lilian/comptes.pickle\"\nprint(\"<yellow>Calcul des intérêts, <white>script <u>calc_interets.py<U>:\")",
    "detail": "by-extension.python.calc_interets",
    "documentation": {}
  },
  {
    "label": "path_comptes",
    "kind": 5,
    "importPath": "by-extension.python.calc_interets",
    "description": "by-extension.python.calc_interets",
    "peekOfCode": "path_comptes = \"/home/lilian/comptes.pickle\"\nprint(\"<yellow>Calcul des intérêts, <white>script <u>calc_interets.py<U>:\")\ntry:\n    print(\"Lecture des comptes via le fichier <u>'{}'<U>...\".format(path_comptes))\n    with open(path_comptes, 'r') as f:\n        comptes = pickle.load(f)\nexcept:\n    print(\"Echec de la lecture. Le script va utiliser des valeurs par defaut : 2000.00 dans chaque compte (pour tester).\")\n    comptes = {'CCP': 2000.00,\n               'LA': 2000.00,",
    "detail": "by-extension.python.calc_interets",
    "documentation": {}
  },
  {
    "label": "type_comptes",
    "kind": 5,
    "importPath": "by-extension.python.calc_interets",
    "description": "by-extension.python.calc_interets",
    "peekOfCode": "type_comptes = list(comptes.keys())\ndef maximizeWindow():\n    \"\"\" Experimental function to try to maximize a plot.\n    - Tries as well as possible to maximize the figure.\n    - Cf. https://stackoverflow.com/q/12439588/\n    \"\"\"\n    try:\n        figManager = plt.get_current_fig_manager()\n        figManager.window.showMaximized()\n    except:",
    "detail": "by-extension.python.calc_interets",
    "documentation": {}
  },
  {
    "label": "text",
    "kind": 2,
    "importPath": "by-extension.python.Calendar (GUI)",
    "description": "by-extension.python.Calendar (GUI)",
    "peekOfCode": "def text():\n    month_int = int(month.get())\n    year_int = int(year.get())\n    cal = calendar.month(year_int, month_int)\n    textfield.delete(0.0, END)\n    textfield.insert(INSERT, cal)\n# Creating Labels\nlabel1 = Label(root, text=\"Month:\")\nlabel1.grid(row=0, column=0)\nlabel2 = Label(root, text=\"Year:\")",
    "detail": "by-extension.python.Calendar (GUI)",
    "documentation": {}
  },
  {
    "label": "root",
    "kind": 5,
    "importPath": "by-extension.python.Calendar (GUI)",
    "description": "by-extension.python.Calendar (GUI)",
    "peekOfCode": "root = Tk()\n# root.geometry(\"400x300\")\nroot.title(\"Calendar\")\n# Function\ndef text():\n    month_int = int(month.get())\n    year_int = int(year.get())\n    cal = calendar.month(year_int, month_int)\n    textfield.delete(0.0, END)\n    textfield.insert(INSERT, cal)",
    "detail": "by-extension.python.Calendar (GUI)",
    "documentation": {}
  },
  {
    "label": "label1",
    "kind": 5,
    "importPath": "by-extension.python.Calendar (GUI)",
    "description": "by-extension.python.Calendar (GUI)",
    "peekOfCode": "label1 = Label(root, text=\"Month:\")\nlabel1.grid(row=0, column=0)\nlabel2 = Label(root, text=\"Year:\")\nlabel2.grid(row=0, column=1)\n# Creating spinbox\nmonth = Spinbox(root, from_=1, to=12, width=8)\nmonth.grid(row=1, column=0, padx=5)\nyear = Spinbox(root, from_=2000, to=2100, width=10)\nyear.grid(row=1, column=1, padx=10)\n# Creating Button",
    "detail": "by-extension.python.Calendar (GUI)",
    "documentation": {}
  },
  {
    "label": "label2",
    "kind": 5,
    "importPath": "by-extension.python.Calendar (GUI)",
    "description": "by-extension.python.Calendar (GUI)",
    "peekOfCode": "label2 = Label(root, text=\"Year:\")\nlabel2.grid(row=0, column=1)\n# Creating spinbox\nmonth = Spinbox(root, from_=1, to=12, width=8)\nmonth.grid(row=1, column=0, padx=5)\nyear = Spinbox(root, from_=2000, to=2100, width=10)\nyear.grid(row=1, column=1, padx=10)\n# Creating Button\nbutton = Button(root, text=\"Go\", command=text)\nbutton.grid(row=1, column=2, padx=10)",
    "detail": "by-extension.python.Calendar (GUI)",
    "documentation": {}
  },
  {
    "label": "month",
    "kind": 5,
    "importPath": "by-extension.python.Calendar (GUI)",
    "description": "by-extension.python.Calendar (GUI)",
    "peekOfCode": "month = Spinbox(root, from_=1, to=12, width=8)\nmonth.grid(row=1, column=0, padx=5)\nyear = Spinbox(root, from_=2000, to=2100, width=10)\nyear.grid(row=1, column=1, padx=10)\n# Creating Button\nbutton = Button(root, text=\"Go\", command=text)\nbutton.grid(row=1, column=2, padx=10)\n# Creating Textfield\ntextfield = Text(root, width=25, height=10, fg=\"red\")\ntextfield.grid(row=2, columnspan=2)",
    "detail": "by-extension.python.Calendar (GUI)",
    "documentation": {}
  },
  {
    "label": "year",
    "kind": 5,
    "importPath": "by-extension.python.Calendar (GUI)",
    "description": "by-extension.python.Calendar (GUI)",
    "peekOfCode": "year = Spinbox(root, from_=2000, to=2100, width=10)\nyear.grid(row=1, column=1, padx=10)\n# Creating Button\nbutton = Button(root, text=\"Go\", command=text)\nbutton.grid(row=1, column=2, padx=10)\n# Creating Textfield\ntextfield = Text(root, width=25, height=10, fg=\"red\")\ntextfield.grid(row=2, columnspan=2)\nroot.mainloop()",
    "detail": "by-extension.python.Calendar (GUI)",
    "documentation": {}
  },
  {
    "label": "button",
    "kind": 5,
    "importPath": "by-extension.python.Calendar (GUI)",
    "description": "by-extension.python.Calendar (GUI)",
    "peekOfCode": "button = Button(root, text=\"Go\", command=text)\nbutton.grid(row=1, column=2, padx=10)\n# Creating Textfield\ntextfield = Text(root, width=25, height=10, fg=\"red\")\ntextfield.grid(row=2, columnspan=2)\nroot.mainloop()",
    "detail": "by-extension.python.Calendar (GUI)",
    "documentation": {}
  },
  {
    "label": "textfield",
    "kind": 5,
    "importPath": "by-extension.python.Calendar (GUI)",
    "description": "by-extension.python.Calendar (GUI)",
    "peekOfCode": "textfield = Text(root, width=25, height=10, fg=\"red\")\ntextfield.grid(row=2, columnspan=2)\nroot.mainloop()",
    "detail": "by-extension.python.Calendar (GUI)",
    "documentation": {}
  },
  {
    "label": "text",
    "kind": 2,
    "importPath": "by-extension.python.Calendar_(GUI)",
    "description": "by-extension.python.Calendar_(GUI)",
    "peekOfCode": "def text():\n    month_int = int(month.get())\n    year_int = int(year.get())\n    cal = calendar.month(year_int, month_int)\n    textfield.delete(0.0, END)\n    textfield.insert(INSERT, cal)\n# Creating Labels\nlabel1 = Label(root, text=\"Month:\")\nlabel1.grid(row=0, column=0)\nlabel2 = Label(root, text=\"Year:\")",
    "detail": "by-extension.python.Calendar_(GUI)",
    "documentation": {}
  },
  {
    "label": "root",
    "kind": 5,
    "importPath": "by-extension.python.Calendar_(GUI)",
    "description": "by-extension.python.Calendar_(GUI)",
    "peekOfCode": "root = Tk()\n# root.geometry(\"400x300\")\nroot.title(\"Calendar\")\n# Function\ndef text():\n    month_int = int(month.get())\n    year_int = int(year.get())\n    cal = calendar.month(year_int, month_int)\n    textfield.delete(0.0, END)\n    textfield.insert(INSERT, cal)",
    "detail": "by-extension.python.Calendar_(GUI)",
    "documentation": {}
  },
  {
    "label": "label1",
    "kind": 5,
    "importPath": "by-extension.python.Calendar_(GUI)",
    "description": "by-extension.python.Calendar_(GUI)",
    "peekOfCode": "label1 = Label(root, text=\"Month:\")\nlabel1.grid(row=0, column=0)\nlabel2 = Label(root, text=\"Year:\")\nlabel2.grid(row=0, column=1)\n# Creating spinbox\nmonth = Spinbox(root, from_=1, to=12, width=8)\nmonth.grid(row=1, column=0, padx=5)\nyear = Spinbox(root, from_=2000, to=2100, width=10)\nyear.grid(row=1, column=1, padx=10)\n# Creating Button",
    "detail": "by-extension.python.Calendar_(GUI)",
    "documentation": {}
  },
  {
    "label": "label2",
    "kind": 5,
    "importPath": "by-extension.python.Calendar_(GUI)",
    "description": "by-extension.python.Calendar_(GUI)",
    "peekOfCode": "label2 = Label(root, text=\"Year:\")\nlabel2.grid(row=0, column=1)\n# Creating spinbox\nmonth = Spinbox(root, from_=1, to=12, width=8)\nmonth.grid(row=1, column=0, padx=5)\nyear = Spinbox(root, from_=2000, to=2100, width=10)\nyear.grid(row=1, column=1, padx=10)\n# Creating Button\nbutton = Button(root, text=\"Go\", command=text)\nbutton.grid(row=1, column=2, padx=10)",
    "detail": "by-extension.python.Calendar_(GUI)",
    "documentation": {}
  },
  {
    "label": "month",
    "kind": 5,
    "importPath": "by-extension.python.Calendar_(GUI)",
    "description": "by-extension.python.Calendar_(GUI)",
    "peekOfCode": "month = Spinbox(root, from_=1, to=12, width=8)\nmonth.grid(row=1, column=0, padx=5)\nyear = Spinbox(root, from_=2000, to=2100, width=10)\nyear.grid(row=1, column=1, padx=10)\n# Creating Button\nbutton = Button(root, text=\"Go\", command=text)\nbutton.grid(row=1, column=2, padx=10)\n# Creating Textfield\ntextfield = Text(root, width=25, height=10, fg=\"red\")\ntextfield.grid(row=2, columnspan=2)",
    "detail": "by-extension.python.Calendar_(GUI)",
    "documentation": {}
  },
  {
    "label": "year",
    "kind": 5,
    "importPath": "by-extension.python.Calendar_(GUI)",
    "description": "by-extension.python.Calendar_(GUI)",
    "peekOfCode": "year = Spinbox(root, from_=2000, to=2100, width=10)\nyear.grid(row=1, column=1, padx=10)\n# Creating Button\nbutton = Button(root, text=\"Go\", command=text)\nbutton.grid(row=1, column=2, padx=10)\n# Creating Textfield\ntextfield = Text(root, width=25, height=10, fg=\"red\")\ntextfield.grid(row=2, columnspan=2)\nroot.mainloop()",
    "detail": "by-extension.python.Calendar_(GUI)",
    "documentation": {}
  },
  {
    "label": "button",
    "kind": 5,
    "importPath": "by-extension.python.Calendar_(GUI)",
    "description": "by-extension.python.Calendar_(GUI)",
    "peekOfCode": "button = Button(root, text=\"Go\", command=text)\nbutton.grid(row=1, column=2, padx=10)\n# Creating Textfield\ntextfield = Text(root, width=25, height=10, fg=\"red\")\ntextfield.grid(row=2, columnspan=2)\nroot.mainloop()",
    "detail": "by-extension.python.Calendar_(GUI)",
    "documentation": {}
  },
  {
    "label": "textfield",
    "kind": 5,
    "importPath": "by-extension.python.Calendar_(GUI)",
    "description": "by-extension.python.Calendar_(GUI)",
    "peekOfCode": "textfield = Text(root, width=25, height=10, fg=\"red\")\ntextfield.grid(row=2, columnspan=2)\nroot.mainloop()",
    "detail": "by-extension.python.Calendar_(GUI)",
    "documentation": {}
  },
  {
    "label": "search",
    "kind": 2,
    "importPath": "by-extension.python.caller",
    "description": "by-extension.python.caller",
    "peekOfCode": "def search():\n    calling_time = datetime.now()\n    one_hours_from_now = (calling_time + timedelta(hours=1)).strftime('%H:%M:%S')  \n    current_date=str(strftime(\"%d-%m-%Y\", gmtime()))\n    docs = db.collection(u'on_call').where(u'date',u'==',current_date).stream()\n    list_of_docs=[]\n    for doc in docs:\n        c=doc.to_dict()\n        if (calling_time).strftime('%H:%M:%S')<=c['from']<=one_hours_from_now:\n            list_of_docs.append(c)",
    "detail": "by-extension.python.caller",
    "documentation": {}
  },
  {
    "label": "cred",
    "kind": 5,
    "importPath": "by-extension.python.caller",
    "description": "by-extension.python.caller",
    "peekOfCode": "cred = credentials.Certificate('key.json')\ndefault_app = initialize_app(cred)\ndb = firestore.client()\ndatabase_reference = db.collection('on_call')\n#Here the collection name is on_call which has documents with fields phone , from (%H:%M:%S time to call the person),date \n#gets data from cloud database and calls 5 min prior the time (from time) alloted in the database\ndef search():\n    calling_time = datetime.now()\n    one_hours_from_now = (calling_time + timedelta(hours=1)).strftime('%H:%M:%S')  \n    current_date=str(strftime(\"%d-%m-%Y\", gmtime()))",
    "detail": "by-extension.python.caller",
    "documentation": {}
  },
  {
    "label": "default_app",
    "kind": 5,
    "importPath": "by-extension.python.caller",
    "description": "by-extension.python.caller",
    "peekOfCode": "default_app = initialize_app(cred)\ndb = firestore.client()\ndatabase_reference = db.collection('on_call')\n#Here the collection name is on_call which has documents with fields phone , from (%H:%M:%S time to call the person),date \n#gets data from cloud database and calls 5 min prior the time (from time) alloted in the database\ndef search():\n    calling_time = datetime.now()\n    one_hours_from_now = (calling_time + timedelta(hours=1)).strftime('%H:%M:%S')  \n    current_date=str(strftime(\"%d-%m-%Y\", gmtime()))\n    docs = db.collection(u'on_call').where(u'date',u'==',current_date).stream()",
    "detail": "by-extension.python.caller",
    "documentation": {}
  },
  {
    "label": "db",
    "kind": 5,
    "importPath": "by-extension.python.caller",
    "description": "by-extension.python.caller",
    "peekOfCode": "db = firestore.client()\ndatabase_reference = db.collection('on_call')\n#Here the collection name is on_call which has documents with fields phone , from (%H:%M:%S time to call the person),date \n#gets data from cloud database and calls 5 min prior the time (from time) alloted in the database\ndef search():\n    calling_time = datetime.now()\n    one_hours_from_now = (calling_time + timedelta(hours=1)).strftime('%H:%M:%S')  \n    current_date=str(strftime(\"%d-%m-%Y\", gmtime()))\n    docs = db.collection(u'on_call').where(u'date',u'==',current_date).stream()\n    list_of_docs=[]",
    "detail": "by-extension.python.caller",
    "documentation": {}
  },
  {
    "label": "database_reference",
    "kind": 5,
    "importPath": "by-extension.python.caller",
    "description": "by-extension.python.caller",
    "peekOfCode": "database_reference = db.collection('on_call')\n#Here the collection name is on_call which has documents with fields phone , from (%H:%M:%S time to call the person),date \n#gets data from cloud database and calls 5 min prior the time (from time) alloted in the database\ndef search():\n    calling_time = datetime.now()\n    one_hours_from_now = (calling_time + timedelta(hours=1)).strftime('%H:%M:%S')  \n    current_date=str(strftime(\"%d-%m-%Y\", gmtime()))\n    docs = db.collection(u'on_call').where(u'date',u'==',current_date).stream()\n    list_of_docs=[]\n    for doc in docs:",
    "detail": "by-extension.python.caller",
    "documentation": {}
  },
  {
    "label": "get_file_content",
    "kind": 2,
    "importPath": "by-extension.python.car-assemble",
    "description": "by-extension.python.car-assemble",
    "peekOfCode": "def get_file_content(include_tag):\n    file_name = include_tag.split(\" \")[1].replace('\"', \"\")\n    return open(file_name).read()\ndef main():\n    \"\"\"\n    Lets dont worry about the program\n    Its basically replacing <include file.svg> with its file content\n    in the same file and produces final_car.svg as output\n    This is purely to show, how we can work with multiple files in out git repository.\n    \"\"\"",
    "detail": "by-extension.python.car-assemble",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "by-extension.python.car-assemble",
    "description": "by-extension.python.car-assemble",
    "peekOfCode": "def main():\n    \"\"\"\n    Lets dont worry about the program\n    Its basically replacing <include file.svg> with its file content\n    in the same file and produces final_car.svg as output\n    This is purely to show, how we can work with multiple files in out git repository.\n    \"\"\"\n    with open('car_assemble.svg') as file:  # reading source file car_assemble.svg\n        file_content = file.read()\n        regex = r\"<include .*svg\\\" />\"  # finding pattern <include file.svg> ",
    "detail": "by-extension.python.car-assemble",
    "documentation": {}
  },
  {
    "label": "cret",
    "kind": 2,
    "importPath": "by-extension.python.changemac",
    "description": "by-extension.python.changemac",
    "peekOfCode": "def cret(command):\n    process = Popen(\n        args=command,\n        stdout=PIPE,\n        shell=True\n    )\n    return process.communicate()[0]\n# function for genrate mac address random\ndef randmac():\n    return [0x00, 0x16, 0x3e,",
    "detail": "by-extension.python.changemac",
    "documentation": {}
  },
  {
    "label": "randmac",
    "kind": 2,
    "importPath": "by-extension.python.changemac",
    "description": "by-extension.python.changemac",
    "peekOfCode": "def randmac():\n    return [0x00, 0x16, 0x3e,\n            random.randint(0x00, 0x7f),\n            random.randint(0x00, 0xff),\n            random.randint(0x00, 0xff)]\ndef retrandmac(mac):\n    return ':'.join(map(lambda x: \"%02x\" % x, mac))\nprint(\"                                             +-+-+-+ +-+-+-+-+-+-+-+\")\nprint(\"                                             |M|A|C| |c|h|a|n|g|e|r|\")\nprint(\"                                             +-+-+-+ +-+-+-+-+-+-+-+\")",
    "detail": "by-extension.python.changemac",
    "documentation": {}
  },
  {
    "label": "retrandmac",
    "kind": 2,
    "importPath": "by-extension.python.changemac",
    "description": "by-extension.python.changemac",
    "peekOfCode": "def retrandmac(mac):\n    return ':'.join(map(lambda x: \"%02x\" % x, mac))\nprint(\"                                             +-+-+-+ +-+-+-+-+-+-+-+\")\nprint(\"                                             |M|A|C| |c|h|a|n|g|e|r|\")\nprint(\"                                             +-+-+-+ +-+-+-+-+-+-+-+\")\n# finding wireless interface name that should start with wl e.g.-wlan0,wlp3s0\ninfname = cret('ifconfig -a  | egrep \"^[wl-wl]+\" | sed \"s/: .*//\" | grep -v \"lo\"')\n# INTERFACE NAME 6 character so return 6 last character\ninfname = infname[:6]\ninfname = infname.decode('utf-8')",
    "detail": "by-extension.python.changemac",
    "documentation": {}
  },
  {
    "label": "infname",
    "kind": 5,
    "importPath": "by-extension.python.changemac",
    "description": "by-extension.python.changemac",
    "peekOfCode": "infname = cret('ifconfig -a  | egrep \"^[wl-wl]+\" | sed \"s/: .*//\" | grep -v \"lo\"')\n# INTERFACE NAME 6 character so return 6 last character\ninfname = infname[:6]\ninfname = infname.decode('utf-8')\n# GETTING MAC Address from /sys/class/net/wlan0/address directory\ncmdgetmac = ('cat /sys/class/net/' + infname + '/address')\ncrrntmac = cret(\"cat /sys/class/net/\" + infname + \"/address\")\ncrrntmac = crrntmac.decode('utf-8')\nprint(\n    \"Your Current mac address = \" + crrntmac + \"\\nEnter Option to change Your MAC:\\n1. Enter MAC address manually \\n2. Automatic Random MAC address\")",
    "detail": "by-extension.python.changemac",
    "documentation": {}
  },
  {
    "label": "infname",
    "kind": 5,
    "importPath": "by-extension.python.changemac",
    "description": "by-extension.python.changemac",
    "peekOfCode": "infname = infname[:6]\ninfname = infname.decode('utf-8')\n# GETTING MAC Address from /sys/class/net/wlan0/address directory\ncmdgetmac = ('cat /sys/class/net/' + infname + '/address')\ncrrntmac = cret(\"cat /sys/class/net/\" + infname + \"/address\")\ncrrntmac = crrntmac.decode('utf-8')\nprint(\n    \"Your Current mac address = \" + crrntmac + \"\\nEnter Option to change Your MAC:\\n1. Enter MAC address manually \\n2. Automatic Random MAC address\")\nopt = int(input())\nif opt == 1:",
    "detail": "by-extension.python.changemac",
    "documentation": {}
  },
  {
    "label": "infname",
    "kind": 5,
    "importPath": "by-extension.python.changemac",
    "description": "by-extension.python.changemac",
    "peekOfCode": "infname = infname.decode('utf-8')\n# GETTING MAC Address from /sys/class/net/wlan0/address directory\ncmdgetmac = ('cat /sys/class/net/' + infname + '/address')\ncrrntmac = cret(\"cat /sys/class/net/\" + infname + \"/address\")\ncrrntmac = crrntmac.decode('utf-8')\nprint(\n    \"Your Current mac address = \" + crrntmac + \"\\nEnter Option to change Your MAC:\\n1. Enter MAC address manually \\n2. Automatic Random MAC address\")\nopt = int(input())\nif opt == 1:\n    print(\"Please Enter Your New MAC address: \\nExmple:  46:d2:f4:0c:2a:50\")",
    "detail": "by-extension.python.changemac",
    "documentation": {}
  },
  {
    "label": "cmdgetmac",
    "kind": 5,
    "importPath": "by-extension.python.changemac",
    "description": "by-extension.python.changemac",
    "peekOfCode": "cmdgetmac = ('cat /sys/class/net/' + infname + '/address')\ncrrntmac = cret(\"cat /sys/class/net/\" + infname + \"/address\")\ncrrntmac = crrntmac.decode('utf-8')\nprint(\n    \"Your Current mac address = \" + crrntmac + \"\\nEnter Option to change Your MAC:\\n1. Enter MAC address manually \\n2. Automatic Random MAC address\")\nopt = int(input())\nif opt == 1:\n    print(\"Please Enter Your New MAC address: \\nExmple:  46:d2:f4:0c:2a:50\")\n    newmac = input()\n    print(\"Please wait changing  mac address..................\")",
    "detail": "by-extension.python.changemac",
    "documentation": {}
  },
  {
    "label": "crrntmac",
    "kind": 5,
    "importPath": "by-extension.python.changemac",
    "description": "by-extension.python.changemac",
    "peekOfCode": "crrntmac = cret(\"cat /sys/class/net/\" + infname + \"/address\")\ncrrntmac = crrntmac.decode('utf-8')\nprint(\n    \"Your Current mac address = \" + crrntmac + \"\\nEnter Option to change Your MAC:\\n1. Enter MAC address manually \\n2. Automatic Random MAC address\")\nopt = int(input())\nif opt == 1:\n    print(\"Please Enter Your New MAC address: \\nExmple:  46:d2:f4:0c:2a:50\")\n    newmac = input()\n    print(\"Please wait changing  mac address..................\")\n    # first turn off wifi",
    "detail": "by-extension.python.changemac",
    "documentation": {}
  },
  {
    "label": "crrntmac",
    "kind": 5,
    "importPath": "by-extension.python.changemac",
    "description": "by-extension.python.changemac",
    "peekOfCode": "crrntmac = crrntmac.decode('utf-8')\nprint(\n    \"Your Current mac address = \" + crrntmac + \"\\nEnter Option to change Your MAC:\\n1. Enter MAC address manually \\n2. Automatic Random MAC address\")\nopt = int(input())\nif opt == 1:\n    print(\"Please Enter Your New MAC address: \\nExmple:  46:d2:f4:0c:2a:50\")\n    newmac = input()\n    print(\"Please wait changing  mac address..................\")\n    # first turn off wifi\n    cret('nmcli radio wifi off')",
    "detail": "by-extension.python.changemac",
    "documentation": {}
  },
  {
    "label": "opt",
    "kind": 5,
    "importPath": "by-extension.python.changemac",
    "description": "by-extension.python.changemac",
    "peekOfCode": "opt = int(input())\nif opt == 1:\n    print(\"Please Enter Your New MAC address: \\nExmple:  46:d2:f4:0c:2a:50\")\n    newmac = input()\n    print(\"Please wait changing  mac address..................\")\n    # first turn off wifi\n    cret('nmcli radio wifi off')\n    changemaccmd = \"sudo ip link set dev \" + infname + \" address \" + newmac\n    # executing command with new mac address\n    cret(changemaccmd)",
    "detail": "by-extension.python.changemac",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "by-extension.python.chaos",
    "description": "by-extension.python.chaos",
    "peekOfCode": "def main():\n    print(\"This program illustrates a chaotic function\")\n    while True:\n        try:\n            x = float((input(\"Enter a number between 0 and 1: \")))\n            if (0 < x and x < 1):\n                break\n            else:\n                print(\"Please enter correct number\")\n        except Exception as e:",
    "detail": "by-extension.python.chaos",
    "documentation": {}
  },
  {
    "label": "num",
    "kind": 5,
    "importPath": "by-extension.python.check  if a number positive . negative or zero",
    "description": "by-extension.python.check  if a number positive . negative or zero",
    "peekOfCode": "num = float(input(\"Enter a number: \"))\nif num > 0:\n   print(\"Positive number\")\nelif num == 0:\n   print(\"Zero\")\nelse:\n   print(\"Negative number\")\n   num = float(input(\"Enter a number: \"))\nif num >= 0:\n   if num == 0:",
    "detail": "by-extension.python.check  if a number positive . negative or zero",
    "documentation": {}
  },
  {
    "label": "palindrome",
    "kind": 2,
    "importPath": "by-extension.python.check whether the string is Symmetrical or Palindrome",
    "description": "by-extension.python.check whether the string is Symmetrical or Palindrome",
    "peekOfCode": "def palindrome(a): \n    mid = (len(a)-1)//2\n    start = 0\n    last = len(a)-1\n    flag = 0\n    while(start<mid): \n        if (a[start]== a[last]): \n            start += 1\n            last -= 1\n        else: ",
    "detail": "by-extension.python.check whether the string is Symmetrical or Palindrome",
    "documentation": {}
  },
  {
    "label": "symmetry",
    "kind": 2,
    "importPath": "by-extension.python.check whether the string is Symmetrical or Palindrome",
    "description": "by-extension.python.check whether the string is Symmetrical or Palindrome",
    "peekOfCode": "def symmetry(a): \n    n = len(a) \n    flag = 0\n    if n%2: \n        mid = n//2 +1\n    else: \n        mid = n//2\n    start1 = 0\n    start2 = mid \n    while(start1 < mid and start2 < n): ",
    "detail": "by-extension.python.check whether the string is Symmetrical or Palindrome",
    "documentation": {}
  },
  {
    "label": "string",
    "kind": 5,
    "importPath": "by-extension.python.check whether the string is Symmetrical or Palindrome",
    "description": "by-extension.python.check whether the string is Symmetrical or Palindrome",
    "peekOfCode": "string = 'amaama'\npalindrome(string) \nsymmetry(string)",
    "detail": "by-extension.python.check whether the string is Symmetrical or Palindrome",
    "documentation": {}
  },
  {
    "label": "ends_by_0",
    "kind": 2,
    "importPath": "by-extension.python.check-property-on-prime-numbers",
    "description": "by-extension.python.check-property-on-prime-numbers",
    "peekOfCode": "def ends_by_0(p):\n    return (p % 10) == 9\ndef next_ends_by_9(p):\n    np = nextprime(p)\n    return (np % 10) == 9\ndef next_ends_by_1(p):\n    np = nextprime(p)\n    return (np % 10) == 1\ndef main(maxn):\n    primes = sieve",
    "detail": "by-extension.python.check-property-on-prime-numbers",
    "documentation": {}
  },
  {
    "label": "next_ends_by_9",
    "kind": 2,
    "importPath": "by-extension.python.check-property-on-prime-numbers",
    "description": "by-extension.python.check-property-on-prime-numbers",
    "peekOfCode": "def next_ends_by_9(p):\n    np = nextprime(p)\n    return (np % 10) == 9\ndef next_ends_by_1(p):\n    np = nextprime(p)\n    return (np % 10) == 1\ndef main(maxn):\n    primes = sieve\n    primes.extend(maxn)\n    primes = primes._list",
    "detail": "by-extension.python.check-property-on-prime-numbers",
    "documentation": {}
  },
  {
    "label": "next_ends_by_1",
    "kind": 2,
    "importPath": "by-extension.python.check-property-on-prime-numbers",
    "description": "by-extension.python.check-property-on-prime-numbers",
    "peekOfCode": "def next_ends_by_1(p):\n    np = nextprime(p)\n    return (np % 10) == 1\ndef main(maxn):\n    primes = sieve\n    primes.extend(maxn)\n    primes = primes._list\n    nb_primes = len(primes)\n    print(f\"We found {nb_primes} primes smaller or equal than {maxn}...\")\n    filtered_primes = [ p for p in primes if ends_by_0(p) ]",
    "detail": "by-extension.python.check-property-on-prime-numbers",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "by-extension.python.check-property-on-prime-numbers",
    "description": "by-extension.python.check-property-on-prime-numbers",
    "peekOfCode": "def main(maxn):\n    primes = sieve\n    primes.extend(maxn)\n    primes = primes._list\n    nb_primes = len(primes)\n    print(f\"We found {nb_primes} primes smaller or equal than {maxn}...\")\n    filtered_primes = [ p for p in primes if ends_by_0(p) ]\n    nb_filtered_primes = len(filtered_primes)\n    print(f\"We found {nb_filtered_primes} primes that finishes by 9...\")\n    rate = float(nb_filtered_primes) / float(nb_primes)",
    "detail": "by-extension.python.check-property-on-prime-numbers",
    "documentation": {}
  },
  {
    "label": "checker",
    "kind": 6,
    "importPath": "by-extension.python.checker",
    "description": "by-extension.python.checker",
    "peekOfCode": "class checker:\n    def __init__(self, window):\n        self._init()\n        self.window = window\n    # to update the position\n    def update (self):\n        self.board.draw(self.window)\n        self.draw_moves(self.valid_moves)\n        pg.display.update()\n    def _init(self):",
    "detail": "by-extension.python.checker",
    "documentation": {}
  },
  {
    "label": "checker_board",
    "kind": 6,
    "importPath": "by-extension.python.checker_board",
    "description": "by-extension.python.checker_board",
    "peekOfCode": "class checker_board:\n    def __init__(self):\n        self.board = []\n        self.selected = None\n        self.black_l = self.white_l = 12\n        self.black_k = self.white_k = 0\n        self.create_board()\n    # to design the board\n    def draw_cubes(self, window):\n        window.fill(green)",
    "detail": "by-extension.python.checker_board",
    "documentation": {}
  },
  {
    "label": "usage",
    "kind": 2,
    "importPath": "by-extension.python.check_file",
    "description": "by-extension.python.check_file",
    "peekOfCode": "def usage():\n    print('[-] Usage: python check_file.py [filename1] [filename2] ... [filenameN]')\n# Readfile Functions which open the file that is passed to the script\ndef readfile(filename):\n    with open(filename, 'r') as f:  # Ensure file is correctly closed under\n        read_file = f.read()  # all circumstances\n    print(read_file)\n    print()\n    print('#' * 80)\n    print()",
    "detail": "by-extension.python.check_file",
    "documentation": {}
  },
  {
    "label": "readfile",
    "kind": 2,
    "importPath": "by-extension.python.check_file",
    "description": "by-extension.python.check_file",
    "peekOfCode": "def readfile(filename):\n    with open(filename, 'r') as f:  # Ensure file is correctly closed under\n        read_file = f.read()  # all circumstances\n    print(read_file)\n    print()\n    print('#' * 80)\n    print()\ndef main():\n    # Check the arguments passed to the script\n    if len(sys.argv) >= 2:",
    "detail": "by-extension.python.check_file",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "by-extension.python.check_file",
    "description": "by-extension.python.check_file",
    "peekOfCode": "def main():\n    # Check the arguments passed to the script\n    if len(sys.argv) >= 2:\n        file_names = sys.argv[1:]\n        filteredfilenames_1 = list(file_names)  # To counter changing in the same list which you are iterating\n        filteredfilenames_2 = list(file_names)\n        # Iterate for each filename passed in command line argument\n        for filename in filteredfilenames_1:\n            if not os.path.isfile(filename):  # Check the File exists\n                print('[-] ' + filename + ' does not exist.')",
    "detail": "by-extension.python.check_file",
    "documentation": {}
  },
  {
    "label": "isSQLite3",
    "kind": 2,
    "importPath": "by-extension.python.check_for_sqlite_files",
    "description": "by-extension.python.check_for_sqlite_files",
    "peekOfCode": "def isSQLite3(filename):\n    from os.path import isfile, getsize\n    if not isfile(filename):\n        return False\n    if getsize(filename) < 100:  # SQLite database file header is 100 bytes\n        return False\n    else:\n        fd = open(filename, 'rb')\n        header = fd.read(100)\n        fd.close()",
    "detail": "by-extension.python.check_for_sqlite_files",
    "documentation": {}
  },
  {
    "label": "log",
    "kind": 5,
    "importPath": "by-extension.python.check_for_sqlite_files",
    "description": "by-extension.python.check_for_sqlite_files",
    "peekOfCode": "log = open('sqlite_audit.txt', 'w')\nfor r, d, f in os.walk(r'.'):\n    for files in f:\n        if isSQLite3(files):\n            print(files)\n            print(\"[+] '%s' **** is a SQLITE database file **** \" % os.path.join(r, files))\n            log.write(\"[+] '%s' **** is a SQLITE database file **** \" % files + '\\n')\n        else:\n            log.write(\"[-] '%s' is NOT a sqlite database file\" % os.path.join(r, files) + '\\n')\n            log.write(\"[-] '%s' is NOT a sqlite database file\" % files + '\\n')",
    "detail": "by-extension.python.check_for_sqlite_files",
    "documentation": {}
  },
  {
    "label": "l_to_c",
    "kind": 2,
    "importPath": "by-extension.python.check_IBAN",
    "description": "by-extension.python.check_IBAN",
    "peekOfCode": "def l_to_c(l):\n    try:\n        return str(int(l))\n    except ValueError:\n        return str(10 + ord(l.upper()) - ord('A'))\ndef check_iban(iban):\n    print(\"\\nChecking the IBAN number '%s'...\" % iban)\n    ib = iban.replace(' ', '')\n    ib = ib[4:] + ib[:4]\n    print(\"Of length\", len(ib))",
    "detail": "by-extension.python.check_IBAN",
    "documentation": {}
  },
  {
    "label": "check_iban",
    "kind": 2,
    "importPath": "by-extension.python.check_IBAN",
    "description": "by-extension.python.check_IBAN",
    "peekOfCode": "def check_iban(iban):\n    print(\"\\nChecking the IBAN number '%s'...\" % iban)\n    ib = iban.replace(' ', '')\n    ib = ib[4:] + ib[:4]\n    print(\"Of length\", len(ib))\n    i = int(''.join(l_to_c(l) for l in ib))\n    check = (i % 97) == 1\n    if check:\n        print(\"OK '%s' seems to be a valid IBAN number.\" % iban)\n    else:",
    "detail": "by-extension.python.check_IBAN",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "by-extension.python.check_IBAN",
    "description": "by-extension.python.check_IBAN",
    "peekOfCode": "def main(args):\n    try:\n        if not args:\n            check_iban('HAHA LOL YOU THOUGH I WILL LET A REAL IBAN IN MY SCRIPT')\n        else:\n            for iban in args:\n                check_iban(iban)\n        return 0\n    except Exception as e:\n        print(e)",
    "detail": "by-extension.python.check_IBAN",
    "documentation": {}
  },
  {
    "label": "get_user_input",
    "kind": 2,
    "importPath": "by-extension.python.check_input",
    "description": "by-extension.python.check_input",
    "peekOfCode": "def get_user_input(start, end):\n    \"\"\"\n        input: two integer values\n               lower limit 'start' and maximum 'end'\n               the arguments aren't inclusive.\n        output: if reading successful then returns the read integer. \n        purpose: reads from command-line a integer in the given bounds. \n                 while input invalid asks user again\n    \"\"\"\n    loop = True  # controls while-loop",
    "detail": "by-extension.python.check_input",
    "documentation": {}
  },
  {
    "label": "x",
    "kind": 5,
    "importPath": "by-extension.python.check_input",
    "description": "by-extension.python.check_input",
    "peekOfCode": "x = get_user_input(1, 6)\nprint(x)\n# Asks user to enter something, ie. a number option from a menu.\n# While type != interger, and not in the given range,\n# Program gives error message and asks for new input.",
    "detail": "by-extension.python.check_input",
    "documentation": {}
  },
  {
    "label": "checkInternetConnectivity",
    "kind": 2,
    "importPath": "by-extension.python.check_internet_con",
    "description": "by-extension.python.check_internet_con",
    "peekOfCode": "def checkInternetConnectivity():\n    try:\n        url = argv[1]\n        if 'https://' or 'http://' not in url:\n            url = 'https://' + url\n    except:\n        url = 'https://google.com'\n    try:\n         urlopen(url, timeout=2)\n         print(\"Connection to \\\"\"+ url + \"\\\" is working\")",
    "detail": "by-extension.python.check_internet_con",
    "documentation": {}
  },
  {
    "label": "l_to_c",
    "kind": 2,
    "importPath": "by-extension.python.check_NIRPP",
    "description": "by-extension.python.check_NIRPP",
    "peekOfCode": "def l_to_c(l):\n    try:\n        return str(int(l))\n    except ValueError:\n        return str(10 + ord(l.upper()) - ord('A'))\ndef check_nirpp(nirpp, length_checksum=length_checksum):\n    print(\"\\nChecking the NIRPP number '%s' ...\" % nirpp)\n    ib = nirpp.replace(' ', '')\n    checksum = int(ib[-length_checksum:])\n    ib = ib[:-length_checksum]",
    "detail": "by-extension.python.check_NIRPP",
    "documentation": {}
  },
  {
    "label": "check_nirpp",
    "kind": 2,
    "importPath": "by-extension.python.check_NIRPP",
    "description": "by-extension.python.check_NIRPP",
    "peekOfCode": "def check_nirpp(nirpp, length_checksum=length_checksum):\n    print(\"\\nChecking the NIRPP number '%s' ...\" % nirpp)\n    ib = nirpp.replace(' ', '')\n    checksum = int(ib[-length_checksum:])\n    ib = ib[:-length_checksum]\n    print(\"  Of length\", len(ib))\n    num_nirpp = int(''.join(l_to_c(l) for l in ib))\n    print(\"  Of sum num_nirpp =\", num_nirpp)\n    print(\"  Of check sum to 97 =\", (97 - (num_nirpp % 97)))\n    print(\"  And expected checksum was\", checksum)",
    "detail": "by-extension.python.check_NIRPP",
    "documentation": {}
  },
  {
    "label": "pprint_nirpp",
    "kind": 2,
    "importPath": "by-extension.python.check_NIRPP",
    "description": "by-extension.python.check_NIRPP",
    "peekOfCode": "def pprint_nirpp(nirpp, length_checksum=length_checksum):\n    print(\"\\nDisplaying information contained in the NIRPP number '%s' ...\" % nirpp)\n    ib = nirpp.replace(' ', '')\n    ib = ib[:-length_checksum]\n    # Printing\n    for (i, l) in sorted(information_nirpp):\n        n = nirpp[i: i + l]\n        info = information_nirpp[(i, l)]\n        if n in info[\"mapping\"]:\n            explain = \"\\\"{}\\\"\".format(info[\"mapping\"][n])",
    "detail": "by-extension.python.check_NIRPP",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "by-extension.python.check_NIRPP",
    "description": "by-extension.python.check_NIRPP",
    "peekOfCode": "def main(args):\n    try:\n        if not args:\n            check_nirpp('HAHA LOL YOU THOUGH I WILL LET A REAL NIRPP IN MY SCRIPT')\n        else:\n            for nirpp in args:\n                if check_nirpp(nirpp):\n                    pprint_nirpp(nirpp)\n        return 0\n    except Exception as e:",
    "detail": "by-extension.python.check_NIRPP",
    "documentation": {}
  },
  {
    "label": "length_checksum",
    "kind": 5,
    "importPath": "by-extension.python.check_NIRPP",
    "description": "by-extension.python.check_NIRPP",
    "peekOfCode": "length_checksum = 2\ndef l_to_c(l):\n    try:\n        return str(int(l))\n    except ValueError:\n        return str(10 + ord(l.upper()) - ord('A'))\ndef check_nirpp(nirpp, length_checksum=length_checksum):\n    print(\"\\nChecking the NIRPP number '%s' ...\" % nirpp)\n    ib = nirpp.replace(' ', '')\n    checksum = int(ib[-length_checksum:])",
    "detail": "by-extension.python.check_NIRPP",
    "documentation": {}
  },
  {
    "label": "information_nirpp",
    "kind": 5,
    "importPath": "by-extension.python.check_NIRPP",
    "description": "by-extension.python.check_NIRPP",
    "peekOfCode": "information_nirpp = {\n    (0, 1): {\n        \"meaning\": \"sexe\",\n        \"mapping\": {\n            \"1\": \"homme\",\n            \"2\": \"femme\",\n            \"3\": \"personne étrangère de sexe masculin en cours d'immatriculation en France\",\n            \"4\": \"personne étrangère de sexe féminin en cours d'immatriculation en France\"\n        }\n    },",
    "detail": "by-extension.python.check_NIRPP",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "by-extension.python.check_site_selenium",
    "description": "by-extension.python.check_site_selenium",
    "peekOfCode": "def main(URL, message, success):\n    print(f\"Downloading '{URL}'...\")\n    firefoxOptions = webdriver.FirefoxOptions()\n    firefoxOptions.headless = True\n    browser = webdriver.Firefox(options=firefoxOptions)\n    browser.get(URL)\n    source = browser.page_source\n    browser.close()\n    if message in source:\n        print(f\"{URL} indique toujours le message recherché :\\n\\\"{message}\\\"\")",
    "detail": "by-extension.python.check_site_selenium",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "by-extension.python.check_voyages-sncf",
    "description": "by-extension.python.check_voyages-sncf",
    "peekOfCode": "def main(url, MY_OUTWARD_TIME):\n    \"\"\" Go to the page 'url', find the next link to got, then extract the JSON query result, find the wanted train, and display the results.\n    \"\"\"\n    MY_OUTWARD_TIME = MY_OUTWARD_TIME.replace('h', ':')\n    # Create the web browser object\n    b = RB(history=True, allow_redirects=True)\n    # Open the page\n    b.open(url)\n    # Find the next page to go\n    res = str(b.select('#url_redirect_proposals')[0])",
    "detail": "by-extension.python.check_voyages-sncf",
    "documentation": {}
  },
  {
    "label": "url_finder",
    "kind": 5,
    "importPath": "by-extension.python.check_voyages-sncf",
    "description": "by-extension.python.check_voyages-sncf",
    "peekOfCode": "url_finder = re.compile(r'http[^\"]*')\nquery_finder = re.compile(r\"data.query = JSON.parse\\('\\{[^\\n]*\")\nsearchResponse_finder = re.compile(r\"data.searchResponse = JSON.parse\\('\\{[^\\n]*\")\n# url0 = \"http://www.voyages-sncf.com//vsc/train-ticket/?_LANG=fr&site_country=FR&site_language=fr&ORIGIN_CITY=Toulon&DESTINATION_CITY=Paris%20%28Toutes%20gares%20intramuros%29&OUTWARD_DATE=31/05/2016&OUTWARD_TIME=15&INWARD_DATE=&INWARD_TIME=7&COMFORT_CLASS=2&DISTRIBUTED_COUNTRY=FR&NB_TYPO_ADULT=1&bookingChoice=train&PASSENGER_1=YOUNG&PASSENGER_1_CARD=MI1ST&PASSENGER_1_FID_PROG=&PASSENGER_1FID_NUM_BEGIN=&CODE_PROMO_1=&action:searchTravel=Rechercher\"\nURL_TEMPLATE = \"https://www.voyages-sncf.com/vsc/train-ticket/?_LANG=fr&site_country=FR&site_language=fr&ORIGIN_CITY={ORIGIN_CITY}&DESTINATION_CITY={DESTINATION_CITY}&OUTWARD_DATE={DATE}&OUTWARD_TIME={OUTWARD_TIME}&INWARD_DATE=&INWARD_TIME=7&COMFORT_CLASS=2&DISTRIBUTED_COUNTRY=FR&NB_TYPO_ADULT=1&bookingChoice=train&PASSENGER_1=YOUNG&PASSENGER_1_CARD=MI1ST&PASSENGER_1_FID_PROG=&PASSENGER_1FID_NUM_BEGIN=&CODE_PROMO_1=&action:searchTravel=Rechercher\"\n# url1 = 'http://www.voyages-sncf.com/vsc/proposals/findProposals?hid='\ndef main(url, MY_OUTWARD_TIME):\n    \"\"\" Go to the page 'url', find the next link to got, then extract the JSON query result, find the wanted train, and display the results.\n    \"\"\"\n    MY_OUTWARD_TIME = MY_OUTWARD_TIME.replace('h', ':')",
    "detail": "by-extension.python.check_voyages-sncf",
    "documentation": {}
  },
  {
    "label": "query_finder",
    "kind": 5,
    "importPath": "by-extension.python.check_voyages-sncf",
    "description": "by-extension.python.check_voyages-sncf",
    "peekOfCode": "query_finder = re.compile(r\"data.query = JSON.parse\\('\\{[^\\n]*\")\nsearchResponse_finder = re.compile(r\"data.searchResponse = JSON.parse\\('\\{[^\\n]*\")\n# url0 = \"http://www.voyages-sncf.com//vsc/train-ticket/?_LANG=fr&site_country=FR&site_language=fr&ORIGIN_CITY=Toulon&DESTINATION_CITY=Paris%20%28Toutes%20gares%20intramuros%29&OUTWARD_DATE=31/05/2016&OUTWARD_TIME=15&INWARD_DATE=&INWARD_TIME=7&COMFORT_CLASS=2&DISTRIBUTED_COUNTRY=FR&NB_TYPO_ADULT=1&bookingChoice=train&PASSENGER_1=YOUNG&PASSENGER_1_CARD=MI1ST&PASSENGER_1_FID_PROG=&PASSENGER_1FID_NUM_BEGIN=&CODE_PROMO_1=&action:searchTravel=Rechercher\"\nURL_TEMPLATE = \"https://www.voyages-sncf.com/vsc/train-ticket/?_LANG=fr&site_country=FR&site_language=fr&ORIGIN_CITY={ORIGIN_CITY}&DESTINATION_CITY={DESTINATION_CITY}&OUTWARD_DATE={DATE}&OUTWARD_TIME={OUTWARD_TIME}&INWARD_DATE=&INWARD_TIME=7&COMFORT_CLASS=2&DISTRIBUTED_COUNTRY=FR&NB_TYPO_ADULT=1&bookingChoice=train&PASSENGER_1=YOUNG&PASSENGER_1_CARD=MI1ST&PASSENGER_1_FID_PROG=&PASSENGER_1FID_NUM_BEGIN=&CODE_PROMO_1=&action:searchTravel=Rechercher\"\n# url1 = 'http://www.voyages-sncf.com/vsc/proposals/findProposals?hid='\ndef main(url, MY_OUTWARD_TIME):\n    \"\"\" Go to the page 'url', find the next link to got, then extract the JSON query result, find the wanted train, and display the results.\n    \"\"\"\n    MY_OUTWARD_TIME = MY_OUTWARD_TIME.replace('h', ':')\n    # Create the web browser object",
    "detail": "by-extension.python.check_voyages-sncf",
    "documentation": {}
  },
  {
    "label": "searchResponse_finder",
    "kind": 5,
    "importPath": "by-extension.python.check_voyages-sncf",
    "description": "by-extension.python.check_voyages-sncf",
    "peekOfCode": "searchResponse_finder = re.compile(r\"data.searchResponse = JSON.parse\\('\\{[^\\n]*\")\n# url0 = \"http://www.voyages-sncf.com//vsc/train-ticket/?_LANG=fr&site_country=FR&site_language=fr&ORIGIN_CITY=Toulon&DESTINATION_CITY=Paris%20%28Toutes%20gares%20intramuros%29&OUTWARD_DATE=31/05/2016&OUTWARD_TIME=15&INWARD_DATE=&INWARD_TIME=7&COMFORT_CLASS=2&DISTRIBUTED_COUNTRY=FR&NB_TYPO_ADULT=1&bookingChoice=train&PASSENGER_1=YOUNG&PASSENGER_1_CARD=MI1ST&PASSENGER_1_FID_PROG=&PASSENGER_1FID_NUM_BEGIN=&CODE_PROMO_1=&action:searchTravel=Rechercher\"\nURL_TEMPLATE = \"https://www.voyages-sncf.com/vsc/train-ticket/?_LANG=fr&site_country=FR&site_language=fr&ORIGIN_CITY={ORIGIN_CITY}&DESTINATION_CITY={DESTINATION_CITY}&OUTWARD_DATE={DATE}&OUTWARD_TIME={OUTWARD_TIME}&INWARD_DATE=&INWARD_TIME=7&COMFORT_CLASS=2&DISTRIBUTED_COUNTRY=FR&NB_TYPO_ADULT=1&bookingChoice=train&PASSENGER_1=YOUNG&PASSENGER_1_CARD=MI1ST&PASSENGER_1_FID_PROG=&PASSENGER_1FID_NUM_BEGIN=&CODE_PROMO_1=&action:searchTravel=Rechercher\"\n# url1 = 'http://www.voyages-sncf.com/vsc/proposals/findProposals?hid='\ndef main(url, MY_OUTWARD_TIME):\n    \"\"\" Go to the page 'url', find the next link to got, then extract the JSON query result, find the wanted train, and display the results.\n    \"\"\"\n    MY_OUTWARD_TIME = MY_OUTWARD_TIME.replace('h', ':')\n    # Create the web browser object\n    b = RB(history=True, allow_redirects=True)",
    "detail": "by-extension.python.check_voyages-sncf",
    "documentation": {}
  },
  {
    "label": "URL_TEMPLATE",
    "kind": 5,
    "importPath": "by-extension.python.check_voyages-sncf",
    "description": "by-extension.python.check_voyages-sncf",
    "peekOfCode": "URL_TEMPLATE = \"https://www.voyages-sncf.com/vsc/train-ticket/?_LANG=fr&site_country=FR&site_language=fr&ORIGIN_CITY={ORIGIN_CITY}&DESTINATION_CITY={DESTINATION_CITY}&OUTWARD_DATE={DATE}&OUTWARD_TIME={OUTWARD_TIME}&INWARD_DATE=&INWARD_TIME=7&COMFORT_CLASS=2&DISTRIBUTED_COUNTRY=FR&NB_TYPO_ADULT=1&bookingChoice=train&PASSENGER_1=YOUNG&PASSENGER_1_CARD=MI1ST&PASSENGER_1_FID_PROG=&PASSENGER_1FID_NUM_BEGIN=&CODE_PROMO_1=&action:searchTravel=Rechercher\"\n# url1 = 'http://www.voyages-sncf.com/vsc/proposals/findProposals?hid='\ndef main(url, MY_OUTWARD_TIME):\n    \"\"\" Go to the page 'url', find the next link to got, then extract the JSON query result, find the wanted train, and display the results.\n    \"\"\"\n    MY_OUTWARD_TIME = MY_OUTWARD_TIME.replace('h', ':')\n    # Create the web browser object\n    b = RB(history=True, allow_redirects=True)\n    # Open the page\n    b.open(url)",
    "detail": "by-extension.python.check_voyages-sncf",
    "documentation": {}
  },
  {
    "label": "palindrome",
    "kind": 2,
    "importPath": "by-extension.python.check_whether_the_string_is_Symmetrical_or_Palindrome",
    "description": "by-extension.python.check_whether_the_string_is_Symmetrical_or_Palindrome",
    "peekOfCode": "def palindrome(a):\n    mid = (len(a) - 1) // 2\n    start = 0\n    last = len(a) - 1\n    flag = 0\n    while start < mid:\n        if a[start] == a[last]:\n            start += 1\n            last -= 1\n        else:",
    "detail": "by-extension.python.check_whether_the_string_is_Symmetrical_or_Palindrome",
    "documentation": {}
  },
  {
    "label": "symmetry",
    "kind": 2,
    "importPath": "by-extension.python.check_whether_the_string_is_Symmetrical_or_Palindrome",
    "description": "by-extension.python.check_whether_the_string_is_Symmetrical_or_Palindrome",
    "peekOfCode": "def symmetry(a):\n    n = len(a)\n    flag = 0\n    if n % 2:\n        mid = n // 2 + 1\n    else:\n        mid = n // 2\n    start1 = 0\n    start2 = mid\n    while start1 < mid and start2 < n:",
    "detail": "by-extension.python.check_whether_the_string_is_Symmetrical_or_Palindrome",
    "documentation": {}
  },
  {
    "label": "string",
    "kind": 5,
    "importPath": "by-extension.python.check_whether_the_string_is_Symmetrical_or_Palindrome",
    "description": "by-extension.python.check_whether_the_string_is_Symmetrical_or_Palindrome",
    "peekOfCode": "string = \"amaama\"\npalindrome(string)\nsymmetry(string)",
    "detail": "by-extension.python.check_whether_the_string_is_Symmetrical_or_Palindrome",
    "documentation": {}
  },
  {
    "label": "num",
    "kind": 5,
    "importPath": "by-extension.python.check__if_a_number_positive_._negative_or_zero",
    "description": "by-extension.python.check__if_a_number_positive_._negative_or_zero",
    "peekOfCode": "num = float(input(\"Enter a number: \"))\nif num > 0:\n    print(\"Positive number\")\nelif num == 0:\n    print(\"Zero\")\nelse:\n    print(\"Negative number\")\n    num = float(input(\"Enter a number: \"))\nif num >= 0:\n    if num == 0:",
    "detail": "by-extension.python.check__if_a_number_positive_._negative_or_zero",
    "documentation": {}
  },
  {
    "label": "Print",
    "kind": 6,
    "importPath": "by-extension.python.cherrypy_print_file_interface",
    "description": "by-extension.python.cherrypy_print_file_interface",
    "peekOfCode": "class Print(object):\n    @cherrypy.expose\n    def index(self):\n        return HTML_TEMPLATE\n    @cherrypy.expose\n    def send(self, file, user, **kwargs):\n        try:\n            cups.setUser(user)\n            conn = cups.Connection()\n            job_name = str(uuid.uuid4())",
    "detail": "by-extension.python.cherrypy_print_file_interface",
    "documentation": {}
  },
  {
    "label": "HTML_TEMPLATE",
    "kind": 5,
    "importPath": "by-extension.python.cherrypy_print_file_interface",
    "description": "by-extension.python.cherrypy_print_file_interface",
    "peekOfCode": "HTML_TEMPLATE = \"\"\"\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">\n<html><head><title>Print</title>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\">\n</head><body><h1>Print File</h1>\n<form action=\"send\" method=\"POST\" enctype=\"multipart/form-data\">\nFile name: <input name=\"file\" type=\"file\"><br>\nUser name: <input name=\"user\"><br>\n<input name=\"submit\" type=\"submit\">\n</form>",
    "detail": "by-extension.python.cherrypy_print_file_interface",
    "documentation": {}
  },
  {
    "label": "solve",
    "kind": 2,
    "importPath": "by-extension.python.chicks_n_rabs",
    "description": "by-extension.python.chicks_n_rabs",
    "peekOfCode": "def solve(num_heads, num_legs):\n    ns = 'No solutions!'\n    for i in range(num_heads + 1):\n        j = num_heads - i\n        if 2 * i + 4 * j == num_legs:\n            return i, j\n    return ns, ns\nif __name__ == \"__main__\":\n    numheads = 35\n    numlegs = 94",
    "detail": "by-extension.python.chicks_n_rabs",
    "documentation": {}
  },
  {
    "label": "hit",
    "kind": 2,
    "importPath": "by-extension.python.Chrome Dino Automater",
    "description": "by-extension.python.Chrome Dino Automater",
    "peekOfCode": "def hit(key):\n    pyautogui.press(key)\n    return\ndef isCollide(data):\n    # for cactus\n    for i in range(329, 425):\n        for j in range(550, 650):\n            if data[i, j] < 100:\n                hit(\"up\")\n                return",
    "detail": "by-extension.python.Chrome Dino Automater",
    "documentation": {}
  },
  {
    "label": "isCollide",
    "kind": 2,
    "importPath": "by-extension.python.Chrome Dino Automater",
    "description": "by-extension.python.Chrome Dino Automater",
    "peekOfCode": "def isCollide(data):\n    # for cactus\n    for i in range(329, 425):\n        for j in range(550, 650):\n            if data[i, j] < 100:\n                hit(\"up\")\n                return\n    # Draw the rectangle for birds\n    # for i in range(310, 425):\n    #     for j in range(390, 550):",
    "detail": "by-extension.python.Chrome Dino Automater",
    "documentation": {}
  },
  {
    "label": "hit",
    "kind": 2,
    "importPath": "by-extension.python.Chrome_Dino_Automater",
    "description": "by-extension.python.Chrome_Dino_Automater",
    "peekOfCode": "def hit(key):\n    pyautogui.press(key)\n    return\ndef isCollide(data):\n    # for cactus\n    for i in range(329, 425):\n        for j in range(550, 650):\n            if data[i, j] < 100:\n                hit(\"up\")\n                return",
    "detail": "by-extension.python.Chrome_Dino_Automater",
    "documentation": {}
  },
  {
    "label": "isCollide",
    "kind": 2,
    "importPath": "by-extension.python.Chrome_Dino_Automater",
    "description": "by-extension.python.Chrome_Dino_Automater",
    "peekOfCode": "def isCollide(data):\n    # for cactus\n    for i in range(329, 425):\n        for j in range(550, 650):\n            if data[i, j] < 100:\n                hit(\"up\")\n                return\n    # Draw the rectangle for birds\n    # for i in range(310, 425):\n    #     for j in range(390, 550):",
    "detail": "by-extension.python.Chrome_Dino_Automater",
    "documentation": {}
  },
  {
    "label": "card",
    "kind": 6,
    "importPath": "by-extension.python.classicIndianCardMatch",
    "description": "by-extension.python.classicIndianCardMatch",
    "peekOfCode": "class card:\n    def __init__(self, suit, rank):\n        if (suit in SUITS) and (rank in RANKS):\n            self.suit = suit\n            self.rank = rank\n        else:\n            self.suit = None\n            self.rank = None\n            print(\"Invalid card: \", suit, rank)\n    def __str__(self):",
    "detail": "by-extension.python.classicIndianCardMatch",
    "documentation": {}
  },
  {
    "label": "deck",
    "kind": 6,
    "importPath": "by-extension.python.classicIndianCardMatch",
    "description": "by-extension.python.classicIndianCardMatch",
    "peekOfCode": "class deck:\n    def __init__(self):\n        self.deck = [card(suit, rank) for suit in SUITS for rank in RANKS]\n    def shuffle(self):\n        random.shuffle(self.deck)\n    def dealCard(self):\n        return random.choice(self.deck)\n    def __str__(self):\n        print(self.deck)\n# Begin play",
    "detail": "by-extension.python.classicIndianCardMatch",
    "documentation": {}
  },
  {
    "label": "SUITS",
    "kind": 5,
    "importPath": "by-extension.python.classicIndianCardMatch",
    "description": "by-extension.python.classicIndianCardMatch",
    "peekOfCode": "SUITS = ('C', 'S', 'H', 'D')\nRANKS = ('A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K')\nVALUES = {'A': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'T': 10, 'J': 10, 'Q': 10, 'K': 10}\nclass card:\n    def __init__(self, suit, rank):\n        if (suit in SUITS) and (rank in RANKS):\n            self.suit = suit\n            self.rank = rank\n        else:\n            self.suit = None",
    "detail": "by-extension.python.classicIndianCardMatch",
    "documentation": {}
  },
  {
    "label": "RANKS",
    "kind": 5,
    "importPath": "by-extension.python.classicIndianCardMatch",
    "description": "by-extension.python.classicIndianCardMatch",
    "peekOfCode": "RANKS = ('A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K')\nVALUES = {'A': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'T': 10, 'J': 10, 'Q': 10, 'K': 10}\nclass card:\n    def __init__(self, suit, rank):\n        if (suit in SUITS) and (rank in RANKS):\n            self.suit = suit\n            self.rank = rank\n        else:\n            self.suit = None\n            self.rank = None",
    "detail": "by-extension.python.classicIndianCardMatch",
    "documentation": {}
  },
  {
    "label": "VALUES",
    "kind": 5,
    "importPath": "by-extension.python.classicIndianCardMatch",
    "description": "by-extension.python.classicIndianCardMatch",
    "peekOfCode": "VALUES = {'A': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'T': 10, 'J': 10, 'Q': 10, 'K': 10}\nclass card:\n    def __init__(self, suit, rank):\n        if (suit in SUITS) and (rank in RANKS):\n            self.suit = suit\n            self.rank = rank\n        else:\n            self.suit = None\n            self.rank = None\n            print(\"Invalid card: \", suit, rank)",
    "detail": "by-extension.python.classicIndianCardMatch",
    "documentation": {}
  },
  {
    "label": "deck1",
    "kind": 5,
    "importPath": "by-extension.python.classicIndianCardMatch",
    "description": "by-extension.python.classicIndianCardMatch",
    "peekOfCode": "deck1 = deck()\ndeck2 = deck()\ntime.sleep(5)\nprint('..........decks ready!!!\\n')\nprint('Combining and shuffling both the decks..')\ntime.sleep(10)\n# Shuffle the decks\ndeck1.shuffle()\ndeck2.shuffle()\n# combine both the shuffled decks",
    "detail": "by-extension.python.classicIndianCardMatch",
    "documentation": {}
  },
  {
    "label": "deck2",
    "kind": 5,
    "importPath": "by-extension.python.classicIndianCardMatch",
    "description": "by-extension.python.classicIndianCardMatch",
    "peekOfCode": "deck2 = deck()\ntime.sleep(5)\nprint('..........decks ready!!!\\n')\nprint('Combining and shuffling both the decks..')\ntime.sleep(10)\n# Shuffle the decks\ndeck1.shuffle()\ndeck2.shuffle()\n# combine both the shuffled decks\ncombinedDeck = deck1.deck + deck2.deck",
    "detail": "by-extension.python.classicIndianCardMatch",
    "documentation": {}
  },
  {
    "label": "combinedDeck",
    "kind": 5,
    "importPath": "by-extension.python.classicIndianCardMatch",
    "description": "by-extension.python.classicIndianCardMatch",
    "peekOfCode": "combinedDeck = deck1.deck + deck2.deck\n# ReShuffle the combined deck, cut it and distribute to two players.\nrandom.shuffle(combinedDeck)\nprint(\"....decks have been combined and shuffled...\\n\")\nprint(\"------------------------------------------\\n\")\ninput(\"Enter a key to cut the deck..\\n\")\nplayer1 = combinedDeck[0:52]\nplayer2 = combinedDeck[52:]\nprint(\"Deck has been split into two and Human get a half and computer gets the other...\\n\")\n# Begin play:",
    "detail": "by-extension.python.classicIndianCardMatch",
    "documentation": {}
  },
  {
    "label": "player1",
    "kind": 5,
    "importPath": "by-extension.python.classicIndianCardMatch",
    "description": "by-extension.python.classicIndianCardMatch",
    "peekOfCode": "player1 = combinedDeck[0:52]\nplayer2 = combinedDeck[52:]\nprint(\"Deck has been split into two and Human get a half and computer gets the other...\\n\")\n# Begin play:\nprint(\"------------------------------------------\\n\")\nprint(\"player1 == Human\\n\")\nprint(\"player2 == Computer\\n\")\nprint(\"------------------------------------------\\n\")\nprint(\"player1 goes first...hit any key to place the card on the pile..\\n\")\ncenterPile = []",
    "detail": "by-extension.python.classicIndianCardMatch",
    "documentation": {}
  },
  {
    "label": "player2",
    "kind": 5,
    "importPath": "by-extension.python.classicIndianCardMatch",
    "description": "by-extension.python.classicIndianCardMatch",
    "peekOfCode": "player2 = combinedDeck[52:]\nprint(\"Deck has been split into two and Human get a half and computer gets the other...\\n\")\n# Begin play:\nprint(\"------------------------------------------\\n\")\nprint(\"player1 == Human\\n\")\nprint(\"player2 == Computer\\n\")\nprint(\"------------------------------------------\\n\")\nprint(\"player1 goes first...hit any key to place the card on the pile..\\n\")\ncenterPile = []\ncurrentPlayer2Card = None",
    "detail": "by-extension.python.classicIndianCardMatch",
    "documentation": {}
  },
  {
    "label": "centerPile",
    "kind": 5,
    "importPath": "by-extension.python.classicIndianCardMatch",
    "description": "by-extension.python.classicIndianCardMatch",
    "peekOfCode": "centerPile = []\ncurrentPlayer2Card = None\nwhile len(player1) != 0 and len(player2) != 0:  # this needs a fix as it goes on an infinite loop on a success.\n    switchPlayer = True\n    while switchPlayer == True:\n        for card in range(len(player1)):\n            input(\"Enter any key to place a card!!!\\n\")\n            currentPlayer1Card = player1[card].rank\n            print(\"Your current card's rank: {}\".format(currentPlayer1Card))\n            centerPile.append(player1[card])",
    "detail": "by-extension.python.classicIndianCardMatch",
    "documentation": {}
  },
  {
    "label": "currentPlayer2Card",
    "kind": 5,
    "importPath": "by-extension.python.classicIndianCardMatch",
    "description": "by-extension.python.classicIndianCardMatch",
    "peekOfCode": "currentPlayer2Card = None\nwhile len(player1) != 0 and len(player2) != 0:  # this needs a fix as it goes on an infinite loop on a success.\n    switchPlayer = True\n    while switchPlayer == True:\n        for card in range(len(player1)):\n            input(\"Enter any key to place a card!!!\\n\")\n            currentPlayer1Card = player1[card].rank\n            print(\"Your current card's rank: {}\".format(currentPlayer1Card))\n            centerPile.append(player1[card])\n            player1.pop(card)",
    "detail": "by-extension.python.classicIndianCardMatch",
    "documentation": {}
  },
  {
    "label": "model",
    "kind": 5,
    "importPath": "by-extension.python.Classification_human_or_horse",
    "description": "by-extension.python.Classification_human_or_horse",
    "peekOfCode": "model = tf.keras.models.Sequential([tf.keras.layers.Conv2D(16, (3, 3), activation='relu', input_shape=(200, 200, 3)),\n                                    tf.keras.layers.MaxPooling2D(2, 2),\n                                    tf.keras.layers.Conv2D(16, (3, 3), activation='relu'),\n                                    tf.keras.layers.MaxPooling2D(2, 2),\n                                    tf.keras.layers.Conv2D(16, (3, 3), activation='relu'),\n                                    tf.keras.layers.MaxPooling2D(2, 2),\n                                    tf.keras.layers.Flatten(),\n                                    tf.keras.layers.Dense(512, activation='relu'),\n                                    tf.keras.layers.Dense(1, activation=\"sigmoid\")\n                                    ])",
    "detail": "by-extension.python.Classification_human_or_horse",
    "documentation": {}
  },
  {
    "label": "train_datagen",
    "kind": 5,
    "importPath": "by-extension.python.Classification_human_or_horse",
    "description": "by-extension.python.Classification_human_or_horse",
    "peekOfCode": "train_datagen = ImageDataGenerator(rescale=1 / 255)\ntrain_generator = train_datagen.flow_from_directory('../Classification_human-or-horse',\n                                                    target_size=(200, 200),\n                                                    batch_size=222,\n                                                    class_mode='binary')\nmodel.fit_generator(train_generator, steps_per_epoch=6, epochs=1, verbose=1)\nfilename = \"myTf1.sav\"\npickle.dump(model, open(filename, 'wb'))\nfrom tkinter import Tk\nfrom tkinter.filedialog import askopenfilename",
    "detail": "by-extension.python.Classification_human_or_horse",
    "documentation": {}
  },
  {
    "label": "train_generator",
    "kind": 5,
    "importPath": "by-extension.python.Classification_human_or_horse",
    "description": "by-extension.python.Classification_human_or_horse",
    "peekOfCode": "train_generator = train_datagen.flow_from_directory('../Classification_human-or-horse',\n                                                    target_size=(200, 200),\n                                                    batch_size=222,\n                                                    class_mode='binary')\nmodel.fit_generator(train_generator, steps_per_epoch=6, epochs=1, verbose=1)\nfilename = \"myTf1.sav\"\npickle.dump(model, open(filename, 'wb'))\nfrom tkinter import Tk\nfrom tkinter.filedialog import askopenfilename\nfrom keras.preprocessing import image",
    "detail": "by-extension.python.Classification_human_or_horse",
    "documentation": {}
  },
  {
    "label": "filename",
    "kind": 5,
    "importPath": "by-extension.python.Classification_human_or_horse",
    "description": "by-extension.python.Classification_human_or_horse",
    "peekOfCode": "filename = \"myTf1.sav\"\npickle.dump(model, open(filename, 'wb'))\nfrom tkinter import Tk\nfrom tkinter.filedialog import askopenfilename\nfrom keras.preprocessing import image\nimport numpy as np\nTk().withdraw()\nfilename = askopenfilename()\nprint(filename)\nimg = image.load_img(filename, target_size=(200, 200))",
    "detail": "by-extension.python.Classification_human_or_horse",
    "documentation": {}
  },
  {
    "label": "filename",
    "kind": 5,
    "importPath": "by-extension.python.Classification_human_or_horse",
    "description": "by-extension.python.Classification_human_or_horse",
    "peekOfCode": "filename = askopenfilename()\nprint(filename)\nimg = image.load_img(filename, target_size=(200, 200))\nx = image.img_to_array(img)\nx = np.expand_dims(x, axis=0)\nimages = np.vstack([x])\nclasses = model.predict(images, batch_size=10)\nprint(classes[0])\nif classes[0] > 0.5:\n    print(filename + \" is a human\")",
    "detail": "by-extension.python.Classification_human_or_horse",
    "documentation": {}
  },
  {
    "label": "img",
    "kind": 5,
    "importPath": "by-extension.python.Classification_human_or_horse",
    "description": "by-extension.python.Classification_human_or_horse",
    "peekOfCode": "img = image.load_img(filename, target_size=(200, 200))\nx = image.img_to_array(img)\nx = np.expand_dims(x, axis=0)\nimages = np.vstack([x])\nclasses = model.predict(images, batch_size=10)\nprint(classes[0])\nif classes[0] > 0.5:\n    print(filename + \" is a human\")\nelse:\n    print(filename + \" is a horse\")",
    "detail": "by-extension.python.Classification_human_or_horse",
    "documentation": {}
  },
  {
    "label": "x",
    "kind": 5,
    "importPath": "by-extension.python.Classification_human_or_horse",
    "description": "by-extension.python.Classification_human_or_horse",
    "peekOfCode": "x = image.img_to_array(img)\nx = np.expand_dims(x, axis=0)\nimages = np.vstack([x])\nclasses = model.predict(images, batch_size=10)\nprint(classes[0])\nif classes[0] > 0.5:\n    print(filename + \" is a human\")\nelse:\n    print(filename + \" is a horse\")",
    "detail": "by-extension.python.Classification_human_or_horse",
    "documentation": {}
  },
  {
    "label": "x",
    "kind": 5,
    "importPath": "by-extension.python.Classification_human_or_horse",
    "description": "by-extension.python.Classification_human_or_horse",
    "peekOfCode": "x = np.expand_dims(x, axis=0)\nimages = np.vstack([x])\nclasses = model.predict(images, batch_size=10)\nprint(classes[0])\nif classes[0] > 0.5:\n    print(filename + \" is a human\")\nelse:\n    print(filename + \" is a horse\")",
    "detail": "by-extension.python.Classification_human_or_horse",
    "documentation": {}
  },
  {
    "label": "images",
    "kind": 5,
    "importPath": "by-extension.python.Classification_human_or_horse",
    "description": "by-extension.python.Classification_human_or_horse",
    "peekOfCode": "images = np.vstack([x])\nclasses = model.predict(images, batch_size=10)\nprint(classes[0])\nif classes[0] > 0.5:\n    print(filename + \" is a human\")\nelse:\n    print(filename + \" is a horse\")",
    "detail": "by-extension.python.Classification_human_or_horse",
    "documentation": {}
  },
  {
    "label": "classes",
    "kind": 5,
    "importPath": "by-extension.python.Classification_human_or_horse",
    "description": "by-extension.python.Classification_human_or_horse",
    "peekOfCode": "classes = model.predict(images, batch_size=10)\nprint(classes[0])\nif classes[0] > 0.5:\n    print(filename + \" is a human\")\nelse:\n    print(filename + \" is a horse\")",
    "detail": "by-extension.python.Classification_human_or_horse",
    "documentation": {}
  },
  {
    "label": "s",
    "kind": 5,
    "importPath": "by-extension.python.client",
    "description": "by-extension.python.client",
    "peekOfCode": "s = socket.socket()\n# take user input ip of server\nserver = input(\"Enter Server IP: \")\n# bind the socket to the port 12345, and connect  \ns.connect((server, 12345))\n# receive message from server connection successfully established\ndata = s.recv(1024).decode(\"utf-8\")\nprint(server + \": \" + data)\nwhile True:\n    # send message to server",
    "detail": "by-extension.python.client",
    "documentation": {}
  },
  {
    "label": "server",
    "kind": 5,
    "importPath": "by-extension.python.client",
    "description": "by-extension.python.client",
    "peekOfCode": "server = input(\"Enter Server IP: \")\n# bind the socket to the port 12345, and connect  \ns.connect((server, 12345))\n# receive message from server connection successfully established\ndata = s.recv(1024).decode(\"utf-8\")\nprint(server + \": \" + data)\nwhile True:\n    # send message to server\n    new_data = str(input(\"You: \")).encode(\"utf-8\")\n    s.sendall(new_data)",
    "detail": "by-extension.python.client",
    "documentation": {}
  },
  {
    "label": "data",
    "kind": 5,
    "importPath": "by-extension.python.client",
    "description": "by-extension.python.client",
    "peekOfCode": "data = s.recv(1024).decode(\"utf-8\")\nprint(server + \": \" + data)\nwhile True:\n    # send message to server\n    new_data = str(input(\"You: \")).encode(\"utf-8\")\n    s.sendall(new_data)\n    # receive message from server\n    data = s.recv(1024).decode(\"utf-8\")\n    print(server + \": \" + data)\n# close connection",
    "detail": "by-extension.python.client",
    "documentation": {}
  },
  {
    "label": "climbing_staircase",
    "kind": 2,
    "importPath": "by-extension.python.climbing_staircase",
    "description": "by-extension.python.climbing_staircase",
    "peekOfCode": "def climbing_staircase(steps, height):\n    dp = [0 for i in range(height)]\n    # add all steps into dp\n    for s in steps:\n        if s <= height:\n            dp[s - 1] = 1\n    # for each position look how you can arrive there\n    for i in range(height):\n        for s in steps:\n            if i - s >= 0:",
    "detail": "by-extension.python.climbing_staircase",
    "documentation": {}
  },
  {
    "label": "YouTubeDownloder",
    "kind": 6,
    "importPath": "by-extension.python.CliYoutubeDownloader",
    "description": "by-extension.python.CliYoutubeDownloader",
    "peekOfCode": "class YouTubeDownloder:\n    def __init__(self):\n        self.url = str(input(\"Enter the url of video : \"))\n        self.youtube = pytube.YouTube(\n            self.url, on_progress_callback=YouTubeDownloder.onProgress)\n        self.showTitle()\n    def showTitle(self):\n        print(\"title : {0}\\n\".format(self.youtube.title))\n        self.showStreams()\n    def showStreams(self):",
    "detail": "by-extension.python.CliYoutubeDownloader",
    "documentation": {}
  },
  {
    "label": "time",
    "kind": 2,
    "importPath": "by-extension.python.clock",
    "description": "by-extension.python.clock",
    "peekOfCode": "def time(): \n    string = strftime('%H:%M:%S %p') \n    clockTime.config(text = string) \n    clockTime.after(1000, time)\nclockTime = tkinter.Label(top, font = ('calibri', 40, 'bold'), background = 'black', foreground = 'white')\nclockTime.pack(anchor = 'center')\ntime() \ntop.mainloop()",
    "detail": "by-extension.python.clock",
    "documentation": {}
  },
  {
    "label": "top",
    "kind": 5,
    "importPath": "by-extension.python.clock",
    "description": "by-extension.python.clock",
    "peekOfCode": "top = tkinter.Tk()\n#setting title of the App\ntop.title('Clock')\n#restricting the resizable property\ntop.resizable(0,0)\ndef time(): \n    string = strftime('%H:%M:%S %p') \n    clockTime.config(text = string) \n    clockTime.after(1000, time)\nclockTime = tkinter.Label(top, font = ('calibri', 40, 'bold'), background = 'black', foreground = 'white')",
    "detail": "by-extension.python.clock",
    "documentation": {}
  },
  {
    "label": "clockTime",
    "kind": 5,
    "importPath": "by-extension.python.clock",
    "description": "by-extension.python.clock",
    "peekOfCode": "clockTime = tkinter.Label(top, font = ('calibri', 40, 'bold'), background = 'black', foreground = 'white')\nclockTime.pack(anchor = 'center')\ntime() \ntop.mainloop()",
    "detail": "by-extension.python.clock",
    "documentation": {}
  },
  {
    "label": "clockTime.pack(anchor",
    "kind": 5,
    "importPath": "by-extension.python.clock",
    "description": "by-extension.python.clock",
    "peekOfCode": "clockTime.pack(anchor = 'center')\ntime() \ntop.mainloop()",
    "detail": "by-extension.python.clock",
    "documentation": {}
  },
  {
    "label": "Cloning",
    "kind": 2,
    "importPath": "by-extension.python.cloning a  list",
    "description": "by-extension.python.cloning a  list",
    "peekOfCode": "def Cloning(li1): \n    li_copy = li1[:] \n    return li_copy \n# Driver Code \nli1 = [4, 8, 2, 10, 15, 18] \nli2 = Cloning(li1) \nprint(\"Original List:\", li1) \nprint(\"After Cloning:\", li2)",
    "detail": "by-extension.python.cloning a  list",
    "documentation": {}
  },
  {
    "label": "li1",
    "kind": 5,
    "importPath": "by-extension.python.cloning a  list",
    "description": "by-extension.python.cloning a  list",
    "peekOfCode": "li1 = [4, 8, 2, 10, 15, 18] \nli2 = Cloning(li1) \nprint(\"Original List:\", li1) \nprint(\"After Cloning:\", li2)",
    "detail": "by-extension.python.cloning a  list",
    "documentation": {}
  },
  {
    "label": "li2",
    "kind": 5,
    "importPath": "by-extension.python.cloning a  list",
    "description": "by-extension.python.cloning a  list",
    "peekOfCode": "li2 = Cloning(li1) \nprint(\"Original List:\", li1) \nprint(\"After Cloning:\", li2)",
    "detail": "by-extension.python.cloning a  list",
    "documentation": {}
  },
  {
    "label": "Cloning",
    "kind": 2,
    "importPath": "by-extension.python.cloning_a__list",
    "description": "by-extension.python.cloning_a__list",
    "peekOfCode": "def Cloning(li1):\n    li_copy = li1[:]\n    return li_copy\n# Driver Code\nli1 = [4, 8, 2, 10, 15, 18]\nli2 = Cloning(li1)\nprint(\"Original List:\", li1)\nprint(\"After Cloning:\", li2)",
    "detail": "by-extension.python.cloning_a__list",
    "documentation": {}
  },
  {
    "label": "li1",
    "kind": 5,
    "importPath": "by-extension.python.cloning_a__list",
    "description": "by-extension.python.cloning_a__list",
    "peekOfCode": "li1 = [4, 8, 2, 10, 15, 18]\nli2 = Cloning(li1)\nprint(\"Original List:\", li1)\nprint(\"After Cloning:\", li2)",
    "detail": "by-extension.python.cloning_a__list",
    "documentation": {}
  },
  {
    "label": "li2",
    "kind": 5,
    "importPath": "by-extension.python.cloning_a__list",
    "description": "by-extension.python.cloning_a__list",
    "peekOfCode": "li2 = Cloning(li1)\nprint(\"Original List:\", li1)\nprint(\"After Cloning:\", li2)",
    "detail": "by-extension.python.cloning_a__list",
    "documentation": {}
  },
  {
    "label": "get_data",
    "kind": 2,
    "importPath": "by-extension.python.cloud_cover_statistics_with_darksky_data",
    "description": "by-extension.python.cloud_cover_statistics_with_darksky_data",
    "peekOfCode": "def get_data(location, key, delay=365):\n    thisday = date.today()\n    oneday = timedelta(days=1)\n    alldata = {}\n    all_cloud_cover = {}\n    for d in range(delay):\n        t = thisday.isoformat()\n        if 'T' not in t:\n            t += 'T12:00:00'\n        try:",
    "detail": "by-extension.python.cloud_cover_statistics_with_darksky_data",
    "documentation": {}
  },
  {
    "label": "save_data",
    "kind": 2,
    "importPath": "by-extension.python.cloud_cover_statistics_with_darksky_data",
    "description": "by-extension.python.cloud_cover_statistics_with_darksky_data",
    "peekOfCode": "def save_data(all_cloud_cover, filename):\n    new_dict = dict()\n    for d, k in all_cloud_cover.items():\n        new_dict[d.isoformat()] = k\n    with open(filename, \"w\") as fp:\n        dump(new_dict, fp)\ndef load_data(filename):\n    with open(filename, \"r\") as fp:\n        new_dict = load(fp)\n        all_cloud_cover = dict()",
    "detail": "by-extension.python.cloud_cover_statistics_with_darksky_data",
    "documentation": {}
  },
  {
    "label": "load_data",
    "kind": 2,
    "importPath": "by-extension.python.cloud_cover_statistics_with_darksky_data",
    "description": "by-extension.python.cloud_cover_statistics_with_darksky_data",
    "peekOfCode": "def load_data(filename):\n    with open(filename, \"r\") as fp:\n        new_dict = load(fp)\n        all_cloud_cover = dict()\n        for d, k in new_dict.items():\n            dt = parse(d.replace('T12:00:00', ''))\n            all_cloud_cover[dt] = k\n    return all_cloud_cover\ndef plot_data(all_cloud_cover, name, filename):\n    Xs = np.array(list(all_cloud_cover.keys()))",
    "detail": "by-extension.python.cloud_cover_statistics_with_darksky_data",
    "documentation": {}
  },
  {
    "label": "plot_data",
    "kind": 2,
    "importPath": "by-extension.python.cloud_cover_statistics_with_darksky_data",
    "description": "by-extension.python.cloud_cover_statistics_with_darksky_data",
    "peekOfCode": "def plot_data(all_cloud_cover, name, filename):\n    Xs = np.array(list(all_cloud_cover.keys()))\n    Ys = np.array(list(all_cloud_cover.values()))\n    # Remove day where we couldn't find the data\n    are_nans = np.isnan(Ys)\n    Xs = Xs[~are_nans]\n    Ys = Ys[~are_nans]\n    fig, ax = plt.subplots()\n    ax.set_title(f\"Cloud cover index in {name}\")\n    ax.set_xlabel(\"Date\")",
    "detail": "by-extension.python.cloud_cover_statistics_with_darksky_data",
    "documentation": {}
  },
  {
    "label": "plot_data_by_weekday",
    "kind": 2,
    "importPath": "by-extension.python.cloud_cover_statistics_with_darksky_data",
    "description": "by-extension.python.cloud_cover_statistics_with_darksky_data",
    "peekOfCode": "def plot_data_by_weekday(all_cloud_cover, name, filename):\n    count_of_weekday = np.zeros(7)\n    data_by_weekday = np.zeros(7)\n    mean_by_weekday = np.zeros(7)\n    for x, y in all_cloud_cover.items():\n        if not np.isnan(y):\n            weekday = x.weekday()\n            count_of_weekday[weekday] += 1\n            data_by_weekday[weekday] += y\n            # print(\"For weekday\", weekday, \"one more count with cloud_cover =\", y)",
    "detail": "by-extension.python.cloud_cover_statistics_with_darksky_data",
    "documentation": {}
  },
  {
    "label": "cocktail_sort",
    "kind": 2,
    "importPath": "by-extension.python.cocktail_sort",
    "description": "by-extension.python.cocktail_sort",
    "peekOfCode": "def cocktail_sort(collection):\n    counter = 0\n    length = len(collection)\n    left, right = 0, length - 1\n    while left <= right:\n        for i in range(left, right, +1):\n            if collection[i] > collection[i + 1]:\n                collection[i], collection[i + 1] = collection[i + 1], collection[i]\n        right -= 1\n        for i in range(right, left, -1):",
    "detail": "by-extension.python.cocktail_sort",
    "documentation": {}
  },
  {
    "label": "visualization",
    "kind": 2,
    "importPath": "by-extension.python.cocktail_sort",
    "description": "by-extension.python.cocktail_sort",
    "peekOfCode": "def visualization():\n    length = 10\n    collection = [randint(0, length) for _ in range(length)]\n    print(\"Initial list:\", collection)\n    print(\"Visualization of algorithm work.\")\n    collection, counter = cocktail_sort(collection)\n    print(\"Final list:\", collection)\n    print(\"Total numbers of passages:\", counter)\ndef main():\n    elapsed_time = timeit.timeit(visualization, number=1)",
    "detail": "by-extension.python.cocktail_sort",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "by-extension.python.cocktail_sort",
    "description": "by-extension.python.cocktail_sort",
    "peekOfCode": "def main():\n    elapsed_time = timeit.timeit(visualization, number=1)\n    print(\"Elapsed time: \", round(elapsed_time, 7), \"sec.\")\nif __name__ == \"__main__\":\n    main()",
    "detail": "by-extension.python.cocktail_sort",
    "documentation": {}
  },
  {
    "label": "coin_change_1",
    "kind": 2,
    "importPath": "by-extension.python.coin_change",
    "description": "by-extension.python.coin_change",
    "peekOfCode": "def coin_change_1(coins, amount):\n    if amount == 0:\n        return 0\n    if len(coins) == 0:\n        return -1\n    max_value = amount + 1  # use this instead of math.inf\n    dp = [max_value for i in range(max_value)]\n    dp[0] = 0\n    for i in range(1, max_value):\n        for c in coins:",
    "detail": "by-extension.python.coin_change",
    "documentation": {}
  },
  {
    "label": "coin_change_2",
    "kind": 2,
    "importPath": "by-extension.python.coin_change",
    "description": "by-extension.python.coin_change",
    "peekOfCode": "def coin_change_2(coins, amount):\n    if amount == 0:\n        return 0\n    if len(coins) == 0:\n        return -1\n    max_value = amount + 1\n    max_coin = min(max_value, max(coins) + 1)\n    dp = [max_value for i in range(max_coin)]\n    dp[0] = 0\n    for i in range(1, max_value):",
    "detail": "by-extension.python.coin_change",
    "documentation": {}
  },
  {
    "label": "coins",
    "kind": 5,
    "importPath": "by-extension.python.coin_change",
    "description": "by-extension.python.coin_change",
    "peekOfCode": "coins = [1, 2, 5]\namount = 11\nprint(coin_change_1(coins, amount))\nprint(coin_change_2(coins, amount))\n# Test 2\n# Correct result => -1\ncoins = [2]\namount = 3\nprint(coin_change_1(coins, amount))\nprint(coin_change_2(coins, amount))",
    "detail": "by-extension.python.coin_change",
    "documentation": {}
  },
  {
    "label": "amount",
    "kind": 5,
    "importPath": "by-extension.python.coin_change",
    "description": "by-extension.python.coin_change",
    "peekOfCode": "amount = 11\nprint(coin_change_1(coins, amount))\nprint(coin_change_2(coins, amount))\n# Test 2\n# Correct result => -1\ncoins = [2]\namount = 3\nprint(coin_change_1(coins, amount))\nprint(coin_change_2(coins, amount))",
    "detail": "by-extension.python.coin_change",
    "documentation": {}
  },
  {
    "label": "coins",
    "kind": 5,
    "importPath": "by-extension.python.coin_change",
    "description": "by-extension.python.coin_change",
    "peekOfCode": "coins = [2]\namount = 3\nprint(coin_change_1(coins, amount))\nprint(coin_change_2(coins, amount))",
    "detail": "by-extension.python.coin_change",
    "documentation": {}
  },
  {
    "label": "amount",
    "kind": 5,
    "importPath": "by-extension.python.coin_change",
    "description": "by-extension.python.coin_change",
    "peekOfCode": "amount = 3\nprint(coin_change_1(coins, amount))\nprint(coin_change_2(coins, amount))",
    "detail": "by-extension.python.coin_change",
    "documentation": {}
  },
  {
    "label": "comb_sort",
    "kind": 2,
    "importPath": "by-extension.python.comb_sort",
    "description": "by-extension.python.comb_sort",
    "peekOfCode": "def comb_sort(collection, counter):\n    length = len(collection)\n    gap = length * 10 // 13 if length > 1 else 0\n    while gap:\n        if 8 < gap < 11:\n            gap = 11\n        swapped = 0\n        for index in range(length - gap):\n            if collection[index + gap] < collection[index]:\n                collection[index + gap], collection[index] = (",
    "detail": "by-extension.python.comb_sort",
    "documentation": {}
  },
  {
    "label": "visualization",
    "kind": 2,
    "importPath": "by-extension.python.comb_sort",
    "description": "by-extension.python.comb_sort",
    "peekOfCode": "def visualization():\n    counter = 0\n    length = 10\n    collection = [randint(0, length) for _ in range(length)]\n    print(\"Initial list:\", collection)\n    print(\"Visualization of algorithm work.\")\n    collection, counter = comb_sort(collection, counter)\n    print(\"Final list:\", collection)\n    print(\"Total numbers of passages:\", counter)\ndef main():",
    "detail": "by-extension.python.comb_sort",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "by-extension.python.comb_sort",
    "description": "by-extension.python.comb_sort",
    "peekOfCode": "def main():\n    elapsed_time = timeit.timeit(visualization, number=1)\n    print(\"Elapsed time: \", round(elapsed_time, 7), \"sec.\")\nif __name__ == \"__main__\":\n    main()",
    "detail": "by-extension.python.comb_sort",
    "documentation": {}
  },
  {
    "label": "read_groups",
    "kind": 2,
    "importPath": "by-extension.python.commit_size_vs_commit_message_size",
    "description": "by-extension.python.commit_size_vs_commit_message_size",
    "peekOfCode": "def read_groups(data):\n    buf = []\n    for line in data:\n        buf.append(line)\n        if line.find('changed') != -1 and buf:\n            yield buf\n            buf = []\ndef main(url):\n    command = 'git log --no-color --shortstat --log-size --format=oneline --no-merges'.split()\n    data = subprocess.check_output(command).split('\\n')",
    "detail": "by-extension.python.commit_size_vs_commit_message_size",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "by-extension.python.commit_size_vs_commit_message_size",
    "description": "by-extension.python.commit_size_vs_commit_message_size",
    "peekOfCode": "def main(url):\n    command = 'git log --no-color --shortstat --log-size --format=oneline --no-merges'.split()\n    data = subprocess.check_output(command).split('\\n')\n    xs, ys, msgs, commits = [], [], [], []\n    for group in read_groups(data):\n        if len(group) != 3: continue\n        commit = group[0].split()[0]\n        log_size = int(group[0].split()[-1])\n        msg = group[1]\n        change_size = sum(map(int, group[2].split()[3::2]))",
    "detail": "by-extension.python.commit_size_vs_commit_message_size",
    "documentation": {}
  },
  {
    "label": "f",
    "kind": 2,
    "importPath": "by-extension.python.convert-array",
    "description": "by-extension.python.convert-array",
    "peekOfCode": "def f(arr):\n    \"\"\"sorts the array by numbers in place using constant extra space\"\"\"\n    position = 0\n    for i in xrange(len(arr) / 3):\n        gap = (len(arr) - position) / 3\n        arr.insert(position + 1, arr.pop(position + gap * 1))\n        arr.insert(position + 2, arr.pop(position + gap * 2))\n        position += 3\n    return arr",
    "detail": "by-extension.python.convert-array",
    "documentation": {}
  },
  {
    "label": "host",
    "kind": 5,
    "importPath": "by-extension.python.con_file",
    "description": "by-extension.python.con_file",
    "peekOfCode": "host = \"localhost\"\nmongoPort = 27017\nSOCKS5_PROXY_PORT = 1080\nauth = \"\"\npasscode = \"\"\n# if proxy is not working please update the auth and passcode",
    "detail": "by-extension.python.con_file",
    "documentation": {}
  },
  {
    "label": "mongoPort",
    "kind": 5,
    "importPath": "by-extension.python.con_file",
    "description": "by-extension.python.con_file",
    "peekOfCode": "mongoPort = 27017\nSOCKS5_PROXY_PORT = 1080\nauth = \"\"\npasscode = \"\"\n# if proxy is not working please update the auth and passcode",
    "detail": "by-extension.python.con_file",
    "documentation": {}
  },
  {
    "label": "SOCKS5_PROXY_PORT",
    "kind": 5,
    "importPath": "by-extension.python.con_file",
    "description": "by-extension.python.con_file",
    "peekOfCode": "SOCKS5_PROXY_PORT = 1080\nauth = \"\"\npasscode = \"\"\n# if proxy is not working please update the auth and passcode",
    "detail": "by-extension.python.con_file",
    "documentation": {}
  },
  {
    "label": "auth",
    "kind": 5,
    "importPath": "by-extension.python.con_file",
    "description": "by-extension.python.con_file",
    "peekOfCode": "auth = \"\"\npasscode = \"\"\n# if proxy is not working please update the auth and passcode",
    "detail": "by-extension.python.con_file",
    "documentation": {}
  },
  {
    "label": "passcode",
    "kind": 5,
    "importPath": "by-extension.python.con_file",
    "description": "by-extension.python.con_file",
    "peekOfCode": "passcode = \"\"\n# if proxy is not working please update the auth and passcode",
    "detail": "by-extension.python.con_file",
    "documentation": {}
  },
  {
    "label": "instances)",
    "kind": 6,
    "importPath": "by-extension.python.copy",
    "description": "by-extension.python.copy",
    "peekOfCode": "class instances).\n- A shallow copy constructs a new compound object and then (to the\n  extent possible) inserts *the same objects* into it that the\n  original contains.\n- A deep copy constructs a new compound object and then, recursively,\n  inserts *copies* into it of the objects found in the original.\nTwo problems often exist with deep copy operations that don't exist\nwith shallow copy operations:\n a) recursive objects (compound objects that, directly or indirectly,\n    contain a reference to themselves) may cause a recursive loop",
    "detail": "by-extension.python.copy",
    "documentation": {}
  },
  {
    "label": "Error",
    "kind": 6,
    "importPath": "by-extension.python.copy",
    "description": "by-extension.python.copy",
    "peekOfCode": "class Error(Exception):\n    pass\nerror = Error   # backward compatibility\ntry:\n    from org.python.core import PyStringMap\nexcept ImportError:\n    PyStringMap = None\n__all__ = [\"Error\", \"copy\", \"deepcopy\"]\ndef copy(x):\n    \"\"\"Shallow copy operation on arbitrary Python objects.",
    "detail": "by-extension.python.copy",
    "documentation": {}
  },
  {
    "label": "copy",
    "kind": 2,
    "importPath": "by-extension.python.copy",
    "description": "by-extension.python.copy",
    "peekOfCode": "def copy(x):\n    \"\"\"Shallow copy operation on arbitrary Python objects.\n    See the module's __doc__ string for more info.\n    \"\"\"\n    cls = type(x)\n    copier = _copy_dispatch.get(cls)\n    if copier:\n        return copier(x)\n    if issubclass(cls, type):\n        # treat it as a regular class:",
    "detail": "by-extension.python.copy",
    "documentation": {}
  },
  {
    "label": "deepcopy",
    "kind": 2,
    "importPath": "by-extension.python.copy",
    "description": "by-extension.python.copy",
    "peekOfCode": "def deepcopy(x, memo=None, _nil=[]):\n    \"\"\"Deep copy operation on arbitrary Python objects.\n    See the module's __doc__ string for more info.\n    \"\"\"\n    if memo is None:\n        memo = {}\n    d = id(x)\n    y = memo.get(d, _nil)\n    if y is not _nil:\n        return y",
    "detail": "by-extension.python.copy",
    "documentation": {}
  },
  {
    "label": "error",
    "kind": 5,
    "importPath": "by-extension.python.copy",
    "description": "by-extension.python.copy",
    "peekOfCode": "error = Error   # backward compatibility\ntry:\n    from org.python.core import PyStringMap\nexcept ImportError:\n    PyStringMap = None\n__all__ = [\"Error\", \"copy\", \"deepcopy\"]\ndef copy(x):\n    \"\"\"Shallow copy operation on arbitrary Python objects.\n    See the module's __doc__ string for more info.\n    \"\"\"",
    "detail": "by-extension.python.copy",
    "documentation": {}
  },
  {
    "label": "__all__",
    "kind": 5,
    "importPath": "by-extension.python.copy",
    "description": "by-extension.python.copy",
    "peekOfCode": "__all__ = [\"Error\", \"copy\", \"deepcopy\"]\ndef copy(x):\n    \"\"\"Shallow copy operation on arbitrary Python objects.\n    See the module's __doc__ string for more info.\n    \"\"\"\n    cls = type(x)\n    copier = _copy_dispatch.get(cls)\n    if copier:\n        return copier(x)\n    if issubclass(cls, type):",
    "detail": "by-extension.python.copy",
    "documentation": {}
  },
  {
    "label": "_copy_dispatch",
    "kind": 5,
    "importPath": "by-extension.python.copy",
    "description": "by-extension.python.copy",
    "peekOfCode": "_copy_dispatch = d = {}\ndef _copy_immutable(x):\n    return x\nfor t in (type(None), int, float, bool, complex, str, tuple,\n          bytes, frozenset, type, range, slice, property,\n          types.BuiltinFunctionType, type(Ellipsis), type(NotImplemented),\n          types.FunctionType, weakref.ref):\n    d[t] = _copy_immutable\nt = getattr(types, \"CodeType\", None)\nif t is not None:",
    "detail": "by-extension.python.copy",
    "documentation": {}
  },
  {
    "label": "t",
    "kind": 5,
    "importPath": "by-extension.python.copy",
    "description": "by-extension.python.copy",
    "peekOfCode": "t = getattr(types, \"CodeType\", None)\nif t is not None:\n    d[t] = _copy_immutable\nd[list] = list.copy\nd[dict] = dict.copy\nd[set] = set.copy\nd[bytearray] = bytearray.copy\nif PyStringMap is not None:\n    d[PyStringMap] = PyStringMap.copy\ndel d, t",
    "detail": "by-extension.python.copy",
    "documentation": {}
  },
  {
    "label": "d[list]",
    "kind": 5,
    "importPath": "by-extension.python.copy",
    "description": "by-extension.python.copy",
    "peekOfCode": "d[list] = list.copy\nd[dict] = dict.copy\nd[set] = set.copy\nd[bytearray] = bytearray.copy\nif PyStringMap is not None:\n    d[PyStringMap] = PyStringMap.copy\ndel d, t\ndef deepcopy(x, memo=None, _nil=[]):\n    \"\"\"Deep copy operation on arbitrary Python objects.\n    See the module's __doc__ string for more info.",
    "detail": "by-extension.python.copy",
    "documentation": {}
  },
  {
    "label": "d[dict]",
    "kind": 5,
    "importPath": "by-extension.python.copy",
    "description": "by-extension.python.copy",
    "peekOfCode": "d[dict] = dict.copy\nd[set] = set.copy\nd[bytearray] = bytearray.copy\nif PyStringMap is not None:\n    d[PyStringMap] = PyStringMap.copy\ndel d, t\ndef deepcopy(x, memo=None, _nil=[]):\n    \"\"\"Deep copy operation on arbitrary Python objects.\n    See the module's __doc__ string for more info.\n    \"\"\"",
    "detail": "by-extension.python.copy",
    "documentation": {}
  },
  {
    "label": "d[set]",
    "kind": 5,
    "importPath": "by-extension.python.copy",
    "description": "by-extension.python.copy",
    "peekOfCode": "d[set] = set.copy\nd[bytearray] = bytearray.copy\nif PyStringMap is not None:\n    d[PyStringMap] = PyStringMap.copy\ndel d, t\ndef deepcopy(x, memo=None, _nil=[]):\n    \"\"\"Deep copy operation on arbitrary Python objects.\n    See the module's __doc__ string for more info.\n    \"\"\"\n    if memo is None:",
    "detail": "by-extension.python.copy",
    "documentation": {}
  },
  {
    "label": "d[bytearray]",
    "kind": 5,
    "importPath": "by-extension.python.copy",
    "description": "by-extension.python.copy",
    "peekOfCode": "d[bytearray] = bytearray.copy\nif PyStringMap is not None:\n    d[PyStringMap] = PyStringMap.copy\ndel d, t\ndef deepcopy(x, memo=None, _nil=[]):\n    \"\"\"Deep copy operation on arbitrary Python objects.\n    See the module's __doc__ string for more info.\n    \"\"\"\n    if memo is None:\n        memo = {}",
    "detail": "by-extension.python.copy",
    "documentation": {}
  },
  {
    "label": "_deepcopy_dispatch",
    "kind": 5,
    "importPath": "by-extension.python.copy",
    "description": "by-extension.python.copy",
    "peekOfCode": "_deepcopy_dispatch = d = {}\ndef _deepcopy_atomic(x, memo):\n    return x\nd[type(None)] = _deepcopy_atomic\nd[type(Ellipsis)] = _deepcopy_atomic\nd[type(NotImplemented)] = _deepcopy_atomic\nd[int] = _deepcopy_atomic\nd[float] = _deepcopy_atomic\nd[bool] = _deepcopy_atomic\nd[complex] = _deepcopy_atomic",
    "detail": "by-extension.python.copy",
    "documentation": {}
  },
  {
    "label": "d[type(None)]",
    "kind": 5,
    "importPath": "by-extension.python.copy",
    "description": "by-extension.python.copy",
    "peekOfCode": "d[type(None)] = _deepcopy_atomic\nd[type(Ellipsis)] = _deepcopy_atomic\nd[type(NotImplemented)] = _deepcopy_atomic\nd[int] = _deepcopy_atomic\nd[float] = _deepcopy_atomic\nd[bool] = _deepcopy_atomic\nd[complex] = _deepcopy_atomic\nd[bytes] = _deepcopy_atomic\nd[str] = _deepcopy_atomic\nd[types.CodeType] = _deepcopy_atomic",
    "detail": "by-extension.python.copy",
    "documentation": {}
  },
  {
    "label": "d[type(Ellipsis)]",
    "kind": 5,
    "importPath": "by-extension.python.copy",
    "description": "by-extension.python.copy",
    "peekOfCode": "d[type(Ellipsis)] = _deepcopy_atomic\nd[type(NotImplemented)] = _deepcopy_atomic\nd[int] = _deepcopy_atomic\nd[float] = _deepcopy_atomic\nd[bool] = _deepcopy_atomic\nd[complex] = _deepcopy_atomic\nd[bytes] = _deepcopy_atomic\nd[str] = _deepcopy_atomic\nd[types.CodeType] = _deepcopy_atomic\nd[type] = _deepcopy_atomic",
    "detail": "by-extension.python.copy",
    "documentation": {}
  },
  {
    "label": "d[type(NotImplemented)]",
    "kind": 5,
    "importPath": "by-extension.python.copy",
    "description": "by-extension.python.copy",
    "peekOfCode": "d[type(NotImplemented)] = _deepcopy_atomic\nd[int] = _deepcopy_atomic\nd[float] = _deepcopy_atomic\nd[bool] = _deepcopy_atomic\nd[complex] = _deepcopy_atomic\nd[bytes] = _deepcopy_atomic\nd[str] = _deepcopy_atomic\nd[types.CodeType] = _deepcopy_atomic\nd[type] = _deepcopy_atomic\nd[types.BuiltinFunctionType] = _deepcopy_atomic",
    "detail": "by-extension.python.copy",
    "documentation": {}
  },
  {
    "label": "d[int]",
    "kind": 5,
    "importPath": "by-extension.python.copy",
    "description": "by-extension.python.copy",
    "peekOfCode": "d[int] = _deepcopy_atomic\nd[float] = _deepcopy_atomic\nd[bool] = _deepcopy_atomic\nd[complex] = _deepcopy_atomic\nd[bytes] = _deepcopy_atomic\nd[str] = _deepcopy_atomic\nd[types.CodeType] = _deepcopy_atomic\nd[type] = _deepcopy_atomic\nd[types.BuiltinFunctionType] = _deepcopy_atomic\nd[types.FunctionType] = _deepcopy_atomic",
    "detail": "by-extension.python.copy",
    "documentation": {}
  },
  {
    "label": "d[float]",
    "kind": 5,
    "importPath": "by-extension.python.copy",
    "description": "by-extension.python.copy",
    "peekOfCode": "d[float] = _deepcopy_atomic\nd[bool] = _deepcopy_atomic\nd[complex] = _deepcopy_atomic\nd[bytes] = _deepcopy_atomic\nd[str] = _deepcopy_atomic\nd[types.CodeType] = _deepcopy_atomic\nd[type] = _deepcopy_atomic\nd[types.BuiltinFunctionType] = _deepcopy_atomic\nd[types.FunctionType] = _deepcopy_atomic\nd[weakref.ref] = _deepcopy_atomic",
    "detail": "by-extension.python.copy",
    "documentation": {}
  },
  {
    "label": "d[bool]",
    "kind": 5,
    "importPath": "by-extension.python.copy",
    "description": "by-extension.python.copy",
    "peekOfCode": "d[bool] = _deepcopy_atomic\nd[complex] = _deepcopy_atomic\nd[bytes] = _deepcopy_atomic\nd[str] = _deepcopy_atomic\nd[types.CodeType] = _deepcopy_atomic\nd[type] = _deepcopy_atomic\nd[types.BuiltinFunctionType] = _deepcopy_atomic\nd[types.FunctionType] = _deepcopy_atomic\nd[weakref.ref] = _deepcopy_atomic\nd[property] = _deepcopy_atomic",
    "detail": "by-extension.python.copy",
    "documentation": {}
  },
  {
    "label": "d[complex]",
    "kind": 5,
    "importPath": "by-extension.python.copy",
    "description": "by-extension.python.copy",
    "peekOfCode": "d[complex] = _deepcopy_atomic\nd[bytes] = _deepcopy_atomic\nd[str] = _deepcopy_atomic\nd[types.CodeType] = _deepcopy_atomic\nd[type] = _deepcopy_atomic\nd[types.BuiltinFunctionType] = _deepcopy_atomic\nd[types.FunctionType] = _deepcopy_atomic\nd[weakref.ref] = _deepcopy_atomic\nd[property] = _deepcopy_atomic\ndef _deepcopy_list(x, memo, deepcopy=deepcopy):",
    "detail": "by-extension.python.copy",
    "documentation": {}
  },
  {
    "label": "d[bytes]",
    "kind": 5,
    "importPath": "by-extension.python.copy",
    "description": "by-extension.python.copy",
    "peekOfCode": "d[bytes] = _deepcopy_atomic\nd[str] = _deepcopy_atomic\nd[types.CodeType] = _deepcopy_atomic\nd[type] = _deepcopy_atomic\nd[types.BuiltinFunctionType] = _deepcopy_atomic\nd[types.FunctionType] = _deepcopy_atomic\nd[weakref.ref] = _deepcopy_atomic\nd[property] = _deepcopy_atomic\ndef _deepcopy_list(x, memo, deepcopy=deepcopy):\n    y = []",
    "detail": "by-extension.python.copy",
    "documentation": {}
  },
  {
    "label": "d[str]",
    "kind": 5,
    "importPath": "by-extension.python.copy",
    "description": "by-extension.python.copy",
    "peekOfCode": "d[str] = _deepcopy_atomic\nd[types.CodeType] = _deepcopy_atomic\nd[type] = _deepcopy_atomic\nd[types.BuiltinFunctionType] = _deepcopy_atomic\nd[types.FunctionType] = _deepcopy_atomic\nd[weakref.ref] = _deepcopy_atomic\nd[property] = _deepcopy_atomic\ndef _deepcopy_list(x, memo, deepcopy=deepcopy):\n    y = []\n    memo[id(x)] = y",
    "detail": "by-extension.python.copy",
    "documentation": {}
  },
  {
    "label": "d[types.CodeType]",
    "kind": 5,
    "importPath": "by-extension.python.copy",
    "description": "by-extension.python.copy",
    "peekOfCode": "d[types.CodeType] = _deepcopy_atomic\nd[type] = _deepcopy_atomic\nd[types.BuiltinFunctionType] = _deepcopy_atomic\nd[types.FunctionType] = _deepcopy_atomic\nd[weakref.ref] = _deepcopy_atomic\nd[property] = _deepcopy_atomic\ndef _deepcopy_list(x, memo, deepcopy=deepcopy):\n    y = []\n    memo[id(x)] = y\n    append = y.append",
    "detail": "by-extension.python.copy",
    "documentation": {}
  },
  {
    "label": "d[type]",
    "kind": 5,
    "importPath": "by-extension.python.copy",
    "description": "by-extension.python.copy",
    "peekOfCode": "d[type] = _deepcopy_atomic\nd[types.BuiltinFunctionType] = _deepcopy_atomic\nd[types.FunctionType] = _deepcopy_atomic\nd[weakref.ref] = _deepcopy_atomic\nd[property] = _deepcopy_atomic\ndef _deepcopy_list(x, memo, deepcopy=deepcopy):\n    y = []\n    memo[id(x)] = y\n    append = y.append\n    for a in x:",
    "detail": "by-extension.python.copy",
    "documentation": {}
  },
  {
    "label": "d[types.BuiltinFunctionType]",
    "kind": 5,
    "importPath": "by-extension.python.copy",
    "description": "by-extension.python.copy",
    "peekOfCode": "d[types.BuiltinFunctionType] = _deepcopy_atomic\nd[types.FunctionType] = _deepcopy_atomic\nd[weakref.ref] = _deepcopy_atomic\nd[property] = _deepcopy_atomic\ndef _deepcopy_list(x, memo, deepcopy=deepcopy):\n    y = []\n    memo[id(x)] = y\n    append = y.append\n    for a in x:\n        append(deepcopy(a, memo))",
    "detail": "by-extension.python.copy",
    "documentation": {}
  },
  {
    "label": "d[types.FunctionType]",
    "kind": 5,
    "importPath": "by-extension.python.copy",
    "description": "by-extension.python.copy",
    "peekOfCode": "d[types.FunctionType] = _deepcopy_atomic\nd[weakref.ref] = _deepcopy_atomic\nd[property] = _deepcopy_atomic\ndef _deepcopy_list(x, memo, deepcopy=deepcopy):\n    y = []\n    memo[id(x)] = y\n    append = y.append\n    for a in x:\n        append(deepcopy(a, memo))\n    return y",
    "detail": "by-extension.python.copy",
    "documentation": {}
  },
  {
    "label": "d[weakref.ref]",
    "kind": 5,
    "importPath": "by-extension.python.copy",
    "description": "by-extension.python.copy",
    "peekOfCode": "d[weakref.ref] = _deepcopy_atomic\nd[property] = _deepcopy_atomic\ndef _deepcopy_list(x, memo, deepcopy=deepcopy):\n    y = []\n    memo[id(x)] = y\n    append = y.append\n    for a in x:\n        append(deepcopy(a, memo))\n    return y\nd[list] = _deepcopy_list",
    "detail": "by-extension.python.copy",
    "documentation": {}
  },
  {
    "label": "d[property]",
    "kind": 5,
    "importPath": "by-extension.python.copy",
    "description": "by-extension.python.copy",
    "peekOfCode": "d[property] = _deepcopy_atomic\ndef _deepcopy_list(x, memo, deepcopy=deepcopy):\n    y = []\n    memo[id(x)] = y\n    append = y.append\n    for a in x:\n        append(deepcopy(a, memo))\n    return y\nd[list] = _deepcopy_list\ndef _deepcopy_tuple(x, memo, deepcopy=deepcopy):",
    "detail": "by-extension.python.copy",
    "documentation": {}
  },
  {
    "label": "d[list]",
    "kind": 5,
    "importPath": "by-extension.python.copy",
    "description": "by-extension.python.copy",
    "peekOfCode": "d[list] = _deepcopy_list\ndef _deepcopy_tuple(x, memo, deepcopy=deepcopy):\n    y = [deepcopy(a, memo) for a in x]\n    # We're not going to put the tuple in the memo, but it's still important we\n    # check for it, in case the tuple contains recursive mutable structures.\n    try:\n        return memo[id(x)]\n    except KeyError:\n        pass\n    for k, j in zip(x, y):",
    "detail": "by-extension.python.copy",
    "documentation": {}
  },
  {
    "label": "d[tuple]",
    "kind": 5,
    "importPath": "by-extension.python.copy",
    "description": "by-extension.python.copy",
    "peekOfCode": "d[tuple] = _deepcopy_tuple\ndef _deepcopy_dict(x, memo, deepcopy=deepcopy):\n    y = {}\n    memo[id(x)] = y\n    for key, value in x.items():\n        y[deepcopy(key, memo)] = deepcopy(value, memo)\n    return y\nd[dict] = _deepcopy_dict\nif PyStringMap is not None:\n    d[PyStringMap] = _deepcopy_dict",
    "detail": "by-extension.python.copy",
    "documentation": {}
  },
  {
    "label": "d[dict]",
    "kind": 5,
    "importPath": "by-extension.python.copy",
    "description": "by-extension.python.copy",
    "peekOfCode": "d[dict] = _deepcopy_dict\nif PyStringMap is not None:\n    d[PyStringMap] = _deepcopy_dict\ndef _deepcopy_method(x, memo): # Copy instance methods\n    return type(x)(x.__func__, deepcopy(x.__self__, memo))\nd[types.MethodType] = _deepcopy_method\ndel d\ndef _keep_alive(x, memo):\n    \"\"\"Keeps a reference to the object x in the memo.\n    Because we remember objects by their id, we have",
    "detail": "by-extension.python.copy",
    "documentation": {}
  },
  {
    "label": "d[types.MethodType]",
    "kind": 5,
    "importPath": "by-extension.python.copy",
    "description": "by-extension.python.copy",
    "peekOfCode": "d[types.MethodType] = _deepcopy_method\ndel d\ndef _keep_alive(x, memo):\n    \"\"\"Keeps a reference to the object x in the memo.\n    Because we remember objects by their id, we have\n    to assure that possibly temporary objects are kept\n    alive by referencing them.\n    We store a reference at the id of the memo, which should\n    normally not be used unless someone tries to deepcopy\n    the memo itself...",
    "detail": "by-extension.python.copy",
    "documentation": {}
  },
  {
    "label": "number",
    "kind": 5,
    "importPath": "by-extension.python.CountofDigits",
    "description": "by-extension.python.CountofDigits",
    "peekOfCode": "number = int(input())\ncounter =0\nwhile number > 0:\n    number = number//10\n    print(number)\n    counter +=1\nprint(\"number of digits :\",counter)",
    "detail": "by-extension.python.CountofDigits",
    "documentation": {}
  },
  {
    "label": "count_ip_addresses",
    "kind": 2,
    "importPath": "by-extension.python.count_ip_addresses",
    "description": "by-extension.python.count_ip_addresses",
    "peekOfCode": "def count_ip_addresses(S, K):\n    n = len(S)\n    if n == 0:\n        return 0\n    if n < K:\n        return 0\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(K):\n        # if you want to save just little calculations you can use min(3*(i+1), n) instead of n",
    "detail": "by-extension.python.count_ip_addresses",
    "documentation": {}
  },
  {
    "label": "is_valid",
    "kind": 2,
    "importPath": "by-extension.python.count_ip_addresses",
    "description": "by-extension.python.count_ip_addresses",
    "peekOfCode": "def is_valid(S):\n    if (len(S) > 1) and (S[0] == '0'):\n        return False\n    return int(S) <= 255\n###########\n# Testing #\n###########\n# Test 1\n# Correct result => 1\nprint(count_ip_addresses('1234567', 3))",
    "detail": "by-extension.python.count_ip_addresses",
    "documentation": {}
  },
  {
    "label": "execute_query",
    "kind": 2,
    "importPath": "by-extension.python.create_db",
    "description": "by-extension.python.create_db",
    "peekOfCode": "def execute_query(sql_query):\n    with sqlite3.connect(\"todo.db\") as conn:\n        cur = conn.cursor()\n        result = cur.execute(sql_query)\n        conn.commit()\n    return result\nif __name__ == '__main__':\n    execute_query(sql_query)",
    "detail": "by-extension.python.create_db",
    "documentation": {}
  },
  {
    "label": "sql_query",
    "kind": 5,
    "importPath": "by-extension.python.create_db",
    "description": "by-extension.python.create_db",
    "peekOfCode": "sql_query = \"\"\"\n    CREATE TABLE IF NOT EXISTS Todo(\n        id INTEGER PRIMARY KEY,\n        task TEXT,\n        complete boolean\n    );\n\"\"\"\ndef execute_query(sql_query):\n    with sqlite3.connect(\"todo.db\") as conn:\n        cur = conn.cursor()",
    "detail": "by-extension.python.create_db",
    "documentation": {}
  },
  {
    "label": "create_palindrome_1",
    "kind": 2,
    "importPath": "by-extension.python.create_palindrom",
    "description": "by-extension.python.create_palindrom",
    "peekOfCode": "def create_palindrome_1(word):\n    n = len(word)\n    # base cases\n    if n == 1:\n        return word\n    if n == 2:\n        if word[0] != word[1]:\n            word += word[0] # make a palindrom\n        return word\n    # check if the first and last chars are same",
    "detail": "by-extension.python.create_palindrom",
    "documentation": {}
  },
  {
    "label": "create_palindrome_2",
    "kind": 2,
    "importPath": "by-extension.python.create_palindrom",
    "description": "by-extension.python.create_palindrom",
    "peekOfCode": "def create_palindrome_2(word):\n    n = len(word)\n    dp = [[0 for j in range(n)] for i in range(n)]\n    # run dp\n    for gap in range(1, n):\n        left = 0\n        for right in range(gap, n):\n            if word[left] == word[right]:\n                dp[left][right] = dp[left + 1][right - 1]\n            else:",
    "detail": "by-extension.python.create_palindrom",
    "documentation": {}
  },
  {
    "label": "build_palindrome",
    "kind": 2,
    "importPath": "by-extension.python.create_palindrom",
    "description": "by-extension.python.create_palindrom",
    "peekOfCode": "def build_palindrome(word, dp, left, right):\n    # similar like the first solution, but without exponentialy branching\n    # this is linear time, we already know the inserting values\n    if left > right:\n        return ''\n    if left == right:\n        return word[left]\n    if word[left] == word[right]:\n        return word[left] + build_palindrome(word, dp, left + 1, right - 1) + word[left]\n    if dp[left + 1][right] < dp[left][right - 1]:",
    "detail": "by-extension.python.create_palindrom",
    "documentation": {}
  },
  {
    "label": "word",
    "kind": 5,
    "importPath": "by-extension.python.create_palindrom",
    "description": "by-extension.python.create_palindrom",
    "peekOfCode": "word = 'race'\nprint(create_palindrome_1(word))\nprint(create_palindrome_2(word))\n# Test 2\n# Correct result => 'elgoogle'\nword = 'google'\nprint(create_palindrome_1(word))\nprint(create_palindrome_2(word))\n# Test 3\n# Correct result => 'adcbcda'",
    "detail": "by-extension.python.create_palindrom",
    "documentation": {}
  },
  {
    "label": "word",
    "kind": 5,
    "importPath": "by-extension.python.create_palindrom",
    "description": "by-extension.python.create_palindrom",
    "peekOfCode": "word = 'google'\nprint(create_palindrome_1(word))\nprint(create_palindrome_2(word))\n# Test 3\n# Correct result => 'adcbcda'\nword = 'abcda'\nprint(create_palindrome_1(word))\nprint(create_palindrome_2(word))\n# Test 4\n# Correct result => 'abcdefgfedcba'",
    "detail": "by-extension.python.create_palindrom",
    "documentation": {}
  },
  {
    "label": "word",
    "kind": 5,
    "importPath": "by-extension.python.create_palindrom",
    "description": "by-extension.python.create_palindrom",
    "peekOfCode": "word = 'abcda'\nprint(create_palindrome_1(word))\nprint(create_palindrome_2(word))\n# Test 4\n# Correct result => 'abcdefgfedcba'\nword = 'adefgfdcba'\nprint(create_palindrome_1(word))\nprint(create_palindrome_2(word))",
    "detail": "by-extension.python.create_palindrom",
    "documentation": {}
  },
  {
    "label": "word",
    "kind": 5,
    "importPath": "by-extension.python.create_palindrom",
    "description": "by-extension.python.create_palindrom",
    "peekOfCode": "word = 'adefgfdcba'\nprint(create_palindrome_1(word))\nprint(create_palindrome_2(word))",
    "detail": "by-extension.python.create_palindrom",
    "documentation": {}
  },
  {
    "label": "convert_to_number",
    "kind": 2,
    "importPath": "by-extension.python.csv-parsing",
    "description": "by-extension.python.csv-parsing",
    "peekOfCode": "def convert_to_number(value):\n    \"\"\"converts the passed over string to a number, if possible\"\"\"\n    try:\n        return int(value)\n    except ValueError:\n        pass\n    return value\ndef csv_parsing(csv):\n    \"\"\"returns list of string/numeric csv values\"\"\"\n    count = 0",
    "detail": "by-extension.python.csv-parsing",
    "documentation": {}
  },
  {
    "label": "csv_parsing",
    "kind": 2,
    "importPath": "by-extension.python.csv-parsing",
    "description": "by-extension.python.csv-parsing",
    "peekOfCode": "def csv_parsing(csv):\n    \"\"\"returns list of string/numeric csv values\"\"\"\n    count = 0\n    values = []\n    pos = 0\n    while pos < len(csv):\n        if csv[pos] == ',': # skip comma from previous iteration\n            pos += 1\n        values.insert(count, '')\n        while pos < len(csv) and csv[pos] != ',':",
    "detail": "by-extension.python.csv-parsing",
    "documentation": {}
  },
  {
    "label": "timedelta",
    "kind": 6,
    "importPath": "by-extension.python.datetime",
    "description": "by-extension.python.datetime",
    "peekOfCode": "class timedelta:\n    \"\"\"Represent the difference between two datetime objects.\n    Supported operators:\n    - add, subtract timedelta\n    - unary plus, minus, abs\n    - compare to timedelta\n    - multiply, divide by int\n    In addition, datetime supports subtraction of two datetime objects\n    returning a timedelta, and addition or subtraction of a datetime\n    and a timedelta giving a datetime.",
    "detail": "by-extension.python.datetime",
    "documentation": {}
  },
  {
    "label": "date",
    "kind": 6,
    "importPath": "by-extension.python.datetime",
    "description": "by-extension.python.datetime",
    "peekOfCode": "class date:\n    \"\"\"Concrete date type.\n    Constructors:\n    __new__()\n    fromtimestamp()\n    today()\n    fromordinal()\n    Operators:\n    __repr__, __str__\n    __eq__, __le__, __lt__, __ge__, __gt__, __hash__",
    "detail": "by-extension.python.datetime",
    "documentation": {}
  },
  {
    "label": "tzinfo",
    "kind": 6,
    "importPath": "by-extension.python.datetime",
    "description": "by-extension.python.datetime",
    "peekOfCode": "class tzinfo:\n    \"\"\"Abstract base class for time zone info classes.\n    Subclasses must override the name(), utcoffset() and dst() methods.\n    \"\"\"\n    __slots__ = ()\n    def tzname(self, dt):\n        \"datetime -> string name of time zone.\"\n        raise NotImplementedError(\"tzinfo subclass must override tzname()\")\n    def utcoffset(self, dt):\n        \"datetime -> timedelta, positive for east of UTC, negative for west of UTC\"",
    "detail": "by-extension.python.datetime",
    "documentation": {}
  },
  {
    "label": "IsoCalendarDate",
    "kind": 6,
    "importPath": "by-extension.python.datetime",
    "description": "by-extension.python.datetime",
    "peekOfCode": "class IsoCalendarDate(tuple):\n    def __new__(cls, year, week, weekday, /):\n        return super().__new__(cls, (year, week, weekday))\n    @property\n    def year(self):\n        return self[0]\n    @property\n    def week(self):\n        return self[1]\n    @property",
    "detail": "by-extension.python.datetime",
    "documentation": {}
  },
  {
    "label": "time",
    "kind": 6,
    "importPath": "by-extension.python.datetime",
    "description": "by-extension.python.datetime",
    "peekOfCode": "class time:\n    \"\"\"Time with time zone.\n    Constructors:\n    __new__()\n    Operators:\n    __repr__, __str__\n    __eq__, __le__, __lt__, __ge__, __gt__, __hash__\n    Methods:\n    strftime()\n    isoformat()",
    "detail": "by-extension.python.datetime",
    "documentation": {}
  },
  {
    "label": "datetime",
    "kind": 6,
    "importPath": "by-extension.python.datetime",
    "description": "by-extension.python.datetime",
    "peekOfCode": "class datetime(date):\n    \"\"\"datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])\n    The year, month and day arguments are required. tzinfo may be None, or an\n    instance of a tzinfo subclass. The remaining arguments may be ints.\n    \"\"\"\n    __slots__ = date.__slots__ + time.__slots__\n    def __new__(cls, year, month=None, day=None, hour=0, minute=0, second=0,\n                microsecond=0, tzinfo=None, *, fold=0):\n        if (isinstance(year, (bytes, str)) and len(year) == 10 and\n            1 <= ord(year[2:3])&0x7F <= 12):",
    "detail": "by-extension.python.datetime",
    "documentation": {}
  },
  {
    "label": "timezone",
    "kind": 6,
    "importPath": "by-extension.python.datetime",
    "description": "by-extension.python.datetime",
    "peekOfCode": "class timezone(tzinfo):\n    __slots__ = '_offset', '_name'\n    # Sentinel value to disallow None\n    _Omitted = object()\n    def __new__(cls, offset, name=_Omitted):\n        if not isinstance(offset, timedelta):\n            raise TypeError(\"offset must be a timedelta\")\n        if name is cls._Omitted:\n            if not offset:\n                return cls.utc",
    "detail": "by-extension.python.datetime",
    "documentation": {}
  },
  {
    "label": "__all__",
    "kind": 5,
    "importPath": "by-extension.python.datetime",
    "description": "by-extension.python.datetime",
    "peekOfCode": "__all__ = (\"date\", \"datetime\", \"time\", \"timedelta\", \"timezone\", \"tzinfo\",\n           \"MINYEAR\", \"MAXYEAR\")\nimport time as _time\nimport math as _math\nimport sys\ndef _cmp(x, y):\n    return 0 if x == y else 1 if x > y else -1\nMINYEAR = 1\nMAXYEAR = 9999\n_MAXORDINAL = 3652059  # date.max.toordinal()",
    "detail": "by-extension.python.datetime",
    "documentation": {}
  },
  {
    "label": "MINYEAR",
    "kind": 5,
    "importPath": "by-extension.python.datetime",
    "description": "by-extension.python.datetime",
    "peekOfCode": "MINYEAR = 1\nMAXYEAR = 9999\n_MAXORDINAL = 3652059  # date.max.toordinal()\n# Utility functions, adapted from Python's Demo/classes/Dates.py, which\n# also assumes the current Gregorian calendar indefinitely extended in\n# both directions.  Difference:  Dates.py calls January 1 of year 0 day\n# number 1.  The code here calls January 1 of year 1 day number 1.  This is\n# to match the definition of the \"proleptic Gregorian\" calendar in Dershowitz\n# and Reingold's \"Calendrical Calculations\", where it's the base calendar\n# for all computations.  See the book for algorithms for converting between",
    "detail": "by-extension.python.datetime",
    "documentation": {}
  },
  {
    "label": "MAXYEAR",
    "kind": 5,
    "importPath": "by-extension.python.datetime",
    "description": "by-extension.python.datetime",
    "peekOfCode": "MAXYEAR = 9999\n_MAXORDINAL = 3652059  # date.max.toordinal()\n# Utility functions, adapted from Python's Demo/classes/Dates.py, which\n# also assumes the current Gregorian calendar indefinitely extended in\n# both directions.  Difference:  Dates.py calls January 1 of year 0 day\n# number 1.  The code here calls January 1 of year 1 day number 1.  This is\n# to match the definition of the \"proleptic Gregorian\" calendar in Dershowitz\n# and Reingold's \"Calendrical Calculations\", where it's the base calendar\n# for all computations.  See the book for algorithms for converting between\n# proleptic Gregorian ordinals and many other calendar systems.",
    "detail": "by-extension.python.datetime",
    "documentation": {}
  },
  {
    "label": "_MAXORDINAL",
    "kind": 5,
    "importPath": "by-extension.python.datetime",
    "description": "by-extension.python.datetime",
    "peekOfCode": "_MAXORDINAL = 3652059  # date.max.toordinal()\n# Utility functions, adapted from Python's Demo/classes/Dates.py, which\n# also assumes the current Gregorian calendar indefinitely extended in\n# both directions.  Difference:  Dates.py calls January 1 of year 0 day\n# number 1.  The code here calls January 1 of year 1 day number 1.  This is\n# to match the definition of the \"proleptic Gregorian\" calendar in Dershowitz\n# and Reingold's \"Calendrical Calculations\", where it's the base calendar\n# for all computations.  See the book for algorithms for converting between\n# proleptic Gregorian ordinals and many other calendar systems.\n# -1 is a placeholder for indexing purposes.",
    "detail": "by-extension.python.datetime",
    "documentation": {}
  },
  {
    "label": "_DAYS_IN_MONTH",
    "kind": 5,
    "importPath": "by-extension.python.datetime",
    "description": "by-extension.python.datetime",
    "peekOfCode": "_DAYS_IN_MONTH = [-1, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n_DAYS_BEFORE_MONTH = [-1]  # -1 is a placeholder for indexing purposes.\ndbm = 0\nfor dim in _DAYS_IN_MONTH[1:]:\n    _DAYS_BEFORE_MONTH.append(dbm)\n    dbm += dim\ndel dbm, dim\ndef _is_leap(year):\n    \"year -> 1 if leap year, else 0.\"\n    return year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)",
    "detail": "by-extension.python.datetime",
    "documentation": {}
  },
  {
    "label": "_DAYS_BEFORE_MONTH",
    "kind": 5,
    "importPath": "by-extension.python.datetime",
    "description": "by-extension.python.datetime",
    "peekOfCode": "_DAYS_BEFORE_MONTH = [-1]  # -1 is a placeholder for indexing purposes.\ndbm = 0\nfor dim in _DAYS_IN_MONTH[1:]:\n    _DAYS_BEFORE_MONTH.append(dbm)\n    dbm += dim\ndel dbm, dim\ndef _is_leap(year):\n    \"year -> 1 if leap year, else 0.\"\n    return year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)\ndef _days_before_year(year):",
    "detail": "by-extension.python.datetime",
    "documentation": {}
  },
  {
    "label": "dbm",
    "kind": 5,
    "importPath": "by-extension.python.datetime",
    "description": "by-extension.python.datetime",
    "peekOfCode": "dbm = 0\nfor dim in _DAYS_IN_MONTH[1:]:\n    _DAYS_BEFORE_MONTH.append(dbm)\n    dbm += dim\ndel dbm, dim\ndef _is_leap(year):\n    \"year -> 1 if leap year, else 0.\"\n    return year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)\ndef _days_before_year(year):\n    \"year -> number of days before January 1st of year.\"",
    "detail": "by-extension.python.datetime",
    "documentation": {}
  },
  {
    "label": "_DI400Y",
    "kind": 5,
    "importPath": "by-extension.python.datetime",
    "description": "by-extension.python.datetime",
    "peekOfCode": "_DI400Y = _days_before_year(401)    # number of days in 400 years\n_DI100Y = _days_before_year(101)    #    \"    \"   \"   \" 100   \"\n_DI4Y   = _days_before_year(5)      #    \"    \"   \"   \"   4   \"\n# A 4-year cycle has an extra leap day over what we'd get from pasting\n# together 4 single years.\nassert _DI4Y == 4 * 365 + 1\n# Similarly, a 400-year cycle has an extra leap day over what we'd get from\n# pasting together 4 100-year cycles.\nassert _DI400Y == 4 * _DI100Y + 1\n# OTOH, a 100-year cycle has one fewer leap day than we'd get from",
    "detail": "by-extension.python.datetime",
    "documentation": {}
  },
  {
    "label": "_DI100Y",
    "kind": 5,
    "importPath": "by-extension.python.datetime",
    "description": "by-extension.python.datetime",
    "peekOfCode": "_DI100Y = _days_before_year(101)    #    \"    \"   \"   \" 100   \"\n_DI4Y   = _days_before_year(5)      #    \"    \"   \"   \"   4   \"\n# A 4-year cycle has an extra leap day over what we'd get from pasting\n# together 4 single years.\nassert _DI4Y == 4 * 365 + 1\n# Similarly, a 400-year cycle has an extra leap day over what we'd get from\n# pasting together 4 100-year cycles.\nassert _DI400Y == 4 * _DI100Y + 1\n# OTOH, a 100-year cycle has one fewer leap day than we'd get from\n# pasting together 25 4-year cycles.",
    "detail": "by-extension.python.datetime",
    "documentation": {}
  },
  {
    "label": "_MONTHNAMES",
    "kind": 5,
    "importPath": "by-extension.python.datetime",
    "description": "by-extension.python.datetime",
    "peekOfCode": "_MONTHNAMES = [None, \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n                     \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\n_DAYNAMES = [None, \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"]\ndef _build_struct_time(y, m, d, hh, mm, ss, dstflag):\n    wday = (_ymd2ord(y, m, d) + 6) % 7\n    dnum = _days_before_month(y, m) + d\n    return _time.struct_time((y, m, d, hh, mm, ss, wday, dnum, dstflag))\ndef _format_time(hh, mm, ss, us, timespec='auto'):\n    specs = {\n        'hours': '{:02d}',",
    "detail": "by-extension.python.datetime",
    "documentation": {}
  },
  {
    "label": "_DAYNAMES",
    "kind": 5,
    "importPath": "by-extension.python.datetime",
    "description": "by-extension.python.datetime",
    "peekOfCode": "_DAYNAMES = [None, \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"]\ndef _build_struct_time(y, m, d, hh, mm, ss, dstflag):\n    wday = (_ymd2ord(y, m, d) + 6) % 7\n    dnum = _days_before_month(y, m) + d\n    return _time.struct_time((y, m, d, hh, mm, ss, wday, dnum, dstflag))\ndef _format_time(hh, mm, ss, us, timespec='auto'):\n    specs = {\n        'hours': '{:02d}',\n        'minutes': '{:02d}:{:02d}',\n        'seconds': '{:02d}:{:02d}:{:02d}',",
    "detail": "by-extension.python.datetime",
    "documentation": {}
  },
  {
    "label": "timedelta.min",
    "kind": 5,
    "importPath": "by-extension.python.datetime",
    "description": "by-extension.python.datetime",
    "peekOfCode": "timedelta.min = timedelta(-999999999)\ntimedelta.max = timedelta(days=999999999, hours=23, minutes=59, seconds=59,\n                          microseconds=999999)\ntimedelta.resolution = timedelta(microseconds=1)\nclass date:\n    \"\"\"Concrete date type.\n    Constructors:\n    __new__()\n    fromtimestamp()\n    today()",
    "detail": "by-extension.python.datetime",
    "documentation": {}
  },
  {
    "label": "timedelta.max",
    "kind": 5,
    "importPath": "by-extension.python.datetime",
    "description": "by-extension.python.datetime",
    "peekOfCode": "timedelta.max = timedelta(days=999999999, hours=23, minutes=59, seconds=59,\n                          microseconds=999999)\ntimedelta.resolution = timedelta(microseconds=1)\nclass date:\n    \"\"\"Concrete date type.\n    Constructors:\n    __new__()\n    fromtimestamp()\n    today()\n    fromordinal()",
    "detail": "by-extension.python.datetime",
    "documentation": {}
  },
  {
    "label": "timedelta.resolution",
    "kind": 5,
    "importPath": "by-extension.python.datetime",
    "description": "by-extension.python.datetime",
    "peekOfCode": "timedelta.resolution = timedelta(microseconds=1)\nclass date:\n    \"\"\"Concrete date type.\n    Constructors:\n    __new__()\n    fromtimestamp()\n    today()\n    fromordinal()\n    Operators:\n    __repr__, __str__",
    "detail": "by-extension.python.datetime",
    "documentation": {}
  },
  {
    "label": "_date_class",
    "kind": 5,
    "importPath": "by-extension.python.datetime",
    "description": "by-extension.python.datetime",
    "peekOfCode": "_date_class = date  # so functions w/ args named \"date\" can get at the class\ndate.min = date(1, 1, 1)\ndate.max = date(9999, 12, 31)\ndate.resolution = timedelta(days=1)\nclass tzinfo:\n    \"\"\"Abstract base class for time zone info classes.\n    Subclasses must override the name(), utcoffset() and dst() methods.\n    \"\"\"\n    __slots__ = ()\n    def tzname(self, dt):",
    "detail": "by-extension.python.datetime",
    "documentation": {}
  },
  {
    "label": "date.min",
    "kind": 5,
    "importPath": "by-extension.python.datetime",
    "description": "by-extension.python.datetime",
    "peekOfCode": "date.min = date(1, 1, 1)\ndate.max = date(9999, 12, 31)\ndate.resolution = timedelta(days=1)\nclass tzinfo:\n    \"\"\"Abstract base class for time zone info classes.\n    Subclasses must override the name(), utcoffset() and dst() methods.\n    \"\"\"\n    __slots__ = ()\n    def tzname(self, dt):\n        \"datetime -> string name of time zone.\"",
    "detail": "by-extension.python.datetime",
    "documentation": {}
  },
  {
    "label": "date.max",
    "kind": 5,
    "importPath": "by-extension.python.datetime",
    "description": "by-extension.python.datetime",
    "peekOfCode": "date.max = date(9999, 12, 31)\ndate.resolution = timedelta(days=1)\nclass tzinfo:\n    \"\"\"Abstract base class for time zone info classes.\n    Subclasses must override the name(), utcoffset() and dst() methods.\n    \"\"\"\n    __slots__ = ()\n    def tzname(self, dt):\n        \"datetime -> string name of time zone.\"\n        raise NotImplementedError(\"tzinfo subclass must override tzname()\")",
    "detail": "by-extension.python.datetime",
    "documentation": {}
  },
  {
    "label": "date.resolution",
    "kind": 5,
    "importPath": "by-extension.python.datetime",
    "description": "by-extension.python.datetime",
    "peekOfCode": "date.resolution = timedelta(days=1)\nclass tzinfo:\n    \"\"\"Abstract base class for time zone info classes.\n    Subclasses must override the name(), utcoffset() and dst() methods.\n    \"\"\"\n    __slots__ = ()\n    def tzname(self, dt):\n        \"datetime -> string name of time zone.\"\n        raise NotImplementedError(\"tzinfo subclass must override tzname()\")\n    def utcoffset(self, dt):",
    "detail": "by-extension.python.datetime",
    "documentation": {}
  },
  {
    "label": "_IsoCalendarDate",
    "kind": 5,
    "importPath": "by-extension.python.datetime",
    "description": "by-extension.python.datetime",
    "peekOfCode": "_IsoCalendarDate = IsoCalendarDate\ndel IsoCalendarDate\n_tzinfo_class = tzinfo\nclass time:\n    \"\"\"Time with time zone.\n    Constructors:\n    __new__()\n    Operators:\n    __repr__, __str__\n    __eq__, __le__, __lt__, __ge__, __gt__, __hash__",
    "detail": "by-extension.python.datetime",
    "documentation": {}
  },
  {
    "label": "_tzinfo_class",
    "kind": 5,
    "importPath": "by-extension.python.datetime",
    "description": "by-extension.python.datetime",
    "peekOfCode": "_tzinfo_class = tzinfo\nclass time:\n    \"\"\"Time with time zone.\n    Constructors:\n    __new__()\n    Operators:\n    __repr__, __str__\n    __eq__, __le__, __lt__, __ge__, __gt__, __hash__\n    Methods:\n    strftime()",
    "detail": "by-extension.python.datetime",
    "documentation": {}
  },
  {
    "label": "_time_class",
    "kind": 5,
    "importPath": "by-extension.python.datetime",
    "description": "by-extension.python.datetime",
    "peekOfCode": "_time_class = time  # so functions w/ args named \"time\" can get at the class\ntime.min = time(0, 0, 0)\ntime.max = time(23, 59, 59, 999999)\ntime.resolution = timedelta(microseconds=1)\nclass datetime(date):\n    \"\"\"datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])\n    The year, month and day arguments are required. tzinfo may be None, or an\n    instance of a tzinfo subclass. The remaining arguments may be ints.\n    \"\"\"\n    __slots__ = date.__slots__ + time.__slots__",
    "detail": "by-extension.python.datetime",
    "documentation": {}
  },
  {
    "label": "time.min",
    "kind": 5,
    "importPath": "by-extension.python.datetime",
    "description": "by-extension.python.datetime",
    "peekOfCode": "time.min = time(0, 0, 0)\ntime.max = time(23, 59, 59, 999999)\ntime.resolution = timedelta(microseconds=1)\nclass datetime(date):\n    \"\"\"datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])\n    The year, month and day arguments are required. tzinfo may be None, or an\n    instance of a tzinfo subclass. The remaining arguments may be ints.\n    \"\"\"\n    __slots__ = date.__slots__ + time.__slots__\n    def __new__(cls, year, month=None, day=None, hour=0, minute=0, second=0,",
    "detail": "by-extension.python.datetime",
    "documentation": {}
  },
  {
    "label": "time.max",
    "kind": 5,
    "importPath": "by-extension.python.datetime",
    "description": "by-extension.python.datetime",
    "peekOfCode": "time.max = time(23, 59, 59, 999999)\ntime.resolution = timedelta(microseconds=1)\nclass datetime(date):\n    \"\"\"datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])\n    The year, month and day arguments are required. tzinfo may be None, or an\n    instance of a tzinfo subclass. The remaining arguments may be ints.\n    \"\"\"\n    __slots__ = date.__slots__ + time.__slots__\n    def __new__(cls, year, month=None, day=None, hour=0, minute=0, second=0,\n                microsecond=0, tzinfo=None, *, fold=0):",
    "detail": "by-extension.python.datetime",
    "documentation": {}
  },
  {
    "label": "time.resolution",
    "kind": 5,
    "importPath": "by-extension.python.datetime",
    "description": "by-extension.python.datetime",
    "peekOfCode": "time.resolution = timedelta(microseconds=1)\nclass datetime(date):\n    \"\"\"datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])\n    The year, month and day arguments are required. tzinfo may be None, or an\n    instance of a tzinfo subclass. The remaining arguments may be ints.\n    \"\"\"\n    __slots__ = date.__slots__ + time.__slots__\n    def __new__(cls, year, month=None, day=None, hour=0, minute=0, second=0,\n                microsecond=0, tzinfo=None, *, fold=0):\n        if (isinstance(year, (bytes, str)) and len(year) == 10 and",
    "detail": "by-extension.python.datetime",
    "documentation": {}
  },
  {
    "label": "datetime.min",
    "kind": 5,
    "importPath": "by-extension.python.datetime",
    "description": "by-extension.python.datetime",
    "peekOfCode": "datetime.min = datetime(1, 1, 1)\ndatetime.max = datetime(9999, 12, 31, 23, 59, 59, 999999)\ndatetime.resolution = timedelta(microseconds=1)\ndef _isoweek1monday(year):\n    # Helper to calculate the day number of the Monday starting week 1\n    # XXX This could be done more efficiently\n    THURSDAY = 3\n    firstday = _ymd2ord(year, 1, 1)\n    firstweekday = (firstday + 6) % 7  # See weekday() above\n    week1monday = firstday - firstweekday",
    "detail": "by-extension.python.datetime",
    "documentation": {}
  },
  {
    "label": "datetime.max",
    "kind": 5,
    "importPath": "by-extension.python.datetime",
    "description": "by-extension.python.datetime",
    "peekOfCode": "datetime.max = datetime(9999, 12, 31, 23, 59, 59, 999999)\ndatetime.resolution = timedelta(microseconds=1)\ndef _isoweek1monday(year):\n    # Helper to calculate the day number of the Monday starting week 1\n    # XXX This could be done more efficiently\n    THURSDAY = 3\n    firstday = _ymd2ord(year, 1, 1)\n    firstweekday = (firstday + 6) % 7  # See weekday() above\n    week1monday = firstday - firstweekday\n    if firstweekday > THURSDAY:",
    "detail": "by-extension.python.datetime",
    "documentation": {}
  },
  {
    "label": "datetime.resolution",
    "kind": 5,
    "importPath": "by-extension.python.datetime",
    "description": "by-extension.python.datetime",
    "peekOfCode": "datetime.resolution = timedelta(microseconds=1)\ndef _isoweek1monday(year):\n    # Helper to calculate the day number of the Monday starting week 1\n    # XXX This could be done more efficiently\n    THURSDAY = 3\n    firstday = _ymd2ord(year, 1, 1)\n    firstweekday = (firstday + 6) % 7  # See weekday() above\n    week1monday = firstday - firstweekday\n    if firstweekday > THURSDAY:\n        week1monday += 7",
    "detail": "by-extension.python.datetime",
    "documentation": {}
  },
  {
    "label": "timezone.utc",
    "kind": 5,
    "importPath": "by-extension.python.datetime",
    "description": "by-extension.python.datetime",
    "peekOfCode": "timezone.utc = timezone._create(timedelta(0))\n# bpo-37642: These attributes are rounded to the nearest minute for backwards\n# compatibility, even though the constructor will accept a wider range of\n# values. This may change in the future.\ntimezone.min = timezone._create(-timedelta(hours=23, minutes=59))\ntimezone.max = timezone._create(timedelta(hours=23, minutes=59))\n_EPOCH = datetime(1970, 1, 1, tzinfo=timezone.utc)\n# Some time zone algebra.  For a datetime x, let\n#     x.n = x stripped of its timezone -- its naive time.\n#     x.o = x.utcoffset(), and assuming that doesn't raise an exception or",
    "detail": "by-extension.python.datetime",
    "documentation": {}
  },
  {
    "label": "timezone.min",
    "kind": 5,
    "importPath": "by-extension.python.datetime",
    "description": "by-extension.python.datetime",
    "peekOfCode": "timezone.min = timezone._create(-timedelta(hours=23, minutes=59))\ntimezone.max = timezone._create(timedelta(hours=23, minutes=59))\n_EPOCH = datetime(1970, 1, 1, tzinfo=timezone.utc)\n# Some time zone algebra.  For a datetime x, let\n#     x.n = x stripped of its timezone -- its naive time.\n#     x.o = x.utcoffset(), and assuming that doesn't raise an exception or\n#           return None\n#     x.d = x.dst(), and assuming that doesn't raise an exception or\n#           return None\n#     x.s = x's standard offset, x.o - x.d",
    "detail": "by-extension.python.datetime",
    "documentation": {}
  },
  {
    "label": "timezone.max",
    "kind": 5,
    "importPath": "by-extension.python.datetime",
    "description": "by-extension.python.datetime",
    "peekOfCode": "timezone.max = timezone._create(timedelta(hours=23, minutes=59))\n_EPOCH = datetime(1970, 1, 1, tzinfo=timezone.utc)\n# Some time zone algebra.  For a datetime x, let\n#     x.n = x stripped of its timezone -- its naive time.\n#     x.o = x.utcoffset(), and assuming that doesn't raise an exception or\n#           return None\n#     x.d = x.dst(), and assuming that doesn't raise an exception or\n#           return None\n#     x.s = x's standard offset, x.o - x.d\n#",
    "detail": "by-extension.python.datetime",
    "documentation": {}
  },
  {
    "label": "_EPOCH",
    "kind": 5,
    "importPath": "by-extension.python.datetime",
    "description": "by-extension.python.datetime",
    "peekOfCode": "_EPOCH = datetime(1970, 1, 1, tzinfo=timezone.utc)\n# Some time zone algebra.  For a datetime x, let\n#     x.n = x stripped of its timezone -- its naive time.\n#     x.o = x.utcoffset(), and assuming that doesn't raise an exception or\n#           return None\n#     x.d = x.dst(), and assuming that doesn't raise an exception or\n#           return None\n#     x.s = x's standard offset, x.o - x.d\n#\n# Now some derived rules, where k is a duration (timedelta).",
    "detail": "by-extension.python.datetime",
    "documentation": {}
  },
  {
    "label": "execute_query",
    "kind": 2,
    "importPath": "by-extension.python.dbfunctions",
    "description": "by-extension.python.dbfunctions",
    "peekOfCode": "def execute_query(sql_query):\n    with sqlite3.connect(\"todo.db\") as conn:\n        cur = conn.cursor()\n        result = cur.execute(sql_query)\n        conn.commit()\n    return result\ndef add_new_task(task):\n    sql_query = \"INSERT INTO Todo(task, complete) VALUES('%s', %s) \" %(task, 0)\n    execute_query(sql_query)\ndef get_complete_tasks():",
    "detail": "by-extension.python.dbfunctions",
    "documentation": {}
  },
  {
    "label": "add_new_task",
    "kind": 2,
    "importPath": "by-extension.python.dbfunctions",
    "description": "by-extension.python.dbfunctions",
    "peekOfCode": "def add_new_task(task):\n    sql_query = \"INSERT INTO Todo(task, complete) VALUES('%s', %s) \" %(task, 0)\n    execute_query(sql_query)\ndef get_complete_tasks():\n    sql_query = \"SELECT task FROM Todo WHERE complete=%s \" %(1)\n    complete = execute_query(sql_query)\n    return [task[0] for task in complete.fetchall()]\ndef get_incomplete_tasks():\n    sql_query = \"SELECT task FROM Todo WHERE complete=%s \" %(0)\n    incomplete = execute_query(sql_query)",
    "detail": "by-extension.python.dbfunctions",
    "documentation": {}
  },
  {
    "label": "get_complete_tasks",
    "kind": 2,
    "importPath": "by-extension.python.dbfunctions",
    "description": "by-extension.python.dbfunctions",
    "peekOfCode": "def get_complete_tasks():\n    sql_query = \"SELECT task FROM Todo WHERE complete=%s \" %(1)\n    complete = execute_query(sql_query)\n    return [task[0] for task in complete.fetchall()]\ndef get_incomplete_tasks():\n    sql_query = \"SELECT task FROM Todo WHERE complete=%s \" %(0)\n    incomplete = execute_query(sql_query)\n    return [task[0] for task in incomplete.fetchall()]\ndef mark_task_complete(task):\n    sql_query = \"UPDATE Todo SET complete=%s WHERE task='%s' and complete=%s\" %(1, task, 0)",
    "detail": "by-extension.python.dbfunctions",
    "documentation": {}
  },
  {
    "label": "get_incomplete_tasks",
    "kind": 2,
    "importPath": "by-extension.python.dbfunctions",
    "description": "by-extension.python.dbfunctions",
    "peekOfCode": "def get_incomplete_tasks():\n    sql_query = \"SELECT task FROM Todo WHERE complete=%s \" %(0)\n    incomplete = execute_query(sql_query)\n    return [task[0] for task in incomplete.fetchall()]\ndef mark_task_complete(task):\n    sql_query = \"UPDATE Todo SET complete=%s WHERE task='%s' and complete=%s\" %(1, task, 0)\n    execute_query(sql_query)",
    "detail": "by-extension.python.dbfunctions",
    "documentation": {}
  },
  {
    "label": "mark_task_complete",
    "kind": 2,
    "importPath": "by-extension.python.dbfunctions",
    "description": "by-extension.python.dbfunctions",
    "peekOfCode": "def mark_task_complete(task):\n    sql_query = \"UPDATE Todo SET complete=%s WHERE task='%s' and complete=%s\" %(1, task, 0)\n    execute_query(sql_query)",
    "detail": "by-extension.python.dbfunctions",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "by-extension.python.deepl",
    "description": "by-extension.python.deepl",
    "peekOfCode": "def main(argv, to_language=TO_LANGUAGE, from_language=FROM_LANGUAGE):\n    \"\"\" Main function. Use the arguments of the command line (sys.argv). \"\"\"\n    # TODO use docopt to handle the command line arguments! Cf. http://docopt.org/\n    # TODO can docopt handle a cli documentation with ansicolortags tags in it? Cf. http://ansicolortags.rtfd.io/\n    # Manual handing of the command line arguments\n    if \"-h\" in argv or \"--help\" in argv:\n        printc(\"\"\"\n<green>deepl.py<white> --help|-h | -f file | [--from LANG] [--to LANG] text\nA simple Python script translate a text from a language to another language, using DeepL translator (https://www.deepl.com/translator).\n<u>Examples:<U>",
    "detail": "by-extension.python.deepl",
    "documentation": {}
  },
  {
    "label": "FROM_LANGUAGE",
    "kind": 5,
    "importPath": "by-extension.python.deepl",
    "description": "by-extension.python.deepl",
    "peekOfCode": "FROM_LANGUAGE = 'EN'\nTO_LANGUAGE = 'FR'\ndef main(argv, to_language=TO_LANGUAGE, from_language=FROM_LANGUAGE):\n    \"\"\" Main function. Use the arguments of the command line (sys.argv). \"\"\"\n    # TODO use docopt to handle the command line arguments! Cf. http://docopt.org/\n    # TODO can docopt handle a cli documentation with ansicolortags tags in it? Cf. http://ansicolortags.rtfd.io/\n    # Manual handing of the command line arguments\n    if \"-h\" in argv or \"--help\" in argv:\n        printc(\"\"\"\n<green>deepl.py<white> --help|-h | -f file | [--from LANG] [--to LANG] text",
    "detail": "by-extension.python.deepl",
    "documentation": {}
  },
  {
    "label": "TO_LANGUAGE",
    "kind": 5,
    "importPath": "by-extension.python.deepl",
    "description": "by-extension.python.deepl",
    "peekOfCode": "TO_LANGUAGE = 'FR'\ndef main(argv, to_language=TO_LANGUAGE, from_language=FROM_LANGUAGE):\n    \"\"\" Main function. Use the arguments of the command line (sys.argv). \"\"\"\n    # TODO use docopt to handle the command line arguments! Cf. http://docopt.org/\n    # TODO can docopt handle a cli documentation with ansicolortags tags in it? Cf. http://ansicolortags.rtfd.io/\n    # Manual handing of the command line arguments\n    if \"-h\" in argv or \"--help\" in argv:\n        printc(\"\"\"\n<green>deepl.py<white> --help|-h | -f file | [--from LANG] [--to LANG] text\nA simple Python script translate a text from a language to another language, using DeepL translator (https://www.deepl.com/translator).",
    "detail": "by-extension.python.deepl",
    "documentation": {}
  },
  {
    "label": "delBoard",
    "kind": 6,
    "importPath": "by-extension.python.delqueen",
    "description": "by-extension.python.delqueen",
    "peekOfCode": "class delBoard:\n    \"\"\" A weird object that does nothing while alive,\n    but solves the n-queens problem when garbage collected.\n    It uses CPython's garbage collection graph traversal algorithm to explore\n    the graph of possible solutions to the n-queens problem.\n    Very weird, but it works. And it's fast!\n    \"\"\"\n    def __init__(self, nqueens=None):\n        self.nqueens = nqueens\n    def __del__(self):",
    "detail": "by-extension.python.delqueen",
    "documentation": {}
  },
  {
    "label": "nqueens",
    "kind": 5,
    "importPath": "by-extension.python.delqueen",
    "description": "by-extension.python.delqueen",
    "peekOfCode": "nqueens = int(sys.argv[1]) if len(sys.argv) > 1 else None\nq = delBoard(nqueens)\nif __name__ == \"__main__\":\n    print(\"Interrupt me to solve the {} queens problem!\".format(nqueens))\n    while True:\n        pass",
    "detail": "by-extension.python.delqueen",
    "documentation": {}
  },
  {
    "label": "q",
    "kind": 5,
    "importPath": "by-extension.python.delqueen",
    "description": "by-extension.python.delqueen",
    "peekOfCode": "q = delBoard(nqueens)\nif __name__ == \"__main__\":\n    print(\"Interrupt me to solve the {} queens problem!\".format(nqueens))\n    while True:\n        pass",
    "detail": "by-extension.python.delqueen",
    "documentation": {}
  },
  {
    "label": "mydict",
    "kind": 5,
    "importPath": "by-extension.python.Dictionaries",
    "description": "by-extension.python.Dictionaries",
    "peekOfCode": "mydict = {'a':1,'b':2}\n# add new (key,value) pair\nmydict['c'] = 3\n# modify existing (key,value) pair\nmydict['a'] = 5\n# remove (key,value) pair\nmydict.pop('a')\n# get length of the dictionary\nprint(len(mydict))\n# iteration through keys",
    "detail": "by-extension.python.Dictionaries",
    "documentation": {}
  },
  {
    "label": "mydict['c']",
    "kind": 5,
    "importPath": "by-extension.python.Dictionaries",
    "description": "by-extension.python.Dictionaries",
    "peekOfCode": "mydict['c'] = 3\n# modify existing (key,value) pair\nmydict['a'] = 5\n# remove (key,value) pair\nmydict.pop('a')\n# get length of the dictionary\nprint(len(mydict))\n# iteration through keys\nfor key in mydict.keys():\n  print(key)",
    "detail": "by-extension.python.Dictionaries",
    "documentation": {}
  },
  {
    "label": "mydict['a']",
    "kind": 5,
    "importPath": "by-extension.python.Dictionaries",
    "description": "by-extension.python.Dictionaries",
    "peekOfCode": "mydict['a'] = 5\n# remove (key,value) pair\nmydict.pop('a')\n# get length of the dictionary\nprint(len(mydict))\n# iteration through keys\nfor key in mydict.keys():\n  print(key)\n# iteration through values\nfor value in mydict.values():",
    "detail": "by-extension.python.Dictionaries",
    "documentation": {}
  },
  {
    "label": "dict_factory",
    "kind": 2,
    "importPath": "by-extension.python.dict_factory",
    "description": "by-extension.python.dict_factory",
    "peekOfCode": "def dict_factory(cursor, row):\n    d = {}\n    for idx, col in enumerate(cursor.description):\n        d[col[0]] = row[idx]\n    return d\n# after dbcon\ncon.row_factory = dict_factory\ncur = con.cursor()",
    "detail": "by-extension.python.dict_factory",
    "documentation": {}
  },
  {
    "label": "con.row_factory",
    "kind": 5,
    "importPath": "by-extension.python.dict_factory",
    "description": "by-extension.python.dict_factory",
    "peekOfCode": "con.row_factory = dict_factory\ncur = con.cursor()",
    "detail": "by-extension.python.dict_factory",
    "documentation": {}
  },
  {
    "label": "cur",
    "kind": 5,
    "importPath": "by-extension.python.dict_factory",
    "description": "by-extension.python.dict_factory",
    "peekOfCode": "cur = con.cursor()",
    "detail": "by-extension.python.dict_factory",
    "documentation": {}
  },
  {
    "label": "process_dir",
    "kind": 2,
    "importPath": "by-extension.python.dir2html",
    "description": "by-extension.python.dir2html",
    "peekOfCode": "def process_dir(top_dir, opts):\n    glob_patt = opts.filter or '*'\n    path_top_dir: Path\n    path_top_dir = Path(top_dir)\n    index_file = None\n    index_path = Path(path_top_dir, opts.output_file)\n    if opts.verbose:\n        print(f'Traversing dir {path_top_dir.absolute()}')\n    try:\n        index_file = open(index_path, 'w')",
    "detail": "by-extension.python.dir2html",
    "documentation": {}
  },
  {
    "label": "pretty_size",
    "kind": 2,
    "importPath": "by-extension.python.dir2html",
    "description": "by-extension.python.dir2html",
    "peekOfCode": "def pretty_size(bytes, units=UNITS_MAPPING):\n    \"\"\"Human-readable file sizes.\n    ripped from https://pypi.python.org/pypi/hurry.filesize/\n    \"\"\"\n    for factor, suffix in units:\n        if bytes >= factor:\n            break\n    amount = int(bytes / factor)\n    if isinstance(suffix, tuple):\n        singular, multiple = suffix",
    "detail": "by-extension.python.dir2html",
    "documentation": {}
  },
  {
    "label": "DEFAULT_OUTPUT_FILE",
    "kind": 5,
    "importPath": "by-extension.python.dir2html",
    "description": "by-extension.python.dir2html",
    "peekOfCode": "DEFAULT_OUTPUT_FILE = 'sitemap.html'\ndef process_dir(top_dir, opts):\n    glob_patt = opts.filter or '*'\n    path_top_dir: Path\n    path_top_dir = Path(top_dir)\n    index_file = None\n    index_path = Path(path_top_dir, opts.output_file)\n    if opts.verbose:\n        print(f'Traversing dir {path_top_dir.absolute()}')\n    try:",
    "detail": "by-extension.python.dir2html",
    "documentation": {}
  },
  {
    "label": "UNITS_MAPPING",
    "kind": 5,
    "importPath": "by-extension.python.dir2html",
    "description": "by-extension.python.dir2html",
    "peekOfCode": "UNITS_MAPPING = [\n    (1024 ** 5, ' PB'),\n    (1024 ** 4, ' TB'),\n    (1024 ** 3, ' GB'),\n    (1024 ** 2, ' MB'),\n    (1024 ** 1, ' KB'),\n    (1024 ** 0, (' byte', ' bytes')),\n]\ndef pretty_size(bytes, units=UNITS_MAPPING):\n    \"\"\"Human-readable file sizes.",
    "detail": "by-extension.python.dir2html",
    "documentation": {}
  },
  {
    "label": "process_dir",
    "kind": 2,
    "importPath": "by-extension.python.dirhtml",
    "description": "by-extension.python.dirhtml",
    "peekOfCode": "def process_dir(top_dir, opts):\n    glob_patt = opts.filter or '*'\n    path_top_dir: Path\n    path_top_dir = Path(top_dir)\n    index_file = None\n    index_path = Path(path_top_dir, opts.output_file)\n    if opts.verbose:\n        print(f'Traversing dir {path_top_dir.absolute()}')\n    try:\n        index_file = open(index_path, 'w')",
    "detail": "by-extension.python.dirhtml",
    "documentation": {}
  },
  {
    "label": "pretty_size",
    "kind": 2,
    "importPath": "by-extension.python.dirhtml",
    "description": "by-extension.python.dirhtml",
    "peekOfCode": "def pretty_size(bytes, units=UNITS_MAPPING):\n    \"\"\"Human-readable file sizes.\n    ripped from https://pypi.python.org/pypi/hurry.filesize/\n    \"\"\"\n    for factor, suffix in units:\n        if bytes >= factor:\n            break\n    amount = int(bytes / factor)\n    if isinstance(suffix, tuple):\n        singular, multiple = suffix",
    "detail": "by-extension.python.dirhtml",
    "documentation": {}
  },
  {
    "label": "DEFAULT_OUTPUT_FILE",
    "kind": 5,
    "importPath": "by-extension.python.dirhtml",
    "description": "by-extension.python.dirhtml",
    "peekOfCode": "DEFAULT_OUTPUT_FILE = 'index.html'\ndef process_dir(top_dir, opts):\n    glob_patt = opts.filter or '*'\n    path_top_dir: Path\n    path_top_dir = Path(top_dir)\n    index_file = None\n    index_path = Path(path_top_dir, opts.output_file)\n    if opts.verbose:\n        print(f'Traversing dir {path_top_dir.absolute()}')\n    try:",
    "detail": "by-extension.python.dirhtml",
    "documentation": {}
  },
  {
    "label": "UNITS_MAPPING",
    "kind": 5,
    "importPath": "by-extension.python.dirhtml",
    "description": "by-extension.python.dirhtml",
    "peekOfCode": "UNITS_MAPPING = [\n    (1024 ** 5, ' PB'),\n    (1024 ** 4, ' TB'),\n    (1024 ** 3, ' GB'),\n    (1024 ** 2, ' MB'),\n    (1024 ** 1, ' KB'),\n    (1024 ** 0, (' byte', ' bytes')),\n]\ndef pretty_size(bytes, units=UNITS_MAPPING):\n    \"\"\"Human-readable file sizes.",
    "detail": "by-extension.python.dirhtml",
    "documentation": {}
  },
  {
    "label": "numexo",
    "kind": 5,
    "importPath": "by-extension.python.dump_dD",
    "description": "by-extension.python.dump_dD",
    "peekOfCode": "numexo = int(sys.argv[1]) if len(sys.argv) > 1 else 1485\nchapter = str(sys.argv[2]) if len(sys.argv) > 2 else \"\"\nurlToGo = \"http://mp.cpgedupuydelome.fr/mesexos.php?idTeX=%i\" % numexo\nprint(\"Numéro <magenta>%i<reset>. On va vers <u>\\\"%s\\\"<U><white>\" % (numexo, urlToGo))\n# On récupère la page (la partie la plus lente du coup)\nimport urllib2\nresponse = urllib2.urlopen(urlToGo)\nhtml = response.read()\n# BeautifulSoup v3 (et pas v4, attention !)\nfrom BeautifulSoup import BeautifulSoup",
    "detail": "by-extension.python.dump_dD",
    "documentation": {}
  },
  {
    "label": "chapter",
    "kind": 5,
    "importPath": "by-extension.python.dump_dD",
    "description": "by-extension.python.dump_dD",
    "peekOfCode": "chapter = str(sys.argv[2]) if len(sys.argv) > 2 else \"\"\nurlToGo = \"http://mp.cpgedupuydelome.fr/mesexos.php?idTeX=%i\" % numexo\nprint(\"Numéro <magenta>%i<reset>. On va vers <u>\\\"%s\\\"<U><white>\" % (numexo, urlToGo))\n# On récupère la page (la partie la plus lente du coup)\nimport urllib2\nresponse = urllib2.urlopen(urlToGo)\nhtml = response.read()\n# BeautifulSoup v3 (et pas v4, attention !)\nfrom BeautifulSoup import BeautifulSoup\n# On l'analyse",
    "detail": "by-extension.python.dump_dD",
    "documentation": {}
  },
  {
    "label": "urlToGo",
    "kind": 5,
    "importPath": "by-extension.python.dump_dD",
    "description": "by-extension.python.dump_dD",
    "peekOfCode": "urlToGo = \"http://mp.cpgedupuydelome.fr/mesexos.php?idTeX=%i\" % numexo\nprint(\"Numéro <magenta>%i<reset>. On va vers <u>\\\"%s\\\"<U><white>\" % (numexo, urlToGo))\n# On récupère la page (la partie la plus lente du coup)\nimport urllib2\nresponse = urllib2.urlopen(urlToGo)\nhtml = response.read()\n# BeautifulSoup v3 (et pas v4, attention !)\nfrom BeautifulSoup import BeautifulSoup\n# On l'analyse\nparsed_html = BeautifulSoup(html, fromEncoding='utf-8')",
    "detail": "by-extension.python.dump_dD",
    "documentation": {}
  },
  {
    "label": "response",
    "kind": 5,
    "importPath": "by-extension.python.dump_dD",
    "description": "by-extension.python.dump_dD",
    "peekOfCode": "response = urllib2.urlopen(urlToGo)\nhtml = response.read()\n# BeautifulSoup v3 (et pas v4, attention !)\nfrom BeautifulSoup import BeautifulSoup\n# On l'analyse\nparsed_html = BeautifulSoup(html, fromEncoding='utf-8')\nprint(\"<black>Encodage original : %s<white>\\n\\n\" % parsed_html.originalEncoding)\n# On cherche la section <section id=\"contenu\">..</section>\ncontenu = parsed_html.body.find('section', attrs={'id': 'contenu'})\n# Et on prend le contenu de la première <textarea> !",
    "detail": "by-extension.python.dump_dD",
    "documentation": {}
  },
  {
    "label": "html",
    "kind": 5,
    "importPath": "by-extension.python.dump_dD",
    "description": "by-extension.python.dump_dD",
    "peekOfCode": "html = response.read()\n# BeautifulSoup v3 (et pas v4, attention !)\nfrom BeautifulSoup import BeautifulSoup\n# On l'analyse\nparsed_html = BeautifulSoup(html, fromEncoding='utf-8')\nprint(\"<black>Encodage original : %s<white>\\n\\n\" % parsed_html.originalEncoding)\n# On cherche la section <section id=\"contenu\">..</section>\ncontenu = parsed_html.body.find('section', attrs={'id': 'contenu'})\n# Et on prend le contenu de la première <textarea> !\ncodeTeX = contenu.findAll('textarea', limit=1)[0].renderContents()",
    "detail": "by-extension.python.dump_dD",
    "documentation": {}
  },
  {
    "label": "parsed_html",
    "kind": 5,
    "importPath": "by-extension.python.dump_dD",
    "description": "by-extension.python.dump_dD",
    "peekOfCode": "parsed_html = BeautifulSoup(html, fromEncoding='utf-8')\nprint(\"<black>Encodage original : %s<white>\\n\\n\" % parsed_html.originalEncoding)\n# On cherche la section <section id=\"contenu\">..</section>\ncontenu = parsed_html.body.find('section', attrs={'id': 'contenu'})\n# Et on prend le contenu de la première <textarea> !\ncodeTeX = contenu.findAll('textarea', limit=1)[0].renderContents()\n# Quelques corrections, parce que BeautifulSoup échappe certains trucs\ncodeTeX = codeTeX.replace(\"&amp;\", \"&\").replace(\"&lt;\", \"<\").replace(\"&gt;\", \">\").replace(\"&le;\", \"<=\").replace(\"&ge;\", \">=\")\n# Et d'autres erreurs fréquentes.\ncodeTeX = codeTeX.replace(\"^ - \", \"^{-}\")",
    "detail": "by-extension.python.dump_dD",
    "documentation": {}
  },
  {
    "label": "contenu",
    "kind": 5,
    "importPath": "by-extension.python.dump_dD",
    "description": "by-extension.python.dump_dD",
    "peekOfCode": "contenu = parsed_html.body.find('section', attrs={'id': 'contenu'})\n# Et on prend le contenu de la première <textarea> !\ncodeTeX = contenu.findAll('textarea', limit=1)[0].renderContents()\n# Quelques corrections, parce que BeautifulSoup échappe certains trucs\ncodeTeX = codeTeX.replace(\"&amp;\", \"&\").replace(\"&lt;\", \"<\").replace(\"&gt;\", \">\").replace(\"&le;\", \"<=\").replace(\"&ge;\", \">=\")\n# Et d'autres erreurs fréquentes.\ncodeTeX = codeTeX.replace(\"^ - \", \"^{-}\")\n# Ici on pourrait utiliser un outil de traduction bien conçu pour produire codeTeX_en en anglais\n# FIXME !\n# Là on galère pour afficher en UTF-8. Zut !",
    "detail": "by-extension.python.dump_dD",
    "documentation": {}
  },
  {
    "label": "codeTeX",
    "kind": 5,
    "importPath": "by-extension.python.dump_dD",
    "description": "by-extension.python.dump_dD",
    "peekOfCode": "codeTeX = contenu.findAll('textarea', limit=1)[0].renderContents()\n# Quelques corrections, parce que BeautifulSoup échappe certains trucs\ncodeTeX = codeTeX.replace(\"&amp;\", \"&\").replace(\"&lt;\", \"<\").replace(\"&gt;\", \">\").replace(\"&le;\", \"<=\").replace(\"&ge;\", \">=\")\n# Et d'autres erreurs fréquentes.\ncodeTeX = codeTeX.replace(\"^ - \", \"^{-}\")\n# Ici on pourrait utiliser un outil de traduction bien conçu pour produire codeTeX_en en anglais\n# FIXME !\n# Là on galère pour afficher en UTF-8. Zut !\n# print( unicode( codeTeX ) )\nprint(\"<blue><u>Code LaTeX de cet exercice:<U><white>\\n\\n%s\" % codeTeX)",
    "detail": "by-extension.python.dump_dD",
    "documentation": {}
  },
  {
    "label": "codeTeX",
    "kind": 5,
    "importPath": "by-extension.python.dump_dD",
    "description": "by-extension.python.dump_dD",
    "peekOfCode": "codeTeX = codeTeX.replace(\"&amp;\", \"&\").replace(\"&lt;\", \"<\").replace(\"&gt;\", \">\").replace(\"&le;\", \"<=\").replace(\"&ge;\", \">=\")\n# Et d'autres erreurs fréquentes.\ncodeTeX = codeTeX.replace(\"^ - \", \"^{-}\")\n# Ici on pourrait utiliser un outil de traduction bien conçu pour produire codeTeX_en en anglais\n# FIXME !\n# Là on galère pour afficher en UTF-8. Zut !\n# print( unicode( codeTeX ) )\nprint(\"<blue><u>Code LaTeX de cet exercice:<U><white>\\n\\n%s\" % codeTeX)\n# On créé un fichier TeX\nname = \"ex_%i.fr.tex\" % numexo",
    "detail": "by-extension.python.dump_dD",
    "documentation": {}
  },
  {
    "label": "codeTeX",
    "kind": 5,
    "importPath": "by-extension.python.dump_dD",
    "description": "by-extension.python.dump_dD",
    "peekOfCode": "codeTeX = codeTeX.replace(\"^ - \", \"^{-}\")\n# Ici on pourrait utiliser un outil de traduction bien conçu pour produire codeTeX_en en anglais\n# FIXME !\n# Là on galère pour afficher en UTF-8. Zut !\n# print( unicode( codeTeX ) )\nprint(\"<blue><u>Code LaTeX de cet exercice:<U><white>\\n\\n%s\" % codeTeX)\n# On créé un fichier TeX\nname = \"ex_%i.fr.tex\" % numexo\nout = open(name, mode=\"w\")\n# On va écrire le code de l'exercice dedans",
    "detail": "by-extension.python.dump_dD",
    "documentation": {}
  },
  {
    "label": "name",
    "kind": 5,
    "importPath": "by-extension.python.dump_dD",
    "description": "by-extension.python.dump_dD",
    "peekOfCode": "name = \"ex_%i.fr.tex\" % numexo\nout = open(name, mode=\"w\")\n# On va écrire le code de l'exercice dedans\nprint(\"<green>On écrit dans %s !<white>\" % out)\n# Ajout de la possibilité de préciser le chapitre courant en train d'être construit.\nif chapter:\n    chapter = chapter.replace(\"_\", \" \").replace(\"/\", \"\")\n    print(\"<magenta>Pour le chapitre '%s' :<white>\" % chapter)\n    out.write(\"%%%% -*- mode: latex; coding: utf-8 -*-\\n%%%% Chapter : %s.\\n%%%% Start of LaTeX code, for exercise #%i (from '%s'), in French (file '%s').\\n\\n\" % (chapter, numexo, urlToGo, name))\nelse:",
    "detail": "by-extension.python.dump_dD",
    "documentation": {}
  },
  {
    "label": "out",
    "kind": 5,
    "importPath": "by-extension.python.dump_dD",
    "description": "by-extension.python.dump_dD",
    "peekOfCode": "out = open(name, mode=\"w\")\n# On va écrire le code de l'exercice dedans\nprint(\"<green>On écrit dans %s !<white>\" % out)\n# Ajout de la possibilité de préciser le chapitre courant en train d'être construit.\nif chapter:\n    chapter = chapter.replace(\"_\", \" \").replace(\"/\", \"\")\n    print(\"<magenta>Pour le chapitre '%s' :<white>\" % chapter)\n    out.write(\"%%%% -*- mode: latex; coding: utf-8 -*-\\n%%%% Chapter : %s.\\n%%%% Start of LaTeX code, for exercise #%i (from '%s'), in French (file '%s').\\n\\n\" % (chapter, numexo, urlToGo, name))\nelse:\n    out.write(\"%%%% -*- mode: latex; coding: utf-8 -*-\\n%%%% Start of LaTeX code, for exercise #%i (from '%s'), in French (file '%s').\\n\\n\" % (numexo, urlToGo, name))",
    "detail": "by-extension.python.dump_dD",
    "documentation": {}
  },
  {
    "label": "dtw",
    "kind": 2,
    "importPath": "by-extension.python.dynamic-time-warping",
    "description": "by-extension.python.dynamic-time-warping",
    "peekOfCode": "def dtw(x, y, dist, warp=1, w=inf, s=1.0):\n    \"\"\"\n    Computes Dynamic Time Warping (DTW) of two sequences.\n    :param array x: N1*M array\n    :param array y: N2*M array\n    :param func dist: distance used as cost measure\n    :param int warp: how many shifts are computed.\n    :param int w: window size limiting the maximal distance between indices of matched entries |i,j|.\n    :param float s: weight applied on off-diagonal moves of the path. As s gets larger, the warping path is increasingly biased towards the diagonal\n    Returns the minimum distance, the cost matrix, the accumulated cost matrix, and the wrap path.",
    "detail": "by-extension.python.dynamic-time-warping",
    "documentation": {}
  },
  {
    "label": "accelerated_dtw",
    "kind": 2,
    "importPath": "by-extension.python.dynamic-time-warping",
    "description": "by-extension.python.dynamic-time-warping",
    "peekOfCode": "def accelerated_dtw(x, y, dist, warp=1):\n    \"\"\"\n    Computes Dynamic Time Warping (DTW) of two sequences in a faster way.\n    Instead of iterating through each element and calculating each distance,\n    this uses the cdist function from scipy (https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.distance.cdist.html)\n    :param array x: N1*M array\n    :param array y: N2*M array\n    :param string or func dist: distance parameter for cdist. When string is given, cdist uses optimized functions for the distance metrics.\n    If a string is passed, the distance function can be 'braycurtis', 'canberra', 'chebyshev', 'cityblock', 'correlation', 'cosine', 'dice', 'euclidean', 'hamming', 'jaccard', 'kulsinski', 'mahalanobis', 'matching', 'minkowski', 'rogerstanimoto', 'russellrao', 'seuclidean', 'sokalmichener', 'sokalsneath', 'sqeuclidean', 'wminkowski', 'yule'.\n    :param int warp: how many shifts are computed.",
    "detail": "by-extension.python.dynamic-time-warping",
    "documentation": {}
  },
  {
    "label": "match_to_emoji",
    "kind": 2,
    "importPath": "by-extension.python.emojize",
    "description": "by-extension.python.emojize",
    "peekOfCode": "def match_to_emoji(m):\n    \"\"\"Call emoji.emojize on m).\"\"\"\n    return emojize(m.group(), use_aliases=True)\ndef emojize_all(s):\n    \"\"\"Convert all emojis :aliases: of the string s to emojis in UTF-8.\"\"\"\n    return re.sub(r\":([a-z_-]+):\", match_to_emoji, s)\ndef main(path):\n    \"\"\"Handle the file given by its path.\"\"\"\n    with open(path, 'r') as f:\n        for line in f.readlines():",
    "detail": "by-extension.python.emojize",
    "documentation": {}
  },
  {
    "label": "emojize_all",
    "kind": 2,
    "importPath": "by-extension.python.emojize",
    "description": "by-extension.python.emojize",
    "peekOfCode": "def emojize_all(s):\n    \"\"\"Convert all emojis :aliases: of the string s to emojis in UTF-8.\"\"\"\n    return re.sub(r\":([a-z_-]+):\", match_to_emoji, s)\ndef main(path):\n    \"\"\"Handle the file given by its path.\"\"\"\n    with open(path, 'r') as f:\n        for line in f.readlines():\n            print(emojize_all(line), end='')\nif __name__ == '__main__':\n    from sys import argv",
    "detail": "by-extension.python.emojize",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "by-extension.python.emojize",
    "description": "by-extension.python.emojize",
    "peekOfCode": "def main(path):\n    \"\"\"Handle the file given by its path.\"\"\"\n    with open(path, 'r') as f:\n        for line in f.readlines():\n            print(emojize_all(line), end='')\nif __name__ == '__main__':\n    from sys import argv\n    for arg in argv[1:]:\n        main(arg)\n# End of emojize.py",
    "detail": "by-extension.python.emojize",
    "documentation": {}
  },
  {
    "label": "emojize",
    "kind": 2,
    "importPath": "by-extension.python.emojize_pngorsvg",
    "description": "by-extension.python.emojize_pngorsvg",
    "peekOfCode": "def emojize(s, use_svg=USE_SVG):\n    \"\"\"Call markdown.markdown() on s.\"\"\"\n    emoji_generator = pymdownx.emoji.to_svg if use_svg else pymdownx.emoji.to_png\n    extension_configs = {\n        'pymdownx.emoji': {\n            'emoji_generator': emoji_generator\n        }\n    }\n    res = markdown(s,\n                   extensions=['pymdownx.emoji'],",
    "detail": "by-extension.python.emojize_pngorsvg",
    "documentation": {}
  },
  {
    "label": "match_to_emoji",
    "kind": 2,
    "importPath": "by-extension.python.emojize_pngorsvg",
    "description": "by-extension.python.emojize_pngorsvg",
    "peekOfCode": "def match_to_emoji(m, use_svg=USE_SVG):\n    \"\"\"Call emoji.emojize on m.group().\"\"\"\n    return emojize(m.group(), use_svg=use_svg)\ndef emojize_all(s, use_svg=USE_SVG):\n    \"\"\"Convert all emojis :aliases: of the string s to emojis in UTF-8.\"\"\"\n    return re.sub(r\":([a-z_-]+):\", lambda s2: match_to_emoji(s2, use_svg=use_svg), s)\ndef main(path, use_svg=USE_SVG):\n    \"\"\"Handle the file given by its path.\"\"\"\n    with open(path, 'r') as f:\n        for line in f.readlines():",
    "detail": "by-extension.python.emojize_pngorsvg",
    "documentation": {}
  },
  {
    "label": "emojize_all",
    "kind": 2,
    "importPath": "by-extension.python.emojize_pngorsvg",
    "description": "by-extension.python.emojize_pngorsvg",
    "peekOfCode": "def emojize_all(s, use_svg=USE_SVG):\n    \"\"\"Convert all emojis :aliases: of the string s to emojis in UTF-8.\"\"\"\n    return re.sub(r\":([a-z_-]+):\", lambda s2: match_to_emoji(s2, use_svg=use_svg), s)\ndef main(path, use_svg=USE_SVG):\n    \"\"\"Handle the file given by its path.\"\"\"\n    with open(path, 'r') as f:\n        for line in f.readlines():\n            print(emojize_all(line, use_svg=use_svg), end='')\nif __name__ == '__main__':\n    from sys import argv",
    "detail": "by-extension.python.emojize_pngorsvg",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "by-extension.python.emojize_pngorsvg",
    "description": "by-extension.python.emojize_pngorsvg",
    "peekOfCode": "def main(path, use_svg=USE_SVG):\n    \"\"\"Handle the file given by its path.\"\"\"\n    with open(path, 'r') as f:\n        for line in f.readlines():\n            print(emojize_all(line, use_svg=use_svg), end='')\nif __name__ == '__main__':\n    from sys import argv\n    if '--svg' in argv:\n        USE_SVG = True\n        while '--svg' in argv:",
    "detail": "by-extension.python.emojize_pngorsvg",
    "documentation": {}
  },
  {
    "label": "USE_SVG",
    "kind": 5,
    "importPath": "by-extension.python.emojize_pngorsvg",
    "description": "by-extension.python.emojize_pngorsvg",
    "peekOfCode": "USE_SVG = False\ndef emojize(s, use_svg=USE_SVG):\n    \"\"\"Call markdown.markdown() on s.\"\"\"\n    emoji_generator = pymdownx.emoji.to_svg if use_svg else pymdownx.emoji.to_png\n    extension_configs = {\n        'pymdownx.emoji': {\n            'emoji_generator': emoji_generator\n        }\n    }\n    res = markdown(s,",
    "detail": "by-extension.python.emojize_pngorsvg",
    "documentation": {}
  },
  {
    "label": "enumToString",
    "kind": 2,
    "importPath": "by-extension.python.enum-2-string",
    "description": "by-extension.python.enum-2-string",
    "peekOfCode": "def enumToString(constants, enum, elem):\n    all = constants.all_values(enum)\n    for e in all.keys():\n        if str(elem) == str(all[e]):\n            return e\n    return \"<unknown>\"",
    "detail": "by-extension.python.enum-2-string",
    "documentation": {}
  },
  {
    "label": "even_occuring_element",
    "kind": 2,
    "importPath": "by-extension.python.even-occuring-element",
    "description": "by-extension.python.even-occuring-element",
    "peekOfCode": "def even_occuring_element(arr):\n    \"\"\"Returns the even occuring element within a list of integers\"\"\"\n    dict = {}\n    for num in arr:\n        if num in dict:\n            dict[num] += 1\n        else:\n            dict[num] = 1\n    for num in dict:\n        if not dict[num] & 1: # bitwise check for parity.",
    "detail": "by-extension.python.even-occuring-element",
    "documentation": {}
  },
  {
    "label": "factorial_iterative",
    "kind": 2,
    "importPath": "by-extension.python.factorial",
    "description": "by-extension.python.factorial",
    "peekOfCode": "def factorial_iterative(num):\n    \"\"\"returns the factorial of num using an iterative method.\"\"\"\n    factor = 1\n    for i in xrange(1, num + 1):\n        factor *= i\n    return factor\ndef factorial_reduce(num):\n    \"\"\"returns the factorial of num using a reduce (shortest method).\"\"\"\n    return reduce(lambda x, y: x * y, range(1, num + 1))\ndef factorial_recursive(num):",
    "detail": "by-extension.python.factorial",
    "documentation": {}
  },
  {
    "label": "factorial_reduce",
    "kind": 2,
    "importPath": "by-extension.python.factorial",
    "description": "by-extension.python.factorial",
    "peekOfCode": "def factorial_reduce(num):\n    \"\"\"returns the factorial of num using a reduce (shortest method).\"\"\"\n    return reduce(lambda x, y: x * y, range(1, num + 1))\ndef factorial_recursive(num):\n    \"\"\"returns the factorial of num using a recursive method.\"\"\"\n    if num == 1:\n        return 1\n    return num * factorial_recursive(num -1)",
    "detail": "by-extension.python.factorial",
    "documentation": {}
  },
  {
    "label": "factorial_recursive",
    "kind": 2,
    "importPath": "by-extension.python.factorial",
    "description": "by-extension.python.factorial",
    "peekOfCode": "def factorial_recursive(num):\n    \"\"\"returns the factorial of num using a recursive method.\"\"\"\n    if num == 1:\n        return 1\n    return num * factorial_recursive(num -1)",
    "detail": "by-extension.python.factorial",
    "documentation": {}
  },
  {
    "label": "coin",
    "kind": 2,
    "importPath": "by-extension.python.fairCoin",
    "description": "by-extension.python.fairCoin",
    "peekOfCode": "def coin(p=0.5):\n    \"\"\" 1 with probability = p, 0 with probability 1 - p. \"\"\"\n    return 1 * (np.random.random() < p)\ndef vonNeumann(q=0.5):\n    \"\"\" Use von Neumann's rejection algorithm with an unknown coin (Bernoulli q). \"\"\"\n    x, y = coin(q), coin(q)\n    while x == y:  # (x, y) not in {(1, 0), (1, 0)}\n        x, y = coin(q), coin(q)\n    return x\ndef main(n=1000):",
    "detail": "by-extension.python.fairCoin",
    "documentation": {}
  },
  {
    "label": "vonNeumann",
    "kind": 2,
    "importPath": "by-extension.python.fairCoin",
    "description": "by-extension.python.fairCoin",
    "peekOfCode": "def vonNeumann(q=0.5):\n    \"\"\" Use von Neumann's rejection algorithm with an unknown coin (Bernoulli q). \"\"\"\n    x, y = coin(q), coin(q)\n    while x == y:  # (x, y) not in {(1, 0), (1, 0)}\n        x, y = coin(q), coin(q)\n    return x\ndef main(n=1000):\n    \"\"\" Check that the von Neumann method is indeed simulating a fair coin. \"\"\"\n    print(\"\\n\\n- Using n = {} tests of the von Neumann method, with unknown q in (0, 1).\".format(n))\n    q = 1.0 / np.pi   # Unknown float number 0.3183098861837907",
    "detail": "by-extension.python.fairCoin",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "by-extension.python.fairCoin",
    "description": "by-extension.python.fairCoin",
    "peekOfCode": "def main(n=1000):\n    \"\"\" Check that the von Neumann method is indeed simulating a fair coin. \"\"\"\n    print(\"\\n\\n- Using n = {} tests of the von Neumann method, with unknown q in (0, 1).\".format(n))\n    q = 1.0 / np.pi   # Unknown float number 0.3183098861837907\n    tests = [vonNeumann(q) for _ in range(n)]\n    assert all(i in {0, 1} for i in tests), \"Error of the vonNeumann function: a value outside of {0, 1} has been produced...\"\n    mu, sigma = np.mean(tests), np.var(tests)\n    print(\"For the values x generated by the vonNeumann(q) function:\\n Average mu = {:.4g} (should be 0.5) and variance sigma = {:.4g} (should be 0.25).\".format(mu, sigma))\n    delta_mu = abs(mu - 0.5) / 0.5\n    delta_sigma = abs(sigma - 0.25) / 0.25",
    "detail": "by-extension.python.fairCoin",
    "documentation": {}
  },
  {
    "label": "fib_iter",
    "kind": 2,
    "importPath": "by-extension.python.fib",
    "description": "by-extension.python.fib",
    "peekOfCode": "def fib_iter(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    p0 = 0\n    p1 = 1\n    for i in range(n-1):\n        next_val = p0 + p1\n        p0 = p1",
    "detail": "by-extension.python.fib",
    "documentation": {}
  },
  {
    "label": "fibonacci_iterative",
    "kind": 2,
    "importPath": "by-extension.python.fibonacci",
    "description": "by-extension.python.fibonacci",
    "peekOfCode": "def fibonacci_iterative(limit):\n    \"\"\"fibonacci sequence using an iterative approach.\"\"\"\n    a, b = 0, 1\n    for i in xrange(limit):\n        a, b = b, a + b\n    return a\ndef fibonacci_recursive(limit):\n    \"\"\"fibonacci sequence using a recusive approach.\"\"\"\n    if limit <= 1:\n        return limit",
    "detail": "by-extension.python.fibonacci",
    "documentation": {}
  },
  {
    "label": "fibonacci_recursive",
    "kind": 2,
    "importPath": "by-extension.python.fibonacci",
    "description": "by-extension.python.fibonacci",
    "peekOfCode": "def fibonacci_recursive(limit):\n    \"\"\"fibonacci sequence using a recusive approach.\"\"\"\n    if limit <= 1:\n        return limit\n    return fibonacci_recursive(limit - 1) + fibonacci_recursive(limit - 2)\ndef fibonacci_reduce(limit):\n    \"\"\"fibonacci sequence using reduce (shortest option).\"\"\"\n    return reduce(lambda x, y: x + [x[y] + x[y - 1]], range(1, limit), [0, 1])[-1]\ndef fibonacci_comprehension(limit):\n    \"\"\"fibonacci sequence using a list comprehension.\"\"\"",
    "detail": "by-extension.python.fibonacci",
    "documentation": {}
  },
  {
    "label": "fibonacci_reduce",
    "kind": 2,
    "importPath": "by-extension.python.fibonacci",
    "description": "by-extension.python.fibonacci",
    "peekOfCode": "def fibonacci_reduce(limit):\n    \"\"\"fibonacci sequence using reduce (shortest option).\"\"\"\n    return reduce(lambda x, y: x + [x[y] + x[y - 1]], range(1, limit), [0, 1])[-1]\ndef fibonacci_comprehension(limit):\n    \"\"\"fibonacci sequence using a list comprehension.\"\"\"\n    sequence = [0, 1]\n    [sequence.append(sequence[i] + sequence[i-1]) for i in range(1, limit)]\n    return sequence[-1]",
    "detail": "by-extension.python.fibonacci",
    "documentation": {}
  },
  {
    "label": "fibonacci_comprehension",
    "kind": 2,
    "importPath": "by-extension.python.fibonacci",
    "description": "by-extension.python.fibonacci",
    "peekOfCode": "def fibonacci_comprehension(limit):\n    \"\"\"fibonacci sequence using a list comprehension.\"\"\"\n    sequence = [0, 1]\n    [sequence.append(sequence[i] + sequence[i-1]) for i in range(1, limit)]\n    return sequence[-1]",
    "detail": "by-extension.python.fibonacci",
    "documentation": {}
  },
  {
    "label": "dircmp",
    "kind": 6,
    "importPath": "by-extension.python.filemap",
    "description": "by-extension.python.filemap",
    "peekOfCode": "class dircmp:\n    \"\"\"A class that manages the comparison of 2 directories.\n    dircmp(a, b, ignore=None, hide=None)\n      A and B are directories.\n      IGNORE is a list of names to ignore,\n        defaults to DEFAULT_IGNORES.\n      HIDE is a list of names to hide,\n        defaults to [os.curdir, os.pardir].\n    High level usage:\n      x = dircmp(dir1, dir2)",
    "detail": "by-extension.python.filemap",
    "documentation": {}
  },
  {
    "label": "clear_cache",
    "kind": 2,
    "importPath": "by-extension.python.filemap",
    "description": "by-extension.python.filemap",
    "peekOfCode": "def clear_cache():\n    \"\"\"Clear the filecmp cache.\"\"\"\n    _cache.clear()\ndef cmp(f1, f2, shallow=True):\n    \"\"\"Compare two files.\n    Arguments:\n    f1 -- First file name\n    f2 -- Second file name\n    shallow -- Just check stat signature (do not read the files).\n               defaults to True.",
    "detail": "by-extension.python.filemap",
    "documentation": {}
  },
  {
    "label": "cmp",
    "kind": 2,
    "importPath": "by-extension.python.filemap",
    "description": "by-extension.python.filemap",
    "peekOfCode": "def cmp(f1, f2, shallow=True):\n    \"\"\"Compare two files.\n    Arguments:\n    f1 -- First file name\n    f2 -- Second file name\n    shallow -- Just check stat signature (do not read the files).\n               defaults to True.\n    Return value:\n    True if the files are the same, False otherwise.\n    This function uses a cache for past comparisons and the results,",
    "detail": "by-extension.python.filemap",
    "documentation": {}
  },
  {
    "label": "cmpfiles",
    "kind": 2,
    "importPath": "by-extension.python.filemap",
    "description": "by-extension.python.filemap",
    "peekOfCode": "def cmpfiles(a, b, common, shallow=True):\n    \"\"\"Compare common files in two directories.\n    a, b -- directory names\n    common -- list of file names found in both directories\n    shallow -- if true, do comparison based solely on stat() information\n    Returns a tuple of three lists:\n      files that compare equal\n      files that are different\n      filenames that aren't regular files.\n    \"\"\"",
    "detail": "by-extension.python.filemap",
    "documentation": {}
  },
  {
    "label": "demo",
    "kind": 2,
    "importPath": "by-extension.python.filemap",
    "description": "by-extension.python.filemap",
    "peekOfCode": "def demo():\n    import sys\n    import getopt\n    options, args = getopt.getopt(sys.argv[1:], 'r')\n    if len(args) != 2:\n        raise getopt.GetoptError('need exactly two args', None)\n    dd = dircmp(args[0], args[1])\n    if ('-r', '') in options:\n        dd.report_full_closure()\n    else:",
    "detail": "by-extension.python.filemap",
    "documentation": {}
  },
  {
    "label": "__all__",
    "kind": 5,
    "importPath": "by-extension.python.filemap",
    "description": "by-extension.python.filemap",
    "peekOfCode": "__all__ = ['clear_cache', 'cmp', 'dircmp', 'cmpfiles', 'DEFAULT_IGNORES']\n_cache = {}\nBUFSIZE = 8*1024\nDEFAULT_IGNORES = [\n    'RCS', 'CVS', 'tags', '.git', '.hg', '.bzr', '_darcs', '__pycache__']\ndef clear_cache():\n    \"\"\"Clear the filecmp cache.\"\"\"\n    _cache.clear()\ndef cmp(f1, f2, shallow=True):\n    \"\"\"Compare two files.",
    "detail": "by-extension.python.filemap",
    "documentation": {}
  },
  {
    "label": "_cache",
    "kind": 5,
    "importPath": "by-extension.python.filemap",
    "description": "by-extension.python.filemap",
    "peekOfCode": "_cache = {}\nBUFSIZE = 8*1024\nDEFAULT_IGNORES = [\n    'RCS', 'CVS', 'tags', '.git', '.hg', '.bzr', '_darcs', '__pycache__']\ndef clear_cache():\n    \"\"\"Clear the filecmp cache.\"\"\"\n    _cache.clear()\ndef cmp(f1, f2, shallow=True):\n    \"\"\"Compare two files.\n    Arguments:",
    "detail": "by-extension.python.filemap",
    "documentation": {}
  },
  {
    "label": "BUFSIZE",
    "kind": 5,
    "importPath": "by-extension.python.filemap",
    "description": "by-extension.python.filemap",
    "peekOfCode": "BUFSIZE = 8*1024\nDEFAULT_IGNORES = [\n    'RCS', 'CVS', 'tags', '.git', '.hg', '.bzr', '_darcs', '__pycache__']\ndef clear_cache():\n    \"\"\"Clear the filecmp cache.\"\"\"\n    _cache.clear()\ndef cmp(f1, f2, shallow=True):\n    \"\"\"Compare two files.\n    Arguments:\n    f1 -- First file name",
    "detail": "by-extension.python.filemap",
    "documentation": {}
  },
  {
    "label": "DEFAULT_IGNORES",
    "kind": 5,
    "importPath": "by-extension.python.filemap",
    "description": "by-extension.python.filemap",
    "peekOfCode": "DEFAULT_IGNORES = [\n    'RCS', 'CVS', 'tags', '.git', '.hg', '.bzr', '_darcs', '__pycache__']\ndef clear_cache():\n    \"\"\"Clear the filecmp cache.\"\"\"\n    _cache.clear()\ndef cmp(f1, f2, shallow=True):\n    \"\"\"Compare two files.\n    Arguments:\n    f1 -- First file name\n    f2 -- Second file name",
    "detail": "by-extension.python.filemap",
    "documentation": {}
  },
  {
    "label": "f",
    "kind": 5,
    "importPath": "by-extension.python.filter",
    "description": "by-extension.python.filter",
    "peekOfCode": "f = ProfanitiesFilter([''], replacements=\"*\") \nf.inside_words = True",
    "detail": "by-extension.python.filter",
    "documentation": {}
  },
  {
    "label": "f.inside_words",
    "kind": 5,
    "importPath": "by-extension.python.filter",
    "description": "by-extension.python.filter",
    "peekOfCode": "f.inside_words = True",
    "detail": "by-extension.python.filter",
    "documentation": {}
  },
  {
    "label": "get_file_names",
    "kind": 2,
    "importPath": "by-extension.python.find-files-recursively",
    "description": "by-extension.python.find-files-recursively",
    "peekOfCode": "def get_file_names(filepath, pattern):\n    matches = []\n    if os.path.exists(filepath):\n        for root, dirnames, filenames in os.walk(filepath):\n            for filename in fnmatch.filter(filenames, pattern):\n                # matches.append(os.path.join(root, filename))  # full path\n                matches.append(os.path.join(filename))  # just file name\n        if matches:\n            print(\"Found {} files:\".format(len(matches)))\n            output_files(matches)",
    "detail": "by-extension.python.find-files-recursively",
    "documentation": {}
  },
  {
    "label": "output_files",
    "kind": 2,
    "importPath": "by-extension.python.find-files-recursively",
    "description": "by-extension.python.find-files-recursively",
    "peekOfCode": "def output_files(list_of_files):\n    for filename in list_of_files:\n        print(filename)\nif __name__ == '__main__':\n    get_file_names(PATH, PATTERN)",
    "detail": "by-extension.python.find-files-recursively",
    "documentation": {}
  },
  {
    "label": "PATH",
    "kind": 5,
    "importPath": "by-extension.python.find-files-recursively",
    "description": "by-extension.python.find-files-recursively",
    "peekOfCode": "PATH = './'\nPATTERN = '*.md'\ndef get_file_names(filepath, pattern):\n    matches = []\n    if os.path.exists(filepath):\n        for root, dirnames, filenames in os.walk(filepath):\n            for filename in fnmatch.filter(filenames, pattern):\n                # matches.append(os.path.join(root, filename))  # full path\n                matches.append(os.path.join(filename))  # just file name\n        if matches:",
    "detail": "by-extension.python.find-files-recursively",
    "documentation": {}
  },
  {
    "label": "PATTERN",
    "kind": 5,
    "importPath": "by-extension.python.find-files-recursively",
    "description": "by-extension.python.find-files-recursively",
    "peekOfCode": "PATTERN = '*.md'\ndef get_file_names(filepath, pattern):\n    matches = []\n    if os.path.exists(filepath):\n        for root, dirnames, filenames in os.walk(filepath):\n            for filename in fnmatch.filter(filenames, pattern):\n                # matches.append(os.path.join(root, filename))  # full path\n                matches.append(os.path.join(filename))  # just file name\n        if matches:\n            print(\"Found {} files:\".format(len(matches)))",
    "detail": "by-extension.python.find-files-recursively",
    "documentation": {}
  },
  {
    "label": "difference_set",
    "kind": 2,
    "importPath": "by-extension.python.find-missing-element",
    "description": "by-extension.python.find-missing-element",
    "peekOfCode": "def difference_set(orig, shuffled):\n    \"\"\"finds the missing element using a set.\"\"\"\n    return set(orig).difference(set(shuffled)).pop()\ndef difference_iterative(orig, shuffled):\n    \"\"\"finds the missing element by iterating over the list\"\"\"\n    for x in orig:\n        if not x in shuffled:\n            return x",
    "detail": "by-extension.python.find-missing-element",
    "documentation": {}
  },
  {
    "label": "difference_iterative",
    "kind": 2,
    "importPath": "by-extension.python.find-missing-element",
    "description": "by-extension.python.find-missing-element",
    "peekOfCode": "def difference_iterative(orig, shuffled):\n    \"\"\"finds the missing element by iterating over the list\"\"\"\n    for x in orig:\n        if not x in shuffled:\n            return x",
    "detail": "by-extension.python.find-missing-element",
    "documentation": {}
  },
  {
    "label": "first_non_repeated_character",
    "kind": 2,
    "importPath": "by-extension.python.first-non-repeated-character",
    "description": "by-extension.python.first-non-repeated-character",
    "peekOfCode": "def first_non_repeated_character(str):\n    \"\"\"finds the first character in a string that's not repreated\"\"\"\n    for i, char in enumerate(str):\n        if i - 1 >= 0 and char == str[i - 1]:\n            continue\n        if i + 1 < len(str) and char == str[i + 1]:\n            continue\n        return char",
    "detail": "by-extension.python.first-non-repeated-character",
    "documentation": {}
  },
  {
    "label": "is_stderr_used",
    "kind": 2,
    "importPath": "by-extension.python.fix-iocaml-notebook-exports-to-pdf",
    "description": "by-extension.python.fix-iocaml-notebook-exports-to-pdf",
    "peekOfCode": "def is_stderr_used(outputs):\n    for output in outputs:\n        try:\n            if output['name'] == \"stderr\":\n                return True\n        except KeyError:\n            pass\n    return False\ndef transform_data_texthtml(data_texthtml):\n    data_texthtml[0] = data_texthtml[0][2:]",
    "detail": "by-extension.python.fix-iocaml-notebook-exports-to-pdf",
    "documentation": {}
  },
  {
    "label": "transform_data_texthtml",
    "kind": 2,
    "importPath": "by-extension.python.fix-iocaml-notebook-exports-to-pdf",
    "description": "by-extension.python.fix-iocaml-notebook-exports-to-pdf",
    "peekOfCode": "def transform_data_texthtml(data_texthtml):\n    data_texthtml[0] = data_texthtml[0][2:]\n    for i in range(len(data_texthtml)):\n        # Hack to replace a few HTML escaped caracters\n        data_texthtml[i] = data_texthtml[i].replace('&gt;','>').replace('&lt;','<').replace('&quot;','\\'')\n    return data_texthtml\ndef get_data_texthtml(outputs):\n    data_texthtml = []\n    for output in outputs:\n        try:",
    "detail": "by-extension.python.fix-iocaml-notebook-exports-to-pdf",
    "documentation": {}
  },
  {
    "label": "get_data_texthtml",
    "kind": 2,
    "importPath": "by-extension.python.fix-iocaml-notebook-exports-to-pdf",
    "description": "by-extension.python.fix-iocaml-notebook-exports-to-pdf",
    "peekOfCode": "def get_data_texthtml(outputs):\n    data_texthtml = []\n    for output in outputs:\n        try:\n            if output['output_type'] == \"execute_result\" and 'text/html' in output['data']:\n                long_data_texthtml = output['data']['text/html']\n                assert len(long_data_texthtml) >= 8\n                data_texthtml += transform_data_texthtml(long_data_texthtml[6:-1])\n        except KeyError:\n            pass",
    "detail": "by-extension.python.fix-iocaml-notebook-exports-to-pdf",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "by-extension.python.fix-iocaml-notebook-exports-to-pdf",
    "description": "by-extension.python.fix-iocaml-notebook-exports-to-pdf",
    "peekOfCode": "def main(old, new, debug=False):\n    filename = old\n    assert filename[-6:] == '.ipynb', \"Error: the input file is not a .ipynb Jupyter Notebook file.\"\n    with open(filename, 'r') as file:\n        content = json.load(file)\n    # Check that it is a IOCaml notebook\n    assert content['metadata']['kernelspec']['name'] == \"iocaml-kernel\" and content['metadata']['kernelspec']['language'] == \"ocaml\" and content['metadata']['kernelspec']['display_name'] == \"OCaml\", \"Error: the input notebook does not appear to have been produced by the IOCaml OCaml kernel.\"\n    # For each cell\n    for cell in content['cells']:\n        if cell['cell_type'] == \"code\":",
    "detail": "by-extension.python.fix-iocaml-notebook-exports-to-pdf",
    "documentation": {}
  },
  {
    "label": "flatten_array",
    "kind": 2,
    "importPath": "by-extension.python.flatten-array",
    "description": "by-extension.python.flatten-array",
    "peekOfCode": "def flatten_array(orig):\n    \"\"\"returns a new, flattened, list\"\"\"\n    flattened_list = []\n    for item in orig:\n        if isinstance(item, list):\n            flattened_list += flatten_array(item)\n        else:\n            flattened_list.append(item)\n    return flattened_list\ndef flatten_in_place(orig):",
    "detail": "by-extension.python.flatten-array",
    "documentation": {}
  },
  {
    "label": "flatten_in_place",
    "kind": 2,
    "importPath": "by-extension.python.flatten-array",
    "description": "by-extension.python.flatten-array",
    "peekOfCode": "def flatten_in_place(orig):\n    \"\"\"flattens a given list in place\"\"\"\n    is_flattened = False\n    while not is_flattened: # iterating until no more lists are found\n        is_flattened = True\n        for i, item in enumerate(orig):\n            if isinstance(item, list):\n                is_flattened = False\n                orig = orig[:i] + item + orig[i + 1:]\n    return orig",
    "detail": "by-extension.python.flatten-array",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "by-extension.python.fraisMission",
    "description": "by-extension.python.fraisMission",
    "peekOfCode": "def main(nbJour=3, nbRepas=None, trains=None, nbNuit=None, totalHotel=None):\n    \"\"\" Calcule et affiche les détails des frais de mission.\n    Par exemple :\n    >>> trains = {\n           \"Rennes > Lille\": (44.00, \"14/12/16\"),\n           \"Lille > Paris \": (25.50, \"16/12/16\"),\n           \"Paris > Rennes\": (35.00, \"03/01/17\"),\n       }\n    >>> main(nbJour=3, trains=trains)\n    ...",
    "detail": "by-extension.python.fraisMission",
    "documentation": {}
  },
  {
    "label": "repas",
    "kind": 5,
    "importPath": "by-extension.python.fraisMission",
    "description": "by-extension.python.fraisMission",
    "peekOfCode": "repas = 15.25\nhotel = 150\ntaxeSejour = 0  # 1.65\nmetro = 1.5\ndef main(nbJour=3, nbRepas=None, trains=None, nbNuit=None, totalHotel=None):\n    \"\"\" Calcule et affiche les détails des frais de mission.\n    Par exemple :\n    >>> trains = {\n           \"Rennes > Lille\": (44.00, \"14/12/16\"),\n           \"Lille > Paris \": (25.50, \"16/12/16\"),",
    "detail": "by-extension.python.fraisMission",
    "documentation": {}
  },
  {
    "label": "hotel",
    "kind": 5,
    "importPath": "by-extension.python.fraisMission",
    "description": "by-extension.python.fraisMission",
    "peekOfCode": "hotel = 150\ntaxeSejour = 0  # 1.65\nmetro = 1.5\ndef main(nbJour=3, nbRepas=None, trains=None, nbNuit=None, totalHotel=None):\n    \"\"\" Calcule et affiche les détails des frais de mission.\n    Par exemple :\n    >>> trains = {\n           \"Rennes > Lille\": (44.00, \"14/12/16\"),\n           \"Lille > Paris \": (25.50, \"16/12/16\"),\n           \"Paris > Rennes\": (35.00, \"03/01/17\"),",
    "detail": "by-extension.python.fraisMission",
    "documentation": {}
  },
  {
    "label": "taxeSejour",
    "kind": 5,
    "importPath": "by-extension.python.fraisMission",
    "description": "by-extension.python.fraisMission",
    "peekOfCode": "taxeSejour = 0  # 1.65\nmetro = 1.5\ndef main(nbJour=3, nbRepas=None, trains=None, nbNuit=None, totalHotel=None):\n    \"\"\" Calcule et affiche les détails des frais de mission.\n    Par exemple :\n    >>> trains = {\n           \"Rennes > Lille\": (44.00, \"14/12/16\"),\n           \"Lille > Paris \": (25.50, \"16/12/16\"),\n           \"Paris > Rennes\": (35.00, \"03/01/17\"),\n       }",
    "detail": "by-extension.python.fraisMission",
    "documentation": {}
  },
  {
    "label": "metro",
    "kind": 5,
    "importPath": "by-extension.python.fraisMission",
    "description": "by-extension.python.fraisMission",
    "peekOfCode": "metro = 1.5\ndef main(nbJour=3, nbRepas=None, trains=None, nbNuit=None, totalHotel=None):\n    \"\"\" Calcule et affiche les détails des frais de mission.\n    Par exemple :\n    >>> trains = {\n           \"Rennes > Lille\": (44.00, \"14/12/16\"),\n           \"Lille > Paris \": (25.50, \"16/12/16\"),\n           \"Paris > Rennes\": (35.00, \"03/01/17\"),\n       }\n    >>> main(nbJour=3, trains=trains)",
    "detail": "by-extension.python.fraisMission",
    "documentation": {}
  },
  {
    "label": "testSpecialFile",
    "kind": 2,
    "importPath": "by-extension.python.FreeSMS",
    "description": "by-extension.python.FreeSMS",
    "peekOfCode": "def testSpecialFile(name, number=''):\n    \"\"\" Test if the hidden file '~/.smsapifreemobile_name.b64' exists and decodes (base64) correctly.\n    \"\"\"\n    assert name in [\"number\", \"user\", \"password\"], \"Error: unknown or incorrect value for 'name' for the function openSpecialFile(name) ...\"\n    # printc(\"<cyan>Testing the hidden file <white>'<u>~/.smsapifreemobile_{}.b64<U>'<cyan>...<white>\".format(name))  # DEBUG\n    try:\n        with open(expanduser('~/') + \".smsapifreemobile_\" + name + number + \".b64\") as f:\n            variable = base64.b64decode(f.readline()[:-1])\n            while variable[-1] == '\\n':\n                variable = variable[:-1]",
    "detail": "by-extension.python.FreeSMS",
    "documentation": {}
  },
  {
    "label": "openSpecialFile",
    "kind": 2,
    "importPath": "by-extension.python.FreeSMS",
    "description": "by-extension.python.FreeSMS",
    "peekOfCode": "def openSpecialFile(name, number=''):\n    \"\"\" Open the hidden file '~/.smsapifreemobile_name.b64', read and decode (base64) and return its content.\n    \"\"\"\n    assert name in [\"number\", \"user\", \"password\"], \"Error: unknown or incorrect value for 'name' for the function openSpecialFile(name) ...\"\n    printc(\"<cyan>Opening the hidden file <white>'<u>~/.smsapifreemobile_{}.b64<U>'<cyan>, read and decode (base64) and return its content...<white>\".format(name))\n    try:\n        with open(expanduser('~/') + \".smsapifreemobile_\" + name + number + \".b64\") as f:\n            variable = base64.b64decode(f.readline()[:-1])\n            while variable[-1] == '\\n':\n                variable = variable[:-1]",
    "detail": "by-extension.python.FreeSMS",
    "documentation": {}
  },
  {
    "label": "send_sms",
    "kind": 2,
    "importPath": "by-extension.python.FreeSMS",
    "description": "by-extension.python.FreeSMS",
    "peekOfCode": "def send_sms(text=\"Empty!\", secured=True, sleep_duration=0):\n    \"\"\" Sens a free SMS to the user identified by [user], with [password].\n    :user: Free Mobile id (of the form [0-9]{8}),\n    :password: Service password (of the form [a-zA-Z0-9]{14}),\n    :text: The content of the message (a warning is displayed if the message is bigger than 480 caracters)\n    :secured: True to use HTTPS, False to use HTTP.\n    Returns a boolean and a status string.\n    \"\"\"\n    # DONE split the text into smaller pieces if length is too big (automatically, or propose to do it ?)\n    if len(text) > MAX_SIZE:",
    "detail": "by-extension.python.FreeSMS",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "by-extension.python.FreeSMS",
    "description": "by-extension.python.FreeSMS",
    "peekOfCode": "def main(argv):\n    \"\"\" Main function. Use the arguments of the command line (sys.argv).\n    \"\"\"\n    # TODO use docopt to handle the command line arguments! Cf. http://docopt.org/\n    # TODO can docopt handle a cli documentation with ansicolortags tags in it? Cf. http://ansicolortags.rtfd.io/\n    # Manual handing of the command line arguments\n    if \"-h\" in argv or \"--help\" in argv:\n        printc(\"\"\"\n<green>FreeSMS.py<white> --help|-h | -f file | [--sleep] body of the message\nA simple Python script to send a text message to a Free Mobile phone.",
    "detail": "by-extension.python.FreeSMS",
    "documentation": {}
  },
  {
    "label": "today",
    "kind": 5,
    "importPath": "by-extension.python.FreeSMS",
    "description": "by-extension.python.FreeSMS",
    "peekOfCode": "today = time.strftime(\"%H:%M:%S %Y-%m-%d\")\ntry:\n    from os.path import expanduser\nexcept ImportError:\n    print(\"Warning, os.path.expanduser is not available, trying to use os.getenv('USER') = {} ...\".format(os.getenv(\"USER\")))\n    def expanduser(s):\n        \"\"\" Try to simulate the os.path.expanduser function. \"\"\"\n        return '/home/' + os.getenv(\"USER\") + '/' + s\nif sys.version_info < (3, 0):\n    from urllib import urlencode",
    "detail": "by-extension.python.FreeSMS",
    "documentation": {}
  },
  {
    "label": "numbers",
    "kind": 5,
    "importPath": "by-extension.python.FreeSMS",
    "description": "by-extension.python.FreeSMS",
    "peekOfCode": "numbers = []\n#: Number (not necessary)\n# number = base64.b64decode(open(expanduser('~') + \".smsapifreemobile_number.b64\").readline()[:-1])\n# if number[-1] == '\\n':\n#     number = number[:-1]\nnumber = openSpecialFile(\"number\")\nnumbers.append(number)\nif testSpecialFile(\"number\", \"2\"):\n    number2 = openSpecialFile(\"number\", \"2\")\n    numbers.append(number2)",
    "detail": "by-extension.python.FreeSMS",
    "documentation": {}
  },
  {
    "label": "number",
    "kind": 5,
    "importPath": "by-extension.python.FreeSMS",
    "description": "by-extension.python.FreeSMS",
    "peekOfCode": "number = openSpecialFile(\"number\")\nnumbers.append(number)\nif testSpecialFile(\"number\", \"2\"):\n    number2 = openSpecialFile(\"number\", \"2\")\n    numbers.append(number2)\n# Detect language\nlanguage = os.getenv(\"LANG\")\nlanguage = language[0:2] if language else \"fr\"\n# Maximum size that can be sent\n# XXX Reference: https://en.wikipedia.org/wiki/Short_Message_Service#Message_size",
    "detail": "by-extension.python.FreeSMS",
    "documentation": {}
  },
  {
    "label": "language",
    "kind": 5,
    "importPath": "by-extension.python.FreeSMS",
    "description": "by-extension.python.FreeSMS",
    "peekOfCode": "language = os.getenv(\"LANG\")\nlanguage = language[0:2] if language else \"fr\"\n# Maximum size that can be sent\n# XXX Reference: https://en.wikipedia.org/wiki/Short_Message_Service#Message_size\n# \"6 to 8 segment messages are the practical maximum\"\nMAX_SIZE = 4 * 159\nSTR_MAX_SIZE = \"4*159\"\nif language == \"fr\":\n    errorcodes = {\n        400: \"Un des paramètres obligatoires est manquant.\",",
    "detail": "by-extension.python.FreeSMS",
    "documentation": {}
  },
  {
    "label": "language",
    "kind": 5,
    "importPath": "by-extension.python.FreeSMS",
    "description": "by-extension.python.FreeSMS",
    "peekOfCode": "language = language[0:2] if language else \"fr\"\n# Maximum size that can be sent\n# XXX Reference: https://en.wikipedia.org/wiki/Short_Message_Service#Message_size\n# \"6 to 8 segment messages are the practical maximum\"\nMAX_SIZE = 4 * 159\nSTR_MAX_SIZE = \"4*159\"\nif language == \"fr\":\n    errorcodes = {\n        400: \"Un des paramètres obligatoires est manquant.\",\n        402: \"Trop de SMS ont été envoyés en trop peu de temps.\",",
    "detail": "by-extension.python.FreeSMS",
    "documentation": {}
  },
  {
    "label": "MAX_SIZE",
    "kind": 5,
    "importPath": "by-extension.python.FreeSMS",
    "description": "by-extension.python.FreeSMS",
    "peekOfCode": "MAX_SIZE = 4 * 159\nSTR_MAX_SIZE = \"4*159\"\nif language == \"fr\":\n    errorcodes = {\n        400: \"Un des paramètres obligatoires est manquant.\",\n        402: \"Trop de SMS ont été envoyés en trop peu de temps.\",\n        403: \"\"\"Le service n'est pas activé sur l'espace abonné, ou login / clé incorrect.\nAllez sur '<black>https://mobile.free.fr/moncompte/index.php?page=options&show=20<white>' svp, et activez l'option correspondate.\"\"\",\n        500: \"Erreur côté serveur. Veuillez réessayez ultérieurement.\",\n        1:   \"Le SMS a été envoyé sur votre mobile ({}).\".format(number) if len(numbers) <= 1 else \"Le SMS a été envoyé sur vos numéros ({}).\".format(numbers),",
    "detail": "by-extension.python.FreeSMS",
    "documentation": {}
  },
  {
    "label": "STR_MAX_SIZE",
    "kind": 5,
    "importPath": "by-extension.python.FreeSMS",
    "description": "by-extension.python.FreeSMS",
    "peekOfCode": "STR_MAX_SIZE = \"4*159\"\nif language == \"fr\":\n    errorcodes = {\n        400: \"Un des paramètres obligatoires est manquant.\",\n        402: \"Trop de SMS ont été envoyés en trop peu de temps.\",\n        403: \"\"\"Le service n'est pas activé sur l'espace abonné, ou login / clé incorrect.\nAllez sur '<black>https://mobile.free.fr/moncompte/index.php?page=options&show=20<white>' svp, et activez l'option correspondate.\"\"\",\n        500: \"Erreur côté serveur. Veuillez réessayez ultérieurement.\",\n        1:   \"Le SMS a été envoyé sur votre mobile ({}).\".format(number) if len(numbers) <= 1 else \"Le SMS a été envoyé sur vos numéros ({}).\".format(numbers),\n        \"toolong\": \"<red>Attention<white> : le message est trop long (+ de <black>{}<white> caracters, soit plus de 3 SMS).\".format(STR_MAX_SIZE)",
    "detail": "by-extension.python.FreeSMS",
    "documentation": {}
  },
  {
    "label": "add",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def add(param1, param2):\n    return param1 + param2\n#------------------------------------------------------------------------------------------------#\n#------------------------------------------------------------------------------------------------#\ndef centuryFromYear(year):\n    return ((year - 1) // 100) + 1\n#------------------------------------------------------------------------------------------------#\ndef checkPalindrome(inputString):\n    return inputString == inputString[::-1]\n#------------------------------------------------------------------------------------------------#",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "centuryFromYear",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def centuryFromYear(year):\n    return ((year - 1) // 100) + 1\n#------------------------------------------------------------------------------------------------#\ndef checkPalindrome(inputString):\n    return inputString == inputString[::-1]\n#------------------------------------------------------------------------------------------------#\ndef adjacentElementsProduct(inputArray):\n    max = inputArray[0] * inputArray[1]\n    for i in range(len(inputArray) - 1):\n        if inputArray[i] * inputArray[i + 1] > max:",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "checkPalindrome",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def checkPalindrome(inputString):\n    return inputString == inputString[::-1]\n#------------------------------------------------------------------------------------------------#\ndef adjacentElementsProduct(inputArray):\n    max = inputArray[0] * inputArray[1]\n    for i in range(len(inputArray) - 1):\n        if inputArray[i] * inputArray[i + 1] > max:\n            max = inputArray[i] * inputArray[i + 1]\n    return max\n#------------------------------------------------------------------------------------------------#",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "adjacentElementsProduct",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def adjacentElementsProduct(inputArray):\n    max = inputArray[0] * inputArray[1]\n    for i in range(len(inputArray) - 1):\n        if inputArray[i] * inputArray[i + 1] > max:\n            max = inputArray[i] * inputArray[i + 1]\n    return max\n#------------------------------------------------------------------------------------------------#\ndef shapeArea(n):\n    sum = n * 2 - 1\n    for i in range(1, (n * 2) - 1, 2):",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "shapeArea",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def shapeArea(n):\n    sum = n * 2 - 1\n    for i in range(1, (n * 2) - 1, 2):\n        sum += i * 2\n    return sum\n#------------------------------------------------------------------------------------------------#\ndef makeArrayConsecutive2(statues):\n    return max(statues) - min(statues) - len(statues) + 1\n#------------------------------------------------------------------------------------------------#\ndef almostIncreasingSequence(sequence):",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "makeArrayConsecutive2",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def makeArrayConsecutive2(statues):\n    return max(statues) - min(statues) - len(statues) + 1\n#------------------------------------------------------------------------------------------------#\ndef almostIncreasingSequence(sequence):\n    i = 0\n    while i < len(sequence) - 1:\n        if not sequence[i] < sequence[i + 1]:\n            if increasingSequence(\n                sequence[:i] + sequence[i + 1 :]\n            ) or increasingSequence(sequence[: i + 1] + sequence[i + 2 :]):",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "almostIncreasingSequence",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def almostIncreasingSequence(sequence):\n    i = 0\n    while i < len(sequence) - 1:\n        if not sequence[i] < sequence[i + 1]:\n            if increasingSequence(\n                sequence[:i] + sequence[i + 1 :]\n            ) or increasingSequence(sequence[: i + 1] + sequence[i + 2 :]):\n                return True\n            else:\n                return False",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "increasingSequence",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def increasingSequence(sequence):\n    for i in range(len(sequence) - 1):\n        if not sequence[i] < sequence[i + 1]:\n            return False\n    return True\n#------------------------------------------------------------------------------------------------#\ndef matrixElementsSum(matrix):\n    if len(matrix) > 1:\n        for row in range(1, len(matrix)):\n            for room in range(len(matrix[row])):",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "matrixElementsSum",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def matrixElementsSum(matrix):\n    if len(matrix) > 1:\n        for row in range(1, len(matrix)):\n            for room in range(len(matrix[row])):\n                if matrix[row - 1][room] == 0:\n                    matrix[row][room] = 0\n    sum = 0\n    for row in matrix:\n        for room in row:\n            sum += room",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "allLongestStrings",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def allLongestStrings(inputArray):\n    length = max([len(word) for word in inputArray])\n    result = [word for word in inputArray if len(word) == length]\n    return result\n#------------------------------------------------------------------------------------------------#\ndef commonCharacterCount(s1, s2):\n    count = 0\n    word2 = list(s2)\n    for letter in s1:\n        if letter in word2:",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "commonCharacterCount",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def commonCharacterCount(s1, s2):\n    count = 0\n    word2 = list(s2)\n    for letter in s1:\n        if letter in word2:\n            word2.remove(letter)\n            count += 1\n    return count\n#------------------------------------------------------------------------------------------------#\ndef isLucky(n):",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "isLucky",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def isLucky(n):\n    string = str(n)\n    top = [int(x) for x in string[: len(string) // 2]]\n    bottom = [int(x) for x in string[len(string) // 2 :]]\n    return sum(top) == sum(bottom)\n#------------------------------------------------------------------------------------------------#\ndef sortByHeight(a):\n    treePositions = [x for x in range(len(a)) if a[x] == -1]\n    people = sorted([x for x in a if x != -1])\n    for tree in treePositions:",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "sortByHeight",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def sortByHeight(a):\n    treePositions = [x for x in range(len(a)) if a[x] == -1]\n    people = sorted([x for x in a if x != -1])\n    for tree in treePositions:\n        people.insert(tree, -1)\n    return people\nimport re\n#------------------------------------------------------------------------------------------------#\ndef reverseParentheses(s):\n    while \"(\" in s:",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "reverseParentheses",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def reverseParentheses(s):\n    while \"(\" in s:\n        match = re.search(\"\\([^()]*\\)\", s)\n        match_string = match.group(0)[1 : len(match.group(0)) - 1]\n        reversed_match_string = match_string[::-1]\n        s = s[: match.start()] + reversed_match_string + s[match.end() :]\n    return s\n#------------------------------------------------------------------------------------------------#\ndef alternatingSums(a):\n    team1 = sum(a[0::2])",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "alternatingSums",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def alternatingSums(a):\n    team1 = sum(a[0::2])\n    team2 = sum(a[1::2])\n    return [team1, team2]\n#------------------------------------------------------------------------------------------------#\ndef addBorder(picture):\n    picture = [\"*\" + string + \"*\" for string in picture]\n    picture = [(\"*\" * len(picture[0]))] + picture + [(\"*\" * len(picture[0]))]\n    return picture\n#------------------------------------------------------------------------------------------------#",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "addBorder",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def addBorder(picture):\n    picture = [\"*\" + string + \"*\" for string in picture]\n    picture = [(\"*\" * len(picture[0]))] + picture + [(\"*\" * len(picture[0]))]\n    return picture\n#------------------------------------------------------------------------------------------------#\ndef areSimilar(a, b):\n    diff = [i for i in range(len(a)) if a[i] != b[i]]\n    if len(diff) == 2:\n        b[diff[0]], b[diff[1]] = b[diff[1]], b[diff[0]]\n    return a == b",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "areSimilar",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def areSimilar(a, b):\n    diff = [i for i in range(len(a)) if a[i] != b[i]]\n    if len(diff) == 2:\n        b[diff[0]], b[diff[1]] = b[diff[1]], b[diff[0]]\n    return a == b\n#------------------------------------------------------------------------------------------------#\ndef arrayChange(inputArray):\n    count = 0\n    for i in range(1, len(inputArray)):\n        if inputArray[i - 1] >= inputArray[i]:",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "arrayChange",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def arrayChange(inputArray):\n    count = 0\n    for i in range(1, len(inputArray)):\n        if inputArray[i - 1] >= inputArray[i]:\n            difference = inputArray[i - 1] - inputArray[i]\n            inputArray[i] += difference + 1\n            count += difference + 1\n    return count\n#------------------------------------------------------------------------------------------------#\ndef palindromeRearranging(inputString):",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "palindromeRearranging",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def palindromeRearranging(inputString):\n    inputList = sorted(inputString)\n    foundMiddle = False\n    while len(inputList) > 1:\n        if inputList[0] == inputList[1]:\n            del inputList[1]\n        elif not foundMiddle:\n            foundMiddle = True\n        else:\n            return False",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "areEquallyStrong",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def areEquallyStrong(yourLeft, yourRight, friendsLeft, friendsRight):\n    sameHands = yourLeft == friendsLeft and yourRight == friendsRight\n    differentHands = yourLeft == friendsRight and yourRight == friendsLeft\n    return sameHands or differentHands\n#------------------------------------------------------------------------------------------------#\ndef arrayMaximalAdjacentDifference(inputArray):\n    diffs = []\n    for i in range(len(inputArray) - 1):\n        diffs.append(abs(inputArray[i] - inputArray[i + 1]))\n    return max(diffs)",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "arrayMaximalAdjacentDifference",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def arrayMaximalAdjacentDifference(inputArray):\n    diffs = []\n    for i in range(len(inputArray) - 1):\n        diffs.append(abs(inputArray[i] - inputArray[i + 1]))\n    return max(diffs)\n#------------------------------------------------------------------------------------------------#\ndef isIPv4Address(inputString):\n    strings = [string for string in inputString.split(\".\")]\n    for string in strings:\n        if not string.isdecimal():",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "isIPv4Address",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def isIPv4Address(inputString):\n    strings = [string for string in inputString.split(\".\")]\n    for string in strings:\n        if not string.isdecimal():\n            return False\n    nums = [int(num) for num in strings]\n    return max(nums) <= 255 and min(nums) >= 0 and len(nums) == 4\n#------------------------------------------------------------------------------------------------#\ndef avoidObstacles(inputArray):\n    for length in range(2, max(inputArray) + 2):",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "avoidObstacles",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def avoidObstacles(inputArray):\n    for length in range(2, max(inputArray) + 2):\n        done = True\n        jump = length\n        while jump < (max(inputArray) + length):\n            if jump in inputArray:\n                done = False\n                break\n            jump += length\n        if done:",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "boxBlur",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def boxBlur(image):\n    outImage = []\n    for row in range(1, len(image) - 1):\n        line = []\n        for pixel in range(1, len(image[row]) - 1):\n            total = (\n                image[row - 1][pixel - 1]\n                + image[row - 1][pixel]\n                + image[row - 1][pixel + 1]\n                + image[row][pixel - 1]",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "minesweeper",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def minesweeper(matrix):\n    TOP = 0\n    BOTTOM = len(matrix) - 1\n    LEFT = 0\n    RIGHT = len(matrix[0]) - 1\n    outMatrix = []\n    for row in range(len(matrix)):\n        outRow = []\n        for cell in range(len(matrix[row])):\n            outRow.append(0)",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "arrayReplace",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def arrayReplace(inputArray, elemToReplace, substitutionElem):\n    return [x if x != elemToReplace else substitutionElem for x in inputArray]\n#------------------------------------------------------------------------------------------------#\ndef evenDigitsOnly(n):\n    return all(\n        (True if digit in (\"0\", \"2\", \"4\", \"6\", \"8\") else False for digit in str(n))\n    )\n#------------------------------------------------------------------------------------------------#\ndef variableName(name):\n    return name.replace(\"_\", \"\").isalnum() and not name[0].isdigit()",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "evenDigitsOnly",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def evenDigitsOnly(n):\n    return all(\n        (True if digit in (\"0\", \"2\", \"4\", \"6\", \"8\") else False for digit in str(n))\n    )\n#------------------------------------------------------------------------------------------------#\ndef variableName(name):\n    return name.replace(\"_\", \"\").isalnum() and not name[0].isdigit()\n#------------------------------------------------------------------------------------------------#\ndef alphabeticShift(inputString):\n    return \"\".join([chr(ord(x) + 1) if x != \"z\" else \"a\" for x in inputString])",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "variableName",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def variableName(name):\n    return name.replace(\"_\", \"\").isalnum() and not name[0].isdigit()\n#------------------------------------------------------------------------------------------------#\ndef alphabeticShift(inputString):\n    return \"\".join([chr(ord(x) + 1) if x != \"z\" else \"a\" for x in inputString])\n#------------------------------------------------------------------------------------------------#\ndef chessBoardCellColor(cell1, cell2):\n    color1 = ((ord(cell1[0]) - ord(\"A\")) + ord(cell1[1]) - ord(\"1\")) % 2 == 0\n    color2 = ((ord(cell2[0]) - ord(\"A\")) + ord(cell2[1]) - ord(\"1\")) % 2 == 0\n    return color1 == color2",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "alphabeticShift",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def alphabeticShift(inputString):\n    return \"\".join([chr(ord(x) + 1) if x != \"z\" else \"a\" for x in inputString])\n#------------------------------------------------------------------------------------------------#\ndef chessBoardCellColor(cell1, cell2):\n    color1 = ((ord(cell1[0]) - ord(\"A\")) + ord(cell1[1]) - ord(\"1\")) % 2 == 0\n    color2 = ((ord(cell2[0]) - ord(\"A\")) + ord(cell2[1]) - ord(\"1\")) % 2 == 0\n    return color1 == color2\n#------------------------------------------------------------------------------------------------#\ndef circleOfNumbers(n, firstNumber):\n    return (firstNumber + (n / 2)) % n",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "chessBoardCellColor",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def chessBoardCellColor(cell1, cell2):\n    color1 = ((ord(cell1[0]) - ord(\"A\")) + ord(cell1[1]) - ord(\"1\")) % 2 == 0\n    color2 = ((ord(cell2[0]) - ord(\"A\")) + ord(cell2[1]) - ord(\"1\")) % 2 == 0\n    return color1 == color2\n#------------------------------------------------------------------------------------------------#\ndef circleOfNumbers(n, firstNumber):\n    return (firstNumber + (n / 2)) % n\n#------------------------------------------------------------------------------------------------#\ndef depositProfit(deposit, rate, threshold):\n    year = 0",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "circleOfNumbers",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def circleOfNumbers(n, firstNumber):\n    return (firstNumber + (n / 2)) % n\n#------------------------------------------------------------------------------------------------#\ndef depositProfit(deposit, rate, threshold):\n    year = 0\n    while deposit < threshold:\n        deposit *= 1 + (rate / 100)\n        year += 1\n    return year\n#------------------------------------------------------------------------------------------------#",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "depositProfit",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def depositProfit(deposit, rate, threshold):\n    year = 0\n    while deposit < threshold:\n        deposit *= 1 + (rate / 100)\n        year += 1\n    return year\n#------------------------------------------------------------------------------------------------#\n#------------------------------------------------------------------------------------------------#\ndef absoluteValuesSumMinimization(a):\n    sums = {}",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "absoluteValuesSumMinimization",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def absoluteValuesSumMinimization(a):\n    sums = {}\n    for num in a:\n        total = sum([abs(a[i] - num) for i in range(len(a))])\n        if total in sums:\n            sums[total] = min(num, sums[total])\n        else:\n            sums[total] = num\n        print(sums)\n    return sums[min(sums)]",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "stringsRearrangement",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def stringsRearrangement(inputArray):\n    permutations = itertools.permutations(inputArray)\n    for array in permutations:\n        if testArrangement(array):\n            return True\n    return False\n#------------------------------------------------------------------------------------------------#\ndef testArrangement(array):\n    for i in range(len(array) - 1):\n        if sum([a != b for a, b in zip(array[i], array[i + 1])]) != 1:",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "testArrangement",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def testArrangement(array):\n    for i in range(len(array) - 1):\n        if sum([a != b for a, b in zip(array[i], array[i + 1])]) != 1:\n            return False\n    return True\n#------------------------------------------------------------------------------------------------#\ndef extractEachKth(inputArray, k):\n    return [inputArray[x] for x in range(len(inputArray)) if (x + 1) % k != 0]\n#------------------------------------------------------------------------------------------------#\ndef firstDigit(inputString):",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "extractEachKth",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def extractEachKth(inputArray, k):\n    return [inputArray[x] for x in range(len(inputArray)) if (x + 1) % k != 0]\n#------------------------------------------------------------------------------------------------#\ndef firstDigit(inputString):\n    for char in inputString:\n        if char.isdigit():\n            return char\n#------------------------------------------------------------------------------------------------#\ndef differentSymbolsNaive(s):\n    return len(set(s))",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "firstDigit",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def firstDigit(inputString):\n    for char in inputString:\n        if char.isdigit():\n            return char\n#------------------------------------------------------------------------------------------------#\ndef differentSymbolsNaive(s):\n    return len(set(s))\n#------------------------------------------------------------------------------------------------#\ndef arrayMaxConsecutiveSum(inputArray, k):\n    sums = [sum(inputArray[:k])]",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "differentSymbolsNaive",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def differentSymbolsNaive(s):\n    return len(set(s))\n#------------------------------------------------------------------------------------------------#\ndef arrayMaxConsecutiveSum(inputArray, k):\n    sums = [sum(inputArray[:k])]\n    for i in range(1, len(inputArray) - k + 1):\n        sums.append(sums[i - 1] - inputArray[i - 1] + inputArray[i + k - 1])\n    return max(sums)\n#------------------------------------------------------------------------------------------------#\ndef growingPlant(upSpeed, downSpeed, desiredHeight):",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "arrayMaxConsecutiveSum",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def arrayMaxConsecutiveSum(inputArray, k):\n    sums = [sum(inputArray[:k])]\n    for i in range(1, len(inputArray) - k + 1):\n        sums.append(sums[i - 1] - inputArray[i - 1] + inputArray[i + k - 1])\n    return max(sums)\n#------------------------------------------------------------------------------------------------#\ndef growingPlant(upSpeed, downSpeed, desiredHeight):\n    height = 0\n    days = 1\n    height += upSpeed",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "growingPlant",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def growingPlant(upSpeed, downSpeed, desiredHeight):\n    height = 0\n    days = 1\n    height += upSpeed\n    while height < desiredHeight:\n        days += 1\n        height -= downSpeed\n        height += upSpeed\n    return days\n#------------------------------------------------------------------------------------------------#",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "knapsackLight",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def knapsackLight(value1, weight1, value2, weight2, maxW):\n    if weight1 + weight2 <= maxW:\n        return value1 + value2\n    if weight1 <= maxW and (weight2 > maxW or value1 >= value2):\n        return value1\n    if weight2 <= maxW and (weight1 > maxW or value2 >= value1):\n        return value2\n    return 0\n#------------------------------------------------------------------------------------------------#\ndef longestDigitsPrefix(inputString):",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "longestDigitsPrefix",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def longestDigitsPrefix(inputString):\n    for char in range(len(inputString)):\n        if not inputString[char].isdigit():\n            return inputString[:char]\n    return inputString\n#------------------------------------------------------------------------------------------------#\ndef digitDegree(n):\n    degree = 0\n    while len(str(n)) > 1:\n        n = sum((int(digit) for digit in str(n)))",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "digitDegree",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def digitDegree(n):\n    degree = 0\n    while len(str(n)) > 1:\n        n = sum((int(digit) for digit in str(n)))\n        degree += 1\n    return degree\n#------------------------------------------------------------------------------------------------#\ndef bishopAndPawn(bishop, pawn):\n    return abs(ord(bishop[0]) - ord(pawn[0])) == abs(ord(bishop[1]) - ord(pawn[1]))\n#------------------------------------------------------------------------------------------------#",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "bishopAndPawn",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def bishopAndPawn(bishop, pawn):\n    return abs(ord(bishop[0]) - ord(pawn[0])) == abs(ord(bishop[1]) - ord(pawn[1]))\n#------------------------------------------------------------------------------------------------#\ndef isBeautifulString(inputString):\n    for letter in range(ord(\"a\"), ord(\"z\")):\n        if inputString.count(chr(letter)) < inputString.count(chr(letter + 1)):\n            return False\n    return True\n#------------------------------------------------------------------------------------------------#\ndef findEmailDomain(address):",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "isBeautifulString",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def isBeautifulString(inputString):\n    for letter in range(ord(\"a\"), ord(\"z\")):\n        if inputString.count(chr(letter)) < inputString.count(chr(letter + 1)):\n            return False\n    return True\n#------------------------------------------------------------------------------------------------#\ndef findEmailDomain(address):\n    return address[address.rfind(\"@\") + 1 :]\n#------------------------------------------------------------------------------------------------#\ndef buildPalindrome(st):",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "findEmailDomain",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def findEmailDomain(address):\n    return address[address.rfind(\"@\") + 1 :]\n#------------------------------------------------------------------------------------------------#\ndef buildPalindrome(st):\n    if st == st[::-1]:  # Check for initial palindrome\n        return st\n    index = 0\n    subStr = st[index:]\n    while subStr != subStr[::-1]:  # while substring is not a palindrome\n        index += 1",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "buildPalindrome",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def buildPalindrome(st):\n    if st == st[::-1]:  # Check for initial palindrome\n        return st\n    index = 0\n    subStr = st[index:]\n    while subStr != subStr[::-1]:  # while substring is not a palindrome\n        index += 1\n        subStr = st[index:]\n    return st + st[index - 1 :: -1]\n#------------------------------------------------------------------------------------------------#",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "electionsWinners",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def electionsWinners(votes, k):\n    winners = 0\n    current_winner = max(votes)\n    for candidate in votes:\n        if k > 0 and candidate + k > current_winner:\n            winners += 1\n        if k == 0 and candidate == current_winner and votes.count(candidate) == 1:\n            winners += 1\n    return winners\n#------------------------------------------------------------------------------------------------#",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "isMAC48Address",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def isMAC48Address(inputString):\n    hex_chars = (\n        \"1\",\n        \"2\",\n        \"3\",\n        \"4\",\n        \"5\",\n        \"6\",\n        \"7\",\n        \"8\",",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "isDigit",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def isDigit(symbol):\n    return symbol.isdigit()\n#------------------------------------------------------------------------------------------------#\ndef lineEncoding(s):\n    count = 1\n    output = []\n    for char in range(1, len(s)):\n        if s[char] == s[char - 1]:\n            count += 1\n        else:",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "lineEncoding",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def lineEncoding(s):\n    count = 1\n    output = []\n    for char in range(1, len(s)):\n        if s[char] == s[char - 1]:\n            count += 1\n        else:\n            if count > 1:\n                output.append(str(count) + s[char - 1])\n            else:",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "chessKnight",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def chessKnight(cell):\n    moves = 0\n    # Starting at the top left, going counter-clockwise\n    if ord(cell[0]) >= ord(\"b\") and ord(cell[1]) <= ord(\"6\"):\n        moves += 1\n    if ord(cell[0]) >= ord(\"c\") and ord(cell[1]) <= ord(\"7\"):\n        moves += 1\n    if ord(cell[0]) >= ord(\"c\") and ord(cell[1]) >= ord(\"2\"):\n        moves += 1\n    if ord(cell[0]) >= ord(\"b\") and ord(cell[1]) >= ord(\"3\"):",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "deleteDigit",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def deleteDigit(n):\n    num = str(n)\n    highest = 0\n    for digit in range(len(num)):\n        output = num[:digit] + num[digit + 1 :]\n        if int(output) > int(highest):\n            highest = output\n    return int(highest)\n#------------------------------------------------------------------------------------------------#\ndef longestWord(text):",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "longestWord",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def longestWord(text):\n    longest = []\n    word = []\n    for char in text:\n        if ord(\"A\") <= ord(char) <= ord(\"Z\") or ord(\"a\") <= ord(char) <= ord(\"z\"):\n            word.append(char)\n        else:\n            if len(word) > len(longest):\n                longest = word\n            word = []",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "validTime",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def validTime(time):\n    groups = time.split(\":\")\n    if len(groups) != 2:\n        return False\n    if not (groups[0].isdigit() and groups[1].isdigit()):\n        return False\n    if int(groups[0]) > 23 or int(groups[1]) > 59:\n        return False\n    return True\n#------------------------------------------------------------------------------------------------#",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "sumUpNumbers",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def sumUpNumbers(inputString):\n    total = 0\n    current_num = []\n    for char in inputString:\n        if char.isdigit():\n            current_num.append(char)\n        else:\n            if len(current_num) > 0:\n                num = int(\"\".join(current_num))\n                total += num",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "differentSquares",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def differentSquares(matrix):\n    squares = set()\n    for row in range(len(matrix) - 1):\n        for cell in range(len(matrix[row]) - 1):\n            square = (\n                (matrix[row][cell], matrix[row][cell + 1]),\n                (matrix[row + 1][cell], matrix[row + 1][cell + 1]),\n            )\n            squares.add(square)\n    return len(squares)",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "digitsProduct",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def digitsProduct(product):\n    # New idea: add product to factors\n    # while max(factors) > 10: split that num into factors\n    if product == 0:\n        return 10\n    factors = [product]\n    while max(factors) > 9:\n        factored = findFactors(max(factors))\n        if factored:\n            factors.remove(max(factors))",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "findFactors",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def findFactors(n):\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return i, n // i\n    return False\n#------------------------------------------------------------------------------------------------#\ndef fileNaming(names):\n    outnames = []\n    for name in names:\n        if name in outnames:",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "fileNaming",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def fileNaming(names):\n    outnames = []\n    for name in names:\n        if name in outnames:\n            k = 1\n            while \"{}({})\".format(name, k) in outnames:\n                k += 1\n            name = \"{}({})\".format(name, k)\n        outnames.append(name)\n    return outnames",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "messageFromBinaryCode",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def messageFromBinaryCode(code):\n    output = []\n    for i in range(0, len(code), 8):\n        letter = chr(int(code[i : i + 8], 2))\n        output.append(letter)\n    return \"\".join(output)\n#------------------------------------------------------------------------------------------------#\ndef spiralNumbers(n):\n    LEFT = \"left\"\n    RIGHT = \"right\"",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "spiralNumbers",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def spiralNumbers(n):\n    LEFT = \"left\"\n    RIGHT = \"right\"\n    UP = \"up\"\n    DOWN = \"down\"\n    direction = RIGHT\n    spiral = [[0 for i in range(n)] for j in range(n)]\n    row = 0\n    cell = 0\n    for num in range(1, (n * n) + 1):",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "sudoku",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def sudoku(grid):\n    match = [i for i in range(1, 10)]\n    for row in grid:\n        if sorted(row) != match:\n            return False\n    for column_index in range(9):\n        column = [grid[row_index][column_index] for row_index in range(9)]\n        if sorted(column) != match:\n            return False\n    for row in range(0, 9, 3):",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "addTwoDigits",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def addTwoDigits(n):\n    return (n // 10) + (n % 10)\n#------------------------------------------------------------------------------------------------#\ndef largestNumber(n):\n    return int(\"9\" * n)\n#------------------------------------------------------------------------------------------------#\ndef candies(n, m):\n    return (m // n) * n\n#------------------------------------------------------------------------------------------------#",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "largestNumber",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def largestNumber(n):\n    return int(\"9\" * n)\n#------------------------------------------------------------------------------------------------#\ndef candies(n, m):\n    return (m // n) * n\n#------------------------------------------------------------------------------------------------#\ndef seatsInTheater(nCols, nRows, col, row):\n    return (nCols - col + 1) * (nRows - row)\n#------------------------------------------------------------------------------------------------#",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "candies",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def candies(n, m):\n    return (m // n) * n\n#------------------------------------------------------------------------------------------------#\ndef seatsInTheater(nCols, nRows, col, row):\n    return (nCols - col + 1) * (nRows - row)\n#------------------------------------------------------------------------------------------------#\ndef maxMultiple(divisor, bound):\n    for num in range(bound, 1, -1):\n        if num % divisor == 0:\n            return num",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "seatsInTheater",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def seatsInTheater(nCols, nRows, col, row):\n    return (nCols - col + 1) * (nRows - row)\n#------------------------------------------------------------------------------------------------#\ndef maxMultiple(divisor, bound):\n    for num in range(bound, 1, -1):\n        if num % divisor == 0:\n            return num\n    return 0\n#------------------------------------------------------------------------------------------------#\ndef circleOfNumbers(n, firstNumber):",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "maxMultiple",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def maxMultiple(divisor, bound):\n    for num in range(bound, 1, -1):\n        if num % divisor == 0:\n            return num\n    return 0\n#------------------------------------------------------------------------------------------------#\ndef circleOfNumbers(n, firstNumber):\n    return (firstNumber + (n // 2)) % n\n#------------------------------------------------------------------------------------------------#\ndef lateRide(n):",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "circleOfNumbers",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def circleOfNumbers(n, firstNumber):\n    return (firstNumber + (n // 2)) % n\n#------------------------------------------------------------------------------------------------#\ndef lateRide(n):\n    hours = n // 60\n    minutes = n % 60\n    return (hours // 10) + (hours % 10) + (minutes // 10) + (minutes % 10)\n#------------------------------------------------------------------------------------------------#\ndef phoneCall(min1, min2_10, min11, s):\n    if s < min1:",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "lateRide",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def lateRide(n):\n    hours = n // 60\n    minutes = n % 60\n    return (hours // 10) + (hours % 10) + (minutes // 10) + (minutes % 10)\n#------------------------------------------------------------------------------------------------#\ndef phoneCall(min1, min2_10, min11, s):\n    if s < min1:\n        return 0\n    if s == min1:\n        return 1",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "phoneCall",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def phoneCall(min1, min2_10, min11, s):\n    if s < min1:\n        return 0\n    if s == min1:\n        return 1\n    if s <= min1 + (min2_10 * 9):\n        s -= min1\n        return (s // min2_10) + 1\n    s -= min1\n    s -= min2_10 * 9",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "reachNextLevel",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def reachNextLevel(experience, threshold, reward):\n    return experience + reward >= threshold\n#------------------------------------------------------------------------------------------------#\ndef knapsackLight(value1, weight1, value2, weight2, maxW):\n    if weight1 + weight2 <= maxW:\n        return value1 + value2\n    if weight1 <= maxW and weight2 <= maxW:\n        return max(value1, value2)\n    if weight1 <= maxW:\n        return value1",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "knapsackLight",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def knapsackLight(value1, weight1, value2, weight2, maxW):\n    if weight1 + weight2 <= maxW:\n        return value1 + value2\n    if weight1 <= maxW and weight2 <= maxW:\n        return max(value1, value2)\n    if weight1 <= maxW:\n        return value1\n    if weight2 <= maxW:\n        return value2\n    return 0",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "extraNumber",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def extraNumber(a, b, c):\n    if a == b:\n        return c\n    if a == c:\n        return b\n    return a\n#------------------------------------------------------------------------------------------------#\ndef isInfiniteProcess(a, b):\n    return a > b or (a % 2 != b % 2)\n#------------------------------------------------------------------------------------------------#",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "isInfiniteProcess",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def isInfiniteProcess(a, b):\n    return a > b or (a % 2 != b % 2)\n#------------------------------------------------------------------------------------------------#\ndef arithmeticExpression(a, b, c):\n    return a + b == c or a - b == c or a * b == c or a / b == c\n#------------------------------------------------------------------------------------------------#\ndef tennisSet(score1, score2):\n    if max(score1, score2) == 6 and min(score1, score2) < 5:\n        return True\n    if 5 <= min(score1, score2) <= 6 and max(score1, score2) == 7:",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "arithmeticExpression",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def arithmeticExpression(a, b, c):\n    return a + b == c or a - b == c or a * b == c or a / b == c\n#------------------------------------------------------------------------------------------------#\ndef tennisSet(score1, score2):\n    if max(score1, score2) == 6 and min(score1, score2) < 5:\n        return True\n    if 5 <= min(score1, score2) <= 6 and max(score1, score2) == 7:\n        return True\n    return False\n#------------------------------------------------------------------------------------------------#",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "tennisSet",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def tennisSet(score1, score2):\n    if max(score1, score2) == 6 and min(score1, score2) < 5:\n        return True\n    if 5 <= min(score1, score2) <= 6 and max(score1, score2) == 7:\n        return True\n    return False\n#------------------------------------------------------------------------------------------------#\ndef willYou(young, beautiful, loved):\n    return (young and beautiful) != loved\n#------------------------------------------------------------------------------------------------#",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "willYou",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def willYou(young, beautiful, loved):\n    return (young and beautiful) != loved\n#------------------------------------------------------------------------------------------------#\ndef metroCard(lastNumberOfDays):\n    if lastNumberOfDays == 30 or lastNumberOfDays == 28:\n        return [31]\n    return [28, 30, 31]\n#------------------------------------------------------------------------------------------------#\ndef killKthBit(n, k):\n    return n & ~(2 ** (k - 1))",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "metroCard",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def metroCard(lastNumberOfDays):\n    if lastNumberOfDays == 30 or lastNumberOfDays == 28:\n        return [31]\n    return [28, 30, 31]\n#------------------------------------------------------------------------------------------------#\ndef killKthBit(n, k):\n    return n & ~(2 ** (k - 1))\n#------------------------------------------------------------------------------------------------#\ndef arrayPacking(a):\n    binary_array = [bin(num)[2:].rjust(8, \"0\") for num in a]",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "killKthBit",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def killKthBit(n, k):\n    return n & ~(2 ** (k - 1))\n#------------------------------------------------------------------------------------------------#\ndef arrayPacking(a):\n    binary_array = [bin(num)[2:].rjust(8, \"0\") for num in a]\n    out_string = \"\".join(binary_array[::-1])\n    return int(out_string, 2)\n#------------------------------------------------------------------------------------------------#\ndef rangeBitCount(a, b):\n    array = list(range(a, b + 1))",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "arrayPacking",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def arrayPacking(a):\n    binary_array = [bin(num)[2:].rjust(8, \"0\") for num in a]\n    out_string = \"\".join(binary_array[::-1])\n    return int(out_string, 2)\n#------------------------------------------------------------------------------------------------#\ndef rangeBitCount(a, b):\n    array = list(range(a, b + 1))\n    binary_array = [bin(num) for num in array]\n    count_array = [binary.count(\"1\") for binary in binary_array]\n    return sum(count_array)",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "rangeBitCount",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def rangeBitCount(a, b):\n    array = list(range(a, b + 1))\n    binary_array = [bin(num) for num in array]\n    count_array = [binary.count(\"1\") for binary in binary_array]\n    return sum(count_array)\n#------------------------------------------------------------------------------------------------#\ndef mirrorBits(a):\n    binary = bin(a)[2:]\n    return int(binary[::-1], 2)\n#------------------------------------------------------------------------------------------------#",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "mirrorBits",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def mirrorBits(a):\n    binary = bin(a)[2:]\n    return int(binary[::-1], 2)\n#------------------------------------------------------------------------------------------------#\ndef secondRightmostZeroBit(n):\n    return 2 ** bin(n)[::-1].find(\"0\", bin(n)[::-1].find(\"0\") + 1)\n#------------------------------------------------------------------------------------------------#\ndef swapAdjacentBits(n):\n    return ((n >> 1) & 1431655765) | ((n << 1) & 2863311530)\n#------------------------------------------------------------------------------------------------#",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "secondRightmostZeroBit",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def secondRightmostZeroBit(n):\n    return 2 ** bin(n)[::-1].find(\"0\", bin(n)[::-1].find(\"0\") + 1)\n#------------------------------------------------------------------------------------------------#\ndef swapAdjacentBits(n):\n    return ((n >> 1) & 1431655765) | ((n << 1) & 2863311530)\n#------------------------------------------------------------------------------------------------#\ndef differentRightmostBit(n, m):\n    return 2 ** bin((n ^ m))[::-1].find(\"1\")\n#------------------------------------------------------------------------------------------------#",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "swapAdjacentBits",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def swapAdjacentBits(n):\n    return ((n >> 1) & 1431655765) | ((n << 1) & 2863311530)\n#------------------------------------------------------------------------------------------------#\ndef differentRightmostBit(n, m):\n    return 2 ** bin((n ^ m))[::-1].find(\"1\")\n#------------------------------------------------------------------------------------------------#\ndef equalPairOfBits(n, m):\n    return 2 ** bin(~(n ^ m))[::-1].find(\"1\")\n#------------------------------------------------------------------------------------------------#",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "differentRightmostBit",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def differentRightmostBit(n, m):\n    return 2 ** bin((n ^ m))[::-1].find(\"1\")\n#------------------------------------------------------------------------------------------------#\ndef equalPairOfBits(n, m):\n    return 2 ** bin(~(n ^ m))[::-1].find(\"1\")\n#------------------------------------------------------------------------------------------------#\ndef leastFactorial(n):\n    factorial = 1\n    index = 1\n    while factorial < n:",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "equalPairOfBits",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def equalPairOfBits(n, m):\n    return 2 ** bin(~(n ^ m))[::-1].find(\"1\")\n#------------------------------------------------------------------------------------------------#\ndef leastFactorial(n):\n    factorial = 1\n    index = 1\n    while factorial < n:\n        index += 1\n        factorial *= index\n    return factorial",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "leastFactorial",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def leastFactorial(n):\n    factorial = 1\n    index = 1\n    while factorial < n:\n        index += 1\n        factorial *= index\n    return factorial\n#------------------------------------------------------------------------------------------------#\ndef countSumOfTwoRepresentations2(n, l, r):\n    count = 0",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "countSumOfTwoRepresentations2",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def countSumOfTwoRepresentations2(n, l, r):\n    count = 0\n    a = max(n - r, l)\n    b = n - a\n    while a <= r and a <= b:\n        count += 1\n        a += 1\n        b -= 1\n    return count\n#------------------------------------------------------------------------------------------------#",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "magicalWell",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def magicalWell(a, b, n):\n    total = 0\n    for i in range(n):\n        total += a * b\n        a += 1\n        b += 1\n    return total\n#------------------------------------------------------------------------------------------------#\ndef lineUp(commands):\n    count = 0",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "lineUp",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def lineUp(commands):\n    count = 0\n    smart_student = 0\n    dumb_student = 0\n    for command in commands:\n        if command == \"L\":\n            smart_student = (smart_student - 1) % 4\n            dumb_student = (dumb_student + 1) % 4\n        elif command == \"R\":\n            smart_student = (smart_student + 1) % 4",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "additionWithoutCarrying",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def additionWithoutCarrying(param1, param2):\n    # Convert numbers to strings\n    str1 = str(param1)\n    str2 = str(param2)\n    # Pad both to the same length with zeroes (to the left of the numbers)\n    length = max(len(str2), len(str1))\n    str1 = str1.rjust(length, \"0\")\n    str2 = str2.rjust(length, \"0\")\n    output = []\n    for num1, num2 in zip(str1, str2):",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "appleBoxes",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def appleBoxes(k):\n    red = 0\n    yellow = 0\n    for i in range(1, k + 1, 2):\n        yellow += i * i\n    for i in range(2, k + 1, 2):\n        red += i * i\n    return red - yellow\n#------------------------------------------------------------------------------------------------#\ndef increaseNumberRoundness(n):",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "increaseNumberRoundness",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def increaseNumberRoundness(n):\n    string = str(n)\n    # Check for immediate rejection\n    if \"0\" not in string or len(string) < 2:\n        return False\n    # Since we know there's a 0, if it's not on\n    # the left, then we know to accept\n    if string[-1] != \"0\":\n        return True\n    # If there is only one 0, it must be at the end, so reject.",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "rounders",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def rounders(value):\n    length = len(str(value))\n    magnitude = length - 1\n    for i in range(length - 1):\n        value = int((value / 10) + 0.5)\n    return value * (10 ** magnitude)\n#------------------------------------------------------------------------------------------------#\ndef candles(candlesNumber, makeNew):\n    totalBurned = 0\n    leftovers = 0",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "candles",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def candles(candlesNumber, makeNew):\n    totalBurned = 0\n    leftovers = 0\n    while candlesNumber > 0:\n        totalBurned += candlesNumber\n        leftovers += candlesNumber\n        candlesNumber = 0\n        candlesNumber = leftovers // makeNew\n        leftovers = leftovers % makeNew\n    return totalBurned",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "countBlackCells",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def countBlackCells(n, m):\n    gcd = find_gcd(n, m)\n    line_cells = n + m - gcd\n    line_corner_cells = (gcd - 1) * 2\n    return line_cells + line_corner_cells\n#------------------------------------------------------------------------------------------------#\ndef find_gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "find_gcd",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def find_gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n#------------------------------------------------------------------------------------------------#\ndef createArray(size):\n    return [1] * size\n#------------------------------------------------------------------------------------------------#\ndef arrayReplace(inputArray, elemToReplace, substitutionElem):\n    output = [",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "createArray",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def createArray(size):\n    return [1] * size\n#------------------------------------------------------------------------------------------------#\ndef arrayReplace(inputArray, elemToReplace, substitutionElem):\n    output = [\n        elem if elem != elemToReplace else substitutionElem for elem in inputArray\n    ]\n    return output\n#------------------------------------------------------------------------------------------------#\ndef firstReverseTry(arr):",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "arrayReplace",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def arrayReplace(inputArray, elemToReplace, substitutionElem):\n    output = [\n        elem if elem != elemToReplace else substitutionElem for elem in inputArray\n    ]\n    return output\n#------------------------------------------------------------------------------------------------#\ndef firstReverseTry(arr):\n    if len(arr) < 2:\n        return arr\n    if len(arr) < 4:",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "firstReverseTry",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def firstReverseTry(arr):\n    if len(arr) < 2:\n        return arr\n    if len(arr) < 4:\n        return arr[::-1]\n    return arr[-1:] + arr[1:-1] + arr[:1]\n#------------------------------------------------------------------------------------------------#\ndef concatenateArrays(a, b):\n    return a + b\n#------------------------------------------------------------------------------------------------#",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "concatenateArrays",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def concatenateArrays(a, b):\n    return a + b\n#------------------------------------------------------------------------------------------------#\ndef removeArrayPart(inputArray, l, r):\n    return inputArray[:l] + inputArray[r + 1 :]\n#------------------------------------------------------------------------------------------------#\ndef isSmooth(arr):\n    if arr[0] != arr[-1]:\n        return False\n    if len(arr) % 2 == 0:",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "removeArrayPart",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def removeArrayPart(inputArray, l, r):\n    return inputArray[:l] + inputArray[r + 1 :]\n#------------------------------------------------------------------------------------------------#\ndef isSmooth(arr):\n    if arr[0] != arr[-1]:\n        return False\n    if len(arr) % 2 == 0:\n        middle = arr[len(arr) // 2] + arr[(len(arr) // 2) - 1]\n    else:\n        middle = arr[len(arr) // 2]",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "isSmooth",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def isSmooth(arr):\n    if arr[0] != arr[-1]:\n        return False\n    if len(arr) % 2 == 0:\n        middle = arr[len(arr) // 2] + arr[(len(arr) // 2) - 1]\n    else:\n        middle = arr[len(arr) // 2]\n    return arr[0] == middle\n#------------------------------------------------------------------------------------------------#\ndef replaceMiddle(arr):",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "replaceMiddle",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def replaceMiddle(arr):\n    if len(arr) % 2 != 0:\n        return arr\n    right_middle = len(arr) // 2\n    middle_value = arr[right_middle] + arr[right_middle - 1]\n    return arr[: right_middle - 1] + [middle_value] + arr[right_middle + 1 :]\n#------------------------------------------------------------------------------------------------#\ndef makeArrayConsecutive2(statues):\n    count = 0\n    for i in range(min(statues), max(statues)):",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "makeArrayConsecutive2",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def makeArrayConsecutive2(statues):\n    count = 0\n    for i in range(min(statues), max(statues)):\n        if i not in statues:\n            count += 1\n    return count\n#------------------------------------------------------------------------------------------------#\ndef isPower(n):\n    if n == 1:\n        return True",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "isPower",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def isPower(n):\n    if n == 1:\n        return True\n    a = 2\n    b = 2\n    while a ** 2 <= n:\n        while a ** b <= n:\n            if a ** b == n:\n                return True\n            b += 1",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "isSumOfConsecutive2",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def isSumOfConsecutive2(n):\n    count = 0\n    right = 2\n    arr = [1, 2]\n    while right <= (n // 2) + 1:\n        total = sum(arr)\n        if total == n:\n            count += 1\n            del arr[0]\n        elif total < n:",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "squareDigitsSequence",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def squareDigitsSequence(a0):\n    sequence = [a0]\n    while sequence[-1] not in sequence[:-1]:\n        next_value = 0\n        for digit in str(sequence[-1]):\n            next_value += int(digit) ** 2\n        sequence.append(next_value)\n    return len(sequence)\n#------------------------------------------------------------------------------------------------#\ndef pagesNumberingWithInk(current, numberOfDigits):",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "pagesNumberingWithInk",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def pagesNumberingWithInk(current, numberOfDigits):\n    numberOfDigits -= len(str(current))\n    next_digits = len(str(current + 1))\n    while numberOfDigits >= next_digits:\n        current += 1\n        numberOfDigits -= next_digits\n        next_digits = len(str(current))\n    return current\n#------------------------------------------------------------------------------------------------#\ndef comfortableNumbers(l, r):",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "comfortableNumbers",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def comfortableNumbers(l, r):\n    count = 0\n    for a in range(l, r):\n        for b in range(a + 1, r + 1):\n            a_sum = sum(int(digit) for digit in str(a))\n            b_sum = sum(int(digit) for digit in str(b))\n            if b <= a + a_sum and a >= b - b_sum:\n                count += 1\n    return count\n#------------------------------------------------------------------------------------------------#",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "weakNumbers",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def weakNumbers(n):\n    all_factors = [count_factors(num) for num in range(1, n + 1)]\n    weaknesses = []\n    for num, num_factors in enumerate(all_factors, 1):\n        weakness = 0\n        for factor in all_factors[:num]:\n            if factor > num_factors:\n                weakness += 1\n        weaknesses.append(weakness)\n        weakest = max(weaknesses)",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "count_factors",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def count_factors(n):\n    factors = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            factors += 1\n    return factors\nprint(weakNumbers(500))\nimport math\n#------------------------------------------------------------------------------------------------#\ndef rectangleRotation(a, b):",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "rectangleRotation",
    "kind": 2,
    "importPath": "by-extension.python.GCA-Prep",
    "description": "by-extension.python.GCA-Prep",
    "peekOfCode": "def rectangleRotation(a, b):\n    n = a / (2 ** 0.5)\n    m = b / (2 ** 0.5)\n    points = (math.floor(n) * math.floor(m)) + (math.ceil(n) * math.ceil(m))\n    if math.floor(n) % 2 != math.floor(m) % 2:\n        points -= 1\n    return points\n# rectangleRotation(6, 4)\nprint(rectangleRotation(8, 6))",
    "detail": "by-extension.python.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "process_dir",
    "kind": 2,
    "importPath": "by-extension.python.gendirhtml",
    "description": "by-extension.python.gendirhtml",
    "peekOfCode": "def process_dir(top_dir, opts):\n    glob_patt = opts.filter or \"*\"\n    path_top_dir: Path\n    path_top_dir = Path(top_dir)\n    index_file = None\n    index_path = Path(path_top_dir, opts.output_file)\n    if opts.verbose:\n        print(f\"Traversing dir {path_top_dir.absolute()}\")\n    try:\n        index_file = open(index_path, \"w\")",
    "detail": "by-extension.python.gendirhtml",
    "documentation": {}
  },
  {
    "label": "pretty_size",
    "kind": 2,
    "importPath": "by-extension.python.gendirhtml",
    "description": "by-extension.python.gendirhtml",
    "peekOfCode": "def pretty_size(bytes, units=UNITS_MAPPING):\n    \"\"\"Human-readable file sizes.\n    ripped from https://pypi.python.org/pypi/hurry.filesize/\n    \"\"\"\n    for factor, suffix in units:\n        if bytes >= factor:\n            break\n    amount = int(bytes / factor)\n    if isinstance(suffix, tuple):\n        singular, multiple = suffix",
    "detail": "by-extension.python.gendirhtml",
    "documentation": {}
  },
  {
    "label": "DEFAULT_OUTPUT_FILE",
    "kind": 5,
    "importPath": "by-extension.python.gendirhtml",
    "description": "by-extension.python.gendirhtml",
    "peekOfCode": "DEFAULT_OUTPUT_FILE = \"index.html\"\ndef process_dir(top_dir, opts):\n    glob_patt = opts.filter or \"*\"\n    path_top_dir: Path\n    path_top_dir = Path(top_dir)\n    index_file = None\n    index_path = Path(path_top_dir, opts.output_file)\n    if opts.verbose:\n        print(f\"Traversing dir {path_top_dir.absolute()}\")\n    try:",
    "detail": "by-extension.python.gendirhtml",
    "documentation": {}
  },
  {
    "label": "UNITS_MAPPING",
    "kind": 5,
    "importPath": "by-extension.python.gendirhtml",
    "description": "by-extension.python.gendirhtml",
    "peekOfCode": "UNITS_MAPPING = [\n    (1024 ** 5, \" PB\"),\n    (1024 ** 4, \" TB\"),\n    (1024 ** 3, \" GB\"),\n    (1024 ** 2, \" MB\"),\n    (1024 ** 1, \" KB\"),\n    (1024 ** 0, (\" byte\", \" bytes\")),\n]\ndef pretty_size(bytes, units=UNITS_MAPPING):\n    \"\"\"Human-readable file sizes.",
    "detail": "by-extension.python.gendirhtml",
    "documentation": {}
  },
  {
    "label": "process_dir",
    "kind": 2,
    "importPath": "by-extension.python.generate-html-sitemap",
    "description": "by-extension.python.generate-html-sitemap",
    "peekOfCode": "def process_dir(top_dir, opts):\n    glob_patt = opts.filter or '*'\n    path_top_dir: Path\n    path_top_dir = Path(top_dir)\n    index_file = None\n    index_path = Path(path_top_dir, opts.output_file)\n    if opts.verbose:\n        print(f'Traversing dir {path_top_dir.absolute()}')\n    try:\n        index_file = open(index_path, 'w')",
    "detail": "by-extension.python.generate-html-sitemap",
    "documentation": {}
  },
  {
    "label": "pretty_size",
    "kind": 2,
    "importPath": "by-extension.python.generate-html-sitemap",
    "description": "by-extension.python.generate-html-sitemap",
    "peekOfCode": "def pretty_size(bytes, units=UNITS_MAPPING):\n    \"\"\"Human-readable file sizes.\n    ripped from https://pypi.python.org/pypi/hurry.filesize/\n    \"\"\"\n    for factor, suffix in units:\n        if bytes >= factor:\n            break\n    amount = int(bytes / factor)\n    if isinstance(suffix, tuple):\n        singular, multiple = suffix",
    "detail": "by-extension.python.generate-html-sitemap",
    "documentation": {}
  },
  {
    "label": "DEFAULT_OUTPUT_FILE",
    "kind": 5,
    "importPath": "by-extension.python.generate-html-sitemap",
    "description": "by-extension.python.generate-html-sitemap",
    "peekOfCode": "DEFAULT_OUTPUT_FILE = 'index.html'\ndef process_dir(top_dir, opts):\n    glob_patt = opts.filter or '*'\n    path_top_dir: Path\n    path_top_dir = Path(top_dir)\n    index_file = None\n    index_path = Path(path_top_dir, opts.output_file)\n    if opts.verbose:\n        print(f'Traversing dir {path_top_dir.absolute()}')\n    try:",
    "detail": "by-extension.python.generate-html-sitemap",
    "documentation": {}
  },
  {
    "label": "UNITS_MAPPING",
    "kind": 5,
    "importPath": "by-extension.python.generate-html-sitemap",
    "description": "by-extension.python.generate-html-sitemap",
    "peekOfCode": "UNITS_MAPPING = [\n    (1024 ** 5, ' PB'),\n    (1024 ** 4, ' TB'),\n    (1024 ** 3, ' GB'),\n    (1024 ** 2, ' MB'),\n    (1024 ** 1, ' KB'),\n    (1024 ** 0, (' byte', ' bytes')),\n]\ndef pretty_size(bytes, units=UNITS_MAPPING):\n    \"\"\"Human-readable file sizes.",
    "detail": "by-extension.python.generate-html-sitemap",
    "documentation": {}
  },
  {
    "label": "readfiles",
    "kind": 2,
    "importPath": "by-extension.python.generate-word-cloud",
    "description": "by-extension.python.generate-word-cloud",
    "peekOfCode": "def readfiles(filenames):\n    \"\"\" Return the content of each file, concatenated as one big string.\n    - Path could be relative or absolute, but nothing fancy is done here.\n    \"\"\"\n    text = \"\"\n    # Read the whole text for each file\n    for filename in filenames:\n        try:\n            text += open(filename, 'r').read()\n            text += r\"\\n\"",
    "detail": "by-extension.python.generate-word-cloud",
    "documentation": {}
  },
  {
    "label": "generate",
    "kind": 2,
    "importPath": "by-extension.python.generate-word-cloud",
    "description": "by-extension.python.generate-word-cloud",
    "peekOfCode": "def generate(text, max_words=600, width=1600, height=900):\n    \"\"\" Generate a word cloud image from the given text (one huge string). \"\"\"\n    # Take relative word frequencies into account, lower max_font_size\n    # https://amueller.github.io/word_cloud/generated/wordcloud.WordCloud.html#wordcloud.WordCloud\n    max_words = int(max_words) if max_words is not None else  600\n    width     = int(width)     if width     is not None else  1600\n    height    = int(height)    if height    is not None else  900\n    wc = WordCloud(\n        max_font_size=50,\n        relative_scaling=.5,",
    "detail": "by-extension.python.generate-word-cloud",
    "documentation": {}
  },
  {
    "label": "makeimage",
    "kind": 2,
    "importPath": "by-extension.python.generate-word-cloud",
    "description": "by-extension.python.generate-word-cloud",
    "peekOfCode": "def makeimage(wordcloud,\n              outname='wordcloud.png', title='Word cloud', show=False, force=False):\n    \"\"\" Display or save the wordcloud as a image. \"\"\"\n    # Display the generated image:\n    try:\n        # 2. the matplotlib way:\n        plt.figure()\n        plt.imshow(wordcloud)\n        plt.axis(\"off\")\n        if title:",
    "detail": "by-extension.python.generate-word-cloud",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "by-extension.python.generate-word-cloud",
    "description": "by-extension.python.generate-word-cloud",
    "peekOfCode": "def main(argv):\n    \"\"\" Use the arguments of the command line. \"\"\"\n    # Use the arg parser\n    args = docopt(full_docopt_text, argv=argv, version=\"generate-word-cloud.py v{}\".format(version))\n    # printc(\"<magenta>Arguments: {} <reset>\".format(args))  # DEBUG\n    # Read the files\n    printc(\"<green>Reading the files<reset>, from: <blue>{}<reset>.\".format(args['INFILE']))\n    text = readfiles(args['INFILE'])\n    # Decide where to save it\n    outname = args['--outfile'] if args['--outfile'] else 'wordcloud.png'",
    "detail": "by-extension.python.generate-word-cloud",
    "documentation": {}
  },
  {
    "label": "version",
    "kind": 5,
    "importPath": "by-extension.python.generate-word-cloud",
    "description": "by-extension.python.generate-word-cloud",
    "peekOfCode": "version = '0.2'\nshow = False\ndef readfiles(filenames):\n    \"\"\" Return the content of each file, concatenated as one big string.\n    - Path could be relative or absolute, but nothing fancy is done here.\n    \"\"\"\n    text = \"\"\n    # Read the whole text for each file\n    for filename in filenames:\n        try:",
    "detail": "by-extension.python.generate-word-cloud",
    "documentation": {}
  },
  {
    "label": "show",
    "kind": 5,
    "importPath": "by-extension.python.generate-word-cloud",
    "description": "by-extension.python.generate-word-cloud",
    "peekOfCode": "show = False\ndef readfiles(filenames):\n    \"\"\" Return the content of each file, concatenated as one big string.\n    - Path could be relative or absolute, but nothing fancy is done here.\n    \"\"\"\n    text = \"\"\n    # Read the whole text for each file\n    for filename in filenames:\n        try:\n            text += open(filename, 'r').read()",
    "detail": "by-extension.python.generate-word-cloud",
    "documentation": {}
  },
  {
    "label": "full_docopt_text",
    "kind": 5,
    "importPath": "by-extension.python.generate-word-cloud",
    "description": "by-extension.python.generate-word-cloud",
    "peekOfCode": "full_docopt_text = \"\"\"\ngenerate-word-cloud.py\nUsage:\n  generate-word-cloud.py [-s | --show] [-f | --force] [-o OUTFILE | --outfile=OUTFILE]\n                         [-t TITLE | --title=TITLE] [-m MAX | --max=MAX]\n                         [-w WIDTH | --width=WIDTH] [-H HEIGHT | --height=HEIGHT]\n                         INFILE...\n  generate-word-cloud.py [-h | --help]\n  generate-word-cloud.py [-v | --version]\nOptions:",
    "detail": "by-extension.python.generate-word-cloud",
    "documentation": {}
  },
  {
    "label": "user",
    "kind": 5,
    "importPath": "by-extension.python.get-gists",
    "description": "by-extension.python.get-gists",
    "peekOfCode": "user = sys.argv[1]\nr = requests.get('https://api.github.com/users/{0}/gists'.format(user))\nfor i in r.json():\n\tcall(['git', 'clone', i['git_pull_url']])\n\tdescription_file = './{0}/description.txt'.format(i['id'])\n\twith open(description_file, 'w') as f:\n\t\tf.write('{0}\\n'.format(i['description']))",
    "detail": "by-extension.python.get-gists",
    "documentation": {}
  },
  {
    "label": "r",
    "kind": 5,
    "importPath": "by-extension.python.get-gists",
    "description": "by-extension.python.get-gists",
    "peekOfCode": "r = requests.get('https://api.github.com/users/{0}/gists'.format(user))\nfor i in r.json():\n\tcall(['git', 'clone', i['git_pull_url']])\n\tdescription_file = './{0}/description.txt'.format(i['id'])\n\twith open(description_file, 'w') as f:\n\t\tf.write('{0}\\n'.format(i['description']))",
    "detail": "by-extension.python.get-gists",
    "documentation": {}
  },
  {
    "label": "\tdescription_file",
    "kind": 5,
    "importPath": "by-extension.python.get-gists",
    "description": "by-extension.python.get-gists",
    "peekOfCode": "\tdescription_file = './{0}/description.txt'.format(i['id'])\n\twith open(description_file, 'w') as f:\n\t\tf.write('{0}\\n'.format(i['description']))",
    "detail": "by-extension.python.get-gists",
    "documentation": {}
  },
  {
    "label": "response",
    "kind": 5,
    "importPath": "by-extension.python.get-json-data-from-google-scholar",
    "description": "by-extension.python.get-json-data-from-google-scholar",
    "peekOfCode": "response = urllib.request.urlopen(\n    'https://scholar.google.fr/citations?user={}'.format(sys.argv[1]))\nhtml = response.read()\nm = re.search(\"<tbody(.*)</tbody>\", str(html))\nmm = re.findall(r\"<tr class=\\\"gsc_a_tr\\\">(.*?)</tr>\", m.group(0))\npapers = []\nfor m in mm:\n    xx = re.sub(r\"<(.*?)>\", r\"£\", m)\n    xx = re.sub(r\"£+\", r\"£\", xx)\n    yy = re.findall(r\"£?(.*?)£\", xx)",
    "detail": "by-extension.python.get-json-data-from-google-scholar",
    "documentation": {}
  },
  {
    "label": "html",
    "kind": 5,
    "importPath": "by-extension.python.get-json-data-from-google-scholar",
    "description": "by-extension.python.get-json-data-from-google-scholar",
    "peekOfCode": "html = response.read()\nm = re.search(\"<tbody(.*)</tbody>\", str(html))\nmm = re.findall(r\"<tr class=\\\"gsc_a_tr\\\">(.*?)</tr>\", m.group(0))\npapers = []\nfor m in mm:\n    xx = re.sub(r\"<(.*?)>\", r\"£\", m)\n    xx = re.sub(r\"£+\", r\"£\", xx)\n    yy = re.findall(r\"£?(.*?)£\", xx)\n    paper = {\n        \"title\": yy[0],",
    "detail": "by-extension.python.get-json-data-from-google-scholar",
    "documentation": {}
  },
  {
    "label": "m",
    "kind": 5,
    "importPath": "by-extension.python.get-json-data-from-google-scholar",
    "description": "by-extension.python.get-json-data-from-google-scholar",
    "peekOfCode": "m = re.search(\"<tbody(.*)</tbody>\", str(html))\nmm = re.findall(r\"<tr class=\\\"gsc_a_tr\\\">(.*?)</tr>\", m.group(0))\npapers = []\nfor m in mm:\n    xx = re.sub(r\"<(.*?)>\", r\"£\", m)\n    xx = re.sub(r\"£+\", r\"£\", xx)\n    yy = re.findall(r\"£?(.*?)£\", xx)\n    paper = {\n        \"title\": yy[0],\n        \"author\": yy[1],",
    "detail": "by-extension.python.get-json-data-from-google-scholar",
    "documentation": {}
  },
  {
    "label": "mm",
    "kind": 5,
    "importPath": "by-extension.python.get-json-data-from-google-scholar",
    "description": "by-extension.python.get-json-data-from-google-scholar",
    "peekOfCode": "mm = re.findall(r\"<tr class=\\\"gsc_a_tr\\\">(.*?)</tr>\", m.group(0))\npapers = []\nfor m in mm:\n    xx = re.sub(r\"<(.*?)>\", r\"£\", m)\n    xx = re.sub(r\"£+\", r\"£\", xx)\n    yy = re.findall(r\"£?(.*?)£\", xx)\n    paper = {\n        \"title\": yy[0],\n        \"author\": yy[1],\n        \"booktitle\": yy[2],",
    "detail": "by-extension.python.get-json-data-from-google-scholar",
    "documentation": {}
  },
  {
    "label": "papers",
    "kind": 5,
    "importPath": "by-extension.python.get-json-data-from-google-scholar",
    "description": "by-extension.python.get-json-data-from-google-scholar",
    "peekOfCode": "papers = []\nfor m in mm:\n    xx = re.sub(r\"<(.*?)>\", r\"£\", m)\n    xx = re.sub(r\"£+\", r\"£\", xx)\n    yy = re.findall(r\"£?(.*?)£\", xx)\n    paper = {\n        \"title\": yy[0],\n        \"author\": yy[1],\n        \"booktitle\": yy[2],\n    }",
    "detail": "by-extension.python.get-json-data-from-google-scholar",
    "documentation": {}
  },
  {
    "label": "res",
    "kind": 5,
    "importPath": "by-extension.python.get-json-data-from-google-scholar",
    "description": "by-extension.python.get-json-data-from-google-scholar",
    "peekOfCode": "res = {\"papers\": papers}\nprint(json.JSONEncoder().encode(res))",
    "detail": "by-extension.python.get-json-data-from-google-scholar",
    "documentation": {}
  },
  {
    "label": "save_data",
    "kind": 2,
    "importPath": "by-extension.python.get_current_temperature",
    "description": "by-extension.python.get_current_temperature",
    "peekOfCode": "def save_data(time_of_data, data, filename):\n    new_dict = {\n        time_of_data: data,\n    }\n    old_data = load_data(filename)\n    old_data.update(new_dict)\n    with open(filename, \"w\") as fp:\n        dump(new_dict, fp)\n    return new_dict\ndef load_data(filename):",
    "detail": "by-extension.python.get_current_temperature",
    "documentation": {}
  },
  {
    "label": "load_data",
    "kind": 2,
    "importPath": "by-extension.python.get_current_temperature",
    "description": "by-extension.python.get_current_temperature",
    "peekOfCode": "def load_data(filename):\n    old_data = dict()\n    if isfile(filename):\n        with open(filename, \"r\") as fp:\n            old_data = load(fp)\n    return old_data\ndef get_data(names, locations, key, verbose=True):\n    data = []\n    now = datetime.now()\n    for name, location in zip(names, locations):",
    "detail": "by-extension.python.get_current_temperature",
    "documentation": {}
  },
  {
    "label": "get_data",
    "kind": 2,
    "importPath": "by-extension.python.get_current_temperature",
    "description": "by-extension.python.get_current_temperature",
    "peekOfCode": "def get_data(names, locations, key, verbose=True):\n    data = []\n    now = datetime.now()\n    for name, location in zip(names, locations):\n        weather = forecast(key, *location)\n        temperature_in_F = weather['currently']['temperature']\n        temperature_in_C = round((temperature_in_F - 32) * (5/9), 1)\n        data.append({\n            \"name\": name,\n            \"location\": location,",
    "detail": "by-extension.python.get_current_temperature",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "by-extension.python.get_current_temperature",
    "description": "by-extension.python.get_current_temperature",
    "peekOfCode": "def main(filename, names, locations, key, verbose=True):\n    time_of_data, data = get_data(names, locations, key, verbose=verbose)\n    save_data(time_of_data, data, filename)\n    return time_of_data, data\nif __name__ == '__main__':\n    filename = \"get_current_temperature.json\"\n    names, locations = [], []\n    # https://www.google.fr/maps/place/Supélec/@48.1252316,-1.6255899,17z/\n    name = \"CentraleSupélec, Rennes, France\"\n    location = 48.1252316, -1.6255899",
    "detail": "by-extension.python.get_current_temperature",
    "documentation": {}
  },
  {
    "label": "ideas_to_migrate",
    "kind": 5,
    "importPath": "by-extension.python.get_ideas",
    "description": "by-extension.python.get_ideas",
    "peekOfCode": "ideas_to_migrate = []\nprint ('Collecting suggestions...')\n# Loop through suggestions and figure out which ones need to be migrated.\nfor suggestion in suggestions:\n    if suggestion['status']:\n        status_type = suggestion['status']['name']\n        if status_type.lower() != 'completed' and status_type.lower() != 'declined':\n            ideas_to_migrate.append(suggestion)\n    else:\n        ideas_to_migrate.append(suggestion)",
    "detail": "by-extension.python.get_ideas",
    "documentation": {}
  },
  {
    "label": "user",
    "kind": 5,
    "importPath": "by-extension.python.gist",
    "description": "by-extension.python.gist",
    "peekOfCode": "user = sys.argv[1]\nr = requests.get('https://api.github.com/users/{0}/gists'.format(user))\nfor i in r.json():\n    call(['git', 'clone', i['git_pull_url']])\n    description_file = './{0}/description.txt'.format(i['id'])\n    with open(description_file, 'w') as f:\n        f.write('{0}\\n'.format(i['description']))",
    "detail": "by-extension.python.gist",
    "documentation": {}
  },
  {
    "label": "r",
    "kind": 5,
    "importPath": "by-extension.python.gist",
    "description": "by-extension.python.gist",
    "peekOfCode": "r = requests.get('https://api.github.com/users/{0}/gists'.format(user))\nfor i in r.json():\n    call(['git', 'clone', i['git_pull_url']])\n    description_file = './{0}/description.txt'.format(i['id'])\n    with open(description_file, 'w') as f:\n        f.write('{0}\\n'.format(i['description']))",
    "detail": "by-extension.python.gist",
    "documentation": {}
  },
  {
    "label": "user",
    "kind": 5,
    "importPath": "by-extension.python.gist.py",
    "description": "by-extension.python.gist.py",
    "peekOfCode": "user = sys.argv[1]\nr = requests.get('https://api.github.com/users/{0}/gists'.format(user))\nfor i in r.json():\n    call(['git', 'clone', i['git_pull_url']])\n    description_file = './{0}/description.txt'.format(i['id'])\n    with open(description_file, 'w') as f:\n        f.write('{0}\\n'.format(i['description']))",
    "detail": "by-extension.python.gist.py",
    "documentation": {}
  },
  {
    "label": "r",
    "kind": 5,
    "importPath": "by-extension.python.gist.py",
    "description": "by-extension.python.gist.py",
    "peekOfCode": "r = requests.get('https://api.github.com/users/{0}/gists'.format(user))\nfor i in r.json():\n    call(['git', 'clone', i['git_pull_url']])\n    description_file = './{0}/description.txt'.format(i['id'])\n    with open(description_file, 'w') as f:\n        f.write('{0}\\n'.format(i['description']))",
    "detail": "by-extension.python.gist.py",
    "documentation": {}
  },
  {
    "label": "getReposURLs",
    "kind": 6,
    "importPath": "by-extension.python.githubcloner",
    "description": "by-extension.python.githubcloner",
    "peekOfCode": "class getReposURLs:\n    def __init__(self, api_prefix, exclude_repos=None):\n        self.user_agent = \"GithubCloner (https://github.com/mazen160/GithubCloner)\"\n        self.headers = {'User-Agent': self.user_agent, 'Accept': '*/*'}\n        self.timeout = 30\n        self.api_prefix = api_prefix\n        self.excluded_repos_list = [] if exclude_repos is None else\\\n            exclude_repos.strip().split(',')\n    def filter_excluded_repos(self, url):\n        '''",
    "detail": "by-extension.python.githubcloner",
    "documentation": {}
  },
  {
    "label": "parseGitURL",
    "kind": 2,
    "importPath": "by-extension.python.githubcloner",
    "description": "by-extension.python.githubcloner",
    "peekOfCode": "def parseGitURL(URL, username=None, token=None):\n    \"\"\"\n    This function parses the GIT URL.\n    \"\"\"\n    URL = URL.replace(\"git://\", \"https://\")\n    if (username or token) is not None:\n        URL = URL.replace(\n            \"https://\", \"https://{0}:{1}@\".format(username, token))\n    return URL\ndef get_repopath(repo_username, repo_name, prefix_mode):",
    "detail": "by-extension.python.githubcloner",
    "documentation": {}
  },
  {
    "label": "get_repopath",
    "kind": 2,
    "importPath": "by-extension.python.githubcloner",
    "description": "by-extension.python.githubcloner",
    "peekOfCode": "def get_repopath(repo_username, repo_name, prefix_mode):\n    \"\"\"\n    Returns a string of the repo path.\n    \"\"\"\n    if prefix_mode == \"none\":\n        repopath = repo_name\n    elif prefix_mode == \"underscore\":\n        repopath = repo_username + \"_\" + repo_name\n    elif prefix_mode == \"directory\":\n        repopath = repo_username + \"/\" + repo_name",
    "detail": "by-extension.python.githubcloner",
    "documentation": {}
  },
  {
    "label": "cloneRepo",
    "kind": 2,
    "importPath": "by-extension.python.githubcloner",
    "description": "by-extension.python.githubcloner",
    "peekOfCode": "def cloneRepo(URL,\n              cloningpath,\n              username=None,\n              token=None,\n              prefix_mode=\"underscore\"):\n    \"\"\"\n    Clones a single GIT repository.\n    Input:-\n    URL: GIT repository URL.\n    cloningPath: the directory that the repository will be cloned at.",
    "detail": "by-extension.python.githubcloner",
    "documentation": {}
  },
  {
    "label": "cloneBulkRepos",
    "kind": 2,
    "importPath": "by-extension.python.githubcloner",
    "description": "by-extension.python.githubcloner",
    "peekOfCode": "def cloneBulkRepos(URLs,\n                   cloningPath,\n                   threads_limit=5,\n                   username=None,\n                   token=None,\n                   prefix_mode=\"underscore\"):\n    \"\"\"\n    Clones a bulk of GIT repositories.\n    Input:-\n    URLs: A list of GIT repository URLs.",
    "detail": "by-extension.python.githubcloner",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "by-extension.python.githubcloner",
    "description": "by-extension.python.githubcloner",
    "peekOfCode": "def main():\n    \"\"\"\n    The main function.\n    \"\"\"\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"-u\", \"--user\",\n                        dest=\"users\",\n                        help=\"Github user (comma-separated input for multiple Github users).\",\n                        action='store')\n    parser.add_argument(\"-org\", \"--org\",",
    "detail": "by-extension.python.githubcloner",
    "documentation": {}
  },
  {
    "label": "gnome_sort",
    "kind": 2,
    "importPath": "by-extension.python.gnome_sort",
    "description": "by-extension.python.gnome_sort",
    "peekOfCode": "def gnome_sort(collection):\n    length = len(collection)\n    i, j, counter = 1, 2, 0\n    while i < length:\n        if collection[i - 1] < collection[i]:\n            i, j = j, j + 1\n            counter += 1\n            print(\"Step %i -->\" % counter, collection)\n        else:\n            collection[i], collection[i - 1] = collection[i - 1], collection[i]",
    "detail": "by-extension.python.gnome_sort",
    "documentation": {}
  },
  {
    "label": "visualization",
    "kind": 2,
    "importPath": "by-extension.python.gnome_sort",
    "description": "by-extension.python.gnome_sort",
    "peekOfCode": "def visualization():\n    length = 10\n    collection = [randint(0, length) for _ in range(length)]\n    print(\"Initial list:\", collection)\n    print(\"Visualization of algorithm work.\")\n    collection, counter = gnome_sort(collection)\n    print(\"Final list:\", collection)\n    print(\"Total numbers of passages:\", counter)\ndef main():\n    elapsed_time = timeit.timeit(visualization, number=1)",
    "detail": "by-extension.python.gnome_sort",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "by-extension.python.gnome_sort",
    "description": "by-extension.python.gnome_sort",
    "peekOfCode": "def main():\n    elapsed_time = timeit.timeit(visualization, number=1)\n    print(\"Elapsed time: \", round(elapsed_time, 7), \"sec.\")\nif __name__ == \"__main__\":\n    main()",
    "detail": "by-extension.python.gnome_sort",
    "documentation": {}
  },
  {
    "label": "formation_num",
    "kind": 5,
    "importPath": "by-extension.python.grades",
    "description": "by-extension.python.grades",
    "peekOfCode": "formation_num = 40 # defining no of signs, we are using it on on multiple places\nprint('*' * formation_num) # for formation\ntitle = 'Python Marksheet'\nprint(f'\\t{title}')\nprint('-' * formation_num) # for formation\n# student info\nname = input('\\t Name: ')\nroll_no = int(input('\\t Roll No: ')) \n# total marks per subject, assigned multiple variables in one line\nmathematics_marks, physics_marks, chemistry_marks, islamiat_marks, urdu_marks = 100, 100, 100, 100, 75",
    "detail": "by-extension.python.grades",
    "documentation": {}
  },
  {
    "label": "title",
    "kind": 5,
    "importPath": "by-extension.python.grades",
    "description": "by-extension.python.grades",
    "peekOfCode": "title = 'Python Marksheet'\nprint(f'\\t{title}')\nprint('-' * formation_num) # for formation\n# student info\nname = input('\\t Name: ')\nroll_no = int(input('\\t Roll No: ')) \n# total marks per subject, assigned multiple variables in one line\nmathematics_marks, physics_marks, chemistry_marks, islamiat_marks, urdu_marks = 100, 100, 100, 100, 75\n# input\nmathematics = int(input(f'\\t Mathematics marks out of {mathematics_marks}: '))",
    "detail": "by-extension.python.grades",
    "documentation": {}
  },
  {
    "label": "name",
    "kind": 5,
    "importPath": "by-extension.python.grades",
    "description": "by-extension.python.grades",
    "peekOfCode": "name = input('\\t Name: ')\nroll_no = int(input('\\t Roll No: ')) \n# total marks per subject, assigned multiple variables in one line\nmathematics_marks, physics_marks, chemistry_marks, islamiat_marks, urdu_marks = 100, 100, 100, 100, 75\n# input\nmathematics = int(input(f'\\t Mathematics marks out of {mathematics_marks}: '))\nchemistry = int(input(f'\\t Chemistry marks out of {chemistry_marks}: '))\nphysics = int(input(f'\\t Physics marks out of {physics_marks}: '))\nurdu = int(input(f'\\t Urdu marks out of {urdu_marks}: '))\nislamiat = int(input(f'\\t Islamiat marks out of {islamiat_marks}: '))",
    "detail": "by-extension.python.grades",
    "documentation": {}
  },
  {
    "label": "roll_no",
    "kind": 5,
    "importPath": "by-extension.python.grades",
    "description": "by-extension.python.grades",
    "peekOfCode": "roll_no = int(input('\\t Roll No: ')) \n# total marks per subject, assigned multiple variables in one line\nmathematics_marks, physics_marks, chemistry_marks, islamiat_marks, urdu_marks = 100, 100, 100, 100, 75\n# input\nmathematics = int(input(f'\\t Mathematics marks out of {mathematics_marks}: '))\nchemistry = int(input(f'\\t Chemistry marks out of {chemistry_marks}: '))\nphysics = int(input(f'\\t Physics marks out of {physics_marks}: '))\nurdu = int(input(f'\\t Urdu marks out of {urdu_marks}: '))\nislamiat = int(input(f'\\t Islamiat marks out of {islamiat_marks}: '))\n# calculating total marks, obtained marks and percentage",
    "detail": "by-extension.python.grades",
    "documentation": {}
  },
  {
    "label": "mathematics",
    "kind": 5,
    "importPath": "by-extension.python.grades",
    "description": "by-extension.python.grades",
    "peekOfCode": "mathematics = int(input(f'\\t Mathematics marks out of {mathematics_marks}: '))\nchemistry = int(input(f'\\t Chemistry marks out of {chemistry_marks}: '))\nphysics = int(input(f'\\t Physics marks out of {physics_marks}: '))\nurdu = int(input(f'\\t Urdu marks out of {urdu_marks}: '))\nislamiat = int(input(f'\\t Islamiat marks out of {islamiat_marks}: '))\n# calculating total marks, obtained marks and percentage\ntotal_marks = mathematics_marks + physics_marks + chemistry_marks + islamiat_marks + urdu_marks\nobtained_marks = mathematics + chemistry + physics + urdu + islamiat\npercentage = round(obtained_marks / total_marks * 100, 2) # round to two decimal point\n# defining variables for grades",
    "detail": "by-extension.python.grades",
    "documentation": {}
  },
  {
    "label": "chemistry",
    "kind": 5,
    "importPath": "by-extension.python.grades",
    "description": "by-extension.python.grades",
    "peekOfCode": "chemistry = int(input(f'\\t Chemistry marks out of {chemistry_marks}: '))\nphysics = int(input(f'\\t Physics marks out of {physics_marks}: '))\nurdu = int(input(f'\\t Urdu marks out of {urdu_marks}: '))\nislamiat = int(input(f'\\t Islamiat marks out of {islamiat_marks}: '))\n# calculating total marks, obtained marks and percentage\ntotal_marks = mathematics_marks + physics_marks + chemistry_marks + islamiat_marks + urdu_marks\nobtained_marks = mathematics + chemistry + physics + urdu + islamiat\npercentage = round(obtained_marks / total_marks * 100, 2) # round to two decimal point\n# defining variables for grades\ngrade_A = 'Grade: Grade A'",
    "detail": "by-extension.python.grades",
    "documentation": {}
  },
  {
    "label": "physics",
    "kind": 5,
    "importPath": "by-extension.python.grades",
    "description": "by-extension.python.grades",
    "peekOfCode": "physics = int(input(f'\\t Physics marks out of {physics_marks}: '))\nurdu = int(input(f'\\t Urdu marks out of {urdu_marks}: '))\nislamiat = int(input(f'\\t Islamiat marks out of {islamiat_marks}: '))\n# calculating total marks, obtained marks and percentage\ntotal_marks = mathematics_marks + physics_marks + chemistry_marks + islamiat_marks + urdu_marks\nobtained_marks = mathematics + chemistry + physics + urdu + islamiat\npercentage = round(obtained_marks / total_marks * 100, 2) # round to two decimal point\n# defining variables for grades\ngrade_A = 'Grade: Grade A'\ngrade_B = 'Grade: Grade B'",
    "detail": "by-extension.python.grades",
    "documentation": {}
  },
  {
    "label": "urdu",
    "kind": 5,
    "importPath": "by-extension.python.grades",
    "description": "by-extension.python.grades",
    "peekOfCode": "urdu = int(input(f'\\t Urdu marks out of {urdu_marks}: '))\nislamiat = int(input(f'\\t Islamiat marks out of {islamiat_marks}: '))\n# calculating total marks, obtained marks and percentage\ntotal_marks = mathematics_marks + physics_marks + chemistry_marks + islamiat_marks + urdu_marks\nobtained_marks = mathematics + chemistry + physics + urdu + islamiat\npercentage = round(obtained_marks / total_marks * 100, 2) # round to two decimal point\n# defining variables for grades\ngrade_A = 'Grade: Grade A'\ngrade_B = 'Grade: Grade B'\ngrade_C = 'Grade: Grade C'",
    "detail": "by-extension.python.grades",
    "documentation": {}
  },
  {
    "label": "islamiat",
    "kind": 5,
    "importPath": "by-extension.python.grades",
    "description": "by-extension.python.grades",
    "peekOfCode": "islamiat = int(input(f'\\t Islamiat marks out of {islamiat_marks}: '))\n# calculating total marks, obtained marks and percentage\ntotal_marks = mathematics_marks + physics_marks + chemistry_marks + islamiat_marks + urdu_marks\nobtained_marks = mathematics + chemistry + physics + urdu + islamiat\npercentage = round(obtained_marks / total_marks * 100, 2) # round to two decimal point\n# defining variables for grades\ngrade_A = 'Grade: Grade A'\ngrade_B = 'Grade: Grade B'\ngrade_C = 'Grade: Grade C'\ngrade_D = 'Grade: Grade D'",
    "detail": "by-extension.python.grades",
    "documentation": {}
  },
  {
    "label": "total_marks",
    "kind": 5,
    "importPath": "by-extension.python.grades",
    "description": "by-extension.python.grades",
    "peekOfCode": "total_marks = mathematics_marks + physics_marks + chemistry_marks + islamiat_marks + urdu_marks\nobtained_marks = mathematics + chemistry + physics + urdu + islamiat\npercentage = round(obtained_marks / total_marks * 100, 2) # round to two decimal point\n# defining variables for grades\ngrade_A = 'Grade: Grade A'\ngrade_B = 'Grade: Grade B'\ngrade_C = 'Grade: Grade C'\ngrade_D = 'Grade: Grade D'\ngrade_F = 'Grade: Grade F (failed)'\n# output",
    "detail": "by-extension.python.grades",
    "documentation": {}
  },
  {
    "label": "obtained_marks",
    "kind": 5,
    "importPath": "by-extension.python.grades",
    "description": "by-extension.python.grades",
    "peekOfCode": "obtained_marks = mathematics + chemistry + physics + urdu + islamiat\npercentage = round(obtained_marks / total_marks * 100, 2) # round to two decimal point\n# defining variables for grades\ngrade_A = 'Grade: Grade A'\ngrade_B = 'Grade: Grade B'\ngrade_C = 'Grade: Grade C'\ngrade_D = 'Grade: Grade D'\ngrade_F = 'Grade: Grade F (failed)'\n# output\nprint('≈' * formation_num) # for formation",
    "detail": "by-extension.python.grades",
    "documentation": {}
  },
  {
    "label": "percentage",
    "kind": 5,
    "importPath": "by-extension.python.grades",
    "description": "by-extension.python.grades",
    "peekOfCode": "percentage = round(obtained_marks / total_marks * 100, 2) # round to two decimal point\n# defining variables for grades\ngrade_A = 'Grade: Grade A'\ngrade_B = 'Grade: Grade B'\ngrade_C = 'Grade: Grade C'\ngrade_D = 'Grade: Grade D'\ngrade_F = 'Grade: Grade F (failed)'\n# output\nprint('≈' * formation_num) # for formation\nprint(f'   Name: {name}   Roll No: {roll_no }')",
    "detail": "by-extension.python.grades",
    "documentation": {}
  },
  {
    "label": "grade_A",
    "kind": 5,
    "importPath": "by-extension.python.grades",
    "description": "by-extension.python.grades",
    "peekOfCode": "grade_A = 'Grade: Grade A'\ngrade_B = 'Grade: Grade B'\ngrade_C = 'Grade: Grade C'\ngrade_D = 'Grade: Grade D'\ngrade_F = 'Grade: Grade F (failed)'\n# output\nprint('≈' * formation_num) # for formation\nprint(f'   Name: {name}   Roll No: {roll_no }')\nprint(f'   Total Marks: {total_marks}   Obtained Marks: {obtained_marks}')\nprint(f'   Percentage: {percentage}%')",
    "detail": "by-extension.python.grades",
    "documentation": {}
  },
  {
    "label": "grade_B",
    "kind": 5,
    "importPath": "by-extension.python.grades",
    "description": "by-extension.python.grades",
    "peekOfCode": "grade_B = 'Grade: Grade B'\ngrade_C = 'Grade: Grade C'\ngrade_D = 'Grade: Grade D'\ngrade_F = 'Grade: Grade F (failed)'\n# output\nprint('≈' * formation_num) # for formation\nprint(f'   Name: {name}   Roll No: {roll_no }')\nprint(f'   Total Marks: {total_marks}   Obtained Marks: {obtained_marks}')\nprint(f'   Percentage: {percentage}%')\n# grading",
    "detail": "by-extension.python.grades",
    "documentation": {}
  },
  {
    "label": "grade_C",
    "kind": 5,
    "importPath": "by-extension.python.grades",
    "description": "by-extension.python.grades",
    "peekOfCode": "grade_C = 'Grade: Grade C'\ngrade_D = 'Grade: Grade D'\ngrade_F = 'Grade: Grade F (failed)'\n# output\nprint('≈' * formation_num) # for formation\nprint(f'   Name: {name}   Roll No: {roll_no }')\nprint(f'   Total Marks: {total_marks}   Obtained Marks: {obtained_marks}')\nprint(f'   Percentage: {percentage}%')\n# grading\nif percentage >= 90:",
    "detail": "by-extension.python.grades",
    "documentation": {}
  },
  {
    "label": "grade_D",
    "kind": 5,
    "importPath": "by-extension.python.grades",
    "description": "by-extension.python.grades",
    "peekOfCode": "grade_D = 'Grade: Grade D'\ngrade_F = 'Grade: Grade F (failed)'\n# output\nprint('≈' * formation_num) # for formation\nprint(f'   Name: {name}   Roll No: {roll_no }')\nprint(f'   Total Marks: {total_marks}   Obtained Marks: {obtained_marks}')\nprint(f'   Percentage: {percentage}%')\n# grading\nif percentage >= 90:\n   print(f'   {grade_A}')",
    "detail": "by-extension.python.grades",
    "documentation": {}
  },
  {
    "label": "grade_F",
    "kind": 5,
    "importPath": "by-extension.python.grades",
    "description": "by-extension.python.grades",
    "peekOfCode": "grade_F = 'Grade: Grade F (failed)'\n# output\nprint('≈' * formation_num) # for formation\nprint(f'   Name: {name}   Roll No: {roll_no }')\nprint(f'   Total Marks: {total_marks}   Obtained Marks: {obtained_marks}')\nprint(f'   Percentage: {percentage}%')\n# grading\nif percentage >= 90:\n   print(f'   {grade_A}')\nelif percentage >= 80:",
    "detail": "by-extension.python.grades",
    "documentation": {}
  },
  {
    "label": "gravatar",
    "kind": 2,
    "importPath": "by-extension.python.gravatar",
    "description": "by-extension.python.gravatar",
    "peekOfCode": "def gravatar(email, default=default, size=size, secure=secure):\n    \"\"\"\n    gravatar(email, default=default, size=size, secure=secure) -> string\"\n    Return the URL of the gravatar picture associated with @email.\n    @default: default picture to use if not available. Default is %s.\n    @size: format to use (pixel x pixel). Default is %i.\n    @secure: if true, the returned URL use https://secure.gravatar.com instead of http://www.gravatar.com. Default is %s.\"\n    \"\"\" % (default, size, secure)\n    if secure:\n        gravatar_url = \"https://secure.gravatar.com/avatar/\" + hashlib.md5(email.lower()).hexdigest() + \"?r=pg&\"",
    "detail": "by-extension.python.gravatar",
    "documentation": {}
  },
  {
    "label": "default",
    "kind": 5,
    "importPath": "by-extension.python.gravatar",
    "description": "by-extension.python.gravatar",
    "peekOfCode": "default = \"retro\"\nsize = 256\nsecure = True\ndef gravatar(email, default=default, size=size, secure=secure):\n    \"\"\"\n    gravatar(email, default=default, size=size, secure=secure) -> string\"\n    Return the URL of the gravatar picture associated with @email.\n    @default: default picture to use if not available. Default is %s.\n    @size: format to use (pixel x pixel). Default is %i.\n    @secure: if true, the returned URL use https://secure.gravatar.com instead of http://www.gravatar.com. Default is %s.\"",
    "detail": "by-extension.python.gravatar",
    "documentation": {}
  },
  {
    "label": "size",
    "kind": 5,
    "importPath": "by-extension.python.gravatar",
    "description": "by-extension.python.gravatar",
    "peekOfCode": "size = 256\nsecure = True\ndef gravatar(email, default=default, size=size, secure=secure):\n    \"\"\"\n    gravatar(email, default=default, size=size, secure=secure) -> string\"\n    Return the URL of the gravatar picture associated with @email.\n    @default: default picture to use if not available. Default is %s.\n    @size: format to use (pixel x pixel). Default is %i.\n    @secure: if true, the returned URL use https://secure.gravatar.com instead of http://www.gravatar.com. Default is %s.\"\n    \"\"\" % (default, size, secure)",
    "detail": "by-extension.python.gravatar",
    "documentation": {}
  },
  {
    "label": "secure",
    "kind": 5,
    "importPath": "by-extension.python.gravatar",
    "description": "by-extension.python.gravatar",
    "peekOfCode": "secure = True\ndef gravatar(email, default=default, size=size, secure=secure):\n    \"\"\"\n    gravatar(email, default=default, size=size, secure=secure) -> string\"\n    Return the URL of the gravatar picture associated with @email.\n    @default: default picture to use if not available. Default is %s.\n    @size: format to use (pixel x pixel). Default is %i.\n    @secure: if true, the returned URL use https://secure.gravatar.com instead of http://www.gravatar.com. Default is %s.\"\n    \"\"\" % (default, size, secure)\n    if secure:",
    "detail": "by-extension.python.gravatar",
    "documentation": {}
  },
  {
    "label": "hashtable",
    "kind": 6,
    "importPath": "by-extension.python.handwritten_hashtable",
    "description": "by-extension.python.handwritten_hashtable",
    "peekOfCode": "class hashtable(object):\n    \"\"\"Manual implementation of a naive hash table.\n    - Can only store hashable values.\n    - Use single-linked lists to be collision-resistant!\n    - Uses a non cryptographic hash function (default `hash`).\n    \"\"\"\n    def __init__(self, map_values=None, nb_bits=NB_BITS):\n        self._nb_bits = nb_bits\n        self._size = 1 << nb_bits\n        self._nb = 0",
    "detail": "by-extension.python.handwritten_hashtable",
    "documentation": {}
  },
  {
    "label": "small_hash",
    "kind": 2,
    "importPath": "by-extension.python.handwritten_hashtable",
    "description": "by-extension.python.handwritten_hashtable",
    "peekOfCode": "def small_hash(x, nb_bits=3):\n    \"\"\"A naive hash function.\"\"\"\n    # return abs(hash(x)) % 2  # test, to check that collisions are well handled\n    return abs(hash(x)) % (1 << nb_bits)\nNB_BITS = 4\nDEFAULT_SIZE = 1 << NB_BITS\nclass hashtable(object):\n    \"\"\"Manual implementation of a naive hash table.\n    - Can only store hashable values.\n    - Use single-linked lists to be collision-resistant!",
    "detail": "by-extension.python.handwritten_hashtable",
    "documentation": {}
  },
  {
    "label": "test",
    "kind": 2,
    "importPath": "by-extension.python.handwritten_hashtable",
    "description": "by-extension.python.handwritten_hashtable",
    "peekOfCode": "def test():\n    print(\"Creating empty hash table ...\")\n    H = hashtable()\n    print(H)\n    print(\"Inserting i**2 for i = 0..9 ...\")\n    for i in range(10):\n        H.insert(i, i**2)\n    print(H)\n    print(\"Reading i**2 for i = 0..9 ...\")\n    for i in range(10):",
    "detail": "by-extension.python.handwritten_hashtable",
    "documentation": {}
  },
  {
    "label": "NB_BITS",
    "kind": 5,
    "importPath": "by-extension.python.handwritten_hashtable",
    "description": "by-extension.python.handwritten_hashtable",
    "peekOfCode": "NB_BITS = 4\nDEFAULT_SIZE = 1 << NB_BITS\nclass hashtable(object):\n    \"\"\"Manual implementation of a naive hash table.\n    - Can only store hashable values.\n    - Use single-linked lists to be collision-resistant!\n    - Uses a non cryptographic hash function (default `hash`).\n    \"\"\"\n    def __init__(self, map_values=None, nb_bits=NB_BITS):\n        self._nb_bits = nb_bits",
    "detail": "by-extension.python.handwritten_hashtable",
    "documentation": {}
  },
  {
    "label": "DEFAULT_SIZE",
    "kind": 5,
    "importPath": "by-extension.python.handwritten_hashtable",
    "description": "by-extension.python.handwritten_hashtable",
    "peekOfCode": "DEFAULT_SIZE = 1 << NB_BITS\nclass hashtable(object):\n    \"\"\"Manual implementation of a naive hash table.\n    - Can only store hashable values.\n    - Use single-linked lists to be collision-resistant!\n    - Uses a non cryptographic hash function (default `hash`).\n    \"\"\"\n    def __init__(self, map_values=None, nb_bits=NB_BITS):\n        self._nb_bits = nb_bits\n        self._size = 1 << nb_bits",
    "detail": "by-extension.python.handwritten_hashtable",
    "documentation": {}
  },
  {
    "label": "Dict",
    "kind": 6,
    "importPath": "by-extension.python.hash",
    "description": "by-extension.python.hash",
    "peekOfCode": "class Dict:\n    def __init__(self, capacity=8):\n        self.storage = [None] * capacity        \n        self.capacity = capacity\n        self.item_count = 0\n​\n    def hash(self, string):\n        bytes = string.encode()\n        sum = 0\n        for byte in bytes:",
    "detail": "by-extension.python.hash",
    "documentation": {}
  },
  {
    "label": "d",
    "kind": 5,
    "importPath": "by-extension.python.hash",
    "description": "by-extension.python.hash",
    "peekOfCode": "d = Dict(8)\n​\nd['apple'] = 'is a fruit'\nd['banana'] = 'is also fruit'\nd['cucumber'] = 'is a vegetable'\nd['peach'] = 'This is definitely not a banana'\nd['pineapple'] = 'is tasty'\nprint(d.storage)\nd['papaya'] = 'is tropical'\nprint(d.storage)",
    "detail": "by-extension.python.hash",
    "documentation": {}
  },
  {
    "label": "d['apple']",
    "kind": 5,
    "importPath": "by-extension.python.hash",
    "description": "by-extension.python.hash",
    "peekOfCode": "d['apple'] = 'is a fruit'\nd['banana'] = 'is also fruit'\nd['cucumber'] = 'is a vegetable'\nd['peach'] = 'This is definitely not a banana'\nd['pineapple'] = 'is tasty'\nprint(d.storage)\nd['papaya'] = 'is tropical'\nprint(d.storage)\n​",
    "detail": "by-extension.python.hash",
    "documentation": {}
  },
  {
    "label": "d['banana']",
    "kind": 5,
    "importPath": "by-extension.python.hash",
    "description": "by-extension.python.hash",
    "peekOfCode": "d['banana'] = 'is also fruit'\nd['cucumber'] = 'is a vegetable'\nd['peach'] = 'This is definitely not a banana'\nd['pineapple'] = 'is tasty'\nprint(d.storage)\nd['papaya'] = 'is tropical'\nprint(d.storage)\n​",
    "detail": "by-extension.python.hash",
    "documentation": {}
  },
  {
    "label": "d['cucumber']",
    "kind": 5,
    "importPath": "by-extension.python.hash",
    "description": "by-extension.python.hash",
    "peekOfCode": "d['cucumber'] = 'is a vegetable'\nd['peach'] = 'This is definitely not a banana'\nd['pineapple'] = 'is tasty'\nprint(d.storage)\nd['papaya'] = 'is tropical'\nprint(d.storage)\n​",
    "detail": "by-extension.python.hash",
    "documentation": {}
  },
  {
    "label": "d['peach']",
    "kind": 5,
    "importPath": "by-extension.python.hash",
    "description": "by-extension.python.hash",
    "peekOfCode": "d['peach'] = 'This is definitely not a banana'\nd['pineapple'] = 'is tasty'\nprint(d.storage)\nd['papaya'] = 'is tropical'\nprint(d.storage)\n​",
    "detail": "by-extension.python.hash",
    "documentation": {}
  },
  {
    "label": "d['pineapple']",
    "kind": 5,
    "importPath": "by-extension.python.hash",
    "description": "by-extension.python.hash",
    "peekOfCode": "d['pineapple'] = 'is tasty'\nprint(d.storage)\nd['papaya'] = 'is tropical'\nprint(d.storage)\n​",
    "detail": "by-extension.python.hash",
    "documentation": {}
  },
  {
    "label": "d['papaya']",
    "kind": 5,
    "importPath": "by-extension.python.hash",
    "description": "by-extension.python.hash",
    "peekOfCode": "d['papaya'] = 'is tropical'\nprint(d.storage)\n​",
    "detail": "by-extension.python.hash",
    "documentation": {}
  },
  {
    "label": "HtpasswdFile",
    "kind": 6,
    "importPath": "by-extension.python.htpasswd",
    "description": "by-extension.python.htpasswd",
    "peekOfCode": "class HtpasswdFile:\n    \"\"\"A class for manipulating htpasswd files.\"\"\"\n    def __init__(self, filename, create=False):\n        self.entries = []\n        self.filename = filename\n        if not create:\n            if os.path.exists(self.filename):\n                self.load()\n            else:\n                raise Exception(\"%s does not exist\" % self.filename)",
    "detail": "by-extension.python.htpasswd",
    "documentation": {}
  },
  {
    "label": "salt",
    "kind": 2,
    "importPath": "by-extension.python.htpasswd",
    "description": "by-extension.python.htpasswd",
    "peekOfCode": "def salt():\n    \"\"\"Returns a string of 2 randome letters\"\"\"\n    letters = 'abcdefghijklmnopqrstuvwxyz' \\\n              'ABCDEFGHIJKLMNOPQRSTUVWXYZ' \\\n              '0123456789/.'\n    return random.choice(letters) + random.choice(letters)\nclass HtpasswdFile:\n    \"\"\"A class for manipulating htpasswd files.\"\"\"\n    def __init__(self, filename, create=False):\n        self.entries = []",
    "detail": "by-extension.python.htpasswd",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "by-extension.python.htpasswd",
    "description": "by-extension.python.htpasswd",
    "peekOfCode": "def main():\n    \"\"\"\n        %prog -b[c] filename username password\n        %prog -D filename username\"\"\"\n    # For now, we only care about the use cases that affect tests/functional.py\n    parser = OptionParser(usage=main.__doc__)\n    parser.add_option('-b', action='store_true', dest='batch', default=False,\n        help='Batch mode; password is passed on the command line IN THE CLEAR.'\n        )\n    parser.add_option('-c', action='store_true', dest='create', default=False,",
    "detail": "by-extension.python.htpasswd",
    "documentation": {}
  },
  {
    "label": "insertion_sort",
    "kind": 2,
    "importPath": "by-extension.python.insertion_sort",
    "description": "by-extension.python.insertion_sort",
    "peekOfCode": "def insertion_sort(collection):\n    counter = 0\n    length = len(collection)\n    for i in range(0, length):\n        value = collection[i]\n        j = i\n        while (j > 0) and (collection[j - 1] > value):\n            collection[j] = collection[j - 1]\n            j -= 1\n        collection[j] = value",
    "detail": "by-extension.python.insertion_sort",
    "documentation": {}
  },
  {
    "label": "visualization",
    "kind": 2,
    "importPath": "by-extension.python.insertion_sort",
    "description": "by-extension.python.insertion_sort",
    "peekOfCode": "def visualization():\n    length = 10\n    collection = [randint(0, length) for _ in range(length)]\n    print(\"Initial list:\", collection)\n    print(\"Visualization of algorithm work.\")\n    collection, counter = insertion_sort(collection)\n    print(\"Final list:\", collection)\n    print(\"Total numbers of passages:\", counter)\ndef main():\n    elapsed_time = timeit.timeit(visualization, number=1)",
    "detail": "by-extension.python.insertion_sort",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "by-extension.python.insertion_sort",
    "description": "by-extension.python.insertion_sort",
    "peekOfCode": "def main():\n    elapsed_time = timeit.timeit(visualization, number=1)\n    print(\"Elapsed time: \", round(elapsed_time, 7), \"sec.\")\nif __name__ == \"__main__\":\n    main()",
    "detail": "by-extension.python.insertion_sort",
    "documentation": {}
  },
  {
    "label": "interleaving_strings_1",
    "kind": 2,
    "importPath": "by-extension.python.interleaving_strings",
    "description": "by-extension.python.interleaving_strings",
    "peekOfCode": "def interleaving_strings_1(A, B, C):\n    nA, nB, nC = len(A), len(B), len(C)\n    if nA + nB != nC:\n        return 0\n    dp = [[0 for j in range(nB + 1)] for i in range(nA + 1)]\n    # starting values\n    dp[0][0] = 1\n    for i in range(1, nA + 1):\n        if A[i - 1] == C[i - 1]:\n            # short form of if A[i - 1] == C[i - 1] and dp[i - 1][0] == 1",
    "detail": "by-extension.python.interleaving_strings",
    "documentation": {}
  },
  {
    "label": "interleaving_strings_2",
    "kind": 2,
    "importPath": "by-extension.python.interleaving_strings",
    "description": "by-extension.python.interleaving_strings",
    "peekOfCode": "def interleaving_strings_2(A, B, C):\n    nA, nB, nC = len(A), len(B), len(C)\n    if nA + nB != nC:\n        return 0\n    dp = [0 for j in range(nB + 1)]\n    # starting values\n    dp[0] = 1\n    for i in range(1, nB + 1):\n        if B[i - 1] == C[i - 1]:\n            dp[i] = dp[i - 1]",
    "detail": "by-extension.python.interleaving_strings",
    "documentation": {}
  },
  {
    "label": "interpolation_search",
    "kind": 2,
    "importPath": "by-extension.python.interpolation_search",
    "description": "by-extension.python.interpolation_search",
    "peekOfCode": "def interpolation_search(collection, target):\n    left, right, counter = 0, len(collection) - 1, 0\n    while (collection[left] <= target) and (collection[right] >= target):\n        middle = left + ((target - collection[left]) * (right - left)) // (\n            collection[right] - collection[left]\n        )\n        if collection[middle] < target:\n            counter += 1\n            left = middle + 1\n            print(\"Step %i -->\" % counter, collection[left:])",
    "detail": "by-extension.python.interpolation_search",
    "documentation": {}
  },
  {
    "label": "visualization",
    "kind": 2,
    "importPath": "by-extension.python.interpolation_search",
    "description": "by-extension.python.interpolation_search",
    "peekOfCode": "def visualization():\n    length = 10\n    collection = [item for item in range(0, length)]\n    target = randint(0, length - 1)\n    print(\"Initial list:\", collection)\n    print(\"The number of which must be found:\", target)\n    print(\"Visualization of algorithm work.\")\n    result, counter = interpolation_search(collection, target)\n    if result != -1:\n        print(\"Result of searching: \", result)",
    "detail": "by-extension.python.interpolation_search",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "by-extension.python.interpolation_search",
    "description": "by-extension.python.interpolation_search",
    "peekOfCode": "def main():\n    elapsed_time = timeit.timeit(visualization, number=1)\n    print(\"Elapsed time: \", round(elapsed_time, 7), \"sec.\")\nif __name__ == \"__main__\":\n    main()",
    "detail": "by-extension.python.interpolation_search",
    "documentation": {}
  },
  {
    "label": "min_jumps_1",
    "kind": 2,
    "importPath": "by-extension.python.jump_game_2",
    "description": "by-extension.python.jump_game_2",
    "peekOfCode": "def min_jumps_1(nums):\n    n = len(nums)\n    if n <= 1:\n        return 0\n    dp = [-1]*n\n    dp[0] = 0\n    for i in range(n):\n        this_jump = i + nums[i]\n        jumps = dp[i] + 1\n        if this_jump >= n - 1:",
    "detail": "by-extension.python.jump_game_2",
    "documentation": {}
  },
  {
    "label": "min_jumps_2",
    "kind": 2,
    "importPath": "by-extension.python.jump_game_2",
    "description": "by-extension.python.jump_game_2",
    "peekOfCode": "def min_jumps_2(nums):\n    n = len(nums)\n    if n <= 1:\n        return 0\n    jumps = 0\n    max_jump = 0\n    new_max_jump = 0\n    for i in range(n):\n        if max_jump < i:\n            max_jump = new_max_jump",
    "detail": "by-extension.python.jump_game_2",
    "documentation": {}
  },
  {
    "label": "nums",
    "kind": 5,
    "importPath": "by-extension.python.jump_game_2",
    "description": "by-extension.python.jump_game_2",
    "peekOfCode": "nums = [2, 3, 1, 1, 4]\nprint(min_jumps_1(nums))\nprint(min_jumps_2(nums))",
    "detail": "by-extension.python.jump_game_2",
    "documentation": {}
  },
  {
    "label": "Key",
    "kind": 6,
    "importPath": "by-extension.python.key-gen",
    "description": "by-extension.python.key-gen",
    "peekOfCode": "class Key:\n    def __init__(self, key=''):\n        if key == '':\n            self.key = self.generate()\n        else:\n            self.key = key.lower()\n    def verify(self):\n        score = 0\n        check_digit = self.key[0]\n        check_digit_count = 0",
    "detail": "by-extension.python.key-gen",
    "documentation": {}
  },
  {
    "label": "largest_continuous_sum",
    "kind": 2,
    "importPath": "by-extension.python.largest-continuous-sum",
    "description": "by-extension.python.largest-continuous-sum",
    "peekOfCode": "def largest_continuous_sum(arr):\n    \"\"\"returns the highest sum of a continuous sequence in a given list\"\"\"\n    largest = 0\n    queue = []\n    for num in arr:\n        if len(queue) > 0 and queue[-1] + 1 != num:\n            sum = reduce(lambda x, y: x + y, queue)\n            if largest < sum:\n                largest = sum\n            queue = []",
    "detail": "by-extension.python.largest-continuous-sum",
    "documentation": {}
  },
  {
    "label": "linear_search",
    "kind": 2,
    "importPath": "by-extension.python.linear_search",
    "description": "by-extension.python.linear_search",
    "peekOfCode": "def linear_search(collection, target):\n    for i in range(0, len(collection)):\n        if collection[i] == target:\n            return i\n    return -1\ndef visualization():\n    length = 10\n    collection = [randint(0, length) for _ in range(0, length)]\n    target = randint(0, length - 1)\n    print(\"Initial list:\", collection)",
    "detail": "by-extension.python.linear_search",
    "documentation": {}
  },
  {
    "label": "visualization",
    "kind": 2,
    "importPath": "by-extension.python.linear_search",
    "description": "by-extension.python.linear_search",
    "peekOfCode": "def visualization():\n    length = 10\n    collection = [randint(0, length) for _ in range(0, length)]\n    target = randint(0, length - 1)\n    print(\"Initial list:\", collection)\n    print(\"The number of which must be found:\", target)\n    result = linear_search(collection, target)\n    if result != -1:\n        print(\"Result of searching: \", result)\n    else:",
    "detail": "by-extension.python.linear_search",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "by-extension.python.linear_search",
    "description": "by-extension.python.linear_search",
    "peekOfCode": "def main():\n    elapsed_time = timeit.timeit(visualization, number=1)\n    print(\"Elapsed time: \", round(elapsed_time, 7), \"sec.\")\nif __name__ == \"__main__\":\n    main()",
    "detail": "by-extension.python.linear_search",
    "documentation": {}
  },
  {
    "label": "Node",
    "kind": 6,
    "importPath": "by-extension.python.linked-list",
    "description": "by-extension.python.linked-list",
    "peekOfCode": "class Node:\n    def __init__(self, value=None, next_node=None):\n        self.value = value\n        self.next_node = next_node\n    def get_value(self):\n        return self.value\n    def get_next(self):\n        return self.next_node\n    def set_next(self, new_next):\n        self.next_node = new_next",
    "detail": "by-extension.python.linked-list",
    "documentation": {}
  },
  {
    "label": "LinkedList",
    "kind": 6,
    "importPath": "by-extension.python.linked-list",
    "description": "by-extension.python.linked-list",
    "peekOfCode": "class LinkedList:\n    def __init__(self):\n        self.head = None\n        self.tail = None\n    def add_to_tail(self, value):\n        # wrap the value in a node\n        new_node = Node(value)\n        # check if we're in an empty list state\n        # can also write: if not self.head and not self.tail\n        if self.head == None and self.tail == None:",
    "detail": "by-extension.python.linked-list",
    "documentation": {}
  },
  {
    "label": "gather_clone_urls",
    "kind": 2,
    "importPath": "by-extension.python.list-org-repositories",
    "description": "by-extension.python.list-org-repositories",
    "peekOfCode": "def gather_clone_urls(organization, no_forks=True):\n    all_repos = gh.repos.list(user=organization).all()\n    for repo in all_repos:\n        # Don't print the urls for repos that are forks.\n        if no_forks and repo.fork:\n            continue\n        yield repo.clone_url\nif __name__ == '__main__':\n    gh = pygithub3.Github()\n    clone_urls = gather_clone_urls(\"FOSSRIT\")",
    "detail": "by-extension.python.list-org-repositories",
    "documentation": {}
  },
  {
    "label": "gh",
    "kind": 5,
    "importPath": "by-extension.python.list-org-repositories",
    "description": "by-extension.python.list-org-repositories",
    "peekOfCode": "gh = None\ndef gather_clone_urls(organization, no_forks=True):\n    all_repos = gh.repos.list(user=organization).all()\n    for repo in all_repos:\n        # Don't print the urls for repos that are forks.\n        if no_forks and repo.fork:\n            continue\n        yield repo.clone_url\nif __name__ == '__main__':\n    gh = pygithub3.Github()",
    "detail": "by-extension.python.list-org-repositories",
    "documentation": {}
  },
  {
    "label": "logger",
    "kind": 5,
    "importPath": "by-extension.python.loggers_test",
    "description": "by-extension.python.loggers_test",
    "peekOfCode": "logger = logging.getLogger('your-module')\nlogger.addHandler(coloredlogs.ColoredStreamHandler())\n# Some examples.\nlogger.setLevel(logging.DEBUG)\nlogger.debug(\"this is a debugging message\")\nlogger.info(\"this is an informational message\")\nlogger.warn(\"this is a warning message\")\nlogger.error(\"this is an error message\")\nlogger.fatal(\"this is a fatal message\")\nlogger.critical(\"this is a critical message\")",
    "detail": "by-extension.python.loggers_test",
    "documentation": {}
  },
  {
    "label": "longest_common_subsequence",
    "kind": 2,
    "importPath": "by-extension.python.longest_common_subsequence",
    "description": "by-extension.python.longest_common_subsequence",
    "peekOfCode": "def longest_common_subsequence(str1, str2):\n    n, m = len(str1), len(str2)\n    # create dp matrix\n    dp = [[0 for j in range(m + 1)] for i in range(n + 1)]\n    # run dp\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            # checks only in 3 directions in the table\n            # in short: to the current position dp could come from those 3 previous positions\n            #   ^  ^",
    "detail": "by-extension.python.longest_common_subsequence",
    "documentation": {}
  },
  {
    "label": "longest_common_substring",
    "kind": 2,
    "importPath": "by-extension.python.longest_common_substring",
    "description": "by-extension.python.longest_common_substring",
    "peekOfCode": "def longest_common_substring(str1, str2):\n    n, m = len(str1), len(str2)\n    # instead of creating a whole dp table, use only 2 rows (current and previous row)\n    curr = [0 for j in range(m + 1)]\n    prev = []\n    max_length = 0\n    max_idx = 0\n    for i in range(1, n + 1):\n        # save the previous row and create the current row\n        prev = curr",
    "detail": "by-extension.python.longest_common_substring",
    "documentation": {}
  },
  {
    "label": "longest_increasing_subsequence_1",
    "kind": 2,
    "importPath": "by-extension.python.longest_increasing_subsequence",
    "description": "by-extension.python.longest_increasing_subsequence",
    "peekOfCode": "def longest_increasing_subsequence_1(nums):\n    n = len(nums)\n    if n == 0:\n        return 0\n    dp = [1 for i in range(n)]\n    max_val = 1\n    # run dp\n    for i in range(n):\n        for j in range(i):\n            if nums[j] < nums[i]:",
    "detail": "by-extension.python.longest_increasing_subsequence",
    "documentation": {}
  },
  {
    "label": "longest_increasing_subsequence_2",
    "kind": 2,
    "importPath": "by-extension.python.longest_increasing_subsequence",
    "description": "by-extension.python.longest_increasing_subsequence",
    "peekOfCode": "def longest_increasing_subsequence_2(nums):\n    n = len(nums)\n    if n == 0:\n        return 0\n    # the last dp array result in longest increasing subsequence\n    dp = []\n    for i in range(n):\n        idx = binary_search(dp, nums[i])\n        k = len(dp)\n        if idx == k:",
    "detail": "by-extension.python.longest_increasing_subsequence",
    "documentation": {}
  },
  {
    "label": "binary_search",
    "kind": 2,
    "importPath": "by-extension.python.longest_increasing_subsequence",
    "description": "by-extension.python.longest_increasing_subsequence",
    "peekOfCode": "def binary_search(dp, target):\n    l = 0\n    r = len(dp) - 1\n    while l <= r:\n        mid = l + (r - l) // 2\n        if dp[mid][-1] == target:\n            return mid\n        elif dp[mid][-1] < target:\n            l = mid + 1\n        else:",
    "detail": "by-extension.python.longest_increasing_subsequence",
    "documentation": {}
  },
  {
    "label": "arr",
    "kind": 5,
    "importPath": "by-extension.python.longest_increasing_subsequence",
    "description": "by-extension.python.longest_increasing_subsequence",
    "peekOfCode": "arr = [10, 9, 2, 5, 3, 7, 101, 18]\nprint(longest_increasing_subsequence_1(arr))\nprint(longest_increasing_subsequence_2(arr))\n# Test 2\n# Correct result => [1, 2, 3]\narr = [1, 2, 3]\nprint(longest_increasing_subsequence_1(arr))\nprint(longest_increasing_subsequence_2(arr))\n# Test 3\n# Correct result => [1, 2, 5, 7, 12] - one of the possible combinations",
    "detail": "by-extension.python.longest_increasing_subsequence",
    "documentation": {}
  },
  {
    "label": "arr",
    "kind": 5,
    "importPath": "by-extension.python.longest_increasing_subsequence",
    "description": "by-extension.python.longest_increasing_subsequence",
    "peekOfCode": "arr = [1, 2, 3]\nprint(longest_increasing_subsequence_1(arr))\nprint(longest_increasing_subsequence_2(arr))\n# Test 3\n# Correct result => [1, 2, 5, 7, 12] - one of the possible combinations\narr = [10, 1, 3, 8, 2, 0, 5, 7, 12, 3]\nprint(longest_increasing_subsequence_1(arr))\nprint(longest_increasing_subsequence_2(arr))\n# Test 4\n# Correct result => [1, 2, 3, 4, 5, 6]",
    "detail": "by-extension.python.longest_increasing_subsequence",
    "documentation": {}
  },
  {
    "label": "arr",
    "kind": 5,
    "importPath": "by-extension.python.longest_increasing_subsequence",
    "description": "by-extension.python.longest_increasing_subsequence",
    "peekOfCode": "arr = [10, 1, 3, 8, 2, 0, 5, 7, 12, 3]\nprint(longest_increasing_subsequence_1(arr))\nprint(longest_increasing_subsequence_2(arr))\n# Test 4\n# Correct result => [1, 2, 3, 4, 5, 6]\narr = [12, 1, 11, 2, 10, 3, 9, 4, 8, 5, 7, 6]\nprint(longest_increasing_subsequence_1(arr))\nprint(longest_increasing_subsequence_2(arr))\n# Test 5\n# Correct result => [1, 2, 3]",
    "detail": "by-extension.python.longest_increasing_subsequence",
    "documentation": {}
  },
  {
    "label": "arr",
    "kind": 5,
    "importPath": "by-extension.python.longest_increasing_subsequence",
    "description": "by-extension.python.longest_increasing_subsequence",
    "peekOfCode": "arr = [12, 1, 11, 2, 10, 3, 9, 4, 8, 5, 7, 6]\nprint(longest_increasing_subsequence_1(arr))\nprint(longest_increasing_subsequence_2(arr))\n# Test 5\n# Correct result => [1, 2, 3]\narr = [1, 4, 2, 0, 3, 1]\nprint(longest_increasing_subsequence_1(arr))\nprint(longest_increasing_subsequence_2(arr))\n# Test 6\n# Correct result => [3] - one of the possible combinations",
    "detail": "by-extension.python.longest_increasing_subsequence",
    "documentation": {}
  },
  {
    "label": "arr",
    "kind": 5,
    "importPath": "by-extension.python.longest_increasing_subsequence",
    "description": "by-extension.python.longest_increasing_subsequence",
    "peekOfCode": "arr = [1, 4, 2, 0, 3, 1]\nprint(longest_increasing_subsequence_1(arr))\nprint(longest_increasing_subsequence_2(arr))\n# Test 6\n# Correct result => [3] - one of the possible combinations\narr = [7, 5, 5, 5, 5, 5, 3]\nprint(longest_increasing_subsequence_1(arr))\nprint(longest_increasing_subsequence_2(arr))",
    "detail": "by-extension.python.longest_increasing_subsequence",
    "documentation": {}
  },
  {
    "label": "arr",
    "kind": 5,
    "importPath": "by-extension.python.longest_increasing_subsequence",
    "description": "by-extension.python.longest_increasing_subsequence",
    "peekOfCode": "arr = [7, 5, 5, 5, 5, 5, 3]\nprint(longest_increasing_subsequence_1(arr))\nprint(longest_increasing_subsequence_2(arr))",
    "detail": "by-extension.python.longest_increasing_subsequence",
    "documentation": {}
  },
  {
    "label": "notify",
    "kind": 2,
    "importPath": "by-extension.python.mail",
    "description": "by-extension.python.mail",
    "peekOfCode": "def notify(msg, submsg=\"mail.py : auto mailer (with notify-send)\"):\n ''' Notification using subprocess and notify-send.\n Also print the informations directly to the screen.\n Fails simply if notify-send is not found.'''\n try:\n  subprocess.Popen(['notify-send', msg, submsg])\n except:\n  print \"notify-send : not-found !\"\n  return -1\n print \"msg=%s\\nsubmsg=%s\" % (msg, submsg)",
    "detail": "by-extension.python.mail",
    "documentation": {}
  },
  {
    "label": "send_me_an_email",
    "kind": 2,
    "importPath": "by-extension.python.mail",
    "description": "by-extension.python.mail",
    "peekOfCode": "def send_me_an_email(message, subj=\"[LOG] no object\", me=\"jarvisATcransDOTorg\".replace(\"AT\",\"@\").replace(\"DOT\",\".\"), you=\"jarvisATcransDOTorg\".replace(\"AT\",\"@\").replace(\"DOT\",\".\"), my_identity=\"jarvis log\"):\n\t\"\"\" Send a message [message] by email.\n\tThe content of the email is [message], the subject is [subj].\n\tThe sender is [me], not necessary a valid sender for the SMTP.\n\tThe mail will be sent to [you].\n\tAuto configure with SMTP server on localhost in the cr@ns server (http://www.crans.org)\n\t(c) Lilian Besson, 2012-2013.\n\t\"\"\"\n\tnotify(subj, message+\"\\n### ME=\"+me+\" YOU=\"+you)\n\tmsg = MIMEText(message+(signature % me))",
    "detail": "by-extension.python.mail",
    "documentation": {}
  },
  {
    "label": "\tmsg",
    "kind": 5,
    "importPath": "by-extension.python.mail",
    "description": "by-extension.python.mail",
    "peekOfCode": "\tmsg = MIMEText(message+(signature % me))\n\t# The order is \"important\", to act like a real mail client !\n\tmsg['From'] = my_identity+\" <\"+me+\">\"\n\tmsg['To'] = you\n\tmsg['Subject'] = subj\n\t# Send the message via our own SMTP server, but don't include the\n\t# envelope header.\n\ts = smtplib.SMTP('smtp.crans.org')\n\t# s = smtplib.SMTP('localhost')\n\ts.sendmail(me, [you], msg.as_string())",
    "detail": "by-extension.python.mail",
    "documentation": {}
  },
  {
    "label": "\tmsg['From']",
    "kind": 5,
    "importPath": "by-extension.python.mail",
    "description": "by-extension.python.mail",
    "peekOfCode": "\tmsg['From'] = my_identity+\" <\"+me+\">\"\n\tmsg['To'] = you\n\tmsg['Subject'] = subj\n\t# Send the message via our own SMTP server, but don't include the\n\t# envelope header.\n\ts = smtplib.SMTP('smtp.crans.org')\n\t# s = smtplib.SMTP('localhost')\n\ts.sendmail(me, [you], msg.as_string())\n\ts.quit()\n\tprint \"An email has been sent to %s, from %s <%s>.\" % (you, my_identity, me)",
    "detail": "by-extension.python.mail",
    "documentation": {}
  },
  {
    "label": "\tmsg['To']",
    "kind": 5,
    "importPath": "by-extension.python.mail",
    "description": "by-extension.python.mail",
    "peekOfCode": "\tmsg['To'] = you\n\tmsg['Subject'] = subj\n\t# Send the message via our own SMTP server, but don't include the\n\t# envelope header.\n\ts = smtplib.SMTP('smtp.crans.org')\n\t# s = smtplib.SMTP('localhost')\n\ts.sendmail(me, [you], msg.as_string())\n\ts.quit()\n\tprint \"An email has been sent to %s, from %s <%s>.\" % (you, my_identity, me)\n\tprint \"Title of the email : \\n%s\" % subj",
    "detail": "by-extension.python.mail",
    "documentation": {}
  },
  {
    "label": "\tmsg['Subject']",
    "kind": 5,
    "importPath": "by-extension.python.mail",
    "description": "by-extension.python.mail",
    "peekOfCode": "\tmsg['Subject'] = subj\n\t# Send the message via our own SMTP server, but don't include the\n\t# envelope header.\n\ts = smtplib.SMTP('smtp.crans.org')\n\t# s = smtplib.SMTP('localhost')\n\ts.sendmail(me, [you], msg.as_string())\n\ts.quit()\n\tprint \"An email has been sent to %s, from %s <%s>.\" % (you, my_identity, me)\n\tprint \"Title of the email : \\n%s\" % subj\n\tprint \"Content of the email : \\n%s\" % message",
    "detail": "by-extension.python.mail",
    "documentation": {}
  },
  {
    "label": "\ts",
    "kind": 5,
    "importPath": "by-extension.python.mail",
    "description": "by-extension.python.mail",
    "peekOfCode": "\ts = smtplib.SMTP('smtp.crans.org')\n\t# s = smtplib.SMTP('localhost')\n\ts.sendmail(me, [you], msg.as_string())\n\ts.quit()\n\tprint \"An email has been sent to %s, from %s <%s>.\" % (you, my_identity, me)\n\tprint \"Title of the email : \\n%s\" % subj\n\tprint \"Content of the email : \\n%s\" % message\nimport sys, os\nif __name__ == '__main__':\n  if '-h' in sys.argv or '--help' in sys.argv:",
    "detail": "by-extension.python.mail",
    "documentation": {}
  },
  {
    "label": "process_inbound_message",
    "kind": 2,
    "importPath": "by-extension.python.mailgun",
    "description": "by-extension.python.mailgun",
    "peekOfCode": "def process_inbound_message(request):\n    to_email = parseaddr(request.POST['To'])[1]\n    from_email = parseaddr(request.POST['From'])[1]\n    try:\n        group_id = email_to_group_id(to_email)\n    except Exception:\n        logging.info('%r is not a valid email address', to_email)\n        return HttpResponse(status=500)\n    payload = EmailReplyParser.parse_reply(request.POST['body-plain']).strip()\n    if not payload:",
    "detail": "by-extension.python.mailgun",
    "documentation": {}
  },
  {
    "label": "send_me_an_email",
    "kind": 2,
    "importPath": "by-extension.python.mail_ghost",
    "description": "by-extension.python.mail_ghost",
    "peekOfCode": "def send_me_an_email(message, subj=\"[LOG] no object\", me=defaultaddress,\n                     you=defaultaddress, my_identity=\"jarvis\"):\n    \"\"\" Send a message [message] by email.\n    The content of the email is [message], the subject is [subj].\n    The sender is [me], not necessary a valid sender for the SMTP.\n    The mail will be sent to [you].\n    Auto configured with SMTP server (smtp.crans.org) with SSL support for the cr@ns server (http://www.crans.org)\n    (c) Lilian Besson, 2012-2014.\n    \"\"\"\n    msg = MIMEText(\"%s\" % (message + (signature % me)).replace(\"\\n\", '\\n'), _charset=\"utf-8\")",
    "detail": "by-extension.python.mail_ghost",
    "documentation": {}
  },
  {
    "label": "defaultaddress",
    "kind": 5,
    "importPath": "by-extension.python.mail_ghost",
    "description": "by-extension.python.mail_ghost",
    "peekOfCode": "defaultaddress = \"jarvisATcransDOTorg\".replace(\"AT\", \"@\").replace(\"DOT\", \".\")\nsignature = \"\"\"\n--\n%s\n\"\"\"\ndef send_me_an_email(message, subj=\"[LOG] no object\", me=defaultaddress,\n                     you=defaultaddress, my_identity=\"jarvis\"):\n    \"\"\" Send a message [message] by email.\n    The content of the email is [message], the subject is [subj].\n    The sender is [me], not necessary a valid sender for the SMTP.",
    "detail": "by-extension.python.mail_ghost",
    "documentation": {}
  },
  {
    "label": "signature",
    "kind": 5,
    "importPath": "by-extension.python.mail_ghost",
    "description": "by-extension.python.mail_ghost",
    "peekOfCode": "signature = \"\"\"\n--\n%s\n\"\"\"\ndef send_me_an_email(message, subj=\"[LOG] no object\", me=defaultaddress,\n                     you=defaultaddress, my_identity=\"jarvis\"):\n    \"\"\" Send a message [message] by email.\n    The content of the email is [message], the subject is [subj].\n    The sender is [me], not necessary a valid sender for the SMTP.\n    The mail will be sent to [you].",
    "detail": "by-extension.python.mail_ghost",
    "documentation": {}
  },
  {
    "label": "send_me_an_email",
    "kind": 2,
    "importPath": "by-extension.python.mail_html",
    "description": "by-extension.python.mail_html",
    "peekOfCode": "def send_me_an_email(message, subj=\"[LOG] no object\", me=defaultaddress,\n                     you=defaultaddress, my_identity=\"jarvis (HTML)\"):\n    \"\"\" Send a message [message] by email.\n    The content of the email is [message] (encoded as HTML), the subject is [subj].\n    The sender is [me], not necessary a valid sender for the SMTP.\n    The mail will be sent to [you].\n    Auto configured with SMTP server (smtp.crans.org) with SSL support for the cr@ns server (http://www.crans.org)\n    (c) Lilian Besson, 2014.\n    \"\"\"\n    msg = MIMEText(\"%s\" % (message + (signature % me)).replace(\"\\n\", '\\n'), _charset=None, _subtype=\"html\")",
    "detail": "by-extension.python.mail_html",
    "documentation": {}
  },
  {
    "label": "datetoday",
    "kind": 5,
    "importPath": "by-extension.python.mail_html",
    "description": "by-extension.python.mail_html",
    "peekOfCode": "datetoday = date.today().isoformat()\ndefaultaddress = \"jarvisATcransDOTorg\".replace(\"AT\", \"@\").replace(\"DOT\", \".\")\nsignature = \"\"\"<br>-- <br>%s<br>\n<img style=\\\"display: none; vibility: hidden;\\\" src=\\\"https://ga-beacon.appspot.com/UA-38514290-15/mail_html.py/\"\"\" + datetoday + \"?pixel\\\" />\"\ndef send_me_an_email(message, subj=\"[LOG] no object\", me=defaultaddress,\n                     you=defaultaddress, my_identity=\"jarvis (HTML)\"):\n    \"\"\" Send a message [message] by email.\n    The content of the email is [message] (encoded as HTML), the subject is [subj].\n    The sender is [me], not necessary a valid sender for the SMTP.\n    The mail will be sent to [you].",
    "detail": "by-extension.python.mail_html",
    "documentation": {}
  },
  {
    "label": "defaultaddress",
    "kind": 5,
    "importPath": "by-extension.python.mail_html",
    "description": "by-extension.python.mail_html",
    "peekOfCode": "defaultaddress = \"jarvisATcransDOTorg\".replace(\"AT\", \"@\").replace(\"DOT\", \".\")\nsignature = \"\"\"<br>-- <br>%s<br>\n<img style=\\\"display: none; vibility: hidden;\\\" src=\\\"https://ga-beacon.appspot.com/UA-38514290-15/mail_html.py/\"\"\" + datetoday + \"?pixel\\\" />\"\ndef send_me_an_email(message, subj=\"[LOG] no object\", me=defaultaddress,\n                     you=defaultaddress, my_identity=\"jarvis (HTML)\"):\n    \"\"\" Send a message [message] by email.\n    The content of the email is [message] (encoded as HTML), the subject is [subj].\n    The sender is [me], not necessary a valid sender for the SMTP.\n    The mail will be sent to [you].\n    Auto configured with SMTP server (smtp.crans.org) with SSL support for the cr@ns server (http://www.crans.org)",
    "detail": "by-extension.python.mail_html",
    "documentation": {}
  },
  {
    "label": "signature",
    "kind": 5,
    "importPath": "by-extension.python.mail_html",
    "description": "by-extension.python.mail_html",
    "peekOfCode": "signature = \"\"\"<br>-- <br>%s<br>\n<img style=\\\"display: none; vibility: hidden;\\\" src=\\\"https://ga-beacon.appspot.com/UA-38514290-15/mail_html.py/\"\"\" + datetoday + \"?pixel\\\" />\"\ndef send_me_an_email(message, subj=\"[LOG] no object\", me=defaultaddress,\n                     you=defaultaddress, my_identity=\"jarvis (HTML)\"):\n    \"\"\" Send a message [message] by email.\n    The content of the email is [message] (encoded as HTML), the subject is [subj].\n    The sender is [me], not necessary a valid sender for the SMTP.\n    The mail will be sent to [you].\n    Auto configured with SMTP server (smtp.crans.org) with SSL support for the cr@ns server (http://www.crans.org)\n    (c) Lilian Besson, 2014.",
    "detail": "by-extension.python.mail_html",
    "documentation": {}
  },
  {
    "label": "send_me_an_email",
    "kind": 2,
    "importPath": "by-extension.python.mail_tel",
    "description": "by-extension.python.mail_tel",
    "peekOfCode": "def send_me_an_email(message, subj=\"[LOG] no object\", me=\"jarvisATcransDOTorg\".replace(\"AT\", \"@\").replace(\"DOT\", \".\"), you=\"0628412257ATsfrDOTfr\".replace(\"AT\", \"@\").replace(\"DOT\", \".\"), my_identity=\"jarvis log\"):\n    \"\"\" Send a message [message] by email.\n    The content of the email is [message], the subject is [subj].\n    The sender is [me], not necessary a valid sender for the SMTP.\n    The mail will be sent to [you].\n    Auto configure with SMTP server on localhost in the cr@ns server (http://www.crans.org)\n    (c) Lilian Besson, 2012-2013.\n    \"\"\"\n    msg = MIMEText(message + (signature % me))\n    # The order is \"important\", to act like a real mail client !",
    "detail": "by-extension.python.mail_tel",
    "documentation": {}
  },
  {
    "label": "signature",
    "kind": 5,
    "importPath": "by-extension.python.mail_tel",
    "description": "by-extension.python.mail_tel",
    "peekOfCode": "signature = \"\"\"\\n\n--\n%s\n\"\"\"\ndef send_me_an_email(message, subj=\"[LOG] no object\", me=\"jarvisATcransDOTorg\".replace(\"AT\", \"@\").replace(\"DOT\", \".\"), you=\"0628412257ATsfrDOTfr\".replace(\"AT\", \"@\").replace(\"DOT\", \".\"), my_identity=\"jarvis log\"):\n    \"\"\" Send a message [message] by email.\n    The content of the email is [message], the subject is [subj].\n    The sender is [me], not necessary a valid sender for the SMTP.\n    The mail will be sent to [you].\n    Auto configure with SMTP server on localhost in the cr@ns server (http://www.crans.org)",
    "detail": "by-extension.python.mail_tel",
    "documentation": {}
  },
  {
    "label": "url",
    "kind": 5,
    "importPath": "by-extension.python.mapper",
    "description": "by-extension.python.mapper",
    "peekOfCode": "url = \"https://scrapethissite.com\"\n# a queue of urls to be crawled\nnew_urls = deque([url])\n# a set of urls that we have already been processed \nprocessed_urls = set()\n# a set of domains inside the target website\nlocal_urls = set()\n# a set of domains outside the target website\nforeign_urls = set()\n# a set of broken urls",
    "detail": "by-extension.python.mapper",
    "documentation": {}
  },
  {
    "label": "new_urls",
    "kind": 5,
    "importPath": "by-extension.python.mapper",
    "description": "by-extension.python.mapper",
    "peekOfCode": "new_urls = deque([url])\n# a set of urls that we have already been processed \nprocessed_urls = set()\n# a set of domains inside the target website\nlocal_urls = set()\n# a set of domains outside the target website\nforeign_urls = set()\n# a set of broken urls\nbroken_urls = set()\n# process urls one by one until we exhaust the queue",
    "detail": "by-extension.python.mapper",
    "documentation": {}
  },
  {
    "label": "processed_urls",
    "kind": 5,
    "importPath": "by-extension.python.mapper",
    "description": "by-extension.python.mapper",
    "peekOfCode": "processed_urls = set()\n# a set of domains inside the target website\nlocal_urls = set()\n# a set of domains outside the target website\nforeign_urls = set()\n# a set of broken urls\nbroken_urls = set()\n# process urls one by one until we exhaust the queue\nwhile len(new_urls):\n    # move next url from the queue to the set of processed urls",
    "detail": "by-extension.python.mapper",
    "documentation": {}
  },
  {
    "label": "local_urls",
    "kind": 5,
    "importPath": "by-extension.python.mapper",
    "description": "by-extension.python.mapper",
    "peekOfCode": "local_urls = set()\n# a set of domains outside the target website\nforeign_urls = set()\n# a set of broken urls\nbroken_urls = set()\n# process urls one by one until we exhaust the queue\nwhile len(new_urls):\n    # move next url from the queue to the set of processed urls\n    url = new_urls.popleft()\n    processed_urls.add(url)",
    "detail": "by-extension.python.mapper",
    "documentation": {}
  },
  {
    "label": "foreign_urls",
    "kind": 5,
    "importPath": "by-extension.python.mapper",
    "description": "by-extension.python.mapper",
    "peekOfCode": "foreign_urls = set()\n# a set of broken urls\nbroken_urls = set()\n# process urls one by one until we exhaust the queue\nwhile len(new_urls):\n    # move next url from the queue to the set of processed urls\n    url = new_urls.popleft()\n    processed_urls.add(url)\n    # get url's content\n    print(\"Processing %s\" % url)",
    "detail": "by-extension.python.mapper",
    "documentation": {}
  },
  {
    "label": "broken_urls",
    "kind": 5,
    "importPath": "by-extension.python.mapper",
    "description": "by-extension.python.mapper",
    "peekOfCode": "broken_urls = set()\n# process urls one by one until we exhaust the queue\nwhile len(new_urls):\n    # move next url from the queue to the set of processed urls\n    url = new_urls.popleft()\n    processed_urls.add(url)\n    # get url's content\n    print(\"Processing %s\" % url)\n    try:\n        response = requests.get(url)",
    "detail": "by-extension.python.mapper",
    "documentation": {}
  },
  {
    "label": "max_profit_with_k_transactions",
    "kind": 2,
    "importPath": "by-extension.python.max_profit_k_transactions",
    "description": "by-extension.python.max_profit_k_transactions",
    "peekOfCode": "def max_profit_with_k_transactions(prices, k):\n    days = len(prices)\n    if days < 2:\n        # not enough days for a transaction\n        return 0\n    # transaction = buy + sell (2 separate days)\n    # in a day you can sell and after that buy a share\n    # (according to this, can't exists more transactions than the number of the prices/days)\n    k = min(k, days)\n    # create space optimized dp matrix",
    "detail": "by-extension.python.max_profit_k_transactions",
    "documentation": {}
  },
  {
    "label": "max_subarray_sum",
    "kind": 2,
    "importPath": "by-extension.python.max_subarray_sum",
    "description": "by-extension.python.max_subarray_sum",
    "peekOfCode": "def max_subarray_sum(a):\n    curr_sum = 0\n    max_sum = 0\n    for val in a:\n        # extend the current sum with the curren value; \n        # reset it to 0 if it is smaller than 0, we care only about non-negative sums\n        curr_sum = max(0, curr_sum + val)\n        # check if this is the max sum\n        max_sum = max(max_sum, curr_sum)\n    return max_sum",
    "detail": "by-extension.python.max_subarray_sum",
    "documentation": {}
  },
  {
    "label": "get_links",
    "kind": 2,
    "importPath": "by-extension.python.medium-scraper",
    "description": "by-extension.python.medium-scraper",
    "peekOfCode": "def get_links(tag, suffix):\n    url = 'https://medium.com/tag/' + tag\n    urls = [url + '/' + s for s in suffix]\n    links = []\n    for url in urls:\n        data = requests.get(url)\n        soup = BeautifulSoup(data.content, 'html.parser')\n        articles = soup.findAll('div', {\"class\": \"postArticle-readMore\"})\n        for i in articles:\n            links.append(i.a.get('href'))",
    "detail": "by-extension.python.medium-scraper",
    "documentation": {}
  },
  {
    "label": "get_article",
    "kind": 2,
    "importPath": "by-extension.python.medium-scraper",
    "description": "by-extension.python.medium-scraper",
    "peekOfCode": "def get_article(links):\n    articles = []\n    for link in links:\n        try:\n            article = {}\n            data = requests.get(link)\n            soup = BeautifulSoup(data.content, 'html.parser')\n            title = soup.findAll('title')[0]\n            title = title.get_text()\n            author = soup.findAll('meta', {\"name\": \"author\"})[0]",
    "detail": "by-extension.python.medium-scraper",
    "documentation": {}
  },
  {
    "label": "save_articles",
    "kind": 2,
    "importPath": "by-extension.python.medium-scraper",
    "description": "by-extension.python.medium-scraper",
    "peekOfCode": "def save_articles(articles, csv_file,  is_write = True):\n    csv_columns = ['author', 'claps', 'reading_time', 'link', 'title', 'text']\n    print(csv_file)\n    if is_write:\n        with open(csv_file, 'w') as csvfile:\n            writer = csv.DictWriter(csvfile, fieldnames=csv_columns, delimiter='|')\n            writer.writeheader()\n            for data in articles:\n                writer.writerow(data)\n            csvfile.close()",
    "detail": "by-extension.python.medium-scraper",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "by-extension.python.medium-scraper",
    "description": "by-extension.python.medium-scraper",
    "peekOfCode": "def main():\n    is_write = True\n    tags = input('Write tags in space separated format.\\n')\n    tags = tags.split(' ')\n    file_name = input('Write destination file name.\\n')\n    if len(file_name.split('.')) == 1:\n        file_name += '.csv'\n    suffixes = ['', 'latest', 'archive/2000', 'archive/2001', 'archive/2002', 'archive/2003', 'archive/2004', 'archive/2005', 'archive/2006', 'archive/2007', 'archive/2008', 'archive/2009',\n            'archive/2010', 'archive/2011', 'archive/2012', 'archive/2013', 'archive/2014', 'archive/2015', 'archive/2016', 'archive/2017', 'archive/2018']\n    for tag in tags:",
    "detail": "by-extension.python.medium-scraper",
    "documentation": {}
  },
  {
    "label": "memoize",
    "kind": 2,
    "importPath": "by-extension.python.memoize",
    "description": "by-extension.python.memoize",
    "peekOfCode": "def memoize(func):\n    cache = {}\n    def wrapped(*args, **kwargs):\n        key = (tuple(args), tuple(kwargs.items()))\n        if key not in cache:\n            cache[key] = func(*args, **kwargs)\n        return cache[key]\n    return wrapped",
    "detail": "by-extension.python.memoize",
    "documentation": {}
  },
  {
    "label": "merge_sort",
    "kind": 2,
    "importPath": "by-extension.python.merge_sort",
    "description": "by-extension.python.merge_sort",
    "peekOfCode": "def merge_sort(collection, length, counter):\n    if len(collection) > 1:\n        middle_position = len(collection) // 2\n        left = collection[:middle_position]\n        right = collection[middle_position:]\n        counter = merge_sort(left, length, counter)\n        counter = merge_sort(right, length, counter)\n        left_index, right_index, index = 0, 0, 0\n        while (left_index < len(left)) and (right_index < len(right)):\n            if left[left_index] < right[right_index]:",
    "detail": "by-extension.python.merge_sort",
    "documentation": {}
  },
  {
    "label": "visualization",
    "kind": 2,
    "importPath": "by-extension.python.merge_sort",
    "description": "by-extension.python.merge_sort",
    "peekOfCode": "def visualization():\n    counter = 0\n    length = 10\n    collection = [randint(0, length) for _ in range(length)]\n    print(\"Initial list:\", collection)\n    print(\"Visualization of algorithm work.\")\n    collection, counter = merge_sort(collection, length, counter)\n    print(\"Final list:\", collection)\n    print(\"Total numbers of passages:\", counter)\ndef main():",
    "detail": "by-extension.python.merge_sort",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "by-extension.python.merge_sort",
    "description": "by-extension.python.merge_sort",
    "peekOfCode": "def main():\n    elapsed_time = timeit.timeit(visualization, number=1)\n    print(\"Elapsed time: \", round(elapsed_time, 7), \"sec.\")\nif __name__ == \"__main__\":\n    main()",
    "detail": "by-extension.python.merge_sort",
    "documentation": {}
  },
  {
    "label": "migration_count",
    "kind": 5,
    "importPath": "by-extension.python.migrate_data",
    "description": "by-extension.python.migrate_data",
    "peekOfCode": "migration_count = str(len(ideas_to_migrate))\nprint (\"Number of suggestions to migrate: \" + migration_count)\ntarget_repo = g.get_repo(GITHUB_TARGET_REPO)\ncounter = 0\nprint ('Kicking off migration to GitHub...')\nfor idea in ideas_to_migrate:\n    counter += 1\n    print ('Migrating idea ' + str(counter) + ' of ' + migration_count + \"...\")\n    idea_text = '_No details provided._'\n    if idea['text']:",
    "detail": "by-extension.python.migrate_data",
    "documentation": {}
  },
  {
    "label": "target_repo",
    "kind": 5,
    "importPath": "by-extension.python.migrate_data",
    "description": "by-extension.python.migrate_data",
    "peekOfCode": "target_repo = g.get_repo(GITHUB_TARGET_REPO)\ncounter = 0\nprint ('Kicking off migration to GitHub...')\nfor idea in ideas_to_migrate:\n    counter += 1\n    print ('Migrating idea ' + str(counter) + ' of ' + migration_count + \"...\")\n    idea_text = '_No details provided._'\n    if idea['text']:\n        idea_text = f.clean(idea['text'])\n    # String that defines the attribution block of the issue.",
    "detail": "by-extension.python.migrate_data",
    "documentation": {}
  },
  {
    "label": "counter",
    "kind": 5,
    "importPath": "by-extension.python.migrate_data",
    "description": "by-extension.python.migrate_data",
    "peekOfCode": "counter = 0\nprint ('Kicking off migration to GitHub...')\nfor idea in ideas_to_migrate:\n    counter += 1\n    print ('Migrating idea ' + str(counter) + ' of ' + migration_count + \"...\")\n    idea_text = '_No details provided._'\n    if idea['text']:\n        idea_text = f.clean(idea['text'])\n    # String that defines the attribution block of the issue.\n    attribution_string = '\\n\\n----------\\n⚠ Idea migrated from UserVoice\\n\\n' + '**Created By:** ' + idea['creator']['name'] + '\\n**Created On:** ' + idea['created_at'] + '\\n**Votes at Migration:** ' + str(idea['vote_count']) + '\\n**Supporters at Migration:** ' + str(idea['supporters_count'])",
    "detail": "by-extension.python.migrate_data",
    "documentation": {}
  },
  {
    "label": "min_cost_coloring",
    "kind": 2,
    "importPath": "by-extension.python.min_cost_coloring",
    "description": "by-extension.python.min_cost_coloring",
    "peekOfCode": "def min_cost_coloring(dp):\n    # no need from a new dp matrix, you can use the input matrix\n    n = len(dp)\n    if n == 0:\n        return 0\n    m = len(dp[0])\n    if m < 2:\n        return -1\n    # save only the smallest 2 costs instead of searching the whole previous array\n    prev_min = [(0, -1), (0, -1)]",
    "detail": "by-extension.python.min_cost_coloring",
    "documentation": {}
  },
  {
    "label": "error_dialog",
    "kind": 2,
    "importPath": "by-extension.python.MOcamlViewFile",
    "description": "by-extension.python.MOcamlViewFile",
    "peekOfCode": "def error_dialog(parent, msg):\n    dialog = gtk.MessageDialog(parent,\n                               gtk.DIALOG_DESTROY_WITH_PARENT,\n                               gtk.MESSAGE_ERROR,\n                               gtk.BUTTONS_OK,\n                               msg)\n    dialog.run()\n    dialog.destroy()\ndef remove_all_marks(buffer):\n    begin, end = buffer.get_bounds()",
    "detail": "by-extension.python.MOcamlViewFile",
    "documentation": {}
  },
  {
    "label": "remove_all_marks",
    "kind": 2,
    "importPath": "by-extension.python.MOcamlViewFile",
    "description": "by-extension.python.MOcamlViewFile",
    "peekOfCode": "def remove_all_marks(buffer):\n    begin, end = buffer.get_bounds()\n    buffer.remove_source_marks(begin, end)\ndef load_file(buffer, path):\n    buffer.begin_not_undoable_action()\n    try:\n        txt = open(path).read()\n    except:\n        return False\n    buffer.set_text(txt)",
    "detail": "by-extension.python.MOcamlViewFile",
    "documentation": {}
  },
  {
    "label": "load_file",
    "kind": 2,
    "importPath": "by-extension.python.MOcamlViewFile",
    "description": "by-extension.python.MOcamlViewFile",
    "peekOfCode": "def load_file(buffer, path):\n    buffer.begin_not_undoable_action()\n    try:\n        txt = open(path).read()\n    except:\n        return False\n    buffer.set_text(txt)\n    buffer.set_data('filename', path)\n    buffer.end_not_undoable_action()\n    buffer.set_modified(False)",
    "detail": "by-extension.python.MOcamlViewFile",
    "documentation": {}
  },
  {
    "label": "open_file",
    "kind": 2,
    "importPath": "by-extension.python.MOcamlViewFile",
    "description": "by-extension.python.MOcamlViewFile",
    "peekOfCode": "def open_file(buffer, filename):\n    # get the new language for the file mimetype\n    manager = buffer.get_data('languages-manager')\n    # essai pour charger un style particulier\n    # gtk-source-style-scheme-manager-get-default\n    try:\n        stylescheme = buffer.get_style_scheme()  # un autre si possible\n    except:\n        # XXX A modifier si on veut un autre\n        manager2 = buffer.get_data('styles-scheme-manager')",
    "detail": "by-extension.python.MOcamlViewFile",
    "documentation": {}
  },
  {
    "label": "begin_print_cb",
    "kind": 2,
    "importPath": "by-extension.python.MOcamlViewFile",
    "description": "by-extension.python.MOcamlViewFile",
    "peekOfCode": "def begin_print_cb(operation, context, compositor):\n    while not compositor.paginate(context):\n        pass\n    n_pages = compositor.get_n_pages()\n    operation.set_n_pages(n_pages)\ndef draw_page_cb(operation, context, page_nr, compositor):\n    compositor.draw_page(context, page_nr)\n# Action callbacks\ndef numbers_toggled_cb(action, sourceview):\n    sourceview.set_show_line_numbers(action.get_active())",
    "detail": "by-extension.python.MOcamlViewFile",
    "documentation": {}
  },
  {
    "label": "draw_page_cb",
    "kind": 2,
    "importPath": "by-extension.python.MOcamlViewFile",
    "description": "by-extension.python.MOcamlViewFile",
    "peekOfCode": "def draw_page_cb(operation, context, page_nr, compositor):\n    compositor.draw_page(context, page_nr)\n# Action callbacks\ndef numbers_toggled_cb(action, sourceview):\n    sourceview.set_show_line_numbers(action.get_active())\ndef marks_toggled_cb(action, sourceview):\n    sourceview.set_show_line_marks(action.get_active())\ndef margin_toggled_cb(action, sourceview):\n    sourceview.set_show_right_margin(action.get_active())\ndef auto_indent_toggled_cb(action, sourceview):",
    "detail": "by-extension.python.MOcamlViewFile",
    "documentation": {}
  },
  {
    "label": "numbers_toggled_cb",
    "kind": 2,
    "importPath": "by-extension.python.MOcamlViewFile",
    "description": "by-extension.python.MOcamlViewFile",
    "peekOfCode": "def numbers_toggled_cb(action, sourceview):\n    sourceview.set_show_line_numbers(action.get_active())\ndef marks_toggled_cb(action, sourceview):\n    sourceview.set_show_line_marks(action.get_active())\ndef margin_toggled_cb(action, sourceview):\n    sourceview.set_show_right_margin(action.get_active())\ndef auto_indent_toggled_cb(action, sourceview):\n    sourceview.set_auto_indent(action.get_active())\ndef insert_spaces_toggled_cb(action, sourceview):\n    sourceview.set_insert_spaces_instead_of_tabs(action.get_active())",
    "detail": "by-extension.python.MOcamlViewFile",
    "documentation": {}
  },
  {
    "label": "marks_toggled_cb",
    "kind": 2,
    "importPath": "by-extension.python.MOcamlViewFile",
    "description": "by-extension.python.MOcamlViewFile",
    "peekOfCode": "def marks_toggled_cb(action, sourceview):\n    sourceview.set_show_line_marks(action.get_active())\ndef margin_toggled_cb(action, sourceview):\n    sourceview.set_show_right_margin(action.get_active())\ndef auto_indent_toggled_cb(action, sourceview):\n    sourceview.set_auto_indent(action.get_active())\ndef insert_spaces_toggled_cb(action, sourceview):\n    sourceview.set_insert_spaces_instead_of_tabs(action.get_active())\ndef tabs_toggled_cb(action, action2, sourceview):\n    sourceview.set_tab_width(action.get_current_value())",
    "detail": "by-extension.python.MOcamlViewFile",
    "documentation": {}
  },
  {
    "label": "margin_toggled_cb",
    "kind": 2,
    "importPath": "by-extension.python.MOcamlViewFile",
    "description": "by-extension.python.MOcamlViewFile",
    "peekOfCode": "def margin_toggled_cb(action, sourceview):\n    sourceview.set_show_right_margin(action.get_active())\ndef auto_indent_toggled_cb(action, sourceview):\n    sourceview.set_auto_indent(action.get_active())\ndef insert_spaces_toggled_cb(action, sourceview):\n    sourceview.set_insert_spaces_instead_of_tabs(action.get_active())\ndef tabs_toggled_cb(action, action2, sourceview):\n    sourceview.set_tab_width(action.get_current_value())\ndef new_view_cb(action, sourceview):\n    window = create_view_window(sourceview.get_buffer(), sourceview)",
    "detail": "by-extension.python.MOcamlViewFile",
    "documentation": {}
  },
  {
    "label": "auto_indent_toggled_cb",
    "kind": 2,
    "importPath": "by-extension.python.MOcamlViewFile",
    "description": "by-extension.python.MOcamlViewFile",
    "peekOfCode": "def auto_indent_toggled_cb(action, sourceview):\n    sourceview.set_auto_indent(action.get_active())\ndef insert_spaces_toggled_cb(action, sourceview):\n    sourceview.set_insert_spaces_instead_of_tabs(action.get_active())\ndef tabs_toggled_cb(action, action2, sourceview):\n    sourceview.set_tab_width(action.get_current_value())\ndef new_view_cb(action, sourceview):\n    window = create_view_window(sourceview.get_buffer(), sourceview)\n    window.set_default_size(683, 700)\n    window.show()",
    "detail": "by-extension.python.MOcamlViewFile",
    "documentation": {}
  },
  {
    "label": "insert_spaces_toggled_cb",
    "kind": 2,
    "importPath": "by-extension.python.MOcamlViewFile",
    "description": "by-extension.python.MOcamlViewFile",
    "peekOfCode": "def insert_spaces_toggled_cb(action, sourceview):\n    sourceview.set_insert_spaces_instead_of_tabs(action.get_active())\ndef tabs_toggled_cb(action, action2, sourceview):\n    sourceview.set_tab_width(action.get_current_value())\ndef new_view_cb(action, sourceview):\n    window = create_view_window(sourceview.get_buffer(), sourceview)\n    window.set_default_size(683, 700)\n    window.show()\ndef print_cb(action, sourceview):\n    window = sourceview.get_toplevel()",
    "detail": "by-extension.python.MOcamlViewFile",
    "documentation": {}
  },
  {
    "label": "tabs_toggled_cb",
    "kind": 2,
    "importPath": "by-extension.python.MOcamlViewFile",
    "description": "by-extension.python.MOcamlViewFile",
    "peekOfCode": "def tabs_toggled_cb(action, action2, sourceview):\n    sourceview.set_tab_width(action.get_current_value())\ndef new_view_cb(action, sourceview):\n    window = create_view_window(sourceview.get_buffer(), sourceview)\n    window.set_default_size(683, 700)\n    window.show()\ndef print_cb(action, sourceview):\n    window = sourceview.get_toplevel()\n    buffer = sourceview.get_buffer()\n    compositor = gtksourceview2.print_compositor_new_from_view(sourceview)",
    "detail": "by-extension.python.MOcamlViewFile",
    "documentation": {}
  },
  {
    "label": "new_view_cb",
    "kind": 2,
    "importPath": "by-extension.python.MOcamlViewFile",
    "description": "by-extension.python.MOcamlViewFile",
    "peekOfCode": "def new_view_cb(action, sourceview):\n    window = create_view_window(sourceview.get_buffer(), sourceview)\n    window.set_default_size(683, 700)\n    window.show()\ndef print_cb(action, sourceview):\n    window = sourceview.get_toplevel()\n    buffer = sourceview.get_buffer()\n    compositor = gtksourceview2.print_compositor_new_from_view(sourceview)\n    compositor.set_wrap_mode(gtk.WRAP_CHAR)\n    compositor.set_highlight_syntax(True)",
    "detail": "by-extension.python.MOcamlViewFile",
    "documentation": {}
  },
  {
    "label": "print_cb",
    "kind": 2,
    "importPath": "by-extension.python.MOcamlViewFile",
    "description": "by-extension.python.MOcamlViewFile",
    "peekOfCode": "def print_cb(action, sourceview):\n    window = sourceview.get_toplevel()\n    buffer = sourceview.get_buffer()\n    compositor = gtksourceview2.print_compositor_new_from_view(sourceview)\n    compositor.set_wrap_mode(gtk.WRAP_CHAR)\n    compositor.set_highlight_syntax(True)\n    compositor.set_print_line_numbers(5)\n    compositor.set_header_format(False, 'Imprimé dans %A', None, '%F')\n    filename = buffer.get_data('filename')\n    compositor.set_footer_format(True, '%T', filename, 'Page %N/%Q')",
    "detail": "by-extension.python.MOcamlViewFile",
    "documentation": {}
  },
  {
    "label": "open_file_cb",
    "kind": 2,
    "importPath": "by-extension.python.MOcamlViewFile",
    "description": "by-extension.python.MOcamlViewFile",
    "peekOfCode": "def open_file_cb(action, buffer):\n    chooser = gtk.FileChooserDialog('Ouvrir un fichier ...', None,\n                                    gtk.FILE_CHOOSER_ACTION_OPEN,\n                                    (gtk.STOCK_CANCEL, gtk.RESPONSE_CANCEL,\n                                     gtk.STOCK_OPEN, gtk.RESPONSE_OK))\n    response = chooser.run()\n    if response == gtk.RESPONSE_OK:\n        filename = chooser.get_filename()\n        if filename:\n            open_file(buffer, filename)",
    "detail": "by-extension.python.MOcamlViewFile",
    "documentation": {}
  },
  {
    "label": "update_cursor_position",
    "kind": 2,
    "importPath": "by-extension.python.MOcamlViewFile",
    "description": "by-extension.python.MOcamlViewFile",
    "peekOfCode": "def update_cursor_position(buffer, view):\n    tabwidth = view.get_tab_width()\n    pos_label = view.get_data('pos_label')\n    iter = buffer.get_iter_at_mark(buffer.get_insert())\n    nchars = iter.get_offset()\n    row = iter.get_line() + 1\n    start = iter.copy()\n    start.set_line_offset(0)\n    col = 0\n    while start.compare(iter) < 0:",
    "detail": "by-extension.python.MOcamlViewFile",
    "documentation": {}
  },
  {
    "label": "move_cursor_cb",
    "kind": 2,
    "importPath": "by-extension.python.MOcamlViewFile",
    "description": "by-extension.python.MOcamlViewFile",
    "peekOfCode": "def move_cursor_cb(buffer, cursoriter, mark, view):\n    update_cursor_position(buffer, view)\ndef window_deleted_cb(widget, ev, view):\n    if windows[0] == widget:\n        gtk.main_quit()\n    else:\n        # remove window from list\n        windows.remove(widget)\n        # we return False since we want the window destroyed\n        return False",
    "detail": "by-extension.python.MOcamlViewFile",
    "documentation": {}
  },
  {
    "label": "window_deleted_cb",
    "kind": 2,
    "importPath": "by-extension.python.MOcamlViewFile",
    "description": "by-extension.python.MOcamlViewFile",
    "peekOfCode": "def window_deleted_cb(widget, ev, view):\n    if windows[0] == widget:\n        gtk.main_quit()\n    else:\n        # remove window from list\n        windows.remove(widget)\n        # we return False since we want the window destroyed\n        return False\n    return True\ndef button_press_cb(view, ev):",
    "detail": "by-extension.python.MOcamlViewFile",
    "documentation": {}
  },
  {
    "label": "button_press_cb",
    "kind": 2,
    "importPath": "by-extension.python.MOcamlViewFile",
    "description": "by-extension.python.MOcamlViewFile",
    "peekOfCode": "def button_press_cb(view, ev):\n    buffer = view.get_buffer()\n    if not view.get_show_line_marks():\n        return False\n    # check that the click was on the left gutter\n    if ev.window == view.get_window(gtk.TEXT_WINDOW_LEFT):\n        if ev.button == 1:\n            mark_category = MARK_CATEGORY_1\n        else:\n            mark_category = MARK_CATEGORY_2",
    "detail": "by-extension.python.MOcamlViewFile",
    "documentation": {}
  },
  {
    "label": "create_view_window",
    "kind": 2,
    "importPath": "by-extension.python.MOcamlViewFile",
    "description": "by-extension.python.MOcamlViewFile",
    "peekOfCode": "def create_view_window(buffer, sourceview=None):\n    # window\n    window = gtk.Window(gtk.WINDOW_TOPLEVEL)\n    window.set_border_width(0)\n    window.set_title('MOcaml FileViewer [Naereen test]')\n    windows.append(window)  # this list contains all view windows\n    # view\n    view = gtksourceview2.View(buffer)\n    buffer.connect('mark_set', move_cursor_cb, view)\n    buffer.connect('changed', update_cursor_position, view)",
    "detail": "by-extension.python.MOcamlViewFile",
    "documentation": {}
  },
  {
    "label": "create_main_window",
    "kind": 2,
    "importPath": "by-extension.python.MOcamlViewFile",
    "description": "by-extension.python.MOcamlViewFile",
    "peekOfCode": "def create_main_window(buffer):\n    window = create_view_window(buffer)\n    ui_manager = window.get_data('ui_manager')\n    # buffer action group\n    action_group = gtk.ActionGroup('BufferActions')\n    action_group.add_actions(buffer_actions, buffer)\n    ui_manager.insert_action_group(action_group, 1)\n    # merge buffer ui\n    ui_manager.add_ui_from_string(buffer_ui_description)\n    # preselect menu checkitems",
    "detail": "by-extension.python.MOcamlViewFile",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "by-extension.python.MOcamlViewFile",
    "description": "by-extension.python.MOcamlViewFile",
    "peekOfCode": "def main(args):\n    # create buffer\n    lm = gtksourceview2.LanguageManager()\n    sm = gtksourceview2.StyleSchemeManager()\n    buffer = gtksourceview2.Buffer()\n    buffer.set_data('languages-manager', lm)\n    buffer.set_data('styles-scheme-manager', sm)\n    # parse arguments\n    if len(args) >= 2:\n        open_file(buffer, args[1])",
    "detail": "by-extension.python.MOcamlViewFile",
    "documentation": {}
  },
  {
    "label": "windows",
    "kind": 5,
    "importPath": "by-extension.python.MOcamlViewFile",
    "description": "by-extension.python.MOcamlViewFile",
    "peekOfCode": "windows = []    # this list contains all view windows\nMARK_CATEGORY_1 = 'one'\nMARK_CATEGORY_2 = 'two'\nDATADIR = '/usr/share'\ndef error_dialog(parent, msg):\n    dialog = gtk.MessageDialog(parent,\n                               gtk.DIALOG_DESTROY_WITH_PARENT,\n                               gtk.MESSAGE_ERROR,\n                               gtk.BUTTONS_OK,\n                               msg)",
    "detail": "by-extension.python.MOcamlViewFile",
    "documentation": {}
  },
  {
    "label": "MARK_CATEGORY_1",
    "kind": 5,
    "importPath": "by-extension.python.MOcamlViewFile",
    "description": "by-extension.python.MOcamlViewFile",
    "peekOfCode": "MARK_CATEGORY_1 = 'one'\nMARK_CATEGORY_2 = 'two'\nDATADIR = '/usr/share'\ndef error_dialog(parent, msg):\n    dialog = gtk.MessageDialog(parent,\n                               gtk.DIALOG_DESTROY_WITH_PARENT,\n                               gtk.MESSAGE_ERROR,\n                               gtk.BUTTONS_OK,\n                               msg)\n    dialog.run()",
    "detail": "by-extension.python.MOcamlViewFile",
    "documentation": {}
  },
  {
    "label": "MARK_CATEGORY_2",
    "kind": 5,
    "importPath": "by-extension.python.MOcamlViewFile",
    "description": "by-extension.python.MOcamlViewFile",
    "peekOfCode": "MARK_CATEGORY_2 = 'two'\nDATADIR = '/usr/share'\ndef error_dialog(parent, msg):\n    dialog = gtk.MessageDialog(parent,\n                               gtk.DIALOG_DESTROY_WITH_PARENT,\n                               gtk.MESSAGE_ERROR,\n                               gtk.BUTTONS_OK,\n                               msg)\n    dialog.run()\n    dialog.destroy()",
    "detail": "by-extension.python.MOcamlViewFile",
    "documentation": {}
  },
  {
    "label": "DATADIR",
    "kind": 5,
    "importPath": "by-extension.python.MOcamlViewFile",
    "description": "by-extension.python.MOcamlViewFile",
    "peekOfCode": "DATADIR = '/usr/share'\ndef error_dialog(parent, msg):\n    dialog = gtk.MessageDialog(parent,\n                               gtk.DIALOG_DESTROY_WITH_PARENT,\n                               gtk.MESSAGE_ERROR,\n                               gtk.BUTTONS_OK,\n                               msg)\n    dialog.run()\n    dialog.destroy()\ndef remove_all_marks(buffer):",
    "detail": "by-extension.python.MOcamlViewFile",
    "documentation": {}
  },
  {
    "label": "buffer_actions",
    "kind": 5,
    "importPath": "by-extension.python.MOcamlViewFile",
    "description": "by-extension.python.MOcamlViewFile",
    "peekOfCode": "buffer_actions = [\n    ('Open', gtk.STOCK_OPEN, '_Ouvre', '<control>O', 'Ouvre un fichier', open_file_cb),\n    ('Quit', gtk.STOCK_QUIT, '_Quitte', '<control>Q', 'Quitte l\\'application', gtk.main_quit)\n]\nview_actions = [\n    ('FileMenu', None, '_Fichier'),\n    ('ViewMenu', None, '_Vue'),\n    ('Print', gtk.STOCK_PRINT, '_Impression', '<control>P', 'Print the file', print_cb),\n    ('NewView', gtk.STOCK_NEW, '_Nouvelle Vue', None, 'Create a new view of the file', new_view_cb),\n    ('TabsWidth', None, '_Largeur des tabulations')",
    "detail": "by-extension.python.MOcamlViewFile",
    "documentation": {}
  },
  {
    "label": "view_actions",
    "kind": 5,
    "importPath": "by-extension.python.MOcamlViewFile",
    "description": "by-extension.python.MOcamlViewFile",
    "peekOfCode": "view_actions = [\n    ('FileMenu', None, '_Fichier'),\n    ('ViewMenu', None, '_Vue'),\n    ('Print', gtk.STOCK_PRINT, '_Impression', '<control>P', 'Print the file', print_cb),\n    ('NewView', gtk.STOCK_NEW, '_Nouvelle Vue', None, 'Create a new view of the file', new_view_cb),\n    ('TabsWidth', None, '_Largeur des tabulations')\n]\ntoggle_actions = [\n    ('ShowNumbers', None, 'Montre les numéros de _lignes', None, 'Toggle visibility of line numbers in the left margin', numbers_toggled_cb, False),\n    ('ShowMarkers', None, 'Montre les _Marqueurs', None, 'Toggle visibility of markers in the left margin', marks_toggled_cb, False),",
    "detail": "by-extension.python.MOcamlViewFile",
    "documentation": {}
  },
  {
    "label": "toggle_actions",
    "kind": 5,
    "importPath": "by-extension.python.MOcamlViewFile",
    "description": "by-extension.python.MOcamlViewFile",
    "peekOfCode": "toggle_actions = [\n    ('ShowNumbers', None, 'Montre les numéros de _lignes', None, 'Toggle visibility of line numbers in the left margin', numbers_toggled_cb, False),\n    ('ShowMarkers', None, 'Montre les _Marqueurs', None, 'Toggle visibility of markers in the left margin', marks_toggled_cb, False),\n    ('ShowMargin', None, 'Montre les M_arges', None, 'Toggle visibility of right margin indicator', margin_toggled_cb, False),\n    ('AutoIndent', None, 'Activer l\\'_auto-indentation', None, 'Toggle automatic auto indentation of text', auto_indent_toggled_cb, False),\n    ('InsertSpaces', None, 'Insérer des e_spaces au lieu des tabulations', None, 'Whether to insert space characters when inserting tabulations', insert_spaces_toggled_cb, False)\n]\nradio_actions = [\n    ('TabsWidth4', None, '4', None, 'Set tabulation width to 4 spaces', 4),\n    ('TabsWidth6', None, '6', None, 'Set tabulation width to 6 spaces', 6),",
    "detail": "by-extension.python.MOcamlViewFile",
    "documentation": {}
  },
  {
    "label": "radio_actions",
    "kind": 5,
    "importPath": "by-extension.python.MOcamlViewFile",
    "description": "by-extension.python.MOcamlViewFile",
    "peekOfCode": "radio_actions = [\n    ('TabsWidth4', None, '4', None, 'Set tabulation width to 4 spaces', 4),\n    ('TabsWidth6', None, '6', None, 'Set tabulation width to 6 spaces', 6),\n    ('TabsWidth8', None, '8', None, 'Set tabulation width to 8 spaces', 8),\n    ('TabsWidth10', None, '10', None, 'Set tabulation width to 10 spaces', 10),\n    ('TabsWidth12', None, '12', None, 'Set tabulation width to 12 spaces', 12),\n    ('TabsWidth14', None, '14', None, 'Set tabulation width to 14 spaces', 14)\n]\nview_ui_description = \"\"\"\n<ui>",
    "detail": "by-extension.python.MOcamlViewFile",
    "documentation": {}
  },
  {
    "label": "view_ui_description",
    "kind": 5,
    "importPath": "by-extension.python.MOcamlViewFile",
    "description": "by-extension.python.MOcamlViewFile",
    "peekOfCode": "view_ui_description = \"\"\"\n<ui>\n  <menubar name='MainMenu'>\n    <menu action='FileMenu'>\n      <menuitem action='NewView'/>\n      <placeholder name=\"FileMenuAdditions\"/>\n      <separator/>\n      <menuitem action='Print'/>\n    </menu>\n    <menu action='ViewMenu'>",
    "detail": "by-extension.python.MOcamlViewFile",
    "documentation": {}
  },
  {
    "label": "buffer_ui_description",
    "kind": 5,
    "importPath": "by-extension.python.MOcamlViewFile",
    "description": "by-extension.python.MOcamlViewFile",
    "peekOfCode": "buffer_ui_description = \"\"\"\n<ui>\n  <menubar name='MainMenu'>\n    <menu action='FileMenu'>\n      <placeholder name=\"FileMenuAdditions\">\n        <menuitem action='Open'/>\n      </placeholder>\n      <separator/>\n      <menuitem action='Quit'/>\n    </menu>",
    "detail": "by-extension.python.MOcamlViewFile",
    "documentation": {}
  },
  {
    "label": "getSumOfMultiple",
    "kind": 2,
    "importPath": "by-extension.python.multiples-of-3-and-5",
    "description": "by-extension.python.multiples-of-3-and-5",
    "peekOfCode": "def getSumOfMultiple(num, limit):\n  return int((ceil(limit / num) - 1) * ceil(limit / num) * num / 2)\ndef getSumOfMultiples(multiples, limit):\n  result = 0\n  sign = 1\n  for i in range(1, len(multiples) + 1):\n    for x in combinations(multiples, i):\n      result += sign * getSumOfMultiple(reduce(mul, x, 1), limit)\n    sign *= -1\n  return result",
    "detail": "by-extension.python.multiples-of-3-and-5",
    "documentation": {}
  },
  {
    "label": "getSumOfMultiples",
    "kind": 2,
    "importPath": "by-extension.python.multiples-of-3-and-5",
    "description": "by-extension.python.multiples-of-3-and-5",
    "peekOfCode": "def getSumOfMultiples(multiples, limit):\n  result = 0\n  sign = 1\n  for i in range(1, len(multiples) + 1):\n    for x in combinations(multiples, i):\n      result += sign * getSumOfMultiple(reduce(mul, x, 1), limit)\n    sign *= -1\n  return result",
    "detail": "by-extension.python.multiples-of-3-and-5",
    "documentation": {}
  },
  {
    "label": "multiplication_table",
    "kind": 2,
    "importPath": "by-extension.python.multiplication-table",
    "description": "by-extension.python.multiplication-table",
    "peekOfCode": "def multiplication_table():\n   value = int(input('please type a number: '))\n   for num in range(1, 11):\n      print(f'{value} * {num} = {value * num}' )\nmultiplication_table()",
    "detail": "by-extension.python.multiplication-table",
    "documentation": {}
  },
  {
    "label": "sleeptime",
    "kind": 2,
    "importPath": "by-extension.python.my-small-slack-bot",
    "description": "by-extension.python.my-small-slack-bot",
    "peekOfCode": "def sleeptime(lmbda=MEAN_TIME, use_poisson=True):\n    \"\"\"Random time until next message.\"\"\"\n    if use_poisson:\n        return poisson(lmbda)\n    else:\n        return lmbda\ndef sleep_bar(secs):\n    \"\"\"Sleep with a bar, or not\"\"\"\n    try:\n        # From progressbar example #3, https://github.com/niltonvolpato/python-progressbar/blob/master/examples.py#L67",
    "detail": "by-extension.python.my-small-slack-bot",
    "documentation": {}
  },
  {
    "label": "sleep_bar",
    "kind": 2,
    "importPath": "by-extension.python.my-small-slack-bot",
    "description": "by-extension.python.my-small-slack-bot",
    "peekOfCode": "def sleep_bar(secs):\n    \"\"\"Sleep with a bar, or not\"\"\"\n    try:\n        # From progressbar example #3, https://github.com/niltonvolpato/python-progressbar/blob/master/examples.py#L67\n        from progressbar import Bar, ETA, ProgressBar, ReverseBar\n        widgets = [Bar('>'), ' ', ETA(), ' ', ReverseBar('<')]\n        pbar = ProgressBar(widgets=widgets, maxval=100).start()\n        for i in range(100):\n            # do something\n            time.sleep(secs / 110.)",
    "detail": "by-extension.python.my-small-slack-bot",
    "documentation": {}
  },
  {
    "label": "random_line",
    "kind": 2,
    "importPath": "by-extension.python.my-small-slack-bot",
    "description": "by-extension.python.my-small-slack-bot",
    "peekOfCode": "def random_line(lines):\n    \"\"\"Read the file and select one line.\"\"\"\n    try:\n        return random.choice(lines).replace('`', '').replace('_', '')\n    except:  # Default quote\n        logging.info(\"Failed to read a random line from this list with {} lines...\".format(len(lines)))  # DEBUG\n        return \"I love you !\"\ndef get_reactions(list_of_ts_channel, sc):\n    \"\"\"Get the reaction of users on all the messages sent by the bot, to increase or decrease the frequency of messages.\"\"\"\n    scale_factor = 1.",
    "detail": "by-extension.python.my-small-slack-bot",
    "documentation": {}
  },
  {
    "label": "get_reactions",
    "kind": 2,
    "importPath": "by-extension.python.my-small-slack-bot",
    "description": "by-extension.python.my-small-slack-bot",
    "peekOfCode": "def get_reactions(list_of_ts_channel, sc):\n    \"\"\"Get the reaction of users on all the messages sent by the bot, to increase or decrease the frequency of messages.\"\"\"\n    scale_factor = 1.\n    try:\n        for (ts, c) in list_of_ts_channel:\n            # https://api.slack.com/methods/reactions.get\n            reaction = sc.api_call(\n                \"reactions.get\", channel=c, timestamp=ts\n            )\n            logging.debug(\"reaction =\", reaction)",
    "detail": "by-extension.python.my-small-slack-bot",
    "documentation": {}
  },
  {
    "label": "send",
    "kind": 2,
    "importPath": "by-extension.python.my-small-slack-bot",
    "description": "by-extension.python.my-small-slack-bot",
    "peekOfCode": "def send(text, sc, use_channel=USE_CHANNEL):\n    \"\"\"Send text to channel SLACK_CHANNEL with client sc.\n    - https://github.com/slackapi/python-slackclient#sending-a-message\n    \"\"\"\n    channel = SLACK_CHANNEL if use_channel else SLACK_USER\n    text = \"{}\\n> (Sent by an _open-source_ Python script :snake:, {}, written by Lilian Besson)\".format(text, URL)\n    logging.info(\"Sending the message '{}' to channel/user {} ...\".format(text, channel))\n    # https://api.slack.com/methods/chat.postMessage\n    return sc.api_call(\n        \"chat.postMessage\", channel=channel, text=text,",
    "detail": "by-extension.python.my-small-slack-bot",
    "documentation": {}
  },
  {
    "label": "loop",
    "kind": 2,
    "importPath": "by-extension.python.my-small-slack-bot",
    "description": "by-extension.python.my-small-slack-bot",
    "peekOfCode": "def loop(quote_file=QUOTE_FILE):\n    \"\"\"Main loop.\"\"\"\n    logging.info(\"Starting my Slack bot, reading random quotes from the file {}...\".format(quote_file))\n    # Get list of quotes and parameters\n    the_quote_file = open(quote_file, 'r')\n    lines = the_quote_file.readlines()\n    sc = SlackClient(SLACK_TOKEN)\n    lmbda = MEAN_TIME\n    list_of_ts_channel = []\n    # Start loop",
    "detail": "by-extension.python.my-small-slack-bot",
    "documentation": {}
  },
  {
    "label": "MINUTES",
    "kind": 5,
    "importPath": "by-extension.python.my-small-slack-bot",
    "description": "by-extension.python.my-small-slack-bot",
    "peekOfCode": "MINUTES = 60\nHOURS = 60 * MINUTES\nQUOTE_FILE = os.getenv(\"quotes\", expanduser(join(\"~\", \".quotes.txt\")))\nSLACK_TOKEN = open(expanduser(join(\"~\", \".slack_api_key\")), 'r').readline().strip()\nUSE_CHANNEL = False  # DEBUG\nUSE_CHANNEL = True\nSLACK_USER = \"@lilian\"\nSLACK_CHANNEL = \"#random\"\nMEAN_TIME = (12 * HOURS) if USE_CHANNEL else 30\nURL = \"https://bitbucket.org/lbesson/bin/src/master/my-small-slack-bot.py\"",
    "detail": "by-extension.python.my-small-slack-bot",
    "documentation": {}
  },
  {
    "label": "HOURS",
    "kind": 5,
    "importPath": "by-extension.python.my-small-slack-bot",
    "description": "by-extension.python.my-small-slack-bot",
    "peekOfCode": "HOURS = 60 * MINUTES\nQUOTE_FILE = os.getenv(\"quotes\", expanduser(join(\"~\", \".quotes.txt\")))\nSLACK_TOKEN = open(expanduser(join(\"~\", \".slack_api_key\")), 'r').readline().strip()\nUSE_CHANNEL = False  # DEBUG\nUSE_CHANNEL = True\nSLACK_USER = \"@lilian\"\nSLACK_CHANNEL = \"#random\"\nMEAN_TIME = (12 * HOURS) if USE_CHANNEL else 30\nURL = \"https://bitbucket.org/lbesson/bin/src/master/my-small-slack-bot.py\"\nPOSITIVE_REACTIONS = ['up', '+1', 'thumbsup']",
    "detail": "by-extension.python.my-small-slack-bot",
    "documentation": {}
  },
  {
    "label": "QUOTE_FILE",
    "kind": 5,
    "importPath": "by-extension.python.my-small-slack-bot",
    "description": "by-extension.python.my-small-slack-bot",
    "peekOfCode": "QUOTE_FILE = os.getenv(\"quotes\", expanduser(join(\"~\", \".quotes.txt\")))\nSLACK_TOKEN = open(expanduser(join(\"~\", \".slack_api_key\")), 'r').readline().strip()\nUSE_CHANNEL = False  # DEBUG\nUSE_CHANNEL = True\nSLACK_USER = \"@lilian\"\nSLACK_CHANNEL = \"#random\"\nMEAN_TIME = (12 * HOURS) if USE_CHANNEL else 30\nURL = \"https://bitbucket.org/lbesson/bin/src/master/my-small-slack-bot.py\"\nPOSITIVE_REACTIONS = ['up', '+1', 'thumbsup']\nNEGATIVES_REACTIONS = ['down', '-1', 'thumbsdown']",
    "detail": "by-extension.python.my-small-slack-bot",
    "documentation": {}
  },
  {
    "label": "SLACK_TOKEN",
    "kind": 5,
    "importPath": "by-extension.python.my-small-slack-bot",
    "description": "by-extension.python.my-small-slack-bot",
    "peekOfCode": "SLACK_TOKEN = open(expanduser(join(\"~\", \".slack_api_key\")), 'r').readline().strip()\nUSE_CHANNEL = False  # DEBUG\nUSE_CHANNEL = True\nSLACK_USER = \"@lilian\"\nSLACK_CHANNEL = \"#random\"\nMEAN_TIME = (12 * HOURS) if USE_CHANNEL else 30\nURL = \"https://bitbucket.org/lbesson/bin/src/master/my-small-slack-bot.py\"\nPOSITIVE_REACTIONS = ['up', '+1', 'thumbsup']\nNEGATIVES_REACTIONS = ['down', '-1', 'thumbsdown']\n# --- Functions",
    "detail": "by-extension.python.my-small-slack-bot",
    "documentation": {}
  },
  {
    "label": "USE_CHANNEL",
    "kind": 5,
    "importPath": "by-extension.python.my-small-slack-bot",
    "description": "by-extension.python.my-small-slack-bot",
    "peekOfCode": "USE_CHANNEL = False  # DEBUG\nUSE_CHANNEL = True\nSLACK_USER = \"@lilian\"\nSLACK_CHANNEL = \"#random\"\nMEAN_TIME = (12 * HOURS) if USE_CHANNEL else 30\nURL = \"https://bitbucket.org/lbesson/bin/src/master/my-small-slack-bot.py\"\nPOSITIVE_REACTIONS = ['up', '+1', 'thumbsup']\nNEGATIVES_REACTIONS = ['down', '-1', 'thumbsdown']\n# --- Functions\ndef sleeptime(lmbda=MEAN_TIME, use_poisson=True):",
    "detail": "by-extension.python.my-small-slack-bot",
    "documentation": {}
  },
  {
    "label": "USE_CHANNEL",
    "kind": 5,
    "importPath": "by-extension.python.my-small-slack-bot",
    "description": "by-extension.python.my-small-slack-bot",
    "peekOfCode": "USE_CHANNEL = True\nSLACK_USER = \"@lilian\"\nSLACK_CHANNEL = \"#random\"\nMEAN_TIME = (12 * HOURS) if USE_CHANNEL else 30\nURL = \"https://bitbucket.org/lbesson/bin/src/master/my-small-slack-bot.py\"\nPOSITIVE_REACTIONS = ['up', '+1', 'thumbsup']\nNEGATIVES_REACTIONS = ['down', '-1', 'thumbsdown']\n# --- Functions\ndef sleeptime(lmbda=MEAN_TIME, use_poisson=True):\n    \"\"\"Random time until next message.\"\"\"",
    "detail": "by-extension.python.my-small-slack-bot",
    "documentation": {}
  },
  {
    "label": "SLACK_USER",
    "kind": 5,
    "importPath": "by-extension.python.my-small-slack-bot",
    "description": "by-extension.python.my-small-slack-bot",
    "peekOfCode": "SLACK_USER = \"@lilian\"\nSLACK_CHANNEL = \"#random\"\nMEAN_TIME = (12 * HOURS) if USE_CHANNEL else 30\nURL = \"https://bitbucket.org/lbesson/bin/src/master/my-small-slack-bot.py\"\nPOSITIVE_REACTIONS = ['up', '+1', 'thumbsup']\nNEGATIVES_REACTIONS = ['down', '-1', 'thumbsdown']\n# --- Functions\ndef sleeptime(lmbda=MEAN_TIME, use_poisson=True):\n    \"\"\"Random time until next message.\"\"\"\n    if use_poisson:",
    "detail": "by-extension.python.my-small-slack-bot",
    "documentation": {}
  },
  {
    "label": "SLACK_CHANNEL",
    "kind": 5,
    "importPath": "by-extension.python.my-small-slack-bot",
    "description": "by-extension.python.my-small-slack-bot",
    "peekOfCode": "SLACK_CHANNEL = \"#random\"\nMEAN_TIME = (12 * HOURS) if USE_CHANNEL else 30\nURL = \"https://bitbucket.org/lbesson/bin/src/master/my-small-slack-bot.py\"\nPOSITIVE_REACTIONS = ['up', '+1', 'thumbsup']\nNEGATIVES_REACTIONS = ['down', '-1', 'thumbsdown']\n# --- Functions\ndef sleeptime(lmbda=MEAN_TIME, use_poisson=True):\n    \"\"\"Random time until next message.\"\"\"\n    if use_poisson:\n        return poisson(lmbda)",
    "detail": "by-extension.python.my-small-slack-bot",
    "documentation": {}
  },
  {
    "label": "MEAN_TIME",
    "kind": 5,
    "importPath": "by-extension.python.my-small-slack-bot",
    "description": "by-extension.python.my-small-slack-bot",
    "peekOfCode": "MEAN_TIME = (12 * HOURS) if USE_CHANNEL else 30\nURL = \"https://bitbucket.org/lbesson/bin/src/master/my-small-slack-bot.py\"\nPOSITIVE_REACTIONS = ['up', '+1', 'thumbsup']\nNEGATIVES_REACTIONS = ['down', '-1', 'thumbsdown']\n# --- Functions\ndef sleeptime(lmbda=MEAN_TIME, use_poisson=True):\n    \"\"\"Random time until next message.\"\"\"\n    if use_poisson:\n        return poisson(lmbda)\n    else:",
    "detail": "by-extension.python.my-small-slack-bot",
    "documentation": {}
  },
  {
    "label": "URL",
    "kind": 5,
    "importPath": "by-extension.python.my-small-slack-bot",
    "description": "by-extension.python.my-small-slack-bot",
    "peekOfCode": "URL = \"https://bitbucket.org/lbesson/bin/src/master/my-small-slack-bot.py\"\nPOSITIVE_REACTIONS = ['up', '+1', 'thumbsup']\nNEGATIVES_REACTIONS = ['down', '-1', 'thumbsdown']\n# --- Functions\ndef sleeptime(lmbda=MEAN_TIME, use_poisson=True):\n    \"\"\"Random time until next message.\"\"\"\n    if use_poisson:\n        return poisson(lmbda)\n    else:\n        return lmbda",
    "detail": "by-extension.python.my-small-slack-bot",
    "documentation": {}
  },
  {
    "label": "POSITIVE_REACTIONS",
    "kind": 5,
    "importPath": "by-extension.python.my-small-slack-bot",
    "description": "by-extension.python.my-small-slack-bot",
    "peekOfCode": "POSITIVE_REACTIONS = ['up', '+1', 'thumbsup']\nNEGATIVES_REACTIONS = ['down', '-1', 'thumbsdown']\n# --- Functions\ndef sleeptime(lmbda=MEAN_TIME, use_poisson=True):\n    \"\"\"Random time until next message.\"\"\"\n    if use_poisson:\n        return poisson(lmbda)\n    else:\n        return lmbda\ndef sleep_bar(secs):",
    "detail": "by-extension.python.my-small-slack-bot",
    "documentation": {}
  },
  {
    "label": "NEGATIVES_REACTIONS",
    "kind": 5,
    "importPath": "by-extension.python.my-small-slack-bot",
    "description": "by-extension.python.my-small-slack-bot",
    "peekOfCode": "NEGATIVES_REACTIONS = ['down', '-1', 'thumbsdown']\n# --- Functions\ndef sleeptime(lmbda=MEAN_TIME, use_poisson=True):\n    \"\"\"Random time until next message.\"\"\"\n    if use_poisson:\n        return poisson(lmbda)\n    else:\n        return lmbda\ndef sleep_bar(secs):\n    \"\"\"Sleep with a bar, or not\"\"\"",
    "detail": "by-extension.python.my-small-slack-bot",
    "documentation": {}
  },
  {
    "label": "reverse",
    "kind": 2,
    "importPath": "by-extension.python.not-great-way",
    "description": "by-extension.python.not-great-way",
    "peekOfCode": "def reverse(string):\n    string = \"\".join(reversed(string))\n    return string",
    "detail": "by-extension.python.not-great-way",
    "documentation": {}
  },
  {
    "label": "num_decodings",
    "kind": 2,
    "importPath": "by-extension.python.number_of_decodings",
    "description": "by-extension.python.number_of_decodings",
    "peekOfCode": "def num_decodings(code):\n    n = len(code)\n    dp = [0 for i in range(n)]\n    if n == 0:\n        return 0\n    dp[0] = 1\n    if n == 1:\n        return dp[0]\n    dp[1] = (code[1] != '0') + is_valid(code[0:2])\n    for i in range(2, n):",
    "detail": "by-extension.python.number_of_decodings",
    "documentation": {}
  },
  {
    "label": "is_valid",
    "kind": 2,
    "importPath": "by-extension.python.number_of_decodings",
    "description": "by-extension.python.number_of_decodings",
    "peekOfCode": "def is_valid(code):\n    k = int(code)\n    return (k < 27) and (k > 9)\n###########\n# Testing #\n###########\n# Test 1\n# Correct result => 5\nprint(num_decodings('12151'))\n# Test 2",
    "detail": "by-extension.python.number_of_decodings",
    "documentation": {}
  },
  {
    "label": "num_smses",
    "kind": 2,
    "importPath": "by-extension.python.number_of_smses",
    "description": "by-extension.python.number_of_smses",
    "peekOfCode": "def num_smses(sequence):\n    n = len(sequence)\n    dp = [0] * n\n    # dp starting values, check all 4 possible starting combinations\n    for i in range(min(4, n)):\n        if is_valid(sequence[0 : i+1]):\n            dp[i] = 1\n    # run dp\n    for i in range(1, n):\n        # check all 4 possible combinations (x, xx, xxx, xxxx)",
    "detail": "by-extension.python.number_of_smses",
    "documentation": {}
  },
  {
    "label": "is_valid",
    "kind": 2,
    "importPath": "by-extension.python.number_of_smses",
    "description": "by-extension.python.number_of_smses",
    "peekOfCode": "def is_valid(sequence):\n    ch = sequence[0]\n    for c in sequence:\n        if c != ch:\n            return False\n    if sequence == '0':\n        return True\n    if ((ch >= '2' and ch <= '6') or ch == '8') and (len(sequence) < 4):\n        return True\n    if (ch == '7') or (ch == '9'):",
    "detail": "by-extension.python.number_of_smses",
    "documentation": {}
  },
  {
    "label": "ColorMap",
    "kind": 6,
    "importPath": "by-extension.python.numpy_imshow",
    "description": "by-extension.python.numpy_imshow",
    "peekOfCode": "class ColorMap:\n    \"\"\" A colormap is used to map scalar values to colors. It is build by\n        adding couples of (value,color) where value must be between 0 and 1.\n        - The 'scale' method allows to specify the range of the colormap and\n        - the 'color' method then returns a color for any value.\n    \"\"\"\n    def __init__(self, colors, name=None):\n        self.colors = colors\n        self.min = 0\n        self.max = 1",
    "detail": "by-extension.python.numpy_imshow",
    "documentation": {}
  },
  {
    "label": "termimshow",
    "kind": 2,
    "importPath": "by-extension.python.numpy_imshow",
    "description": "by-extension.python.numpy_imshow",
    "peekOfCode": "def termimshow(Z, vmin=None, vmax=None, cmap=CM_Hot, show_cmap=True):\n    \"\"\" Show a 2D numpy array using terminal colors. \"\"\"\n    if len(Z.shape) != 2:\n        print(\"Cannot display non 2D array\")\n        return\n    vmin = vmin or Z.min()\n    vmax = vmax or Z.max()\n    cmap.scale(vmin, vmax)\n    # Build initialization string that setup terminal colors\n    init = ''",
    "detail": "by-extension.python.numpy_imshow",
    "documentation": {}
  },
  {
    "label": "CM_IceAndFire",
    "kind": 5,
    "importPath": "by-extension.python.numpy_imshow",
    "description": "by-extension.python.numpy_imshow",
    "peekOfCode": "CM_IceAndFire = ColorMap([(0.00, (0.0, 0.0, 1.0)),\n                         (0.25, (0.0, 0.5, 1.0)),\n                         (0.50, (1.0, 1.0, 1.0)),\n                         (0.75, (1.0, 1.0, 0.0)),\n                         (1.00, (1.0, 0.0, 0.0))], \"Ice and Fire\")\n# ==> GAME OF THRONES !\nCM_Ice = ColorMap([(0.00, (0.0, 0.0, 1.0)),\n                   (0.50, (0.5, 0.5, 1.0)),\n                   (1.00, (1.0, 1.0, 1.0))], \"Ice\")\nCM_Fire = ColorMap([(0.00, (1.0, 1.0, 1.0)),",
    "detail": "by-extension.python.numpy_imshow",
    "documentation": {}
  },
  {
    "label": "CM_Ice",
    "kind": 5,
    "importPath": "by-extension.python.numpy_imshow",
    "description": "by-extension.python.numpy_imshow",
    "peekOfCode": "CM_Ice = ColorMap([(0.00, (0.0, 0.0, 1.0)),\n                   (0.50, (0.5, 0.5, 1.0)),\n                   (1.00, (1.0, 1.0, 1.0))], \"Ice\")\nCM_Fire = ColorMap([(0.00, (1.0, 1.0, 1.0)),\n                    (0.50, (1.0, 1.0, 0.0)),\n                    (1.00, (1.0, 0.0, 0.0))], \"Fire\")\nCM_Hot = ColorMap([(0.00, (0.0, 0.0, 0.0)),\n                   (0.33, (1.0, 0.0, 0.0)),\n                   (0.66, (1.0, 1.0, 0.0)),\n                   (1.00, (1.0, 1.0, 1.0))], \"Hot\")",
    "detail": "by-extension.python.numpy_imshow",
    "documentation": {}
  },
  {
    "label": "CM_Fire",
    "kind": 5,
    "importPath": "by-extension.python.numpy_imshow",
    "description": "by-extension.python.numpy_imshow",
    "peekOfCode": "CM_Fire = ColorMap([(0.00, (1.0, 1.0, 1.0)),\n                    (0.50, (1.0, 1.0, 0.0)),\n                    (1.00, (1.0, 0.0, 0.0))], \"Fire\")\nCM_Hot = ColorMap([(0.00, (0.0, 0.0, 0.0)),\n                   (0.33, (1.0, 0.0, 0.0)),\n                   (0.66, (1.0, 1.0, 0.0)),\n                   (1.00, (1.0, 1.0, 1.0))], \"Hot\")\nCM_Grey = ColorMap([(0.00, (0.0, 0.0, 0.0)),\n                    (1.00, (1.0, 1.0, 1.0))], \"Grey\")\ndef termimshow(Z, vmin=None, vmax=None, cmap=CM_Hot, show_cmap=True):",
    "detail": "by-extension.python.numpy_imshow",
    "documentation": {}
  },
  {
    "label": "CM_Hot",
    "kind": 5,
    "importPath": "by-extension.python.numpy_imshow",
    "description": "by-extension.python.numpy_imshow",
    "peekOfCode": "CM_Hot = ColorMap([(0.00, (0.0, 0.0, 0.0)),\n                   (0.33, (1.0, 0.0, 0.0)),\n                   (0.66, (1.0, 1.0, 0.0)),\n                   (1.00, (1.0, 1.0, 1.0))], \"Hot\")\nCM_Grey = ColorMap([(0.00, (0.0, 0.0, 0.0)),\n                    (1.00, (1.0, 1.0, 1.0))], \"Grey\")\ndef termimshow(Z, vmin=None, vmax=None, cmap=CM_Hot, show_cmap=True):\n    \"\"\" Show a 2D numpy array using terminal colors. \"\"\"\n    if len(Z.shape) != 2:\n        print(\"Cannot display non 2D array\")",
    "detail": "by-extension.python.numpy_imshow",
    "documentation": {}
  },
  {
    "label": "CM_Grey",
    "kind": 5,
    "importPath": "by-extension.python.numpy_imshow",
    "description": "by-extension.python.numpy_imshow",
    "peekOfCode": "CM_Grey = ColorMap([(0.00, (0.0, 0.0, 0.0)),\n                    (1.00, (1.0, 1.0, 1.0))], \"Grey\")\ndef termimshow(Z, vmin=None, vmax=None, cmap=CM_Hot, show_cmap=True):\n    \"\"\" Show a 2D numpy array using terminal colors. \"\"\"\n    if len(Z.shape) != 2:\n        print(\"Cannot display non 2D array\")\n        return\n    vmin = vmin or Z.min()\n    vmax = vmax or Z.max()\n    cmap.scale(vmin, vmax)",
    "detail": "by-extension.python.numpy_imshow",
    "documentation": {}
  },
  {
    "label": "once",
    "kind": 6,
    "importPath": "by-extension.python.once",
    "description": "by-extension.python.once",
    "peekOfCode": "class once:\n    def __init__(self, func, times=1):\n        self.times = int(times)\n        self.func  = func\n    def __call__(self, *args, **kwargs):\n        if self.times > 0:\n            self.times -= 1\n            return self.func(*args, **kwargs)",
    "detail": "by-extension.python.once",
    "documentation": {}
  },
  {
    "label": "ordered_digits",
    "kind": 2,
    "importPath": "by-extension.python.ordered_digits",
    "description": "by-extension.python.ordered_digits",
    "peekOfCode": "def ordered_digits(number):\n    n = len(number)\n    dp = [[0 for j in range(10)] for i in range(2)]\n    for i in range(n):\n        min_prev = float('inf')\n        for j in range(10):\n            # find the min value from the previous digit and add it to the current value\n            min_prev = min(min_prev, dp[(i - 1) % 2][j])\n            # compute diff between the current digit and wanted digit\n            diff = abs(j - int(number[i]))",
    "detail": "by-extension.python.ordered_digits",
    "documentation": {}
  },
  {
    "label": "PasteBox",
    "kind": 6,
    "importPath": "by-extension.python.pastebox",
    "description": "by-extension.python.pastebox",
    "peekOfCode": "class PasteBox:\n    def __init__(self):\n        self.replyid = 0\n        self.mode = 'text'\n        self.ttl = 86400\n        self.authhash = None\n    def create(self, content):\n        VALUES = {'content': content,\n                  'replyid': self.replyid,\n                  'mode': self.mode,",
    "detail": "by-extension.python.pastebox",
    "documentation": {}
  },
  {
    "label": "usage",
    "kind": 2,
    "importPath": "by-extension.python.pastebox",
    "description": "by-extension.python.pastebox",
    "peekOfCode": "def usage():\n    print(\"\"\"\n    Usage: pastebox.py <option> <pasteid|file> ..\n    Options:\n    --authhash=<authhash>   authentication hash for additional protection ([a-z0-9])\n    --ttl=<ttl>             time to live in seconds\n    -s|--stdout             print paste to stdout\n    -d|--download           download and store to file\n    Usage examples:\n    lspci|pastebox.py        Upload input by piping",
    "detail": "by-extension.python.pastebox",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "by-extension.python.pastebox",
    "description": "by-extension.python.pastebox",
    "peekOfCode": "def main(argv):\n    try:\n        opts, args = getopt.getopt(argv, \"sdh\", [\"stdout\", \"download\", \"mode=\", \"authhash=\", \"ttl=\", \"help\"])\n    except getopt.GetoptError:\n        usage()\n        sys.exit(2)\n    paste = PasteBox()\n    for opt, arg in opts:\n        if opt in (\"--mode\"):\n            if arg:",
    "detail": "by-extension.python.pastebox",
    "documentation": {}
  },
  {
    "label": "URL",
    "kind": 5,
    "importPath": "by-extension.python.pastebox",
    "description": "by-extension.python.pastebox",
    "peekOfCode": "URL = 'http://p.boxnet.eu/'\nclass PasteBox:\n    def __init__(self):\n        self.replyid = 0\n        self.mode = 'text'\n        self.ttl = 86400\n        self.authhash = None\n    def create(self, content):\n        VALUES = {'content': content,\n                  'replyid': self.replyid,",
    "detail": "by-extension.python.pastebox",
    "documentation": {}
  },
  {
    "label": "menu",
    "kind": 2,
    "importPath": "by-extension.python.pdf2png-2",
    "description": "by-extension.python.pdf2png-2",
    "peekOfCode": "def menu():\n    global quality\n    print(\"\"\"\n        Image format: \n        1. Very High Resolution - 700 dpi\n        2. High Resolution - 500 dpi\n        3. Medium Resolution - 300 dpi\n        4. Low Resolution - 100 dpi\n        5. Very Low Resolution - 50 dpi\n        \"\"\")",
    "detail": "by-extension.python.pdf2png-2",
    "documentation": {}
  },
  {
    "label": "program",
    "kind": 2,
    "importPath": "by-extension.python.pdf2png-2",
    "description": "by-extension.python.pdf2png-2",
    "peekOfCode": "def program():\n    images = convert_from_path(f'{title}.pdf', quality)\n    for i, image in enumerate(images):\n        image.save(f'save_{i}.png')\nif __name__ == '__main__':\n    menu()",
    "detail": "by-extension.python.pdf2png-2",
    "documentation": {}
  },
  {
    "label": "title",
    "kind": 5,
    "importPath": "by-extension.python.pdf2png-2",
    "description": "by-extension.python.pdf2png-2",
    "peekOfCode": "title = input(\"Pdf files name: \")\ndef menu():\n    global quality\n    print(\"\"\"\n        Image format: \n        1. Very High Resolution - 700 dpi\n        2. High Resolution - 500 dpi\n        3. Medium Resolution - 300 dpi\n        4. Low Resolution - 100 dpi\n        5. Very Low Resolution - 50 dpi",
    "detail": "by-extension.python.pdf2png-2",
    "documentation": {}
  },
  {
    "label": "csv_file",
    "kind": 5,
    "importPath": "by-extension.python.plotnotes",
    "description": "by-extension.python.plotnotes",
    "peekOfCode": "csv_file = sys.argv[1]\ncsv_name = csv_file[:-3]\n#: Load in the csv file\ncsv_file_object = csv.reader(open(csv_file, 'rb'))\n#: Skip the fist line as it is a header\nheader = csv_file_object.next()\ndata = []\nfor row in csv_file_object:\n    data.append(row)  # adding each row to the data variable\n#: Then convert from a list to an array",
    "detail": "by-extension.python.plotnotes",
    "documentation": {}
  },
  {
    "label": "csv_name",
    "kind": 5,
    "importPath": "by-extension.python.plotnotes",
    "description": "by-extension.python.plotnotes",
    "peekOfCode": "csv_name = csv_file[:-3]\n#: Load in the csv file\ncsv_file_object = csv.reader(open(csv_file, 'rb'))\n#: Skip the fist line as it is a header\nheader = csv_file_object.next()\ndata = []\nfor row in csv_file_object:\n    data.append(row)  # adding each row to the data variable\n#: Then convert from a list to an array\ndata = np.array(data)",
    "detail": "by-extension.python.plotnotes",
    "documentation": {}
  },
  {
    "label": "csv_file_object",
    "kind": 5,
    "importPath": "by-extension.python.plotnotes",
    "description": "by-extension.python.plotnotes",
    "peekOfCode": "csv_file_object = csv.reader(open(csv_file, 'rb'))\n#: Skip the fist line as it is a header\nheader = csv_file_object.next()\ndata = []\nfor row in csv_file_object:\n    data.append(row)  # adding each row to the data variable\n#: Then convert from a list to an array\ndata = np.array(data)\n#: Just the notes\nnotes = data[::, 1].astype(np.float)",
    "detail": "by-extension.python.plotnotes",
    "documentation": {}
  },
  {
    "label": "header",
    "kind": 5,
    "importPath": "by-extension.python.plotnotes",
    "description": "by-extension.python.plotnotes",
    "peekOfCode": "header = csv_file_object.next()\ndata = []\nfor row in csv_file_object:\n    data.append(row)  # adding each row to the data variable\n#: Then convert from a list to an array\ndata = np.array(data)\n#: Just the notes\nnotes = data[::, 1].astype(np.float)\nnbnotes = np.size(notes)\n#: Sort decreasingly",
    "detail": "by-extension.python.plotnotes",
    "documentation": {}
  },
  {
    "label": "data",
    "kind": 5,
    "importPath": "by-extension.python.plotnotes",
    "description": "by-extension.python.plotnotes",
    "peekOfCode": "data = []\nfor row in csv_file_object:\n    data.append(row)  # adding each row to the data variable\n#: Then convert from a list to an array\ndata = np.array(data)\n#: Just the notes\nnotes = data[::, 1].astype(np.float)\nnbnotes = np.size(notes)\n#: Sort decreasingly\nind = np.argsort(notes)",
    "detail": "by-extension.python.plotnotes",
    "documentation": {}
  },
  {
    "label": "data",
    "kind": 5,
    "importPath": "by-extension.python.plotnotes",
    "description": "by-extension.python.plotnotes",
    "peekOfCode": "data = np.array(data)\n#: Just the notes\nnotes = data[::, 1].astype(np.float)\nnbnotes = np.size(notes)\n#: Sort decreasingly\nind = np.argsort(notes)\ndata = data[ind[::-1]]\nnotes = notes[ind[::-1]]\n#: The grades are between 0 and this value. Default is the French convention: 20.\nnoteMax = 20",
    "detail": "by-extension.python.plotnotes",
    "documentation": {}
  },
  {
    "label": "notes",
    "kind": 5,
    "importPath": "by-extension.python.plotnotes",
    "description": "by-extension.python.plotnotes",
    "peekOfCode": "notes = data[::, 1].astype(np.float)\nnbnotes = np.size(notes)\n#: Sort decreasingly\nind = np.argsort(notes)\ndata = data[ind[::-1]]\nnotes = notes[ind[::-1]]\n#: The grades are between 0 and this value. Default is the French convention: 20.\nnoteMax = 20\n###################################################################\n# I want now to produce annex files",
    "detail": "by-extension.python.plotnotes",
    "documentation": {}
  },
  {
    "label": "nbnotes",
    "kind": 5,
    "importPath": "by-extension.python.plotnotes",
    "description": "by-extension.python.plotnotes",
    "peekOfCode": "nbnotes = np.size(notes)\n#: Sort decreasingly\nind = np.argsort(notes)\ndata = data[ind[::-1]]\nnotes = notes[ind[::-1]]\n#: The grades are between 0 and this value. Default is the French convention: 20.\nnoteMax = 20\n###################################################################\n# I want now to produce annex files\nf = file(csv_name + \"table\", 'w')",
    "detail": "by-extension.python.plotnotes",
    "documentation": {}
  },
  {
    "label": "ind",
    "kind": 5,
    "importPath": "by-extension.python.plotnotes",
    "description": "by-extension.python.plotnotes",
    "peekOfCode": "ind = np.argsort(notes)\ndata = data[ind[::-1]]\nnotes = notes[ind[::-1]]\n#: The grades are between 0 and this value. Default is the French convention: 20.\nnoteMax = 20\n###################################################################\n# I want now to produce annex files\nf = file(csv_name + \"table\", 'w')\nf.write(\"%% Notes from '%s'\" % f.name)\nfor i in range(nbnotes):",
    "detail": "by-extension.python.plotnotes",
    "documentation": {}
  },
  {
    "label": "data",
    "kind": 5,
    "importPath": "by-extension.python.plotnotes",
    "description": "by-extension.python.plotnotes",
    "peekOfCode": "data = data[ind[::-1]]\nnotes = notes[ind[::-1]]\n#: The grades are between 0 and this value. Default is the French convention: 20.\nnoteMax = 20\n###################################################################\n# I want now to produce annex files\nf = file(csv_name + \"table\", 'w')\nf.write(\"%% Notes from '%s'\" % f.name)\nfor i in range(nbnotes):\n    f.write(\"\\n%s & %g/%i \\\\\\\\\" % (data[i, 0], notes[i], noteMax))",
    "detail": "by-extension.python.plotnotes",
    "documentation": {}
  },
  {
    "label": "notes",
    "kind": 5,
    "importPath": "by-extension.python.plotnotes",
    "description": "by-extension.python.plotnotes",
    "peekOfCode": "notes = notes[ind[::-1]]\n#: The grades are between 0 and this value. Default is the French convention: 20.\nnoteMax = 20\n###################################################################\n# I want now to produce annex files\nf = file(csv_name + \"table\", 'w')\nf.write(\"%% Notes from '%s'\" % f.name)\nfor i in range(nbnotes):\n    f.write(\"\\n%s & %g/%i \\\\\\\\\" % (data[i, 0], notes[i], noteMax))\n    print(\"I wrote <blue>'%s & %g/%i \\\\\\\\'<white> in <u>%s<U>...\" % (data[i, 0], notes[i], noteMax, f.name))",
    "detail": "by-extension.python.plotnotes",
    "documentation": {}
  },
  {
    "label": "noteMax",
    "kind": 5,
    "importPath": "by-extension.python.plotnotes",
    "description": "by-extension.python.plotnotes",
    "peekOfCode": "noteMax = 20\n###################################################################\n# I want now to produce annex files\nf = file(csv_name + \"table\", 'w')\nf.write(\"%% Notes from '%s'\" % f.name)\nfor i in range(nbnotes):\n    f.write(\"\\n%s & %g/%i \\\\\\\\\" % (data[i, 0], notes[i], noteMax))\n    print(\"I wrote <blue>'%s & %g/%i \\\\\\\\'<white> in <u>%s<U>...\" % (data[i, 0], notes[i], noteMax, f.name))\nminimale = np.min(notes)\nf = file(csv_name + \"minimale\", 'w')",
    "detail": "by-extension.python.plotnotes",
    "documentation": {}
  },
  {
    "label": "f",
    "kind": 5,
    "importPath": "by-extension.python.plotnotes",
    "description": "by-extension.python.plotnotes",
    "peekOfCode": "f = file(csv_name + \"table\", 'w')\nf.write(\"%% Notes from '%s'\" % f.name)\nfor i in range(nbnotes):\n    f.write(\"\\n%s & %g/%i \\\\\\\\\" % (data[i, 0], notes[i], noteMax))\n    print(\"I wrote <blue>'%s & %g/%i \\\\\\\\'<white> in <u>%s<U>...\" % (data[i, 0], notes[i], noteMax, f.name))\nminimale = np.min(notes)\nf = file(csv_name + \"minimale\", 'w')\nf.write(\"%g/%i\" % (minimale, noteMax))\nprint(\"I wrote the value of minimale (<cyan>%g<white>) to <u>%s<U>...\" % (minimale, f.name))\nargminimale = data[np.argmin(notes), 0]",
    "detail": "by-extension.python.plotnotes",
    "documentation": {}
  },
  {
    "label": "minimale",
    "kind": 5,
    "importPath": "by-extension.python.plotnotes",
    "description": "by-extension.python.plotnotes",
    "peekOfCode": "minimale = np.min(notes)\nf = file(csv_name + \"minimale\", 'w')\nf.write(\"%g/%i\" % (minimale, noteMax))\nprint(\"I wrote the value of minimale (<cyan>%g<white>) to <u>%s<U>...\" % (minimale, f.name))\nargminimale = data[np.argmin(notes), 0]\nf = file(csv_name + \"argminimale\", 'w')\nf.write(\"%s\" % argminimale)\nprint(\"I wrote the value of argminimale (<cyan>%s<white>) to <u>%s<U>...\" % (argminimale, f.name))\nmaximale = np.max(notes)\nf = file(csv_name + \"maximale\", 'w')",
    "detail": "by-extension.python.plotnotes",
    "documentation": {}
  },
  {
    "label": "f",
    "kind": 5,
    "importPath": "by-extension.python.plotnotes",
    "description": "by-extension.python.plotnotes",
    "peekOfCode": "f = file(csv_name + \"minimale\", 'w')\nf.write(\"%g/%i\" % (minimale, noteMax))\nprint(\"I wrote the value of minimale (<cyan>%g<white>) to <u>%s<U>...\" % (minimale, f.name))\nargminimale = data[np.argmin(notes), 0]\nf = file(csv_name + \"argminimale\", 'w')\nf.write(\"%s\" % argminimale)\nprint(\"I wrote the value of argminimale (<cyan>%s<white>) to <u>%s<U>...\" % (argminimale, f.name))\nmaximale = np.max(notes)\nf = file(csv_name + \"maximale\", 'w')\nf.write(\"%g/%i\" % (maximale, noteMax))",
    "detail": "by-extension.python.plotnotes",
    "documentation": {}
  },
  {
    "label": "argminimale",
    "kind": 5,
    "importPath": "by-extension.python.plotnotes",
    "description": "by-extension.python.plotnotes",
    "peekOfCode": "argminimale = data[np.argmin(notes), 0]\nf = file(csv_name + \"argminimale\", 'w')\nf.write(\"%s\" % argminimale)\nprint(\"I wrote the value of argminimale (<cyan>%s<white>) to <u>%s<U>...\" % (argminimale, f.name))\nmaximale = np.max(notes)\nf = file(csv_name + \"maximale\", 'w')\nf.write(\"%g/%i\" % (maximale, noteMax))\nprint(\"I wrote the value of maximale (<cyan>%g<white>) to <u>%s<U>...\" % (maximale, f.name))\nargmaximale = data[np.argmax(notes), 0]\nf = file(csv_name + \"argmaximale\", 'w')",
    "detail": "by-extension.python.plotnotes",
    "documentation": {}
  },
  {
    "label": "f",
    "kind": 5,
    "importPath": "by-extension.python.plotnotes",
    "description": "by-extension.python.plotnotes",
    "peekOfCode": "f = file(csv_name + \"argminimale\", 'w')\nf.write(\"%s\" % argminimale)\nprint(\"I wrote the value of argminimale (<cyan>%s<white>) to <u>%s<U>...\" % (argminimale, f.name))\nmaximale = np.max(notes)\nf = file(csv_name + \"maximale\", 'w')\nf.write(\"%g/%i\" % (maximale, noteMax))\nprint(\"I wrote the value of maximale (<cyan>%g<white>) to <u>%s<U>...\" % (maximale, f.name))\nargmaximale = data[np.argmax(notes), 0]\nf = file(csv_name + \"argmaximale\", 'w')\nf.write(\"%s\" % argmaximale)",
    "detail": "by-extension.python.plotnotes",
    "documentation": {}
  },
  {
    "label": "maximale",
    "kind": 5,
    "importPath": "by-extension.python.plotnotes",
    "description": "by-extension.python.plotnotes",
    "peekOfCode": "maximale = np.max(notes)\nf = file(csv_name + \"maximale\", 'w')\nf.write(\"%g/%i\" % (maximale, noteMax))\nprint(\"I wrote the value of maximale (<cyan>%g<white>) to <u>%s<U>...\" % (maximale, f.name))\nargmaximale = data[np.argmax(notes), 0]\nf = file(csv_name + \"argmaximale\", 'w')\nf.write(\"%s\" % argmaximale)\nprint(\"I wrote the value of argmaximale (<cyan>%s<white>) to <u>%s<U>...\" % (argmaximale, f.name))\nmoyenne = np.mean(notes)\nf = file(csv_name + \"moyenne\", 'w')",
    "detail": "by-extension.python.plotnotes",
    "documentation": {}
  },
  {
    "label": "f",
    "kind": 5,
    "importPath": "by-extension.python.plotnotes",
    "description": "by-extension.python.plotnotes",
    "peekOfCode": "f = file(csv_name + \"maximale\", 'w')\nf.write(\"%g/%i\" % (maximale, noteMax))\nprint(\"I wrote the value of maximale (<cyan>%g<white>) to <u>%s<U>...\" % (maximale, f.name))\nargmaximale = data[np.argmax(notes), 0]\nf = file(csv_name + \"argmaximale\", 'w')\nf.write(\"%s\" % argmaximale)\nprint(\"I wrote the value of argmaximale (<cyan>%s<white>) to <u>%s<U>...\" % (argmaximale, f.name))\nmoyenne = np.mean(notes)\nf = file(csv_name + \"moyenne\", 'w')\nf.write(\"%2.2g/%i\" % (moyenne, noteMax))",
    "detail": "by-extension.python.plotnotes",
    "documentation": {}
  },
  {
    "label": "argmaximale",
    "kind": 5,
    "importPath": "by-extension.python.plotnotes",
    "description": "by-extension.python.plotnotes",
    "peekOfCode": "argmaximale = data[np.argmax(notes), 0]\nf = file(csv_name + \"argmaximale\", 'w')\nf.write(\"%s\" % argmaximale)\nprint(\"I wrote the value of argmaximale (<cyan>%s<white>) to <u>%s<U>...\" % (argmaximale, f.name))\nmoyenne = np.mean(notes)\nf = file(csv_name + \"moyenne\", 'w')\nf.write(\"%2.2g/%i\" % (moyenne, noteMax))\nprint(\"I wrote the value of moyenne (<cyan>%2.2g<white>) to <u>%s<U>...\" % (moyenne, f.name))\necarttype = np.std(notes)\nf = file(csv_name + \"ecarttype\", 'w')",
    "detail": "by-extension.python.plotnotes",
    "documentation": {}
  },
  {
    "label": "f",
    "kind": 5,
    "importPath": "by-extension.python.plotnotes",
    "description": "by-extension.python.plotnotes",
    "peekOfCode": "f = file(csv_name + \"argmaximale\", 'w')\nf.write(\"%s\" % argmaximale)\nprint(\"I wrote the value of argmaximale (<cyan>%s<white>) to <u>%s<U>...\" % (argmaximale, f.name))\nmoyenne = np.mean(notes)\nf = file(csv_name + \"moyenne\", 'w')\nf.write(\"%2.2g/%i\" % (moyenne, noteMax))\nprint(\"I wrote the value of moyenne (<cyan>%2.2g<white>) to <u>%s<U>...\" % (moyenne, f.name))\necarttype = np.std(notes)\nf = file(csv_name + \"ecarttype\", 'w')\nf.write(\"%2.2g\" % ecarttype)",
    "detail": "by-extension.python.plotnotes",
    "documentation": {}
  },
  {
    "label": "moyenne",
    "kind": 5,
    "importPath": "by-extension.python.plotnotes",
    "description": "by-extension.python.plotnotes",
    "peekOfCode": "moyenne = np.mean(notes)\nf = file(csv_name + \"moyenne\", 'w')\nf.write(\"%2.2g/%i\" % (moyenne, noteMax))\nprint(\"I wrote the value of moyenne (<cyan>%2.2g<white>) to <u>%s<U>...\" % (moyenne, f.name))\necarttype = np.std(notes)\nf = file(csv_name + \"ecarttype\", 'w')\nf.write(\"%2.2g\" % ecarttype)\nprint(\"I wrote the value of ecarttype (<cyan>%2.2g<white>) to <u>%s<U>...\" % (ecarttype, f.name))\nvariance = np.var(notes)\nf = file(csv_name + \"variance\", 'w')",
    "detail": "by-extension.python.plotnotes",
    "documentation": {}
  },
  {
    "label": "f",
    "kind": 5,
    "importPath": "by-extension.python.plotnotes",
    "description": "by-extension.python.plotnotes",
    "peekOfCode": "f = file(csv_name + \"moyenne\", 'w')\nf.write(\"%2.2g/%i\" % (moyenne, noteMax))\nprint(\"I wrote the value of moyenne (<cyan>%2.2g<white>) to <u>%s<U>...\" % (moyenne, f.name))\necarttype = np.std(notes)\nf = file(csv_name + \"ecarttype\", 'w')\nf.write(\"%2.2g\" % ecarttype)\nprint(\"I wrote the value of ecarttype (<cyan>%2.2g<white>) to <u>%s<U>...\" % (ecarttype, f.name))\nvariance = np.var(notes)\nf = file(csv_name + \"variance\", 'w')\nf.write(\"%2.2g\" % variance)",
    "detail": "by-extension.python.plotnotes",
    "documentation": {}
  },
  {
    "label": "ecarttype",
    "kind": 5,
    "importPath": "by-extension.python.plotnotes",
    "description": "by-extension.python.plotnotes",
    "peekOfCode": "ecarttype = np.std(notes)\nf = file(csv_name + \"ecarttype\", 'w')\nf.write(\"%2.2g\" % ecarttype)\nprint(\"I wrote the value of ecarttype (<cyan>%2.2g<white>) to <u>%s<U>...\" % (ecarttype, f.name))\nvariance = np.var(notes)\nf = file(csv_name + \"variance\", 'w')\nf.write(\"%2.2g\" % variance)\nprint(\"I wrote the value of variance (<cyan>%2.2g<white>) to <u>%s<U>...\" % (variance, f.name))\n###################################################################\n# I want now to plot some graphics about the datas, with matplotlib",
    "detail": "by-extension.python.plotnotes",
    "documentation": {}
  },
  {
    "label": "f",
    "kind": 5,
    "importPath": "by-extension.python.plotnotes",
    "description": "by-extension.python.plotnotes",
    "peekOfCode": "f = file(csv_name + \"ecarttype\", 'w')\nf.write(\"%2.2g\" % ecarttype)\nprint(\"I wrote the value of ecarttype (<cyan>%2.2g<white>) to <u>%s<U>...\" % (ecarttype, f.name))\nvariance = np.var(notes)\nf = file(csv_name + \"variance\", 'w')\nf.write(\"%2.2g\" % variance)\nprint(\"I wrote the value of variance (<cyan>%2.2g<white>) to <u>%s<U>...\" % (variance, f.name))\n###################################################################\n# I want now to plot some graphics about the datas, with matplotlib\nprint(\"\\nPloting some graphics from <u>%s<U> (<neg><green>%i student(s)<Neg><white>)...\" % (csv_name + \"csv\", nbnotes))",
    "detail": "by-extension.python.plotnotes",
    "documentation": {}
  },
  {
    "label": "variance",
    "kind": 5,
    "importPath": "by-extension.python.plotnotes",
    "description": "by-extension.python.plotnotes",
    "peekOfCode": "variance = np.var(notes)\nf = file(csv_name + \"variance\", 'w')\nf.write(\"%2.2g\" % variance)\nprint(\"I wrote the value of variance (<cyan>%2.2g<white>) to <u>%s<U>...\" % (variance, f.name))\n###################################################################\n# I want now to plot some graphics about the datas, with matplotlib\nprint(\"\\nPloting some graphics from <u>%s<U> (<neg><green>%i student(s)<Neg><white>)...\" % (csv_name + \"csv\", nbnotes))\n#: Graph options\npylab.xlabel(u\"Notes (entre $0$ et $%i$)\" % noteMax)\npylab.ylabel(u\"Nombre d'élève(s) ayant eu cette note\")",
    "detail": "by-extension.python.plotnotes",
    "documentation": {}
  },
  {
    "label": "f",
    "kind": 5,
    "importPath": "by-extension.python.plotnotes",
    "description": "by-extension.python.plotnotes",
    "peekOfCode": "f = file(csv_name + \"variance\", 'w')\nf.write(\"%2.2g\" % variance)\nprint(\"I wrote the value of variance (<cyan>%2.2g<white>) to <u>%s<U>...\" % (variance, f.name))\n###################################################################\n# I want now to plot some graphics about the datas, with matplotlib\nprint(\"\\nPloting some graphics from <u>%s<U> (<neg><green>%i student(s)<Neg><white>)...\" % (csv_name + \"csv\", nbnotes))\n#: Graph options\npylab.xlabel(u\"Notes (entre $0$ et $%i$)\" % noteMax)\npylab.ylabel(u\"Nombre d'élève(s) ayant eu cette note\")\npylab.title(u\"Répartition des notes dans la classe\")",
    "detail": "by-extension.python.plotnotes",
    "documentation": {}
  },
  {
    "label": "idc",
    "kind": 5,
    "importPath": "by-extension.python.plotnotes",
    "description": "by-extension.python.plotnotes",
    "peekOfCode": "idc = xvalues > 0\npylab.plot(bins[:-1][idc], xvalues[idc], 'g*--', linewidth=.5, markersize=18)\npylab.xticks(bins[:-1][idc])\n# Tweak spacing to prevent clipping of ylabel\npylab.subplots_adjust(left=0.15)\n# pylab.show()\npylab.savefig(csv_name + \"pdf\")\nprint(\"Ploting the grades repartition on an histogram: <u>\" + csv_name + \"pdf<U>\")\npylab.draw()\npylab.clf()",
    "detail": "by-extension.python.plotnotes",
    "documentation": {}
  },
  {
    "label": "find_all_paths",
    "kind": 2,
    "importPath": "by-extension.python.possible-paths",
    "description": "by-extension.python.possible-paths",
    "peekOfCode": "def find_all_paths(graph, start, end, path =[]):\n  path = path + [start]\n  if start == end:\n    return [path]\n  paths = []\n  for node in graph[start]:\n    if node not in path:\n      newpaths = find_all_paths(graph, node, end, path)\n    for newpath in newpaths:\n      paths.append(newpath)",
    "detail": "by-extension.python.possible-paths",
    "documentation": {}
  },
  {
    "label": "name",
    "kind": 5,
    "importPath": "by-extension.python.prac1",
    "description": "by-extension.python.prac1",
    "peekOfCode": "name = input(\"What's you name? \")\nage = int(input(\"What's your age? \"))\ncurrent_year = date.today().year\nif age >= 100:\n    print(name + \", you have turned 100 in the year: \", current_year - (age - 100))\nelse:\n    print(name + \", you will turn 100 in year: \", current_year + (100 - age))",
    "detail": "by-extension.python.prac1",
    "documentation": {}
  },
  {
    "label": "age",
    "kind": 5,
    "importPath": "by-extension.python.prac1",
    "description": "by-extension.python.prac1",
    "peekOfCode": "age = int(input(\"What's your age? \"))\ncurrent_year = date.today().year\nif age >= 100:\n    print(name + \", you have turned 100 in the year: \", current_year - (age - 100))\nelse:\n    print(name + \", you will turn 100 in year: \", current_year + (100 - age))",
    "detail": "by-extension.python.prac1",
    "documentation": {}
  },
  {
    "label": "current_year",
    "kind": 5,
    "importPath": "by-extension.python.prac1",
    "description": "by-extension.python.prac1",
    "peekOfCode": "current_year = date.today().year\nif age >= 100:\n    print(name + \", you have turned 100 in the year: \", current_year - (age - 100))\nelse:\n    print(name + \", you will turn 100 in year: \", current_year + (100 - age))",
    "detail": "by-extension.python.prac1",
    "documentation": {}
  },
  {
    "label": "fibonacci",
    "kind": 2,
    "importPath": "by-extension.python.prac10",
    "description": "by-extension.python.prac10",
    "peekOfCode": "def fibonacci(n):\n    print(\"1, 1, \", end=\"\")\n    count = 2\n    first_num = 1\n    sec_num = 1\n    while count < n:\n        sum = first_num + sec_num\n        print(sum, end=\", \")\n        first_num = sec_num\n        sec_num = sum",
    "detail": "by-extension.python.prac10",
    "documentation": {}
  },
  {
    "label": "n",
    "kind": 5,
    "importPath": "by-extension.python.prac10",
    "description": "by-extension.python.prac10",
    "peekOfCode": "n = int(input(\"Enter the number of fibonacci number you want to generate: \"))\nfibonacci(n)",
    "detail": "by-extension.python.prac10",
    "documentation": {}
  },
  {
    "label": "checkToeplitz",
    "kind": 2,
    "importPath": "by-extension.python.prac11",
    "description": "by-extension.python.prac11",
    "peekOfCode": "def checkToeplitz(matrix, m, n):\n    for i in range(m - 1):\n        for j in range(n - 1):\n            if matrix[i][j] != matrix[i + 1][j + 1]:\n                return False\n    return True\n# matrix display function\ndef display_mat(matrix, m, n):\n    for i in range(m):\n        print(matrix[i])",
    "detail": "by-extension.python.prac11",
    "documentation": {}
  },
  {
    "label": "display_mat",
    "kind": 2,
    "importPath": "by-extension.python.prac11",
    "description": "by-extension.python.prac11",
    "peekOfCode": "def display_mat(matrix, m, n):\n    for i in range(m):\n        print(matrix[i])\n# driver code\nif \"__name__\" == \"__main__\":\n    # input of row and column number\n    m = int(input(\"Enter the number of rows: \"))\n    n = int(input(\"Enter the number of columns: \"))\n    # initializing the 2-d array\n    matrix = [[0 for j in range(n)] for i in range(m)]",
    "detail": "by-extension.python.prac11",
    "documentation": {}
  },
  {
    "label": "getClosestFactors",
    "kind": 2,
    "importPath": "by-extension.python.prac12",
    "description": "by-extension.python.prac12",
    "peekOfCode": "def getClosestFactors(n):\n    res = 0\n    if n == 1:\n        return 1\n    else:\n        for a in range(2, n - 1):\n            b = n / a\n            if n % a == 0 and b >= a:\n                res = int(b)\n    return res",
    "detail": "by-extension.python.prac12",
    "documentation": {}
  },
  {
    "label": "isPrime",
    "kind": 2,
    "importPath": "by-extension.python.prac12",
    "description": "by-extension.python.prac12",
    "peekOfCode": "def isPrime(n):\n    for i in range(2, n - 1):\n        if n % i == 0:\n            return False\n    return True\n# function to check a number is perfect square or not\ndef isPerfectSquare(n):\n    return n > -1 and sqrt(n) % 1 == 0\n# driver code\nn = int(input(\"Enter the number: \"))",
    "detail": "by-extension.python.prac12",
    "documentation": {}
  },
  {
    "label": "isPerfectSquare",
    "kind": 2,
    "importPath": "by-extension.python.prac12",
    "description": "by-extension.python.prac12",
    "peekOfCode": "def isPerfectSquare(n):\n    return n > -1 and sqrt(n) % 1 == 0\n# driver code\nn = int(input(\"Enter the number: \"))\ncount = 0\nprint(\"\\nThe steps to reach 1:\")\nwhile n != 1:\n    print(n, end=\" --> \")\n    count += 1\n    if isPerfectSquare(n):",
    "detail": "by-extension.python.prac12",
    "documentation": {}
  },
  {
    "label": "n",
    "kind": 5,
    "importPath": "by-extension.python.prac12",
    "description": "by-extension.python.prac12",
    "peekOfCode": "n = int(input(\"Enter the number: \"))\ncount = 0\nprint(\"\\nThe steps to reach 1:\")\nwhile n != 1:\n    print(n, end=\" --> \")\n    count += 1\n    if isPerfectSquare(n):\n        n = int(sqrt(n))\n    elif isPrime(n) or isPerfectSquare(n - 1):\n        n -= 1",
    "detail": "by-extension.python.prac12",
    "documentation": {}
  },
  {
    "label": "count",
    "kind": 5,
    "importPath": "by-extension.python.prac12",
    "description": "by-extension.python.prac12",
    "peekOfCode": "count = 0\nprint(\"\\nThe steps to reach 1:\")\nwhile n != 1:\n    print(n, end=\" --> \")\n    count += 1\n    if isPerfectSquare(n):\n        n = int(sqrt(n))\n    elif isPrime(n) or isPerfectSquare(n - 1):\n        n -= 1\n    else:",
    "detail": "by-extension.python.prac12",
    "documentation": {}
  },
  {
    "label": "assignHoles",
    "kind": 2,
    "importPath": "by-extension.python.prac13",
    "description": "by-extension.python.prac13",
    "peekOfCode": "def assignHoles(mice, holes):\n    max = -sys.maxsize\n    if len(mice) != len(holes):\n        return -1\n    else:\n        mice.sort()\n        holes.sort()\n        for i in range(0, len(mice) - 1):\n            if max < abs(mice[i] - holes[i]):\n                max = abs(mice[i] - holes[i])",
    "detail": "by-extension.python.prac13",
    "documentation": {}
  },
  {
    "label": "num1",
    "kind": 5,
    "importPath": "by-extension.python.prac2",
    "description": "by-extension.python.prac2",
    "peekOfCode": "num1 = int(input(\"Enter a number: \"))\nif num1 % 4 == 0:\n    print(\"The number is a multiple of 4.\")\nelif num1 % 2 == 0:\n    print(\"The number is a Even number.\")\nelse:\n    print(\"The number is a Odd number.\")\nnum = int(input(\"Again, enter a number: \"))\ncheck = int(input(\"Enter another number: \"))\nres = num / check",
    "detail": "by-extension.python.prac2",
    "documentation": {}
  },
  {
    "label": "num",
    "kind": 5,
    "importPath": "by-extension.python.prac2",
    "description": "by-extension.python.prac2",
    "peekOfCode": "num = int(input(\"Again, enter a number: \"))\ncheck = int(input(\"Enter another number: \"))\nres = num / check\nif type(res) == int:\n    print(check, \" divides evenly into \", num)\nelse:\n    print(check, \" doesn't divide evenly into \", num)",
    "detail": "by-extension.python.prac2",
    "documentation": {}
  },
  {
    "label": "check",
    "kind": 5,
    "importPath": "by-extension.python.prac2",
    "description": "by-extension.python.prac2",
    "peekOfCode": "check = int(input(\"Enter another number: \"))\nres = num / check\nif type(res) == int:\n    print(check, \" divides evenly into \", num)\nelse:\n    print(check, \" doesn't divide evenly into \", num)",
    "detail": "by-extension.python.prac2",
    "documentation": {}
  },
  {
    "label": "res",
    "kind": 5,
    "importPath": "by-extension.python.prac2",
    "description": "by-extension.python.prac2",
    "peekOfCode": "res = num / check\nif type(res) == int:\n    print(check, \" divides evenly into \", num)\nelse:\n    print(check, \" doesn't divide evenly into \", num)",
    "detail": "by-extension.python.prac2",
    "documentation": {}
  },
  {
    "label": "input_list",
    "kind": 5,
    "importPath": "by-extension.python.prac3",
    "description": "by-extension.python.prac3",
    "peekOfCode": "input_list = input(\"Enter a list of numbers: \")\nlist = input_list.split()  # separting the elements by spaces in the list\nfor x in list:\n    if int(x) < 5:\n        print(x)\nprint([x for x in list if int(x) < 5])\nnum = int(input(\"Enter a number: \"))\nprint([x for x in list if int(x) < num])",
    "detail": "by-extension.python.prac3",
    "documentation": {}
  },
  {
    "label": "list",
    "kind": 5,
    "importPath": "by-extension.python.prac3",
    "description": "by-extension.python.prac3",
    "peekOfCode": "list = input_list.split()  # separting the elements by spaces in the list\nfor x in list:\n    if int(x) < 5:\n        print(x)\nprint([x for x in list if int(x) < 5])\nnum = int(input(\"Enter a number: \"))\nprint([x for x in list if int(x) < num])",
    "detail": "by-extension.python.prac3",
    "documentation": {}
  },
  {
    "label": "num",
    "kind": 5,
    "importPath": "by-extension.python.prac3",
    "description": "by-extension.python.prac3",
    "peekOfCode": "num = int(input(\"Enter a number: \"))\nprint([x for x in list if int(x) < num])",
    "detail": "by-extension.python.prac3",
    "documentation": {}
  },
  {
    "label": "num",
    "kind": 5,
    "importPath": "by-extension.python.prac4",
    "description": "by-extension.python.prac4",
    "peekOfCode": "num = int(input(\"Enter a number: \"))\n# if the elements in the range(2, num) evenly divides the num,\n# then it is included in the divisors list\ndivisor = [x for x in range(2, num) if num % x == 0]\nfor x in divisor:\n    print(x)",
    "detail": "by-extension.python.prac4",
    "documentation": {}
  },
  {
    "label": "divisor",
    "kind": 5,
    "importPath": "by-extension.python.prac4",
    "description": "by-extension.python.prac4",
    "peekOfCode": "divisor = [x for x in range(2, num) if num % x == 0]\nfor x in divisor:\n    print(x)",
    "detail": "by-extension.python.prac4",
    "documentation": {}
  },
  {
    "label": "input_str",
    "kind": 5,
    "importPath": "by-extension.python.prac5",
    "description": "by-extension.python.prac5",
    "peekOfCode": "input_str = input(\"Enter a list of numbers: \")\nlist1 = input_str.split()\ninput_str = input(\"Enter another list of numbers: \")\nlist2 = input_str.split()\nprint(\"\\nCommon elements: \")\nif len(list1) > len(list2):\n    list2 = list(dict.fromkeys(list2))\n    for x in list2:\n        if x in list1:\n            print(x, end=\" \")",
    "detail": "by-extension.python.prac5",
    "documentation": {}
  },
  {
    "label": "list1",
    "kind": 5,
    "importPath": "by-extension.python.prac5",
    "description": "by-extension.python.prac5",
    "peekOfCode": "list1 = input_str.split()\ninput_str = input(\"Enter another list of numbers: \")\nlist2 = input_str.split()\nprint(\"\\nCommon elements: \")\nif len(list1) > len(list2):\n    list2 = list(dict.fromkeys(list2))\n    for x in list2:\n        if x in list1:\n            print(x, end=\" \")\nelse:",
    "detail": "by-extension.python.prac5",
    "documentation": {}
  },
  {
    "label": "input_str",
    "kind": 5,
    "importPath": "by-extension.python.prac5",
    "description": "by-extension.python.prac5",
    "peekOfCode": "input_str = input(\"Enter another list of numbers: \")\nlist2 = input_str.split()\nprint(\"\\nCommon elements: \")\nif len(list1) > len(list2):\n    list2 = list(dict.fromkeys(list2))\n    for x in list2:\n        if x in list1:\n            print(x, end=\" \")\nelse:\n    list1 = list(dict.fromkeys(list1))",
    "detail": "by-extension.python.prac5",
    "documentation": {}
  },
  {
    "label": "list2",
    "kind": 5,
    "importPath": "by-extension.python.prac5",
    "description": "by-extension.python.prac5",
    "peekOfCode": "list2 = input_str.split()\nprint(\"\\nCommon elements: \")\nif len(list1) > len(list2):\n    list2 = list(dict.fromkeys(list2))\n    for x in list2:\n        if x in list1:\n            print(x, end=\" \")\nelse:\n    list1 = list(dict.fromkeys(list1))\n    for x in list1:",
    "detail": "by-extension.python.prac5",
    "documentation": {}
  },
  {
    "label": "n1",
    "kind": 5,
    "importPath": "by-extension.python.prac5",
    "description": "by-extension.python.prac5",
    "peekOfCode": "n1 = int(input(\"Enter the length of first list: \"))\nlist3 = []\ncount = 0\n# generating n1 random numners and storing them in list3\nwhile count < n1:\n    list3.append(random.randrange(0, 11, 1))\n    count += 1\nprint(\"First list: \", list3)\nn2 = int(input(\"Enter the length of second list: \"))\nlist4 = []",
    "detail": "by-extension.python.prac5",
    "documentation": {}
  },
  {
    "label": "list3",
    "kind": 5,
    "importPath": "by-extension.python.prac5",
    "description": "by-extension.python.prac5",
    "peekOfCode": "list3 = []\ncount = 0\n# generating n1 random numners and storing them in list3\nwhile count < n1:\n    list3.append(random.randrange(0, 11, 1))\n    count += 1\nprint(\"First list: \", list3)\nn2 = int(input(\"Enter the length of second list: \"))\nlist4 = []\ncount = 0",
    "detail": "by-extension.python.prac5",
    "documentation": {}
  },
  {
    "label": "count",
    "kind": 5,
    "importPath": "by-extension.python.prac5",
    "description": "by-extension.python.prac5",
    "peekOfCode": "count = 0\n# generating n1 random numners and storing them in list3\nwhile count < n1:\n    list3.append(random.randrange(0, 11, 1))\n    count += 1\nprint(\"First list: \", list3)\nn2 = int(input(\"Enter the length of second list: \"))\nlist4 = []\ncount = 0\n# generating n2 random numners and storing them in list4",
    "detail": "by-extension.python.prac5",
    "documentation": {}
  },
  {
    "label": "n2",
    "kind": 5,
    "importPath": "by-extension.python.prac5",
    "description": "by-extension.python.prac5",
    "peekOfCode": "n2 = int(input(\"Enter the length of second list: \"))\nlist4 = []\ncount = 0\n# generating n2 random numners and storing them in list4\nwhile count < n1:\n    list4.append(random.randrange(0, 11, 1))\n    count += 1\nprint(\"Second list: \", list4)\nprint(\"\\nCommon elements: \")\nif n1 > n2:",
    "detail": "by-extension.python.prac5",
    "documentation": {}
  },
  {
    "label": "list4",
    "kind": 5,
    "importPath": "by-extension.python.prac5",
    "description": "by-extension.python.prac5",
    "peekOfCode": "list4 = []\ncount = 0\n# generating n2 random numners and storing them in list4\nwhile count < n1:\n    list4.append(random.randrange(0, 11, 1))\n    count += 1\nprint(\"Second list: \", list4)\nprint(\"\\nCommon elements: \")\nif n1 > n2:\n    list4 = list(dict.fromkeys(list4))",
    "detail": "by-extension.python.prac5",
    "documentation": {}
  },
  {
    "label": "count",
    "kind": 5,
    "importPath": "by-extension.python.prac5",
    "description": "by-extension.python.prac5",
    "peekOfCode": "count = 0\n# generating n2 random numners and storing them in list4\nwhile count < n1:\n    list4.append(random.randrange(0, 11, 1))\n    count += 1\nprint(\"Second list: \", list4)\nprint(\"\\nCommon elements: \")\nif n1 > n2:\n    list4 = list(dict.fromkeys(list4))\n    for x in list4:",
    "detail": "by-extension.python.prac5",
    "documentation": {}
  },
  {
    "label": "reverse",
    "kind": 2,
    "importPath": "by-extension.python.prac6",
    "description": "by-extension.python.prac6",
    "peekOfCode": "def reverse(string):\n    str = \"\"\n    for x in string:\n        str = x + str\n    return str\nstring = input(\"Enter a string: \")\nif string == reverse(string):\n    print(string + \" is a palindrome.\")\nelse:\n    print(string + \" is not a palindrome.\")",
    "detail": "by-extension.python.prac6",
    "documentation": {}
  },
  {
    "label": "reverse",
    "kind": 2,
    "importPath": "by-extension.python.prac6",
    "description": "by-extension.python.prac6",
    "peekOfCode": "def reverse(string):\n    str = \"\".join(reversed(string))\n    return str\nstring = input(\"Enter another string: \")\nif string == reverse(string):\n    print(string + \" is a palindrome.\")\nelse:\n    print(string + \" is not a palindrome.\")\n\"\"\"\nA string can be reversed in other ways too. You can reverse a string using stack,",
    "detail": "by-extension.python.prac6",
    "documentation": {}
  },
  {
    "label": "string",
    "kind": 5,
    "importPath": "by-extension.python.prac6",
    "description": "by-extension.python.prac6",
    "peekOfCode": "string = input(\"Enter a string: \")\nif string == reverse(string):\n    print(string + \" is a palindrome.\")\nelse:\n    print(string + \" is not a palindrome.\")\n# using reversed built-in function\ndef reverse(string):\n    str = \"\".join(reversed(string))\n    return str\nstring = input(\"Enter another string: \")",
    "detail": "by-extension.python.prac6",
    "documentation": {}
  },
  {
    "label": "string",
    "kind": 5,
    "importPath": "by-extension.python.prac6",
    "description": "by-extension.python.prac6",
    "peekOfCode": "string = input(\"Enter another string: \")\nif string == reverse(string):\n    print(string + \" is a palindrome.\")\nelse:\n    print(string + \" is not a palindrome.\")\n\"\"\"\nA string can be reversed in other ways too. You can reverse a string using stack,\nusing recursion and using extended slice systex.\n\"\"\"",
    "detail": "by-extension.python.prac6",
    "documentation": {}
  },
  {
    "label": "input_str",
    "kind": 5,
    "importPath": "by-extension.python.prac7",
    "description": "by-extension.python.prac7",
    "peekOfCode": "input_str = input(\"Enter a list of elements: \")\nlist1 = [int(x) for x in input_str.split() if int(x) % 2 == 0]\nprint(list1)",
    "detail": "by-extension.python.prac7",
    "documentation": {}
  },
  {
    "label": "list1",
    "kind": 5,
    "importPath": "by-extension.python.prac7",
    "description": "by-extension.python.prac7",
    "peekOfCode": "list1 = [int(x) for x in input_str.split() if int(x) % 2 == 0]\nprint(list1)",
    "detail": "by-extension.python.prac7",
    "documentation": {}
  },
  {
    "label": "choice",
    "kind": 2,
    "importPath": "by-extension.python.prac8",
    "description": "by-extension.python.prac8",
    "peekOfCode": "def choice():\n    input_int = int(input(\"1. Rock\\n2. Paper\\n3. Scissors\\nEnter your choice: \"))\n    return input_int\nwhile True:\n    print(\"\\nTeam 1\", end=\"\")\n    team1 = choice()\n    print(\"Team 2\", end=\"\")\n    team2 = choice()\n    if team1 == 1:\n        if team2 == 1:",
    "detail": "by-extension.python.prac8",
    "documentation": {}
  },
  {
    "label": "guess_num",
    "kind": 2,
    "importPath": "by-extension.python.prac9",
    "description": "by-extension.python.prac9",
    "peekOfCode": "def guess_num(num, num1):\n    if num > num1:\n        return \"Too low.\"\n    elif num < num1:\n        return \"Too high.\"\n    else:\n        return \"yes\"\nprint(\"\\nGame starts.\\nType exit to quit.\")\ncount = 0\nwhile True:",
    "detail": "by-extension.python.prac9",
    "documentation": {}
  },
  {
    "label": "num",
    "kind": 5,
    "importPath": "by-extension.python.prac9",
    "description": "by-extension.python.prac9",
    "peekOfCode": "num = random.randint(1, 100)\ndef guess_num(num, num1):\n    if num > num1:\n        return \"Too low.\"\n    elif num < num1:\n        return \"Too high.\"\n    else:\n        return \"yes\"\nprint(\"\\nGame starts.\\nType exit to quit.\")\ncount = 0",
    "detail": "by-extension.python.prac9",
    "documentation": {}
  },
  {
    "label": "count",
    "kind": 5,
    "importPath": "by-extension.python.prac9",
    "description": "by-extension.python.prac9",
    "peekOfCode": "count = 0\nwhile True:\n    num1 = input(\"Guess the number: \")\n    count += 1\n    if num1 == \"exit\":\n        break\n    result = guess_num(num, int(num1))\n    if result == \"yes\":\n        print(\n            \"Congrats!!! You have guessed the correct number in \"",
    "detail": "by-extension.python.prac9",
    "documentation": {}
  },
  {
    "label": "is_prime",
    "kind": 2,
    "importPath": "by-extension.python.prime-number",
    "description": "by-extension.python.prime-number",
    "peekOfCode": "def is_prime(n):\n    if n <= 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    for i in xrange(3, int(sqrt(n))+1, 2):\n        if n % i == 0:\n            return False",
    "detail": "by-extension.python.prime-number",
    "documentation": {}
  },
  {
    "label": "prime_num",
    "kind": 2,
    "importPath": "by-extension.python.prime",
    "description": "by-extension.python.prime",
    "peekOfCode": "def prime_num():\n   value = int(input('please type a number: '))\n   for num in range(2,value):\n      if value % num == 0:\n         return f'{value} is not a prime number'\n   return f'{value} is a prime number'\nprint(prime_num())",
    "detail": "by-extension.python.prime",
    "documentation": {}
  },
  {
    "label": "AngryBird",
    "kind": 6,
    "importPath": "by-extension.python.python-4-beginners",
    "description": "by-extension.python.python-4-beginners",
    "peekOfCode": "class AngryBird:\n    # Slots optimize property access and memory usage and prevent you\n    # from arbitrarily assigning new properties the instance\n    __slots__ = [\"_x\", \"_y\"]\n    # Constructor\n    def __init__(self, x=0, y=0):\n        # Doc String\n        \"\"\"\n        Construct a new AngryBird by setting it's position to (0, 0)\n        \"\"\"",
    "detail": "by-extension.python.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "say_hi",
    "kind": 2,
    "importPath": "by-extension.python.python-4-beginners",
    "description": "by-extension.python.python-4-beginners",
    "peekOfCode": "def say_hi(name):\n    \"\"\"<---- Multi-Line Comments and Docstrings\n    This is where you put your content for help() to inform the user\n    about what your function does and how to use it\n    \"\"\"\n    print(f\"Hello {name}!\")\nprint(say_hi(\"Bryan\"))  # Should get the print inside the function, then None\n# Boolean Values\n# Work the same as in JS, except they are title case: True and False\na = True",
    "detail": "by-extension.python.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "printCopyright",
    "kind": 2,
    "importPath": "by-extension.python.python-4-beginners",
    "description": "by-extension.python.python-4-beginners",
    "peekOfCode": "def printCopyright():\n    print(\"Copyright 2021, Bgoonz\")\n# Lambdas are one liners! (Should be at least, you can use parenthesis to disobey)\ndef avg(num1, num2):\n    return print(num1 + num2)\navg(1, 2)\n# Calling it with keyword arguments, order does not matter\navg(num2=20, num1=1252)\nprintCopyright()\n# We can give parameters default arguments like JS",
    "detail": "by-extension.python.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "avg",
    "kind": 2,
    "importPath": "by-extension.python.python-4-beginners",
    "description": "by-extension.python.python-4-beginners",
    "peekOfCode": "def avg(num1, num2):\n    return print(num1 + num2)\navg(1, 2)\n# Calling it with keyword arguments, order does not matter\navg(num2=20, num1=1252)\nprintCopyright()\n# We can give parameters default arguments like JS\ndef greeting(name, saying=\"Hello\"):\n    print(saying, name)\ngreeting(\"Mike\")  # Hello Mike",
    "detail": "by-extension.python.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "greeting",
    "kind": 2,
    "importPath": "by-extension.python.python-4-beginners",
    "description": "by-extension.python.python-4-beginners",
    "peekOfCode": "def greeting(name, saying=\"Hello\"):\n    print(saying, name)\ngreeting(\"Mike\")  # Hello Mike\ngreeting(\"Bryan\", saying=\"Hello there...\")\n# A common gotcha is using a mutable object for a default parameter\n# All invocations of the function reference the same mutable object\ndef append_item(item_name, item_list=[]):  # Will it obey and give us a new list?\n    item_list.append(item_name)\n    return item_list\n# Uses same item list unless otherwise stated which is counterintuitive",
    "detail": "by-extension.python.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "append_item",
    "kind": 2,
    "importPath": "by-extension.python.python-4-beginners",
    "description": "by-extension.python.python-4-beginners",
    "peekOfCode": "def append_item(item_name, item_list=[]):  # Will it obey and give us a new list?\n    item_list.append(item_name)\n    return item_list\n# Uses same item list unless otherwise stated which is counterintuitive\nprint(append_item(\"notebook\"))\nprint(append_item(\"notebook\"))\nprint(append_item(\"notebook\", []))\n# Errors - Unlike JS, if we pass the incorrect amount of arguments to a function,\n#          it will throw an error\n# avg(1)  # TypeError",
    "detail": "by-extension.python.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "add",
    "kind": 2,
    "importPath": "by-extension.python.python-4-beginners",
    "description": "by-extension.python.python-4-beginners",
    "peekOfCode": "def add(a, b, *args):\n    # args is a tuple of the rest of the arguments\n    total = a + b\n    for n in args:\n        total += n\n    return total\nprint(add(1, 2))  # args is None, returns 3\nprint(add(1, 2, 3, 4, 5, 6))  # args is (3, 4, 5, 6), returns 21\n# Variable Length Keyword Arguments\ndef print_names_and_countries(greeting, **kwargs):",
    "detail": "by-extension.python.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "print_names_and_countries",
    "kind": 2,
    "importPath": "by-extension.python.python-4-beginners",
    "description": "by-extension.python.python-4-beginners",
    "peekOfCode": "def print_names_and_countries(greeting, **kwargs):\n    # kwargs is a dictionary of the rest of the keyword arguments\n    for k, v in kwargs.items():\n        print(greeting, k, \"from\", v)\nprint_names_and_countries(\n    \"Hey there\", Monica=\"Sweden\", Mike=\"The United States\", Mark=\"China\"\n)\n# We can combine all of these together\ndef example2(arg1, arg2, *args, kw_1=\"cheese\", kw_2=\"horse\", **kwargs):\n    pass",
    "detail": "by-extension.python.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "example2",
    "kind": 2,
    "importPath": "by-extension.python.python-4-beginners",
    "description": "by-extension.python.python-4-beginners",
    "peekOfCode": "def example2(arg1, arg2, *args, kw_1=\"cheese\", kw_2=\"horse\", **kwargs):\n    pass\n# Lists are mutable arrays\nempty_list = []\nroomates = [\"Beau\", \"Delynn\"]\n# List built-in function makes a list too\nspecials = list()\n# We can use 'in' to test if something is in the list, like 'includes' in JS\nprint(1 in [1, 2, 4])  # True\nprint(2 in [1, 3, 5])  # False",
    "detail": "by-extension.python.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "isOdd",
    "kind": 2,
    "importPath": "by-extension.python.python-4-beginners",
    "description": "by-extension.python.python-4-beginners",
    "peekOfCode": "def isOdd(num):\n    return num % 2 == 1\nfiltered = filter(isOdd, [1, 2, 3, 4])\nprint(list(filtered))\nfor num in filtered:\n    print(f\"first way: {num}\")\nprint(\"--\" * 20)\n[print(f\"list comprehension: {i}\")\n for i in [1, 2, 3, 4, 5, 6, 7, 8] if i % 2 == 1]\n# Map",
    "detail": "by-extension.python.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "toUpper",
    "kind": 2,
    "importPath": "by-extension.python.python-4-beginners",
    "description": "by-extension.python.python-4-beginners",
    "peekOfCode": "def toUpper(str):\n    return str.upper()\nupperCased = map(toUpper, [\"a\", \"b\", \"c\", \"d\"])\nprint(list(upperCased))\n# Sorted\nsorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"])\nprint(list(sorted_items))  # Notice uppercase comes before lowercase\n# Using a key function to control the sorting and make it case insensitive\nsorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"], key=str.lower)\nprint(sorted_items)",
    "detail": "by-extension.python.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "print_len",
    "kind": 2,
    "importPath": "by-extension.python.python-4-beginners",
    "description": "by-extension.python.python-4-beginners",
    "peekOfCode": "def print_len(item):\n    return print(len(item))\nprint_len(\"Mike\")\nprint_len([1, 5, 2, 10, 3, 10])\nprint_len({1, 5, 10, 9, 10})  # 4 because there is a duplicate here (10)\nprint_len((1, 4, 10, 9, 20))\n# Max will return the max number in a given scenario\nprint(max(1, 2, 35, 1012, 1))\n# Min\nprint(min(1, 5, 2, 10))",
    "detail": "by-extension.python.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "a",
    "kind": 5,
    "importPath": "by-extension.python.python-4-beginners",
    "description": "by-extension.python.python-4-beginners",
    "peekOfCode": "a = True\nb = False\n# Logical Operators\n# ! = not, || = or, && = and\nprint(True and True)\nprint(True and not True)\nprint(True or True)\n# Truthiness - Everything is True except...\n# False - None, False, '', [], (), set(), range(0)\n# Number Values",
    "detail": "by-extension.python.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "b",
    "kind": 5,
    "importPath": "by-extension.python.python-4-beginners",
    "description": "by-extension.python.python-4-beginners",
    "peekOfCode": "b = False\n# Logical Operators\n# ! = not, || = or, && = and\nprint(True and True)\nprint(True and not True)\nprint(True or True)\n# Truthiness - Everything is True except...\n# False - None, False, '', [], (), set(), range(0)\n# Number Values\n# Integers are numbers without a floating decimal point",
    "detail": "by-extension.python.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "name",
    "kind": 5,
    "importPath": "by-extension.python.python-4-beginners",
    "description": "by-extension.python.python-4-beginners",
    "peekOfCode": "name = \"Bryan\"\nfor i in range(len(name)):\n    print(name[i])  # B, r, y, a, n\n# We can index starting from the end as well, with negatives\noccupation = \"Full Stack Software Engineer\"\nprint(occupation[-3])  # e\n# We can also get ranges in the index with the [start:stop:step] syntax\nprint(occupation[0:4:1])  # step and stop are optional, stop is exclusive\nprint(occupation[::4])  # beginning to end, every 4th letter\nprint(occupation[4:14:2])  # Let's get weird with it!",
    "detail": "by-extension.python.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "occupation",
    "kind": 5,
    "importPath": "by-extension.python.python-4-beginners",
    "description": "by-extension.python.python-4-beginners",
    "peekOfCode": "occupation = \"Full Stack Software Engineer\"\nprint(occupation[-3])  # e\n# We can also get ranges in the index with the [start:stop:step] syntax\nprint(occupation[0:4:1])  # step and stop are optional, stop is exclusive\nprint(occupation[::4])  # beginning to end, every 4th letter\nprint(occupation[4:14:2])  # Let's get weird with it!\n# NOTE: Indexing out of range will give you an IndexError\n# We can also get the index og things with the .index() method, similar to indexOf()\nprint(occupation.index(\"Stack\"))\nprint([\"Mike\", \"Barry\", \"Cole\", \"James\", \"Mark\"].index(\"Cole\"))",
    "detail": "by-extension.python.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "first_name",
    "kind": 5,
    "importPath": "by-extension.python.python-4-beginners",
    "description": "by-extension.python.python-4-beginners",
    "peekOfCode": "first_name = \"Bryan\"\nlast_name = \"Guner\"\nprint(\"Your name is {0} {1}\".format(first_name, last_name))\n# Useful String Methods\nprint(\"Hello\".upper())  # HELLO\nprint(\"Hello\".lower())  # hello\nprint(\"HELLO\".islower())  # False\nprint(\"HELLO\".isupper())  # True\nprint(\"Hello\".startswith(\"he\"))  # False\nprint(\"Hello\".endswith(\"lo\"))  # True",
    "detail": "by-extension.python.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "last_name",
    "kind": 5,
    "importPath": "by-extension.python.python-4-beginners",
    "description": "by-extension.python.python-4-beginners",
    "peekOfCode": "last_name = \"Guner\"\nprint(\"Your name is {0} {1}\".format(first_name, last_name))\n# Useful String Methods\nprint(\"Hello\".upper())  # HELLO\nprint(\"Hello\".lower())  # hello\nprint(\"HELLO\".islower())  # False\nprint(\"HELLO\".isupper())  # True\nprint(\"Hello\".startswith(\"he\"))  # False\nprint(\"Hello\".endswith(\"lo\"))  # True\nprint(\"Hello There\".split())  # [Hello, There]",
    "detail": "by-extension.python.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "a",
    "kind": 5,
    "importPath": "by-extension.python.python-4-beginners",
    "description": "by-extension.python.python-4-beginners",
    "peekOfCode": "a = 3\nb = a\nc = \"heyoo\"\nb = [\"reassignment\", \"is\", \"fine\", \"G!\"]\n# Comparison Operators - Python uses the same equality operators as JS, but no ===\n# < - Less than\n# > - Greater than\n# <= - Less than or Equal\n# >= - Greater than or Equal\n# == - Equal to",
    "detail": "by-extension.python.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "b",
    "kind": 5,
    "importPath": "by-extension.python.python-4-beginners",
    "description": "by-extension.python.python-4-beginners",
    "peekOfCode": "b = a\nc = \"heyoo\"\nb = [\"reassignment\", \"is\", \"fine\", \"G!\"]\n# Comparison Operators - Python uses the same equality operators as JS, but no ===\n# < - Less than\n# > - Greater than\n# <= - Less than or Equal\n# >= - Greater than or Equal\n# == - Equal to\n# != - Not equal to",
    "detail": "by-extension.python.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "c",
    "kind": 5,
    "importPath": "by-extension.python.python-4-beginners",
    "description": "by-extension.python.python-4-beginners",
    "peekOfCode": "c = \"heyoo\"\nb = [\"reassignment\", \"is\", \"fine\", \"G!\"]\n# Comparison Operators - Python uses the same equality operators as JS, but no ===\n# < - Less than\n# > - Greater than\n# <= - Less than or Equal\n# >= - Greater than or Equal\n# == - Equal to\n# != - Not equal to\n# is - Refers to exact same memory location",
    "detail": "by-extension.python.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "b",
    "kind": 5,
    "importPath": "by-extension.python.python-4-beginners",
    "description": "by-extension.python.python-4-beginners",
    "peekOfCode": "b = [\"reassignment\", \"is\", \"fine\", \"G!\"]\n# Comparison Operators - Python uses the same equality operators as JS, but no ===\n# < - Less than\n# > - Greater than\n# <= - Less than or Equal\n# >= - Greater than or Equal\n# == - Equal to\n# != - Not equal to\n# is - Refers to exact same memory location\n# not - !",
    "detail": "by-extension.python.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "lst",
    "kind": 5,
    "importPath": "by-extension.python.python-4-beginners",
    "description": "by-extension.python.python-4-beginners",
    "peekOfCode": "lst = [1, 2, 3, 4]\nfor i in lst:\n    print(i)\n# Looping over a dictionary\nspam = {\"color\": \"red\", \"age\": 42, \"items\": [(1, \"hey\"), (2, \"hooo!\")]}\nfor v in spam.values():\n    print(v)\n# Loop over a list of tuples and destructuring the values\n# Assuming spam.items returns a list of tuples each containing two items (k, v)\nfor k, v in spam.items():",
    "detail": "by-extension.python.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "spam",
    "kind": 5,
    "importPath": "by-extension.python.python-4-beginners",
    "description": "by-extension.python.python-4-beginners",
    "peekOfCode": "spam = {\"color\": \"red\", \"age\": 42, \"items\": [(1, \"hey\"), (2, \"hooo!\")]}\nfor v in spam.values():\n    print(v)\n# Loop over a list of tuples and destructuring the values\n# Assuming spam.items returns a list of tuples each containing two items (k, v)\nfor k, v in spam.items():\n    print(f\"{k}: {v}\")\n# While loops as long as the condition is True\n#  - Exit loop early with break\n#  - Exit iteration early with continue",
    "detail": "by-extension.python.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "spam",
    "kind": 5,
    "importPath": "by-extension.python.python-4-beginners",
    "description": "by-extension.python.python-4-beginners",
    "peekOfCode": "spam = 0\nwhile True:\n    print(\"Sike That's the wrong Numba\")\n    spam += 1\n    if spam < 5:\n        continue\n    break\n# Functions - use def keyword to define a function in Python\ndef printCopyright():\n    print(\"Copyright 2021, Bgoonz\")",
    "detail": "by-extension.python.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "empty_list",
    "kind": 5,
    "importPath": "by-extension.python.python-4-beginners",
    "description": "by-extension.python.python-4-beginners",
    "peekOfCode": "empty_list = []\nroomates = [\"Beau\", \"Delynn\"]\n# List built-in function makes a list too\nspecials = list()\n# We can use 'in' to test if something is in the list, like 'includes' in JS\nprint(1 in [1, 2, 4])  # True\nprint(2 in [1, 3, 5])  # False\n# Dictionaries - Similar to JS POJO's or Map, containing key value pairs\na = {\"one\": 1, \"two\": 2, \"three\": 3}\nb = dict(one=1, two=2, three=3)",
    "detail": "by-extension.python.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "roomates",
    "kind": 5,
    "importPath": "by-extension.python.python-4-beginners",
    "description": "by-extension.python.python-4-beginners",
    "peekOfCode": "roomates = [\"Beau\", \"Delynn\"]\n# List built-in function makes a list too\nspecials = list()\n# We can use 'in' to test if something is in the list, like 'includes' in JS\nprint(1 in [1, 2, 4])  # True\nprint(2 in [1, 3, 5])  # False\n# Dictionaries - Similar to JS POJO's or Map, containing key value pairs\na = {\"one\": 1, \"two\": 2, \"three\": 3}\nb = dict(one=1, two=2, three=3)\n# Can use 'in' on dictionaries too (for keys)",
    "detail": "by-extension.python.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "specials",
    "kind": 5,
    "importPath": "by-extension.python.python-4-beginners",
    "description": "by-extension.python.python-4-beginners",
    "peekOfCode": "specials = list()\n# We can use 'in' to test if something is in the list, like 'includes' in JS\nprint(1 in [1, 2, 4])  # True\nprint(2 in [1, 3, 5])  # False\n# Dictionaries - Similar to JS POJO's or Map, containing key value pairs\na = {\"one\": 1, \"two\": 2, \"three\": 3}\nb = dict(one=1, two=2, three=3)\n# Can use 'in' on dictionaries too (for keys)\nprint(\"one\" in a)  # True\nprint(3 in b)  # False",
    "detail": "by-extension.python.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "a",
    "kind": 5,
    "importPath": "by-extension.python.python-4-beginners",
    "description": "by-extension.python.python-4-beginners",
    "peekOfCode": "a = {\"one\": 1, \"two\": 2, \"three\": 3}\nb = dict(one=1, two=2, three=3)\n# Can use 'in' on dictionaries too (for keys)\nprint(\"one\" in a)  # True\nprint(3 in b)  # False\n# Sets - Just like JS, unordered collection of distinct objects\nbedroom = {\"bed\", \"tv\", \"computer\", \"clothes\", \"playstation 4\"}\n# bedroom = set(\"bed\", \"tv\", \"computer\", \"clothes\", \"playstation 5\")\nschool_bag = set(\n    [\"book\", \"paper\", \"pencil\", \"pencil\", \"book\", \"book\", \"book\", \"eraser\"]",
    "detail": "by-extension.python.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "b",
    "kind": 5,
    "importPath": "by-extension.python.python-4-beginners",
    "description": "by-extension.python.python-4-beginners",
    "peekOfCode": "b = dict(one=1, two=2, three=3)\n# Can use 'in' on dictionaries too (for keys)\nprint(\"one\" in a)  # True\nprint(3 in b)  # False\n# Sets - Just like JS, unordered collection of distinct objects\nbedroom = {\"bed\", \"tv\", \"computer\", \"clothes\", \"playstation 4\"}\n# bedroom = set(\"bed\", \"tv\", \"computer\", \"clothes\", \"playstation 5\")\nschool_bag = set(\n    [\"book\", \"paper\", \"pencil\", \"pencil\", \"book\", \"book\", \"book\", \"eraser\"]\n)",
    "detail": "by-extension.python.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "bedroom",
    "kind": 5,
    "importPath": "by-extension.python.python-4-beginners",
    "description": "by-extension.python.python-4-beginners",
    "peekOfCode": "bedroom = {\"bed\", \"tv\", \"computer\", \"clothes\", \"playstation 4\"}\n# bedroom = set(\"bed\", \"tv\", \"computer\", \"clothes\", \"playstation 5\")\nschool_bag = set(\n    [\"book\", \"paper\", \"pencil\", \"pencil\", \"book\", \"book\", \"book\", \"eraser\"]\n)\nprint(school_bag)\nprint(bedroom)\n# We can use 'in' on sets as wel\nprint(1 in {1, 2, 3})  # True\nprint(4 in {1, 3, 5})  # False",
    "detail": "by-extension.python.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "school_bag",
    "kind": 5,
    "importPath": "by-extension.python.python-4-beginners",
    "description": "by-extension.python.python-4-beginners",
    "peekOfCode": "school_bag = set(\n    [\"book\", \"paper\", \"pencil\", \"pencil\", \"book\", \"book\", \"book\", \"eraser\"]\n)\nprint(school_bag)\nprint(bedroom)\n# We can use 'in' on sets as wel\nprint(1 in {1, 2, 3})  # True\nprint(4 in {1, 3, 5})  # False\n# Tuples are immutable lists of items\ntime_blocks = (\"AM\", \"PM\")",
    "detail": "by-extension.python.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "time_blocks",
    "kind": 5,
    "importPath": "by-extension.python.python-4-beginners",
    "description": "by-extension.python.python-4-beginners",
    "peekOfCode": "time_blocks = (\"AM\", \"PM\")\ncolors = \"red\", \"green\", \"blue\"  # Parenthesis not needed but encouraged\n# The tuple built-in function can be used to convert things to tuples\nprint(tuple(\"abc\"))\nprint(tuple([1, 2, 3]))\n# 'in' may be used on tuples as well\nprint(1 in (1, 2, 3))  # True\nprint(5 in (1, 4, 3))  # False\n# Ranges are immutable lists of numbers, often used with for loops\n#   - start - default: 0, first number in sequence",
    "detail": "by-extension.python.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "colors",
    "kind": 5,
    "importPath": "by-extension.python.python-4-beginners",
    "description": "by-extension.python.python-4-beginners",
    "peekOfCode": "colors = \"red\", \"green\", \"blue\"  # Parenthesis not needed but encouraged\n# The tuple built-in function can be used to convert things to tuples\nprint(tuple(\"abc\"))\nprint(tuple([1, 2, 3]))\n# 'in' may be used on tuples as well\nprint(1 in (1, 2, 3))  # True\nprint(5 in (1, 4, 3))  # False\n# Ranges are immutable lists of numbers, often used with for loops\n#   - start - default: 0, first number in sequence\n#   - stop - required, next number past last number in sequence",
    "detail": "by-extension.python.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "range1",
    "kind": 5,
    "importPath": "by-extension.python.python-4-beginners",
    "description": "by-extension.python.python-4-beginners",
    "peekOfCode": "range1 = range(5)  # [0,1,2,3,4]\nrange2 = range(1, 5)  # [1,2,3,4]\nrange3 = range(0, 25, 5)  # [0,5,10,15,20]\nrange4 = range(0)  # []\nfor i in range1:\n    print(i)\n# Built-in functions:\n# Filter\ndef isOdd(num):\n    return num % 2 == 1",
    "detail": "by-extension.python.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "range2",
    "kind": 5,
    "importPath": "by-extension.python.python-4-beginners",
    "description": "by-extension.python.python-4-beginners",
    "peekOfCode": "range2 = range(1, 5)  # [1,2,3,4]\nrange3 = range(0, 25, 5)  # [0,5,10,15,20]\nrange4 = range(0)  # []\nfor i in range1:\n    print(i)\n# Built-in functions:\n# Filter\ndef isOdd(num):\n    return num % 2 == 1\nfiltered = filter(isOdd, [1, 2, 3, 4])",
    "detail": "by-extension.python.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "range3",
    "kind": 5,
    "importPath": "by-extension.python.python-4-beginners",
    "description": "by-extension.python.python-4-beginners",
    "peekOfCode": "range3 = range(0, 25, 5)  # [0,5,10,15,20]\nrange4 = range(0)  # []\nfor i in range1:\n    print(i)\n# Built-in functions:\n# Filter\ndef isOdd(num):\n    return num % 2 == 1\nfiltered = filter(isOdd, [1, 2, 3, 4])\nprint(list(filtered))",
    "detail": "by-extension.python.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "range4",
    "kind": 5,
    "importPath": "by-extension.python.python-4-beginners",
    "description": "by-extension.python.python-4-beginners",
    "peekOfCode": "range4 = range(0)  # []\nfor i in range1:\n    print(i)\n# Built-in functions:\n# Filter\ndef isOdd(num):\n    return num % 2 == 1\nfiltered = filter(isOdd, [1, 2, 3, 4])\nprint(list(filtered))\nfor num in filtered:",
    "detail": "by-extension.python.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "filtered",
    "kind": 5,
    "importPath": "by-extension.python.python-4-beginners",
    "description": "by-extension.python.python-4-beginners",
    "peekOfCode": "filtered = filter(isOdd, [1, 2, 3, 4])\nprint(list(filtered))\nfor num in filtered:\n    print(f\"first way: {num}\")\nprint(\"--\" * 20)\n[print(f\"list comprehension: {i}\")\n for i in [1, 2, 3, 4, 5, 6, 7, 8] if i % 2 == 1]\n# Map\ndef toUpper(str):\n    return str.upper()",
    "detail": "by-extension.python.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "upperCased",
    "kind": 5,
    "importPath": "by-extension.python.python-4-beginners",
    "description": "by-extension.python.python-4-beginners",
    "peekOfCode": "upperCased = map(toUpper, [\"a\", \"b\", \"c\", \"d\"])\nprint(list(upperCased))\n# Sorted\nsorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"])\nprint(list(sorted_items))  # Notice uppercase comes before lowercase\n# Using a key function to control the sorting and make it case insensitive\nsorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"], key=str.lower)\nprint(sorted_items)\n# You can also reverse the sort\nsorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"],",
    "detail": "by-extension.python.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "sorted_items",
    "kind": 5,
    "importPath": "by-extension.python.python-4-beginners",
    "description": "by-extension.python.python-4-beginners",
    "peekOfCode": "sorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"])\nprint(list(sorted_items))  # Notice uppercase comes before lowercase\n# Using a key function to control the sorting and make it case insensitive\nsorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"], key=str.lower)\nprint(sorted_items)\n# You can also reverse the sort\nsorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"],\n                      key=str.lower, reverse=True)\nprint(sorted_items)\n# Enumerate creates a tuple with an index for what you're enumerating",
    "detail": "by-extension.python.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "sorted_items",
    "kind": 5,
    "importPath": "by-extension.python.python-4-beginners",
    "description": "by-extension.python.python-4-beginners",
    "peekOfCode": "sorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"], key=str.lower)\nprint(sorted_items)\n# You can also reverse the sort\nsorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"],\n                      key=str.lower, reverse=True)\nprint(sorted_items)\n# Enumerate creates a tuple with an index for what you're enumerating\nquarters = [\"First\", \"Second\", \"Third\", \"Fourth\"]\nprint(list(enumerate(quarters)))\nprint(list(enumerate(quarters, start=1)))",
    "detail": "by-extension.python.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "sorted_items",
    "kind": 5,
    "importPath": "by-extension.python.python-4-beginners",
    "description": "by-extension.python.python-4-beginners",
    "peekOfCode": "sorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"],\n                      key=str.lower, reverse=True)\nprint(sorted_items)\n# Enumerate creates a tuple with an index for what you're enumerating\nquarters = [\"First\", \"Second\", \"Third\", \"Fourth\"]\nprint(list(enumerate(quarters)))\nprint(list(enumerate(quarters, start=1)))\n# Zip takes list and combines them as key value pairs, or really however you need\nkeys = (\"Name\", \"Email\")\nvalues = (\"Buster\", \"cheetoh@johhnydepp.com\")",
    "detail": "by-extension.python.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "quarters",
    "kind": 5,
    "importPath": "by-extension.python.python-4-beginners",
    "description": "by-extension.python.python-4-beginners",
    "peekOfCode": "quarters = [\"First\", \"Second\", \"Third\", \"Fourth\"]\nprint(list(enumerate(quarters)))\nprint(list(enumerate(quarters, start=1)))\n# Zip takes list and combines them as key value pairs, or really however you need\nkeys = (\"Name\", \"Email\")\nvalues = (\"Buster\", \"cheetoh@johhnydepp.com\")\nzipped = zip(keys, values)\nprint(list(zipped))\n# You can zip more than 2\nx_coords = [0, 1, 2, 3, 4]",
    "detail": "by-extension.python.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "keys",
    "kind": 5,
    "importPath": "by-extension.python.python-4-beginners",
    "description": "by-extension.python.python-4-beginners",
    "peekOfCode": "keys = (\"Name\", \"Email\")\nvalues = (\"Buster\", \"cheetoh@johhnydepp.com\")\nzipped = zip(keys, values)\nprint(list(zipped))\n# You can zip more than 2\nx_coords = [0, 1, 2, 3, 4]\ny_coords = [4, 6, 10, 9, 10]\nz_coords = [20, 10, 5, 9, 1]\ncoords = zip(x_coords, y_coords, z_coords)\nprint(list(coords))",
    "detail": "by-extension.python.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "values",
    "kind": 5,
    "importPath": "by-extension.python.python-4-beginners",
    "description": "by-extension.python.python-4-beginners",
    "peekOfCode": "values = (\"Buster\", \"cheetoh@johhnydepp.com\")\nzipped = zip(keys, values)\nprint(list(zipped))\n# You can zip more than 2\nx_coords = [0, 1, 2, 3, 4]\ny_coords = [4, 6, 10, 9, 10]\nz_coords = [20, 10, 5, 9, 1]\ncoords = zip(x_coords, y_coords, z_coords)\nprint(list(coords))\n# Len reports the length of strings along with list and any other object data type",
    "detail": "by-extension.python.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "zipped",
    "kind": 5,
    "importPath": "by-extension.python.python-4-beginners",
    "description": "by-extension.python.python-4-beginners",
    "peekOfCode": "zipped = zip(keys, values)\nprint(list(zipped))\n# You can zip more than 2\nx_coords = [0, 1, 2, 3, 4]\ny_coords = [4, 6, 10, 9, 10]\nz_coords = [20, 10, 5, 9, 1]\ncoords = zip(x_coords, y_coords, z_coords)\nprint(list(coords))\n# Len reports the length of strings along with list and any other object data type\n# doing this to save myself some typing",
    "detail": "by-extension.python.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "x_coords",
    "kind": 5,
    "importPath": "by-extension.python.python-4-beginners",
    "description": "by-extension.python.python-4-beginners",
    "peekOfCode": "x_coords = [0, 1, 2, 3, 4]\ny_coords = [4, 6, 10, 9, 10]\nz_coords = [20, 10, 5, 9, 1]\ncoords = zip(x_coords, y_coords, z_coords)\nprint(list(coords))\n# Len reports the length of strings along with list and any other object data type\n# doing this to save myself some typing\ndef print_len(item):\n    return print(len(item))\nprint_len(\"Mike\")",
    "detail": "by-extension.python.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "y_coords",
    "kind": 5,
    "importPath": "by-extension.python.python-4-beginners",
    "description": "by-extension.python.python-4-beginners",
    "peekOfCode": "y_coords = [4, 6, 10, 9, 10]\nz_coords = [20, 10, 5, 9, 1]\ncoords = zip(x_coords, y_coords, z_coords)\nprint(list(coords))\n# Len reports the length of strings along with list and any other object data type\n# doing this to save myself some typing\ndef print_len(item):\n    return print(len(item))\nprint_len(\"Mike\")\nprint_len([1, 5, 2, 10, 3, 10])",
    "detail": "by-extension.python.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "z_coords",
    "kind": 5,
    "importPath": "by-extension.python.python-4-beginners",
    "description": "by-extension.python.python-4-beginners",
    "peekOfCode": "z_coords = [20, 10, 5, 9, 1]\ncoords = zip(x_coords, y_coords, z_coords)\nprint(list(coords))\n# Len reports the length of strings along with list and any other object data type\n# doing this to save myself some typing\ndef print_len(item):\n    return print(len(item))\nprint_len(\"Mike\")\nprint_len([1, 5, 2, 10, 3, 10])\nprint_len({1, 5, 10, 9, 10})  # 4 because there is a duplicate here (10)",
    "detail": "by-extension.python.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "coords",
    "kind": 5,
    "importPath": "by-extension.python.python-4-beginners",
    "description": "by-extension.python.python-4-beginners",
    "peekOfCode": "coords = zip(x_coords, y_coords, z_coords)\nprint(list(coords))\n# Len reports the length of strings along with list and any other object data type\n# doing this to save myself some typing\ndef print_len(item):\n    return print(len(item))\nprint_len(\"Mike\")\nprint_len([1, 5, 2, 10, 3, 10])\nprint_len({1, 5, 10, 9, 10})  # 4 because there is a duplicate here (10)\nprint_len((1, 4, 10, 9, 20))",
    "detail": "by-extension.python.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "user",
    "kind": 5,
    "importPath": "by-extension.python.python-4-beginners",
    "description": "by-extension.python.python-4-beginners",
    "peekOfCode": "user = {\"Name\": \"Bob\", \"Email\": \"bob@bob.com\"}\nprint(dir(user))\n# Importing packages and modules\n#  - Module - A Python code in a file or directory\n#  - Package - A module which is a directory containing an __init__.py file\n#  - Submodule - A module which is contained within a package\n#  - Name - An exported function, class, or variable in a module\n# Unlike JS, modules export ALL names contained within them without any special export key\n# Assuming we have the following package with four submodules\n#  math",
    "detail": "by-extension.python.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "squares",
    "kind": 5,
    "importPath": "by-extension.python.python-4-beginners",
    "description": "by-extension.python.python-4-beginners",
    "peekOfCode": "squares = []\nfor i in range(10):\n    squares.append(i ** 2)\nprint(squares)\n# value = i ** 2\n# loop = for i in range(10)\nsquares = [i ** 2 for i in range(10)]\nprint(list(squares))\nsentence = \"the rocket came back from mars\"\nvowels = [character for character in sentence if character in \"aeiou\"]",
    "detail": "by-extension.python.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "squares",
    "kind": 5,
    "importPath": "by-extension.python.python-4-beginners",
    "description": "by-extension.python.python-4-beginners",
    "peekOfCode": "squares = [i ** 2 for i in range(10)]\nprint(list(squares))\nsentence = \"the rocket came back from mars\"\nvowels = [character for character in sentence if character in \"aeiou\"]\nprint(vowels)\n# You can also use them on dictionaries. We can use the items() method\n# for the dictionary to loop through it getting the keys and values out at once\nperson = {\"name\": \"Corina\", \"age\": 32, \"height\": 1.4}\n# This loops through and capitalizes the first letter of all keys\nnewPerson = {key.title(): value for key, value in person.items()}",
    "detail": "by-extension.python.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "sentence",
    "kind": 5,
    "importPath": "by-extension.python.python-4-beginners",
    "description": "by-extension.python.python-4-beginners",
    "peekOfCode": "sentence = \"the rocket came back from mars\"\nvowels = [character for character in sentence if character in \"aeiou\"]\nprint(vowels)\n# You can also use them on dictionaries. We can use the items() method\n# for the dictionary to loop through it getting the keys and values out at once\nperson = {\"name\": \"Corina\", \"age\": 32, \"height\": 1.4}\n# This loops through and capitalizes the first letter of all keys\nnewPerson = {key.title(): value for key, value in person.items()}\nprint(list(newPerson.items()))",
    "detail": "by-extension.python.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "vowels",
    "kind": 5,
    "importPath": "by-extension.python.python-4-beginners",
    "description": "by-extension.python.python-4-beginners",
    "peekOfCode": "vowels = [character for character in sentence if character in \"aeiou\"]\nprint(vowels)\n# You can also use them on dictionaries. We can use the items() method\n# for the dictionary to loop through it getting the keys and values out at once\nperson = {\"name\": \"Corina\", \"age\": 32, \"height\": 1.4}\n# This loops through and capitalizes the first letter of all keys\nnewPerson = {key.title(): value for key, value in person.items()}\nprint(list(newPerson.items()))",
    "detail": "by-extension.python.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "person",
    "kind": 5,
    "importPath": "by-extension.python.python-4-beginners",
    "description": "by-extension.python.python-4-beginners",
    "peekOfCode": "person = {\"name\": \"Corina\", \"age\": 32, \"height\": 1.4}\n# This loops through and capitalizes the first letter of all keys\nnewPerson = {key.title(): value for key, value in person.items()}\nprint(list(newPerson.items()))",
    "detail": "by-extension.python.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "newPerson",
    "kind": 5,
    "importPath": "by-extension.python.python-4-beginners",
    "description": "by-extension.python.python-4-beginners",
    "peekOfCode": "newPerson = {key.title(): value for key, value in person.items()}\nprint(list(newPerson.items()))",
    "detail": "by-extension.python.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "Human",
    "kind": 6,
    "importPath": "by-extension.python.python-cheatsheet",
    "description": "by-extension.python.python-cheatsheet",
    "peekOfCode": "class Human:\n    # A class attribute. It is shared by all instances of this class\n    species = \"H. sapiens\"\n    # Basic initializer, this is called when this class is instantiated.\n    # Note that the double leading and trailing underscores denote objects\n    # or attributes that are used by Python but that live in user-controlled\n    # namespaces. Methods(or objects or attributes) like: __init__, __str__,\n    # __repr__ etc. are called special methods (or sometimes called dunder methods)\n    # You should not invent such names on your own.\n    def __init__(self, name):",
    "detail": "by-extension.python.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "Superhero",
    "kind": 6,
    "importPath": "by-extension.python.python-cheatsheet",
    "description": "by-extension.python.python-cheatsheet",
    "peekOfCode": "class Superhero(Human):\n    # If the child class should inherit all of the parent's definitions without\n    # any modifications, you can just use the \"pass\" keyword (and nothing else)\n    # but in this case it is commented out to allow for a unique child class:\n    # pass\n    # Child classes can override their parents' attributes\n    species = \"Superhuman\"\n    # Children automatically inherit their parent class's constructor including\n    # its arguments, but can also define additional arguments or definitions\n    # and override its methods such as the class constructor.",
    "detail": "by-extension.python.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "Bat",
    "kind": 6,
    "importPath": "by-extension.python.python-cheatsheet",
    "description": "by-extension.python.python-cheatsheet",
    "peekOfCode": "class Bat:\n    species = \"Baty\"\n    def __init__(self, can_fly=True):\n        self.fly = can_fly\n    # This class also has a say method\n    def say(self, msg):\n        msg = \"... ... ...\"\n        return msg\n    # And its own method as well\n    def sonar(self):",
    "detail": "by-extension.python.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "Batman",
    "kind": 6,
    "importPath": "by-extension.python.python-cheatsheet",
    "description": "by-extension.python.python-cheatsheet",
    "peekOfCode": "class Batman(Superhero, Bat):\n    def __init__(self, *args, **kwargs):\n        # Typically to inherit attributes you have to call super:\n        # super(Batman, self).__init__(*args, **kwargs)\n        # However we are dealing with multiple inheritance here, and super()\n        # only works with the next base class in the MRO list.\n        # So instead we explicitly call __init__ for all ancestors.\n        # The use of *args and **kwargs allows for a clean way to pass arguments,\n        # with each parent \"peeling a layer of the onion\".\n        Superhero.__init__(",
    "detail": "by-extension.python.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "add",
    "kind": 2,
    "importPath": "by-extension.python.python-cheatsheet",
    "description": "by-extension.python.python-cheatsheet",
    "peekOfCode": "def add(x, y):\n    print(\"x is {} and y is {}\".format(x, y))\n    return x + y  # Return values with a return statement\n# Calling functions with parameters\nadd(5, 6)  # => prints out \"x is 5 and y is 6\" and returns 11\n# Another way to call functions is with keyword arguments\nadd(y=6, x=5)  # Keyword arguments can arrive in any order.\n# You can define functions that take a variable number of\n# positional arguments\ndef varargs(*args):",
    "detail": "by-extension.python.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "varargs",
    "kind": 2,
    "importPath": "by-extension.python.python-cheatsheet",
    "description": "by-extension.python.python-cheatsheet",
    "peekOfCode": "def varargs(*args):\n    return args\nvarargs(1, 2, 3)  # => (1, 2, 3)\n# You can define functions that take a variable number of\n# keyword arguments, as well\ndef keyword_args(**kwargs):\n    return kwargs\n# Let's call it to see what happens\nkeyword_args(big=\"foot\", loch=\"ness\")  # => {\"big\": \"foot\", \"loch\": \"ness\"}\n# You can do both at once, if you like",
    "detail": "by-extension.python.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "keyword_args",
    "kind": 2,
    "importPath": "by-extension.python.python-cheatsheet",
    "description": "by-extension.python.python-cheatsheet",
    "peekOfCode": "def keyword_args(**kwargs):\n    return kwargs\n# Let's call it to see what happens\nkeyword_args(big=\"foot\", loch=\"ness\")  # => {\"big\": \"foot\", \"loch\": \"ness\"}\n# You can do both at once, if you like\ndef all_the_args(*args, **kwargs):\n    print(args)\n    print(kwargs)\n\"\"\"\nall_the_args(1, 2, a=3, b=4) prints:",
    "detail": "by-extension.python.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "all_the_args",
    "kind": 2,
    "importPath": "by-extension.python.python-cheatsheet",
    "description": "by-extension.python.python-cheatsheet",
    "peekOfCode": "def all_the_args(*args, **kwargs):\n    print(args)\n    print(kwargs)\n\"\"\"\nall_the_args(1, 2, a=3, b=4) prints:\n    (1, 2)\n    {\"a\": 3, \"b\": 4}\n\"\"\"\n# When calling functions, you can do the opposite of args/kwargs!\n# Use * to expand tuples and use ** to expand kwargs.",
    "detail": "by-extension.python.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "swap",
    "kind": 2,
    "importPath": "by-extension.python.python-cheatsheet",
    "description": "by-extension.python.python-cheatsheet",
    "peekOfCode": "def swap(x, y):\n    return y, x  # Return multiple values as a tuple without the parenthesis.\n    # (Note: parenthesis have been excluded but can be included)\nx = 1\ny = 2\nx, y = swap(x, y)  # => x = 2, y = 1\n# (x, y) = swap(x,y)  # Again parenthesis have been excluded but can be included.\n# Function Scope\nx = 5\ndef set_x(num):",
    "detail": "by-extension.python.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "set_x",
    "kind": 2,
    "importPath": "by-extension.python.python-cheatsheet",
    "description": "by-extension.python.python-cheatsheet",
    "peekOfCode": "def set_x(num):\n    # Local var x not the same as global variable x\n    x = num  # => 43\n    print(x)  # => 43\ndef set_global_x(num):\n    global x\n    print(x)  # => 5\n    x = num  # global var x is now set to 6\n    print(x)  # => 6\nset_x(43)",
    "detail": "by-extension.python.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "set_global_x",
    "kind": 2,
    "importPath": "by-extension.python.python-cheatsheet",
    "description": "by-extension.python.python-cheatsheet",
    "peekOfCode": "def set_global_x(num):\n    global x\n    print(x)  # => 5\n    x = num  # global var x is now set to 6\n    print(x)  # => 6\nset_x(43)\nset_global_x(6)\n# Python has first class functions\ndef create_adder(x):\n    def adder(y):",
    "detail": "by-extension.python.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "create_adder",
    "kind": 2,
    "importPath": "by-extension.python.python-cheatsheet",
    "description": "by-extension.python.python-cheatsheet",
    "peekOfCode": "def create_adder(x):\n    def adder(y):\n        return x + y\n    return adder\nadd_10 = create_adder(10)\nadd_10(3)  # => 13\n# There are also anonymous functions\n(lambda x: x > 2)(3)  # => True\n(lambda x, y: x ** 2 + y ** 2)(2, 1)  # => 5\n# There are built-in higher order functions",
    "detail": "by-extension.python.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "double_numbers",
    "kind": 2,
    "importPath": "by-extension.python.python-cheatsheet",
    "description": "by-extension.python.python-cheatsheet",
    "peekOfCode": "def double_numbers(iterable):\n    for i in iterable:\n        yield i + i\n# Generators are memory-efficient because they only load the data needed to\n# process the next value in the iterable. This allows them to perform\n# operations on otherwise prohibitively large value ranges.\n# NOTE: `range` replaces `xrange` in Python 3.\nfor i in double_numbers(range(1, 900000000)):  # `range` is a generator.\n    print(i)\n    if i >= 30:",
    "detail": "by-extension.python.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "beg",
    "kind": 2,
    "importPath": "by-extension.python.python-cheatsheet",
    "description": "by-extension.python.python-cheatsheet",
    "peekOfCode": "def beg(target_function):\n    @wraps(target_function)\n    def wrapper(*args, **kwargs):\n        msg, say_please = target_function(*args, **kwargs)\n        if say_please:\n            return \"{} {}\".format(msg, \"Please! I am poor :(\")\n        return msg\n    return wrapper\n@beg\ndef say(say_please=False):",
    "detail": "by-extension.python.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "say",
    "kind": 2,
    "importPath": "by-extension.python.python-cheatsheet",
    "description": "by-extension.python.python-cheatsheet",
    "peekOfCode": "def say(say_please=False):\n    msg = \"Can you buy me a beer?\"\n    return msg, say_please\nprint(say())  # Can you buy me a beer?\nprint(say(say_please=True))  # Can you buy me a beer? Please! I am poor :(",
    "detail": "by-extension.python.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "a",
    "kind": 5,
    "importPath": "by-extension.python.python-cheatsheet",
    "description": "by-extension.python.python-cheatsheet",
    "peekOfCode": "a = [1, 2, 3, 4]  # Point a at a new list, [1, 2, 3, 4]\nb = a  # Point b at what a is pointing to\nb is a  # => True, a and b refer to the same object\nb == a  # => True, a's and b's objects are equal\nb = [1, 2, 3, 4]  # Point b at a new list, [1, 2, 3, 4]\nb is a  # => False, a and b do not refer to the same object\nb == a  # => True, a's and b's objects are equal\n# Strings are created with \" or '\n\"This is a string.\"\n\"This is also a string.\"",
    "detail": "by-extension.python.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "b",
    "kind": 5,
    "importPath": "by-extension.python.python-cheatsheet",
    "description": "by-extension.python.python-cheatsheet",
    "peekOfCode": "b = a  # Point b at what a is pointing to\nb is a  # => True, a and b refer to the same object\nb == a  # => True, a's and b's objects are equal\nb = [1, 2, 3, 4]  # Point b at a new list, [1, 2, 3, 4]\nb is a  # => False, a and b do not refer to the same object\nb == a  # => True, a's and b's objects are equal\n# Strings are created with \" or '\n\"This is a string.\"\n\"This is also a string.\"\n# Strings can be added too! But try not to do this.",
    "detail": "by-extension.python.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "b",
    "kind": 5,
    "importPath": "by-extension.python.python-cheatsheet",
    "description": "by-extension.python.python-cheatsheet",
    "peekOfCode": "b = [1, 2, 3, 4]  # Point b at a new list, [1, 2, 3, 4]\nb is a  # => False, a and b do not refer to the same object\nb == a  # => True, a's and b's objects are equal\n# Strings are created with \" or '\n\"This is a string.\"\n\"This is also a string.\"\n# Strings can be added too! But try not to do this.\n\"Hello \" + \"world!\"  # => \"Hello world!\"\n# String literals (but not variables) can be concatenated without using '+'\n\"Hello \" \"world!\"  # => \"Hello world!\"",
    "detail": "by-extension.python.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "name",
    "kind": 5,
    "importPath": "by-extension.python.python-cheatsheet",
    "description": "by-extension.python.python-cheatsheet",
    "peekOfCode": "name = \"Reiko\"\nf\"She said her name is {name}.\"  # => \"She said her name is Reiko\"\n# You can basically put any Python statement inside the braces and it will be output in the string.\nf\"{name} is {len(name)} characters long.\"  # => \"Reiko is 5 characters long.\"\n# None is an object\nNone  # => None\n# Don't use the equality \"==\" symbol to compare objects to None\n# Use \"is\" instead. This checks for equality of object identity.\n\"etc\" is None  # => False\nNone is None  # => True",
    "detail": "by-extension.python.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "input_string_var",
    "kind": 5,
    "importPath": "by-extension.python.python-cheatsheet",
    "description": "by-extension.python.python-cheatsheet",
    "peekOfCode": "input_string_var = input(\"Enter some data: \")  # Returns the data as a string\n# Note: In earlier versions of Python, input() method was named as raw_input()\n# There are no declarations, only assignments.\n# Convention is to use lower_case_with_underscores\nsome_var = 5\nsome_var  # => 5\n# Accessing a previously unassigned variable is an exception.\n# See Control Flow to learn more about exception handling.\nsome_unknown_var  # Raises a NameError\n# if can be used as an expression",
    "detail": "by-extension.python.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "some_var",
    "kind": 5,
    "importPath": "by-extension.python.python-cheatsheet",
    "description": "by-extension.python.python-cheatsheet",
    "peekOfCode": "some_var = 5\nsome_var  # => 5\n# Accessing a previously unassigned variable is an exception.\n# See Control Flow to learn more about exception handling.\nsome_unknown_var  # Raises a NameError\n# if can be used as an expression\n# Equivalent of C's '?:' ternary operator\n\"yahoo!\" if 3 > 2 else 2  # => \"yahoo!\"\n# Lists store sequences\nli = []",
    "detail": "by-extension.python.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "li",
    "kind": 5,
    "importPath": "by-extension.python.python-cheatsheet",
    "description": "by-extension.python.python-cheatsheet",
    "peekOfCode": "li = []\n# You can start with a prefilled list\nother_li = [4, 5, 6]\n# Add stuff to the end of a list with append\nli.append(1)  # li is now [1]\nli.append(2)  # li is now [1, 2]\nli.append(4)  # li is now [1, 2, 4]\nli.append(3)  # li is now [1, 2, 4, 3]\n# Remove from the end with pop\nli.pop()  # => 3 and li is now [1, 2, 4]",
    "detail": "by-extension.python.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "other_li",
    "kind": 5,
    "importPath": "by-extension.python.python-cheatsheet",
    "description": "by-extension.python.python-cheatsheet",
    "peekOfCode": "other_li = [4, 5, 6]\n# Add stuff to the end of a list with append\nli.append(1)  # li is now [1]\nli.append(2)  # li is now [1, 2]\nli.append(4)  # li is now [1, 2, 4]\nli.append(3)  # li is now [1, 2, 4, 3]\n# Remove from the end with pop\nli.pop()  # => 3 and li is now [1, 2, 4]\n# Let's put it back\nli.append(3)  # li is now [1, 2, 4, 3] again.",
    "detail": "by-extension.python.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "li2",
    "kind": 5,
    "importPath": "by-extension.python.python-cheatsheet",
    "description": "by-extension.python.python-cheatsheet",
    "peekOfCode": "li2 = li[:]  # => li2 = [1, 2, 4, 3] but (li2 is li) will result in false.\n# Remove arbitrary elements from a list with \"del\"\ndel li[2]  # li is now [1, 2, 3]\n# Remove first occurrence of a value\nli.remove(2)  # li is now [1, 3]\nli.remove(2)  # Raises a ValueError as 2 is not in the list\n# Insert an element at a specific index\nli.insert(1, 2)  # li is now [1, 2, 3] again\n# Get the index of the first item found matching the argument\nli.index(2)  # => 1",
    "detail": "by-extension.python.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "tup",
    "kind": 5,
    "importPath": "by-extension.python.python-cheatsheet",
    "description": "by-extension.python.python-cheatsheet",
    "peekOfCode": "tup = (1, 2, 3)\ntup[0]  # => 1\ntup[0] = 3  # Raises a TypeError\n# Note that a tuple of length one has to have a comma after the last element but\n# tuples of other lengths, even zero, do not.\ntype((1))  # => <class 'int'>\ntype((1,))  # => <class 'tuple'>\ntype(())  # => <class 'tuple'>\n# You can do most of the list operations on tuples too\nlen(tup)  # => 3",
    "detail": "by-extension.python.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "tup[0]",
    "kind": 5,
    "importPath": "by-extension.python.python-cheatsheet",
    "description": "by-extension.python.python-cheatsheet",
    "peekOfCode": "tup[0] = 3  # Raises a TypeError\n# Note that a tuple of length one has to have a comma after the last element but\n# tuples of other lengths, even zero, do not.\ntype((1))  # => <class 'int'>\ntype((1,))  # => <class 'tuple'>\ntype(())  # => <class 'tuple'>\n# You can do most of the list operations on tuples too\nlen(tup)  # => 3\ntup + (4, 5, 6)  # => (1, 2, 3, 4, 5, 6)\ntup[:2]  # => (1, 2)",
    "detail": "by-extension.python.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "empty_dict",
    "kind": 5,
    "importPath": "by-extension.python.python-cheatsheet",
    "description": "by-extension.python.python-cheatsheet",
    "peekOfCode": "empty_dict = {}\n# Here is a prefilled dictionary\nfilled_dict = {\"one\": 1, \"two\": 2, \"three\": 3}\n# Note keys for dictionaries have to be immutable types. This is to ensure that\n# the key can be converted to a constant hash value for quick look-ups.\n# Immutable types include ints, floats, strings, tuples.\ninvalid_dict = {[1, 2, 3]: \"123\"}  # => Raises a TypeError: unhashable type: 'list'\nvalid_dict = {(1, 2, 3): [1, 2, 3]}  # Values can be of any type, however.\n# Look up values with []\nfilled_dict[\"one\"]  # => 1",
    "detail": "by-extension.python.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "filled_dict",
    "kind": 5,
    "importPath": "by-extension.python.python-cheatsheet",
    "description": "by-extension.python.python-cheatsheet",
    "peekOfCode": "filled_dict = {\"one\": 1, \"two\": 2, \"three\": 3}\n# Note keys for dictionaries have to be immutable types. This is to ensure that\n# the key can be converted to a constant hash value for quick look-ups.\n# Immutable types include ints, floats, strings, tuples.\ninvalid_dict = {[1, 2, 3]: \"123\"}  # => Raises a TypeError: unhashable type: 'list'\nvalid_dict = {(1, 2, 3): [1, 2, 3]}  # Values can be of any type, however.\n# Look up values with []\nfilled_dict[\"one\"]  # => 1\n# Get all keys as an iterable with \"keys()\". We need to wrap the call in list()\n# to turn it into a list. We'll talk about those later.  Note - for Python",
    "detail": "by-extension.python.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "invalid_dict",
    "kind": 5,
    "importPath": "by-extension.python.python-cheatsheet",
    "description": "by-extension.python.python-cheatsheet",
    "peekOfCode": "invalid_dict = {[1, 2, 3]: \"123\"}  # => Raises a TypeError: unhashable type: 'list'\nvalid_dict = {(1, 2, 3): [1, 2, 3]}  # Values can be of any type, however.\n# Look up values with []\nfilled_dict[\"one\"]  # => 1\n# Get all keys as an iterable with \"keys()\". We need to wrap the call in list()\n# to turn it into a list. We'll talk about those later.  Note - for Python\n# versions <3.7, dictionary key ordering is not guaranteed. Your results might\n# not match the example below exactly. However, as of Python 3.7, dictionary\n# items maintain the order at which they are inserted into the dictionary.\nlist(filled_dict.keys())  # => [\"three\", \"two\", \"one\"] in Python <3.7",
    "detail": "by-extension.python.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "valid_dict",
    "kind": 5,
    "importPath": "by-extension.python.python-cheatsheet",
    "description": "by-extension.python.python-cheatsheet",
    "peekOfCode": "valid_dict = {(1, 2, 3): [1, 2, 3]}  # Values can be of any type, however.\n# Look up values with []\nfilled_dict[\"one\"]  # => 1\n# Get all keys as an iterable with \"keys()\". We need to wrap the call in list()\n# to turn it into a list. We'll talk about those later.  Note - for Python\n# versions <3.7, dictionary key ordering is not guaranteed. Your results might\n# not match the example below exactly. However, as of Python 3.7, dictionary\n# items maintain the order at which they are inserted into the dictionary.\nlist(filled_dict.keys())  # => [\"three\", \"two\", \"one\"] in Python <3.7\nlist(filled_dict.keys())  # => [\"one\", \"two\", \"three\"] in Python 3.7+",
    "detail": "by-extension.python.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "filled_dict[\"four\"]",
    "kind": 5,
    "importPath": "by-extension.python.python-cheatsheet",
    "description": "by-extension.python.python-cheatsheet",
    "peekOfCode": "filled_dict[\"four\"] = 4  # another way to add to dict\n# Remove keys from a dictionary with del\ndel filled_dict[\"one\"]  # Removes the key \"one\" from filled dict\n# From Python 3.5 you can also use the additional unpacking options\n{\"a\": 1, **{\"b\": 2}}  # => {'a': 1, 'b': 2}\n{\"a\": 1, **{\"a\": 2}}  # => {'a': 2}\n# Sets store ... well sets\nempty_set = set()\n# Initialize a set with a bunch of values. Yeah, it looks a bit like a dict. Sorry.\nsome_set = {1, 1, 2, 2, 3, 4}  # some_set is now {1, 2, 3, 4}",
    "detail": "by-extension.python.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "empty_set",
    "kind": 5,
    "importPath": "by-extension.python.python-cheatsheet",
    "description": "by-extension.python.python-cheatsheet",
    "peekOfCode": "empty_set = set()\n# Initialize a set with a bunch of values. Yeah, it looks a bit like a dict. Sorry.\nsome_set = {1, 1, 2, 2, 3, 4}  # some_set is now {1, 2, 3, 4}\n# Similar to keys of a dictionary, elements of a set have to be immutable.\ninvalid_set = {[1], 1}  # => Raises a TypeError: unhashable type: 'list'\nvalid_set = {(1,), 1}\n# Add one more item to the set\nfilled_set = some_set\nfilled_set.add(5)  # filled_set is now {1, 2, 3, 4, 5}\n# Sets do not have duplicate elements",
    "detail": "by-extension.python.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "some_set",
    "kind": 5,
    "importPath": "by-extension.python.python-cheatsheet",
    "description": "by-extension.python.python-cheatsheet",
    "peekOfCode": "some_set = {1, 1, 2, 2, 3, 4}  # some_set is now {1, 2, 3, 4}\n# Similar to keys of a dictionary, elements of a set have to be immutable.\ninvalid_set = {[1], 1}  # => Raises a TypeError: unhashable type: 'list'\nvalid_set = {(1,), 1}\n# Add one more item to the set\nfilled_set = some_set\nfilled_set.add(5)  # filled_set is now {1, 2, 3, 4, 5}\n# Sets do not have duplicate elements\nfilled_set.add(5)  # it remains as before {1, 2, 3, 4, 5}\n# Do set intersection with &",
    "detail": "by-extension.python.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "invalid_set",
    "kind": 5,
    "importPath": "by-extension.python.python-cheatsheet",
    "description": "by-extension.python.python-cheatsheet",
    "peekOfCode": "invalid_set = {[1], 1}  # => Raises a TypeError: unhashable type: 'list'\nvalid_set = {(1,), 1}\n# Add one more item to the set\nfilled_set = some_set\nfilled_set.add(5)  # filled_set is now {1, 2, 3, 4, 5}\n# Sets do not have duplicate elements\nfilled_set.add(5)  # it remains as before {1, 2, 3, 4, 5}\n# Do set intersection with &\nother_set = {3, 4, 5, 6}\nfilled_set & other_set  # => {3, 4, 5}",
    "detail": "by-extension.python.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "valid_set",
    "kind": 5,
    "importPath": "by-extension.python.python-cheatsheet",
    "description": "by-extension.python.python-cheatsheet",
    "peekOfCode": "valid_set = {(1,), 1}\n# Add one more item to the set\nfilled_set = some_set\nfilled_set.add(5)  # filled_set is now {1, 2, 3, 4, 5}\n# Sets do not have duplicate elements\nfilled_set.add(5)  # it remains as before {1, 2, 3, 4, 5}\n# Do set intersection with &\nother_set = {3, 4, 5, 6}\nfilled_set & other_set  # => {3, 4, 5}\n# Do set union with |",
    "detail": "by-extension.python.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "filled_set",
    "kind": 5,
    "importPath": "by-extension.python.python-cheatsheet",
    "description": "by-extension.python.python-cheatsheet",
    "peekOfCode": "filled_set = some_set\nfilled_set.add(5)  # filled_set is now {1, 2, 3, 4, 5}\n# Sets do not have duplicate elements\nfilled_set.add(5)  # it remains as before {1, 2, 3, 4, 5}\n# Do set intersection with &\nother_set = {3, 4, 5, 6}\nfilled_set & other_set  # => {3, 4, 5}\n# Do set union with |\nfilled_set | other_set  # => {1, 2, 3, 4, 5, 6}\n# Do set difference with -",
    "detail": "by-extension.python.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "other_set",
    "kind": 5,
    "importPath": "by-extension.python.python-cheatsheet",
    "description": "by-extension.python.python-cheatsheet",
    "peekOfCode": "other_set = {3, 4, 5, 6}\nfilled_set & other_set  # => {3, 4, 5}\n# Do set union with |\nfilled_set | other_set  # => {1, 2, 3, 4, 5, 6}\n# Do set difference with -\n{1, 2, 3, 4} - {2, 3, 5}  # => {1, 4}\n# Do set symmetric difference with ^\n{1, 2, 3, 4} ^ {2, 3, 5}  # => {1, 4, 5}\n# Check if set on the left is a superset of set on the right\n{1, 2} >= {1, 2, 3}  # => False",
    "detail": "by-extension.python.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "some_var",
    "kind": 5,
    "importPath": "by-extension.python.python-cheatsheet",
    "description": "by-extension.python.python-cheatsheet",
    "peekOfCode": "some_var = 5\n# Here is an if statement. Indentation is significant in Python!\n# Convention is to use four spaces, not tabs.\n# This prints \"some_var is smaller than 10\"\nif some_var > 10:\n    print(\"some_var is totally bigger than 10.\")\nelif some_var < 10:  # This elif clause is optional.\n    print(\"some_var is smaller than 10.\")\nelse:  # This is optional too.\n    print(\"some_var is indeed 10.\")",
    "detail": "by-extension.python.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "list",
    "kind": 5,
    "importPath": "by-extension.python.python-cheatsheet",
    "description": "by-extension.python.python-cheatsheet",
    "peekOfCode": "list = [\"dog\", \"cat\", \"mouse\"]\nfor i, value in enumerate(list):\n    print(i, value)\n\"\"\"\nWhile loops go until a condition is no longer met.\nprints:\n    0\n    1\n    2\n    3",
    "detail": "by-extension.python.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "x",
    "kind": 5,
    "importPath": "by-extension.python.python-cheatsheet",
    "description": "by-extension.python.python-cheatsheet",
    "peekOfCode": "x = 0\nwhile x < 4:\n    print(x)\n    x += 1  # Shorthand for x = x + 1\n# Handle exceptions with a try/except block\ntry:\n    # Use \"raise\" to raise an error\n    raise IndexError(\"This is an index error\")\nexcept IndexError as e:\n    pass  # Pass is just a no-op. Usually you would do recovery here.",
    "detail": "by-extension.python.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "contents",
    "kind": 5,
    "importPath": "by-extension.python.python-cheatsheet",
    "description": "by-extension.python.python-cheatsheet",
    "peekOfCode": "contents = {\"aa\": 12, \"bb\": 21}\nwith open(\"myfile1.txt\", \"w+\") as file:\n    file.write(str(contents))  # writes a string to a file\nwith open(\"myfile2.txt\", \"w+\") as file:\n    file.write(json.dumps(contents))  # writes an object to a file\n# Reading from a file\nwith open(\"myfile1.txt\", \"r+\") as file:\n    contents = file.read()  # reads a string from a file\nprint(contents)\n# print: {\"aa\": 12, \"bb\": 21}",
    "detail": "by-extension.python.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "filled_dict",
    "kind": 5,
    "importPath": "by-extension.python.python-cheatsheet",
    "description": "by-extension.python.python-cheatsheet",
    "peekOfCode": "filled_dict = {\"one\": 1, \"two\": 2, \"three\": 3}\nour_iterable = filled_dict.keys()\nprint(\n    our_iterable\n)  # => dict_keys(['one', 'two', 'three']). This is an object that implements our Iterable interface.\n# We can loop over it.\nfor i in our_iterable:\n    print(i)  # Prints one, two, three\n# However we cannot address elements by index.\nour_iterable[1]  # Raises a TypeError",
    "detail": "by-extension.python.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "our_iterable",
    "kind": 5,
    "importPath": "by-extension.python.python-cheatsheet",
    "description": "by-extension.python.python-cheatsheet",
    "peekOfCode": "our_iterable = filled_dict.keys()\nprint(\n    our_iterable\n)  # => dict_keys(['one', 'two', 'three']). This is an object that implements our Iterable interface.\n# We can loop over it.\nfor i in our_iterable:\n    print(i)  # Prints one, two, three\n# However we cannot address elements by index.\nour_iterable[1]  # Raises a TypeError\n# An iterable is an object that knows how to create an iterator.",
    "detail": "by-extension.python.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "our_iterator",
    "kind": 5,
    "importPath": "by-extension.python.python-cheatsheet",
    "description": "by-extension.python.python-cheatsheet",
    "peekOfCode": "our_iterator = iter(our_iterable)\n# Our iterator is an object that can remember the state as we traverse through it.\n# We get the next object with \"next()\".\nnext(our_iterator)  # => \"one\"\n# It maintains state as we iterate.\nnext(our_iterator)  # => \"two\"\nnext(our_iterator)  # => \"three\"\n# After the iterator has returned all of its data, it raises a StopIteration exception\nnext(our_iterator)  # Raises StopIteration\n# We can also loop over it, in fact, \"for\" does this implicitly!",
    "detail": "by-extension.python.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "our_iterator",
    "kind": 5,
    "importPath": "by-extension.python.python-cheatsheet",
    "description": "by-extension.python.python-cheatsheet",
    "peekOfCode": "our_iterator = iter(our_iterable)\nfor i in our_iterator:\n    print(i)  # Prints one, two, three\n# You can grab all the elements of an iterable or iterator by calling list() on it.\nlist(our_iterable)  # => Returns [\"one\", \"two\", \"three\"]\nlist(our_iterator)  # => Returns [] because state is saved\n####################################################\n## 4. Functions\n####################################################\n# Use \"def\" to create new functions",
    "detail": "by-extension.python.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "args",
    "kind": 5,
    "importPath": "by-extension.python.python-cheatsheet",
    "description": "by-extension.python.python-cheatsheet",
    "peekOfCode": "args = (1, 2, 3, 4)\nkwargs = {\"a\": 3, \"b\": 4}\nall_the_args(*args)  # equivalent to all_the_args(1, 2, 3, 4)\nall_the_args(**kwargs)  # equivalent to all_the_args(a=3, b=4)\nall_the_args(*args, **kwargs)  # equivalent to all_the_args(1, 2, 3, 4, a=3, b=4)\n# Returning multiple values (with tuple assignments)\ndef swap(x, y):\n    return y, x  # Return multiple values as a tuple without the parenthesis.\n    # (Note: parenthesis have been excluded but can be included)\nx = 1",
    "detail": "by-extension.python.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "kwargs",
    "kind": 5,
    "importPath": "by-extension.python.python-cheatsheet",
    "description": "by-extension.python.python-cheatsheet",
    "peekOfCode": "kwargs = {\"a\": 3, \"b\": 4}\nall_the_args(*args)  # equivalent to all_the_args(1, 2, 3, 4)\nall_the_args(**kwargs)  # equivalent to all_the_args(a=3, b=4)\nall_the_args(*args, **kwargs)  # equivalent to all_the_args(1, 2, 3, 4, a=3, b=4)\n# Returning multiple values (with tuple assignments)\ndef swap(x, y):\n    return y, x  # Return multiple values as a tuple without the parenthesis.\n    # (Note: parenthesis have been excluded but can be included)\nx = 1\ny = 2",
    "detail": "by-extension.python.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "x",
    "kind": 5,
    "importPath": "by-extension.python.python-cheatsheet",
    "description": "by-extension.python.python-cheatsheet",
    "peekOfCode": "x = 1\ny = 2\nx, y = swap(x, y)  # => x = 2, y = 1\n# (x, y) = swap(x,y)  # Again parenthesis have been excluded but can be included.\n# Function Scope\nx = 5\ndef set_x(num):\n    # Local var x not the same as global variable x\n    x = num  # => 43\n    print(x)  # => 43",
    "detail": "by-extension.python.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "y",
    "kind": 5,
    "importPath": "by-extension.python.python-cheatsheet",
    "description": "by-extension.python.python-cheatsheet",
    "peekOfCode": "y = 2\nx, y = swap(x, y)  # => x = 2, y = 1\n# (x, y) = swap(x,y)  # Again parenthesis have been excluded but can be included.\n# Function Scope\nx = 5\ndef set_x(num):\n    # Local var x not the same as global variable x\n    x = num  # => 43\n    print(x)  # => 43\ndef set_global_x(num):",
    "detail": "by-extension.python.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "x",
    "kind": 5,
    "importPath": "by-extension.python.python-cheatsheet",
    "description": "by-extension.python.python-cheatsheet",
    "peekOfCode": "x = 5\ndef set_x(num):\n    # Local var x not the same as global variable x\n    x = num  # => 43\n    print(x)  # => 43\ndef set_global_x(num):\n    global x\n    print(x)  # => 5\n    x = num  # global var x is now set to 6\n    print(x)  # => 6",
    "detail": "by-extension.python.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "add_10",
    "kind": 5,
    "importPath": "by-extension.python.python-cheatsheet",
    "description": "by-extension.python.python-cheatsheet",
    "peekOfCode": "add_10 = create_adder(10)\nadd_10(3)  # => 13\n# There are also anonymous functions\n(lambda x: x > 2)(3)  # => True\n(lambda x, y: x ** 2 + y ** 2)(2, 1)  # => 5\n# There are built-in higher order functions\nlist(map(add_10, [1, 2, 3]))  # => [11, 12, 13]\nlist(map(max, [1, 2, 3], [4, 2, 1]))  # => [4, 2, 3]\nlist(filter(lambda x: x > 5, [3, 4, 5, 6, 7]))  # => [6, 7]\n# We can use list comprehensions for nice maps and filters",
    "detail": "by-extension.python.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "values",
    "kind": 5,
    "importPath": "by-extension.python.python-cheatsheet",
    "description": "by-extension.python.python-cheatsheet",
    "peekOfCode": "values = (-x for x in [1, 2, 3, 4, 5])\nfor x in values:\n    print(x)  # prints -1 -2 -3 -4 -5 to console/terminal\n# You can also cast a generator comprehension directly to a list.\nvalues = (-x for x in [1, 2, 3, 4, 5])\ngen_to_list = list(values)\nprint(gen_to_list)  # => [-1, -2, -3, -4, -5]\n# Decorators\n# In this example `beg` wraps `say`. If say_please is True then it\n# will change the returned message.",
    "detail": "by-extension.python.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "values",
    "kind": 5,
    "importPath": "by-extension.python.python-cheatsheet",
    "description": "by-extension.python.python-cheatsheet",
    "peekOfCode": "values = (-x for x in [1, 2, 3, 4, 5])\ngen_to_list = list(values)\nprint(gen_to_list)  # => [-1, -2, -3, -4, -5]\n# Decorators\n# In this example `beg` wraps `say`. If say_please is True then it\n# will change the returned message.\nfrom functools import wraps\ndef beg(target_function):\n    @wraps(target_function)\n    def wrapper(*args, **kwargs):",
    "detail": "by-extension.python.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "gen_to_list",
    "kind": 5,
    "importPath": "by-extension.python.python-cheatsheet",
    "description": "by-extension.python.python-cheatsheet",
    "peekOfCode": "gen_to_list = list(values)\nprint(gen_to_list)  # => [-1, -2, -3, -4, -5]\n# Decorators\n# In this example `beg` wraps `say`. If say_please is True then it\n# will change the returned message.\nfrom functools import wraps\ndef beg(target_function):\n    @wraps(target_function)\n    def wrapper(*args, **kwargs):\n        msg, say_please = target_function(*args, **kwargs)",
    "detail": "by-extension.python.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "Application",
    "kind": 6,
    "importPath": "by-extension.python.python-quiz-template",
    "description": "by-extension.python.python-quiz-template",
    "peekOfCode": "class Application(tk.Frame):\n    def __init__(self, master=None):\n        super().__init__(master)\n        self.master = master\n        self.pack()\n        self.createWidgets()\n    def createWidgets(self):\n        self.hello = tk.Button(self)\n        self.hello[\"text\"] = \"Quiz Rules\"\n        self.hello[\"command\"] = self.sayHello",
    "detail": "by-extension.python.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "s",
    "kind": 2,
    "importPath": "by-extension.python.python-quiz-template",
    "description": "by-extension.python.python-quiz-template",
    "peekOfCode": "def s(str):\n    for letter in str:\n        sys.stdout.write(letter)\n        sys.stdout.flush()\n        slp(0.05)\n    print()\ndef slow(str):\n    for letter in str:\n        sys.stdout.write(letter)\n        sys.stdout.flush()",
    "detail": "by-extension.python.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "slow",
    "kind": 2,
    "importPath": "by-extension.python.python-quiz-template",
    "description": "by-extension.python.python-quiz-template",
    "peekOfCode": "def slow(str):\n    for letter in str:\n        sys.stdout.write(letter)\n        sys.stdout.flush()\n        slp(0.005)\n    print()\ndef cr():\n    print(\"\\033c\", end=\"\", flush=True)\ndef t():\n    slp(1.5)",
    "detail": "by-extension.python.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "cr",
    "kind": 2,
    "importPath": "by-extension.python.python-quiz-template",
    "description": "by-extension.python.python-quiz-template",
    "peekOfCode": "def cr():\n    print(\"\\033c\", end=\"\", flush=True)\ndef t():\n    slp(1.5)\n    cr()\n# keep this comment or else I'll report you: made by IndyRishi and Wilke000\ns(\"Hello! Welcome to my quiz!\")\nimport tkinter as tk\nclass Application(tk.Frame):\n    def __init__(self, master=None):",
    "detail": "by-extension.python.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "t",
    "kind": 2,
    "importPath": "by-extension.python.python-quiz-template",
    "description": "by-extension.python.python-quiz-template",
    "peekOfCode": "def t():\n    slp(1.5)\n    cr()\n# keep this comment or else I'll report you: made by IndyRishi and Wilke000\ns(\"Hello! Welcome to my quiz!\")\nimport tkinter as tk\nclass Application(tk.Frame):\n    def __init__(self, master=None):\n        super().__init__(master)\n        self.master = master",
    "detail": "by-extension.python.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "root",
    "kind": 5,
    "importPath": "by-extension.python.python-quiz-template",
    "description": "by-extension.python.python-quiz-template",
    "peekOfCode": "root = tk.Tk()\napp = Application(master=root)\napp.mainloop()\nscoreboardxyz = 0\ns(\n    \"I will say the definition, you say the word lowercase, no spaces. If you put the wrong answer three times you go to the next question. Spelling counts\"\n)\nq1 = input(\"definition:\\t\\n\")\nif q1 == \"word\":\n    s(\"Correct!\\n\")",
    "detail": "by-extension.python.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "app",
    "kind": 5,
    "importPath": "by-extension.python.python-quiz-template",
    "description": "by-extension.python.python-quiz-template",
    "peekOfCode": "app = Application(master=root)\napp.mainloop()\nscoreboardxyz = 0\ns(\n    \"I will say the definition, you say the word lowercase, no spaces. If you put the wrong answer three times you go to the next question. Spelling counts\"\n)\nq1 = input(\"definition:\\t\\n\")\nif q1 == \"word\":\n    s(\"Correct!\\n\")\n    t()",
    "detail": "by-extension.python.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "scoreboardxyz",
    "kind": 5,
    "importPath": "by-extension.python.python-quiz-template",
    "description": "by-extension.python.python-quiz-template",
    "peekOfCode": "scoreboardxyz = 0\ns(\n    \"I will say the definition, you say the word lowercase, no spaces. If you put the wrong answer three times you go to the next question. Spelling counts\"\n)\nq1 = input(\"definition:\\t\\n\")\nif q1 == \"word\":\n    s(\"Correct!\\n\")\n    t()\n    scoreboardxyz = scoreboardxyz + 1\nelse:",
    "detail": "by-extension.python.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "q1",
    "kind": 5,
    "importPath": "by-extension.python.python-quiz-template",
    "description": "by-extension.python.python-quiz-template",
    "peekOfCode": "q1 = input(\"definition:\\t\\n\")\nif q1 == \"word\":\n    s(\"Correct!\\n\")\n    t()\n    scoreboardxyz = scoreboardxyz + 1\nelse:\n    s(\"Incorrect. Try again.\\n\")\n    q1 = input(\"definition:\\t\\n\")\n    if q1 == \"word\":\n        s(\"Correct!\\n\")",
    "detail": "by-extension.python.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "q2",
    "kind": 5,
    "importPath": "by-extension.python.python-quiz-template",
    "description": "by-extension.python.python-quiz-template",
    "peekOfCode": "q2 = input(\"definition:\\t\\n\")\nif q2 == \"word\":\n    s(\"Correct!\\n\")\n    t()\n    scoreboardxyz = scoreboardxyz + 1\nelse:\n    s(\"Incorrect. Try again.\\n\")\n    t()\n    q2 = input(\"definition:\\t\\n\")\n    if q2 == \"word\":",
    "detail": "by-extension.python.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "q3",
    "kind": 5,
    "importPath": "by-extension.python.python-quiz-template",
    "description": "by-extension.python.python-quiz-template",
    "peekOfCode": "q3 = input(\"definition::\\t\\n\")\nif q3 == \"word\":\n    s(\"Correct!\\n\")\n    t()\n    scoreboardxyz = scoreboardxyz + 1\nelse:\n    s(\"Incorrect. Try again.\\n\")\n    t()\n    q3 = input(\"definition::\\t\\n\")\n    if q3 == \"word\":",
    "detail": "by-extension.python.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "q4",
    "kind": 5,
    "importPath": "by-extension.python.python-quiz-template",
    "description": "by-extension.python.python-quiz-template",
    "peekOfCode": "q4 = input(\"definition:\\t\\n\")\nif q4 == \"word\":\n    s(\"Correct!\\n\")\n    t()\n    scoreboardxyz = scoreboardxyz + 1\nelse:\n    s(\"Incorrect. Try again.\\n\")\n    t()\n    q4 = input(\"definition\\t\\n\")\n    if q4 == \"word\":",
    "detail": "by-extension.python.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "q5",
    "kind": 5,
    "importPath": "by-extension.python.python-quiz-template",
    "description": "by-extension.python.python-quiz-template",
    "peekOfCode": "q5 = input(\"definition:\\t\\n\")\nif q5 == \"word\":\n    s(\"Correct!\\n\")\n    t()\n    scoreboardxyz = scoreboardxyz + 1\nelse:\n    s(\"Incorrect. Try again.\\n\")\n    t()\n    q5 = input(\"definition:\\t\\n\")\n    if q5 == \"word\":",
    "detail": "by-extension.python.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "q6",
    "kind": 5,
    "importPath": "by-extension.python.python-quiz-template",
    "description": "by-extension.python.python-quiz-template",
    "peekOfCode": "q6 = input(\"definition:\\t\\n\")\nif q6 == \"word\":\n    s(\"Correct!\\n\")\n    t()\n    scoreboardxyz = scoreboardxyz + 1\nelse:\n    s(\"Incorrect. Try again.\\n\")\n    t()\n    q6 = input(\"definition:\\t\\n\")\n    if q6 == \"word\":",
    "detail": "by-extension.python.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "q7",
    "kind": 5,
    "importPath": "by-extension.python.python-quiz-template",
    "description": "by-extension.python.python-quiz-template",
    "peekOfCode": "q7 = input(\"definition:\\t\\n\")\nif q7 == \"word\":\n    s(\"Correct!\\n\")\n    t()\n    scoreboardxyz = scoreboardxyz + 1\nelse:\n    s(\"Incorrect. Try again.\\n\")\n    t()\n    q7 = input(\"definition:\\t\\n\")\n    if q7 == \"word\":",
    "detail": "by-extension.python.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "q8",
    "kind": 5,
    "importPath": "by-extension.python.python-quiz-template",
    "description": "by-extension.python.python-quiz-template",
    "peekOfCode": "q8 = input(\"definition:\\t\\n\")\nif q8 == \"word\":\n    s(\"Correct!\\n\")\n    t()\n    scoreboardxyz = scoreboardxyz + 1\nelse:\n    s(\"Incorrect. Try again.\\n\")\n    t()\n    q8 = input(\"definition:\\t\\n\")\n    if q8 == \"word\":",
    "detail": "by-extension.python.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "q9",
    "kind": 5,
    "importPath": "by-extension.python.python-quiz-template",
    "description": "by-extension.python.python-quiz-template",
    "peekOfCode": "q9 = input(\"definition:\\t\\n\")\nif q9 == \"word\":\n    s(\"Correct!\\n\")\n    t()\n    scoreboardxyz = scoreboardxyz + 1\nelse:\n    s(\"Incorrect. Try again.\\n\")\n    t()\n    q9 = input(\"definition:\\t\\n\")\n    if q9 == \"word\":",
    "detail": "by-extension.python.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "q10",
    "kind": 5,
    "importPath": "by-extension.python.python-quiz-template",
    "description": "by-extension.python.python-quiz-template",
    "peekOfCode": "q10 = input(\"definition:\\t\\n\")\nif q10 == \"word\":\n    s(\"Correct!\\n\")\n    t()\n    scoreboardxyz = scoreboardxyz + 1\nelse:\n    s(\"Incorrect. Try again.\\n\")\n    q10 = input(\"definition:\\t\\n\")\n    if q10 == \"word\":\n        s(\"Correct!\\n\")",
    "detail": "by-extension.python.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "q11",
    "kind": 5,
    "importPath": "by-extension.python.python-quiz-template",
    "description": "by-extension.python.python-quiz-template",
    "peekOfCode": "q11 = input(\"definition:\\t\\n\")\nif q11 == \"word\":\n    s(\"Correct!\\n\")\n    t()\n    scoreboardxyz = scoreboardxyz + 1\nelse:\n    s(\"Incorrect. Try again.\\n\")\n    t()\n    q11 = input(\"definition:\\t\\n\")\n    if q11 == \"word\":",
    "detail": "by-extension.python.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "q12",
    "kind": 5,
    "importPath": "by-extension.python.python-quiz-template",
    "description": "by-extension.python.python-quiz-template",
    "peekOfCode": "q12 = input(\"definition:\\t\\n\")\nif q12 == \"word\":\n    s(\"Correct!\\n\")\n    t()\n    scoreboardxyz = scoreboardxyz + 1\nelse:\n    s(\"Incorrect. Try again.\\n\")\n    t()\n    q12 = input(\"definition:\\t\\n\")\n    if q12 == \"word\":",
    "detail": "by-extension.python.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "q13",
    "kind": 5,
    "importPath": "by-extension.python.python-quiz-template",
    "description": "by-extension.python.python-quiz-template",
    "peekOfCode": "q13 = input(\"definition:\\t\\n\")\nif q13 == \"word\":\n    s(\"Correct!\\n\")\n    t()\n    scoreboardxyz = scoreboardxyz + 1\nelse:\n    s(\"Incorrect. Try again.\\n\")\n    t()\n    q13 = input(\"definition:\\t\\n\")\n    if q13 == \"word\":",
    "detail": "by-extension.python.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "q14",
    "kind": 5,
    "importPath": "by-extension.python.python-quiz-template",
    "description": "by-extension.python.python-quiz-template",
    "peekOfCode": "q14 = input(\"definition:\\t\\n\")\nif q14 == \"word\":\n    s(\"Correct!\\n\")\n    t()\n    scoreboardxyz = scoreboardxyz + 1\nelse:\n    s(\"Incorrect. Try again.\\n\")\n    t()\n    q14 = input(\"definition:\\t\\n\")\n    if q14 == \"word\":",
    "detail": "by-extension.python.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "q15",
    "kind": 5,
    "importPath": "by-extension.python.python-quiz-template",
    "description": "by-extension.python.python-quiz-template",
    "peekOfCode": "q15 = input(\"definition:\\t\\n\")\nif q15 == \"word\":\n    s(\"Correct!\\n\")\n    t()\n    scoreboardxyz = scoreboardxyz + 1\nelse:\n    s(\"Incorrect. Try again.\\n\")\n    t()\n    q15 = input(\"definition:\\t\\n\")\n    if q15 == \"word\":",
    "detail": "by-extension.python.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "q16",
    "kind": 5,
    "importPath": "by-extension.python.python-quiz-template",
    "description": "by-extension.python.python-quiz-template",
    "peekOfCode": "q16 = input(\"definition:\\t\\n\")\nif q16 == \"word\":\n    s(\"Correct!\\n\")\n    t()\n    scoreboardxyz = scoreboardxyz + 1\nelse:\n    s(\"Incorrect. Try again.\\n\")\n    t()\n    q16 = input(\"definition:\\t\\n\")\n    if q16 == \"word\":",
    "detail": "by-extension.python.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "q17",
    "kind": 5,
    "importPath": "by-extension.python.python-quiz-template",
    "description": "by-extension.python.python-quiz-template",
    "peekOfCode": "q17 = input(\"definition:\\t\\n\")\nif q17 == \"word\":\n    s(\"Correct!\\n\")\n    t()\n    scoreboardxyz = scoreboardxyz + 1\nelse:\n    s(\"Incorrect. Try again.\\n\")\n    t()\n    q17 = input(\"definition:\\t\\n\")\n    if q17 == \"word\":",
    "detail": "by-extension.python.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "q18",
    "kind": 5,
    "importPath": "by-extension.python.python-quiz-template",
    "description": "by-extension.python.python-quiz-template",
    "peekOfCode": "q18 = input(\"definition:\\t\\n\")\nif q18 == \"word\":\n    s(\"Correct!\\n\")\n    t()\n    scoreboardxyz = scoreboardxyz + 1\nelse:\n    s(\"Incorrect. Try again.\\n\")\n    t()\n    q18 = input(\"definition:\\t\\n\")\n    if q18 == \"word\":",
    "detail": "by-extension.python.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "q19",
    "kind": 5,
    "importPath": "by-extension.python.python-quiz-template",
    "description": "by-extension.python.python-quiz-template",
    "peekOfCode": "q19 = input(\"definition:\\t\\n\")\nif q19 == \"word\":\n    s(\"Correct!\\n\")\n    t()\n    scoreboardxyz = scoreboardxyz + 1\nelse:\n    s(\"Incorrect. Try again.\\n\")\n    t()\n    q19 = input(\"definition:\\t\\n\")\n    if q19 == \"word\":",
    "detail": "by-extension.python.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "q20",
    "kind": 5,
    "importPath": "by-extension.python.python-quiz-template",
    "description": "by-extension.python.python-quiz-template",
    "peekOfCode": "q20 = input(\"definition:\\t\\n\")\nif q20 == \"word\":\n    s(\"Correct! Thank you for playing.\\n\")\n    t()\n    scoreboardxyz = scoreboardxyz + 1\n    print(\"Your score was\", scoreboardxyz, \"out of 20.\")\nelse:\n    s(\"Incorrect. Try again.\\n\")\n    t()\n    q20 = input(\"definition:\\t\\n\")",
    "detail": "by-extension.python.python-quiz-template",
    "documentation": {}
  },
  {
    "label": "AngryBird",
    "kind": 6,
    "importPath": "by-extension.python.python-study-guide",
    "description": "by-extension.python.python-study-guide",
    "peekOfCode": "class AngryBird:\n    # Slots optimize property access and memory usage and prevent you\n    # from arbitrarily assigning new properties the instance\n    __slots__ = [\"_x\", \"_y\"]\n    # Constructor\n    def __init__(self, x=0, y=0):\n        # Doc String\n        \"\"\"\n        Construct a new AngryBird by setting it's position to (0, 0)\n        \"\"\"",
    "detail": "by-extension.python.python-study-guide",
    "documentation": {}
  },
  {
    "label": "say_hi",
    "kind": 2,
    "importPath": "by-extension.python.python-study-guide",
    "description": "by-extension.python.python-study-guide",
    "peekOfCode": "def say_hi(name):\n    \"\"\"<---- Multi-Line Comments and Docstrings\n    This is where you put your content for help() to inform the user\n    about what your function does and how to use it\n    \"\"\"\n    print(f\"Hello {name}!\")\nprint(say_hi(\"Bryan\"))  # Should get the print inside the function, then None\n# Boolean Values\n# Work the same as in JS, except they are title case: True and False\na = True",
    "detail": "by-extension.python.python-study-guide",
    "documentation": {}
  },
  {
    "label": "printCopyright",
    "kind": 2,
    "importPath": "by-extension.python.python-study-guide",
    "description": "by-extension.python.python-study-guide",
    "peekOfCode": "def printCopyright():\n    print(\"Copyright 2021, Bgoonz\")\n# Lambdas are one liners! (Should be at least, you can use parenthesis to disobey)\navg = lambda num1, num2: print(num1 + num2)\navg(1, 2)\n# Calling it with keyword arguments, order does not matter\navg(num2=20, num1=1252)\nprintCopyright()\n# We can give parameters default arguments like JS\ndef greeting(name, saying=\"Hello\"):",
    "detail": "by-extension.python.python-study-guide",
    "documentation": {}
  },
  {
    "label": "greeting",
    "kind": 2,
    "importPath": "by-extension.python.python-study-guide",
    "description": "by-extension.python.python-study-guide",
    "peekOfCode": "def greeting(name, saying=\"Hello\"):\n    print(saying, name)\ngreeting(\"Mike\")  # Hello Mike\ngreeting(\"Bryan\", saying=\"Hello there...\")\n# A common gotcha is using a mutable object for a default parameter\n# All invocations of the function reference the same mutable object\ndef append_item(item_name, item_list=[]):  # Will it obey and give us a new list?\n    item_list.append(item_name)\n    return item_list\n# Uses same item list unless otherwise stated which is counterintuitive",
    "detail": "by-extension.python.python-study-guide",
    "documentation": {}
  },
  {
    "label": "append_item",
    "kind": 2,
    "importPath": "by-extension.python.python-study-guide",
    "description": "by-extension.python.python-study-guide",
    "peekOfCode": "def append_item(item_name, item_list=[]):  # Will it obey and give us a new list?\n    item_list.append(item_name)\n    return item_list\n# Uses same item list unless otherwise stated which is counterintuitive\nprint(append_item(\"notebook\"))\nprint(append_item(\"notebook\"))\nprint(append_item(\"notebook\", []))\n# Errors - Unlike JS, if we pass the incorrect amount of arguments to a function,\n#          it will throw an error\n# avg(1)  # TypeError",
    "detail": "by-extension.python.python-study-guide",
    "documentation": {}
  },
  {
    "label": "add",
    "kind": 2,
    "importPath": "by-extension.python.python-study-guide",
    "description": "by-extension.python.python-study-guide",
    "peekOfCode": "def add(a, b, *args):\n    # args is a tuple of the rest of the arguments\n    total = a + b\n    for n in args:\n        total += n\n    return total\nprint(add(1, 2))  # args is None, returns 3\nprint(add(1, 2, 3, 4, 5, 6))  # args is (3, 4, 5, 6), returns 21\n# Variable Length Keyword Arguments\ndef print_names_and_countries(greeting, **kwargs):",
    "detail": "by-extension.python.python-study-guide",
    "documentation": {}
  },
  {
    "label": "print_names_and_countries",
    "kind": 2,
    "importPath": "by-extension.python.python-study-guide",
    "description": "by-extension.python.python-study-guide",
    "peekOfCode": "def print_names_and_countries(greeting, **kwargs):\n    # kwargs is a dictionary of the rest of the keyword arguments\n    for k, v in kwargs.items():\n        print(greeting, k, \"from\", v)\nprint_names_and_countries(\n    \"Hey there\", Monica=\"Sweden\", Mike=\"The United States\", Mark=\"China\"\n)\n# We can combine all of these together\ndef example2(arg1, arg2, *args, kw_1=\"cheese\", kw_2=\"horse\", **kwargs):\n    pass",
    "detail": "by-extension.python.python-study-guide",
    "documentation": {}
  },
  {
    "label": "example2",
    "kind": 2,
    "importPath": "by-extension.python.python-study-guide",
    "description": "by-extension.python.python-study-guide",
    "peekOfCode": "def example2(arg1, arg2, *args, kw_1=\"cheese\", kw_2=\"horse\", **kwargs):\n    pass\n# Lists are mutable arrays\nempty_list = []\nroomates = [\"Beau\", \"Delynn\"]\n# List built-in function makes a list too\nspecials = list()\n# We can use 'in' to test if something is in the list, like 'includes' in JS\nprint(1 in [1, 2, 4])  # True\nprint(2 in [1, 3, 5])  # False",
    "detail": "by-extension.python.python-study-guide",
    "documentation": {}
  },
  {
    "label": "toUpper",
    "kind": 2,
    "importPath": "by-extension.python.python-study-guide",
    "description": "by-extension.python.python-study-guide",
    "peekOfCode": "def toUpper(str):\n    return str.upper()\nupperCased = map(toUpper, [\"a\", \"b\", \"c\", \"d\"])\nprint(list(upperCased))\n# Sorted\nsorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"])\nprint(list(sorted_items))  # Notice uppercase comes before lowercase\n# Using a key function to control the sorting and make it case insensitive\nsorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"], key=str.lower)\nprint(sorted_items)",
    "detail": "by-extension.python.python-study-guide",
    "documentation": {}
  },
  {
    "label": "add",
    "kind": 2,
    "importPath": "by-extension.python.python-study-guide",
    "description": "by-extension.python.python-study-guide",
    "peekOfCode": "def add(num1, num2):\n    return num1 + num2\n# Notice the . syntax because this package can import it's own submodules.\n# Our __init__.py has the following files\n# This imports the 'add' function\n# And now it's also re-exported in here as well\n# from .addition import add\n# These import and re-export the rest of the functions from the submodule\n# from .subtraction import subtract\n# from .division import divide",
    "detail": "by-extension.python.python-study-guide",
    "documentation": {}
  },
  {
    "label": "a",
    "kind": 5,
    "importPath": "by-extension.python.python-study-guide",
    "description": "by-extension.python.python-study-guide",
    "peekOfCode": "a = True\nb = False\n# Logical Operators\n# ! = not, || = or, && = and\nprint(True and True)\nprint(True and not True)\nprint(True or True)\n# Truthiness - Everything is True except...\n# False - None, False, '', [], (), set(), range(0)\n# Number Values",
    "detail": "by-extension.python.python-study-guide",
    "documentation": {}
  },
  {
    "label": "b",
    "kind": 5,
    "importPath": "by-extension.python.python-study-guide",
    "description": "by-extension.python.python-study-guide",
    "peekOfCode": "b = False\n# Logical Operators\n# ! = not, || = or, && = and\nprint(True and True)\nprint(True and not True)\nprint(True or True)\n# Truthiness - Everything is True except...\n# False - None, False, '', [], (), set(), range(0)\n# Number Values\n# Integers are numbers without a floating decimal point",
    "detail": "by-extension.python.python-study-guide",
    "documentation": {}
  },
  {
    "label": "name",
    "kind": 5,
    "importPath": "by-extension.python.python-study-guide",
    "description": "by-extension.python.python-study-guide",
    "peekOfCode": "name = \"Bryan\"\nfor i in range(len(name)):\n    print(name[i])  # B, r, y, a, n\n# We can index starting from the end as well, with negatives\noccupation = \"Full Stack Software Engineer\"\nprint(occupation[-3])  # e\n# We can also get ranges in the index with the [start:stop:step] syntax\nprint(occupation[0:4:1])  # step and stop are optional, stop is exclusive\nprint(occupation[::4])  # beginning to end, every 4th letter\nprint(occupation[4:14:2])  # Let's get weird with it!",
    "detail": "by-extension.python.python-study-guide",
    "documentation": {}
  },
  {
    "label": "occupation",
    "kind": 5,
    "importPath": "by-extension.python.python-study-guide",
    "description": "by-extension.python.python-study-guide",
    "peekOfCode": "occupation = \"Full Stack Software Engineer\"\nprint(occupation[-3])  # e\n# We can also get ranges in the index with the [start:stop:step] syntax\nprint(occupation[0:4:1])  # step and stop are optional, stop is exclusive\nprint(occupation[::4])  # beginning to end, every 4th letter\nprint(occupation[4:14:2])  # Let's get weird with it!\n# NOTE: Indexing out of range will give you an IndexError\n# We can also get the index og things with the .index() method, similar to indexOf()\nprint(occupation.index(\"Stack\"))\nprint([\"Mike\", \"Barry\", \"Cole\", \"James\", \"Mark\"].index(\"Cole\"))",
    "detail": "by-extension.python.python-study-guide",
    "documentation": {}
  },
  {
    "label": "first_name",
    "kind": 5,
    "importPath": "by-extension.python.python-study-guide",
    "description": "by-extension.python.python-study-guide",
    "peekOfCode": "first_name = \"Bryan\"\nlast_name = \"Guner\"\nprint(\"Your name is {0} {1}\".format(first_name, last_name))\n# Useful String Methods\nprint(\"Hello\".upper())  # HELLO\nprint(\"Hello\".lower())  # hello\nprint(\"HELLO\".islower())  # False\nprint(\"HELLO\".isupper())  # True\nprint(\"Hello\".startswith(\"he\"))  # False\nprint(\"Hello\".endswith(\"lo\"))  # True",
    "detail": "by-extension.python.python-study-guide",
    "documentation": {}
  },
  {
    "label": "last_name",
    "kind": 5,
    "importPath": "by-extension.python.python-study-guide",
    "description": "by-extension.python.python-study-guide",
    "peekOfCode": "last_name = \"Guner\"\nprint(\"Your name is {0} {1}\".format(first_name, last_name))\n# Useful String Methods\nprint(\"Hello\".upper())  # HELLO\nprint(\"Hello\".lower())  # hello\nprint(\"HELLO\".islower())  # False\nprint(\"HELLO\".isupper())  # True\nprint(\"Hello\".startswith(\"he\"))  # False\nprint(\"Hello\".endswith(\"lo\"))  # True\nprint(\"Hello There\".split())  # [Hello, There]",
    "detail": "by-extension.python.python-study-guide",
    "documentation": {}
  },
  {
    "label": "a",
    "kind": 5,
    "importPath": "by-extension.python.python-study-guide",
    "description": "by-extension.python.python-study-guide",
    "peekOfCode": "a = 3\nb = a\nc = \"heyoo\"\nb = [\"reassignment\", \"is\", \"fine\", \"G!\"]\n# Comparison Operators - Python uses the same equality operators as JS, but no ===\n# < - Less than\n# > - Greater than\n# <= - Less than or Equal\n# >= - Greater than or Equal\n# == - Equal to",
    "detail": "by-extension.python.python-study-guide",
    "documentation": {}
  },
  {
    "label": "b",
    "kind": 5,
    "importPath": "by-extension.python.python-study-guide",
    "description": "by-extension.python.python-study-guide",
    "peekOfCode": "b = a\nc = \"heyoo\"\nb = [\"reassignment\", \"is\", \"fine\", \"G!\"]\n# Comparison Operators - Python uses the same equality operators as JS, but no ===\n# < - Less than\n# > - Greater than\n# <= - Less than or Equal\n# >= - Greater than or Equal\n# == - Equal to\n# != - Not equal to",
    "detail": "by-extension.python.python-study-guide",
    "documentation": {}
  },
  {
    "label": "c",
    "kind": 5,
    "importPath": "by-extension.python.python-study-guide",
    "description": "by-extension.python.python-study-guide",
    "peekOfCode": "c = \"heyoo\"\nb = [\"reassignment\", \"is\", \"fine\", \"G!\"]\n# Comparison Operators - Python uses the same equality operators as JS, but no ===\n# < - Less than\n# > - Greater than\n# <= - Less than or Equal\n# >= - Greater than or Equal\n# == - Equal to\n# != - Not equal to\n# is - Refers to exact same memory location",
    "detail": "by-extension.python.python-study-guide",
    "documentation": {}
  },
  {
    "label": "b",
    "kind": 5,
    "importPath": "by-extension.python.python-study-guide",
    "description": "by-extension.python.python-study-guide",
    "peekOfCode": "b = [\"reassignment\", \"is\", \"fine\", \"G!\"]\n# Comparison Operators - Python uses the same equality operators as JS, but no ===\n# < - Less than\n# > - Greater than\n# <= - Less than or Equal\n# >= - Greater than or Equal\n# == - Equal to\n# != - Not equal to\n# is - Refers to exact same memory location\n# not - !",
    "detail": "by-extension.python.python-study-guide",
    "documentation": {}
  },
  {
    "label": "lst",
    "kind": 5,
    "importPath": "by-extension.python.python-study-guide",
    "description": "by-extension.python.python-study-guide",
    "peekOfCode": "lst = [1, 2, 3, 4]\nfor i in lst:\n    print(i)\n# Looping over a dictionary\nspam = {\"color\": \"red\", \"age\": 42, \"items\": [(1, \"hey\"), (2, \"hooo!\")]}\nfor v in spam.values():\n    print(v)\n# Loop over a list of tuples and destructuring the values\n# Assuming spam.items returns a list of tuples each containing two items (k, v)\nfor k, v in spam.items():",
    "detail": "by-extension.python.python-study-guide",
    "documentation": {}
  },
  {
    "label": "spam",
    "kind": 5,
    "importPath": "by-extension.python.python-study-guide",
    "description": "by-extension.python.python-study-guide",
    "peekOfCode": "spam = {\"color\": \"red\", \"age\": 42, \"items\": [(1, \"hey\"), (2, \"hooo!\")]}\nfor v in spam.values():\n    print(v)\n# Loop over a list of tuples and destructuring the values\n# Assuming spam.items returns a list of tuples each containing two items (k, v)\nfor k, v in spam.items():\n    print(f\"{k}: {v}\")\n# While loops as long as the condition is True\n#  - Exit loop early with break\n#  - Exit iteration early with continue",
    "detail": "by-extension.python.python-study-guide",
    "documentation": {}
  },
  {
    "label": "spam",
    "kind": 5,
    "importPath": "by-extension.python.python-study-guide",
    "description": "by-extension.python.python-study-guide",
    "peekOfCode": "spam = 0\nwhile True:\n    print(\"Sike That's the wrong Numba\")\n    spam += 1\n    if spam < 5:\n        continue\n    break\n# Functions - use def keyword to define a function in Python\ndef printCopyright():\n    print(\"Copyright 2021, Bgoonz\")",
    "detail": "by-extension.python.python-study-guide",
    "documentation": {}
  },
  {
    "label": "avg",
    "kind": 5,
    "importPath": "by-extension.python.python-study-guide",
    "description": "by-extension.python.python-study-guide",
    "peekOfCode": "avg = lambda num1, num2: print(num1 + num2)\navg(1, 2)\n# Calling it with keyword arguments, order does not matter\navg(num2=20, num1=1252)\nprintCopyright()\n# We can give parameters default arguments like JS\ndef greeting(name, saying=\"Hello\"):\n    print(saying, name)\ngreeting(\"Mike\")  # Hello Mike\ngreeting(\"Bryan\", saying=\"Hello there...\")",
    "detail": "by-extension.python.python-study-guide",
    "documentation": {}
  },
  {
    "label": "empty_list",
    "kind": 5,
    "importPath": "by-extension.python.python-study-guide",
    "description": "by-extension.python.python-study-guide",
    "peekOfCode": "empty_list = []\nroomates = [\"Beau\", \"Delynn\"]\n# List built-in function makes a list too\nspecials = list()\n# We can use 'in' to test if something is in the list, like 'includes' in JS\nprint(1 in [1, 2, 4])  # True\nprint(2 in [1, 3, 5])  # False\n# Dictionaries - Similar to JS POJO's or Map, containing key value pairs\na = {\"one\": 1, \"two\": 2, \"three\": 3}\nb = dict(one=1, two=2, three=3)",
    "detail": "by-extension.python.python-study-guide",
    "documentation": {}
  },
  {
    "label": "roomates",
    "kind": 5,
    "importPath": "by-extension.python.python-study-guide",
    "description": "by-extension.python.python-study-guide",
    "peekOfCode": "roomates = [\"Beau\", \"Delynn\"]\n# List built-in function makes a list too\nspecials = list()\n# We can use 'in' to test if something is in the list, like 'includes' in JS\nprint(1 in [1, 2, 4])  # True\nprint(2 in [1, 3, 5])  # False\n# Dictionaries - Similar to JS POJO's or Map, containing key value pairs\na = {\"one\": 1, \"two\": 2, \"three\": 3}\nb = dict(one=1, two=2, three=3)\n# Can use 'in' on dictionaries too (for keys)",
    "detail": "by-extension.python.python-study-guide",
    "documentation": {}
  },
  {
    "label": "specials",
    "kind": 5,
    "importPath": "by-extension.python.python-study-guide",
    "description": "by-extension.python.python-study-guide",
    "peekOfCode": "specials = list()\n# We can use 'in' to test if something is in the list, like 'includes' in JS\nprint(1 in [1, 2, 4])  # True\nprint(2 in [1, 3, 5])  # False\n# Dictionaries - Similar to JS POJO's or Map, containing key value pairs\na = {\"one\": 1, \"two\": 2, \"three\": 3}\nb = dict(one=1, two=2, three=3)\n# Can use 'in' on dictionaries too (for keys)\nprint(\"one\" in a)  # True\nprint(3 in b)  # False",
    "detail": "by-extension.python.python-study-guide",
    "documentation": {}
  },
  {
    "label": "a",
    "kind": 5,
    "importPath": "by-extension.python.python-study-guide",
    "description": "by-extension.python.python-study-guide",
    "peekOfCode": "a = {\"one\": 1, \"two\": 2, \"three\": 3}\nb = dict(one=1, two=2, three=3)\n# Can use 'in' on dictionaries too (for keys)\nprint(\"one\" in a)  # True\nprint(3 in b)  # False\n# Sets - Just like JS, unordered collection of distinct objects\nbedroom = {\"bed\", \"tv\", \"computer\", \"clothes\", \"playstation 4\"}\n# bedroom = set(\"bed\", \"tv\", \"computer\", \"clothes\", \"playstation 5\")\nschool_bag = set(\n    [\"book\", \"paper\", \"pencil\", \"pencil\", \"book\", \"book\", \"book\", \"eraser\"]",
    "detail": "by-extension.python.python-study-guide",
    "documentation": {}
  },
  {
    "label": "b",
    "kind": 5,
    "importPath": "by-extension.python.python-study-guide",
    "description": "by-extension.python.python-study-guide",
    "peekOfCode": "b = dict(one=1, two=2, three=3)\n# Can use 'in' on dictionaries too (for keys)\nprint(\"one\" in a)  # True\nprint(3 in b)  # False\n# Sets - Just like JS, unordered collection of distinct objects\nbedroom = {\"bed\", \"tv\", \"computer\", \"clothes\", \"playstation 4\"}\n# bedroom = set(\"bed\", \"tv\", \"computer\", \"clothes\", \"playstation 5\")\nschool_bag = set(\n    [\"book\", \"paper\", \"pencil\", \"pencil\", \"book\", \"book\", \"book\", \"eraser\"]\n)",
    "detail": "by-extension.python.python-study-guide",
    "documentation": {}
  },
  {
    "label": "bedroom",
    "kind": 5,
    "importPath": "by-extension.python.python-study-guide",
    "description": "by-extension.python.python-study-guide",
    "peekOfCode": "bedroom = {\"bed\", \"tv\", \"computer\", \"clothes\", \"playstation 4\"}\n# bedroom = set(\"bed\", \"tv\", \"computer\", \"clothes\", \"playstation 5\")\nschool_bag = set(\n    [\"book\", \"paper\", \"pencil\", \"pencil\", \"book\", \"book\", \"book\", \"eraser\"]\n)\nprint(school_bag)\nprint(bedroom)\n# We can use 'in' on sets as wel\nprint(1 in {1, 2, 3})  # True\nprint(4 in {1, 3, 5})  # False",
    "detail": "by-extension.python.python-study-guide",
    "documentation": {}
  },
  {
    "label": "school_bag",
    "kind": 5,
    "importPath": "by-extension.python.python-study-guide",
    "description": "by-extension.python.python-study-guide",
    "peekOfCode": "school_bag = set(\n    [\"book\", \"paper\", \"pencil\", \"pencil\", \"book\", \"book\", \"book\", \"eraser\"]\n)\nprint(school_bag)\nprint(bedroom)\n# We can use 'in' on sets as wel\nprint(1 in {1, 2, 3})  # True\nprint(4 in {1, 3, 5})  # False\n# Tuples are immutable lists of items\ntime_blocks = (\"AM\", \"PM\")",
    "detail": "by-extension.python.python-study-guide",
    "documentation": {}
  },
  {
    "label": "time_blocks",
    "kind": 5,
    "importPath": "by-extension.python.python-study-guide",
    "description": "by-extension.python.python-study-guide",
    "peekOfCode": "time_blocks = (\"AM\", \"PM\")\ncolors = \"red\", \"green\", \"blue\"  # Parenthesis not needed but encouraged\n# The tuple built-in function can be used to convert things to tuples\nprint(tuple(\"abc\"))\nprint(tuple([1, 2, 3]))\n# 'in' may be used on tuples as well\nprint(1 in (1, 2, 3))  # True\nprint(5 in (1, 4, 3))  # False\n# Ranges are immutable lists of numbers, often used with for loops\n#   - start - default: 0, first number in sequence",
    "detail": "by-extension.python.python-study-guide",
    "documentation": {}
  },
  {
    "label": "colors",
    "kind": 5,
    "importPath": "by-extension.python.python-study-guide",
    "description": "by-extension.python.python-study-guide",
    "peekOfCode": "colors = \"red\", \"green\", \"blue\"  # Parenthesis not needed but encouraged\n# The tuple built-in function can be used to convert things to tuples\nprint(tuple(\"abc\"))\nprint(tuple([1, 2, 3]))\n# 'in' may be used on tuples as well\nprint(1 in (1, 2, 3))  # True\nprint(5 in (1, 4, 3))  # False\n# Ranges are immutable lists of numbers, often used with for loops\n#   - start - default: 0, first number in sequence\n#   - stop - required, next number past last number in sequence",
    "detail": "by-extension.python.python-study-guide",
    "documentation": {}
  },
  {
    "label": "range1",
    "kind": 5,
    "importPath": "by-extension.python.python-study-guide",
    "description": "by-extension.python.python-study-guide",
    "peekOfCode": "range1 = range(5)  # [0,1,2,3,4]\nrange2 = range(1, 5)  # [1,2,3,4]\nrange3 = range(0, 25, 5)  # [0,5,10,15,20]\nrange4 = range(0)  # []\nfor i in range1:\n    print(i)\n# Built-in functions:\n# Filter\nisOdd = lambda num: num % 2 == 1\nfiltered = filter(isOdd, [1, 2, 3, 4])",
    "detail": "by-extension.python.python-study-guide",
    "documentation": {}
  },
  {
    "label": "range2",
    "kind": 5,
    "importPath": "by-extension.python.python-study-guide",
    "description": "by-extension.python.python-study-guide",
    "peekOfCode": "range2 = range(1, 5)  # [1,2,3,4]\nrange3 = range(0, 25, 5)  # [0,5,10,15,20]\nrange4 = range(0)  # []\nfor i in range1:\n    print(i)\n# Built-in functions:\n# Filter\nisOdd = lambda num: num % 2 == 1\nfiltered = filter(isOdd, [1, 2, 3, 4])\nprint(list(filtered))",
    "detail": "by-extension.python.python-study-guide",
    "documentation": {}
  },
  {
    "label": "range3",
    "kind": 5,
    "importPath": "by-extension.python.python-study-guide",
    "description": "by-extension.python.python-study-guide",
    "peekOfCode": "range3 = range(0, 25, 5)  # [0,5,10,15,20]\nrange4 = range(0)  # []\nfor i in range1:\n    print(i)\n# Built-in functions:\n# Filter\nisOdd = lambda num: num % 2 == 1\nfiltered = filter(isOdd, [1, 2, 3, 4])\nprint(list(filtered))\nfor num in filtered:",
    "detail": "by-extension.python.python-study-guide",
    "documentation": {}
  },
  {
    "label": "range4",
    "kind": 5,
    "importPath": "by-extension.python.python-study-guide",
    "description": "by-extension.python.python-study-guide",
    "peekOfCode": "range4 = range(0)  # []\nfor i in range1:\n    print(i)\n# Built-in functions:\n# Filter\nisOdd = lambda num: num % 2 == 1\nfiltered = filter(isOdd, [1, 2, 3, 4])\nprint(list(filtered))\nfor num in filtered:\n    print(f\"first way: {num}\")",
    "detail": "by-extension.python.python-study-guide",
    "documentation": {}
  },
  {
    "label": "isOdd",
    "kind": 5,
    "importPath": "by-extension.python.python-study-guide",
    "description": "by-extension.python.python-study-guide",
    "peekOfCode": "isOdd = lambda num: num % 2 == 1\nfiltered = filter(isOdd, [1, 2, 3, 4])\nprint(list(filtered))\nfor num in filtered:\n    print(f\"first way: {num}\")\nprint(\"--\" * 20)\n[print(f\"list comprehension: {i}\") for i in [1, 2, 3, 4, 5, 6, 7, 8] if i % 2 == 1]\n# Map\ndef toUpper(str):\n    return str.upper()",
    "detail": "by-extension.python.python-study-guide",
    "documentation": {}
  },
  {
    "label": "filtered",
    "kind": 5,
    "importPath": "by-extension.python.python-study-guide",
    "description": "by-extension.python.python-study-guide",
    "peekOfCode": "filtered = filter(isOdd, [1, 2, 3, 4])\nprint(list(filtered))\nfor num in filtered:\n    print(f\"first way: {num}\")\nprint(\"--\" * 20)\n[print(f\"list comprehension: {i}\") for i in [1, 2, 3, 4, 5, 6, 7, 8] if i % 2 == 1]\n# Map\ndef toUpper(str):\n    return str.upper()\nupperCased = map(toUpper, [\"a\", \"b\", \"c\", \"d\"])",
    "detail": "by-extension.python.python-study-guide",
    "documentation": {}
  },
  {
    "label": "upperCased",
    "kind": 5,
    "importPath": "by-extension.python.python-study-guide",
    "description": "by-extension.python.python-study-guide",
    "peekOfCode": "upperCased = map(toUpper, [\"a\", \"b\", \"c\", \"d\"])\nprint(list(upperCased))\n# Sorted\nsorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"])\nprint(list(sorted_items))  # Notice uppercase comes before lowercase\n# Using a key function to control the sorting and make it case insensitive\nsorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"], key=str.lower)\nprint(sorted_items)\n# You can also reverse the sort\nsorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"], key=str.lower, reverse=True)",
    "detail": "by-extension.python.python-study-guide",
    "documentation": {}
  },
  {
    "label": "sorted_items",
    "kind": 5,
    "importPath": "by-extension.python.python-study-guide",
    "description": "by-extension.python.python-study-guide",
    "peekOfCode": "sorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"])\nprint(list(sorted_items))  # Notice uppercase comes before lowercase\n# Using a key function to control the sorting and make it case insensitive\nsorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"], key=str.lower)\nprint(sorted_items)\n# You can also reverse the sort\nsorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"], key=str.lower, reverse=True)\nprint(sorted_items)\n# Enumerate creates a tuple with an index for what you're enumerating\nquarters = [\"First\", \"Second\", \"Third\", \"Fourth\"]",
    "detail": "by-extension.python.python-study-guide",
    "documentation": {}
  },
  {
    "label": "sorted_items",
    "kind": 5,
    "importPath": "by-extension.python.python-study-guide",
    "description": "by-extension.python.python-study-guide",
    "peekOfCode": "sorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"], key=str.lower)\nprint(sorted_items)\n# You can also reverse the sort\nsorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"], key=str.lower, reverse=True)\nprint(sorted_items)\n# Enumerate creates a tuple with an index for what you're enumerating\nquarters = [\"First\", \"Second\", \"Third\", \"Fourth\"]\nprint(list(enumerate(quarters)))\nprint(list(enumerate(quarters, start=1)))\n# Zip takes list and combines them as key value pairs, or really however you need",
    "detail": "by-extension.python.python-study-guide",
    "documentation": {}
  },
  {
    "label": "sorted_items",
    "kind": 5,
    "importPath": "by-extension.python.python-study-guide",
    "description": "by-extension.python.python-study-guide",
    "peekOfCode": "sorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"], key=str.lower, reverse=True)\nprint(sorted_items)\n# Enumerate creates a tuple with an index for what you're enumerating\nquarters = [\"First\", \"Second\", \"Third\", \"Fourth\"]\nprint(list(enumerate(quarters)))\nprint(list(enumerate(quarters, start=1)))\n# Zip takes list and combines them as key value pairs, or really however you need\nkeys = (\"Name\", \"Email\")\nvalues = (\"Buster\", \"cheetoh@johhnydepp.com\")\nzipped = zip(keys, values)",
    "detail": "by-extension.python.python-study-guide",
    "documentation": {}
  },
  {
    "label": "quarters",
    "kind": 5,
    "importPath": "by-extension.python.python-study-guide",
    "description": "by-extension.python.python-study-guide",
    "peekOfCode": "quarters = [\"First\", \"Second\", \"Third\", \"Fourth\"]\nprint(list(enumerate(quarters)))\nprint(list(enumerate(quarters, start=1)))\n# Zip takes list and combines them as key value pairs, or really however you need\nkeys = (\"Name\", \"Email\")\nvalues = (\"Buster\", \"cheetoh@johhnydepp.com\")\nzipped = zip(keys, values)\nprint(list(zipped))\n# You can zip more than 2\nx_coords = [0, 1, 2, 3, 4]",
    "detail": "by-extension.python.python-study-guide",
    "documentation": {}
  },
  {
    "label": "keys",
    "kind": 5,
    "importPath": "by-extension.python.python-study-guide",
    "description": "by-extension.python.python-study-guide",
    "peekOfCode": "keys = (\"Name\", \"Email\")\nvalues = (\"Buster\", \"cheetoh@johhnydepp.com\")\nzipped = zip(keys, values)\nprint(list(zipped))\n# You can zip more than 2\nx_coords = [0, 1, 2, 3, 4]\ny_coords = [4, 6, 10, 9, 10]\nz_coords = [20, 10, 5, 9, 1]\ncoords = zip(x_coords, y_coords, z_coords)\nprint(list(coords))",
    "detail": "by-extension.python.python-study-guide",
    "documentation": {}
  },
  {
    "label": "values",
    "kind": 5,
    "importPath": "by-extension.python.python-study-guide",
    "description": "by-extension.python.python-study-guide",
    "peekOfCode": "values = (\"Buster\", \"cheetoh@johhnydepp.com\")\nzipped = zip(keys, values)\nprint(list(zipped))\n# You can zip more than 2\nx_coords = [0, 1, 2, 3, 4]\ny_coords = [4, 6, 10, 9, 10]\nz_coords = [20, 10, 5, 9, 1]\ncoords = zip(x_coords, y_coords, z_coords)\nprint(list(coords))\n# Len reports the length of strings along with list and any other object data type",
    "detail": "by-extension.python.python-study-guide",
    "documentation": {}
  },
  {
    "label": "zipped",
    "kind": 5,
    "importPath": "by-extension.python.python-study-guide",
    "description": "by-extension.python.python-study-guide",
    "peekOfCode": "zipped = zip(keys, values)\nprint(list(zipped))\n# You can zip more than 2\nx_coords = [0, 1, 2, 3, 4]\ny_coords = [4, 6, 10, 9, 10]\nz_coords = [20, 10, 5, 9, 1]\ncoords = zip(x_coords, y_coords, z_coords)\nprint(list(coords))\n# Len reports the length of strings along with list and any other object data type\nprint_len = lambda item: print(len(item))  # doing this to save myself some typing",
    "detail": "by-extension.python.python-study-guide",
    "documentation": {}
  },
  {
    "label": "x_coords",
    "kind": 5,
    "importPath": "by-extension.python.python-study-guide",
    "description": "by-extension.python.python-study-guide",
    "peekOfCode": "x_coords = [0, 1, 2, 3, 4]\ny_coords = [4, 6, 10, 9, 10]\nz_coords = [20, 10, 5, 9, 1]\ncoords = zip(x_coords, y_coords, z_coords)\nprint(list(coords))\n# Len reports the length of strings along with list and any other object data type\nprint_len = lambda item: print(len(item))  # doing this to save myself some typing\nprint_len(\"Mike\")\nprint_len([1, 5, 2, 10, 3, 10])\nprint_len({1, 5, 10, 9, 10})  # 4 because there is a duplicate here (10)",
    "detail": "by-extension.python.python-study-guide",
    "documentation": {}
  },
  {
    "label": "y_coords",
    "kind": 5,
    "importPath": "by-extension.python.python-study-guide",
    "description": "by-extension.python.python-study-guide",
    "peekOfCode": "y_coords = [4, 6, 10, 9, 10]\nz_coords = [20, 10, 5, 9, 1]\ncoords = zip(x_coords, y_coords, z_coords)\nprint(list(coords))\n# Len reports the length of strings along with list and any other object data type\nprint_len = lambda item: print(len(item))  # doing this to save myself some typing\nprint_len(\"Mike\")\nprint_len([1, 5, 2, 10, 3, 10])\nprint_len({1, 5, 10, 9, 10})  # 4 because there is a duplicate here (10)\nprint_len((1, 4, 10, 9, 20))",
    "detail": "by-extension.python.python-study-guide",
    "documentation": {}
  },
  {
    "label": "z_coords",
    "kind": 5,
    "importPath": "by-extension.python.python-study-guide",
    "description": "by-extension.python.python-study-guide",
    "peekOfCode": "z_coords = [20, 10, 5, 9, 1]\ncoords = zip(x_coords, y_coords, z_coords)\nprint(list(coords))\n# Len reports the length of strings along with list and any other object data type\nprint_len = lambda item: print(len(item))  # doing this to save myself some typing\nprint_len(\"Mike\")\nprint_len([1, 5, 2, 10, 3, 10])\nprint_len({1, 5, 10, 9, 10})  # 4 because there is a duplicate here (10)\nprint_len((1, 4, 10, 9, 20))\n# Max will return the max number in a given scenario",
    "detail": "by-extension.python.python-study-guide",
    "documentation": {}
  },
  {
    "label": "coords",
    "kind": 5,
    "importPath": "by-extension.python.python-study-guide",
    "description": "by-extension.python.python-study-guide",
    "peekOfCode": "coords = zip(x_coords, y_coords, z_coords)\nprint(list(coords))\n# Len reports the length of strings along with list and any other object data type\nprint_len = lambda item: print(len(item))  # doing this to save myself some typing\nprint_len(\"Mike\")\nprint_len([1, 5, 2, 10, 3, 10])\nprint_len({1, 5, 10, 9, 10})  # 4 because there is a duplicate here (10)\nprint_len((1, 4, 10, 9, 20))\n# Max will return the max number in a given scenario\nprint(max(1, 2, 35, 1012, 1))",
    "detail": "by-extension.python.python-study-guide",
    "documentation": {}
  },
  {
    "label": "print_len",
    "kind": 5,
    "importPath": "by-extension.python.python-study-guide",
    "description": "by-extension.python.python-study-guide",
    "peekOfCode": "print_len = lambda item: print(len(item))  # doing this to save myself some typing\nprint_len(\"Mike\")\nprint_len([1, 5, 2, 10, 3, 10])\nprint_len({1, 5, 10, 9, 10})  # 4 because there is a duplicate here (10)\nprint_len((1, 4, 10, 9, 20))\n# Max will return the max number in a given scenario\nprint(max(1, 2, 35, 1012, 1))\n# Min\nprint(min(1, 5, 2, 10))\nprint(min([1, 4, 7, 10]))",
    "detail": "by-extension.python.python-study-guide",
    "documentation": {}
  },
  {
    "label": "user",
    "kind": 5,
    "importPath": "by-extension.python.python-study-guide",
    "description": "by-extension.python.python-study-guide",
    "peekOfCode": "user = {\"Name\": \"Bob\", \"Email\": \"bob@bob.com\"}\nprint(dir(user))\n# Importing packages and modules\n#  - Module - A Python code in a file or directory\n#  - Package - A module which is a directory containing an __init__.py file\n#  - Submodule - A module which is contained within a package\n#  - Name - An exported function, class, or variable in a module\n# Unlike JS, modules export ALL names contained within them without any special export key\n# Assuming we have the following package with four submodules\n#  math",
    "detail": "by-extension.python.python-study-guide",
    "documentation": {}
  },
  {
    "label": "squares",
    "kind": 5,
    "importPath": "by-extension.python.python-study-guide",
    "description": "by-extension.python.python-study-guide",
    "peekOfCode": "squares = []\nfor i in range(10):\n    squares.append(i ** 2)\nprint(squares)\n# value = i ** 2\n# loop = for i in range(10)\nsquares = [i ** 2 for i in range(10)]\nprint(list(squares))\nsentence = \"the rocket came back from mars\"\nvowels = [character for character in sentence if character in \"aeiou\"]",
    "detail": "by-extension.python.python-study-guide",
    "documentation": {}
  },
  {
    "label": "squares",
    "kind": 5,
    "importPath": "by-extension.python.python-study-guide",
    "description": "by-extension.python.python-study-guide",
    "peekOfCode": "squares = [i ** 2 for i in range(10)]\nprint(list(squares))\nsentence = \"the rocket came back from mars\"\nvowels = [character for character in sentence if character in \"aeiou\"]\nprint(vowels)\n# You can also use them on dictionaries. We can use the items() method\n# for the dictionary to loop through it getting the keys and values out at once\nperson = {\"name\": \"Corina\", \"age\": 32, \"height\": 1.4}\n# This loops through and capitalizes the first letter of all keys\nnewPerson = {key.title(): value for key, value in person.items()}",
    "detail": "by-extension.python.python-study-guide",
    "documentation": {}
  },
  {
    "label": "sentence",
    "kind": 5,
    "importPath": "by-extension.python.python-study-guide",
    "description": "by-extension.python.python-study-guide",
    "peekOfCode": "sentence = \"the rocket came back from mars\"\nvowels = [character for character in sentence if character in \"aeiou\"]\nprint(vowels)\n# You can also use them on dictionaries. We can use the items() method\n# for the dictionary to loop through it getting the keys and values out at once\nperson = {\"name\": \"Corina\", \"age\": 32, \"height\": 1.4}\n# This loops through and capitalizes the first letter of all keys\nnewPerson = {key.title(): value for key, value in person.items()}\nprint(list(newPerson.items()))",
    "detail": "by-extension.python.python-study-guide",
    "documentation": {}
  },
  {
    "label": "vowels",
    "kind": 5,
    "importPath": "by-extension.python.python-study-guide",
    "description": "by-extension.python.python-study-guide",
    "peekOfCode": "vowels = [character for character in sentence if character in \"aeiou\"]\nprint(vowels)\n# You can also use them on dictionaries. We can use the items() method\n# for the dictionary to loop through it getting the keys and values out at once\nperson = {\"name\": \"Corina\", \"age\": 32, \"height\": 1.4}\n# This loops through and capitalizes the first letter of all keys\nnewPerson = {key.title(): value for key, value in person.items()}\nprint(list(newPerson.items()))",
    "detail": "by-extension.python.python-study-guide",
    "documentation": {}
  },
  {
    "label": "person",
    "kind": 5,
    "importPath": "by-extension.python.python-study-guide",
    "description": "by-extension.python.python-study-guide",
    "peekOfCode": "person = {\"name\": \"Corina\", \"age\": 32, \"height\": 1.4}\n# This loops through and capitalizes the first letter of all keys\nnewPerson = {key.title(): value for key, value in person.items()}\nprint(list(newPerson.items()))",
    "detail": "by-extension.python.python-study-guide",
    "documentation": {}
  },
  {
    "label": "newPerson",
    "kind": 5,
    "importPath": "by-extension.python.python-study-guide",
    "description": "by-extension.python.python-study-guide",
    "peekOfCode": "newPerson = {key.title(): value for key, value in person.items()}\nprint(list(newPerson.items()))",
    "detail": "by-extension.python.python-study-guide",
    "documentation": {}
  },
  {
    "label": "AngryBird",
    "kind": 6,
    "importPath": "by-extension.python.pythonstudyguide",
    "description": "by-extension.python.pythonstudyguide",
    "peekOfCode": "class AngryBird:\n    # Slots optimize property access and memory usage and prevent you\n    # from arbitrarily assigning new properties the instance\n    __slots__ = [\"_x\", \"_y\"]\n    # Constructor\n    def __init__(self, x=0, y=0):\n        # Doc String\n        \"\"\"\n        Construct a new AngryBird by setting it's position to (0, 0)\n        \"\"\"",
    "detail": "by-extension.python.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "say_hi",
    "kind": 2,
    "importPath": "by-extension.python.pythonstudyguide",
    "description": "by-extension.python.pythonstudyguide",
    "peekOfCode": "def say_hi(name):\n    \"\"\"<---- Multi-Line Comments and Docstrings\n    This is where you put your content for help() to inform the user\n    about what your function does and how to use it\n    \"\"\"\n    print(f\"Hello {name}!\")\nprint(say_hi(\"Bryan\"))  # Should get the print inside the function, then None\n# Boolean Values\n# Work the same as in JS, except they are title case: True and False\na = True",
    "detail": "by-extension.python.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "printCopyright",
    "kind": 2,
    "importPath": "by-extension.python.pythonstudyguide",
    "description": "by-extension.python.pythonstudyguide",
    "peekOfCode": "def printCopyright():\n    print(\"Copyright 2021, Bgoonz\")\n# Lambdas are one liners! (Should be at least, you can use parenthesis to disobey)\navg = lambda num1, num2: print(num1 + num2)\navg(1, 2)\n# Calling it with keyword arguments, order does not matter\navg(num2=20, num1=1252)\nprintCopyright()\n# We can give parameters default arguments like JS\ndef greeting(name, saying=\"Hello\"):",
    "detail": "by-extension.python.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "greeting",
    "kind": 2,
    "importPath": "by-extension.python.pythonstudyguide",
    "description": "by-extension.python.pythonstudyguide",
    "peekOfCode": "def greeting(name, saying=\"Hello\"):\n    print(saying, name)\ngreeting(\"Mike\")  # Hello Mike\ngreeting(\"Bryan\", saying=\"Hello there...\")\n# A common gotcha is using a mutable object for a default parameter\n# All invocations of the function reference the same mutable object\ndef append_item(item_name, item_list=[]):  # Will it obey and give us a new list?\n    item_list.append(item_name)\n    return item_list\n# Uses same item list unless otherwise stated which is counterintuitive",
    "detail": "by-extension.python.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "append_item",
    "kind": 2,
    "importPath": "by-extension.python.pythonstudyguide",
    "description": "by-extension.python.pythonstudyguide",
    "peekOfCode": "def append_item(item_name, item_list=[]):  # Will it obey and give us a new list?\n    item_list.append(item_name)\n    return item_list\n# Uses same item list unless otherwise stated which is counterintuitive\nprint(append_item(\"notebook\"))\nprint(append_item(\"notebook\"))\nprint(append_item(\"notebook\", []))\n# Errors - Unlike JS, if we pass the incorrect amount of arguments to a function,\n#          it will throw an error\n# avg(1)  # TypeError",
    "detail": "by-extension.python.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "add",
    "kind": 2,
    "importPath": "by-extension.python.pythonstudyguide",
    "description": "by-extension.python.pythonstudyguide",
    "peekOfCode": "def add(a, b, *args):\n    # args is a tuple of the rest of the arguments\n    total = a + b\n    for n in args:\n        total += n\n    return total\nprint(add(1, 2))  # args is None, returns 3\nprint(add(1, 2, 3, 4, 5, 6))  # args is (3, 4, 5, 6), returns 21\n# Variable Length Keyword Arguments\ndef print_names_and_countries(greeting, **kwargs):",
    "detail": "by-extension.python.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "print_names_and_countries",
    "kind": 2,
    "importPath": "by-extension.python.pythonstudyguide",
    "description": "by-extension.python.pythonstudyguide",
    "peekOfCode": "def print_names_and_countries(greeting, **kwargs):\n    # kwargs is a dictionary of the rest of the keyword arguments\n    for k, v in kwargs.items():\n        print(greeting, k, \"from\", v)\nprint_names_and_countries(\n    \"Hey there\", Monica=\"Sweden\", Mike=\"The United States\", Mark=\"China\"\n)\n# We can combine all of these together\ndef example2(arg1, arg2, *args, kw_1=\"cheese\", kw_2=\"horse\", **kwargs):\n    pass",
    "detail": "by-extension.python.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "example2",
    "kind": 2,
    "importPath": "by-extension.python.pythonstudyguide",
    "description": "by-extension.python.pythonstudyguide",
    "peekOfCode": "def example2(arg1, arg2, *args, kw_1=\"cheese\", kw_2=\"horse\", **kwargs):\n    pass\n# Lists are mutable arrays\nempty_list = []\nroomates = [\"Beau\", \"Delynn\"]\n# List built-in function makes a list too\nspecials = list()\n# We can use 'in' to test if something is in the list, like 'includes' in JS\nprint(1 in [1, 2, 4])  # True\nprint(2 in [1, 3, 5])  # False",
    "detail": "by-extension.python.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "toUpper",
    "kind": 2,
    "importPath": "by-extension.python.pythonstudyguide",
    "description": "by-extension.python.pythonstudyguide",
    "peekOfCode": "def toUpper(str):\n    return str.upper()\nupperCased = map(toUpper, [\"a\", \"b\", \"c\", \"d\"])\nprint(list(upperCased))\n# Sorted\nsorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"])\nprint(list(sorted_items))  # Notice uppercase comes before lowercase\n# Using a key function to control the sorting and make it case insensitive\nsorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"], key=str.lower)\nprint(sorted_items)",
    "detail": "by-extension.python.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "add",
    "kind": 2,
    "importPath": "by-extension.python.pythonstudyguide",
    "description": "by-extension.python.pythonstudyguide",
    "peekOfCode": "def add(num1, num2):\n    return num1 + num2\n# Notice the . syntax because this package can import it's own submodules.\n# Our __init__.py has the following files\n# This imports the 'add' function\n# And now it's also re-exported in here as well\n# from .addition import add\n# These import and re-export the rest of the functions from the submodule\n# from .subtraction import subtract\n# from .division import divide",
    "detail": "by-extension.python.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "a",
    "kind": 5,
    "importPath": "by-extension.python.pythonstudyguide",
    "description": "by-extension.python.pythonstudyguide",
    "peekOfCode": "a = True\nb = False\n# Logical Operators\n# ! = not, || = or, && = and\nprint(True and True)\nprint(True and not True)\nprint(True or True)\n# Truthiness - Everything is True except...\n# False - None, False, '', [], (), set(), range(0)\n# Number Values",
    "detail": "by-extension.python.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "b",
    "kind": 5,
    "importPath": "by-extension.python.pythonstudyguide",
    "description": "by-extension.python.pythonstudyguide",
    "peekOfCode": "b = False\n# Logical Operators\n# ! = not, || = or, && = and\nprint(True and True)\nprint(True and not True)\nprint(True or True)\n# Truthiness - Everything is True except...\n# False - None, False, '', [], (), set(), range(0)\n# Number Values\n# Integers are numbers without a floating decimal point",
    "detail": "by-extension.python.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "name",
    "kind": 5,
    "importPath": "by-extension.python.pythonstudyguide",
    "description": "by-extension.python.pythonstudyguide",
    "peekOfCode": "name = \"Bryan\"\nfor i in range(len(name)):\n    print(name[i])  # B, r, y, a, n\n# We can index starting from the end as well, with negatives\noccupation = \"Full Stack Software Engineer\"\nprint(occupation[-3])  # e\n# We can also get ranges in the index with the [start:stop:step] syntax\nprint(occupation[0:4:1])  # step and stop are optional, stop is exclusive\nprint(occupation[::4])  # beginning to end, every 4th letter\nprint(occupation[4:14:2])  # Let's get weird with it!",
    "detail": "by-extension.python.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "occupation",
    "kind": 5,
    "importPath": "by-extension.python.pythonstudyguide",
    "description": "by-extension.python.pythonstudyguide",
    "peekOfCode": "occupation = \"Full Stack Software Engineer\"\nprint(occupation[-3])  # e\n# We can also get ranges in the index with the [start:stop:step] syntax\nprint(occupation[0:4:1])  # step and stop are optional, stop is exclusive\nprint(occupation[::4])  # beginning to end, every 4th letter\nprint(occupation[4:14:2])  # Let's get weird with it!\n# NOTE: Indexing out of range will give you an IndexError\n# We can also get the index og things with the .index() method, similar to indexOf()\nprint(occupation.index(\"Stack\"))\nprint([\"Mike\", \"Barry\", \"Cole\", \"James\", \"Mark\"].index(\"Cole\"))",
    "detail": "by-extension.python.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "first_name",
    "kind": 5,
    "importPath": "by-extension.python.pythonstudyguide",
    "description": "by-extension.python.pythonstudyguide",
    "peekOfCode": "first_name = \"Bryan\"\nlast_name = \"Guner\"\nprint(\"Your name is {0} {1}\".format(first_name, last_name))\n# Useful String Methods\nprint(\"Hello\".upper())  # HELLO\nprint(\"Hello\".lower())  # hello\nprint(\"HELLO\".islower())  # False\nprint(\"HELLO\".isupper())  # True\nprint(\"Hello\".startswith(\"he\"))  # False\nprint(\"Hello\".endswith(\"lo\"))  # True",
    "detail": "by-extension.python.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "last_name",
    "kind": 5,
    "importPath": "by-extension.python.pythonstudyguide",
    "description": "by-extension.python.pythonstudyguide",
    "peekOfCode": "last_name = \"Guner\"\nprint(\"Your name is {0} {1}\".format(first_name, last_name))\n# Useful String Methods\nprint(\"Hello\".upper())  # HELLO\nprint(\"Hello\".lower())  # hello\nprint(\"HELLO\".islower())  # False\nprint(\"HELLO\".isupper())  # True\nprint(\"Hello\".startswith(\"he\"))  # False\nprint(\"Hello\".endswith(\"lo\"))  # True\nprint(\"Hello There\".split())  # [Hello, There]",
    "detail": "by-extension.python.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "a",
    "kind": 5,
    "importPath": "by-extension.python.pythonstudyguide",
    "description": "by-extension.python.pythonstudyguide",
    "peekOfCode": "a = 3\nb = a\nc = \"heyoo\"\nb = [\"reassignment\", \"is\", \"fine\", \"G!\"]\n# Comparison Operators - Python uses the same equality operators as JS, but no ===\n# < - Less than\n# > - Greater than\n# <= - Less than or Equal\n# >= - Greater than or Equal\n# == - Equal to",
    "detail": "by-extension.python.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "b",
    "kind": 5,
    "importPath": "by-extension.python.pythonstudyguide",
    "description": "by-extension.python.pythonstudyguide",
    "peekOfCode": "b = a\nc = \"heyoo\"\nb = [\"reassignment\", \"is\", \"fine\", \"G!\"]\n# Comparison Operators - Python uses the same equality operators as JS, but no ===\n# < - Less than\n# > - Greater than\n# <= - Less than or Equal\n# >= - Greater than or Equal\n# == - Equal to\n# != - Not equal to",
    "detail": "by-extension.python.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "c",
    "kind": 5,
    "importPath": "by-extension.python.pythonstudyguide",
    "description": "by-extension.python.pythonstudyguide",
    "peekOfCode": "c = \"heyoo\"\nb = [\"reassignment\", \"is\", \"fine\", \"G!\"]\n# Comparison Operators - Python uses the same equality operators as JS, but no ===\n# < - Less than\n# > - Greater than\n# <= - Less than or Equal\n# >= - Greater than or Equal\n# == - Equal to\n# != - Not equal to\n# is - Refers to exact same memory location",
    "detail": "by-extension.python.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "b",
    "kind": 5,
    "importPath": "by-extension.python.pythonstudyguide",
    "description": "by-extension.python.pythonstudyguide",
    "peekOfCode": "b = [\"reassignment\", \"is\", \"fine\", \"G!\"]\n# Comparison Operators - Python uses the same equality operators as JS, but no ===\n# < - Less than\n# > - Greater than\n# <= - Less than or Equal\n# >= - Greater than or Equal\n# == - Equal to\n# != - Not equal to\n# is - Refers to exact same memory location\n# not - !",
    "detail": "by-extension.python.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "lst",
    "kind": 5,
    "importPath": "by-extension.python.pythonstudyguide",
    "description": "by-extension.python.pythonstudyguide",
    "peekOfCode": "lst = [1, 2, 3, 4]\nfor i in lst:\n    print(i)\n# Looping over a dictionary\nspam = {\"color\": \"red\", \"age\": 42, \"items\": [(1, \"hey\"), (2, \"hooo!\")]}\nfor v in spam.values():\n    print(v)\n# Loop over a list of tuples and destructuring the values\n# Assuming spam.items returns a list of tuples each containing two items (k, v)\nfor k, v in spam.items():",
    "detail": "by-extension.python.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "spam",
    "kind": 5,
    "importPath": "by-extension.python.pythonstudyguide",
    "description": "by-extension.python.pythonstudyguide",
    "peekOfCode": "spam = {\"color\": \"red\", \"age\": 42, \"items\": [(1, \"hey\"), (2, \"hooo!\")]}\nfor v in spam.values():\n    print(v)\n# Loop over a list of tuples and destructuring the values\n# Assuming spam.items returns a list of tuples each containing two items (k, v)\nfor k, v in spam.items():\n    print(f\"{k}: {v}\")\n# While loops as long as the condition is True\n#  - Exit loop early with break\n#  - Exit iteration early with continue",
    "detail": "by-extension.python.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "spam",
    "kind": 5,
    "importPath": "by-extension.python.pythonstudyguide",
    "description": "by-extension.python.pythonstudyguide",
    "peekOfCode": "spam = 0\nwhile True:\n    print(\"Sike That's the wrong Numba\")\n    spam += 1\n    if spam < 5:\n        continue\n    break\n# Functions - use def keyword to define a function in Python\ndef printCopyright():\n    print(\"Copyright 2021, Bgoonz\")",
    "detail": "by-extension.python.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "avg",
    "kind": 5,
    "importPath": "by-extension.python.pythonstudyguide",
    "description": "by-extension.python.pythonstudyguide",
    "peekOfCode": "avg = lambda num1, num2: print(num1 + num2)\navg(1, 2)\n# Calling it with keyword arguments, order does not matter\navg(num2=20, num1=1252)\nprintCopyright()\n# We can give parameters default arguments like JS\ndef greeting(name, saying=\"Hello\"):\n    print(saying, name)\ngreeting(\"Mike\")  # Hello Mike\ngreeting(\"Bryan\", saying=\"Hello there...\")",
    "detail": "by-extension.python.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "empty_list",
    "kind": 5,
    "importPath": "by-extension.python.pythonstudyguide",
    "description": "by-extension.python.pythonstudyguide",
    "peekOfCode": "empty_list = []\nroomates = [\"Beau\", \"Delynn\"]\n# List built-in function makes a list too\nspecials = list()\n# We can use 'in' to test if something is in the list, like 'includes' in JS\nprint(1 in [1, 2, 4])  # True\nprint(2 in [1, 3, 5])  # False\n# Dictionaries - Similar to JS POJO's or Map, containing key value pairs\na = {\"one\": 1, \"two\": 2, \"three\": 3}\nb = dict(one=1, two=2, three=3)",
    "detail": "by-extension.python.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "roomates",
    "kind": 5,
    "importPath": "by-extension.python.pythonstudyguide",
    "description": "by-extension.python.pythonstudyguide",
    "peekOfCode": "roomates = [\"Beau\", \"Delynn\"]\n# List built-in function makes a list too\nspecials = list()\n# We can use 'in' to test if something is in the list, like 'includes' in JS\nprint(1 in [1, 2, 4])  # True\nprint(2 in [1, 3, 5])  # False\n# Dictionaries - Similar to JS POJO's or Map, containing key value pairs\na = {\"one\": 1, \"two\": 2, \"three\": 3}\nb = dict(one=1, two=2, three=3)\n# Can use 'in' on dictionaries too (for keys)",
    "detail": "by-extension.python.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "specials",
    "kind": 5,
    "importPath": "by-extension.python.pythonstudyguide",
    "description": "by-extension.python.pythonstudyguide",
    "peekOfCode": "specials = list()\n# We can use 'in' to test if something is in the list, like 'includes' in JS\nprint(1 in [1, 2, 4])  # True\nprint(2 in [1, 3, 5])  # False\n# Dictionaries - Similar to JS POJO's or Map, containing key value pairs\na = {\"one\": 1, \"two\": 2, \"three\": 3}\nb = dict(one=1, two=2, three=3)\n# Can use 'in' on dictionaries too (for keys)\nprint(\"one\" in a)  # True\nprint(3 in b)  # False",
    "detail": "by-extension.python.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "a",
    "kind": 5,
    "importPath": "by-extension.python.pythonstudyguide",
    "description": "by-extension.python.pythonstudyguide",
    "peekOfCode": "a = {\"one\": 1, \"two\": 2, \"three\": 3}\nb = dict(one=1, two=2, three=3)\n# Can use 'in' on dictionaries too (for keys)\nprint(\"one\" in a)  # True\nprint(3 in b)  # False\n# Sets - Just like JS, unordered collection of distinct objects\nbedroom = {\"bed\", \"tv\", \"computer\", \"clothes\", \"playstation 4\"}\n# bedroom = set(\"bed\", \"tv\", \"computer\", \"clothes\", \"playstation 5\")\nschool_bag = set(\n    [\"book\", \"paper\", \"pencil\", \"pencil\", \"book\", \"book\", \"book\", \"eraser\"]",
    "detail": "by-extension.python.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "b",
    "kind": 5,
    "importPath": "by-extension.python.pythonstudyguide",
    "description": "by-extension.python.pythonstudyguide",
    "peekOfCode": "b = dict(one=1, two=2, three=3)\n# Can use 'in' on dictionaries too (for keys)\nprint(\"one\" in a)  # True\nprint(3 in b)  # False\n# Sets - Just like JS, unordered collection of distinct objects\nbedroom = {\"bed\", \"tv\", \"computer\", \"clothes\", \"playstation 4\"}\n# bedroom = set(\"bed\", \"tv\", \"computer\", \"clothes\", \"playstation 5\")\nschool_bag = set(\n    [\"book\", \"paper\", \"pencil\", \"pencil\", \"book\", \"book\", \"book\", \"eraser\"]\n)",
    "detail": "by-extension.python.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "bedroom",
    "kind": 5,
    "importPath": "by-extension.python.pythonstudyguide",
    "description": "by-extension.python.pythonstudyguide",
    "peekOfCode": "bedroom = {\"bed\", \"tv\", \"computer\", \"clothes\", \"playstation 4\"}\n# bedroom = set(\"bed\", \"tv\", \"computer\", \"clothes\", \"playstation 5\")\nschool_bag = set(\n    [\"book\", \"paper\", \"pencil\", \"pencil\", \"book\", \"book\", \"book\", \"eraser\"]\n)\nprint(school_bag)\nprint(bedroom)\n# We can use 'in' on sets as wel\nprint(1 in {1, 2, 3})  # True\nprint(4 in {1, 3, 5})  # False",
    "detail": "by-extension.python.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "school_bag",
    "kind": 5,
    "importPath": "by-extension.python.pythonstudyguide",
    "description": "by-extension.python.pythonstudyguide",
    "peekOfCode": "school_bag = set(\n    [\"book\", \"paper\", \"pencil\", \"pencil\", \"book\", \"book\", \"book\", \"eraser\"]\n)\nprint(school_bag)\nprint(bedroom)\n# We can use 'in' on sets as wel\nprint(1 in {1, 2, 3})  # True\nprint(4 in {1, 3, 5})  # False\n# Tuples are immutable lists of items\ntime_blocks = (\"AM\", \"PM\")",
    "detail": "by-extension.python.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "time_blocks",
    "kind": 5,
    "importPath": "by-extension.python.pythonstudyguide",
    "description": "by-extension.python.pythonstudyguide",
    "peekOfCode": "time_blocks = (\"AM\", \"PM\")\ncolors = \"red\", \"green\", \"blue\"  # Parenthesis not needed but encouraged\n# The tuple built-in function can be used to convert things to tuples\nprint(tuple(\"abc\"))\nprint(tuple([1, 2, 3]))\n# 'in' may be used on tuples as well\nprint(1 in (1, 2, 3))  # True\nprint(5 in (1, 4, 3))  # False\n# Ranges are immutable lists of numbers, often used with for loops\n#   - start - default: 0, first number in sequence",
    "detail": "by-extension.python.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "colors",
    "kind": 5,
    "importPath": "by-extension.python.pythonstudyguide",
    "description": "by-extension.python.pythonstudyguide",
    "peekOfCode": "colors = \"red\", \"green\", \"blue\"  # Parenthesis not needed but encouraged\n# The tuple built-in function can be used to convert things to tuples\nprint(tuple(\"abc\"))\nprint(tuple([1, 2, 3]))\n# 'in' may be used on tuples as well\nprint(1 in (1, 2, 3))  # True\nprint(5 in (1, 4, 3))  # False\n# Ranges are immutable lists of numbers, often used with for loops\n#   - start - default: 0, first number in sequence\n#   - stop - required, next number past last number in sequence",
    "detail": "by-extension.python.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "range1",
    "kind": 5,
    "importPath": "by-extension.python.pythonstudyguide",
    "description": "by-extension.python.pythonstudyguide",
    "peekOfCode": "range1 = range(5)  # [0,1,2,3,4]\nrange2 = range(1, 5)  # [1,2,3,4]\nrange3 = range(0, 25, 5)  # [0,5,10,15,20]\nrange4 = range(0)  # []\nfor i in range1:\n    print(i)\n# Built-in functions:\n# Filter\nisOdd = lambda num: num % 2 == 1\nfiltered = filter(isOdd, [1, 2, 3, 4])",
    "detail": "by-extension.python.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "range2",
    "kind": 5,
    "importPath": "by-extension.python.pythonstudyguide",
    "description": "by-extension.python.pythonstudyguide",
    "peekOfCode": "range2 = range(1, 5)  # [1,2,3,4]\nrange3 = range(0, 25, 5)  # [0,5,10,15,20]\nrange4 = range(0)  # []\nfor i in range1:\n    print(i)\n# Built-in functions:\n# Filter\nisOdd = lambda num: num % 2 == 1\nfiltered = filter(isOdd, [1, 2, 3, 4])\nprint(list(filtered))",
    "detail": "by-extension.python.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "range3",
    "kind": 5,
    "importPath": "by-extension.python.pythonstudyguide",
    "description": "by-extension.python.pythonstudyguide",
    "peekOfCode": "range3 = range(0, 25, 5)  # [0,5,10,15,20]\nrange4 = range(0)  # []\nfor i in range1:\n    print(i)\n# Built-in functions:\n# Filter\nisOdd = lambda num: num % 2 == 1\nfiltered = filter(isOdd, [1, 2, 3, 4])\nprint(list(filtered))\nfor num in filtered:",
    "detail": "by-extension.python.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "range4",
    "kind": 5,
    "importPath": "by-extension.python.pythonstudyguide",
    "description": "by-extension.python.pythonstudyguide",
    "peekOfCode": "range4 = range(0)  # []\nfor i in range1:\n    print(i)\n# Built-in functions:\n# Filter\nisOdd = lambda num: num % 2 == 1\nfiltered = filter(isOdd, [1, 2, 3, 4])\nprint(list(filtered))\nfor num in filtered:\n    print(f\"first way: {num}\")",
    "detail": "by-extension.python.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "isOdd",
    "kind": 5,
    "importPath": "by-extension.python.pythonstudyguide",
    "description": "by-extension.python.pythonstudyguide",
    "peekOfCode": "isOdd = lambda num: num % 2 == 1\nfiltered = filter(isOdd, [1, 2, 3, 4])\nprint(list(filtered))\nfor num in filtered:\n    print(f\"first way: {num}\")\nprint(\"--\" * 20)\n[print(f\"list comprehension: {i}\") for i in [1, 2, 3, 4, 5, 6, 7, 8] if i % 2 == 1]\n# Map\ndef toUpper(str):\n    return str.upper()",
    "detail": "by-extension.python.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "filtered",
    "kind": 5,
    "importPath": "by-extension.python.pythonstudyguide",
    "description": "by-extension.python.pythonstudyguide",
    "peekOfCode": "filtered = filter(isOdd, [1, 2, 3, 4])\nprint(list(filtered))\nfor num in filtered:\n    print(f\"first way: {num}\")\nprint(\"--\" * 20)\n[print(f\"list comprehension: {i}\") for i in [1, 2, 3, 4, 5, 6, 7, 8] if i % 2 == 1]\n# Map\ndef toUpper(str):\n    return str.upper()\nupperCased = map(toUpper, [\"a\", \"b\", \"c\", \"d\"])",
    "detail": "by-extension.python.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "upperCased",
    "kind": 5,
    "importPath": "by-extension.python.pythonstudyguide",
    "description": "by-extension.python.pythonstudyguide",
    "peekOfCode": "upperCased = map(toUpper, [\"a\", \"b\", \"c\", \"d\"])\nprint(list(upperCased))\n# Sorted\nsorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"])\nprint(list(sorted_items))  # Notice uppercase comes before lowercase\n# Using a key function to control the sorting and make it case insensitive\nsorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"], key=str.lower)\nprint(sorted_items)\n# You can also reverse the sort\nsorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"], key=str.lower, reverse=True)",
    "detail": "by-extension.python.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "sorted_items",
    "kind": 5,
    "importPath": "by-extension.python.pythonstudyguide",
    "description": "by-extension.python.pythonstudyguide",
    "peekOfCode": "sorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"])\nprint(list(sorted_items))  # Notice uppercase comes before lowercase\n# Using a key function to control the sorting and make it case insensitive\nsorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"], key=str.lower)\nprint(sorted_items)\n# You can also reverse the sort\nsorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"], key=str.lower, reverse=True)\nprint(sorted_items)\n# Enumerate creates a tuple with an index for what you're enumerating\nquarters = [\"First\", \"Second\", \"Third\", \"Fourth\"]",
    "detail": "by-extension.python.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "sorted_items",
    "kind": 5,
    "importPath": "by-extension.python.pythonstudyguide",
    "description": "by-extension.python.pythonstudyguide",
    "peekOfCode": "sorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"], key=str.lower)\nprint(sorted_items)\n# You can also reverse the sort\nsorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"], key=str.lower, reverse=True)\nprint(sorted_items)\n# Enumerate creates a tuple with an index for what you're enumerating\nquarters = [\"First\", \"Second\", \"Third\", \"Fourth\"]\nprint(list(enumerate(quarters)))\nprint(list(enumerate(quarters, start=1)))\n# Zip takes list and combines them as key value pairs, or really however you need",
    "detail": "by-extension.python.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "sorted_items",
    "kind": 5,
    "importPath": "by-extension.python.pythonstudyguide",
    "description": "by-extension.python.pythonstudyguide",
    "peekOfCode": "sorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"], key=str.lower, reverse=True)\nprint(sorted_items)\n# Enumerate creates a tuple with an index for what you're enumerating\nquarters = [\"First\", \"Second\", \"Third\", \"Fourth\"]\nprint(list(enumerate(quarters)))\nprint(list(enumerate(quarters, start=1)))\n# Zip takes list and combines them as key value pairs, or really however you need\nkeys = (\"Name\", \"Email\")\nvalues = (\"Buster\", \"cheetoh@johhnydepp.com\")\nzipped = zip(keys, values)",
    "detail": "by-extension.python.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "quarters",
    "kind": 5,
    "importPath": "by-extension.python.pythonstudyguide",
    "description": "by-extension.python.pythonstudyguide",
    "peekOfCode": "quarters = [\"First\", \"Second\", \"Third\", \"Fourth\"]\nprint(list(enumerate(quarters)))\nprint(list(enumerate(quarters, start=1)))\n# Zip takes list and combines them as key value pairs, or really however you need\nkeys = (\"Name\", \"Email\")\nvalues = (\"Buster\", \"cheetoh@johhnydepp.com\")\nzipped = zip(keys, values)\nprint(list(zipped))\n# You can zip more than 2\nx_coords = [0, 1, 2, 3, 4]",
    "detail": "by-extension.python.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "keys",
    "kind": 5,
    "importPath": "by-extension.python.pythonstudyguide",
    "description": "by-extension.python.pythonstudyguide",
    "peekOfCode": "keys = (\"Name\", \"Email\")\nvalues = (\"Buster\", \"cheetoh@johhnydepp.com\")\nzipped = zip(keys, values)\nprint(list(zipped))\n# You can zip more than 2\nx_coords = [0, 1, 2, 3, 4]\ny_coords = [4, 6, 10, 9, 10]\nz_coords = [20, 10, 5, 9, 1]\ncoords = zip(x_coords, y_coords, z_coords)\nprint(list(coords))",
    "detail": "by-extension.python.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "values",
    "kind": 5,
    "importPath": "by-extension.python.pythonstudyguide",
    "description": "by-extension.python.pythonstudyguide",
    "peekOfCode": "values = (\"Buster\", \"cheetoh@johhnydepp.com\")\nzipped = zip(keys, values)\nprint(list(zipped))\n# You can zip more than 2\nx_coords = [0, 1, 2, 3, 4]\ny_coords = [4, 6, 10, 9, 10]\nz_coords = [20, 10, 5, 9, 1]\ncoords = zip(x_coords, y_coords, z_coords)\nprint(list(coords))\n# Len reports the length of strings along with list and any other object data type",
    "detail": "by-extension.python.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "zipped",
    "kind": 5,
    "importPath": "by-extension.python.pythonstudyguide",
    "description": "by-extension.python.pythonstudyguide",
    "peekOfCode": "zipped = zip(keys, values)\nprint(list(zipped))\n# You can zip more than 2\nx_coords = [0, 1, 2, 3, 4]\ny_coords = [4, 6, 10, 9, 10]\nz_coords = [20, 10, 5, 9, 1]\ncoords = zip(x_coords, y_coords, z_coords)\nprint(list(coords))\n# Len reports the length of strings along with list and any other object data type\nprint_len = lambda item: print(len(item))  # doing this to save myself some typing",
    "detail": "by-extension.python.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "x_coords",
    "kind": 5,
    "importPath": "by-extension.python.pythonstudyguide",
    "description": "by-extension.python.pythonstudyguide",
    "peekOfCode": "x_coords = [0, 1, 2, 3, 4]\ny_coords = [4, 6, 10, 9, 10]\nz_coords = [20, 10, 5, 9, 1]\ncoords = zip(x_coords, y_coords, z_coords)\nprint(list(coords))\n# Len reports the length of strings along with list and any other object data type\nprint_len = lambda item: print(len(item))  # doing this to save myself some typing\nprint_len(\"Mike\")\nprint_len([1, 5, 2, 10, 3, 10])\nprint_len({1, 5, 10, 9, 10})  # 4 because there is a duplicate here (10)",
    "detail": "by-extension.python.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "y_coords",
    "kind": 5,
    "importPath": "by-extension.python.pythonstudyguide",
    "description": "by-extension.python.pythonstudyguide",
    "peekOfCode": "y_coords = [4, 6, 10, 9, 10]\nz_coords = [20, 10, 5, 9, 1]\ncoords = zip(x_coords, y_coords, z_coords)\nprint(list(coords))\n# Len reports the length of strings along with list and any other object data type\nprint_len = lambda item: print(len(item))  # doing this to save myself some typing\nprint_len(\"Mike\")\nprint_len([1, 5, 2, 10, 3, 10])\nprint_len({1, 5, 10, 9, 10})  # 4 because there is a duplicate here (10)\nprint_len((1, 4, 10, 9, 20))",
    "detail": "by-extension.python.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "z_coords",
    "kind": 5,
    "importPath": "by-extension.python.pythonstudyguide",
    "description": "by-extension.python.pythonstudyguide",
    "peekOfCode": "z_coords = [20, 10, 5, 9, 1]\ncoords = zip(x_coords, y_coords, z_coords)\nprint(list(coords))\n# Len reports the length of strings along with list and any other object data type\nprint_len = lambda item: print(len(item))  # doing this to save myself some typing\nprint_len(\"Mike\")\nprint_len([1, 5, 2, 10, 3, 10])\nprint_len({1, 5, 10, 9, 10})  # 4 because there is a duplicate here (10)\nprint_len((1, 4, 10, 9, 20))\n# Max will return the max number in a given scenario",
    "detail": "by-extension.python.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "coords",
    "kind": 5,
    "importPath": "by-extension.python.pythonstudyguide",
    "description": "by-extension.python.pythonstudyguide",
    "peekOfCode": "coords = zip(x_coords, y_coords, z_coords)\nprint(list(coords))\n# Len reports the length of strings along with list and any other object data type\nprint_len = lambda item: print(len(item))  # doing this to save myself some typing\nprint_len(\"Mike\")\nprint_len([1, 5, 2, 10, 3, 10])\nprint_len({1, 5, 10, 9, 10})  # 4 because there is a duplicate here (10)\nprint_len((1, 4, 10, 9, 20))\n# Max will return the max number in a given scenario\nprint(max(1, 2, 35, 1012, 1))",
    "detail": "by-extension.python.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "print_len",
    "kind": 5,
    "importPath": "by-extension.python.pythonstudyguide",
    "description": "by-extension.python.pythonstudyguide",
    "peekOfCode": "print_len = lambda item: print(len(item))  # doing this to save myself some typing\nprint_len(\"Mike\")\nprint_len([1, 5, 2, 10, 3, 10])\nprint_len({1, 5, 10, 9, 10})  # 4 because there is a duplicate here (10)\nprint_len((1, 4, 10, 9, 20))\n# Max will return the max number in a given scenario\nprint(max(1, 2, 35, 1012, 1))\n# Min\nprint(min(1, 5, 2, 10))\nprint(min([1, 4, 7, 10]))",
    "detail": "by-extension.python.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "user",
    "kind": 5,
    "importPath": "by-extension.python.pythonstudyguide",
    "description": "by-extension.python.pythonstudyguide",
    "peekOfCode": "user = {\"Name\": \"Bob\", \"Email\": \"bob@bob.com\"}\nprint(dir(user))\n# Importing packages and modules\n#  - Module - A Python code in a file or directory\n#  - Package - A module which is a directory containing an __init__.py file\n#  - Submodule - A module which is contained within a package\n#  - Name - An exported function, class, or variable in a module\n# Unlike JS, modules export ALL names contained within them without any special export key\n# Assuming we have the following package with four submodules\n#  math",
    "detail": "by-extension.python.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "squares",
    "kind": 5,
    "importPath": "by-extension.python.pythonstudyguide",
    "description": "by-extension.python.pythonstudyguide",
    "peekOfCode": "squares = []\nfor i in range(10):\n    squares.append(i ** 2)\nprint(squares)\n# value = i ** 2\n# loop = for i in range(10)\nsquares = [i ** 2 for i in range(10)]\nprint(list(squares))\nsentence = \"the rocket came back from mars\"\nvowels = [character for character in sentence if character in \"aeiou\"]",
    "detail": "by-extension.python.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "squares",
    "kind": 5,
    "importPath": "by-extension.python.pythonstudyguide",
    "description": "by-extension.python.pythonstudyguide",
    "peekOfCode": "squares = [i ** 2 for i in range(10)]\nprint(list(squares))\nsentence = \"the rocket came back from mars\"\nvowels = [character for character in sentence if character in \"aeiou\"]\nprint(vowels)\n# You can also use them on dictionaries. We can use the items() method\n# for the dictionary to loop through it getting the keys and values out at once\nperson = {\"name\": \"Corina\", \"age\": 32, \"height\": 1.4}\n# This loops through and capitalizes the first letter of all keys\nnewPerson = {key.title(): value for key, value in person.items()}",
    "detail": "by-extension.python.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "sentence",
    "kind": 5,
    "importPath": "by-extension.python.pythonstudyguide",
    "description": "by-extension.python.pythonstudyguide",
    "peekOfCode": "sentence = \"the rocket came back from mars\"\nvowels = [character for character in sentence if character in \"aeiou\"]\nprint(vowels)\n# You can also use them on dictionaries. We can use the items() method\n# for the dictionary to loop through it getting the keys and values out at once\nperson = {\"name\": \"Corina\", \"age\": 32, \"height\": 1.4}\n# This loops through and capitalizes the first letter of all keys\nnewPerson = {key.title(): value for key, value in person.items()}\nprint(list(newPerson.items()))",
    "detail": "by-extension.python.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "vowels",
    "kind": 5,
    "importPath": "by-extension.python.pythonstudyguide",
    "description": "by-extension.python.pythonstudyguide",
    "peekOfCode": "vowels = [character for character in sentence if character in \"aeiou\"]\nprint(vowels)\n# You can also use them on dictionaries. We can use the items() method\n# for the dictionary to loop through it getting the keys and values out at once\nperson = {\"name\": \"Corina\", \"age\": 32, \"height\": 1.4}\n# This loops through and capitalizes the first letter of all keys\nnewPerson = {key.title(): value for key, value in person.items()}\nprint(list(newPerson.items()))",
    "detail": "by-extension.python.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "person",
    "kind": 5,
    "importPath": "by-extension.python.pythonstudyguide",
    "description": "by-extension.python.pythonstudyguide",
    "peekOfCode": "person = {\"name\": \"Corina\", \"age\": 32, \"height\": 1.4}\n# This loops through and capitalizes the first letter of all keys\nnewPerson = {key.title(): value for key, value in person.items()}\nprint(list(newPerson.items()))",
    "detail": "by-extension.python.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "newPerson",
    "kind": 5,
    "importPath": "by-extension.python.pythonstudyguide",
    "description": "by-extension.python.pythonstudyguide",
    "peekOfCode": "newPerson = {key.title(): value for key, value in person.items()}\nprint(list(newPerson.items()))",
    "detail": "by-extension.python.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "create_database",
    "kind": 2,
    "importPath": "by-extension.python.python_mysql",
    "description": "by-extension.python.python_mysql",
    "peekOfCode": "def create_database():\n    cursor.execute(\n        \"CREATE DATABASE IF NOT EXISTS {} DEFAULT CHARACTER SET 'utf8'\".format(DB_NAME))\n    print(\"Database {} created!\".format(DB_NAME))\ndef create_tables():\n    cursor.execute(\"USE {}\".format(DB_NAME))\n    for table_name in TABLES:\n        table_description = TABLES[table_name]\n        try:\n            print(\"Creating table ({}) \".format(table_name), end=\"\")",
    "detail": "by-extension.python.python_mysql",
    "documentation": {}
  },
  {
    "label": "create_tables",
    "kind": 2,
    "importPath": "by-extension.python.python_mysql",
    "description": "by-extension.python.python_mysql",
    "peekOfCode": "def create_tables():\n    cursor.execute(\"USE {}\".format(DB_NAME))\n    for table_name in TABLES:\n        table_description = TABLES[table_name]\n        try:\n            print(\"Creating table ({}) \".format(table_name), end=\"\")\n            cursor.execute(table_description)\n        except mysql.connector.Error as err:\n            if err.errno == errorcode.ER_TABLE_EXISTS_ERROR:\n                print(\"Already Exists\")",
    "detail": "by-extension.python.python_mysql",
    "documentation": {}
  },
  {
    "label": "add_log",
    "kind": 2,
    "importPath": "by-extension.python.python_mysql",
    "description": "by-extension.python.python_mysql",
    "peekOfCode": "def add_log(text, user):\n    sql = (\"INSERT INTO logs(text, user) VALUES (%s, %s)\")\n    cursor.execute(sql, (text, user,))\n    db.commit()\n    log_id = cursor.lastrowid\n    print(\"Added log {}\".format(log_id))\ndef get_logs():\n    sql = (\"SELECT * FROM logs ORDER BY created DESC\")\n    cursor.execute(sql)\n    result = cursor.fetchall()",
    "detail": "by-extension.python.python_mysql",
    "documentation": {}
  },
  {
    "label": "get_logs",
    "kind": 2,
    "importPath": "by-extension.python.python_mysql",
    "description": "by-extension.python.python_mysql",
    "peekOfCode": "def get_logs():\n    sql = (\"SELECT * FROM logs ORDER BY created DESC\")\n    cursor.execute(sql)\n    result = cursor.fetchall()\n    for row in result:\n        print(row[1])\ndef get_log(id):\n    sql = (\"SELECT * FROM logs WHERE id = %s\")\n    cursor.execute(sql, (id,))\n    result = cursor.fetchone()",
    "detail": "by-extension.python.python_mysql",
    "documentation": {}
  },
  {
    "label": "get_log",
    "kind": 2,
    "importPath": "by-extension.python.python_mysql",
    "description": "by-extension.python.python_mysql",
    "peekOfCode": "def get_log(id):\n    sql = (\"SELECT * FROM logs WHERE id = %s\")\n    cursor.execute(sql, (id,))\n    result = cursor.fetchone()\n    for row in result:\n        print(row)\ndef update_log(id, text):\n    sql = (\"UPDATE logs SET text = %s WHERE id = %s\")\n    cursor.execute(sql, (text, id))\n    db.commit()",
    "detail": "by-extension.python.python_mysql",
    "documentation": {}
  },
  {
    "label": "update_log",
    "kind": 2,
    "importPath": "by-extension.python.python_mysql",
    "description": "by-extension.python.python_mysql",
    "peekOfCode": "def update_log(id, text):\n    sql = (\"UPDATE logs SET text = %s WHERE id = %s\")\n    cursor.execute(sql, (text, id))\n    db.commit()\n    print(\"Log updated\")\ndef delete_log(id):\n    sql = (\"DELETE FROM logs WHERE id = %s\")\n    cursor.execute(sql, (id,))\n    db.commit()\n    print(\"Log removed\")",
    "detail": "by-extension.python.python_mysql",
    "documentation": {}
  },
  {
    "label": "delete_log",
    "kind": 2,
    "importPath": "by-extension.python.python_mysql",
    "description": "by-extension.python.python_mysql",
    "peekOfCode": "def delete_log(id):\n    sql = (\"DELETE FROM logs WHERE id = %s\")\n    cursor.execute(sql, (id,))\n    db.commit()\n    print(\"Log removed\")\n# add_log('This is log one', 'Brad')\n# add_log('This is log two', 'Jeff')\n# add_log('This is log three', 'Jane')\n# get_logs()\n# get_log(2)",
    "detail": "by-extension.python.python_mysql",
    "documentation": {}
  },
  {
    "label": "config",
    "kind": 5,
    "importPath": "by-extension.python.python_mysql",
    "description": "by-extension.python.python_mysql",
    "peekOfCode": "config = {\n    'user': 'root',\n    'password': '',\n    'host': 'localhost',\n    'database': 'acme'\n}\ndb = mysql.connector.connect(**config)\ncursor = db.cursor()\nDB_NAME = 'acme'\nTABLES = {}",
    "detail": "by-extension.python.python_mysql",
    "documentation": {}
  },
  {
    "label": "db",
    "kind": 5,
    "importPath": "by-extension.python.python_mysql",
    "description": "by-extension.python.python_mysql",
    "peekOfCode": "db = mysql.connector.connect(**config)\ncursor = db.cursor()\nDB_NAME = 'acme'\nTABLES = {}\nTABLES['logs'] = (\n    \"CREATE TABLE `logs` (\"\n    \" `id` int(11) NOT NULL AUTO_INCREMENT,\"\n    \" `text` varchar(250) NOT NULL,\"\n    \" `user` varchar(250) NOT NULL,\"\n    \" `created` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,\"",
    "detail": "by-extension.python.python_mysql",
    "documentation": {}
  },
  {
    "label": "cursor",
    "kind": 5,
    "importPath": "by-extension.python.python_mysql",
    "description": "by-extension.python.python_mysql",
    "peekOfCode": "cursor = db.cursor()\nDB_NAME = 'acme'\nTABLES = {}\nTABLES['logs'] = (\n    \"CREATE TABLE `logs` (\"\n    \" `id` int(11) NOT NULL AUTO_INCREMENT,\"\n    \" `text` varchar(250) NOT NULL,\"\n    \" `user` varchar(250) NOT NULL,\"\n    \" `created` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,\"\n    \" PRIMARY KEY (`id`)\"",
    "detail": "by-extension.python.python_mysql",
    "documentation": {}
  },
  {
    "label": "DB_NAME",
    "kind": 5,
    "importPath": "by-extension.python.python_mysql",
    "description": "by-extension.python.python_mysql",
    "peekOfCode": "DB_NAME = 'acme'\nTABLES = {}\nTABLES['logs'] = (\n    \"CREATE TABLE `logs` (\"\n    \" `id` int(11) NOT NULL AUTO_INCREMENT,\"\n    \" `text` varchar(250) NOT NULL,\"\n    \" `user` varchar(250) NOT NULL,\"\n    \" `created` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,\"\n    \" PRIMARY KEY (`id`)\"\n    \") ENGINE=InnoDB\"",
    "detail": "by-extension.python.python_mysql",
    "documentation": {}
  },
  {
    "label": "TABLES",
    "kind": 5,
    "importPath": "by-extension.python.python_mysql",
    "description": "by-extension.python.python_mysql",
    "peekOfCode": "TABLES = {}\nTABLES['logs'] = (\n    \"CREATE TABLE `logs` (\"\n    \" `id` int(11) NOT NULL AUTO_INCREMENT,\"\n    \" `text` varchar(250) NOT NULL,\"\n    \" `user` varchar(250) NOT NULL,\"\n    \" `created` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,\"\n    \" PRIMARY KEY (`id`)\"\n    \") ENGINE=InnoDB\"\n)",
    "detail": "by-extension.python.python_mysql",
    "documentation": {}
  },
  {
    "label": "TABLES['logs']",
    "kind": 5,
    "importPath": "by-extension.python.python_mysql",
    "description": "by-extension.python.python_mysql",
    "peekOfCode": "TABLES['logs'] = (\n    \"CREATE TABLE `logs` (\"\n    \" `id` int(11) NOT NULL AUTO_INCREMENT,\"\n    \" `text` varchar(250) NOT NULL,\"\n    \" `user` varchar(250) NOT NULL,\"\n    \" `created` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,\"\n    \" PRIMARY KEY (`id`)\"\n    \") ENGINE=InnoDB\"\n)\ndef create_database():",
    "detail": "by-extension.python.python_mysql",
    "documentation": {}
  },
  {
    "label": "Board",
    "kind": 6,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "class Board(object):\n    def __init__(self, x=DEFAULT_X, y=DEFAULT_Y):\n        self.x = y\n        self.y = x\n        self.board = np.zeros((x, y), dtype=np.uint8)\n    def __getitem__(self, *args, **kwargs): return self.board.__getitem__(*args, **kwargs)\n    def __setitem__(self, *args, **kwargs): return self.board.__setitem__(*args, **kwargs)\n    def is_empty(self):\n        return np.all(self.board == 0)\n    def get_ship(self, x, y):",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "Entry",
    "kind": 6,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "class Entry(object):\n\tdef __init__(self):\n\t\tself.entry_type = 'UNKNOWN'\n\t\tself.entry_name = ''\n\t\tself.rows = { }\n\tdef ParseFromString(self, text):\n\t\tm = re.match('\\s*@\\s*(\\w+)\\s*({)\\s*', text)\n\t\tif not m:\n\t\t\treturn None\n\t\tself.entry_type = m.group(1)",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "Print",
    "kind": 6,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "class Print(object):\n    @cherrypy.expose\n    def index(self):\n        return HTML_TEMPLATE\n    @cherrypy.expose\n    def send(self, file, user, **kwargs):\n        try:\n            cups.setUser(user)\n            conn = cups.Connection()\n            job_name = str(uuid.uuid4())",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "delBoard",
    "kind": 6,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "class delBoard:\n    \"\"\" A weird object that does nothing while alive,\n    but solves the n-queens problem when garbage collected.\n    It uses CPython's garbage collection graph traversal algorithm to explore\n    the graph of possible solutions to the n-queens problem.\n    Very weird, but it works. And it's fast!\n    \"\"\"\n    def __init__(self, nqueens=None):\n        self.nqueens = nqueens\n    def __del__(self):",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "hashtable",
    "kind": 6,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "class hashtable(object):\n    \"\"\"Manual implementation of a naive hash table.\n    - Can only store hashable values.\n    - Use single-linked lists to be collision-resistant!\n    - Uses a non cryptographic hash function (default `hash`).\n    \"\"\"\n    def __init__(self, map_values=None, nb_bits=NB_BITS):\n        self._nb_bits = nb_bits\n        self._size = 1 << nb_bits\n        self._nb = 0",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "HtpasswdFile",
    "kind": 6,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "class HtpasswdFile:\n    \"\"\"A class for manipulating htpasswd files.\"\"\"\n    def __init__(self, filename, create=False):\n        self.entries = []\n        self.filename = filename\n        if not create:\n            if os.path.exists(self.filename):\n                self.load()\n            else:\n                raise Exception(\"%s does not exist\" % self.filename)",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "ColorMap",
    "kind": 6,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "class ColorMap:\n    \"\"\" A colormap is used to map scalar values to colors. It is build by\n        adding couples of (value,color) where value must be between 0 and 1.\n        - The 'scale' method allows to specify the range of the colormap and\n        - the 'color' method then returns a color for any value.\n    \"\"\"\n    def __init__(self, colors, name=None):\n        self.colors = colors\n        self.min = 0\n        self.max = 1",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "PasteBox",
    "kind": 6,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "class PasteBox:\n    def __init__(self):\n        self.replyid = 0\n        self.mode = 'text'\n        self.ttl = 86400\n        self.authhash = None\n    def create(self, content):\n        VALUES = {'content': content,\n                  'replyid': self.replyid,\n                  'mode': self.mode,",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "GeditTerminal",
    "kind": 6,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "class GeditTerminal(Gtk.Box):\n    \"\"\"VTE terminal which follows gnome-terminal default profile options\"\"\"\n    __gsignals__ = {\n        \"populate-popup\": (\n            GObject.SIGNAL_RUN_LAST,\n            None,\n            (GObject.TYPE_OBJECT,)\n        )\n    }\n    defaults = {",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "TerminalPlugin",
    "kind": 6,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "class TerminalPlugin(GObject.Object, Gedit.WindowActivatable):\n    __gtype_name__ = \"TerminalPlugin\"\n    window = GObject.property(type=Gedit.Window)\n    def __init__(self):\n        GObject.Object.__init__(self)\n    def do_activate(self):\n        self._panel = GeditTerminal()\n        self._panel.connect(\"populate-popup\", self.on_panel_populate_popup)\n        self._panel.show()\n        image = Gtk.Image.new_from_icon_name(\"utilities-terminal\", Gtk.IconSize.MENU)",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "GeditTerminal2",
    "kind": 6,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "class GeditTerminal2(Gtk.Box):\n    \"\"\"VTE terminal2 which follows gnome-terminal default profile options\"\"\"\n    __gsignals__ = {\n        \"populate-popup\": (\n            GObject.SIGNAL_RUN_LAST,\n            None,\n            (GObject.TYPE_OBJECT,)\n        )\n    }\n    defaults = {",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "TerminalPlugin2",
    "kind": 6,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "class TerminalPlugin2(GObject.Object, Gedit.WindowActivatable):\n    __gtype_name__ = \"TerminalPlugin2\"\n    window = GObject.property(type=Gedit.Window)\n    def __init__(self):\n        GObject.Object.__init__(self)\n    def do_activate(self):\n        self._panel = GeditTerminal2()\n        self._panel.connect(\"populate-popup\", self.on_panel_populate_popup)\n        self._panel.show()\n        image = Gtk.Image.new_from_icon_name(\"utilities-terminal\", Gtk.IconSize.MENU)",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "GeditTerminal3",
    "kind": 6,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "class GeditTerminal3(Gtk.Box):\n    \"\"\"VTE terminal3 which follows gnome-terminal default profile options\"\"\"\n    __gsignals__ = {\n        \"populate-popup\": (\n            GObject.SIGNAL_RUN_LAST,\n            None,\n            (GObject.TYPE_OBJECT,)\n        )\n    }\n    defaults = {",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "TerminalPlugin3",
    "kind": 6,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "class TerminalPlugin3(GObject.Object, Gedit.WindowActivatable):\n    __gtype_name__ = \"TerminalPlugin3\"\n    window = GObject.property(type=Gedit.Window)\n    def __init__(self):\n        GObject.Object.__init__(self)\n    def do_activate(self):\n        self._panel = GeditTerminal3()\n        self._panel.connect(\"populate-popup\", self.on_panel_populate_popup)\n        self._panel.show()\n        image = Gtk.Image.new_from_icon_name(\"utilities-terminal\", Gtk.IconSize.MENU)",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "QuotesSpider",
    "kind": 6,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "class QuotesSpider(scrapy.Spider):\n    \"\"\"Small scrapy Spider.\"\"\"\n    name = \"Watch Later\"\n    start_urls = [\n        'file:///tmp/wl.html'\n    ]\n    custom_settings = {\n    \t\"LOG_ENABLED\": False,\n    \t\"LOG_LEVEL\": 'ERROR',\n    }",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def main(args):\n    # pprint(args)  # DEBUG\n    sizex, sizey = [int(i) for i in args['--size'].split(',')]\n    if min(sizex, sizey) < max_length:\n        print(f\"Error: <xy> both must be >= {max_length}.\")\n        return 1\n    board = Board(x=sizex, y=sizey)\n    for name in ships.keys():\n        if args[f'--{name.lower()}']:\n            if args[f'--{name.lower()}'] == 'r' or args['--random']:",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "Format",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def Format(text):\n\treturn ' '.join(text.split())\ndef Capitalize(text):\n\tword_start = True\n\ts = ''\n\tfor c in text.lower():\n\t\tif word_start:\n\t\t\tc = c.upper()\n\t\tword_start = not c.isalpha()\n\t\ts = s + c",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "Capitalize",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def Capitalize(text):\n\tword_start = True\n\ts = ''\n\tfor c in text.lower():\n\t\tif word_start:\n\t\t\tc = c.upper()\n\t\tword_start = not c.isalpha()\n\t\ts = s + c\n\treturn s\ndef FindMatchingParenthesis(text):",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "FindMatchingParenthesis",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def FindMatchingParenthesis(text):\n\tnesting = 1\n\tend = 0\n\tfor i in range(1, len(text)):\n\t\tif text[i] == '{':\n\t\t\tnesting = nesting + 1\n\t\telif text[i] == '}':\n\t\t\tnesting = nesting - 1\n\t\tend = i\n\t\tif nesting == 0:",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "RemoveBraces",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def RemoveBraces(text):\n\tif text[0] == '{':\n\t\t text = text[1:]\n\tif text[-1] == '}':\n\t\t text = text[:-1]\n\treturn text\ndef NormalizeAuthor(text):\n\tparts = text.split(',', 1)\n\tif len(parts) >= 2:\n\t\treturn parts[1].strip() + ' ' + parts[0].strip()",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "NormalizeAuthor",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def NormalizeAuthor(text):\n\tparts = text.split(',', 1)\n\tif len(parts) >= 2:\n\t\treturn parts[1].strip() + ' ' + parts[0].strip()\n\treturn parts[0].strip()\ndef NormalizeAuthors(text):\n\tauthors = text.split(' and ')\n\treturn ' and '.join([NormalizeAuthor(author) for author in authors])\ndef NormalizePages(text):\n\tparts = text.split('--', 1)",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "NormalizeAuthors",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def NormalizeAuthors(text):\n\tauthors = text.split(' and ')\n\treturn ' and '.join([NormalizeAuthor(author) for author in authors])\ndef NormalizePages(text):\n\tparts = text.split('--', 1)\n\tif not '--' in text:\n\t\tparts = text.split('-', 1)\n\tnormalized = parts[0].strip()\n\tif len(parts) >= 2:\n\t\tnormalized = parts[0].strip() + '--' + parts[1].strip()",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "NormalizePages",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def NormalizePages(text):\n\tparts = text.split('--', 1)\n\tif not '--' in text:\n\t\tparts = text.split('-', 1)\n\tnormalized = parts[0].strip()\n\tif len(parts) >= 2:\n\t\tnormalized = parts[0].strip() + '--' + parts[1].strip()\n\treturn normalized\ndef SafeParseInt(text):\n\ttry:",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "SafeParseInt",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def SafeParseInt(text):\n\ttry:\n        \treturn int(text)\n\texcept ValueError:\n\t\treturn None\ndef NormalizeYear(text):\n\tyear = SafeParseInt(text)\n\tif not year:\n\t\treturn text.strip()\n\tif (year >= 10) and (year <= 99):",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "NormalizeYear",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def NormalizeYear(text):\n\tyear = SafeParseInt(text)\n\tif not year:\n\t\treturn text.strip()\n\tif (year >= 10) and (year <= 99):\n\t\treturn str(1900 + year)\n\treturn str(year)\ndef NormalizeMonth(text):\n\tprefix = text[:3].lower()\n\tif prefix in months:",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "NormalizeMonth",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def NormalizeMonth(text):\n\tprefix = text[:3].lower()\n\tif prefix in months:\n\t\treturn months[prefix]\n\treturn text\n# An entry object\nclass Entry(object):\n\tdef __init__(self):\n\t\tself.entry_type = 'UNKNOWN'\n\t\tself.entry_name = ''",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "ParseEntries",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def ParseEntries(text):\n\tentries = []\n\twhile True:\n\t\te = Entry()\n\t\ttext = e.ParseFromString(text)\n\t\tif not text:\n\t\t\tbreak\n\t\tentries.append(e)\n\treturn entries\ndef SortEntries(entries):",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "SortEntries",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def SortEntries(entries):\n\tentries.sort(key=lambda e: e.entry_name)\n\tentries.sort(key=lambda e: e.entry_type)\n\tentries.sort(key=lambda e: e.SortKey())\n\treturn entries\ndef ReadFile():\n\tlines = []\n\twith open(sys.argv[1], 'r') as f:\n\t\tfor line in f:\n\t\t\tif line.strip().startswith('%'):",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "ReadFile",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def ReadFile():\n\tlines = []\n\twith open(sys.argv[1], 'r') as f:\n\t\tfor line in f:\n\t\t\tif line.strip().startswith('%'):\n\t\t\t\tprint(line.strip())\n\t\t\telse:\n\t\t\t\tlines.append(line)\n\ttext = '\\n'.join(lines)\n\treturn text",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def main():\n\ttext = ReadFile()\n\tentries = ParseEntries(text)\n\tentries = SortEntries(entries)\n\tfor entry in entries:\n\t\tprint(entry.ToString())\nif __name__ == '__main__':\n    main()\n#!/usr/bin/env python\n# -*- coding: utf-8; mode: python -*-",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "maximizeWindow",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def maximizeWindow():\n    \"\"\" Experimental function to try to maximize a plot.\n    - Tries as well as possible to maximize the figure.\n    - Cf. https://stackoverflow.com/q/12439588/\n    \"\"\"\n    try:\n        figManager = plt.get_current_fig_manager()\n        figManager.window.showMaximized()\n    except:\n        try:",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "palette",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def palette(nb):\n    \"\"\" Use a smart palette from seaborn, for nb different things to plot.\n    - Ref: http://seaborn.pydata.org/generated/seaborn.hls_palette.html#seaborn.hls_palette\n    \"\"\"\n    return sns.hls_palette(nb + 1)[:nb]\ndef calc_interets(comptes, taux=taux2020):\n    \"\"\" Calcule une estimation de mes intérêts.\"\"\"\n    interet_fin_annee = sum(comptes[k] * taux[k] / 100.0 for k in type_comptes)\n    for k in type_comptes:\n        print(\"Pour mon <blue>compte {:>4}<white>, avec <magenta>{:>10,.2f} €<white>, et un <cyan<taux à <u>{:>4,.2f}%<U><white> {} <green>intérêt ~= {:>6.2f} €<white>.\".format(k.upper(), comptes[k], taux[k], '→', comptes[k] * taux[k] / 100.0))",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "calc_interets",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def calc_interets(comptes, taux=taux2020):\n    \"\"\" Calcule une estimation de mes intérêts.\"\"\"\n    interet_fin_annee = sum(comptes[k] * taux[k] / 100.0 for k in type_comptes)\n    for k in type_comptes:\n        print(\"Pour mon <blue>compte {:>4}<white>, avec <magenta>{:>10,.2f} €<white>, et un <cyan<taux à <u>{:>4,.2f}%<U><white> {} <green>intérêt ~= {:>6.2f} €<white>.\".format(k.upper(), comptes[k], taux[k], '→', comptes[k] * taux[k] / 100.0))\n    print(\"<green>Intérêt estimé pour 2016 : {:.2f} €.<white>\".format(interet_fin_annee))\n    print(\"<red>Attention<white> : les vrais intérêts sont calculés toutes les quinzaines, mon estimation n'est pas précise !\")\n    return interet_fin_annee\ndef main(comptes, taux=taux2020):\n    \"\"\" Affiche un beau diagramme camembert montrant la répartition de ses économies. \"\"\"",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def main(comptes, taux=taux2020):\n    \"\"\" Affiche un beau diagramme camembert montrant la répartition de ses économies. \"\"\"\n    argenttotal = sum(comptes.values())\n    interets = sum(round(comptes[k] * taux[k] / 100.0, 3) for k in type_comptes)\n    print(\"Affichage d'un diagrame camembert en cours...\")\n    valeurs = list(comptes.values())\n    print(\"Valeurs du diagrame : <black>{}<white>\".format(valeurs))\n    etiquettes = []\n    legendes = []\n    for k in type_comptes:",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "day_offset",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def day_offset(y, m, d):\n    # Add 1 if y > 2000 to account for the fact that 2000 was a leap year.\n    year_offset = ( y - 2000 ) + ( ( y - 2000 ) // 4 ) + ( y > 2000 )\n    # Account for wrongly computed leap years\n    year_offset -= ( y - 2000 ) // 100\n    # Add back 1 year if the target year is a leap year but the target day\n    # is after the 29th (in other words, the leap day hasn't happened yet).\n    if y % 100:\n        year_offset += ( y < 2000 ) and not( y % 4 ) and ( m > 2 )\n        year_offset -= ( y > 2000 ) and not( y % 4 ) and ( m < 3 )",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "l_to_c",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def l_to_c(l):\n    try:\n        return str(int(l))\n    except ValueError:\n        return str(10 + ord(l.upper()) - ord('A'))\ndef check_iban(iban):\n    print(\"\\nChecking the IBAN number '%s'...\" % iban)\n    ib = iban.replace(' ', '')\n    ib = ib[4:] + ib[:4]\n    print(\"Of length\", len(ib))",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "check_iban",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def check_iban(iban):\n    print(\"\\nChecking the IBAN number '%s'...\" % iban)\n    ib = iban.replace(' ', '')\n    ib = ib[4:] + ib[:4]\n    print(\"Of length\", len(ib))\n    i = int(''.join(l_to_c(l) for l in ib))\n    check = (i % 97) == 1\n    if check:\n        print(\"OK '%s' seems to be a valid IBAN number.\" % iban)\n    else:",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def main(args):\n    try:\n        if not args:\n            check_iban('HAHA LOL YOU THOUGH I WILL LET A REAL IBAN IN MY SCRIPT')\n        else:\n            for iban in args:\n                check_iban(iban)\n        return 0\n    except Exception as e:\n        print(e)",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "l_to_c",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def l_to_c(l):\n    try:\n        return str(int(l))\n    except ValueError:\n        return str(10 + ord(l.upper()) - ord('A'))\ndef check_nirpp(nirpp, length_checksum=length_checksum):\n    print(\"\\nChecking the NIRPP number '%s' ...\" % nirpp)\n    ib = nirpp.replace(' ', '')\n    checksum = int(ib[-length_checksum:])\n    ib = ib[:-length_checksum]",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "check_nirpp",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def check_nirpp(nirpp, length_checksum=length_checksum):\n    print(\"\\nChecking the NIRPP number '%s' ...\" % nirpp)\n    ib = nirpp.replace(' ', '')\n    checksum = int(ib[-length_checksum:])\n    ib = ib[:-length_checksum]\n    print(\"  Of length\", len(ib))\n    num_nirpp = int(''.join(l_to_c(l) for l in ib))\n    print(\"  Of sum num_nirpp =\", num_nirpp)\n    print(\"  Of check sum to 97 =\", (97 - (num_nirpp % 97)))\n    print(\"  And expected checksum was\", checksum)",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "pprint_nirpp",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def pprint_nirpp(nirpp, length_checksum=length_checksum):\n    print(\"\\nDisplaying information contained in the NIRPP number '%s' ...\" % nirpp)\n    ib = nirpp.replace(' ', '')\n    ib = ib[:-length_checksum]\n    # Printing\n    for (i, l) in sorted(information_nirpp):\n        n = nirpp[i: i + l]\n        info = information_nirpp[(i, l)]\n        if n in info[\"mapping\"]:\n            explain = \"\\\"{}\\\"\".format(info[\"mapping\"][n])",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def main(args):\n    try:\n        if not args:\n            check_nirpp('HAHA LOL YOU THOUGH I WILL LET A REAL NIRPP IN MY SCRIPT')\n        else:\n            for nirpp in args:\n                if check_nirpp(nirpp):\n                    pprint_nirpp(nirpp)\n        return 0\n    except Exception as e:",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def main(URL, message, success):\n    print(f\"Downloading '{URL}'...\")\n    firefoxOptions = webdriver.FirefoxOptions()\n    firefoxOptions.headless = True\n    browser = webdriver.Firefox(options=firefoxOptions)\n    browser.get(URL)\n    source = browser.page_source\n    browser.close()\n    if message in source:\n        print(f\"{URL} indique toujours le message recherché :\\n\\\"{message}\\\"\")",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def main(url, MY_OUTWARD_TIME):\n    \"\"\" Go to the page 'url', find the next link to got, then extract the JSON query result, find the wanted train, and display the results.\n    \"\"\"\n    MY_OUTWARD_TIME = MY_OUTWARD_TIME.replace('h', ':')\n    # Create the web browser object\n    b = RB(history=True, allow_redirects=True)\n    # Open the page\n    b.open(url)\n    # Find the next page to go\n    res = str(b.select('#url_redirect_proposals')[0])",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "ends_by_0",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def ends_by_0(p):\n    return (p % 10) == 9\ndef next_ends_by_9(p):\n    np = nextprime(p)\n    return (np % 10) == 9\ndef next_ends_by_1(p):\n    np = nextprime(p)\n    return (np % 10) == 1\ndef main(maxn):\n    primes = sieve",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "next_ends_by_9",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def next_ends_by_9(p):\n    np = nextprime(p)\n    return (np % 10) == 9\ndef next_ends_by_1(p):\n    np = nextprime(p)\n    return (np % 10) == 1\ndef main(maxn):\n    primes = sieve\n    primes.extend(maxn)\n    primes = primes._list",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "next_ends_by_1",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def next_ends_by_1(p):\n    np = nextprime(p)\n    return (np % 10) == 1\ndef main(maxn):\n    primes = sieve\n    primes.extend(maxn)\n    primes = primes._list\n    nb_primes = len(primes)\n    print(f\"We found {nb_primes} primes smaller or equal than {maxn}...\")\n    filtered_primes = [ p for p in primes if ends_by_0(p) ]",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def main(maxn):\n    primes = sieve\n    primes.extend(maxn)\n    primes = primes._list\n    nb_primes = len(primes)\n    print(f\"We found {nb_primes} primes smaller or equal than {maxn}...\")\n    filtered_primes = [ p for p in primes if ends_by_0(p) ]\n    nb_filtered_primes = len(filtered_primes)\n    print(f\"We found {nb_filtered_primes} primes that finishes by 9...\")\n    rate = float(nb_filtered_primes) / float(nb_primes)",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "get_data",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def get_data(location, key, delay=365):\n    thisday = date.today()\n    oneday = timedelta(days=1)\n    alldata = {}\n    all_cloud_cover = {}\n    for d in range(delay):\n        t = thisday.isoformat()\n        if 'T' not in t:\n            t += 'T12:00:00'\n        try:",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "save_data",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def save_data(all_cloud_cover, filename):\n    new_dict = dict()\n    for d, k in all_cloud_cover.items():\n        new_dict[d.isoformat()] = k\n    with open(filename, \"w\") as fp:\n        dump(new_dict, fp)\ndef load_data(filename):\n    with open(filename, \"r\") as fp:\n        new_dict = load(fp)\n        all_cloud_cover = dict()",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "load_data",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def load_data(filename):\n    with open(filename, \"r\") as fp:\n        new_dict = load(fp)\n        all_cloud_cover = dict()\n        for d, k in new_dict.items():\n            dt = parse(d.replace('T12:00:00', ''))\n            all_cloud_cover[dt] = k\n    return all_cloud_cover\ndef plot_data(all_cloud_cover, name, filename):\n    Xs = np.array(list(all_cloud_cover.keys()))",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "plot_data",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def plot_data(all_cloud_cover, name, filename):\n    Xs = np.array(list(all_cloud_cover.keys()))\n    Ys = np.array(list(all_cloud_cover.values()))\n    # Remove day where we couldn't find the data\n    are_nans = np.isnan(Ys)\n    Xs = Xs[~are_nans]\n    Ys = Ys[~are_nans]\n    fig, ax = plt.subplots()\n    ax.set_title(f\"Cloud cover index in {name}\")\n    ax.set_xlabel(\"Date\")",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "plot_data_by_weekday",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def plot_data_by_weekday(all_cloud_cover, name, filename):\n    count_of_weekday = np.zeros(7)\n    data_by_weekday = np.zeros(7)\n    mean_by_weekday = np.zeros(7)\n    for x, y in all_cloud_cover.items():\n        if not np.isnan(y):\n            weekday = x.weekday()\n            count_of_weekday[weekday] += 1\n            data_by_weekday[weekday] += y\n            # print(\"For weekday\", weekday, \"one more count with cloud_cover =\", y)",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "read_groups",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def read_groups(data):\n    buf = []\n    for line in data:\n        buf.append(line)\n        if line.find('changed') != -1 and buf:\n            yield buf\n            buf = []\ndef main(url):\n    command = 'git log --no-color --shortstat --log-size --format=oneline --no-merges'.split()\n    data = subprocess.check_output(command).split('\\n')",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def main(url):\n    command = 'git log --no-color --shortstat --log-size --format=oneline --no-merges'.split()\n    data = subprocess.check_output(command).split('\\n')\n    xs, ys, msgs, commits = [], [], [], []\n    for group in read_groups(data):\n        if len(group) != 3: continue\n        commit = group[0].split()[0]\n        log_size = int(group[0].split()[-1])\n        msg = group[1]\n        change_size = sum(map(int, group[2].split()[3::2]))",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def main(argv, to_language=TO_LANGUAGE, from_language=FROM_LANGUAGE):\n    \"\"\" Main function. Use the arguments of the command line (sys.argv). \"\"\"\n    # TODO use docopt to handle the command line arguments! Cf. http://docopt.org/\n    # TODO can docopt handle a cli documentation with ansicolortags tags in it? Cf. http://ansicolortags.rtfd.io/\n    # Manual handing of the command line arguments\n    if \"-h\" in argv or \"--help\" in argv:\n        printc(\"\"\"\n<green>deepl.py<white> --help|-h | -f file | [--from LANG] [--to LANG] text\nA simple Python script translate a text from a language to another language, using DeepL translator (https://www.deepl.com/translator).\n<u>Examples:<U>",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "match_to_emoji",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def match_to_emoji(m):\n    \"\"\"Call emoji.emojize on m).\"\"\"\n    return emojize(m.group(), use_aliases=True)\ndef emojize_all(s):\n    \"\"\"Convert all emojis :aliases: of the string s to emojis in UTF-8.\"\"\"\n    return re.sub(r\":([a-z_-]+):\", match_to_emoji, s)\ndef main(path):\n    \"\"\"Handle the file given by its path.\"\"\"\n    with open(path, 'r') as f:\n        for line in f.readlines():",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "emojize_all",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def emojize_all(s):\n    \"\"\"Convert all emojis :aliases: of the string s to emojis in UTF-8.\"\"\"\n    return re.sub(r\":([a-z_-]+):\", match_to_emoji, s)\ndef main(path):\n    \"\"\"Handle the file given by its path.\"\"\"\n    with open(path, 'r') as f:\n        for line in f.readlines():\n            print(emojize_all(line), end='')\nif __name__ == '__main__':\n    from sys import argv",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def main(path):\n    \"\"\"Handle the file given by its path.\"\"\"\n    with open(path, 'r') as f:\n        for line in f.readlines():\n            print(emojize_all(line), end='')\nif __name__ == '__main__':\n    from sys import argv\n    for arg in argv[1:]:\n        main(arg)\n# End of emojize.py",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "emojize",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def emojize(s, use_svg=USE_SVG):\n    \"\"\"Call markdown.markdown() on s.\"\"\"\n    emoji_generator = pymdownx.emoji.to_svg if use_svg else pymdownx.emoji.to_png\n    extension_configs = {\n        'pymdownx.emoji': {\n            'emoji_generator': emoji_generator\n        }\n    }\n    res = markdown(s,\n                   extensions=['pymdownx.emoji'],",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "match_to_emoji",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def match_to_emoji(m, use_svg=USE_SVG):\n    \"\"\"Call emoji.emojize on m.group().\"\"\"\n    return emojize(m.group(), use_svg=use_svg)\ndef emojize_all(s, use_svg=USE_SVG):\n    \"\"\"Convert all emojis :aliases: of the string s to emojis in UTF-8.\"\"\"\n    return re.sub(r\":([a-z_-]+):\", lambda s2: match_to_emoji(s2, use_svg=use_svg), s)\ndef main(path, use_svg=USE_SVG):\n    \"\"\"Handle the file given by its path.\"\"\"\n    with open(path, 'r') as f:\n        for line in f.readlines():",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "emojize_all",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def emojize_all(s, use_svg=USE_SVG):\n    \"\"\"Convert all emojis :aliases: of the string s to emojis in UTF-8.\"\"\"\n    return re.sub(r\":([a-z_-]+):\", lambda s2: match_to_emoji(s2, use_svg=use_svg), s)\ndef main(path, use_svg=USE_SVG):\n    \"\"\"Handle the file given by its path.\"\"\"\n    with open(path, 'r') as f:\n        for line in f.readlines():\n            print(emojize_all(line, use_svg=use_svg), end='')\nif __name__ == '__main__':\n    from sys import argv",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def main(path, use_svg=USE_SVG):\n    \"\"\"Handle the file given by its path.\"\"\"\n    with open(path, 'r') as f:\n        for line in f.readlines():\n            print(emojize_all(line, use_svg=use_svg), end='')\nif __name__ == '__main__':\n    from sys import argv\n    if '--svg' in argv:\n        USE_SVG = True\n        while '--svg' in argv:",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "coin",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def coin(p=0.5):\n    \"\"\" 1 with probability = p, 0 with probability 1 - p. \"\"\"\n    return 1 * (np.random.random() < p)\ndef vonNeumann(q=0.5):\n    \"\"\" Use von Neumann's rejection algorithm with an unknown coin (Bernoulli q). \"\"\"\n    x, y = coin(q), coin(q)\n    while x == y:  # (x, y) not in {(1, 0), (1, 0)}\n        x, y = coin(q), coin(q)\n    return x\ndef main(n=1000):",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "vonNeumann",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def vonNeumann(q=0.5):\n    \"\"\" Use von Neumann's rejection algorithm with an unknown coin (Bernoulli q). \"\"\"\n    x, y = coin(q), coin(q)\n    while x == y:  # (x, y) not in {(1, 0), (1, 0)}\n        x, y = coin(q), coin(q)\n    return x\ndef main(n=1000):\n    \"\"\" Check that the von Neumann method is indeed simulating a fair coin. \"\"\"\n    print(\"\\n\\n- Using n = {} tests of the von Neumann method, with unknown q in (0, 1).\".format(n))\n    q = 1.0 / np.pi   # Unknown float number 0.3183098861837907",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def main(n=1000):\n    \"\"\" Check that the von Neumann method is indeed simulating a fair coin. \"\"\"\n    print(\"\\n\\n- Using n = {} tests of the von Neumann method, with unknown q in (0, 1).\".format(n))\n    q = 1.0 / np.pi   # Unknown float number 0.3183098861837907\n    tests = [vonNeumann(q) for _ in range(n)]\n    assert all(i in {0, 1} for i in tests), \"Error of the vonNeumann function: a value outside of {0, 1} has been produced...\"\n    mu, sigma = np.mean(tests), np.var(tests)\n    print(\"For the values x generated by the vonNeumann(q) function:\\n Average mu = {:.4g} (should be 0.5) and variance sigma = {:.4g} (should be 0.25).\".format(mu, sigma))\n    delta_mu = abs(mu - 0.5) / 0.5\n    delta_sigma = abs(sigma - 0.25) / 0.25",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "is_stderr_used",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def is_stderr_used(outputs):\n    for output in outputs:\n        try:\n            if output['name'] == \"stderr\":\n                return True\n        except KeyError:\n            pass\n    return False\ndef transform_data_texthtml(data_texthtml):\n    data_texthtml[0] = data_texthtml[0][2:]",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "transform_data_texthtml",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def transform_data_texthtml(data_texthtml):\n    data_texthtml[0] = data_texthtml[0][2:]\n    for i in range(len(data_texthtml)):\n        # Hack to replace a few HTML escaped caracters\n        data_texthtml[i] = data_texthtml[i].replace('&gt;','>').replace('&lt;','<').replace('&quot;','\\'')\n    return data_texthtml\ndef get_data_texthtml(outputs):\n    data_texthtml = []\n    for output in outputs:\n        try:",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "get_data_texthtml",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def get_data_texthtml(outputs):\n    data_texthtml = []\n    for output in outputs:\n        try:\n            if output['output_type'] == \"execute_result\" and 'text/html' in output['data']:\n                long_data_texthtml = output['data']['text/html']\n                assert len(long_data_texthtml) >= 8\n                data_texthtml += transform_data_texthtml(long_data_texthtml[6:-1])\n        except KeyError:\n            pass",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def main(old, new, debug=False):\n    filename = old\n    assert filename[-6:] == '.ipynb', \"Error: the input file is not a .ipynb Jupyter Notebook file.\"\n    with open(filename, 'r') as file:\n        content = json.load(file)\n    # Check that it is a IOCaml notebook\n    assert content['metadata']['kernelspec']['name'] == \"iocaml-kernel\" and content['metadata']['kernelspec']['language'] == \"ocaml\" and content['metadata']['kernelspec']['display_name'] == \"OCaml\", \"Error: the input notebook does not appear to have been produced by the IOCaml OCaml kernel.\"\n    # For each cell\n    for cell in content['cells']:\n        if cell['cell_type'] == \"code\":",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def main(nbJour=3, nbRepas=None, trains=None, nbNuit=None, totalHotel=None):\n    \"\"\" Calcule et affiche les détails des frais de mission.\n    Par exemple :\n    >>> trains = {\n           \"Rennes > Lille\": (44.00, \"14/12/16\"),\n           \"Lille > Paris \": (25.50, \"16/12/16\"),\n           \"Paris > Rennes\": (35.00, \"03/01/17\"),\n       }\n    >>> main(nbJour=3, trains=trains)\n    ...",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "testSpecialFile",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def testSpecialFile(name, number=''):\n    \"\"\" Test if the hidden file '~/.smsapifreemobile_name.b64' exists and decodes (base64) correctly.\n    \"\"\"\n    assert name in [\"number\", \"user\", \"password\"], \"Error: unknown or incorrect value for 'name' for the function openSpecialFile(name) ...\"\n    # printc(\"<cyan>Testing the hidden file <white>'<u>~/.smsapifreemobile_{}.b64<U>'<cyan>...<white>\".format(name))  # DEBUG\n    try:\n        with open(expanduser('~/') + \".smsapifreemobile_\" + name + number + \".b64\") as f:\n            variable = base64.b64decode(f.readline()[:-1])\n            while variable[-1] == '\\n':\n                variable = variable[:-1]",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "openSpecialFile",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def openSpecialFile(name, number=''):\n    \"\"\" Open the hidden file '~/.smsapifreemobile_name.b64', read and decode (base64) and return its content.\n    \"\"\"\n    assert name in [\"number\", \"user\", \"password\"], \"Error: unknown or incorrect value for 'name' for the function openSpecialFile(name) ...\"\n    printc(\"<cyan>Opening the hidden file <white>'<u>~/.smsapifreemobile_{}.b64<U>'<cyan>, read and decode (base64) and return its content...<white>\".format(name))\n    try:\n        with open(expanduser('~/') + \".smsapifreemobile_\" + name + number + \".b64\") as f:\n            variable = base64.b64decode(f.readline()[:-1])\n            while variable[-1] == '\\n':\n                variable = variable[:-1]",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "send_sms",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def send_sms(text=\"Empty!\", secured=True, sleep_duration=0):\n    \"\"\" Sens a free SMS to the user identified by [user], with [password].\n    :user: Free Mobile id (of the form [0-9]{8}),\n    :password: Service password (of the form [a-zA-Z0-9]{14}),\n    :text: The content of the message (a warning is displayed if the message is bigger than 480 caracters)\n    :secured: True to use HTTPS, False to use HTTP.\n    Returns a boolean and a status string.\n    \"\"\"\n    # DONE split the text into smaller pieces if length is too big (automatically, or propose to do it ?)\n    if len(text) > MAX_SIZE:",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def main(argv):\n    \"\"\" Main function. Use the arguments of the command line (sys.argv).\n    \"\"\"\n    # TODO use docopt to handle the command line arguments! Cf. http://docopt.org/\n    # TODO can docopt handle a cli documentation with ansicolortags tags in it? Cf. http://ansicolortags.rtfd.io/\n    # Manual handing of the command line arguments\n    if \"-h\" in argv or \"--help\" in argv:\n        printc(\"\"\"\n<green>FreeSMS.py<white> --help|-h | -f file | [--sleep] body of the message\nA simple Python script to send a text message to a Free Mobile phone.",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "readfiles",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def readfiles(filenames):\n    \"\"\" Return the content of each file, concatenated as one big string.\n    - Path could be relative or absolute, but nothing fancy is done here.\n    \"\"\"\n    text = \"\"\n    # Read the whole text for each file\n    for filename in filenames:\n        try:\n            text += open(filename, 'r').read()\n            text += r\"\\n\"",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "generate",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def generate(text, max_words=600, width=1600, height=900):\n    \"\"\" Generate a word cloud image from the given text (one huge string). \"\"\"\n    # Take relative word frequencies into account, lower max_font_size\n    # https://amueller.github.io/word_cloud/generated/wordcloud.WordCloud.html#wordcloud.WordCloud\n    max_words = int(max_words) if max_words is not None else  600\n    width     = int(width)     if width     is not None else  1600\n    height    = int(height)    if height    is not None else  900\n    wc = WordCloud(\n        max_font_size=50,\n        relative_scaling=.5,",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "makeimage",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def makeimage(wordcloud,\n              outname='wordcloud.png', title='Word cloud', show=False, force=False):\n    \"\"\" Display or save the wordcloud as a image. \"\"\"\n    # Display the generated image:\n    try:\n        # 2. the matplotlib way:\n        plt.figure()\n        plt.imshow(wordcloud)\n        plt.axis(\"off\")\n        if title:",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def main(argv):\n    \"\"\" Use the arguments of the command line. \"\"\"\n    # Use the arg parser\n    args = docopt(full_docopt_text, argv=argv, version=\"generate-word-cloud.py v{}\".format(version))\n    # printc(\"<magenta>Arguments: {} <reset>\".format(args))  # DEBUG\n    # Read the files\n    printc(\"<green>Reading the files<reset>, from: <blue>{}<reset>.\".format(args['INFILE']))\n    text = readfiles(args['INFILE'])\n    # Decide where to save it\n    outname = args['--outfile'] if args['--outfile'] else 'wordcloud.png'",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "save_data",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def save_data(time_of_data, data, filename):\n    new_dict = {\n        time_of_data: data,\n    }\n    old_data = load_data(filename)\n    old_data.update(new_dict)\n    with open(filename, \"w\") as fp:\n        dump(new_dict, fp)\n    return new_dict\ndef load_data(filename):",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "load_data",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def load_data(filename):\n    old_data = dict()\n    if isfile(filename):\n        with open(filename, \"r\") as fp:\n            old_data = load(fp)\n    return old_data\ndef get_data(names, locations, key, verbose=True):\n    data = []\n    now = datetime.now()\n    for name, location in zip(names, locations):",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "get_data",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def get_data(names, locations, key, verbose=True):\n    data = []\n    now = datetime.now()\n    for name, location in zip(names, locations):\n        weather = forecast(key, *location)\n        temperature_in_F = weather['currently']['temperature']\n        temperature_in_C = round((temperature_in_F - 32) * (5/9), 1)\n        data.append({\n            \"name\": name,\n            \"location\": location,",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def main(filename, names, locations, key, verbose=True):\n    time_of_data, data = get_data(names, locations, key, verbose=verbose)\n    save_data(time_of_data, data, filename)\n    return time_of_data, data\nif __name__ == '__main__':\n    filename = \"get_current_temperature.json\"\n    names, locations = [], []\n    # https://www.google.fr/maps/place/Supélec/@48.1252316,-1.6255899,17z/\n    name = \"CentraleSupélec, Rennes, France\"\n    location = 48.1252316, -1.6255899",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "gravatar",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def gravatar(email, default=default, size=size, secure=secure):\n    \"\"\"\n    gravatar(email, default=default, size=size, secure=secure) -> string\"\n    Return the URL of the gravatar picture associated with @email.\n    @default: default picture to use if not available. Default is %s.\n    @size: format to use (pixel x pixel). Default is %i.\n    @secure: if true, the returned URL use https://secure.gravatar.com instead of http://www.gravatar.com. Default is %s.\"\n    \"\"\" % (default, size, secure)\n    if secure:\n        gravatar_url = \"https://secure.gravatar.com/avatar/\" + hashlib.md5(email.lower()).hexdigest() + \"?r=pg&\"",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "small_hash",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def small_hash(x, nb_bits=3):\n    \"\"\"A naive hash function.\"\"\"\n    # return abs(hash(x)) % 2  # test, to check that collisions are well handled\n    return abs(hash(x)) % (1 << nb_bits)\nNB_BITS = 4\nDEFAULT_SIZE = 1 << NB_BITS\nclass hashtable(object):\n    \"\"\"Manual implementation of a naive hash table.\n    - Can only store hashable values.\n    - Use single-linked lists to be collision-resistant!",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "test",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def test():\n    print(\"Creating empty hash table ...\")\n    H = hashtable()\n    print(H)\n    print(\"Inserting i**2 for i = 0..9 ...\")\n    for i in range(10):\n        H.insert(i, i**2)\n    print(H)\n    print(\"Reading i**2 for i = 0..9 ...\")\n    for i in range(10):",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "salt",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def salt():\n    \"\"\"Returns a string of 2 randome letters\"\"\"\n    letters = 'abcdefghijklmnopqrstuvwxyz' \\\n              'ABCDEFGHIJKLMNOPQRSTUVWXYZ' \\\n              '0123456789/.'\n    return random.choice(letters) + random.choice(letters)\nclass HtpasswdFile:\n    \"\"\"A class for manipulating htpasswd files.\"\"\"\n    def __init__(self, filename, create=False):\n        self.entries = []",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def main():\n    \"\"\"\n        %prog -b[c] filename username password\n        %prog -D filename username\"\"\"\n    # For now, we only care about the use cases that affect tests/functional.py\n    parser = OptionParser(usage=main.__doc__)\n    parser.add_option('-b', action='store_true', dest='batch', default=False,\n        help='Batch mode; password is passed on the command line IN THE CLEAR.'\n        )\n    parser.add_option('-c', action='store_true', dest='create', default=False,",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "notify",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def notify(msg, submsg=\"mail.py : auto mailer (with notify-send)\"):\n ''' Notification using subprocess and notify-send.\n Also print the informations directly to the screen.\n Fails simply if notify-send is not found.'''\n try:\n  subprocess.Popen(['notify-send', msg, submsg])\n except:\n  print \"notify-send : not-found !\"\n  return -1\n print \"msg=%s\\nsubmsg=%s\" % (msg, submsg)",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "send_me_an_email",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def send_me_an_email(message, subj=\"[LOG] no object\", me=\"jarvisATcransDOTorg\".replace(\"AT\",\"@\").replace(\"DOT\",\".\"), you=\"jarvisATcransDOTorg\".replace(\"AT\",\"@\").replace(\"DOT\",\".\"), my_identity=\"jarvis log\"):\n\t\"\"\" Send a message [message] by email.\n\tThe content of the email is [message], the subject is [subj].\n\tThe sender is [me], not necessary a valid sender for the SMTP.\n\tThe mail will be sent to [you].\n\tAuto configure with SMTP server on localhost in the cr@ns server (http://www.crans.org)\n\t(c) Lilian Besson, 2012-2013.\n\t\"\"\"\n\tnotify(subj, message+\"\\n### ME=\"+me+\" YOU=\"+you)\n\tmsg = MIMEText(message+(signature % me))",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "send_me_an_email",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def send_me_an_email(message, subj=\"[LOG] no object\", me=defaultaddress,\n                     you=defaultaddress, my_identity=\"jarvis\"):\n    \"\"\" Send a message [message] by email.\n    The content of the email is [message], the subject is [subj].\n    The sender is [me], not necessary a valid sender for the SMTP.\n    The mail will be sent to [you].\n    Auto configured with SMTP server (smtp.crans.org) with SSL support for the cr@ns server (http://www.crans.org)\n    (c) Lilian Besson, 2012-2014.\n    \"\"\"\n    msg = MIMEText(\"%s\" % (message + (signature % me)).replace(\"\\n\", '\\n'), _charset=\"utf-8\")",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "send_me_an_email",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def send_me_an_email(message, subj=\"[LOG] no object\", me=defaultaddress,\n                     you=defaultaddress, my_identity=\"jarvis (HTML)\"):\n    \"\"\" Send a message [message] by email.\n    The content of the email is [message] (encoded as HTML), the subject is [subj].\n    The sender is [me], not necessary a valid sender for the SMTP.\n    The mail will be sent to [you].\n    Auto configured with SMTP server (smtp.crans.org) with SSL support for the cr@ns server (http://www.crans.org)\n    (c) Lilian Besson, 2014.\n    \"\"\"\n    msg = MIMEText(\"%s\" % (message + (signature % me)).replace(\"\\n\", '\\n'), _charset=None, _subtype=\"html\")",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "send_me_an_email",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def send_me_an_email(message, subj=\"[LOG] no object\", me=\"jarvisATcransDOTorg\".replace(\"AT\", \"@\").replace(\"DOT\", \".\"), you=\"0628412257ATsfrDOTfr\".replace(\"AT\", \"@\").replace(\"DOT\", \".\"), my_identity=\"jarvis log\"):\n    \"\"\" Send a message [message] by email.\n    The content of the email is [message], the subject is [subj].\n    The sender is [me], not necessary a valid sender for the SMTP.\n    The mail will be sent to [you].\n    Auto configure with SMTP server on localhost in the cr@ns server (http://www.crans.org)\n    (c) Lilian Besson, 2012-2013.\n    \"\"\"\n    msg = MIMEText(message + (signature % me))\n    # The order is \"important\", to act like a real mail client !",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "error_dialog",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def error_dialog(parent, msg):\n    dialog = gtk.MessageDialog(parent,\n                               gtk.DIALOG_DESTROY_WITH_PARENT,\n                               gtk.MESSAGE_ERROR,\n                               gtk.BUTTONS_OK,\n                               msg)\n    dialog.run()\n    dialog.destroy()\ndef remove_all_marks(buffer):\n    begin, end = buffer.get_bounds()",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "remove_all_marks",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def remove_all_marks(buffer):\n    begin, end = buffer.get_bounds()\n    buffer.remove_source_marks(begin, end)\ndef load_file(buffer, path):\n    buffer.begin_not_undoable_action()\n    try:\n        txt = open(path).read()\n    except:\n        return False\n    buffer.set_text(txt)",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "load_file",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def load_file(buffer, path):\n    buffer.begin_not_undoable_action()\n    try:\n        txt = open(path).read()\n    except:\n        return False\n    buffer.set_text(txt)\n    buffer.set_data('filename', path)\n    buffer.end_not_undoable_action()\n    buffer.set_modified(False)",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "open_file",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def open_file(buffer, filename):\n    # get the new language for the file mimetype\n    manager = buffer.get_data('languages-manager')\n    # essai pour charger un style particulier\n    # gtk-source-style-scheme-manager-get-default\n    try:\n        stylescheme = buffer.get_style_scheme()  # un autre si possible\n    except:\n        # XXX A modifier si on veut un autre\n        manager2 = buffer.get_data('styles-scheme-manager')",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "begin_print_cb",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def begin_print_cb(operation, context, compositor):\n    while not compositor.paginate(context):\n        pass\n    n_pages = compositor.get_n_pages()\n    operation.set_n_pages(n_pages)\ndef draw_page_cb(operation, context, page_nr, compositor):\n    compositor.draw_page(context, page_nr)\n# Action callbacks\ndef numbers_toggled_cb(action, sourceview):\n    sourceview.set_show_line_numbers(action.get_active())",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "draw_page_cb",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def draw_page_cb(operation, context, page_nr, compositor):\n    compositor.draw_page(context, page_nr)\n# Action callbacks\ndef numbers_toggled_cb(action, sourceview):\n    sourceview.set_show_line_numbers(action.get_active())\ndef marks_toggled_cb(action, sourceview):\n    sourceview.set_show_line_marks(action.get_active())\ndef margin_toggled_cb(action, sourceview):\n    sourceview.set_show_right_margin(action.get_active())\ndef auto_indent_toggled_cb(action, sourceview):",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "numbers_toggled_cb",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def numbers_toggled_cb(action, sourceview):\n    sourceview.set_show_line_numbers(action.get_active())\ndef marks_toggled_cb(action, sourceview):\n    sourceview.set_show_line_marks(action.get_active())\ndef margin_toggled_cb(action, sourceview):\n    sourceview.set_show_right_margin(action.get_active())\ndef auto_indent_toggled_cb(action, sourceview):\n    sourceview.set_auto_indent(action.get_active())\ndef insert_spaces_toggled_cb(action, sourceview):\n    sourceview.set_insert_spaces_instead_of_tabs(action.get_active())",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "marks_toggled_cb",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def marks_toggled_cb(action, sourceview):\n    sourceview.set_show_line_marks(action.get_active())\ndef margin_toggled_cb(action, sourceview):\n    sourceview.set_show_right_margin(action.get_active())\ndef auto_indent_toggled_cb(action, sourceview):\n    sourceview.set_auto_indent(action.get_active())\ndef insert_spaces_toggled_cb(action, sourceview):\n    sourceview.set_insert_spaces_instead_of_tabs(action.get_active())\ndef tabs_toggled_cb(action, action2, sourceview):\n    sourceview.set_tab_width(action.get_current_value())",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "margin_toggled_cb",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def margin_toggled_cb(action, sourceview):\n    sourceview.set_show_right_margin(action.get_active())\ndef auto_indent_toggled_cb(action, sourceview):\n    sourceview.set_auto_indent(action.get_active())\ndef insert_spaces_toggled_cb(action, sourceview):\n    sourceview.set_insert_spaces_instead_of_tabs(action.get_active())\ndef tabs_toggled_cb(action, action2, sourceview):\n    sourceview.set_tab_width(action.get_current_value())\ndef new_view_cb(action, sourceview):\n    window = create_view_window(sourceview.get_buffer(), sourceview)",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "auto_indent_toggled_cb",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def auto_indent_toggled_cb(action, sourceview):\n    sourceview.set_auto_indent(action.get_active())\ndef insert_spaces_toggled_cb(action, sourceview):\n    sourceview.set_insert_spaces_instead_of_tabs(action.get_active())\ndef tabs_toggled_cb(action, action2, sourceview):\n    sourceview.set_tab_width(action.get_current_value())\ndef new_view_cb(action, sourceview):\n    window = create_view_window(sourceview.get_buffer(), sourceview)\n    window.set_default_size(683, 700)\n    window.show()",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "insert_spaces_toggled_cb",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def insert_spaces_toggled_cb(action, sourceview):\n    sourceview.set_insert_spaces_instead_of_tabs(action.get_active())\ndef tabs_toggled_cb(action, action2, sourceview):\n    sourceview.set_tab_width(action.get_current_value())\ndef new_view_cb(action, sourceview):\n    window = create_view_window(sourceview.get_buffer(), sourceview)\n    window.set_default_size(683, 700)\n    window.show()\ndef print_cb(action, sourceview):\n    window = sourceview.get_toplevel()",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "tabs_toggled_cb",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def tabs_toggled_cb(action, action2, sourceview):\n    sourceview.set_tab_width(action.get_current_value())\ndef new_view_cb(action, sourceview):\n    window = create_view_window(sourceview.get_buffer(), sourceview)\n    window.set_default_size(683, 700)\n    window.show()\ndef print_cb(action, sourceview):\n    window = sourceview.get_toplevel()\n    buffer = sourceview.get_buffer()\n    compositor = gtksourceview2.print_compositor_new_from_view(sourceview)",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "new_view_cb",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def new_view_cb(action, sourceview):\n    window = create_view_window(sourceview.get_buffer(), sourceview)\n    window.set_default_size(683, 700)\n    window.show()\ndef print_cb(action, sourceview):\n    window = sourceview.get_toplevel()\n    buffer = sourceview.get_buffer()\n    compositor = gtksourceview2.print_compositor_new_from_view(sourceview)\n    compositor.set_wrap_mode(gtk.WRAP_CHAR)\n    compositor.set_highlight_syntax(True)",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "print_cb",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def print_cb(action, sourceview):\n    window = sourceview.get_toplevel()\n    buffer = sourceview.get_buffer()\n    compositor = gtksourceview2.print_compositor_new_from_view(sourceview)\n    compositor.set_wrap_mode(gtk.WRAP_CHAR)\n    compositor.set_highlight_syntax(True)\n    compositor.set_print_line_numbers(5)\n    compositor.set_header_format(False, 'Imprimé dans %A', None, '%F')\n    filename = buffer.get_data('filename')\n    compositor.set_footer_format(True, '%T', filename, 'Page %N/%Q')",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "open_file_cb",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def open_file_cb(action, buffer):\n    chooser = gtk.FileChooserDialog('Ouvrir un fichier ...', None,\n                                    gtk.FILE_CHOOSER_ACTION_OPEN,\n                                    (gtk.STOCK_CANCEL, gtk.RESPONSE_CANCEL,\n                                     gtk.STOCK_OPEN, gtk.RESPONSE_OK))\n    response = chooser.run()\n    if response == gtk.RESPONSE_OK:\n        filename = chooser.get_filename()\n        if filename:\n            open_file(buffer, filename)",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "update_cursor_position",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def update_cursor_position(buffer, view):\n    tabwidth = view.get_tab_width()\n    pos_label = view.get_data('pos_label')\n    iter = buffer.get_iter_at_mark(buffer.get_insert())\n    nchars = iter.get_offset()\n    row = iter.get_line() + 1\n    start = iter.copy()\n    start.set_line_offset(0)\n    col = 0\n    while start.compare(iter) < 0:",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "move_cursor_cb",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def move_cursor_cb(buffer, cursoriter, mark, view):\n    update_cursor_position(buffer, view)\ndef window_deleted_cb(widget, ev, view):\n    if windows[0] == widget:\n        gtk.main_quit()\n    else:\n        # remove window from list\n        windows.remove(widget)\n        # we return False since we want the window destroyed\n        return False",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "window_deleted_cb",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def window_deleted_cb(widget, ev, view):\n    if windows[0] == widget:\n        gtk.main_quit()\n    else:\n        # remove window from list\n        windows.remove(widget)\n        # we return False since we want the window destroyed\n        return False\n    return True\ndef button_press_cb(view, ev):",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "button_press_cb",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def button_press_cb(view, ev):\n    buffer = view.get_buffer()\n    if not view.get_show_line_marks():\n        return False\n    # check that the click was on the left gutter\n    if ev.window == view.get_window(gtk.TEXT_WINDOW_LEFT):\n        if ev.button == 1:\n            mark_category = MARK_CATEGORY_1\n        else:\n            mark_category = MARK_CATEGORY_2",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "create_view_window",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def create_view_window(buffer, sourceview=None):\n    # window\n    window = gtk.Window(gtk.WINDOW_TOPLEVEL)\n    window.set_border_width(0)\n    window.set_title('MOcaml FileViewer [Naereen test]')\n    windows.append(window)  # this list contains all view windows\n    # view\n    view = gtksourceview2.View(buffer)\n    buffer.connect('mark_set', move_cursor_cb, view)\n    buffer.connect('changed', update_cursor_position, view)",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "create_main_window",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def create_main_window(buffer):\n    window = create_view_window(buffer)\n    ui_manager = window.get_data('ui_manager')\n    # buffer action group\n    action_group = gtk.ActionGroup('BufferActions')\n    action_group.add_actions(buffer_actions, buffer)\n    ui_manager.insert_action_group(action_group, 1)\n    # merge buffer ui\n    ui_manager.add_ui_from_string(buffer_ui_description)\n    # preselect menu checkitems",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def main(args):\n    # create buffer\n    lm = gtksourceview2.LanguageManager()\n    sm = gtksourceview2.StyleSchemeManager()\n    buffer = gtksourceview2.Buffer()\n    buffer.set_data('languages-manager', lm)\n    buffer.set_data('styles-scheme-manager', sm)\n    # parse arguments\n    if len(args) >= 2:\n        open_file(buffer, args[1])",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "sleeptime",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def sleeptime(lmbda=MEAN_TIME, use_poisson=True):\n    \"\"\"Random time until next message.\"\"\"\n    if use_poisson:\n        return poisson(lmbda)\n    else:\n        return lmbda\ndef sleep_bar(secs):\n    \"\"\"Sleep with a bar, or not\"\"\"\n    try:\n        # From progressbar example #3, https://github.com/niltonvolpato/python-progressbar/blob/master/examples.py#L67",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "sleep_bar",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def sleep_bar(secs):\n    \"\"\"Sleep with a bar, or not\"\"\"\n    try:\n        # From progressbar example #3, https://github.com/niltonvolpato/python-progressbar/blob/master/examples.py#L67\n        from progressbar import Bar, ETA, ProgressBar, ReverseBar\n        widgets = [Bar('>'), ' ', ETA(), ' ', ReverseBar('<')]\n        pbar = ProgressBar(widgets=widgets, maxval=100).start()\n        for i in range(100):\n            # do something\n            time.sleep(secs / 110.)",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "random_line",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def random_line(lines):\n    \"\"\"Read the file and select one line.\"\"\"\n    try:\n        return random.choice(lines).replace('`', '').replace('_', '')\n    except:  # Default quote\n        logging.info(\"Failed to read a random line from this list with {} lines...\".format(len(lines)))  # DEBUG\n        return \"I love you !\"\ndef get_reactions(list_of_ts_channel, sc):\n    \"\"\"Get the reaction of users on all the messages sent by the bot, to increase or decrease the frequency of messages.\"\"\"\n    scale_factor = 1.",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "get_reactions",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def get_reactions(list_of_ts_channel, sc):\n    \"\"\"Get the reaction of users on all the messages sent by the bot, to increase or decrease the frequency of messages.\"\"\"\n    scale_factor = 1.\n    try:\n        for (ts, c) in list_of_ts_channel:\n            # https://api.slack.com/methods/reactions.get\n            reaction = sc.api_call(\n                \"reactions.get\", channel=c, timestamp=ts\n            )\n            logging.debug(\"reaction =\", reaction)",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "send",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def send(text, sc, use_channel=USE_CHANNEL):\n    \"\"\"Send text to channel SLACK_CHANNEL with client sc.\n    - https://github.com/slackapi/python-slackclient#sending-a-message\n    \"\"\"\n    channel = SLACK_CHANNEL if use_channel else SLACK_USER\n    text = \"{}\\n> (Sent by an _open-source_ Python script :snake:, {}, written by Lilian Besson)\".format(text, URL)\n    logging.info(\"Sending the message '{}' to channel/user {} ...\".format(text, channel))\n    # https://api.slack.com/methods/chat.postMessage\n    return sc.api_call(\n        \"chat.postMessage\", channel=channel, text=text,",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "loop",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def loop(quote_file=QUOTE_FILE):\n    \"\"\"Main loop.\"\"\"\n    logging.info(\"Starting my Slack bot, reading random quotes from the file {}...\".format(quote_file))\n    # Get list of quotes and parameters\n    the_quote_file = open(quote_file, 'r')\n    lines = the_quote_file.readlines()\n    sc = SlackClient(SLACK_TOKEN)\n    lmbda = MEAN_TIME\n    list_of_ts_channel = []\n    # Start loop",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "termimshow",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def termimshow(Z, vmin=None, vmax=None, cmap=CM_Hot, show_cmap=True):\n    \"\"\" Show a 2D numpy array using terminal colors. \"\"\"\n    if len(Z.shape) != 2:\n        print(\"Cannot display non 2D array\")\n        return\n    vmin = vmin or Z.min()\n    vmax = vmax or Z.max()\n    cmap.scale(vmin, vmax)\n    # Build initialization string that setup terminal colors\n    init = ''",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "usage",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def usage():\n    print(\"\"\"\n    Usage: pastebox.py <option> <pasteid|file> ..\n    Options:\n    --authhash=<authhash>   authentication hash for additional protection ([a-z0-9])\n    --ttl=<ttl>             time to live in seconds\n    -s|--stdout             print paste to stdout\n    -d|--download           download and store to file\n    Usage examples:\n    lspci|pastebox.py        Upload input by piping",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def main(argv):\n    try:\n        opts, args = getopt.getopt(argv, \"sdh\", [\"stdout\", \"download\", \"mode=\", \"authhash=\", \"ttl=\", \"help\"])\n    except getopt.GetoptError:\n        usage()\n        sys.exit(2)\n    paste = PasteBox()\n    for opt, arg in opts:\n        if opt in (\"--mode\"):\n            if arg:",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "markov",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def markov(corpus, start, length):\n    # Counting occurrences\n    next_one = defaultdict(Counter)\n    for sentence in corpus:\n        words = sentence.split()\n        nb_words = len(words)\n        for i in range(nb_words - 1):\n            next_one[words[i]][words[i + 1]] += 1\n    # Initializing states\n    states = {}",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "smooth_nojit",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def smooth_nojit(u, a):\n    y = np.zeros_like(u)\n    y[0] = (1-a)*u[0]\n    for k in range(1, len(u)):\n        y[k] = a*y[k-1] + (1-a)*u[k]\n    return y\nsmooth_jit = numba.jit(smooth_nojit)\n# <- factor ×100 speed-up!\nif __name__ == '__main__':\n    print(\"For 1e6 points...\")",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def main(argv=[], path='/tmp', outfile='test.html', title='Test', use_jquery=False):\n    \"\"\" Convert every input file from Markdown to HTML, and concatenate all them to an output.\"\"\"\n    printc(\"<green>Starting main, with:<white>\")\n    # FIXME printc does not handle UTF-8 correctly ! AAAH!\n    print(\"path='{path}', outfile='{outfile}'.\".format(path=path, outfile=outfile))\n    print(\"And the title is:\", title)\n    fullpath = os.path.join(path, outfile)\n    printc(\"<magenta>The output file will be <white>'<u>{fullpath}<U>'.\".format(fullpath=fullpath))\n    with open(fullpath, \"w\") as html_file:\n        html_file = codecs.getwriter('utf-8')(html_file)",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "exclude_dir",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def exclude_dir(directory):\n    if \"build\" in directory:\n        return True\n    if \".git\" in directory :\n        return True\n    return False\ndef _tex_file_iterator(directory):\n    for p in os.listdir(directory):\n        path=os.path.join(directory,p)\n        if os.path.isfile(path):",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "tex_file_iterator",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def tex_file_iterator(directory):\n    \"\"\"\n    Provides 'mazhe.bib' and then the '.tex' files in the\n    directory (recursive).\n    \"\"\"\n    yield os.path.join(directory,\"mazhe.bib\")\n    for p in _tex_file_iterator(directory):\n        yield p\ndef _file_to_url_iterator(filename):\n    \"\"\"",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "is_serious_url",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def is_serious_url(url):\n    if url == r\"\\lstname\":\n        return False\n    if url in useless_url :\n        return False\n    return True\ndef file_to_url_iterator(filename):\n    for url in _file_to_url_iterator(filename):\n        if is_serious_url(url):\n            yield url",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "file_to_url_iterator",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def file_to_url_iterator(filename):\n    for url in _file_to_url_iterator(filename):\n        if is_serious_url(url):\n            yield url\ndef check_url_corectness(url,f):\n    if url==\"\":\n        print(\"There is an empty URL in \",f)\n    if url[0] not in string.ascii_letters :\n        print(\"In \",f,\" : the url does not starts with an ascii character :\")\n        print(url)",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "check_url_corectness",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def check_url_corectness(url,f):\n    if url==\"\":\n        print(\"There is an empty URL in \",f)\n    if url[0] not in string.ascii_letters :\n        print(\"In \",f,\" : the url does not starts with an ascii character :\")\n        print(url)\ntry:\n    from httplib import HTTPConnection\nexcept ImportError:\n    from http.client import HTTPConnection",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "checkUrl",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def checkUrl(url):\n    try:\n        p = urlparse(url)\n        conn = HTTPConnection(p.netloc)\n        conn.request('HEAD', p.path)\n        resp = conn.getresponse()\n        return resp.status < 400\n    except Exception as e:\n        print(\"Exception:\", e)\n        return False",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "is_not_dead",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def is_not_dead(url):\n    try:\n        ret = requests.head(url)\n        return ret.status_code < 400\n    except Exception as e:\n        print(\"Exception:\", e)\n        return False\nfor f in tex_file_iterator(starting_path):\n    print(\"File\", f)\n    for url in file_to_url_iterator(f):",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "ins_all_positions",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def ins_all_positions(x, l):\n    \"\"\"Return a list of lists obtained from l by inserting x at every possible index.\"\"\"\n    res = []\n    for i in range(0, len(l) + 1):\n        res.append(l[:i] + [x] + l[i:])\n    return res\n# Now the main permutations generator.\ndef first_permutations(iterable):\n    \"\"\"Second algorithm, insert-into-all-positions solution.\"\"\"\n    if len(iterable) == 0:",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "first_permutations",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def first_permutations(iterable):\n    \"\"\"Second algorithm, insert-into-all-positions solution.\"\"\"\n    if len(iterable) == 0:\n        return []\n    # we must specify this edge case\n    elif len(iterable) == 1:\n        return [[iterable[0]]]\n    else:\n        x, xs = iterable[0], iterable[1:]\n        return reduce(lambda acc, p: acc + ins_all_positions(x, p), first_permutations(xs), [])",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "rm",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def rm(x, l):\n    \"\"\"List l without element x.\"\"\"\n    return [y for y in l if x != y]\ndef head_of_all(x, l):\n    \"\"\"List of lists from l where x is the head of all the lists.\"\"\"\n    return [[x] + p for p in l]\ndef second_permutations(iterable):\n    \"\"\"Second algorithm, fixed-head solution.\"\"\"\n    if len(iterable) == 0:\n        return []",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "head_of_all",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def head_of_all(x, l):\n    \"\"\"List of lists from l where x is the head of all the lists.\"\"\"\n    return [[x] + p for p in l]\ndef second_permutations(iterable):\n    \"\"\"Second algorithm, fixed-head solution.\"\"\"\n    if len(iterable) == 0:\n        return []\n    # we must specify this edge case\n    elif len(iterable) == 1:\n        return [[iterable[0]]]",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "second_permutations",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def second_permutations(iterable):\n    \"\"\"Second algorithm, fixed-head solution.\"\"\"\n    if len(iterable) == 0:\n        return []\n    # we must specify this edge case\n    elif len(iterable) == 1:\n        return [[iterable[0]]]\n    else:\n        return reduce(lambda acc, x: acc + head_of_all(x, second_permutations(rm(x, iterable))), iterable, [])\n# --- Third algorithm : Johnson Trotter algorithm",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "attach_direction",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def attach_direction(t, d=left):\n    \"\"\"Attach the direction d to all elements of array t.\"\"\"\n    return [(x, d) for x in t]\ndef remove_direction(t):\n    \"\"\"Remove the attached direction d to all elements of array t.\"\"\"\n    return [y for y, _ in t]\ndef swap(t, i, j):\n    \"\"\"Swap t[i] and t[j] in array t.\"\"\"\n    t[i], t[j] = t[j], t[i]\ndef is_movable(a, i):",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "remove_direction",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def remove_direction(t):\n    \"\"\"Remove the attached direction d to all elements of array t.\"\"\"\n    return [y for y, _ in t]\ndef swap(t, i, j):\n    \"\"\"Swap t[i] and t[j] in array t.\"\"\"\n    t[i], t[j] = t[j], t[i]\ndef is_movable(a, i):\n    \"\"\"Can a[i] be moved?\"\"\"\n    x, d = a[i]\n    if d == left:",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "swap",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def swap(t, i, j):\n    \"\"\"Swap t[i] and t[j] in array t.\"\"\"\n    t[i], t[j] = t[j], t[i]\ndef is_movable(a, i):\n    \"\"\"Can a[i] be moved?\"\"\"\n    x, d = a[i]\n    if d == left:\n        return i > 0 and x > a[i - 1][0]\n    elif d == right:\n        return i < len(a) - 1 and x > a[i + 1][0]",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "is_movable",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def is_movable(a, i):\n    \"\"\"Can a[i] be moved?\"\"\"\n    x, d = a[i]\n    if d == left:\n        return i > 0 and x > a[i - 1][0]\n    elif d == right:\n        return i < len(a) - 1 and x > a[i + 1][0]\n    else:\n        raise ValueError(\"unknown direction d = {}\".format(d))\ndef move(a, i):",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "move",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def move(a, i):\n    \"\"\"Move it if possible.\"\"\"\n    x, d = a[i]\n    if is_movable(a, i):\n        if d == left:\n            swap(a, i, i - 1)\n        elif d == right:\n            swap(a, i, i + 1)\n        else:\n            raise ValueError(\"unknown direction d = {}\".format(d))",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "scan_largest_movable",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def scan_largest_movable(a):\n    \"\"\"Find the largest movable element.\"\"\"\n    def aux(acc, i):\n        if i >= len(a):\n            return acc\n        else:\n            if not is_movable(a, i):\n                return aux(acc, i + 1)\n            else:\n                x, _ = a[i]",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "flip",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def flip(d):\n    \"\"\"Flip direction d : left -> right, right -> left\"\"\"\n    return not d\ndef scan_flip_larger(x, a):\n    \"\"\"Scan to flip larger.\"\"\"\n    for i, (y, d) in enumerate(a):\n        if y > x:\n            a[i] = y, flip(d)\ndef third_permutations(iterable):\n    \"\"\"Third algorithm, Johnson Trotter algorithm.\"\"\"",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "scan_flip_larger",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def scan_flip_larger(x, a):\n    \"\"\"Scan to flip larger.\"\"\"\n    for i, (y, d) in enumerate(a):\n        if y > x:\n            a[i] = y, flip(d)\ndef third_permutations(iterable):\n    \"\"\"Third algorithm, Johnson Trotter algorithm.\"\"\"\n    i = sorted(list(iterable))  # Required by the algorithm\n    a = attach_direction(i)\n    r = list(iterable)[:]",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "third_permutations",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def third_permutations(iterable):\n    \"\"\"Third algorithm, Johnson Trotter algorithm.\"\"\"\n    i = sorted(list(iterable))  # Required by the algorithm\n    a = attach_direction(i)\n    r = list(iterable)[:]\n    while True:\n        p = r[:]\n        yield p\n        i = scan_largest_movable(a)\n        if i is None:  # No more permutation!",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "test",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def test(list_of_f, iterable, stopearly=False):\n    \"\"\" Test that all functions in list_of_f give the same list of permutation on this iterable.\"\"\"\n    print(\"\\n\\nTesting for the list of functions {} ...\".format([f.__name__ for f in list_of_f]))  # DEBUG\n    result = True\n    print(\"Testing for the iterable {} ...\".format(iterable))  # DEBUG\n    i = iterable\n    allperms = []\n    for f in list_of_f:\n        allperms.append(sorted([list(p) for p in f(iterable)]))\n    for i, pi in enumerate(allperms):",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def main():\n    # list_of_f = [itertools_permutations, first_permutations]\n    # list_of_f = [itertools_permutations, first_permutations, second_permutations]\n    list_of_f = [itertools_permutations, first_permutations, second_permutations, third_permutations]\n    iterable = [1, 2, 3]\n    test(list_of_f, iterable)\n    iterable = [1, 2, 3, 4, 5]\n    test(list_of_f, iterable)\n    iterable = [1, 2, 3, 4, 5, 6]\n    test(list_of_f, iterable)",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def main(url, MY_OUTWARD_TIME_MINI, MY_OUTWARD_TIME_MAXI=\"23:59\"):\n    \"\"\" Go to the page 'url', find the next link to got, then extract the JSON query result, find the wanted train, and display the results.\n    \"\"\"\n    MY_OUTWARD_TIME_MINI = MY_OUTWARD_TIME_MINI.replace('h', ':')\n    MY_OUTWARD_TIME_MAXI = MY_OUTWARD_TIME_MAXI.replace('h', ':')\n    # Create the web browser object\n    b = RB(history=True, allow_redirects=True)\n    # Open the page\n    b.open(url)\n    # Find the next page to go",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "lang_to_text",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def lang_to_text(lang, exception=False):\n    \"\"\" lang_to_text(lang, exception=False) -> str\nConvert a Wikipédia language code (two letters) to a English version of the language.\nExample:\n>>> lang_to_text(\"en\")\n'english'\n>>> lang_to_text(\"fr\")\n'french'\n    \"\"\"\n    if exception:",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "download_json",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def download_json(page=\"JSON\", language=language_default,\n                  template_output=template_output_default,\n                  template_url=template_url_default):\n    \"\"\" download_json(page=\"JSON\", template_output=template_output_default,                  language=language_default, template_url=templateurl_default) -> str\nDownload a JSON file.\n@page: tell which Wikipédia page to lookup to.\n@template_output: template string for the output JSON (.json) file.\n@language: language to use for downloading the JSON.\n@template_url: online page to use a format to download the JSON.\nExample:",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "outfile_to_json",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def outfile_to_json(outfile_name):\n    \"\"\" outfile_to_json(outfile_name) -> dir\n    Try to dump and return the content of the file @outfile.\n    \"\"\"\n    outfile = open(outfile_name)\n    # To convert the content of this file in a Python dictionnary.\n    import json\n    try:\n        json_obj = json.loads(outfile.readline())\n    except ValueError:",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "plot_stats_from_json",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def plot_stats_from_json(json_obj, graphic_name=None, graphic_name_template=\"{title}.{lang}.{ext}\", ext=\"all\", title=None):\n    \"\"\" plot_stats_from_json(json_obj, graphic_name=None, graphic_name_template=\"{title}.{lang}.{ext}\", ext=\"png\") -> None\n    Plot a couple of PNG/SVG/PDF statistics.\n    .. warning:: Beta !\n    \"\"\"\n    assert(ext in [\"png\", \"svg\", \"pdf\", \"all\"])\n    title = title if title else json_obj[\"title\"]\n    lang = json_obj[\"project\"]\n    rank = json_obj[\"rank\"]\n    if rank == \"-1\":",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def main(argv):\n    \"\"\" main(argv) -> None\n    Main function. Use the arguments of the command line.\"\"\"\n    # print(\"argv: \", argv)\n    if \"-h\" in argv or \"--help\" in argv:\n        print(\"wikistats.py --help|-h | page [language_code]\")\n        return 1\n    language = argv[1] if len(argv) > 1 else language_default\n    page = argv[0] if len(argv) > 0 else \"Professeur Xavier\"\n    outfile = download_json(page=page, language=language)",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "def main(args):\n    cmd = args['--server_command']\n    sizex, sizey = [int(i) for i in args['--size'].split(',')]\n    delay = float(args['--delay'])\n    if '--size' not in cmd:\n        cmd += f\" --size={sizex},{sizey}\"\n    smart = args['--smart']\n    if not cmd: return 1\n    pipe = Popen(cmd.split(' '), stdout=PIPE, stdin=PIPE, bufsize=1, close_fds=ON_POSIX, universal_newlines=True)\n    child_stdin, child_stdout = pipe.stdin, pipe.stdout",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "__author__",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "__author__ = \"Lilian Besson\"\n__name_of_app__ = \"Battle Server\"\n__version__ = \"0.1\"\nimport sys\nfrom string import ascii_uppercase\nfrom collections import OrderedDict\nfrom pprint import pprint\nfrom docopt import docopt\nimport numpy as np\n# --- Ships",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "__name_of_app__",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "__name_of_app__ = \"Battle Server\"\n__version__ = \"0.1\"\nimport sys\nfrom string import ascii_uppercase\nfrom collections import OrderedDict\nfrom pprint import pprint\nfrom docopt import docopt\nimport numpy as np\n# --- Ships\nDEFAULT_X = DEFAULT_Y = 5",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "__version__",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "__version__ = \"0.1\"\nimport sys\nfrom string import ascii_uppercase\nfrom collections import OrderedDict\nfrom pprint import pprint\nfrom docopt import docopt\nimport numpy as np\n# --- Ships\nDEFAULT_X = DEFAULT_Y = 5\nships = OrderedDict({",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "DEFAULT_X",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "DEFAULT_X = DEFAULT_Y = 5\nships = OrderedDict({\n    \"Carrier\": 5,\n    \"Battleship\": 4,\n    \"cRuiser\": 3,\n    \"Submarine\": 3,\n    \"Destroyer\": 2,\n})\nmax_length = max(l for l in ships.values())\nsymbol_of_ship = OrderedDict({",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "ships",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "ships = OrderedDict({\n    \"Carrier\": 5,\n    \"Battleship\": 4,\n    \"cRuiser\": 3,\n    \"Submarine\": 3,\n    \"Destroyer\": 2,\n})\nmax_length = max(l for l in ships.values())\nsymbol_of_ship = OrderedDict({\n    name: str.lower(list(set(name).intersection(ascii_uppercase))[0])",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "max_length",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "max_length = max(l for l in ships.values())\nsymbol_of_ship = OrderedDict({\n    name: str.lower(list(set(name).intersection(ascii_uppercase))[0])\n    for name in ships.keys()\n})\nship_of_symbol = OrderedDict({v: k for k, v in symbol_of_ship.items()})\n# --- Documentation\ndocumentation = f\"\"\"{__name_of_app__}.\nUsage:\n    battleserver.py {' '.join([f'[--{name.lower()}=<x,y,dir>]' for name in ships.keys()])} [--random] [--size=<xy>] (--show | --play)",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "symbol_of_ship",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "symbol_of_ship = OrderedDict({\n    name: str.lower(list(set(name).intersection(ascii_uppercase))[0])\n    for name in ships.keys()\n})\nship_of_symbol = OrderedDict({v: k for k, v in symbol_of_ship.items()})\n# --- Documentation\ndocumentation = f\"\"\"{__name_of_app__}.\nUsage:\n    battleserver.py {' '.join([f'[--{name.lower()}=<x,y,dir>]' for name in ships.keys()])} [--random] [--size=<xy>] (--show | --play)\n    battleserver.py (-h | --help)",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "ship_of_symbol",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "ship_of_symbol = OrderedDict({v: k for k, v in symbol_of_ship.items()})\n# --- Documentation\ndocumentation = f\"\"\"{__name_of_app__}.\nUsage:\n    battleserver.py {' '.join([f'[--{name.lower()}=<x,y,dir>]' for name in ships.keys()])} [--random] [--size=<xy>] (--show | --play)\n    battleserver.py (-h | --help)\n    battleserver.py --version\nOptions:\n    -h --help       Show this screen.\n    --version       Show version.",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "documentation",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "documentation = f\"\"\"{__name_of_app__}.\nUsage:\n    battleserver.py {' '.join([f'[--{name.lower()}=<x,y,dir>]' for name in ships.keys()])} [--random] [--size=<xy>] (--show | --play)\n    battleserver.py (-h | --help)\n    battleserver.py --version\nOptions:\n    -h --help       Show this screen.\n    --version       Show version.\n    --show          Print the board.\n    --play          Let you play a \"one player\" game interactively.",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "symbol_of_uint8",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "symbol_of_uint8 = OrderedDict({0: '-'})\nsymbol_of_uint8.update({\n    i+1: symbol_of_ship[name]\n    for i, name in enumerate(ships.keys())\n})\nuint8_of_symbol = OrderedDict({v: k for k, v in symbol_of_uint8.items()})\nclass Board(object):\n    def __init__(self, x=DEFAULT_X, y=DEFAULT_Y):\n        self.x = y\n        self.y = x",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "uint8_of_symbol",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "uint8_of_symbol = OrderedDict({v: k for k, v in symbol_of_uint8.items()})\nclass Board(object):\n    def __init__(self, x=DEFAULT_X, y=DEFAULT_Y):\n        self.x = y\n        self.y = x\n        self.board = np.zeros((x, y), dtype=np.uint8)\n    def __getitem__(self, *args, **kwargs): return self.board.__getitem__(*args, **kwargs)\n    def __setitem__(self, *args, **kwargs): return self.board.__setitem__(*args, **kwargs)\n    def is_empty(self):\n        return np.all(self.board == 0)",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "months",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "months = {\n                'jan'  :  'January',\n                'feb'  :  'February',\n                'mar'  :  'March',\n                'apr'  :  'April',\n                'may'  :  'May',\n                'jun'  :  'June',\n                'jul'  :  'July',\n                'aug'  :  'August',\n                'sep'  :  'September',",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "\tword_start",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "\tword_start = True\n\ts = ''\n\tfor c in text.lower():\n\t\tif word_start:\n\t\t\tc = c.upper()\n\t\tword_start = not c.isalpha()\n\t\ts = s + c\n\treturn s\ndef FindMatchingParenthesis(text):\n\tnesting = 1",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "\ts",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "\ts = ''\n\tfor c in text.lower():\n\t\tif word_start:\n\t\t\tc = c.upper()\n\t\tword_start = not c.isalpha()\n\t\ts = s + c\n\treturn s\ndef FindMatchingParenthesis(text):\n\tnesting = 1\n\tend = 0",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "\t\t\tc",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "\t\t\tc = c.upper()\n\t\tword_start = not c.isalpha()\n\t\ts = s + c\n\treturn s\ndef FindMatchingParenthesis(text):\n\tnesting = 1\n\tend = 0\n\tfor i in range(1, len(text)):\n\t\tif text[i] == '{':\n\t\t\tnesting = nesting + 1",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "\t\tword_start",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "\t\tword_start = not c.isalpha()\n\t\ts = s + c\n\treturn s\ndef FindMatchingParenthesis(text):\n\tnesting = 1\n\tend = 0\n\tfor i in range(1, len(text)):\n\t\tif text[i] == '{':\n\t\t\tnesting = nesting + 1\n\t\telif text[i] == '}':",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "\t\ts",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "\t\ts = s + c\n\treturn s\ndef FindMatchingParenthesis(text):\n\tnesting = 1\n\tend = 0\n\tfor i in range(1, len(text)):\n\t\tif text[i] == '{':\n\t\t\tnesting = nesting + 1\n\t\telif text[i] == '}':\n\t\t\tnesting = nesting - 1",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "\tnesting",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "\tnesting = 1\n\tend = 0\n\tfor i in range(1, len(text)):\n\t\tif text[i] == '{':\n\t\t\tnesting = nesting + 1\n\t\telif text[i] == '}':\n\t\t\tnesting = nesting - 1\n\t\tend = i\n\t\tif nesting == 0:\n\t\t\tbreak",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "\tend",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "\tend = 0\n\tfor i in range(1, len(text)):\n\t\tif text[i] == '{':\n\t\t\tnesting = nesting + 1\n\t\telif text[i] == '}':\n\t\t\tnesting = nesting - 1\n\t\tend = i\n\t\tif nesting == 0:\n\t\t\tbreak\n\tend = end + 1",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "\t\t\tnesting",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "\t\t\tnesting = nesting + 1\n\t\telif text[i] == '}':\n\t\t\tnesting = nesting - 1\n\t\tend = i\n\t\tif nesting == 0:\n\t\t\tbreak\n\tend = end + 1\n\treturn (text[:end], text[end:])\ndef RemoveBraces(text):\n\tif text[0] == '{':",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "\t\t\tnesting",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "\t\t\tnesting = nesting - 1\n\t\tend = i\n\t\tif nesting == 0:\n\t\t\tbreak\n\tend = end + 1\n\treturn (text[:end], text[end:])\ndef RemoveBraces(text):\n\tif text[0] == '{':\n\t\t text = text[1:]\n\tif text[-1] == '}':",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "\t\tend",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "\t\tend = i\n\t\tif nesting == 0:\n\t\t\tbreak\n\tend = end + 1\n\treturn (text[:end], text[end:])\ndef RemoveBraces(text):\n\tif text[0] == '{':\n\t\t text = text[1:]\n\tif text[-1] == '}':\n\t\t text = text[:-1]",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "\tend",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "\tend = end + 1\n\treturn (text[:end], text[end:])\ndef RemoveBraces(text):\n\tif text[0] == '{':\n\t\t text = text[1:]\n\tif text[-1] == '}':\n\t\t text = text[:-1]\n\treturn text\ndef NormalizeAuthor(text):\n\tparts = text.split(',', 1)",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "\tparts",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "\tparts = text.split(',', 1)\n\tif len(parts) >= 2:\n\t\treturn parts[1].strip() + ' ' + parts[0].strip()\n\treturn parts[0].strip()\ndef NormalizeAuthors(text):\n\tauthors = text.split(' and ')\n\treturn ' and '.join([NormalizeAuthor(author) for author in authors])\ndef NormalizePages(text):\n\tparts = text.split('--', 1)\n\tif not '--' in text:",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "\tauthors",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "\tauthors = text.split(' and ')\n\treturn ' and '.join([NormalizeAuthor(author) for author in authors])\ndef NormalizePages(text):\n\tparts = text.split('--', 1)\n\tif not '--' in text:\n\t\tparts = text.split('-', 1)\n\tnormalized = parts[0].strip()\n\tif len(parts) >= 2:\n\t\tnormalized = parts[0].strip() + '--' + parts[1].strip()\n\treturn normalized",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "\tparts",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "\tparts = text.split('--', 1)\n\tif not '--' in text:\n\t\tparts = text.split('-', 1)\n\tnormalized = parts[0].strip()\n\tif len(parts) >= 2:\n\t\tnormalized = parts[0].strip() + '--' + parts[1].strip()\n\treturn normalized\ndef SafeParseInt(text):\n\ttry:\n        \treturn int(text)",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "\t\tparts",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "\t\tparts = text.split('-', 1)\n\tnormalized = parts[0].strip()\n\tif len(parts) >= 2:\n\t\tnormalized = parts[0].strip() + '--' + parts[1].strip()\n\treturn normalized\ndef SafeParseInt(text):\n\ttry:\n        \treturn int(text)\n\texcept ValueError:\n\t\treturn None",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "\tnormalized",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "\tnormalized = parts[0].strip()\n\tif len(parts) >= 2:\n\t\tnormalized = parts[0].strip() + '--' + parts[1].strip()\n\treturn normalized\ndef SafeParseInt(text):\n\ttry:\n        \treturn int(text)\n\texcept ValueError:\n\t\treturn None\ndef NormalizeYear(text):",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "\t\tnormalized",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "\t\tnormalized = parts[0].strip() + '--' + parts[1].strip()\n\treturn normalized\ndef SafeParseInt(text):\n\ttry:\n        \treturn int(text)\n\texcept ValueError:\n\t\treturn None\ndef NormalizeYear(text):\n\tyear = SafeParseInt(text)\n\tif not year:",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "\tyear",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "\tyear = SafeParseInt(text)\n\tif not year:\n\t\treturn text.strip()\n\tif (year >= 10) and (year <= 99):\n\t\treturn str(1900 + year)\n\treturn str(year)\ndef NormalizeMonth(text):\n\tprefix = text[:3].lower()\n\tif prefix in months:\n\t\treturn months[prefix]",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "\tprefix",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "\tprefix = text[:3].lower()\n\tif prefix in months:\n\t\treturn months[prefix]\n\treturn text\n# An entry object\nclass Entry(object):\n\tdef __init__(self):\n\t\tself.entry_type = 'UNKNOWN'\n\t\tself.entry_name = ''\n\t\tself.rows = { }",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "\t\tself.entry_type",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "\t\tself.entry_type = 'UNKNOWN'\n\t\tself.entry_name = ''\n\t\tself.rows = { }\n\tdef ParseFromString(self, text):\n\t\tm = re.match('\\s*@\\s*(\\w+)\\s*({)\\s*', text)\n\t\tif not m:\n\t\t\treturn None\n\t\tself.entry_type = m.group(1)\n\t\tself.entry_type = self.NormalizedEntryType()\n\t\ttext = text[m.end(2):]",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "\t\tself.entry_name",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "\t\tself.entry_name = ''\n\t\tself.rows = { }\n\tdef ParseFromString(self, text):\n\t\tm = re.match('\\s*@\\s*(\\w+)\\s*({)\\s*', text)\n\t\tif not m:\n\t\t\treturn None\n\t\tself.entry_type = m.group(1)\n\t\tself.entry_type = self.NormalizedEntryType()\n\t\ttext = text[m.end(2):]\n\t\ttext, rest = FindMatchingParenthesis(text)",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "\t\tself.rows",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "\t\tself.rows = { }\n\tdef ParseFromString(self, text):\n\t\tm = re.match('\\s*@\\s*(\\w+)\\s*({)\\s*', text)\n\t\tif not m:\n\t\t\treturn None\n\t\tself.entry_type = m.group(1)\n\t\tself.entry_type = self.NormalizedEntryType()\n\t\ttext = text[m.end(2):]\n\t\ttext, rest = FindMatchingParenthesis(text)\n\t\tm = re.match('\\s*([^\\s]+)\\s*,\\s*', text)",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "\t\tm",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "\t\tm = re.match('\\s*@\\s*(\\w+)\\s*({)\\s*', text)\n\t\tif not m:\n\t\t\treturn None\n\t\tself.entry_type = m.group(1)\n\t\tself.entry_type = self.NormalizedEntryType()\n\t\ttext = text[m.end(2):]\n\t\ttext, rest = FindMatchingParenthesis(text)\n\t\tm = re.match('\\s*([^\\s]+)\\s*,\\s*', text)\n\t\tif m:\n\t\t\tself.entry_name = m.group(1)",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "\t\tself.entry_type",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "\t\tself.entry_type = m.group(1)\n\t\tself.entry_type = self.NormalizedEntryType()\n\t\ttext = text[m.end(2):]\n\t\ttext, rest = FindMatchingParenthesis(text)\n\t\tm = re.match('\\s*([^\\s]+)\\s*,\\s*', text)\n\t\tif m:\n\t\t\tself.entry_name = m.group(1)\n\t\t\ttext = text[m.end():]\n\t\twhile text:\n\t\t\ttext = self.ParseRow(text)",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "\t\tself.entry_type",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "\t\tself.entry_type = self.NormalizedEntryType()\n\t\ttext = text[m.end(2):]\n\t\ttext, rest = FindMatchingParenthesis(text)\n\t\tm = re.match('\\s*([^\\s]+)\\s*,\\s*', text)\n\t\tif m:\n\t\t\tself.entry_name = m.group(1)\n\t\t\ttext = text[m.end():]\n\t\twhile text:\n\t\t\ttext = self.ParseRow(text)\n\t\treturn rest",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "\t\ttext",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "\t\ttext = text[m.end(2):]\n\t\ttext, rest = FindMatchingParenthesis(text)\n\t\tm = re.match('\\s*([^\\s]+)\\s*,\\s*', text)\n\t\tif m:\n\t\t\tself.entry_name = m.group(1)\n\t\t\ttext = text[m.end():]\n\t\twhile text:\n\t\t\ttext = self.ParseRow(text)\n\t\treturn rest\n\tdef ParseRow(self, text):",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "\t\tm",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "\t\tm = re.match('\\s*([^\\s]+)\\s*,\\s*', text)\n\t\tif m:\n\t\t\tself.entry_name = m.group(1)\n\t\t\ttext = text[m.end():]\n\t\twhile text:\n\t\t\ttext = self.ParseRow(text)\n\t\treturn rest\n\tdef ParseRow(self, text):\n\t\tm = re.match('\\s*,?\\s*([\\w-]+)\\s*=\\s*', text)\n\t\tif not m:",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "\t\t\tself.entry_name",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "\t\t\tself.entry_name = m.group(1)\n\t\t\ttext = text[m.end():]\n\t\twhile text:\n\t\t\ttext = self.ParseRow(text)\n\t\treturn rest\n\tdef ParseRow(self, text):\n\t\tm = re.match('\\s*,?\\s*([\\w-]+)\\s*=\\s*', text)\n\t\tif not m:\n\t\t\treturn None\n\t\tkey = m.group(1)",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "\t\t\ttext",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "\t\t\ttext = text[m.end():]\n\t\twhile text:\n\t\t\ttext = self.ParseRow(text)\n\t\treturn rest\n\tdef ParseRow(self, text):\n\t\tm = re.match('\\s*,?\\s*([\\w-]+)\\s*=\\s*', text)\n\t\tif not m:\n\t\t\treturn None\n\t\tkey = m.group(1)\n\t\tif not self.entry_type == 'String':",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "\t\t\ttext",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "\t\t\ttext = self.ParseRow(text)\n\t\treturn rest\n\tdef ParseRow(self, text):\n\t\tm = re.match('\\s*,?\\s*([\\w-]+)\\s*=\\s*', text)\n\t\tif not m:\n\t\t\treturn None\n\t\tkey = m.group(1)\n\t\tif not self.entry_type == 'String':\n\t\t\tkey = Capitalize(key)\n\t\ttext = text[m.end():]",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "\t\tm",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "\t\tm = re.match('\\s*,?\\s*([\\w-]+)\\s*=\\s*', text)\n\t\tif not m:\n\t\t\treturn None\n\t\tkey = m.group(1)\n\t\tif not self.entry_type == 'String':\n\t\t\tkey = Capitalize(key)\n\t\ttext = text[m.end():]\n\t\tvalue = ''\n\t\tif text[0] == '{':\n\t\t\tvalue, rest = FindMatchingParenthesis(text)",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "\t\tkey",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "\t\tkey = m.group(1)\n\t\tif not self.entry_type == 'String':\n\t\t\tkey = Capitalize(key)\n\t\ttext = text[m.end():]\n\t\tvalue = ''\n\t\tif text[0] == '{':\n\t\t\tvalue, rest = FindMatchingParenthesis(text)\n\t\t\tvalue = RemoveBraces(value)\n\t\telif text[0] == '\\\"':\n\t\t\tm = re.match('^\"([^\\\"]+)\"\\s*,?\\s*', text)",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "\t\t\tkey",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "\t\t\tkey = Capitalize(key)\n\t\ttext = text[m.end():]\n\t\tvalue = ''\n\t\tif text[0] == '{':\n\t\t\tvalue, rest = FindMatchingParenthesis(text)\n\t\t\tvalue = RemoveBraces(value)\n\t\telif text[0] == '\\\"':\n\t\t\tm = re.match('^\"([^\\\"]+)\"\\s*,?\\s*', text)\n\t\t\tvalue = m.group(1)\n\t\t\trest = text[m.end():]",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "\t\ttext",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "\t\ttext = text[m.end():]\n\t\tvalue = ''\n\t\tif text[0] == '{':\n\t\t\tvalue, rest = FindMatchingParenthesis(text)\n\t\t\tvalue = RemoveBraces(value)\n\t\telif text[0] == '\\\"':\n\t\t\tm = re.match('^\"([^\\\"]+)\"\\s*,?\\s*', text)\n\t\t\tvalue = m.group(1)\n\t\t\trest = text[m.end():]\n\t\telse:",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "\t\tvalue",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "\t\tvalue = ''\n\t\tif text[0] == '{':\n\t\t\tvalue, rest = FindMatchingParenthesis(text)\n\t\t\tvalue = RemoveBraces(value)\n\t\telif text[0] == '\\\"':\n\t\t\tm = re.match('^\"([^\\\"]+)\"\\s*,?\\s*', text)\n\t\t\tvalue = m.group(1)\n\t\t\trest = text[m.end():]\n\t\telse:\n\t\t\tm = re.match('\\s*(\\w+)\\s*,?\\s*', text)",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "\t\t\tvalue",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "\t\t\tvalue = RemoveBraces(value)\n\t\telif text[0] == '\\\"':\n\t\t\tm = re.match('^\"([^\\\"]+)\"\\s*,?\\s*', text)\n\t\t\tvalue = m.group(1)\n\t\t\trest = text[m.end():]\n\t\telse:\n\t\t\tm = re.match('\\s*(\\w+)\\s*,?\\s*', text)\n\t\t\tvalue = m.group(1)\n\t\t\trest = text[m.end():]\n\t\tself.rows[key] = value.strip()",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "\t\t\tm",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "\t\t\tm = re.match('^\"([^\\\"]+)\"\\s*,?\\s*', text)\n\t\t\tvalue = m.group(1)\n\t\t\trest = text[m.end():]\n\t\telse:\n\t\t\tm = re.match('\\s*(\\w+)\\s*,?\\s*', text)\n\t\t\tvalue = m.group(1)\n\t\t\trest = text[m.end():]\n\t\tself.rows[key] = value.strip()\n\t\treturn rest\n\tdef NormalizedEntryType(self):",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "\t\t\tvalue",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "\t\t\tvalue = m.group(1)\n\t\t\trest = text[m.end():]\n\t\telse:\n\t\t\tm = re.match('\\s*(\\w+)\\s*,?\\s*', text)\n\t\t\tvalue = m.group(1)\n\t\t\trest = text[m.end():]\n\t\tself.rows[key] = value.strip()\n\t\treturn rest\n\tdef NormalizedEntryType(self):\n\t\tentry_type = self.entry_type.lower()",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "\t\t\trest",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "\t\t\trest = text[m.end():]\n\t\telse:\n\t\t\tm = re.match('\\s*(\\w+)\\s*,?\\s*', text)\n\t\t\tvalue = m.group(1)\n\t\t\trest = text[m.end():]\n\t\tself.rows[key] = value.strip()\n\t\treturn rest\n\tdef NormalizedEntryType(self):\n\t\tentry_type = self.entry_type.lower()\n\t\tif entry_type in entry_types:",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "\t\t\tm",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "\t\t\tm = re.match('\\s*(\\w+)\\s*,?\\s*', text)\n\t\t\tvalue = m.group(1)\n\t\t\trest = text[m.end():]\n\t\tself.rows[key] = value.strip()\n\t\treturn rest\n\tdef NormalizedEntryType(self):\n\t\tentry_type = self.entry_type.lower()\n\t\tif entry_type in entry_types:\n\t\t\tentry_type = entry_types[entry_type]\n\t\treturn entry_type",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "\t\t\tvalue",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "\t\t\tvalue = m.group(1)\n\t\t\trest = text[m.end():]\n\t\tself.rows[key] = value.strip()\n\t\treturn rest\n\tdef NormalizedEntryType(self):\n\t\tentry_type = self.entry_type.lower()\n\t\tif entry_type in entry_types:\n\t\t\tentry_type = entry_types[entry_type]\n\t\treturn entry_type\n\tdef ToString(self):",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "\t\t\trest",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "\t\t\trest = text[m.end():]\n\t\tself.rows[key] = value.strip()\n\t\treturn rest\n\tdef NormalizedEntryType(self):\n\t\tentry_type = self.entry_type.lower()\n\t\tif entry_type in entry_types:\n\t\t\tentry_type = entry_types[entry_type]\n\t\treturn entry_type\n\tdef ToString(self):\n\t\ts = '@' + self.entry_type + '{'",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "\t\tself.rows[key]",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "\t\tself.rows[key] = value.strip()\n\t\treturn rest\n\tdef NormalizedEntryType(self):\n\t\tentry_type = self.entry_type.lower()\n\t\tif entry_type in entry_types:\n\t\t\tentry_type = entry_types[entry_type]\n\t\treturn entry_type\n\tdef ToString(self):\n\t\ts = '@' + self.entry_type + '{'\n\t\tif self.entry_name:",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "\t\tentry_type",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "\t\tentry_type = self.entry_type.lower()\n\t\tif entry_type in entry_types:\n\t\t\tentry_type = entry_types[entry_type]\n\t\treturn entry_type\n\tdef ToString(self):\n\t\ts = '@' + self.entry_type + '{'\n\t\tif self.entry_name:\n\t\t\ts += self.entry_name + ','\n\t\ts += '\\n'\n\t\tkeys = sorted(self.rows.keys())",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "\t\t\tentry_type",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "\t\t\tentry_type = entry_types[entry_type]\n\t\treturn entry_type\n\tdef ToString(self):\n\t\ts = '@' + self.entry_type + '{'\n\t\tif self.entry_name:\n\t\t\ts += self.entry_name + ','\n\t\ts += '\\n'\n\t\tkeys = sorted(self.rows.keys())\n\t\tfor key in keys:\n\t\t\ts += + 4*' '",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "\t\ts",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "\t\ts = '@' + self.entry_type + '{'\n\t\tif self.entry_name:\n\t\t\ts += self.entry_name + ','\n\t\ts += '\\n'\n\t\tkeys = sorted(self.rows.keys())\n\t\tfor key in keys:\n\t\t\ts += + 4*' '\n\t\t\ts += key\n\t\t\ts += max(0, 13-len(key))*' '\n\t\t\ts += ' = '",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "\t\tkeys",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "\t\tkeys = sorted(self.rows.keys())\n\t\tfor key in keys:\n\t\t\ts += + 4*' '\n\t\t\ts += key\n\t\t\ts += max(0, 13-len(key))*' '\n\t\t\ts += ' = '\n\t\t\tvalue = self.rows[key]\n\t\t\tif (not self.entry_type == 'String'):\n\t\t\t\tif (key in ['Author', 'Editor']):\n\t\t\t\t\tvalue = NormalizeAuthors(value)",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "\t\t\tvalue",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "\t\t\tvalue = self.rows[key]\n\t\t\tif (not self.entry_type == 'String'):\n\t\t\t\tif (key in ['Author', 'Editor']):\n\t\t\t\t\tvalue = NormalizeAuthors(value)\n\t\t\t\tif (key == 'Pages'):\n\t\t\t\t\tvalue = NormalizePages(value)\n\t\t\t\tif (key == 'Year'):\n\t\t\t\t\tvalue = NormalizeYear(value)\n\t\t\t\tif (key == 'Month'):\n\t\t\t\t\tvalue = NormalizeMonth(value)",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "\t\t\t\t\tvalue",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "\t\t\t\t\tvalue = NormalizeAuthors(value)\n\t\t\t\tif (key == 'Pages'):\n\t\t\t\t\tvalue = NormalizePages(value)\n\t\t\t\tif (key == 'Year'):\n\t\t\t\t\tvalue = NormalizeYear(value)\n\t\t\t\tif (key == 'Month'):\n\t\t\t\t\tvalue = NormalizeMonth(value)\n\t\t\ts += '{' + Format(value) + '}'\n\t\t\tif self.entry_type != 'String':\n\t\t\t\ts += ','",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "\t\t\t\t\tvalue",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "\t\t\t\t\tvalue = NormalizePages(value)\n\t\t\t\tif (key == 'Year'):\n\t\t\t\t\tvalue = NormalizeYear(value)\n\t\t\t\tif (key == 'Month'):\n\t\t\t\t\tvalue = NormalizeMonth(value)\n\t\t\ts += '{' + Format(value) + '}'\n\t\t\tif self.entry_type != 'String':\n\t\t\t\ts += ','\n\t\t\ts += '\\n'\n\t\treturn s + '}\\n'",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "\t\t\t\t\tvalue",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "\t\t\t\t\tvalue = NormalizeYear(value)\n\t\t\t\tif (key == 'Month'):\n\t\t\t\t\tvalue = NormalizeMonth(value)\n\t\t\ts += '{' + Format(value) + '}'\n\t\t\tif self.entry_type != 'String':\n\t\t\t\ts += ','\n\t\t\ts += '\\n'\n\t\treturn s + '}\\n'\n\tdef SortKey(self):\n\t\tpriorities = {",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "\t\t\t\t\tvalue",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "\t\t\t\t\tvalue = NormalizeMonth(value)\n\t\t\ts += '{' + Format(value) + '}'\n\t\t\tif self.entry_type != 'String':\n\t\t\t\ts += ','\n\t\t\ts += '\\n'\n\t\treturn s + '}\\n'\n\tdef SortKey(self):\n\t\tpriorities = {\n               \t\t'String'        : -99,\n               \t\t'Proceedings'   : 99,",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "\t\tpriorities",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "\t\tpriorities = {\n               \t\t'String'        : -99,\n               \t\t'Proceedings'   : 99,\n               \t\t'Book'          : 99,\n\t      \t}\n\t\tif self.entry_type in priorities:\n\t\t\treturn priorities[self.entry_type]\n\t\treturn 0\ndef ParseEntries(text):\n\tentries = []",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "\tentries",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "\tentries = []\n\twhile True:\n\t\te = Entry()\n\t\ttext = e.ParseFromString(text)\n\t\tif not text:\n\t\t\tbreak\n\t\tentries.append(e)\n\treturn entries\ndef SortEntries(entries):\n\tentries.sort(key=lambda e: e.entry_name)",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "\t\te",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "\t\te = Entry()\n\t\ttext = e.ParseFromString(text)\n\t\tif not text:\n\t\t\tbreak\n\t\tentries.append(e)\n\treturn entries\ndef SortEntries(entries):\n\tentries.sort(key=lambda e: e.entry_name)\n\tentries.sort(key=lambda e: e.entry_type)\n\tentries.sort(key=lambda e: e.SortKey())",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "\t\ttext",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "\t\ttext = e.ParseFromString(text)\n\t\tif not text:\n\t\t\tbreak\n\t\tentries.append(e)\n\treturn entries\ndef SortEntries(entries):\n\tentries.sort(key=lambda e: e.entry_name)\n\tentries.sort(key=lambda e: e.entry_type)\n\tentries.sort(key=lambda e: e.SortKey())\n\treturn entries",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "\tlines",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "\tlines = []\n\twith open(sys.argv[1], 'r') as f:\n\t\tfor line in f:\n\t\t\tif line.strip().startswith('%'):\n\t\t\t\tprint(line.strip())\n\t\t\telse:\n\t\t\t\tlines.append(line)\n\ttext = '\\n'.join(lines)\n\treturn text\n# main",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "\ttext",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "\ttext = '\\n'.join(lines)\n\treturn text\n# main\ndef main():\n\ttext = ReadFile()\n\tentries = ParseEntries(text)\n\tentries = SortEntries(entries)\n\tfor entry in entries:\n\t\tprint(entry.ToString())\nif __name__ == '__main__':",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "\ttext",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "\ttext = ReadFile()\n\tentries = ParseEntries(text)\n\tentries = SortEntries(entries)\n\tfor entry in entries:\n\t\tprint(entry.ToString())\nif __name__ == '__main__':\n    main()\n#!/usr/bin/env python\n# -*- coding: utf-8; mode: python -*-\n\"\"\"",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "\tentries",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "\tentries = ParseEntries(text)\n\tentries = SortEntries(entries)\n\tfor entry in entries:\n\t\tprint(entry.ToString())\nif __name__ == '__main__':\n    main()\n#!/usr/bin/env python\n# -*- coding: utf-8; mode: python -*-\n\"\"\"\nA minimalist script to print the (ordered) list of Bitbucket repositories for a user :",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "\tentries",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "\tentries = SortEntries(entries)\n\tfor entry in entries:\n\t\tprint(entry.ToString())\nif __name__ == '__main__':\n    main()\n#!/usr/bin/env python\n# -*- coding: utf-8; mode: python -*-\n\"\"\"\nA minimalist script to print the (ordered) list of Bitbucket repositories for a user :\n$ bitbucket_repolist.py pseudo",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "pseudo",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "pseudo = argv[1] if len(argv) > 1 else \"lbesson\"\njsonfile = \"bitbucket_{}.json\".format(pseudo)\nsystem(\"curl --silent https://bitbucket.org/api/1.0/users/\" + pseudo + \" > \" + jsonfile)\nb = load(open(jsonfile, 'r'))\n# for i in b['repositories']:\n#     print(i['slug'])\nlist_of_repo = sorted([i['slug'] for i in b['repositories']])\nfor i in list_of_repo:\n    print(i)\n#! /usr/bin/env python2",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "jsonfile",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "jsonfile = \"bitbucket_{}.json\".format(pseudo)\nsystem(\"curl --silent https://bitbucket.org/api/1.0/users/\" + pseudo + \" > \" + jsonfile)\nb = load(open(jsonfile, 'r'))\n# for i in b['repositories']:\n#     print(i['slug'])\nlist_of_repo = sorted([i['slug'] for i in b['repositories']])\nfor i in list_of_repo:\n    print(i)\n#! /usr/bin/env python2\n# -*- coding: utf-8 -*-",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "b",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "b = load(open(jsonfile, 'r'))\n# for i in b['repositories']:\n#     print(i['slug'])\nlist_of_repo = sorted([i['slug'] for i in b['repositories']])\nfor i in list_of_repo:\n    print(i)\n#! /usr/bin/env python2\n# -*- coding: utf-8 -*-\n\"\"\" Petit script Python pour afficher des graphiques de ses comptes et calculer des intérêts.\n- *Date:* 03 January 2019.",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "list_of_repo",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "list_of_repo = sorted([i['slug'] for i in b['repositories']])\nfor i in list_of_repo:\n    print(i)\n#! /usr/bin/env python2\n# -*- coding: utf-8 -*-\n\"\"\" Petit script Python pour afficher des graphiques de ses comptes et calculer des intérêts.\n- *Date:* 03 January 2019.\n- *Author:* Lilian Besson, © 2016-18.\n- *Licence:* MIT Licence (http://lbesson.mit-license.org).\n\"\"\"",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "taux2020",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "taux2020 = {'CCP' : 0.00,\n            'LA'  : 0.73,\n            'LEP' : 1.25,  # XXX I don't own a LEP anymore\n            'LJ'  : 1.65,  # XXX I don't own a LJ anymore\n            'PEA' : 0.00,  # XXX I don't own a PEA anymore\n            'PEL' : 2.36,\n            'CCP2': 0.00,\n            }\npath_comptes = \"/home/lilian/comptes.pickle\"\nprint(\"<yellow>Calcul des intérêts, <white>script <u>calc_interets.py<U>:\")",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "path_comptes",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "path_comptes = \"/home/lilian/comptes.pickle\"\nprint(\"<yellow>Calcul des intérêts, <white>script <u>calc_interets.py<U>:\")\ntry:\n    print(\"Lecture des comptes via le fichier <u>'{}'<U>...\".format(path_comptes))\n    with open(path_comptes, 'r') as f:\n        comptes = pickle.load(f)\nexcept:\n    print(\"Echec de la lecture. Le script va utiliser des valeurs par defaut : 2000.00 dans chaque compte (pour tester).\")\n    comptes = {'CCP': 2000.00,\n               'LA': 2000.00,",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "type_comptes",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "type_comptes = list(comptes.keys())\ndef maximizeWindow():\n    \"\"\" Experimental function to try to maximize a plot.\n    - Tries as well as possible to maximize the figure.\n    - Cf. https://stackoverflow.com/q/12439588/\n    \"\"\"\n    try:\n        figManager = plt.get_current_fig_manager()\n        figManager.window.showMaximized()\n    except:",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "days",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\nadjustment = [0, 1, -1, 0, 0, 1, 1, 2, 3, 3, 4, 4]\ndef day_offset(y, m, d):\n    # Add 1 if y > 2000 to account for the fact that 2000 was a leap year.\n    year_offset = ( y - 2000 ) + ( ( y - 2000 ) // 4 ) + ( y > 2000 )\n    # Account for wrongly computed leap years\n    year_offset -= ( y - 2000 ) // 100\n    # Add back 1 year if the target year is a leap year but the target day\n    # is after the 29th (in other words, the leap day hasn't happened yet).\n    if y % 100:",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "adjustment",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "adjustment = [0, 1, -1, 0, 0, 1, 1, 2, 3, 3, 4, 4]\ndef day_offset(y, m, d):\n    # Add 1 if y > 2000 to account for the fact that 2000 was a leap year.\n    year_offset = ( y - 2000 ) + ( ( y - 2000 ) // 4 ) + ( y > 2000 )\n    # Account for wrongly computed leap years\n    year_offset -= ( y - 2000 ) // 100\n    # Add back 1 year if the target year is a leap year but the target day\n    # is after the 29th (in other words, the leap day hasn't happened yet).\n    if y % 100:\n        year_offset += ( y < 2000 ) and not( y % 4 ) and ( m > 2 )",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "length_checksum",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "length_checksum = 2\ndef l_to_c(l):\n    try:\n        return str(int(l))\n    except ValueError:\n        return str(10 + ord(l.upper()) - ord('A'))\ndef check_nirpp(nirpp, length_checksum=length_checksum):\n    print(\"\\nChecking the NIRPP number '%s' ...\" % nirpp)\n    ib = nirpp.replace(' ', '')\n    checksum = int(ib[-length_checksum:])",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "information_nirpp",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "information_nirpp = {\n    (0, 1): {\n        \"meaning\": \"sexe\",\n        \"mapping\": {\n            \"1\": \"homme\",\n            \"2\": \"femme\",\n            \"3\": \"personne étrangère de sexe masculin en cours d'immatriculation en France\",\n            \"4\": \"personne étrangère de sexe féminin en cours d'immatriculation en France\"\n        }\n    },",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "url_finder",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "url_finder = re.compile(r'http[^\"]*')\nquery_finder = re.compile(r\"data.query = JSON.parse\\('\\{[^\\n]*\")\nsearchResponse_finder = re.compile(r\"data.searchResponse = JSON.parse\\('\\{[^\\n]*\")\n# url0 = \"http://www.voyages-sncf.com//vsc/train-ticket/?_LANG=fr&site_country=FR&site_language=fr&ORIGIN_CITY=Toulon&DESTINATION_CITY=Paris%20%28Toutes%20gares%20intramuros%29&OUTWARD_DATE=31/05/2016&OUTWARD_TIME=15&INWARD_DATE=&INWARD_TIME=7&COMFORT_CLASS=2&DISTRIBUTED_COUNTRY=FR&NB_TYPO_ADULT=1&bookingChoice=train&PASSENGER_1=YOUNG&PASSENGER_1_CARD=MI1ST&PASSENGER_1_FID_PROG=&PASSENGER_1FID_NUM_BEGIN=&CODE_PROMO_1=&action:searchTravel=Rechercher\"\nURL_TEMPLATE = \"https://www.voyages-sncf.com/vsc/train-ticket/?_LANG=fr&site_country=FR&site_language=fr&ORIGIN_CITY={ORIGIN_CITY}&DESTINATION_CITY={DESTINATION_CITY}&OUTWARD_DATE={DATE}&OUTWARD_TIME={OUTWARD_TIME}&INWARD_DATE=&INWARD_TIME=7&COMFORT_CLASS=2&DISTRIBUTED_COUNTRY=FR&NB_TYPO_ADULT=1&bookingChoice=train&PASSENGER_1=YOUNG&PASSENGER_1_CARD=MI1ST&PASSENGER_1_FID_PROG=&PASSENGER_1FID_NUM_BEGIN=&CODE_PROMO_1=&action:searchTravel=Rechercher\"\n# url1 = 'http://www.voyages-sncf.com/vsc/proposals/findProposals?hid='\ndef main(url, MY_OUTWARD_TIME):\n    \"\"\" Go to the page 'url', find the next link to got, then extract the JSON query result, find the wanted train, and display the results.\n    \"\"\"\n    MY_OUTWARD_TIME = MY_OUTWARD_TIME.replace('h', ':')",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "query_finder",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "query_finder = re.compile(r\"data.query = JSON.parse\\('\\{[^\\n]*\")\nsearchResponse_finder = re.compile(r\"data.searchResponse = JSON.parse\\('\\{[^\\n]*\")\n# url0 = \"http://www.voyages-sncf.com//vsc/train-ticket/?_LANG=fr&site_country=FR&site_language=fr&ORIGIN_CITY=Toulon&DESTINATION_CITY=Paris%20%28Toutes%20gares%20intramuros%29&OUTWARD_DATE=31/05/2016&OUTWARD_TIME=15&INWARD_DATE=&INWARD_TIME=7&COMFORT_CLASS=2&DISTRIBUTED_COUNTRY=FR&NB_TYPO_ADULT=1&bookingChoice=train&PASSENGER_1=YOUNG&PASSENGER_1_CARD=MI1ST&PASSENGER_1_FID_PROG=&PASSENGER_1FID_NUM_BEGIN=&CODE_PROMO_1=&action:searchTravel=Rechercher\"\nURL_TEMPLATE = \"https://www.voyages-sncf.com/vsc/train-ticket/?_LANG=fr&site_country=FR&site_language=fr&ORIGIN_CITY={ORIGIN_CITY}&DESTINATION_CITY={DESTINATION_CITY}&OUTWARD_DATE={DATE}&OUTWARD_TIME={OUTWARD_TIME}&INWARD_DATE=&INWARD_TIME=7&COMFORT_CLASS=2&DISTRIBUTED_COUNTRY=FR&NB_TYPO_ADULT=1&bookingChoice=train&PASSENGER_1=YOUNG&PASSENGER_1_CARD=MI1ST&PASSENGER_1_FID_PROG=&PASSENGER_1FID_NUM_BEGIN=&CODE_PROMO_1=&action:searchTravel=Rechercher\"\n# url1 = 'http://www.voyages-sncf.com/vsc/proposals/findProposals?hid='\ndef main(url, MY_OUTWARD_TIME):\n    \"\"\" Go to the page 'url', find the next link to got, then extract the JSON query result, find the wanted train, and display the results.\n    \"\"\"\n    MY_OUTWARD_TIME = MY_OUTWARD_TIME.replace('h', ':')\n    # Create the web browser object",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "searchResponse_finder",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "searchResponse_finder = re.compile(r\"data.searchResponse = JSON.parse\\('\\{[^\\n]*\")\n# url0 = \"http://www.voyages-sncf.com//vsc/train-ticket/?_LANG=fr&site_country=FR&site_language=fr&ORIGIN_CITY=Toulon&DESTINATION_CITY=Paris%20%28Toutes%20gares%20intramuros%29&OUTWARD_DATE=31/05/2016&OUTWARD_TIME=15&INWARD_DATE=&INWARD_TIME=7&COMFORT_CLASS=2&DISTRIBUTED_COUNTRY=FR&NB_TYPO_ADULT=1&bookingChoice=train&PASSENGER_1=YOUNG&PASSENGER_1_CARD=MI1ST&PASSENGER_1_FID_PROG=&PASSENGER_1FID_NUM_BEGIN=&CODE_PROMO_1=&action:searchTravel=Rechercher\"\nURL_TEMPLATE = \"https://www.voyages-sncf.com/vsc/train-ticket/?_LANG=fr&site_country=FR&site_language=fr&ORIGIN_CITY={ORIGIN_CITY}&DESTINATION_CITY={DESTINATION_CITY}&OUTWARD_DATE={DATE}&OUTWARD_TIME={OUTWARD_TIME}&INWARD_DATE=&INWARD_TIME=7&COMFORT_CLASS=2&DISTRIBUTED_COUNTRY=FR&NB_TYPO_ADULT=1&bookingChoice=train&PASSENGER_1=YOUNG&PASSENGER_1_CARD=MI1ST&PASSENGER_1_FID_PROG=&PASSENGER_1FID_NUM_BEGIN=&CODE_PROMO_1=&action:searchTravel=Rechercher\"\n# url1 = 'http://www.voyages-sncf.com/vsc/proposals/findProposals?hid='\ndef main(url, MY_OUTWARD_TIME):\n    \"\"\" Go to the page 'url', find the next link to got, then extract the JSON query result, find the wanted train, and display the results.\n    \"\"\"\n    MY_OUTWARD_TIME = MY_OUTWARD_TIME.replace('h', ':')\n    # Create the web browser object\n    b = RB(history=True, allow_redirects=True)",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "URL_TEMPLATE",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "URL_TEMPLATE = \"https://www.voyages-sncf.com/vsc/train-ticket/?_LANG=fr&site_country=FR&site_language=fr&ORIGIN_CITY={ORIGIN_CITY}&DESTINATION_CITY={DESTINATION_CITY}&OUTWARD_DATE={DATE}&OUTWARD_TIME={OUTWARD_TIME}&INWARD_DATE=&INWARD_TIME=7&COMFORT_CLASS=2&DISTRIBUTED_COUNTRY=FR&NB_TYPO_ADULT=1&bookingChoice=train&PASSENGER_1=YOUNG&PASSENGER_1_CARD=MI1ST&PASSENGER_1_FID_PROG=&PASSENGER_1FID_NUM_BEGIN=&CODE_PROMO_1=&action:searchTravel=Rechercher\"\n# url1 = 'http://www.voyages-sncf.com/vsc/proposals/findProposals?hid='\ndef main(url, MY_OUTWARD_TIME):\n    \"\"\" Go to the page 'url', find the next link to got, then extract the JSON query result, find the wanted train, and display the results.\n    \"\"\"\n    MY_OUTWARD_TIME = MY_OUTWARD_TIME.replace('h', ':')\n    # Create the web browser object\n    b = RB(history=True, allow_redirects=True)\n    # Open the page\n    b.open(url)",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "HTML_TEMPLATE",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "HTML_TEMPLATE = \"\"\"\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">\n<html><head><title>Print</title>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\">\n</head><body><h1>Print File</h1>\n<form action=\"send\" method=\"POST\" enctype=\"multipart/form-data\">\nFile name: <input name=\"file\" type=\"file\"><br>\nUser name: <input name=\"user\"><br>\n<input name=\"submit\" type=\"submit\">\n</form>",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "FROM_LANGUAGE",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "FROM_LANGUAGE = 'EN'\nTO_LANGUAGE = 'FR'\ndef main(argv, to_language=TO_LANGUAGE, from_language=FROM_LANGUAGE):\n    \"\"\" Main function. Use the arguments of the command line (sys.argv). \"\"\"\n    # TODO use docopt to handle the command line arguments! Cf. http://docopt.org/\n    # TODO can docopt handle a cli documentation with ansicolortags tags in it? Cf. http://ansicolortags.rtfd.io/\n    # Manual handing of the command line arguments\n    if \"-h\" in argv or \"--help\" in argv:\n        printc(\"\"\"\n<green>deepl.py<white> --help|-h | -f file | [--from LANG] [--to LANG] text",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "TO_LANGUAGE",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "TO_LANGUAGE = 'FR'\ndef main(argv, to_language=TO_LANGUAGE, from_language=FROM_LANGUAGE):\n    \"\"\" Main function. Use the arguments of the command line (sys.argv). \"\"\"\n    # TODO use docopt to handle the command line arguments! Cf. http://docopt.org/\n    # TODO can docopt handle a cli documentation with ansicolortags tags in it? Cf. http://ansicolortags.rtfd.io/\n    # Manual handing of the command line arguments\n    if \"-h\" in argv or \"--help\" in argv:\n        printc(\"\"\"\n<green>deepl.py<white> --help|-h | -f file | [--from LANG] [--to LANG] text\nA simple Python script translate a text from a language to another language, using DeepL translator (https://www.deepl.com/translator).",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "nqueens",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "nqueens = int(sys.argv[1]) if len(sys.argv) > 1 else None\nq = delBoard(nqueens)\nif __name__ == \"__main__\":\n    print(\"Interrupt me to solve the {} queens problem!\".format(nqueens))\n    while True:\n        pass\n#! /usr/bin/env python\n# -*- coding: utf-8 -*-\n\"\"\"\nA small script to dump all Maths Exercice LaTeX sources from some website.",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "q",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "q = delBoard(nqueens)\nif __name__ == \"__main__\":\n    print(\"Interrupt me to solve the {} queens problem!\".format(nqueens))\n    while True:\n        pass\n#! /usr/bin/env python\n# -*- coding: utf-8 -*-\n\"\"\"\nA small script to dump all Maths Exercice LaTeX sources from some website.\nEavily dependant on the website being used.",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "numexo",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "numexo = int(sys.argv[1]) if len(sys.argv) > 1 else 1485\nchapter = str(sys.argv[2]) if len(sys.argv) > 2 else \"\"\nurlToGo = \"http://mp.cpgedupuydelome.fr/mesexos.php?idTeX=%i\" % numexo\nprint(\"Numéro <magenta>%i<reset>. On va vers <u>\\\"%s\\\"<U><white>\" % (numexo, urlToGo))\n# On récupère la page (la partie la plus lente du coup)\nimport urllib2\nresponse = urllib2.urlopen(urlToGo)\nhtml = response.read()\n# BeautifulSoup v3 (et pas v4, attention !)\nfrom BeautifulSoup import BeautifulSoup",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "chapter",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "chapter = str(sys.argv[2]) if len(sys.argv) > 2 else \"\"\nurlToGo = \"http://mp.cpgedupuydelome.fr/mesexos.php?idTeX=%i\" % numexo\nprint(\"Numéro <magenta>%i<reset>. On va vers <u>\\\"%s\\\"<U><white>\" % (numexo, urlToGo))\n# On récupère la page (la partie la plus lente du coup)\nimport urllib2\nresponse = urllib2.urlopen(urlToGo)\nhtml = response.read()\n# BeautifulSoup v3 (et pas v4, attention !)\nfrom BeautifulSoup import BeautifulSoup\n# On l'analyse",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "urlToGo",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "urlToGo = \"http://mp.cpgedupuydelome.fr/mesexos.php?idTeX=%i\" % numexo\nprint(\"Numéro <magenta>%i<reset>. On va vers <u>\\\"%s\\\"<U><white>\" % (numexo, urlToGo))\n# On récupère la page (la partie la plus lente du coup)\nimport urllib2\nresponse = urllib2.urlopen(urlToGo)\nhtml = response.read()\n# BeautifulSoup v3 (et pas v4, attention !)\nfrom BeautifulSoup import BeautifulSoup\n# On l'analyse\nparsed_html = BeautifulSoup(html, fromEncoding='utf-8')",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "response",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "response = urllib2.urlopen(urlToGo)\nhtml = response.read()\n# BeautifulSoup v3 (et pas v4, attention !)\nfrom BeautifulSoup import BeautifulSoup\n# On l'analyse\nparsed_html = BeautifulSoup(html, fromEncoding='utf-8')\nprint(\"<black>Encodage original : %s<white>\\n\\n\" % parsed_html.originalEncoding)\n# On cherche la section <section id=\"contenu\">..</section>\ncontenu = parsed_html.body.find('section', attrs={'id': 'contenu'})\n# Et on prend le contenu de la première <textarea> !",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "html",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "html = response.read()\n# BeautifulSoup v3 (et pas v4, attention !)\nfrom BeautifulSoup import BeautifulSoup\n# On l'analyse\nparsed_html = BeautifulSoup(html, fromEncoding='utf-8')\nprint(\"<black>Encodage original : %s<white>\\n\\n\" % parsed_html.originalEncoding)\n# On cherche la section <section id=\"contenu\">..</section>\ncontenu = parsed_html.body.find('section', attrs={'id': 'contenu'})\n# Et on prend le contenu de la première <textarea> !\ncodeTeX = contenu.findAll('textarea', limit=1)[0].renderContents()",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "parsed_html",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "parsed_html = BeautifulSoup(html, fromEncoding='utf-8')\nprint(\"<black>Encodage original : %s<white>\\n\\n\" % parsed_html.originalEncoding)\n# On cherche la section <section id=\"contenu\">..</section>\ncontenu = parsed_html.body.find('section', attrs={'id': 'contenu'})\n# Et on prend le contenu de la première <textarea> !\ncodeTeX = contenu.findAll('textarea', limit=1)[0].renderContents()\n# Quelques corrections, parce que BeautifulSoup échappe certains trucs\ncodeTeX = codeTeX.replace(\"&amp;\", \"&\").replace(\"&lt;\", \"<\").replace(\"&gt;\", \">\").replace(\"&le;\", \"<=\").replace(\"&ge;\", \">=\")\n# Et d'autres erreurs fréquentes.\ncodeTeX = codeTeX.replace(\"^ - \", \"^{-}\")",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "contenu",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "contenu = parsed_html.body.find('section', attrs={'id': 'contenu'})\n# Et on prend le contenu de la première <textarea> !\ncodeTeX = contenu.findAll('textarea', limit=1)[0].renderContents()\n# Quelques corrections, parce que BeautifulSoup échappe certains trucs\ncodeTeX = codeTeX.replace(\"&amp;\", \"&\").replace(\"&lt;\", \"<\").replace(\"&gt;\", \">\").replace(\"&le;\", \"<=\").replace(\"&ge;\", \">=\")\n# Et d'autres erreurs fréquentes.\ncodeTeX = codeTeX.replace(\"^ - \", \"^{-}\")\n# Ici on pourrait utiliser un outil de traduction bien conçu pour produire codeTeX_en en anglais\n# FIXME !\n# Là on galère pour afficher en UTF-8. Zut !",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "codeTeX",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "codeTeX = contenu.findAll('textarea', limit=1)[0].renderContents()\n# Quelques corrections, parce que BeautifulSoup échappe certains trucs\ncodeTeX = codeTeX.replace(\"&amp;\", \"&\").replace(\"&lt;\", \"<\").replace(\"&gt;\", \">\").replace(\"&le;\", \"<=\").replace(\"&ge;\", \">=\")\n# Et d'autres erreurs fréquentes.\ncodeTeX = codeTeX.replace(\"^ - \", \"^{-}\")\n# Ici on pourrait utiliser un outil de traduction bien conçu pour produire codeTeX_en en anglais\n# FIXME !\n# Là on galère pour afficher en UTF-8. Zut !\n# print( unicode( codeTeX ) )\nprint(\"<blue><u>Code LaTeX de cet exercice:<U><white>\\n\\n%s\" % codeTeX)",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "codeTeX",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "codeTeX = codeTeX.replace(\"&amp;\", \"&\").replace(\"&lt;\", \"<\").replace(\"&gt;\", \">\").replace(\"&le;\", \"<=\").replace(\"&ge;\", \">=\")\n# Et d'autres erreurs fréquentes.\ncodeTeX = codeTeX.replace(\"^ - \", \"^{-}\")\n# Ici on pourrait utiliser un outil de traduction bien conçu pour produire codeTeX_en en anglais\n# FIXME !\n# Là on galère pour afficher en UTF-8. Zut !\n# print( unicode( codeTeX ) )\nprint(\"<blue><u>Code LaTeX de cet exercice:<U><white>\\n\\n%s\" % codeTeX)\n# On créé un fichier TeX\nname = \"ex_%i.fr.tex\" % numexo",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "codeTeX",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "codeTeX = codeTeX.replace(\"^ - \", \"^{-}\")\n# Ici on pourrait utiliser un outil de traduction bien conçu pour produire codeTeX_en en anglais\n# FIXME !\n# Là on galère pour afficher en UTF-8. Zut !\n# print( unicode( codeTeX ) )\nprint(\"<blue><u>Code LaTeX de cet exercice:<U><white>\\n\\n%s\" % codeTeX)\n# On créé un fichier TeX\nname = \"ex_%i.fr.tex\" % numexo\nout = open(name, mode=\"w\")\n# On va écrire le code de l'exercice dedans",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "name",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "name = \"ex_%i.fr.tex\" % numexo\nout = open(name, mode=\"w\")\n# On va écrire le code de l'exercice dedans\nprint(\"<green>On écrit dans %s !<white>\" % out)\n# Ajout de la possibilité de préciser le chapitre courant en train d'être construit.\nif chapter:\n    chapter = chapter.replace(\"_\", \" \").replace(\"/\", \"\")\n    print(\"<magenta>Pour le chapitre '%s' :<white>\" % chapter)\n    out.write(\"%%%% -*- mode: latex; coding: utf-8 -*-\\n%%%% Chapter : %s.\\n%%%% Start of LaTeX code, for exercise #%i (from '%s'), in French (file '%s').\\n\\n\" % (chapter, numexo, urlToGo, name))\nelse:",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "out",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "out = open(name, mode=\"w\")\n# On va écrire le code de l'exercice dedans\nprint(\"<green>On écrit dans %s !<white>\" % out)\n# Ajout de la possibilité de préciser le chapitre courant en train d'être construit.\nif chapter:\n    chapter = chapter.replace(\"_\", \" \").replace(\"/\", \"\")\n    print(\"<magenta>Pour le chapitre '%s' :<white>\" % chapter)\n    out.write(\"%%%% -*- mode: latex; coding: utf-8 -*-\\n%%%% Chapter : %s.\\n%%%% Start of LaTeX code, for exercise #%i (from '%s'), in French (file '%s').\\n\\n\" % (chapter, numexo, urlToGo, name))\nelse:\n    out.write(\"%%%% -*- mode: latex; coding: utf-8 -*-\\n%%%% Start of LaTeX code, for exercise #%i (from '%s'), in French (file '%s').\\n\\n\" % (numexo, urlToGo, name))",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "USE_SVG",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "USE_SVG = False\ndef emojize(s, use_svg=USE_SVG):\n    \"\"\"Call markdown.markdown() on s.\"\"\"\n    emoji_generator = pymdownx.emoji.to_svg if use_svg else pymdownx.emoji.to_png\n    extension_configs = {\n        'pymdownx.emoji': {\n            'emoji_generator': emoji_generator\n        }\n    }\n    res = markdown(s,",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "repas",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "repas = 15.25\nhotel = 150\ntaxeSejour = 0  # 1.65\nmetro = 1.5\ndef main(nbJour=3, nbRepas=None, trains=None, nbNuit=None, totalHotel=None):\n    \"\"\" Calcule et affiche les détails des frais de mission.\n    Par exemple :\n    >>> trains = {\n           \"Rennes > Lille\": (44.00, \"14/12/16\"),\n           \"Lille > Paris \": (25.50, \"16/12/16\"),",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "hotel",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "hotel = 150\ntaxeSejour = 0  # 1.65\nmetro = 1.5\ndef main(nbJour=3, nbRepas=None, trains=None, nbNuit=None, totalHotel=None):\n    \"\"\" Calcule et affiche les détails des frais de mission.\n    Par exemple :\n    >>> trains = {\n           \"Rennes > Lille\": (44.00, \"14/12/16\"),\n           \"Lille > Paris \": (25.50, \"16/12/16\"),\n           \"Paris > Rennes\": (35.00, \"03/01/17\"),",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "taxeSejour",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "taxeSejour = 0  # 1.65\nmetro = 1.5\ndef main(nbJour=3, nbRepas=None, trains=None, nbNuit=None, totalHotel=None):\n    \"\"\" Calcule et affiche les détails des frais de mission.\n    Par exemple :\n    >>> trains = {\n           \"Rennes > Lille\": (44.00, \"14/12/16\"),\n           \"Lille > Paris \": (25.50, \"16/12/16\"),\n           \"Paris > Rennes\": (35.00, \"03/01/17\"),\n       }",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "metro",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "metro = 1.5\ndef main(nbJour=3, nbRepas=None, trains=None, nbNuit=None, totalHotel=None):\n    \"\"\" Calcule et affiche les détails des frais de mission.\n    Par exemple :\n    >>> trains = {\n           \"Rennes > Lille\": (44.00, \"14/12/16\"),\n           \"Lille > Paris \": (25.50, \"16/12/16\"),\n           \"Paris > Rennes\": (35.00, \"03/01/17\"),\n       }\n    >>> main(nbJour=3, trains=trains)",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "today",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "today = time.strftime(\"%H:%M:%S %Y-%m-%d\")\ntry:\n    from os.path import expanduser\nexcept ImportError:\n    print(\"Warning, os.path.expanduser is not available, trying to use os.getenv('USER') = {} ...\".format(os.getenv(\"USER\")))\n    def expanduser(s):\n        \"\"\" Try to simulate the os.path.expanduser function. \"\"\"\n        return '/home/' + os.getenv(\"USER\") + '/' + s\nif sys.version_info < (3, 0):\n    from urllib import urlencode",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "numbers",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "numbers = []\n#: Number (not necessary)\n# number = base64.b64decode(open(expanduser('~') + \".smsapifreemobile_number.b64\").readline()[:-1])\n# if number[-1] == '\\n':\n#     number = number[:-1]\nnumber = openSpecialFile(\"number\")\nnumbers.append(number)\nif testSpecialFile(\"number\", \"2\"):\n    number2 = openSpecialFile(\"number\", \"2\")\n    numbers.append(number2)",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "number",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "number = openSpecialFile(\"number\")\nnumbers.append(number)\nif testSpecialFile(\"number\", \"2\"):\n    number2 = openSpecialFile(\"number\", \"2\")\n    numbers.append(number2)\n# Detect language\nlanguage = os.getenv(\"LANG\")\nlanguage = language[0:2] if language else \"fr\"\n# Maximum size that can be sent\n# XXX Reference: https://en.wikipedia.org/wiki/Short_Message_Service#Message_size",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "language",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "language = os.getenv(\"LANG\")\nlanguage = language[0:2] if language else \"fr\"\n# Maximum size that can be sent\n# XXX Reference: https://en.wikipedia.org/wiki/Short_Message_Service#Message_size\n# \"6 to 8 segment messages are the practical maximum\"\nMAX_SIZE = 4 * 159\nSTR_MAX_SIZE = \"4*159\"\nif language == \"fr\":\n    errorcodes = {\n        400: \"Un des paramètres obligatoires est manquant.\",",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "language",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "language = language[0:2] if language else \"fr\"\n# Maximum size that can be sent\n# XXX Reference: https://en.wikipedia.org/wiki/Short_Message_Service#Message_size\n# \"6 to 8 segment messages are the practical maximum\"\nMAX_SIZE = 4 * 159\nSTR_MAX_SIZE = \"4*159\"\nif language == \"fr\":\n    errorcodes = {\n        400: \"Un des paramètres obligatoires est manquant.\",\n        402: \"Trop de SMS ont été envoyés en trop peu de temps.\",",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "MAX_SIZE",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "MAX_SIZE = 4 * 159\nSTR_MAX_SIZE = \"4*159\"\nif language == \"fr\":\n    errorcodes = {\n        400: \"Un des paramètres obligatoires est manquant.\",\n        402: \"Trop de SMS ont été envoyés en trop peu de temps.\",\n        403: \"\"\"Le service n'est pas activé sur l'espace abonné, ou login / clé incorrect.\nAllez sur '<black>https://mobile.free.fr/moncompte/index.php?page=options&show=20<white>' svp, et activez l'option correspondate.\"\"\",\n        500: \"Erreur côté serveur. Veuillez réessayez ultérieurement.\",\n        1:   \"Le SMS a été envoyé sur votre mobile ({}).\".format(number) if len(numbers) <= 1 else \"Le SMS a été envoyé sur vos numéros ({}).\".format(numbers),",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "STR_MAX_SIZE",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "STR_MAX_SIZE = \"4*159\"\nif language == \"fr\":\n    errorcodes = {\n        400: \"Un des paramètres obligatoires est manquant.\",\n        402: \"Trop de SMS ont été envoyés en trop peu de temps.\",\n        403: \"\"\"Le service n'est pas activé sur l'espace abonné, ou login / clé incorrect.\nAllez sur '<black>https://mobile.free.fr/moncompte/index.php?page=options&show=20<white>' svp, et activez l'option correspondate.\"\"\",\n        500: \"Erreur côté serveur. Veuillez réessayez ultérieurement.\",\n        1:   \"Le SMS a été envoyé sur votre mobile ({}).\".format(number) if len(numbers) <= 1 else \"Le SMS a été envoyé sur vos numéros ({}).\".format(numbers),\n        \"toolong\": \"<red>Attention<white> : le message est trop long (+ de <black>{}<white> caracters, soit plus de 3 SMS).\".format(STR_MAX_SIZE)",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "version",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "version = '0.2'\nshow = False\ndef readfiles(filenames):\n    \"\"\" Return the content of each file, concatenated as one big string.\n    - Path could be relative or absolute, but nothing fancy is done here.\n    \"\"\"\n    text = \"\"\n    # Read the whole text for each file\n    for filename in filenames:\n        try:",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "show",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "show = False\ndef readfiles(filenames):\n    \"\"\" Return the content of each file, concatenated as one big string.\n    - Path could be relative or absolute, but nothing fancy is done here.\n    \"\"\"\n    text = \"\"\n    # Read the whole text for each file\n    for filename in filenames:\n        try:\n            text += open(filename, 'r').read()",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "full_docopt_text",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "full_docopt_text = \"\"\"\ngenerate-word-cloud.py\nUsage:\n  generate-word-cloud.py [-s | --show] [-f | --force] [-o OUTFILE | --outfile=OUTFILE]\n                         [-t TITLE | --title=TITLE] [-m MAX | --max=MAX]\n                         [-w WIDTH | --width=WIDTH] [-H HEIGHT | --height=HEIGHT]\n                         INFILE...\n  generate-word-cloud.py [-h | --help]\n  generate-word-cloud.py [-v | --version]\nOptions:",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "response",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "response = urllib.request.urlopen(\n    'https://scholar.google.fr/citations?user={}'.format(sys.argv[1]))\nhtml = response.read()\nm = re.search(\"<tbody(.*)</tbody>\", str(html))\nmm = re.findall(r\"<tr class=\\\"gsc_a_tr\\\">(.*?)</tr>\", m.group(0))\npapers = []\nfor m in mm:\n    xx = re.sub(r\"<(.*?)>\", r\"£\", m)\n    xx = re.sub(r\"£+\", r\"£\", xx)\n    yy = re.findall(r\"£?(.*?)£\", xx)",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "html",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "html = response.read()\nm = re.search(\"<tbody(.*)</tbody>\", str(html))\nmm = re.findall(r\"<tr class=\\\"gsc_a_tr\\\">(.*?)</tr>\", m.group(0))\npapers = []\nfor m in mm:\n    xx = re.sub(r\"<(.*?)>\", r\"£\", m)\n    xx = re.sub(r\"£+\", r\"£\", xx)\n    yy = re.findall(r\"£?(.*?)£\", xx)\n    paper = {\n        \"title\": yy[0],",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "m",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "m = re.search(\"<tbody(.*)</tbody>\", str(html))\nmm = re.findall(r\"<tr class=\\\"gsc_a_tr\\\">(.*?)</tr>\", m.group(0))\npapers = []\nfor m in mm:\n    xx = re.sub(r\"<(.*?)>\", r\"£\", m)\n    xx = re.sub(r\"£+\", r\"£\", xx)\n    yy = re.findall(r\"£?(.*?)£\", xx)\n    paper = {\n        \"title\": yy[0],\n        \"author\": yy[1],",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "mm",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "mm = re.findall(r\"<tr class=\\\"gsc_a_tr\\\">(.*?)</tr>\", m.group(0))\npapers = []\nfor m in mm:\n    xx = re.sub(r\"<(.*?)>\", r\"£\", m)\n    xx = re.sub(r\"£+\", r\"£\", xx)\n    yy = re.findall(r\"£?(.*?)£\", xx)\n    paper = {\n        \"title\": yy[0],\n        \"author\": yy[1],\n        \"booktitle\": yy[2],",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "papers",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "papers = []\nfor m in mm:\n    xx = re.sub(r\"<(.*?)>\", r\"£\", m)\n    xx = re.sub(r\"£+\", r\"£\", xx)\n    yy = re.findall(r\"£?(.*?)£\", xx)\n    paper = {\n        \"title\": yy[0],\n        \"author\": yy[1],\n        \"booktitle\": yy[2],\n    }",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "res",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "res = {\"papers\": papers}\nprint(json.JSONEncoder().encode(res))\n#!/usr/bin/env python\n# -*- coding: utf-8; mode: python -*-\n\"\"\"\nA simple python implementation of Gravatar Image requests (using their API).\n- Author: Lilian Besson, (C) 2013.\n- Online: https://bitbucket.org/lbesson/bin/src/master/gravatar.py\n- Licence: MIT Licence (http://lbesson.mit-license.org).\n\"\"\"",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "default",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "default = \"retro\"\nsize = 256\nsecure = True\ndef gravatar(email, default=default, size=size, secure=secure):\n    \"\"\"\n    gravatar(email, default=default, size=size, secure=secure) -> string\"\n    Return the URL of the gravatar picture associated with @email.\n    @default: default picture to use if not available. Default is %s.\n    @size: format to use (pixel x pixel). Default is %i.\n    @secure: if true, the returned URL use https://secure.gravatar.com instead of http://www.gravatar.com. Default is %s.\"",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "size",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "size = 256\nsecure = True\ndef gravatar(email, default=default, size=size, secure=secure):\n    \"\"\"\n    gravatar(email, default=default, size=size, secure=secure) -> string\"\n    Return the URL of the gravatar picture associated with @email.\n    @default: default picture to use if not available. Default is %s.\n    @size: format to use (pixel x pixel). Default is %i.\n    @secure: if true, the returned URL use https://secure.gravatar.com instead of http://www.gravatar.com. Default is %s.\"\n    \"\"\" % (default, size, secure)",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "secure",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "secure = True\ndef gravatar(email, default=default, size=size, secure=secure):\n    \"\"\"\n    gravatar(email, default=default, size=size, secure=secure) -> string\"\n    Return the URL of the gravatar picture associated with @email.\n    @default: default picture to use if not available. Default is %s.\n    @size: format to use (pixel x pixel). Default is %i.\n    @secure: if true, the returned URL use https://secure.gravatar.com instead of http://www.gravatar.com. Default is %s.\"\n    \"\"\" % (default, size, secure)\n    if secure:",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "NB_BITS",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "NB_BITS = 4\nDEFAULT_SIZE = 1 << NB_BITS\nclass hashtable(object):\n    \"\"\"Manual implementation of a naive hash table.\n    - Can only store hashable values.\n    - Use single-linked lists to be collision-resistant!\n    - Uses a non cryptographic hash function (default `hash`).\n    \"\"\"\n    def __init__(self, map_values=None, nb_bits=NB_BITS):\n        self._nb_bits = nb_bits",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "DEFAULT_SIZE",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "DEFAULT_SIZE = 1 << NB_BITS\nclass hashtable(object):\n    \"\"\"Manual implementation of a naive hash table.\n    - Can only store hashable values.\n    - Use single-linked lists to be collision-resistant!\n    - Uses a non cryptographic hash function (default `hash`).\n    \"\"\"\n    def __init__(self, map_values=None, nb_bits=NB_BITS):\n        self._nb_bits = nb_bits\n        self._size = 1 << nb_bits",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "logger",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "logger = logging.getLogger('your-module')\nlogger.addHandler(coloredlogs.ColoredStreamHandler())\n# Some examples.\nlogger.setLevel(logging.DEBUG)\nlogger.debug(\"this is a debugging message\")\nlogger.info(\"this is an informational message\")\nlogger.warn(\"this is a warning message\")\nlogger.error(\"this is an error message\")\nlogger.fatal(\"this is a fatal message\")\nlogger.critical(\"this is a critical message\")",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "\tmsg",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "\tmsg = MIMEText(message+(signature % me))\n\t# The order is \"important\", to act like a real mail client !\n\tmsg['From'] = my_identity+\" <\"+me+\">\"\n\tmsg['To'] = you\n\tmsg['Subject'] = subj\n\t# Send the message via our own SMTP server, but don't include the\n\t# envelope header.\n\ts = smtplib.SMTP('smtp.crans.org')\n\t# s = smtplib.SMTP('localhost')\n\ts.sendmail(me, [you], msg.as_string())",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "\tmsg['From']",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "\tmsg['From'] = my_identity+\" <\"+me+\">\"\n\tmsg['To'] = you\n\tmsg['Subject'] = subj\n\t# Send the message via our own SMTP server, but don't include the\n\t# envelope header.\n\ts = smtplib.SMTP('smtp.crans.org')\n\t# s = smtplib.SMTP('localhost')\n\ts.sendmail(me, [you], msg.as_string())\n\ts.quit()\n\tprint \"An email has been sent to %s, from %s <%s>.\" % (you, my_identity, me)",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "\tmsg['To']",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "\tmsg['To'] = you\n\tmsg['Subject'] = subj\n\t# Send the message via our own SMTP server, but don't include the\n\t# envelope header.\n\ts = smtplib.SMTP('smtp.crans.org')\n\t# s = smtplib.SMTP('localhost')\n\ts.sendmail(me, [you], msg.as_string())\n\ts.quit()\n\tprint \"An email has been sent to %s, from %s <%s>.\" % (you, my_identity, me)\n\tprint \"Title of the email : \\n%s\" % subj",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "\tmsg['Subject']",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "\tmsg['Subject'] = subj\n\t# Send the message via our own SMTP server, but don't include the\n\t# envelope header.\n\ts = smtplib.SMTP('smtp.crans.org')\n\t# s = smtplib.SMTP('localhost')\n\ts.sendmail(me, [you], msg.as_string())\n\ts.quit()\n\tprint \"An email has been sent to %s, from %s <%s>.\" % (you, my_identity, me)\n\tprint \"Title of the email : \\n%s\" % subj\n\tprint \"Content of the email : \\n%s\" % message",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "\ts",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "\ts = smtplib.SMTP('smtp.crans.org')\n\t# s = smtplib.SMTP('localhost')\n\ts.sendmail(me, [you], msg.as_string())\n\ts.quit()\n\tprint \"An email has been sent to %s, from %s <%s>.\" % (you, my_identity, me)\n\tprint \"Title of the email : \\n%s\" % subj\n\tprint \"Content of the email : \\n%s\" % message\nimport sys, os\nif __name__ == '__main__':\n  if '-h' in sys.argv or '--help' in sys.argv:",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "defaultaddress",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "defaultaddress = \"jarvisATcransDOTorg\".replace(\"AT\", \"@\").replace(\"DOT\", \".\")\nsignature = \"\"\"\n--\n%s\n\"\"\"\ndef send_me_an_email(message, subj=\"[LOG] no object\", me=defaultaddress,\n                     you=defaultaddress, my_identity=\"jarvis\"):\n    \"\"\" Send a message [message] by email.\n    The content of the email is [message], the subject is [subj].\n    The sender is [me], not necessary a valid sender for the SMTP.",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "signature",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "signature = \"\"\"\n--\n%s\n\"\"\"\ndef send_me_an_email(message, subj=\"[LOG] no object\", me=defaultaddress,\n                     you=defaultaddress, my_identity=\"jarvis\"):\n    \"\"\" Send a message [message] by email.\n    The content of the email is [message], the subject is [subj].\n    The sender is [me], not necessary a valid sender for the SMTP.\n    The mail will be sent to [you].",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "datetoday",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "datetoday = date.today().isoformat()\ndefaultaddress = \"jarvisATcransDOTorg\".replace(\"AT\", \"@\").replace(\"DOT\", \".\")\nsignature = \"\"\"<br>-- <br>%s<br>\n<img style=\\\"display: none; vibility: hidden;\\\" src=\\\"https://ga-beacon.appspot.com/UA-38514290-15/mail_html.py/\"\"\" + datetoday + \"?pixel\\\" />\"\ndef send_me_an_email(message, subj=\"[LOG] no object\", me=defaultaddress,\n                     you=defaultaddress, my_identity=\"jarvis (HTML)\"):\n    \"\"\" Send a message [message] by email.\n    The content of the email is [message] (encoded as HTML), the subject is [subj].\n    The sender is [me], not necessary a valid sender for the SMTP.\n    The mail will be sent to [you].",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "defaultaddress",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "defaultaddress = \"jarvisATcransDOTorg\".replace(\"AT\", \"@\").replace(\"DOT\", \".\")\nsignature = \"\"\"<br>-- <br>%s<br>\n<img style=\\\"display: none; vibility: hidden;\\\" src=\\\"https://ga-beacon.appspot.com/UA-38514290-15/mail_html.py/\"\"\" + datetoday + \"?pixel\\\" />\"\ndef send_me_an_email(message, subj=\"[LOG] no object\", me=defaultaddress,\n                     you=defaultaddress, my_identity=\"jarvis (HTML)\"):\n    \"\"\" Send a message [message] by email.\n    The content of the email is [message] (encoded as HTML), the subject is [subj].\n    The sender is [me], not necessary a valid sender for the SMTP.\n    The mail will be sent to [you].\n    Auto configured with SMTP server (smtp.crans.org) with SSL support for the cr@ns server (http://www.crans.org)",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "signature",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "signature = \"\"\"<br>-- <br>%s<br>\n<img style=\\\"display: none; vibility: hidden;\\\" src=\\\"https://ga-beacon.appspot.com/UA-38514290-15/mail_html.py/\"\"\" + datetoday + \"?pixel\\\" />\"\ndef send_me_an_email(message, subj=\"[LOG] no object\", me=defaultaddress,\n                     you=defaultaddress, my_identity=\"jarvis (HTML)\"):\n    \"\"\" Send a message [message] by email.\n    The content of the email is [message] (encoded as HTML), the subject is [subj].\n    The sender is [me], not necessary a valid sender for the SMTP.\n    The mail will be sent to [you].\n    Auto configured with SMTP server (smtp.crans.org) with SSL support for the cr@ns server (http://www.crans.org)\n    (c) Lilian Besson, 2014.",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "signature",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "signature = \"\"\"\\n\n--\n%s\n\"\"\"\ndef send_me_an_email(message, subj=\"[LOG] no object\", me=\"jarvisATcransDOTorg\".replace(\"AT\", \"@\").replace(\"DOT\", \".\"), you=\"0628412257ATsfrDOTfr\".replace(\"AT\", \"@\").replace(\"DOT\", \".\"), my_identity=\"jarvis log\"):\n    \"\"\" Send a message [message] by email.\n    The content of the email is [message], the subject is [subj].\n    The sender is [me], not necessary a valid sender for the SMTP.\n    The mail will be sent to [you].\n    Auto configure with SMTP server on localhost in the cr@ns server (http://www.crans.org)",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "windows",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "windows = []    # this list contains all view windows\nMARK_CATEGORY_1 = 'one'\nMARK_CATEGORY_2 = 'two'\nDATADIR = '/usr/share'\ndef error_dialog(parent, msg):\n    dialog = gtk.MessageDialog(parent,\n                               gtk.DIALOG_DESTROY_WITH_PARENT,\n                               gtk.MESSAGE_ERROR,\n                               gtk.BUTTONS_OK,\n                               msg)",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "MARK_CATEGORY_1",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "MARK_CATEGORY_1 = 'one'\nMARK_CATEGORY_2 = 'two'\nDATADIR = '/usr/share'\ndef error_dialog(parent, msg):\n    dialog = gtk.MessageDialog(parent,\n                               gtk.DIALOG_DESTROY_WITH_PARENT,\n                               gtk.MESSAGE_ERROR,\n                               gtk.BUTTONS_OK,\n                               msg)\n    dialog.run()",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "MARK_CATEGORY_2",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "MARK_CATEGORY_2 = 'two'\nDATADIR = '/usr/share'\ndef error_dialog(parent, msg):\n    dialog = gtk.MessageDialog(parent,\n                               gtk.DIALOG_DESTROY_WITH_PARENT,\n                               gtk.MESSAGE_ERROR,\n                               gtk.BUTTONS_OK,\n                               msg)\n    dialog.run()\n    dialog.destroy()",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "DATADIR",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "DATADIR = '/usr/share'\ndef error_dialog(parent, msg):\n    dialog = gtk.MessageDialog(parent,\n                               gtk.DIALOG_DESTROY_WITH_PARENT,\n                               gtk.MESSAGE_ERROR,\n                               gtk.BUTTONS_OK,\n                               msg)\n    dialog.run()\n    dialog.destroy()\ndef remove_all_marks(buffer):",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "buffer_actions",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "buffer_actions = [\n    ('Open', gtk.STOCK_OPEN, '_Ouvre', '<control>O', 'Ouvre un fichier', open_file_cb),\n    ('Quit', gtk.STOCK_QUIT, '_Quitte', '<control>Q', 'Quitte l\\'application', gtk.main_quit)\n]\nview_actions = [\n    ('FileMenu', None, '_Fichier'),\n    ('ViewMenu', None, '_Vue'),\n    ('Print', gtk.STOCK_PRINT, '_Impression', '<control>P', 'Print the file', print_cb),\n    ('NewView', gtk.STOCK_NEW, '_Nouvelle Vue', None, 'Create a new view of the file', new_view_cb),\n    ('TabsWidth', None, '_Largeur des tabulations')",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "view_actions",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "view_actions = [\n    ('FileMenu', None, '_Fichier'),\n    ('ViewMenu', None, '_Vue'),\n    ('Print', gtk.STOCK_PRINT, '_Impression', '<control>P', 'Print the file', print_cb),\n    ('NewView', gtk.STOCK_NEW, '_Nouvelle Vue', None, 'Create a new view of the file', new_view_cb),\n    ('TabsWidth', None, '_Largeur des tabulations')\n]\ntoggle_actions = [\n    ('ShowNumbers', None, 'Montre les numéros de _lignes', None, 'Toggle visibility of line numbers in the left margin', numbers_toggled_cb, False),\n    ('ShowMarkers', None, 'Montre les _Marqueurs', None, 'Toggle visibility of markers in the left margin', marks_toggled_cb, False),",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "toggle_actions",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "toggle_actions = [\n    ('ShowNumbers', None, 'Montre les numéros de _lignes', None, 'Toggle visibility of line numbers in the left margin', numbers_toggled_cb, False),\n    ('ShowMarkers', None, 'Montre les _Marqueurs', None, 'Toggle visibility of markers in the left margin', marks_toggled_cb, False),\n    ('ShowMargin', None, 'Montre les M_arges', None, 'Toggle visibility of right margin indicator', margin_toggled_cb, False),\n    ('AutoIndent', None, 'Activer l\\'_auto-indentation', None, 'Toggle automatic auto indentation of text', auto_indent_toggled_cb, False),\n    ('InsertSpaces', None, 'Insérer des e_spaces au lieu des tabulations', None, 'Whether to insert space characters when inserting tabulations', insert_spaces_toggled_cb, False)\n]\nradio_actions = [\n    ('TabsWidth4', None, '4', None, 'Set tabulation width to 4 spaces', 4),\n    ('TabsWidth6', None, '6', None, 'Set tabulation width to 6 spaces', 6),",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "radio_actions",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "radio_actions = [\n    ('TabsWidth4', None, '4', None, 'Set tabulation width to 4 spaces', 4),\n    ('TabsWidth6', None, '6', None, 'Set tabulation width to 6 spaces', 6),\n    ('TabsWidth8', None, '8', None, 'Set tabulation width to 8 spaces', 8),\n    ('TabsWidth10', None, '10', None, 'Set tabulation width to 10 spaces', 10),\n    ('TabsWidth12', None, '12', None, 'Set tabulation width to 12 spaces', 12),\n    ('TabsWidth14', None, '14', None, 'Set tabulation width to 14 spaces', 14)\n]\nview_ui_description = \"\"\"\n<ui>",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "view_ui_description",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "view_ui_description = \"\"\"\n<ui>\n  <menubar name='MainMenu'>\n    <menu action='FileMenu'>\n      <menuitem action='NewView'/>\n      <placeholder name=\"FileMenuAdditions\"/>\n      <separator/>\n      <menuitem action='Print'/>\n    </menu>\n    <menu action='ViewMenu'>",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "buffer_ui_description",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "buffer_ui_description = \"\"\"\n<ui>\n  <menubar name='MainMenu'>\n    <menu action='FileMenu'>\n      <placeholder name=\"FileMenuAdditions\">\n        <menuitem action='Open'/>\n      </placeholder>\n      <separator/>\n      <menuitem action='Quit'/>\n    </menu>",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "MINUTES",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "MINUTES = 60\nHOURS = 60 * MINUTES\nQUOTE_FILE = os.getenv(\"quotes\", expanduser(join(\"~\", \".quotes.txt\")))\nSLACK_TOKEN = open(expanduser(join(\"~\", \".slack_api_key\")), 'r').readline().strip()\nUSE_CHANNEL = False  # DEBUG\nUSE_CHANNEL = True\nSLACK_USER = \"@lilian\"\nSLACK_CHANNEL = \"#random\"\nMEAN_TIME = (12 * HOURS) if USE_CHANNEL else 30\nURL = \"https://bitbucket.org/lbesson/bin/src/master/my-small-slack-bot.py\"",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "HOURS",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "HOURS = 60 * MINUTES\nQUOTE_FILE = os.getenv(\"quotes\", expanduser(join(\"~\", \".quotes.txt\")))\nSLACK_TOKEN = open(expanduser(join(\"~\", \".slack_api_key\")), 'r').readline().strip()\nUSE_CHANNEL = False  # DEBUG\nUSE_CHANNEL = True\nSLACK_USER = \"@lilian\"\nSLACK_CHANNEL = \"#random\"\nMEAN_TIME = (12 * HOURS) if USE_CHANNEL else 30\nURL = \"https://bitbucket.org/lbesson/bin/src/master/my-small-slack-bot.py\"\nPOSITIVE_REACTIONS = ['up', '+1', 'thumbsup']",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "QUOTE_FILE",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "QUOTE_FILE = os.getenv(\"quotes\", expanduser(join(\"~\", \".quotes.txt\")))\nSLACK_TOKEN = open(expanduser(join(\"~\", \".slack_api_key\")), 'r').readline().strip()\nUSE_CHANNEL = False  # DEBUG\nUSE_CHANNEL = True\nSLACK_USER = \"@lilian\"\nSLACK_CHANNEL = \"#random\"\nMEAN_TIME = (12 * HOURS) if USE_CHANNEL else 30\nURL = \"https://bitbucket.org/lbesson/bin/src/master/my-small-slack-bot.py\"\nPOSITIVE_REACTIONS = ['up', '+1', 'thumbsup']\nNEGATIVES_REACTIONS = ['down', '-1', 'thumbsdown']",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "SLACK_TOKEN",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "SLACK_TOKEN = open(expanduser(join(\"~\", \".slack_api_key\")), 'r').readline().strip()\nUSE_CHANNEL = False  # DEBUG\nUSE_CHANNEL = True\nSLACK_USER = \"@lilian\"\nSLACK_CHANNEL = \"#random\"\nMEAN_TIME = (12 * HOURS) if USE_CHANNEL else 30\nURL = \"https://bitbucket.org/lbesson/bin/src/master/my-small-slack-bot.py\"\nPOSITIVE_REACTIONS = ['up', '+1', 'thumbsup']\nNEGATIVES_REACTIONS = ['down', '-1', 'thumbsdown']\n# --- Functions",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "USE_CHANNEL",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "USE_CHANNEL = False  # DEBUG\nUSE_CHANNEL = True\nSLACK_USER = \"@lilian\"\nSLACK_CHANNEL = \"#random\"\nMEAN_TIME = (12 * HOURS) if USE_CHANNEL else 30\nURL = \"https://bitbucket.org/lbesson/bin/src/master/my-small-slack-bot.py\"\nPOSITIVE_REACTIONS = ['up', '+1', 'thumbsup']\nNEGATIVES_REACTIONS = ['down', '-1', 'thumbsdown']\n# --- Functions\ndef sleeptime(lmbda=MEAN_TIME, use_poisson=True):",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "USE_CHANNEL",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "USE_CHANNEL = True\nSLACK_USER = \"@lilian\"\nSLACK_CHANNEL = \"#random\"\nMEAN_TIME = (12 * HOURS) if USE_CHANNEL else 30\nURL = \"https://bitbucket.org/lbesson/bin/src/master/my-small-slack-bot.py\"\nPOSITIVE_REACTIONS = ['up', '+1', 'thumbsup']\nNEGATIVES_REACTIONS = ['down', '-1', 'thumbsdown']\n# --- Functions\ndef sleeptime(lmbda=MEAN_TIME, use_poisson=True):\n    \"\"\"Random time until next message.\"\"\"",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "SLACK_USER",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "SLACK_USER = \"@lilian\"\nSLACK_CHANNEL = \"#random\"\nMEAN_TIME = (12 * HOURS) if USE_CHANNEL else 30\nURL = \"https://bitbucket.org/lbesson/bin/src/master/my-small-slack-bot.py\"\nPOSITIVE_REACTIONS = ['up', '+1', 'thumbsup']\nNEGATIVES_REACTIONS = ['down', '-1', 'thumbsdown']\n# --- Functions\ndef sleeptime(lmbda=MEAN_TIME, use_poisson=True):\n    \"\"\"Random time until next message.\"\"\"\n    if use_poisson:",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "SLACK_CHANNEL",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "SLACK_CHANNEL = \"#random\"\nMEAN_TIME = (12 * HOURS) if USE_CHANNEL else 30\nURL = \"https://bitbucket.org/lbesson/bin/src/master/my-small-slack-bot.py\"\nPOSITIVE_REACTIONS = ['up', '+1', 'thumbsup']\nNEGATIVES_REACTIONS = ['down', '-1', 'thumbsdown']\n# --- Functions\ndef sleeptime(lmbda=MEAN_TIME, use_poisson=True):\n    \"\"\"Random time until next message.\"\"\"\n    if use_poisson:\n        return poisson(lmbda)",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "MEAN_TIME",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "MEAN_TIME = (12 * HOURS) if USE_CHANNEL else 30\nURL = \"https://bitbucket.org/lbesson/bin/src/master/my-small-slack-bot.py\"\nPOSITIVE_REACTIONS = ['up', '+1', 'thumbsup']\nNEGATIVES_REACTIONS = ['down', '-1', 'thumbsdown']\n# --- Functions\ndef sleeptime(lmbda=MEAN_TIME, use_poisson=True):\n    \"\"\"Random time until next message.\"\"\"\n    if use_poisson:\n        return poisson(lmbda)\n    else:",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "URL",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "URL = \"https://bitbucket.org/lbesson/bin/src/master/my-small-slack-bot.py\"\nPOSITIVE_REACTIONS = ['up', '+1', 'thumbsup']\nNEGATIVES_REACTIONS = ['down', '-1', 'thumbsdown']\n# --- Functions\ndef sleeptime(lmbda=MEAN_TIME, use_poisson=True):\n    \"\"\"Random time until next message.\"\"\"\n    if use_poisson:\n        return poisson(lmbda)\n    else:\n        return lmbda",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "POSITIVE_REACTIONS",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "POSITIVE_REACTIONS = ['up', '+1', 'thumbsup']\nNEGATIVES_REACTIONS = ['down', '-1', 'thumbsdown']\n# --- Functions\ndef sleeptime(lmbda=MEAN_TIME, use_poisson=True):\n    \"\"\"Random time until next message.\"\"\"\n    if use_poisson:\n        return poisson(lmbda)\n    else:\n        return lmbda\ndef sleep_bar(secs):",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "NEGATIVES_REACTIONS",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "NEGATIVES_REACTIONS = ['down', '-1', 'thumbsdown']\n# --- Functions\ndef sleeptime(lmbda=MEAN_TIME, use_poisson=True):\n    \"\"\"Random time until next message.\"\"\"\n    if use_poisson:\n        return poisson(lmbda)\n    else:\n        return lmbda\ndef sleep_bar(secs):\n    \"\"\"Sleep with a bar, or not\"\"\"",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "CM_IceAndFire",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "CM_IceAndFire = ColorMap([(0.00, (0.0, 0.0, 1.0)),\n                         (0.25, (0.0, 0.5, 1.0)),\n                         (0.50, (1.0, 1.0, 1.0)),\n                         (0.75, (1.0, 1.0, 0.0)),\n                         (1.00, (1.0, 0.0, 0.0))], \"Ice and Fire\")\n# ==> GAME OF THRONES !\nCM_Ice = ColorMap([(0.00, (0.0, 0.0, 1.0)),\n                   (0.50, (0.5, 0.5, 1.0)),\n                   (1.00, (1.0, 1.0, 1.0))], \"Ice\")\nCM_Fire = ColorMap([(0.00, (1.0, 1.0, 1.0)),",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "CM_Ice",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "CM_Ice = ColorMap([(0.00, (0.0, 0.0, 1.0)),\n                   (0.50, (0.5, 0.5, 1.0)),\n                   (1.00, (1.0, 1.0, 1.0))], \"Ice\")\nCM_Fire = ColorMap([(0.00, (1.0, 1.0, 1.0)),\n                    (0.50, (1.0, 1.0, 0.0)),\n                    (1.00, (1.0, 0.0, 0.0))], \"Fire\")\nCM_Hot = ColorMap([(0.00, (0.0, 0.0, 0.0)),\n                   (0.33, (1.0, 0.0, 0.0)),\n                   (0.66, (1.0, 1.0, 0.0)),\n                   (1.00, (1.0, 1.0, 1.0))], \"Hot\")",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "CM_Fire",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "CM_Fire = ColorMap([(0.00, (1.0, 1.0, 1.0)),\n                    (0.50, (1.0, 1.0, 0.0)),\n                    (1.00, (1.0, 0.0, 0.0))], \"Fire\")\nCM_Hot = ColorMap([(0.00, (0.0, 0.0, 0.0)),\n                   (0.33, (1.0, 0.0, 0.0)),\n                   (0.66, (1.0, 1.0, 0.0)),\n                   (1.00, (1.0, 1.0, 1.0))], \"Hot\")\nCM_Grey = ColorMap([(0.00, (0.0, 0.0, 0.0)),\n                    (1.00, (1.0, 1.0, 1.0))], \"Grey\")\ndef termimshow(Z, vmin=None, vmax=None, cmap=CM_Hot, show_cmap=True):",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "CM_Hot",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "CM_Hot = ColorMap([(0.00, (0.0, 0.0, 0.0)),\n                   (0.33, (1.0, 0.0, 0.0)),\n                   (0.66, (1.0, 1.0, 0.0)),\n                   (1.00, (1.0, 1.0, 1.0))], \"Hot\")\nCM_Grey = ColorMap([(0.00, (0.0, 0.0, 0.0)),\n                    (1.00, (1.0, 1.0, 1.0))], \"Grey\")\ndef termimshow(Z, vmin=None, vmax=None, cmap=CM_Hot, show_cmap=True):\n    \"\"\" Show a 2D numpy array using terminal colors. \"\"\"\n    if len(Z.shape) != 2:\n        print(\"Cannot display non 2D array\")",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "CM_Grey",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "CM_Grey = ColorMap([(0.00, (0.0, 0.0, 0.0)),\n                    (1.00, (1.0, 1.0, 1.0))], \"Grey\")\ndef termimshow(Z, vmin=None, vmax=None, cmap=CM_Hot, show_cmap=True):\n    \"\"\" Show a 2D numpy array using terminal colors. \"\"\"\n    if len(Z.shape) != 2:\n        print(\"Cannot display non 2D array\")\n        return\n    vmin = vmin or Z.min()\n    vmax = vmax or Z.max()\n    cmap.scale(vmin, vmax)",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "URL",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "URL = 'http://p.boxnet.eu/'\nclass PasteBox:\n    def __init__(self):\n        self.replyid = 0\n        self.mode = 'text'\n        self.ttl = 86400\n        self.authhash = None\n    def create(self, content):\n        VALUES = {'content': content,\n                  'replyid': self.replyid,",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "csv_file",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "csv_file = sys.argv[1]\ncsv_name = csv_file[:-3]\n#: Load in the csv file\ncsv_file_object = csv.reader(open(csv_file, 'rb'))\n#: Skip the fist line as it is a header\nheader = csv_file_object.next()\ndata = []\nfor row in csv_file_object:\n    data.append(row)  # adding each row to the data variable\n#: Then convert from a list to an array",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "csv_name",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "csv_name = csv_file[:-3]\n#: Load in the csv file\ncsv_file_object = csv.reader(open(csv_file, 'rb'))\n#: Skip the fist line as it is a header\nheader = csv_file_object.next()\ndata = []\nfor row in csv_file_object:\n    data.append(row)  # adding each row to the data variable\n#: Then convert from a list to an array\ndata = np.array(data)",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "csv_file_object",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "csv_file_object = csv.reader(open(csv_file, 'rb'))\n#: Skip the fist line as it is a header\nheader = csv_file_object.next()\ndata = []\nfor row in csv_file_object:\n    data.append(row)  # adding each row to the data variable\n#: Then convert from a list to an array\ndata = np.array(data)\n#: Just the notes\nnotes = data[::, 1].astype(np.float)",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "header",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "header = csv_file_object.next()\ndata = []\nfor row in csv_file_object:\n    data.append(row)  # adding each row to the data variable\n#: Then convert from a list to an array\ndata = np.array(data)\n#: Just the notes\nnotes = data[::, 1].astype(np.float)\nnbnotes = np.size(notes)\n#: Sort decreasingly",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "data",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "data = []\nfor row in csv_file_object:\n    data.append(row)  # adding each row to the data variable\n#: Then convert from a list to an array\ndata = np.array(data)\n#: Just the notes\nnotes = data[::, 1].astype(np.float)\nnbnotes = np.size(notes)\n#: Sort decreasingly\nind = np.argsort(notes)",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "data",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "data = np.array(data)\n#: Just the notes\nnotes = data[::, 1].astype(np.float)\nnbnotes = np.size(notes)\n#: Sort decreasingly\nind = np.argsort(notes)\ndata = data[ind[::-1]]\nnotes = notes[ind[::-1]]\n#: The grades are between 0 and this value. Default is the French convention: 20.\nnoteMax = 20",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "notes",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "notes = data[::, 1].astype(np.float)\nnbnotes = np.size(notes)\n#: Sort decreasingly\nind = np.argsort(notes)\ndata = data[ind[::-1]]\nnotes = notes[ind[::-1]]\n#: The grades are between 0 and this value. Default is the French convention: 20.\nnoteMax = 20\n###################################################################\n# I want now to produce annex files",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "nbnotes",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "nbnotes = np.size(notes)\n#: Sort decreasingly\nind = np.argsort(notes)\ndata = data[ind[::-1]]\nnotes = notes[ind[::-1]]\n#: The grades are between 0 and this value. Default is the French convention: 20.\nnoteMax = 20\n###################################################################\n# I want now to produce annex files\nf = file(csv_name + \"table\", 'w')",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "ind",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "ind = np.argsort(notes)\ndata = data[ind[::-1]]\nnotes = notes[ind[::-1]]\n#: The grades are between 0 and this value. Default is the French convention: 20.\nnoteMax = 20\n###################################################################\n# I want now to produce annex files\nf = file(csv_name + \"table\", 'w')\nf.write(\"%% Notes from '%s'\" % f.name)\nfor i in range(nbnotes):",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "data",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "data = data[ind[::-1]]\nnotes = notes[ind[::-1]]\n#: The grades are between 0 and this value. Default is the French convention: 20.\nnoteMax = 20\n###################################################################\n# I want now to produce annex files\nf = file(csv_name + \"table\", 'w')\nf.write(\"%% Notes from '%s'\" % f.name)\nfor i in range(nbnotes):\n    f.write(\"\\n%s & %g/%i \\\\\\\\\" % (data[i, 0], notes[i], noteMax))",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "notes",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "notes = notes[ind[::-1]]\n#: The grades are between 0 and this value. Default is the French convention: 20.\nnoteMax = 20\n###################################################################\n# I want now to produce annex files\nf = file(csv_name + \"table\", 'w')\nf.write(\"%% Notes from '%s'\" % f.name)\nfor i in range(nbnotes):\n    f.write(\"\\n%s & %g/%i \\\\\\\\\" % (data[i, 0], notes[i], noteMax))\n    print(\"I wrote <blue>'%s & %g/%i \\\\\\\\'<white> in <u>%s<U>...\" % (data[i, 0], notes[i], noteMax, f.name))",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "noteMax",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "noteMax = 20\n###################################################################\n# I want now to produce annex files\nf = file(csv_name + \"table\", 'w')\nf.write(\"%% Notes from '%s'\" % f.name)\nfor i in range(nbnotes):\n    f.write(\"\\n%s & %g/%i \\\\\\\\\" % (data[i, 0], notes[i], noteMax))\n    print(\"I wrote <blue>'%s & %g/%i \\\\\\\\'<white> in <u>%s<U>...\" % (data[i, 0], notes[i], noteMax, f.name))\nminimale = np.min(notes)\nf = file(csv_name + \"minimale\", 'w')",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "f",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "f = file(csv_name + \"table\", 'w')\nf.write(\"%% Notes from '%s'\" % f.name)\nfor i in range(nbnotes):\n    f.write(\"\\n%s & %g/%i \\\\\\\\\" % (data[i, 0], notes[i], noteMax))\n    print(\"I wrote <blue>'%s & %g/%i \\\\\\\\'<white> in <u>%s<U>...\" % (data[i, 0], notes[i], noteMax, f.name))\nminimale = np.min(notes)\nf = file(csv_name + \"minimale\", 'w')\nf.write(\"%g/%i\" % (minimale, noteMax))\nprint(\"I wrote the value of minimale (<cyan>%g<white>) to <u>%s<U>...\" % (minimale, f.name))\nargminimale = data[np.argmin(notes), 0]",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "minimale",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "minimale = np.min(notes)\nf = file(csv_name + \"minimale\", 'w')\nf.write(\"%g/%i\" % (minimale, noteMax))\nprint(\"I wrote the value of minimale (<cyan>%g<white>) to <u>%s<U>...\" % (minimale, f.name))\nargminimale = data[np.argmin(notes), 0]\nf = file(csv_name + \"argminimale\", 'w')\nf.write(\"%s\" % argminimale)\nprint(\"I wrote the value of argminimale (<cyan>%s<white>) to <u>%s<U>...\" % (argminimale, f.name))\nmaximale = np.max(notes)\nf = file(csv_name + \"maximale\", 'w')",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "f",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "f = file(csv_name + \"minimale\", 'w')\nf.write(\"%g/%i\" % (minimale, noteMax))\nprint(\"I wrote the value of minimale (<cyan>%g<white>) to <u>%s<U>...\" % (minimale, f.name))\nargminimale = data[np.argmin(notes), 0]\nf = file(csv_name + \"argminimale\", 'w')\nf.write(\"%s\" % argminimale)\nprint(\"I wrote the value of argminimale (<cyan>%s<white>) to <u>%s<U>...\" % (argminimale, f.name))\nmaximale = np.max(notes)\nf = file(csv_name + \"maximale\", 'w')\nf.write(\"%g/%i\" % (maximale, noteMax))",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "argminimale",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "argminimale = data[np.argmin(notes), 0]\nf = file(csv_name + \"argminimale\", 'w')\nf.write(\"%s\" % argminimale)\nprint(\"I wrote the value of argminimale (<cyan>%s<white>) to <u>%s<U>...\" % (argminimale, f.name))\nmaximale = np.max(notes)\nf = file(csv_name + \"maximale\", 'w')\nf.write(\"%g/%i\" % (maximale, noteMax))\nprint(\"I wrote the value of maximale (<cyan>%g<white>) to <u>%s<U>...\" % (maximale, f.name))\nargmaximale = data[np.argmax(notes), 0]\nf = file(csv_name + \"argmaximale\", 'w')",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "f",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "f = file(csv_name + \"argminimale\", 'w')\nf.write(\"%s\" % argminimale)\nprint(\"I wrote the value of argminimale (<cyan>%s<white>) to <u>%s<U>...\" % (argminimale, f.name))\nmaximale = np.max(notes)\nf = file(csv_name + \"maximale\", 'w')\nf.write(\"%g/%i\" % (maximale, noteMax))\nprint(\"I wrote the value of maximale (<cyan>%g<white>) to <u>%s<U>...\" % (maximale, f.name))\nargmaximale = data[np.argmax(notes), 0]\nf = file(csv_name + \"argmaximale\", 'w')\nf.write(\"%s\" % argmaximale)",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "maximale",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "maximale = np.max(notes)\nf = file(csv_name + \"maximale\", 'w')\nf.write(\"%g/%i\" % (maximale, noteMax))\nprint(\"I wrote the value of maximale (<cyan>%g<white>) to <u>%s<U>...\" % (maximale, f.name))\nargmaximale = data[np.argmax(notes), 0]\nf = file(csv_name + \"argmaximale\", 'w')\nf.write(\"%s\" % argmaximale)\nprint(\"I wrote the value of argmaximale (<cyan>%s<white>) to <u>%s<U>...\" % (argmaximale, f.name))\nmoyenne = np.mean(notes)\nf = file(csv_name + \"moyenne\", 'w')",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "f",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "f = file(csv_name + \"maximale\", 'w')\nf.write(\"%g/%i\" % (maximale, noteMax))\nprint(\"I wrote the value of maximale (<cyan>%g<white>) to <u>%s<U>...\" % (maximale, f.name))\nargmaximale = data[np.argmax(notes), 0]\nf = file(csv_name + \"argmaximale\", 'w')\nf.write(\"%s\" % argmaximale)\nprint(\"I wrote the value of argmaximale (<cyan>%s<white>) to <u>%s<U>...\" % (argmaximale, f.name))\nmoyenne = np.mean(notes)\nf = file(csv_name + \"moyenne\", 'w')\nf.write(\"%2.2g/%i\" % (moyenne, noteMax))",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "argmaximale",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "argmaximale = data[np.argmax(notes), 0]\nf = file(csv_name + \"argmaximale\", 'w')\nf.write(\"%s\" % argmaximale)\nprint(\"I wrote the value of argmaximale (<cyan>%s<white>) to <u>%s<U>...\" % (argmaximale, f.name))\nmoyenne = np.mean(notes)\nf = file(csv_name + \"moyenne\", 'w')\nf.write(\"%2.2g/%i\" % (moyenne, noteMax))\nprint(\"I wrote the value of moyenne (<cyan>%2.2g<white>) to <u>%s<U>...\" % (moyenne, f.name))\necarttype = np.std(notes)\nf = file(csv_name + \"ecarttype\", 'w')",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "f",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "f = file(csv_name + \"argmaximale\", 'w')\nf.write(\"%s\" % argmaximale)\nprint(\"I wrote the value of argmaximale (<cyan>%s<white>) to <u>%s<U>...\" % (argmaximale, f.name))\nmoyenne = np.mean(notes)\nf = file(csv_name + \"moyenne\", 'w')\nf.write(\"%2.2g/%i\" % (moyenne, noteMax))\nprint(\"I wrote the value of moyenne (<cyan>%2.2g<white>) to <u>%s<U>...\" % (moyenne, f.name))\necarttype = np.std(notes)\nf = file(csv_name + \"ecarttype\", 'w')\nf.write(\"%2.2g\" % ecarttype)",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "moyenne",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "moyenne = np.mean(notes)\nf = file(csv_name + \"moyenne\", 'w')\nf.write(\"%2.2g/%i\" % (moyenne, noteMax))\nprint(\"I wrote the value of moyenne (<cyan>%2.2g<white>) to <u>%s<U>...\" % (moyenne, f.name))\necarttype = np.std(notes)\nf = file(csv_name + \"ecarttype\", 'w')\nf.write(\"%2.2g\" % ecarttype)\nprint(\"I wrote the value of ecarttype (<cyan>%2.2g<white>) to <u>%s<U>...\" % (ecarttype, f.name))\nvariance = np.var(notes)\nf = file(csv_name + \"variance\", 'w')",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "f",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "f = file(csv_name + \"moyenne\", 'w')\nf.write(\"%2.2g/%i\" % (moyenne, noteMax))\nprint(\"I wrote the value of moyenne (<cyan>%2.2g<white>) to <u>%s<U>...\" % (moyenne, f.name))\necarttype = np.std(notes)\nf = file(csv_name + \"ecarttype\", 'w')\nf.write(\"%2.2g\" % ecarttype)\nprint(\"I wrote the value of ecarttype (<cyan>%2.2g<white>) to <u>%s<U>...\" % (ecarttype, f.name))\nvariance = np.var(notes)\nf = file(csv_name + \"variance\", 'w')\nf.write(\"%2.2g\" % variance)",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "ecarttype",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "ecarttype = np.std(notes)\nf = file(csv_name + \"ecarttype\", 'w')\nf.write(\"%2.2g\" % ecarttype)\nprint(\"I wrote the value of ecarttype (<cyan>%2.2g<white>) to <u>%s<U>...\" % (ecarttype, f.name))\nvariance = np.var(notes)\nf = file(csv_name + \"variance\", 'w')\nf.write(\"%2.2g\" % variance)\nprint(\"I wrote the value of variance (<cyan>%2.2g<white>) to <u>%s<U>...\" % (variance, f.name))\n###################################################################\n# I want now to plot some graphics about the datas, with matplotlib",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "f",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "f = file(csv_name + \"ecarttype\", 'w')\nf.write(\"%2.2g\" % ecarttype)\nprint(\"I wrote the value of ecarttype (<cyan>%2.2g<white>) to <u>%s<U>...\" % (ecarttype, f.name))\nvariance = np.var(notes)\nf = file(csv_name + \"variance\", 'w')\nf.write(\"%2.2g\" % variance)\nprint(\"I wrote the value of variance (<cyan>%2.2g<white>) to <u>%s<U>...\" % (variance, f.name))\n###################################################################\n# I want now to plot some graphics about the datas, with matplotlib\nprint(\"\\nPloting some graphics from <u>%s<U> (<neg><green>%i student(s)<Neg><white>)...\" % (csv_name + \"csv\", nbnotes))",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "variance",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "variance = np.var(notes)\nf = file(csv_name + \"variance\", 'w')\nf.write(\"%2.2g\" % variance)\nprint(\"I wrote the value of variance (<cyan>%2.2g<white>) to <u>%s<U>...\" % (variance, f.name))\n###################################################################\n# I want now to plot some graphics about the datas, with matplotlib\nprint(\"\\nPloting some graphics from <u>%s<U> (<neg><green>%i student(s)<Neg><white>)...\" % (csv_name + \"csv\", nbnotes))\n#: Graph options\npylab.xlabel(u\"Notes (entre $0$ et $%i$)\" % noteMax)\npylab.ylabel(u\"Nombre d'élève(s) ayant eu cette note\")",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "f",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "f = file(csv_name + \"variance\", 'w')\nf.write(\"%2.2g\" % variance)\nprint(\"I wrote the value of variance (<cyan>%2.2g<white>) to <u>%s<U>...\" % (variance, f.name))\n###################################################################\n# I want now to plot some graphics about the datas, with matplotlib\nprint(\"\\nPloting some graphics from <u>%s<U> (<neg><green>%i student(s)<Neg><white>)...\" % (csv_name + \"csv\", nbnotes))\n#: Graph options\npylab.xlabel(u\"Notes (entre $0$ et $%i$)\" % noteMax)\npylab.ylabel(u\"Nombre d'élève(s) ayant eu cette note\")\npylab.title(u\"Répartition des notes dans la classe\")",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "idc",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "idc = xvalues > 0\npylab.plot(bins[:-1][idc], xvalues[idc], 'g*--', linewidth=.5, markersize=18)\npylab.xticks(bins[:-1][idc])\n# Tweak spacing to prevent clipping of ylabel\npylab.subplots_adjust(left=0.15)\n# pylab.show()\npylab.savefig(csv_name + \"pdf\")\nprint(\"Ploting the grades repartition on an histogram: <u>\" + csv_name + \"pdf<U>\")\npylab.draw()\npylab.clf()",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "Q",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "Q = [ Int('Q_%i' % (i + 1)) for i in range(8) ]\n# Each queen is in a column {1, ... 8 }\nval_c = [ And(1 <= Q[i], Q[i] <= 8) for i in range(8) ]\n# At most one queen per column\ncol_c = [ Distinct(Q) ]\n# Diagonal constraint\ndiag_c = [ If(i == j,\n              True,\n              And(Q[i] - Q[j] != i - j, Q[i] - Q[j] != j - i))\n           for i in range(8) for j in range(i) ]",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "val_c",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "val_c = [ And(1 <= Q[i], Q[i] <= 8) for i in range(8) ]\n# At most one queen per column\ncol_c = [ Distinct(Q) ]\n# Diagonal constraint\ndiag_c = [ If(i == j,\n              True,\n              And(Q[i] - Q[j] != i - j, Q[i] - Q[j] != j - i))\n           for i in range(8) for j in range(i) ]\nsolve(val_c + col_c + diag_c)\n#!/usr/bin/env python3",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "col_c",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "col_c = [ Distinct(Q) ]\n# Diagonal constraint\ndiag_c = [ If(i == j,\n              True,\n              And(Q[i] - Q[j] != i - j, Q[i] - Q[j] != j - i))\n           for i in range(8) for j in range(i) ]\nsolve(val_c + col_c + diag_c)\n#!/usr/bin/env python3\n#-*- coding: utf8 -*-\n\"\"\"Produce text from a list of sentences, inspired by https://github.com/jilljenn/markov.py\"\"\"",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "diag_c",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "diag_c = [ If(i == j,\n              True,\n              And(Q[i] - Q[j] != i - j, Q[i] - Q[j] != j - i))\n           for i in range(8) for j in range(i) ]\nsolve(val_c + col_c + diag_c)\n#!/usr/bin/env python3\n#-*- coding: utf8 -*-\n\"\"\"Produce text from a list of sentences, inspired by https://github.com/jilljenn/markov.py\"\"\"\nimport argparse\nimport os",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "WORD_LIST",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "WORD_LIST = '/home/lilian/bin/latin.txt'\ndef markov(corpus, start, length):\n    # Counting occurrences\n    next_one = defaultdict(Counter)\n    for sentence in corpus:\n        words = sentence.split()\n        nb_words = len(words)\n        for i in range(nb_words - 1):\n            next_one[words[i]][words[i + 1]] += 1\n    # Initializing states",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "description",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "description = ('Generates Markdown formatted text from standalone '\n               'reStructuredText sources.  ' + default_description)\npublish_cmdline(writer=markdown.Writer(), description=description)\n/home/lilian/publis/selfspy-vis/selfvis.py\n#! /usr/bin/env python2\n# -*- coding: utf-8; mode: python -*-\n\"\"\" A tiny Python script to call sleep for a random time, drawn from a Poisson distribution of a certain mean time.\nRequirements:\n- numpy.random (poisson) is needed.\nAbout:",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "MINUTE",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "MINUTE = 60\nMEAN_TIME = 3 * MINUTE\n# --- Main script\nif __name__ == '__main__':\n    mean_time = int(sys.argv[1]) if len(sys.argv) > 1 else MEAN_TIME\n    waiting_time = poisson(mean_time)\n    print(\"Sleeping for {:.3g} seconds ...\".format(waiting_time))  # DEBUG\n    sys.exit(sleep(waiting_time))\n# End of sleep-poisson-time.py\n#!/usr/bin/env python3",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "MEAN_TIME",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "MEAN_TIME = 3 * MINUTE\n# --- Main script\nif __name__ == '__main__':\n    mean_time = int(sys.argv[1]) if len(sys.argv) > 1 else MEAN_TIME\n    waiting_time = poisson(mean_time)\n    print(\"Sleeping for {:.3g} seconds ...\".format(waiting_time))  # DEBUG\n    sys.exit(sleep(waiting_time))\n# End of sleep-poisson-time.py\n#!/usr/bin/env python3\n# -*- coding: utf8 -*-",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "smooth_jit",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "smooth_jit = numba.jit(smooth_nojit)\n# <- factor ×100 speed-up!\nif __name__ == '__main__':\n    print(\"For 1e6 points...\")\n    u = np.random.randn(int(1e6), 1)\n    a = 0.95\n    start = time()\n    smooth_nojit(u, a)\n    print(f\"No jit: {time() - start:.3g} seconds\")\n    start = time()",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "__author__",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "__author__ = \"Lilian Besson\"\n__version__ = \"0.3.1\"\n# TODO: improve conformity with StrapDown.js Markdown parser:\n# nested list for instance, generic source code printer etc.\ntry:\n    try:\n        # Load ansicolortags (Cf. http://ansicolortags.readthedocs.io/)\n        from ansicolortags import printc\n    except ImportError as e:\n        print(\"Optional dependancy (ansicolortags) is not available, using regular print function.\")",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "__version__",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "__version__ = \"0.3.1\"\n# TODO: improve conformity with StrapDown.js Markdown parser:\n# nested list for instance, generic source code printer etc.\ntry:\n    try:\n        # Load ansicolortags (Cf. http://ansicolortags.readthedocs.io/)\n        from ansicolortags import printc\n    except ImportError as e:\n        print(\"Optional dependancy (ansicolortags) is not available, using regular print function.\")\n        print(\"  You can install it with : 'pip install ansicolortags' (or sudo pip)...\")",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "sys.stdout",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "sys.stdout = codecs.getwriter('utf-8')(sys.stdout)\nbeta = False\neraseFileAlreadyThere = False\ndef main(argv=[], path='/tmp', outfile='test.html', title='Test', use_jquery=False):\n    \"\"\" Convert every input file from Markdown to HTML, and concatenate all them to an output.\"\"\"\n    printc(\"<green>Starting main, with:<white>\")\n    # FIXME printc does not handle UTF-8 correctly ! AAAH!\n    print(\"path='{path}', outfile='{outfile}'.\".format(path=path, outfile=outfile))\n    print(\"And the title is:\", title)\n    fullpath = os.path.join(path, outfile)",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "beta",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "beta = False\neraseFileAlreadyThere = False\ndef main(argv=[], path='/tmp', outfile='test.html', title='Test', use_jquery=False):\n    \"\"\" Convert every input file from Markdown to HTML, and concatenate all them to an output.\"\"\"\n    printc(\"<green>Starting main, with:<white>\")\n    # FIXME printc does not handle UTF-8 correctly ! AAAH!\n    print(\"path='{path}', outfile='{outfile}'.\".format(path=path, outfile=outfile))\n    print(\"And the title is:\", title)\n    fullpath = os.path.join(path, outfile)\n    printc(\"<magenta>The output file will be <white>'<u>{fullpath}<U>'.\".format(fullpath=fullpath))",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "eraseFileAlreadyThere",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "eraseFileAlreadyThere = False\ndef main(argv=[], path='/tmp', outfile='test.html', title='Test', use_jquery=False):\n    \"\"\" Convert every input file from Markdown to HTML, and concatenate all them to an output.\"\"\"\n    printc(\"<green>Starting main, with:<white>\")\n    # FIXME printc does not handle UTF-8 correctly ! AAAH!\n    print(\"path='{path}', outfile='{outfile}'.\".format(path=path, outfile=outfile))\n    print(\"And the title is:\", title)\n    fullpath = os.path.join(path, outfile)\n    printc(\"<magenta>The output file will be <white>'<u>{fullpath}<U>'.\".format(fullpath=fullpath))\n    with open(fullpath, \"w\") as html_file:",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "SIZE",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "SIZE = 3\n# 9x9 matrix of integer variables\nX = [\n     [ z3.Int(\"x_%s_%s\" % (i + 1, j + 1)) for j in range(SIZE**2) ]\n     for i in range(SIZE**2)\n]\n# each cell contains a value in {1, ..., 9}\ncells_c = [ z3.And(1 <= X[i][j], X[i][j] <= SIZE**2)\n            for i in range(SIZE**2)\n            for j in range(SIZE**2)",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "X",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "X = [\n     [ z3.Int(\"x_%s_%s\" % (i + 1, j + 1)) for j in range(SIZE**2) ]\n     for i in range(SIZE**2)\n]\n# each cell contains a value in {1, ..., 9}\ncells_c = [ z3.And(1 <= X[i][j], X[i][j] <= SIZE**2)\n            for i in range(SIZE**2)\n            for j in range(SIZE**2)\n          ]\n# each row contains a digit at most once",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "cells_c",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "cells_c = [ z3.And(1 <= X[i][j], X[i][j] <= SIZE**2)\n            for i in range(SIZE**2)\n            for j in range(SIZE**2)\n          ]\n# each row contains a digit at most once\nrows_c = [ z3.Distinct(X[i]) for i in range(SIZE**2) ]\n# each column contains a digit at most once\ncols_c = [ z3.Distinct( [ X[i][j] for i in range(SIZE**2) ] )\n           for j in range(SIZE**2)\n         ]",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "rows_c",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "rows_c = [ z3.Distinct(X[i]) for i in range(SIZE**2) ]\n# each column contains a digit at most once\ncols_c = [ z3.Distinct( [ X[i][j] for i in range(SIZE**2) ] )\n           for j in range(SIZE**2)\n         ]\n# each 3x3 square contains a digit at most once\nsq_c = [ z3.Distinct([ X[SIZE * i0 + i][SIZE * j0 + j]\n                       for i in range(SIZE)\n                                        for j in range(SIZE)\n                  ])",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "cols_c",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "cols_c = [ z3.Distinct( [ X[i][j] for i in range(SIZE**2) ] )\n           for j in range(SIZE**2)\n         ]\n# each 3x3 square contains a digit at most once\nsq_c = [ z3.Distinct([ X[SIZE * i0 + i][SIZE * j0 + j]\n                       for i in range(SIZE)\n                                        for j in range(SIZE)\n                  ])\n        for i0 in range(SIZE)\n        for j0 in range(SIZE)",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "sq_c",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "sq_c = [ z3.Distinct([ X[SIZE * i0 + i][SIZE * j0 + j]\n                       for i in range(SIZE)\n                                        for j in range(SIZE)\n                  ])\n        for i0 in range(SIZE)\n        for j0 in range(SIZE)\n       ]\nsudoku_c = cells_c + rows_c + cols_c + sq_c\n# sudoku instance, we use '0' for empty cells\nif SIZE != 3:",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "sudoku_c",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "sudoku_c = cells_c + rows_c + cols_c + sq_c\n# sudoku instance, we use '0' for empty cells\nif SIZE != 3:\n    print(\"TODO write an instance of size = {}.\".format(SIZE))\n    sys.exit(1)\ninstance = [[0, 0, 0, 0, 0, 0, 7, 0, 0],\n            [7, 3, 0, 0, 4, 0, 0, 0, 0],\n            [1, 0, 0, 7, 5, 0, 0, 3, 0],\n            [0, 0, 3, 2, 0, 5, 4, 0, 7],\n            [0, 0, 0, 9, 0, 8, 0, 0, 0],",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "instance",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "instance = [[0, 0, 0, 0, 0, 0, 7, 0, 0],\n            [7, 3, 0, 0, 4, 0, 0, 0, 0],\n            [1, 0, 0, 7, 5, 0, 0, 3, 0],\n            [0, 0, 3, 2, 0, 5, 4, 0, 7],\n            [0, 0, 0, 9, 0, 8, 0, 0, 0],\n            [2, 0, 7, 1, 0, 4, 5, 0, 0],\n            [0, 6, 0, 0, 8, 7, 0, 0, 4],\n            [0, 0, 0, 0, 9, 0, 0, 1, 3],\n            [0, 0, 2, 0, 0, 0, 0, 0, 0]]\ntry:",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "before",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "before = time.time()\ninstance_c = [ z3.If(instance[i][j] == 0, True, X[i][j] == instance[i][j])\n               for i in range(9) for j in range(9)\n             ]\ns = z3.Solver()\ns.add(sudoku_c + instance_c)\nif s.check() == z3.sat:\n    m = s.model()\n    after = time.time()\n    duration = after - before",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "instance_c",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "instance_c = [ z3.If(instance[i][j] == 0, True, X[i][j] == instance[i][j])\n               for i in range(9) for j in range(9)\n             ]\ns = z3.Solver()\ns.add(sudoku_c + instance_c)\nif s.check() == z3.sat:\n    m = s.model()\n    after = time.time()\n    duration = after - before\n    print(\"Solved in {:.4g} seconds.\".format(duration))",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "s",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "s = z3.Solver()\ns.add(sudoku_c + instance_c)\nif s.check() == z3.sat:\n    m = s.model()\n    after = time.time()\n    duration = after - before\n    print(\"Solved in {:.4g} seconds.\".format(duration))\n    r = [ [ m.evaluate(X[i][j]) for j in range(SIZE**2) ]\n            for i in range(SIZE**2) ]\n    z3.print_matrix(r)",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "__author__",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "__author__ = \"Paolo Borelli, Lilian BESSON <lbesson at ens-cachan dot fr> for Naereen CORP.\"\n__version__ = \"3.2.2\"\n__appname__ = \"gedit-terminal\"\n__app_disp_name__ = \"Gedit Embeded Terminal\"\n__website__ = \"https://sites.google.com/site/naereencorp/gedit/\"\nprint \".:[ Initializing %s, v%s. (c) %s ]:.\" % (__app_disp_name__, __version__, __author__)\nprint \".:[ Take a look at %s for more informations, or for the latest version of this piece of software. ]:.\" % (__website__)\nfrom gi.repository import GObject, GLib, Gio, Pango, Gdk, Gtk, Gedit, Vte\nimport os\nimport gettext",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "__version__",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "__version__ = \"3.2.2\"\n__appname__ = \"gedit-terminal\"\n__app_disp_name__ = \"Gedit Embeded Terminal\"\n__website__ = \"https://sites.google.com/site/naereencorp/gedit/\"\nprint \".:[ Initializing %s, v%s. (c) %s ]:.\" % (__app_disp_name__, __version__, __author__)\nprint \".:[ Take a look at %s for more informations, or for the latest version of this piece of software. ]:.\" % (__website__)\nfrom gi.repository import GObject, GLib, Gio, Pango, Gdk, Gtk, Gedit, Vte\nimport os\nimport gettext\nfrom gpdefs import *",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "__appname__",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "__appname__ = \"gedit-terminal\"\n__app_disp_name__ = \"Gedit Embeded Terminal\"\n__website__ = \"https://sites.google.com/site/naereencorp/gedit/\"\nprint \".:[ Initializing %s, v%s. (c) %s ]:.\" % (__app_disp_name__, __version__, __author__)\nprint \".:[ Take a look at %s for more informations, or for the latest version of this piece of software. ]:.\" % (__website__)\nfrom gi.repository import GObject, GLib, Gio, Pango, Gdk, Gtk, Gedit, Vte\nimport os\nimport gettext\nfrom gpdefs import *\nfrom signal import SIGTERM, SIGKILL",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "__app_disp_name__",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "__app_disp_name__ = \"Gedit Embeded Terminal\"\n__website__ = \"https://sites.google.com/site/naereencorp/gedit/\"\nprint \".:[ Initializing %s, v%s. (c) %s ]:.\" % (__app_disp_name__, __version__, __author__)\nprint \".:[ Take a look at %s for more informations, or for the latest version of this piece of software. ]:.\" % (__website__)\nfrom gi.repository import GObject, GLib, Gio, Pango, Gdk, Gtk, Gedit, Vte\nimport os\nimport gettext\nfrom gpdefs import *\nfrom signal import SIGTERM, SIGKILL\ntry:",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "__website__",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "__website__ = \"https://sites.google.com/site/naereencorp/gedit/\"\nprint \".:[ Initializing %s, v%s. (c) %s ]:.\" % (__app_disp_name__, __version__, __author__)\nprint \".:[ Take a look at %s for more informations, or for the latest version of this piece of software. ]:.\" % (__website__)\nfrom gi.repository import GObject, GLib, Gio, Pango, Gdk, Gtk, Gedit, Vte\nimport os\nimport gettext\nfrom gpdefs import *\nfrom signal import SIGTERM, SIGKILL\ntry:\n    gettext.bindtextdomain(GETTEXT_PACKAGE, GP_LOCALEDIR)",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "__author__",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "__author__ = \"Paolo Borelli, Lilian BESSON <lbesson at ens-cachan dot fr> for Naereen CORP.\"\n__version__ = \"3.2.3\"\n__appname__ = \"gedit-terminal2\"\n__app_disp_name__ = \"Gedit Embeded Terminal Lateral\"\n__website__ = \"https://sites.google.com/site/naereencorp/gedit/\"\nprint \".:[ Initializing %s, v%s. (c) %s ]:.\" % (__app_disp_name__, __version__, __author__)\nprint \".:[ Take a look at %s for more informations, or for the latest version of this piece of software. ]:.\" % (__website__)\nfrom gi.repository import GObject, GLib, Gio, Pango, Gdk, Gtk, Gedit, Vte\nimport os\nimport gettext",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "__version__",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "__version__ = \"3.2.3\"\n__appname__ = \"gedit-terminal2\"\n__app_disp_name__ = \"Gedit Embeded Terminal Lateral\"\n__website__ = \"https://sites.google.com/site/naereencorp/gedit/\"\nprint \".:[ Initializing %s, v%s. (c) %s ]:.\" % (__app_disp_name__, __version__, __author__)\nprint \".:[ Take a look at %s for more informations, or for the latest version of this piece of software. ]:.\" % (__website__)\nfrom gi.repository import GObject, GLib, Gio, Pango, Gdk, Gtk, Gedit, Vte\nimport os\nimport gettext\nfrom gpdefs import *",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "__appname__",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "__appname__ = \"gedit-terminal2\"\n__app_disp_name__ = \"Gedit Embeded Terminal Lateral\"\n__website__ = \"https://sites.google.com/site/naereencorp/gedit/\"\nprint \".:[ Initializing %s, v%s. (c) %s ]:.\" % (__app_disp_name__, __version__, __author__)\nprint \".:[ Take a look at %s for more informations, or for the latest version of this piece of software. ]:.\" % (__website__)\nfrom gi.repository import GObject, GLib, Gio, Pango, Gdk, Gtk, Gedit, Vte\nimport os\nimport gettext\nfrom gpdefs import *\nfrom signal import SIGTERM, SIGKILL",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "__app_disp_name__",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "__app_disp_name__ = \"Gedit Embeded Terminal Lateral\"\n__website__ = \"https://sites.google.com/site/naereencorp/gedit/\"\nprint \".:[ Initializing %s, v%s. (c) %s ]:.\" % (__app_disp_name__, __version__, __author__)\nprint \".:[ Take a look at %s for more informations, or for the latest version of this piece of software. ]:.\" % (__website__)\nfrom gi.repository import GObject, GLib, Gio, Pango, Gdk, Gtk, Gedit, Vte\nimport os\nimport gettext\nfrom gpdefs import *\nfrom signal import SIGTERM, SIGKILL\ntry:",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "__website__",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "__website__ = \"https://sites.google.com/site/naereencorp/gedit/\"\nprint \".:[ Initializing %s, v%s. (c) %s ]:.\" % (__app_disp_name__, __version__, __author__)\nprint \".:[ Take a look at %s for more informations, or for the latest version of this piece of software. ]:.\" % (__website__)\nfrom gi.repository import GObject, GLib, Gio, Pango, Gdk, Gtk, Gedit, Vte\nimport os\nimport gettext\nfrom gpdefs import *\nfrom signal import SIGTERM, SIGKILL\ntry:\n    gettext.bindtextdomain(GETTEXT_PACKAGE, GP_LOCALEDIR)",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "__author__",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "__author__ = \"Paolo Borelli, Lilian BESSON <lbesson at ens-cachan dot fr> for Naereen CORP.\"\n__version__ = \"3.2.3\"\n__appname__ = \"gedit-terminal3\"\n__app_disp_name__ = \"Gedit Embeded Terminal3\"\n__website__ = \"https://sites.google.com/site/naereencorp/gedit/\"\nprint \".:[ Initializing %s, v%s. (c) %s ]:.\" % (__app_disp_name__, __version__, __author__)\nprint \".:[ Take a look at %s for more informations, or for the latest version of this piece of software. ]:.\" % (__website__)\nfrom gi.repository import GObject, GLib, Gio, Pango, Gdk, Gtk, Gedit, Vte\nimport os\nimport gettext",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "__version__",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "__version__ = \"3.2.3\"\n__appname__ = \"gedit-terminal3\"\n__app_disp_name__ = \"Gedit Embeded Terminal3\"\n__website__ = \"https://sites.google.com/site/naereencorp/gedit/\"\nprint \".:[ Initializing %s, v%s. (c) %s ]:.\" % (__app_disp_name__, __version__, __author__)\nprint \".:[ Take a look at %s for more informations, or for the latest version of this piece of software. ]:.\" % (__website__)\nfrom gi.repository import GObject, GLib, Gio, Pango, Gdk, Gtk, Gedit, Vte\nimport os\nimport gettext\nfrom gpdefs import *",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "__appname__",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "__appname__ = \"gedit-terminal3\"\n__app_disp_name__ = \"Gedit Embeded Terminal3\"\n__website__ = \"https://sites.google.com/site/naereencorp/gedit/\"\nprint \".:[ Initializing %s, v%s. (c) %s ]:.\" % (__app_disp_name__, __version__, __author__)\nprint \".:[ Take a look at %s for more informations, or for the latest version of this piece of software. ]:.\" % (__website__)\nfrom gi.repository import GObject, GLib, Gio, Pango, Gdk, Gtk, Gedit, Vte\nimport os\nimport gettext\nfrom gpdefs import *\nfrom signal import SIGTERM, SIGKILL",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "__app_disp_name__",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "__app_disp_name__ = \"Gedit Embeded Terminal3\"\n__website__ = \"https://sites.google.com/site/naereencorp/gedit/\"\nprint \".:[ Initializing %s, v%s. (c) %s ]:.\" % (__app_disp_name__, __version__, __author__)\nprint \".:[ Take a look at %s for more informations, or for the latest version of this piece of software. ]:.\" % (__website__)\nfrom gi.repository import GObject, GLib, Gio, Pango, Gdk, Gtk, Gedit, Vte\nimport os\nimport gettext\nfrom gpdefs import *\nfrom signal import SIGTERM, SIGKILL\ntry:",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "__website__",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "__website__ = \"https://sites.google.com/site/naereencorp/gedit/\"\nprint \".:[ Initializing %s, v%s. (c) %s ]:.\" % (__app_disp_name__, __version__, __author__)\nprint \".:[ Take a look at %s for more informations, or for the latest version of this piece of software. ]:.\" % (__website__)\nfrom gi.repository import GObject, GLib, Gio, Pango, Gdk, Gtk, Gedit, Vte\nimport os\nimport gettext\nfrom gpdefs import *\nfrom signal import SIGTERM, SIGKILL\ntry:\n    gettext.bindtextdomain(GETTEXT_PACKAGE, GP_LOCALEDIR)",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "left",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "left = False\nright = True\ndef attach_direction(t, d=left):\n    \"\"\"Attach the direction d to all elements of array t.\"\"\"\n    return [(x, d) for x in t]\ndef remove_direction(t):\n    \"\"\"Remove the attached direction d to all elements of array t.\"\"\"\n    return [y for y, _ in t]\ndef swap(t, i, j):\n    \"\"\"Swap t[i] and t[j] in array t.\"\"\"",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "right",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "right = True\ndef attach_direction(t, d=left):\n    \"\"\"Attach the direction d to all elements of array t.\"\"\"\n    return [(x, d) for x in t]\ndef remove_direction(t):\n    \"\"\"Remove the attached direction d to all elements of array t.\"\"\"\n    return [y for y, _ in t]\ndef swap(t, i, j):\n    \"\"\"Swap t[i] and t[j] in array t.\"\"\"\n    t[i], t[j] = t[j], t[i]",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "url_finder",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "url_finder = re.compile(r'http[^\"]*')\nquery_finder = re.compile(r\"data.query = JSON.parse\\('\\{[^\\n]*\")\nsearchResponse_finder = re.compile(r\"data.searchResponse = JSON.parse\\('\\{[^\\n]*\")\n# url0 = \"http://www.voyages-sncf.com//vsc/train-ticket/?_LANG=fr&site_country=FR&site_language=fr&ORIGIN_CITY=Toulon&DESTINATION_CITY=Paris%20%28Toutes%20gares%20intramuros%29&OUTWARD_DATE=31/05/2016&OUTWARD_TIME=15&INWARD_DATE=&INWARD_TIME=7&COMFORT_CLASS=2&DISTRIBUTED_COUNTRY=FR&NB_TYPO_ADULT=1&bookingChoice=train&PASSENGER_1=YOUNG&PASSENGER_1_CARD=MI1ST&PASSENGER_1_FID_PROG=&PASSENGER_1FID_NUM_BEGIN=&CODE_PROMO_1=&action:searchTravel=Rechercher\"\n#URL_TEMPLATE = \"http://www.voyages-sncf.com//vsc/train-ticket/?_LANG=fr&site_country=FR&site_language=fr&ORIGIN_CITY={ORIGIN_CITY}&DESTINATION_CITY={DESTINATION_CITY}&OUTWARD_DATE={DATE}&OUTWARD_TIME={OUTWARD_TIME}&INWARD_DATE=&INWARD_TIME=7&COMFORT_CLASS=2&DISTRIBUTED_COUNTRY=FR&NB_TYPO_ADULT=1&bookingChoice=train&PASSENGER_1=YOUNG&PASSENGER_1_CARD=MI1ST&PASSENGER_1_FID_PROG=&PASSENGER_1FID_NUM_BEGIN=&CODE_PROMO_1=&action:searchTravel=Rechercher\"\nURL_TEMPLATE = 'https://www.oui.sncf/vsc/train-ticket/?_LANG=fr&ORIGIN_CITY={ORIGIN_CITY}&DESTINATION_CITY={DESTINATION_CITY}&OUTWARD_DATE={DATE}&OUTWARD_TIME={OUTWARD_TIME}&DIRECT_TRAVEL_CHECK=1&COMFORT_CLASS=2&PASSENGER_1=YOUNG&PASSENGER_1_CARD=&PASSENGER_1_FID_PROG=&PASSENGER_1FID_NUM_BEGIN=&CODE_PROMO_1=&PASSENGER_1_CARD_NUMBER=&PASSENGER_1_CARD_BIRTH_DATE=&action:searchTravelLaunchTrain=Rechercher'\n#EXEMPLE SANS CARTE PARTICULIERE TARIF NORMAL\n# url1 = 'http://www.voyages-sncf.com/vsc/proposals/findProposals?hid='\ndef main(url, MY_OUTWARD_TIME_MINI, MY_OUTWARD_TIME_MAXI=\"23:59\"):\n    \"\"\" Go to the page 'url', find the next link to got, then extract the JSON query result, find the wanted train, and display the results.",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "query_finder",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "query_finder = re.compile(r\"data.query = JSON.parse\\('\\{[^\\n]*\")\nsearchResponse_finder = re.compile(r\"data.searchResponse = JSON.parse\\('\\{[^\\n]*\")\n# url0 = \"http://www.voyages-sncf.com//vsc/train-ticket/?_LANG=fr&site_country=FR&site_language=fr&ORIGIN_CITY=Toulon&DESTINATION_CITY=Paris%20%28Toutes%20gares%20intramuros%29&OUTWARD_DATE=31/05/2016&OUTWARD_TIME=15&INWARD_DATE=&INWARD_TIME=7&COMFORT_CLASS=2&DISTRIBUTED_COUNTRY=FR&NB_TYPO_ADULT=1&bookingChoice=train&PASSENGER_1=YOUNG&PASSENGER_1_CARD=MI1ST&PASSENGER_1_FID_PROG=&PASSENGER_1FID_NUM_BEGIN=&CODE_PROMO_1=&action:searchTravel=Rechercher\"\n#URL_TEMPLATE = \"http://www.voyages-sncf.com//vsc/train-ticket/?_LANG=fr&site_country=FR&site_language=fr&ORIGIN_CITY={ORIGIN_CITY}&DESTINATION_CITY={DESTINATION_CITY}&OUTWARD_DATE={DATE}&OUTWARD_TIME={OUTWARD_TIME}&INWARD_DATE=&INWARD_TIME=7&COMFORT_CLASS=2&DISTRIBUTED_COUNTRY=FR&NB_TYPO_ADULT=1&bookingChoice=train&PASSENGER_1=YOUNG&PASSENGER_1_CARD=MI1ST&PASSENGER_1_FID_PROG=&PASSENGER_1FID_NUM_BEGIN=&CODE_PROMO_1=&action:searchTravel=Rechercher\"\nURL_TEMPLATE = 'https://www.oui.sncf/vsc/train-ticket/?_LANG=fr&ORIGIN_CITY={ORIGIN_CITY}&DESTINATION_CITY={DESTINATION_CITY}&OUTWARD_DATE={DATE}&OUTWARD_TIME={OUTWARD_TIME}&DIRECT_TRAVEL_CHECK=1&COMFORT_CLASS=2&PASSENGER_1=YOUNG&PASSENGER_1_CARD=&PASSENGER_1_FID_PROG=&PASSENGER_1FID_NUM_BEGIN=&CODE_PROMO_1=&PASSENGER_1_CARD_NUMBER=&PASSENGER_1_CARD_BIRTH_DATE=&action:searchTravelLaunchTrain=Rechercher'\n#EXEMPLE SANS CARTE PARTICULIERE TARIF NORMAL\n# url1 = 'http://www.voyages-sncf.com/vsc/proposals/findProposals?hid='\ndef main(url, MY_OUTWARD_TIME_MINI, MY_OUTWARD_TIME_MAXI=\"23:59\"):\n    \"\"\" Go to the page 'url', find the next link to got, then extract the JSON query result, find the wanted train, and display the results.\n    \"\"\"",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "searchResponse_finder",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "searchResponse_finder = re.compile(r\"data.searchResponse = JSON.parse\\('\\{[^\\n]*\")\n# url0 = \"http://www.voyages-sncf.com//vsc/train-ticket/?_LANG=fr&site_country=FR&site_language=fr&ORIGIN_CITY=Toulon&DESTINATION_CITY=Paris%20%28Toutes%20gares%20intramuros%29&OUTWARD_DATE=31/05/2016&OUTWARD_TIME=15&INWARD_DATE=&INWARD_TIME=7&COMFORT_CLASS=2&DISTRIBUTED_COUNTRY=FR&NB_TYPO_ADULT=1&bookingChoice=train&PASSENGER_1=YOUNG&PASSENGER_1_CARD=MI1ST&PASSENGER_1_FID_PROG=&PASSENGER_1FID_NUM_BEGIN=&CODE_PROMO_1=&action:searchTravel=Rechercher\"\n#URL_TEMPLATE = \"http://www.voyages-sncf.com//vsc/train-ticket/?_LANG=fr&site_country=FR&site_language=fr&ORIGIN_CITY={ORIGIN_CITY}&DESTINATION_CITY={DESTINATION_CITY}&OUTWARD_DATE={DATE}&OUTWARD_TIME={OUTWARD_TIME}&INWARD_DATE=&INWARD_TIME=7&COMFORT_CLASS=2&DISTRIBUTED_COUNTRY=FR&NB_TYPO_ADULT=1&bookingChoice=train&PASSENGER_1=YOUNG&PASSENGER_1_CARD=MI1ST&PASSENGER_1_FID_PROG=&PASSENGER_1FID_NUM_BEGIN=&CODE_PROMO_1=&action:searchTravel=Rechercher\"\nURL_TEMPLATE = 'https://www.oui.sncf/vsc/train-ticket/?_LANG=fr&ORIGIN_CITY={ORIGIN_CITY}&DESTINATION_CITY={DESTINATION_CITY}&OUTWARD_DATE={DATE}&OUTWARD_TIME={OUTWARD_TIME}&DIRECT_TRAVEL_CHECK=1&COMFORT_CLASS=2&PASSENGER_1=YOUNG&PASSENGER_1_CARD=&PASSENGER_1_FID_PROG=&PASSENGER_1FID_NUM_BEGIN=&CODE_PROMO_1=&PASSENGER_1_CARD_NUMBER=&PASSENGER_1_CARD_BIRTH_DATE=&action:searchTravelLaunchTrain=Rechercher'\n#EXEMPLE SANS CARTE PARTICULIERE TARIF NORMAL\n# url1 = 'http://www.voyages-sncf.com/vsc/proposals/findProposals?hid='\ndef main(url, MY_OUTWARD_TIME_MINI, MY_OUTWARD_TIME_MAXI=\"23:59\"):\n    \"\"\" Go to the page 'url', find the next link to got, then extract the JSON query result, find the wanted train, and display the results.\n    \"\"\"\n    MY_OUTWARD_TIME_MINI = MY_OUTWARD_TIME_MINI.replace('h', ':')",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "#URL_TEMPLATE",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "#URL_TEMPLATE = \"http://www.voyages-sncf.com//vsc/train-ticket/?_LANG=fr&site_country=FR&site_language=fr&ORIGIN_CITY={ORIGIN_CITY}&DESTINATION_CITY={DESTINATION_CITY}&OUTWARD_DATE={DATE}&OUTWARD_TIME={OUTWARD_TIME}&INWARD_DATE=&INWARD_TIME=7&COMFORT_CLASS=2&DISTRIBUTED_COUNTRY=FR&NB_TYPO_ADULT=1&bookingChoice=train&PASSENGER_1=YOUNG&PASSENGER_1_CARD=MI1ST&PASSENGER_1_FID_PROG=&PASSENGER_1FID_NUM_BEGIN=&CODE_PROMO_1=&action:searchTravel=Rechercher\"\nURL_TEMPLATE = 'https://www.oui.sncf/vsc/train-ticket/?_LANG=fr&ORIGIN_CITY={ORIGIN_CITY}&DESTINATION_CITY={DESTINATION_CITY}&OUTWARD_DATE={DATE}&OUTWARD_TIME={OUTWARD_TIME}&DIRECT_TRAVEL_CHECK=1&COMFORT_CLASS=2&PASSENGER_1=YOUNG&PASSENGER_1_CARD=&PASSENGER_1_FID_PROG=&PASSENGER_1FID_NUM_BEGIN=&CODE_PROMO_1=&PASSENGER_1_CARD_NUMBER=&PASSENGER_1_CARD_BIRTH_DATE=&action:searchTravelLaunchTrain=Rechercher'\n#EXEMPLE SANS CARTE PARTICULIERE TARIF NORMAL\n# url1 = 'http://www.voyages-sncf.com/vsc/proposals/findProposals?hid='\ndef main(url, MY_OUTWARD_TIME_MINI, MY_OUTWARD_TIME_MAXI=\"23:59\"):\n    \"\"\" Go to the page 'url', find the next link to got, then extract the JSON query result, find the wanted train, and display the results.\n    \"\"\"\n    MY_OUTWARD_TIME_MINI = MY_OUTWARD_TIME_MINI.replace('h', ':')\n    MY_OUTWARD_TIME_MAXI = MY_OUTWARD_TIME_MAXI.replace('h', ':')\n    # Create the web browser object",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "URL_TEMPLATE",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "URL_TEMPLATE = 'https://www.oui.sncf/vsc/train-ticket/?_LANG=fr&ORIGIN_CITY={ORIGIN_CITY}&DESTINATION_CITY={DESTINATION_CITY}&OUTWARD_DATE={DATE}&OUTWARD_TIME={OUTWARD_TIME}&DIRECT_TRAVEL_CHECK=1&COMFORT_CLASS=2&PASSENGER_1=YOUNG&PASSENGER_1_CARD=&PASSENGER_1_FID_PROG=&PASSENGER_1FID_NUM_BEGIN=&CODE_PROMO_1=&PASSENGER_1_CARD_NUMBER=&PASSENGER_1_CARD_BIRTH_DATE=&action:searchTravelLaunchTrain=Rechercher'\n#EXEMPLE SANS CARTE PARTICULIERE TARIF NORMAL\n# url1 = 'http://www.voyages-sncf.com/vsc/proposals/findProposals?hid='\ndef main(url, MY_OUTWARD_TIME_MINI, MY_OUTWARD_TIME_MAXI=\"23:59\"):\n    \"\"\" Go to the page 'url', find the next link to got, then extract the JSON query result, find the wanted train, and display the results.\n    \"\"\"\n    MY_OUTWARD_TIME_MINI = MY_OUTWARD_TIME_MINI.replace('h', ':')\n    MY_OUTWARD_TIME_MAXI = MY_OUTWARD_TIME_MAXI.replace('h', ':')\n    # Create the web browser object\n    b = RB(history=True, allow_redirects=True)",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "language_default",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "language_default = os.getenv(\"LANG\")[0:2]\ndef lang_to_text(lang, exception=False):\n    \"\"\" lang_to_text(lang, exception=False) -> str\nConvert a Wikipédia language code (two letters) to a English version of the language.\nExample:\n>>> lang_to_text(\"en\")\n'english'\n>>> lang_to_text(\"fr\")\n'french'\n    \"\"\"",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "latest",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "latest = 30  # also 60 or 90 are available\ntemplate_url_default = \"http://stats.grok.se/json/{language}/latest{latest}/{page}\"\ntemplate_output_default = \"{page}.{language}.json\"\ndef download_json(page=\"JSON\", language=language_default,\n                  template_output=template_output_default,\n                  template_url=template_url_default):\n    \"\"\" download_json(page=\"JSON\", template_output=template_output_default,                  language=language_default, template_url=templateurl_default) -> str\nDownload a JSON file.\n@page: tell which Wikipédia page to lookup to.\n@template_output: template string for the output JSON (.json) file.",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "template_url_default",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "template_url_default = \"http://stats.grok.se/json/{language}/latest{latest}/{page}\"\ntemplate_output_default = \"{page}.{language}.json\"\ndef download_json(page=\"JSON\", language=language_default,\n                  template_output=template_output_default,\n                  template_url=template_url_default):\n    \"\"\" download_json(page=\"JSON\", template_output=template_output_default,                  language=language_default, template_url=templateurl_default) -> str\nDownload a JSON file.\n@page: tell which Wikipédia page to lookup to.\n@template_output: template string for the output JSON (.json) file.\n@language: language to use for downloading the JSON.",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "template_output_default",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "template_output_default = \"{page}.{language}.json\"\ndef download_json(page=\"JSON\", language=language_default,\n                  template_output=template_output_default,\n                  template_url=template_url_default):\n    \"\"\" download_json(page=\"JSON\", template_output=template_output_default,                  language=language_default, template_url=templateurl_default) -> str\nDownload a JSON file.\n@page: tell which Wikipédia page to lookup to.\n@template_output: template string for the output JSON (.json) file.\n@language: language to use for downloading the JSON.\n@template_url: online page to use a format to download the JSON.",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "logging.getLogger('scrapy').propagate",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "logging.getLogger('scrapy').propagate = False\nlogging.getLogger('scrapy.utils').propagate = False\nclass QuotesSpider(scrapy.Spider):\n    \"\"\"Small scrapy Spider.\"\"\"\n    name = \"Watch Later\"\n    start_urls = [\n        'file:///tmp/wl.html'\n    ]\n    custom_settings = {\n    \t\"LOG_ENABLED\": False,",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "logging.getLogger('scrapy.utils').propagate",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "logging.getLogger('scrapy.utils').propagate = False\nclass QuotesSpider(scrapy.Spider):\n    \"\"\"Small scrapy Spider.\"\"\"\n    name = \"Watch Later\"\n    start_urls = [\n        'file:///tmp/wl.html'\n    ]\n    custom_settings = {\n    \t\"LOG_ENABLED\": False,\n    \t\"LOG_LEVEL\": 'ERROR',",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "__author__",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "__author__ = \"Lilian Besson\"\n__name_of_app__ = \"Battle Client\"\n__version__ = \"0.1\"\nimport sys\nfrom collections import defaultdict\nfrom time import sleep\nfrom random import choice\nfrom docopt import docopt\nimport numpy as np\n# https://stackoverflow.com/a/4896288/5889533",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "__name_of_app__",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "__name_of_app__ = \"Battle Client\"\n__version__ = \"0.1\"\nimport sys\nfrom collections import defaultdict\nfrom time import sleep\nfrom random import choice\nfrom docopt import docopt\nimport numpy as np\n# https://stackoverflow.com/a/4896288/5889533\nfrom subprocess import PIPE, Popen",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "__version__",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "__version__ = \"0.1\"\nimport sys\nfrom collections import defaultdict\nfrom time import sleep\nfrom random import choice\nfrom docopt import docopt\nimport numpy as np\n# https://stackoverflow.com/a/4896288/5889533\nfrom subprocess import PIPE, Popen\nON_POSIX = 'posix' in sys.builtin_module_names",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "ON_POSIX",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "ON_POSIX = 'posix' in sys.builtin_module_names\nfrom battleserver import ships, DEFAULT_X, DEFAULT_Y\nlength_of_ships = defaultdict(lambda: min(ships.values()))\nlength_of_ships.update({k.lower(): v for k,v in ships.items()})\n# --- Documentation\ndocumentation = f\"\"\"{__name_of_app__}.\nUsage:\n    battleplayer.py [--delay=<t>] [--smart] [--size=<xy>] [--server_command=<cmd>]\n    battleplayer.py (-h | --help)\n    battleplayer.py --version",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "length_of_ships",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "length_of_ships = defaultdict(lambda: min(ships.values()))\nlength_of_ships.update({k.lower(): v for k,v in ships.items()})\n# --- Documentation\ndocumentation = f\"\"\"{__name_of_app__}.\nUsage:\n    battleplayer.py [--delay=<t>] [--smart] [--size=<xy>] [--server_command=<cmd>]\n    battleplayer.py (-h | --help)\n    battleplayer.py --version\nOptions:\n    -h --help       Show this screen.",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "documentation",
    "kind": 5,
    "importPath": "by-extension.python.pyutils",
    "description": "by-extension.python.pyutils",
    "peekOfCode": "documentation = f\"\"\"{__name_of_app__}.\nUsage:\n    battleplayer.py [--delay=<t>] [--smart] [--size=<xy>] [--server_command=<cmd>]\n    battleplayer.py (-h | --help)\n    battleplayer.py --version\nOptions:\n    -h --help       Show this screen.\n    --version       Show version.\n    --server_command=<cmd>  Play against a server launched by 'cmd' [default: ./battleserver.py --random --play].\n    --size=<xy>     Set size of the board [default: {DEFAULT_X},{DEFAULT_Y}].",
    "detail": "by-extension.python.pyutils",
    "documentation": {}
  },
  {
    "label": "Q",
    "kind": 5,
    "importPath": "by-extension.python.queen",
    "description": "by-extension.python.queen",
    "peekOfCode": "Q = [ Int('Q_%i' % (i + 1)) for i in range(8) ]\n# Each queen is in a column {1, ... 8 }\nval_c = [ And(1 <= Q[i], Q[i] <= 8) for i in range(8) ]\n# At most one queen per column\ncol_c = [ Distinct(Q) ]\n# Diagonal constraint\ndiag_c = [ If(i == j,\n              True,\n              And(Q[i] - Q[j] != i - j, Q[i] - Q[j] != j - i))\n           for i in range(8) for j in range(i) ]",
    "detail": "by-extension.python.queen",
    "documentation": {}
  },
  {
    "label": "val_c",
    "kind": 5,
    "importPath": "by-extension.python.queen",
    "description": "by-extension.python.queen",
    "peekOfCode": "val_c = [ And(1 <= Q[i], Q[i] <= 8) for i in range(8) ]\n# At most one queen per column\ncol_c = [ Distinct(Q) ]\n# Diagonal constraint\ndiag_c = [ If(i == j,\n              True,\n              And(Q[i] - Q[j] != i - j, Q[i] - Q[j] != j - i))\n           for i in range(8) for j in range(i) ]\nsolve(val_c + col_c + diag_c)",
    "detail": "by-extension.python.queen",
    "documentation": {}
  },
  {
    "label": "col_c",
    "kind": 5,
    "importPath": "by-extension.python.queen",
    "description": "by-extension.python.queen",
    "peekOfCode": "col_c = [ Distinct(Q) ]\n# Diagonal constraint\ndiag_c = [ If(i == j,\n              True,\n              And(Q[i] - Q[j] != i - j, Q[i] - Q[j] != j - i))\n           for i in range(8) for j in range(i) ]\nsolve(val_c + col_c + diag_c)",
    "detail": "by-extension.python.queen",
    "documentation": {}
  },
  {
    "label": "diag_c",
    "kind": 5,
    "importPath": "by-extension.python.queen",
    "description": "by-extension.python.queen",
    "peekOfCode": "diag_c = [ If(i == j,\n              True,\n              And(Q[i] - Q[j] != i - j, Q[i] - Q[j] != j - i))\n           for i in range(8) for j in range(i) ]\nsolve(val_c + col_c + diag_c)",
    "detail": "by-extension.python.queen",
    "documentation": {}
  },
  {
    "label": "queue",
    "kind": 6,
    "importPath": "by-extension.python.queue",
    "description": "by-extension.python.queue",
    "peekOfCode": "class queue:\n  # by default pass in [] as inivial value\n  def __init__(self,initialVal=[]):\n    self.queue = initialVal\n  # enqueue is to append to the tail of the list\n  def enqueue(self,ele):\n    self.queue.append(ele)\n    return self.queue\n  # dequeue is to remove from the head of the list\n  def dequeue(self):",
    "detail": "by-extension.python.queue",
    "documentation": {}
  },
  {
    "label": "quickSort",
    "kind": 2,
    "importPath": "by-extension.python.quick-sort",
    "description": "by-extension.python.quick-sort",
    "peekOfCode": "def quickSort(lst):\n    # List of 0 or 1 items is already sorted\n    if len(lst) <= 1:\n        return lst\n    else:\n        # Pivot can be chosen randomly\n        pivotIndex = randint(0, len(lst)-1)\n        pivot = lst[pivotIndex]\n        # Elements lower than and greater than pivot\n        lesser, greater = [], []",
    "detail": "by-extension.python.quick-sort",
    "documentation": {}
  },
  {
    "label": "partition",
    "kind": 2,
    "importPath": "by-extension.python.quick_sort",
    "description": "by-extension.python.quick_sort",
    "peekOfCode": "def partition(collection, left, right):\n    pivot = collection[right]\n    j = left\n    for i in range(left, right):\n        if collection[i] <= pivot:\n            collection[i], collection[j] = collection[j], collection[i]\n            j += 1\n    collection[right], collection[j] = collection[j], collection[right]\n    return j\ndef quickSort(collection, left, right, counter):",
    "detail": "by-extension.python.quick_sort",
    "documentation": {}
  },
  {
    "label": "quickSort",
    "kind": 2,
    "importPath": "by-extension.python.quick_sort",
    "description": "by-extension.python.quick_sort",
    "peekOfCode": "def quickSort(collection, left, right, counter):\n    if left < right:\n        counter += 1\n        print(\"Step %i -->\" % counter, collection)\n        mainstay = partition(collection, left, right)\n        collection, counter = quickSort(collection, left, mainstay - 1, counter)\n        collection, counter = quickSort(collection, mainstay + 1, right, counter)\n    return collection, counter\ndef visualization():\n    counter = 0",
    "detail": "by-extension.python.quick_sort",
    "documentation": {}
  },
  {
    "label": "visualization",
    "kind": 2,
    "importPath": "by-extension.python.quick_sort",
    "description": "by-extension.python.quick_sort",
    "peekOfCode": "def visualization():\n    counter = 0\n    length = 10\n    collection = [randint(0, length) for _ in range(length)]\n    print(\"Initial list:\", collection)\n    print(\"Visualization of algorithm work.\")\n    collection, counter = quickSort(collection, 0, length - 1, counter)\n    print(\"Final list:\", collection)\n    print(\"Total numbers of passages:\", counter)\ndef main():",
    "detail": "by-extension.python.quick_sort",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "by-extension.python.quick_sort",
    "description": "by-extension.python.quick_sort",
    "peekOfCode": "def main():\n    elapsedTime = timeit.timeit(visualization, number=1)\n    print(\"Elapsed time: \", round(elapsedTime, 7), \"sec.\")\nif __name__ == \"__main__\":\n    main()",
    "detail": "by-extension.python.quick_sort",
    "documentation": {}
  },
  {
    "label": "Error",
    "kind": 6,
    "importPath": "by-extension.python.rand-string-gen",
    "description": "by-extension.python.rand-string-gen",
    "peekOfCode": "class Error( Exception ):\n\tpass\nescapes = {\n\t'n' : '\\n',\n\t'r' : '\\r',\n\t't' : '\\t',\n\t'v' : '\\v',\n\t'0' : '\\0'\n}\nrx_octet = re.compile( '([0-8][0-8][0-8]|[0])' )",
    "detail": "by-extension.python.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "Compiler",
    "kind": 6,
    "importPath": "by-extension.python.rand-string-gen",
    "description": "by-extension.python.rand-string-gen",
    "peekOfCode": "class Compiler:\n\tdef __init__( self, src ):\n\t\tself.src = src\n\t\tself.ofs = 0\n\t\tself.opens = 0\n\t\tself.closes = 0\n\t\tself.limit = 4\n\tdef parse_rpt( self, op ):\n\t\tm = rx_repeat.match( self.src, self.ofs )\n\t\tif not m:",
    "detail": "by-extension.python.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "Generator",
    "kind": 6,
    "importPath": "by-extension.python.rand-string-gen",
    "description": "by-extension.python.rand-string-gen",
    "peekOfCode": "class Generator:\n\tdef __init__( self, root ):\n\t\tif not root: raise Exception #TODO\n\t\tself.root = root\n\tdef generate( self, seed = None, vm = None ):\n\t\tif vm is None: vm = Vm( seed )\t\t\n\t\tself.root( vm )\n\t\treturn str( vm )\nclass Vm:\n\tdef __init__( self, seed = None ):",
    "detail": "by-extension.python.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "Vm",
    "kind": 6,
    "importPath": "by-extension.python.rand-string-gen",
    "description": "by-extension.python.rand-string-gen",
    "peekOfCode": "class Vm:\n\tdef __init__( self, seed = None ):\n\t\tself.rng = random.WichmannHill( seed )\n\t\tself.out = []\n\t\tself.groups = {}\n\tdef choose( self, field ):\n\t\t\"selects a random value from 0 .. field - 1, or the list\"\n\t\tif isinstance( field, int ):\n\t\t\treturn self.rng.randint( 0, field )\n\t\telse:",
    "detail": "by-extension.python.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "Capture",
    "kind": 6,
    "importPath": "by-extension.python.rand-string-gen",
    "description": "by-extension.python.rand-string-gen",
    "peekOfCode": "class Capture:\n\tdef __init__( self, vm, ref ):\n\t\tself.vm = vm\n\t\tself.ref = ref\n\tdef __enter__( self ):\n\t\tself.out = self.vm.out\n\t\tself.vm.out = []\n\tdef __exit__( self, errtyp, errval, errtb ):\n\t\tif errtyp or errval: return False\n\t\tvm = self.vm",
    "detail": "by-extension.python.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "op_dat",
    "kind": 2,
    "importPath": "by-extension.python.rand-string-gen",
    "description": "by-extension.python.rand-string-gen",
    "peekOfCode": "def op_dat( data ):\n\tdef op_dat_fn( vm ):\n\t\tvm.write( data )\n\treturn op_dat_fn\ndef op_seq( seq ):\n\tdef op_seq_fn( vm ):\n\t\tfor op in seq: \n\t\t\top( vm )\n\t\treturn True\n\treturn op_seq_fn",
    "detail": "by-extension.python.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "op_seq",
    "kind": 2,
    "importPath": "by-extension.python.rand-string-gen",
    "description": "by-extension.python.rand-string-gen",
    "peekOfCode": "def op_seq( seq ):\n\tdef op_seq_fn( vm ):\n\t\tfor op in seq: \n\t\t\top( vm )\n\t\treturn True\n\treturn op_seq_fn\ndef op_alt( alt ):\n\tdef op_alt_fn( vm ):\n\t\tvm.choose( alt )( vm )\n\treturn op_alt_fn",
    "detail": "by-extension.python.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "op_alt",
    "kind": 2,
    "importPath": "by-extension.python.rand-string-gen",
    "description": "by-extension.python.rand-string-gen",
    "peekOfCode": "def op_alt( alt ):\n\tdef op_alt_fn( vm ):\n\t\tvm.choose( alt )( vm )\n\treturn op_alt_fn\ndef op_set( ix, op ):\n\tdef op_set_fn( vm ):\n\t\twith vm.capture( ix ): op( vm )\n\treturn op_set_fn\ndef op_ref( ix ):\n\tdef op_ref_fn( vm ):",
    "detail": "by-extension.python.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "op_set",
    "kind": 2,
    "importPath": "by-extension.python.rand-string-gen",
    "description": "by-extension.python.rand-string-gen",
    "peekOfCode": "def op_set( ix, op ):\n\tdef op_set_fn( vm ):\n\t\twith vm.capture( ix ): op( vm )\n\treturn op_set_fn\ndef op_ref( ix ):\n\tdef op_ref_fn( vm ):\n\t\tvm.write( vm.group( ix ) )\n\treturn op_ref_fn\ndef op_nul( ):\n\tdef op_nul_fn( vm ):",
    "detail": "by-extension.python.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "op_ref",
    "kind": 2,
    "importPath": "by-extension.python.rand-string-gen",
    "description": "by-extension.python.rand-string-gen",
    "peekOfCode": "def op_ref( ix ):\n\tdef op_ref_fn( vm ):\n\t\tvm.write( vm.group( ix ) )\n\treturn op_ref_fn\ndef op_nul( ):\n\tdef op_nul_fn( vm ):\n\t\tpass\n\treturn op_nul_fn\ndef op_rpt( op, m, n ):\n\tif m == n:",
    "detail": "by-extension.python.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "op_nul",
    "kind": 2,
    "importPath": "by-extension.python.rand-string-gen",
    "description": "by-extension.python.rand-string-gen",
    "peekOfCode": "def op_nul( ):\n\tdef op_nul_fn( vm ):\n\t\tpass\n\treturn op_nul_fn\ndef op_rpt( op, m, n ):\n\tif m == n:\n\t\tdef op_fix_rpt_fn( vm ):\n\t\t\tfor i in range( 0, m ):\n\t\t\t\top( vm )\n\t\treturn op_fix_rpt_fn",
    "detail": "by-extension.python.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "op_rpt",
    "kind": 2,
    "importPath": "by-extension.python.rand-string-gen",
    "description": "by-extension.python.rand-string-gen",
    "peekOfCode": "def op_rpt( op, m, n ):\n\tif m == n:\n\t\tdef op_fix_rpt_fn( vm ):\n\t\t\tfor i in range( 0, m ):\n\t\t\t\top( vm )\n\t\treturn op_fix_rpt_fn\n\tif m > n: n, m = m, n\t\n\tr = n - m\n\tdef op_rpt_fn( vm ):\n\t\tfor i in range( 0, m + vm.choose( r ) ):",
    "detail": "by-extension.python.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "op_opt",
    "kind": 2,
    "importPath": "by-extension.python.rand-string-gen",
    "description": "by-extension.python.rand-string-gen",
    "peekOfCode": "def op_opt( op ):\n\tdef op_opt_fn( vm ):\n\t\tif vm.choose( 2 ): op( vm )\n\treturn op_opt_fn\ndef op_rng( s ):\n\ts = ''.join( s )\n\tdef op_rng_fn( vm ):\n\t\tvm.write( vm.choose( s ) )\n\treturn op_rng_fn\nany_op = op_rng( map( chr, range( 0, 255 ) ) )",
    "detail": "by-extension.python.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "op_rng",
    "kind": 2,
    "importPath": "by-extension.python.rand-string-gen",
    "description": "by-extension.python.rand-string-gen",
    "peekOfCode": "def op_rng( s ):\n\ts = ''.join( s )\n\tdef op_rng_fn( vm ):\n\t\tvm.write( vm.choose( s ) )\n\treturn op_rng_fn\nany_op = op_rng( map( chr, range( 0, 255 ) ) )\ndef mk_seq_op( seq ):\n\t\"unifies a sequence of 0 to N requirements into a minimal operation\"\n\tif not seq: return op_nul( )\n\tif callable( seq ): return seq",
    "detail": "by-extension.python.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "mk_seq_op",
    "kind": 2,
    "importPath": "by-extension.python.rand-string-gen",
    "description": "by-extension.python.rand-string-gen",
    "peekOfCode": "def mk_seq_op( seq ):\n\t\"unifies a sequence of 0 to N requirements into a minimal operation\"\n\tif not seq: return op_nul( )\n\tif callable( seq ): return seq\n\tif isinstance( seq, str ): return op_dat( seq )\n\tout = []; buf = ''\n\tfor op in seq:\n\t\tif isinstance( op, str ):\n\t\t\tbuf += op\n\t\telse:",
    "detail": "by-extension.python.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "generate",
    "kind": 2,
    "importPath": "by-extension.python.rand-string-gen",
    "description": "by-extension.python.rand-string-gen",
    "peekOfCode": "def generate( fx, seed = None, vm = None ):\n\tif isinstance( fx, str ):\n\t\tfx = compile( fx )\n\treturn fx.generate( seed, vm )\ndef compile( data ):\n\treturn Generator( Compiler( data ).parse_expr( ) )\ndef test( ex, seed = None ):\n\tr = re.compile( '^' + ex + '$' )\n\tdata = generate( ex, seed )\n\tk = r.match( data )",
    "detail": "by-extension.python.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "compile",
    "kind": 2,
    "importPath": "by-extension.python.rand-string-gen",
    "description": "by-extension.python.rand-string-gen",
    "peekOfCode": "def compile( data ):\n\treturn Generator( Compiler( data ).parse_expr( ) )\ndef test( ex, seed = None ):\n\tr = re.compile( '^' + ex + '$' )\n\tdata = generate( ex, seed )\n\tk = r.match( data )\n\tprint >>sys.stderr, 'TESTING: %s, RESULT: %r, %s' % ( \n\t\tex, data, \"PASSED\" if k else \"FAILED\" \n\t)\n\treturn k",
    "detail": "by-extension.python.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "test",
    "kind": 2,
    "importPath": "by-extension.python.rand-string-gen",
    "description": "by-extension.python.rand-string-gen",
    "peekOfCode": "def test( ex, seed = None ):\n\tr = re.compile( '^' + ex + '$' )\n\tdata = generate( ex, seed )\n\tk = r.match( data )\n\tprint >>sys.stderr, 'TESTING: %s, RESULT: %r, %s' % ( \n\t\tex, data, \"PASSED\" if k else \"FAILED\" \n\t)\n\treturn k\ndef test_batch( seed = None ):\n\treturn ( test( 'a' )",
    "detail": "by-extension.python.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "test_batch",
    "kind": 2,
    "importPath": "by-extension.python.rand-string-gen",
    "description": "by-extension.python.rand-string-gen",
    "peekOfCode": "def test_batch( seed = None ):\n\treturn ( test( 'a' )\n\t\t and test( 'a|b', seed )\n\t\t and test( 'a|b|c', seed )\n\t\t and test( 'aa', seed )\n\t\t and test( 'aa|b', seed )\n\t\t and test( 'aa|bb', seed )\n\t\t and test( 'aa|bb|c', seed )\n\t\t and test( 'a|bb|c', seed )\n\t\t and test( 'a|bb|cc', seed )",
    "detail": "by-extension.python.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\tr",
    "kind": 5,
    "importPath": "by-extension.python.rand-string-gen",
    "description": "by-extension.python.rand-string-gen",
    "peekOfCode": "\tr = n - m\n\tdef op_rpt_fn( vm ):\n\t\tfor i in range( 0, m + vm.choose( r ) ):\n\t\t\top( vm )\n\treturn op_rpt_fn\ndef op_opt( op ):\n\tdef op_opt_fn( vm ):\n\t\tif vm.choose( 2 ): op( vm )\n\treturn op_opt_fn\ndef op_rng( s ):",
    "detail": "by-extension.python.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\ts",
    "kind": 5,
    "importPath": "by-extension.python.rand-string-gen",
    "description": "by-extension.python.rand-string-gen",
    "peekOfCode": "\ts = ''.join( s )\n\tdef op_rng_fn( vm ):\n\t\tvm.write( vm.choose( s ) )\n\treturn op_rng_fn\nany_op = op_rng( map( chr, range( 0, 255 ) ) )\ndef mk_seq_op( seq ):\n\t\"unifies a sequence of 0 to N requirements into a minimal operation\"\n\tif not seq: return op_nul( )\n\tif callable( seq ): return seq\n\tif isinstance( seq, str ): return op_dat( seq )",
    "detail": "by-extension.python.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "any_op",
    "kind": 5,
    "importPath": "by-extension.python.rand-string-gen",
    "description": "by-extension.python.rand-string-gen",
    "peekOfCode": "any_op = op_rng( map( chr, range( 0, 255 ) ) )\ndef mk_seq_op( seq ):\n\t\"unifies a sequence of 0 to N requirements into a minimal operation\"\n\tif not seq: return op_nul( )\n\tif callable( seq ): return seq\n\tif isinstance( seq, str ): return op_dat( seq )\n\tout = []; buf = ''\n\tfor op in seq:\n\t\tif isinstance( op, str ):\n\t\t\tbuf += op",
    "detail": "by-extension.python.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\tout",
    "kind": 5,
    "importPath": "by-extension.python.rand-string-gen",
    "description": "by-extension.python.rand-string-gen",
    "peekOfCode": "\tout = []; buf = ''\n\tfor op in seq:\n\t\tif isinstance( op, str ):\n\t\t\tbuf += op\n\t\telse:\n\t\t\tif buf:\n\t\t\t\tout.append( op_dat( buf ) )\n\t\t\t\tbuf = ''\n\t\t\tif op:\n\t\t\t\tout.append( op )",
    "detail": "by-extension.python.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\t\t\tbuf",
    "kind": 5,
    "importPath": "by-extension.python.rand-string-gen",
    "description": "by-extension.python.rand-string-gen",
    "peekOfCode": "\t\t\t\tbuf = ''\n\t\t\tif op:\n\t\t\t\tout.append( op )\n\tif buf:\n\t\tout.append( op_dat( buf ) )\n\tif len( out ) == 1:\t\t\n\t\treturn out[0]\n\telse:\n\t\treturn op_seq( out )\nclass Error( Exception ):",
    "detail": "by-extension.python.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "escapes",
    "kind": 5,
    "importPath": "by-extension.python.rand-string-gen",
    "description": "by-extension.python.rand-string-gen",
    "peekOfCode": "escapes = {\n\t'n' : '\\n',\n\t'r' : '\\r',\n\t't' : '\\t',\n\t'v' : '\\v',\n\t'0' : '\\0'\n}\nrx_octet = re.compile( '([0-8][0-8][0-8]|[0])' )\nrx_refer = re.compile( '([0-9][0-9]?)')\nrx_range = re.compile( '[^\\\\\\\\]')",
    "detail": "by-extension.python.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "rx_octet",
    "kind": 5,
    "importPath": "by-extension.python.rand-string-gen",
    "description": "by-extension.python.rand-string-gen",
    "peekOfCode": "rx_octet = re.compile( '([0-8][0-8][0-8]|[0])' )\nrx_refer = re.compile( '([0-9][0-9]?)')\nrx_range = re.compile( '[^\\\\\\\\]')\nrx_repeat = re.compile( '([0-9]+)(,[0-9]+)?\\\\}' )\nclass Compiler:\n\tdef __init__( self, src ):\n\t\tself.src = src\n\t\tself.ofs = 0\n\t\tself.opens = 0\n\t\tself.closes = 0",
    "detail": "by-extension.python.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "rx_refer",
    "kind": 5,
    "importPath": "by-extension.python.rand-string-gen",
    "description": "by-extension.python.rand-string-gen",
    "peekOfCode": "rx_refer = re.compile( '([0-9][0-9]?)')\nrx_range = re.compile( '[^\\\\\\\\]')\nrx_repeat = re.compile( '([0-9]+)(,[0-9]+)?\\\\}' )\nclass Compiler:\n\tdef __init__( self, src ):\n\t\tself.src = src\n\t\tself.ofs = 0\n\t\tself.opens = 0\n\t\tself.closes = 0\n\t\tself.limit = 4",
    "detail": "by-extension.python.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "rx_range",
    "kind": 5,
    "importPath": "by-extension.python.rand-string-gen",
    "description": "by-extension.python.rand-string-gen",
    "peekOfCode": "rx_range = re.compile( '[^\\\\\\\\]')\nrx_repeat = re.compile( '([0-9]+)(,[0-9]+)?\\\\}' )\nclass Compiler:\n\tdef __init__( self, src ):\n\t\tself.src = src\n\t\tself.ofs = 0\n\t\tself.opens = 0\n\t\tself.closes = 0\n\t\tself.limit = 4\n\tdef parse_rpt( self, op ):",
    "detail": "by-extension.python.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "rx_repeat",
    "kind": 5,
    "importPath": "by-extension.python.rand-string-gen",
    "description": "by-extension.python.rand-string-gen",
    "peekOfCode": "rx_repeat = re.compile( '([0-9]+)(,[0-9]+)?\\\\}' )\nclass Compiler:\n\tdef __init__( self, src ):\n\t\tself.src = src\n\t\tself.ofs = 0\n\t\tself.opens = 0\n\t\tself.closes = 0\n\t\tself.limit = 4\n\tdef parse_rpt( self, op ):\n\t\tm = rx_repeat.match( self.src, self.ofs )",
    "detail": "by-extension.python.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\tself.src",
    "kind": 5,
    "importPath": "by-extension.python.rand-string-gen",
    "description": "by-extension.python.rand-string-gen",
    "peekOfCode": "\t\tself.src = src\n\t\tself.ofs = 0\n\t\tself.opens = 0\n\t\tself.closes = 0\n\t\tself.limit = 4\n\tdef parse_rpt( self, op ):\n\t\tm = rx_repeat.match( self.src, self.ofs )\n\t\tif not m:\n\t\t\traise Error( '\"{\" followed without matching \"}\"') #TODO: Python ignores this silently.\n\t\tself.ofs = m.end( )",
    "detail": "by-extension.python.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\tself.ofs",
    "kind": 5,
    "importPath": "by-extension.python.rand-string-gen",
    "description": "by-extension.python.rand-string-gen",
    "peekOfCode": "\t\tself.ofs = 0\n\t\tself.opens = 0\n\t\tself.closes = 0\n\t\tself.limit = 4\n\tdef parse_rpt( self, op ):\n\t\tm = rx_repeat.match( self.src, self.ofs )\n\t\tif not m:\n\t\t\traise Error( '\"{\" followed without matching \"}\"') #TODO: Python ignores this silently.\n\t\tself.ofs = m.end( )\n\t\tif not m.group(2):",
    "detail": "by-extension.python.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\tself.opens",
    "kind": 5,
    "importPath": "by-extension.python.rand-string-gen",
    "description": "by-extension.python.rand-string-gen",
    "peekOfCode": "\t\tself.opens = 0\n\t\tself.closes = 0\n\t\tself.limit = 4\n\tdef parse_rpt( self, op ):\n\t\tm = rx_repeat.match( self.src, self.ofs )\n\t\tif not m:\n\t\t\traise Error( '\"{\" followed without matching \"}\"') #TODO: Python ignores this silently.\n\t\tself.ofs = m.end( )\n\t\tif not m.group(2):\n\t\t\tn = int( m.group( 1 ) )",
    "detail": "by-extension.python.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\tself.closes",
    "kind": 5,
    "importPath": "by-extension.python.rand-string-gen",
    "description": "by-extension.python.rand-string-gen",
    "peekOfCode": "\t\tself.closes = 0\n\t\tself.limit = 4\n\tdef parse_rpt( self, op ):\n\t\tm = rx_repeat.match( self.src, self.ofs )\n\t\tif not m:\n\t\t\traise Error( '\"{\" followed without matching \"}\"') #TODO: Python ignores this silently.\n\t\tself.ofs = m.end( )\n\t\tif not m.group(2):\n\t\t\tn = int( m.group( 1 ) )\n\t\t\treturn op_rpt( op, n, n )",
    "detail": "by-extension.python.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\tself.limit",
    "kind": 5,
    "importPath": "by-extension.python.rand-string-gen",
    "description": "by-extension.python.rand-string-gen",
    "peekOfCode": "\t\tself.limit = 4\n\tdef parse_rpt( self, op ):\n\t\tm = rx_repeat.match( self.src, self.ofs )\n\t\tif not m:\n\t\t\traise Error( '\"{\" followed without matching \"}\"') #TODO: Python ignores this silently.\n\t\tself.ofs = m.end( )\n\t\tif not m.group(2):\n\t\t\tn = int( m.group( 1 ) )\n\t\t\treturn op_rpt( op, n, n )\n\t\tn = int( m.group(2)[1:] )",
    "detail": "by-extension.python.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\tm",
    "kind": 5,
    "importPath": "by-extension.python.rand-string-gen",
    "description": "by-extension.python.rand-string-gen",
    "peekOfCode": "\t\tm = rx_repeat.match( self.src, self.ofs )\n\t\tif not m:\n\t\t\traise Error( '\"{\" followed without matching \"}\"') #TODO: Python ignores this silently.\n\t\tself.ofs = m.end( )\n\t\tif not m.group(2):\n\t\t\tn = int( m.group( 1 ) )\n\t\t\treturn op_rpt( op, n, n )\n\t\tn = int( m.group(2)[1:] )\n\t\tm = int( m.group(1) )\n\t\treturn op_rpt( op, m, n )",
    "detail": "by-extension.python.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\tself.ofs",
    "kind": 5,
    "importPath": "by-extension.python.rand-string-gen",
    "description": "by-extension.python.rand-string-gen",
    "peekOfCode": "\t\tself.ofs = m.end( )\n\t\tif not m.group(2):\n\t\t\tn = int( m.group( 1 ) )\n\t\t\treturn op_rpt( op, n, n )\n\t\tn = int( m.group(2)[1:] )\n\t\tm = int( m.group(1) )\n\t\treturn op_rpt( op, m, n )\n\tdef parse_rng( self ):\n\t\tend = len( self.src )\n\t\tif self.ofs >= end:",
    "detail": "by-extension.python.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\t\tn",
    "kind": 5,
    "importPath": "by-extension.python.rand-string-gen",
    "description": "by-extension.python.rand-string-gen",
    "peekOfCode": "\t\t\tn = int( m.group( 1 ) )\n\t\t\treturn op_rpt( op, n, n )\n\t\tn = int( m.group(2)[1:] )\n\t\tm = int( m.group(1) )\n\t\treturn op_rpt( op, m, n )\n\tdef parse_rng( self ):\n\t\tend = len( self.src )\n\t\tif self.ofs >= end:\n\t\t\traise Error( '\"[\" at end of expression' )\n\t\tif self.src[self.ofs] == '^':",
    "detail": "by-extension.python.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\tn",
    "kind": 5,
    "importPath": "by-extension.python.rand-string-gen",
    "description": "by-extension.python.rand-string-gen",
    "peekOfCode": "\t\tn = int( m.group(2)[1:] )\n\t\tm = int( m.group(1) )\n\t\treturn op_rpt( op, m, n )\n\tdef parse_rng( self ):\n\t\tend = len( self.src )\n\t\tif self.ofs >= end:\n\t\t\traise Error( '\"[\" at end of expression' )\n\t\tif self.src[self.ofs] == '^':\n\t\t\tself.ofs += 1\n\t\t\tx = self.parse_rng_items( )",
    "detail": "by-extension.python.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\tm",
    "kind": 5,
    "importPath": "by-extension.python.rand-string-gen",
    "description": "by-extension.python.rand-string-gen",
    "peekOfCode": "\t\tm = int( m.group(1) )\n\t\treturn op_rpt( op, m, n )\n\tdef parse_rng( self ):\n\t\tend = len( self.src )\n\t\tif self.ofs >= end:\n\t\t\traise Error( '\"[\" at end of expression' )\n\t\tif self.src[self.ofs] == '^':\n\t\t\tself.ofs += 1\n\t\t\tx = self.parse_rng_items( )\n\t\t\ts = set( )",
    "detail": "by-extension.python.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\tend",
    "kind": 5,
    "importPath": "by-extension.python.rand-string-gen",
    "description": "by-extension.python.rand-string-gen",
    "peekOfCode": "\t\tend = len( self.src )\n\t\tif self.ofs >= end:\n\t\t\traise Error( '\"[\" at end of expression' )\n\t\tif self.src[self.ofs] == '^':\n\t\t\tself.ofs += 1\n\t\t\tx = self.parse_rng_items( )\n\t\t\ts = set( )\n\t\t\tfor i in range( 0, 127 ): #TODO: configurable\n\t\t\t\tc = chr( i )\n\t\t\t\tif c not in x: s.add( c )",
    "detail": "by-extension.python.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\t\tx",
    "kind": 5,
    "importPath": "by-extension.python.rand-string-gen",
    "description": "by-extension.python.rand-string-gen",
    "peekOfCode": "\t\t\tx = self.parse_rng_items( )\n\t\t\ts = set( )\n\t\t\tfor i in range( 0, 127 ): #TODO: configurable\n\t\t\t\tc = chr( i )\n\t\t\t\tif c not in x: s.add( c )\n\t\telse:\n\t\t\ts = self.parse_rng_items( )\n\t\treturn op_rng( s )\n\tdef parse_rng_items( self ):\n\t\tend = len( self.src )",
    "detail": "by-extension.python.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\t\ts",
    "kind": 5,
    "importPath": "by-extension.python.rand-string-gen",
    "description": "by-extension.python.rand-string-gen",
    "peekOfCode": "\t\t\ts = set( )\n\t\t\tfor i in range( 0, 127 ): #TODO: configurable\n\t\t\t\tc = chr( i )\n\t\t\t\tif c not in x: s.add( c )\n\t\telse:\n\t\t\ts = self.parse_rng_items( )\n\t\treturn op_rng( s )\n\tdef parse_rng_items( self ):\n\t\tend = len( self.src )\n\t\ts = set()",
    "detail": "by-extension.python.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\t\t\tc",
    "kind": 5,
    "importPath": "by-extension.python.rand-string-gen",
    "description": "by-extension.python.rand-string-gen",
    "peekOfCode": "\t\t\t\tc = chr( i )\n\t\t\t\tif c not in x: s.add( c )\n\t\telse:\n\t\t\ts = self.parse_rng_items( )\n\t\treturn op_rng( s )\n\tdef parse_rng_items( self ):\n\t\tend = len( self.src )\n\t\ts = set()\n\t\twhile self.ofs < end:\n\t\t\tch = self.src[ self.ofs ]",
    "detail": "by-extension.python.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\t\ts",
    "kind": 5,
    "importPath": "by-extension.python.rand-string-gen",
    "description": "by-extension.python.rand-string-gen",
    "peekOfCode": "\t\t\ts = self.parse_rng_items( )\n\t\treturn op_rng( s )\n\tdef parse_rng_items( self ):\n\t\tend = len( self.src )\n\t\ts = set()\n\t\twhile self.ofs < end:\n\t\t\tch = self.src[ self.ofs ]\n\t\t\tif ch == ']': \n\t\t\t\tself.ofs += 1\n\t\t\t\treturn s",
    "detail": "by-extension.python.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\tend",
    "kind": 5,
    "importPath": "by-extension.python.rand-string-gen",
    "description": "by-extension.python.rand-string-gen",
    "peekOfCode": "\t\tend = len( self.src )\n\t\ts = set()\n\t\twhile self.ofs < end:\n\t\t\tch = self.src[ self.ofs ]\n\t\t\tif ch == ']': \n\t\t\t\tself.ofs += 1\n\t\t\t\treturn s\n\t\t\ta = self.parse_rng_item( )\n\t\t\tif self.src[ self.ofs ] == '-':\n\t\t\t\tself.ofs += 1",
    "detail": "by-extension.python.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\ts",
    "kind": 5,
    "importPath": "by-extension.python.rand-string-gen",
    "description": "by-extension.python.rand-string-gen",
    "peekOfCode": "\t\ts = set()\n\t\twhile self.ofs < end:\n\t\t\tch = self.src[ self.ofs ]\n\t\t\tif ch == ']': \n\t\t\t\tself.ofs += 1\n\t\t\t\treturn s\n\t\t\ta = self.parse_rng_item( )\n\t\t\tif self.src[ self.ofs ] == '-':\n\t\t\t\tself.ofs += 1\n\t\t\t\tb = self.parse_rng_item( )",
    "detail": "by-extension.python.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\t\tch",
    "kind": 5,
    "importPath": "by-extension.python.rand-string-gen",
    "description": "by-extension.python.rand-string-gen",
    "peekOfCode": "\t\t\tch = self.src[ self.ofs ]\n\t\t\tif ch == ']': \n\t\t\t\tself.ofs += 1\n\t\t\t\treturn s\n\t\t\ta = self.parse_rng_item( )\n\t\t\tif self.src[ self.ofs ] == '-':\n\t\t\t\tself.ofs += 1\n\t\t\t\tb = self.parse_rng_item( )\n\t\t\t\tfor i in range( ord( a ), ord( b ) + 1 ):\n\t\t\t\t\tch = chr( i )",
    "detail": "by-extension.python.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\t\ta",
    "kind": 5,
    "importPath": "by-extension.python.rand-string-gen",
    "description": "by-extension.python.rand-string-gen",
    "peekOfCode": "\t\t\ta = self.parse_rng_item( )\n\t\t\tif self.src[ self.ofs ] == '-':\n\t\t\t\tself.ofs += 1\n\t\t\t\tb = self.parse_rng_item( )\n\t\t\t\tfor i in range( ord( a ), ord( b ) + 1 ):\n\t\t\t\t\tch = chr( i )\n\t\t\t\t\ts.add( ch )\n\t\t\telse:\n\t\t\t\ts.add( a )\n\t\traise Error( 'unmatched \"[\"' )",
    "detail": "by-extension.python.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\t\t\tb",
    "kind": 5,
    "importPath": "by-extension.python.rand-string-gen",
    "description": "by-extension.python.rand-string-gen",
    "peekOfCode": "\t\t\t\tb = self.parse_rng_item( )\n\t\t\t\tfor i in range( ord( a ), ord( b ) + 1 ):\n\t\t\t\t\tch = chr( i )\n\t\t\t\t\ts.add( ch )\n\t\t\telse:\n\t\t\t\ts.add( a )\n\t\traise Error( 'unmatched \"[\"' )\n\tdef parse_rng_item( self ):\n\t\tend = len( self.src )\n\t\tif self.ofs >= end: raise Error( '\"[\" at end of expression' )",
    "detail": "by-extension.python.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\t\t\t\tch",
    "kind": 5,
    "importPath": "by-extension.python.rand-string-gen",
    "description": "by-extension.python.rand-string-gen",
    "peekOfCode": "\t\t\t\t\tch = chr( i )\n\t\t\t\t\ts.add( ch )\n\t\t\telse:\n\t\t\t\ts.add( a )\n\t\traise Error( 'unmatched \"[\"' )\n\tdef parse_rng_item( self ):\n\t\tend = len( self.src )\n\t\tif self.ofs >= end: raise Error( '\"[\" at end of expression' )\n\t\tch = self.src[ self.ofs ]\n\t\tself.ofs += 1",
    "detail": "by-extension.python.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\tend",
    "kind": 5,
    "importPath": "by-extension.python.rand-string-gen",
    "description": "by-extension.python.rand-string-gen",
    "peekOfCode": "\t\tend = len( self.src )\n\t\tif self.ofs >= end: raise Error( '\"[\" at end of expression' )\n\t\tch = self.src[ self.ofs ]\n\t\tself.ofs += 1\n\t\tif ch == '\\\\':\n\t\t\tif self.ofs >= end: raise Error( '\"\\\\\" at end of expression' )\n\t\t\tm = rx_octet.match( self.src, self.ofs )\n\t\t\tif m:\n\t\t\t\tself.ofs = m.end( )\n\t\t\t\treturn chr( int( m.group(1), 8 ) )",
    "detail": "by-extension.python.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\tch",
    "kind": 5,
    "importPath": "by-extension.python.rand-string-gen",
    "description": "by-extension.python.rand-string-gen",
    "peekOfCode": "\t\tch = self.src[ self.ofs ]\n\t\tself.ofs += 1\n\t\tif ch == '\\\\':\n\t\t\tif self.ofs >= end: raise Error( '\"\\\\\" at end of expression' )\n\t\t\tm = rx_octet.match( self.src, self.ofs )\n\t\t\tif m:\n\t\t\t\tself.ofs = m.end( )\n\t\t\t\treturn chr( int( m.group(1), 8 ) )\n\t\telse:\n\t\t\treturn ch",
    "detail": "by-extension.python.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\t\tm",
    "kind": 5,
    "importPath": "by-extension.python.rand-string-gen",
    "description": "by-extension.python.rand-string-gen",
    "peekOfCode": "\t\t\tm = rx_octet.match( self.src, self.ofs )\n\t\t\tif m:\n\t\t\t\tself.ofs = m.end( )\n\t\t\t\treturn chr( int( m.group(1), 8 ) )\n\t\telse:\n\t\t\treturn ch\n\tdef parse_esc( self ):\n\t\tif self.ofs >= len( self.src ):\n\t\t\traise Error( '\"\\\\\" at end of expression' )\n\t\tm = rx_octet.match( self.src, self.ofs )",
    "detail": "by-extension.python.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\t\t\tself.ofs",
    "kind": 5,
    "importPath": "by-extension.python.rand-string-gen",
    "description": "by-extension.python.rand-string-gen",
    "peekOfCode": "\t\t\t\tself.ofs = m.end( )\n\t\t\t\treturn chr( int( m.group(1), 8 ) )\n\t\telse:\n\t\t\treturn ch\n\tdef parse_esc( self ):\n\t\tif self.ofs >= len( self.src ):\n\t\t\traise Error( '\"\\\\\" at end of expression' )\n\t\tm = rx_octet.match( self.src, self.ofs )\n\t\tif m:\n\t\t\tself.ofs = m.end( )",
    "detail": "by-extension.python.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\tm",
    "kind": 5,
    "importPath": "by-extension.python.rand-string-gen",
    "description": "by-extension.python.rand-string-gen",
    "peekOfCode": "\t\tm = rx_octet.match( self.src, self.ofs )\n\t\tif m:\n\t\t\tself.ofs = m.end( )\n\t\t\treturn op_data( chr( int( m.group(1), 8 ) ) )\n\t\tm = rx_refer.match( self.src, self.ofs )\n\t\tif m:\n\t\t\tself.ofs = m.end( )\n\t\t\tix = int( m.group( 1 ), 8 )\n\t\t\tif ix > self.closes:\n\t\t\t\traise Error( 'illegal forward reference' ) # not that there are any legal ones.",
    "detail": "by-extension.python.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\t\tself.ofs",
    "kind": 5,
    "importPath": "by-extension.python.rand-string-gen",
    "description": "by-extension.python.rand-string-gen",
    "peekOfCode": "\t\t\tself.ofs = m.end( )\n\t\t\treturn op_data( chr( int( m.group(1), 8 ) ) )\n\t\tm = rx_refer.match( self.src, self.ofs )\n\t\tif m:\n\t\t\tself.ofs = m.end( )\n\t\t\tix = int( m.group( 1 ), 8 )\n\t\t\tif ix > self.closes:\n\t\t\t\traise Error( 'illegal forward reference' ) # not that there are any legal ones.\n\t\t\treturn op_ref( ix )\n\t\tch = self.src[self.ofs]",
    "detail": "by-extension.python.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\tm",
    "kind": 5,
    "importPath": "by-extension.python.rand-string-gen",
    "description": "by-extension.python.rand-string-gen",
    "peekOfCode": "\t\tm = rx_refer.match( self.src, self.ofs )\n\t\tif m:\n\t\t\tself.ofs = m.end( )\n\t\t\tix = int( m.group( 1 ), 8 )\n\t\t\tif ix > self.closes:\n\t\t\t\traise Error( 'illegal forward reference' ) # not that there are any legal ones.\n\t\t\treturn op_ref( ix )\n\t\tch = self.src[self.ofs]\n\t\tself.ofs += 1\n\t\treturn escapes.get( ch, ch )\t\t\t\t",
    "detail": "by-extension.python.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\t\tself.ofs",
    "kind": 5,
    "importPath": "by-extension.python.rand-string-gen",
    "description": "by-extension.python.rand-string-gen",
    "peekOfCode": "\t\t\tself.ofs = m.end( )\n\t\t\tix = int( m.group( 1 ), 8 )\n\t\t\tif ix > self.closes:\n\t\t\t\traise Error( 'illegal forward reference' ) # not that there are any legal ones.\n\t\t\treturn op_ref( ix )\n\t\tch = self.src[self.ofs]\n\t\tself.ofs += 1\n\t\treturn escapes.get( ch, ch )\t\t\t\t\n\tdef parse_expr( self, inner = False ):\n\t\t\"parses a possibly branched expression yielding none or an operation\"",
    "detail": "by-extension.python.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\t\tix",
    "kind": 5,
    "importPath": "by-extension.python.rand-string-gen",
    "description": "by-extension.python.rand-string-gen",
    "peekOfCode": "\t\t\tix = int( m.group( 1 ), 8 )\n\t\t\tif ix > self.closes:\n\t\t\t\traise Error( 'illegal forward reference' ) # not that there are any legal ones.\n\t\t\treturn op_ref( ix )\n\t\tch = self.src[self.ofs]\n\t\tself.ofs += 1\n\t\treturn escapes.get( ch, ch )\t\t\t\t\n\tdef parse_expr( self, inner = False ):\n\t\t\"parses a possibly branched expression yielding none or an operation\"\n\t\topt = []\t # We start with an empty sequence of requirements.",
    "detail": "by-extension.python.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\tch",
    "kind": 5,
    "importPath": "by-extension.python.rand-string-gen",
    "description": "by-extension.python.rand-string-gen",
    "peekOfCode": "\t\tch = self.src[self.ofs]\n\t\tself.ofs += 1\n\t\treturn escapes.get( ch, ch )\t\t\t\t\n\tdef parse_expr( self, inner = False ):\n\t\t\"parses a possibly branched expression yielding none or an operation\"\n\t\topt = []\t # We start with an empty sequence of requirements.\n\t\topts = [opt] # And a empty list of branches.\n\t\tend = len( self.src )\n\t\twhile self.ofs < end:\n\t\t\tch = self.src[ self.ofs ]",
    "detail": "by-extension.python.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\topt",
    "kind": 5,
    "importPath": "by-extension.python.rand-string-gen",
    "description": "by-extension.python.rand-string-gen",
    "peekOfCode": "\t\topt = []\t # We start with an empty sequence of requirements.\n\t\topts = [opt] # And a empty list of branches.\n\t\tend = len( self.src )\n\t\twhile self.ofs < end:\n\t\t\tch = self.src[ self.ofs ]\n\t\t\tself.ofs += 1\n\t\t\tif ch == '|':\n\t\t\t\topt = []\n\t\t\t\topts.append( opt )\n\t\t\telif ch =='(':",
    "detail": "by-extension.python.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\topts",
    "kind": 5,
    "importPath": "by-extension.python.rand-string-gen",
    "description": "by-extension.python.rand-string-gen",
    "peekOfCode": "\t\topts = [opt] # And a empty list of branches.\n\t\tend = len( self.src )\n\t\twhile self.ofs < end:\n\t\t\tch = self.src[ self.ofs ]\n\t\t\tself.ofs += 1\n\t\t\tif ch == '|':\n\t\t\t\topt = []\n\t\t\t\topts.append( opt )\n\t\t\telif ch =='(':\n\t\t\t\tself.opens += 1",
    "detail": "by-extension.python.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\tend",
    "kind": 5,
    "importPath": "by-extension.python.rand-string-gen",
    "description": "by-extension.python.rand-string-gen",
    "peekOfCode": "\t\tend = len( self.src )\n\t\twhile self.ofs < end:\n\t\t\tch = self.src[ self.ofs ]\n\t\t\tself.ofs += 1\n\t\t\tif ch == '|':\n\t\t\t\topt = []\n\t\t\t\topts.append( opt )\n\t\t\telif ch =='(':\n\t\t\t\tself.opens += 1\n\t\t\t\topt.append( op_set( self.opens, self.parse_expr( True ) ) )",
    "detail": "by-extension.python.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\t\tch",
    "kind": 5,
    "importPath": "by-extension.python.rand-string-gen",
    "description": "by-extension.python.rand-string-gen",
    "peekOfCode": "\t\t\tch = self.src[ self.ofs ]\n\t\t\tself.ofs += 1\n\t\t\tif ch == '|':\n\t\t\t\topt = []\n\t\t\t\topts.append( opt )\n\t\t\telif ch =='(':\n\t\t\t\tself.opens += 1\n\t\t\t\topt.append( op_set( self.opens, self.parse_expr( True ) ) )\n\t\t\t\tself.closes += 1\n\t\t\telif ch == ')':",
    "detail": "by-extension.python.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\t\t\topt",
    "kind": 5,
    "importPath": "by-extension.python.rand-string-gen",
    "description": "by-extension.python.rand-string-gen",
    "peekOfCode": "\t\t\t\topt = []\n\t\t\t\topts.append( opt )\n\t\t\telif ch =='(':\n\t\t\t\tself.opens += 1\n\t\t\t\topt.append( op_set( self.opens, self.parse_expr( True ) ) )\n\t\t\t\tself.closes += 1\n\t\t\telif ch == ')':\n\t\t\t\tif not inner: raise Error( 'unmatched \")\"' )\n\t\t\t\tinner = False\n\t\t\t\tbreak",
    "detail": "by-extension.python.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\t\t\tinner",
    "kind": 5,
    "importPath": "by-extension.python.rand-string-gen",
    "description": "by-extension.python.rand-string-gen",
    "peekOfCode": "\t\t\t\tinner = False\n\t\t\t\tbreak\n\t\t\telif ch == '\\\\':\n\t\t\t\topt.append( self.parse_esc( ) )\n\t\t\telif ch == '.':\n                                opt.append( any_op )\n\t\t\telif ch == '*':\n\t\t\t\tif not opt: raise Error( 'nothing to repeat' )\n\t\t\t\t#TODO: Catch and Report multiple-repeat.\n\t\t\t\topt[-1] = op_rpt( mk_seq_op( opt[-1] ), 0, self.limit )",
    "detail": "by-extension.python.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\t\t\topt[-1]",
    "kind": 5,
    "importPath": "by-extension.python.rand-string-gen",
    "description": "by-extension.python.rand-string-gen",
    "peekOfCode": "\t\t\t\topt[-1] = op_rpt( mk_seq_op( opt[-1] ), 0, self.limit )\n\t\t\telif ch == '+':\n\t\t\t\tif not opt: raise Error( 'nothing to repeat' )\n\t\t\t\t#TODO: Catch and Report multiple-repeat.\n\t\t\t\topt[-1] = op_rpt( mk_seq_op( opt[-1] ), 1, self.limit )\n\t\t\telif ch == '?':\n\t\t\t\tif not opt: raise Error( 'nothing to repeat' )\n\t\t\t\t#TODO: Catch and Report multiple-repeat.\n\t\t\t\topt[-1] = op_opt( mk_seq_op( opt[-1] ) )\n\t\t\telif ch == '[':",
    "detail": "by-extension.python.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\t\t\topt[-1]",
    "kind": 5,
    "importPath": "by-extension.python.rand-string-gen",
    "description": "by-extension.python.rand-string-gen",
    "peekOfCode": "\t\t\t\topt[-1] = op_rpt( mk_seq_op( opt[-1] ), 1, self.limit )\n\t\t\telif ch == '?':\n\t\t\t\tif not opt: raise Error( 'nothing to repeat' )\n\t\t\t\t#TODO: Catch and Report multiple-repeat.\n\t\t\t\topt[-1] = op_opt( mk_seq_op( opt[-1] ) )\n\t\t\telif ch == '[':\n\t\t\t\topt.append( self.parse_rng( ) )\n\t\t\telif ch == '{':\n\t\t\t\tif not opt: raise Error( 'nothing to repeat' )\n\t\t\t\t#TODO: Catch and Report multiple-repeat.",
    "detail": "by-extension.python.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\t\t\topt[-1]",
    "kind": 5,
    "importPath": "by-extension.python.rand-string-gen",
    "description": "by-extension.python.rand-string-gen",
    "peekOfCode": "\t\t\t\topt[-1] = op_opt( mk_seq_op( opt[-1] ) )\n\t\t\telif ch == '[':\n\t\t\t\topt.append( self.parse_rng( ) )\n\t\t\telif ch == '{':\n\t\t\t\tif not opt: raise Error( 'nothing to repeat' )\n\t\t\t\t#TODO: Catch and Report multiple-repeat.\n\t\t\t\topt[-1] = self.parse_rpt( mk_seq_op( opt[-1] ) )\n\t\t\telse:\n\t\t\t\topt.append( ch )\n\t\tif inner:",
    "detail": "by-extension.python.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\t\t\topt[-1]",
    "kind": 5,
    "importPath": "by-extension.python.rand-string-gen",
    "description": "by-extension.python.rand-string-gen",
    "peekOfCode": "\t\t\t\topt[-1] = self.parse_rpt( mk_seq_op( opt[-1] ) )\n\t\t\telse:\n\t\t\t\topt.append( ch )\n\t\tif inner:\n\t\t\traise Error( 'unmatched \"(\"' )\n\t\topts = filter( lambda x:x, opts )\n\t\tif not opts:\n\t\t\treturn op_nul( )\n\t\telif len( opts ) == 1:\n\t\t\treturn mk_seq_op( opt )",
    "detail": "by-extension.python.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\topts",
    "kind": 5,
    "importPath": "by-extension.python.rand-string-gen",
    "description": "by-extension.python.rand-string-gen",
    "peekOfCode": "\t\topts = filter( lambda x:x, opts )\n\t\tif not opts:\n\t\t\treturn op_nul( )\n\t\telif len( opts ) == 1:\n\t\t\treturn mk_seq_op( opt )\n\t\telse:\n\t\t\treturn op_alt( map( mk_seq_op, opts ) )\nclass Generator:\n\tdef __init__( self, root ):\n\t\tif not root: raise Exception #TODO",
    "detail": "by-extension.python.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\tself.root",
    "kind": 5,
    "importPath": "by-extension.python.rand-string-gen",
    "description": "by-extension.python.rand-string-gen",
    "peekOfCode": "\t\tself.root = root\n\tdef generate( self, seed = None, vm = None ):\n\t\tif vm is None: vm = Vm( seed )\t\t\n\t\tself.root( vm )\n\t\treturn str( vm )\nclass Vm:\n\tdef __init__( self, seed = None ):\n\t\tself.rng = random.WichmannHill( seed )\n\t\tself.out = []\n\t\tself.groups = {}",
    "detail": "by-extension.python.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\tself.rng",
    "kind": 5,
    "importPath": "by-extension.python.rand-string-gen",
    "description": "by-extension.python.rand-string-gen",
    "peekOfCode": "\t\tself.rng = random.WichmannHill( seed )\n\t\tself.out = []\n\t\tself.groups = {}\n\tdef choose( self, field ):\n\t\t\"selects a random value from 0 .. field - 1, or the list\"\n\t\tif isinstance( field, int ):\n\t\t\treturn self.rng.randint( 0, field )\n\t\telse:\n\t\t\treturn self.rng.choice( field )\n\tdef write( self, data ):",
    "detail": "by-extension.python.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\tself.out",
    "kind": 5,
    "importPath": "by-extension.python.rand-string-gen",
    "description": "by-extension.python.rand-string-gen",
    "peekOfCode": "\t\tself.out = []\n\t\tself.groups = {}\n\tdef choose( self, field ):\n\t\t\"selects a random value from 0 .. field - 1, or the list\"\n\t\tif isinstance( field, int ):\n\t\t\treturn self.rng.randint( 0, field )\n\t\telse:\n\t\t\treturn self.rng.choice( field )\n\tdef write( self, data ):\n\t\tself.out.append( data )",
    "detail": "by-extension.python.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\tself.groups",
    "kind": 5,
    "importPath": "by-extension.python.rand-string-gen",
    "description": "by-extension.python.rand-string-gen",
    "peekOfCode": "\t\tself.groups = {}\n\tdef choose( self, field ):\n\t\t\"selects a random value from 0 .. field - 1, or the list\"\n\t\tif isinstance( field, int ):\n\t\t\treturn self.rng.randint( 0, field )\n\t\telse:\n\t\t\treturn self.rng.choice( field )\n\tdef write( self, data ):\n\t\tself.out.append( data )\n\tdef group( self, tag ):",
    "detail": "by-extension.python.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\tself.vm",
    "kind": 5,
    "importPath": "by-extension.python.rand-string-gen",
    "description": "by-extension.python.rand-string-gen",
    "peekOfCode": "\t\tself.vm = vm\n\t\tself.ref = ref\n\tdef __enter__( self ):\n\t\tself.out = self.vm.out\n\t\tself.vm.out = []\n\tdef __exit__( self, errtyp, errval, errtb ):\n\t\tif errtyp or errval: return False\n\t\tvm = self.vm\n\t\tdata = ''.join( vm.out )\n\t\tvm.out = self.out",
    "detail": "by-extension.python.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\tself.ref",
    "kind": 5,
    "importPath": "by-extension.python.rand-string-gen",
    "description": "by-extension.python.rand-string-gen",
    "peekOfCode": "\t\tself.ref = ref\n\tdef __enter__( self ):\n\t\tself.out = self.vm.out\n\t\tself.vm.out = []\n\tdef __exit__( self, errtyp, errval, errtb ):\n\t\tif errtyp or errval: return False\n\t\tvm = self.vm\n\t\tdata = ''.join( vm.out )\n\t\tvm.out = self.out\n\t\tvm.write( data )",
    "detail": "by-extension.python.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\tself.out",
    "kind": 5,
    "importPath": "by-extension.python.rand-string-gen",
    "description": "by-extension.python.rand-string-gen",
    "peekOfCode": "\t\tself.out = self.vm.out\n\t\tself.vm.out = []\n\tdef __exit__( self, errtyp, errval, errtb ):\n\t\tif errtyp or errval: return False\n\t\tvm = self.vm\n\t\tdata = ''.join( vm.out )\n\t\tvm.out = self.out\n\t\tvm.write( data )\n\t\tvm.groups[self.ref] = data\ndef generate( fx, seed = None, vm = None ):",
    "detail": "by-extension.python.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\tself.vm.out",
    "kind": 5,
    "importPath": "by-extension.python.rand-string-gen",
    "description": "by-extension.python.rand-string-gen",
    "peekOfCode": "\t\tself.vm.out = []\n\tdef __exit__( self, errtyp, errval, errtb ):\n\t\tif errtyp or errval: return False\n\t\tvm = self.vm\n\t\tdata = ''.join( vm.out )\n\t\tvm.out = self.out\n\t\tvm.write( data )\n\t\tvm.groups[self.ref] = data\ndef generate( fx, seed = None, vm = None ):\n\tif isinstance( fx, str ):",
    "detail": "by-extension.python.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\tvm",
    "kind": 5,
    "importPath": "by-extension.python.rand-string-gen",
    "description": "by-extension.python.rand-string-gen",
    "peekOfCode": "\t\tvm = self.vm\n\t\tdata = ''.join( vm.out )\n\t\tvm.out = self.out\n\t\tvm.write( data )\n\t\tvm.groups[self.ref] = data\ndef generate( fx, seed = None, vm = None ):\n\tif isinstance( fx, str ):\n\t\tfx = compile( fx )\n\treturn fx.generate( seed, vm )\ndef compile( data ):",
    "detail": "by-extension.python.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\tdata",
    "kind": 5,
    "importPath": "by-extension.python.rand-string-gen",
    "description": "by-extension.python.rand-string-gen",
    "peekOfCode": "\t\tdata = ''.join( vm.out )\n\t\tvm.out = self.out\n\t\tvm.write( data )\n\t\tvm.groups[self.ref] = data\ndef generate( fx, seed = None, vm = None ):\n\tif isinstance( fx, str ):\n\t\tfx = compile( fx )\n\treturn fx.generate( seed, vm )\ndef compile( data ):\n\treturn Generator( Compiler( data ).parse_expr( ) )",
    "detail": "by-extension.python.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\tvm.out",
    "kind": 5,
    "importPath": "by-extension.python.rand-string-gen",
    "description": "by-extension.python.rand-string-gen",
    "peekOfCode": "\t\tvm.out = self.out\n\t\tvm.write( data )\n\t\tvm.groups[self.ref] = data\ndef generate( fx, seed = None, vm = None ):\n\tif isinstance( fx, str ):\n\t\tfx = compile( fx )\n\treturn fx.generate( seed, vm )\ndef compile( data ):\n\treturn Generator( Compiler( data ).parse_expr( ) )\ndef test( ex, seed = None ):",
    "detail": "by-extension.python.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\tvm.groups[self.ref]",
    "kind": 5,
    "importPath": "by-extension.python.rand-string-gen",
    "description": "by-extension.python.rand-string-gen",
    "peekOfCode": "\t\tvm.groups[self.ref] = data\ndef generate( fx, seed = None, vm = None ):\n\tif isinstance( fx, str ):\n\t\tfx = compile( fx )\n\treturn fx.generate( seed, vm )\ndef compile( data ):\n\treturn Generator( Compiler( data ).parse_expr( ) )\ndef test( ex, seed = None ):\n\tr = re.compile( '^' + ex + '$' )\n\tdata = generate( ex, seed )",
    "detail": "by-extension.python.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\tfx",
    "kind": 5,
    "importPath": "by-extension.python.rand-string-gen",
    "description": "by-extension.python.rand-string-gen",
    "peekOfCode": "\t\tfx = compile( fx )\n\treturn fx.generate( seed, vm )\ndef compile( data ):\n\treturn Generator( Compiler( data ).parse_expr( ) )\ndef test( ex, seed = None ):\n\tr = re.compile( '^' + ex + '$' )\n\tdata = generate( ex, seed )\n\tk = r.match( data )\n\tprint >>sys.stderr, 'TESTING: %s, RESULT: %r, %s' % ( \n\t\tex, data, \"PASSED\" if k else \"FAILED\" ",
    "detail": "by-extension.python.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\tr",
    "kind": 5,
    "importPath": "by-extension.python.rand-string-gen",
    "description": "by-extension.python.rand-string-gen",
    "peekOfCode": "\tr = re.compile( '^' + ex + '$' )\n\tdata = generate( ex, seed )\n\tk = r.match( data )\n\tprint >>sys.stderr, 'TESTING: %s, RESULT: %r, %s' % ( \n\t\tex, data, \"PASSED\" if k else \"FAILED\" \n\t)\n\treturn k\ndef test_batch( seed = None ):\n\treturn ( test( 'a' )\n\t\t and test( 'a|b', seed )",
    "detail": "by-extension.python.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\tdata",
    "kind": 5,
    "importPath": "by-extension.python.rand-string-gen",
    "description": "by-extension.python.rand-string-gen",
    "peekOfCode": "\tdata = generate( ex, seed )\n\tk = r.match( data )\n\tprint >>sys.stderr, 'TESTING: %s, RESULT: %r, %s' % ( \n\t\tex, data, \"PASSED\" if k else \"FAILED\" \n\t)\n\treturn k\ndef test_batch( seed = None ):\n\treturn ( test( 'a' )\n\t\t and test( 'a|b', seed )\n\t\t and test( 'a|b|c', seed )",
    "detail": "by-extension.python.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\tk",
    "kind": 5,
    "importPath": "by-extension.python.rand-string-gen",
    "description": "by-extension.python.rand-string-gen",
    "peekOfCode": "\tk = r.match( data )\n\tprint >>sys.stderr, 'TESTING: %s, RESULT: %r, %s' % ( \n\t\tex, data, \"PASSED\" if k else \"FAILED\" \n\t)\n\treturn k\ndef test_batch( seed = None ):\n\treturn ( test( 'a' )\n\t\t and test( 'a|b', seed )\n\t\t and test( 'a|b|c', seed )\n\t\t and test( 'aa', seed )",
    "detail": "by-extension.python.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "__all__",
    "kind": 5,
    "importPath": "by-extension.python.rand-string-gen",
    "description": "by-extension.python.rand-string-gen",
    "peekOfCode": "__all__ = [\n\t'compile', 'generate', 'Generator'\n]\nif __name__ == '__main__':\n\ttest_batch( )",
    "detail": "by-extension.python.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "markov",
    "kind": 2,
    "importPath": "by-extension.python.random_latin_citation",
    "description": "by-extension.python.random_latin_citation",
    "peekOfCode": "def markov(corpus, start, length):\n    # Counting occurrences\n    next_one = defaultdict(Counter)\n    for sentence in corpus:\n        words = sentence.split()\n        nb_words = len(words)\n        for i in range(nb_words - 1):\n            next_one[words[i]][words[i + 1]] += 1\n    # Initializing states\n    states = {}",
    "detail": "by-extension.python.random_latin_citation",
    "documentation": {}
  },
  {
    "label": "WORD_LIST",
    "kind": 5,
    "importPath": "by-extension.python.random_latin_citation",
    "description": "by-extension.python.random_latin_citation",
    "peekOfCode": "WORD_LIST = '/home/lilian/bin/latin.txt'\ndef markov(corpus, start, length):\n    # Counting occurrences\n    next_one = defaultdict(Counter)\n    for sentence in corpus:\n        words = sentence.split()\n        nb_words = len(words)\n        for i in range(nb_words - 1):\n            next_one[words[i]][words[i + 1]] += 1\n    # Initializing states",
    "detail": "by-extension.python.random_latin_citation",
    "documentation": {}
  },
  {
    "label": "remove_from_list",
    "kind": 2,
    "importPath": "by-extension.python.remove-from-list",
    "description": "by-extension.python.remove-from-list",
    "peekOfCode": "def remove_from_list(lst, val):\n   for num in lst:\n      print(num)\n      if val in lst:\n         lst.remove(val)\n   return lst\nnums = [2, 7, 7, 6, 2, 11, 9, 1, -4, 7, 1]\nvalue = 7\nprint(remove_from_list(nums, value))",
    "detail": "by-extension.python.remove-from-list",
    "documentation": {}
  },
  {
    "label": "nums",
    "kind": 5,
    "importPath": "by-extension.python.remove-from-list",
    "description": "by-extension.python.remove-from-list",
    "peekOfCode": "nums = [2, 7, 7, 6, 2, 11, 9, 1, -4, 7, 1]\nvalue = 7\nprint(remove_from_list(nums, value))",
    "detail": "by-extension.python.remove-from-list",
    "documentation": {}
  },
  {
    "label": "value",
    "kind": 5,
    "importPath": "by-extension.python.remove-from-list",
    "description": "by-extension.python.remove-from-list",
    "peekOfCode": "value = 7\nprint(remove_from_list(nums, value))",
    "detail": "by-extension.python.remove-from-list",
    "documentation": {}
  },
  {
    "label": "remove_instance",
    "kind": 2,
    "importPath": "by-extension.python.RemoveInstance",
    "description": "by-extension.python.RemoveInstance",
    "peekOfCode": "def remove_instance(nums, val):\n    \"\"\"\n    Given an array nums, and a value val, returns the new length of the array with the value removed\n    i.e. the number of items in nums with val\n    Input: nums=[5, 2, 2, 5, 3]  and   val = 5\n    Output: 3\n    \"\"\"\n    try:\n        #check for cases of an empty array\n        if len(nums) == 0:",
    "detail": "by-extension.python.RemoveInstance",
    "documentation": {}
  },
  {
    "label": "createStack",
    "kind": 2,
    "importPath": "by-extension.python.rev-str-stack",
    "description": "by-extension.python.rev-str-stack",
    "peekOfCode": "def createStack():\n    stack=[]\n    return stack\n# Function to determine the size of the stack\ndef size(stack):\n    return len(stack)\n# Stack is empty if the size is 0\ndef isEmpty(stack):\n    if size(stack) == 0:\n        return true",
    "detail": "by-extension.python.rev-str-stack",
    "documentation": {}
  },
  {
    "label": "size",
    "kind": 2,
    "importPath": "by-extension.python.rev-str-stack",
    "description": "by-extension.python.rev-str-stack",
    "peekOfCode": "def size(stack):\n    return len(stack)\n# Stack is empty if the size is 0\ndef isEmpty(stack):\n    if size(stack) == 0:\n        return true\n# Function to add an item to stack . It\n# increases size by 1    \ndef push(stack,item):\n    stack.append(item)",
    "detail": "by-extension.python.rev-str-stack",
    "documentation": {}
  },
  {
    "label": "isEmpty",
    "kind": 2,
    "importPath": "by-extension.python.rev-str-stack",
    "description": "by-extension.python.rev-str-stack",
    "peekOfCode": "def isEmpty(stack):\n    if size(stack) == 0:\n        return true\n# Function to add an item to stack . It\n# increases size by 1    \ndef push(stack,item):\n    stack.append(item)\n# Function to remove an item from stack. \n# It decreases size by 1\ndef pop(stack):",
    "detail": "by-extension.python.rev-str-stack",
    "documentation": {}
  },
  {
    "label": "push",
    "kind": 2,
    "importPath": "by-extension.python.rev-str-stack",
    "description": "by-extension.python.rev-str-stack",
    "peekOfCode": "def push(stack,item):\n    stack.append(item)\n# Function to remove an item from stack. \n# It decreases size by 1\ndef pop(stack):\n    if isEmpty(stack): return\n    return stack.pop()\n# A stack based function to reverse a string\ndef reverse(string):\n    n = len(string)",
    "detail": "by-extension.python.rev-str-stack",
    "documentation": {}
  },
  {
    "label": "pop",
    "kind": 2,
    "importPath": "by-extension.python.rev-str-stack",
    "description": "by-extension.python.rev-str-stack",
    "peekOfCode": "def pop(stack):\n    if isEmpty(stack): return\n    return stack.pop()\n# A stack based function to reverse a string\ndef reverse(string):\n    n = len(string)\n    # Create a empty stack\n    stack = createStack()\n    # Push all characters of string to stack\n    for i in range(0,n,1):",
    "detail": "by-extension.python.rev-str-stack",
    "documentation": {}
  },
  {
    "label": "reverse",
    "kind": 2,
    "importPath": "by-extension.python.rev-str-stack",
    "description": "by-extension.python.rev-str-stack",
    "peekOfCode": "def reverse(string):\n    n = len(string)\n    # Create a empty stack\n    stack = createStack()\n    # Push all characters of string to stack\n    for i in range(0,n,1):\n        push(stack,string[i])\n    # Making the string empty since all\n    # characters are saved in stack    \n    string=\"\"",
    "detail": "by-extension.python.rev-str-stack",
    "documentation": {}
  },
  {
    "label": "reverse",
    "kind": 2,
    "importPath": "by-extension.python.rev1",
    "description": "by-extension.python.rev1",
    "peekOfCode": "def reverse(s):\n    if len(s) == 0:\n        return s\n    else:\n        return reverse(s[1:]) + s[0]",
    "detail": "by-extension.python.rev1",
    "documentation": {}
  },
  {
    "label": "reverse",
    "kind": 2,
    "importPath": "by-extension.python.reverse",
    "description": "by-extension.python.reverse",
    "peekOfCode": "def reverse(s):\n  str = \"\"\n  for i in s:\n    str = i + str\n  return str",
    "detail": "by-extension.python.reverse",
    "documentation": {}
  },
  {
    "label": "random_choice",
    "kind": 2,
    "importPath": "by-extension.python.rock-paper-scissors",
    "description": "by-extension.python.rock-paper-scissors",
    "peekOfCode": "def random_choice(options=[\"rock\", \"paper\", \"scissors\"]):\n    return random.choice(options)\ndef determine_winner(choice1, choice2):\n    \"\"\"\n    Determines the winning choice between two choices from selectable options: \"rock\", \"paper\", or \"scissors\".\n    Returns the winning choice (e.g. \"paper\"), or None if there is a tie.\n    Example: determine_winner(\"rock\", \"paper\")\n    \"\"\"\n    winners = {\n        \"rock\":{",
    "detail": "by-extension.python.rock-paper-scissors",
    "documentation": {}
  },
  {
    "label": "determine_winner",
    "kind": 2,
    "importPath": "by-extension.python.rock-paper-scissors",
    "description": "by-extension.python.rock-paper-scissors",
    "peekOfCode": "def determine_winner(choice1, choice2):\n    \"\"\"\n    Determines the winning choice between two choices from selectable options: \"rock\", \"paper\", or \"scissors\".\n    Returns the winning choice (e.g. \"paper\"), or None if there is a tie.\n    Example: determine_winner(\"rock\", \"paper\")\n    \"\"\"\n    winners = {\n        \"rock\":{\n            \"rock\": None, # represents a tie\n            \"paper\": \"paper\",",
    "detail": "by-extension.python.rock-paper-scissors",
    "documentation": {}
  },
  {
    "label": "GUI_WINDOW_TITLE",
    "kind": 5,
    "importPath": "by-extension.python.rock-paper-scissors",
    "description": "by-extension.python.rock-paper-scissors",
    "peekOfCode": "GUI_WINDOW_TITLE = \"Rock-Paper-Scissors\"\nWELCOME_MESSAGE = \"Hi. Welcome to my Rock-Paper-Scissors game!\"\nGUI_PROMPT_MESSAGE = \"Please choose an option from the dropdown:\"\nWIN_MESSAGE = \"Congratulations, you won!\"\nLOSE_MESSAGE = \"Oh, the computer won. It's ok.\"\nTIE_MESSAGE = \"Oh, it's a tie.\"\ndef random_choice(options=[\"rock\", \"paper\", \"scissors\"]):\n    return random.choice(options)\ndef determine_winner(choice1, choice2):\n    \"\"\"",
    "detail": "by-extension.python.rock-paper-scissors",
    "documentation": {}
  },
  {
    "label": "WELCOME_MESSAGE",
    "kind": 5,
    "importPath": "by-extension.python.rock-paper-scissors",
    "description": "by-extension.python.rock-paper-scissors",
    "peekOfCode": "WELCOME_MESSAGE = \"Hi. Welcome to my Rock-Paper-Scissors game!\"\nGUI_PROMPT_MESSAGE = \"Please choose an option from the dropdown:\"\nWIN_MESSAGE = \"Congratulations, you won!\"\nLOSE_MESSAGE = \"Oh, the computer won. It's ok.\"\nTIE_MESSAGE = \"Oh, it's a tie.\"\ndef random_choice(options=[\"rock\", \"paper\", \"scissors\"]):\n    return random.choice(options)\ndef determine_winner(choice1, choice2):\n    \"\"\"\n    Determines the winning choice between two choices from selectable options: \"rock\", \"paper\", or \"scissors\".",
    "detail": "by-extension.python.rock-paper-scissors",
    "documentation": {}
  },
  {
    "label": "GUI_PROMPT_MESSAGE",
    "kind": 5,
    "importPath": "by-extension.python.rock-paper-scissors",
    "description": "by-extension.python.rock-paper-scissors",
    "peekOfCode": "GUI_PROMPT_MESSAGE = \"Please choose an option from the dropdown:\"\nWIN_MESSAGE = \"Congratulations, you won!\"\nLOSE_MESSAGE = \"Oh, the computer won. It's ok.\"\nTIE_MESSAGE = \"Oh, it's a tie.\"\ndef random_choice(options=[\"rock\", \"paper\", \"scissors\"]):\n    return random.choice(options)\ndef determine_winner(choice1, choice2):\n    \"\"\"\n    Determines the winning choice between two choices from selectable options: \"rock\", \"paper\", or \"scissors\".\n    Returns the winning choice (e.g. \"paper\"), or None if there is a tie.",
    "detail": "by-extension.python.rock-paper-scissors",
    "documentation": {}
  },
  {
    "label": "WIN_MESSAGE",
    "kind": 5,
    "importPath": "by-extension.python.rock-paper-scissors",
    "description": "by-extension.python.rock-paper-scissors",
    "peekOfCode": "WIN_MESSAGE = \"Congratulations, you won!\"\nLOSE_MESSAGE = \"Oh, the computer won. It's ok.\"\nTIE_MESSAGE = \"Oh, it's a tie.\"\ndef random_choice(options=[\"rock\", \"paper\", \"scissors\"]):\n    return random.choice(options)\ndef determine_winner(choice1, choice2):\n    \"\"\"\n    Determines the winning choice between two choices from selectable options: \"rock\", \"paper\", or \"scissors\".\n    Returns the winning choice (e.g. \"paper\"), or None if there is a tie.\n    Example: determine_winner(\"rock\", \"paper\")",
    "detail": "by-extension.python.rock-paper-scissors",
    "documentation": {}
  },
  {
    "label": "LOSE_MESSAGE",
    "kind": 5,
    "importPath": "by-extension.python.rock-paper-scissors",
    "description": "by-extension.python.rock-paper-scissors",
    "peekOfCode": "LOSE_MESSAGE = \"Oh, the computer won. It's ok.\"\nTIE_MESSAGE = \"Oh, it's a tie.\"\ndef random_choice(options=[\"rock\", \"paper\", \"scissors\"]):\n    return random.choice(options)\ndef determine_winner(choice1, choice2):\n    \"\"\"\n    Determines the winning choice between two choices from selectable options: \"rock\", \"paper\", or \"scissors\".\n    Returns the winning choice (e.g. \"paper\"), or None if there is a tie.\n    Example: determine_winner(\"rock\", \"paper\")\n    \"\"\"",
    "detail": "by-extension.python.rock-paper-scissors",
    "documentation": {}
  },
  {
    "label": "TIE_MESSAGE",
    "kind": 5,
    "importPath": "by-extension.python.rock-paper-scissors",
    "description": "by-extension.python.rock-paper-scissors",
    "peekOfCode": "TIE_MESSAGE = \"Oh, it's a tie.\"\ndef random_choice(options=[\"rock\", \"paper\", \"scissors\"]):\n    return random.choice(options)\ndef determine_winner(choice1, choice2):\n    \"\"\"\n    Determines the winning choice between two choices from selectable options: \"rock\", \"paper\", or \"scissors\".\n    Returns the winning choice (e.g. \"paper\"), or None if there is a tie.\n    Example: determine_winner(\"rock\", \"paper\")\n    \"\"\"\n    winners = {",
    "detail": "by-extension.python.rock-paper-scissors",
    "documentation": {}
  },
  {
    "label": "description",
    "kind": 5,
    "importPath": "by-extension.python.rst2md",
    "description": "by-extension.python.rst2md",
    "peekOfCode": "description = ('Generates Markdown formatted text from standalone '\n               'reStructuredText sources.  ' + default_description)\npublish_cmdline(writer=markdown.Writer(), description=description)",
    "detail": "by-extension.python.rst2md",
    "documentation": {}
  },
  {
    "label": "Solution",
    "kind": 6,
    "importPath": "by-extension.python.search-in-rotated-sorted-array",
    "description": "by-extension.python.search-in-rotated-sorted-array",
    "peekOfCode": "class Solution:\n    def search(self, nums, target):\n        if not nums:\n            return -1\n        return self.binarySearch(nums, target, 0, len(nums)-1)\n    def binarySearch(self, nums, target, start, end):\n        if end < start:\n            return -1\n        mid = (start+end)//2\n        if nums[mid] == target:",
    "detail": "by-extension.python.search-in-rotated-sorted-array",
    "documentation": {}
  },
  {
    "label": "help",
    "kind": 2,
    "importPath": "by-extension.python.Search-working-dir-4-keyword-in-files",
    "description": "by-extension.python.Search-working-dir-4-keyword-in-files",
    "peekOfCode": "def help():\n    print(f'Syntax: {basename(argv[0])} (-i|-v|-h)')\n    print('\\t-i:\\tCase insensitive search.')\n    print('\\t-v:\\tVerbose.')\n    print('\\t-h:\\tHelp.')\ndef green(text):\n    return \"\\33[32m\" + text + \"\\33[0m\"\ndef main():\n    # configure extension\n    ext = input('Extensions: [c|cpp] ')",
    "detail": "by-extension.python.Search-working-dir-4-keyword-in-files",
    "documentation": {}
  },
  {
    "label": "green",
    "kind": 2,
    "importPath": "by-extension.python.Search-working-dir-4-keyword-in-files",
    "description": "by-extension.python.Search-working-dir-4-keyword-in-files",
    "peekOfCode": "def green(text):\n    return \"\\33[32m\" + text + \"\\33[0m\"\ndef main():\n    # configure extension\n    ext = input('Extensions: [c|cpp] ')\n    if ext == '':\n        ext = 'c|cpp'\n    elif ext.startswith('[') and ext.endswith(']'):\n        ext.strip('[]')\n    elif ext.startswith('(') and ext.endswith(')'):",
    "detail": "by-extension.python.Search-working-dir-4-keyword-in-files",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "by-extension.python.Search-working-dir-4-keyword-in-files",
    "description": "by-extension.python.Search-working-dir-4-keyword-in-files",
    "peekOfCode": "def main():\n    # configure extension\n    ext = input('Extensions: [c|cpp] ')\n    if ext == '':\n        ext = 'c|cpp'\n    elif ext.startswith('[') and ext.endswith(']'):\n        ext.strip('[]')\n    elif ext.startswith('(') and ext.endswith(')'):\n        ext.strip('()')\n    r = run(['find', '.', '-type', 'f', '-regex',",
    "detail": "by-extension.python.Search-working-dir-4-keyword-in-files",
    "documentation": {}
  },
  {
    "label": "VERBOSE",
    "kind": 5,
    "importPath": "by-extension.python.Search-working-dir-4-keyword-in-files",
    "description": "by-extension.python.Search-working-dir-4-keyword-in-files",
    "peekOfCode": "VERBOSE = False\nINSENSITIVE = False\ndef help():\n    print(f'Syntax: {basename(argv[0])} (-i|-v|-h)')\n    print('\\t-i:\\tCase insensitive search.')\n    print('\\t-v:\\tVerbose.')\n    print('\\t-h:\\tHelp.')\ndef green(text):\n    return \"\\33[32m\" + text + \"\\33[0m\"\ndef main():",
    "detail": "by-extension.python.Search-working-dir-4-keyword-in-files",
    "documentation": {}
  },
  {
    "label": "INSENSITIVE",
    "kind": 5,
    "importPath": "by-extension.python.Search-working-dir-4-keyword-in-files",
    "description": "by-extension.python.Search-working-dir-4-keyword-in-files",
    "peekOfCode": "INSENSITIVE = False\ndef help():\n    print(f'Syntax: {basename(argv[0])} (-i|-v|-h)')\n    print('\\t-i:\\tCase insensitive search.')\n    print('\\t-v:\\tVerbose.')\n    print('\\t-h:\\tHelp.')\ndef green(text):\n    return \"\\33[32m\" + text + \"\\33[0m\"\ndef main():\n    # configure extension",
    "detail": "by-extension.python.Search-working-dir-4-keyword-in-files",
    "documentation": {}
  },
  {
    "label": "selection_sort",
    "kind": 2,
    "importPath": "by-extension.python.selection_sort",
    "description": "by-extension.python.selection_sort",
    "peekOfCode": "def selection_sort(collection):\n    counter = 0\n    length = len(collection)\n    for i in range(0, length - 1):\n        j = i\n        for index in range(i + 1, length):\n            if collection[index] < collection[j]:\n                j = index\n        collection[j], collection[i] = collection[i], collection[j]\n        counter += 1",
    "detail": "by-extension.python.selection_sort",
    "documentation": {}
  },
  {
    "label": "visualization",
    "kind": 2,
    "importPath": "by-extension.python.selection_sort",
    "description": "by-extension.python.selection_sort",
    "peekOfCode": "def visualization():\n    length = 10\n    collection = [randint(0, length) for _ in range(length)]\n    print(\"Initial list:\", collection)\n    print(\"Visualization of algorithm work.\")\n    collection, counter = selection_sort(collection)\n    print(\"Final list:\", collection)\n    print(\"Total numbers of passages:\", counter)\ndef main():\n    elapsed_time = timeit.timeit(visualization, number=1)",
    "detail": "by-extension.python.selection_sort",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "by-extension.python.selection_sort",
    "description": "by-extension.python.selection_sort",
    "peekOfCode": "def main():\n    elapsed_time = timeit.timeit(visualization, number=1)\n    print(\"Elapsed time: \", round(elapsed_time, 7), \"sec.\")\nif __name__ == \"__main__\":\n    main()",
    "detail": "by-extension.python.selection_sort",
    "documentation": {}
  },
  {
    "label": "myset",
    "kind": 5,
    "importPath": "by-extension.python.set1",
    "description": "by-extension.python.set1",
    "peekOfCode": "myset = set([1,2,3,3,3])\n# set initialization using {}\nmyset = {1,2,3,3,3}\n# iteration of set\nfor ele in myset:\n  print(ele)\n# check if ele in set:\nprint(True if ele in myset else False)\n# add an element to set:\nmyset.add(ele)",
    "detail": "by-extension.python.set1",
    "documentation": {}
  },
  {
    "label": "myset",
    "kind": 5,
    "importPath": "by-extension.python.set1",
    "description": "by-extension.python.set1",
    "peekOfCode": "myset = {1,2,3,3,3}\n# iteration of set\nfor ele in myset:\n  print(ele)\n# check if ele in set:\nprint(True if ele in myset else False)\n# add an element to set:\nmyset.add(ele)\n# remove an element from set\nmyset.remove(ele)",
    "detail": "by-extension.python.set1",
    "documentation": {}
  },
  {
    "label": "myset1",
    "kind": 5,
    "importPath": "by-extension.python.set2",
    "description": "by-extension.python.set2",
    "peekOfCode": "myset1 = {1,2,3}\nmyset2 = {1,2,4,5}\n# union\nmyset = myset1.union(myset2)\n# intersection\nmyset = myset1.intersection(myset2)\n# difference\nmyset = myset1.difference(myset2)",
    "detail": "by-extension.python.set2",
    "documentation": {}
  },
  {
    "label": "myset2",
    "kind": 5,
    "importPath": "by-extension.python.set2",
    "description": "by-extension.python.set2",
    "peekOfCode": "myset2 = {1,2,4,5}\n# union\nmyset = myset1.union(myset2)\n# intersection\nmyset = myset1.intersection(myset2)\n# difference\nmyset = myset1.difference(myset2)",
    "detail": "by-extension.python.set2",
    "documentation": {}
  },
  {
    "label": "myset",
    "kind": 5,
    "importPath": "by-extension.python.set2",
    "description": "by-extension.python.set2",
    "peekOfCode": "myset = myset1.union(myset2)\n# intersection\nmyset = myset1.intersection(myset2)\n# difference\nmyset = myset1.difference(myset2)",
    "detail": "by-extension.python.set2",
    "documentation": {}
  },
  {
    "label": "myset",
    "kind": 5,
    "importPath": "by-extension.python.set2",
    "description": "by-extension.python.set2",
    "peekOfCode": "myset = myset1.intersection(myset2)\n# difference\nmyset = myset1.difference(myset2)",
    "detail": "by-extension.python.set2",
    "documentation": {}
  },
  {
    "label": "myset",
    "kind": 5,
    "importPath": "by-extension.python.set2",
    "description": "by-extension.python.set2",
    "peekOfCode": "myset = myset1.difference(myset2)",
    "detail": "by-extension.python.set2",
    "documentation": {}
  },
  {
    "label": "shell_sort",
    "kind": 2,
    "importPath": "by-extension.python.shell_sort",
    "description": "by-extension.python.shell_sort",
    "peekOfCode": "def shell_sort(collection):\n    length = len(collection)\n    middle, counter = length // 2, 0\n    while middle > 0:\n        for i in range(0, length - middle):\n            j = i\n            while (j >= 0) and (collection[j] > collection[j + middle]):\n                temp = collection[j]\n                collection[j] = collection[j + middle]\n                collection[j + middle] = temp",
    "detail": "by-extension.python.shell_sort",
    "documentation": {}
  },
  {
    "label": "visualization",
    "kind": 2,
    "importPath": "by-extension.python.shell_sort",
    "description": "by-extension.python.shell_sort",
    "peekOfCode": "def visualization():\n    length = 10\n    collection = [randint(0, length) for _ in range(length)]\n    print(\"Initial list:\", collection)\n    print(\"Visualization of algorithm work.\")\n    collection, counter = shell_sort(collection)\n    print(\"Final list:\", collection)\n    print(\"Total numbers of passages:\", counter)\ndef main():\n    elapsed_time = timeit.timeit(visualization, number=1)",
    "detail": "by-extension.python.shell_sort",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "by-extension.python.shell_sort",
    "description": "by-extension.python.shell_sort",
    "peekOfCode": "def main():\n    elapsed_time = timeit.timeit(visualization, number=1)\n    print(\"Elapsed time: \", round(elapsed_time, 7), \"sec.\")\nif __name__ == \"__main__\":\n    main()",
    "detail": "by-extension.python.shell_sort",
    "documentation": {}
  },
  {
    "label": "add",
    "kind": 2,
    "importPath": "by-extension.python.short-py-cheatsheet",
    "description": "by-extension.python.short-py-cheatsheet",
    "peekOfCode": "def add(x, y):\n    print(\"x is {} and y is {}\".format(x, y))\n    return x + y  # Return values with a return statement\n# Calling functions with parameters\nadd(5, 6)  # => prints out \"x is 5 and y is 6\" and returns 11\n# Another way to call functions is with keyword arguments\nadd(y=6, x=5)  # Keyword arguments can arrive in any order.\n# You can define functions that take a variable number of\n# positional arguments\ndef varargs(*args):",
    "detail": "by-extension.python.short-py-cheatsheet",
    "documentation": {}
  },
  {
    "label": "varargs",
    "kind": 2,
    "importPath": "by-extension.python.short-py-cheatsheet",
    "description": "by-extension.python.short-py-cheatsheet",
    "peekOfCode": "def varargs(*args):\n    return args\nvarargs(1, 2, 3)  # => (1, 2, 3)\n# You can define functions that take a variable number of\n# keyword arguments, as well\ndef keyword_args(**kwargs):\n    return kwargs\n# Let's call it to see what happens\nkeyword_args(big=\"foot\", loch=\"ness\")  # => {\"big\": \"foot\", \"loch\": \"ness\"}\n# You can do both at once, if you like",
    "detail": "by-extension.python.short-py-cheatsheet",
    "documentation": {}
  },
  {
    "label": "keyword_args",
    "kind": 2,
    "importPath": "by-extension.python.short-py-cheatsheet",
    "description": "by-extension.python.short-py-cheatsheet",
    "peekOfCode": "def keyword_args(**kwargs):\n    return kwargs\n# Let's call it to see what happens\nkeyword_args(big=\"foot\", loch=\"ness\")  # => {\"big\": \"foot\", \"loch\": \"ness\"}\n# You can do both at once, if you like\ndef all_the_args(*args, **kwargs):\n    print(args)\n    print(kwargs)\n\"\"\"\nall_the_args(1, 2, a=3, b=4) prints:",
    "detail": "by-extension.python.short-py-cheatsheet",
    "documentation": {}
  },
  {
    "label": "all_the_args",
    "kind": 2,
    "importPath": "by-extension.python.short-py-cheatsheet",
    "description": "by-extension.python.short-py-cheatsheet",
    "peekOfCode": "def all_the_args(*args, **kwargs):\n    print(args)\n    print(kwargs)\n\"\"\"\nall_the_args(1, 2, a=3, b=4) prints:\n    (1, 2)\n    {\"a\": 3, \"b\": 4}\n\"\"\"\n# When calling functions, you can do the opposite of args/kwargs!\n# Use * to expand tuples and use ** to expand kwargs.",
    "detail": "by-extension.python.short-py-cheatsheet",
    "documentation": {}
  },
  {
    "label": "swap",
    "kind": 2,
    "importPath": "by-extension.python.short-py-cheatsheet",
    "description": "by-extension.python.short-py-cheatsheet",
    "peekOfCode": "def swap(x, y):\n    return y, x  # Return multiple values as a tuple without the parenthesis.\n                 # (Note: parenthesis have been excluded but can be included)\nx = 1\ny = 2\nx, y = swap(x, y)     # => x = 2, y = 1\n# (x, y) = swap(x,y)  # Again parenthesis have been excluded but can be included.\n# Function Scope\nx = 5\ndef set_x(num):",
    "detail": "by-extension.python.short-py-cheatsheet",
    "documentation": {}
  },
  {
    "label": "set_x",
    "kind": 2,
    "importPath": "by-extension.python.short-py-cheatsheet",
    "description": "by-extension.python.short-py-cheatsheet",
    "peekOfCode": "def set_x(num):\n    # Local var x not the same as global variable x\n    x = num    # => 43\n    print(x)   # => 43\ndef set_global_x(num):\n    global x\n    print(x)   # => 5\n    x = num    # global var x is now set to 6\n    print(x)   # => 6\nset_x(43)",
    "detail": "by-extension.python.short-py-cheatsheet",
    "documentation": {}
  },
  {
    "label": "set_global_x",
    "kind": 2,
    "importPath": "by-extension.python.short-py-cheatsheet",
    "description": "by-extension.python.short-py-cheatsheet",
    "peekOfCode": "def set_global_x(num):\n    global x\n    print(x)   # => 5\n    x = num    # global var x is now set to 6\n    print(x)   # => 6\nset_x(43)\nset_global_x(6)\n# Python has first class functions\ndef create_adder(x):\n    def adder(y):",
    "detail": "by-extension.python.short-py-cheatsheet",
    "documentation": {}
  },
  {
    "label": "create_adder",
    "kind": 2,
    "importPath": "by-extension.python.short-py-cheatsheet",
    "description": "by-extension.python.short-py-cheatsheet",
    "peekOfCode": "def create_adder(x):\n    def adder(y):\n        return x + y\n    return adder\nadd_10 = create_adder(10)\nadd_10(3)   # => 13\n# There are also anonymous functions\n(lambda x: x > 2)(3)                  # => True\n(lambda x, y: x ** 2 + y ** 2)(2, 1)  # => 5\n# There are built-in higher order functions",
    "detail": "by-extension.python.short-py-cheatsheet",
    "documentation": {}
  },
  {
    "label": "a",
    "kind": 5,
    "importPath": "by-extension.python.short-py-cheatsheet",
    "description": "by-extension.python.short-py-cheatsheet",
    "peekOfCode": "a = [1, 2, 3, 4]  # Point a at a new list, [1, 2, 3, 4]\nb = a             # Point b at what a is pointing to\nb is a            # => True, a and b refer to the same object\nb == a            # => True, a's and b's objects are equal\nb = [1, 2, 3, 4]  # Point b at a new list, [1, 2, 3, 4]\nb is a            # => False, a and b do not refer to the same object\nb == a            # => True, a's and b's objects are equal\n# Strings are created with \" or '\n\"This is a string.\"\n'This is also a string.'",
    "detail": "by-extension.python.short-py-cheatsheet",
    "documentation": {}
  },
  {
    "label": "b",
    "kind": 5,
    "importPath": "by-extension.python.short-py-cheatsheet",
    "description": "by-extension.python.short-py-cheatsheet",
    "peekOfCode": "b = a             # Point b at what a is pointing to\nb is a            # => True, a and b refer to the same object\nb == a            # => True, a's and b's objects are equal\nb = [1, 2, 3, 4]  # Point b at a new list, [1, 2, 3, 4]\nb is a            # => False, a and b do not refer to the same object\nb == a            # => True, a's and b's objects are equal\n# Strings are created with \" or '\n\"This is a string.\"\n'This is also a string.'\n# Strings can be added too! But try not to do this.",
    "detail": "by-extension.python.short-py-cheatsheet",
    "documentation": {}
  },
  {
    "label": "b",
    "kind": 5,
    "importPath": "by-extension.python.short-py-cheatsheet",
    "description": "by-extension.python.short-py-cheatsheet",
    "peekOfCode": "b = [1, 2, 3, 4]  # Point b at a new list, [1, 2, 3, 4]\nb is a            # => False, a and b do not refer to the same object\nb == a            # => True, a's and b's objects are equal\n# Strings are created with \" or '\n\"This is a string.\"\n'This is also a string.'\n# Strings can be added too! But try not to do this.\n\"Hello \" + \"world!\"  # => \"Hello world!\"\n# String literals (but not variables) can be concatenated without using '+'\n\"Hello \" \"world!\"    # => \"Hello world!\"",
    "detail": "by-extension.python.short-py-cheatsheet",
    "documentation": {}
  },
  {
    "label": "name",
    "kind": 5,
    "importPath": "by-extension.python.short-py-cheatsheet",
    "description": "by-extension.python.short-py-cheatsheet",
    "peekOfCode": "name = \"Reiko\"\nf\"She said her name is {name}.\" # => \"She said her name is Reiko\"\n# You can basically put any Python statement inside the braces and it will be output in the string.\nf\"{name} is {len(name)} characters long.\" # => \"Reiko is 5 characters long.\"\n# None is an object\nNone  # => None\n# Don't use the equality \"==\" symbol to compare objects to None\n# Use \"is\" instead. This checks for equality of object identity.\n\"etc\" is None  # => False\nNone is None   # => True",
    "detail": "by-extension.python.short-py-cheatsheet",
    "documentation": {}
  },
  {
    "label": "input_string_var",
    "kind": 5,
    "importPath": "by-extension.python.short-py-cheatsheet",
    "description": "by-extension.python.short-py-cheatsheet",
    "peekOfCode": "input_string_var = input(\"Enter some data: \") # Returns the data as a string\n# Note: In earlier versions of Python, input() method was named as raw_input()\n# There are no declarations, only assignments.\n# Convention is to use lower_case_with_underscores\nsome_var = 5\nsome_var  # => 5\n# Accessing a previously unassigned variable is an exception.\n# See Control Flow to learn more about exception handling.\nsome_unknown_var  # Raises a NameError\n# if can be used as an expression",
    "detail": "by-extension.python.short-py-cheatsheet",
    "documentation": {}
  },
  {
    "label": "some_var",
    "kind": 5,
    "importPath": "by-extension.python.short-py-cheatsheet",
    "description": "by-extension.python.short-py-cheatsheet",
    "peekOfCode": "some_var = 5\nsome_var  # => 5\n# Accessing a previously unassigned variable is an exception.\n# See Control Flow to learn more about exception handling.\nsome_unknown_var  # Raises a NameError\n# if can be used as an expression\n# Equivalent of C's '?:' ternary operator\n\"yahoo!\" if 3 > 2 else 2  # => \"yahoo!\"\n# Lists store sequences\nli = []",
    "detail": "by-extension.python.short-py-cheatsheet",
    "documentation": {}
  },
  {
    "label": "li",
    "kind": 5,
    "importPath": "by-extension.python.short-py-cheatsheet",
    "description": "by-extension.python.short-py-cheatsheet",
    "peekOfCode": "li = []\n# You can start with a prefilled list\nother_li = [4, 5, 6]\n# Add stuff to the end of a list with append\nli.append(1)    # li is now [1]\nli.append(2)    # li is now [1, 2]\nli.append(4)    # li is now [1, 2, 4]\nli.append(3)    # li is now [1, 2, 4, 3]\n# Remove from the end with pop\nli.pop()        # => 3 and li is now [1, 2, 4]",
    "detail": "by-extension.python.short-py-cheatsheet",
    "documentation": {}
  },
  {
    "label": "other_li",
    "kind": 5,
    "importPath": "by-extension.python.short-py-cheatsheet",
    "description": "by-extension.python.short-py-cheatsheet",
    "peekOfCode": "other_li = [4, 5, 6]\n# Add stuff to the end of a list with append\nli.append(1)    # li is now [1]\nli.append(2)    # li is now [1, 2]\nli.append(4)    # li is now [1, 2, 4]\nli.append(3)    # li is now [1, 2, 4, 3]\n# Remove from the end with pop\nli.pop()        # => 3 and li is now [1, 2, 4]\n# Let's put it back\nli.append(3)    # li is now [1, 2, 4, 3] again.",
    "detail": "by-extension.python.short-py-cheatsheet",
    "documentation": {}
  },
  {
    "label": "li2",
    "kind": 5,
    "importPath": "by-extension.python.short-py-cheatsheet",
    "description": "by-extension.python.short-py-cheatsheet",
    "peekOfCode": "li2 = li[:]  # => li2 = [1, 2, 4, 3] but (li2 is li) will result in false.\n# Remove arbitrary elements from a list with \"del\"\ndel li[2]  # li is now [1, 2, 3]\n# Remove first occurrence of a value\nli.remove(2)  # li is now [1, 3]\nli.remove(2)  # Raises a ValueError as 2 is not in the list\n# Insert an element at a specific index\nli.insert(1, 2)  # li is now [1, 2, 3] again\n# Get the index of the first item found matching the argument\nli.index(2)  # => 1",
    "detail": "by-extension.python.short-py-cheatsheet",
    "documentation": {}
  },
  {
    "label": "tup",
    "kind": 5,
    "importPath": "by-extension.python.short-py-cheatsheet",
    "description": "by-extension.python.short-py-cheatsheet",
    "peekOfCode": "tup = (1, 2, 3)\ntup[0]      # => 1\ntup[0] = 3  # Raises a TypeError\n# Note that a tuple of length one has to have a comma after the last element but\n# tuples of other lengths, even zero, do not.\ntype((1))   # => <class 'int'>\ntype((1,))  # => <class 'tuple'>\ntype(())    # => <class 'tuple'>\n# You can do most of the list operations on tuples too\nlen(tup)         # => 3",
    "detail": "by-extension.python.short-py-cheatsheet",
    "documentation": {}
  },
  {
    "label": "tup[0]",
    "kind": 5,
    "importPath": "by-extension.python.short-py-cheatsheet",
    "description": "by-extension.python.short-py-cheatsheet",
    "peekOfCode": "tup[0] = 3  # Raises a TypeError\n# Note that a tuple of length one has to have a comma after the last element but\n# tuples of other lengths, even zero, do not.\ntype((1))   # => <class 'int'>\ntype((1,))  # => <class 'tuple'>\ntype(())    # => <class 'tuple'>\n# You can do most of the list operations on tuples too\nlen(tup)         # => 3\ntup + (4, 5, 6)  # => (1, 2, 3, 4, 5, 6)\ntup[:2]          # => (1, 2)",
    "detail": "by-extension.python.short-py-cheatsheet",
    "documentation": {}
  },
  {
    "label": "empty_dict",
    "kind": 5,
    "importPath": "by-extension.python.short-py-cheatsheet",
    "description": "by-extension.python.short-py-cheatsheet",
    "peekOfCode": "empty_dict = {}\n# Here is a prefilled dictionary\nfilled_dict = {\"one\": 1, \"two\": 2, \"three\": 3}\n# Note keys for dictionaries have to be immutable types. This is to ensure that\n# the key can be converted to a constant hash value for quick look-ups.\n# Immutable types include ints, floats, strings, tuples.\ninvalid_dict = {[1,2,3]: \"123\"}  # => Raises a TypeError: unhashable type: 'list'\nvalid_dict = {(1,2,3):[1,2,3]}   # Values can be of any type, however.\n# Look up values with []\nfilled_dict[\"one\"]  # => 1",
    "detail": "by-extension.python.short-py-cheatsheet",
    "documentation": {}
  },
  {
    "label": "filled_dict",
    "kind": 5,
    "importPath": "by-extension.python.short-py-cheatsheet",
    "description": "by-extension.python.short-py-cheatsheet",
    "peekOfCode": "filled_dict = {\"one\": 1, \"two\": 2, \"three\": 3}\n# Note keys for dictionaries have to be immutable types. This is to ensure that\n# the key can be converted to a constant hash value for quick look-ups.\n# Immutable types include ints, floats, strings, tuples.\ninvalid_dict = {[1,2,3]: \"123\"}  # => Raises a TypeError: unhashable type: 'list'\nvalid_dict = {(1,2,3):[1,2,3]}   # Values can be of any type, however.\n# Look up values with []\nfilled_dict[\"one\"]  # => 1\n# Get all keys as an iterable with \"keys()\". We need to wrap the call in list()\n# to turn it into a list. We'll talk about those later.  Note - for Python",
    "detail": "by-extension.python.short-py-cheatsheet",
    "documentation": {}
  },
  {
    "label": "invalid_dict",
    "kind": 5,
    "importPath": "by-extension.python.short-py-cheatsheet",
    "description": "by-extension.python.short-py-cheatsheet",
    "peekOfCode": "invalid_dict = {[1,2,3]: \"123\"}  # => Raises a TypeError: unhashable type: 'list'\nvalid_dict = {(1,2,3):[1,2,3]}   # Values can be of any type, however.\n# Look up values with []\nfilled_dict[\"one\"]  # => 1\n# Get all keys as an iterable with \"keys()\". We need to wrap the call in list()\n# to turn it into a list. We'll talk about those later.  Note - for Python\n# versions <3.7, dictionary key ordering is not guaranteed. Your results might\n# not match the example below exactly. However, as of Python 3.7, dictionary\n# items maintain the order at which they are inserted into the dictionary.\nlist(filled_dict.keys())  # => [\"three\", \"two\", \"one\"] in Python <3.7",
    "detail": "by-extension.python.short-py-cheatsheet",
    "documentation": {}
  },
  {
    "label": "valid_dict",
    "kind": 5,
    "importPath": "by-extension.python.short-py-cheatsheet",
    "description": "by-extension.python.short-py-cheatsheet",
    "peekOfCode": "valid_dict = {(1,2,3):[1,2,3]}   # Values can be of any type, however.\n# Look up values with []\nfilled_dict[\"one\"]  # => 1\n# Get all keys as an iterable with \"keys()\". We need to wrap the call in list()\n# to turn it into a list. We'll talk about those later.  Note - for Python\n# versions <3.7, dictionary key ordering is not guaranteed. Your results might\n# not match the example below exactly. However, as of Python 3.7, dictionary\n# items maintain the order at which they are inserted into the dictionary.\nlist(filled_dict.keys())  # => [\"three\", \"two\", \"one\"] in Python <3.7\nlist(filled_dict.keys())  # => [\"one\", \"two\", \"three\"] in Python 3.7+",
    "detail": "by-extension.python.short-py-cheatsheet",
    "documentation": {}
  },
  {
    "label": "filled_dict[\"four\"]",
    "kind": 5,
    "importPath": "by-extension.python.short-py-cheatsheet",
    "description": "by-extension.python.short-py-cheatsheet",
    "peekOfCode": "filled_dict[\"four\"] = 4         # another way to add to dict\n# Remove keys from a dictionary with del\ndel filled_dict[\"one\"]  # Removes the key \"one\" from filled dict\n# From Python 3.5 you can also use the additional unpacking options\n{'a': 1, **{'b': 2}}  # => {'a': 1, 'b': 2}\n{'a': 1, **{'a': 2}}  # => {'a': 2}\n# Sets store ... well sets\nempty_set = set()\n# Initialize a set with a bunch of values. Yeah, it looks a bit like a dict. Sorry.\nsome_set = {1, 1, 2, 2, 3, 4}  # some_set is now {1, 2, 3, 4}",
    "detail": "by-extension.python.short-py-cheatsheet",
    "documentation": {}
  },
  {
    "label": "empty_set",
    "kind": 5,
    "importPath": "by-extension.python.short-py-cheatsheet",
    "description": "by-extension.python.short-py-cheatsheet",
    "peekOfCode": "empty_set = set()\n# Initialize a set with a bunch of values. Yeah, it looks a bit like a dict. Sorry.\nsome_set = {1, 1, 2, 2, 3, 4}  # some_set is now {1, 2, 3, 4}\n# Similar to keys of a dictionary, elements of a set have to be immutable.\ninvalid_set = {[1], 1}  # => Raises a TypeError: unhashable type: 'list'\nvalid_set = {(1,), 1}\n# Add one more item to the set\nfilled_set = some_set\nfilled_set.add(5)  # filled_set is now {1, 2, 3, 4, 5}\n# Sets do not have duplicate elements",
    "detail": "by-extension.python.short-py-cheatsheet",
    "documentation": {}
  },
  {
    "label": "some_set",
    "kind": 5,
    "importPath": "by-extension.python.short-py-cheatsheet",
    "description": "by-extension.python.short-py-cheatsheet",
    "peekOfCode": "some_set = {1, 1, 2, 2, 3, 4}  # some_set is now {1, 2, 3, 4}\n# Similar to keys of a dictionary, elements of a set have to be immutable.\ninvalid_set = {[1], 1}  # => Raises a TypeError: unhashable type: 'list'\nvalid_set = {(1,), 1}\n# Add one more item to the set\nfilled_set = some_set\nfilled_set.add(5)  # filled_set is now {1, 2, 3, 4, 5}\n# Sets do not have duplicate elements\nfilled_set.add(5)  # it remains as before {1, 2, 3, 4, 5}\n# Do set intersection with &",
    "detail": "by-extension.python.short-py-cheatsheet",
    "documentation": {}
  },
  {
    "label": "invalid_set",
    "kind": 5,
    "importPath": "by-extension.python.short-py-cheatsheet",
    "description": "by-extension.python.short-py-cheatsheet",
    "peekOfCode": "invalid_set = {[1], 1}  # => Raises a TypeError: unhashable type: 'list'\nvalid_set = {(1,), 1}\n# Add one more item to the set\nfilled_set = some_set\nfilled_set.add(5)  # filled_set is now {1, 2, 3, 4, 5}\n# Sets do not have duplicate elements\nfilled_set.add(5)  # it remains as before {1, 2, 3, 4, 5}\n# Do set intersection with &\nother_set = {3, 4, 5, 6}\nfilled_set & other_set  # => {3, 4, 5}",
    "detail": "by-extension.python.short-py-cheatsheet",
    "documentation": {}
  },
  {
    "label": "valid_set",
    "kind": 5,
    "importPath": "by-extension.python.short-py-cheatsheet",
    "description": "by-extension.python.short-py-cheatsheet",
    "peekOfCode": "valid_set = {(1,), 1}\n# Add one more item to the set\nfilled_set = some_set\nfilled_set.add(5)  # filled_set is now {1, 2, 3, 4, 5}\n# Sets do not have duplicate elements\nfilled_set.add(5)  # it remains as before {1, 2, 3, 4, 5}\n# Do set intersection with &\nother_set = {3, 4, 5, 6}\nfilled_set & other_set  # => {3, 4, 5}\n# Do set union with |",
    "detail": "by-extension.python.short-py-cheatsheet",
    "documentation": {}
  },
  {
    "label": "filled_set",
    "kind": 5,
    "importPath": "by-extension.python.short-py-cheatsheet",
    "description": "by-extension.python.short-py-cheatsheet",
    "peekOfCode": "filled_set = some_set\nfilled_set.add(5)  # filled_set is now {1, 2, 3, 4, 5}\n# Sets do not have duplicate elements\nfilled_set.add(5)  # it remains as before {1, 2, 3, 4, 5}\n# Do set intersection with &\nother_set = {3, 4, 5, 6}\nfilled_set & other_set  # => {3, 4, 5}\n# Do set union with |\nfilled_set | other_set  # => {1, 2, 3, 4, 5, 6}\n# Do set difference with -",
    "detail": "by-extension.python.short-py-cheatsheet",
    "documentation": {}
  },
  {
    "label": "other_set",
    "kind": 5,
    "importPath": "by-extension.python.short-py-cheatsheet",
    "description": "by-extension.python.short-py-cheatsheet",
    "peekOfCode": "other_set = {3, 4, 5, 6}\nfilled_set & other_set  # => {3, 4, 5}\n# Do set union with |\nfilled_set | other_set  # => {1, 2, 3, 4, 5, 6}\n# Do set difference with -\n{1, 2, 3, 4} - {2, 3, 5}  # => {1, 4}\n# Do set symmetric difference with ^\n{1, 2, 3, 4} ^ {2, 3, 5}  # => {1, 4, 5}\n# Check if set on the left is a superset of set on the right\n{1, 2} >= {1, 2, 3} # => False",
    "detail": "by-extension.python.short-py-cheatsheet",
    "documentation": {}
  },
  {
    "label": "some_var",
    "kind": 5,
    "importPath": "by-extension.python.short-py-cheatsheet",
    "description": "by-extension.python.short-py-cheatsheet",
    "peekOfCode": "some_var = 5\n# Here is an if statement. Indentation is significant in Python!\n# Convention is to use four spaces, not tabs.\n# This prints \"some_var is smaller than 10\"\nif some_var > 10:\n    print(\"some_var is totally bigger than 10.\")\nelif some_var < 10:    # This elif clause is optional.\n    print(\"some_var is smaller than 10.\")\nelse:                  # This is optional too.\n    print(\"some_var is indeed 10.\")",
    "detail": "by-extension.python.short-py-cheatsheet",
    "documentation": {}
  },
  {
    "label": "list",
    "kind": 5,
    "importPath": "by-extension.python.short-py-cheatsheet",
    "description": "by-extension.python.short-py-cheatsheet",
    "peekOfCode": "list = [\"dog\", \"cat\", \"mouse\"]\nfor i, value in enumerate(list):\n    print(i, value)\n\"\"\"\nWhile loops go until a condition is no longer met.\nprints:\n    0\n    1\n    2\n    3",
    "detail": "by-extension.python.short-py-cheatsheet",
    "documentation": {}
  },
  {
    "label": "x",
    "kind": 5,
    "importPath": "by-extension.python.short-py-cheatsheet",
    "description": "by-extension.python.short-py-cheatsheet",
    "peekOfCode": "x = 0\nwhile x < 4:\n    print(x)\n    x += 1  # Shorthand for x = x + 1\n# Handle exceptions with a try/except block\ntry:\n    # Use \"raise\" to raise an error\n    raise IndexError(\"This is an index error\")\nexcept IndexError as e:\n    pass                 # Pass is just a no-op. Usually you would do recovery here.",
    "detail": "by-extension.python.short-py-cheatsheet",
    "documentation": {}
  },
  {
    "label": "contents",
    "kind": 5,
    "importPath": "by-extension.python.short-py-cheatsheet",
    "description": "by-extension.python.short-py-cheatsheet",
    "peekOfCode": "contents = {\"aa\": 12, \"bb\": 21}\nwith open(\"myfile1.txt\", \"w+\") as file:\n    file.write(str(contents))        # writes a string to a file\nwith open(\"myfile2.txt\", \"w+\") as file:\n    file.write(json.dumps(contents)) # writes an object to a file\n# Reading from a file\nwith open('myfile1.txt', \"r+\") as file:\n    contents = file.read()           # reads a string from a file\nprint(contents)\n# print: {\"aa\": 12, \"bb\": 21}",
    "detail": "by-extension.python.short-py-cheatsheet",
    "documentation": {}
  },
  {
    "label": "filled_dict",
    "kind": 5,
    "importPath": "by-extension.python.short-py-cheatsheet",
    "description": "by-extension.python.short-py-cheatsheet",
    "peekOfCode": "filled_dict = {\"one\": 1, \"two\": 2, \"three\": 3}\nour_iterable = filled_dict.keys()\nprint(our_iterable)  # => dict_keys(['one', 'two', 'three']). This is an object that implements our Iterable interface.\n# We can loop over it.\nfor i in our_iterable:\n    print(i)  # Prints one, two, three\n# However we cannot address elements by index.\nour_iterable[1]  # Raises a TypeError\n# An iterable is an object that knows how to create an iterator.\nour_iterator = iter(our_iterable)",
    "detail": "by-extension.python.short-py-cheatsheet",
    "documentation": {}
  },
  {
    "label": "our_iterable",
    "kind": 5,
    "importPath": "by-extension.python.short-py-cheatsheet",
    "description": "by-extension.python.short-py-cheatsheet",
    "peekOfCode": "our_iterable = filled_dict.keys()\nprint(our_iterable)  # => dict_keys(['one', 'two', 'three']). This is an object that implements our Iterable interface.\n# We can loop over it.\nfor i in our_iterable:\n    print(i)  # Prints one, two, three\n# However we cannot address elements by index.\nour_iterable[1]  # Raises a TypeError\n# An iterable is an object that knows how to create an iterator.\nour_iterator = iter(our_iterable)\n# Our iterator is an object that can remember the state as we traverse through it.",
    "detail": "by-extension.python.short-py-cheatsheet",
    "documentation": {}
  },
  {
    "label": "our_iterator",
    "kind": 5,
    "importPath": "by-extension.python.short-py-cheatsheet",
    "description": "by-extension.python.short-py-cheatsheet",
    "peekOfCode": "our_iterator = iter(our_iterable)\n# Our iterator is an object that can remember the state as we traverse through it.\n# We get the next object with \"next()\".\nnext(our_iterator)  # => \"one\"\n# It maintains state as we iterate.\nnext(our_iterator)  # => \"two\"\nnext(our_iterator)  # => \"three\"\n# After the iterator has returned all of its data, it raises a StopIteration exception\nnext(our_iterator)  # Raises StopIteration\n# We can also loop over it, in fact, \"for\" does this implicitly!",
    "detail": "by-extension.python.short-py-cheatsheet",
    "documentation": {}
  },
  {
    "label": "our_iterator",
    "kind": 5,
    "importPath": "by-extension.python.short-py-cheatsheet",
    "description": "by-extension.python.short-py-cheatsheet",
    "peekOfCode": "our_iterator = iter(our_iterable)\nfor i in our_iterator:\n    print(i)  # Prints one, two, three\n# You can grab all the elements of an iterable or iterator by calling list() on it.\nlist(our_iterable)  # => Returns [\"one\", \"two\", \"three\"]\nlist(our_iterator)  # => Returns [] because state is saved\n####################################################\n## 4. Functions\n####################################################\n# Use \"def\" to create new functions",
    "detail": "by-extension.python.short-py-cheatsheet",
    "documentation": {}
  },
  {
    "label": "args",
    "kind": 5,
    "importPath": "by-extension.python.short-py-cheatsheet",
    "description": "by-extension.python.short-py-cheatsheet",
    "peekOfCode": "args = (1, 2, 3, 4)\nkwargs = {\"a\": 3, \"b\": 4}\nall_the_args(*args)            # equivalent to all_the_args(1, 2, 3, 4)\nall_the_args(**kwargs)         # equivalent to all_the_args(a=3, b=4)\nall_the_args(*args, **kwargs)  # equivalent to all_the_args(1, 2, 3, 4, a=3, b=4)\n# Returning multiple values (with tuple assignments)\ndef swap(x, y):\n    return y, x  # Return multiple values as a tuple without the parenthesis.\n                 # (Note: parenthesis have been excluded but can be included)\nx = 1",
    "detail": "by-extension.python.short-py-cheatsheet",
    "documentation": {}
  },
  {
    "label": "kwargs",
    "kind": 5,
    "importPath": "by-extension.python.short-py-cheatsheet",
    "description": "by-extension.python.short-py-cheatsheet",
    "peekOfCode": "kwargs = {\"a\": 3, \"b\": 4}\nall_the_args(*args)            # equivalent to all_the_args(1, 2, 3, 4)\nall_the_args(**kwargs)         # equivalent to all_the_args(a=3, b=4)\nall_the_args(*args, **kwargs)  # equivalent to all_the_args(1, 2, 3, 4, a=3, b=4)\n# Returning multiple values (with tuple assignments)\ndef swap(x, y):\n    return y, x  # Return multiple values as a tuple without the parenthesis.\n                 # (Note: parenthesis have been excluded but can be included)\nx = 1\ny = 2",
    "detail": "by-extension.python.short-py-cheatsheet",
    "documentation": {}
  },
  {
    "label": "x",
    "kind": 5,
    "importPath": "by-extension.python.short-py-cheatsheet",
    "description": "by-extension.python.short-py-cheatsheet",
    "peekOfCode": "x = 1\ny = 2\nx, y = swap(x, y)     # => x = 2, y = 1\n# (x, y) = swap(x,y)  # Again parenthesis have been excluded but can be included.\n# Function Scope\nx = 5\ndef set_x(num):\n    # Local var x not the same as global variable x\n    x = num    # => 43\n    print(x)   # => 43",
    "detail": "by-extension.python.short-py-cheatsheet",
    "documentation": {}
  },
  {
    "label": "y",
    "kind": 5,
    "importPath": "by-extension.python.short-py-cheatsheet",
    "description": "by-extension.python.short-py-cheatsheet",
    "peekOfCode": "y = 2\nx, y = swap(x, y)     # => x = 2, y = 1\n# (x, y) = swap(x,y)  # Again parenthesis have been excluded but can be included.\n# Function Scope\nx = 5\ndef set_x(num):\n    # Local var x not the same as global variable x\n    x = num    # => 43\n    print(x)   # => 43\ndef set_global_x(num):",
    "detail": "by-extension.python.short-py-cheatsheet",
    "documentation": {}
  },
  {
    "label": "x",
    "kind": 5,
    "importPath": "by-extension.python.short-py-cheatsheet",
    "description": "by-extension.python.short-py-cheatsheet",
    "peekOfCode": "x = 5\ndef set_x(num):\n    # Local var x not the same as global variable x\n    x = num    # => 43\n    print(x)   # => 43\ndef set_global_x(num):\n    global x\n    print(x)   # => 5\n    x = num    # global var x is now set to 6\n    print(x)   # => 6",
    "detail": "by-extension.python.short-py-cheatsheet",
    "documentation": {}
  },
  {
    "label": "add_10",
    "kind": 5,
    "importPath": "by-extension.python.short-py-cheatsheet",
    "description": "by-extension.python.short-py-cheatsheet",
    "peekOfCode": "add_10 = create_adder(10)\nadd_10(3)   # => 13\n# There are also anonymous functions\n(lambda x: x > 2)(3)                  # => True\n(lambda x, y: x ** 2 + y ** 2)(2, 1)  # => 5\n# There are built-in higher order functions\nlist(map(add_10, [1, 2, 3]))          # => [11, 12, 13]\nlist(map(max, [1, 2, 3], [4, 2, 1]))  # => [4, 2, 3]\nlist(filter(lambda x: x > 5, [3, 4, 5, 6, 7]))  # => [6, 7]\n# We can use list comprehensions for nice maps and filters",
    "detail": "by-extension.python.short-py-cheatsheet",
    "documentation": {}
  },
  {
    "label": "MINUTE",
    "kind": 5,
    "importPath": "by-extension.python.sleep-poisson-time",
    "description": "by-extension.python.sleep-poisson-time",
    "peekOfCode": "MINUTE = 60\nMEAN_TIME = 3 * MINUTE\n# --- Main script\nif __name__ == '__main__':\n    mean_time = int(sys.argv[1]) if len(sys.argv) > 1 else MEAN_TIME\n    waiting_time = poisson(mean_time)\n    print(\"Sleeping for {:.3g} seconds ...\".format(waiting_time))  # DEBUG\n    sys.exit(sleep(waiting_time))\n# End of sleep-poisson-time.py",
    "detail": "by-extension.python.sleep-poisson-time",
    "documentation": {}
  },
  {
    "label": "MEAN_TIME",
    "kind": 5,
    "importPath": "by-extension.python.sleep-poisson-time",
    "description": "by-extension.python.sleep-poisson-time",
    "peekOfCode": "MEAN_TIME = 3 * MINUTE\n# --- Main script\nif __name__ == '__main__':\n    mean_time = int(sys.argv[1]) if len(sys.argv) > 1 else MEAN_TIME\n    waiting_time = poisson(mean_time)\n    print(\"Sleeping for {:.3g} seconds ...\".format(waiting_time))  # DEBUG\n    sys.exit(sleep(waiting_time))\n# End of sleep-poisson-time.py",
    "detail": "by-extension.python.sleep-poisson-time",
    "documentation": {}
  },
  {
    "label": "smooth_nojit",
    "kind": 2,
    "importPath": "by-extension.python.smooth_filter_nojit_and_jit",
    "description": "by-extension.python.smooth_filter_nojit_and_jit",
    "peekOfCode": "def smooth_nojit(u, a):\n    y = np.zeros_like(u)\n    y[0] = (1-a)*u[0]\n    for k in range(1, len(u)):\n        y[k] = a*y[k-1] + (1-a)*u[k]\n    return y\nsmooth_jit = numba.jit(smooth_nojit)\n# <- factor ×100 speed-up!\nif __name__ == '__main__':\n    print(\"For 1e6 points...\")",
    "detail": "by-extension.python.smooth_filter_nojit_and_jit",
    "documentation": {}
  },
  {
    "label": "smooth_jit",
    "kind": 5,
    "importPath": "by-extension.python.smooth_filter_nojit_and_jit",
    "description": "by-extension.python.smooth_filter_nojit_and_jit",
    "peekOfCode": "smooth_jit = numba.jit(smooth_nojit)\n# <- factor ×100 speed-up!\nif __name__ == '__main__':\n    print(\"For 1e6 points...\")\n    u = np.random.randn(int(1e6), 1)\n    a = 0.95\n    start = time()\n    smooth_nojit(u, a)\n    print(f\"No jit: {time() - start:.3g} seconds\")\n    start = time()",
    "detail": "by-extension.python.smooth_filter_nojit_and_jit",
    "documentation": {}
  },
  {
    "label": "split_coins",
    "kind": 2,
    "importPath": "by-extension.python.split_coins",
    "description": "by-extension.python.split_coins",
    "peekOfCode": "def split_coins(coins):\n    if len(coins) == 0:\n        return -1\n    full_sum = sum(coins)\n    half_sum = full_sum // 2 + 1\n    dp = [False]*half_sum\n    dp[0] = True\n    for c in coins:\n        for i in range(half_sum - 1, -1, -1):\n            if (i >= c) and dp[i - c]:",
    "detail": "by-extension.python.split_coins",
    "documentation": {}
  },
  {
    "label": "stack",
    "kind": 6,
    "importPath": "by-extension.python.stack",
    "description": "by-extension.python.stack",
    "peekOfCode": "class stack:\n  # by default pass in [] as inivial value\n  def __init__(self,initialVal=[]):\n    self.stack = initialVal\n  # push is to append to the tail of the list\n  def push(self,ele):\n    self.stack.append(ele)\n    return self.stack\n  # pop is to remove from the tail of the list\n  def pop(self):",
    "detail": "by-extension.python.stack",
    "documentation": {}
  },
  {
    "label": "stooge_sort",
    "kind": 2,
    "importPath": "by-extension.python.stooge_sort",
    "description": "by-extension.python.stooge_sort",
    "peekOfCode": "def stooge_sort(collection, left, right, counter):\n    if left >= right:\n        return\n    if collection[right] < collection[left]:\n        collection[left], collection[right] = collection[right], collection[left]\n        counter += 1\n        print(\"Step %i -->\" % counter, collection)\n    if (right - left + 1) > 2:\n        list_part = (right - left + 1) // 3\n        counter = stooge_sort(collection, left, right - list_part, counter)",
    "detail": "by-extension.python.stooge_sort",
    "documentation": {}
  },
  {
    "label": "visualization",
    "kind": 2,
    "importPath": "by-extension.python.stooge_sort",
    "description": "by-extension.python.stooge_sort",
    "peekOfCode": "def visualization():\n    counter = 0\n    length_list = 10\n    collection = [randint(0, length_list) for _ in range(length_list)]\n    print(\"Initial list:\", collection)\n    print(\"Visualization of algorithm work.\")\n    counter = stooge_sort(collection, 0, length_list - 1, counter)\n    print(\"Final list:\", collection)\n    print(\"Total numbers of passages:\", counter)\ndef main():",
    "detail": "by-extension.python.stooge_sort",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "by-extension.python.stooge_sort",
    "description": "by-extension.python.stooge_sort",
    "peekOfCode": "def main():\n    elapsed_time = timeit.timeit(visualization, number=1)\n    print(\"Elapsed time: \", round(elapsed_time, 7), \"sec.\")\nif __name__ == \"__main__\":\n    main()",
    "detail": "by-extension.python.stooge_sort",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "by-extension.python.strapdown2html",
    "description": "by-extension.python.strapdown2html",
    "peekOfCode": "def main(argv=[], path='/tmp', outfile='test.html', title='Test', use_jquery=False):\n    \"\"\" Convert every input file from Markdown to HTML, and concatenate all them to an output.\"\"\"\n    printc(\"<green>Starting main, with:<white>\")\n    # FIXME printc does not handle UTF-8 correctly ! AAAH!\n    print(\"path='{path}', outfile='{outfile}'.\".format(path=path, outfile=outfile))\n    print(\"And the title is:\", title)\n    fullpath = os.path.join(path, outfile)\n    printc(\"<magenta>The output file will be <white>'<u>{fullpath}<U>'.\".format(fullpath=fullpath))\n    with open(fullpath, \"w\") as html_file:\n        html_file = codecs.getwriter('utf-8')(html_file)",
    "detail": "by-extension.python.strapdown2html",
    "documentation": {}
  },
  {
    "label": "__author__",
    "kind": 5,
    "importPath": "by-extension.python.strapdown2html",
    "description": "by-extension.python.strapdown2html",
    "peekOfCode": "__author__ = \"Lilian Besson\"\n__version__ = \"0.3.1\"\n# TODO: improve conformity with StrapDown.js Markdown parser:\n# nested list for instance, generic source code printer etc.\ntry:\n    try:\n        # Load ansicolortags (Cf. http://ansicolortags.readthedocs.io/)\n        from ansicolortags import printc\n    except ImportError as e:\n        print(\"Optional dependancy (ansicolortags) is not available, using regular print function.\")",
    "detail": "by-extension.python.strapdown2html",
    "documentation": {}
  },
  {
    "label": "__version__",
    "kind": 5,
    "importPath": "by-extension.python.strapdown2html",
    "description": "by-extension.python.strapdown2html",
    "peekOfCode": "__version__ = \"0.3.1\"\n# TODO: improve conformity with StrapDown.js Markdown parser:\n# nested list for instance, generic source code printer etc.\ntry:\n    try:\n        # Load ansicolortags (Cf. http://ansicolortags.readthedocs.io/)\n        from ansicolortags import printc\n    except ImportError as e:\n        print(\"Optional dependancy (ansicolortags) is not available, using regular print function.\")\n        print(\"  You can install it with : 'pip install ansicolortags' (or sudo pip)...\")",
    "detail": "by-extension.python.strapdown2html",
    "documentation": {}
  },
  {
    "label": "sys.stdout",
    "kind": 5,
    "importPath": "by-extension.python.strapdown2html",
    "description": "by-extension.python.strapdown2html",
    "peekOfCode": "sys.stdout = codecs.getwriter('utf-8')(sys.stdout)\nbeta = False\neraseFileAlreadyThere = False\ndef main(argv=[], path='/tmp', outfile='test.html', title='Test', use_jquery=False):\n    \"\"\" Convert every input file from Markdown to HTML, and concatenate all them to an output.\"\"\"\n    printc(\"<green>Starting main, with:<white>\")\n    # FIXME printc does not handle UTF-8 correctly ! AAAH!\n    print(\"path='{path}', outfile='{outfile}'.\".format(path=path, outfile=outfile))\n    print(\"And the title is:\", title)\n    fullpath = os.path.join(path, outfile)",
    "detail": "by-extension.python.strapdown2html",
    "documentation": {}
  },
  {
    "label": "beta",
    "kind": 5,
    "importPath": "by-extension.python.strapdown2html",
    "description": "by-extension.python.strapdown2html",
    "peekOfCode": "beta = False\neraseFileAlreadyThere = False\ndef main(argv=[], path='/tmp', outfile='test.html', title='Test', use_jquery=False):\n    \"\"\" Convert every input file from Markdown to HTML, and concatenate all them to an output.\"\"\"\n    printc(\"<green>Starting main, with:<white>\")\n    # FIXME printc does not handle UTF-8 correctly ! AAAH!\n    print(\"path='{path}', outfile='{outfile}'.\".format(path=path, outfile=outfile))\n    print(\"And the title is:\", title)\n    fullpath = os.path.join(path, outfile)\n    printc(\"<magenta>The output file will be <white>'<u>{fullpath}<U>'.\".format(fullpath=fullpath))",
    "detail": "by-extension.python.strapdown2html",
    "documentation": {}
  },
  {
    "label": "eraseFileAlreadyThere",
    "kind": 5,
    "importPath": "by-extension.python.strapdown2html",
    "description": "by-extension.python.strapdown2html",
    "peekOfCode": "eraseFileAlreadyThere = False\ndef main(argv=[], path='/tmp', outfile='test.html', title='Test', use_jquery=False):\n    \"\"\" Convert every input file from Markdown to HTML, and concatenate all them to an output.\"\"\"\n    printc(\"<green>Starting main, with:<white>\")\n    # FIXME printc does not handle UTF-8 correctly ! AAAH!\n    print(\"path='{path}', outfile='{outfile}'.\".format(path=path, outfile=outfile))\n    print(\"And the title is:\", title)\n    fullpath = os.path.join(path, outfile)\n    printc(\"<magenta>The output file will be <white>'<u>{fullpath}<U>'.\".format(fullpath=fullpath))\n    with open(fullpath, \"w\") as html_file:",
    "detail": "by-extension.python.strapdown2html",
    "documentation": {}
  },
  {
    "label": "SIZE",
    "kind": 5,
    "importPath": "by-extension.python.sudoku",
    "description": "by-extension.python.sudoku",
    "peekOfCode": "SIZE = 3\n# 9x9 matrix of integer variables\nX = [\n     [ z3.Int(\"x_%s_%s\" % (i + 1, j + 1)) for j in range(SIZE**2) ]\n     for i in range(SIZE**2)\n]\n# each cell contains a value in {1, ..., 9}\ncells_c = [ z3.And(1 <= X[i][j], X[i][j] <= SIZE**2)\n            for i in range(SIZE**2)\n            for j in range(SIZE**2)",
    "detail": "by-extension.python.sudoku",
    "documentation": {}
  },
  {
    "label": "X",
    "kind": 5,
    "importPath": "by-extension.python.sudoku",
    "description": "by-extension.python.sudoku",
    "peekOfCode": "X = [\n     [ z3.Int(\"x_%s_%s\" % (i + 1, j + 1)) for j in range(SIZE**2) ]\n     for i in range(SIZE**2)\n]\n# each cell contains a value in {1, ..., 9}\ncells_c = [ z3.And(1 <= X[i][j], X[i][j] <= SIZE**2)\n            for i in range(SIZE**2)\n            for j in range(SIZE**2)\n          ]\n# each row contains a digit at most once",
    "detail": "by-extension.python.sudoku",
    "documentation": {}
  },
  {
    "label": "cells_c",
    "kind": 5,
    "importPath": "by-extension.python.sudoku",
    "description": "by-extension.python.sudoku",
    "peekOfCode": "cells_c = [ z3.And(1 <= X[i][j], X[i][j] <= SIZE**2)\n            for i in range(SIZE**2)\n            for j in range(SIZE**2)\n          ]\n# each row contains a digit at most once\nrows_c = [ z3.Distinct(X[i]) for i in range(SIZE**2) ]\n# each column contains a digit at most once\ncols_c = [ z3.Distinct( [ X[i][j] for i in range(SIZE**2) ] )\n           for j in range(SIZE**2)\n         ]",
    "detail": "by-extension.python.sudoku",
    "documentation": {}
  },
  {
    "label": "rows_c",
    "kind": 5,
    "importPath": "by-extension.python.sudoku",
    "description": "by-extension.python.sudoku",
    "peekOfCode": "rows_c = [ z3.Distinct(X[i]) for i in range(SIZE**2) ]\n# each column contains a digit at most once\ncols_c = [ z3.Distinct( [ X[i][j] for i in range(SIZE**2) ] )\n           for j in range(SIZE**2)\n         ]\n# each 3x3 square contains a digit at most once\nsq_c = [ z3.Distinct([ X[SIZE * i0 + i][SIZE * j0 + j]\n                       for i in range(SIZE)\n                                        for j in range(SIZE)\n                  ])",
    "detail": "by-extension.python.sudoku",
    "documentation": {}
  },
  {
    "label": "cols_c",
    "kind": 5,
    "importPath": "by-extension.python.sudoku",
    "description": "by-extension.python.sudoku",
    "peekOfCode": "cols_c = [ z3.Distinct( [ X[i][j] for i in range(SIZE**2) ] )\n           for j in range(SIZE**2)\n         ]\n# each 3x3 square contains a digit at most once\nsq_c = [ z3.Distinct([ X[SIZE * i0 + i][SIZE * j0 + j]\n                       for i in range(SIZE)\n                                        for j in range(SIZE)\n                  ])\n        for i0 in range(SIZE)\n        for j0 in range(SIZE)",
    "detail": "by-extension.python.sudoku",
    "documentation": {}
  },
  {
    "label": "sq_c",
    "kind": 5,
    "importPath": "by-extension.python.sudoku",
    "description": "by-extension.python.sudoku",
    "peekOfCode": "sq_c = [ z3.Distinct([ X[SIZE * i0 + i][SIZE * j0 + j]\n                       for i in range(SIZE)\n                                        for j in range(SIZE)\n                  ])\n        for i0 in range(SIZE)\n        for j0 in range(SIZE)\n       ]\nsudoku_c = cells_c + rows_c + cols_c + sq_c\n# sudoku instance, we use '0' for empty cells\nif SIZE != 3:",
    "detail": "by-extension.python.sudoku",
    "documentation": {}
  },
  {
    "label": "sudoku_c",
    "kind": 5,
    "importPath": "by-extension.python.sudoku",
    "description": "by-extension.python.sudoku",
    "peekOfCode": "sudoku_c = cells_c + rows_c + cols_c + sq_c\n# sudoku instance, we use '0' for empty cells\nif SIZE != 3:\n    print(\"TODO write an instance of size = {}.\".format(SIZE))\n    sys.exit(1)\ninstance = [[0, 0, 0, 0, 0, 0, 7, 0, 0],\n            [7, 3, 0, 0, 4, 0, 0, 0, 0],\n            [1, 0, 0, 7, 5, 0, 0, 3, 0],\n            [0, 0, 3, 2, 0, 5, 4, 0, 7],\n            [0, 0, 0, 9, 0, 8, 0, 0, 0],",
    "detail": "by-extension.python.sudoku",
    "documentation": {}
  },
  {
    "label": "instance",
    "kind": 5,
    "importPath": "by-extension.python.sudoku",
    "description": "by-extension.python.sudoku",
    "peekOfCode": "instance = [[0, 0, 0, 0, 0, 0, 7, 0, 0],\n            [7, 3, 0, 0, 4, 0, 0, 0, 0],\n            [1, 0, 0, 7, 5, 0, 0, 3, 0],\n            [0, 0, 3, 2, 0, 5, 4, 0, 7],\n            [0, 0, 0, 9, 0, 8, 0, 0, 0],\n            [2, 0, 7, 1, 0, 4, 5, 0, 0],\n            [0, 6, 0, 0, 8, 7, 0, 0, 4],\n            [0, 0, 0, 0, 9, 0, 0, 1, 3],\n            [0, 0, 2, 0, 0, 0, 0, 0, 0]]\ntry:",
    "detail": "by-extension.python.sudoku",
    "documentation": {}
  },
  {
    "label": "before",
    "kind": 5,
    "importPath": "by-extension.python.sudoku",
    "description": "by-extension.python.sudoku",
    "peekOfCode": "before = time.time()\ninstance_c = [ z3.If(instance[i][j] == 0, True, X[i][j] == instance[i][j])\n               for i in range(9) for j in range(9)\n             ]\ns = z3.Solver()\ns.add(sudoku_c + instance_c)\nif s.check() == z3.sat:\n    m = s.model()\n    after = time.time()\n    duration = after - before",
    "detail": "by-extension.python.sudoku",
    "documentation": {}
  },
  {
    "label": "instance_c",
    "kind": 5,
    "importPath": "by-extension.python.sudoku",
    "description": "by-extension.python.sudoku",
    "peekOfCode": "instance_c = [ z3.If(instance[i][j] == 0, True, X[i][j] == instance[i][j])\n               for i in range(9) for j in range(9)\n             ]\ns = z3.Solver()\ns.add(sudoku_c + instance_c)\nif s.check() == z3.sat:\n    m = s.model()\n    after = time.time()\n    duration = after - before\n    print(\"Solved in {:.4g} seconds.\".format(duration))",
    "detail": "by-extension.python.sudoku",
    "documentation": {}
  },
  {
    "label": "s",
    "kind": 5,
    "importPath": "by-extension.python.sudoku",
    "description": "by-extension.python.sudoku",
    "peekOfCode": "s = z3.Solver()\ns.add(sudoku_c + instance_c)\nif s.check() == z3.sat:\n    m = s.model()\n    after = time.time()\n    duration = after - before\n    print(\"Solved in {:.4g} seconds.\".format(duration))\n    r = [ [ m.evaluate(X[i][j]) for j in range(SIZE**2) ]\n            for i in range(SIZE**2) ]\n    z3.print_matrix(r)",
    "detail": "by-extension.python.sudoku",
    "documentation": {}
  },
  {
    "label": "sum_non_adjacent",
    "kind": 2,
    "importPath": "by-extension.python.sum_non-adjecent",
    "description": "by-extension.python.sum_non-adjecent",
    "peekOfCode": "def sum_non_adjacent(arr):\n    n = len(arr)\n    # from the dp matrix you only need the last 3 sums\n    sums = [0, 0, 0]\n    # TODO: refactor these if-elses, those are to skip using of DP matrix\n    if n == 0:\n        return 0\n    # if negative or zero, the sum will be 0\n    sums[0] = max(arr[0], 0)\n    if n == 1:",
    "detail": "by-extension.python.sum_non-adjecent",
    "documentation": {}
  },
  {
    "label": "GeditTerminal",
    "kind": 6,
    "importPath": "by-extension.python.terminal",
    "description": "by-extension.python.terminal",
    "peekOfCode": "class GeditTerminal(Gtk.Box):\n    \"\"\"VTE terminal which follows gnome-terminal default profile options\"\"\"\n    __gsignals__ = {\n        \"populate-popup\": (\n            GObject.SIGNAL_RUN_LAST,\n            None,\n            (GObject.TYPE_OBJECT,)\n        )\n    }\n    defaults = {",
    "detail": "by-extension.python.terminal",
    "documentation": {}
  },
  {
    "label": "TerminalPlugin",
    "kind": 6,
    "importPath": "by-extension.python.terminal",
    "description": "by-extension.python.terminal",
    "peekOfCode": "class TerminalPlugin(GObject.Object, Gedit.WindowActivatable):\n    __gtype_name__ = \"TerminalPlugin\"\n    window = GObject.property(type=Gedit.Window)\n    def __init__(self):\n        GObject.Object.__init__(self)\n    def do_activate(self):\n        self._panel = GeditTerminal()\n        self._panel.connect(\"populate-popup\", self.on_panel_populate_popup)\n        self._panel.show()\n        image = Gtk.Image.new_from_icon_name(\"utilities-terminal\", Gtk.IconSize.MENU)",
    "detail": "by-extension.python.terminal",
    "documentation": {}
  },
  {
    "label": "__author__",
    "kind": 5,
    "importPath": "by-extension.python.terminal",
    "description": "by-extension.python.terminal",
    "peekOfCode": "__author__ = \"Paolo Borelli, Lilian BESSON <lbesson at ens-cachan dot fr> for Naereen CORP.\"\n__version__ = \"3.2.2\"\n__appname__ = \"gedit-terminal\"\n__app_disp_name__ = \"Gedit Embeded Terminal\"\n__website__ = \"https://sites.google.com/site/naereencorp/gedit/\"\nprint \".:[ Initializing %s, v%s. (c) %s ]:.\" % (__app_disp_name__, __version__, __author__)\nprint \".:[ Take a look at %s for more informations, or for the latest version of this piece of software. ]:.\" % (__website__)\nfrom gi.repository import GObject, GLib, Gio, Pango, Gdk, Gtk, Gedit, Vte\nimport os\nimport gettext",
    "detail": "by-extension.python.terminal",
    "documentation": {}
  },
  {
    "label": "__version__",
    "kind": 5,
    "importPath": "by-extension.python.terminal",
    "description": "by-extension.python.terminal",
    "peekOfCode": "__version__ = \"3.2.2\"\n__appname__ = \"gedit-terminal\"\n__app_disp_name__ = \"Gedit Embeded Terminal\"\n__website__ = \"https://sites.google.com/site/naereencorp/gedit/\"\nprint \".:[ Initializing %s, v%s. (c) %s ]:.\" % (__app_disp_name__, __version__, __author__)\nprint \".:[ Take a look at %s for more informations, or for the latest version of this piece of software. ]:.\" % (__website__)\nfrom gi.repository import GObject, GLib, Gio, Pango, Gdk, Gtk, Gedit, Vte\nimport os\nimport gettext\nfrom gpdefs import *",
    "detail": "by-extension.python.terminal",
    "documentation": {}
  },
  {
    "label": "__appname__",
    "kind": 5,
    "importPath": "by-extension.python.terminal",
    "description": "by-extension.python.terminal",
    "peekOfCode": "__appname__ = \"gedit-terminal\"\n__app_disp_name__ = \"Gedit Embeded Terminal\"\n__website__ = \"https://sites.google.com/site/naereencorp/gedit/\"\nprint \".:[ Initializing %s, v%s. (c) %s ]:.\" % (__app_disp_name__, __version__, __author__)\nprint \".:[ Take a look at %s for more informations, or for the latest version of this piece of software. ]:.\" % (__website__)\nfrom gi.repository import GObject, GLib, Gio, Pango, Gdk, Gtk, Gedit, Vte\nimport os\nimport gettext\nfrom gpdefs import *\nfrom signal import SIGTERM, SIGKILL",
    "detail": "by-extension.python.terminal",
    "documentation": {}
  },
  {
    "label": "__app_disp_name__",
    "kind": 5,
    "importPath": "by-extension.python.terminal",
    "description": "by-extension.python.terminal",
    "peekOfCode": "__app_disp_name__ = \"Gedit Embeded Terminal\"\n__website__ = \"https://sites.google.com/site/naereencorp/gedit/\"\nprint \".:[ Initializing %s, v%s. (c) %s ]:.\" % (__app_disp_name__, __version__, __author__)\nprint \".:[ Take a look at %s for more informations, or for the latest version of this piece of software. ]:.\" % (__website__)\nfrom gi.repository import GObject, GLib, Gio, Pango, Gdk, Gtk, Gedit, Vte\nimport os\nimport gettext\nfrom gpdefs import *\nfrom signal import SIGTERM, SIGKILL\ntry:",
    "detail": "by-extension.python.terminal",
    "documentation": {}
  },
  {
    "label": "__website__",
    "kind": 5,
    "importPath": "by-extension.python.terminal",
    "description": "by-extension.python.terminal",
    "peekOfCode": "__website__ = \"https://sites.google.com/site/naereencorp/gedit/\"\nprint \".:[ Initializing %s, v%s. (c) %s ]:.\" % (__app_disp_name__, __version__, __author__)\nprint \".:[ Take a look at %s for more informations, or for the latest version of this piece of software. ]:.\" % (__website__)\nfrom gi.repository import GObject, GLib, Gio, Pango, Gdk, Gtk, Gedit, Vte\nimport os\nimport gettext\nfrom gpdefs import *\nfrom signal import SIGTERM, SIGKILL\ntry:\n    gettext.bindtextdomain(GETTEXT_PACKAGE, GP_LOCALEDIR)",
    "detail": "by-extension.python.terminal",
    "documentation": {}
  },
  {
    "label": "GeditTerminal2",
    "kind": 6,
    "importPath": "by-extension.python.terminal2",
    "description": "by-extension.python.terminal2",
    "peekOfCode": "class GeditTerminal2(Gtk.Box):\n    \"\"\"VTE terminal2 which follows gnome-terminal default profile options\"\"\"\n    __gsignals__ = {\n        \"populate-popup\": (\n            GObject.SIGNAL_RUN_LAST,\n            None,\n            (GObject.TYPE_OBJECT,)\n        )\n    }\n    defaults = {",
    "detail": "by-extension.python.terminal2",
    "documentation": {}
  },
  {
    "label": "TerminalPlugin2",
    "kind": 6,
    "importPath": "by-extension.python.terminal2",
    "description": "by-extension.python.terminal2",
    "peekOfCode": "class TerminalPlugin2(GObject.Object, Gedit.WindowActivatable):\n    __gtype_name__ = \"TerminalPlugin2\"\n    window = GObject.property(type=Gedit.Window)\n    def __init__(self):\n        GObject.Object.__init__(self)\n    def do_activate(self):\n        self._panel = GeditTerminal2()\n        self._panel.connect(\"populate-popup\", self.on_panel_populate_popup)\n        self._panel.show()\n        image = Gtk.Image.new_from_icon_name(\"utilities-terminal\", Gtk.IconSize.MENU)",
    "detail": "by-extension.python.terminal2",
    "documentation": {}
  },
  {
    "label": "__author__",
    "kind": 5,
    "importPath": "by-extension.python.terminal2",
    "description": "by-extension.python.terminal2",
    "peekOfCode": "__author__ = \"Paolo Borelli, Lilian BESSON <lbesson at ens-cachan dot fr> for Naereen CORP.\"\n__version__ = \"3.2.3\"\n__appname__ = \"gedit-terminal2\"\n__app_disp_name__ = \"Gedit Embeded Terminal Lateral\"\n__website__ = \"https://sites.google.com/site/naereencorp/gedit/\"\nprint \".:[ Initializing %s, v%s. (c) %s ]:.\" % (__app_disp_name__, __version__, __author__)\nprint \".:[ Take a look at %s for more informations, or for the latest version of this piece of software. ]:.\" % (__website__)\nfrom gi.repository import GObject, GLib, Gio, Pango, Gdk, Gtk, Gedit, Vte\nimport os\nimport gettext",
    "detail": "by-extension.python.terminal2",
    "documentation": {}
  },
  {
    "label": "__version__",
    "kind": 5,
    "importPath": "by-extension.python.terminal2",
    "description": "by-extension.python.terminal2",
    "peekOfCode": "__version__ = \"3.2.3\"\n__appname__ = \"gedit-terminal2\"\n__app_disp_name__ = \"Gedit Embeded Terminal Lateral\"\n__website__ = \"https://sites.google.com/site/naereencorp/gedit/\"\nprint \".:[ Initializing %s, v%s. (c) %s ]:.\" % (__app_disp_name__, __version__, __author__)\nprint \".:[ Take a look at %s for more informations, or for the latest version of this piece of software. ]:.\" % (__website__)\nfrom gi.repository import GObject, GLib, Gio, Pango, Gdk, Gtk, Gedit, Vte\nimport os\nimport gettext\nfrom gpdefs import *",
    "detail": "by-extension.python.terminal2",
    "documentation": {}
  },
  {
    "label": "__appname__",
    "kind": 5,
    "importPath": "by-extension.python.terminal2",
    "description": "by-extension.python.terminal2",
    "peekOfCode": "__appname__ = \"gedit-terminal2\"\n__app_disp_name__ = \"Gedit Embeded Terminal Lateral\"\n__website__ = \"https://sites.google.com/site/naereencorp/gedit/\"\nprint \".:[ Initializing %s, v%s. (c) %s ]:.\" % (__app_disp_name__, __version__, __author__)\nprint \".:[ Take a look at %s for more informations, or for the latest version of this piece of software. ]:.\" % (__website__)\nfrom gi.repository import GObject, GLib, Gio, Pango, Gdk, Gtk, Gedit, Vte\nimport os\nimport gettext\nfrom gpdefs import *\nfrom signal import SIGTERM, SIGKILL",
    "detail": "by-extension.python.terminal2",
    "documentation": {}
  },
  {
    "label": "__app_disp_name__",
    "kind": 5,
    "importPath": "by-extension.python.terminal2",
    "description": "by-extension.python.terminal2",
    "peekOfCode": "__app_disp_name__ = \"Gedit Embeded Terminal Lateral\"\n__website__ = \"https://sites.google.com/site/naereencorp/gedit/\"\nprint \".:[ Initializing %s, v%s. (c) %s ]:.\" % (__app_disp_name__, __version__, __author__)\nprint \".:[ Take a look at %s for more informations, or for the latest version of this piece of software. ]:.\" % (__website__)\nfrom gi.repository import GObject, GLib, Gio, Pango, Gdk, Gtk, Gedit, Vte\nimport os\nimport gettext\nfrom gpdefs import *\nfrom signal import SIGTERM, SIGKILL\ntry:",
    "detail": "by-extension.python.terminal2",
    "documentation": {}
  },
  {
    "label": "__website__",
    "kind": 5,
    "importPath": "by-extension.python.terminal2",
    "description": "by-extension.python.terminal2",
    "peekOfCode": "__website__ = \"https://sites.google.com/site/naereencorp/gedit/\"\nprint \".:[ Initializing %s, v%s. (c) %s ]:.\" % (__app_disp_name__, __version__, __author__)\nprint \".:[ Take a look at %s for more informations, or for the latest version of this piece of software. ]:.\" % (__website__)\nfrom gi.repository import GObject, GLib, Gio, Pango, Gdk, Gtk, Gedit, Vte\nimport os\nimport gettext\nfrom gpdefs import *\nfrom signal import SIGTERM, SIGKILL\ntry:\n    gettext.bindtextdomain(GETTEXT_PACKAGE, GP_LOCALEDIR)",
    "detail": "by-extension.python.terminal2",
    "documentation": {}
  },
  {
    "label": "GeditTerminal3",
    "kind": 6,
    "importPath": "by-extension.python.terminal3",
    "description": "by-extension.python.terminal3",
    "peekOfCode": "class GeditTerminal3(Gtk.Box):\n    \"\"\"VTE terminal3 which follows gnome-terminal default profile options\"\"\"\n    __gsignals__ = {\n        \"populate-popup\": (\n            GObject.SIGNAL_RUN_LAST,\n            None,\n            (GObject.TYPE_OBJECT,)\n        )\n    }\n    defaults = {",
    "detail": "by-extension.python.terminal3",
    "documentation": {}
  },
  {
    "label": "TerminalPlugin3",
    "kind": 6,
    "importPath": "by-extension.python.terminal3",
    "description": "by-extension.python.terminal3",
    "peekOfCode": "class TerminalPlugin3(GObject.Object, Gedit.WindowActivatable):\n    __gtype_name__ = \"TerminalPlugin3\"\n    window = GObject.property(type=Gedit.Window)\n    def __init__(self):\n        GObject.Object.__init__(self)\n    def do_activate(self):\n        self._panel = GeditTerminal3()\n        self._panel.connect(\"populate-popup\", self.on_panel_populate_popup)\n        self._panel.show()\n        image = Gtk.Image.new_from_icon_name(\"utilities-terminal\", Gtk.IconSize.MENU)",
    "detail": "by-extension.python.terminal3",
    "documentation": {}
  },
  {
    "label": "__author__",
    "kind": 5,
    "importPath": "by-extension.python.terminal3",
    "description": "by-extension.python.terminal3",
    "peekOfCode": "__author__ = \"Paolo Borelli, Lilian BESSON <lbesson at ens-cachan dot fr> for Naereen CORP.\"\n__version__ = \"3.2.3\"\n__appname__ = \"gedit-terminal3\"\n__app_disp_name__ = \"Gedit Embeded Terminal3\"\n__website__ = \"https://sites.google.com/site/naereencorp/gedit/\"\nprint \".:[ Initializing %s, v%s. (c) %s ]:.\" % (__app_disp_name__, __version__, __author__)\nprint \".:[ Take a look at %s for more informations, or for the latest version of this piece of software. ]:.\" % (__website__)\nfrom gi.repository import GObject, GLib, Gio, Pango, Gdk, Gtk, Gedit, Vte\nimport os\nimport gettext",
    "detail": "by-extension.python.terminal3",
    "documentation": {}
  },
  {
    "label": "__version__",
    "kind": 5,
    "importPath": "by-extension.python.terminal3",
    "description": "by-extension.python.terminal3",
    "peekOfCode": "__version__ = \"3.2.3\"\n__appname__ = \"gedit-terminal3\"\n__app_disp_name__ = \"Gedit Embeded Terminal3\"\n__website__ = \"https://sites.google.com/site/naereencorp/gedit/\"\nprint \".:[ Initializing %s, v%s. (c) %s ]:.\" % (__app_disp_name__, __version__, __author__)\nprint \".:[ Take a look at %s for more informations, or for the latest version of this piece of software. ]:.\" % (__website__)\nfrom gi.repository import GObject, GLib, Gio, Pango, Gdk, Gtk, Gedit, Vte\nimport os\nimport gettext\nfrom gpdefs import *",
    "detail": "by-extension.python.terminal3",
    "documentation": {}
  },
  {
    "label": "__appname__",
    "kind": 5,
    "importPath": "by-extension.python.terminal3",
    "description": "by-extension.python.terminal3",
    "peekOfCode": "__appname__ = \"gedit-terminal3\"\n__app_disp_name__ = \"Gedit Embeded Terminal3\"\n__website__ = \"https://sites.google.com/site/naereencorp/gedit/\"\nprint \".:[ Initializing %s, v%s. (c) %s ]:.\" % (__app_disp_name__, __version__, __author__)\nprint \".:[ Take a look at %s for more informations, or for the latest version of this piece of software. ]:.\" % (__website__)\nfrom gi.repository import GObject, GLib, Gio, Pango, Gdk, Gtk, Gedit, Vte\nimport os\nimport gettext\nfrom gpdefs import *\nfrom signal import SIGTERM, SIGKILL",
    "detail": "by-extension.python.terminal3",
    "documentation": {}
  },
  {
    "label": "__app_disp_name__",
    "kind": 5,
    "importPath": "by-extension.python.terminal3",
    "description": "by-extension.python.terminal3",
    "peekOfCode": "__app_disp_name__ = \"Gedit Embeded Terminal3\"\n__website__ = \"https://sites.google.com/site/naereencorp/gedit/\"\nprint \".:[ Initializing %s, v%s. (c) %s ]:.\" % (__app_disp_name__, __version__, __author__)\nprint \".:[ Take a look at %s for more informations, or for the latest version of this piece of software. ]:.\" % (__website__)\nfrom gi.repository import GObject, GLib, Gio, Pango, Gdk, Gtk, Gedit, Vte\nimport os\nimport gettext\nfrom gpdefs import *\nfrom signal import SIGTERM, SIGKILL\ntry:",
    "detail": "by-extension.python.terminal3",
    "documentation": {}
  },
  {
    "label": "__website__",
    "kind": 5,
    "importPath": "by-extension.python.terminal3",
    "description": "by-extension.python.terminal3",
    "peekOfCode": "__website__ = \"https://sites.google.com/site/naereencorp/gedit/\"\nprint \".:[ Initializing %s, v%s. (c) %s ]:.\" % (__app_disp_name__, __version__, __author__)\nprint \".:[ Take a look at %s for more informations, or for the latest version of this piece of software. ]:.\" % (__website__)\nfrom gi.repository import GObject, GLib, Gio, Pango, Gdk, Gtk, Gedit, Vte\nimport os\nimport gettext\nfrom gpdefs import *\nfrom signal import SIGTERM, SIGKILL\ntry:\n    gettext.bindtextdomain(GETTEXT_PACKAGE, GP_LOCALEDIR)",
    "detail": "by-extension.python.terminal3",
    "documentation": {}
  },
  {
    "label": "ins_all_positions",
    "kind": 2,
    "importPath": "by-extension.python.test-permutation-algorithms",
    "description": "by-extension.python.test-permutation-algorithms",
    "peekOfCode": "def ins_all_positions(x, l):\n    \"\"\"Return a list of lists obtained from l by inserting x at every possible index.\"\"\"\n    res = []\n    for i in range(0, len(l) + 1):\n        res.append(l[:i] + [x] + l[i:])\n    return res\n# Now the main permutations generator.\ndef first_permutations(iterable):\n    \"\"\"Second algorithm, insert-into-all-positions solution.\"\"\"\n    if len(iterable) == 0:",
    "detail": "by-extension.python.test-permutation-algorithms",
    "documentation": {}
  },
  {
    "label": "first_permutations",
    "kind": 2,
    "importPath": "by-extension.python.test-permutation-algorithms",
    "description": "by-extension.python.test-permutation-algorithms",
    "peekOfCode": "def first_permutations(iterable):\n    \"\"\"Second algorithm, insert-into-all-positions solution.\"\"\"\n    if len(iterable) == 0:\n        return []\n    # we must specify this edge case\n    elif len(iterable) == 1:\n        return [[iterable[0]]]\n    else:\n        x, xs = iterable[0], iterable[1:]\n        return reduce(lambda acc, p: acc + ins_all_positions(x, p), first_permutations(xs), [])",
    "detail": "by-extension.python.test-permutation-algorithms",
    "documentation": {}
  },
  {
    "label": "rm",
    "kind": 2,
    "importPath": "by-extension.python.test-permutation-algorithms",
    "description": "by-extension.python.test-permutation-algorithms",
    "peekOfCode": "def rm(x, l):\n    \"\"\"List l without element x.\"\"\"\n    return [y for y in l if x != y]\ndef head_of_all(x, l):\n    \"\"\"List of lists from l where x is the head of all the lists.\"\"\"\n    return [[x] + p for p in l]\ndef second_permutations(iterable):\n    \"\"\"Second algorithm, fixed-head solution.\"\"\"\n    if len(iterable) == 0:\n        return []",
    "detail": "by-extension.python.test-permutation-algorithms",
    "documentation": {}
  },
  {
    "label": "head_of_all",
    "kind": 2,
    "importPath": "by-extension.python.test-permutation-algorithms",
    "description": "by-extension.python.test-permutation-algorithms",
    "peekOfCode": "def head_of_all(x, l):\n    \"\"\"List of lists from l where x is the head of all the lists.\"\"\"\n    return [[x] + p for p in l]\ndef second_permutations(iterable):\n    \"\"\"Second algorithm, fixed-head solution.\"\"\"\n    if len(iterable) == 0:\n        return []\n    # we must specify this edge case\n    elif len(iterable) == 1:\n        return [[iterable[0]]]",
    "detail": "by-extension.python.test-permutation-algorithms",
    "documentation": {}
  },
  {
    "label": "second_permutations",
    "kind": 2,
    "importPath": "by-extension.python.test-permutation-algorithms",
    "description": "by-extension.python.test-permutation-algorithms",
    "peekOfCode": "def second_permutations(iterable):\n    \"\"\"Second algorithm, fixed-head solution.\"\"\"\n    if len(iterable) == 0:\n        return []\n    # we must specify this edge case\n    elif len(iterable) == 1:\n        return [[iterable[0]]]\n    else:\n        return reduce(lambda acc, x: acc + head_of_all(x, second_permutations(rm(x, iterable))), iterable, [])\n# --- Third algorithm : Johnson Trotter algorithm",
    "detail": "by-extension.python.test-permutation-algorithms",
    "documentation": {}
  },
  {
    "label": "attach_direction",
    "kind": 2,
    "importPath": "by-extension.python.test-permutation-algorithms",
    "description": "by-extension.python.test-permutation-algorithms",
    "peekOfCode": "def attach_direction(t, d=left):\n    \"\"\"Attach the direction d to all elements of array t.\"\"\"\n    return [(x, d) for x in t]\ndef remove_direction(t):\n    \"\"\"Remove the attached direction d to all elements of array t.\"\"\"\n    return [y for y, _ in t]\ndef swap(t, i, j):\n    \"\"\"Swap t[i] and t[j] in array t.\"\"\"\n    t[i], t[j] = t[j], t[i]\ndef is_movable(a, i):",
    "detail": "by-extension.python.test-permutation-algorithms",
    "documentation": {}
  },
  {
    "label": "remove_direction",
    "kind": 2,
    "importPath": "by-extension.python.test-permutation-algorithms",
    "description": "by-extension.python.test-permutation-algorithms",
    "peekOfCode": "def remove_direction(t):\n    \"\"\"Remove the attached direction d to all elements of array t.\"\"\"\n    return [y for y, _ in t]\ndef swap(t, i, j):\n    \"\"\"Swap t[i] and t[j] in array t.\"\"\"\n    t[i], t[j] = t[j], t[i]\ndef is_movable(a, i):\n    \"\"\"Can a[i] be moved?\"\"\"\n    x, d = a[i]\n    if d == left:",
    "detail": "by-extension.python.test-permutation-algorithms",
    "documentation": {}
  },
  {
    "label": "swap",
    "kind": 2,
    "importPath": "by-extension.python.test-permutation-algorithms",
    "description": "by-extension.python.test-permutation-algorithms",
    "peekOfCode": "def swap(t, i, j):\n    \"\"\"Swap t[i] and t[j] in array t.\"\"\"\n    t[i], t[j] = t[j], t[i]\ndef is_movable(a, i):\n    \"\"\"Can a[i] be moved?\"\"\"\n    x, d = a[i]\n    if d == left:\n        return i > 0 and x > a[i - 1][0]\n    elif d == right:\n        return i < len(a) - 1 and x > a[i + 1][0]",
    "detail": "by-extension.python.test-permutation-algorithms",
    "documentation": {}
  },
  {
    "label": "is_movable",
    "kind": 2,
    "importPath": "by-extension.python.test-permutation-algorithms",
    "description": "by-extension.python.test-permutation-algorithms",
    "peekOfCode": "def is_movable(a, i):\n    \"\"\"Can a[i] be moved?\"\"\"\n    x, d = a[i]\n    if d == left:\n        return i > 0 and x > a[i - 1][0]\n    elif d == right:\n        return i < len(a) - 1 and x > a[i + 1][0]\n    else:\n        raise ValueError(\"unknown direction d = {}\".format(d))\ndef move(a, i):",
    "detail": "by-extension.python.test-permutation-algorithms",
    "documentation": {}
  },
  {
    "label": "move",
    "kind": 2,
    "importPath": "by-extension.python.test-permutation-algorithms",
    "description": "by-extension.python.test-permutation-algorithms",
    "peekOfCode": "def move(a, i):\n    \"\"\"Move it if possible.\"\"\"\n    x, d = a[i]\n    if is_movable(a, i):\n        if d == left:\n            swap(a, i, i - 1)\n        elif d == right:\n            swap(a, i, i + 1)\n        else:\n            raise ValueError(\"unknown direction d = {}\".format(d))",
    "detail": "by-extension.python.test-permutation-algorithms",
    "documentation": {}
  },
  {
    "label": "scan_largest_movable",
    "kind": 2,
    "importPath": "by-extension.python.test-permutation-algorithms",
    "description": "by-extension.python.test-permutation-algorithms",
    "peekOfCode": "def scan_largest_movable(a):\n    \"\"\"Find the largest movable element.\"\"\"\n    def aux(acc, i):\n        if i >= len(a):\n            return acc\n        else:\n            if not is_movable(a, i):\n                return aux(acc, i + 1)\n            else:\n                x, _ = a[i]",
    "detail": "by-extension.python.test-permutation-algorithms",
    "documentation": {}
  },
  {
    "label": "flip",
    "kind": 2,
    "importPath": "by-extension.python.test-permutation-algorithms",
    "description": "by-extension.python.test-permutation-algorithms",
    "peekOfCode": "def flip(d):\n    \"\"\"Flip direction d : left -> right, right -> left\"\"\"\n    return not d\ndef scan_flip_larger(x, a):\n    \"\"\"Scan to flip larger.\"\"\"\n    for i, (y, d) in enumerate(a):\n        if y > x:\n            a[i] = y, flip(d)\ndef third_permutations(iterable):\n    \"\"\"Third algorithm, Johnson Trotter algorithm.\"\"\"",
    "detail": "by-extension.python.test-permutation-algorithms",
    "documentation": {}
  },
  {
    "label": "scan_flip_larger",
    "kind": 2,
    "importPath": "by-extension.python.test-permutation-algorithms",
    "description": "by-extension.python.test-permutation-algorithms",
    "peekOfCode": "def scan_flip_larger(x, a):\n    \"\"\"Scan to flip larger.\"\"\"\n    for i, (y, d) in enumerate(a):\n        if y > x:\n            a[i] = y, flip(d)\ndef third_permutations(iterable):\n    \"\"\"Third algorithm, Johnson Trotter algorithm.\"\"\"\n    i = sorted(list(iterable))  # Required by the algorithm\n    a = attach_direction(i)\n    r = list(iterable)[:]",
    "detail": "by-extension.python.test-permutation-algorithms",
    "documentation": {}
  },
  {
    "label": "third_permutations",
    "kind": 2,
    "importPath": "by-extension.python.test-permutation-algorithms",
    "description": "by-extension.python.test-permutation-algorithms",
    "peekOfCode": "def third_permutations(iterable):\n    \"\"\"Third algorithm, Johnson Trotter algorithm.\"\"\"\n    i = sorted(list(iterable))  # Required by the algorithm\n    a = attach_direction(i)\n    r = list(iterable)[:]\n    while True:\n        p = r[:]\n        yield p\n        i = scan_largest_movable(a)\n        if i is None:  # No more permutation!",
    "detail": "by-extension.python.test-permutation-algorithms",
    "documentation": {}
  },
  {
    "label": "test",
    "kind": 2,
    "importPath": "by-extension.python.test-permutation-algorithms",
    "description": "by-extension.python.test-permutation-algorithms",
    "peekOfCode": "def test(list_of_f, iterable, stopearly=False):\n    \"\"\" Test that all functions in list_of_f give the same list of permutation on this iterable.\"\"\"\n    print(\"\\n\\nTesting for the list of functions {} ...\".format([f.__name__ for f in list_of_f]))  # DEBUG\n    result = True\n    print(\"Testing for the iterable {} ...\".format(iterable))  # DEBUG\n    i = iterable\n    allperms = []\n    for f in list_of_f:\n        allperms.append(sorted([list(p) for p in f(iterable)]))\n    for i, pi in enumerate(allperms):",
    "detail": "by-extension.python.test-permutation-algorithms",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "by-extension.python.test-permutation-algorithms",
    "description": "by-extension.python.test-permutation-algorithms",
    "peekOfCode": "def main():\n    # list_of_f = [itertools_permutations, first_permutations]\n    # list_of_f = [itertools_permutations, first_permutations, second_permutations]\n    list_of_f = [itertools_permutations, first_permutations, second_permutations, third_permutations]\n    iterable = [1, 2, 3]\n    test(list_of_f, iterable)\n    iterable = [1, 2, 3, 4, 5]\n    test(list_of_f, iterable)\n    iterable = [1, 2, 3, 4, 5, 6]\n    test(list_of_f, iterable)",
    "detail": "by-extension.python.test-permutation-algorithms",
    "documentation": {}
  },
  {
    "label": "left",
    "kind": 5,
    "importPath": "by-extension.python.test-permutation-algorithms",
    "description": "by-extension.python.test-permutation-algorithms",
    "peekOfCode": "left = False\nright = True\ndef attach_direction(t, d=left):\n    \"\"\"Attach the direction d to all elements of array t.\"\"\"\n    return [(x, d) for x in t]\ndef remove_direction(t):\n    \"\"\"Remove the attached direction d to all elements of array t.\"\"\"\n    return [y for y, _ in t]\ndef swap(t, i, j):\n    \"\"\"Swap t[i] and t[j] in array t.\"\"\"",
    "detail": "by-extension.python.test-permutation-algorithms",
    "documentation": {}
  },
  {
    "label": "right",
    "kind": 5,
    "importPath": "by-extension.python.test-permutation-algorithms",
    "description": "by-extension.python.test-permutation-algorithms",
    "peekOfCode": "right = True\ndef attach_direction(t, d=left):\n    \"\"\"Attach the direction d to all elements of array t.\"\"\"\n    return [(x, d) for x in t]\ndef remove_direction(t):\n    \"\"\"Remove the attached direction d to all elements of array t.\"\"\"\n    return [y for y, _ in t]\ndef swap(t, i, j):\n    \"\"\"Swap t[i] and t[j] in array t.\"\"\"\n    t[i], t[j] = t[j], t[i]",
    "detail": "by-extension.python.test-permutation-algorithms",
    "documentation": {}
  },
  {
    "label": "exclude_dir",
    "kind": 2,
    "importPath": "by-extension.python.test_dead_link",
    "description": "by-extension.python.test_dead_link",
    "peekOfCode": "def exclude_dir(directory):\n    if \"build\" in directory:\n        return True\n    if \".git\" in directory :\n        return True\n    return False\ndef _tex_file_iterator(directory):\n    for p in os.listdir(directory):\n        path=os.path.join(directory,p)\n        if os.path.isfile(path):",
    "detail": "by-extension.python.test_dead_link",
    "documentation": {}
  },
  {
    "label": "tex_file_iterator",
    "kind": 2,
    "importPath": "by-extension.python.test_dead_link",
    "description": "by-extension.python.test_dead_link",
    "peekOfCode": "def tex_file_iterator(directory):\n    \"\"\"\n    Provides 'mazhe.bib' and then the '.tex' files in the\n    directory (recursive).\n    \"\"\"\n    yield os.path.join(directory,\"mazhe.bib\")\n    for p in _tex_file_iterator(directory):\n        yield p\ndef _file_to_url_iterator(filename):\n    \"\"\"",
    "detail": "by-extension.python.test_dead_link",
    "documentation": {}
  },
  {
    "label": "is_serious_url",
    "kind": 2,
    "importPath": "by-extension.python.test_dead_link",
    "description": "by-extension.python.test_dead_link",
    "peekOfCode": "def is_serious_url(url):\n    if url == r\"\\lstname\":\n        return False\n    if url in useless_url :\n        return False\n    return True\ndef file_to_url_iterator(filename):\n    for url in _file_to_url_iterator(filename):\n        if is_serious_url(url):\n            yield url",
    "detail": "by-extension.python.test_dead_link",
    "documentation": {}
  },
  {
    "label": "file_to_url_iterator",
    "kind": 2,
    "importPath": "by-extension.python.test_dead_link",
    "description": "by-extension.python.test_dead_link",
    "peekOfCode": "def file_to_url_iterator(filename):\n    for url in _file_to_url_iterator(filename):\n        if is_serious_url(url):\n            yield url\ndef check_url_corectness(url,f):\n    if url==\"\":\n        print(\"There is an empty URL in \",f)\n    if url[0] not in string.ascii_letters :\n        print(\"In \",f,\" : the url does not starts with an ascii character :\")\n        print(url)",
    "detail": "by-extension.python.test_dead_link",
    "documentation": {}
  },
  {
    "label": "check_url_corectness",
    "kind": 2,
    "importPath": "by-extension.python.test_dead_link",
    "description": "by-extension.python.test_dead_link",
    "peekOfCode": "def check_url_corectness(url,f):\n    if url==\"\":\n        print(\"There is an empty URL in \",f)\n    if url[0] not in string.ascii_letters :\n        print(\"In \",f,\" : the url does not starts with an ascii character :\")\n        print(url)\ntry:\n    from httplib import HTTPConnection\nexcept ImportError:\n    from http.client import HTTPConnection",
    "detail": "by-extension.python.test_dead_link",
    "documentation": {}
  },
  {
    "label": "checkUrl",
    "kind": 2,
    "importPath": "by-extension.python.test_dead_link",
    "description": "by-extension.python.test_dead_link",
    "peekOfCode": "def checkUrl(url):\n    try:\n        p = urlparse(url)\n        conn = HTTPConnection(p.netloc)\n        conn.request('HEAD', p.path)\n        resp = conn.getresponse()\n        return resp.status < 400\n    except Exception as e:\n        print(\"Exception:\", e)\n        return False",
    "detail": "by-extension.python.test_dead_link",
    "documentation": {}
  },
  {
    "label": "is_not_dead",
    "kind": 2,
    "importPath": "by-extension.python.test_dead_link",
    "description": "by-extension.python.test_dead_link",
    "peekOfCode": "def is_not_dead(url):\n    try:\n        ret = requests.head(url)\n        return ret.status_code < 400\n    except Exception as e:\n        print(\"Exception:\", e)\n        return False\nfor f in tex_file_iterator(starting_path):\n    print(\"File\", f)\n    for url in file_to_url_iterator(f):",
    "detail": "by-extension.python.test_dead_link",
    "documentation": {}
  },
  {
    "label": "TestProcessInboundMessage",
    "kind": 6,
    "importPath": "by-extension.python.test_mailgun",
    "description": "by-extension.python.test_mailgun",
    "peekOfCode": "class TestProcessInboundMessage(TestCase):\n    urls = 'getsentry.conf.urls.app'\n    def setUp(self):\n        super(TestProcessInboundMessage, self).setUp()\n        self.event = self.create_event(event_id='a' * 32)\n        self.mailto = group_id_to_email(self.group.pk)\n    @mock.patch('getsentry.web.mailgun.process_inbound_email')\n    def test_simple(self, process_inbound_email):\n        resp = self.client.post('/api/0/mailgun/inbound/', {\n            'To': 'Sentry <%s>' % (self.mailto,),",
    "detail": "by-extension.python.test_mailgun",
    "documentation": {}
  },
  {
    "label": "body_plain",
    "kind": 5,
    "importPath": "by-extension.python.test_mailgun",
    "description": "by-extension.python.test_mailgun",
    "peekOfCode": "body_plain = \"foo bar\"\nclass TestProcessInboundMessage(TestCase):\n    urls = 'getsentry.conf.urls.app'\n    def setUp(self):\n        super(TestProcessInboundMessage, self).setUp()\n        self.event = self.create_event(event_id='a' * 32)\n        self.mailto = group_id_to_email(self.group.pk)\n    @mock.patch('getsentry.web.mailgun.process_inbound_email')\n    def test_simple(self, process_inbound_email):\n        resp = self.client.post('/api/0/mailgun/inbound/', {",
    "detail": "by-extension.python.test_mailgun",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "by-extension.python.TGV",
    "description": "by-extension.python.TGV",
    "peekOfCode": "def main(url, MY_OUTWARD_TIME_MINI, MY_OUTWARD_TIME_MAXI=\"23:59\"):\n    \"\"\" Go to the page 'url', find the next link to got, then extract the JSON query result, find the wanted train, and display the results.\n    \"\"\"\n    MY_OUTWARD_TIME_MINI = MY_OUTWARD_TIME_MINI.replace('h', ':')\n    MY_OUTWARD_TIME_MAXI = MY_OUTWARD_TIME_MAXI.replace('h', ':')\n    # Create the web browser object\n    b = RB(history=True, allow_redirects=True)\n    # Open the page\n    b.open(url)\n    # Find the next page to go",
    "detail": "by-extension.python.TGV",
    "documentation": {}
  },
  {
    "label": "url_finder",
    "kind": 5,
    "importPath": "by-extension.python.TGV",
    "description": "by-extension.python.TGV",
    "peekOfCode": "url_finder = re.compile(r'http[^\"]*')\nquery_finder = re.compile(r\"data.query = JSON.parse\\('\\{[^\\n]*\")\nsearchResponse_finder = re.compile(r\"data.searchResponse = JSON.parse\\('\\{[^\\n]*\")\n# url0 = \"http://www.voyages-sncf.com//vsc/train-ticket/?_LANG=fr&site_country=FR&site_language=fr&ORIGIN_CITY=Toulon&DESTINATION_CITY=Paris%20%28Toutes%20gares%20intramuros%29&OUTWARD_DATE=31/05/2016&OUTWARD_TIME=15&INWARD_DATE=&INWARD_TIME=7&COMFORT_CLASS=2&DISTRIBUTED_COUNTRY=FR&NB_TYPO_ADULT=1&bookingChoice=train&PASSENGER_1=YOUNG&PASSENGER_1_CARD=MI1ST&PASSENGER_1_FID_PROG=&PASSENGER_1FID_NUM_BEGIN=&CODE_PROMO_1=&action:searchTravel=Rechercher\"\n#URL_TEMPLATE = \"http://www.voyages-sncf.com//vsc/train-ticket/?_LANG=fr&site_country=FR&site_language=fr&ORIGIN_CITY={ORIGIN_CITY}&DESTINATION_CITY={DESTINATION_CITY}&OUTWARD_DATE={DATE}&OUTWARD_TIME={OUTWARD_TIME}&INWARD_DATE=&INWARD_TIME=7&COMFORT_CLASS=2&DISTRIBUTED_COUNTRY=FR&NB_TYPO_ADULT=1&bookingChoice=train&PASSENGER_1=YOUNG&PASSENGER_1_CARD=MI1ST&PASSENGER_1_FID_PROG=&PASSENGER_1FID_NUM_BEGIN=&CODE_PROMO_1=&action:searchTravel=Rechercher\"\nURL_TEMPLATE = 'https://www.oui.sncf/vsc/train-ticket/?_LANG=fr&ORIGIN_CITY={ORIGIN_CITY}&DESTINATION_CITY={DESTINATION_CITY}&OUTWARD_DATE={DATE}&OUTWARD_TIME={OUTWARD_TIME}&DIRECT_TRAVEL_CHECK=1&COMFORT_CLASS=2&PASSENGER_1=YOUNG&PASSENGER_1_CARD=&PASSENGER_1_FID_PROG=&PASSENGER_1FID_NUM_BEGIN=&CODE_PROMO_1=&PASSENGER_1_CARD_NUMBER=&PASSENGER_1_CARD_BIRTH_DATE=&action:searchTravelLaunchTrain=Rechercher'\n#EXEMPLE SANS CARTE PARTICULIERE TARIF NORMAL\n# url1 = 'http://www.voyages-sncf.com/vsc/proposals/findProposals?hid='\ndef main(url, MY_OUTWARD_TIME_MINI, MY_OUTWARD_TIME_MAXI=\"23:59\"):\n    \"\"\" Go to the page 'url', find the next link to got, then extract the JSON query result, find the wanted train, and display the results.",
    "detail": "by-extension.python.TGV",
    "documentation": {}
  },
  {
    "label": "query_finder",
    "kind": 5,
    "importPath": "by-extension.python.TGV",
    "description": "by-extension.python.TGV",
    "peekOfCode": "query_finder = re.compile(r\"data.query = JSON.parse\\('\\{[^\\n]*\")\nsearchResponse_finder = re.compile(r\"data.searchResponse = JSON.parse\\('\\{[^\\n]*\")\n# url0 = \"http://www.voyages-sncf.com//vsc/train-ticket/?_LANG=fr&site_country=FR&site_language=fr&ORIGIN_CITY=Toulon&DESTINATION_CITY=Paris%20%28Toutes%20gares%20intramuros%29&OUTWARD_DATE=31/05/2016&OUTWARD_TIME=15&INWARD_DATE=&INWARD_TIME=7&COMFORT_CLASS=2&DISTRIBUTED_COUNTRY=FR&NB_TYPO_ADULT=1&bookingChoice=train&PASSENGER_1=YOUNG&PASSENGER_1_CARD=MI1ST&PASSENGER_1_FID_PROG=&PASSENGER_1FID_NUM_BEGIN=&CODE_PROMO_1=&action:searchTravel=Rechercher\"\n#URL_TEMPLATE = \"http://www.voyages-sncf.com//vsc/train-ticket/?_LANG=fr&site_country=FR&site_language=fr&ORIGIN_CITY={ORIGIN_CITY}&DESTINATION_CITY={DESTINATION_CITY}&OUTWARD_DATE={DATE}&OUTWARD_TIME={OUTWARD_TIME}&INWARD_DATE=&INWARD_TIME=7&COMFORT_CLASS=2&DISTRIBUTED_COUNTRY=FR&NB_TYPO_ADULT=1&bookingChoice=train&PASSENGER_1=YOUNG&PASSENGER_1_CARD=MI1ST&PASSENGER_1_FID_PROG=&PASSENGER_1FID_NUM_BEGIN=&CODE_PROMO_1=&action:searchTravel=Rechercher\"\nURL_TEMPLATE = 'https://www.oui.sncf/vsc/train-ticket/?_LANG=fr&ORIGIN_CITY={ORIGIN_CITY}&DESTINATION_CITY={DESTINATION_CITY}&OUTWARD_DATE={DATE}&OUTWARD_TIME={OUTWARD_TIME}&DIRECT_TRAVEL_CHECK=1&COMFORT_CLASS=2&PASSENGER_1=YOUNG&PASSENGER_1_CARD=&PASSENGER_1_FID_PROG=&PASSENGER_1FID_NUM_BEGIN=&CODE_PROMO_1=&PASSENGER_1_CARD_NUMBER=&PASSENGER_1_CARD_BIRTH_DATE=&action:searchTravelLaunchTrain=Rechercher'\n#EXEMPLE SANS CARTE PARTICULIERE TARIF NORMAL\n# url1 = 'http://www.voyages-sncf.com/vsc/proposals/findProposals?hid='\ndef main(url, MY_OUTWARD_TIME_MINI, MY_OUTWARD_TIME_MAXI=\"23:59\"):\n    \"\"\" Go to the page 'url', find the next link to got, then extract the JSON query result, find the wanted train, and display the results.\n    \"\"\"",
    "detail": "by-extension.python.TGV",
    "documentation": {}
  },
  {
    "label": "searchResponse_finder",
    "kind": 5,
    "importPath": "by-extension.python.TGV",
    "description": "by-extension.python.TGV",
    "peekOfCode": "searchResponse_finder = re.compile(r\"data.searchResponse = JSON.parse\\('\\{[^\\n]*\")\n# url0 = \"http://www.voyages-sncf.com//vsc/train-ticket/?_LANG=fr&site_country=FR&site_language=fr&ORIGIN_CITY=Toulon&DESTINATION_CITY=Paris%20%28Toutes%20gares%20intramuros%29&OUTWARD_DATE=31/05/2016&OUTWARD_TIME=15&INWARD_DATE=&INWARD_TIME=7&COMFORT_CLASS=2&DISTRIBUTED_COUNTRY=FR&NB_TYPO_ADULT=1&bookingChoice=train&PASSENGER_1=YOUNG&PASSENGER_1_CARD=MI1ST&PASSENGER_1_FID_PROG=&PASSENGER_1FID_NUM_BEGIN=&CODE_PROMO_1=&action:searchTravel=Rechercher\"\n#URL_TEMPLATE = \"http://www.voyages-sncf.com//vsc/train-ticket/?_LANG=fr&site_country=FR&site_language=fr&ORIGIN_CITY={ORIGIN_CITY}&DESTINATION_CITY={DESTINATION_CITY}&OUTWARD_DATE={DATE}&OUTWARD_TIME={OUTWARD_TIME}&INWARD_DATE=&INWARD_TIME=7&COMFORT_CLASS=2&DISTRIBUTED_COUNTRY=FR&NB_TYPO_ADULT=1&bookingChoice=train&PASSENGER_1=YOUNG&PASSENGER_1_CARD=MI1ST&PASSENGER_1_FID_PROG=&PASSENGER_1FID_NUM_BEGIN=&CODE_PROMO_1=&action:searchTravel=Rechercher\"\nURL_TEMPLATE = 'https://www.oui.sncf/vsc/train-ticket/?_LANG=fr&ORIGIN_CITY={ORIGIN_CITY}&DESTINATION_CITY={DESTINATION_CITY}&OUTWARD_DATE={DATE}&OUTWARD_TIME={OUTWARD_TIME}&DIRECT_TRAVEL_CHECK=1&COMFORT_CLASS=2&PASSENGER_1=YOUNG&PASSENGER_1_CARD=&PASSENGER_1_FID_PROG=&PASSENGER_1FID_NUM_BEGIN=&CODE_PROMO_1=&PASSENGER_1_CARD_NUMBER=&PASSENGER_1_CARD_BIRTH_DATE=&action:searchTravelLaunchTrain=Rechercher'\n#EXEMPLE SANS CARTE PARTICULIERE TARIF NORMAL\n# url1 = 'http://www.voyages-sncf.com/vsc/proposals/findProposals?hid='\ndef main(url, MY_OUTWARD_TIME_MINI, MY_OUTWARD_TIME_MAXI=\"23:59\"):\n    \"\"\" Go to the page 'url', find the next link to got, then extract the JSON query result, find the wanted train, and display the results.\n    \"\"\"\n    MY_OUTWARD_TIME_MINI = MY_OUTWARD_TIME_MINI.replace('h', ':')",
    "detail": "by-extension.python.TGV",
    "documentation": {}
  },
  {
    "label": "#URL_TEMPLATE",
    "kind": 5,
    "importPath": "by-extension.python.TGV",
    "description": "by-extension.python.TGV",
    "peekOfCode": "#URL_TEMPLATE = \"http://www.voyages-sncf.com//vsc/train-ticket/?_LANG=fr&site_country=FR&site_language=fr&ORIGIN_CITY={ORIGIN_CITY}&DESTINATION_CITY={DESTINATION_CITY}&OUTWARD_DATE={DATE}&OUTWARD_TIME={OUTWARD_TIME}&INWARD_DATE=&INWARD_TIME=7&COMFORT_CLASS=2&DISTRIBUTED_COUNTRY=FR&NB_TYPO_ADULT=1&bookingChoice=train&PASSENGER_1=YOUNG&PASSENGER_1_CARD=MI1ST&PASSENGER_1_FID_PROG=&PASSENGER_1FID_NUM_BEGIN=&CODE_PROMO_1=&action:searchTravel=Rechercher\"\nURL_TEMPLATE = 'https://www.oui.sncf/vsc/train-ticket/?_LANG=fr&ORIGIN_CITY={ORIGIN_CITY}&DESTINATION_CITY={DESTINATION_CITY}&OUTWARD_DATE={DATE}&OUTWARD_TIME={OUTWARD_TIME}&DIRECT_TRAVEL_CHECK=1&COMFORT_CLASS=2&PASSENGER_1=YOUNG&PASSENGER_1_CARD=&PASSENGER_1_FID_PROG=&PASSENGER_1FID_NUM_BEGIN=&CODE_PROMO_1=&PASSENGER_1_CARD_NUMBER=&PASSENGER_1_CARD_BIRTH_DATE=&action:searchTravelLaunchTrain=Rechercher'\n#EXEMPLE SANS CARTE PARTICULIERE TARIF NORMAL\n# url1 = 'http://www.voyages-sncf.com/vsc/proposals/findProposals?hid='\ndef main(url, MY_OUTWARD_TIME_MINI, MY_OUTWARD_TIME_MAXI=\"23:59\"):\n    \"\"\" Go to the page 'url', find the next link to got, then extract the JSON query result, find the wanted train, and display the results.\n    \"\"\"\n    MY_OUTWARD_TIME_MINI = MY_OUTWARD_TIME_MINI.replace('h', ':')\n    MY_OUTWARD_TIME_MAXI = MY_OUTWARD_TIME_MAXI.replace('h', ':')\n    # Create the web browser object",
    "detail": "by-extension.python.TGV",
    "documentation": {}
  },
  {
    "label": "URL_TEMPLATE",
    "kind": 5,
    "importPath": "by-extension.python.TGV",
    "description": "by-extension.python.TGV",
    "peekOfCode": "URL_TEMPLATE = 'https://www.oui.sncf/vsc/train-ticket/?_LANG=fr&ORIGIN_CITY={ORIGIN_CITY}&DESTINATION_CITY={DESTINATION_CITY}&OUTWARD_DATE={DATE}&OUTWARD_TIME={OUTWARD_TIME}&DIRECT_TRAVEL_CHECK=1&COMFORT_CLASS=2&PASSENGER_1=YOUNG&PASSENGER_1_CARD=&PASSENGER_1_FID_PROG=&PASSENGER_1FID_NUM_BEGIN=&CODE_PROMO_1=&PASSENGER_1_CARD_NUMBER=&PASSENGER_1_CARD_BIRTH_DATE=&action:searchTravelLaunchTrain=Rechercher'\n#EXEMPLE SANS CARTE PARTICULIERE TARIF NORMAL\n# url1 = 'http://www.voyages-sncf.com/vsc/proposals/findProposals?hid='\ndef main(url, MY_OUTWARD_TIME_MINI, MY_OUTWARD_TIME_MAXI=\"23:59\"):\n    \"\"\" Go to the page 'url', find the next link to got, then extract the JSON query result, find the wanted train, and display the results.\n    \"\"\"\n    MY_OUTWARD_TIME_MINI = MY_OUTWARD_TIME_MINI.replace('h', ':')\n    MY_OUTWARD_TIME_MAXI = MY_OUTWARD_TIME_MAXI.replace('h', ':')\n    # Create the web browser object\n    b = RB(history=True, allow_redirects=True)",
    "detail": "by-extension.python.TGV",
    "documentation": {}
  },
  {
    "label": "throttle",
    "kind": 6,
    "importPath": "by-extension.python.throttle",
    "description": "by-extension.python.throttle",
    "peekOfCode": "class throttle(object):\n    \"\"\"\n    Decorator that prevents a function from being called more than once every\n    time period.\n    To create a function that cannot be called more than once a minute:\n        @throttle(minutes=1)\n        def my_fun():\n            pass\n    \"\"\"\n    def __init__(self, seconds):",
    "detail": "by-extension.python.throttle",
    "documentation": {}
  },
  {
    "label": "operations",
    "kind": 2,
    "importPath": "by-extension.python.transform_number_ascending_digits",
    "description": "by-extension.python.transform_number_ascending_digits",
    "peekOfCode": "def operations(number):\n    n = len(number)\n    diff = lambda i, j: abs(j - int(number[i]))\n    # compute diff between the current digit and wanted digit, and fill the dp\n    prev_dp = [min(diff(0, i), 10 - diff(0, i)) for i in range(10)]\n    # go through all digits and see all possible combinations using dynamic programming\n    for i in range(1, n):\n        curr_dp = [min(diff(i, j), 10 - diff(i, j)) for j in range(10)]\n        for j in range(10):\n            # find the min value for the previous digit and add it to the current value",
    "detail": "by-extension.python.transform_number_ascending_digits",
    "documentation": {}
  },
  {
    "label": "Stat",
    "kind": 6,
    "importPath": "by-extension.python.traveling-salesman",
    "description": "by-extension.python.traveling-salesman",
    "peekOfCode": "class State :\n    name = \"\"\n    visited = 0\nclass Action :\n    act = \"\"\nclass Problem :\n    def input(self) :\n        global cityNum\n        global cityArr\n        global builtStates",
    "detail": "by-extension.python.traveling-salesman",
    "documentation": {}
  },
  {
    "label": "Actio",
    "kind": 6,
    "importPath": "by-extension.python.traveling-salesman",
    "description": "by-extension.python.traveling-salesman",
    "peekOfCode": "class Action :\n    act = \"\"\nclass Problem :\n    def input(self) :\n        global cityNum\n        global cityArr\n        global builtStates\n        cityNum = int(input('Enter number of cities: '))\n        mylist =[]\n        for n in range (0,cityNum) :",
    "detail": "by-extension.python.traveling-salesman",
    "documentation": {}
  },
  {
    "label": "Proble",
    "kind": 6,
    "importPath": "by-extension.python.traveling-salesman",
    "description": "by-extension.python.traveling-salesman",
    "peekOfCode": "class Problem :\n    def input(self) :\n        global cityNum\n        global cityArr\n        global builtStates\n        cityNum = int(input('Enter number of cities: '))\n        mylist =[]\n        for n in range (0,cityNum) :\n            x = input('Enter the %d line : ' % n)\n            y=x.split()",
    "detail": "by-extension.python.traveling-salesman",
    "documentation": {}
  },
  {
    "label": "cityNum",
    "kind": 5,
    "importPath": "by-extension.python.traveling-salesman",
    "description": "by-extension.python.traveling-salesman",
    "peekOfCode": "cityNum = None\ncityArr = []\nactions = []\nbuiltStates = []\nclass State :\n    name = \"\"\n    visited = 0\nclass Action :\n    act = \"\"\nclass Problem :",
    "detail": "by-extension.python.traveling-salesman",
    "documentation": {}
  },
  {
    "label": "cityArr",
    "kind": 5,
    "importPath": "by-extension.python.traveling-salesman",
    "description": "by-extension.python.traveling-salesman",
    "peekOfCode": "cityArr = []\nactions = []\nbuiltStates = []\nclass State :\n    name = \"\"\n    visited = 0\nclass Action :\n    act = \"\"\nclass Problem :\n    def input(self) :",
    "detail": "by-extension.python.traveling-salesman",
    "documentation": {}
  },
  {
    "label": "actions",
    "kind": 5,
    "importPath": "by-extension.python.traveling-salesman",
    "description": "by-extension.python.traveling-salesman",
    "peekOfCode": "actions = []\nbuiltStates = []\nclass State :\n    name = \"\"\n    visited = 0\nclass Action :\n    act = \"\"\nclass Problem :\n    def input(self) :\n        global cityNum",
    "detail": "by-extension.python.traveling-salesman",
    "documentation": {}
  },
  {
    "label": "builtStates",
    "kind": 5,
    "importPath": "by-extension.python.traveling-salesman",
    "description": "by-extension.python.traveling-salesman",
    "peekOfCode": "builtStates = []\nclass State :\n    name = \"\"\n    visited = 0\nclass Action :\n    act = \"\"\nclass Problem :\n    def input(self) :\n        global cityNum\n        global cityArr",
    "detail": "by-extension.python.traveling-salesman",
    "documentation": {}
  },
  {
    "label": "Node",
    "kind": 6,
    "importPath": "by-extension.python.tree-level-order-print",
    "description": "by-extension.python.tree-level-order-print",
    "peekOfCode": "class Node(object):\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\ndef traverse_levelorder(root):\n    if not root:\n        return\n    q = [root, True]  # Use True as sentinel for end of row\n    while len(q) > 0:",
    "detail": "by-extension.python.tree-level-order-print",
    "documentation": {}
  },
  {
    "label": "traverse_levelorder",
    "kind": 2,
    "importPath": "by-extension.python.tree-level-order-print",
    "description": "by-extension.python.tree-level-order-print",
    "peekOfCode": "def traverse_levelorder(root):\n    if not root:\n        return\n    q = [root, True]  # Use True as sentinel for end of row\n    while len(q) > 0:\n        node = q.pop(0)\n        print node.value,\n        if node.left:\n            q.append(node.left)\n        if node.right:",
    "detail": "by-extension.python.tree-level-order-print",
    "documentation": {}
  },
  {
    "label": "TreeNode",
    "kind": 6,
    "importPath": "by-extension.python.tree",
    "description": "by-extension.python.tree",
    "peekOfCode": "class TreeNode:\n  def __init__(self, val):\n    self.val = val\n    self.left = None\n    self.right = None\n# initialization of a tree\nrootNode = TreeNode(1)\nleftNode = TreeNode(2)\nrightNode = TreeNode(3)\nrootNode.left = leftNode",
    "detail": "by-extension.python.tree",
    "documentation": {}
  },
  {
    "label": "inorderTraversal",
    "kind": 2,
    "importPath": "by-extension.python.tree",
    "description": "by-extension.python.tree",
    "peekOfCode": "def inorderTraversal(root):\n  result = []\n  if not root:\n      return self.result\n  def df(node: TreeNode):\n      if not node:\n          return\n      df(node.left)\n      result.append(node.val)\n      df(node.right)",
    "detail": "by-extension.python.tree",
    "documentation": {}
  },
  {
    "label": "preorderTraversal",
    "kind": 2,
    "importPath": "by-extension.python.tree",
    "description": "by-extension.python.tree",
    "peekOfCode": "def preorderTraversal(root):\n  result = []\n  if not root:\n      return result\n  def df(node: TreeNode):\n      if not node:\n          return\n      result.append(node.val)\n      df(node.left)\n      df(node.right)",
    "detail": "by-extension.python.tree",
    "documentation": {}
  },
  {
    "label": "postorderTraversal",
    "kind": 2,
    "importPath": "by-extension.python.tree",
    "description": "by-extension.python.tree",
    "peekOfCode": "def postorderTraversal(root):\n  result = []\n  if not root:\n      return result\n  def df(node: TreeNode):\n      if not node:\n          return\n      df(node.left)\n      df(node.right)\n      result.append(node.val)",
    "detail": "by-extension.python.tree",
    "documentation": {}
  },
  {
    "label": "rootNode",
    "kind": 5,
    "importPath": "by-extension.python.tree",
    "description": "by-extension.python.tree",
    "peekOfCode": "rootNode = TreeNode(1)\nleftNode = TreeNode(2)\nrightNode = TreeNode(3)\nrootNode.left = leftNode\nrootNode.right = rightNode\n# inorderTraversal of the tree (Left, Root, Right)\ndef inorderTraversal(root):\n  result = []\n  if not root:\n      return self.result",
    "detail": "by-extension.python.tree",
    "documentation": {}
  },
  {
    "label": "leftNode",
    "kind": 5,
    "importPath": "by-extension.python.tree",
    "description": "by-extension.python.tree",
    "peekOfCode": "leftNode = TreeNode(2)\nrightNode = TreeNode(3)\nrootNode.left = leftNode\nrootNode.right = rightNode\n# inorderTraversal of the tree (Left, Root, Right)\ndef inorderTraversal(root):\n  result = []\n  if not root:\n      return self.result\n  def df(node: TreeNode):",
    "detail": "by-extension.python.tree",
    "documentation": {}
  },
  {
    "label": "rightNode",
    "kind": 5,
    "importPath": "by-extension.python.tree",
    "description": "by-extension.python.tree",
    "peekOfCode": "rightNode = TreeNode(3)\nrootNode.left = leftNode\nrootNode.right = rightNode\n# inorderTraversal of the tree (Left, Root, Right)\ndef inorderTraversal(root):\n  result = []\n  if not root:\n      return self.result\n  def df(node: TreeNode):\n      if not node:",
    "detail": "by-extension.python.tree",
    "documentation": {}
  },
  {
    "label": "rootNode.left",
    "kind": 5,
    "importPath": "by-extension.python.tree",
    "description": "by-extension.python.tree",
    "peekOfCode": "rootNode.left = leftNode\nrootNode.right = rightNode\n# inorderTraversal of the tree (Left, Root, Right)\ndef inorderTraversal(root):\n  result = []\n  if not root:\n      return self.result\n  def df(node: TreeNode):\n      if not node:\n          return",
    "detail": "by-extension.python.tree",
    "documentation": {}
  },
  {
    "label": "rootNode.right",
    "kind": 5,
    "importPath": "by-extension.python.tree",
    "description": "by-extension.python.tree",
    "peekOfCode": "rootNode.right = rightNode\n# inorderTraversal of the tree (Left, Root, Right)\ndef inorderTraversal(root):\n  result = []\n  if not root:\n      return self.result\n  def df(node: TreeNode):\n      if not node:\n          return\n      df(node.left)",
    "detail": "by-extension.python.tree",
    "documentation": {}
  },
  {
    "label": "url",
    "kind": 5,
    "importPath": "by-extension.python.unscrape (2)",
    "description": "by-extension.python.unscrape (2)",
    "peekOfCode": "url = \"https://unsplash.com\"\ndriver = webdriver.Firefox(executable_path=r'geckodriver.exe')\ndriver.get(url)\ndriver.execute_script(\"window.scrollTo(0,1000);\")\ntime.sleep(5)\n# Select image elements and print their URLs\nimage_elements = driver.find_elements_by_css_selector(\"#gridMulti img\")\nfor image_element in image_elements:\n    image_url = image_element.get_attribute(\"src\")\n    print(image_url)",
    "detail": "by-extension.python.unscrape (2)",
    "documentation": {}
  },
  {
    "label": "driver",
    "kind": 5,
    "importPath": "by-extension.python.unscrape (2)",
    "description": "by-extension.python.unscrape (2)",
    "peekOfCode": "driver = webdriver.Firefox(executable_path=r'geckodriver.exe')\ndriver.get(url)\ndriver.execute_script(\"window.scrollTo(0,1000);\")\ntime.sleep(5)\n# Select image elements and print their URLs\nimage_elements = driver.find_elements_by_css_selector(\"#gridMulti img\")\nfor image_element in image_elements:\n    image_url = image_element.get_attribute(\"src\")\n    print(image_url)",
    "detail": "by-extension.python.unscrape (2)",
    "documentation": {}
  },
  {
    "label": "image_elements",
    "kind": 5,
    "importPath": "by-extension.python.unscrape (2)",
    "description": "by-extension.python.unscrape (2)",
    "peekOfCode": "image_elements = driver.find_elements_by_css_selector(\"#gridMulti img\")\nfor image_element in image_elements:\n    image_url = image_element.get_attribute(\"src\")\n    print(image_url)",
    "detail": "by-extension.python.unscrape (2)",
    "documentation": {}
  },
  {
    "label": "url",
    "kind": 5,
    "importPath": "by-extension.python.unscrape (3)",
    "description": "by-extension.python.unscrape (3)",
    "peekOfCode": "url = \"https://unsplash.com\"\ndriver = webdriver.Firefox(executable_path=r'geckodriver.exe')\ndriver.get(url)\n# Scroll page and wait 5 seconds\ndriver.execute_script(\"window.scrollTo(0,1000);\")\ntime.sleep(5)",
    "detail": "by-extension.python.unscrape (3)",
    "documentation": {}
  },
  {
    "label": "driver",
    "kind": 5,
    "importPath": "by-extension.python.unscrape (3)",
    "description": "by-extension.python.unscrape (3)",
    "peekOfCode": "driver = webdriver.Firefox(executable_path=r'geckodriver.exe')\ndriver.get(url)\n# Scroll page and wait 5 seconds\ndriver.execute_script(\"window.scrollTo(0,1000);\")\ntime.sleep(5)",
    "detail": "by-extension.python.unscrape (3)",
    "documentation": {}
  },
  {
    "label": "url",
    "kind": 5,
    "importPath": "by-extension.python.unscrape (4)",
    "description": "by-extension.python.unscrape (4)",
    "peekOfCode": "url = \"https://unsplash.com\"\ndriver = webdriver.Firefox(executable_path=r'geckodriver.exe')\ndriver.get(url)\ndriver.execute_script(\"window.scrollTo(0,1000);\")\ntime.sleep(5)\nimage_elements = driver.find_elements_by_css_selector(\"#gridMulti img\")\ni = 0\nfor image_element in image_elements:\n    image_url = image_element.get_attribute(\"src\")\n    # Send an HTTP GET request, get and save the image from the response",
    "detail": "by-extension.python.unscrape (4)",
    "documentation": {}
  },
  {
    "label": "driver",
    "kind": 5,
    "importPath": "by-extension.python.unscrape (4)",
    "description": "by-extension.python.unscrape (4)",
    "peekOfCode": "driver = webdriver.Firefox(executable_path=r'geckodriver.exe')\ndriver.get(url)\ndriver.execute_script(\"window.scrollTo(0,1000);\")\ntime.sleep(5)\nimage_elements = driver.find_elements_by_css_selector(\"#gridMulti img\")\ni = 0\nfor image_element in image_elements:\n    image_url = image_element.get_attribute(\"src\")\n    # Send an HTTP GET request, get and save the image from the response\n    image_object = requests.get(image_url)",
    "detail": "by-extension.python.unscrape (4)",
    "documentation": {}
  },
  {
    "label": "image_elements",
    "kind": 5,
    "importPath": "by-extension.python.unscrape (4)",
    "description": "by-extension.python.unscrape (4)",
    "peekOfCode": "image_elements = driver.find_elements_by_css_selector(\"#gridMulti img\")\ni = 0\nfor image_element in image_elements:\n    image_url = image_element.get_attribute(\"src\")\n    # Send an HTTP GET request, get and save the image from the response\n    image_object = requests.get(image_url)\n    image = Image.open(BytesIO(image_object.content))\n    image.save(\"./images/image\" + str(i) + \".\" + image.format, image.format)\n    i += 1",
    "detail": "by-extension.python.unscrape (4)",
    "documentation": {}
  },
  {
    "label": "i",
    "kind": 5,
    "importPath": "by-extension.python.unscrape (4)",
    "description": "by-extension.python.unscrape (4)",
    "peekOfCode": "i = 0\nfor image_element in image_elements:\n    image_url = image_element.get_attribute(\"src\")\n    # Send an HTTP GET request, get and save the image from the response\n    image_object = requests.get(image_url)\n    image = Image.open(BytesIO(image_object.content))\n    image.save(\"./images/image\" + str(i) + \".\" + image.format, image.format)\n    i += 1",
    "detail": "by-extension.python.unscrape (4)",
    "documentation": {}
  },
  {
    "label": "url",
    "kind": 5,
    "importPath": "by-extension.python.unscrape",
    "description": "by-extension.python.unscrape",
    "peekOfCode": "url = \"https://unsplash.com\"\n# Using Selenium's webdriver to open the page\ndriver = webdriver.Firefox(executable_path=r'geckodriver.exe')\ndriver.get(url)",
    "detail": "by-extension.python.unscrape",
    "documentation": {}
  },
  {
    "label": "driver",
    "kind": 5,
    "importPath": "by-extension.python.unscrape",
    "description": "by-extension.python.unscrape",
    "peekOfCode": "driver = webdriver.Firefox(executable_path=r'geckodriver.exe')\ndriver.get(url)",
    "detail": "by-extension.python.unscrape",
    "documentation": {}
  },
  {
    "label": "url",
    "kind": 5,
    "importPath": "by-extension.python.unscrape_(2)",
    "description": "by-extension.python.unscrape_(2)",
    "peekOfCode": "url = \"https://unsplash.com\"\ndriver = webdriver.Firefox(executable_path=r\"geckodriver.exe\")\ndriver.get(url)\ndriver.execute_script(\"window.scrollTo(0,1000);\")\ntime.sleep(5)\n# Select image elements and print their URLs\nimage_elements = driver.find_elements_by_css_selector(\"#gridMulti img\")\nfor image_element in image_elements:\n    image_url = image_element.get_attribute(\"src\")\n    print(image_url)",
    "detail": "by-extension.python.unscrape_(2)",
    "documentation": {}
  },
  {
    "label": "driver",
    "kind": 5,
    "importPath": "by-extension.python.unscrape_(2)",
    "description": "by-extension.python.unscrape_(2)",
    "peekOfCode": "driver = webdriver.Firefox(executable_path=r\"geckodriver.exe\")\ndriver.get(url)\ndriver.execute_script(\"window.scrollTo(0,1000);\")\ntime.sleep(5)\n# Select image elements and print their URLs\nimage_elements = driver.find_elements_by_css_selector(\"#gridMulti img\")\nfor image_element in image_elements:\n    image_url = image_element.get_attribute(\"src\")\n    print(image_url)",
    "detail": "by-extension.python.unscrape_(2)",
    "documentation": {}
  },
  {
    "label": "image_elements",
    "kind": 5,
    "importPath": "by-extension.python.unscrape_(2)",
    "description": "by-extension.python.unscrape_(2)",
    "peekOfCode": "image_elements = driver.find_elements_by_css_selector(\"#gridMulti img\")\nfor image_element in image_elements:\n    image_url = image_element.get_attribute(\"src\")\n    print(image_url)",
    "detail": "by-extension.python.unscrape_(2)",
    "documentation": {}
  },
  {
    "label": "url",
    "kind": 5,
    "importPath": "by-extension.python.unscrape_(3)",
    "description": "by-extension.python.unscrape_(3)",
    "peekOfCode": "url = \"https://unsplash.com\"\ndriver = webdriver.Firefox(executable_path=r\"geckodriver.exe\")\ndriver.get(url)\n# Scroll page and wait 5 seconds\ndriver.execute_script(\"window.scrollTo(0,1000);\")\ntime.sleep(5)",
    "detail": "by-extension.python.unscrape_(3)",
    "documentation": {}
  },
  {
    "label": "driver",
    "kind": 5,
    "importPath": "by-extension.python.unscrape_(3)",
    "description": "by-extension.python.unscrape_(3)",
    "peekOfCode": "driver = webdriver.Firefox(executable_path=r\"geckodriver.exe\")\ndriver.get(url)\n# Scroll page and wait 5 seconds\ndriver.execute_script(\"window.scrollTo(0,1000);\")\ntime.sleep(5)",
    "detail": "by-extension.python.unscrape_(3)",
    "documentation": {}
  },
  {
    "label": "url",
    "kind": 5,
    "importPath": "by-extension.python.unscrape_(4)",
    "description": "by-extension.python.unscrape_(4)",
    "peekOfCode": "url = \"https://unsplash.com\"\ndriver = webdriver.Firefox(executable_path=r\"geckodriver.exe\")\ndriver.get(url)\ndriver.execute_script(\"window.scrollTo(0,1000);\")\ntime.sleep(5)\nimage_elements = driver.find_elements_by_css_selector(\"#gridMulti img\")\ni = 0\nfor image_element in image_elements:\n    image_url = image_element.get_attribute(\"src\")\n    # Send an HTTP GET request, get and save the image from the response",
    "detail": "by-extension.python.unscrape_(4)",
    "documentation": {}
  },
  {
    "label": "driver",
    "kind": 5,
    "importPath": "by-extension.python.unscrape_(4)",
    "description": "by-extension.python.unscrape_(4)",
    "peekOfCode": "driver = webdriver.Firefox(executable_path=r\"geckodriver.exe\")\ndriver.get(url)\ndriver.execute_script(\"window.scrollTo(0,1000);\")\ntime.sleep(5)\nimage_elements = driver.find_elements_by_css_selector(\"#gridMulti img\")\ni = 0\nfor image_element in image_elements:\n    image_url = image_element.get_attribute(\"src\")\n    # Send an HTTP GET request, get and save the image from the response\n    image_object = requests.get(image_url)",
    "detail": "by-extension.python.unscrape_(4)",
    "documentation": {}
  },
  {
    "label": "image_elements",
    "kind": 5,
    "importPath": "by-extension.python.unscrape_(4)",
    "description": "by-extension.python.unscrape_(4)",
    "peekOfCode": "image_elements = driver.find_elements_by_css_selector(\"#gridMulti img\")\ni = 0\nfor image_element in image_elements:\n    image_url = image_element.get_attribute(\"src\")\n    # Send an HTTP GET request, get and save the image from the response\n    image_object = requests.get(image_url)\n    image = Image.open(BytesIO(image_object.content))\n    image.save(\"./images/image\" + str(i) + \".\" + image.format, image.format)\n    i += 1",
    "detail": "by-extension.python.unscrape_(4)",
    "documentation": {}
  },
  {
    "label": "i",
    "kind": 5,
    "importPath": "by-extension.python.unscrape_(4)",
    "description": "by-extension.python.unscrape_(4)",
    "peekOfCode": "i = 0\nfor image_element in image_elements:\n    image_url = image_element.get_attribute(\"src\")\n    # Send an HTTP GET request, get and save the image from the response\n    image_object = requests.get(image_url)\n    image = Image.open(BytesIO(image_object.content))\n    image.save(\"./images/image\" + str(i) + \".\" + image.format, image.format)\n    i += 1",
    "detail": "by-extension.python.unscrape_(4)",
    "documentation": {}
  },
  {
    "label": "NamespacedClient",
    "kind": 6,
    "importPath": "by-extension.python.utils",
    "description": "by-extension.python.utils",
    "peekOfCode": "class NamespacedClient(object):\n    def __init__(self, client):\n        self.client = client\n    @property\n    def transport(self):\n        return self.client.transport\nclass AddonClient(NamespacedClient):\n    @classmethod\n    def infect_client(cls, client):\n        addon = cls(weakref.proxy(client))",
    "detail": "by-extension.python.utils",
    "documentation": {}
  },
  {
    "label": "AddonClient",
    "kind": 6,
    "importPath": "by-extension.python.utils",
    "description": "by-extension.python.utils",
    "peekOfCode": "class AddonClient(NamespacedClient):\n    @classmethod\n    def infect_client(cls, client):\n        addon = cls(weakref.proxy(client))\n        setattr(client, cls.namespace, addon)\n        return client",
    "detail": "by-extension.python.utils",
    "documentation": {}
  },
  {
    "label": "query_params",
    "kind": 2,
    "importPath": "by-extension.python.utils",
    "description": "by-extension.python.utils",
    "peekOfCode": "def query_params(*es_query_params):\n    \"\"\"\n    Decorator that pops all accepted parameters from method's kwargs and puts\n    them in the params argument.\n    \"\"\"\n    def _wrapper(func):\n        @wraps(func)\n        def _wrapped(*args, **kwargs):\n            params = {}\n            headers = {}",
    "detail": "by-extension.python.utils",
    "documentation": {}
  },
  {
    "label": "SKIP_IN_PATH",
    "kind": 5,
    "importPath": "by-extension.python.utils",
    "description": "by-extension.python.utils",
    "peekOfCode": "SKIP_IN_PATH = (None, \"\", b\"\", [], ())\ndef _escape(value):\n    \"\"\"\n    Escape a single value of a URL string or a query parameter. If it is a list\n    or tuple, turn it into a comma-separated string first.\n    \"\"\"\n    # make sequences into comma-separated stings\n    if isinstance(value, (list, tuple)):\n        value = \",\".join(value)\n    # dates and datetimes into isoformat",
    "detail": "by-extension.python.utils",
    "documentation": {}
  },
  {
    "label": "GLOBAL_PARAMS",
    "kind": 5,
    "importPath": "by-extension.python.utils",
    "description": "by-extension.python.utils",
    "peekOfCode": "GLOBAL_PARAMS = (\"pretty\", \"human\", \"error_trace\", \"format\", \"filter_path\")\ndef query_params(*es_query_params):\n    \"\"\"\n    Decorator that pops all accepted parameters from method's kwargs and puts\n    them in the params argument.\n    \"\"\"\n    def _wrapper(func):\n        @wraps(func)\n        def _wrapped(*args, **kwargs):\n            params = {}",
    "detail": "by-extension.python.utils",
    "documentation": {}
  },
  {
    "label": "PagesDataStore",
    "kind": 6,
    "importPath": "by-extension.python.web-craw",
    "description": "by-extension.python.web-craw",
    "peekOfCode": "class PagesDataStore(object):\n    def __init__(self, db):\n        self.db = db\n        pass\n    def add_link_to_crawl(self, url):\n        \"\"\"Add the given link to `links_to_crawl`.\"\"\"\n        pass\n    def remove_link_to_crawl(self, url):\n        \"\"\"Remove the given link from `links_to_crawl`.\"\"\"\n        pass",
    "detail": "by-extension.python.web-craw",
    "documentation": {}
  },
  {
    "label": "Page",
    "kind": 6,
    "importPath": "by-extension.python.web-craw",
    "description": "by-extension.python.web-craw",
    "peekOfCode": "class Page(object):\n    def __init__(self, url, contents, child_urls):\n        self.url = url\n        self.contents = contents\n        self.child_urls = child_urls\n        self.signature = self.create_signature()\n    def create_signature(self):\n        # Create signature based on url and contents\n        pass\nclass Crawler(object):",
    "detail": "by-extension.python.web-craw",
    "documentation": {}
  },
  {
    "label": "Crawler",
    "kind": 6,
    "importPath": "by-extension.python.web-craw",
    "description": "by-extension.python.web-craw",
    "peekOfCode": "class Crawler(object):\n    def __init__(self, pages, data_store, reverse_index_queue, doc_index_queue):\n        self.pages = pages\n        self.data_store = data_store\n        self.reverse_index_queue = reverse_index_queue\n        self.doc_index_queue = doc_index_queue\n    def crawl_page(self, page):\n        for url in page.child_urls:\n            self.data_store.add_link_to_crawl(url)\n        self.reverse_index_queue.generate(page)",
    "detail": "by-extension.python.web-craw",
    "documentation": {}
  },
  {
    "label": "lang_to_text",
    "kind": 2,
    "importPath": "by-extension.python.wikistats",
    "description": "by-extension.python.wikistats",
    "peekOfCode": "def lang_to_text(lang, exception=False):\n    \"\"\" lang_to_text(lang, exception=False) -> str\nConvert a Wikipédia language code (two letters) to a English version of the language.\nExample:\n>>> lang_to_text(\"en\")\n'english'\n>>> lang_to_text(\"fr\")\n'french'\n    \"\"\"\n    if exception:",
    "detail": "by-extension.python.wikistats",
    "documentation": {}
  },
  {
    "label": "download_json",
    "kind": 2,
    "importPath": "by-extension.python.wikistats",
    "description": "by-extension.python.wikistats",
    "peekOfCode": "def download_json(page=\"JSON\", language=language_default,\n                  template_output=template_output_default,\n                  template_url=template_url_default):\n    \"\"\" download_json(page=\"JSON\", template_output=template_output_default,                  language=language_default, template_url=templateurl_default) -> str\nDownload a JSON file.\n@page: tell which Wikipédia page to lookup to.\n@template_output: template string for the output JSON (.json) file.\n@language: language to use for downloading the JSON.\n@template_url: online page to use a format to download the JSON.\nExample:",
    "detail": "by-extension.python.wikistats",
    "documentation": {}
  },
  {
    "label": "outfile_to_json",
    "kind": 2,
    "importPath": "by-extension.python.wikistats",
    "description": "by-extension.python.wikistats",
    "peekOfCode": "def outfile_to_json(outfile_name):\n    \"\"\" outfile_to_json(outfile_name) -> dir\n    Try to dump and return the content of the file @outfile.\n    \"\"\"\n    outfile = open(outfile_name)\n    # To convert the content of this file in a Python dictionnary.\n    import json\n    try:\n        json_obj = json.loads(outfile.readline())\n    except ValueError:",
    "detail": "by-extension.python.wikistats",
    "documentation": {}
  },
  {
    "label": "plot_stats_from_json",
    "kind": 2,
    "importPath": "by-extension.python.wikistats",
    "description": "by-extension.python.wikistats",
    "peekOfCode": "def plot_stats_from_json(json_obj, graphic_name=None, graphic_name_template=\"{title}.{lang}.{ext}\", ext=\"all\", title=None):\n    \"\"\" plot_stats_from_json(json_obj, graphic_name=None, graphic_name_template=\"{title}.{lang}.{ext}\", ext=\"png\") -> None\n    Plot a couple of PNG/SVG/PDF statistics.\n    .. warning:: Beta !\n    \"\"\"\n    assert(ext in [\"png\", \"svg\", \"pdf\", \"all\"])\n    title = title if title else json_obj[\"title\"]\n    lang = json_obj[\"project\"]\n    rank = json_obj[\"rank\"]\n    if rank == \"-1\":",
    "detail": "by-extension.python.wikistats",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "by-extension.python.wikistats",
    "description": "by-extension.python.wikistats",
    "peekOfCode": "def main(argv):\n    \"\"\" main(argv) -> None\n    Main function. Use the arguments of the command line.\"\"\"\n    # print(\"argv: \", argv)\n    if \"-h\" in argv or \"--help\" in argv:\n        print(\"wikistats.py --help|-h | page [language_code]\")\n        return 1\n    language = argv[1] if len(argv) > 1 else language_default\n    page = argv[0] if len(argv) > 0 else \"Professeur Xavier\"\n    outfile = download_json(page=page, language=language)",
    "detail": "by-extension.python.wikistats",
    "documentation": {}
  },
  {
    "label": "language_default",
    "kind": 5,
    "importPath": "by-extension.python.wikistats",
    "description": "by-extension.python.wikistats",
    "peekOfCode": "language_default = os.getenv(\"LANG\")[0:2]\ndef lang_to_text(lang, exception=False):\n    \"\"\" lang_to_text(lang, exception=False) -> str\nConvert a Wikipédia language code (two letters) to a English version of the language.\nExample:\n>>> lang_to_text(\"en\")\n'english'\n>>> lang_to_text(\"fr\")\n'french'\n    \"\"\"",
    "detail": "by-extension.python.wikistats",
    "documentation": {}
  },
  {
    "label": "latest",
    "kind": 5,
    "importPath": "by-extension.python.wikistats",
    "description": "by-extension.python.wikistats",
    "peekOfCode": "latest = 30  # also 60 or 90 are available\ntemplate_url_default = \"http://stats.grok.se/json/{language}/latest{latest}/{page}\"\ntemplate_output_default = \"{page}.{language}.json\"\ndef download_json(page=\"JSON\", language=language_default,\n                  template_output=template_output_default,\n                  template_url=template_url_default):\n    \"\"\" download_json(page=\"JSON\", template_output=template_output_default,                  language=language_default, template_url=templateurl_default) -> str\nDownload a JSON file.\n@page: tell which Wikipédia page to lookup to.\n@template_output: template string for the output JSON (.json) file.",
    "detail": "by-extension.python.wikistats",
    "documentation": {}
  },
  {
    "label": "template_url_default",
    "kind": 5,
    "importPath": "by-extension.python.wikistats",
    "description": "by-extension.python.wikistats",
    "peekOfCode": "template_url_default = \"http://stats.grok.se/json/{language}/latest{latest}/{page}\"\ntemplate_output_default = \"{page}.{language}.json\"\ndef download_json(page=\"JSON\", language=language_default,\n                  template_output=template_output_default,\n                  template_url=template_url_default):\n    \"\"\" download_json(page=\"JSON\", template_output=template_output_default,                  language=language_default, template_url=templateurl_default) -> str\nDownload a JSON file.\n@page: tell which Wikipédia page to lookup to.\n@template_output: template string for the output JSON (.json) file.\n@language: language to use for downloading the JSON.",
    "detail": "by-extension.python.wikistats",
    "documentation": {}
  },
  {
    "label": "template_output_default",
    "kind": 5,
    "importPath": "by-extension.python.wikistats",
    "description": "by-extension.python.wikistats",
    "peekOfCode": "template_output_default = \"{page}.{language}.json\"\ndef download_json(page=\"JSON\", language=language_default,\n                  template_output=template_output_default,\n                  template_url=template_url_default):\n    \"\"\" download_json(page=\"JSON\", template_output=template_output_default,                  language=language_default, template_url=templateurl_default) -> str\nDownload a JSON file.\n@page: tell which Wikipédia page to lookup to.\n@template_output: template string for the output JSON (.json) file.\n@language: language to use for downloading the JSON.\n@template_url: online page to use a format to download the JSON.",
    "detail": "by-extension.python.wikistats",
    "documentation": {}
  },
  {
    "label": "word_break",
    "kind": 2,
    "importPath": "by-extension.python.word_break",
    "description": "by-extension.python.word_break",
    "peekOfCode": "def word_break(sentence, words):\n    n, w = len(sentence), len(words)\n    if (n == 0) or (w == 0):\n        return None\n    dw = [-1 for i in range(n + 1)]\n    dp = [math.inf for i in range(n + 1)]\n    dp[0] = 0\n    matched_indices = [0]\n    dic = {}        # save all words in dictionary for faster searching\n    max_word = 0    # length of the max word",
    "detail": "by-extension.python.word_break",
    "documentation": {}
  },
  {
    "label": "word_break_backtracking",
    "kind": 2,
    "importPath": "by-extension.python.word_break",
    "description": "by-extension.python.word_break",
    "peekOfCode": "def word_break_backtracking(sentence, words):\n    all_words = set()\n    # create a set from all words\n    for i in range(len(words)):\n        all_words.add(words[i])\n    n = len(sentence)\n    i = 0\n    subsentence = ''\n    result = deque()\n    # go letter by letter and save the new letter in subsentence",
    "detail": "by-extension.python.word_break",
    "documentation": {}
  },
  {
    "label": "QuotesSpider",
    "kind": 6,
    "importPath": "by-extension.python.youtube_playlist_spider_scrapy",
    "description": "by-extension.python.youtube_playlist_spider_scrapy",
    "peekOfCode": "class QuotesSpider(scrapy.Spider):\n    \"\"\"Small scrapy Spider.\"\"\"\n    name = \"Watch Later\"\n    start_urls = [\n        'file:///tmp/wl.html'\n    ]\n    custom_settings = {\n    \t\"LOG_ENABLED\": False,\n    \t\"LOG_LEVEL\": 'ERROR',\n    }",
    "detail": "by-extension.python.youtube_playlist_spider_scrapy",
    "documentation": {}
  },
  {
    "label": "logging.getLogger('scrapy').propagate",
    "kind": 5,
    "importPath": "by-extension.python.youtube_playlist_spider_scrapy",
    "description": "by-extension.python.youtube_playlist_spider_scrapy",
    "peekOfCode": "logging.getLogger('scrapy').propagate = False\nlogging.getLogger('scrapy.utils').propagate = False\nclass QuotesSpider(scrapy.Spider):\n    \"\"\"Small scrapy Spider.\"\"\"\n    name = \"Watch Later\"\n    start_urls = [\n        'file:///tmp/wl.html'\n    ]\n    custom_settings = {\n    \t\"LOG_ENABLED\": False,",
    "detail": "by-extension.python.youtube_playlist_spider_scrapy",
    "documentation": {}
  },
  {
    "label": "logging.getLogger('scrapy.utils').propagate",
    "kind": 5,
    "importPath": "by-extension.python.youtube_playlist_spider_scrapy",
    "description": "by-extension.python.youtube_playlist_spider_scrapy",
    "peekOfCode": "logging.getLogger('scrapy.utils').propagate = False\nclass QuotesSpider(scrapy.Spider):\n    \"\"\"Small scrapy Spider.\"\"\"\n    name = \"Watch Later\"\n    start_urls = [\n        'file:///tmp/wl.html'\n    ]\n    custom_settings = {\n    \t\"LOG_ENABLED\": False,\n    \t\"LOG_LEVEL\": 'ERROR',",
    "detail": "by-extension.python.youtube_playlist_spider_scrapy",
    "documentation": {}
  },
  {
    "label": "Node",
    "kind": 6,
    "importPath": "by-extension.python.~01-FindLengthLL",
    "description": "by-extension.python.~01-FindLengthLL",
    "peekOfCode": "class Node: \n    # Function to initialise the node object \n    def __init__(self, data): \n        self.data = data # Assign data \n        self.next = None # Initialize next as null \n# Linked List class contains a Node object \nclass LinkedList: \n    # Function to initialize head \n    def __init__(self): \n        self.head = None",
    "detail": "by-extension.python.~01-FindLengthLL",
    "documentation": {}
  },
  {
    "label": "LinkedList",
    "kind": 6,
    "importPath": "by-extension.python.~01-FindLengthLL",
    "description": "by-extension.python.~01-FindLengthLL",
    "peekOfCode": "class LinkedList: \n    # Function to initialize head \n    def __init__(self): \n        self.head = None\n    # This function is in LinkedList class. It inserts \n    # a new node at the beginning of Linked List. \n    def push(self, new_data): \n        # 1 & 2: Allocate the Node & \n        #     Put in the data \n        new_node = Node(new_data) ",
    "detail": "by-extension.python.~01-FindLengthLL",
    "documentation": {}
  },
  {
    "label": "Node",
    "kind": 6,
    "importPath": "by-extension.python.~01-FindLengthLL",
    "description": "by-extension.python.~01-FindLengthLL",
    "peekOfCode": "class Node: \n    # Function to initialise the node object \n    def __init__(self, data): \n        self.data = data  # Assign data \n        self.next = None  # Initialize next as null \n# Linked List class contains a Node object \nclass LinkedList: \n    # Function to initialize head \n    def __init__(self): \n        self.head = None",
    "detail": "by-extension.python.~01-FindLengthLL",
    "documentation": {}
  },
  {
    "label": "LinkedList",
    "kind": 6,
    "importPath": "by-extension.python.~01-FindLengthLL",
    "description": "by-extension.python.~01-FindLengthLL",
    "peekOfCode": "class LinkedList: \n    # Function to initialize head \n    def __init__(self): \n        self.head = None\n    # This function is in LinkedList class. It inserts \n    # a new node at the beginning of Linked List. \n    def push(self, new_data): \n        # 1 & 2: Allocate the Node & \n        #        Put in the data \n        new_node = Node(new_data) ",
    "detail": "by-extension.python.~01-FindLengthLL",
    "documentation": {}
  },
  {
    "label": "removeKdigits",
    "kind": 2,
    "importPath": "by-extension.python.~02-RemoveKDigits",
    "description": "by-extension.python.~02-RemoveKDigits",
    "peekOfCode": "def removeKdigits(num, k):\n    res = []\n    counter = 0\n    n = len(num)\n    if n == k: return \"0\"\n    for i in range(n):\n        while k and res and res[-1] > num[i]:\n            res.pop()\n            k -= 1\n        res.append(num[i])",
    "detail": "by-extension.python.~02-RemoveKDigits",
    "documentation": {}
  },
  {
    "label": "get_array_length",
    "kind": 2,
    "importPath": "by-extension.python.~03-FindArrayLengths",
    "description": "by-extension.python.~03-FindArrayLengths",
    "peekOfCode": "def get_array_length(array_to_convert):\n    # get length of linked-list array\n    length_array_to_convert = len(array_to_convert)\n    # get first item in linked-list array\n    first_item = array_to_convert[0]\n    # if linked-list array or first item is empty or if length is 0, return 0\n    if array_to_convert == None or length_array_to_convert == 0 or first_item == -1:\n        return 0\n    # else, initialize final length to return and index\n        # current index is head of linked list",
    "detail": "by-extension.python.~03-FindArrayLengths",
    "documentation": {}
  },
  {
    "label": "count_visible_nodes",
    "kind": 2,
    "importPath": "by-extension.python.~04-CountVisibleNodes",
    "description": "by-extension.python.~04-CountVisibleNodes",
    "peekOfCode": "def count_visible_nodes(root):\n    # if no root, return 0\n    if not root: \n        return 0\n    # return value of traverse(root, negative infinity)\n    return traverse(root, float('-inf'))\ndef traverse(node, max_value):\n    # if no node, return 0\n    if not node:\n        return 0",
    "detail": "by-extension.python.~04-CountVisibleNodes",
    "documentation": {}
  },
  {
    "label": "traverse",
    "kind": 2,
    "importPath": "by-extension.python.~04-CountVisibleNodes",
    "description": "by-extension.python.~04-CountVisibleNodes",
    "peekOfCode": "def traverse(node, max_value):\n    # if no node, return 0\n    if not node:\n        return 0\n    # get current node value\n    current_node_value = node.val\n    # if current node value >= max value, visible = 1\n    if current_node_value >= max_value:\n\t    visible = 1 \n    # else visible = 0",
    "detail": "by-extension.python.~04-CountVisibleNodes",
    "documentation": {}
  },
  {
    "label": "\tmax_value",
    "kind": 5,
    "importPath": "by-extension.python.~04-CountVisibleNodes",
    "description": "by-extension.python.~04-CountVisibleNodes",
    "peekOfCode": "\tmax_value = max(max_value, current_node_value)\n    # traverse left node, add visible, traverse right node, add them all together\n    # set total visible nodes as the sum of:\n        # traverse function with left node as node and new max value as max value\n        # visible\n        # traverse function with right node as node and new max value as max value\n    total_visible_nodes = traverse(node.left, max_value) + visible + traverse(node.right, max_value)\n    # return total visible nodes\n    return total_visible_nodes",
    "detail": "by-extension.python.~04-CountVisibleNodes",
    "documentation": {}
  },
  {
    "label": "menu",
    "kind": 2,
    "importPath": "MY_GISTS.0221d724aa.pdf2png-2",
    "description": "MY_GISTS.0221d724aa.pdf2png-2",
    "peekOfCode": "def menu():\n    global quality\n    print(\"\"\"\n        Image format: \n        1. Very High Resolution - 700 dpi\n        2. High Resolution - 500 dpi\n        3. Medium Resolution - 300 dpi\n        4. Low Resolution - 100 dpi\n        5. Very Low Resolution - 50 dpi\n        \"\"\")",
    "detail": "MY_GISTS.0221d724aa.pdf2png-2",
    "documentation": {}
  },
  {
    "label": "program",
    "kind": 2,
    "importPath": "MY_GISTS.0221d724aa.pdf2png-2",
    "description": "MY_GISTS.0221d724aa.pdf2png-2",
    "peekOfCode": "def program():\n    images = convert_from_path(f'{title}.pdf', quality)\n    for i, image in enumerate(images):\n        image.save(f'save_{i}.png')\nif __name__ == '__main__':\n    menu()",
    "detail": "MY_GISTS.0221d724aa.pdf2png-2",
    "documentation": {}
  },
  {
    "label": "title",
    "kind": 5,
    "importPath": "MY_GISTS.0221d724aa.pdf2png-2",
    "description": "MY_GISTS.0221d724aa.pdf2png-2",
    "peekOfCode": "title = input(\"Pdf files name: \")\ndef menu():\n    global quality\n    print(\"\"\"\n        Image format: \n        1. Very High Resolution - 700 dpi\n        2. High Resolution - 500 dpi\n        3. Medium Resolution - 300 dpi\n        4. Low Resolution - 100 dpi\n        5. Very Low Resolution - 50 dpi",
    "detail": "MY_GISTS.0221d724aa.pdf2png-2",
    "documentation": {}
  },
  {
    "label": "fib_iter",
    "kind": 2,
    "importPath": "MY_GISTS.028b231767.fib",
    "description": "MY_GISTS.028b231767.fib",
    "peekOfCode": "def fib_iter(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    p0 = 0\n    p1 = 1\n    for i in range(n-1):\n        next_val = p0 + p1\n        p0 = p1",
    "detail": "MY_GISTS.028b231767.fib",
    "documentation": {}
  },
  {
    "label": "Node",
    "kind": 6,
    "importPath": "MY_GISTS.028b231767.linked-list",
    "description": "MY_GISTS.028b231767.linked-list",
    "peekOfCode": "class Node:\n    def __init__(self, value=None, next_node=None):\n        self.value = value\n        self.next_node = next_node\n    def get_value(self):\n        return self.value\n    def get_next(self):\n        return self.next_node\n    def set_next(self, new_next):\n        self.next_node = new_next",
    "detail": "MY_GISTS.028b231767.linked-list",
    "documentation": {}
  },
  {
    "label": "LinkedList",
    "kind": 6,
    "importPath": "MY_GISTS.028b231767.linked-list",
    "description": "MY_GISTS.028b231767.linked-list",
    "peekOfCode": "class LinkedList:\n    def __init__(self):\n        self.head = None\n        self.tail = None\n    def add_to_tail(self, value):\n        # wrap the value in a node\n        new_node = Node(value)\n        # check if we're in an empty list state\n        # can also write: if not self.head and not self.tail\n        if self.head == None and self.tail == None:",
    "detail": "MY_GISTS.028b231767.linked-list",
    "documentation": {}
  },
  {
    "label": "NamespacedClient",
    "kind": 6,
    "importPath": "MY_GISTS.0514ba5df9.utils",
    "description": "MY_GISTS.0514ba5df9.utils",
    "peekOfCode": "class NamespacedClient(object):\n    def __init__(self, client):\n        self.client = client\n    @property\n    def transport(self):\n        return self.client.transport\nclass AddonClient(NamespacedClient):\n    @classmethod\n    def infect_client(cls, client):\n        addon = cls(weakref.proxy(client))",
    "detail": "MY_GISTS.0514ba5df9.utils",
    "documentation": {}
  },
  {
    "label": "AddonClient",
    "kind": 6,
    "importPath": "MY_GISTS.0514ba5df9.utils",
    "description": "MY_GISTS.0514ba5df9.utils",
    "peekOfCode": "class AddonClient(NamespacedClient):\n    @classmethod\n    def infect_client(cls, client):\n        addon = cls(weakref.proxy(client))\n        setattr(client, cls.namespace, addon)\n        return client",
    "detail": "MY_GISTS.0514ba5df9.utils",
    "documentation": {}
  },
  {
    "label": "query_params",
    "kind": 2,
    "importPath": "MY_GISTS.0514ba5df9.utils",
    "description": "MY_GISTS.0514ba5df9.utils",
    "peekOfCode": "def query_params(*es_query_params):\n    \"\"\"\n    Decorator that pops all accepted parameters from method's kwargs and puts\n    them in the params argument.\n    \"\"\"\n    def _wrapper(func):\n        @wraps(func)\n        def _wrapped(*args, **kwargs):\n            params = {}\n            headers = {}",
    "detail": "MY_GISTS.0514ba5df9.utils",
    "documentation": {}
  },
  {
    "label": "SKIP_IN_PATH",
    "kind": 5,
    "importPath": "MY_GISTS.0514ba5df9.utils",
    "description": "MY_GISTS.0514ba5df9.utils",
    "peekOfCode": "SKIP_IN_PATH = (None, \"\", b\"\", [], ())\ndef _escape(value):\n    \"\"\"\n    Escape a single value of a URL string or a query parameter. If it is a list\n    or tuple, turn it into a comma-separated string first.\n    \"\"\"\n    # make sequences into comma-separated stings\n    if isinstance(value, (list, tuple)):\n        value = \",\".join(value)\n    # dates and datetimes into isoformat",
    "detail": "MY_GISTS.0514ba5df9.utils",
    "documentation": {}
  },
  {
    "label": "GLOBAL_PARAMS",
    "kind": 5,
    "importPath": "MY_GISTS.0514ba5df9.utils",
    "description": "MY_GISTS.0514ba5df9.utils",
    "peekOfCode": "GLOBAL_PARAMS = (\"pretty\", \"human\", \"error_trace\", \"format\", \"filter_path\")\ndef query_params(*es_query_params):\n    \"\"\"\n    Decorator that pops all accepted parameters from method's kwargs and puts\n    them in the params argument.\n    \"\"\"\n    def _wrapper(func):\n        @wraps(func)\n        def _wrapped(*args, **kwargs):\n            params = {}",
    "detail": "MY_GISTS.0514ba5df9.utils",
    "documentation": {}
  },
  {
    "label": "Key",
    "kind": 6,
    "importPath": "MY_GISTS.0591cee2ea.key-gen",
    "description": "MY_GISTS.0591cee2ea.key-gen",
    "peekOfCode": "class Key:\n    def __init__(self, key=''):\n        if key == '':\n            self.key = self.generate()\n        else:\n            self.key = key.lower()\n    def verify(self):\n        score = 0\n        check_digit = self.key[0]\n        check_digit_count = 0",
    "detail": "MY_GISTS.0591cee2ea.key-gen",
    "documentation": {}
  },
  {
    "label": "getClosestFactors",
    "kind": 2,
    "importPath": "MY_GISTS.05bded2572.prac12",
    "description": "MY_GISTS.05bded2572.prac12",
    "peekOfCode": "def getClosestFactors(n):\n    res = 0\n    if n == 1:\n        return 1\n    else:\n        for a in range(2, n - 1):\n            b = n / a\n            if n % a == 0 and b >= a:\n                res = int(b)\n    return res",
    "detail": "MY_GISTS.05bded2572.prac12",
    "documentation": {}
  },
  {
    "label": "isPrime",
    "kind": 2,
    "importPath": "MY_GISTS.05bded2572.prac12",
    "description": "MY_GISTS.05bded2572.prac12",
    "peekOfCode": "def isPrime(n):\n    for i in range(2, n - 1):\n        if n % i == 0:\n            return False\n    return True\n# function to check a number is perfect square or not\ndef isPerfectSquare(n):\n    return n > -1 and sqrt(n) % 1 == 0\n# driver code\nn = int(input(\"Enter the number: \"))",
    "detail": "MY_GISTS.05bded2572.prac12",
    "documentation": {}
  },
  {
    "label": "isPerfectSquare",
    "kind": 2,
    "importPath": "MY_GISTS.05bded2572.prac12",
    "description": "MY_GISTS.05bded2572.prac12",
    "peekOfCode": "def isPerfectSquare(n):\n    return n > -1 and sqrt(n) % 1 == 0\n# driver code\nn = int(input(\"Enter the number: \"))\ncount = 0\nprint(\"\\nThe steps to reach 1:\")\nwhile n != 1:\n    print(n, end=\" --> \")\n    count += 1\n    if isPerfectSquare(n):",
    "detail": "MY_GISTS.05bded2572.prac12",
    "documentation": {}
  },
  {
    "label": "n",
    "kind": 5,
    "importPath": "MY_GISTS.05bded2572.prac12",
    "description": "MY_GISTS.05bded2572.prac12",
    "peekOfCode": "n = int(input(\"Enter the number: \"))\ncount = 0\nprint(\"\\nThe steps to reach 1:\")\nwhile n != 1:\n    print(n, end=\" --> \")\n    count += 1\n    if isPerfectSquare(n):\n        n = int(sqrt(n))\n    elif isPrime(n) or isPerfectSquare(n - 1):\n        n -= 1",
    "detail": "MY_GISTS.05bded2572.prac12",
    "documentation": {}
  },
  {
    "label": "count",
    "kind": 5,
    "importPath": "MY_GISTS.05bded2572.prac12",
    "description": "MY_GISTS.05bded2572.prac12",
    "peekOfCode": "count = 0\nprint(\"\\nThe steps to reach 1:\")\nwhile n != 1:\n    print(n, end=\" --> \")\n    count += 1\n    if isPerfectSquare(n):\n        n = int(sqrt(n))\n    elif isPrime(n) or isPerfectSquare(n - 1):\n        n -= 1\n    else:",
    "detail": "MY_GISTS.05bded2572.prac12",
    "documentation": {}
  },
  {
    "label": "index",
    "kind": 2,
    "importPath": "MY_GISTS.065145115c.app",
    "description": "MY_GISTS.065145115c.app",
    "peekOfCode": "def index():\n    complete = get_complete_tasks()\n    incomplete = get_incomplete_tasks()\n    return render_template('index.html', complete=complete, incomplete=incomplete)\n@app.route('/add', methods=[\"POST\"])\ndef add():\n    task = request.form[\"todoitem\"]\n    add_new_task(task)\n    return redirect(url_for('index'))\n@app.route('/complete/<task>')",
    "detail": "MY_GISTS.065145115c.app",
    "documentation": {}
  },
  {
    "label": "add",
    "kind": 2,
    "importPath": "MY_GISTS.065145115c.app",
    "description": "MY_GISTS.065145115c.app",
    "peekOfCode": "def add():\n    task = request.form[\"todoitem\"]\n    add_new_task(task)\n    return redirect(url_for('index'))\n@app.route('/complete/<task>')\ndef complete(task):\n    mark_task_complete(task)\n    return redirect(url_for('index'))\nif __name__ == '__main__':\n    app.run(debug=True)",
    "detail": "MY_GISTS.065145115c.app",
    "documentation": {}
  },
  {
    "label": "complete",
    "kind": 2,
    "importPath": "MY_GISTS.065145115c.app",
    "description": "MY_GISTS.065145115c.app",
    "peekOfCode": "def complete(task):\n    mark_task_complete(task)\n    return redirect(url_for('index'))\nif __name__ == '__main__':\n    app.run(debug=True)",
    "detail": "MY_GISTS.065145115c.app",
    "documentation": {}
  },
  {
    "label": "app",
    "kind": 5,
    "importPath": "MY_GISTS.065145115c.app",
    "description": "MY_GISTS.065145115c.app",
    "peekOfCode": "app = Flask(\n        __name__,\n        template_folder = 'client/templates'\n    )\n@app.route('/')\ndef index():\n    complete = get_complete_tasks()\n    incomplete = get_incomplete_tasks()\n    return render_template('index.html', complete=complete, incomplete=incomplete)\n@app.route('/add', methods=[\"POST\"])",
    "detail": "MY_GISTS.065145115c.app",
    "documentation": {}
  },
  {
    "label": "execute_query",
    "kind": 2,
    "importPath": "MY_GISTS.065145115c.create_db",
    "description": "MY_GISTS.065145115c.create_db",
    "peekOfCode": "def execute_query(sql_query):\n    with sqlite3.connect(\"todo.db\") as conn:\n        cur = conn.cursor()\n        result = cur.execute(sql_query)\n        conn.commit()\n    return result\nif __name__ == '__main__':\n    execute_query(sql_query)",
    "detail": "MY_GISTS.065145115c.create_db",
    "documentation": {}
  },
  {
    "label": "sql_query",
    "kind": 5,
    "importPath": "MY_GISTS.065145115c.create_db",
    "description": "MY_GISTS.065145115c.create_db",
    "peekOfCode": "sql_query = \"\"\"\n    CREATE TABLE IF NOT EXISTS Todo(\n        id INTEGER PRIMARY KEY,\n        task TEXT,\n        complete boolean\n    );\n\"\"\"\ndef execute_query(sql_query):\n    with sqlite3.connect(\"todo.db\") as conn:\n        cur = conn.cursor()",
    "detail": "MY_GISTS.065145115c.create_db",
    "documentation": {}
  },
  {
    "label": "execute_query",
    "kind": 2,
    "importPath": "MY_GISTS.065145115c.dbfunctions",
    "description": "MY_GISTS.065145115c.dbfunctions",
    "peekOfCode": "def execute_query(sql_query):\n    with sqlite3.connect(\"todo.db\") as conn:\n        cur = conn.cursor()\n        result = cur.execute(sql_query)\n        conn.commit()\n    return result\ndef add_new_task(task):\n    sql_query = \"INSERT INTO Todo(task, complete) VALUES('%s', %s) \" %(task, 0)\n    execute_query(sql_query)\ndef get_complete_tasks():",
    "detail": "MY_GISTS.065145115c.dbfunctions",
    "documentation": {}
  },
  {
    "label": "add_new_task",
    "kind": 2,
    "importPath": "MY_GISTS.065145115c.dbfunctions",
    "description": "MY_GISTS.065145115c.dbfunctions",
    "peekOfCode": "def add_new_task(task):\n    sql_query = \"INSERT INTO Todo(task, complete) VALUES('%s', %s) \" %(task, 0)\n    execute_query(sql_query)\ndef get_complete_tasks():\n    sql_query = \"SELECT task FROM Todo WHERE complete=%s \" %(1)\n    complete = execute_query(sql_query)\n    return [task[0] for task in complete.fetchall()]\ndef get_incomplete_tasks():\n    sql_query = \"SELECT task FROM Todo WHERE complete=%s \" %(0)\n    incomplete = execute_query(sql_query)",
    "detail": "MY_GISTS.065145115c.dbfunctions",
    "documentation": {}
  },
  {
    "label": "get_complete_tasks",
    "kind": 2,
    "importPath": "MY_GISTS.065145115c.dbfunctions",
    "description": "MY_GISTS.065145115c.dbfunctions",
    "peekOfCode": "def get_complete_tasks():\n    sql_query = \"SELECT task FROM Todo WHERE complete=%s \" %(1)\n    complete = execute_query(sql_query)\n    return [task[0] for task in complete.fetchall()]\ndef get_incomplete_tasks():\n    sql_query = \"SELECT task FROM Todo WHERE complete=%s \" %(0)\n    incomplete = execute_query(sql_query)\n    return [task[0] for task in incomplete.fetchall()]\ndef mark_task_complete(task):\n    sql_query = \"UPDATE Todo SET complete=%s WHERE task='%s' and complete=%s\" %(1, task, 0)",
    "detail": "MY_GISTS.065145115c.dbfunctions",
    "documentation": {}
  },
  {
    "label": "get_incomplete_tasks",
    "kind": 2,
    "importPath": "MY_GISTS.065145115c.dbfunctions",
    "description": "MY_GISTS.065145115c.dbfunctions",
    "peekOfCode": "def get_incomplete_tasks():\n    sql_query = \"SELECT task FROM Todo WHERE complete=%s \" %(0)\n    incomplete = execute_query(sql_query)\n    return [task[0] for task in incomplete.fetchall()]\ndef mark_task_complete(task):\n    sql_query = \"UPDATE Todo SET complete=%s WHERE task='%s' and complete=%s\" %(1, task, 0)\n    execute_query(sql_query)",
    "detail": "MY_GISTS.065145115c.dbfunctions",
    "documentation": {}
  },
  {
    "label": "mark_task_complete",
    "kind": 2,
    "importPath": "MY_GISTS.065145115c.dbfunctions",
    "description": "MY_GISTS.065145115c.dbfunctions",
    "peekOfCode": "def mark_task_complete(task):\n    sql_query = \"UPDATE Todo SET complete=%s WHERE task='%s' and complete=%s\" %(1, task, 0)\n    execute_query(sql_query)",
    "detail": "MY_GISTS.065145115c.dbfunctions",
    "documentation": {}
  },
  {
    "label": "ListNode",
    "kind": 6,
    "importPath": "MY_GISTS.10811c10bd.basic-linked-list",
    "description": "MY_GISTS.10811c10bd.basic-linked-list",
    "peekOfCode": "class ListNode:\n  def _init_(self,val):\n    self.val = val\n    self.next = None\n# initiation of linked list\nheadNode = ListNode(1)\nsecondNode = ListNode(2)\nthirdNode = ListNode(3)\nheadNode.next = secondNode\nsecondNode.next = thirdNode",
    "detail": "MY_GISTS.10811c10bd.basic-linked-list",
    "documentation": {}
  },
  {
    "label": "headNode",
    "kind": 5,
    "importPath": "MY_GISTS.10811c10bd.basic-linked-list",
    "description": "MY_GISTS.10811c10bd.basic-linked-list",
    "peekOfCode": "headNode = ListNode(1)\nsecondNode = ListNode(2)\nthirdNode = ListNode(3)\nheadNode.next = secondNode\nsecondNode.next = thirdNode\n# iterate through the linked list\ncurNode = headNode\nwhile curNode:\n  print(curNode.val)\n  curNode = curNode.next",
    "detail": "MY_GISTS.10811c10bd.basic-linked-list",
    "documentation": {}
  },
  {
    "label": "secondNode",
    "kind": 5,
    "importPath": "MY_GISTS.10811c10bd.basic-linked-list",
    "description": "MY_GISTS.10811c10bd.basic-linked-list",
    "peekOfCode": "secondNode = ListNode(2)\nthirdNode = ListNode(3)\nheadNode.next = secondNode\nsecondNode.next = thirdNode\n# iterate through the linked list\ncurNode = headNode\nwhile curNode:\n  print(curNode.val)\n  curNode = curNode.next\n# insert new listnode with value of 5 in between the secondNode and thirdNode",
    "detail": "MY_GISTS.10811c10bd.basic-linked-list",
    "documentation": {}
  },
  {
    "label": "thirdNode",
    "kind": 5,
    "importPath": "MY_GISTS.10811c10bd.basic-linked-list",
    "description": "MY_GISTS.10811c10bd.basic-linked-list",
    "peekOfCode": "thirdNode = ListNode(3)\nheadNode.next = secondNode\nsecondNode.next = thirdNode\n# iterate through the linked list\ncurNode = headNode\nwhile curNode:\n  print(curNode.val)\n  curNode = curNode.next\n# insert new listnode with value of 5 in between the secondNode and thirdNode\ncurNode = headNode",
    "detail": "MY_GISTS.10811c10bd.basic-linked-list",
    "documentation": {}
  },
  {
    "label": "headNode.next",
    "kind": 5,
    "importPath": "MY_GISTS.10811c10bd.basic-linked-list",
    "description": "MY_GISTS.10811c10bd.basic-linked-list",
    "peekOfCode": "headNode.next = secondNode\nsecondNode.next = thirdNode\n# iterate through the linked list\ncurNode = headNode\nwhile curNode:\n  print(curNode.val)\n  curNode = curNode.next\n# insert new listnode with value of 5 in between the secondNode and thirdNode\ncurNode = headNode\nwhile curNode.val != 2:",
    "detail": "MY_GISTS.10811c10bd.basic-linked-list",
    "documentation": {}
  },
  {
    "label": "secondNode.next",
    "kind": 5,
    "importPath": "MY_GISTS.10811c10bd.basic-linked-list",
    "description": "MY_GISTS.10811c10bd.basic-linked-list",
    "peekOfCode": "secondNode.next = thirdNode\n# iterate through the linked list\ncurNode = headNode\nwhile curNode:\n  print(curNode.val)\n  curNode = curNode.next\n# insert new listnode with value of 5 in between the secondNode and thirdNode\ncurNode = headNode\nwhile curNode.val != 2:\n  curNode = curNode.next",
    "detail": "MY_GISTS.10811c10bd.basic-linked-list",
    "documentation": {}
  },
  {
    "label": "curNode",
    "kind": 5,
    "importPath": "MY_GISTS.10811c10bd.basic-linked-list",
    "description": "MY_GISTS.10811c10bd.basic-linked-list",
    "peekOfCode": "curNode = headNode\nwhile curNode:\n  print(curNode.val)\n  curNode = curNode.next\n# insert new listnode with value of 5 in between the secondNode and thirdNode\ncurNode = headNode\nwhile curNode.val != 2:\n  curNode = curNode.next\nnewNode = ListNode(5)\nnewNode.next = curNode.next",
    "detail": "MY_GISTS.10811c10bd.basic-linked-list",
    "documentation": {}
  },
  {
    "label": "curNode",
    "kind": 5,
    "importPath": "MY_GISTS.10811c10bd.basic-linked-list",
    "description": "MY_GISTS.10811c10bd.basic-linked-list",
    "peekOfCode": "curNode = headNode\nwhile curNode.val != 2:\n  curNode = curNode.next\nnewNode = ListNode(5)\nnewNode.next = curNode.next\ncurNode.next = newNode\n# remove the listnode with value of 5\ncurNode = headNode\nwhile curNode.next.val != 5:\n  curNode = curNode.next",
    "detail": "MY_GISTS.10811c10bd.basic-linked-list",
    "documentation": {}
  },
  {
    "label": "newNode",
    "kind": 5,
    "importPath": "MY_GISTS.10811c10bd.basic-linked-list",
    "description": "MY_GISTS.10811c10bd.basic-linked-list",
    "peekOfCode": "newNode = ListNode(5)\nnewNode.next = curNode.next\ncurNode.next = newNode\n# remove the listnode with value of 5\ncurNode = headNode\nwhile curNode.next.val != 5:\n  curNode = curNode.next\n  curNode.next = curNode.next.next",
    "detail": "MY_GISTS.10811c10bd.basic-linked-list",
    "documentation": {}
  },
  {
    "label": "newNode.next",
    "kind": 5,
    "importPath": "MY_GISTS.10811c10bd.basic-linked-list",
    "description": "MY_GISTS.10811c10bd.basic-linked-list",
    "peekOfCode": "newNode.next = curNode.next\ncurNode.next = newNode\n# remove the listnode with value of 5\ncurNode = headNode\nwhile curNode.next.val != 5:\n  curNode = curNode.next\n  curNode.next = curNode.next.next",
    "detail": "MY_GISTS.10811c10bd.basic-linked-list",
    "documentation": {}
  },
  {
    "label": "curNode.next",
    "kind": 5,
    "importPath": "MY_GISTS.10811c10bd.basic-linked-list",
    "description": "MY_GISTS.10811c10bd.basic-linked-list",
    "peekOfCode": "curNode.next = newNode\n# remove the listnode with value of 5\ncurNode = headNode\nwhile curNode.next.val != 5:\n  curNode = curNode.next\n  curNode.next = curNode.next.next",
    "detail": "MY_GISTS.10811c10bd.basic-linked-list",
    "documentation": {}
  },
  {
    "label": "curNode",
    "kind": 5,
    "importPath": "MY_GISTS.10811c10bd.basic-linked-list",
    "description": "MY_GISTS.10811c10bd.basic-linked-list",
    "peekOfCode": "curNode = headNode\nwhile curNode.next.val != 5:\n  curNode = curNode.next\n  curNode.next = curNode.next.next",
    "detail": "MY_GISTS.10811c10bd.basic-linked-list",
    "documentation": {}
  },
  {
    "label": "process_dir",
    "kind": 2,
    "importPath": "MY_GISTS.170f24b84b.dirhtml",
    "description": "MY_GISTS.170f24b84b.dirhtml",
    "peekOfCode": "def process_dir(top_dir, opts):\n    glob_patt = opts.filter or '*'\n    path_top_dir: Path\n    path_top_dir = Path(top_dir)\n    index_file = None\n    index_path = Path(path_top_dir, opts.output_file)\n    if opts.verbose:\n        print(f'Traversing dir {path_top_dir.absolute()}')\n    try:\n        index_file = open(index_path, 'w')",
    "detail": "MY_GISTS.170f24b84b.dirhtml",
    "documentation": {}
  },
  {
    "label": "pretty_size",
    "kind": 2,
    "importPath": "MY_GISTS.170f24b84b.dirhtml",
    "description": "MY_GISTS.170f24b84b.dirhtml",
    "peekOfCode": "def pretty_size(bytes, units=UNITS_MAPPING):\n    \"\"\"Human-readable file sizes.\n    ripped from https://pypi.python.org/pypi/hurry.filesize/\n    \"\"\"\n    for factor, suffix in units:\n        if bytes >= factor:\n            break\n    amount = int(bytes / factor)\n    if isinstance(suffix, tuple):\n        singular, multiple = suffix",
    "detail": "MY_GISTS.170f24b84b.dirhtml",
    "documentation": {}
  },
  {
    "label": "DEFAULT_OUTPUT_FILE",
    "kind": 5,
    "importPath": "MY_GISTS.170f24b84b.dirhtml",
    "description": "MY_GISTS.170f24b84b.dirhtml",
    "peekOfCode": "DEFAULT_OUTPUT_FILE = 'index.html'\ndef process_dir(top_dir, opts):\n    glob_patt = opts.filter or '*'\n    path_top_dir: Path\n    path_top_dir = Path(top_dir)\n    index_file = None\n    index_path = Path(path_top_dir, opts.output_file)\n    if opts.verbose:\n        print(f'Traversing dir {path_top_dir.absolute()}')\n    try:",
    "detail": "MY_GISTS.170f24b84b.dirhtml",
    "documentation": {}
  },
  {
    "label": "UNITS_MAPPING",
    "kind": 5,
    "importPath": "MY_GISTS.170f24b84b.dirhtml",
    "description": "MY_GISTS.170f24b84b.dirhtml",
    "peekOfCode": "UNITS_MAPPING = [\n    (1024 ** 5, ' PB'),\n    (1024 ** 4, ' TB'),\n    (1024 ** 3, ' GB'),\n    (1024 ** 2, ' MB'),\n    (1024 ** 1, ' KB'),\n    (1024 ** 0, (' byte', ' bytes')),\n]\ndef pretty_size(bytes, units=UNITS_MAPPING):\n    \"\"\"Human-readable file sizes.",
    "detail": "MY_GISTS.170f24b84b.dirhtml",
    "documentation": {}
  },
  {
    "label": "BaseJobResource",
    "kind": 6,
    "importPath": "MY_GISTS.190d9df311.base_job",
    "description": "MY_GISTS.190d9df311.base_job",
    "peekOfCode": "class BaseJobResource(Resource):\n    def dispatch_request(\n        self, provider: str, owner_name: str, repo_name: str, build_number: int, job_number: int, *args, **kwargs\n    ) -> Response:\n        queryset = Job.query.join(Build, Build.id == Job.build_id).join(\n            Repository, Repository.id == Build.repository_id\n        ).filter(\n            Repository.provider == RepositoryProvider(provider),\n            Repository.owner_name == owner_name,\n            Repository.name == repo_name,",
    "detail": "MY_GISTS.190d9df311.base_job",
    "documentation": {}
  },
  {
    "label": "response",
    "kind": 5,
    "importPath": "MY_GISTS.190d9df311.blogscraping",
    "description": "MY_GISTS.190d9df311.blogscraping",
    "peekOfCode": "response = requests.get('http://codedemos.com/sampleblog/')\nsoup = BeautifulSoup(response.text, 'html.parser')\nposts = soup.find_all(class_='post-preview')\nwith open('posts.csv', 'w') as csv_file:\n    csv_writer = writer(csv_file)\n    headers = ['Title', 'Link', 'Date']\n    csv_writer.writerow(headers)\n    for post in posts:\n        title = post.find(class_='post-title').get_text().replace('\\n', '')\n        link = post.find('a')['href']",
    "detail": "MY_GISTS.190d9df311.blogscraping",
    "documentation": {}
  },
  {
    "label": "soup",
    "kind": 5,
    "importPath": "MY_GISTS.190d9df311.blogscraping",
    "description": "MY_GISTS.190d9df311.blogscraping",
    "peekOfCode": "soup = BeautifulSoup(response.text, 'html.parser')\nposts = soup.find_all(class_='post-preview')\nwith open('posts.csv', 'w') as csv_file:\n    csv_writer = writer(csv_file)\n    headers = ['Title', 'Link', 'Date']\n    csv_writer.writerow(headers)\n    for post in posts:\n        title = post.find(class_='post-title').get_text().replace('\\n', '')\n        link = post.find('a')['href']\n        date = post.select('.post-date')[0].get_text()",
    "detail": "MY_GISTS.190d9df311.blogscraping",
    "documentation": {}
  },
  {
    "label": "posts",
    "kind": 5,
    "importPath": "MY_GISTS.190d9df311.blogscraping",
    "description": "MY_GISTS.190d9df311.blogscraping",
    "peekOfCode": "posts = soup.find_all(class_='post-preview')\nwith open('posts.csv', 'w') as csv_file:\n    csv_writer = writer(csv_file)\n    headers = ['Title', 'Link', 'Date']\n    csv_writer.writerow(headers)\n    for post in posts:\n        title = post.find(class_='post-title').get_text().replace('\\n', '')\n        link = post.find('a')['href']\n        date = post.select('.post-date')[0].get_text()\n        csv_writer.writerow([title, link, date])",
    "detail": "MY_GISTS.190d9df311.blogscraping",
    "documentation": {}
  },
  {
    "label": "SequenceLabelling",
    "kind": 6,
    "importPath": "MY_GISTS.190d9df311.blog_tensorflow_sequence_labelling",
    "description": "MY_GISTS.190d9df311.blog_tensorflow_sequence_labelling",
    "peekOfCode": "class SequenceLabelling:\n    def __init__(self, data, target, dropout, num_hidden=200, num_layers=3):\n        self.data = data\n        self.target = target\n        self.dropout = dropout\n        self._num_hidden = num_hidden\n        self._num_layers = num_layers\n        self.prediction\n        self.error\n        self.optimize",
    "detail": "MY_GISTS.190d9df311.blog_tensorflow_sequence_labelling",
    "documentation": {}
  },
  {
    "label": "lazy_property",
    "kind": 2,
    "importPath": "MY_GISTS.190d9df311.blog_tensorflow_sequence_labelling",
    "description": "MY_GISTS.190d9df311.blog_tensorflow_sequence_labelling",
    "peekOfCode": "def lazy_property(function):\n    attribute = '_' + function.__name__\n    @property\n    @functools.wraps(function)\n    def wrapper(self):\n        if not hasattr(self, attribute):\n            setattr(self, attribute, function(self))\n        return getattr(self, attribute)\n    return wrapper\nclass SequenceLabelling:",
    "detail": "MY_GISTS.190d9df311.blog_tensorflow_sequence_labelling",
    "documentation": {}
  },
  {
    "label": "read_dataset",
    "kind": 2,
    "importPath": "MY_GISTS.190d9df311.blog_tensorflow_sequence_labelling",
    "description": "MY_GISTS.190d9df311.blog_tensorflow_sequence_labelling",
    "peekOfCode": "def read_dataset():\n    dataset = sets.Ocr()\n    dataset = sets.OneHot(dataset.target, depth=2)(dataset, columns=['target'])\n    dataset['data'] = dataset.data.reshape(\n        dataset.data.shape[:-2] + (-1,)).astype(float)\n    train, test = sets.Split(0.66)(dataset)\n    return train, test\nif __name__ == '__main__':\n    train, test = read_dataset()\n    _, length, image_size = train.data.shape",
    "detail": "MY_GISTS.190d9df311.blog_tensorflow_sequence_labelling",
    "documentation": {}
  },
  {
    "label": "dict_factory",
    "kind": 2,
    "importPath": "MY_GISTS.190d9df311.dict_factory",
    "description": "MY_GISTS.190d9df311.dict_factory",
    "peekOfCode": "def dict_factory(cursor, row):\n    d = {}\n    for idx, col in enumerate(cursor.description):\n        d[col[0]] = row[idx]\n    return d\n# after dbcon\ncon.row_factory = dict_factory\ncur = con.cursor()",
    "detail": "MY_GISTS.190d9df311.dict_factory",
    "documentation": {}
  },
  {
    "label": "con.row_factory",
    "kind": 5,
    "importPath": "MY_GISTS.190d9df311.dict_factory",
    "description": "MY_GISTS.190d9df311.dict_factory",
    "peekOfCode": "con.row_factory = dict_factory\ncur = con.cursor()",
    "detail": "MY_GISTS.190d9df311.dict_factory",
    "documentation": {}
  },
  {
    "label": "cur",
    "kind": 5,
    "importPath": "MY_GISTS.190d9df311.dict_factory",
    "description": "MY_GISTS.190d9df311.dict_factory",
    "peekOfCode": "cur = con.cursor()",
    "detail": "MY_GISTS.190d9df311.dict_factory",
    "documentation": {}
  },
  {
    "label": "f",
    "kind": 5,
    "importPath": "MY_GISTS.190d9df311.filter",
    "description": "MY_GISTS.190d9df311.filter",
    "peekOfCode": "f = ProfanitiesFilter([''], replacements=\"*\") \nf.inside_words = True",
    "detail": "MY_GISTS.190d9df311.filter",
    "documentation": {}
  },
  {
    "label": "f.inside_words",
    "kind": 5,
    "importPath": "MY_GISTS.190d9df311.filter",
    "description": "MY_GISTS.190d9df311.filter",
    "peekOfCode": "f.inside_words = True",
    "detail": "MY_GISTS.190d9df311.filter",
    "documentation": {}
  },
  {
    "label": "ideas_to_migrate",
    "kind": 5,
    "importPath": "MY_GISTS.190d9df311.get_ideas",
    "description": "MY_GISTS.190d9df311.get_ideas",
    "peekOfCode": "ideas_to_migrate = []\nprint ('Collecting suggestions...')\n# Loop through suggestions and figure out which ones need to be migrated.\nfor suggestion in suggestions:\n    if suggestion['status']:\n        status_type = suggestion['status']['name']\n        if status_type.lower() != 'completed' and status_type.lower() != 'declined':\n            ideas_to_migrate.append(suggestion)\n    else:\n        ideas_to_migrate.append(suggestion)",
    "detail": "MY_GISTS.190d9df311.get_ideas",
    "documentation": {}
  },
  {
    "label": "user",
    "kind": 5,
    "importPath": "MY_GISTS.190d9df311.gist",
    "description": "MY_GISTS.190d9df311.gist",
    "peekOfCode": "user = sys.argv[1]\nr = requests.get('https://api.github.com/users/{0}/gists'.format(user))\nfor i in r.json():\n    call(['git', 'clone', i['git_pull_url']])\n    description_file = './{0}/description.txt'.format(i['id'])\n    with open(description_file, 'w') as f:\n        f.write('{0}\\n'.format(i['description']))",
    "detail": "MY_GISTS.190d9df311.gist",
    "documentation": {}
  },
  {
    "label": "r",
    "kind": 5,
    "importPath": "MY_GISTS.190d9df311.gist",
    "description": "MY_GISTS.190d9df311.gist",
    "peekOfCode": "r = requests.get('https://api.github.com/users/{0}/gists'.format(user))\nfor i in r.json():\n    call(['git', 'clone', i['git_pull_url']])\n    description_file = './{0}/description.txt'.format(i['id'])\n    with open(description_file, 'w') as f:\n        f.write('{0}\\n'.format(i['description']))",
    "detail": "MY_GISTS.190d9df311.gist",
    "documentation": {}
  },
  {
    "label": "process_inbound_message",
    "kind": 2,
    "importPath": "MY_GISTS.190d9df311.mailgun",
    "description": "MY_GISTS.190d9df311.mailgun",
    "peekOfCode": "def process_inbound_message(request):\n    to_email = parseaddr(request.POST['To'])[1]\n    from_email = parseaddr(request.POST['From'])[1]\n    try:\n        group_id = email_to_group_id(to_email)\n    except Exception:\n        logging.info('%r is not a valid email address', to_email)\n        return HttpResponse(status=500)\n    payload = EmailReplyParser.parse_reply(request.POST['body-plain']).strip()\n    if not payload:",
    "detail": "MY_GISTS.190d9df311.mailgun",
    "documentation": {}
  },
  {
    "label": "migration_count",
    "kind": 5,
    "importPath": "MY_GISTS.190d9df311.migrate_data",
    "description": "MY_GISTS.190d9df311.migrate_data",
    "peekOfCode": "migration_count = str(len(ideas_to_migrate))\nprint (\"Number of suggestions to migrate: \" + migration_count)\ntarget_repo = g.get_repo(GITHUB_TARGET_REPO)\ncounter = 0\nprint ('Kicking off migration to GitHub...')\nfor idea in ideas_to_migrate:\n    counter += 1\n    print ('Migrating idea ' + str(counter) + ' of ' + migration_count + \"...\")\n    idea_text = '_No details provided._'\n    if idea['text']:",
    "detail": "MY_GISTS.190d9df311.migrate_data",
    "documentation": {}
  },
  {
    "label": "target_repo",
    "kind": 5,
    "importPath": "MY_GISTS.190d9df311.migrate_data",
    "description": "MY_GISTS.190d9df311.migrate_data",
    "peekOfCode": "target_repo = g.get_repo(GITHUB_TARGET_REPO)\ncounter = 0\nprint ('Kicking off migration to GitHub...')\nfor idea in ideas_to_migrate:\n    counter += 1\n    print ('Migrating idea ' + str(counter) + ' of ' + migration_count + \"...\")\n    idea_text = '_No details provided._'\n    if idea['text']:\n        idea_text = f.clean(idea['text'])\n    # String that defines the attribution block of the issue.",
    "detail": "MY_GISTS.190d9df311.migrate_data",
    "documentation": {}
  },
  {
    "label": "counter",
    "kind": 5,
    "importPath": "MY_GISTS.190d9df311.migrate_data",
    "description": "MY_GISTS.190d9df311.migrate_data",
    "peekOfCode": "counter = 0\nprint ('Kicking off migration to GitHub...')\nfor idea in ideas_to_migrate:\n    counter += 1\n    print ('Migrating idea ' + str(counter) + ' of ' + migration_count + \"...\")\n    idea_text = '_No details provided._'\n    if idea['text']:\n        idea_text = f.clean(idea['text'])\n    # String that defines the attribution block of the issue.\n    attribution_string = '\\n\\n----------\\n⚠ Idea migrated from UserVoice\\n\\n' + '**Created By:** ' + idea['creator']['name'] + '\\n**Created On:** ' + idea['created_at'] + '\\n**Votes at Migration:** ' + str(idea['vote_count']) + '\\n**Supporters at Migration:** ' + str(idea['supporters_count'])",
    "detail": "MY_GISTS.190d9df311.migrate_data",
    "documentation": {}
  },
  {
    "label": "create_database",
    "kind": 2,
    "importPath": "MY_GISTS.190d9df311.python_mysql",
    "description": "MY_GISTS.190d9df311.python_mysql",
    "peekOfCode": "def create_database():\n    cursor.execute(\n        \"CREATE DATABASE IF NOT EXISTS {} DEFAULT CHARACTER SET 'utf8'\".format(DB_NAME))\n    print(\"Database {} created!\".format(DB_NAME))\ndef create_tables():\n    cursor.execute(\"USE {}\".format(DB_NAME))\n    for table_name in TABLES:\n        table_description = TABLES[table_name]\n        try:\n            print(\"Creating table ({}) \".format(table_name), end=\"\")",
    "detail": "MY_GISTS.190d9df311.python_mysql",
    "documentation": {}
  },
  {
    "label": "create_tables",
    "kind": 2,
    "importPath": "MY_GISTS.190d9df311.python_mysql",
    "description": "MY_GISTS.190d9df311.python_mysql",
    "peekOfCode": "def create_tables():\n    cursor.execute(\"USE {}\".format(DB_NAME))\n    for table_name in TABLES:\n        table_description = TABLES[table_name]\n        try:\n            print(\"Creating table ({}) \".format(table_name), end=\"\")\n            cursor.execute(table_description)\n        except mysql.connector.Error as err:\n            if err.errno == errorcode.ER_TABLE_EXISTS_ERROR:\n                print(\"Already Exists\")",
    "detail": "MY_GISTS.190d9df311.python_mysql",
    "documentation": {}
  },
  {
    "label": "add_log",
    "kind": 2,
    "importPath": "MY_GISTS.190d9df311.python_mysql",
    "description": "MY_GISTS.190d9df311.python_mysql",
    "peekOfCode": "def add_log(text, user):\n    sql = (\"INSERT INTO logs(text, user) VALUES (%s, %s)\")\n    cursor.execute(sql, (text, user,))\n    db.commit()\n    log_id = cursor.lastrowid\n    print(\"Added log {}\".format(log_id))\ndef get_logs():\n    sql = (\"SELECT * FROM logs ORDER BY created DESC\")\n    cursor.execute(sql)\n    result = cursor.fetchall()",
    "detail": "MY_GISTS.190d9df311.python_mysql",
    "documentation": {}
  },
  {
    "label": "get_logs",
    "kind": 2,
    "importPath": "MY_GISTS.190d9df311.python_mysql",
    "description": "MY_GISTS.190d9df311.python_mysql",
    "peekOfCode": "def get_logs():\n    sql = (\"SELECT * FROM logs ORDER BY created DESC\")\n    cursor.execute(sql)\n    result = cursor.fetchall()\n    for row in result:\n        print(row[1])\ndef get_log(id):\n    sql = (\"SELECT * FROM logs WHERE id = %s\")\n    cursor.execute(sql, (id,))\n    result = cursor.fetchone()",
    "detail": "MY_GISTS.190d9df311.python_mysql",
    "documentation": {}
  },
  {
    "label": "get_log",
    "kind": 2,
    "importPath": "MY_GISTS.190d9df311.python_mysql",
    "description": "MY_GISTS.190d9df311.python_mysql",
    "peekOfCode": "def get_log(id):\n    sql = (\"SELECT * FROM logs WHERE id = %s\")\n    cursor.execute(sql, (id,))\n    result = cursor.fetchone()\n    for row in result:\n        print(row)\ndef update_log(id, text):\n    sql = (\"UPDATE logs SET text = %s WHERE id = %s\")\n    cursor.execute(sql, (text, id))\n    db.commit()",
    "detail": "MY_GISTS.190d9df311.python_mysql",
    "documentation": {}
  },
  {
    "label": "update_log",
    "kind": 2,
    "importPath": "MY_GISTS.190d9df311.python_mysql",
    "description": "MY_GISTS.190d9df311.python_mysql",
    "peekOfCode": "def update_log(id, text):\n    sql = (\"UPDATE logs SET text = %s WHERE id = %s\")\n    cursor.execute(sql, (text, id))\n    db.commit()\n    print(\"Log updated\")\ndef delete_log(id):\n    sql = (\"DELETE FROM logs WHERE id = %s\")\n    cursor.execute(sql, (id,))\n    db.commit()\n    print(\"Log removed\")",
    "detail": "MY_GISTS.190d9df311.python_mysql",
    "documentation": {}
  },
  {
    "label": "delete_log",
    "kind": 2,
    "importPath": "MY_GISTS.190d9df311.python_mysql",
    "description": "MY_GISTS.190d9df311.python_mysql",
    "peekOfCode": "def delete_log(id):\n    sql = (\"DELETE FROM logs WHERE id = %s\")\n    cursor.execute(sql, (id,))\n    db.commit()\n    print(\"Log removed\")\n# add_log('This is log one', 'Brad')\n# add_log('This is log two', 'Jeff')\n# add_log('This is log three', 'Jane')\n# get_logs()\n# get_log(2)",
    "detail": "MY_GISTS.190d9df311.python_mysql",
    "documentation": {}
  },
  {
    "label": "config",
    "kind": 5,
    "importPath": "MY_GISTS.190d9df311.python_mysql",
    "description": "MY_GISTS.190d9df311.python_mysql",
    "peekOfCode": "config = {\n    'user': 'root',\n    'password': '',\n    'host': 'localhost',\n    'database': 'acme'\n}\ndb = mysql.connector.connect(**config)\ncursor = db.cursor()\nDB_NAME = 'acme'\nTABLES = {}",
    "detail": "MY_GISTS.190d9df311.python_mysql",
    "documentation": {}
  },
  {
    "label": "db",
    "kind": 5,
    "importPath": "MY_GISTS.190d9df311.python_mysql",
    "description": "MY_GISTS.190d9df311.python_mysql",
    "peekOfCode": "db = mysql.connector.connect(**config)\ncursor = db.cursor()\nDB_NAME = 'acme'\nTABLES = {}\nTABLES['logs'] = (\n    \"CREATE TABLE `logs` (\"\n    \" `id` int(11) NOT NULL AUTO_INCREMENT,\"\n    \" `text` varchar(250) NOT NULL,\"\n    \" `user` varchar(250) NOT NULL,\"\n    \" `created` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,\"",
    "detail": "MY_GISTS.190d9df311.python_mysql",
    "documentation": {}
  },
  {
    "label": "cursor",
    "kind": 5,
    "importPath": "MY_GISTS.190d9df311.python_mysql",
    "description": "MY_GISTS.190d9df311.python_mysql",
    "peekOfCode": "cursor = db.cursor()\nDB_NAME = 'acme'\nTABLES = {}\nTABLES['logs'] = (\n    \"CREATE TABLE `logs` (\"\n    \" `id` int(11) NOT NULL AUTO_INCREMENT,\"\n    \" `text` varchar(250) NOT NULL,\"\n    \" `user` varchar(250) NOT NULL,\"\n    \" `created` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,\"\n    \" PRIMARY KEY (`id`)\"",
    "detail": "MY_GISTS.190d9df311.python_mysql",
    "documentation": {}
  },
  {
    "label": "DB_NAME",
    "kind": 5,
    "importPath": "MY_GISTS.190d9df311.python_mysql",
    "description": "MY_GISTS.190d9df311.python_mysql",
    "peekOfCode": "DB_NAME = 'acme'\nTABLES = {}\nTABLES['logs'] = (\n    \"CREATE TABLE `logs` (\"\n    \" `id` int(11) NOT NULL AUTO_INCREMENT,\"\n    \" `text` varchar(250) NOT NULL,\"\n    \" `user` varchar(250) NOT NULL,\"\n    \" `created` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,\"\n    \" PRIMARY KEY (`id`)\"\n    \") ENGINE=InnoDB\"",
    "detail": "MY_GISTS.190d9df311.python_mysql",
    "documentation": {}
  },
  {
    "label": "TABLES",
    "kind": 5,
    "importPath": "MY_GISTS.190d9df311.python_mysql",
    "description": "MY_GISTS.190d9df311.python_mysql",
    "peekOfCode": "TABLES = {}\nTABLES['logs'] = (\n    \"CREATE TABLE `logs` (\"\n    \" `id` int(11) NOT NULL AUTO_INCREMENT,\"\n    \" `text` varchar(250) NOT NULL,\"\n    \" `user` varchar(250) NOT NULL,\"\n    \" `created` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,\"\n    \" PRIMARY KEY (`id`)\"\n    \") ENGINE=InnoDB\"\n)",
    "detail": "MY_GISTS.190d9df311.python_mysql",
    "documentation": {}
  },
  {
    "label": "TABLES['logs']",
    "kind": 5,
    "importPath": "MY_GISTS.190d9df311.python_mysql",
    "description": "MY_GISTS.190d9df311.python_mysql",
    "peekOfCode": "TABLES['logs'] = (\n    \"CREATE TABLE `logs` (\"\n    \" `id` int(11) NOT NULL AUTO_INCREMENT,\"\n    \" `text` varchar(250) NOT NULL,\"\n    \" `user` varchar(250) NOT NULL,\"\n    \" `created` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,\"\n    \" PRIMARY KEY (`id`)\"\n    \") ENGINE=InnoDB\"\n)\ndef create_database():",
    "detail": "MY_GISTS.190d9df311.python_mysql",
    "documentation": {}
  },
  {
    "label": "TestProcessInboundMessage",
    "kind": 6,
    "importPath": "MY_GISTS.190d9df311.test_mailgun",
    "description": "MY_GISTS.190d9df311.test_mailgun",
    "peekOfCode": "class TestProcessInboundMessage(TestCase):\n    urls = 'getsentry.conf.urls.app'\n    def setUp(self):\n        super(TestProcessInboundMessage, self).setUp()\n        self.event = self.create_event(event_id='a' * 32)\n        self.mailto = group_id_to_email(self.group.pk)\n    @mock.patch('getsentry.web.mailgun.process_inbound_email')\n    def test_simple(self, process_inbound_email):\n        resp = self.client.post('/api/0/mailgun/inbound/', {\n            'To': 'Sentry <%s>' % (self.mailto,),",
    "detail": "MY_GISTS.190d9df311.test_mailgun",
    "documentation": {}
  },
  {
    "label": "body_plain",
    "kind": 5,
    "importPath": "MY_GISTS.190d9df311.test_mailgun",
    "description": "MY_GISTS.190d9df311.test_mailgun",
    "peekOfCode": "body_plain = \"foo bar\"\nclass TestProcessInboundMessage(TestCase):\n    urls = 'getsentry.conf.urls.app'\n    def setUp(self):\n        super(TestProcessInboundMessage, self).setUp()\n        self.event = self.create_event(event_id='a' * 32)\n        self.mailto = group_id_to_email(self.group.pk)\n    @mock.patch('getsentry.web.mailgun.process_inbound_email')\n    def test_simple(self, process_inbound_email):\n        resp = self.client.post('/api/0/mailgun/inbound/', {",
    "detail": "MY_GISTS.190d9df311.test_mailgun",
    "documentation": {}
  },
  {
    "label": "url",
    "kind": 5,
    "importPath": "MY_GISTS.190d9df311.unscrape (2)",
    "description": "MY_GISTS.190d9df311.unscrape (2)",
    "peekOfCode": "url = \"https://unsplash.com\"\ndriver = webdriver.Firefox(executable_path=r'geckodriver.exe')\ndriver.get(url)\ndriver.execute_script(\"window.scrollTo(0,1000);\")\ntime.sleep(5)\n# Select image elements and print their URLs\nimage_elements = driver.find_elements_by_css_selector(\"#gridMulti img\")\nfor image_element in image_elements:\n    image_url = image_element.get_attribute(\"src\")\n    print(image_url)",
    "detail": "MY_GISTS.190d9df311.unscrape (2)",
    "documentation": {}
  },
  {
    "label": "driver",
    "kind": 5,
    "importPath": "MY_GISTS.190d9df311.unscrape (2)",
    "description": "MY_GISTS.190d9df311.unscrape (2)",
    "peekOfCode": "driver = webdriver.Firefox(executable_path=r'geckodriver.exe')\ndriver.get(url)\ndriver.execute_script(\"window.scrollTo(0,1000);\")\ntime.sleep(5)\n# Select image elements and print their URLs\nimage_elements = driver.find_elements_by_css_selector(\"#gridMulti img\")\nfor image_element in image_elements:\n    image_url = image_element.get_attribute(\"src\")\n    print(image_url)",
    "detail": "MY_GISTS.190d9df311.unscrape (2)",
    "documentation": {}
  },
  {
    "label": "image_elements",
    "kind": 5,
    "importPath": "MY_GISTS.190d9df311.unscrape (2)",
    "description": "MY_GISTS.190d9df311.unscrape (2)",
    "peekOfCode": "image_elements = driver.find_elements_by_css_selector(\"#gridMulti img\")\nfor image_element in image_elements:\n    image_url = image_element.get_attribute(\"src\")\n    print(image_url)",
    "detail": "MY_GISTS.190d9df311.unscrape (2)",
    "documentation": {}
  },
  {
    "label": "url",
    "kind": 5,
    "importPath": "MY_GISTS.190d9df311.unscrape (3)",
    "description": "MY_GISTS.190d9df311.unscrape (3)",
    "peekOfCode": "url = \"https://unsplash.com\"\ndriver = webdriver.Firefox(executable_path=r'geckodriver.exe')\ndriver.get(url)\n# Scroll page and wait 5 seconds\ndriver.execute_script(\"window.scrollTo(0,1000);\")\ntime.sleep(5)",
    "detail": "MY_GISTS.190d9df311.unscrape (3)",
    "documentation": {}
  },
  {
    "label": "driver",
    "kind": 5,
    "importPath": "MY_GISTS.190d9df311.unscrape (3)",
    "description": "MY_GISTS.190d9df311.unscrape (3)",
    "peekOfCode": "driver = webdriver.Firefox(executable_path=r'geckodriver.exe')\ndriver.get(url)\n# Scroll page and wait 5 seconds\ndriver.execute_script(\"window.scrollTo(0,1000);\")\ntime.sleep(5)",
    "detail": "MY_GISTS.190d9df311.unscrape (3)",
    "documentation": {}
  },
  {
    "label": "url",
    "kind": 5,
    "importPath": "MY_GISTS.190d9df311.unscrape (4)",
    "description": "MY_GISTS.190d9df311.unscrape (4)",
    "peekOfCode": "url = \"https://unsplash.com\"\ndriver = webdriver.Firefox(executable_path=r'geckodriver.exe')\ndriver.get(url)\ndriver.execute_script(\"window.scrollTo(0,1000);\")\ntime.sleep(5)\nimage_elements = driver.find_elements_by_css_selector(\"#gridMulti img\")\ni = 0\nfor image_element in image_elements:\n    image_url = image_element.get_attribute(\"src\")\n    # Send an HTTP GET request, get and save the image from the response",
    "detail": "MY_GISTS.190d9df311.unscrape (4)",
    "documentation": {}
  },
  {
    "label": "driver",
    "kind": 5,
    "importPath": "MY_GISTS.190d9df311.unscrape (4)",
    "description": "MY_GISTS.190d9df311.unscrape (4)",
    "peekOfCode": "driver = webdriver.Firefox(executable_path=r'geckodriver.exe')\ndriver.get(url)\ndriver.execute_script(\"window.scrollTo(0,1000);\")\ntime.sleep(5)\nimage_elements = driver.find_elements_by_css_selector(\"#gridMulti img\")\ni = 0\nfor image_element in image_elements:\n    image_url = image_element.get_attribute(\"src\")\n    # Send an HTTP GET request, get and save the image from the response\n    image_object = requests.get(image_url)",
    "detail": "MY_GISTS.190d9df311.unscrape (4)",
    "documentation": {}
  },
  {
    "label": "image_elements",
    "kind": 5,
    "importPath": "MY_GISTS.190d9df311.unscrape (4)",
    "description": "MY_GISTS.190d9df311.unscrape (4)",
    "peekOfCode": "image_elements = driver.find_elements_by_css_selector(\"#gridMulti img\")\ni = 0\nfor image_element in image_elements:\n    image_url = image_element.get_attribute(\"src\")\n    # Send an HTTP GET request, get and save the image from the response\n    image_object = requests.get(image_url)\n    image = Image.open(BytesIO(image_object.content))\n    image.save(\"./images/image\" + str(i) + \".\" + image.format, image.format)\n    i += 1",
    "detail": "MY_GISTS.190d9df311.unscrape (4)",
    "documentation": {}
  },
  {
    "label": "i",
    "kind": 5,
    "importPath": "MY_GISTS.190d9df311.unscrape (4)",
    "description": "MY_GISTS.190d9df311.unscrape (4)",
    "peekOfCode": "i = 0\nfor image_element in image_elements:\n    image_url = image_element.get_attribute(\"src\")\n    # Send an HTTP GET request, get and save the image from the response\n    image_object = requests.get(image_url)\n    image = Image.open(BytesIO(image_object.content))\n    image.save(\"./images/image\" + str(i) + \".\" + image.format, image.format)\n    i += 1",
    "detail": "MY_GISTS.190d9df311.unscrape (4)",
    "documentation": {}
  },
  {
    "label": "url",
    "kind": 5,
    "importPath": "MY_GISTS.190d9df311.unscrape",
    "description": "MY_GISTS.190d9df311.unscrape",
    "peekOfCode": "url = \"https://unsplash.com\"\n# Using Selenium's webdriver to open the page\ndriver = webdriver.Firefox(executable_path=r'geckodriver.exe')\ndriver.get(url)",
    "detail": "MY_GISTS.190d9df311.unscrape",
    "documentation": {}
  },
  {
    "label": "driver",
    "kind": 5,
    "importPath": "MY_GISTS.190d9df311.unscrape",
    "description": "MY_GISTS.190d9df311.unscrape",
    "peekOfCode": "driver = webdriver.Firefox(executable_path=r'geckodriver.exe')\ndriver.get(url)",
    "detail": "MY_GISTS.190d9df311.unscrape",
    "documentation": {}
  },
  {
    "label": "user",
    "kind": 5,
    "importPath": "MY_GISTS.22ba574c31.get-gists",
    "description": "MY_GISTS.22ba574c31.get-gists",
    "peekOfCode": "user = sys.argv[1]\nr = requests.get('https://api.github.com/users/{0}/gists'.format(user))\nfor i in r.json():\n\tcall(['git', 'clone', i['git_pull_url']])\n\tdescription_file = './{0}/description.txt'.format(i['id'])\n\twith open(description_file, 'w') as f:\n\t\tf.write('{0}\\n'.format(i['description']))",
    "detail": "MY_GISTS.22ba574c31.get-gists",
    "documentation": {}
  },
  {
    "label": "r",
    "kind": 5,
    "importPath": "MY_GISTS.22ba574c31.get-gists",
    "description": "MY_GISTS.22ba574c31.get-gists",
    "peekOfCode": "r = requests.get('https://api.github.com/users/{0}/gists'.format(user))\nfor i in r.json():\n\tcall(['git', 'clone', i['git_pull_url']])\n\tdescription_file = './{0}/description.txt'.format(i['id'])\n\twith open(description_file, 'w') as f:\n\t\tf.write('{0}\\n'.format(i['description']))",
    "detail": "MY_GISTS.22ba574c31.get-gists",
    "documentation": {}
  },
  {
    "label": "\tdescription_file",
    "kind": 5,
    "importPath": "MY_GISTS.22ba574c31.get-gists",
    "description": "MY_GISTS.22ba574c31.get-gists",
    "peekOfCode": "\tdescription_file = './{0}/description.txt'.format(i['id'])\n\twith open(description_file, 'w') as f:\n\t\tf.write('{0}\\n'.format(i['description']))",
    "detail": "MY_GISTS.22ba574c31.get-gists",
    "documentation": {}
  },
  {
    "label": "memoize",
    "kind": 2,
    "importPath": "MY_GISTS.22ba574c31.memoize",
    "description": "MY_GISTS.22ba574c31.memoize",
    "peekOfCode": "def memoize(func):\n    cache = {}\n    def wrapped(*args, **kwargs):\n        key = (tuple(args), tuple(kwargs.items()))\n        if key not in cache:\n            cache[key] = func(*args, **kwargs)\n        return cache[key]\n    return wrapped",
    "detail": "MY_GISTS.22ba574c31.memoize",
    "documentation": {}
  },
  {
    "label": "Human",
    "kind": 6,
    "importPath": "MY_GISTS.282774d283.python-cheatsheet",
    "description": "MY_GISTS.282774d283.python-cheatsheet",
    "peekOfCode": "class Human:\n    # A class attribute. It is shared by all instances of this class\n    species = \"H. sapiens\"\n    # Basic initializer, this is called when this class is instantiated.\n    # Note that the double leading and trailing underscores denote objects\n    # or attributes that are used by Python but that live in user-controlled\n    # namespaces. Methods(or objects or attributes) like: __init__, __str__,\n    # __repr__ etc. are called special methods (or sometimes called dunder methods)\n    # You should not invent such names on your own.\n    def __init__(self, name):",
    "detail": "MY_GISTS.282774d283.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "Superhero",
    "kind": 6,
    "importPath": "MY_GISTS.282774d283.python-cheatsheet",
    "description": "MY_GISTS.282774d283.python-cheatsheet",
    "peekOfCode": "class Superhero(Human):\n    # If the child class should inherit all of the parent's definitions without\n    # any modifications, you can just use the \"pass\" keyword (and nothing else)\n    # but in this case it is commented out to allow for a unique child class:\n    # pass\n    # Child classes can override their parents' attributes\n    species = 'Superhuman'\n    # Children automatically inherit their parent class's constructor including\n    # its arguments, but can also define additional arguments or definitions\n    # and override its methods such as the class constructor.",
    "detail": "MY_GISTS.282774d283.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "Bat",
    "kind": 6,
    "importPath": "MY_GISTS.282774d283.python-cheatsheet",
    "description": "MY_GISTS.282774d283.python-cheatsheet",
    "peekOfCode": "class Bat:\n    species = 'Baty'\n    def __init__(self, can_fly=True):\n        self.fly = can_fly\n    # This class also has a say method\n    def say(self, msg):\n        msg = '... ... ...'\n        return msg\n    # And its own method as well\n    def sonar(self):",
    "detail": "MY_GISTS.282774d283.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "Batman",
    "kind": 6,
    "importPath": "MY_GISTS.282774d283.python-cheatsheet",
    "description": "MY_GISTS.282774d283.python-cheatsheet",
    "peekOfCode": "class Batman(Superhero, Bat):\n    def __init__(self, *args, **kwargs):\n        # Typically to inherit attributes you have to call super:\n        # super(Batman, self).__init__(*args, **kwargs)      \n        # However we are dealing with multiple inheritance here, and super()\n        # only works with the next base class in the MRO list.\n        # So instead we explicitly call __init__ for all ancestors.\n        # The use of *args and **kwargs allows for a clean way to pass arguments,\n        # with each parent \"peeling a layer of the onion\".\n        Superhero.__init__(self, 'anonymous', movie=True, ",
    "detail": "MY_GISTS.282774d283.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "add",
    "kind": 2,
    "importPath": "MY_GISTS.282774d283.python-cheatsheet",
    "description": "MY_GISTS.282774d283.python-cheatsheet",
    "peekOfCode": "def add(x, y):\n    print(\"x is {} and y is {}\".format(x, y))\n    return x + y  # Return values with a return statement\n# Calling functions with parameters\nadd(5, 6)  # => prints out \"x is 5 and y is 6\" and returns 11\n# Another way to call functions is with keyword arguments\nadd(y=6, x=5)  # Keyword arguments can arrive in any order.\n# You can define functions that take a variable number of\n# positional arguments\ndef varargs(*args):",
    "detail": "MY_GISTS.282774d283.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "varargs",
    "kind": 2,
    "importPath": "MY_GISTS.282774d283.python-cheatsheet",
    "description": "MY_GISTS.282774d283.python-cheatsheet",
    "peekOfCode": "def varargs(*args):\n    return args\nvarargs(1, 2, 3)  # => (1, 2, 3)\n# You can define functions that take a variable number of\n# keyword arguments, as well\ndef keyword_args(**kwargs):\n    return kwargs\n# Let's call it to see what happens\nkeyword_args(big=\"foot\", loch=\"ness\")  # => {\"big\": \"foot\", \"loch\": \"ness\"}\n# You can do both at once, if you like",
    "detail": "MY_GISTS.282774d283.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "keyword_args",
    "kind": 2,
    "importPath": "MY_GISTS.282774d283.python-cheatsheet",
    "description": "MY_GISTS.282774d283.python-cheatsheet",
    "peekOfCode": "def keyword_args(**kwargs):\n    return kwargs\n# Let's call it to see what happens\nkeyword_args(big=\"foot\", loch=\"ness\")  # => {\"big\": \"foot\", \"loch\": \"ness\"}\n# You can do both at once, if you like\ndef all_the_args(*args, **kwargs):\n    print(args)\n    print(kwargs)\n\"\"\"\nall_the_args(1, 2, a=3, b=4) prints:",
    "detail": "MY_GISTS.282774d283.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "all_the_args",
    "kind": 2,
    "importPath": "MY_GISTS.282774d283.python-cheatsheet",
    "description": "MY_GISTS.282774d283.python-cheatsheet",
    "peekOfCode": "def all_the_args(*args, **kwargs):\n    print(args)\n    print(kwargs)\n\"\"\"\nall_the_args(1, 2, a=3, b=4) prints:\n    (1, 2)\n    {\"a\": 3, \"b\": 4}\n\"\"\"\n# When calling functions, you can do the opposite of args/kwargs!\n# Use * to expand tuples and use ** to expand kwargs.",
    "detail": "MY_GISTS.282774d283.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "swap",
    "kind": 2,
    "importPath": "MY_GISTS.282774d283.python-cheatsheet",
    "description": "MY_GISTS.282774d283.python-cheatsheet",
    "peekOfCode": "def swap(x, y):\n    return y, x  # Return multiple values as a tuple without the parenthesis.\n                 # (Note: parenthesis have been excluded but can be included)\nx = 1\ny = 2\nx, y = swap(x, y)     # => x = 2, y = 1\n# (x, y) = swap(x,y)  # Again parenthesis have been excluded but can be included.\n# Function Scope\nx = 5\ndef set_x(num):",
    "detail": "MY_GISTS.282774d283.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "set_x",
    "kind": 2,
    "importPath": "MY_GISTS.282774d283.python-cheatsheet",
    "description": "MY_GISTS.282774d283.python-cheatsheet",
    "peekOfCode": "def set_x(num):\n    # Local var x not the same as global variable x\n    x = num    # => 43\n    print(x)   # => 43\ndef set_global_x(num):\n    global x\n    print(x)   # => 5\n    x = num    # global var x is now set to 6\n    print(x)   # => 6\nset_x(43)",
    "detail": "MY_GISTS.282774d283.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "set_global_x",
    "kind": 2,
    "importPath": "MY_GISTS.282774d283.python-cheatsheet",
    "description": "MY_GISTS.282774d283.python-cheatsheet",
    "peekOfCode": "def set_global_x(num):\n    global x\n    print(x)   # => 5\n    x = num    # global var x is now set to 6\n    print(x)   # => 6\nset_x(43)\nset_global_x(6)\n# Python has first class functions\ndef create_adder(x):\n    def adder(y):",
    "detail": "MY_GISTS.282774d283.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "create_adder",
    "kind": 2,
    "importPath": "MY_GISTS.282774d283.python-cheatsheet",
    "description": "MY_GISTS.282774d283.python-cheatsheet",
    "peekOfCode": "def create_adder(x):\n    def adder(y):\n        return x + y\n    return adder\nadd_10 = create_adder(10)\nadd_10(3)   # => 13\n# There are also anonymous functions\n(lambda x: x > 2)(3)                  # => True\n(lambda x, y: x ** 2 + y ** 2)(2, 1)  # => 5\n# There are built-in higher order functions",
    "detail": "MY_GISTS.282774d283.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "double_numbers",
    "kind": 2,
    "importPath": "MY_GISTS.282774d283.python-cheatsheet",
    "description": "MY_GISTS.282774d283.python-cheatsheet",
    "peekOfCode": "def double_numbers(iterable):\n    for i in iterable:\n        yield i + i\n# Generators are memory-efficient because they only load the data needed to\n# process the next value in the iterable. This allows them to perform\n# operations on otherwise prohibitively large value ranges.\n# NOTE: `range` replaces `xrange` in Python 3.\nfor i in double_numbers(range(1, 900000000)):  # `range` is a generator.\n    print(i)\n    if i >= 30:",
    "detail": "MY_GISTS.282774d283.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "beg",
    "kind": 2,
    "importPath": "MY_GISTS.282774d283.python-cheatsheet",
    "description": "MY_GISTS.282774d283.python-cheatsheet",
    "peekOfCode": "def beg(target_function):\n    @wraps(target_function)\n    def wrapper(*args, **kwargs):\n        msg, say_please = target_function(*args, **kwargs)\n        if say_please:\n            return \"{} {}\".format(msg, \"Please! I am poor :(\")\n        return msg\n    return wrapper\n@beg\ndef say(say_please=False):",
    "detail": "MY_GISTS.282774d283.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "say",
    "kind": 2,
    "importPath": "MY_GISTS.282774d283.python-cheatsheet",
    "description": "MY_GISTS.282774d283.python-cheatsheet",
    "peekOfCode": "def say(say_please=False):\n    msg = \"Can you buy me a beer?\"\n    return msg, say_please\nprint(say())                 # Can you buy me a beer?\nprint(say(say_please=True))  # Can you buy me a beer? Please! I am poor :(",
    "detail": "MY_GISTS.282774d283.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "a",
    "kind": 5,
    "importPath": "MY_GISTS.282774d283.python-cheatsheet",
    "description": "MY_GISTS.282774d283.python-cheatsheet",
    "peekOfCode": "a = [1, 2, 3, 4]  # Point a at a new list, [1, 2, 3, 4]\nb = a             # Point b at what a is pointing to\nb is a            # => True, a and b refer to the same object\nb == a            # => True, a's and b's objects are equal\nb = [1, 2, 3, 4]  # Point b at a new list, [1, 2, 3, 4]\nb is a            # => False, a and b do not refer to the same object\nb == a            # => True, a's and b's objects are equal\n# Strings are created with \" or '\n\"This is a string.\"\n'This is also a string.'",
    "detail": "MY_GISTS.282774d283.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "b",
    "kind": 5,
    "importPath": "MY_GISTS.282774d283.python-cheatsheet",
    "description": "MY_GISTS.282774d283.python-cheatsheet",
    "peekOfCode": "b = a             # Point b at what a is pointing to\nb is a            # => True, a and b refer to the same object\nb == a            # => True, a's and b's objects are equal\nb = [1, 2, 3, 4]  # Point b at a new list, [1, 2, 3, 4]\nb is a            # => False, a and b do not refer to the same object\nb == a            # => True, a's and b's objects are equal\n# Strings are created with \" or '\n\"This is a string.\"\n'This is also a string.'\n# Strings can be added too! But try not to do this.",
    "detail": "MY_GISTS.282774d283.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "b",
    "kind": 5,
    "importPath": "MY_GISTS.282774d283.python-cheatsheet",
    "description": "MY_GISTS.282774d283.python-cheatsheet",
    "peekOfCode": "b = [1, 2, 3, 4]  # Point b at a new list, [1, 2, 3, 4]\nb is a            # => False, a and b do not refer to the same object\nb == a            # => True, a's and b's objects are equal\n# Strings are created with \" or '\n\"This is a string.\"\n'This is also a string.'\n# Strings can be added too! But try not to do this.\n\"Hello \" + \"world!\"  # => \"Hello world!\"\n# String literals (but not variables) can be concatenated without using '+'\n\"Hello \" \"world!\"    # => \"Hello world!\"",
    "detail": "MY_GISTS.282774d283.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "name",
    "kind": 5,
    "importPath": "MY_GISTS.282774d283.python-cheatsheet",
    "description": "MY_GISTS.282774d283.python-cheatsheet",
    "peekOfCode": "name = \"Reiko\"\nf\"She said her name is {name}.\" # => \"She said her name is Reiko\"\n# You can basically put any Python statement inside the braces and it will be output in the string.\nf\"{name} is {len(name)} characters long.\" # => \"Reiko is 5 characters long.\"\n# None is an object\nNone  # => None\n# Don't use the equality \"==\" symbol to compare objects to None\n# Use \"is\" instead. This checks for equality of object identity.\n\"etc\" is None  # => False\nNone is None   # => True",
    "detail": "MY_GISTS.282774d283.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "input_string_var",
    "kind": 5,
    "importPath": "MY_GISTS.282774d283.python-cheatsheet",
    "description": "MY_GISTS.282774d283.python-cheatsheet",
    "peekOfCode": "input_string_var = input(\"Enter some data: \") # Returns the data as a string\n# Note: In earlier versions of Python, input() method was named as raw_input()\n# There are no declarations, only assignments.\n# Convention is to use lower_case_with_underscores\nsome_var = 5\nsome_var  # => 5\n# Accessing a previously unassigned variable is an exception.\n# See Control Flow to learn more about exception handling.\nsome_unknown_var  # Raises a NameError\n# if can be used as an expression",
    "detail": "MY_GISTS.282774d283.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "some_var",
    "kind": 5,
    "importPath": "MY_GISTS.282774d283.python-cheatsheet",
    "description": "MY_GISTS.282774d283.python-cheatsheet",
    "peekOfCode": "some_var = 5\nsome_var  # => 5\n# Accessing a previously unassigned variable is an exception.\n# See Control Flow to learn more about exception handling.\nsome_unknown_var  # Raises a NameError\n# if can be used as an expression\n# Equivalent of C's '?:' ternary operator\n\"yahoo!\" if 3 > 2 else 2  # => \"yahoo!\"\n# Lists store sequences\nli = []",
    "detail": "MY_GISTS.282774d283.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "li",
    "kind": 5,
    "importPath": "MY_GISTS.282774d283.python-cheatsheet",
    "description": "MY_GISTS.282774d283.python-cheatsheet",
    "peekOfCode": "li = []\n# You can start with a prefilled list\nother_li = [4, 5, 6]\n# Add stuff to the end of a list with append\nli.append(1)    # li is now [1]\nli.append(2)    # li is now [1, 2]\nli.append(4)    # li is now [1, 2, 4]\nli.append(3)    # li is now [1, 2, 4, 3]\n# Remove from the end with pop\nli.pop()        # => 3 and li is now [1, 2, 4]",
    "detail": "MY_GISTS.282774d283.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "other_li",
    "kind": 5,
    "importPath": "MY_GISTS.282774d283.python-cheatsheet",
    "description": "MY_GISTS.282774d283.python-cheatsheet",
    "peekOfCode": "other_li = [4, 5, 6]\n# Add stuff to the end of a list with append\nli.append(1)    # li is now [1]\nli.append(2)    # li is now [1, 2]\nli.append(4)    # li is now [1, 2, 4]\nli.append(3)    # li is now [1, 2, 4, 3]\n# Remove from the end with pop\nli.pop()        # => 3 and li is now [1, 2, 4]\n# Let's put it back\nli.append(3)    # li is now [1, 2, 4, 3] again.",
    "detail": "MY_GISTS.282774d283.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "li2",
    "kind": 5,
    "importPath": "MY_GISTS.282774d283.python-cheatsheet",
    "description": "MY_GISTS.282774d283.python-cheatsheet",
    "peekOfCode": "li2 = li[:]  # => li2 = [1, 2, 4, 3] but (li2 is li) will result in false.\n# Remove arbitrary elements from a list with \"del\"\ndel li[2]  # li is now [1, 2, 3]\n# Remove first occurrence of a value\nli.remove(2)  # li is now [1, 3]\nli.remove(2)  # Raises a ValueError as 2 is not in the list\n# Insert an element at a specific index\nli.insert(1, 2)  # li is now [1, 2, 3] again\n# Get the index of the first item found matching the argument\nli.index(2)  # => 1",
    "detail": "MY_GISTS.282774d283.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "tup",
    "kind": 5,
    "importPath": "MY_GISTS.282774d283.python-cheatsheet",
    "description": "MY_GISTS.282774d283.python-cheatsheet",
    "peekOfCode": "tup = (1, 2, 3)\ntup[0]      # => 1\ntup[0] = 3  # Raises a TypeError\n# Note that a tuple of length one has to have a comma after the last element but\n# tuples of other lengths, even zero, do not.\ntype((1))   # => <class 'int'>\ntype((1,))  # => <class 'tuple'>\ntype(())    # => <class 'tuple'>\n# You can do most of the list operations on tuples too\nlen(tup)         # => 3",
    "detail": "MY_GISTS.282774d283.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "tup[0]",
    "kind": 5,
    "importPath": "MY_GISTS.282774d283.python-cheatsheet",
    "description": "MY_GISTS.282774d283.python-cheatsheet",
    "peekOfCode": "tup[0] = 3  # Raises a TypeError\n# Note that a tuple of length one has to have a comma after the last element but\n# tuples of other lengths, even zero, do not.\ntype((1))   # => <class 'int'>\ntype((1,))  # => <class 'tuple'>\ntype(())    # => <class 'tuple'>\n# You can do most of the list operations on tuples too\nlen(tup)         # => 3\ntup + (4, 5, 6)  # => (1, 2, 3, 4, 5, 6)\ntup[:2]          # => (1, 2)",
    "detail": "MY_GISTS.282774d283.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "empty_dict",
    "kind": 5,
    "importPath": "MY_GISTS.282774d283.python-cheatsheet",
    "description": "MY_GISTS.282774d283.python-cheatsheet",
    "peekOfCode": "empty_dict = {}\n# Here is a prefilled dictionary\nfilled_dict = {\"one\": 1, \"two\": 2, \"three\": 3}\n# Note keys for dictionaries have to be immutable types. This is to ensure that\n# the key can be converted to a constant hash value for quick look-ups.\n# Immutable types include ints, floats, strings, tuples.\ninvalid_dict = {[1,2,3]: \"123\"}  # => Raises a TypeError: unhashable type: 'list'\nvalid_dict = {(1,2,3):[1,2,3]}   # Values can be of any type, however.\n# Look up values with []\nfilled_dict[\"one\"]  # => 1",
    "detail": "MY_GISTS.282774d283.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "filled_dict",
    "kind": 5,
    "importPath": "MY_GISTS.282774d283.python-cheatsheet",
    "description": "MY_GISTS.282774d283.python-cheatsheet",
    "peekOfCode": "filled_dict = {\"one\": 1, \"two\": 2, \"three\": 3}\n# Note keys for dictionaries have to be immutable types. This is to ensure that\n# the key can be converted to a constant hash value for quick look-ups.\n# Immutable types include ints, floats, strings, tuples.\ninvalid_dict = {[1,2,3]: \"123\"}  # => Raises a TypeError: unhashable type: 'list'\nvalid_dict = {(1,2,3):[1,2,3]}   # Values can be of any type, however.\n# Look up values with []\nfilled_dict[\"one\"]  # => 1\n# Get all keys as an iterable with \"keys()\". We need to wrap the call in list()\n# to turn it into a list. We'll talk about those later.  Note - for Python",
    "detail": "MY_GISTS.282774d283.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "invalid_dict",
    "kind": 5,
    "importPath": "MY_GISTS.282774d283.python-cheatsheet",
    "description": "MY_GISTS.282774d283.python-cheatsheet",
    "peekOfCode": "invalid_dict = {[1,2,3]: \"123\"}  # => Raises a TypeError: unhashable type: 'list'\nvalid_dict = {(1,2,3):[1,2,3]}   # Values can be of any type, however.\n# Look up values with []\nfilled_dict[\"one\"]  # => 1\n# Get all keys as an iterable with \"keys()\". We need to wrap the call in list()\n# to turn it into a list. We'll talk about those later.  Note - for Python\n# versions <3.7, dictionary key ordering is not guaranteed. Your results might\n# not match the example below exactly. However, as of Python 3.7, dictionary\n# items maintain the order at which they are inserted into the dictionary.\nlist(filled_dict.keys())  # => [\"three\", \"two\", \"one\"] in Python <3.7",
    "detail": "MY_GISTS.282774d283.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "valid_dict",
    "kind": 5,
    "importPath": "MY_GISTS.282774d283.python-cheatsheet",
    "description": "MY_GISTS.282774d283.python-cheatsheet",
    "peekOfCode": "valid_dict = {(1,2,3):[1,2,3]}   # Values can be of any type, however.\n# Look up values with []\nfilled_dict[\"one\"]  # => 1\n# Get all keys as an iterable with \"keys()\". We need to wrap the call in list()\n# to turn it into a list. We'll talk about those later.  Note - for Python\n# versions <3.7, dictionary key ordering is not guaranteed. Your results might\n# not match the example below exactly. However, as of Python 3.7, dictionary\n# items maintain the order at which they are inserted into the dictionary.\nlist(filled_dict.keys())  # => [\"three\", \"two\", \"one\"] in Python <3.7\nlist(filled_dict.keys())  # => [\"one\", \"two\", \"three\"] in Python 3.7+",
    "detail": "MY_GISTS.282774d283.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "filled_dict[\"four\"]",
    "kind": 5,
    "importPath": "MY_GISTS.282774d283.python-cheatsheet",
    "description": "MY_GISTS.282774d283.python-cheatsheet",
    "peekOfCode": "filled_dict[\"four\"] = 4         # another way to add to dict\n# Remove keys from a dictionary with del\ndel filled_dict[\"one\"]  # Removes the key \"one\" from filled dict\n# From Python 3.5 you can also use the additional unpacking options\n{'a': 1, **{'b': 2}}  # => {'a': 1, 'b': 2}\n{'a': 1, **{'a': 2}}  # => {'a': 2}\n# Sets store ... well sets\nempty_set = set()\n# Initialize a set with a bunch of values. Yeah, it looks a bit like a dict. Sorry.\nsome_set = {1, 1, 2, 2, 3, 4}  # some_set is now {1, 2, 3, 4}",
    "detail": "MY_GISTS.282774d283.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "empty_set",
    "kind": 5,
    "importPath": "MY_GISTS.282774d283.python-cheatsheet",
    "description": "MY_GISTS.282774d283.python-cheatsheet",
    "peekOfCode": "empty_set = set()\n# Initialize a set with a bunch of values. Yeah, it looks a bit like a dict. Sorry.\nsome_set = {1, 1, 2, 2, 3, 4}  # some_set is now {1, 2, 3, 4}\n# Similar to keys of a dictionary, elements of a set have to be immutable.\ninvalid_set = {[1], 1}  # => Raises a TypeError: unhashable type: 'list'\nvalid_set = {(1,), 1}\n# Add one more item to the set\nfilled_set = some_set\nfilled_set.add(5)  # filled_set is now {1, 2, 3, 4, 5}\n# Sets do not have duplicate elements",
    "detail": "MY_GISTS.282774d283.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "some_set",
    "kind": 5,
    "importPath": "MY_GISTS.282774d283.python-cheatsheet",
    "description": "MY_GISTS.282774d283.python-cheatsheet",
    "peekOfCode": "some_set = {1, 1, 2, 2, 3, 4}  # some_set is now {1, 2, 3, 4}\n# Similar to keys of a dictionary, elements of a set have to be immutable.\ninvalid_set = {[1], 1}  # => Raises a TypeError: unhashable type: 'list'\nvalid_set = {(1,), 1}\n# Add one more item to the set\nfilled_set = some_set\nfilled_set.add(5)  # filled_set is now {1, 2, 3, 4, 5}\n# Sets do not have duplicate elements\nfilled_set.add(5)  # it remains as before {1, 2, 3, 4, 5}\n# Do set intersection with &",
    "detail": "MY_GISTS.282774d283.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "invalid_set",
    "kind": 5,
    "importPath": "MY_GISTS.282774d283.python-cheatsheet",
    "description": "MY_GISTS.282774d283.python-cheatsheet",
    "peekOfCode": "invalid_set = {[1], 1}  # => Raises a TypeError: unhashable type: 'list'\nvalid_set = {(1,), 1}\n# Add one more item to the set\nfilled_set = some_set\nfilled_set.add(5)  # filled_set is now {1, 2, 3, 4, 5}\n# Sets do not have duplicate elements\nfilled_set.add(5)  # it remains as before {1, 2, 3, 4, 5}\n# Do set intersection with &\nother_set = {3, 4, 5, 6}\nfilled_set & other_set  # => {3, 4, 5}",
    "detail": "MY_GISTS.282774d283.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "valid_set",
    "kind": 5,
    "importPath": "MY_GISTS.282774d283.python-cheatsheet",
    "description": "MY_GISTS.282774d283.python-cheatsheet",
    "peekOfCode": "valid_set = {(1,), 1}\n# Add one more item to the set\nfilled_set = some_set\nfilled_set.add(5)  # filled_set is now {1, 2, 3, 4, 5}\n# Sets do not have duplicate elements\nfilled_set.add(5)  # it remains as before {1, 2, 3, 4, 5}\n# Do set intersection with &\nother_set = {3, 4, 5, 6}\nfilled_set & other_set  # => {3, 4, 5}\n# Do set union with |",
    "detail": "MY_GISTS.282774d283.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "filled_set",
    "kind": 5,
    "importPath": "MY_GISTS.282774d283.python-cheatsheet",
    "description": "MY_GISTS.282774d283.python-cheatsheet",
    "peekOfCode": "filled_set = some_set\nfilled_set.add(5)  # filled_set is now {1, 2, 3, 4, 5}\n# Sets do not have duplicate elements\nfilled_set.add(5)  # it remains as before {1, 2, 3, 4, 5}\n# Do set intersection with &\nother_set = {3, 4, 5, 6}\nfilled_set & other_set  # => {3, 4, 5}\n# Do set union with |\nfilled_set | other_set  # => {1, 2, 3, 4, 5, 6}\n# Do set difference with -",
    "detail": "MY_GISTS.282774d283.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "other_set",
    "kind": 5,
    "importPath": "MY_GISTS.282774d283.python-cheatsheet",
    "description": "MY_GISTS.282774d283.python-cheatsheet",
    "peekOfCode": "other_set = {3, 4, 5, 6}\nfilled_set & other_set  # => {3, 4, 5}\n# Do set union with |\nfilled_set | other_set  # => {1, 2, 3, 4, 5, 6}\n# Do set difference with -\n{1, 2, 3, 4} - {2, 3, 5}  # => {1, 4}\n# Do set symmetric difference with ^\n{1, 2, 3, 4} ^ {2, 3, 5}  # => {1, 4, 5}\n# Check if set on the left is a superset of set on the right\n{1, 2} >= {1, 2, 3} # => False",
    "detail": "MY_GISTS.282774d283.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "some_var",
    "kind": 5,
    "importPath": "MY_GISTS.282774d283.python-cheatsheet",
    "description": "MY_GISTS.282774d283.python-cheatsheet",
    "peekOfCode": "some_var = 5\n# Here is an if statement. Indentation is significant in Python!\n# Convention is to use four spaces, not tabs.\n# This prints \"some_var is smaller than 10\"\nif some_var > 10:\n    print(\"some_var is totally bigger than 10.\")\nelif some_var < 10:    # This elif clause is optional.\n    print(\"some_var is smaller than 10.\")\nelse:                  # This is optional too.\n    print(\"some_var is indeed 10.\")",
    "detail": "MY_GISTS.282774d283.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "list",
    "kind": 5,
    "importPath": "MY_GISTS.282774d283.python-cheatsheet",
    "description": "MY_GISTS.282774d283.python-cheatsheet",
    "peekOfCode": "list = [\"dog\", \"cat\", \"mouse\"]\nfor i, value in enumerate(list):\n    print(i, value)\n\"\"\"\nWhile loops go until a condition is no longer met.\nprints:\n    0\n    1\n    2\n    3",
    "detail": "MY_GISTS.282774d283.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "x",
    "kind": 5,
    "importPath": "MY_GISTS.282774d283.python-cheatsheet",
    "description": "MY_GISTS.282774d283.python-cheatsheet",
    "peekOfCode": "x = 0\nwhile x < 4:\n    print(x)\n    x += 1  # Shorthand for x = x + 1\n# Handle exceptions with a try/except block\ntry:\n    # Use \"raise\" to raise an error\n    raise IndexError(\"This is an index error\")\nexcept IndexError as e:\n    pass                 # Pass is just a no-op. Usually you would do recovery here.",
    "detail": "MY_GISTS.282774d283.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "contents",
    "kind": 5,
    "importPath": "MY_GISTS.282774d283.python-cheatsheet",
    "description": "MY_GISTS.282774d283.python-cheatsheet",
    "peekOfCode": "contents = {\"aa\": 12, \"bb\": 21}\nwith open(\"myfile1.txt\", \"w+\") as file:\n    file.write(str(contents))        # writes a string to a file\nwith open(\"myfile2.txt\", \"w+\") as file:\n    file.write(json.dumps(contents)) # writes an object to a file\n# Reading from a file\nwith open('myfile1.txt', \"r+\") as file:\n    contents = file.read()           # reads a string from a file\nprint(contents)\n# print: {\"aa\": 12, \"bb\": 21}",
    "detail": "MY_GISTS.282774d283.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "filled_dict",
    "kind": 5,
    "importPath": "MY_GISTS.282774d283.python-cheatsheet",
    "description": "MY_GISTS.282774d283.python-cheatsheet",
    "peekOfCode": "filled_dict = {\"one\": 1, \"two\": 2, \"three\": 3}\nour_iterable = filled_dict.keys()\nprint(our_iterable)  # => dict_keys(['one', 'two', 'three']). This is an object that implements our Iterable interface.\n# We can loop over it.\nfor i in our_iterable:\n    print(i)  # Prints one, two, three\n# However we cannot address elements by index.\nour_iterable[1]  # Raises a TypeError\n# An iterable is an object that knows how to create an iterator.\nour_iterator = iter(our_iterable)",
    "detail": "MY_GISTS.282774d283.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "our_iterable",
    "kind": 5,
    "importPath": "MY_GISTS.282774d283.python-cheatsheet",
    "description": "MY_GISTS.282774d283.python-cheatsheet",
    "peekOfCode": "our_iterable = filled_dict.keys()\nprint(our_iterable)  # => dict_keys(['one', 'two', 'three']). This is an object that implements our Iterable interface.\n# We can loop over it.\nfor i in our_iterable:\n    print(i)  # Prints one, two, three\n# However we cannot address elements by index.\nour_iterable[1]  # Raises a TypeError\n# An iterable is an object that knows how to create an iterator.\nour_iterator = iter(our_iterable)\n# Our iterator is an object that can remember the state as we traverse through it.",
    "detail": "MY_GISTS.282774d283.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "our_iterator",
    "kind": 5,
    "importPath": "MY_GISTS.282774d283.python-cheatsheet",
    "description": "MY_GISTS.282774d283.python-cheatsheet",
    "peekOfCode": "our_iterator = iter(our_iterable)\n# Our iterator is an object that can remember the state as we traverse through it.\n# We get the next object with \"next()\".\nnext(our_iterator)  # => \"one\"\n# It maintains state as we iterate.\nnext(our_iterator)  # => \"two\"\nnext(our_iterator)  # => \"three\"\n# After the iterator has returned all of its data, it raises a StopIteration exception\nnext(our_iterator)  # Raises StopIteration\n# We can also loop over it, in fact, \"for\" does this implicitly!",
    "detail": "MY_GISTS.282774d283.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "our_iterator",
    "kind": 5,
    "importPath": "MY_GISTS.282774d283.python-cheatsheet",
    "description": "MY_GISTS.282774d283.python-cheatsheet",
    "peekOfCode": "our_iterator = iter(our_iterable)\nfor i in our_iterator:\n    print(i)  # Prints one, two, three\n# You can grab all the elements of an iterable or iterator by calling list() on it.\nlist(our_iterable)  # => Returns [\"one\", \"two\", \"three\"]\nlist(our_iterator)  # => Returns [] because state is saved\n####################################################\n## 4. Functions\n####################################################\n# Use \"def\" to create new functions",
    "detail": "MY_GISTS.282774d283.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "args",
    "kind": 5,
    "importPath": "MY_GISTS.282774d283.python-cheatsheet",
    "description": "MY_GISTS.282774d283.python-cheatsheet",
    "peekOfCode": "args = (1, 2, 3, 4)\nkwargs = {\"a\": 3, \"b\": 4}\nall_the_args(*args)            # equivalent to all_the_args(1, 2, 3, 4)\nall_the_args(**kwargs)         # equivalent to all_the_args(a=3, b=4)\nall_the_args(*args, **kwargs)  # equivalent to all_the_args(1, 2, 3, 4, a=3, b=4)\n# Returning multiple values (with tuple assignments)\ndef swap(x, y):\n    return y, x  # Return multiple values as a tuple without the parenthesis.\n                 # (Note: parenthesis have been excluded but can be included)\nx = 1",
    "detail": "MY_GISTS.282774d283.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "kwargs",
    "kind": 5,
    "importPath": "MY_GISTS.282774d283.python-cheatsheet",
    "description": "MY_GISTS.282774d283.python-cheatsheet",
    "peekOfCode": "kwargs = {\"a\": 3, \"b\": 4}\nall_the_args(*args)            # equivalent to all_the_args(1, 2, 3, 4)\nall_the_args(**kwargs)         # equivalent to all_the_args(a=3, b=4)\nall_the_args(*args, **kwargs)  # equivalent to all_the_args(1, 2, 3, 4, a=3, b=4)\n# Returning multiple values (with tuple assignments)\ndef swap(x, y):\n    return y, x  # Return multiple values as a tuple without the parenthesis.\n                 # (Note: parenthesis have been excluded but can be included)\nx = 1\ny = 2",
    "detail": "MY_GISTS.282774d283.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "x",
    "kind": 5,
    "importPath": "MY_GISTS.282774d283.python-cheatsheet",
    "description": "MY_GISTS.282774d283.python-cheatsheet",
    "peekOfCode": "x = 1\ny = 2\nx, y = swap(x, y)     # => x = 2, y = 1\n# (x, y) = swap(x,y)  # Again parenthesis have been excluded but can be included.\n# Function Scope\nx = 5\ndef set_x(num):\n    # Local var x not the same as global variable x\n    x = num    # => 43\n    print(x)   # => 43",
    "detail": "MY_GISTS.282774d283.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "y",
    "kind": 5,
    "importPath": "MY_GISTS.282774d283.python-cheatsheet",
    "description": "MY_GISTS.282774d283.python-cheatsheet",
    "peekOfCode": "y = 2\nx, y = swap(x, y)     # => x = 2, y = 1\n# (x, y) = swap(x,y)  # Again parenthesis have been excluded but can be included.\n# Function Scope\nx = 5\ndef set_x(num):\n    # Local var x not the same as global variable x\n    x = num    # => 43\n    print(x)   # => 43\ndef set_global_x(num):",
    "detail": "MY_GISTS.282774d283.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "x",
    "kind": 5,
    "importPath": "MY_GISTS.282774d283.python-cheatsheet",
    "description": "MY_GISTS.282774d283.python-cheatsheet",
    "peekOfCode": "x = 5\ndef set_x(num):\n    # Local var x not the same as global variable x\n    x = num    # => 43\n    print(x)   # => 43\ndef set_global_x(num):\n    global x\n    print(x)   # => 5\n    x = num    # global var x is now set to 6\n    print(x)   # => 6",
    "detail": "MY_GISTS.282774d283.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "add_10",
    "kind": 5,
    "importPath": "MY_GISTS.282774d283.python-cheatsheet",
    "description": "MY_GISTS.282774d283.python-cheatsheet",
    "peekOfCode": "add_10 = create_adder(10)\nadd_10(3)   # => 13\n# There are also anonymous functions\n(lambda x: x > 2)(3)                  # => True\n(lambda x, y: x ** 2 + y ** 2)(2, 1)  # => 5\n# There are built-in higher order functions\nlist(map(add_10, [1, 2, 3]))          # => [11, 12, 13]\nlist(map(max, [1, 2, 3], [4, 2, 1]))  # => [4, 2, 3]\nlist(filter(lambda x: x > 5, [3, 4, 5, 6, 7]))  # => [6, 7]\n# We can use list comprehensions for nice maps and filters",
    "detail": "MY_GISTS.282774d283.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "values",
    "kind": 5,
    "importPath": "MY_GISTS.282774d283.python-cheatsheet",
    "description": "MY_GISTS.282774d283.python-cheatsheet",
    "peekOfCode": "values = (-x for x in [1,2,3,4,5])\nfor x in values:\n    print(x)  # prints -1 -2 -3 -4 -5 to console/terminal\n# You can also cast a generator comprehension directly to a list.\nvalues = (-x for x in [1,2,3,4,5])\ngen_to_list = list(values)\nprint(gen_to_list)  # => [-1, -2, -3, -4, -5]\n# Decorators\n# In this example `beg` wraps `say`. If say_please is True then it\n# will change the returned message.",
    "detail": "MY_GISTS.282774d283.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "values",
    "kind": 5,
    "importPath": "MY_GISTS.282774d283.python-cheatsheet",
    "description": "MY_GISTS.282774d283.python-cheatsheet",
    "peekOfCode": "values = (-x for x in [1,2,3,4,5])\ngen_to_list = list(values)\nprint(gen_to_list)  # => [-1, -2, -3, -4, -5]\n# Decorators\n# In this example `beg` wraps `say`. If say_please is True then it\n# will change the returned message.\nfrom functools import wraps\ndef beg(target_function):\n    @wraps(target_function)\n    def wrapper(*args, **kwargs):",
    "detail": "MY_GISTS.282774d283.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "gen_to_list",
    "kind": 5,
    "importPath": "MY_GISTS.282774d283.python-cheatsheet",
    "description": "MY_GISTS.282774d283.python-cheatsheet",
    "peekOfCode": "gen_to_list = list(values)\nprint(gen_to_list)  # => [-1, -2, -3, -4, -5]\n# Decorators\n# In this example `beg` wraps `say`. If say_please is True then it\n# will change the returned message.\nfrom functools import wraps\ndef beg(target_function):\n    @wraps(target_function)\n    def wrapper(*args, **kwargs):\n        msg, say_please = target_function(*args, **kwargs)",
    "detail": "MY_GISTS.282774d283.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "url",
    "kind": 5,
    "importPath": "MY_GISTS.28e98de8b7.mapper",
    "description": "MY_GISTS.28e98de8b7.mapper",
    "peekOfCode": "url = \"https://scrapethissite.com\"\n# a queue of urls to be crawled\nnew_urls = deque([url])\n# a set of urls that we have already been processed \nprocessed_urls = set()\n# a set of domains inside the target website\nlocal_urls = set()\n# a set of domains outside the target website\nforeign_urls = set()\n# a set of broken urls",
    "detail": "MY_GISTS.28e98de8b7.mapper",
    "documentation": {}
  },
  {
    "label": "new_urls",
    "kind": 5,
    "importPath": "MY_GISTS.28e98de8b7.mapper",
    "description": "MY_GISTS.28e98de8b7.mapper",
    "peekOfCode": "new_urls = deque([url])\n# a set of urls that we have already been processed \nprocessed_urls = set()\n# a set of domains inside the target website\nlocal_urls = set()\n# a set of domains outside the target website\nforeign_urls = set()\n# a set of broken urls\nbroken_urls = set()\n# process urls one by one until we exhaust the queue",
    "detail": "MY_GISTS.28e98de8b7.mapper",
    "documentation": {}
  },
  {
    "label": "processed_urls",
    "kind": 5,
    "importPath": "MY_GISTS.28e98de8b7.mapper",
    "description": "MY_GISTS.28e98de8b7.mapper",
    "peekOfCode": "processed_urls = set()\n# a set of domains inside the target website\nlocal_urls = set()\n# a set of domains outside the target website\nforeign_urls = set()\n# a set of broken urls\nbroken_urls = set()\n# process urls one by one until we exhaust the queue\nwhile len(new_urls):\n    # move next url from the queue to the set of processed urls",
    "detail": "MY_GISTS.28e98de8b7.mapper",
    "documentation": {}
  },
  {
    "label": "local_urls",
    "kind": 5,
    "importPath": "MY_GISTS.28e98de8b7.mapper",
    "description": "MY_GISTS.28e98de8b7.mapper",
    "peekOfCode": "local_urls = set()\n# a set of domains outside the target website\nforeign_urls = set()\n# a set of broken urls\nbroken_urls = set()\n# process urls one by one until we exhaust the queue\nwhile len(new_urls):\n    # move next url from the queue to the set of processed urls\n    url = new_urls.popleft()\n    processed_urls.add(url)",
    "detail": "MY_GISTS.28e98de8b7.mapper",
    "documentation": {}
  },
  {
    "label": "foreign_urls",
    "kind": 5,
    "importPath": "MY_GISTS.28e98de8b7.mapper",
    "description": "MY_GISTS.28e98de8b7.mapper",
    "peekOfCode": "foreign_urls = set()\n# a set of broken urls\nbroken_urls = set()\n# process urls one by one until we exhaust the queue\nwhile len(new_urls):\n    # move next url from the queue to the set of processed urls\n    url = new_urls.popleft()\n    processed_urls.add(url)\n    # get url's content\n    print(\"Processing %s\" % url)",
    "detail": "MY_GISTS.28e98de8b7.mapper",
    "documentation": {}
  },
  {
    "label": "broken_urls",
    "kind": 5,
    "importPath": "MY_GISTS.28e98de8b7.mapper",
    "description": "MY_GISTS.28e98de8b7.mapper",
    "peekOfCode": "broken_urls = set()\n# process urls one by one until we exhaust the queue\nwhile len(new_urls):\n    # move next url from the queue to the set of processed urls\n    url = new_urls.popleft()\n    processed_urls.add(url)\n    # get url's content\n    print(\"Processing %s\" % url)\n    try:\n        response = requests.get(url)",
    "detail": "MY_GISTS.28e98de8b7.mapper",
    "documentation": {}
  },
  {
    "label": "user",
    "kind": 5,
    "importPath": "MY_GISTS.2f49d46620.gist.py",
    "description": "MY_GISTS.2f49d46620.gist.py",
    "peekOfCode": "user = sys.argv[1]\nr = requests.get('https://api.github.com/users/{0}/gists'.format(user))\nfor i in r.json():\n    call(['git', 'clone', i['git_pull_url']])\n    description_file = './{0}/description.txt'.format(i['id'])\n    with open(description_file, 'w') as f:\n        f.write('{0}\\n'.format(i['description']))",
    "detail": "MY_GISTS.2f49d46620.gist.py",
    "documentation": {}
  },
  {
    "label": "r",
    "kind": 5,
    "importPath": "MY_GISTS.2f49d46620.gist.py",
    "description": "MY_GISTS.2f49d46620.gist.py",
    "peekOfCode": "r = requests.get('https://api.github.com/users/{0}/gists'.format(user))\nfor i in r.json():\n    call(['git', 'clone', i['git_pull_url']])\n    description_file = './{0}/description.txt'.format(i['id'])\n    with open(description_file, 'w') as f:\n        f.write('{0}\\n'.format(i['description']))",
    "detail": "MY_GISTS.2f49d46620.gist.py",
    "documentation": {}
  },
  {
    "label": "PagesDataStore",
    "kind": 6,
    "importPath": "MY_GISTS.30f4377841.web-craw",
    "description": "MY_GISTS.30f4377841.web-craw",
    "peekOfCode": "class PagesDataStore(object):\n    def __init__(self, db):\n        self.db = db\n        pass\n    def add_link_to_crawl(self, url):\n        \"\"\"Add the given link to `links_to_crawl`.\"\"\"\n        pass\n    def remove_link_to_crawl(self, url):\n        \"\"\"Remove the given link from `links_to_crawl`.\"\"\"\n        pass",
    "detail": "MY_GISTS.30f4377841.web-craw",
    "documentation": {}
  },
  {
    "label": "Page",
    "kind": 6,
    "importPath": "MY_GISTS.30f4377841.web-craw",
    "description": "MY_GISTS.30f4377841.web-craw",
    "peekOfCode": "class Page(object):\n    def __init__(self, url, contents, child_urls):\n        self.url = url\n        self.contents = contents\n        self.child_urls = child_urls\n        self.signature = self.create_signature()\n    def create_signature(self):\n        # Create signature based on url and contents\n        pass\nclass Crawler(object):",
    "detail": "MY_GISTS.30f4377841.web-craw",
    "documentation": {}
  },
  {
    "label": "Crawler",
    "kind": 6,
    "importPath": "MY_GISTS.30f4377841.web-craw",
    "description": "MY_GISTS.30f4377841.web-craw",
    "peekOfCode": "class Crawler(object):\n    def __init__(self, pages, data_store, reverse_index_queue, doc_index_queue):\n        self.pages = pages\n        self.data_store = data_store\n        self.reverse_index_queue = reverse_index_queue\n        self.doc_index_queue = doc_index_queue\n    def crawl_page(self, page):\n        for url in page.child_urls:\n            self.data_store.add_link_to_crawl(url)\n        self.reverse_index_queue.generate(page)",
    "detail": "MY_GISTS.30f4377841.web-craw",
    "documentation": {}
  },
  {
    "label": "process_dir",
    "kind": 2,
    "importPath": "MY_GISTS.33427d20d2.generate-html-sitemap",
    "description": "MY_GISTS.33427d20d2.generate-html-sitemap",
    "peekOfCode": "def process_dir(top_dir, opts):\n    glob_patt = opts.filter or '*'\n    path_top_dir: Path\n    path_top_dir = Path(top_dir)\n    index_file = None\n    index_path = Path(path_top_dir, opts.output_file)\n    if opts.verbose:\n        print(f'Traversing dir {path_top_dir.absolute()}')\n    try:\n        index_file = open(index_path, 'w')",
    "detail": "MY_GISTS.33427d20d2.generate-html-sitemap",
    "documentation": {}
  },
  {
    "label": "pretty_size",
    "kind": 2,
    "importPath": "MY_GISTS.33427d20d2.generate-html-sitemap",
    "description": "MY_GISTS.33427d20d2.generate-html-sitemap",
    "peekOfCode": "def pretty_size(bytes, units=UNITS_MAPPING):\n    \"\"\"Human-readable file sizes.\n    ripped from https://pypi.python.org/pypi/hurry.filesize/\n    \"\"\"\n    for factor, suffix in units:\n        if bytes >= factor:\n            break\n    amount = int(bytes / factor)\n    if isinstance(suffix, tuple):\n        singular, multiple = suffix",
    "detail": "MY_GISTS.33427d20d2.generate-html-sitemap",
    "documentation": {}
  },
  {
    "label": "DEFAULT_OUTPUT_FILE",
    "kind": 5,
    "importPath": "MY_GISTS.33427d20d2.generate-html-sitemap",
    "description": "MY_GISTS.33427d20d2.generate-html-sitemap",
    "peekOfCode": "DEFAULT_OUTPUT_FILE = 'index.html'\ndef process_dir(top_dir, opts):\n    glob_patt = opts.filter or '*'\n    path_top_dir: Path\n    path_top_dir = Path(top_dir)\n    index_file = None\n    index_path = Path(path_top_dir, opts.output_file)\n    if opts.verbose:\n        print(f'Traversing dir {path_top_dir.absolute()}')\n    try:",
    "detail": "MY_GISTS.33427d20d2.generate-html-sitemap",
    "documentation": {}
  },
  {
    "label": "UNITS_MAPPING",
    "kind": 5,
    "importPath": "MY_GISTS.33427d20d2.generate-html-sitemap",
    "description": "MY_GISTS.33427d20d2.generate-html-sitemap",
    "peekOfCode": "UNITS_MAPPING = [\n    (1024 ** 5, ' PB'),\n    (1024 ** 4, ' TB'),\n    (1024 ** 3, ' GB'),\n    (1024 ** 2, ' MB'),\n    (1024 ** 1, ' KB'),\n    (1024 ** 0, (' byte', ' bytes')),\n]\ndef pretty_size(bytes, units=UNITS_MAPPING):\n    \"\"\"Human-readable file sizes.",
    "detail": "MY_GISTS.33427d20d2.generate-html-sitemap",
    "documentation": {}
  },
  {
    "label": "TestMixedSorting",
    "kind": 6,
    "importPath": "MY_GISTS.36edf2915f.05_mixed_sorting",
    "description": "MY_GISTS.36edf2915f.05_mixed_sorting",
    "peekOfCode": "class TestMixedSorting(unittest.TestCase):\n    def test_1(self):\n        self.assertEqual(mixed_sorting(\n            [8, 13, 11, 90, -5, 4]), [4, 13, 11, 8, -5, 90])\n    def test_2(self):\n        self.assertEqual(mixed_sorting([1, 2, 3, 6, 5, 4]), [5, 2, 3, 4, 1, 6])\nif __name__ == '__main__':\n    unittest.main(verbosity=2)",
    "detail": "MY_GISTS.36edf2915f.05_mixed_sorting",
    "documentation": {}
  },
  {
    "label": "mixed_sorting",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.05_mixed_sorting",
    "description": "MY_GISTS.36edf2915f.05_mixed_sorting",
    "peekOfCode": "def mixed_sorting(nums):\n    positions = []\n    odd = []\n    even = []\n    sorted_list = []\n    for i in nums:\n        if i%2 == 0:\n            even.append(i)\n            positions.append(\"E\")\n        else:",
    "detail": "MY_GISTS.36edf2915f.05_mixed_sorting",
    "documentation": {}
  },
  {
    "label": "nums",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.05_mixed_sorting",
    "description": "MY_GISTS.36edf2915f.05_mixed_sorting",
    "peekOfCode": "nums = [8, 13, 11, 90, -5, 4]\nOutput\n[4, 13, 11, 8, -5, 90]\nExplanation\nThe even numbers are sorted in increasing order, the odd numbers are sorted in \ndecreasing number, and the relative positions were \n[even, odd, odd, even, odd, even] and remain the same after sorting.\n\"\"\"\n# solution\nimport unittest",
    "detail": "MY_GISTS.36edf2915f.05_mixed_sorting",
    "documentation": {}
  },
  {
    "label": "t",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.56",
    "description": "MY_GISTS.36edf2915f.56",
    "peekOfCode": "t = turtle.Turtle()\nt.circle(50)",
    "detail": "MY_GISTS.36edf2915f.56",
    "documentation": {}
  },
  {
    "label": "solution",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.A solution to project euler problem 3",
    "description": "MY_GISTS.36edf2915f.A solution to project euler problem 3",
    "peekOfCode": "def solution(n: int = 600851475143) -> int:\n    \"\"\"Returns the largest prime factor of a given number n.\n    >>> solution(13195)\n    29\n    >>> solution(10)\n    5\n    >>> solution(17)\n    17\n    >>> solution(3.4)\n    3",
    "detail": "MY_GISTS.36edf2915f.A solution to project euler problem 3",
    "documentation": {}
  },
  {
    "label": "IInd_func",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.Aakanksha",
    "description": "MY_GISTS.36edf2915f.Aakanksha",
    "peekOfCode": "def IInd_func():\n  count1=0\n  for j in range(5):\n    a=0\n    count=0\n    user_pwd = input(\"\")        #password you remember\n    for i in range(len(pwd)):\n      if user_pwd[i] == pwd[a]:       #comparing remembered pwd with fixed pwd\n        a +=1\n        count+=1 ",
    "detail": "MY_GISTS.36edf2915f.Aakanksha",
    "documentation": {}
  },
  {
    "label": "number1",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.ABC",
    "description": "MY_GISTS.36edf2915f.ABC",
    "peekOfCode": "number1 = input(\"First number: \") \nnumber2 = input(\"\\nSecond number: \") \n# Adding two numbers \n# User might also enter float numbers \nsum = float(number1) + float(number2) \n# Display the sum \n# will print value in float \nprint(\"The sum of {0} and {1} is {2}\" .format(number1, number2, sum))",
    "detail": "MY_GISTS.36edf2915f.ABC",
    "documentation": {}
  },
  {
    "label": "number2",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.ABC",
    "description": "MY_GISTS.36edf2915f.ABC",
    "peekOfCode": "number2 = input(\"\\nSecond number: \") \n# Adding two numbers \n# User might also enter float numbers \nsum = float(number1) + float(number2) \n# Display the sum \n# will print value in float \nprint(\"The sum of {0} and {1} is {2}\" .format(number1, number2, sum))",
    "detail": "MY_GISTS.36edf2915f.ABC",
    "documentation": {}
  },
  {
    "label": "sum",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.ABC",
    "description": "MY_GISTS.36edf2915f.ABC",
    "peekOfCode": "sum = float(number1) + float(number2) \n# Display the sum \n# will print value in float \nprint(\"The sum of {0} and {1} is {2}\" .format(number1, number2, sum))",
    "detail": "MY_GISTS.36edf2915f.ABC",
    "documentation": {}
  },
  {
    "label": "num1",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.add 2 number",
    "description": "MY_GISTS.36edf2915f.add 2 number",
    "peekOfCode": "num1 = 15\nnum2 = 12\n# Adding two nos \nsum = num1 + num2 \n# printing values \nprint(\"Sum of {0} and {1} is {2}\" .format(num1, num2, sum))",
    "detail": "MY_GISTS.36edf2915f.add 2 number",
    "documentation": {}
  },
  {
    "label": "num2",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.add 2 number",
    "description": "MY_GISTS.36edf2915f.add 2 number",
    "peekOfCode": "num2 = 12\n# Adding two nos \nsum = num1 + num2 \n# printing values \nprint(\"Sum of {0} and {1} is {2}\" .format(num1, num2, sum))",
    "detail": "MY_GISTS.36edf2915f.add 2 number",
    "documentation": {}
  },
  {
    "label": "sum",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.add 2 number",
    "description": "MY_GISTS.36edf2915f.add 2 number",
    "peekOfCode": "sum = num1 + num2 \n# printing values \nprint(\"Sum of {0} and {1} is {2}\" .format(num1, num2, sum))",
    "detail": "MY_GISTS.36edf2915f.add 2 number",
    "documentation": {}
  },
  {
    "label": "num1",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.add 2 numbers",
    "description": "MY_GISTS.36edf2915f.add 2 numbers",
    "peekOfCode": "num1 = 1.5\nnum2 = 6.3\n# Add two numbers\nsum = num1 + num2\n# Display the sum\nprint('The sum of {0} and {1} is {2}'.format(num1, num2, sum))",
    "detail": "MY_GISTS.36edf2915f.add 2 numbers",
    "documentation": {}
  },
  {
    "label": "num2",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.add 2 numbers",
    "description": "MY_GISTS.36edf2915f.add 2 numbers",
    "peekOfCode": "num2 = 6.3\n# Add two numbers\nsum = num1 + num2\n# Display the sum\nprint('The sum of {0} and {1} is {2}'.format(num1, num2, sum))",
    "detail": "MY_GISTS.36edf2915f.add 2 numbers",
    "documentation": {}
  },
  {
    "label": "sum",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.add 2 numbers",
    "description": "MY_GISTS.36edf2915f.add 2 numbers",
    "peekOfCode": "sum = num1 + num2\n# Display the sum\nprint('The sum of {0} and {1} is {2}'.format(num1, num2, sum))",
    "detail": "MY_GISTS.36edf2915f.add 2 numbers",
    "documentation": {}
  },
  {
    "label": "num1",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.add two no",
    "description": "MY_GISTS.36edf2915f.add two no",
    "peekOfCode": "num1 = 1.5\nnum2 = 6.3\nsum = num1 + num2\nprint('The sum of {0} and {1} is {2}'.format(num1, num2, sum))",
    "detail": "MY_GISTS.36edf2915f.add two no",
    "documentation": {}
  },
  {
    "label": "num2",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.add two no",
    "description": "MY_GISTS.36edf2915f.add two no",
    "peekOfCode": "num2 = 6.3\nsum = num1 + num2\nprint('The sum of {0} and {1} is {2}'.format(num1, num2, sum))",
    "detail": "MY_GISTS.36edf2915f.add two no",
    "documentation": {}
  },
  {
    "label": "sum",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.add two no",
    "description": "MY_GISTS.36edf2915f.add two no",
    "peekOfCode": "sum = num1 + num2\nprint('The sum of {0} and {1} is {2}'.format(num1, num2, sum))",
    "detail": "MY_GISTS.36edf2915f.add two no",
    "documentation": {}
  },
  {
    "label": "num1",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.add two number",
    "description": "MY_GISTS.36edf2915f.add two number",
    "peekOfCode": "num1 = 1.5\nnum2 = 6.3\n# Add two numbers\nsum = num1 + num2\n# Display the sum\nprint('The sum of {0} and {1} is {2}'.format(num1, num2, sum))",
    "detail": "MY_GISTS.36edf2915f.add two number",
    "documentation": {}
  },
  {
    "label": "num2",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.add two number",
    "description": "MY_GISTS.36edf2915f.add two number",
    "peekOfCode": "num2 = 6.3\n# Add two numbers\nsum = num1 + num2\n# Display the sum\nprint('The sum of {0} and {1} is {2}'.format(num1, num2, sum))",
    "detail": "MY_GISTS.36edf2915f.add two number",
    "documentation": {}
  },
  {
    "label": "sum",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.add two number",
    "description": "MY_GISTS.36edf2915f.add two number",
    "peekOfCode": "sum = num1 + num2\n# Display the sum\nprint('The sum of {0} and {1} is {2}'.format(num1, num2, sum))",
    "detail": "MY_GISTS.36edf2915f.add two number",
    "documentation": {}
  },
  {
    "label": "num1",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.Add two numbers",
    "description": "MY_GISTS.36edf2915f.Add two numbers",
    "peekOfCode": "num1 = 1.5\nnum2 = 6.3\n# Add two numbers\nsum = num1 + num2\n# Display the sum\nprint('The sum of {0} and {1} is {2}'.format(num1, num2, sum))",
    "detail": "MY_GISTS.36edf2915f.Add two numbers",
    "documentation": {}
  },
  {
    "label": "num2",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.Add two numbers",
    "description": "MY_GISTS.36edf2915f.Add two numbers",
    "peekOfCode": "num2 = 6.3\n# Add two numbers\nsum = num1 + num2\n# Display the sum\nprint('The sum of {0} and {1} is {2}'.format(num1, num2, sum))",
    "detail": "MY_GISTS.36edf2915f.Add two numbers",
    "documentation": {}
  },
  {
    "label": "sum",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.Add two numbers",
    "description": "MY_GISTS.36edf2915f.Add two numbers",
    "peekOfCode": "sum = num1 + num2\n# Display the sum\nprint('The sum of {0} and {1} is {2}'.format(num1, num2, sum))",
    "detail": "MY_GISTS.36edf2915f.Add two numbers",
    "documentation": {}
  },
  {
    "label": "a",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.addtwonumber",
    "description": "MY_GISTS.36edf2915f.addtwonumber",
    "peekOfCode": "a = int(input(\"enter first number: \"))\nb = int(input(\"enter second number: \"))\nsum = a + b\nprint(\"sum:\", sum)",
    "detail": "MY_GISTS.36edf2915f.addtwonumber",
    "documentation": {}
  },
  {
    "label": "b",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.addtwonumber",
    "description": "MY_GISTS.36edf2915f.addtwonumber",
    "peekOfCode": "b = int(input(\"enter second number: \"))\nsum = a + b\nprint(\"sum:\", sum)",
    "detail": "MY_GISTS.36edf2915f.addtwonumber",
    "documentation": {}
  },
  {
    "label": "sum",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.addtwonumber",
    "description": "MY_GISTS.36edf2915f.addtwonumber",
    "peekOfCode": "sum = a + b\nprint(\"sum:\", sum)",
    "detail": "MY_GISTS.36edf2915f.addtwonumber",
    "documentation": {}
  },
  {
    "label": "Node",
    "kind": 6,
    "importPath": "MY_GISTS.36edf2915f.Add_two_Linked_List",
    "description": "MY_GISTS.36edf2915f.Add_two_Linked_List",
    "peekOfCode": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\nclass Linked_List:\n    def __init__(self):\n        self.head = None\n    def Insert_At_Beginning(self, new_data):\n        new_node = Node(new_data)\n        if self.head is None:",
    "detail": "MY_GISTS.36edf2915f.Add_two_Linked_List",
    "documentation": {}
  },
  {
    "label": "Linked_List",
    "kind": 6,
    "importPath": "MY_GISTS.36edf2915f.Add_two_Linked_List",
    "description": "MY_GISTS.36edf2915f.Add_two_Linked_List",
    "peekOfCode": "class Linked_List:\n    def __init__(self):\n        self.head = None\n    def Insert_At_Beginning(self, new_data):\n        new_node = Node(new_data)\n        if self.head is None:\n            self.head = new_node\n            return\n        new_node.next = self.head\n        self.head = new_node",
    "detail": "MY_GISTS.36edf2915f.Add_two_Linked_List",
    "documentation": {}
  },
  {
    "label": "Repeat",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.aj",
    "description": "MY_GISTS.36edf2915f.aj",
    "peekOfCode": "def Repeat(x): \n    _size = len(x) \n    repeated = [] \n    for i in range(_size): \n        k = i + 1\n        for j in range(k, _size): \n            if x[i] == x[j] and x[i] not in repeated: \n                repeated.append(x[i]) \n    return repeated \nlist1 = [10, 20, 30, 20, 20, 30, 40,  ",
    "detail": "MY_GISTS.36edf2915f.aj",
    "documentation": {}
  },
  {
    "label": "list1",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.aj",
    "description": "MY_GISTS.36edf2915f.aj",
    "peekOfCode": "list1 = [10, 20, 30, 20, 20, 30, 40,  \n         50, -20, 60, 60, -20, -20] \nprint(Repeat(list1))",
    "detail": "MY_GISTS.36edf2915f.aj",
    "documentation": {}
  },
  {
    "label": "get_headlines",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.alexa_news_headlines",
    "description": "MY_GISTS.36edf2915f.alexa_news_headlines",
    "peekOfCode": "def get_headlines():\n    user_pass_dict = {'user': 'USERNAME', 'passwd': \"PASSWORD\", 'api_type': 'json'}\n    sess = requests.Session()\n    sess.headers.update({'User-Agent': 'I am testing Alexa: nobi'})\n    sess.post(\"https://www.reddit.com/api/login/\", data=user_pass_dict)\n    time.sleep(1)\n    url = \"https://reddit.com/r/worldnews/.json?limit=10\"\n    html = sess.get(url)\n    data = json.loads(html.content.decode(\"utf-8\"))\n    titles = [unidecode.unidecode(listing['data']['title']) for listing in data['data']['children']]",
    "detail": "MY_GISTS.36edf2915f.alexa_news_headlines",
    "documentation": {}
  },
  {
    "label": "homepage",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.alexa_news_headlines",
    "description": "MY_GISTS.36edf2915f.alexa_news_headlines",
    "peekOfCode": "def homepage():\n    return \"hi there!\"\n@ask.launch\ndef start_skill():\n    welcome_message = \"Hello there, would you like to hear the news?\"\n    return question(welcome_message)\n@ask.intent(\"YesIntent\")\ndef share_headlines():\n    headlines = get_headlines()\n    headline_msg = \"The current world news headlines are {}\".format(headlines)",
    "detail": "MY_GISTS.36edf2915f.alexa_news_headlines",
    "documentation": {}
  },
  {
    "label": "start_skill",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.alexa_news_headlines",
    "description": "MY_GISTS.36edf2915f.alexa_news_headlines",
    "peekOfCode": "def start_skill():\n    welcome_message = \"Hello there, would you like to hear the news?\"\n    return question(welcome_message)\n@ask.intent(\"YesIntent\")\ndef share_headlines():\n    headlines = get_headlines()\n    headline_msg = \"The current world news headlines are {}\".format(headlines)\n    return statement(headline_msg)\n@ask.intent(\"NooIntent\")\ndef no_intent():",
    "detail": "MY_GISTS.36edf2915f.alexa_news_headlines",
    "documentation": {}
  },
  {
    "label": "share_headlines",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.alexa_news_headlines",
    "description": "MY_GISTS.36edf2915f.alexa_news_headlines",
    "peekOfCode": "def share_headlines():\n    headlines = get_headlines()\n    headline_msg = \"The current world news headlines are {}\".format(headlines)\n    return statement(headline_msg)\n@ask.intent(\"NooIntent\")\ndef no_intent():\n    bye_text = \"I am not sure why you then turned me on. Anyways, bye for now!\"\n    return statement(bye_text)\nif __name__ == \"__main__\":\n    app.run(port=8000, debug=True)",
    "detail": "MY_GISTS.36edf2915f.alexa_news_headlines",
    "documentation": {}
  },
  {
    "label": "no_intent",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.alexa_news_headlines",
    "description": "MY_GISTS.36edf2915f.alexa_news_headlines",
    "peekOfCode": "def no_intent():\n    bye_text = \"I am not sure why you then turned me on. Anyways, bye for now!\"\n    return statement(bye_text)\nif __name__ == \"__main__\":\n    app.run(port=8000, debug=True)",
    "detail": "MY_GISTS.36edf2915f.alexa_news_headlines",
    "documentation": {}
  },
  {
    "label": "app",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.alexa_news_headlines",
    "description": "MY_GISTS.36edf2915f.alexa_news_headlines",
    "peekOfCode": "app = Flask(__name__)\nask = Ask(app, \"/reddit_reader\")\ndef get_headlines():\n    user_pass_dict = {'user': 'USERNAME', 'passwd': \"PASSWORD\", 'api_type': 'json'}\n    sess = requests.Session()\n    sess.headers.update({'User-Agent': 'I am testing Alexa: nobi'})\n    sess.post(\"https://www.reddit.com/api/login/\", data=user_pass_dict)\n    time.sleep(1)\n    url = \"https://reddit.com/r/worldnews/.json?limit=10\"\n    html = sess.get(url)",
    "detail": "MY_GISTS.36edf2915f.alexa_news_headlines",
    "documentation": {}
  },
  {
    "label": "ask",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.alexa_news_headlines",
    "description": "MY_GISTS.36edf2915f.alexa_news_headlines",
    "peekOfCode": "ask = Ask(app, \"/reddit_reader\")\ndef get_headlines():\n    user_pass_dict = {'user': 'USERNAME', 'passwd': \"PASSWORD\", 'api_type': 'json'}\n    sess = requests.Session()\n    sess.headers.update({'User-Agent': 'I am testing Alexa: nobi'})\n    sess.post(\"https://www.reddit.com/api/login/\", data=user_pass_dict)\n    time.sleep(1)\n    url = \"https://reddit.com/r/worldnews/.json?limit=10\"\n    html = sess.get(url)\n    data = json.loads(html.content.decode(\"utf-8\"))",
    "detail": "MY_GISTS.36edf2915f.alexa_news_headlines",
    "documentation": {}
  },
  {
    "label": "a",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.Area of triangle",
    "description": "MY_GISTS.36edf2915f.Area of triangle",
    "peekOfCode": "a = 5\nb = 6\nc = 7\n# a = float(input('Enter first side: '))\n# b = float(input('Enter second side: '))\n# c = float(input('Enter third side: '))\n# calculate the semi-perimeter\ns = (a + b + c) / 2\n# calculate the area\narea = (s*(s-a)*(s-b)*(s-c)) ** 0.5",
    "detail": "MY_GISTS.36edf2915f.Area of triangle",
    "documentation": {}
  },
  {
    "label": "b",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.Area of triangle",
    "description": "MY_GISTS.36edf2915f.Area of triangle",
    "peekOfCode": "b = 6\nc = 7\n# a = float(input('Enter first side: '))\n# b = float(input('Enter second side: '))\n# c = float(input('Enter third side: '))\n# calculate the semi-perimeter\ns = (a + b + c) / 2\n# calculate the area\narea = (s*(s-a)*(s-b)*(s-c)) ** 0.5\nprint('The area of the triangle is %0.2f' %area)",
    "detail": "MY_GISTS.36edf2915f.Area of triangle",
    "documentation": {}
  },
  {
    "label": "c",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.Area of triangle",
    "description": "MY_GISTS.36edf2915f.Area of triangle",
    "peekOfCode": "c = 7\n# a = float(input('Enter first side: '))\n# b = float(input('Enter second side: '))\n# c = float(input('Enter third side: '))\n# calculate the semi-perimeter\ns = (a + b + c) / 2\n# calculate the area\narea = (s*(s-a)*(s-b)*(s-c)) ** 0.5\nprint('The area of the triangle is %0.2f' %area)",
    "detail": "MY_GISTS.36edf2915f.Area of triangle",
    "documentation": {}
  },
  {
    "label": "s",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.Area of triangle",
    "description": "MY_GISTS.36edf2915f.Area of triangle",
    "peekOfCode": "s = (a + b + c) / 2\n# calculate the area\narea = (s*(s-a)*(s-b)*(s-c)) ** 0.5\nprint('The area of the triangle is %0.2f' %area)",
    "detail": "MY_GISTS.36edf2915f.Area of triangle",
    "documentation": {}
  },
  {
    "label": "area",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.Area of triangle",
    "description": "MY_GISTS.36edf2915f.Area of triangle",
    "peekOfCode": "area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\nprint('The area of the triangle is %0.2f' %area)",
    "detail": "MY_GISTS.36edf2915f.Area of triangle",
    "documentation": {}
  },
  {
    "label": "a",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.Areaoftriangle",
    "description": "MY_GISTS.36edf2915f.Areaoftriangle",
    "peekOfCode": "a = 5\nb = 6\nc = 7\n# Uncomment below to take inputs from the user\n# a = float(input('Enter first side: '))\n# b = float(input('Enter second side: '))\n# c = float(input('Enter third side: '))\n# calculate the semi-perimeter\ns = (a + b + c) / 2\n# calculate the area",
    "detail": "MY_GISTS.36edf2915f.Areaoftriangle",
    "documentation": {}
  },
  {
    "label": "b",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.Areaoftriangle",
    "description": "MY_GISTS.36edf2915f.Areaoftriangle",
    "peekOfCode": "b = 6\nc = 7\n# Uncomment below to take inputs from the user\n# a = float(input('Enter first side: '))\n# b = float(input('Enter second side: '))\n# c = float(input('Enter third side: '))\n# calculate the semi-perimeter\ns = (a + b + c) / 2\n# calculate the area\narea = (s*(s-a)*(s-b)*(s-c)) ** 0.5",
    "detail": "MY_GISTS.36edf2915f.Areaoftriangle",
    "documentation": {}
  },
  {
    "label": "c",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.Areaoftriangle",
    "description": "MY_GISTS.36edf2915f.Areaoftriangle",
    "peekOfCode": "c = 7\n# Uncomment below to take inputs from the user\n# a = float(input('Enter first side: '))\n# b = float(input('Enter second side: '))\n# c = float(input('Enter third side: '))\n# calculate the semi-perimeter\ns = (a + b + c) / 2\n# calculate the area\narea = (s*(s-a)*(s-b)*(s-c)) ** 0.5\nprint('The area of the triangle is %0.2f' %area)",
    "detail": "MY_GISTS.36edf2915f.Areaoftriangle",
    "documentation": {}
  },
  {
    "label": "s",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.Areaoftriangle",
    "description": "MY_GISTS.36edf2915f.Areaoftriangle",
    "peekOfCode": "s = (a + b + c) / 2\n# calculate the area\narea = (s*(s-a)*(s-b)*(s-c)) ** 0.5\nprint('The area of the triangle is %0.2f' %area)",
    "detail": "MY_GISTS.36edf2915f.Areaoftriangle",
    "documentation": {}
  },
  {
    "label": "area",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.Areaoftriangle",
    "description": "MY_GISTS.36edf2915f.Areaoftriangle",
    "peekOfCode": "area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\nprint('The area of the triangle is %0.2f' %area)",
    "detail": "MY_GISTS.36edf2915f.Areaoftriangle",
    "documentation": {}
  },
  {
    "label": "sumOfSeries",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.ARKA",
    "description": "MY_GISTS.36edf2915f.ARKA",
    "peekOfCode": "def sumOfSeries(n): \n\tx = (n * (n + 1) / 2) \n\treturn (int)(x * x) \n# Driver Function \nn = 5\nprint(sumOfSeries(n))",
    "detail": "MY_GISTS.36edf2915f.ARKA",
    "documentation": {}
  },
  {
    "label": "\tx",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.ARKA",
    "description": "MY_GISTS.36edf2915f.ARKA",
    "peekOfCode": "\tx = (n * (n + 1) / 2) \n\treturn (int)(x * x) \n# Driver Function \nn = 5\nprint(sumOfSeries(n))",
    "detail": "MY_GISTS.36edf2915f.ARKA",
    "documentation": {}
  },
  {
    "label": "n",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.ARKA",
    "description": "MY_GISTS.36edf2915f.ARKA",
    "peekOfCode": "n = 5\nprint(sumOfSeries(n))",
    "detail": "MY_GISTS.36edf2915f.ARKA",
    "documentation": {}
  },
  {
    "label": "num",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.armstrongnumber",
    "description": "MY_GISTS.36edf2915f.armstrongnumber",
    "peekOfCode": "num = int(input(\"Enter a number: \"))\n# initialize sum\nsum = 0\n# find the sum of the cube of each digit\ntemp = num\nwhile temp > 0:\n   digit = temp % 10\n   sum += digit ** 3\n   temp //= 10\n# display the result",
    "detail": "MY_GISTS.36edf2915f.armstrongnumber",
    "documentation": {}
  },
  {
    "label": "sum",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.armstrongnumber",
    "description": "MY_GISTS.36edf2915f.armstrongnumber",
    "peekOfCode": "sum = 0\n# find the sum of the cube of each digit\ntemp = num\nwhile temp > 0:\n   digit = temp % 10\n   sum += digit ** 3\n   temp //= 10\n# display the result\nif num == sum:\n   print(num,\"is an Armstrong number\")",
    "detail": "MY_GISTS.36edf2915f.armstrongnumber",
    "documentation": {}
  },
  {
    "label": "temp",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.armstrongnumber",
    "description": "MY_GISTS.36edf2915f.armstrongnumber",
    "peekOfCode": "temp = num\nwhile temp > 0:\n   digit = temp % 10\n   sum += digit ** 3\n   temp //= 10\n# display the result\nif num == sum:\n   print(num,\"is an Armstrong number\")\nelse:\n   print(num,\"is not an Armstrong number\")",
    "detail": "MY_GISTS.36edf2915f.armstrongnumber",
    "documentation": {}
  },
  {
    "label": "c",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.ASCIIvaluecharacter",
    "description": "MY_GISTS.36edf2915f.ASCIIvaluecharacter",
    "peekOfCode": "c = 'p'\nprint(\"The ASCII value of '\" + c + \"' is\", ord(c))",
    "detail": "MY_GISTS.36edf2915f.ASCIIvaluecharacter",
    "documentation": {}
  },
  {
    "label": "InvalidSyntax",
    "kind": 6,
    "importPath": "MY_GISTS.36edf2915f.assembler",
    "description": "MY_GISTS.36edf2915f.assembler",
    "peekOfCode": "class InvalidSyntax(Exception):\n    def __init__(self):\n        pass\n# class for represent a token\nclass Token():\n    def __init__(self, token, t):\n        self.token = token\n        self.t = t\n# def initRegister():\n#     global register",
    "detail": "MY_GISTS.36edf2915f.assembler",
    "documentation": {}
  },
  {
    "label": "Token",
    "kind": 6,
    "importPath": "MY_GISTS.36edf2915f.assembler",
    "description": "MY_GISTS.36edf2915f.assembler",
    "peekOfCode": "class Token():\n    def __init__(self, token, t):\n        self.token = token\n        self.t = t\n# def initRegister():\n#     global register\n#     for i in range(9):\n#         register.append(0)\ndef loadFile(fileName):\n    \"\"\"",
    "detail": "MY_GISTS.36edf2915f.assembler",
    "documentation": {}
  },
  {
    "label": "loadFile",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.assembler",
    "description": "MY_GISTS.36edf2915f.assembler",
    "peekOfCode": "def loadFile(fileName):\n    \"\"\"\n        loadFile: This function loads the file and reads its lines.\n    \"\"\"\n    global lines\n    fo = open(fileName)\n    for line in fo:\n        lines.append(line)\n    fo.close()\ndef scanner(string):",
    "detail": "MY_GISTS.36edf2915f.assembler",
    "documentation": {}
  },
  {
    "label": "scanner",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.assembler",
    "description": "MY_GISTS.36edf2915f.assembler",
    "peekOfCode": "def scanner(string):\n    \"\"\"\n        scanner: This function builds the tokens by the content of the file.\n        The tokens will be saved in list 'tokens'\n    \"\"\"\n    global tokens\n    token = \"\"\n    state = 0  # init state\n    for ch in string:\n        if state == 0:",
    "detail": "MY_GISTS.36edf2915f.assembler",
    "documentation": {}
  },
  {
    "label": "scan",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.assembler",
    "description": "MY_GISTS.36edf2915f.assembler",
    "peekOfCode": "def scan():\n    \"\"\"\n        scan: applys function scanner() to each line of the source code.\n    \"\"\"\n    global lines\n    assert len(lines) > 0, \"no lines\"\n    for line in lines:\n        try:\n            scanner(line)\n        except InvalidSyntax:",
    "detail": "MY_GISTS.36edf2915f.assembler",
    "documentation": {}
  },
  {
    "label": "parser",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.assembler",
    "description": "MY_GISTS.36edf2915f.assembler",
    "peekOfCode": "def parser():\n    \"\"\"\n        parser: parses the tokens of the list 'tokens'\n    \"\"\"\n    global tokens\n    global eax, ebx, ecx, edx\n    assert len(tokens) > 0, \"no tokens\"\n    pointer = 0  # pointer for tokens\n    token = Token(\"\", \"\")\n    tmpToken = Token(\"\", \"\")",
    "detail": "MY_GISTS.36edf2915f.assembler",
    "documentation": {}
  },
  {
    "label": "registerLabels",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.assembler",
    "description": "MY_GISTS.36edf2915f.assembler",
    "peekOfCode": "def registerLabels():\n    \"\"\"\n        This function search for labels / subprogram-labels and registers this in the 'jumps' list.\n    \"\"\"\n    for i in range(len(tokens)):\n        if (tokens[i].t == \"label\"):\n            jumps[tokens[i].token] = i\n        elif tokens[i].t == \"subprogram\":\n            jumps[tokens[i].token] = i\ndef resetInterpreter():",
    "detail": "MY_GISTS.36edf2915f.assembler",
    "documentation": {}
  },
  {
    "label": "resetInterpreter",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.assembler",
    "description": "MY_GISTS.36edf2915f.assembler",
    "peekOfCode": "def resetInterpreter():\n    \"\"\"\n        resets the interpreter mind.\n    \"\"\"\n    global eax, ebx, ecx, edx, zeroFlag, stack\n    global variables, jumps, lines, tokens, returnStack\n    eax = 0\n    ebx = 0\n    ecx = 0\n    edx = 0",
    "detail": "MY_GISTS.36edf2915f.assembler",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.assembler",
    "description": "MY_GISTS.36edf2915f.assembler",
    "peekOfCode": "def main():\n    \"\"\"\n        reads textfiles from the command-line and interprets them. \n    \"\"\"\n    # [1:] because the first argument is the program itself.\n    for arg in sys.argv[1:]:\n        resetInterpreter()  # resets interpreter mind\n        try:\n            loadFile(arg)\n            scan()",
    "detail": "MY_GISTS.36edf2915f.assembler",
    "documentation": {}
  },
  {
    "label": "lines",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.assembler",
    "description": "MY_GISTS.36edf2915f.assembler",
    "peekOfCode": "lines = []  # contains the lines of the file.\ntokens = []  # contains all tokens of the source code.\n# register eax, ebx,..., ecx\neax = 0\nebx = 0\necx = 0\nedx = 0\n# status register\nzeroFlag = False\n# stack data structure",
    "detail": "MY_GISTS.36edf2915f.assembler",
    "documentation": {}
  },
  {
    "label": "tokens",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.assembler",
    "description": "MY_GISTS.36edf2915f.assembler",
    "peekOfCode": "tokens = []  # contains all tokens of the source code.\n# register eax, ebx,..., ecx\neax = 0\nebx = 0\necx = 0\nedx = 0\n# status register\nzeroFlag = False\n# stack data structure\n# push --> append",
    "detail": "MY_GISTS.36edf2915f.assembler",
    "documentation": {}
  },
  {
    "label": "eax",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.assembler",
    "description": "MY_GISTS.36edf2915f.assembler",
    "peekOfCode": "eax = 0\nebx = 0\necx = 0\nedx = 0\n# status register\nzeroFlag = False\n# stack data structure\n# push --> append\n# pop --> pop\nstack = []",
    "detail": "MY_GISTS.36edf2915f.assembler",
    "documentation": {}
  },
  {
    "label": "ebx",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.assembler",
    "description": "MY_GISTS.36edf2915f.assembler",
    "peekOfCode": "ebx = 0\necx = 0\nedx = 0\n# status register\nzeroFlag = False\n# stack data structure\n# push --> append\n# pop --> pop\nstack = []\n# jump link table ",
    "detail": "MY_GISTS.36edf2915f.assembler",
    "documentation": {}
  },
  {
    "label": "ecx",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.assembler",
    "description": "MY_GISTS.36edf2915f.assembler",
    "peekOfCode": "ecx = 0\nedx = 0\n# status register\nzeroFlag = False\n# stack data structure\n# push --> append\n# pop --> pop\nstack = []\n# jump link table \njumps = {}",
    "detail": "MY_GISTS.36edf2915f.assembler",
    "documentation": {}
  },
  {
    "label": "edx",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.assembler",
    "description": "MY_GISTS.36edf2915f.assembler",
    "peekOfCode": "edx = 0\n# status register\nzeroFlag = False\n# stack data structure\n# push --> append\n# pop --> pop\nstack = []\n# jump link table \njumps = {}\n# variable table",
    "detail": "MY_GISTS.36edf2915f.assembler",
    "documentation": {}
  },
  {
    "label": "zeroFlag",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.assembler",
    "description": "MY_GISTS.36edf2915f.assembler",
    "peekOfCode": "zeroFlag = False\n# stack data structure\n# push --> append\n# pop --> pop\nstack = []\n# jump link table \njumps = {}\n# variable table\nvariables = {}\n# return stack for subprograms",
    "detail": "MY_GISTS.36edf2915f.assembler",
    "documentation": {}
  },
  {
    "label": "stack",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.assembler",
    "description": "MY_GISTS.36edf2915f.assembler",
    "peekOfCode": "stack = []\n# jump link table \njumps = {}\n# variable table\nvariables = {}\n# return stack for subprograms\nreturnStack = []\n# simple exception class \nclass InvalidSyntax(Exception):\n    def __init__(self):",
    "detail": "MY_GISTS.36edf2915f.assembler",
    "documentation": {}
  },
  {
    "label": "jumps",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.assembler",
    "description": "MY_GISTS.36edf2915f.assembler",
    "peekOfCode": "jumps = {}\n# variable table\nvariables = {}\n# return stack for subprograms\nreturnStack = []\n# simple exception class \nclass InvalidSyntax(Exception):\n    def __init__(self):\n        pass\n# class for represent a token",
    "detail": "MY_GISTS.36edf2915f.assembler",
    "documentation": {}
  },
  {
    "label": "variables",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.assembler",
    "description": "MY_GISTS.36edf2915f.assembler",
    "peekOfCode": "variables = {}\n# return stack for subprograms\nreturnStack = []\n# simple exception class \nclass InvalidSyntax(Exception):\n    def __init__(self):\n        pass\n# class for represent a token\nclass Token():\n    def __init__(self, token, t):",
    "detail": "MY_GISTS.36edf2915f.assembler",
    "documentation": {}
  },
  {
    "label": "returnStack",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.assembler",
    "description": "MY_GISTS.36edf2915f.assembler",
    "peekOfCode": "returnStack = []\n# simple exception class \nclass InvalidSyntax(Exception):\n    def __init__(self):\n        pass\n# class for represent a token\nclass Token():\n    def __init__(self, token, t):\n        self.token = token\n        self.t = t",
    "detail": "MY_GISTS.36edf2915f.assembler",
    "documentation": {}
  },
  {
    "label": "download",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.async_downloader",
    "description": "MY_GISTS.36edf2915f.async_downloader",
    "peekOfCode": "def download(ways):\n    if not ways:\n        print('Ways list is empty. Downloading is impossible')\n        return\n    print('downloading..')\n    success_files = set()\n    failure_files = set()\n    event_loop = asyncio.get_event_loop()\n    try:\n        event_loop.run_until_complete(",
    "detail": "MY_GISTS.36edf2915f.async_downloader",
    "documentation": {}
  },
  {
    "label": "test",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.async_downloader",
    "description": "MY_GISTS.36edf2915f.async_downloader",
    "peekOfCode": "def test():\n    ways = ['https://www.wikipedia.org',\n            'https://www.ya.ru',\n            'https://www.duckduckgo.com',\n            'https://www.fail-path.unknown',\n            ]\n    download(ways)\nif __name__ == \"__main__\":\n    test()",
    "detail": "MY_GISTS.36edf2915f.async_downloader",
    "documentation": {}
  },
  {
    "label": "book",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.audiobook_gen",
    "description": "MY_GISTS.36edf2915f.audiobook_gen",
    "peekOfCode": "book = open(input('Enter the book name: '), 'rb')\npg_no = int(input(\"Enter the page number from which you want the system to start reading text: \"))\npdf_Reader = PyPDF2.PdfFileReader(book)\npages = pdf_Reader.numPages\nspeaker = pyttsx3.init()\nfor num in range((pg_no-1), pages):\n    page = pdf_Reader.getPage(num)\n    text = page.extractText()\n    speaker.say(text)\n    speaker.runAndWait()",
    "detail": "MY_GISTS.36edf2915f.audiobook_gen",
    "documentation": {}
  },
  {
    "label": "pg_no",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.audiobook_gen",
    "description": "MY_GISTS.36edf2915f.audiobook_gen",
    "peekOfCode": "pg_no = int(input(\"Enter the page number from which you want the system to start reading text: \"))\npdf_Reader = PyPDF2.PdfFileReader(book)\npages = pdf_Reader.numPages\nspeaker = pyttsx3.init()\nfor num in range((pg_no-1), pages):\n    page = pdf_Reader.getPage(num)\n    text = page.extractText()\n    speaker.say(text)\n    speaker.runAndWait()",
    "detail": "MY_GISTS.36edf2915f.audiobook_gen",
    "documentation": {}
  },
  {
    "label": "pdf_Reader",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.audiobook_gen",
    "description": "MY_GISTS.36edf2915f.audiobook_gen",
    "peekOfCode": "pdf_Reader = PyPDF2.PdfFileReader(book)\npages = pdf_Reader.numPages\nspeaker = pyttsx3.init()\nfor num in range((pg_no-1), pages):\n    page = pdf_Reader.getPage(num)\n    text = page.extractText()\n    speaker.say(text)\n    speaker.runAndWait()",
    "detail": "MY_GISTS.36edf2915f.audiobook_gen",
    "documentation": {}
  },
  {
    "label": "pages",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.audiobook_gen",
    "description": "MY_GISTS.36edf2915f.audiobook_gen",
    "peekOfCode": "pages = pdf_Reader.numPages\nspeaker = pyttsx3.init()\nfor num in range((pg_no-1), pages):\n    page = pdf_Reader.getPage(num)\n    text = page.extractText()\n    speaker.say(text)\n    speaker.runAndWait()",
    "detail": "MY_GISTS.36edf2915f.audiobook_gen",
    "documentation": {}
  },
  {
    "label": "speaker",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.audiobook_gen",
    "description": "MY_GISTS.36edf2915f.audiobook_gen",
    "peekOfCode": "speaker = pyttsx3.init()\nfor num in range((pg_no-1), pages):\n    page = pdf_Reader.getPage(num)\n    text = page.extractText()\n    speaker.say(text)\n    speaker.runAndWait()",
    "detail": "MY_GISTS.36edf2915f.audiobook_gen",
    "documentation": {}
  },
  {
    "label": "fh",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.avg_xdspam_confidence",
    "description": "MY_GISTS.36edf2915f.avg_xdspam_confidence",
    "peekOfCode": "fh = open('mbox-short.txt')\n#The 'mbox-short.txt' file can be downloaded from the link: https://www.py4e.com/code3/mbox-short.txt\nsum = 0\ncount = 0\nfor fx in fh:\n\tfx = fx.rstrip()\n\tif not fx.startswith(\"X-DSPAM-Confidence:\") :\n\t\tcontinue\n\tfy = fx[19:]\n\tcount = count + 1",
    "detail": "MY_GISTS.36edf2915f.avg_xdspam_confidence",
    "documentation": {}
  },
  {
    "label": "sum",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.avg_xdspam_confidence",
    "description": "MY_GISTS.36edf2915f.avg_xdspam_confidence",
    "peekOfCode": "sum = 0\ncount = 0\nfor fx in fh:\n\tfx = fx.rstrip()\n\tif not fx.startswith(\"X-DSPAM-Confidence:\") :\n\t\tcontinue\n\tfy = fx[19:]\n\tcount = count + 1\n\tsum = sum + float(fy)\nprint ('Average spam confidence: ',sum/count)",
    "detail": "MY_GISTS.36edf2915f.avg_xdspam_confidence",
    "documentation": {}
  },
  {
    "label": "count",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.avg_xdspam_confidence",
    "description": "MY_GISTS.36edf2915f.avg_xdspam_confidence",
    "peekOfCode": "count = 0\nfor fx in fh:\n\tfx = fx.rstrip()\n\tif not fx.startswith(\"X-DSPAM-Confidence:\") :\n\t\tcontinue\n\tfy = fx[19:]\n\tcount = count + 1\n\tsum = sum + float(fy)\nprint ('Average spam confidence: ',sum/count)",
    "detail": "MY_GISTS.36edf2915f.avg_xdspam_confidence",
    "documentation": {}
  },
  {
    "label": "\tfx",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.avg_xdspam_confidence",
    "description": "MY_GISTS.36edf2915f.avg_xdspam_confidence",
    "peekOfCode": "\tfx = fx.rstrip()\n\tif not fx.startswith(\"X-DSPAM-Confidence:\") :\n\t\tcontinue\n\tfy = fx[19:]\n\tcount = count + 1\n\tsum = sum + float(fy)\nprint ('Average spam confidence: ',sum/count)",
    "detail": "MY_GISTS.36edf2915f.avg_xdspam_confidence",
    "documentation": {}
  },
  {
    "label": "\tfy",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.avg_xdspam_confidence",
    "description": "MY_GISTS.36edf2915f.avg_xdspam_confidence",
    "peekOfCode": "\tfy = fx[19:]\n\tcount = count + 1\n\tsum = sum + float(fy)\nprint ('Average spam confidence: ',sum/count)",
    "detail": "MY_GISTS.36edf2915f.avg_xdspam_confidence",
    "documentation": {}
  },
  {
    "label": "\tcount",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.avg_xdspam_confidence",
    "description": "MY_GISTS.36edf2915f.avg_xdspam_confidence",
    "peekOfCode": "\tcount = count + 1\n\tsum = sum + float(fy)\nprint ('Average spam confidence: ',sum/count)",
    "detail": "MY_GISTS.36edf2915f.avg_xdspam_confidence",
    "documentation": {}
  },
  {
    "label": "\tsum",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.avg_xdspam_confidence",
    "description": "MY_GISTS.36edf2915f.avg_xdspam_confidence",
    "peekOfCode": "\tsum = sum + float(fy)\nprint ('Average spam confidence: ',sum/count)",
    "detail": "MY_GISTS.36edf2915f.avg_xdspam_confidence",
    "documentation": {}
  },
  {
    "label": "connect_database",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.backend",
    "description": "MY_GISTS.36edf2915f.backend",
    "peekOfCode": "def connect_database():\n    global conn\n    global cur\n    conn = sqlite3.connect(\"bankmanaging.db\")\n    cur = conn.cursor()\n    cur.execute(\n        \"create table if not exists bank (acc_no int, name text, age int, address text, balance int, account_type text, mobile_number int)\")\n    cur.execute(\"create table if not exists staff (name text, pass text,salary int, position text)\")\n    cur.execute(\"create table if not exists admin (name text, pass text)\")\n    cur.execute(\"insert into admin values('arpit','123')\")",
    "detail": "MY_GISTS.36edf2915f.backend",
    "documentation": {}
  },
  {
    "label": "check_admin",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.backend",
    "description": "MY_GISTS.36edf2915f.backend",
    "peekOfCode": "def check_admin(name, password):\n    cur.execute(\"select * from admin\")\n    data = cur.fetchall()\n    if data[0][0] == name and data[0][1] == password:\n        return True\n    return\n# create employee in database\ndef create_employee(name, password, salary, positon):\n    print(password)\n    cur.execute(\"insert into staff values(?,?,?,?)\", (name, password, salary, positon))",
    "detail": "MY_GISTS.36edf2915f.backend",
    "documentation": {}
  },
  {
    "label": "create_employee",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.backend",
    "description": "MY_GISTS.36edf2915f.backend",
    "peekOfCode": "def create_employee(name, password, salary, positon):\n    print(password)\n    cur.execute(\"insert into staff values(?,?,?,?)\", (name, password, salary, positon))\n    conn.commit()\n# check employee details in dabase for employee login\ndef check_employee(name, password):\n    print(password)\n    print(name)\n    cur.execute(\"select name,pass from staff\")\n    data = cur.fetchall()",
    "detail": "MY_GISTS.36edf2915f.backend",
    "documentation": {}
  },
  {
    "label": "check_employee",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.backend",
    "description": "MY_GISTS.36edf2915f.backend",
    "peekOfCode": "def check_employee(name, password):\n    print(password)\n    print(name)\n    cur.execute(\"select name,pass from staff\")\n    data = cur.fetchall()\n    print(data)\n    if len(data) == 0:\n        return False\n    for i in range(len(data)):\n        if data[i][0] == name and data[i][1] == password:",
    "detail": "MY_GISTS.36edf2915f.backend",
    "documentation": {}
  },
  {
    "label": "create_customer",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.backend",
    "description": "MY_GISTS.36edf2915f.backend",
    "peekOfCode": "def create_customer(name, age, address, balance, acc_type, mobile_number):\n    global acc_no\n    cur.execute(\"insert into bank values(?,?,?,?,?,?,?)\",\n                (acc_no, name, age, address, balance, acc_type, mobile_number))\n    conn.commit()\n    acc_no = acc_no + 1\n    return acc_no - 1\n# check account in database\ndef check_acc_no(acc_no):\n    cur.execute(\"select acc_no from bank\")",
    "detail": "MY_GISTS.36edf2915f.backend",
    "documentation": {}
  },
  {
    "label": "check_acc_no",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.backend",
    "description": "MY_GISTS.36edf2915f.backend",
    "peekOfCode": "def check_acc_no(acc_no):\n    cur.execute(\"select acc_no from bank\")\n    list_acc_no = cur.fetchall()\n    for i in range(len(list_acc_no)):\n        if list_acc_no[i][0] == int(acc_no):\n            return True\n    return False\n# get all details of a particular customer from database\ndef get_details(acc_no):\n    cur.execute(\"select * from bank where acc_no=?\", (acc_no))",
    "detail": "MY_GISTS.36edf2915f.backend",
    "documentation": {}
  },
  {
    "label": "get_details",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.backend",
    "description": "MY_GISTS.36edf2915f.backend",
    "peekOfCode": "def get_details(acc_no):\n    cur.execute(\"select * from bank where acc_no=?\", (acc_no))\n    global detail\n    detail = cur.fetchall()\n    print(detail)\n    if len(detail) == 0:\n        return False\n    else:\n        return (detail[0][0], detail[0][1], detail[0][2], detail[0][3], detail[0][4], detail[0][5], detail[0][6])\n# add new balance of customer in bank database",
    "detail": "MY_GISTS.36edf2915f.backend",
    "documentation": {}
  },
  {
    "label": "update_balance",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.backend",
    "description": "MY_GISTS.36edf2915f.backend",
    "peekOfCode": "def update_balance(new_money, acc_no):\n    cur.execute(\"select balance from bank where acc_no=?\", (acc_no,))\n    bal = cur.fetchall()\n    bal = bal[0][0]\n    new_bal = bal + int(new_money)\n    cur.execute(\"update bank set balance=? where acc_no=?\", (new_bal, acc_no))\n    conn.commit()\n# deduct balance from customer bank database\ndef deduct_balance(new_money, acc_no):\n    cur.execute(\"select balance from bank where acc_no=?\", (acc_no,))",
    "detail": "MY_GISTS.36edf2915f.backend",
    "documentation": {}
  },
  {
    "label": "deduct_balance",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.backend",
    "description": "MY_GISTS.36edf2915f.backend",
    "peekOfCode": "def deduct_balance(new_money, acc_no):\n    cur.execute(\"select balance from bank where acc_no=?\", (acc_no,))\n    bal = cur.fetchall()\n    bal = bal[0][0]\n    if bal < int(new_money):\n        return False\n    else:\n        new_bal = bal - int(new_money)\n        cur.execute(\"update bank set balance=? where acc_no=?\", (new_bal, acc_no))\n        conn.commit()",
    "detail": "MY_GISTS.36edf2915f.backend",
    "documentation": {}
  },
  {
    "label": "check_balance",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.backend",
    "description": "MY_GISTS.36edf2915f.backend",
    "peekOfCode": "def check_balance(acc_no):\n    cur.execute(\"select balance from bank where acc_no=?\", (acc_no))\n    bal = cur.fetchall()\n    return bal[0][0]\n# update_name_in_bank_table\ndef update_name_in_bank_table(new_name, acc_no):\n    print(new_name)\n    conn.execute(\"update bank set name='{}' where acc_no={}\".format(new_name, acc_no))\n    conn.commit()\n# update_age_in_bank_table",
    "detail": "MY_GISTS.36edf2915f.backend",
    "documentation": {}
  },
  {
    "label": "update_name_in_bank_table",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.backend",
    "description": "MY_GISTS.36edf2915f.backend",
    "peekOfCode": "def update_name_in_bank_table(new_name, acc_no):\n    print(new_name)\n    conn.execute(\"update bank set name='{}' where acc_no={}\".format(new_name, acc_no))\n    conn.commit()\n# update_age_in_bank_table\ndef update_age_in_bank_table(new_name, acc_no):\n    print(new_name)\n    conn.execute(\"update bank set age={} where acc_no={}\".format(new_name, acc_no))\n    conn.commit()\n# update_address_in_bank_table",
    "detail": "MY_GISTS.36edf2915f.backend",
    "documentation": {}
  },
  {
    "label": "update_age_in_bank_table",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.backend",
    "description": "MY_GISTS.36edf2915f.backend",
    "peekOfCode": "def update_age_in_bank_table(new_name, acc_no):\n    print(new_name)\n    conn.execute(\"update bank set age={} where acc_no={}\".format(new_name, acc_no))\n    conn.commit()\n# update_address_in_bank_table\ndef update_address_in_bank_table(new_name, acc_no):\n    print(new_name)\n    conn.execute(\"update bank set address='{}' where acc_no={}\".format(new_name, acc_no))\n    conn.commit()\n# list of all customers in bank",
    "detail": "MY_GISTS.36edf2915f.backend",
    "documentation": {}
  },
  {
    "label": "update_address_in_bank_table",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.backend",
    "description": "MY_GISTS.36edf2915f.backend",
    "peekOfCode": "def update_address_in_bank_table(new_name, acc_no):\n    print(new_name)\n    conn.execute(\"update bank set address='{}' where acc_no={}\".format(new_name, acc_no))\n    conn.commit()\n# list of all customers in bank\ndef list_all_customers():\n    cur.execute(\"select * from bank\")\n    deatil = cur.fetchall()\n    return deatil\n# delete account from database",
    "detail": "MY_GISTS.36edf2915f.backend",
    "documentation": {}
  },
  {
    "label": "list_all_customers",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.backend",
    "description": "MY_GISTS.36edf2915f.backend",
    "peekOfCode": "def list_all_customers():\n    cur.execute(\"select * from bank\")\n    deatil = cur.fetchall()\n    return deatil\n# delete account from database\ndef delete_acc(acc_no):\n    cur.execute(\"delete from bank where acc_no=?\", (acc_no))\n    conn.commit()\n# show employees detail from staff table\ndef show_employees():",
    "detail": "MY_GISTS.36edf2915f.backend",
    "documentation": {}
  },
  {
    "label": "delete_acc",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.backend",
    "description": "MY_GISTS.36edf2915f.backend",
    "peekOfCode": "def delete_acc(acc_no):\n    cur.execute(\"delete from bank where acc_no=?\", (acc_no))\n    conn.commit()\n# show employees detail from staff table\ndef show_employees():\n    cur.execute(\"select name, salary, position,pass from staff\")\n    detail = cur.fetchall()\n    return detail\n# return all money in bank\ndef all_money():",
    "detail": "MY_GISTS.36edf2915f.backend",
    "documentation": {}
  },
  {
    "label": "show_employees",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.backend",
    "description": "MY_GISTS.36edf2915f.backend",
    "peekOfCode": "def show_employees():\n    cur.execute(\"select name, salary, position,pass from staff\")\n    detail = cur.fetchall()\n    return detail\n# return all money in bank\ndef all_money():\n    cur.execute(\"select balance from bank\")\n    bal = cur.fetchall()\n    print(bal)\n    if len(bal) == 0:",
    "detail": "MY_GISTS.36edf2915f.backend",
    "documentation": {}
  },
  {
    "label": "all_money",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.backend",
    "description": "MY_GISTS.36edf2915f.backend",
    "peekOfCode": "def all_money():\n    cur.execute(\"select balance from bank\")\n    bal = cur.fetchall()\n    print(bal)\n    if len(bal) == 0:\n        return False\n    else:\n        total = 0\n        for i in bal:\n            total = total + i[0]",
    "detail": "MY_GISTS.36edf2915f.backend",
    "documentation": {}
  },
  {
    "label": "show_employees_for_update",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.backend",
    "description": "MY_GISTS.36edf2915f.backend",
    "peekOfCode": "def show_employees_for_update():\n    cur.execute(\"select * from staff\")\n    detail = cur.fetchall()\n    return detail\n# update employee name from data base\ndef update_employee_name(new_name, old_name):\n    print(new_name, old_name)\n    cur.execute(\"update staff set name='{}' where name='{}'\".format(new_name, old_name))\n    conn.commit()\ndef update_employee_password(new_pass, old_name):",
    "detail": "MY_GISTS.36edf2915f.backend",
    "documentation": {}
  },
  {
    "label": "update_employee_name",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.backend",
    "description": "MY_GISTS.36edf2915f.backend",
    "peekOfCode": "def update_employee_name(new_name, old_name):\n    print(new_name, old_name)\n    cur.execute(\"update staff set name='{}' where name='{}'\".format(new_name, old_name))\n    conn.commit()\ndef update_employee_password(new_pass, old_name):\n    print(new_pass, old_name)\n    cur.execute(\"update staff set pass='{}' where name='{}'\".format(new_pass, old_name))\n    conn.commit()\ndef update_employee_salary(new_salary, old_name):\n    print(new_salary, old_name)",
    "detail": "MY_GISTS.36edf2915f.backend",
    "documentation": {}
  },
  {
    "label": "update_employee_password",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.backend",
    "description": "MY_GISTS.36edf2915f.backend",
    "peekOfCode": "def update_employee_password(new_pass, old_name):\n    print(new_pass, old_name)\n    cur.execute(\"update staff set pass='{}' where name='{}'\".format(new_pass, old_name))\n    conn.commit()\ndef update_employee_salary(new_salary, old_name):\n    print(new_salary, old_name)\n    cur.execute(\"update staff set salary={} where name='{}'\".format(new_salary, old_name))\n    conn.commit()\ndef update_employee_position(new_pos, old_name):\n    print(new_pos, old_name)",
    "detail": "MY_GISTS.36edf2915f.backend",
    "documentation": {}
  },
  {
    "label": "update_employee_salary",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.backend",
    "description": "MY_GISTS.36edf2915f.backend",
    "peekOfCode": "def update_employee_salary(new_salary, old_name):\n    print(new_salary, old_name)\n    cur.execute(\"update staff set salary={} where name='{}'\".format(new_salary, old_name))\n    conn.commit()\ndef update_employee_position(new_pos, old_name):\n    print(new_pos, old_name)\n    cur.execute(\"update staff set position='{}' where name='{}'\".format(new_pos, old_name))\n    conn.commit()\n# get name and balance from bank of a particular account number\ndef get_detail(acc_no):",
    "detail": "MY_GISTS.36edf2915f.backend",
    "documentation": {}
  },
  {
    "label": "update_employee_position",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.backend",
    "description": "MY_GISTS.36edf2915f.backend",
    "peekOfCode": "def update_employee_position(new_pos, old_name):\n    print(new_pos, old_name)\n    cur.execute(\"update staff set position='{}' where name='{}'\".format(new_pos, old_name))\n    conn.commit()\n# get name and balance from bank of a particular account number\ndef get_detail(acc_no):\n    cur.execute(\"select name, balance from bank where acc_no=?\", (acc_no))\n    details = cur.fetchall()\n    return details\ndef check_name_in_staff(name):",
    "detail": "MY_GISTS.36edf2915f.backend",
    "documentation": {}
  },
  {
    "label": "get_detail",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.backend",
    "description": "MY_GISTS.36edf2915f.backend",
    "peekOfCode": "def get_detail(acc_no):\n    cur.execute(\"select name, balance from bank where acc_no=?\", (acc_no))\n    details = cur.fetchall()\n    return details\ndef check_name_in_staff(name):\n    cur = conn.cursor()\n    cur.execute(\"select name from staff\")\n    details = cur.fetchall()\n    for i in details:\n        if i[0] == name:",
    "detail": "MY_GISTS.36edf2915f.backend",
    "documentation": {}
  },
  {
    "label": "check_name_in_staff",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.backend",
    "description": "MY_GISTS.36edf2915f.backend",
    "peekOfCode": "def check_name_in_staff(name):\n    cur = conn.cursor()\n    cur.execute(\"select name from staff\")\n    details = cur.fetchall()\n    for i in details:\n        if i[0] == name:\n            return True\n    return False",
    "detail": "MY_GISTS.36edf2915f.backend",
    "documentation": {}
  },
  {
    "label": "Background",
    "kind": 6,
    "importPath": "MY_GISTS.36edf2915f.Background",
    "description": "MY_GISTS.36edf2915f.Background",
    "peekOfCode": "class Background(Canvas):\n    \"\"\"\n    Classe para gerar um plano de fundo animado\n    \"\"\"\n    __background = []\n    __stop = False\n    def __init__(self, tk_instance, *geometry, fp=\"background.png\", animation_speed=50):\n        # Verifica se o parâmetro tk_instance é uma instância de Tk\n        if not isinstance(tk_instance, Tk): raise TypeError(\"The tk_instance argument must be an instance of Tk.\")\n        # Recebe o caminho de imagem e a velocidade da animação",
    "detail": "MY_GISTS.36edf2915f.Background",
    "documentation": {}
  },
  {
    "label": "today",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.backup_automater_services",
    "description": "MY_GISTS.36edf2915f.backup_automater_services",
    "peekOfCode": "today = datetime.date.today()  # Get Today's date\ntodaystr = today.isoformat()  # Format it so we can use the format to create the directory\nconfdir = os.getenv(\"my_config\")  # Set the variable by getting the value from the OS setting\ndropbox = os.getenv(\"dropbox\")  # Set the variable by getting the value from the OS setting\nconffile = 'services.conf'  # Set the variable as the name of the configuration file\nconffilename = os.path.join(confdir, conffile)  # Set the variable by combining the path and the file name\nsourcedir = os.path.expanduser('~/Library/Services/')  # Source directory of where the scripts are located\n# Combine several settings to create\ndestdir = os.path.join(dropbox, \"My_backups\" + \"/\" + \"Automater_services\" + todaystr + \"/\")\n# the destination backup directory",
    "detail": "MY_GISTS.36edf2915f.backup_automater_services",
    "documentation": {}
  },
  {
    "label": "todaystr",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.backup_automater_services",
    "description": "MY_GISTS.36edf2915f.backup_automater_services",
    "peekOfCode": "todaystr = today.isoformat()  # Format it so we can use the format to create the directory\nconfdir = os.getenv(\"my_config\")  # Set the variable by getting the value from the OS setting\ndropbox = os.getenv(\"dropbox\")  # Set the variable by getting the value from the OS setting\nconffile = 'services.conf'  # Set the variable as the name of the configuration file\nconffilename = os.path.join(confdir, conffile)  # Set the variable by combining the path and the file name\nsourcedir = os.path.expanduser('~/Library/Services/')  # Source directory of where the scripts are located\n# Combine several settings to create\ndestdir = os.path.join(dropbox, \"My_backups\" + \"/\" + \"Automater_services\" + todaystr + \"/\")\n# the destination backup directory\nfor file_name in open(conffilename):  # Walk through the configuration file",
    "detail": "MY_GISTS.36edf2915f.backup_automater_services",
    "documentation": {}
  },
  {
    "label": "confdir",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.backup_automater_services",
    "description": "MY_GISTS.36edf2915f.backup_automater_services",
    "peekOfCode": "confdir = os.getenv(\"my_config\")  # Set the variable by getting the value from the OS setting\ndropbox = os.getenv(\"dropbox\")  # Set the variable by getting the value from the OS setting\nconffile = 'services.conf'  # Set the variable as the name of the configuration file\nconffilename = os.path.join(confdir, conffile)  # Set the variable by combining the path and the file name\nsourcedir = os.path.expanduser('~/Library/Services/')  # Source directory of where the scripts are located\n# Combine several settings to create\ndestdir = os.path.join(dropbox, \"My_backups\" + \"/\" + \"Automater_services\" + todaystr + \"/\")\n# the destination backup directory\nfor file_name in open(conffilename):  # Walk through the configuration file\n    fname = file_name.strip()  # Strip out the blank lines from the configuration file",
    "detail": "MY_GISTS.36edf2915f.backup_automater_services",
    "documentation": {}
  },
  {
    "label": "dropbox",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.backup_automater_services",
    "description": "MY_GISTS.36edf2915f.backup_automater_services",
    "peekOfCode": "dropbox = os.getenv(\"dropbox\")  # Set the variable by getting the value from the OS setting\nconffile = 'services.conf'  # Set the variable as the name of the configuration file\nconffilename = os.path.join(confdir, conffile)  # Set the variable by combining the path and the file name\nsourcedir = os.path.expanduser('~/Library/Services/')  # Source directory of where the scripts are located\n# Combine several settings to create\ndestdir = os.path.join(dropbox, \"My_backups\" + \"/\" + \"Automater_services\" + todaystr + \"/\")\n# the destination backup directory\nfor file_name in open(conffilename):  # Walk through the configuration file\n    fname = file_name.strip()  # Strip out the blank lines from the configuration file\n    if fname:  # For the lines that are not blank",
    "detail": "MY_GISTS.36edf2915f.backup_automater_services",
    "documentation": {}
  },
  {
    "label": "conffile",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.backup_automater_services",
    "description": "MY_GISTS.36edf2915f.backup_automater_services",
    "peekOfCode": "conffile = 'services.conf'  # Set the variable as the name of the configuration file\nconffilename = os.path.join(confdir, conffile)  # Set the variable by combining the path and the file name\nsourcedir = os.path.expanduser('~/Library/Services/')  # Source directory of where the scripts are located\n# Combine several settings to create\ndestdir = os.path.join(dropbox, \"My_backups\" + \"/\" + \"Automater_services\" + todaystr + \"/\")\n# the destination backup directory\nfor file_name in open(conffilename):  # Walk through the configuration file\n    fname = file_name.strip()  # Strip out the blank lines from the configuration file\n    if fname:  # For the lines that are not blank\n        sourcefile = os.path.join(sourcedir, fname)  # Get the name of the source files to backup",
    "detail": "MY_GISTS.36edf2915f.backup_automater_services",
    "documentation": {}
  },
  {
    "label": "conffilename",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.backup_automater_services",
    "description": "MY_GISTS.36edf2915f.backup_automater_services",
    "peekOfCode": "conffilename = os.path.join(confdir, conffile)  # Set the variable by combining the path and the file name\nsourcedir = os.path.expanduser('~/Library/Services/')  # Source directory of where the scripts are located\n# Combine several settings to create\ndestdir = os.path.join(dropbox, \"My_backups\" + \"/\" + \"Automater_services\" + todaystr + \"/\")\n# the destination backup directory\nfor file_name in open(conffilename):  # Walk through the configuration file\n    fname = file_name.strip()  # Strip out the blank lines from the configuration file\n    if fname:  # For the lines that are not blank\n        sourcefile = os.path.join(sourcedir, fname)  # Get the name of the source files to backup\n        destfile = os.path.join(destdir, fname)  # Get the name of the destination file names",
    "detail": "MY_GISTS.36edf2915f.backup_automater_services",
    "documentation": {}
  },
  {
    "label": "sourcedir",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.backup_automater_services",
    "description": "MY_GISTS.36edf2915f.backup_automater_services",
    "peekOfCode": "sourcedir = os.path.expanduser('~/Library/Services/')  # Source directory of where the scripts are located\n# Combine several settings to create\ndestdir = os.path.join(dropbox, \"My_backups\" + \"/\" + \"Automater_services\" + todaystr + \"/\")\n# the destination backup directory\nfor file_name in open(conffilename):  # Walk through the configuration file\n    fname = file_name.strip()  # Strip out the blank lines from the configuration file\n    if fname:  # For the lines that are not blank\n        sourcefile = os.path.join(sourcedir, fname)  # Get the name of the source files to backup\n        destfile = os.path.join(destdir, fname)  # Get the name of the destination file names\n        shutil.copytree(sourcefile, destfile)  # Copy the directories",
    "detail": "MY_GISTS.36edf2915f.backup_automater_services",
    "documentation": {}
  },
  {
    "label": "destdir",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.backup_automater_services",
    "description": "MY_GISTS.36edf2915f.backup_automater_services",
    "peekOfCode": "destdir = os.path.join(dropbox, \"My_backups\" + \"/\" + \"Automater_services\" + todaystr + \"/\")\n# the destination backup directory\nfor file_name in open(conffilename):  # Walk through the configuration file\n    fname = file_name.strip()  # Strip out the blank lines from the configuration file\n    if fname:  # For the lines that are not blank\n        sourcefile = os.path.join(sourcedir, fname)  # Get the name of the source files to backup\n        destfile = os.path.join(destdir, fname)  # Get the name of the destination file names\n        shutil.copytree(sourcefile, destfile)  # Copy the directories",
    "detail": "MY_GISTS.36edf2915f.backup_automater_services",
    "documentation": {}
  },
  {
    "label": "Stack",
    "kind": 6,
    "importPath": "MY_GISTS.36edf2915f.balance_parenthesis",
    "description": "MY_GISTS.36edf2915f.balance_parenthesis",
    "peekOfCode": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)\n    def pop(self):\n        return self.items.pop()\n    def is_empty(self):\n        return self.items == []\n    def peek(self):",
    "detail": "MY_GISTS.36edf2915f.balance_parenthesis",
    "documentation": {}
  },
  {
    "label": "is_same",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.balance_parenthesis",
    "description": "MY_GISTS.36edf2915f.balance_parenthesis",
    "peekOfCode": "def is_same(p1, p2):\n        if p1 == '(' and p2 == ')':\n                return True\n        elif p1 == '[' and p2 == ']':\n                return True\n        elif p1 == '{' and p2 == '}':\n                return True\n        else:\n                return False\ndef is_balanced(check_string):",
    "detail": "MY_GISTS.36edf2915f.balance_parenthesis",
    "documentation": {}
  },
  {
    "label": "is_balanced",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.balance_parenthesis",
    "description": "MY_GISTS.36edf2915f.balance_parenthesis",
    "peekOfCode": "def is_balanced(check_string):\n        s = Stack()\n        index = 0\n        is_bal = True\n        while index < len(check_string) and is_bal:\n                paren = check_string[index]\n                if paren in '{[(':\n                        s.push(paren)\n                else:\n                        if s.is_empty():",
    "detail": "MY_GISTS.36edf2915f.balance_parenthesis",
    "documentation": {}
  },
  {
    "label": "BallObject",
    "kind": 6,
    "importPath": "MY_GISTS.36edf2915f.ball",
    "description": "MY_GISTS.36edf2915f.ball",
    "peekOfCode": "class BallObject(pyglet.shapes.Circle):\n    def __init__(self, *args, **kwargs):\n        super(BallObject, self).__init__(*args, **kwargs)\n        self.color = (255, 180, 0)\n        self.velocity_x, self.velocity_y = 0.0, 0.0\n    def update(self, win_size: Tuple, border: Tuple, other_object, dt) -> None:\n        speed = [2.37, 2.49, 2.54, 2.62, 2.71, 2.85, 2.96, 3.08, 3.17, 3.25]    # more choices more randomness\n        rn = random.choice(speed)\n        newx = self.x + self.velocity_x\n        newy = self.y + self.velocity_y",
    "detail": "MY_GISTS.36edf2915f.ball",
    "documentation": {}
  },
  {
    "label": "base_check",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.Base Converter Number system",
    "description": "MY_GISTS.36edf2915f.Base Converter Number system",
    "peekOfCode": "def base_check(xnumber, xbase):\n    for char in xnumber[len(xnumber ) -1]:\n        if int(char) >= int(xbase):\n            return False\n    return True\ndef convert_from_10(xnumber, xbase, arr, ybase):\n    if int(xbase) == 2 or int(xbase) == 4 or int(xbase) == 6 or int(xbase) == 8:\n        if xnumber == 0:\n            return arr\n        else:",
    "detail": "MY_GISTS.36edf2915f.Base Converter Number system",
    "documentation": {}
  },
  {
    "label": "convert_from_10",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.Base Converter Number system",
    "description": "MY_GISTS.36edf2915f.Base Converter Number system",
    "peekOfCode": "def convert_from_10(xnumber, xbase, arr, ybase):\n    if int(xbase) == 2 or int(xbase) == 4 or int(xbase) == 6 or int(xbase) == 8:\n        if xnumber == 0:\n            return arr\n        else:\n            quotient = int(xnumber) // int(xbase)\n            remainder = int(xnumber) % int(xbase)\n            arr.append(remainder)\n            dividend = quotient\n            convert_from_10(dividend, xbase, arr, base)",
    "detail": "MY_GISTS.36edf2915f.Base Converter Number system",
    "documentation": {}
  },
  {
    "label": "convert_to_10",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.Base Converter Number system",
    "description": "MY_GISTS.36edf2915f.Base Converter Number system",
    "peekOfCode": "def convert_to_10(xnumber, xbase, arr, ybase):\n    if int(xbase) == 10:\n        for char in xnumber:\n            arr.append(char)\n        flipped = arr[::-1]\n        ans = 0\n        j = 0\n        for i in flipped:\n            ans = ans + (int(i) * (int(ybase) ** j))\n            j = j + 1",
    "detail": "MY_GISTS.36edf2915f.Base Converter Number system",
    "documentation": {}
  },
  {
    "label": "arrayfrom",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.Base Converter Number system",
    "description": "MY_GISTS.36edf2915f.Base Converter Number system",
    "peekOfCode": "arrayfrom = []\narrayto = []\nis_base_possible = False\nnumber = input(\"Enter the number you would like to convert: \")\nwhile not is_base_possible:\n    base = input(\"What is the base of this number? \")\n    is_base_possible = base_check(number, base)\n    if not is_base_possible:\n        print(f\"The number {number} is not a base {base} number\")\n        base = input",
    "detail": "MY_GISTS.36edf2915f.Base Converter Number system",
    "documentation": {}
  },
  {
    "label": "arrayto",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.Base Converter Number system",
    "description": "MY_GISTS.36edf2915f.Base Converter Number system",
    "peekOfCode": "arrayto = []\nis_base_possible = False\nnumber = input(\"Enter the number you would like to convert: \")\nwhile not is_base_possible:\n    base = input(\"What is the base of this number? \")\n    is_base_possible = base_check(number, base)\n    if not is_base_possible:\n        print(f\"The number {number} is not a base {base} number\")\n        base = input\n    else:",
    "detail": "MY_GISTS.36edf2915f.Base Converter Number system",
    "documentation": {}
  },
  {
    "label": "is_base_possible",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.Base Converter Number system",
    "description": "MY_GISTS.36edf2915f.Base Converter Number system",
    "peekOfCode": "is_base_possible = False\nnumber = input(\"Enter the number you would like to convert: \")\nwhile not is_base_possible:\n    base = input(\"What is the base of this number? \")\n    is_base_possible = base_check(number, base)\n    if not is_base_possible:\n        print(f\"The number {number} is not a base {base} number\")\n        base = input\n    else:\n        break",
    "detail": "MY_GISTS.36edf2915f.Base Converter Number system",
    "documentation": {}
  },
  {
    "label": "number",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.Base Converter Number system",
    "description": "MY_GISTS.36edf2915f.Base Converter Number system",
    "peekOfCode": "number = input(\"Enter the number you would like to convert: \")\nwhile not is_base_possible:\n    base = input(\"What is the base of this number? \")\n    is_base_possible = base_check(number, base)\n    if not is_base_possible:\n        print(f\"The number {number} is not a base {base} number\")\n        base = input\n    else:\n        break\ndBase = input(\"What is the base you would like to convert to? \")",
    "detail": "MY_GISTS.36edf2915f.Base Converter Number system",
    "documentation": {}
  },
  {
    "label": "dBase",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.Base Converter Number system",
    "description": "MY_GISTS.36edf2915f.Base Converter Number system",
    "peekOfCode": "dBase = input(\"What is the base you would like to convert to? \")\nif int(base) == 10:\n    convert_from_10(number, dBase, arrayfrom, base)\n    answer = arrayfrom[::-1]  # reverses the array\n    print(f\"In base {dBase} this number is: \")\n    print(*answer, sep='')\nelif int(dBase) == 10:\n    answer = convert_to_10(number, dBase, arrayto, base)\n    print(f\"In base {dBase} this number is: {answer} \")\nelse:",
    "detail": "MY_GISTS.36edf2915f.Base Converter Number system",
    "documentation": {}
  },
  {
    "label": "kilometers",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.basic example",
    "description": "MY_GISTS.36edf2915f.basic example",
    "peekOfCode": "kilometers = float(input(\"Enter value in kilometers: \"))\n# conversion factor\nconv_fac = 0.621371\n# calculate miles\nmiles = kilometers * conv_fac\nprint('%0.2f kilometers is equal to %0.2f miles' %(kilometers,miles))",
    "detail": "MY_GISTS.36edf2915f.basic example",
    "documentation": {}
  },
  {
    "label": "conv_fac",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.basic example",
    "description": "MY_GISTS.36edf2915f.basic example",
    "peekOfCode": "conv_fac = 0.621371\n# calculate miles\nmiles = kilometers * conv_fac\nprint('%0.2f kilometers is equal to %0.2f miles' %(kilometers,miles))",
    "detail": "MY_GISTS.36edf2915f.basic example",
    "documentation": {}
  },
  {
    "label": "miles",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.basic example",
    "description": "MY_GISTS.36edf2915f.basic example",
    "peekOfCode": "miles = kilometers * conv_fac\nprint('%0.2f kilometers is equal to %0.2f miles' %(kilometers,miles))",
    "detail": "MY_GISTS.36edf2915f.basic example",
    "documentation": {}
  },
  {
    "label": "pdf",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.basic",
    "description": "MY_GISTS.36edf2915f.basic",
    "peekOfCode": "pdf = FPDF()\n# Set Author Name of the PDF\npdf.set_author('@NavonilDas')\n# Set Subject of The PDF\npdf.set_subject('python')\n# Set the Title of the PDF\npdf.set_title('Generating PDF with Python')\npdf.add_page()\n# Set Font family Courier with font size 28\npdf.set_font(\"Courier\", '', 18)",
    "detail": "MY_GISTS.36edf2915f.basic",
    "documentation": {}
  },
  {
    "label": "batch_rename",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.batch_file_rename",
    "description": "MY_GISTS.36edf2915f.batch_file_rename",
    "peekOfCode": "def batch_rename(work_dir, old_ext, new_ext):\n    \"\"\"\n    This will batch rename a group of files in a given directory,\n    once you pass the current and new extensions\n    \"\"\"\n    # files = os.listdir(work_dir)\n    for filename in os.listdir(work_dir):\n        # Get the file extension\n        split_file = os.path.splitext(filename)\n        # Unpack tuple element",
    "detail": "MY_GISTS.36edf2915f.batch_file_rename",
    "documentation": {}
  },
  {
    "label": "get_parser",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.batch_file_rename",
    "description": "MY_GISTS.36edf2915f.batch_file_rename",
    "peekOfCode": "def get_parser():\n    parser = argparse.ArgumentParser(description='change extension of files in a working directory')\n    parser.add_argument('work_dir', metavar='WORK_DIR', type=str, nargs=1,\n                        help='the directory where to change extension')\n    parser.add_argument('old_ext', metavar='OLD_EXT', type=str, nargs=1, help='old extension')\n    parser.add_argument('new_ext', metavar='NEW_EXT', type=str, nargs=1, help='new extension')\n    return parser\ndef main():\n    \"\"\"\n    This will be called if the script is directly invoked.",
    "detail": "MY_GISTS.36edf2915f.batch_file_rename",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.batch_file_rename",
    "description": "MY_GISTS.36edf2915f.batch_file_rename",
    "peekOfCode": "def main():\n    \"\"\"\n    This will be called if the script is directly invoked.\n    \"\"\"\n    # adding command line argument\n    parser = get_parser()\n    args = vars(parser.parse_args())\n    # Set the variable work_dir with the first argument passed\n    work_dir = args['work_dir'][0]\n    # Set the variable old_ext with the second argument passed",
    "detail": "MY_GISTS.36edf2915f.batch_file_rename",
    "documentation": {}
  },
  {
    "label": "__author__",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.batch_file_rename",
    "description": "MY_GISTS.36edf2915f.batch_file_rename",
    "peekOfCode": "__author__ = 'Craig Richards'\n__version__ = '1.0'\nimport argparse\nimport os\ndef batch_rename(work_dir, old_ext, new_ext):\n    \"\"\"\n    This will batch rename a group of files in a given directory,\n    once you pass the current and new extensions\n    \"\"\"\n    # files = os.listdir(work_dir)",
    "detail": "MY_GISTS.36edf2915f.batch_file_rename",
    "documentation": {}
  },
  {
    "label": "__version__",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.batch_file_rename",
    "description": "MY_GISTS.36edf2915f.batch_file_rename",
    "peekOfCode": "__version__ = '1.0'\nimport argparse\nimport os\ndef batch_rename(work_dir, old_ext, new_ext):\n    \"\"\"\n    This will batch rename a group of files in a given directory,\n    once you pass the current and new extensions\n    \"\"\"\n    # files = os.listdir(work_dir)\n    for filename in os.listdir(work_dir):",
    "detail": "MY_GISTS.36edf2915f.batch_file_rename",
    "documentation": {}
  },
  {
    "label": "pascal_triangle",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.Binary Coefficients",
    "description": "MY_GISTS.36edf2915f.Binary Coefficients",
    "peekOfCode": "def pascal_triangle(lineNumber):\n    list1 = list()\n    list1.append([1])\n    i = 1\n    while (i <= lineNumber):\n        j = 1\n        l = []\n        l.append(1)\n        while (j < i):\n            l.append(list1[i - 1][j] + list1[i - 1][j - 1])",
    "detail": "MY_GISTS.36edf2915f.Binary Coefficients",
    "documentation": {}
  },
  {
    "label": "binomial_coef",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.Binary Coefficients",
    "description": "MY_GISTS.36edf2915f.Binary Coefficients",
    "peekOfCode": "def binomial_coef(n, k):\n    pascalTriangle = pascal_triangle(n)\n    return (pascalTriangle[n][k - 1])",
    "detail": "MY_GISTS.36edf2915f.Binary Coefficients",
    "documentation": {}
  },
  {
    "label": "binarySearchApp",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.binary search",
    "description": "MY_GISTS.36edf2915f.binary search",
    "peekOfCode": "def binarySearchAppr (arr, start, end, x):\n# check condition\n   if end >= start:\n      mid = start + (end- start)//2\n      # If element is present at the middle\n      if arr[mid] == x:\n      return mid\n      # If element is smaller than mid\n      elif arr[mid] > x:\n      return binarySearchAppr(arr, start, mid-1, x)",
    "detail": "MY_GISTS.36edf2915f.binary search",
    "documentation": {}
  },
  {
    "label": "arr",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.binary search",
    "description": "MY_GISTS.36edf2915f.binary search",
    "peekOfCode": "arr = sorted(['t','u','t','o','r','i','a','l'])\n   x ='r'\n   result = binarySearchAppr(arr, 0, len(arr)-1, x)\nif result != -1:\n   print (\"Element is present at index \"+str(result))\nelse:\n   print (\"Element is not present in array\")",
    "detail": "MY_GISTS.36edf2915f.binary search",
    "documentation": {}
  },
  {
    "label": "Binary_Search",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.Binary_Insertion_Sort",
    "description": "MY_GISTS.36edf2915f.Binary_Insertion_Sort",
    "peekOfCode": "def Binary_Search(Test_arr, low, high, k):\n    if high >= low:\n        Mid = (low+high)//2\n        if Test_arr[Mid] < k:\n            return Binary_Search(Test_arr, Mid+1, high, k)\n        elif Test_arr[Mid] > k:\n            return Binary_Search(Test_arr, low, Mid-1, k)\n        else:\n            return Mid\n    else:",
    "detail": "MY_GISTS.36edf2915f.Binary_Insertion_Sort",
    "documentation": {}
  },
  {
    "label": "Insertion_Sort",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.Binary_Insertion_Sort",
    "description": "MY_GISTS.36edf2915f.Binary_Insertion_Sort",
    "peekOfCode": "def Insertion_Sort(Test_arr):\n    for i in range(1, len(Test_arr)):\n        val = Test_arr[i]\n        j = Binary_Search(Test_arr[:i], 0, len(Test_arr[:i])-1, val)\n        Test_arr.pop(i)\n        Test_arr.insert(j, val)\n    return Test_arr\nif __name__ == \"__main__\":\n    Test_list = input(\"Enter the list of Numbers: \").split()\n    Test_list = [int(i) for i in Test_list]",
    "detail": "MY_GISTS.36edf2915f.Binary_Insertion_Sort",
    "documentation": {}
  },
  {
    "label": "binarySearch",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.Binary_search",
    "description": "MY_GISTS.36edf2915f.Binary_search",
    "peekOfCode": "def binarySearch(arr, l, r, x):\n    while l <= r:\n        mid = l + (r - l) / 2 #extracting the middle element from the array\n        mid=int(mid) #it has to be integer\n        # Check if x is present at mid \n        if arr[mid] == x:\n            return mid\n            # If x is greater, ignore left half\n        elif arr[mid] < x:\n            l = mid + 1 #l is initialised to the rightmost element of the middle so that the search could be started from there the next time",
    "detail": "MY_GISTS.36edf2915f.Binary_search",
    "documentation": {}
  },
  {
    "label": "Node",
    "kind": 6,
    "importPath": "MY_GISTS.36edf2915f.binary_search_tree",
    "description": "MY_GISTS.36edf2915f.binary_search_tree",
    "peekOfCode": "class Node:\n    \"\"\"Class for node of a tree\"\"\"\n    def __init__(self, info):\n        \"\"\"Initialising a node\"\"\"\n        self.info = info\n        self.left = None\n        self.right = None\n        # self.level = None\n    def __str__(self):\n        return str(self.info)",
    "detail": "MY_GISTS.36edf2915f.binary_search_tree",
    "documentation": {}
  },
  {
    "label": "BinarySearchTree",
    "kind": 6,
    "importPath": "MY_GISTS.36edf2915f.binary_search_tree",
    "description": "MY_GISTS.36edf2915f.binary_search_tree",
    "peekOfCode": "class BinarySearchTree:\n    \"\"\"Class for BST\"\"\"\n    def __init__(self):\n        \"\"\"Initialising a BST\"\"\"\n        self.root = None\n    def insert(self, val):\n        \"\"\"Creating a BST with root value as val\"\"\"\n        # Check if tree has root with None value\n        if self.root is None:\n            self.root = Node(val)",
    "detail": "MY_GISTS.36edf2915f.binary_search_tree",
    "documentation": {}
  },
  {
    "label": "is_bst",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.binary_search_tree",
    "description": "MY_GISTS.36edf2915f.binary_search_tree",
    "peekOfCode": "def is_bst(node, lower_lim=None, upper_lim=None):\n    \"\"\"Function to find is a binary tree is a binary search tree.\"\"\"\n    if lower_lim is not None and node.info < lower_lim:\n        return False\n    if upper_lim is not None and node.info > upper_lim:\n        return False\n    is_left_bst = True\n    is_right_bst = True\n    if node.left is not None:\n        is_left_bst = is_bst(node.left, lower_lim, node.info)",
    "detail": "MY_GISTS.36edf2915f.binary_search_tree",
    "documentation": {}
  },
  {
    "label": "postorder",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.binary_search_tree",
    "description": "MY_GISTS.36edf2915f.binary_search_tree",
    "peekOfCode": "def postorder(node):\n    # L R N : Left , Right, Node\n    if node is None:\n        return\n    if node.left:\n        postorder(node.left)\n    if node.right:\n        postorder(node.right)\n    print(node.info)\ndef inorder(node):",
    "detail": "MY_GISTS.36edf2915f.binary_search_tree",
    "documentation": {}
  },
  {
    "label": "inorder",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.binary_search_tree",
    "description": "MY_GISTS.36edf2915f.binary_search_tree",
    "peekOfCode": "def inorder(node):\n    # L N R : Left, Node , Right\n    if node is None:\n        return\n    if node.left:\n        inorder(node.left)\n    print(node.info)\n    if node.right:\n        inorder(node.right)\ndef preorder(node):",
    "detail": "MY_GISTS.36edf2915f.binary_search_tree",
    "documentation": {}
  },
  {
    "label": "preorder",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.binary_search_tree",
    "description": "MY_GISTS.36edf2915f.binary_search_tree",
    "peekOfCode": "def preorder(node):\n    # N L R : Node , Left, Right\n    if node is None:\n        return\n    print(node.info)\n    if node.left:\n        preorder(node.left)\n    if node.right:\n        preorder(node.right)\n# Levelwise",
    "detail": "MY_GISTS.36edf2915f.binary_search_tree",
    "documentation": {}
  },
  {
    "label": "bfs",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.binary_search_tree",
    "description": "MY_GISTS.36edf2915f.binary_search_tree",
    "peekOfCode": "def bfs(node):\n    queue = []\n    if node:\n        queue.append(node)\n    while queue != []:\n        temp = queue.pop(0)\n        print(temp.info)\n        if temp.left:\n            queue.append(temp.left)\n        if temp.right:",
    "detail": "MY_GISTS.36edf2915f.binary_search_tree",
    "documentation": {}
  },
  {
    "label": "preorder_itr",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.binary_search_tree",
    "description": "MY_GISTS.36edf2915f.binary_search_tree",
    "peekOfCode": "def preorder_itr(node):\n    # N L R : Node, Left , Right\n    stack = [node]\n    values = []\n    while stack != []:\n        temp = stack.pop()\n        print(temp.info)\n        values.append(temp.info)\n        if temp.right:\n            stack.append(temp.right)",
    "detail": "MY_GISTS.36edf2915f.binary_search_tree",
    "documentation": {}
  },
  {
    "label": "inorder_itr",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.binary_search_tree",
    "description": "MY_GISTS.36edf2915f.binary_search_tree",
    "peekOfCode": "def inorder_itr(node):\n    # L N R : Left, Node, Right\n    # 1) Create an empty stack S.\n    # 2) Initialize current node as root\n    # 3) Push the current node to S and set current = current->left until current is NULL\n    # 4) If current is NULL and stack is not empty then \n    #     a) Pop the top item from stack.\n    #     b) Print the popped item, set current = popped_item->right \n    #     c) Go to step 3.\n    # 5) If current is NULL and stack is empty then we are done.",
    "detail": "MY_GISTS.36edf2915f.binary_search_tree",
    "documentation": {}
  },
  {
    "label": "postorder_itr",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.binary_search_tree",
    "description": "MY_GISTS.36edf2915f.binary_search_tree",
    "peekOfCode": "def postorder_itr(node):\n    # L R N\n    # 1. Push root to first stack.\n    # 2. Loop while first stack is not empty\n    # 2.1 Pop a node from first stack and push it to second stack\n    # 2.2 Push left and right children of the popped node to first stack\n    # 3. Print contents of second stack\n    s1, s2 = [node], []\n    while s1 != []:\n        temp = s1.pop()",
    "detail": "MY_GISTS.36edf2915f.binary_search_tree",
    "documentation": {}
  },
  {
    "label": "bst_frm_pre",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.binary_search_tree",
    "description": "MY_GISTS.36edf2915f.binary_search_tree",
    "peekOfCode": "def bst_frm_pre(pre_list):\n    box = Node(pre_list[0])\n    if len(pre_list) > 1:\n        if len(pre_list) == 2:\n            if pre_list[1] > pre_list[0]:\n                box.right = Node(pre_list[1])\n            else:\n                box.left = Node(pre_list[1])\n        else:\n            all_less = False",
    "detail": "MY_GISTS.36edf2915f.binary_search_tree",
    "documentation": {}
  },
  {
    "label": "lca",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.binary_search_tree",
    "description": "MY_GISTS.36edf2915f.binary_search_tree",
    "peekOfCode": "def lca(t_node, c1, c2):\n    if c1 == c2:\n        return c1\n    current = t_node\n    while current:\n        if c1 < current.info and c2 < current.info:\n            current = current.left\n        elif c1 > current.info and c2 > current.info:\n            current = current.right\n        else:",
    "detail": "MY_GISTS.36edf2915f.binary_search_tree",
    "documentation": {}
  },
  {
    "label": "vertical_middle_level",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.binary_search_tree",
    "description": "MY_GISTS.36edf2915f.binary_search_tree",
    "peekOfCode": "def vertical_middle_level(t_node):\n    e = (t_node, 0)         # 0 indicates level 0, to left we have -ve and to right +ve\n    queue = [e]\n    ans = []\n    # Do a level-order traversal and assign level-value to each node\n    while queue != []:\n        temp, level = queue.pop(0)\n        if level == 0:\n            ans.append(str(temp.info))\n        if temp.left:",
    "detail": "MY_GISTS.36edf2915f.binary_search_tree",
    "documentation": {}
  },
  {
    "label": "get_level",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.binary_search_tree",
    "description": "MY_GISTS.36edf2915f.binary_search_tree",
    "peekOfCode": "def get_level(n, val):\n    c_level = 0\n    while n.info != val:\n        if val < n.info:\n            n = n.left\n        elif val > n.info:\n            n = n.right\n        c_level += 1\n        if n is None:\n            return -1 ",
    "detail": "MY_GISTS.36edf2915f.binary_search_tree",
    "documentation": {}
  },
  {
    "label": "depth",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.binary_search_tree",
    "description": "MY_GISTS.36edf2915f.binary_search_tree",
    "peekOfCode": "def depth(node):\n    if node is None:\n        return 0\n    l_depth, r_depth = 0, 0\n    if node.left:\n        l_depth = depth(node.left)\n    if node.right:\n        r_depth = depth(node.right)\n    # print(node.info, l_depth, r_depth)\n    return 1 + max(l_depth, r_depth)",
    "detail": "MY_GISTS.36edf2915f.binary_search_tree",
    "documentation": {}
  },
  {
    "label": "t",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.binary_search_tree",
    "description": "MY_GISTS.36edf2915f.binary_search_tree",
    "peekOfCode": "t = BinarySearchTree()\nt.insert(10)\nt.insert(5)\nt.insert(15)\nt.insert(3)\nt.insert(1)\nt.insert(0)\nt.insert(2)\nt.insert(7)\nt.insert(12)",
    "detail": "MY_GISTS.36edf2915f.binary_search_tree",
    "documentation": {}
  },
  {
    "label": "binaryToDecimal",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.Binary_to_Decimal",
    "description": "MY_GISTS.36edf2915f.Binary_to_Decimal",
    "peekOfCode": "def binaryToDecimal(binary): \n\t\"\"\"\n\t>>> binaryToDecimal(111110000)\n\t496\n\t>>> binaryToDecimal(10100)\n\t20\n\t>>> binaryToDecimal(101011)\n\t43\n\t\"\"\"\n\tdecimal, i, n = 0, 0, 0",
    "detail": "MY_GISTS.36edf2915f.Binary_to_Decimal",
    "documentation": {}
  },
  {
    "label": "\t\tdec",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.Binary_to_Decimal",
    "description": "MY_GISTS.36edf2915f.Binary_to_Decimal",
    "peekOfCode": "\t\tdec = binary % 10\n\t\tdecimal = decimal + dec * pow(2, i) \n\t\tbinary = binary//10\n\t\ti += 1\n\tprint(decimal)\t \nbinaryToDecimal(100)",
    "detail": "MY_GISTS.36edf2915f.Binary_to_Decimal",
    "documentation": {}
  },
  {
    "label": "\t\tdecimal",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.Binary_to_Decimal",
    "description": "MY_GISTS.36edf2915f.Binary_to_Decimal",
    "peekOfCode": "\t\tdecimal = decimal + dec * pow(2, i) \n\t\tbinary = binary//10\n\t\ti += 1\n\tprint(decimal)\t \nbinaryToDecimal(100)",
    "detail": "MY_GISTS.36edf2915f.Binary_to_Decimal",
    "documentation": {}
  },
  {
    "label": "\t\tbinary",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.Binary_to_Decimal",
    "description": "MY_GISTS.36edf2915f.Binary_to_Decimal",
    "peekOfCode": "\t\tbinary = binary//10\n\t\ti += 1\n\tprint(decimal)\t \nbinaryToDecimal(100)",
    "detail": "MY_GISTS.36edf2915f.Binary_to_Decimal",
    "documentation": {}
  },
  {
    "label": "checkBinod",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.binod",
    "description": "MY_GISTS.36edf2915f.binod",
    "peekOfCode": "def checkBinod(file):#Trying to find Binod In File Insted Of Manohar Ka Kotha\n    # master\n    with open(file, \"r\") as f:\n        # master\n        fileContent = f.read()\n    if 'binod' in fileContent.lower():\n        print(\n            f'**************Congratulations Binod found in {f}********************')\n        return True\n    else:",
    "detail": "MY_GISTS.36edf2915f.binod",
    "documentation": {}
  },
  {
    "label": "Bird",
    "kind": 6,
    "importPath": "MY_GISTS.36edf2915f.Bird",
    "description": "MY_GISTS.36edf2915f.Bird",
    "peekOfCode": "class Bird(Thread):\n    \"\"\"\n    Classe para criar um pássaro\n    \"\"\"\n    __tag = \"Bird\"\n    __isAlive = None\n    __going_up = False\n    __going_down = 0\n    __times_skipped = 0\n    __running = False",
    "detail": "MY_GISTS.36edf2915f.Bird",
    "documentation": {}
  },
  {
    "label": "birthdays",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.birthdays",
    "description": "MY_GISTS.36edf2915f.birthdays",
    "peekOfCode": "birthdays = {'Alice': 'Apr 1', 'Bob': 'Dec 12', 'Carol': 'Mar 4'}\nwhile True:\n   print('Enter a name: (blank to quit)')\n name = input()\n if name == '':\n   break\n if name in birthdays:\n   print(birthdays[name] + ' is the birthday of ' + name)\n else:\n   print('I do not have birthday information for ' + name)",
    "detail": "MY_GISTS.36edf2915f.birthdays",
    "documentation": {}
  },
  {
    "label": "dealer_choice",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.blackjack",
    "description": "MY_GISTS.36edf2915f.blackjack",
    "peekOfCode": "def dealer_choice():\n    if sum(d_cards) < 17:\n        while sum(d_cards) < 17:\n            random.shuffle(deck)\n            d_cards.append(deck.pop())\n    print(\"Dealer has total \" + str(sum(d_cards)) + \"with the cards \", d_cards)\n    if sum(p_cards) == sum(d_cards):\n        print(\"***************The match is tie !!****************\")\n        exit()\n    if sum(d_cards) == 21:",
    "detail": "MY_GISTS.36edf2915f.blackjack",
    "documentation": {}
  },
  {
    "label": "deck",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.blackjack",
    "description": "MY_GISTS.36edf2915f.blackjack",
    "peekOfCode": "deck = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 11] * 4\nrandom.shuffle(deck)\nprint(\n    \"                       **********************************************************                                    \")\nprint(\n    \"                                   Welcome to the game Casino - BLACK JACK !                                         \")\nprint(\n    \"                       **********************************************************                                    \")\nd_cards = []  # Initialising dealer's cards\np_cards = []  # Initialising player's cards",
    "detail": "MY_GISTS.36edf2915f.blackjack",
    "documentation": {}
  },
  {
    "label": "d_cards",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.blackjack",
    "description": "MY_GISTS.36edf2915f.blackjack",
    "peekOfCode": "d_cards = []  # Initialising dealer's cards\np_cards = []  # Initialising player's cards\nwhile len(d_cards) != 2:\n    random.shuffle(deck)\n    d_cards.append(deck.pop())\n    if len(d_cards) == 2:\n        print('The cards dealer has are X ', d_cards[1])\n# Displaying the Player's cards\nwhile len(p_cards) != 2:\n    random.shuffle(deck)",
    "detail": "MY_GISTS.36edf2915f.blackjack",
    "documentation": {}
  },
  {
    "label": "p_cards",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.blackjack",
    "description": "MY_GISTS.36edf2915f.blackjack",
    "peekOfCode": "p_cards = []  # Initialising player's cards\nwhile len(d_cards) != 2:\n    random.shuffle(deck)\n    d_cards.append(deck.pop())\n    if len(d_cards) == 2:\n        print('The cards dealer has are X ', d_cards[1])\n# Displaying the Player's cards\nwhile len(p_cards) != 2:\n    random.shuffle(deck)\n    p_cards.append(deck.pop())",
    "detail": "MY_GISTS.36edf2915f.blackjack",
    "documentation": {}
  },
  {
    "label": "Card",
    "kind": 6,
    "importPath": "MY_GISTS.36edf2915f.blackJackGUI",
    "description": "MY_GISTS.36edf2915f.blackJackGUI",
    "peekOfCode": "class Card:\n    def __init__(self, suit, rank):\n        if (suit in SUITS) and (rank in RANKS):\n            self.suit = suit\n            self.rank = rank\n        else:\n            self.suit = None\n            self.rank = None\n            print((\"Invalid card: \", suit, rank))\n    def __str__(self):",
    "detail": "MY_GISTS.36edf2915f.blackJackGUI",
    "documentation": {}
  },
  {
    "label": "Hand",
    "kind": 6,
    "importPath": "MY_GISTS.36edf2915f.blackJackGUI",
    "description": "MY_GISTS.36edf2915f.blackJackGUI",
    "peekOfCode": "class Hand:\n    def __init__(self):\n        self.hand = []\n    def __str__(self):\n        return string_list_join(\"Hand\", self.hand)\n    def add_card(self, card):\n        self.hand.append(card)\n    def get_value(self):\n        var = []\n        self.hand_value = 0",
    "detail": "MY_GISTS.36edf2915f.blackJackGUI",
    "documentation": {}
  },
  {
    "label": "Deck",
    "kind": 6,
    "importPath": "MY_GISTS.36edf2915f.blackJackGUI",
    "description": "MY_GISTS.36edf2915f.blackJackGUI",
    "peekOfCode": "class Deck:\n    def __init__(self):\n        self.Deck = [Card(suit, rank) for suit in SUITS for rank in RANKS]\n    def shuffle(self):\n        random.shuffle(self.Deck)\n    def deal_card(self):\n        return random.choice(self.Deck)\n    def __str__(self):\n        return string_list_join(\"Deck\", self.Deck)\ndef deal():",
    "detail": "MY_GISTS.36edf2915f.blackJackGUI",
    "documentation": {}
  },
  {
    "label": "string_list_join",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.blackJackGUI",
    "description": "MY_GISTS.36edf2915f.blackJackGUI",
    "peekOfCode": "def string_list_join(string, string_list):\n    ans = string + \" contains \"\n    for i in range(len(string_list)):\n        ans += str(string_list[i]) + \" \"\n    return ans\nclass Hand:\n    def __init__(self):\n        self.hand = []\n    def __str__(self):\n        return string_list_join(\"Hand\", self.hand)",
    "detail": "MY_GISTS.36edf2915f.blackJackGUI",
    "documentation": {}
  },
  {
    "label": "deal",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.blackJackGUI",
    "description": "MY_GISTS.36edf2915f.blackJackGUI",
    "peekOfCode": "def deal():\n    global outcome, in_play, score1, score2, player_card, dealer_card, deck\n    outcome = \"\"\n    player_card = Hand()\n    dealer_card = Hand()\n    deck = Deck()\n    for i in range(2):\n        player_card.add_card(deck.deal_card())\n        dealer_card.add_card(deck.deal_card())\n    in_play = True",
    "detail": "MY_GISTS.36edf2915f.blackJackGUI",
    "documentation": {}
  },
  {
    "label": "stand",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.blackJackGUI",
    "description": "MY_GISTS.36edf2915f.blackJackGUI",
    "peekOfCode": "def stand():\n    if in_play == True:\n        while dealer_card.get_value() < 17:\n            dealer_card.add_card(deck.deal_card())\n    if dealer_card.get_value() > 21:\n        outcome = \"you won!!\"\n    elif player_card.get_value() <= dealer_card.get_value():\n        outcome = \"you lose\"\n    else:\n        outcome = \"you won!!\"",
    "detail": "MY_GISTS.36edf2915f.blackJackGUI",
    "documentation": {}
  },
  {
    "label": "hit",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.blackJackGUI",
    "description": "MY_GISTS.36edf2915f.blackJackGUI",
    "peekOfCode": "def hit():\n    global outcome, in_play, score1, score2, player_card, dealer_card, deck\n    if in_play == True:\n        player_card.add_card(deck.deal_card())\n    if player_card.get_value() > 21:\n        outcome = \"you are busted\"\n        in_play = False\n    score1 = str(player_card.get_value())\n    score2 = str(dealer_card.get_value())\ndef draw(canvas):",
    "detail": "MY_GISTS.36edf2915f.blackJackGUI",
    "documentation": {}
  },
  {
    "label": "draw",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.blackJackGUI",
    "description": "MY_GISTS.36edf2915f.blackJackGUI",
    "peekOfCode": "def draw(canvas):\n    canvas.draw_text(outcome, [250, 150], 25, 'White')\n    canvas.draw_text(\"BlackJack\", [250, 50], 40, 'Black')\n    canvas.draw_text(score1, [100, 100], 40, 'Red')\n    player_card.draw(canvas, [20, 300])\n    dealer_card.draw(canvas, [300, 300])\n    canvas.draw_text(score2, [400, 100], 40, 'Red')\nframe = simplegui.create_frame(\"Blackjack\", 600, 600)\nframe.set_canvas_background(\"Green\")\nframe.add_button(\"Deal\", deal, 200)",
    "detail": "MY_GISTS.36edf2915f.blackJackGUI",
    "documentation": {}
  },
  {
    "label": "CARD_SIZE",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.blackJackGUI",
    "description": "MY_GISTS.36edf2915f.blackJackGUI",
    "peekOfCode": "CARD_SIZE = (72, 96)\nCARD_CENTER = (36, 48)\ncard_images = simplegui.load_image(\"http://storage.googleapis.com/codeskulptor-assets/cards_jfitz.png\")\nin_play = False\noutcome = \"\"\nscore = 0\nSUITS = ('C', 'S', 'H', 'D')\nRANKS = ('A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K')\nVALUES = {'A': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'T': 10, 'J': 10, 'Q': 10, 'K': 10}\nclass Card:",
    "detail": "MY_GISTS.36edf2915f.blackJackGUI",
    "documentation": {}
  },
  {
    "label": "CARD_CENTER",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.blackJackGUI",
    "description": "MY_GISTS.36edf2915f.blackJackGUI",
    "peekOfCode": "CARD_CENTER = (36, 48)\ncard_images = simplegui.load_image(\"http://storage.googleapis.com/codeskulptor-assets/cards_jfitz.png\")\nin_play = False\noutcome = \"\"\nscore = 0\nSUITS = ('C', 'S', 'H', 'D')\nRANKS = ('A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K')\nVALUES = {'A': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'T': 10, 'J': 10, 'Q': 10, 'K': 10}\nclass Card:\n    def __init__(self, suit, rank):",
    "detail": "MY_GISTS.36edf2915f.blackJackGUI",
    "documentation": {}
  },
  {
    "label": "card_images",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.blackJackGUI",
    "description": "MY_GISTS.36edf2915f.blackJackGUI",
    "peekOfCode": "card_images = simplegui.load_image(\"http://storage.googleapis.com/codeskulptor-assets/cards_jfitz.png\")\nin_play = False\noutcome = \"\"\nscore = 0\nSUITS = ('C', 'S', 'H', 'D')\nRANKS = ('A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K')\nVALUES = {'A': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'T': 10, 'J': 10, 'Q': 10, 'K': 10}\nclass Card:\n    def __init__(self, suit, rank):\n        if (suit in SUITS) and (rank in RANKS):",
    "detail": "MY_GISTS.36edf2915f.blackJackGUI",
    "documentation": {}
  },
  {
    "label": "in_play",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.blackJackGUI",
    "description": "MY_GISTS.36edf2915f.blackJackGUI",
    "peekOfCode": "in_play = False\noutcome = \"\"\nscore = 0\nSUITS = ('C', 'S', 'H', 'D')\nRANKS = ('A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K')\nVALUES = {'A': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'T': 10, 'J': 10, 'Q': 10, 'K': 10}\nclass Card:\n    def __init__(self, suit, rank):\n        if (suit in SUITS) and (rank in RANKS):\n            self.suit = suit",
    "detail": "MY_GISTS.36edf2915f.blackJackGUI",
    "documentation": {}
  },
  {
    "label": "outcome",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.blackJackGUI",
    "description": "MY_GISTS.36edf2915f.blackJackGUI",
    "peekOfCode": "outcome = \"\"\nscore = 0\nSUITS = ('C', 'S', 'H', 'D')\nRANKS = ('A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K')\nVALUES = {'A': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'T': 10, 'J': 10, 'Q': 10, 'K': 10}\nclass Card:\n    def __init__(self, suit, rank):\n        if (suit in SUITS) and (rank in RANKS):\n            self.suit = suit\n            self.rank = rank",
    "detail": "MY_GISTS.36edf2915f.blackJackGUI",
    "documentation": {}
  },
  {
    "label": "score",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.blackJackGUI",
    "description": "MY_GISTS.36edf2915f.blackJackGUI",
    "peekOfCode": "score = 0\nSUITS = ('C', 'S', 'H', 'D')\nRANKS = ('A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K')\nVALUES = {'A': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'T': 10, 'J': 10, 'Q': 10, 'K': 10}\nclass Card:\n    def __init__(self, suit, rank):\n        if (suit in SUITS) and (rank in RANKS):\n            self.suit = suit\n            self.rank = rank\n        else:",
    "detail": "MY_GISTS.36edf2915f.blackJackGUI",
    "documentation": {}
  },
  {
    "label": "SUITS",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.blackJackGUI",
    "description": "MY_GISTS.36edf2915f.blackJackGUI",
    "peekOfCode": "SUITS = ('C', 'S', 'H', 'D')\nRANKS = ('A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K')\nVALUES = {'A': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'T': 10, 'J': 10, 'Q': 10, 'K': 10}\nclass Card:\n    def __init__(self, suit, rank):\n        if (suit in SUITS) and (rank in RANKS):\n            self.suit = suit\n            self.rank = rank\n        else:\n            self.suit = None",
    "detail": "MY_GISTS.36edf2915f.blackJackGUI",
    "documentation": {}
  },
  {
    "label": "RANKS",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.blackJackGUI",
    "description": "MY_GISTS.36edf2915f.blackJackGUI",
    "peekOfCode": "RANKS = ('A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K')\nVALUES = {'A': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'T': 10, 'J': 10, 'Q': 10, 'K': 10}\nclass Card:\n    def __init__(self, suit, rank):\n        if (suit in SUITS) and (rank in RANKS):\n            self.suit = suit\n            self.rank = rank\n        else:\n            self.suit = None\n            self.rank = None",
    "detail": "MY_GISTS.36edf2915f.blackJackGUI",
    "documentation": {}
  },
  {
    "label": "VALUES",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.blackJackGUI",
    "description": "MY_GISTS.36edf2915f.blackJackGUI",
    "peekOfCode": "VALUES = {'A': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'T': 10, 'J': 10, 'Q': 10, 'K': 10}\nclass Card:\n    def __init__(self, suit, rank):\n        if (suit in SUITS) and (rank in RANKS):\n            self.suit = suit\n            self.rank = rank\n        else:\n            self.suit = None\n            self.rank = None\n            print((\"Invalid card: \", suit, rank))",
    "detail": "MY_GISTS.36edf2915f.blackJackGUI",
    "documentation": {}
  },
  {
    "label": "frame",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.blackJackGUI",
    "description": "MY_GISTS.36edf2915f.blackJackGUI",
    "peekOfCode": "frame = simplegui.create_frame(\"Blackjack\", 600, 600)\nframe.set_canvas_background(\"Green\")\nframe.add_button(\"Deal\", deal, 200)\nframe.add_button(\"Hit\", hit, 200)\nframe.add_button(\"Stand\", stand, 200)\nframe.set_draw_handler(draw)\ndeal()\nframe.start()",
    "detail": "MY_GISTS.36edf2915f.blackJackGUI",
    "documentation": {}
  },
  {
    "label": "Colour",
    "kind": 6,
    "importPath": "MY_GISTS.36edf2915f.blackjack_rr",
    "description": "MY_GISTS.36edf2915f.blackjack_rr",
    "peekOfCode": "class Colour:\n    BLACK = '\\033[30m'\n    RED = '\\033[91m'\n    GREEN = '\\033[32m'\n    END = '\\033[0m'\nsuits = (Colour.RED +  'Hearts' + Colour.END, Colour.RED + 'Diamonds' + Colour.END, Colour.BLACK + 'Spades' + Colour.END, Colour.BLACK + 'Clubs' + Colour.END)\nranks = ('Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'Ten', 'Jack', 'Queen', 'King', 'Ace')\nvalues = {'Two': 2, 'Three': 3, 'Four': 4, 'Five': 5, 'Six': 6, 'Seven': 7, 'Eight': 8,\n          'Nine': 9, 'Ten': 10, 'Jack': 10, 'Queen': 10, 'King': 10, 'Ace': 11}\nplaying = True",
    "detail": "MY_GISTS.36edf2915f.blackjack_rr",
    "documentation": {}
  },
  {
    "label": "Card",
    "kind": 6,
    "importPath": "MY_GISTS.36edf2915f.blackjack_rr",
    "description": "MY_GISTS.36edf2915f.blackjack_rr",
    "peekOfCode": "class Card:\n    def __init__(self, suit, rank):\n        self.suit = suit\n        self.rank = rank\n    def __str__(self):\n        return self.rank + ' of ' + self.suit\nclass Deck:\n    def __init__(self):\n        self.deck = []\n        for suit in suits:",
    "detail": "MY_GISTS.36edf2915f.blackjack_rr",
    "documentation": {}
  },
  {
    "label": "Deck",
    "kind": 6,
    "importPath": "MY_GISTS.36edf2915f.blackjack_rr",
    "description": "MY_GISTS.36edf2915f.blackjack_rr",
    "peekOfCode": "class Deck:\n    def __init__(self):\n        self.deck = []\n        for suit in suits:\n            for rank in ranks:\n                self.deck.append(Card(suit, rank))\n    def __str__(self):\n        deck_comp = ''\n        for card in self.deck:\n            deck_comp += '\\n ' + card.__str__()",
    "detail": "MY_GISTS.36edf2915f.blackjack_rr",
    "documentation": {}
  },
  {
    "label": "Hand",
    "kind": 6,
    "importPath": "MY_GISTS.36edf2915f.blackjack_rr",
    "description": "MY_GISTS.36edf2915f.blackjack_rr",
    "peekOfCode": "class Hand:\n    def __init__(self):\n        self.cards = []\n        self.value = 0\n        self.aces = 0  # to keep track of aces\n    def add_card(self, card):\n        self.cards.append(card)\n        self.value += values[card.rank]\n        if card.rank == 'Ace':\n            self.aces += 1",
    "detail": "MY_GISTS.36edf2915f.blackjack_rr",
    "documentation": {}
  },
  {
    "label": "Chips",
    "kind": 6,
    "importPath": "MY_GISTS.36edf2915f.blackjack_rr",
    "description": "MY_GISTS.36edf2915f.blackjack_rr",
    "peekOfCode": "class Chips:\n    def __init__(self):\n        self.total = 100\n        self.bet = 0\n    def win_bet(self):\n        self.total += self.bet\n    def lose_bet(self):\n        self.total -= self.bet\ndef take_bet(chips):\n    while True:",
    "detail": "MY_GISTS.36edf2915f.blackjack_rr",
    "documentation": {}
  },
  {
    "label": "take_bet",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.blackjack_rr",
    "description": "MY_GISTS.36edf2915f.blackjack_rr",
    "peekOfCode": "def take_bet(chips):\n    while True:\n        try:\n            chips.bet = int(input('How many chips would you like to bet? '))\n        except ValueError:\n            print('Your bet must be an integer! Try again.')\n        else:\n            if chips.bet > chips.total or chips.bet <= 0:\n                print(\n                    \"Your bet cannot exceed your balance and you have to enter a positive bet! Your current balance is: \",",
    "detail": "MY_GISTS.36edf2915f.blackjack_rr",
    "documentation": {}
  },
  {
    "label": "hit",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.blackjack_rr",
    "description": "MY_GISTS.36edf2915f.blackjack_rr",
    "peekOfCode": "def hit(deck, hand):\n    hand.add_card(deck.deal())\n    hand.adjust_for_ace()\ndef hit_or_stand(deck, hand):\n    global playing\n    while True:\n        x = input(\"Would you like to Hit or Stand? Enter '1' or '0' \")\n        if x.lower() == '1':\n            hit(deck, hand)\n        elif x.lower() == '0':",
    "detail": "MY_GISTS.36edf2915f.blackjack_rr",
    "documentation": {}
  },
  {
    "label": "hit_or_stand",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.blackjack_rr",
    "description": "MY_GISTS.36edf2915f.blackjack_rr",
    "peekOfCode": "def hit_or_stand(deck, hand):\n    global playing\n    while True:\n        x = input(\"Would you like to Hit or Stand? Enter '1' or '0' \")\n        if x.lower() == '1':\n            hit(deck, hand)\n        elif x.lower() == '0':\n            print(\"You chose to stand. Dealer will hit.\")\n            playing = False\n        else:",
    "detail": "MY_GISTS.36edf2915f.blackjack_rr",
    "documentation": {}
  },
  {
    "label": "show_some",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.blackjack_rr",
    "description": "MY_GISTS.36edf2915f.blackjack_rr",
    "peekOfCode": "def show_some(player, dealer):\n    print(\"\\nDealer's Hand:\")\n    print(\" { hidden card }\")\n    print('', dealer.cards[1])\n    print(\"\\nYour Hand:\", *player.cards, sep='\\n ')\ndef show_all(player, dealer):\n    print(\"\\nDealer's Hand:\", *dealer.cards, sep='\\n ')\n    print(\"Dealer's Hand =\", dealer.value)\n    print(\"\\nYour Hand:\", *player.cards, sep='\\n ')\n    print(\"Your Hand =\", player.value)",
    "detail": "MY_GISTS.36edf2915f.blackjack_rr",
    "documentation": {}
  },
  {
    "label": "show_all",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.blackjack_rr",
    "description": "MY_GISTS.36edf2915f.blackjack_rr",
    "peekOfCode": "def show_all(player, dealer):\n    print(\"\\nDealer's Hand:\", *dealer.cards, sep='\\n ')\n    print(\"Dealer's Hand =\", dealer.value)\n    print(\"\\nYour Hand:\", *player.cards, sep='\\n ')\n    print(\"Your Hand =\", player.value)\ndef player_busts(player, dealer, chips):\n    print(\"You are BUSTED !\")\n    chips.lose_bet()\ndef player_wins(player, dealer, chips):\n    print(\"You are the winner!\")",
    "detail": "MY_GISTS.36edf2915f.blackjack_rr",
    "documentation": {}
  },
  {
    "label": "player_busts",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.blackjack_rr",
    "description": "MY_GISTS.36edf2915f.blackjack_rr",
    "peekOfCode": "def player_busts(player, dealer, chips):\n    print(\"You are BUSTED !\")\n    chips.lose_bet()\ndef player_wins(player, dealer, chips):\n    print(\"You are the winner!\")\n    chips.win_bet()\ndef dealer_busts(player, dealer, chips):\n    print(\"Dealer has BUSTED !\")\n    chips.win_bet()\ndef dealer_wins(player, dealer, chips):",
    "detail": "MY_GISTS.36edf2915f.blackjack_rr",
    "documentation": {}
  },
  {
    "label": "player_wins",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.blackjack_rr",
    "description": "MY_GISTS.36edf2915f.blackjack_rr",
    "peekOfCode": "def player_wins(player, dealer, chips):\n    print(\"You are the winner!\")\n    chips.win_bet()\ndef dealer_busts(player, dealer, chips):\n    print(\"Dealer has BUSTED !\")\n    chips.win_bet()\ndef dealer_wins(player, dealer, chips):\n    print(\"Dealer is the winner!\")\n    chips.lose_bet()\ndef push(player, dealer):",
    "detail": "MY_GISTS.36edf2915f.blackjack_rr",
    "documentation": {}
  },
  {
    "label": "dealer_busts",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.blackjack_rr",
    "description": "MY_GISTS.36edf2915f.blackjack_rr",
    "peekOfCode": "def dealer_busts(player, dealer, chips):\n    print(\"Dealer has BUSTED !\")\n    chips.win_bet()\ndef dealer_wins(player, dealer, chips):\n    print(\"Dealer is the winner!\")\n    chips.lose_bet()\ndef push(player, dealer):\n    print(\"The match is tie !\")\n# GAMEPLAY\nplayer_chips = Chips()",
    "detail": "MY_GISTS.36edf2915f.blackjack_rr",
    "documentation": {}
  },
  {
    "label": "dealer_wins",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.blackjack_rr",
    "description": "MY_GISTS.36edf2915f.blackjack_rr",
    "peekOfCode": "def dealer_wins(player, dealer, chips):\n    print(\"Dealer is the winner!\")\n    chips.lose_bet()\ndef push(player, dealer):\n    print(\"The match is tie !\")\n# GAMEPLAY\nplayer_chips = Chips()\nwhile True:\n    print(\"\\t              **********************************************************\")\n    print(",
    "detail": "MY_GISTS.36edf2915f.blackjack_rr",
    "documentation": {}
  },
  {
    "label": "push",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.blackjack_rr",
    "description": "MY_GISTS.36edf2915f.blackjack_rr",
    "peekOfCode": "def push(player, dealer):\n    print(\"The match is tie !\")\n# GAMEPLAY\nplayer_chips = Chips()\nwhile True:\n    print(\"\\t              **********************************************************\")\n    print(\n        \"\\t                       Welcome to the game Casino - BLACK JACK !                                                     \")\n    print(\"\\t              **********************************************************\")\n    print(Colour.BLACK + \"\\t                                   ***************\")",
    "detail": "MY_GISTS.36edf2915f.blackjack_rr",
    "documentation": {}
  },
  {
    "label": "suits",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.blackjack_rr",
    "description": "MY_GISTS.36edf2915f.blackjack_rr",
    "peekOfCode": "suits = (Colour.RED +  'Hearts' + Colour.END, Colour.RED + 'Diamonds' + Colour.END, Colour.BLACK + 'Spades' + Colour.END, Colour.BLACK + 'Clubs' + Colour.END)\nranks = ('Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'Ten', 'Jack', 'Queen', 'King', 'Ace')\nvalues = {'Two': 2, 'Three': 3, 'Four': 4, 'Five': 5, 'Six': 6, 'Seven': 7, 'Eight': 8,\n          'Nine': 9, 'Ten': 10, 'Jack': 10, 'Queen': 10, 'King': 10, 'Ace': 11}\nplaying = True\nclass Card:\n    def __init__(self, suit, rank):\n        self.suit = suit\n        self.rank = rank\n    def __str__(self):",
    "detail": "MY_GISTS.36edf2915f.blackjack_rr",
    "documentation": {}
  },
  {
    "label": "ranks",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.blackjack_rr",
    "description": "MY_GISTS.36edf2915f.blackjack_rr",
    "peekOfCode": "ranks = ('Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'Ten', 'Jack', 'Queen', 'King', 'Ace')\nvalues = {'Two': 2, 'Three': 3, 'Four': 4, 'Five': 5, 'Six': 6, 'Seven': 7, 'Eight': 8,\n          'Nine': 9, 'Ten': 10, 'Jack': 10, 'Queen': 10, 'King': 10, 'Ace': 11}\nplaying = True\nclass Card:\n    def __init__(self, suit, rank):\n        self.suit = suit\n        self.rank = rank\n    def __str__(self):\n        return self.rank + ' of ' + self.suit",
    "detail": "MY_GISTS.36edf2915f.blackjack_rr",
    "documentation": {}
  },
  {
    "label": "values",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.blackjack_rr",
    "description": "MY_GISTS.36edf2915f.blackjack_rr",
    "peekOfCode": "values = {'Two': 2, 'Three': 3, 'Four': 4, 'Five': 5, 'Six': 6, 'Seven': 7, 'Eight': 8,\n          'Nine': 9, 'Ten': 10, 'Jack': 10, 'Queen': 10, 'King': 10, 'Ace': 11}\nplaying = True\nclass Card:\n    def __init__(self, suit, rank):\n        self.suit = suit\n        self.rank = rank\n    def __str__(self):\n        return self.rank + ' of ' + self.suit\nclass Deck:",
    "detail": "MY_GISTS.36edf2915f.blackjack_rr",
    "documentation": {}
  },
  {
    "label": "playing",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.blackjack_rr",
    "description": "MY_GISTS.36edf2915f.blackjack_rr",
    "peekOfCode": "playing = True\nclass Card:\n    def __init__(self, suit, rank):\n        self.suit = suit\n        self.rank = rank\n    def __str__(self):\n        return self.rank + ' of ' + self.suit\nclass Deck:\n    def __init__(self):\n        self.deck = []",
    "detail": "MY_GISTS.36edf2915f.blackjack_rr",
    "documentation": {}
  },
  {
    "label": "player_chips",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.blackjack_rr",
    "description": "MY_GISTS.36edf2915f.blackjack_rr",
    "peekOfCode": "player_chips = Chips()\nwhile True:\n    print(\"\\t              **********************************************************\")\n    print(\n        \"\\t                       Welcome to the game Casino - BLACK JACK !                                                     \")\n    print(\"\\t              **********************************************************\")\n    print(Colour.BLACK + \"\\t                                   ***************\")\n    print(\"\\t                                   * A           *\")\n    print(\"\\t                                   *             *\")\n    print(\"\\t                                   *      *      *\")",
    "detail": "MY_GISTS.36edf2915f.blackjack_rr",
    "documentation": {}
  },
  {
    "label": {
      "name": "",
      "kind": 2,
      "peekOfCode": "def  DBZ():\n    # IF  NO.  OF  BOOKS  IS     ZERO(0)     THAN  DELETE  IT  AUTOMATICALLY\n    display=\"select * from books\"\n    mycur.execute(display)\n    data2=mycur.fetchall()\n    for y in data2:\n        if y[6]<=0:\n            delete=\"delete from books where  Numbers_of_book<=0\"\n            mycur.execute(delete)\n            mycon.commit()"
    },
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.bookstore_manangement_system",
    "description": "MY_GISTS.36edf2915f.bookstore_manangement_system",
    "peekOfCode": "def  DBZ():\n    # IF  NO.  OF  BOOKS  IS     ZERO(0)     THAN  DELETE  IT  AUTOMATICALLY\n    display=\"select * from books\"\n    mycur.execute(display)\n    data2=mycur.fetchall()\n    for y in data2:\n        if y[6]<=0:\n            delete=\"delete from books where  Numbers_of_book<=0\"\n            mycur.execute(delete)\n            mycon.commit()",
    "detail": "MY_GISTS.36edf2915f.bookstore_manangement_system",
    "documentation": {}
  },
  {
    "label": "separator",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.bookstore_manangement_system",
    "description": "MY_GISTS.36edf2915f.bookstore_manangement_system",
    "peekOfCode": "def separator():\n    print()\n    print(\"\\t\\t========================================\")\n    print()\ndef end_separator():\n    print()\n    print()",
    "detail": "MY_GISTS.36edf2915f.bookstore_manangement_system",
    "documentation": {}
  },
  {
    "label": "end_separator",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.bookstore_manangement_system",
    "description": "MY_GISTS.36edf2915f.bookstore_manangement_system",
    "peekOfCode": "def end_separator():\n    print()\n    print()\ndef   login():\n    user_name=input(\" USER NAME  ---  \")\n    passw=input(\" PASSWORD  ---  \")\n    display='select * from login'\n    mycur.execute(display)",
    "detail": "MY_GISTS.36edf2915f.bookstore_manangement_system",
    "documentation": {}
  },
  {
    "label": {
      "name": "",
      "kind": 2,
      "peekOfCode": "def   login():\n    user_name=input(\" USER NAME  ---  \")\n    passw=input(\" PASSWORD  ---  \")\n    display='select * from login'\n    mycur.execute(display)\n    data2=mycur.fetchall()\n    for y in data2:\n        if y[1]==user_name  and  y[2]==passw:\n            pass\n        else:"
    },
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.bookstore_manangement_system",
    "description": "MY_GISTS.36edf2915f.bookstore_manangement_system",
    "peekOfCode": "def   login():\n    user_name=input(\" USER NAME  ---  \")\n    passw=input(\" PASSWORD  ---  \")\n    display='select * from login'\n    mycur.execute(display)\n    data2=mycur.fetchall()\n    for y in data2:\n        if y[1]==user_name  and  y[2]==passw:\n            pass\n        else:",
    "detail": "MY_GISTS.36edf2915f.bookstore_manangement_system",
    "documentation": {}
  },
  {
    "label": "ViewAll",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.bookstore_manangement_system",
    "description": "MY_GISTS.36edf2915f.bookstore_manangement_system",
    "peekOfCode": "def ViewAll():\n    print(\"\\u0332\".join(\"BOOK NAMES~~\"))\n    print(\"------------------------------------\")\n    display='select * from books'\n    mycur.execute(display)\n    data2=mycur.fetchall()\n    c=0\n    for y in data2:\n        c=c+1\n        print(c,\"-->\",y[1])",
    "detail": "MY_GISTS.36edf2915f.bookstore_manangement_system",
    "documentation": {}
  },
  {
    "label": {
      "name": "",
      "kind": 2,
      "peekOfCode": "def  CNB1():\n    if y[6]==0:\n        separator()\n        print(\" NOW  THIS  BOOK  IS  NOT  AVAILABLE \")\n    elif y[6]>0 and y[6]<=8:\n        separator()\n        print(\"WARNING!!!!!!!!!!!!!!!!!!!!!!!\")\n        print(\"NO.  OF THIS BOOK IS LOW\",\"\\tONLY\",y[6]-1,\"LEFT\")\n        print()"
    },
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.bookstore_manangement_system",
    "description": "MY_GISTS.36edf2915f.bookstore_manangement_system",
    "peekOfCode": "def  CNB1():\n    if y[6]==0:\n        separator()\n        print(\" NOW  THIS  BOOK  IS  NOT  AVAILABLE \")\n    elif y[6]>0 and y[6]<=8:\n        separator()\n        print(\"WARNING!!!!!!!!!!!!!!!!!!!!!!!\")\n        print(\"NO.  OF THIS BOOK IS LOW\",\"\\tONLY\",y[6]-1,\"LEFT\")\n        print()",
    "detail": "MY_GISTS.36edf2915f.bookstore_manangement_system",
    "documentation": {}
  },
  {
    "label": {
      "name": "",
      "kind": 2,
      "peekOfCode": "def  CNB2():\n    if y[6]<=8:\n        separator()\n        print(\"WARNING!!!!!!!!!!!!!!!!!!!!!!!\")\n        print(\"NO.  OF THIS BOOK IS LOW\",\"\\tONLY\",y[6],\"LEFT\")\n    else:\n        separator()\n        print(\"NO.  OF  BOOKS  LEFT  IS \",y[6])"
    },
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.bookstore_manangement_system",
    "description": "MY_GISTS.36edf2915f.bookstore_manangement_system",
    "peekOfCode": "def  CNB2():\n    if y[6]<=8:\n        separator()\n        print(\"WARNING!!!!!!!!!!!!!!!!!!!!!!!\")\n        print(\"NO.  OF THIS BOOK IS LOW\",\"\\tONLY\",y[6],\"LEFT\")\n    else:\n        separator()\n        print(\"NO.  OF  BOOKS  LEFT  IS \",y[6])",
    "detail": "MY_GISTS.36edf2915f.bookstore_manangement_system",
    "documentation": {}
  },
  {
    "label": "Ball",
    "kind": 6,
    "importPath": "MY_GISTS.36edf2915f.brickout-game",
    "description": "MY_GISTS.36edf2915f.brickout-game",
    "peekOfCode": "class Ball(object):\n    def __init__(self, screen, radius, x, y):\n        self.__screen = screen\n        self._radius = radius\n        self._xLoc = x\n        self._yLoc = y\n        self.__xVel = 7\n        self.__yVel = 2\n        w, h = pygame.display.get_surface().get_size()\n        self.__width = w",
    "detail": "MY_GISTS.36edf2915f.brickout-game",
    "documentation": {}
  },
  {
    "label": "Paddle",
    "kind": 6,
    "importPath": "MY_GISTS.36edf2915f.brickout-game",
    "description": "MY_GISTS.36edf2915f.brickout-game",
    "peekOfCode": "class Paddle(object):\n    def __init__(self, screen, width, height, x, y):\n        self.__screen = screen\n        self._width = width\n        self._height = height\n        self._xLoc = x\n        self._yLoc = y\n        w, h = pygame.display.get_surface().get_size()\n        self.__W = w\n        self.__H = h",
    "detail": "MY_GISTS.36edf2915f.brickout-game",
    "documentation": {}
  },
  {
    "label": "Brick",
    "kind": 6,
    "importPath": "MY_GISTS.36edf2915f.brickout-game",
    "description": "MY_GISTS.36edf2915f.brickout-game",
    "peekOfCode": "class Brick(pygame.sprite.Sprite):\n    def __init__(self, screen, width, height, x, y):\n        self.__screen = screen\n        self._width = width\n        self._height = height\n        self._xLoc = x\n        self._yLoc = y\n        w, h = pygame.display.get_surface().get_size()\n        self.__W = w\n        self.__H = h",
    "detail": "MY_GISTS.36edf2915f.brickout-game",
    "documentation": {}
  },
  {
    "label": "BrickWall",
    "kind": 6,
    "importPath": "MY_GISTS.36edf2915f.brickout-game",
    "description": "MY_GISTS.36edf2915f.brickout-game",
    "peekOfCode": "class BrickWall(pygame.sprite.Group):\n    def __init__(self, screen, x, y, width, height):\n        self.__screen = screen\n        self._x = x\n        self._y = y\n        self._width = width\n        self._height = height\n        self._bricks = []\n        X = x\n        Y = y",
    "detail": "MY_GISTS.36edf2915f.brickout-game",
    "documentation": {}
  },
  {
    "label": "BLACK",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.brickout-game",
    "description": "MY_GISTS.36edf2915f.brickout-game",
    "peekOfCode": "BLACK = (0, 0, 0)\nWHITE = (255, 255, 255)\nGREEN = (0, 255, 0)\nRED = (255, 0, 0)\npygame.init()\n# Setting the width and height of the screen [width, height]\nsize = (700, 500)\nscreen = pygame.display.set_mode(size)\n\"\"\"\n    This is a simple Ball class for respresenting a ball ",
    "detail": "MY_GISTS.36edf2915f.brickout-game",
    "documentation": {}
  },
  {
    "label": "WHITE",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.brickout-game",
    "description": "MY_GISTS.36edf2915f.brickout-game",
    "peekOfCode": "WHITE = (255, 255, 255)\nGREEN = (0, 255, 0)\nRED = (255, 0, 0)\npygame.init()\n# Setting the width and height of the screen [width, height]\nsize = (700, 500)\nscreen = pygame.display.set_mode(size)\n\"\"\"\n    This is a simple Ball class for respresenting a ball \n    in the game. ",
    "detail": "MY_GISTS.36edf2915f.brickout-game",
    "documentation": {}
  },
  {
    "label": "GREEN",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.brickout-game",
    "description": "MY_GISTS.36edf2915f.brickout-game",
    "peekOfCode": "GREEN = (0, 255, 0)\nRED = (255, 0, 0)\npygame.init()\n# Setting the width and height of the screen [width, height]\nsize = (700, 500)\nscreen = pygame.display.set_mode(size)\n\"\"\"\n    This is a simple Ball class for respresenting a ball \n    in the game. \n\"\"\"",
    "detail": "MY_GISTS.36edf2915f.brickout-game",
    "documentation": {}
  },
  {
    "label": "RED",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.brickout-game",
    "description": "MY_GISTS.36edf2915f.brickout-game",
    "peekOfCode": "RED = (255, 0, 0)\npygame.init()\n# Setting the width and height of the screen [width, height]\nsize = (700, 500)\nscreen = pygame.display.set_mode(size)\n\"\"\"\n    This is a simple Ball class for respresenting a ball \n    in the game. \n\"\"\"\nclass Ball(object):",
    "detail": "MY_GISTS.36edf2915f.brickout-game",
    "documentation": {}
  },
  {
    "label": "size",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.brickout-game",
    "description": "MY_GISTS.36edf2915f.brickout-game",
    "peekOfCode": "size = (700, 500)\nscreen = pygame.display.set_mode(size)\n\"\"\"\n    This is a simple Ball class for respresenting a ball \n    in the game. \n\"\"\"\nclass Ball(object):\n    def __init__(self, screen, radius, x, y):\n        self.__screen = screen\n        self._radius = radius",
    "detail": "MY_GISTS.36edf2915f.brickout-game",
    "documentation": {}
  },
  {
    "label": "screen",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.brickout-game",
    "description": "MY_GISTS.36edf2915f.brickout-game",
    "peekOfCode": "screen = pygame.display.set_mode(size)\n\"\"\"\n    This is a simple Ball class for respresenting a ball \n    in the game. \n\"\"\"\nclass Ball(object):\n    def __init__(self, screen, radius, x, y):\n        self.__screen = screen\n        self._radius = radius\n        self._xLoc = x",
    "detail": "MY_GISTS.36edf2915f.brickout-game",
    "documentation": {}
  },
  {
    "label": "ball",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.brickout-game",
    "description": "MY_GISTS.36edf2915f.brickout-game",
    "peekOfCode": "ball = Ball(screen, 25, random.randint(1, 700), 250)\npaddle = Paddle(screen, 100, 20, 250, 450)\nbrickWall = BrickWall(screen, 25, 25, 150, 50)\nisGameOver = False  # determines whether game is lose\ngameStatus = True  # game is still running\nscore = 0  # score for the game.\npygame.display.set_caption(\"Brickout-game\")\n# Loop until the user clicks the close button.\ndone = False\n# Used to manage how fast the screen updates",
    "detail": "MY_GISTS.36edf2915f.brickout-game",
    "documentation": {}
  },
  {
    "label": "paddle",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.brickout-game",
    "description": "MY_GISTS.36edf2915f.brickout-game",
    "peekOfCode": "paddle = Paddle(screen, 100, 20, 250, 450)\nbrickWall = BrickWall(screen, 25, 25, 150, 50)\nisGameOver = False  # determines whether game is lose\ngameStatus = True  # game is still running\nscore = 0  # score for the game.\npygame.display.set_caption(\"Brickout-game\")\n# Loop until the user clicks the close button.\ndone = False\n# Used to manage how fast the screen updates\nclock = pygame.time.Clock()",
    "detail": "MY_GISTS.36edf2915f.brickout-game",
    "documentation": {}
  },
  {
    "label": "brickWall",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.brickout-game",
    "description": "MY_GISTS.36edf2915f.brickout-game",
    "peekOfCode": "brickWall = BrickWall(screen, 25, 25, 150, 50)\nisGameOver = False  # determines whether game is lose\ngameStatus = True  # game is still running\nscore = 0  # score for the game.\npygame.display.set_caption(\"Brickout-game\")\n# Loop until the user clicks the close button.\ndone = False\n# Used to manage how fast the screen updates\nclock = pygame.time.Clock()\n# for displaying text in the game ",
    "detail": "MY_GISTS.36edf2915f.brickout-game",
    "documentation": {}
  },
  {
    "label": "isGameOver",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.brickout-game",
    "description": "MY_GISTS.36edf2915f.brickout-game",
    "peekOfCode": "isGameOver = False  # determines whether game is lose\ngameStatus = True  # game is still running\nscore = 0  # score for the game.\npygame.display.set_caption(\"Brickout-game\")\n# Loop until the user clicks the close button.\ndone = False\n# Used to manage how fast the screen updates\nclock = pygame.time.Clock()\n# for displaying text in the game \npygame.font.init()  # you have to call this at the start,",
    "detail": "MY_GISTS.36edf2915f.brickout-game",
    "documentation": {}
  },
  {
    "label": "gameStatus",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.brickout-game",
    "description": "MY_GISTS.36edf2915f.brickout-game",
    "peekOfCode": "gameStatus = True  # game is still running\nscore = 0  # score for the game.\npygame.display.set_caption(\"Brickout-game\")\n# Loop until the user clicks the close button.\ndone = False\n# Used to manage how fast the screen updates\nclock = pygame.time.Clock()\n# for displaying text in the game \npygame.font.init()  # you have to call this at the start,\n# if you want to use this module.",
    "detail": "MY_GISTS.36edf2915f.brickout-game",
    "documentation": {}
  },
  {
    "label": "score",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.brickout-game",
    "description": "MY_GISTS.36edf2915f.brickout-game",
    "peekOfCode": "score = 0  # score for the game.\npygame.display.set_caption(\"Brickout-game\")\n# Loop until the user clicks the close button.\ndone = False\n# Used to manage how fast the screen updates\nclock = pygame.time.Clock()\n# for displaying text in the game \npygame.font.init()  # you have to call this at the start,\n# if you want to use this module.\n# message for game over",
    "detail": "MY_GISTS.36edf2915f.brickout-game",
    "documentation": {}
  },
  {
    "label": "done",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.brickout-game",
    "description": "MY_GISTS.36edf2915f.brickout-game",
    "peekOfCode": "done = False\n# Used to manage how fast the screen updates\nclock = pygame.time.Clock()\n# for displaying text in the game \npygame.font.init()  # you have to call this at the start,\n# if you want to use this module.\n# message for game over\nmgGameOver = pygame.font.SysFont('Comic Sans MS', 40)\n# message for winning the game.\nmgWin = pygame.font.SysFont('Comic Sans MS', 40)",
    "detail": "MY_GISTS.36edf2915f.brickout-game",
    "documentation": {}
  },
  {
    "label": "clock",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.brickout-game",
    "description": "MY_GISTS.36edf2915f.brickout-game",
    "peekOfCode": "clock = pygame.time.Clock()\n# for displaying text in the game \npygame.font.init()  # you have to call this at the start,\n# if you want to use this module.\n# message for game over\nmgGameOver = pygame.font.SysFont('Comic Sans MS', 40)\n# message for winning the game.\nmgWin = pygame.font.SysFont('Comic Sans MS', 40)\n# message for score\nmgScore = pygame.font.SysFont('Comic Sans MS', 40)",
    "detail": "MY_GISTS.36edf2915f.brickout-game",
    "documentation": {}
  },
  {
    "label": "mgGameOver",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.brickout-game",
    "description": "MY_GISTS.36edf2915f.brickout-game",
    "peekOfCode": "mgGameOver = pygame.font.SysFont('Comic Sans MS', 40)\n# message for winning the game.\nmgWin = pygame.font.SysFont('Comic Sans MS', 40)\n# message for score\nmgScore = pygame.font.SysFont('Comic Sans MS', 40)\ntextsurfaceGameOver = mgGameOver.render('Game Over!', False, (0, 0, 0))\ntextsurfaceWin = mgWin.render(\"You win!\", False, (0, 0, 0))\ntextsurfaceScore = mgScore.render(\"score: \" + str(score), False, (0, 0, 0))\n# -------- Main Program Loop -----------\nwhile not done:",
    "detail": "MY_GISTS.36edf2915f.brickout-game",
    "documentation": {}
  },
  {
    "label": "mgWin",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.brickout-game",
    "description": "MY_GISTS.36edf2915f.brickout-game",
    "peekOfCode": "mgWin = pygame.font.SysFont('Comic Sans MS', 40)\n# message for score\nmgScore = pygame.font.SysFont('Comic Sans MS', 40)\ntextsurfaceGameOver = mgGameOver.render('Game Over!', False, (0, 0, 0))\ntextsurfaceWin = mgWin.render(\"You win!\", False, (0, 0, 0))\ntextsurfaceScore = mgScore.render(\"score: \" + str(score), False, (0, 0, 0))\n# -------- Main Program Loop -----------\nwhile not done:\n    # --- Main event loop\n    for event in pygame.event.get():",
    "detail": "MY_GISTS.36edf2915f.brickout-game",
    "documentation": {}
  },
  {
    "label": "mgScore",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.brickout-game",
    "description": "MY_GISTS.36edf2915f.brickout-game",
    "peekOfCode": "mgScore = pygame.font.SysFont('Comic Sans MS', 40)\ntextsurfaceGameOver = mgGameOver.render('Game Over!', False, (0, 0, 0))\ntextsurfaceWin = mgWin.render(\"You win!\", False, (0, 0, 0))\ntextsurfaceScore = mgScore.render(\"score: \" + str(score), False, (0, 0, 0))\n# -------- Main Program Loop -----------\nwhile not done:\n    # --- Main event loop\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            done = True",
    "detail": "MY_GISTS.36edf2915f.brickout-game",
    "documentation": {}
  },
  {
    "label": "textsurfaceGameOver",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.brickout-game",
    "description": "MY_GISTS.36edf2915f.brickout-game",
    "peekOfCode": "textsurfaceGameOver = mgGameOver.render('Game Over!', False, (0, 0, 0))\ntextsurfaceWin = mgWin.render(\"You win!\", False, (0, 0, 0))\ntextsurfaceScore = mgScore.render(\"score: \" + str(score), False, (0, 0, 0))\n# -------- Main Program Loop -----------\nwhile not done:\n    # --- Main event loop\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            done = True\n    # --- Game logic should go here",
    "detail": "MY_GISTS.36edf2915f.brickout-game",
    "documentation": {}
  },
  {
    "label": "textsurfaceWin",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.brickout-game",
    "description": "MY_GISTS.36edf2915f.brickout-game",
    "peekOfCode": "textsurfaceWin = mgWin.render(\"You win!\", False, (0, 0, 0))\ntextsurfaceScore = mgScore.render(\"score: \" + str(score), False, (0, 0, 0))\n# -------- Main Program Loop -----------\nwhile not done:\n    # --- Main event loop\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            done = True\n    # --- Game logic should go here\n    # --- Screen-clearing code goes here",
    "detail": "MY_GISTS.36edf2915f.brickout-game",
    "documentation": {}
  },
  {
    "label": "textsurfaceScore",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.brickout-game",
    "description": "MY_GISTS.36edf2915f.brickout-game",
    "peekOfCode": "textsurfaceScore = mgScore.render(\"score: \" + str(score), False, (0, 0, 0))\n# -------- Main Program Loop -----------\nwhile not done:\n    # --- Main event loop\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            done = True\n    # --- Game logic should go here\n    # --- Screen-clearing code goes here\n    # Here, we clear the screen to white. Don't put other drawing commands",
    "detail": "MY_GISTS.36edf2915f.brickout-game",
    "documentation": {}
  },
  {
    "label": "oddEvenSort",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.brickSort",
    "description": "MY_GISTS.36edf2915f.brickSort",
    "peekOfCode": "def oddEvenSort(arr, n): \n    # Initially array is unsorted \n    isSorted = 0\n    while isSorted == 0: \n        isSorted = 1\n        temp = 0\n        for i in range(1, n-1, 2): \n            if arr[i] > arr[i+1]: \n                arr[i], arr[i+1] = arr[i+1], arr[i] \n                isSorted = 0",
    "detail": "MY_GISTS.36edf2915f.brickSort",
    "documentation": {}
  },
  {
    "label": "arr",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.brickSort",
    "description": "MY_GISTS.36edf2915f.brickSort",
    "peekOfCode": "arr = [34, 2, 10, -9] \nn = len(arr) \noddEvenSort(arr, n); \nfor i in range(0, n): \n    print(arr[i], end =\" \")",
    "detail": "MY_GISTS.36edf2915f.brickSort",
    "documentation": {}
  },
  {
    "label": "n",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.brickSort",
    "description": "MY_GISTS.36edf2915f.brickSort",
    "peekOfCode": "n = len(arr) \noddEvenSort(arr, n); \nfor i in range(0, n): \n    print(arr[i], end =\" \")",
    "detail": "MY_GISTS.36edf2915f.brickSort",
    "documentation": {}
  },
  {
    "label": "findPassword",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.BruteForce",
    "description": "MY_GISTS.36edf2915f.BruteForce",
    "peekOfCode": "def findPassword(chars, function, show=50, format_=\"%s\"):\n    password = None\n    attempts = 0\n    size = 1\n    stop = False\n    while not stop:\n        # Obtém todas as combinações possíveis com os dígitos do parâmetro \"chars\".\n        for pw in product(chars, repeat=size):\n            password = \"\".join(pw)\n            # Imprime a senha que será tentada.",
    "detail": "MY_GISTS.36edf2915f.BruteForce",
    "documentation": {}
  },
  {
    "label": "getChars",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.BruteForce",
    "description": "MY_GISTS.36edf2915f.BruteForce",
    "peekOfCode": "def getChars():\n    \"\"\"\n    Método para obter uma lista contendo todas as\n    letras do alfabeto e números.\n    \"\"\"\n    chars = []\n    # Acrescenta à lista todas as letras maiúsculas\n    for id_ in range(ord(\"A\"), ord(\"Z\") + 1):\n        chars.append(chr(id_))\n    # Acrescenta à lista todas as letras minúsculas",
    "detail": "MY_GISTS.36edf2915f.BruteForce",
    "documentation": {}
  },
  {
    "label": "bubbleSort",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.bubblesortpgm",
    "description": "MY_GISTS.36edf2915f.bubblesortpgm",
    "peekOfCode": "def bubbleSort(arr):\n\tn = len(arr)\n\t# Traverse through all array elements\n\tfor i in range(n):\n\t\tnot_swap = True\n\t\t# Last i elements are already in place\n\t\tfor j in range(0, n-i-1):\n\t\t\t# traverse the array from 0 to n-i-1\n\t\t\t# Swap if the element found is greater\n\t\t\t# than the next element",
    "detail": "MY_GISTS.36edf2915f.bubblesortpgm",
    "documentation": {}
  },
  {
    "label": "\tn",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.bubblesortpgm",
    "description": "MY_GISTS.36edf2915f.bubblesortpgm",
    "peekOfCode": "\tn = len(arr)\n\t# Traverse through all array elements\n\tfor i in range(n):\n\t\tnot_swap = True\n\t\t# Last i elements are already in place\n\t\tfor j in range(0, n-i-1):\n\t\t\t# traverse the array from 0 to n-i-1\n\t\t\t# Swap if the element found is greater\n\t\t\t# than the next element\n\t\t\tif arr[j] > arr[j+1] :",
    "detail": "MY_GISTS.36edf2915f.bubblesortpgm",
    "documentation": {}
  },
  {
    "label": "\t\tnot_swap",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.bubblesortpgm",
    "description": "MY_GISTS.36edf2915f.bubblesortpgm",
    "peekOfCode": "\t\tnot_swap = True\n\t\t# Last i elements are already in place\n\t\tfor j in range(0, n-i-1):\n\t\t\t# traverse the array from 0 to n-i-1\n\t\t\t# Swap if the element found is greater\n\t\t\t# than the next element\n\t\t\tif arr[j] > arr[j+1] :\n\t\t\t\tarr[j], arr[j+1] = arr[j+1], arr[j]\n\t\t\t\tnot_swap = False\n\t\tif not_swap:",
    "detail": "MY_GISTS.36edf2915f.bubblesortpgm",
    "documentation": {}
  },
  {
    "label": "\t\t\t\tnot_swap",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.bubblesortpgm",
    "description": "MY_GISTS.36edf2915f.bubblesortpgm",
    "peekOfCode": "\t\t\t\tnot_swap = False\n\t\tif not_swap:\n\t\t\tbreak\n# Driver code to test above\narr = [64, 34, 25, 12, 22, 11, 90]\nbubbleSort(arr)\nprint (\"Sorted array is:\")\nfor i in range(len(arr)):\n\tprint (\"%d\" %arr[i]),",
    "detail": "MY_GISTS.36edf2915f.bubblesortpgm",
    "documentation": {}
  },
  {
    "label": "arr",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.bubblesortpgm",
    "description": "MY_GISTS.36edf2915f.bubblesortpgm",
    "peekOfCode": "arr = [64, 34, 25, 12, 22, 11, 90]\nbubbleSort(arr)\nprint (\"Sorted array is:\")\nfor i in range(len(arr)):\n\tprint (\"%d\" %arr[i]),",
    "detail": "MY_GISTS.36edf2915f.bubblesortpgm",
    "documentation": {}
  },
  {
    "label": "bubble_sort",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.Bubble_sort",
    "description": "MY_GISTS.36edf2915f.Bubble_sort",
    "peekOfCode": "def bubble_sort(Lists):\n    for i in range(len(Lists)):\n        for j in range(len(Lists)-1):\n            # We check whether the adjecent number is greater or not\n            if Lists[j]>Lists[j+1]:\n                Lists[j], Lists[j+1] = Lists[j+1], Lists[j]\n#Lets the user enter values of an array and verify by himself/herself\narray = []\narray_length = int(input(print(\"Enter the number of elements of array or enter the length of array\")))\nfor i in range(array_length):",
    "detail": "MY_GISTS.36edf2915f.Bubble_sort",
    "documentation": {}
  },
  {
    "label": "array",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.Bubble_sort",
    "description": "MY_GISTS.36edf2915f.Bubble_sort",
    "peekOfCode": "array = []\narray_length = int(input(print(\"Enter the number of elements of array or enter the length of array\")))\nfor i in range(array_length):\n    value = int(input(print(\"Enter the value in the array\")))\n    array.append(value)\nbubble_sort(array)    \nprint(array)",
    "detail": "MY_GISTS.36edf2915f.Bubble_sort",
    "documentation": {}
  },
  {
    "label": "array_length",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.Bubble_sort",
    "description": "MY_GISTS.36edf2915f.Bubble_sort",
    "peekOfCode": "array_length = int(input(print(\"Enter the number of elements of array or enter the length of array\")))\nfor i in range(array_length):\n    value = int(input(print(\"Enter the value in the array\")))\n    array.append(value)\nbubble_sort(array)    \nprint(array)",
    "detail": "MY_GISTS.36edf2915f.Bubble_sort",
    "documentation": {}
  },
  {
    "label": "bubblesort",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.Bubble_Sorting_Prog",
    "description": "MY_GISTS.36edf2915f.Bubble_Sorting_Prog",
    "peekOfCode": "def bubblesort(list):\n# Swap the elements to arrange in order\n    for iter_num in range(len(list)-1,0,-1):\n        for idx in range(iter_num):\n            if list[idx]>list[idx+1]:\n                temp = list[idx]\n                list[idx] = list[idx+1]\n                list[idx+1] = temp\nlist = [19,2,31,45,6,11,121,27]\nbubblesort(list)",
    "detail": "MY_GISTS.36edf2915f.Bubble_Sorting_Prog",
    "documentation": {}
  },
  {
    "label": "list",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.Bubble_Sorting_Prog",
    "description": "MY_GISTS.36edf2915f.Bubble_Sorting_Prog",
    "peekOfCode": "list = [19,2,31,45,6,11,121,27]\nbubblesort(list)\nprint(list)",
    "detail": "MY_GISTS.36edf2915f.Bubble_Sorting_Prog",
    "documentation": {}
  },
  {
    "label": "res",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.Calculate resistance",
    "description": "MY_GISTS.36edf2915f.Calculate resistance",
    "peekOfCode": "def res(R1, R2):\n      sum = R1 + R2\n      if (option ==\"series\"):\n          return sum\n      else:\n          return (R1 * R2)/(R1 + R2)\nResistance1 = int(input(\"Enter R1 : \"))\nResistance2 = int(input(\"Enter R2 : \"))\noption = str(input(\"Enter series or parallel :\"))\nprint(\"\\n\")",
    "detail": "MY_GISTS.36edf2915f.Calculate resistance",
    "documentation": {}
  },
  {
    "label": "Resistance1",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.Calculate resistance",
    "description": "MY_GISTS.36edf2915f.Calculate resistance",
    "peekOfCode": "Resistance1 = int(input(\"Enter R1 : \"))\nResistance2 = int(input(\"Enter R2 : \"))\noption = str(input(\"Enter series or parallel :\"))\nprint(\"\\n\")\nR = res(Resistance1,Resistance2 )\nprint(\"The total resistance is\", R)",
    "detail": "MY_GISTS.36edf2915f.Calculate resistance",
    "documentation": {}
  },
  {
    "label": "Resistance2",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.Calculate resistance",
    "description": "MY_GISTS.36edf2915f.Calculate resistance",
    "peekOfCode": "Resistance2 = int(input(\"Enter R2 : \"))\noption = str(input(\"Enter series or parallel :\"))\nprint(\"\\n\")\nR = res(Resistance1,Resistance2 )\nprint(\"The total resistance is\", R)",
    "detail": "MY_GISTS.36edf2915f.Calculate resistance",
    "documentation": {}
  },
  {
    "label": "option",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.Calculate resistance",
    "description": "MY_GISTS.36edf2915f.Calculate resistance",
    "peekOfCode": "option = str(input(\"Enter series or parallel :\"))\nprint(\"\\n\")\nR = res(Resistance1,Resistance2 )\nprint(\"The total resistance is\", R)",
    "detail": "MY_GISTS.36edf2915f.Calculate resistance",
    "documentation": {}
  },
  {
    "label": "R",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.Calculate resistance",
    "description": "MY_GISTS.36edf2915f.Calculate resistance",
    "peekOfCode": "R = res(Resistance1,Resistance2 )\nprint(\"The total resistance is\", R)",
    "detail": "MY_GISTS.36edf2915f.Calculate resistance",
    "documentation": {}
  },
  {
    "label": "calc",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.calculator",
    "description": "MY_GISTS.36edf2915f.calculator",
    "peekOfCode": "def calc(term):\n    \"\"\"\n        input: term of type str\n        output: returns the result of the computed term.\n        purpose: This function is the actual calculator and the heart of the application\n    \"\"\"\n    # This part is for reading and converting arithmetic terms.\n    term = term.replace(' ', '')\n    term = term.replace('^', '**')\n    term = term.replace('=', '')",
    "detail": "MY_GISTS.36edf2915f.calculator",
    "documentation": {}
  },
  {
    "label": "result",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.calculator",
    "description": "MY_GISTS.36edf2915f.calculator",
    "peekOfCode": "def result(term):\n    \"\"\"\n        input:  term of type str\n        output: none\n        purpose: passes the argument to the function calc(...) and \n                prints the result onto console.\n    \"\"\"\n    print(\"\\n\" + str(calc(term)))\ndef main():\n    \"\"\"",
    "detail": "MY_GISTS.36edf2915f.calculator",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.calculator",
    "description": "MY_GISTS.36edf2915f.calculator",
    "peekOfCode": "def main():\n    \"\"\"\n        main-program\n        purpose: handles user input and prints \n                 information to the console.\n    \"\"\"\n    print(\"\\nScientific Calculator\\n\\nFor Example: sin(rad(90)) + 50% * (sqrt(16)) + round(1.42^2)\" +\n          \"- 12mod3\\n\\nEnter quit to exit\")\n    if sys.version_info.major >= 3:\n        while True:",
    "detail": "MY_GISTS.36edf2915f.calculator",
    "documentation": {}
  },
  {
    "label": "add",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.calculatorproject",
    "description": "MY_GISTS.36edf2915f.calculatorproject",
    "peekOfCode": "def add(x, y):\n    return x + y\ndef subtract(x, y):\n    return x - y\ndef multiply(x, y):\n    return x * y\ndef divide(x, y):\n    return x / y\nprint(\"Select operation.\")\nprint(\"1.Add\")",
    "detail": "MY_GISTS.36edf2915f.calculatorproject",
    "documentation": {}
  },
  {
    "label": "subtract",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.calculatorproject",
    "description": "MY_GISTS.36edf2915f.calculatorproject",
    "peekOfCode": "def subtract(x, y):\n    return x - y\ndef multiply(x, y):\n    return x * y\ndef divide(x, y):\n    return x / y\nprint(\"Select operation.\")\nprint(\"1.Add\")\nprint(\"2.Subtract\")\nprint(\"3.Multiply\")",
    "detail": "MY_GISTS.36edf2915f.calculatorproject",
    "documentation": {}
  },
  {
    "label": "multiply",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.calculatorproject",
    "description": "MY_GISTS.36edf2915f.calculatorproject",
    "peekOfCode": "def multiply(x, y):\n    return x * y\ndef divide(x, y):\n    return x / y\nprint(\"Select operation.\")\nprint(\"1.Add\")\nprint(\"2.Subtract\")\nprint(\"3.Multiply\")\nprint(\"4.Divide\")\nwhile True:",
    "detail": "MY_GISTS.36edf2915f.calculatorproject",
    "documentation": {}
  },
  {
    "label": "divide",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.calculatorproject",
    "description": "MY_GISTS.36edf2915f.calculatorproject",
    "peekOfCode": "def divide(x, y):\n    return x / y\nprint(\"Select operation.\")\nprint(\"1.Add\")\nprint(\"2.Subtract\")\nprint(\"3.Multiply\")\nprint(\"4.Divide\")\nwhile True:\n    # Take input from the user\n    choice = input(\"Enter choice(1/2/3/4): \")",
    "detail": "MY_GISTS.36edf2915f.calculatorproject",
    "documentation": {}
  },
  {
    "label": "shape",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.calc_area",
    "description": "MY_GISTS.36edf2915f.calc_area",
    "peekOfCode": "shape = int(input(\"Enter 1 for square, 2 for rectangle, 3 for circle, or 4 for triangle: \"))\nif shape == 1:\n  side = float(input(\"Enter length of side: \"))\n  print(\"Area of square = \" + str(side**2))\nelif shape == 2:\n  l = float(input(\"Enter length: \"))\n  b = float(input(\"Enter breadth: \"))\n  print(\"Area of rectangle = \" + str(l*b))\nelif shape == 3:\n  r = float(input(\"Enter radius: \"))",
    "detail": "MY_GISTS.36edf2915f.calc_area",
    "documentation": {}
  },
  {
    "label": "text",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.Calendar (GUI)",
    "description": "MY_GISTS.36edf2915f.Calendar (GUI)",
    "peekOfCode": "def text():\n    month_int = int(month.get())\n    year_int = int(year.get())\n    cal = calendar.month(year_int, month_int)\n    textfield.delete(0.0, END)\n    textfield.insert(INSERT, cal)\n# Creating Labels\nlabel1 = Label(root, text=\"Month:\")\nlabel1.grid(row=0, column=0)\nlabel2 = Label(root, text=\"Year:\")",
    "detail": "MY_GISTS.36edf2915f.Calendar (GUI)",
    "documentation": {}
  },
  {
    "label": "root",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.Calendar (GUI)",
    "description": "MY_GISTS.36edf2915f.Calendar (GUI)",
    "peekOfCode": "root = Tk()\n# root.geometry(\"400x300\")\nroot.title(\"Calendar\")\n# Function\ndef text():\n    month_int = int(month.get())\n    year_int = int(year.get())\n    cal = calendar.month(year_int, month_int)\n    textfield.delete(0.0, END)\n    textfield.insert(INSERT, cal)",
    "detail": "MY_GISTS.36edf2915f.Calendar (GUI)",
    "documentation": {}
  },
  {
    "label": "label1",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.Calendar (GUI)",
    "description": "MY_GISTS.36edf2915f.Calendar (GUI)",
    "peekOfCode": "label1 = Label(root, text=\"Month:\")\nlabel1.grid(row=0, column=0)\nlabel2 = Label(root, text=\"Year:\")\nlabel2.grid(row=0, column=1)\n# Creating spinbox\nmonth = Spinbox(root, from_=1, to=12, width=8)\nmonth.grid(row=1, column=0, padx=5)\nyear = Spinbox(root, from_=2000, to=2100, width=10)\nyear.grid(row=1, column=1, padx=10)\n# Creating Button",
    "detail": "MY_GISTS.36edf2915f.Calendar (GUI)",
    "documentation": {}
  },
  {
    "label": "label2",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.Calendar (GUI)",
    "description": "MY_GISTS.36edf2915f.Calendar (GUI)",
    "peekOfCode": "label2 = Label(root, text=\"Year:\")\nlabel2.grid(row=0, column=1)\n# Creating spinbox\nmonth = Spinbox(root, from_=1, to=12, width=8)\nmonth.grid(row=1, column=0, padx=5)\nyear = Spinbox(root, from_=2000, to=2100, width=10)\nyear.grid(row=1, column=1, padx=10)\n# Creating Button\nbutton = Button(root, text=\"Go\", command=text)\nbutton.grid(row=1, column=2, padx=10)",
    "detail": "MY_GISTS.36edf2915f.Calendar (GUI)",
    "documentation": {}
  },
  {
    "label": "month",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.Calendar (GUI)",
    "description": "MY_GISTS.36edf2915f.Calendar (GUI)",
    "peekOfCode": "month = Spinbox(root, from_=1, to=12, width=8)\nmonth.grid(row=1, column=0, padx=5)\nyear = Spinbox(root, from_=2000, to=2100, width=10)\nyear.grid(row=1, column=1, padx=10)\n# Creating Button\nbutton = Button(root, text=\"Go\", command=text)\nbutton.grid(row=1, column=2, padx=10)\n# Creating Textfield\ntextfield = Text(root, width=25, height=10, fg=\"red\")\ntextfield.grid(row=2, columnspan=2)",
    "detail": "MY_GISTS.36edf2915f.Calendar (GUI)",
    "documentation": {}
  },
  {
    "label": "year",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.Calendar (GUI)",
    "description": "MY_GISTS.36edf2915f.Calendar (GUI)",
    "peekOfCode": "year = Spinbox(root, from_=2000, to=2100, width=10)\nyear.grid(row=1, column=1, padx=10)\n# Creating Button\nbutton = Button(root, text=\"Go\", command=text)\nbutton.grid(row=1, column=2, padx=10)\n# Creating Textfield\ntextfield = Text(root, width=25, height=10, fg=\"red\")\ntextfield.grid(row=2, columnspan=2)\nroot.mainloop()",
    "detail": "MY_GISTS.36edf2915f.Calendar (GUI)",
    "documentation": {}
  },
  {
    "label": "button",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.Calendar (GUI)",
    "description": "MY_GISTS.36edf2915f.Calendar (GUI)",
    "peekOfCode": "button = Button(root, text=\"Go\", command=text)\nbutton.grid(row=1, column=2, padx=10)\n# Creating Textfield\ntextfield = Text(root, width=25, height=10, fg=\"red\")\ntextfield.grid(row=2, columnspan=2)\nroot.mainloop()",
    "detail": "MY_GISTS.36edf2915f.Calendar (GUI)",
    "documentation": {}
  },
  {
    "label": "textfield",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.Calendar (GUI)",
    "description": "MY_GISTS.36edf2915f.Calendar (GUI)",
    "peekOfCode": "textfield = Text(root, width=25, height=10, fg=\"red\")\ntextfield.grid(row=2, columnspan=2)\nroot.mainloop()",
    "detail": "MY_GISTS.36edf2915f.Calendar (GUI)",
    "documentation": {}
  },
  {
    "label": "search",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.caller",
    "description": "MY_GISTS.36edf2915f.caller",
    "peekOfCode": "def search():\n    calling_time = datetime.now()\n    one_hours_from_now = (calling_time + timedelta(hours=1)).strftime('%H:%M:%S')  \n    current_date=str(strftime(\"%d-%m-%Y\", gmtime()))\n    docs = db.collection(u'on_call').where(u'date',u'==',current_date).stream()\n    list_of_docs=[]\n    for doc in docs:\n        c=doc.to_dict()\n        if (calling_time).strftime('%H:%M:%S')<=c['from']<=one_hours_from_now:\n            list_of_docs.append(c)",
    "detail": "MY_GISTS.36edf2915f.caller",
    "documentation": {}
  },
  {
    "label": "cred",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.caller",
    "description": "MY_GISTS.36edf2915f.caller",
    "peekOfCode": "cred = credentials.Certificate('key.json')\ndefault_app = initialize_app(cred)\ndb = firestore.client()\ndatabase_reference = db.collection('on_call')\n#Here the collection name is on_call which has documents with fields phone , from (%H:%M:%S time to call the person),date \n#gets data from cloud database and calls 5 min prior the time (from time) alloted in the database\ndef search():\n    calling_time = datetime.now()\n    one_hours_from_now = (calling_time + timedelta(hours=1)).strftime('%H:%M:%S')  \n    current_date=str(strftime(\"%d-%m-%Y\", gmtime()))",
    "detail": "MY_GISTS.36edf2915f.caller",
    "documentation": {}
  },
  {
    "label": "default_app",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.caller",
    "description": "MY_GISTS.36edf2915f.caller",
    "peekOfCode": "default_app = initialize_app(cred)\ndb = firestore.client()\ndatabase_reference = db.collection('on_call')\n#Here the collection name is on_call which has documents with fields phone , from (%H:%M:%S time to call the person),date \n#gets data from cloud database and calls 5 min prior the time (from time) alloted in the database\ndef search():\n    calling_time = datetime.now()\n    one_hours_from_now = (calling_time + timedelta(hours=1)).strftime('%H:%M:%S')  \n    current_date=str(strftime(\"%d-%m-%Y\", gmtime()))\n    docs = db.collection(u'on_call').where(u'date',u'==',current_date).stream()",
    "detail": "MY_GISTS.36edf2915f.caller",
    "documentation": {}
  },
  {
    "label": "db",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.caller",
    "description": "MY_GISTS.36edf2915f.caller",
    "peekOfCode": "db = firestore.client()\ndatabase_reference = db.collection('on_call')\n#Here the collection name is on_call which has documents with fields phone , from (%H:%M:%S time to call the person),date \n#gets data from cloud database and calls 5 min prior the time (from time) alloted in the database\ndef search():\n    calling_time = datetime.now()\n    one_hours_from_now = (calling_time + timedelta(hours=1)).strftime('%H:%M:%S')  \n    current_date=str(strftime(\"%d-%m-%Y\", gmtime()))\n    docs = db.collection(u'on_call').where(u'date',u'==',current_date).stream()\n    list_of_docs=[]",
    "detail": "MY_GISTS.36edf2915f.caller",
    "documentation": {}
  },
  {
    "label": "database_reference",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.caller",
    "description": "MY_GISTS.36edf2915f.caller",
    "peekOfCode": "database_reference = db.collection('on_call')\n#Here the collection name is on_call which has documents with fields phone , from (%H:%M:%S time to call the person),date \n#gets data from cloud database and calls 5 min prior the time (from time) alloted in the database\ndef search():\n    calling_time = datetime.now()\n    one_hours_from_now = (calling_time + timedelta(hours=1)).strftime('%H:%M:%S')  \n    current_date=str(strftime(\"%d-%m-%Y\", gmtime()))\n    docs = db.collection(u'on_call').where(u'date',u'==',current_date).stream()\n    list_of_docs=[]\n    for doc in docs:",
    "detail": "MY_GISTS.36edf2915f.caller",
    "documentation": {}
  },
  {
    "label": "cret",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.changemac",
    "description": "MY_GISTS.36edf2915f.changemac",
    "peekOfCode": "def cret(command):\n    process = Popen(\n        args=command,\n        stdout=PIPE,\n        shell=True\n    )\n    return process.communicate()[0]\n# function for genrate mac address random\ndef randmac():\n    return [0x00, 0x16, 0x3e,",
    "detail": "MY_GISTS.36edf2915f.changemac",
    "documentation": {}
  },
  {
    "label": "randmac",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.changemac",
    "description": "MY_GISTS.36edf2915f.changemac",
    "peekOfCode": "def randmac():\n    return [0x00, 0x16, 0x3e,\n            random.randint(0x00, 0x7f),\n            random.randint(0x00, 0xff),\n            random.randint(0x00, 0xff)]\ndef retrandmac(mac):\n    return ':'.join(map(lambda x: \"%02x\" % x, mac))\nprint(\"                                             +-+-+-+ +-+-+-+-+-+-+-+\")\nprint(\"                                             |M|A|C| |c|h|a|n|g|e|r|\")\nprint(\"                                             +-+-+-+ +-+-+-+-+-+-+-+\")",
    "detail": "MY_GISTS.36edf2915f.changemac",
    "documentation": {}
  },
  {
    "label": "retrandmac",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.changemac",
    "description": "MY_GISTS.36edf2915f.changemac",
    "peekOfCode": "def retrandmac(mac):\n    return ':'.join(map(lambda x: \"%02x\" % x, mac))\nprint(\"                                             +-+-+-+ +-+-+-+-+-+-+-+\")\nprint(\"                                             |M|A|C| |c|h|a|n|g|e|r|\")\nprint(\"                                             +-+-+-+ +-+-+-+-+-+-+-+\")\n# finding wireless interface name that should start with wl e.g.-wlan0,wlp3s0\ninfname = cret('ifconfig -a  | egrep \"^[wl-wl]+\" | sed \"s/: .*//\" | grep -v \"lo\"')\n# INTERFACE NAME 6 character so return 6 last character\ninfname = infname[:6]\ninfname = infname.decode('utf-8')",
    "detail": "MY_GISTS.36edf2915f.changemac",
    "documentation": {}
  },
  {
    "label": "infname",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.changemac",
    "description": "MY_GISTS.36edf2915f.changemac",
    "peekOfCode": "infname = cret('ifconfig -a  | egrep \"^[wl-wl]+\" | sed \"s/: .*//\" | grep -v \"lo\"')\n# INTERFACE NAME 6 character so return 6 last character\ninfname = infname[:6]\ninfname = infname.decode('utf-8')\n# GETTING MAC Address from /sys/class/net/wlan0/address directory\ncmdgetmac = ('cat /sys/class/net/' + infname + '/address')\ncrrntmac = cret(\"cat /sys/class/net/\" + infname + \"/address\")\ncrrntmac = crrntmac.decode('utf-8')\nprint(\n    \"Your Current mac address = \" + crrntmac + \"\\nEnter Option to change Your MAC:\\n1. Enter MAC address manually \\n2. Automatic Random MAC address\")",
    "detail": "MY_GISTS.36edf2915f.changemac",
    "documentation": {}
  },
  {
    "label": "infname",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.changemac",
    "description": "MY_GISTS.36edf2915f.changemac",
    "peekOfCode": "infname = infname[:6]\ninfname = infname.decode('utf-8')\n# GETTING MAC Address from /sys/class/net/wlan0/address directory\ncmdgetmac = ('cat /sys/class/net/' + infname + '/address')\ncrrntmac = cret(\"cat /sys/class/net/\" + infname + \"/address\")\ncrrntmac = crrntmac.decode('utf-8')\nprint(\n    \"Your Current mac address = \" + crrntmac + \"\\nEnter Option to change Your MAC:\\n1. Enter MAC address manually \\n2. Automatic Random MAC address\")\nopt = int(input())\nif opt == 1:",
    "detail": "MY_GISTS.36edf2915f.changemac",
    "documentation": {}
  },
  {
    "label": "infname",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.changemac",
    "description": "MY_GISTS.36edf2915f.changemac",
    "peekOfCode": "infname = infname.decode('utf-8')\n# GETTING MAC Address from /sys/class/net/wlan0/address directory\ncmdgetmac = ('cat /sys/class/net/' + infname + '/address')\ncrrntmac = cret(\"cat /sys/class/net/\" + infname + \"/address\")\ncrrntmac = crrntmac.decode('utf-8')\nprint(\n    \"Your Current mac address = \" + crrntmac + \"\\nEnter Option to change Your MAC:\\n1. Enter MAC address manually \\n2. Automatic Random MAC address\")\nopt = int(input())\nif opt == 1:\n    print(\"Please Enter Your New MAC address: \\nExmple:  46:d2:f4:0c:2a:50\")",
    "detail": "MY_GISTS.36edf2915f.changemac",
    "documentation": {}
  },
  {
    "label": "cmdgetmac",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.changemac",
    "description": "MY_GISTS.36edf2915f.changemac",
    "peekOfCode": "cmdgetmac = ('cat /sys/class/net/' + infname + '/address')\ncrrntmac = cret(\"cat /sys/class/net/\" + infname + \"/address\")\ncrrntmac = crrntmac.decode('utf-8')\nprint(\n    \"Your Current mac address = \" + crrntmac + \"\\nEnter Option to change Your MAC:\\n1. Enter MAC address manually \\n2. Automatic Random MAC address\")\nopt = int(input())\nif opt == 1:\n    print(\"Please Enter Your New MAC address: \\nExmple:  46:d2:f4:0c:2a:50\")\n    newmac = input()\n    print(\"Please wait changing  mac address..................\")",
    "detail": "MY_GISTS.36edf2915f.changemac",
    "documentation": {}
  },
  {
    "label": "crrntmac",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.changemac",
    "description": "MY_GISTS.36edf2915f.changemac",
    "peekOfCode": "crrntmac = cret(\"cat /sys/class/net/\" + infname + \"/address\")\ncrrntmac = crrntmac.decode('utf-8')\nprint(\n    \"Your Current mac address = \" + crrntmac + \"\\nEnter Option to change Your MAC:\\n1. Enter MAC address manually \\n2. Automatic Random MAC address\")\nopt = int(input())\nif opt == 1:\n    print(\"Please Enter Your New MAC address: \\nExmple:  46:d2:f4:0c:2a:50\")\n    newmac = input()\n    print(\"Please wait changing  mac address..................\")\n    # first turn off wifi",
    "detail": "MY_GISTS.36edf2915f.changemac",
    "documentation": {}
  },
  {
    "label": "crrntmac",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.changemac",
    "description": "MY_GISTS.36edf2915f.changemac",
    "peekOfCode": "crrntmac = crrntmac.decode('utf-8')\nprint(\n    \"Your Current mac address = \" + crrntmac + \"\\nEnter Option to change Your MAC:\\n1. Enter MAC address manually \\n2. Automatic Random MAC address\")\nopt = int(input())\nif opt == 1:\n    print(\"Please Enter Your New MAC address: \\nExmple:  46:d2:f4:0c:2a:50\")\n    newmac = input()\n    print(\"Please wait changing  mac address..................\")\n    # first turn off wifi\n    cret('nmcli radio wifi off')",
    "detail": "MY_GISTS.36edf2915f.changemac",
    "documentation": {}
  },
  {
    "label": "opt",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.changemac",
    "description": "MY_GISTS.36edf2915f.changemac",
    "peekOfCode": "opt = int(input())\nif opt == 1:\n    print(\"Please Enter Your New MAC address: \\nExmple:  46:d2:f4:0c:2a:50\")\n    newmac = input()\n    print(\"Please wait changing  mac address..................\")\n    # first turn off wifi\n    cret('nmcli radio wifi off')\n    changemaccmd = \"sudo ip link set dev \" + infname + \" address \" + newmac\n    # executing command with new mac address\n    cret(changemaccmd)",
    "detail": "MY_GISTS.36edf2915f.changemac",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.chaos",
    "description": "MY_GISTS.36edf2915f.chaos",
    "peekOfCode": "def main():\n    print(\"This program illustrates a chaotic function\")\n    while True:\n        try:\n            x = float((input(\"Enter a number between 0 and 1: \")))\n            if (0 < x and x < 1):\n                break\n            else:\n                print(\"Please enter correct number\")\n        except Exception as e:",
    "detail": "MY_GISTS.36edf2915f.chaos",
    "documentation": {}
  },
  {
    "label": "num",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.check  if a number positive . negative or zero",
    "description": "MY_GISTS.36edf2915f.check  if a number positive . negative or zero",
    "peekOfCode": "num = float(input(\"Enter a number: \"))\nif num > 0:\n   print(\"Positive number\")\nelif num == 0:\n   print(\"Zero\")\nelse:\n   print(\"Negative number\")\n   num = float(input(\"Enter a number: \"))\nif num >= 0:\n   if num == 0:",
    "detail": "MY_GISTS.36edf2915f.check  if a number positive . negative or zero",
    "documentation": {}
  },
  {
    "label": "palindrome",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.check whether the string is Symmetrical or Palindrome",
    "description": "MY_GISTS.36edf2915f.check whether the string is Symmetrical or Palindrome",
    "peekOfCode": "def palindrome(a): \n    mid = (len(a)-1)//2\n    start = 0\n    last = len(a)-1\n    flag = 0\n    while(start<mid): \n        if (a[start]== a[last]): \n            start += 1\n            last -= 1\n        else: ",
    "detail": "MY_GISTS.36edf2915f.check whether the string is Symmetrical or Palindrome",
    "documentation": {}
  },
  {
    "label": "symmetry",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.check whether the string is Symmetrical or Palindrome",
    "description": "MY_GISTS.36edf2915f.check whether the string is Symmetrical or Palindrome",
    "peekOfCode": "def symmetry(a): \n    n = len(a) \n    flag = 0\n    if n%2: \n        mid = n//2 +1\n    else: \n        mid = n//2\n    start1 = 0\n    start2 = mid \n    while(start1 < mid and start2 < n): ",
    "detail": "MY_GISTS.36edf2915f.check whether the string is Symmetrical or Palindrome",
    "documentation": {}
  },
  {
    "label": "string",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.check whether the string is Symmetrical or Palindrome",
    "description": "MY_GISTS.36edf2915f.check whether the string is Symmetrical or Palindrome",
    "peekOfCode": "string = 'amaama'\npalindrome(string) \nsymmetry(string)",
    "detail": "MY_GISTS.36edf2915f.check whether the string is Symmetrical or Palindrome",
    "documentation": {}
  },
  {
    "label": "checker",
    "kind": 6,
    "importPath": "MY_GISTS.36edf2915f.checker",
    "description": "MY_GISTS.36edf2915f.checker",
    "peekOfCode": "class checker:\n    def __init__(self, window):\n        self._init()\n        self.window = window\n    # to update the position\n    def update (self):\n        self.board.draw(self.window)\n        self.draw_moves(self.valid_moves)\n        pg.display.update()\n    def _init(self):",
    "detail": "MY_GISTS.36edf2915f.checker",
    "documentation": {}
  },
  {
    "label": "checker_board",
    "kind": 6,
    "importPath": "MY_GISTS.36edf2915f.checker_board",
    "description": "MY_GISTS.36edf2915f.checker_board",
    "peekOfCode": "class checker_board:\n    def __init__(self):\n        self.board = []\n        self.selected = None\n        self.black_l = self.white_l = 12\n        self.black_k = self.white_k = 0\n        self.create_board()\n    # to design the board\n    def draw_cubes(self, window):\n        window.fill(green)",
    "detail": "MY_GISTS.36edf2915f.checker_board",
    "documentation": {}
  },
  {
    "label": "usage",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.check_file",
    "description": "MY_GISTS.36edf2915f.check_file",
    "peekOfCode": "def usage():\n    print('[-] Usage: python check_file.py [filename1] [filename2] ... [filenameN]')\n# Readfile Functions which open the file that is passed to the script\ndef readfile(filename):\n    with open(filename, 'r') as f:  # Ensure file is correctly closed under\n        read_file = f.read()  # all circumstances\n    print(read_file)\n    print()\n    print('#' * 80)\n    print()",
    "detail": "MY_GISTS.36edf2915f.check_file",
    "documentation": {}
  },
  {
    "label": "readfile",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.check_file",
    "description": "MY_GISTS.36edf2915f.check_file",
    "peekOfCode": "def readfile(filename):\n    with open(filename, 'r') as f:  # Ensure file is correctly closed under\n        read_file = f.read()  # all circumstances\n    print(read_file)\n    print()\n    print('#' * 80)\n    print()\ndef main():\n    # Check the arguments passed to the script\n    if len(sys.argv) >= 2:",
    "detail": "MY_GISTS.36edf2915f.check_file",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.check_file",
    "description": "MY_GISTS.36edf2915f.check_file",
    "peekOfCode": "def main():\n    # Check the arguments passed to the script\n    if len(sys.argv) >= 2:\n        file_names = sys.argv[1:]\n        filteredfilenames_1 = list(file_names)  # To counter changing in the same list which you are iterating\n        filteredfilenames_2 = list(file_names)\n        # Iterate for each filename passed in command line argument\n        for filename in filteredfilenames_1:\n            if not os.path.isfile(filename):  # Check the File exists\n                print('[-] ' + filename + ' does not exist.')",
    "detail": "MY_GISTS.36edf2915f.check_file",
    "documentation": {}
  },
  {
    "label": "isSQLite3",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.check_for_sqlite_files",
    "description": "MY_GISTS.36edf2915f.check_for_sqlite_files",
    "peekOfCode": "def isSQLite3(filename):\n    from os.path import isfile, getsize\n    if not isfile(filename):\n        return False\n    if getsize(filename) < 100:  # SQLite database file header is 100 bytes\n        return False\n    else:\n        fd = open(filename, 'rb')\n        header = fd.read(100)\n        fd.close()",
    "detail": "MY_GISTS.36edf2915f.check_for_sqlite_files",
    "documentation": {}
  },
  {
    "label": "log",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.check_for_sqlite_files",
    "description": "MY_GISTS.36edf2915f.check_for_sqlite_files",
    "peekOfCode": "log = open('sqlite_audit.txt', 'w')\nfor r, d, f in os.walk(r'.'):\n    for files in f:\n        if isSQLite3(files):\n            print(files)\n            print(\"[+] '%s' **** is a SQLITE database file **** \" % os.path.join(r, files))\n            log.write(\"[+] '%s' **** is a SQLITE database file **** \" % files + '\\n')\n        else:\n            log.write(\"[-] '%s' is NOT a sqlite database file\" % os.path.join(r, files) + '\\n')\n            log.write(\"[-] '%s' is NOT a sqlite database file\" % files + '\\n')",
    "detail": "MY_GISTS.36edf2915f.check_for_sqlite_files",
    "documentation": {}
  },
  {
    "label": "get_user_input",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.check_input",
    "description": "MY_GISTS.36edf2915f.check_input",
    "peekOfCode": "def get_user_input(start, end):\n    \"\"\"\n        input: two integer values\n               lower limit 'start' and maximum 'end'\n               the arguments aren't inclusive.\n        output: if reading successful then returns the read integer. \n        purpose: reads from command-line a integer in the given bounds. \n                 while input invalid asks user again\n    \"\"\"\n    loop = True  # controls while-loop",
    "detail": "MY_GISTS.36edf2915f.check_input",
    "documentation": {}
  },
  {
    "label": "x",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.check_input",
    "description": "MY_GISTS.36edf2915f.check_input",
    "peekOfCode": "x = get_user_input(1, 6)\nprint(x)\n# Asks user to enter something, ie. a number option from a menu.\n# While type != interger, and not in the given range,\n# Program gives error message and asks for new input.",
    "detail": "MY_GISTS.36edf2915f.check_input",
    "documentation": {}
  },
  {
    "label": "checkInternetConnectivity",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.check_internet_con",
    "description": "MY_GISTS.36edf2915f.check_internet_con",
    "peekOfCode": "def checkInternetConnectivity():\n    try:\n        url = argv[1]\n        if 'https://' or 'http://' not in url:\n            url = 'https://' + url\n    except:\n        url = 'https://google.com'\n    try:\n         urlopen(url, timeout=2)\n         print(\"Connection to \\\"\"+ url + \"\\\" is working\")",
    "detail": "MY_GISTS.36edf2915f.check_internet_con",
    "documentation": {}
  },
  {
    "label": "solve",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.chicks_n_rabs",
    "description": "MY_GISTS.36edf2915f.chicks_n_rabs",
    "peekOfCode": "def solve(num_heads, num_legs):\n    ns = 'No solutions!'\n    for i in range(num_heads + 1):\n        j = num_heads - i\n        if 2 * i + 4 * j == num_legs:\n            return i, j\n    return ns, ns\nif __name__ == \"__main__\":\n    numheads = 35\n    numlegs = 94",
    "detail": "MY_GISTS.36edf2915f.chicks_n_rabs",
    "documentation": {}
  },
  {
    "label": "hit",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.Chrome Dino Automater",
    "description": "MY_GISTS.36edf2915f.Chrome Dino Automater",
    "peekOfCode": "def hit(key):\n    pyautogui.press(key)\n    return\ndef isCollide(data):\n    # for cactus\n    for i in range(329, 425):\n        for j in range(550, 650):\n            if data[i, j] < 100:\n                hit(\"up\")\n                return",
    "detail": "MY_GISTS.36edf2915f.Chrome Dino Automater",
    "documentation": {}
  },
  {
    "label": "isCollide",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.Chrome Dino Automater",
    "description": "MY_GISTS.36edf2915f.Chrome Dino Automater",
    "peekOfCode": "def isCollide(data):\n    # for cactus\n    for i in range(329, 425):\n        for j in range(550, 650):\n            if data[i, j] < 100:\n                hit(\"up\")\n                return\n    # Draw the rectangle for birds\n    # for i in range(310, 425):\n    #     for j in range(390, 550):",
    "detail": "MY_GISTS.36edf2915f.Chrome Dino Automater",
    "documentation": {}
  },
  {
    "label": "card",
    "kind": 6,
    "importPath": "MY_GISTS.36edf2915f.classicIndianCardMatch",
    "description": "MY_GISTS.36edf2915f.classicIndianCardMatch",
    "peekOfCode": "class card:\n    def __init__(self, suit, rank):\n        if (suit in SUITS) and (rank in RANKS):\n            self.suit = suit\n            self.rank = rank\n        else:\n            self.suit = None\n            self.rank = None\n            print(\"Invalid card: \", suit, rank)\n    def __str__(self):",
    "detail": "MY_GISTS.36edf2915f.classicIndianCardMatch",
    "documentation": {}
  },
  {
    "label": "deck",
    "kind": 6,
    "importPath": "MY_GISTS.36edf2915f.classicIndianCardMatch",
    "description": "MY_GISTS.36edf2915f.classicIndianCardMatch",
    "peekOfCode": "class deck:\n    def __init__(self):\n        self.deck = [card(suit, rank) for suit in SUITS for rank in RANKS]\n    def shuffle(self):\n        random.shuffle(self.deck)\n    def dealCard(self):\n        return random.choice(self.deck)\n    def __str__(self):\n        print(self.deck)\n# Begin play",
    "detail": "MY_GISTS.36edf2915f.classicIndianCardMatch",
    "documentation": {}
  },
  {
    "label": "SUITS",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.classicIndianCardMatch",
    "description": "MY_GISTS.36edf2915f.classicIndianCardMatch",
    "peekOfCode": "SUITS = ('C', 'S', 'H', 'D')\nRANKS = ('A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K')\nVALUES = {'A': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'T': 10, 'J': 10, 'Q': 10, 'K': 10}\nclass card:\n    def __init__(self, suit, rank):\n        if (suit in SUITS) and (rank in RANKS):\n            self.suit = suit\n            self.rank = rank\n        else:\n            self.suit = None",
    "detail": "MY_GISTS.36edf2915f.classicIndianCardMatch",
    "documentation": {}
  },
  {
    "label": "RANKS",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.classicIndianCardMatch",
    "description": "MY_GISTS.36edf2915f.classicIndianCardMatch",
    "peekOfCode": "RANKS = ('A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K')\nVALUES = {'A': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'T': 10, 'J': 10, 'Q': 10, 'K': 10}\nclass card:\n    def __init__(self, suit, rank):\n        if (suit in SUITS) and (rank in RANKS):\n            self.suit = suit\n            self.rank = rank\n        else:\n            self.suit = None\n            self.rank = None",
    "detail": "MY_GISTS.36edf2915f.classicIndianCardMatch",
    "documentation": {}
  },
  {
    "label": "VALUES",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.classicIndianCardMatch",
    "description": "MY_GISTS.36edf2915f.classicIndianCardMatch",
    "peekOfCode": "VALUES = {'A': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'T': 10, 'J': 10, 'Q': 10, 'K': 10}\nclass card:\n    def __init__(self, suit, rank):\n        if (suit in SUITS) and (rank in RANKS):\n            self.suit = suit\n            self.rank = rank\n        else:\n            self.suit = None\n            self.rank = None\n            print(\"Invalid card: \", suit, rank)",
    "detail": "MY_GISTS.36edf2915f.classicIndianCardMatch",
    "documentation": {}
  },
  {
    "label": "deck1",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.classicIndianCardMatch",
    "description": "MY_GISTS.36edf2915f.classicIndianCardMatch",
    "peekOfCode": "deck1 = deck()\ndeck2 = deck()\ntime.sleep(5)\nprint('..........decks ready!!!\\n')\nprint('Combining and shuffling both the decks..')\ntime.sleep(10)\n# Shuffle the decks\ndeck1.shuffle()\ndeck2.shuffle()\n# combine both the shuffled decks",
    "detail": "MY_GISTS.36edf2915f.classicIndianCardMatch",
    "documentation": {}
  },
  {
    "label": "deck2",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.classicIndianCardMatch",
    "description": "MY_GISTS.36edf2915f.classicIndianCardMatch",
    "peekOfCode": "deck2 = deck()\ntime.sleep(5)\nprint('..........decks ready!!!\\n')\nprint('Combining and shuffling both the decks..')\ntime.sleep(10)\n# Shuffle the decks\ndeck1.shuffle()\ndeck2.shuffle()\n# combine both the shuffled decks\ncombinedDeck = deck1.deck + deck2.deck",
    "detail": "MY_GISTS.36edf2915f.classicIndianCardMatch",
    "documentation": {}
  },
  {
    "label": "combinedDeck",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.classicIndianCardMatch",
    "description": "MY_GISTS.36edf2915f.classicIndianCardMatch",
    "peekOfCode": "combinedDeck = deck1.deck + deck2.deck\n# ReShuffle the combined deck, cut it and distribute to two players.\nrandom.shuffle(combinedDeck)\nprint(\"....decks have been combined and shuffled...\\n\")\nprint(\"------------------------------------------\\n\")\ninput(\"Enter a key to cut the deck..\\n\")\nplayer1 = combinedDeck[0:52]\nplayer2 = combinedDeck[52:]\nprint(\"Deck has been split into two and Human get a half and computer gets the other...\\n\")\n# Begin play:",
    "detail": "MY_GISTS.36edf2915f.classicIndianCardMatch",
    "documentation": {}
  },
  {
    "label": "player1",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.classicIndianCardMatch",
    "description": "MY_GISTS.36edf2915f.classicIndianCardMatch",
    "peekOfCode": "player1 = combinedDeck[0:52]\nplayer2 = combinedDeck[52:]\nprint(\"Deck has been split into two and Human get a half and computer gets the other...\\n\")\n# Begin play:\nprint(\"------------------------------------------\\n\")\nprint(\"player1 == Human\\n\")\nprint(\"player2 == Computer\\n\")\nprint(\"------------------------------------------\\n\")\nprint(\"player1 goes first...hit any key to place the card on the pile..\\n\")\ncenterPile = []",
    "detail": "MY_GISTS.36edf2915f.classicIndianCardMatch",
    "documentation": {}
  },
  {
    "label": "player2",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.classicIndianCardMatch",
    "description": "MY_GISTS.36edf2915f.classicIndianCardMatch",
    "peekOfCode": "player2 = combinedDeck[52:]\nprint(\"Deck has been split into two and Human get a half and computer gets the other...\\n\")\n# Begin play:\nprint(\"------------------------------------------\\n\")\nprint(\"player1 == Human\\n\")\nprint(\"player2 == Computer\\n\")\nprint(\"------------------------------------------\\n\")\nprint(\"player1 goes first...hit any key to place the card on the pile..\\n\")\ncenterPile = []\ncurrentPlayer2Card = None",
    "detail": "MY_GISTS.36edf2915f.classicIndianCardMatch",
    "documentation": {}
  },
  {
    "label": "centerPile",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.classicIndianCardMatch",
    "description": "MY_GISTS.36edf2915f.classicIndianCardMatch",
    "peekOfCode": "centerPile = []\ncurrentPlayer2Card = None\nwhile len(player1) != 0 and len(player2) != 0:  # this needs a fix as it goes on an infinite loop on a success.\n    switchPlayer = True\n    while switchPlayer == True:\n        for card in range(len(player1)):\n            input(\"Enter any key to place a card!!!\\n\")\n            currentPlayer1Card = player1[card].rank\n            print(\"Your current card's rank: {}\".format(currentPlayer1Card))\n            centerPile.append(player1[card])",
    "detail": "MY_GISTS.36edf2915f.classicIndianCardMatch",
    "documentation": {}
  },
  {
    "label": "currentPlayer2Card",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.classicIndianCardMatch",
    "description": "MY_GISTS.36edf2915f.classicIndianCardMatch",
    "peekOfCode": "currentPlayer2Card = None\nwhile len(player1) != 0 and len(player2) != 0:  # this needs a fix as it goes on an infinite loop on a success.\n    switchPlayer = True\n    while switchPlayer == True:\n        for card in range(len(player1)):\n            input(\"Enter any key to place a card!!!\\n\")\n            currentPlayer1Card = player1[card].rank\n            print(\"Your current card's rank: {}\".format(currentPlayer1Card))\n            centerPile.append(player1[card])\n            player1.pop(card)",
    "detail": "MY_GISTS.36edf2915f.classicIndianCardMatch",
    "documentation": {}
  },
  {
    "label": "model",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.Classification_human_or_horse",
    "description": "MY_GISTS.36edf2915f.Classification_human_or_horse",
    "peekOfCode": "model = tf.keras.models.Sequential([tf.keras.layers.Conv2D(16, (3, 3), activation='relu', input_shape=(200, 200, 3)),\n                                    tf.keras.layers.MaxPooling2D(2, 2),\n                                    tf.keras.layers.Conv2D(16, (3, 3), activation='relu'),\n                                    tf.keras.layers.MaxPooling2D(2, 2),\n                                    tf.keras.layers.Conv2D(16, (3, 3), activation='relu'),\n                                    tf.keras.layers.MaxPooling2D(2, 2),\n                                    tf.keras.layers.Flatten(),\n                                    tf.keras.layers.Dense(512, activation='relu'),\n                                    tf.keras.layers.Dense(1, activation=\"sigmoid\")\n                                    ])",
    "detail": "MY_GISTS.36edf2915f.Classification_human_or_horse",
    "documentation": {}
  },
  {
    "label": "train_datagen",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.Classification_human_or_horse",
    "description": "MY_GISTS.36edf2915f.Classification_human_or_horse",
    "peekOfCode": "train_datagen = ImageDataGenerator(rescale=1 / 255)\ntrain_generator = train_datagen.flow_from_directory('../Classification_human-or-horse',\n                                                    target_size=(200, 200),\n                                                    batch_size=222,\n                                                    class_mode='binary')\nmodel.fit_generator(train_generator, steps_per_epoch=6, epochs=1, verbose=1)\nfilename = \"myTf1.sav\"\npickle.dump(model, open(filename, 'wb'))\nfrom tkinter import Tk\nfrom tkinter.filedialog import askopenfilename",
    "detail": "MY_GISTS.36edf2915f.Classification_human_or_horse",
    "documentation": {}
  },
  {
    "label": "train_generator",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.Classification_human_or_horse",
    "description": "MY_GISTS.36edf2915f.Classification_human_or_horse",
    "peekOfCode": "train_generator = train_datagen.flow_from_directory('../Classification_human-or-horse',\n                                                    target_size=(200, 200),\n                                                    batch_size=222,\n                                                    class_mode='binary')\nmodel.fit_generator(train_generator, steps_per_epoch=6, epochs=1, verbose=1)\nfilename = \"myTf1.sav\"\npickle.dump(model, open(filename, 'wb'))\nfrom tkinter import Tk\nfrom tkinter.filedialog import askopenfilename\nfrom keras.preprocessing import image",
    "detail": "MY_GISTS.36edf2915f.Classification_human_or_horse",
    "documentation": {}
  },
  {
    "label": "filename",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.Classification_human_or_horse",
    "description": "MY_GISTS.36edf2915f.Classification_human_or_horse",
    "peekOfCode": "filename = \"myTf1.sav\"\npickle.dump(model, open(filename, 'wb'))\nfrom tkinter import Tk\nfrom tkinter.filedialog import askopenfilename\nfrom keras.preprocessing import image\nimport numpy as np\nTk().withdraw()\nfilename = askopenfilename()\nprint(filename)\nimg = image.load_img(filename, target_size=(200, 200))",
    "detail": "MY_GISTS.36edf2915f.Classification_human_or_horse",
    "documentation": {}
  },
  {
    "label": "filename",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.Classification_human_or_horse",
    "description": "MY_GISTS.36edf2915f.Classification_human_or_horse",
    "peekOfCode": "filename = askopenfilename()\nprint(filename)\nimg = image.load_img(filename, target_size=(200, 200))\nx = image.img_to_array(img)\nx = np.expand_dims(x, axis=0)\nimages = np.vstack([x])\nclasses = model.predict(images, batch_size=10)\nprint(classes[0])\nif classes[0] > 0.5:\n    print(filename + \" is a human\")",
    "detail": "MY_GISTS.36edf2915f.Classification_human_or_horse",
    "documentation": {}
  },
  {
    "label": "img",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.Classification_human_or_horse",
    "description": "MY_GISTS.36edf2915f.Classification_human_or_horse",
    "peekOfCode": "img = image.load_img(filename, target_size=(200, 200))\nx = image.img_to_array(img)\nx = np.expand_dims(x, axis=0)\nimages = np.vstack([x])\nclasses = model.predict(images, batch_size=10)\nprint(classes[0])\nif classes[0] > 0.5:\n    print(filename + \" is a human\")\nelse:\n    print(filename + \" is a horse\")",
    "detail": "MY_GISTS.36edf2915f.Classification_human_or_horse",
    "documentation": {}
  },
  {
    "label": "x",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.Classification_human_or_horse",
    "description": "MY_GISTS.36edf2915f.Classification_human_or_horse",
    "peekOfCode": "x = image.img_to_array(img)\nx = np.expand_dims(x, axis=0)\nimages = np.vstack([x])\nclasses = model.predict(images, batch_size=10)\nprint(classes[0])\nif classes[0] > 0.5:\n    print(filename + \" is a human\")\nelse:\n    print(filename + \" is a horse\")",
    "detail": "MY_GISTS.36edf2915f.Classification_human_or_horse",
    "documentation": {}
  },
  {
    "label": "x",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.Classification_human_or_horse",
    "description": "MY_GISTS.36edf2915f.Classification_human_or_horse",
    "peekOfCode": "x = np.expand_dims(x, axis=0)\nimages = np.vstack([x])\nclasses = model.predict(images, batch_size=10)\nprint(classes[0])\nif classes[0] > 0.5:\n    print(filename + \" is a human\")\nelse:\n    print(filename + \" is a horse\")",
    "detail": "MY_GISTS.36edf2915f.Classification_human_or_horse",
    "documentation": {}
  },
  {
    "label": "images",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.Classification_human_or_horse",
    "description": "MY_GISTS.36edf2915f.Classification_human_or_horse",
    "peekOfCode": "images = np.vstack([x])\nclasses = model.predict(images, batch_size=10)\nprint(classes[0])\nif classes[0] > 0.5:\n    print(filename + \" is a human\")\nelse:\n    print(filename + \" is a horse\")",
    "detail": "MY_GISTS.36edf2915f.Classification_human_or_horse",
    "documentation": {}
  },
  {
    "label": "classes",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.Classification_human_or_horse",
    "description": "MY_GISTS.36edf2915f.Classification_human_or_horse",
    "peekOfCode": "classes = model.predict(images, batch_size=10)\nprint(classes[0])\nif classes[0] > 0.5:\n    print(filename + \" is a human\")\nelse:\n    print(filename + \" is a horse\")",
    "detail": "MY_GISTS.36edf2915f.Classification_human_or_horse",
    "documentation": {}
  },
  {
    "label": "s",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.client",
    "description": "MY_GISTS.36edf2915f.client",
    "peekOfCode": "s = socket.socket()\n# take user input ip of server\nserver = input(\"Enter Server IP: \")\n# bind the socket to the port 12345, and connect  \ns.connect((server, 12345))\n# receive message from server connection successfully established\ndata = s.recv(1024).decode(\"utf-8\")\nprint(server + \": \" + data)\nwhile True:\n    # send message to server",
    "detail": "MY_GISTS.36edf2915f.client",
    "documentation": {}
  },
  {
    "label": "server",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.client",
    "description": "MY_GISTS.36edf2915f.client",
    "peekOfCode": "server = input(\"Enter Server IP: \")\n# bind the socket to the port 12345, and connect  \ns.connect((server, 12345))\n# receive message from server connection successfully established\ndata = s.recv(1024).decode(\"utf-8\")\nprint(server + \": \" + data)\nwhile True:\n    # send message to server\n    new_data = str(input(\"You: \")).encode(\"utf-8\")\n    s.sendall(new_data)",
    "detail": "MY_GISTS.36edf2915f.client",
    "documentation": {}
  },
  {
    "label": "data",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.client",
    "description": "MY_GISTS.36edf2915f.client",
    "peekOfCode": "data = s.recv(1024).decode(\"utf-8\")\nprint(server + \": \" + data)\nwhile True:\n    # send message to server\n    new_data = str(input(\"You: \")).encode(\"utf-8\")\n    s.sendall(new_data)\n    # receive message from server\n    data = s.recv(1024).decode(\"utf-8\")\n    print(server + \": \" + data)\n# close connection",
    "detail": "MY_GISTS.36edf2915f.client",
    "documentation": {}
  },
  {
    "label": "YouTubeDownloder",
    "kind": 6,
    "importPath": "MY_GISTS.36edf2915f.CliYoutubeDownloader",
    "description": "MY_GISTS.36edf2915f.CliYoutubeDownloader",
    "peekOfCode": "class YouTubeDownloder:\n    def __init__(self):\n        self.url = str(input(\"Enter the url of video : \"))\n        self.youtube = pytube.YouTube(\n            self.url, on_progress_callback=YouTubeDownloder.onProgress)\n        self.showTitle()\n    def showTitle(self):\n        print(\"title : {0}\\n\".format(self.youtube.title))\n        self.showStreams()\n    def showStreams(self):",
    "detail": "MY_GISTS.36edf2915f.CliYoutubeDownloader",
    "documentation": {}
  },
  {
    "label": "time",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.clock",
    "description": "MY_GISTS.36edf2915f.clock",
    "peekOfCode": "def time(): \n    string = strftime('%H:%M:%S %p') \n    clockTime.config(text = string) \n    clockTime.after(1000, time)\nclockTime = tkinter.Label(top, font = ('calibri', 40, 'bold'), background = 'black', foreground = 'white')\nclockTime.pack(anchor = 'center')\ntime() \ntop.mainloop()",
    "detail": "MY_GISTS.36edf2915f.clock",
    "documentation": {}
  },
  {
    "label": "top",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.clock",
    "description": "MY_GISTS.36edf2915f.clock",
    "peekOfCode": "top = tkinter.Tk()\n#setting title of the App\ntop.title('Clock')\n#restricting the resizable property\ntop.resizable(0,0)\ndef time(): \n    string = strftime('%H:%M:%S %p') \n    clockTime.config(text = string) \n    clockTime.after(1000, time)\nclockTime = tkinter.Label(top, font = ('calibri', 40, 'bold'), background = 'black', foreground = 'white')",
    "detail": "MY_GISTS.36edf2915f.clock",
    "documentation": {}
  },
  {
    "label": "clockTime",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.clock",
    "description": "MY_GISTS.36edf2915f.clock",
    "peekOfCode": "clockTime = tkinter.Label(top, font = ('calibri', 40, 'bold'), background = 'black', foreground = 'white')\nclockTime.pack(anchor = 'center')\ntime() \ntop.mainloop()",
    "detail": "MY_GISTS.36edf2915f.clock",
    "documentation": {}
  },
  {
    "label": "clockTime.pack(anchor",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.clock",
    "description": "MY_GISTS.36edf2915f.clock",
    "peekOfCode": "clockTime.pack(anchor = 'center')\ntime() \ntop.mainloop()",
    "detail": "MY_GISTS.36edf2915f.clock",
    "documentation": {}
  },
  {
    "label": "Cloning",
    "kind": 2,
    "importPath": "MY_GISTS.36edf2915f.cloning a  list",
    "description": "MY_GISTS.36edf2915f.cloning a  list",
    "peekOfCode": "def Cloning(li1): \n    li_copy = li1[:] \n    return li_copy \n# Driver Code \nli1 = [4, 8, 2, 10, 15, 18] \nli2 = Cloning(li1) \nprint(\"Original List:\", li1) \nprint(\"After Cloning:\", li2)",
    "detail": "MY_GISTS.36edf2915f.cloning a  list",
    "documentation": {}
  },
  {
    "label": "li1",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.cloning a  list",
    "description": "MY_GISTS.36edf2915f.cloning a  list",
    "peekOfCode": "li1 = [4, 8, 2, 10, 15, 18] \nli2 = Cloning(li1) \nprint(\"Original List:\", li1) \nprint(\"After Cloning:\", li2)",
    "detail": "MY_GISTS.36edf2915f.cloning a  list",
    "documentation": {}
  },
  {
    "label": "li2",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.cloning a  list",
    "description": "MY_GISTS.36edf2915f.cloning a  list",
    "peekOfCode": "li2 = Cloning(li1) \nprint(\"Original List:\", li1) \nprint(\"After Cloning:\", li2)",
    "detail": "MY_GISTS.36edf2915f.cloning a  list",
    "documentation": {}
  },
  {
    "label": "host",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.con_file",
    "description": "MY_GISTS.36edf2915f.con_file",
    "peekOfCode": "host = \"localhost\"\nmongoPort = 27017\nSOCKS5_PROXY_PORT = 1080\nauth = \"\"\npasscode = \"\"\n# if proxy is not working please update the auth and passcode",
    "detail": "MY_GISTS.36edf2915f.con_file",
    "documentation": {}
  },
  {
    "label": "mongoPort",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.con_file",
    "description": "MY_GISTS.36edf2915f.con_file",
    "peekOfCode": "mongoPort = 27017\nSOCKS5_PROXY_PORT = 1080\nauth = \"\"\npasscode = \"\"\n# if proxy is not working please update the auth and passcode",
    "detail": "MY_GISTS.36edf2915f.con_file",
    "documentation": {}
  },
  {
    "label": "SOCKS5_PROXY_PORT",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.con_file",
    "description": "MY_GISTS.36edf2915f.con_file",
    "peekOfCode": "SOCKS5_PROXY_PORT = 1080\nauth = \"\"\npasscode = \"\"\n# if proxy is not working please update the auth and passcode",
    "detail": "MY_GISTS.36edf2915f.con_file",
    "documentation": {}
  },
  {
    "label": "auth",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.con_file",
    "description": "MY_GISTS.36edf2915f.con_file",
    "peekOfCode": "auth = \"\"\npasscode = \"\"\n# if proxy is not working please update the auth and passcode",
    "detail": "MY_GISTS.36edf2915f.con_file",
    "documentation": {}
  },
  {
    "label": "passcode",
    "kind": 5,
    "importPath": "MY_GISTS.36edf2915f.con_file",
    "description": "MY_GISTS.36edf2915f.con_file",
    "peekOfCode": "passcode = \"\"\n# if proxy is not working please update the auth and passcode",
    "detail": "MY_GISTS.36edf2915f.con_file",
    "documentation": {}
  },
  {
    "label": "remove_instance",
    "kind": 2,
    "importPath": "MY_GISTS.4022661c5d.RemoveInstance",
    "description": "MY_GISTS.4022661c5d.RemoveInstance",
    "peekOfCode": "def remove_instance(nums, val):\n    \"\"\"\n    Given an array nums, and a value val, returns the new length of the array with the value removed\n    i.e. the number of items in nums with val\n    Input: nums=[5, 2, 2, 5, 3]  and   val = 5\n    Output: 3\n    \"\"\"\n    try:\n        #check for cases of an empty array\n        if len(nums) == 0:",
    "detail": "MY_GISTS.4022661c5d.RemoveInstance",
    "documentation": {}
  },
  {
    "label": "help",
    "kind": 2,
    "importPath": "MY_GISTS.4070fe43ea.Search-working-dir-4-keyword-in-files",
    "description": "MY_GISTS.4070fe43ea.Search-working-dir-4-keyword-in-files",
    "peekOfCode": "def help():\n    print(f'Syntax: {basename(argv[0])} (-i|-v|-h)')\n    print('\\t-i:\\tCase insensitive search.')\n    print('\\t-v:\\tVerbose.')\n    print('\\t-h:\\tHelp.')\ndef green(text):\n    return \"\\33[32m\" + text + \"\\33[0m\"\ndef main():\n    # configure extension\n    ext = input('Extensions: [c|cpp] ')",
    "detail": "MY_GISTS.4070fe43ea.Search-working-dir-4-keyword-in-files",
    "documentation": {}
  },
  {
    "label": "green",
    "kind": 2,
    "importPath": "MY_GISTS.4070fe43ea.Search-working-dir-4-keyword-in-files",
    "description": "MY_GISTS.4070fe43ea.Search-working-dir-4-keyword-in-files",
    "peekOfCode": "def green(text):\n    return \"\\33[32m\" + text + \"\\33[0m\"\ndef main():\n    # configure extension\n    ext = input('Extensions: [c|cpp] ')\n    if ext == '':\n        ext = 'c|cpp'\n    elif ext.startswith('[') and ext.endswith(']'):\n        ext.strip('[]')\n    elif ext.startswith('(') and ext.endswith(')'):",
    "detail": "MY_GISTS.4070fe43ea.Search-working-dir-4-keyword-in-files",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "MY_GISTS.4070fe43ea.Search-working-dir-4-keyword-in-files",
    "description": "MY_GISTS.4070fe43ea.Search-working-dir-4-keyword-in-files",
    "peekOfCode": "def main():\n    # configure extension\n    ext = input('Extensions: [c|cpp] ')\n    if ext == '':\n        ext = 'c|cpp'\n    elif ext.startswith('[') and ext.endswith(']'):\n        ext.strip('[]')\n    elif ext.startswith('(') and ext.endswith(')'):\n        ext.strip('()')\n    r = run(['find', '.', '-type', 'f', '-regex',",
    "detail": "MY_GISTS.4070fe43ea.Search-working-dir-4-keyword-in-files",
    "documentation": {}
  },
  {
    "label": "VERBOSE",
    "kind": 5,
    "importPath": "MY_GISTS.4070fe43ea.Search-working-dir-4-keyword-in-files",
    "description": "MY_GISTS.4070fe43ea.Search-working-dir-4-keyword-in-files",
    "peekOfCode": "VERBOSE = False\nINSENSITIVE = False\ndef help():\n    print(f'Syntax: {basename(argv[0])} (-i|-v|-h)')\n    print('\\t-i:\\tCase insensitive search.')\n    print('\\t-v:\\tVerbose.')\n    print('\\t-h:\\tHelp.')\ndef green(text):\n    return \"\\33[32m\" + text + \"\\33[0m\"\ndef main():",
    "detail": "MY_GISTS.4070fe43ea.Search-working-dir-4-keyword-in-files",
    "documentation": {}
  },
  {
    "label": "INSENSITIVE",
    "kind": 5,
    "importPath": "MY_GISTS.4070fe43ea.Search-working-dir-4-keyword-in-files",
    "description": "MY_GISTS.4070fe43ea.Search-working-dir-4-keyword-in-files",
    "peekOfCode": "INSENSITIVE = False\ndef help():\n    print(f'Syntax: {basename(argv[0])} (-i|-v|-h)')\n    print('\\t-i:\\tCase insensitive search.')\n    print('\\t-v:\\tVerbose.')\n    print('\\t-h:\\tHelp.')\ndef green(text):\n    return \"\\33[32m\" + text + \"\\33[0m\"\ndef main():\n    # configure extension",
    "detail": "MY_GISTS.4070fe43ea.Search-working-dir-4-keyword-in-files",
    "documentation": {}
  },
  {
    "label": "gather_clone_urls",
    "kind": 2,
    "importPath": "MY_GISTS.4921dfcbd0.list-org-repositories",
    "description": "MY_GISTS.4921dfcbd0.list-org-repositories",
    "peekOfCode": "def gather_clone_urls(organization, no_forks=True):\n    all_repos = gh.repos.list(user=organization).all()\n    for repo in all_repos:\n        # Don't print the urls for repos that are forks.\n        if no_forks and repo.fork:\n            continue\n        yield repo.clone_url\nif __name__ == '__main__':\n    gh = pygithub3.Github()\n    clone_urls = gather_clone_urls(\"FOSSRIT\")",
    "detail": "MY_GISTS.4921dfcbd0.list-org-repositories",
    "documentation": {}
  },
  {
    "label": "gh",
    "kind": 5,
    "importPath": "MY_GISTS.4921dfcbd0.list-org-repositories",
    "description": "MY_GISTS.4921dfcbd0.list-org-repositories",
    "peekOfCode": "gh = None\ndef gather_clone_urls(organization, no_forks=True):\n    all_repos = gh.repos.list(user=organization).all()\n    for repo in all_repos:\n        # Don't print the urls for repos that are forks.\n        if no_forks and repo.fork:\n            continue\n        yield repo.clone_url\nif __name__ == '__main__':\n    gh = pygithub3.Github()",
    "detail": "MY_GISTS.4921dfcbd0.list-org-repositories",
    "documentation": {}
  },
  {
    "label": "instances)",
    "kind": 6,
    "importPath": "MY_GISTS.4c038ce778.copy",
    "description": "MY_GISTS.4c038ce778.copy",
    "peekOfCode": "class instances).\n- A shallow copy constructs a new compound object and then (to the\n  extent possible) inserts *the same objects* into it that the\n  original contains.\n- A deep copy constructs a new compound object and then, recursively,\n  inserts *copies* into it of the objects found in the original.\nTwo problems often exist with deep copy operations that don't exist\nwith shallow copy operations:\n a) recursive objects (compound objects that, directly or indirectly,\n    contain a reference to themselves) may cause a recursive loop",
    "detail": "MY_GISTS.4c038ce778.copy",
    "documentation": {}
  },
  {
    "label": "Error",
    "kind": 6,
    "importPath": "MY_GISTS.4c038ce778.copy",
    "description": "MY_GISTS.4c038ce778.copy",
    "peekOfCode": "class Error(Exception):\n    pass\nerror = Error   # backward compatibility\ntry:\n    from org.python.core import PyStringMap\nexcept ImportError:\n    PyStringMap = None\n__all__ = [\"Error\", \"copy\", \"deepcopy\"]\ndef copy(x):\n    \"\"\"Shallow copy operation on arbitrary Python objects.",
    "detail": "MY_GISTS.4c038ce778.copy",
    "documentation": {}
  },
  {
    "label": "copy",
    "kind": 2,
    "importPath": "MY_GISTS.4c038ce778.copy",
    "description": "MY_GISTS.4c038ce778.copy",
    "peekOfCode": "def copy(x):\n    \"\"\"Shallow copy operation on arbitrary Python objects.\n    See the module's __doc__ string for more info.\n    \"\"\"\n    cls = type(x)\n    copier = _copy_dispatch.get(cls)\n    if copier:\n        return copier(x)\n    if issubclass(cls, type):\n        # treat it as a regular class:",
    "detail": "MY_GISTS.4c038ce778.copy",
    "documentation": {}
  },
  {
    "label": "deepcopy",
    "kind": 2,
    "importPath": "MY_GISTS.4c038ce778.copy",
    "description": "MY_GISTS.4c038ce778.copy",
    "peekOfCode": "def deepcopy(x, memo=None, _nil=[]):\n    \"\"\"Deep copy operation on arbitrary Python objects.\n    See the module's __doc__ string for more info.\n    \"\"\"\n    if memo is None:\n        memo = {}\n    d = id(x)\n    y = memo.get(d, _nil)\n    if y is not _nil:\n        return y",
    "detail": "MY_GISTS.4c038ce778.copy",
    "documentation": {}
  },
  {
    "label": "error",
    "kind": 5,
    "importPath": "MY_GISTS.4c038ce778.copy",
    "description": "MY_GISTS.4c038ce778.copy",
    "peekOfCode": "error = Error   # backward compatibility\ntry:\n    from org.python.core import PyStringMap\nexcept ImportError:\n    PyStringMap = None\n__all__ = [\"Error\", \"copy\", \"deepcopy\"]\ndef copy(x):\n    \"\"\"Shallow copy operation on arbitrary Python objects.\n    See the module's __doc__ string for more info.\n    \"\"\"",
    "detail": "MY_GISTS.4c038ce778.copy",
    "documentation": {}
  },
  {
    "label": "__all__",
    "kind": 5,
    "importPath": "MY_GISTS.4c038ce778.copy",
    "description": "MY_GISTS.4c038ce778.copy",
    "peekOfCode": "__all__ = [\"Error\", \"copy\", \"deepcopy\"]\ndef copy(x):\n    \"\"\"Shallow copy operation on arbitrary Python objects.\n    See the module's __doc__ string for more info.\n    \"\"\"\n    cls = type(x)\n    copier = _copy_dispatch.get(cls)\n    if copier:\n        return copier(x)\n    if issubclass(cls, type):",
    "detail": "MY_GISTS.4c038ce778.copy",
    "documentation": {}
  },
  {
    "label": "_copy_dispatch",
    "kind": 5,
    "importPath": "MY_GISTS.4c038ce778.copy",
    "description": "MY_GISTS.4c038ce778.copy",
    "peekOfCode": "_copy_dispatch = d = {}\ndef _copy_immutable(x):\n    return x\nfor t in (type(None), int, float, bool, complex, str, tuple,\n          bytes, frozenset, type, range, slice, property,\n          types.BuiltinFunctionType, type(Ellipsis), type(NotImplemented),\n          types.FunctionType, weakref.ref):\n    d[t] = _copy_immutable\nt = getattr(types, \"CodeType\", None)\nif t is not None:",
    "detail": "MY_GISTS.4c038ce778.copy",
    "documentation": {}
  },
  {
    "label": "t",
    "kind": 5,
    "importPath": "MY_GISTS.4c038ce778.copy",
    "description": "MY_GISTS.4c038ce778.copy",
    "peekOfCode": "t = getattr(types, \"CodeType\", None)\nif t is not None:\n    d[t] = _copy_immutable\nd[list] = list.copy\nd[dict] = dict.copy\nd[set] = set.copy\nd[bytearray] = bytearray.copy\nif PyStringMap is not None:\n    d[PyStringMap] = PyStringMap.copy\ndel d, t",
    "detail": "MY_GISTS.4c038ce778.copy",
    "documentation": {}
  },
  {
    "label": "d[list]",
    "kind": 5,
    "importPath": "MY_GISTS.4c038ce778.copy",
    "description": "MY_GISTS.4c038ce778.copy",
    "peekOfCode": "d[list] = list.copy\nd[dict] = dict.copy\nd[set] = set.copy\nd[bytearray] = bytearray.copy\nif PyStringMap is not None:\n    d[PyStringMap] = PyStringMap.copy\ndel d, t\ndef deepcopy(x, memo=None, _nil=[]):\n    \"\"\"Deep copy operation on arbitrary Python objects.\n    See the module's __doc__ string for more info.",
    "detail": "MY_GISTS.4c038ce778.copy",
    "documentation": {}
  },
  {
    "label": "d[dict]",
    "kind": 5,
    "importPath": "MY_GISTS.4c038ce778.copy",
    "description": "MY_GISTS.4c038ce778.copy",
    "peekOfCode": "d[dict] = dict.copy\nd[set] = set.copy\nd[bytearray] = bytearray.copy\nif PyStringMap is not None:\n    d[PyStringMap] = PyStringMap.copy\ndel d, t\ndef deepcopy(x, memo=None, _nil=[]):\n    \"\"\"Deep copy operation on arbitrary Python objects.\n    See the module's __doc__ string for more info.\n    \"\"\"",
    "detail": "MY_GISTS.4c038ce778.copy",
    "documentation": {}
  },
  {
    "label": "d[set]",
    "kind": 5,
    "importPath": "MY_GISTS.4c038ce778.copy",
    "description": "MY_GISTS.4c038ce778.copy",
    "peekOfCode": "d[set] = set.copy\nd[bytearray] = bytearray.copy\nif PyStringMap is not None:\n    d[PyStringMap] = PyStringMap.copy\ndel d, t\ndef deepcopy(x, memo=None, _nil=[]):\n    \"\"\"Deep copy operation on arbitrary Python objects.\n    See the module's __doc__ string for more info.\n    \"\"\"\n    if memo is None:",
    "detail": "MY_GISTS.4c038ce778.copy",
    "documentation": {}
  },
  {
    "label": "d[bytearray]",
    "kind": 5,
    "importPath": "MY_GISTS.4c038ce778.copy",
    "description": "MY_GISTS.4c038ce778.copy",
    "peekOfCode": "d[bytearray] = bytearray.copy\nif PyStringMap is not None:\n    d[PyStringMap] = PyStringMap.copy\ndel d, t\ndef deepcopy(x, memo=None, _nil=[]):\n    \"\"\"Deep copy operation on arbitrary Python objects.\n    See the module's __doc__ string for more info.\n    \"\"\"\n    if memo is None:\n        memo = {}",
    "detail": "MY_GISTS.4c038ce778.copy",
    "documentation": {}
  },
  {
    "label": "_deepcopy_dispatch",
    "kind": 5,
    "importPath": "MY_GISTS.4c038ce778.copy",
    "description": "MY_GISTS.4c038ce778.copy",
    "peekOfCode": "_deepcopy_dispatch = d = {}\ndef _deepcopy_atomic(x, memo):\n    return x\nd[type(None)] = _deepcopy_atomic\nd[type(Ellipsis)] = _deepcopy_atomic\nd[type(NotImplemented)] = _deepcopy_atomic\nd[int] = _deepcopy_atomic\nd[float] = _deepcopy_atomic\nd[bool] = _deepcopy_atomic\nd[complex] = _deepcopy_atomic",
    "detail": "MY_GISTS.4c038ce778.copy",
    "documentation": {}
  },
  {
    "label": "d[type(None)]",
    "kind": 5,
    "importPath": "MY_GISTS.4c038ce778.copy",
    "description": "MY_GISTS.4c038ce778.copy",
    "peekOfCode": "d[type(None)] = _deepcopy_atomic\nd[type(Ellipsis)] = _deepcopy_atomic\nd[type(NotImplemented)] = _deepcopy_atomic\nd[int] = _deepcopy_atomic\nd[float] = _deepcopy_atomic\nd[bool] = _deepcopy_atomic\nd[complex] = _deepcopy_atomic\nd[bytes] = _deepcopy_atomic\nd[str] = _deepcopy_atomic\nd[types.CodeType] = _deepcopy_atomic",
    "detail": "MY_GISTS.4c038ce778.copy",
    "documentation": {}
  },
  {
    "label": "d[type(Ellipsis)]",
    "kind": 5,
    "importPath": "MY_GISTS.4c038ce778.copy",
    "description": "MY_GISTS.4c038ce778.copy",
    "peekOfCode": "d[type(Ellipsis)] = _deepcopy_atomic\nd[type(NotImplemented)] = _deepcopy_atomic\nd[int] = _deepcopy_atomic\nd[float] = _deepcopy_atomic\nd[bool] = _deepcopy_atomic\nd[complex] = _deepcopy_atomic\nd[bytes] = _deepcopy_atomic\nd[str] = _deepcopy_atomic\nd[types.CodeType] = _deepcopy_atomic\nd[type] = _deepcopy_atomic",
    "detail": "MY_GISTS.4c038ce778.copy",
    "documentation": {}
  },
  {
    "label": "d[type(NotImplemented)]",
    "kind": 5,
    "importPath": "MY_GISTS.4c038ce778.copy",
    "description": "MY_GISTS.4c038ce778.copy",
    "peekOfCode": "d[type(NotImplemented)] = _deepcopy_atomic\nd[int] = _deepcopy_atomic\nd[float] = _deepcopy_atomic\nd[bool] = _deepcopy_atomic\nd[complex] = _deepcopy_atomic\nd[bytes] = _deepcopy_atomic\nd[str] = _deepcopy_atomic\nd[types.CodeType] = _deepcopy_atomic\nd[type] = _deepcopy_atomic\nd[types.BuiltinFunctionType] = _deepcopy_atomic",
    "detail": "MY_GISTS.4c038ce778.copy",
    "documentation": {}
  },
  {
    "label": "d[int]",
    "kind": 5,
    "importPath": "MY_GISTS.4c038ce778.copy",
    "description": "MY_GISTS.4c038ce778.copy",
    "peekOfCode": "d[int] = _deepcopy_atomic\nd[float] = _deepcopy_atomic\nd[bool] = _deepcopy_atomic\nd[complex] = _deepcopy_atomic\nd[bytes] = _deepcopy_atomic\nd[str] = _deepcopy_atomic\nd[types.CodeType] = _deepcopy_atomic\nd[type] = _deepcopy_atomic\nd[types.BuiltinFunctionType] = _deepcopy_atomic\nd[types.FunctionType] = _deepcopy_atomic",
    "detail": "MY_GISTS.4c038ce778.copy",
    "documentation": {}
  },
  {
    "label": "d[float]",
    "kind": 5,
    "importPath": "MY_GISTS.4c038ce778.copy",
    "description": "MY_GISTS.4c038ce778.copy",
    "peekOfCode": "d[float] = _deepcopy_atomic\nd[bool] = _deepcopy_atomic\nd[complex] = _deepcopy_atomic\nd[bytes] = _deepcopy_atomic\nd[str] = _deepcopy_atomic\nd[types.CodeType] = _deepcopy_atomic\nd[type] = _deepcopy_atomic\nd[types.BuiltinFunctionType] = _deepcopy_atomic\nd[types.FunctionType] = _deepcopy_atomic\nd[weakref.ref] = _deepcopy_atomic",
    "detail": "MY_GISTS.4c038ce778.copy",
    "documentation": {}
  },
  {
    "label": "d[bool]",
    "kind": 5,
    "importPath": "MY_GISTS.4c038ce778.copy",
    "description": "MY_GISTS.4c038ce778.copy",
    "peekOfCode": "d[bool] = _deepcopy_atomic\nd[complex] = _deepcopy_atomic\nd[bytes] = _deepcopy_atomic\nd[str] = _deepcopy_atomic\nd[types.CodeType] = _deepcopy_atomic\nd[type] = _deepcopy_atomic\nd[types.BuiltinFunctionType] = _deepcopy_atomic\nd[types.FunctionType] = _deepcopy_atomic\nd[weakref.ref] = _deepcopy_atomic\nd[property] = _deepcopy_atomic",
    "detail": "MY_GISTS.4c038ce778.copy",
    "documentation": {}
  },
  {
    "label": "d[complex]",
    "kind": 5,
    "importPath": "MY_GISTS.4c038ce778.copy",
    "description": "MY_GISTS.4c038ce778.copy",
    "peekOfCode": "d[complex] = _deepcopy_atomic\nd[bytes] = _deepcopy_atomic\nd[str] = _deepcopy_atomic\nd[types.CodeType] = _deepcopy_atomic\nd[type] = _deepcopy_atomic\nd[types.BuiltinFunctionType] = _deepcopy_atomic\nd[types.FunctionType] = _deepcopy_atomic\nd[weakref.ref] = _deepcopy_atomic\nd[property] = _deepcopy_atomic\ndef _deepcopy_list(x, memo, deepcopy=deepcopy):",
    "detail": "MY_GISTS.4c038ce778.copy",
    "documentation": {}
  },
  {
    "label": "d[bytes]",
    "kind": 5,
    "importPath": "MY_GISTS.4c038ce778.copy",
    "description": "MY_GISTS.4c038ce778.copy",
    "peekOfCode": "d[bytes] = _deepcopy_atomic\nd[str] = _deepcopy_atomic\nd[types.CodeType] = _deepcopy_atomic\nd[type] = _deepcopy_atomic\nd[types.BuiltinFunctionType] = _deepcopy_atomic\nd[types.FunctionType] = _deepcopy_atomic\nd[weakref.ref] = _deepcopy_atomic\nd[property] = _deepcopy_atomic\ndef _deepcopy_list(x, memo, deepcopy=deepcopy):\n    y = []",
    "detail": "MY_GISTS.4c038ce778.copy",
    "documentation": {}
  },
  {
    "label": "d[str]",
    "kind": 5,
    "importPath": "MY_GISTS.4c038ce778.copy",
    "description": "MY_GISTS.4c038ce778.copy",
    "peekOfCode": "d[str] = _deepcopy_atomic\nd[types.CodeType] = _deepcopy_atomic\nd[type] = _deepcopy_atomic\nd[types.BuiltinFunctionType] = _deepcopy_atomic\nd[types.FunctionType] = _deepcopy_atomic\nd[weakref.ref] = _deepcopy_atomic\nd[property] = _deepcopy_atomic\ndef _deepcopy_list(x, memo, deepcopy=deepcopy):\n    y = []\n    memo[id(x)] = y",
    "detail": "MY_GISTS.4c038ce778.copy",
    "documentation": {}
  },
  {
    "label": "d[types.CodeType]",
    "kind": 5,
    "importPath": "MY_GISTS.4c038ce778.copy",
    "description": "MY_GISTS.4c038ce778.copy",
    "peekOfCode": "d[types.CodeType] = _deepcopy_atomic\nd[type] = _deepcopy_atomic\nd[types.BuiltinFunctionType] = _deepcopy_atomic\nd[types.FunctionType] = _deepcopy_atomic\nd[weakref.ref] = _deepcopy_atomic\nd[property] = _deepcopy_atomic\ndef _deepcopy_list(x, memo, deepcopy=deepcopy):\n    y = []\n    memo[id(x)] = y\n    append = y.append",
    "detail": "MY_GISTS.4c038ce778.copy",
    "documentation": {}
  },
  {
    "label": "d[type]",
    "kind": 5,
    "importPath": "MY_GISTS.4c038ce778.copy",
    "description": "MY_GISTS.4c038ce778.copy",
    "peekOfCode": "d[type] = _deepcopy_atomic\nd[types.BuiltinFunctionType] = _deepcopy_atomic\nd[types.FunctionType] = _deepcopy_atomic\nd[weakref.ref] = _deepcopy_atomic\nd[property] = _deepcopy_atomic\ndef _deepcopy_list(x, memo, deepcopy=deepcopy):\n    y = []\n    memo[id(x)] = y\n    append = y.append\n    for a in x:",
    "detail": "MY_GISTS.4c038ce778.copy",
    "documentation": {}
  },
  {
    "label": "d[types.BuiltinFunctionType]",
    "kind": 5,
    "importPath": "MY_GISTS.4c038ce778.copy",
    "description": "MY_GISTS.4c038ce778.copy",
    "peekOfCode": "d[types.BuiltinFunctionType] = _deepcopy_atomic\nd[types.FunctionType] = _deepcopy_atomic\nd[weakref.ref] = _deepcopy_atomic\nd[property] = _deepcopy_atomic\ndef _deepcopy_list(x, memo, deepcopy=deepcopy):\n    y = []\n    memo[id(x)] = y\n    append = y.append\n    for a in x:\n        append(deepcopy(a, memo))",
    "detail": "MY_GISTS.4c038ce778.copy",
    "documentation": {}
  },
  {
    "label": "d[types.FunctionType]",
    "kind": 5,
    "importPath": "MY_GISTS.4c038ce778.copy",
    "description": "MY_GISTS.4c038ce778.copy",
    "peekOfCode": "d[types.FunctionType] = _deepcopy_atomic\nd[weakref.ref] = _deepcopy_atomic\nd[property] = _deepcopy_atomic\ndef _deepcopy_list(x, memo, deepcopy=deepcopy):\n    y = []\n    memo[id(x)] = y\n    append = y.append\n    for a in x:\n        append(deepcopy(a, memo))\n    return y",
    "detail": "MY_GISTS.4c038ce778.copy",
    "documentation": {}
  },
  {
    "label": "d[weakref.ref]",
    "kind": 5,
    "importPath": "MY_GISTS.4c038ce778.copy",
    "description": "MY_GISTS.4c038ce778.copy",
    "peekOfCode": "d[weakref.ref] = _deepcopy_atomic\nd[property] = _deepcopy_atomic\ndef _deepcopy_list(x, memo, deepcopy=deepcopy):\n    y = []\n    memo[id(x)] = y\n    append = y.append\n    for a in x:\n        append(deepcopy(a, memo))\n    return y\nd[list] = _deepcopy_list",
    "detail": "MY_GISTS.4c038ce778.copy",
    "documentation": {}
  },
  {
    "label": "d[property]",
    "kind": 5,
    "importPath": "MY_GISTS.4c038ce778.copy",
    "description": "MY_GISTS.4c038ce778.copy",
    "peekOfCode": "d[property] = _deepcopy_atomic\ndef _deepcopy_list(x, memo, deepcopy=deepcopy):\n    y = []\n    memo[id(x)] = y\n    append = y.append\n    for a in x:\n        append(deepcopy(a, memo))\n    return y\nd[list] = _deepcopy_list\ndef _deepcopy_tuple(x, memo, deepcopy=deepcopy):",
    "detail": "MY_GISTS.4c038ce778.copy",
    "documentation": {}
  },
  {
    "label": "d[list]",
    "kind": 5,
    "importPath": "MY_GISTS.4c038ce778.copy",
    "description": "MY_GISTS.4c038ce778.copy",
    "peekOfCode": "d[list] = _deepcopy_list\ndef _deepcopy_tuple(x, memo, deepcopy=deepcopy):\n    y = [deepcopy(a, memo) for a in x]\n    # We're not going to put the tuple in the memo, but it's still important we\n    # check for it, in case the tuple contains recursive mutable structures.\n    try:\n        return memo[id(x)]\n    except KeyError:\n        pass\n    for k, j in zip(x, y):",
    "detail": "MY_GISTS.4c038ce778.copy",
    "documentation": {}
  },
  {
    "label": "d[tuple]",
    "kind": 5,
    "importPath": "MY_GISTS.4c038ce778.copy",
    "description": "MY_GISTS.4c038ce778.copy",
    "peekOfCode": "d[tuple] = _deepcopy_tuple\ndef _deepcopy_dict(x, memo, deepcopy=deepcopy):\n    y = {}\n    memo[id(x)] = y\n    for key, value in x.items():\n        y[deepcopy(key, memo)] = deepcopy(value, memo)\n    return y\nd[dict] = _deepcopy_dict\nif PyStringMap is not None:\n    d[PyStringMap] = _deepcopy_dict",
    "detail": "MY_GISTS.4c038ce778.copy",
    "documentation": {}
  },
  {
    "label": "d[dict]",
    "kind": 5,
    "importPath": "MY_GISTS.4c038ce778.copy",
    "description": "MY_GISTS.4c038ce778.copy",
    "peekOfCode": "d[dict] = _deepcopy_dict\nif PyStringMap is not None:\n    d[PyStringMap] = _deepcopy_dict\ndef _deepcopy_method(x, memo): # Copy instance methods\n    return type(x)(x.__func__, deepcopy(x.__self__, memo))\nd[types.MethodType] = _deepcopy_method\ndel d\ndef _keep_alive(x, memo):\n    \"\"\"Keeps a reference to the object x in the memo.\n    Because we remember objects by their id, we have",
    "detail": "MY_GISTS.4c038ce778.copy",
    "documentation": {}
  },
  {
    "label": "d[types.MethodType]",
    "kind": 5,
    "importPath": "MY_GISTS.4c038ce778.copy",
    "description": "MY_GISTS.4c038ce778.copy",
    "peekOfCode": "d[types.MethodType] = _deepcopy_method\ndel d\ndef _keep_alive(x, memo):\n    \"\"\"Keeps a reference to the object x in the memo.\n    Because we remember objects by their id, we have\n    to assure that possibly temporary objects are kept\n    alive by referencing them.\n    We store a reference at the id of the memo, which should\n    normally not be used unless someone tries to deepcopy\n    the memo itself...",
    "detail": "MY_GISTS.4c038ce778.copy",
    "documentation": {}
  },
  {
    "label": "timedelta",
    "kind": 6,
    "importPath": "MY_GISTS.4c038ce778.datetime",
    "description": "MY_GISTS.4c038ce778.datetime",
    "peekOfCode": "class timedelta:\n    \"\"\"Represent the difference between two datetime objects.\n    Supported operators:\n    - add, subtract timedelta\n    - unary plus, minus, abs\n    - compare to timedelta\n    - multiply, divide by int\n    In addition, datetime supports subtraction of two datetime objects\n    returning a timedelta, and addition or subtraction of a datetime\n    and a timedelta giving a datetime.",
    "detail": "MY_GISTS.4c038ce778.datetime",
    "documentation": {}
  },
  {
    "label": "date",
    "kind": 6,
    "importPath": "MY_GISTS.4c038ce778.datetime",
    "description": "MY_GISTS.4c038ce778.datetime",
    "peekOfCode": "class date:\n    \"\"\"Concrete date type.\n    Constructors:\n    __new__()\n    fromtimestamp()\n    today()\n    fromordinal()\n    Operators:\n    __repr__, __str__\n    __eq__, __le__, __lt__, __ge__, __gt__, __hash__",
    "detail": "MY_GISTS.4c038ce778.datetime",
    "documentation": {}
  },
  {
    "label": "tzinfo",
    "kind": 6,
    "importPath": "MY_GISTS.4c038ce778.datetime",
    "description": "MY_GISTS.4c038ce778.datetime",
    "peekOfCode": "class tzinfo:\n    \"\"\"Abstract base class for time zone info classes.\n    Subclasses must override the name(), utcoffset() and dst() methods.\n    \"\"\"\n    __slots__ = ()\n    def tzname(self, dt):\n        \"datetime -> string name of time zone.\"\n        raise NotImplementedError(\"tzinfo subclass must override tzname()\")\n    def utcoffset(self, dt):\n        \"datetime -> timedelta, positive for east of UTC, negative for west of UTC\"",
    "detail": "MY_GISTS.4c038ce778.datetime",
    "documentation": {}
  },
  {
    "label": "IsoCalendarDate",
    "kind": 6,
    "importPath": "MY_GISTS.4c038ce778.datetime",
    "description": "MY_GISTS.4c038ce778.datetime",
    "peekOfCode": "class IsoCalendarDate(tuple):\n    def __new__(cls, year, week, weekday, /):\n        return super().__new__(cls, (year, week, weekday))\n    @property\n    def year(self):\n        return self[0]\n    @property\n    def week(self):\n        return self[1]\n    @property",
    "detail": "MY_GISTS.4c038ce778.datetime",
    "documentation": {}
  },
  {
    "label": "time",
    "kind": 6,
    "importPath": "MY_GISTS.4c038ce778.datetime",
    "description": "MY_GISTS.4c038ce778.datetime",
    "peekOfCode": "class time:\n    \"\"\"Time with time zone.\n    Constructors:\n    __new__()\n    Operators:\n    __repr__, __str__\n    __eq__, __le__, __lt__, __ge__, __gt__, __hash__\n    Methods:\n    strftime()\n    isoformat()",
    "detail": "MY_GISTS.4c038ce778.datetime",
    "documentation": {}
  },
  {
    "label": "datetime",
    "kind": 6,
    "importPath": "MY_GISTS.4c038ce778.datetime",
    "description": "MY_GISTS.4c038ce778.datetime",
    "peekOfCode": "class datetime(date):\n    \"\"\"datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])\n    The year, month and day arguments are required. tzinfo may be None, or an\n    instance of a tzinfo subclass. The remaining arguments may be ints.\n    \"\"\"\n    __slots__ = date.__slots__ + time.__slots__\n    def __new__(cls, year, month=None, day=None, hour=0, minute=0, second=0,\n                microsecond=0, tzinfo=None, *, fold=0):\n        if (isinstance(year, (bytes, str)) and len(year) == 10 and\n            1 <= ord(year[2:3])&0x7F <= 12):",
    "detail": "MY_GISTS.4c038ce778.datetime",
    "documentation": {}
  },
  {
    "label": "timezone",
    "kind": 6,
    "importPath": "MY_GISTS.4c038ce778.datetime",
    "description": "MY_GISTS.4c038ce778.datetime",
    "peekOfCode": "class timezone(tzinfo):\n    __slots__ = '_offset', '_name'\n    # Sentinel value to disallow None\n    _Omitted = object()\n    def __new__(cls, offset, name=_Omitted):\n        if not isinstance(offset, timedelta):\n            raise TypeError(\"offset must be a timedelta\")\n        if name is cls._Omitted:\n            if not offset:\n                return cls.utc",
    "detail": "MY_GISTS.4c038ce778.datetime",
    "documentation": {}
  },
  {
    "label": "__all__",
    "kind": 5,
    "importPath": "MY_GISTS.4c038ce778.datetime",
    "description": "MY_GISTS.4c038ce778.datetime",
    "peekOfCode": "__all__ = (\"date\", \"datetime\", \"time\", \"timedelta\", \"timezone\", \"tzinfo\",\n           \"MINYEAR\", \"MAXYEAR\")\nimport time as _time\nimport math as _math\nimport sys\ndef _cmp(x, y):\n    return 0 if x == y else 1 if x > y else -1\nMINYEAR = 1\nMAXYEAR = 9999\n_MAXORDINAL = 3652059  # date.max.toordinal()",
    "detail": "MY_GISTS.4c038ce778.datetime",
    "documentation": {}
  },
  {
    "label": "MINYEAR",
    "kind": 5,
    "importPath": "MY_GISTS.4c038ce778.datetime",
    "description": "MY_GISTS.4c038ce778.datetime",
    "peekOfCode": "MINYEAR = 1\nMAXYEAR = 9999\n_MAXORDINAL = 3652059  # date.max.toordinal()\n# Utility functions, adapted from Python's Demo/classes/Dates.py, which\n# also assumes the current Gregorian calendar indefinitely extended in\n# both directions.  Difference:  Dates.py calls January 1 of year 0 day\n# number 1.  The code here calls January 1 of year 1 day number 1.  This is\n# to match the definition of the \"proleptic Gregorian\" calendar in Dershowitz\n# and Reingold's \"Calendrical Calculations\", where it's the base calendar\n# for all computations.  See the book for algorithms for converting between",
    "detail": "MY_GISTS.4c038ce778.datetime",
    "documentation": {}
  },
  {
    "label": "MAXYEAR",
    "kind": 5,
    "importPath": "MY_GISTS.4c038ce778.datetime",
    "description": "MY_GISTS.4c038ce778.datetime",
    "peekOfCode": "MAXYEAR = 9999\n_MAXORDINAL = 3652059  # date.max.toordinal()\n# Utility functions, adapted from Python's Demo/classes/Dates.py, which\n# also assumes the current Gregorian calendar indefinitely extended in\n# both directions.  Difference:  Dates.py calls January 1 of year 0 day\n# number 1.  The code here calls January 1 of year 1 day number 1.  This is\n# to match the definition of the \"proleptic Gregorian\" calendar in Dershowitz\n# and Reingold's \"Calendrical Calculations\", where it's the base calendar\n# for all computations.  See the book for algorithms for converting between\n# proleptic Gregorian ordinals and many other calendar systems.",
    "detail": "MY_GISTS.4c038ce778.datetime",
    "documentation": {}
  },
  {
    "label": "_MAXORDINAL",
    "kind": 5,
    "importPath": "MY_GISTS.4c038ce778.datetime",
    "description": "MY_GISTS.4c038ce778.datetime",
    "peekOfCode": "_MAXORDINAL = 3652059  # date.max.toordinal()\n# Utility functions, adapted from Python's Demo/classes/Dates.py, which\n# also assumes the current Gregorian calendar indefinitely extended in\n# both directions.  Difference:  Dates.py calls January 1 of year 0 day\n# number 1.  The code here calls January 1 of year 1 day number 1.  This is\n# to match the definition of the \"proleptic Gregorian\" calendar in Dershowitz\n# and Reingold's \"Calendrical Calculations\", where it's the base calendar\n# for all computations.  See the book for algorithms for converting between\n# proleptic Gregorian ordinals and many other calendar systems.\n# -1 is a placeholder for indexing purposes.",
    "detail": "MY_GISTS.4c038ce778.datetime",
    "documentation": {}
  },
  {
    "label": "_DAYS_IN_MONTH",
    "kind": 5,
    "importPath": "MY_GISTS.4c038ce778.datetime",
    "description": "MY_GISTS.4c038ce778.datetime",
    "peekOfCode": "_DAYS_IN_MONTH = [-1, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n_DAYS_BEFORE_MONTH = [-1]  # -1 is a placeholder for indexing purposes.\ndbm = 0\nfor dim in _DAYS_IN_MONTH[1:]:\n    _DAYS_BEFORE_MONTH.append(dbm)\n    dbm += dim\ndel dbm, dim\ndef _is_leap(year):\n    \"year -> 1 if leap year, else 0.\"\n    return year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)",
    "detail": "MY_GISTS.4c038ce778.datetime",
    "documentation": {}
  },
  {
    "label": "_DAYS_BEFORE_MONTH",
    "kind": 5,
    "importPath": "MY_GISTS.4c038ce778.datetime",
    "description": "MY_GISTS.4c038ce778.datetime",
    "peekOfCode": "_DAYS_BEFORE_MONTH = [-1]  # -1 is a placeholder for indexing purposes.\ndbm = 0\nfor dim in _DAYS_IN_MONTH[1:]:\n    _DAYS_BEFORE_MONTH.append(dbm)\n    dbm += dim\ndel dbm, dim\ndef _is_leap(year):\n    \"year -> 1 if leap year, else 0.\"\n    return year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)\ndef _days_before_year(year):",
    "detail": "MY_GISTS.4c038ce778.datetime",
    "documentation": {}
  },
  {
    "label": "dbm",
    "kind": 5,
    "importPath": "MY_GISTS.4c038ce778.datetime",
    "description": "MY_GISTS.4c038ce778.datetime",
    "peekOfCode": "dbm = 0\nfor dim in _DAYS_IN_MONTH[1:]:\n    _DAYS_BEFORE_MONTH.append(dbm)\n    dbm += dim\ndel dbm, dim\ndef _is_leap(year):\n    \"year -> 1 if leap year, else 0.\"\n    return year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)\ndef _days_before_year(year):\n    \"year -> number of days before January 1st of year.\"",
    "detail": "MY_GISTS.4c038ce778.datetime",
    "documentation": {}
  },
  {
    "label": "_DI400Y",
    "kind": 5,
    "importPath": "MY_GISTS.4c038ce778.datetime",
    "description": "MY_GISTS.4c038ce778.datetime",
    "peekOfCode": "_DI400Y = _days_before_year(401)    # number of days in 400 years\n_DI100Y = _days_before_year(101)    #    \"    \"   \"   \" 100   \"\n_DI4Y   = _days_before_year(5)      #    \"    \"   \"   \"   4   \"\n# A 4-year cycle has an extra leap day over what we'd get from pasting\n# together 4 single years.\nassert _DI4Y == 4 * 365 + 1\n# Similarly, a 400-year cycle has an extra leap day over what we'd get from\n# pasting together 4 100-year cycles.\nassert _DI400Y == 4 * _DI100Y + 1\n# OTOH, a 100-year cycle has one fewer leap day than we'd get from",
    "detail": "MY_GISTS.4c038ce778.datetime",
    "documentation": {}
  },
  {
    "label": "_DI100Y",
    "kind": 5,
    "importPath": "MY_GISTS.4c038ce778.datetime",
    "description": "MY_GISTS.4c038ce778.datetime",
    "peekOfCode": "_DI100Y = _days_before_year(101)    #    \"    \"   \"   \" 100   \"\n_DI4Y   = _days_before_year(5)      #    \"    \"   \"   \"   4   \"\n# A 4-year cycle has an extra leap day over what we'd get from pasting\n# together 4 single years.\nassert _DI4Y == 4 * 365 + 1\n# Similarly, a 400-year cycle has an extra leap day over what we'd get from\n# pasting together 4 100-year cycles.\nassert _DI400Y == 4 * _DI100Y + 1\n# OTOH, a 100-year cycle has one fewer leap day than we'd get from\n# pasting together 25 4-year cycles.",
    "detail": "MY_GISTS.4c038ce778.datetime",
    "documentation": {}
  },
  {
    "label": "_MONTHNAMES",
    "kind": 5,
    "importPath": "MY_GISTS.4c038ce778.datetime",
    "description": "MY_GISTS.4c038ce778.datetime",
    "peekOfCode": "_MONTHNAMES = [None, \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n                     \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\n_DAYNAMES = [None, \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"]\ndef _build_struct_time(y, m, d, hh, mm, ss, dstflag):\n    wday = (_ymd2ord(y, m, d) + 6) % 7\n    dnum = _days_before_month(y, m) + d\n    return _time.struct_time((y, m, d, hh, mm, ss, wday, dnum, dstflag))\ndef _format_time(hh, mm, ss, us, timespec='auto'):\n    specs = {\n        'hours': '{:02d}',",
    "detail": "MY_GISTS.4c038ce778.datetime",
    "documentation": {}
  },
  {
    "label": "_DAYNAMES",
    "kind": 5,
    "importPath": "MY_GISTS.4c038ce778.datetime",
    "description": "MY_GISTS.4c038ce778.datetime",
    "peekOfCode": "_DAYNAMES = [None, \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"]\ndef _build_struct_time(y, m, d, hh, mm, ss, dstflag):\n    wday = (_ymd2ord(y, m, d) + 6) % 7\n    dnum = _days_before_month(y, m) + d\n    return _time.struct_time((y, m, d, hh, mm, ss, wday, dnum, dstflag))\ndef _format_time(hh, mm, ss, us, timespec='auto'):\n    specs = {\n        'hours': '{:02d}',\n        'minutes': '{:02d}:{:02d}',\n        'seconds': '{:02d}:{:02d}:{:02d}',",
    "detail": "MY_GISTS.4c038ce778.datetime",
    "documentation": {}
  },
  {
    "label": "timedelta.min",
    "kind": 5,
    "importPath": "MY_GISTS.4c038ce778.datetime",
    "description": "MY_GISTS.4c038ce778.datetime",
    "peekOfCode": "timedelta.min = timedelta(-999999999)\ntimedelta.max = timedelta(days=999999999, hours=23, minutes=59, seconds=59,\n                          microseconds=999999)\ntimedelta.resolution = timedelta(microseconds=1)\nclass date:\n    \"\"\"Concrete date type.\n    Constructors:\n    __new__()\n    fromtimestamp()\n    today()",
    "detail": "MY_GISTS.4c038ce778.datetime",
    "documentation": {}
  },
  {
    "label": "timedelta.max",
    "kind": 5,
    "importPath": "MY_GISTS.4c038ce778.datetime",
    "description": "MY_GISTS.4c038ce778.datetime",
    "peekOfCode": "timedelta.max = timedelta(days=999999999, hours=23, minutes=59, seconds=59,\n                          microseconds=999999)\ntimedelta.resolution = timedelta(microseconds=1)\nclass date:\n    \"\"\"Concrete date type.\n    Constructors:\n    __new__()\n    fromtimestamp()\n    today()\n    fromordinal()",
    "detail": "MY_GISTS.4c038ce778.datetime",
    "documentation": {}
  },
  {
    "label": "timedelta.resolution",
    "kind": 5,
    "importPath": "MY_GISTS.4c038ce778.datetime",
    "description": "MY_GISTS.4c038ce778.datetime",
    "peekOfCode": "timedelta.resolution = timedelta(microseconds=1)\nclass date:\n    \"\"\"Concrete date type.\n    Constructors:\n    __new__()\n    fromtimestamp()\n    today()\n    fromordinal()\n    Operators:\n    __repr__, __str__",
    "detail": "MY_GISTS.4c038ce778.datetime",
    "documentation": {}
  },
  {
    "label": "_date_class",
    "kind": 5,
    "importPath": "MY_GISTS.4c038ce778.datetime",
    "description": "MY_GISTS.4c038ce778.datetime",
    "peekOfCode": "_date_class = date  # so functions w/ args named \"date\" can get at the class\ndate.min = date(1, 1, 1)\ndate.max = date(9999, 12, 31)\ndate.resolution = timedelta(days=1)\nclass tzinfo:\n    \"\"\"Abstract base class for time zone info classes.\n    Subclasses must override the name(), utcoffset() and dst() methods.\n    \"\"\"\n    __slots__ = ()\n    def tzname(self, dt):",
    "detail": "MY_GISTS.4c038ce778.datetime",
    "documentation": {}
  },
  {
    "label": "date.min",
    "kind": 5,
    "importPath": "MY_GISTS.4c038ce778.datetime",
    "description": "MY_GISTS.4c038ce778.datetime",
    "peekOfCode": "date.min = date(1, 1, 1)\ndate.max = date(9999, 12, 31)\ndate.resolution = timedelta(days=1)\nclass tzinfo:\n    \"\"\"Abstract base class for time zone info classes.\n    Subclasses must override the name(), utcoffset() and dst() methods.\n    \"\"\"\n    __slots__ = ()\n    def tzname(self, dt):\n        \"datetime -> string name of time zone.\"",
    "detail": "MY_GISTS.4c038ce778.datetime",
    "documentation": {}
  },
  {
    "label": "date.max",
    "kind": 5,
    "importPath": "MY_GISTS.4c038ce778.datetime",
    "description": "MY_GISTS.4c038ce778.datetime",
    "peekOfCode": "date.max = date(9999, 12, 31)\ndate.resolution = timedelta(days=1)\nclass tzinfo:\n    \"\"\"Abstract base class for time zone info classes.\n    Subclasses must override the name(), utcoffset() and dst() methods.\n    \"\"\"\n    __slots__ = ()\n    def tzname(self, dt):\n        \"datetime -> string name of time zone.\"\n        raise NotImplementedError(\"tzinfo subclass must override tzname()\")",
    "detail": "MY_GISTS.4c038ce778.datetime",
    "documentation": {}
  },
  {
    "label": "date.resolution",
    "kind": 5,
    "importPath": "MY_GISTS.4c038ce778.datetime",
    "description": "MY_GISTS.4c038ce778.datetime",
    "peekOfCode": "date.resolution = timedelta(days=1)\nclass tzinfo:\n    \"\"\"Abstract base class for time zone info classes.\n    Subclasses must override the name(), utcoffset() and dst() methods.\n    \"\"\"\n    __slots__ = ()\n    def tzname(self, dt):\n        \"datetime -> string name of time zone.\"\n        raise NotImplementedError(\"tzinfo subclass must override tzname()\")\n    def utcoffset(self, dt):",
    "detail": "MY_GISTS.4c038ce778.datetime",
    "documentation": {}
  },
  {
    "label": "_IsoCalendarDate",
    "kind": 5,
    "importPath": "MY_GISTS.4c038ce778.datetime",
    "description": "MY_GISTS.4c038ce778.datetime",
    "peekOfCode": "_IsoCalendarDate = IsoCalendarDate\ndel IsoCalendarDate\n_tzinfo_class = tzinfo\nclass time:\n    \"\"\"Time with time zone.\n    Constructors:\n    __new__()\n    Operators:\n    __repr__, __str__\n    __eq__, __le__, __lt__, __ge__, __gt__, __hash__",
    "detail": "MY_GISTS.4c038ce778.datetime",
    "documentation": {}
  },
  {
    "label": "_tzinfo_class",
    "kind": 5,
    "importPath": "MY_GISTS.4c038ce778.datetime",
    "description": "MY_GISTS.4c038ce778.datetime",
    "peekOfCode": "_tzinfo_class = tzinfo\nclass time:\n    \"\"\"Time with time zone.\n    Constructors:\n    __new__()\n    Operators:\n    __repr__, __str__\n    __eq__, __le__, __lt__, __ge__, __gt__, __hash__\n    Methods:\n    strftime()",
    "detail": "MY_GISTS.4c038ce778.datetime",
    "documentation": {}
  },
  {
    "label": "_time_class",
    "kind": 5,
    "importPath": "MY_GISTS.4c038ce778.datetime",
    "description": "MY_GISTS.4c038ce778.datetime",
    "peekOfCode": "_time_class = time  # so functions w/ args named \"time\" can get at the class\ntime.min = time(0, 0, 0)\ntime.max = time(23, 59, 59, 999999)\ntime.resolution = timedelta(microseconds=1)\nclass datetime(date):\n    \"\"\"datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])\n    The year, month and day arguments are required. tzinfo may be None, or an\n    instance of a tzinfo subclass. The remaining arguments may be ints.\n    \"\"\"\n    __slots__ = date.__slots__ + time.__slots__",
    "detail": "MY_GISTS.4c038ce778.datetime",
    "documentation": {}
  },
  {
    "label": "time.min",
    "kind": 5,
    "importPath": "MY_GISTS.4c038ce778.datetime",
    "description": "MY_GISTS.4c038ce778.datetime",
    "peekOfCode": "time.min = time(0, 0, 0)\ntime.max = time(23, 59, 59, 999999)\ntime.resolution = timedelta(microseconds=1)\nclass datetime(date):\n    \"\"\"datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])\n    The year, month and day arguments are required. tzinfo may be None, or an\n    instance of a tzinfo subclass. The remaining arguments may be ints.\n    \"\"\"\n    __slots__ = date.__slots__ + time.__slots__\n    def __new__(cls, year, month=None, day=None, hour=0, minute=0, second=0,",
    "detail": "MY_GISTS.4c038ce778.datetime",
    "documentation": {}
  },
  {
    "label": "time.max",
    "kind": 5,
    "importPath": "MY_GISTS.4c038ce778.datetime",
    "description": "MY_GISTS.4c038ce778.datetime",
    "peekOfCode": "time.max = time(23, 59, 59, 999999)\ntime.resolution = timedelta(microseconds=1)\nclass datetime(date):\n    \"\"\"datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])\n    The year, month and day arguments are required. tzinfo may be None, or an\n    instance of a tzinfo subclass. The remaining arguments may be ints.\n    \"\"\"\n    __slots__ = date.__slots__ + time.__slots__\n    def __new__(cls, year, month=None, day=None, hour=0, minute=0, second=0,\n                microsecond=0, tzinfo=None, *, fold=0):",
    "detail": "MY_GISTS.4c038ce778.datetime",
    "documentation": {}
  },
  {
    "label": "time.resolution",
    "kind": 5,
    "importPath": "MY_GISTS.4c038ce778.datetime",
    "description": "MY_GISTS.4c038ce778.datetime",
    "peekOfCode": "time.resolution = timedelta(microseconds=1)\nclass datetime(date):\n    \"\"\"datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])\n    The year, month and day arguments are required. tzinfo may be None, or an\n    instance of a tzinfo subclass. The remaining arguments may be ints.\n    \"\"\"\n    __slots__ = date.__slots__ + time.__slots__\n    def __new__(cls, year, month=None, day=None, hour=0, minute=0, second=0,\n                microsecond=0, tzinfo=None, *, fold=0):\n        if (isinstance(year, (bytes, str)) and len(year) == 10 and",
    "detail": "MY_GISTS.4c038ce778.datetime",
    "documentation": {}
  },
  {
    "label": "datetime.min",
    "kind": 5,
    "importPath": "MY_GISTS.4c038ce778.datetime",
    "description": "MY_GISTS.4c038ce778.datetime",
    "peekOfCode": "datetime.min = datetime(1, 1, 1)\ndatetime.max = datetime(9999, 12, 31, 23, 59, 59, 999999)\ndatetime.resolution = timedelta(microseconds=1)\ndef _isoweek1monday(year):\n    # Helper to calculate the day number of the Monday starting week 1\n    # XXX This could be done more efficiently\n    THURSDAY = 3\n    firstday = _ymd2ord(year, 1, 1)\n    firstweekday = (firstday + 6) % 7  # See weekday() above\n    week1monday = firstday - firstweekday",
    "detail": "MY_GISTS.4c038ce778.datetime",
    "documentation": {}
  },
  {
    "label": "datetime.max",
    "kind": 5,
    "importPath": "MY_GISTS.4c038ce778.datetime",
    "description": "MY_GISTS.4c038ce778.datetime",
    "peekOfCode": "datetime.max = datetime(9999, 12, 31, 23, 59, 59, 999999)\ndatetime.resolution = timedelta(microseconds=1)\ndef _isoweek1monday(year):\n    # Helper to calculate the day number of the Monday starting week 1\n    # XXX This could be done more efficiently\n    THURSDAY = 3\n    firstday = _ymd2ord(year, 1, 1)\n    firstweekday = (firstday + 6) % 7  # See weekday() above\n    week1monday = firstday - firstweekday\n    if firstweekday > THURSDAY:",
    "detail": "MY_GISTS.4c038ce778.datetime",
    "documentation": {}
  },
  {
    "label": "datetime.resolution",
    "kind": 5,
    "importPath": "MY_GISTS.4c038ce778.datetime",
    "description": "MY_GISTS.4c038ce778.datetime",
    "peekOfCode": "datetime.resolution = timedelta(microseconds=1)\ndef _isoweek1monday(year):\n    # Helper to calculate the day number of the Monday starting week 1\n    # XXX This could be done more efficiently\n    THURSDAY = 3\n    firstday = _ymd2ord(year, 1, 1)\n    firstweekday = (firstday + 6) % 7  # See weekday() above\n    week1monday = firstday - firstweekday\n    if firstweekday > THURSDAY:\n        week1monday += 7",
    "detail": "MY_GISTS.4c038ce778.datetime",
    "documentation": {}
  },
  {
    "label": "timezone.utc",
    "kind": 5,
    "importPath": "MY_GISTS.4c038ce778.datetime",
    "description": "MY_GISTS.4c038ce778.datetime",
    "peekOfCode": "timezone.utc = timezone._create(timedelta(0))\n# bpo-37642: These attributes are rounded to the nearest minute for backwards\n# compatibility, even though the constructor will accept a wider range of\n# values. This may change in the future.\ntimezone.min = timezone._create(-timedelta(hours=23, minutes=59))\ntimezone.max = timezone._create(timedelta(hours=23, minutes=59))\n_EPOCH = datetime(1970, 1, 1, tzinfo=timezone.utc)\n# Some time zone algebra.  For a datetime x, let\n#     x.n = x stripped of its timezone -- its naive time.\n#     x.o = x.utcoffset(), and assuming that doesn't raise an exception or",
    "detail": "MY_GISTS.4c038ce778.datetime",
    "documentation": {}
  },
  {
    "label": "timezone.min",
    "kind": 5,
    "importPath": "MY_GISTS.4c038ce778.datetime",
    "description": "MY_GISTS.4c038ce778.datetime",
    "peekOfCode": "timezone.min = timezone._create(-timedelta(hours=23, minutes=59))\ntimezone.max = timezone._create(timedelta(hours=23, minutes=59))\n_EPOCH = datetime(1970, 1, 1, tzinfo=timezone.utc)\n# Some time zone algebra.  For a datetime x, let\n#     x.n = x stripped of its timezone -- its naive time.\n#     x.o = x.utcoffset(), and assuming that doesn't raise an exception or\n#           return None\n#     x.d = x.dst(), and assuming that doesn't raise an exception or\n#           return None\n#     x.s = x's standard offset, x.o - x.d",
    "detail": "MY_GISTS.4c038ce778.datetime",
    "documentation": {}
  },
  {
    "label": "timezone.max",
    "kind": 5,
    "importPath": "MY_GISTS.4c038ce778.datetime",
    "description": "MY_GISTS.4c038ce778.datetime",
    "peekOfCode": "timezone.max = timezone._create(timedelta(hours=23, minutes=59))\n_EPOCH = datetime(1970, 1, 1, tzinfo=timezone.utc)\n# Some time zone algebra.  For a datetime x, let\n#     x.n = x stripped of its timezone -- its naive time.\n#     x.o = x.utcoffset(), and assuming that doesn't raise an exception or\n#           return None\n#     x.d = x.dst(), and assuming that doesn't raise an exception or\n#           return None\n#     x.s = x's standard offset, x.o - x.d\n#",
    "detail": "MY_GISTS.4c038ce778.datetime",
    "documentation": {}
  },
  {
    "label": "_EPOCH",
    "kind": 5,
    "importPath": "MY_GISTS.4c038ce778.datetime",
    "description": "MY_GISTS.4c038ce778.datetime",
    "peekOfCode": "_EPOCH = datetime(1970, 1, 1, tzinfo=timezone.utc)\n# Some time zone algebra.  For a datetime x, let\n#     x.n = x stripped of its timezone -- its naive time.\n#     x.o = x.utcoffset(), and assuming that doesn't raise an exception or\n#           return None\n#     x.d = x.dst(), and assuming that doesn't raise an exception or\n#           return None\n#     x.s = x's standard offset, x.o - x.d\n#\n# Now some derived rules, where k is a duration (timedelta).",
    "detail": "MY_GISTS.4c038ce778.datetime",
    "documentation": {}
  },
  {
    "label": "dircmp",
    "kind": 6,
    "importPath": "MY_GISTS.4c038ce778.filemap",
    "description": "MY_GISTS.4c038ce778.filemap",
    "peekOfCode": "class dircmp:\n    \"\"\"A class that manages the comparison of 2 directories.\n    dircmp(a, b, ignore=None, hide=None)\n      A and B are directories.\n      IGNORE is a list of names to ignore,\n        defaults to DEFAULT_IGNORES.\n      HIDE is a list of names to hide,\n        defaults to [os.curdir, os.pardir].\n    High level usage:\n      x = dircmp(dir1, dir2)",
    "detail": "MY_GISTS.4c038ce778.filemap",
    "documentation": {}
  },
  {
    "label": "clear_cache",
    "kind": 2,
    "importPath": "MY_GISTS.4c038ce778.filemap",
    "description": "MY_GISTS.4c038ce778.filemap",
    "peekOfCode": "def clear_cache():\n    \"\"\"Clear the filecmp cache.\"\"\"\n    _cache.clear()\ndef cmp(f1, f2, shallow=True):\n    \"\"\"Compare two files.\n    Arguments:\n    f1 -- First file name\n    f2 -- Second file name\n    shallow -- Just check stat signature (do not read the files).\n               defaults to True.",
    "detail": "MY_GISTS.4c038ce778.filemap",
    "documentation": {}
  },
  {
    "label": "cmp",
    "kind": 2,
    "importPath": "MY_GISTS.4c038ce778.filemap",
    "description": "MY_GISTS.4c038ce778.filemap",
    "peekOfCode": "def cmp(f1, f2, shallow=True):\n    \"\"\"Compare two files.\n    Arguments:\n    f1 -- First file name\n    f2 -- Second file name\n    shallow -- Just check stat signature (do not read the files).\n               defaults to True.\n    Return value:\n    True if the files are the same, False otherwise.\n    This function uses a cache for past comparisons and the results,",
    "detail": "MY_GISTS.4c038ce778.filemap",
    "documentation": {}
  },
  {
    "label": "cmpfiles",
    "kind": 2,
    "importPath": "MY_GISTS.4c038ce778.filemap",
    "description": "MY_GISTS.4c038ce778.filemap",
    "peekOfCode": "def cmpfiles(a, b, common, shallow=True):\n    \"\"\"Compare common files in two directories.\n    a, b -- directory names\n    common -- list of file names found in both directories\n    shallow -- if true, do comparison based solely on stat() information\n    Returns a tuple of three lists:\n      files that compare equal\n      files that are different\n      filenames that aren't regular files.\n    \"\"\"",
    "detail": "MY_GISTS.4c038ce778.filemap",
    "documentation": {}
  },
  {
    "label": "demo",
    "kind": 2,
    "importPath": "MY_GISTS.4c038ce778.filemap",
    "description": "MY_GISTS.4c038ce778.filemap",
    "peekOfCode": "def demo():\n    import sys\n    import getopt\n    options, args = getopt.getopt(sys.argv[1:], 'r')\n    if len(args) != 2:\n        raise getopt.GetoptError('need exactly two args', None)\n    dd = dircmp(args[0], args[1])\n    if ('-r', '') in options:\n        dd.report_full_closure()\n    else:",
    "detail": "MY_GISTS.4c038ce778.filemap",
    "documentation": {}
  },
  {
    "label": "__all__",
    "kind": 5,
    "importPath": "MY_GISTS.4c038ce778.filemap",
    "description": "MY_GISTS.4c038ce778.filemap",
    "peekOfCode": "__all__ = ['clear_cache', 'cmp', 'dircmp', 'cmpfiles', 'DEFAULT_IGNORES']\n_cache = {}\nBUFSIZE = 8*1024\nDEFAULT_IGNORES = [\n    'RCS', 'CVS', 'tags', '.git', '.hg', '.bzr', '_darcs', '__pycache__']\ndef clear_cache():\n    \"\"\"Clear the filecmp cache.\"\"\"\n    _cache.clear()\ndef cmp(f1, f2, shallow=True):\n    \"\"\"Compare two files.",
    "detail": "MY_GISTS.4c038ce778.filemap",
    "documentation": {}
  },
  {
    "label": "_cache",
    "kind": 5,
    "importPath": "MY_GISTS.4c038ce778.filemap",
    "description": "MY_GISTS.4c038ce778.filemap",
    "peekOfCode": "_cache = {}\nBUFSIZE = 8*1024\nDEFAULT_IGNORES = [\n    'RCS', 'CVS', 'tags', '.git', '.hg', '.bzr', '_darcs', '__pycache__']\ndef clear_cache():\n    \"\"\"Clear the filecmp cache.\"\"\"\n    _cache.clear()\ndef cmp(f1, f2, shallow=True):\n    \"\"\"Compare two files.\n    Arguments:",
    "detail": "MY_GISTS.4c038ce778.filemap",
    "documentation": {}
  },
  {
    "label": "BUFSIZE",
    "kind": 5,
    "importPath": "MY_GISTS.4c038ce778.filemap",
    "description": "MY_GISTS.4c038ce778.filemap",
    "peekOfCode": "BUFSIZE = 8*1024\nDEFAULT_IGNORES = [\n    'RCS', 'CVS', 'tags', '.git', '.hg', '.bzr', '_darcs', '__pycache__']\ndef clear_cache():\n    \"\"\"Clear the filecmp cache.\"\"\"\n    _cache.clear()\ndef cmp(f1, f2, shallow=True):\n    \"\"\"Compare two files.\n    Arguments:\n    f1 -- First file name",
    "detail": "MY_GISTS.4c038ce778.filemap",
    "documentation": {}
  },
  {
    "label": "DEFAULT_IGNORES",
    "kind": 5,
    "importPath": "MY_GISTS.4c038ce778.filemap",
    "description": "MY_GISTS.4c038ce778.filemap",
    "peekOfCode": "DEFAULT_IGNORES = [\n    'RCS', 'CVS', 'tags', '.git', '.hg', '.bzr', '_darcs', '__pycache__']\ndef clear_cache():\n    \"\"\"Clear the filecmp cache.\"\"\"\n    _cache.clear()\ndef cmp(f1, f2, shallow=True):\n    \"\"\"Compare two files.\n    Arguments:\n    f1 -- First file name\n    f2 -- Second file name",
    "detail": "MY_GISTS.4c038ce778.filemap",
    "documentation": {}
  },
  {
    "label": "Backup",
    "kind": 6,
    "importPath": "MY_GISTS.51188dbe6f.backup",
    "description": "MY_GISTS.51188dbe6f.backup",
    "peekOfCode": "class Backup:\n    def __init__(self, src, dst, rsync_location=None, logfile=None, max_backups=5):\n        \"\"\"\n        Wrapper object representing an rsync time-machine like backup using the rsync\n        link-dest option. Keeps n number of differential backups.\n        Inputs:\n            src: source folder to be backed up.\n            dst: destination of the backup.\n            rsync_location: if running Windows, the location of the cygwin\n                rsync.exe binary.",
    "detail": "MY_GISTS.51188dbe6f.backup",
    "documentation": {}
  },
  {
    "label": "throttle",
    "kind": 6,
    "importPath": "MY_GISTS.5179911948.throttle",
    "description": "MY_GISTS.5179911948.throttle",
    "peekOfCode": "class throttle(object):\n    \"\"\"\n    Decorator that prevents a function from being called more than once every\n    time period.\n    To create a function that cannot be called more than once a minute:\n        @throttle(minutes=1)\n        def my_fun():\n            pass\n    \"\"\"\n    def __init__(self, seconds):",
    "detail": "MY_GISTS.5179911948.throttle",
    "documentation": {}
  },
  {
    "label": "TreeNode",
    "kind": 6,
    "importPath": "MY_GISTS.5398aae94a.tree",
    "description": "MY_GISTS.5398aae94a.tree",
    "peekOfCode": "class TreeNode:\n  def __init__(self, val):\n    self.val = val\n    self.left = None\n    self.right = None\n# initialization of a tree\nrootNode = TreeNode(1)\nleftNode = TreeNode(2)\nrightNode = TreeNode(3)\nrootNode.left = leftNode",
    "detail": "MY_GISTS.5398aae94a.tree",
    "documentation": {}
  },
  {
    "label": "inorderTraversal",
    "kind": 2,
    "importPath": "MY_GISTS.5398aae94a.tree",
    "description": "MY_GISTS.5398aae94a.tree",
    "peekOfCode": "def inorderTraversal(root):\n  result = []\n  if not root:\n      return self.result\n  def df(node: TreeNode):\n      if not node:\n          return\n      df(node.left)\n      result.append(node.val)\n      df(node.right)",
    "detail": "MY_GISTS.5398aae94a.tree",
    "documentation": {}
  },
  {
    "label": "preorderTraversal",
    "kind": 2,
    "importPath": "MY_GISTS.5398aae94a.tree",
    "description": "MY_GISTS.5398aae94a.tree",
    "peekOfCode": "def preorderTraversal(root):\n  result = []\n  if not root:\n      return result\n  def df(node: TreeNode):\n      if not node:\n          return\n      result.append(node.val)\n      df(node.left)\n      df(node.right)",
    "detail": "MY_GISTS.5398aae94a.tree",
    "documentation": {}
  },
  {
    "label": "postorderTraversal",
    "kind": 2,
    "importPath": "MY_GISTS.5398aae94a.tree",
    "description": "MY_GISTS.5398aae94a.tree",
    "peekOfCode": "def postorderTraversal(root):\n  result = []\n  if not root:\n      return result\n  def df(node: TreeNode):\n      if not node:\n          return\n      df(node.left)\n      df(node.right)\n      result.append(node.val)",
    "detail": "MY_GISTS.5398aae94a.tree",
    "documentation": {}
  },
  {
    "label": "rootNode",
    "kind": 5,
    "importPath": "MY_GISTS.5398aae94a.tree",
    "description": "MY_GISTS.5398aae94a.tree",
    "peekOfCode": "rootNode = TreeNode(1)\nleftNode = TreeNode(2)\nrightNode = TreeNode(3)\nrootNode.left = leftNode\nrootNode.right = rightNode\n# inorderTraversal of the tree (Left, Root, Right)\ndef inorderTraversal(root):\n  result = []\n  if not root:\n      return self.result",
    "detail": "MY_GISTS.5398aae94a.tree",
    "documentation": {}
  },
  {
    "label": "leftNode",
    "kind": 5,
    "importPath": "MY_GISTS.5398aae94a.tree",
    "description": "MY_GISTS.5398aae94a.tree",
    "peekOfCode": "leftNode = TreeNode(2)\nrightNode = TreeNode(3)\nrootNode.left = leftNode\nrootNode.right = rightNode\n# inorderTraversal of the tree (Left, Root, Right)\ndef inorderTraversal(root):\n  result = []\n  if not root:\n      return self.result\n  def df(node: TreeNode):",
    "detail": "MY_GISTS.5398aae94a.tree",
    "documentation": {}
  },
  {
    "label": "rightNode",
    "kind": 5,
    "importPath": "MY_GISTS.5398aae94a.tree",
    "description": "MY_GISTS.5398aae94a.tree",
    "peekOfCode": "rightNode = TreeNode(3)\nrootNode.left = leftNode\nrootNode.right = rightNode\n# inorderTraversal of the tree (Left, Root, Right)\ndef inorderTraversal(root):\n  result = []\n  if not root:\n      return self.result\n  def df(node: TreeNode):\n      if not node:",
    "detail": "MY_GISTS.5398aae94a.tree",
    "documentation": {}
  },
  {
    "label": "rootNode.left",
    "kind": 5,
    "importPath": "MY_GISTS.5398aae94a.tree",
    "description": "MY_GISTS.5398aae94a.tree",
    "peekOfCode": "rootNode.left = leftNode\nrootNode.right = rightNode\n# inorderTraversal of the tree (Left, Root, Right)\ndef inorderTraversal(root):\n  result = []\n  if not root:\n      return self.result\n  def df(node: TreeNode):\n      if not node:\n          return",
    "detail": "MY_GISTS.5398aae94a.tree",
    "documentation": {}
  },
  {
    "label": "rootNode.right",
    "kind": 5,
    "importPath": "MY_GISTS.5398aae94a.tree",
    "description": "MY_GISTS.5398aae94a.tree",
    "peekOfCode": "rootNode.right = rightNode\n# inorderTraversal of the tree (Left, Root, Right)\ndef inorderTraversal(root):\n  result = []\n  if not root:\n      return self.result\n  def df(node: TreeNode):\n      if not node:\n          return\n      df(node.left)",
    "detail": "MY_GISTS.5398aae94a.tree",
    "documentation": {}
  },
  {
    "label": "checkToeplitz",
    "kind": 2,
    "importPath": "MY_GISTS.5709e1d95a.prac11",
    "description": "MY_GISTS.5709e1d95a.prac11",
    "peekOfCode": "def checkToeplitz(matrix, m, n):\n    for i in range(m - 1):\n        for j in range(n - 1):\n            if matrix[i][j] != matrix[i + 1][j + 1]:\n                return False\n    return True\n# matrix display function\ndef display_mat(matrix, m, n):\n    for i in range(m):\n        print(matrix[i])",
    "detail": "MY_GISTS.5709e1d95a.prac11",
    "documentation": {}
  },
  {
    "label": "display_mat",
    "kind": 2,
    "importPath": "MY_GISTS.5709e1d95a.prac11",
    "description": "MY_GISTS.5709e1d95a.prac11",
    "peekOfCode": "def display_mat(matrix, m, n):\n    for i in range(m):\n        print(matrix[i])\n# driver code\nif \"__name__\" == \"__main__\":\n    # input of row and column number\n    m = int(input(\"Enter the number of rows: \"))\n    n = int(input(\"Enter the number of columns: \"))\n    # initializing the 2-d array\n    matrix = [[0 for j in range(n)] for i in range(m)]",
    "detail": "MY_GISTS.5709e1d95a.prac11",
    "documentation": {}
  },
  {
    "label": "num",
    "kind": 5,
    "importPath": "MY_GISTS.59b80e6037.prac4",
    "description": "MY_GISTS.59b80e6037.prac4",
    "peekOfCode": "num = int(input(\"Enter a number: \"))\n# if the elements in the range(2, num) evenly divides the num,\n# then it is included in the divisors list\ndivisor = [x for x in range(2, num) if num % x == 0]\nfor x in divisor:\n    print(x)",
    "detail": "MY_GISTS.59b80e6037.prac4",
    "documentation": {}
  },
  {
    "label": "divisor",
    "kind": 5,
    "importPath": "MY_GISTS.59b80e6037.prac4",
    "description": "MY_GISTS.59b80e6037.prac4",
    "peekOfCode": "divisor = [x for x in range(2, num) if num % x == 0]\nfor x in divisor:\n    print(x)",
    "detail": "MY_GISTS.59b80e6037.prac4",
    "documentation": {}
  },
  {
    "label": "queue",
    "kind": 6,
    "importPath": "MY_GISTS.5b89d56538.queue",
    "description": "MY_GISTS.5b89d56538.queue",
    "peekOfCode": "class queue:\n  # by default pass in [] as inivial value\n  def __init__(self,initialVal=[]):\n    self.queue = initialVal\n  # enqueue is to append to the tail of the list\n  def enqueue(self,ele):\n    self.queue.append(ele)\n    return self.queue\n  # dequeue is to remove from the head of the list\n  def dequeue(self):",
    "detail": "MY_GISTS.5b89d56538.queue",
    "documentation": {}
  },
  {
    "label": "get_file_names",
    "kind": 2,
    "importPath": "MY_GISTS.7076e6c3d5.anyMimeSearch",
    "description": "MY_GISTS.7076e6c3d5.anyMimeSearch",
    "peekOfCode": "def get_file_names(filepath, pattern):\n    matches = []\n    if os.path.exists(filepath):\n        for root, dirnames, filenames in os.walk(filepath):\n            for filename in fnmatch.filter(filenames, pattern):\n                # matches.append(os.path.join(root, filename))  # full path\n                matches.append(os.path.join(filename))  # just file name\n        if matches:\n            print(\"Found {} files:\".format(len(matches)))\n            output_files(matches)",
    "detail": "MY_GISTS.7076e6c3d5.anyMimeSearch",
    "documentation": {}
  },
  {
    "label": "output_files",
    "kind": 2,
    "importPath": "MY_GISTS.7076e6c3d5.anyMimeSearch",
    "description": "MY_GISTS.7076e6c3d5.anyMimeSearch",
    "peekOfCode": "def output_files(list_of_files):\n    for filename in list_of_files:\n        print(filename)\nif __name__ == '__main__':\n    get_file_names(PATH, PATTERN)",
    "detail": "MY_GISTS.7076e6c3d5.anyMimeSearch",
    "documentation": {}
  },
  {
    "label": "PATH",
    "kind": 5,
    "importPath": "MY_GISTS.7076e6c3d5.anyMimeSearch",
    "description": "MY_GISTS.7076e6c3d5.anyMimeSearch",
    "peekOfCode": "PATH = './'\nPATTERN = '*.'\ndef get_file_names(filepath, pattern):\n    matches = []\n    if os.path.exists(filepath):\n        for root, dirnames, filenames in os.walk(filepath):\n            for filename in fnmatch.filter(filenames, pattern):\n                # matches.append(os.path.join(root, filename))  # full path\n                matches.append(os.path.join(filename))  # just file name\n        if matches:",
    "detail": "MY_GISTS.7076e6c3d5.anyMimeSearch",
    "documentation": {}
  },
  {
    "label": "PATTERN",
    "kind": 5,
    "importPath": "MY_GISTS.7076e6c3d5.anyMimeSearch",
    "description": "MY_GISTS.7076e6c3d5.anyMimeSearch",
    "peekOfCode": "PATTERN = '*.'\ndef get_file_names(filepath, pattern):\n    matches = []\n    if os.path.exists(filepath):\n        for root, dirnames, filenames in os.walk(filepath):\n            for filename in fnmatch.filter(filenames, pattern):\n                # matches.append(os.path.join(root, filename))  # full path\n                matches.append(os.path.join(filename))  # just file name\n        if matches:\n            print(\"Found {} files:\".format(len(matches)))",
    "detail": "MY_GISTS.7076e6c3d5.anyMimeSearch",
    "documentation": {}
  },
  {
    "label": "get_file_names",
    "kind": 2,
    "importPath": "MY_GISTS.7076e6c3d5.find-files-recursively",
    "description": "MY_GISTS.7076e6c3d5.find-files-recursively",
    "peekOfCode": "def get_file_names(filepath, pattern):\n    matches = []\n    if os.path.exists(filepath):\n        for root, dirnames, filenames in os.walk(filepath):\n            for filename in fnmatch.filter(filenames, pattern):\n                # matches.append(os.path.join(root, filename))  # full path\n                matches.append(os.path.join(filename))  # just file name\n        if matches:\n            print(\"Found {} files:\".format(len(matches)))\n            output_files(matches)",
    "detail": "MY_GISTS.7076e6c3d5.find-files-recursively",
    "documentation": {}
  },
  {
    "label": "output_files",
    "kind": 2,
    "importPath": "MY_GISTS.7076e6c3d5.find-files-recursively",
    "description": "MY_GISTS.7076e6c3d5.find-files-recursively",
    "peekOfCode": "def output_files(list_of_files):\n    for filename in list_of_files:\n        print(filename)\nif __name__ == '__main__':\n    get_file_names(PATH, PATTERN)",
    "detail": "MY_GISTS.7076e6c3d5.find-files-recursively",
    "documentation": {}
  },
  {
    "label": "PATH",
    "kind": 5,
    "importPath": "MY_GISTS.7076e6c3d5.find-files-recursively",
    "description": "MY_GISTS.7076e6c3d5.find-files-recursively",
    "peekOfCode": "PATH = './'\nPATTERN = '*.md'\ndef get_file_names(filepath, pattern):\n    matches = []\n    if os.path.exists(filepath):\n        for root, dirnames, filenames in os.walk(filepath):\n            for filename in fnmatch.filter(filenames, pattern):\n                # matches.append(os.path.join(root, filename))  # full path\n                matches.append(os.path.join(filename))  # just file name\n        if matches:",
    "detail": "MY_GISTS.7076e6c3d5.find-files-recursively",
    "documentation": {}
  },
  {
    "label": "PATTERN",
    "kind": 5,
    "importPath": "MY_GISTS.7076e6c3d5.find-files-recursively",
    "description": "MY_GISTS.7076e6c3d5.find-files-recursively",
    "peekOfCode": "PATTERN = '*.md'\ndef get_file_names(filepath, pattern):\n    matches = []\n    if os.path.exists(filepath):\n        for root, dirnames, filenames in os.walk(filepath):\n            for filename in fnmatch.filter(filenames, pattern):\n                # matches.append(os.path.join(root, filename))  # full path\n                matches.append(os.path.join(filename))  # just file name\n        if matches:\n            print(\"Found {} files:\".format(len(matches)))",
    "detail": "MY_GISTS.7076e6c3d5.find-files-recursively",
    "documentation": {}
  },
  {
    "label": "get_file_content",
    "kind": 2,
    "importPath": "MY_GISTS.71bc29d478.car-assemble",
    "description": "MY_GISTS.71bc29d478.car-assemble",
    "peekOfCode": "def get_file_content(include_tag):\n    file_name = include_tag.split(\" \")[1].replace('\"', \"\")\n    return open(file_name).read()\ndef main():\n    \"\"\"\n    Lets dont worry about the program\n    Its basically replacing <include file.svg> with its file content\n    in the same file and produces final_car.svg as output\n    This is purely to show, how we can work with multiple files in out git repository.\n    \"\"\"",
    "detail": "MY_GISTS.71bc29d478.car-assemble",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "MY_GISTS.71bc29d478.car-assemble",
    "description": "MY_GISTS.71bc29d478.car-assemble",
    "peekOfCode": "def main():\n    \"\"\"\n    Lets dont worry about the program\n    Its basically replacing <include file.svg> with its file content\n    in the same file and produces final_car.svg as output\n    This is purely to show, how we can work with multiple files in out git repository.\n    \"\"\"\n    with open('car_assemble.svg') as file:  # reading source file car_assemble.svg\n        file_content = file.read()\n        regex = r\"<include .*svg\\\" />\"  # finding pattern <include file.svg> ",
    "detail": "MY_GISTS.71bc29d478.car-assemble",
    "documentation": {}
  },
  {
    "label": "sumZero",
    "kind": 2,
    "importPath": "MY_GISTS.76acedd4d2.01-FindUniqueIntegers",
    "description": "MY_GISTS.76acedd4d2.01-FindUniqueIntegers",
    "peekOfCode": "def sumZero(self, n: int):\n    \"\"\"\n    :type n: int\n    :rtype: List[int]\n    \"\"\"\n    # time complexity: O(1); create one range of digits\n    # space complexity:  O(1); one unit of space\n    # What's going on here?  Let's say n = 5.\n    # Return a range of numbers which starts at 1-5, ends at 5, steps every 2\n    # So that means it starts at -4, ends at 5, steps every 2",
    "detail": "MY_GISTS.76acedd4d2.01-FindUniqueIntegers",
    "documentation": {}
  },
  {
    "label": "calculate_current_moves",
    "kind": 2,
    "importPath": "MY_GISTS.76acedd4d2.02-MinMovesString",
    "description": "MY_GISTS.76acedd4d2.02-MinMovesString",
    "peekOfCode": "def calculate_current_moves(start_sub, end_sub):\n    sub_length = end_sub - start_sub\n    # get current number of moves to add to total\n    current_moves = sub_length // 3\n    # add current number of moves to total\n    return current_moves\ndef calculate_min_moves(string):\n    # initialize start and end of first possible subsequence\n    start_sub = 0\n    end_sub = 1",
    "detail": "MY_GISTS.76acedd4d2.02-MinMovesString",
    "documentation": {}
  },
  {
    "label": "calculate_min_moves",
    "kind": 2,
    "importPath": "MY_GISTS.76acedd4d2.02-MinMovesString",
    "description": "MY_GISTS.76acedd4d2.02-MinMovesString",
    "peekOfCode": "def calculate_min_moves(string):\n    # initialize start and end of first possible subsequence\n    start_sub = 0\n    end_sub = 1\n    # initialize counter for number of moves\n    moves = 0\n    # initialize string length\n    length = len(string)\n    # loop until index of subsequence end gets to end of string\n    while end_sub < length:",
    "detail": "MY_GISTS.76acedd4d2.02-MinMovesString",
    "documentation": {}
  },
  {
    "label": "is_valid",
    "kind": 2,
    "importPath": "MY_GISTS.76acedd4d2.03-FindPossibleValidIPs",
    "description": "MY_GISTS.76acedd4d2.03-FindPossibleValidIPs",
    "peekOfCode": "def is_valid(possible_ip): \n    # splitting at period\n    ip_address = possible_ip.split(\".\") \n    # checking for corner cases \n    for subaddress in ip_address: \n        # get length of subaddress\n        length_subaddress = len(subaddress)\n        # get int of subaddress\n        int_subaddress = int(subaddress)\n        # get first digit of subaddress",
    "detail": "MY_GISTS.76acedd4d2.03-FindPossibleValidIPs",
    "documentation": {}
  },
  {
    "label": "convert_string_to_ip",
    "kind": 2,
    "importPath": "MY_GISTS.76acedd4d2.03-FindPossibleValidIPs",
    "description": "MY_GISTS.76acedd4d2.03-FindPossibleValidIPs",
    "peekOfCode": "def convert_string_to_ip(string): \n    # get string length\n    length = len(string) \n    # if string of digits > 12, it's not an IP; return empty array\n    if length > 12: \n        return [] \n    # else set current possible ip as string AND\n    current_possible_ip = string \n    # initialize empty valid ip list\n    valid_ip_list = [] ",
    "detail": "MY_GISTS.76acedd4d2.03-FindPossibleValidIPs",
    "documentation": {}
  },
  {
    "label": "A",
    "kind": 5,
    "importPath": "MY_GISTS.76acedd4d2.03-FindPossibleValidIPs",
    "description": "MY_GISTS.76acedd4d2.03-FindPossibleValidIPs",
    "peekOfCode": "A = \"25525511135\"\n# B = \"25505011535\"\nprint(convert_string_to_ip(A)) \n# print(convert_string_to_ip(B))",
    "detail": "MY_GISTS.76acedd4d2.03-FindPossibleValidIPs",
    "documentation": {}
  },
  {
    "label": "min_swap",
    "kind": 2,
    "importPath": "MY_GISTS.76acedd4d2.04-MinSwapsPalindrome",
    "description": "MY_GISTS.76acedd4d2.04-MinSwapsPalindrome",
    "peekOfCode": "def min_swap(string):\n    # convert string to list\n    list_of_string = list(string)\n    # check if list_of_string can be palindrome\n    odd = 0\n    letter = [0] * 26\n    for i in list_of_string: \n        # get unicode char of current letter\n        unicode_i = ord(i)\n        # get unicode char of letter 'a'",
    "detail": "MY_GISTS.76acedd4d2.04-MinSwapsPalindrome",
    "documentation": {}
  },
  {
    "label": "longest_substring",
    "kind": 2,
    "importPath": "MY_GISTS.76acedd4d2.05-LongestSubstringWithout3",
    "description": "MY_GISTS.76acedd4d2.05-LongestSubstringWithout3",
    "peekOfCode": "def longest_substring(s):\n    # initialize final string\n    final_string = \"\"\n    length = len(s)\n    x = 0\n    # loop through s\n    while len(s) >= 2:\n        beginning = s[0]\n        middle = s[1]\n        if len(s) > 2:",
    "detail": "MY_GISTS.76acedd4d2.05-LongestSubstringWithout3",
    "documentation": {}
  },
  {
    "label": "lexi_smallest",
    "kind": 2,
    "importPath": "MY_GISTS.76acedd4d2.06-LexicographicallySmallestString",
    "description": "MY_GISTS.76acedd4d2.06-LexicographicallySmallestString",
    "peekOfCode": "def lexi_smallest(s):\n    length = len(s)\n    length_one_short = length - 1\n    for x in range(length_one_short):\n        i_one_short = x - 1\n        x_one_long = x + 1\n        if s[x] > s[x_one_long]:\n            return s[:x] + s[x_one_long:]\n    return s[:-1]\n# abcd",
    "detail": "MY_GISTS.76acedd4d2.06-LexicographicallySmallestString",
    "documentation": {}
  },
  {
    "label": "no_three_consecutive",
    "kind": 2,
    "importPath": "MY_GISTS.76acedd4d2.07-StringWithout3IdenticalConLetters",
    "description": "MY_GISTS.76acedd4d2.07-StringWithout3IdenticalConLetters",
    "peekOfCode": "def no_three_consecutive(s):\n    final_string = s[0:2]\n    length = len(s)\n    # loop through original string\n    for x in range(2, length):\n        string_x = s[x]\n        string_x_one_short = s[x-1]\n        string_x_two_short = s[x-2]\n        if string_x == string_x_one_short and string_x == string_x_two_short:\n            # don't append if previous chars are same",
    "detail": "MY_GISTS.76acedd4d2.07-StringWithout3IdenticalConLetters",
    "documentation": {}
  },
  {
    "label": "longest_semialternating_ss",
    "kind": 2,
    "importPath": "MY_GISTS.76acedd4d2.08-LongestSemiAlternatingSubString",
    "description": "MY_GISTS.76acedd4d2.08-LongestSemiAlternatingSubString",
    "peekOfCode": "def longest_semialternating_ss(s):\n    length = len(s)\n    if not s or length == 0:\n        return 0\n    if length < 3:\n        return length\n    beginning = 0\n    end = 1\n    # first character\n    comparison_char = s[0] ",
    "detail": "MY_GISTS.76acedd4d2.08-LongestSemiAlternatingSubString",
    "documentation": {}
  },
  {
    "label": "longest_semi",
    "kind": 2,
    "importPath": "MY_GISTS.76acedd4d2.08-LongestSemiAlternatingSubString",
    "description": "MY_GISTS.76acedd4d2.08-LongestSemiAlternatingSubString",
    "peekOfCode": "def longest_semi(s):\n    max_length = 0\n    left = 0\n    for right in range(len(s)):\n        if right - left + 1 >= 3 and s[right] == s[right-1] == s[right-2]:\n            left = right - 1\n        max_length = max(max_length, right-left+1)\n    return max_length\n# 7 \nprint(longest_semialternating_ss(\"baaabbabbb\"))",
    "detail": "MY_GISTS.76acedd4d2.08-LongestSemiAlternatingSubString",
    "documentation": {}
  },
  {
    "label": "min_steps_equal_piles",
    "kind": 2,
    "importPath": "MY_GISTS.76acedd4d2.09-MinStepsToMakePilesEqualHeight",
    "description": "MY_GISTS.76acedd4d2.09-MinStepsToMakePilesEqualHeight",
    "peekOfCode": "def min_steps_equal_piles(piles):\n    steps = 0\n    length = len(piles)\n    if piles == []:\n        return 0\n    else:\n        # get sorted list\n        sorted_piles = set(piles)\n        sorted_piles = sorted(sorted_piles)\n        # get min, max and 2nd max",
    "detail": "MY_GISTS.76acedd4d2.09-MinStepsToMakePilesEqualHeight",
    "documentation": {}
  },
  {
    "label": "k_days_later",
    "kind": 2,
    "importPath": "MY_GISTS.76acedd4d2.10-DayOfWeekThatIsKDaysLater",
    "description": "MY_GISTS.76acedd4d2.10-DayOfWeekThatIsKDaysLater",
    "peekOfCode": "def k_days_later(s, k):\n    days_of_week = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"]\n    remainder = k % 7\n    s_index = days_of_week.index(s)\n    move_forward = remainder + s_index\n    if move_forward < 7:\n        return days_of_week[move_forward]\n    else:\n        correct_day_index = move_forward - 7\n        return days_of_week[correct_day_index]",
    "detail": "MY_GISTS.76acedd4d2.10-DayOfWeekThatIsKDaysLater",
    "documentation": {}
  },
  {
    "label": "oranges_rotting",
    "kind": 2,
    "importPath": "MY_GISTS.76acedd4d2.12-RottingOranges",
    "description": "MY_GISTS.76acedd4d2.12-RottingOranges",
    "peekOfCode": "def oranges_rotting(grid):\n    minute_count = 0\n    def create_set(grid, target_value):\n        result = set()\n        for y in range(len(grid)):\n            for x in range(len(grid[0])):\n                if grid[y][x] == target_value:\n                    result.add((x,y))\n        return result\n    # create a set of rotten & fresh orange locations",
    "detail": "MY_GISTS.76acedd4d2.12-RottingOranges",
    "documentation": {}
  },
  {
    "label": "grid",
    "kind": 5,
    "importPath": "MY_GISTS.76acedd4d2.12-RottingOranges",
    "description": "MY_GISTS.76acedd4d2.12-RottingOranges",
    "peekOfCode": "grid = [[2,1,1],[1,1,0],[0,1,1]]\nprint(oranges_rotting(grid))\n# -1\ngrid = [[2,1,1],[0,1,1],[1,0,1]]\nprint(oranges_rotting(grid))\n# 0\ngrid = [[0,2]]\nprint(oranges_rotting(grid))",
    "detail": "MY_GISTS.76acedd4d2.12-RottingOranges",
    "documentation": {}
  },
  {
    "label": "grid",
    "kind": 5,
    "importPath": "MY_GISTS.76acedd4d2.12-RottingOranges",
    "description": "MY_GISTS.76acedd4d2.12-RottingOranges",
    "peekOfCode": "grid = [[2,1,1],[0,1,1],[1,0,1]]\nprint(oranges_rotting(grid))\n# 0\ngrid = [[0,2]]\nprint(oranges_rotting(grid))",
    "detail": "MY_GISTS.76acedd4d2.12-RottingOranges",
    "documentation": {}
  },
  {
    "label": "grid",
    "kind": 5,
    "importPath": "MY_GISTS.76acedd4d2.12-RottingOranges",
    "description": "MY_GISTS.76acedd4d2.12-RottingOranges",
    "peekOfCode": "grid = [[0,2]]\nprint(oranges_rotting(grid))",
    "detail": "MY_GISTS.76acedd4d2.12-RottingOranges",
    "documentation": {}
  },
  {
    "label": "bottles",
    "kind": 2,
    "importPath": "MY_GISTS.76acedd4d2.13-MilkBottles",
    "description": "MY_GISTS.76acedd4d2.13-MilkBottles",
    "peekOfCode": "def bottles(n):\n    bottles_to_drink = int((3*n-1)/2)\n    return bottles_to_drink\nprint(bottles(18))",
    "detail": "MY_GISTS.76acedd4d2.13-MilkBottles",
    "documentation": {}
  },
  {
    "label": "BinarySearchTree",
    "kind": 6,
    "importPath": "MY_GISTS.76acedd4d2.14-FindLargestBSTSubtreeInGivenBT",
    "description": "MY_GISTS.76acedd4d2.14-FindLargestBSTSubtreeInGivenBT",
    "peekOfCode": "class BinarySearchTree:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n    def largest_BST(self):      \n        # Set the initial values for calling  \n        # largestBSTUtil()  \n        Min = [999999999999] # For minimum value in right subtree  \n        Max = [-999999999999] # For maximum value in left subtree  ",
    "detail": "MY_GISTS.76acedd4d2.14-FindLargestBSTSubtreeInGivenBT",
    "documentation": {}
  },
  {
    "label": "Node",
    "kind": 6,
    "importPath": "MY_GISTS.76acedd4d2.~01-FindLengthLL",
    "description": "MY_GISTS.76acedd4d2.~01-FindLengthLL",
    "peekOfCode": "class Node: \n    # Function to initialise the node object \n    def __init__(self, data): \n        self.data = data # Assign data \n        self.next = None # Initialize next as null \n# Linked List class contains a Node object \nclass LinkedList: \n    # Function to initialize head \n    def __init__(self): \n        self.head = None",
    "detail": "MY_GISTS.76acedd4d2.~01-FindLengthLL",
    "documentation": {}
  },
  {
    "label": "LinkedList",
    "kind": 6,
    "importPath": "MY_GISTS.76acedd4d2.~01-FindLengthLL",
    "description": "MY_GISTS.76acedd4d2.~01-FindLengthLL",
    "peekOfCode": "class LinkedList: \n    # Function to initialize head \n    def __init__(self): \n        self.head = None\n    # This function is in LinkedList class. It inserts \n    # a new node at the beginning of Linked List. \n    def push(self, new_data): \n        # 1 & 2: Allocate the Node & \n        #     Put in the data \n        new_node = Node(new_data) ",
    "detail": "MY_GISTS.76acedd4d2.~01-FindLengthLL",
    "documentation": {}
  },
  {
    "label": "Node",
    "kind": 6,
    "importPath": "MY_GISTS.76acedd4d2.~01-FindLengthLL",
    "description": "MY_GISTS.76acedd4d2.~01-FindLengthLL",
    "peekOfCode": "class Node: \n    # Function to initialise the node object \n    def __init__(self, data): \n        self.data = data  # Assign data \n        self.next = None  # Initialize next as null \n# Linked List class contains a Node object \nclass LinkedList: \n    # Function to initialize head \n    def __init__(self): \n        self.head = None",
    "detail": "MY_GISTS.76acedd4d2.~01-FindLengthLL",
    "documentation": {}
  },
  {
    "label": "LinkedList",
    "kind": 6,
    "importPath": "MY_GISTS.76acedd4d2.~01-FindLengthLL",
    "description": "MY_GISTS.76acedd4d2.~01-FindLengthLL",
    "peekOfCode": "class LinkedList: \n    # Function to initialize head \n    def __init__(self): \n        self.head = None\n    # This function is in LinkedList class. It inserts \n    # a new node at the beginning of Linked List. \n    def push(self, new_data): \n        # 1 & 2: Allocate the Node & \n        #        Put in the data \n        new_node = Node(new_data) ",
    "detail": "MY_GISTS.76acedd4d2.~01-FindLengthLL",
    "documentation": {}
  },
  {
    "label": "removeKdigits",
    "kind": 2,
    "importPath": "MY_GISTS.76acedd4d2.~02-RemoveKDigits",
    "description": "MY_GISTS.76acedd4d2.~02-RemoveKDigits",
    "peekOfCode": "def removeKdigits(num, k):\n    res = []\n    counter = 0\n    n = len(num)\n    if n == k: return \"0\"\n    for i in range(n):\n        while k and res and res[-1] > num[i]:\n            res.pop()\n            k -= 1\n        res.append(num[i])",
    "detail": "MY_GISTS.76acedd4d2.~02-RemoveKDigits",
    "documentation": {}
  },
  {
    "label": "get_array_length",
    "kind": 2,
    "importPath": "MY_GISTS.76acedd4d2.~03-FindArrayLengths",
    "description": "MY_GISTS.76acedd4d2.~03-FindArrayLengths",
    "peekOfCode": "def get_array_length(array_to_convert):\n    # get length of linked-list array\n    length_array_to_convert = len(array_to_convert)\n    # get first item in linked-list array\n    first_item = array_to_convert[0]\n    # if linked-list array or first item is empty or if length is 0, return 0\n    if array_to_convert == None or length_array_to_convert == 0 or first_item == -1:\n        return 0\n    # else, initialize final length to return and index\n        # current index is head of linked list",
    "detail": "MY_GISTS.76acedd4d2.~03-FindArrayLengths",
    "documentation": {}
  },
  {
    "label": "count_visible_nodes",
    "kind": 2,
    "importPath": "MY_GISTS.76acedd4d2.~04-CountVisibleNodes",
    "description": "MY_GISTS.76acedd4d2.~04-CountVisibleNodes",
    "peekOfCode": "def count_visible_nodes(root):\n    # if no root, return 0\n    if not root: \n        return 0\n    # return value of traverse(root, negative infinity)\n    return traverse(root, float('-inf'))\ndef traverse(node, max_value):\n    # if no node, return 0\n    if not node:\n        return 0",
    "detail": "MY_GISTS.76acedd4d2.~04-CountVisibleNodes",
    "documentation": {}
  },
  {
    "label": "traverse",
    "kind": 2,
    "importPath": "MY_GISTS.76acedd4d2.~04-CountVisibleNodes",
    "description": "MY_GISTS.76acedd4d2.~04-CountVisibleNodes",
    "peekOfCode": "def traverse(node, max_value):\n    # if no node, return 0\n    if not node:\n        return 0\n    # get current node value\n    current_node_value = node.val\n    # if current node value >= max value, visible = 1\n    if current_node_value >= max_value:\n\t    visible = 1 \n    # else visible = 0",
    "detail": "MY_GISTS.76acedd4d2.~04-CountVisibleNodes",
    "documentation": {}
  },
  {
    "label": "\tmax_value",
    "kind": 5,
    "importPath": "MY_GISTS.76acedd4d2.~04-CountVisibleNodes",
    "description": "MY_GISTS.76acedd4d2.~04-CountVisibleNodes",
    "peekOfCode": "\tmax_value = max(max_value, current_node_value)\n    # traverse left node, add visible, traverse right node, add them all together\n    # set total visible nodes as the sum of:\n        # traverse function with left node as node and new max value as max value\n        # visible\n        # traverse function with right node as node and new max value as max value\n    total_visible_nodes = traverse(node.left, max_value) + visible + traverse(node.right, max_value)\n    # return total visible nodes\n    return total_visible_nodes",
    "detail": "MY_GISTS.76acedd4d2.~04-CountVisibleNodes",
    "documentation": {}
  },
  {
    "label": "AngryBird",
    "kind": 6,
    "importPath": "MY_GISTS.82154f5060.python-study-guide",
    "description": "MY_GISTS.82154f5060.python-study-guide",
    "peekOfCode": "class AngryBird:\n    # Slots optimize property access and memory usage and prevent you\n    # from arbitrarily assigning new properties the instance\n    __slots__ = [\"_x\", \"_y\"]\n    # Constructor\n    def __init__(self, x=0, y=0):\n        # Doc String\n        \"\"\"\n        Construct a new AngryBird by setting it's position to (0, 0)\n        \"\"\"",
    "detail": "MY_GISTS.82154f5060.python-study-guide",
    "documentation": {}
  },
  {
    "label": "say_hi",
    "kind": 2,
    "importPath": "MY_GISTS.82154f5060.python-study-guide",
    "description": "MY_GISTS.82154f5060.python-study-guide",
    "peekOfCode": "def say_hi(name):\n    \"\"\"<---- Multi-Line Comments and Docstrings\n    This is where you put your content for help() to inform the user\n    about what your function does and how to use it\n    \"\"\"\n    print(f\"Hello {name}!\")\nprint(say_hi(\"Bryan\"))  # Should get the print inside the function, then None\n# Boolean Values\n# Work the same as in JS, except they are title case: True and False\na = True",
    "detail": "MY_GISTS.82154f5060.python-study-guide",
    "documentation": {}
  },
  {
    "label": "printCopyright",
    "kind": 2,
    "importPath": "MY_GISTS.82154f5060.python-study-guide",
    "description": "MY_GISTS.82154f5060.python-study-guide",
    "peekOfCode": "def printCopyright():\n    print(\"Copyright 2021, Bgoonz\")\n# Lambdas are one liners! (Should be at least, you can use parenthesis to disobey)\navg = lambda num1, num2: print(num1 + num2)\navg(1, 2)\n# Calling it with keyword arguments, order does not matter\navg(num2=20, num1=1252)\nprintCopyright()\n# We can give parameters default arguments like JS\ndef greeting(name, saying=\"Hello\"):",
    "detail": "MY_GISTS.82154f5060.python-study-guide",
    "documentation": {}
  },
  {
    "label": "greeting",
    "kind": 2,
    "importPath": "MY_GISTS.82154f5060.python-study-guide",
    "description": "MY_GISTS.82154f5060.python-study-guide",
    "peekOfCode": "def greeting(name, saying=\"Hello\"):\n    print(saying, name)\ngreeting(\"Mike\")  # Hello Mike\ngreeting(\"Bryan\", saying=\"Hello there...\")\n# A common gotcha is using a mutable object for a default parameter\n# All invocations of the function reference the same mutable object\ndef append_item(item_name, item_list=[]):  # Will it obey and give us a new list?\n    item_list.append(item_name)\n    return item_list\n# Uses same item list unless otherwise stated which is counterintuitive",
    "detail": "MY_GISTS.82154f5060.python-study-guide",
    "documentation": {}
  },
  {
    "label": "append_item",
    "kind": 2,
    "importPath": "MY_GISTS.82154f5060.python-study-guide",
    "description": "MY_GISTS.82154f5060.python-study-guide",
    "peekOfCode": "def append_item(item_name, item_list=[]):  # Will it obey and give us a new list?\n    item_list.append(item_name)\n    return item_list\n# Uses same item list unless otherwise stated which is counterintuitive\nprint(append_item(\"notebook\"))\nprint(append_item(\"notebook\"))\nprint(append_item(\"notebook\", []))\n# Errors - Unlike JS, if we pass the incorrect amount of arguments to a function,\n#          it will throw an error\n# avg(1)  # TypeError",
    "detail": "MY_GISTS.82154f5060.python-study-guide",
    "documentation": {}
  },
  {
    "label": "add",
    "kind": 2,
    "importPath": "MY_GISTS.82154f5060.python-study-guide",
    "description": "MY_GISTS.82154f5060.python-study-guide",
    "peekOfCode": "def add(a, b, *args):\n    # args is a tuple of the rest of the arguments\n    total = a + b\n    for n in args:\n        total += n\n    return total\nprint(add(1, 2))  # args is None, returns 3\nprint(add(1, 2, 3, 4, 5, 6))  # args is (3, 4, 5, 6), returns 21\n# Variable Length Keyword Arguments\ndef print_names_and_countries(greeting, **kwargs):",
    "detail": "MY_GISTS.82154f5060.python-study-guide",
    "documentation": {}
  },
  {
    "label": "print_names_and_countries",
    "kind": 2,
    "importPath": "MY_GISTS.82154f5060.python-study-guide",
    "description": "MY_GISTS.82154f5060.python-study-guide",
    "peekOfCode": "def print_names_and_countries(greeting, **kwargs):\n    # kwargs is a dictionary of the rest of the keyword arguments\n    for k, v in kwargs.items():\n        print(greeting, k, \"from\", v)\nprint_names_and_countries(\n    \"Hey there\", Monica=\"Sweden\", Mike=\"The United States\", Mark=\"China\"\n)\n# We can combine all of these together\ndef example2(arg1, arg2, *args, kw_1=\"cheese\", kw_2=\"horse\", **kwargs):\n    pass",
    "detail": "MY_GISTS.82154f5060.python-study-guide",
    "documentation": {}
  },
  {
    "label": "example2",
    "kind": 2,
    "importPath": "MY_GISTS.82154f5060.python-study-guide",
    "description": "MY_GISTS.82154f5060.python-study-guide",
    "peekOfCode": "def example2(arg1, arg2, *args, kw_1=\"cheese\", kw_2=\"horse\", **kwargs):\n    pass\n# Lists are mutable arrays\nempty_list = []\nroomates = [\"Beau\", \"Delynn\"]\n# List built-in function makes a list too\nspecials = list()\n# We can use 'in' to test if something is in the list, like 'includes' in JS\nprint(1 in [1, 2, 4])  # True\nprint(2 in [1, 3, 5])  # False",
    "detail": "MY_GISTS.82154f5060.python-study-guide",
    "documentation": {}
  },
  {
    "label": "toUpper",
    "kind": 2,
    "importPath": "MY_GISTS.82154f5060.python-study-guide",
    "description": "MY_GISTS.82154f5060.python-study-guide",
    "peekOfCode": "def toUpper(str):\n    return str.upper()\nupperCased = map(toUpper, [\"a\", \"b\", \"c\", \"d\"])\nprint(list(upperCased))\n# Sorted\nsorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"])\nprint(list(sorted_items))  # Notice uppercase comes before lowercase\n# Using a key function to control the sorting and make it case insensitive\nsorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"], key=str.lower)\nprint(sorted_items)",
    "detail": "MY_GISTS.82154f5060.python-study-guide",
    "documentation": {}
  },
  {
    "label": "add",
    "kind": 2,
    "importPath": "MY_GISTS.82154f5060.python-study-guide",
    "description": "MY_GISTS.82154f5060.python-study-guide",
    "peekOfCode": "def add(num1, num2):\n    return num1 + num2\n# Notice the . syntax because this package can import it's own submodules.\n# Our __init__.py has the following files\n# This imports the 'add' function\n# And now it's also re-exported in here as well\n# from .addition import add\n# These import and re-export the rest of the functions from the submodule\n# from .subtraction import subtract\n# from .division import divide",
    "detail": "MY_GISTS.82154f5060.python-study-guide",
    "documentation": {}
  },
  {
    "label": "a",
    "kind": 5,
    "importPath": "MY_GISTS.82154f5060.python-study-guide",
    "description": "MY_GISTS.82154f5060.python-study-guide",
    "peekOfCode": "a = True\nb = False\n# Logical Operators\n# ! = not, || = or, && = and\nprint(True and True)\nprint(True and not True)\nprint(True or True)\n# Truthiness - Everything is True except...\n# False - None, False, '', [], (), set(), range(0)\n# Number Values",
    "detail": "MY_GISTS.82154f5060.python-study-guide",
    "documentation": {}
  },
  {
    "label": "b",
    "kind": 5,
    "importPath": "MY_GISTS.82154f5060.python-study-guide",
    "description": "MY_GISTS.82154f5060.python-study-guide",
    "peekOfCode": "b = False\n# Logical Operators\n# ! = not, || = or, && = and\nprint(True and True)\nprint(True and not True)\nprint(True or True)\n# Truthiness - Everything is True except...\n# False - None, False, '', [], (), set(), range(0)\n# Number Values\n# Integers are numbers without a floating decimal point",
    "detail": "MY_GISTS.82154f5060.python-study-guide",
    "documentation": {}
  },
  {
    "label": "name",
    "kind": 5,
    "importPath": "MY_GISTS.82154f5060.python-study-guide",
    "description": "MY_GISTS.82154f5060.python-study-guide",
    "peekOfCode": "name = \"Bryan\"\nfor i in range(len(name)):\n    print(name[i])  # B, r, y, a, n\n# We can index starting from the end as well, with negatives\noccupation = \"Full Stack Software Engineer\"\nprint(occupation[-3])  # e\n# We can also get ranges in the index with the [start:stop:step] syntax\nprint(occupation[0:4:1])  # step and stop are optional, stop is exclusive\nprint(occupation[::4])  # beginning to end, every 4th letter\nprint(occupation[4:14:2])  # Let's get weird with it!",
    "detail": "MY_GISTS.82154f5060.python-study-guide",
    "documentation": {}
  },
  {
    "label": "occupation",
    "kind": 5,
    "importPath": "MY_GISTS.82154f5060.python-study-guide",
    "description": "MY_GISTS.82154f5060.python-study-guide",
    "peekOfCode": "occupation = \"Full Stack Software Engineer\"\nprint(occupation[-3])  # e\n# We can also get ranges in the index with the [start:stop:step] syntax\nprint(occupation[0:4:1])  # step and stop are optional, stop is exclusive\nprint(occupation[::4])  # beginning to end, every 4th letter\nprint(occupation[4:14:2])  # Let's get weird with it!\n# NOTE: Indexing out of range will give you an IndexError\n# We can also get the index og things with the .index() method, similar to indexOf()\nprint(occupation.index(\"Stack\"))\nprint([\"Mike\", \"Barry\", \"Cole\", \"James\", \"Mark\"].index(\"Cole\"))",
    "detail": "MY_GISTS.82154f5060.python-study-guide",
    "documentation": {}
  },
  {
    "label": "first_name",
    "kind": 5,
    "importPath": "MY_GISTS.82154f5060.python-study-guide",
    "description": "MY_GISTS.82154f5060.python-study-guide",
    "peekOfCode": "first_name = \"Bryan\"\nlast_name = \"Guner\"\nprint(\"Your name is {0} {1}\".format(first_name, last_name))\n# Useful String Methods\nprint(\"Hello\".upper())  # HELLO\nprint(\"Hello\".lower())  # hello\nprint(\"HELLO\".islower())  # False\nprint(\"HELLO\".isupper())  # True\nprint(\"Hello\".startswith(\"he\"))  # False\nprint(\"Hello\".endswith(\"lo\"))  # True",
    "detail": "MY_GISTS.82154f5060.python-study-guide",
    "documentation": {}
  },
  {
    "label": "last_name",
    "kind": 5,
    "importPath": "MY_GISTS.82154f5060.python-study-guide",
    "description": "MY_GISTS.82154f5060.python-study-guide",
    "peekOfCode": "last_name = \"Guner\"\nprint(\"Your name is {0} {1}\".format(first_name, last_name))\n# Useful String Methods\nprint(\"Hello\".upper())  # HELLO\nprint(\"Hello\".lower())  # hello\nprint(\"HELLO\".islower())  # False\nprint(\"HELLO\".isupper())  # True\nprint(\"Hello\".startswith(\"he\"))  # False\nprint(\"Hello\".endswith(\"lo\"))  # True\nprint(\"Hello There\".split())  # [Hello, There]",
    "detail": "MY_GISTS.82154f5060.python-study-guide",
    "documentation": {}
  },
  {
    "label": "a",
    "kind": 5,
    "importPath": "MY_GISTS.82154f5060.python-study-guide",
    "description": "MY_GISTS.82154f5060.python-study-guide",
    "peekOfCode": "a = 3\nb = a\nc = \"heyoo\"\nb = [\"reassignment\", \"is\", \"fine\", \"G!\"]\n# Comparison Operators - Python uses the same equality operators as JS, but no ===\n# < - Less than\n# > - Greater than\n# <= - Less than or Equal\n# >= - Greater than or Equal\n# == - Equal to",
    "detail": "MY_GISTS.82154f5060.python-study-guide",
    "documentation": {}
  },
  {
    "label": "b",
    "kind": 5,
    "importPath": "MY_GISTS.82154f5060.python-study-guide",
    "description": "MY_GISTS.82154f5060.python-study-guide",
    "peekOfCode": "b = a\nc = \"heyoo\"\nb = [\"reassignment\", \"is\", \"fine\", \"G!\"]\n# Comparison Operators - Python uses the same equality operators as JS, but no ===\n# < - Less than\n# > - Greater than\n# <= - Less than or Equal\n# >= - Greater than or Equal\n# == - Equal to\n# != - Not equal to",
    "detail": "MY_GISTS.82154f5060.python-study-guide",
    "documentation": {}
  },
  {
    "label": "c",
    "kind": 5,
    "importPath": "MY_GISTS.82154f5060.python-study-guide",
    "description": "MY_GISTS.82154f5060.python-study-guide",
    "peekOfCode": "c = \"heyoo\"\nb = [\"reassignment\", \"is\", \"fine\", \"G!\"]\n# Comparison Operators - Python uses the same equality operators as JS, but no ===\n# < - Less than\n# > - Greater than\n# <= - Less than or Equal\n# >= - Greater than or Equal\n# == - Equal to\n# != - Not equal to\n# is - Refers to exact same memory location",
    "detail": "MY_GISTS.82154f5060.python-study-guide",
    "documentation": {}
  },
  {
    "label": "b",
    "kind": 5,
    "importPath": "MY_GISTS.82154f5060.python-study-guide",
    "description": "MY_GISTS.82154f5060.python-study-guide",
    "peekOfCode": "b = [\"reassignment\", \"is\", \"fine\", \"G!\"]\n# Comparison Operators - Python uses the same equality operators as JS, but no ===\n# < - Less than\n# > - Greater than\n# <= - Less than or Equal\n# >= - Greater than or Equal\n# == - Equal to\n# != - Not equal to\n# is - Refers to exact same memory location\n# not - !",
    "detail": "MY_GISTS.82154f5060.python-study-guide",
    "documentation": {}
  },
  {
    "label": "lst",
    "kind": 5,
    "importPath": "MY_GISTS.82154f5060.python-study-guide",
    "description": "MY_GISTS.82154f5060.python-study-guide",
    "peekOfCode": "lst = [1, 2, 3, 4]\nfor i in lst:\n    print(i)\n# Looping over a dictionary\nspam = {\"color\": \"red\", \"age\": 42, \"items\": [(1, \"hey\"), (2, \"hooo!\")]}\nfor v in spam.values():\n    print(v)\n# Loop over a list of tuples and destructuring the values\n# Assuming spam.items returns a list of tuples each containing two items (k, v)\nfor k, v in spam.items():",
    "detail": "MY_GISTS.82154f5060.python-study-guide",
    "documentation": {}
  },
  {
    "label": "spam",
    "kind": 5,
    "importPath": "MY_GISTS.82154f5060.python-study-guide",
    "description": "MY_GISTS.82154f5060.python-study-guide",
    "peekOfCode": "spam = {\"color\": \"red\", \"age\": 42, \"items\": [(1, \"hey\"), (2, \"hooo!\")]}\nfor v in spam.values():\n    print(v)\n# Loop over a list of tuples and destructuring the values\n# Assuming spam.items returns a list of tuples each containing two items (k, v)\nfor k, v in spam.items():\n    print(f\"{k}: {v}\")\n# While loops as long as the condition is True\n#  - Exit loop early with break\n#  - Exit iteration early with continue",
    "detail": "MY_GISTS.82154f5060.python-study-guide",
    "documentation": {}
  },
  {
    "label": "spam",
    "kind": 5,
    "importPath": "MY_GISTS.82154f5060.python-study-guide",
    "description": "MY_GISTS.82154f5060.python-study-guide",
    "peekOfCode": "spam = 0\nwhile True:\n    print(\"Sike That's the wrong Numba\")\n    spam += 1\n    if spam < 5:\n        continue\n    break\n# Functions - use def keyword to define a function in Python\ndef printCopyright():\n    print(\"Copyright 2021, Bgoonz\")",
    "detail": "MY_GISTS.82154f5060.python-study-guide",
    "documentation": {}
  },
  {
    "label": "avg",
    "kind": 5,
    "importPath": "MY_GISTS.82154f5060.python-study-guide",
    "description": "MY_GISTS.82154f5060.python-study-guide",
    "peekOfCode": "avg = lambda num1, num2: print(num1 + num2)\navg(1, 2)\n# Calling it with keyword arguments, order does not matter\navg(num2=20, num1=1252)\nprintCopyright()\n# We can give parameters default arguments like JS\ndef greeting(name, saying=\"Hello\"):\n    print(saying, name)\ngreeting(\"Mike\")  # Hello Mike\ngreeting(\"Bryan\", saying=\"Hello there...\")",
    "detail": "MY_GISTS.82154f5060.python-study-guide",
    "documentation": {}
  },
  {
    "label": "empty_list",
    "kind": 5,
    "importPath": "MY_GISTS.82154f5060.python-study-guide",
    "description": "MY_GISTS.82154f5060.python-study-guide",
    "peekOfCode": "empty_list = []\nroomates = [\"Beau\", \"Delynn\"]\n# List built-in function makes a list too\nspecials = list()\n# We can use 'in' to test if something is in the list, like 'includes' in JS\nprint(1 in [1, 2, 4])  # True\nprint(2 in [1, 3, 5])  # False\n# Dictionaries - Similar to JS POJO's or Map, containing key value pairs\na = {\"one\": 1, \"two\": 2, \"three\": 3}\nb = dict(one=1, two=2, three=3)",
    "detail": "MY_GISTS.82154f5060.python-study-guide",
    "documentation": {}
  },
  {
    "label": "roomates",
    "kind": 5,
    "importPath": "MY_GISTS.82154f5060.python-study-guide",
    "description": "MY_GISTS.82154f5060.python-study-guide",
    "peekOfCode": "roomates = [\"Beau\", \"Delynn\"]\n# List built-in function makes a list too\nspecials = list()\n# We can use 'in' to test if something is in the list, like 'includes' in JS\nprint(1 in [1, 2, 4])  # True\nprint(2 in [1, 3, 5])  # False\n# Dictionaries - Similar to JS POJO's or Map, containing key value pairs\na = {\"one\": 1, \"two\": 2, \"three\": 3}\nb = dict(one=1, two=2, three=3)\n# Can use 'in' on dictionaries too (for keys)",
    "detail": "MY_GISTS.82154f5060.python-study-guide",
    "documentation": {}
  },
  {
    "label": "specials",
    "kind": 5,
    "importPath": "MY_GISTS.82154f5060.python-study-guide",
    "description": "MY_GISTS.82154f5060.python-study-guide",
    "peekOfCode": "specials = list()\n# We can use 'in' to test if something is in the list, like 'includes' in JS\nprint(1 in [1, 2, 4])  # True\nprint(2 in [1, 3, 5])  # False\n# Dictionaries - Similar to JS POJO's or Map, containing key value pairs\na = {\"one\": 1, \"two\": 2, \"three\": 3}\nb = dict(one=1, two=2, three=3)\n# Can use 'in' on dictionaries too (for keys)\nprint(\"one\" in a)  # True\nprint(3 in b)  # False",
    "detail": "MY_GISTS.82154f5060.python-study-guide",
    "documentation": {}
  },
  {
    "label": "a",
    "kind": 5,
    "importPath": "MY_GISTS.82154f5060.python-study-guide",
    "description": "MY_GISTS.82154f5060.python-study-guide",
    "peekOfCode": "a = {\"one\": 1, \"two\": 2, \"three\": 3}\nb = dict(one=1, two=2, three=3)\n# Can use 'in' on dictionaries too (for keys)\nprint(\"one\" in a)  # True\nprint(3 in b)  # False\n# Sets - Just like JS, unordered collection of distinct objects\nbedroom = {\"bed\", \"tv\", \"computer\", \"clothes\", \"playstation 4\"}\n# bedroom = set(\"bed\", \"tv\", \"computer\", \"clothes\", \"playstation 5\")\nschool_bag = set(\n    [\"book\", \"paper\", \"pencil\", \"pencil\", \"book\", \"book\", \"book\", \"eraser\"]",
    "detail": "MY_GISTS.82154f5060.python-study-guide",
    "documentation": {}
  },
  {
    "label": "b",
    "kind": 5,
    "importPath": "MY_GISTS.82154f5060.python-study-guide",
    "description": "MY_GISTS.82154f5060.python-study-guide",
    "peekOfCode": "b = dict(one=1, two=2, three=3)\n# Can use 'in' on dictionaries too (for keys)\nprint(\"one\" in a)  # True\nprint(3 in b)  # False\n# Sets - Just like JS, unordered collection of distinct objects\nbedroom = {\"bed\", \"tv\", \"computer\", \"clothes\", \"playstation 4\"}\n# bedroom = set(\"bed\", \"tv\", \"computer\", \"clothes\", \"playstation 5\")\nschool_bag = set(\n    [\"book\", \"paper\", \"pencil\", \"pencil\", \"book\", \"book\", \"book\", \"eraser\"]\n)",
    "detail": "MY_GISTS.82154f5060.python-study-guide",
    "documentation": {}
  },
  {
    "label": "bedroom",
    "kind": 5,
    "importPath": "MY_GISTS.82154f5060.python-study-guide",
    "description": "MY_GISTS.82154f5060.python-study-guide",
    "peekOfCode": "bedroom = {\"bed\", \"tv\", \"computer\", \"clothes\", \"playstation 4\"}\n# bedroom = set(\"bed\", \"tv\", \"computer\", \"clothes\", \"playstation 5\")\nschool_bag = set(\n    [\"book\", \"paper\", \"pencil\", \"pencil\", \"book\", \"book\", \"book\", \"eraser\"]\n)\nprint(school_bag)\nprint(bedroom)\n# We can use 'in' on sets as wel\nprint(1 in {1, 2, 3})  # True\nprint(4 in {1, 3, 5})  # False",
    "detail": "MY_GISTS.82154f5060.python-study-guide",
    "documentation": {}
  },
  {
    "label": "school_bag",
    "kind": 5,
    "importPath": "MY_GISTS.82154f5060.python-study-guide",
    "description": "MY_GISTS.82154f5060.python-study-guide",
    "peekOfCode": "school_bag = set(\n    [\"book\", \"paper\", \"pencil\", \"pencil\", \"book\", \"book\", \"book\", \"eraser\"]\n)\nprint(school_bag)\nprint(bedroom)\n# We can use 'in' on sets as wel\nprint(1 in {1, 2, 3})  # True\nprint(4 in {1, 3, 5})  # False\n# Tuples are immutable lists of items\ntime_blocks = (\"AM\", \"PM\")",
    "detail": "MY_GISTS.82154f5060.python-study-guide",
    "documentation": {}
  },
  {
    "label": "time_blocks",
    "kind": 5,
    "importPath": "MY_GISTS.82154f5060.python-study-guide",
    "description": "MY_GISTS.82154f5060.python-study-guide",
    "peekOfCode": "time_blocks = (\"AM\", \"PM\")\ncolors = \"red\", \"green\", \"blue\"  # Parenthesis not needed but encouraged\n# The tuple built-in function can be used to convert things to tuples\nprint(tuple(\"abc\"))\nprint(tuple([1, 2, 3]))\n# 'in' may be used on tuples as well\nprint(1 in (1, 2, 3))  # True\nprint(5 in (1, 4, 3))  # False\n# Ranges are immutable lists of numbers, often used with for loops\n#   - start - default: 0, first number in sequence",
    "detail": "MY_GISTS.82154f5060.python-study-guide",
    "documentation": {}
  },
  {
    "label": "colors",
    "kind": 5,
    "importPath": "MY_GISTS.82154f5060.python-study-guide",
    "description": "MY_GISTS.82154f5060.python-study-guide",
    "peekOfCode": "colors = \"red\", \"green\", \"blue\"  # Parenthesis not needed but encouraged\n# The tuple built-in function can be used to convert things to tuples\nprint(tuple(\"abc\"))\nprint(tuple([1, 2, 3]))\n# 'in' may be used on tuples as well\nprint(1 in (1, 2, 3))  # True\nprint(5 in (1, 4, 3))  # False\n# Ranges are immutable lists of numbers, often used with for loops\n#   - start - default: 0, first number in sequence\n#   - stop - required, next number past last number in sequence",
    "detail": "MY_GISTS.82154f5060.python-study-guide",
    "documentation": {}
  },
  {
    "label": "range1",
    "kind": 5,
    "importPath": "MY_GISTS.82154f5060.python-study-guide",
    "description": "MY_GISTS.82154f5060.python-study-guide",
    "peekOfCode": "range1 = range(5)  # [0,1,2,3,4]\nrange2 = range(1, 5)  # [1,2,3,4]\nrange3 = range(0, 25, 5)  # [0,5,10,15,20]\nrange4 = range(0)  # []\nfor i in range1:\n    print(i)\n# Built-in functions:\n# Filter\nisOdd = lambda num: num % 2 == 1\nfiltered = filter(isOdd, [1, 2, 3, 4])",
    "detail": "MY_GISTS.82154f5060.python-study-guide",
    "documentation": {}
  },
  {
    "label": "range2",
    "kind": 5,
    "importPath": "MY_GISTS.82154f5060.python-study-guide",
    "description": "MY_GISTS.82154f5060.python-study-guide",
    "peekOfCode": "range2 = range(1, 5)  # [1,2,3,4]\nrange3 = range(0, 25, 5)  # [0,5,10,15,20]\nrange4 = range(0)  # []\nfor i in range1:\n    print(i)\n# Built-in functions:\n# Filter\nisOdd = lambda num: num % 2 == 1\nfiltered = filter(isOdd, [1, 2, 3, 4])\nprint(list(filtered))",
    "detail": "MY_GISTS.82154f5060.python-study-guide",
    "documentation": {}
  },
  {
    "label": "range3",
    "kind": 5,
    "importPath": "MY_GISTS.82154f5060.python-study-guide",
    "description": "MY_GISTS.82154f5060.python-study-guide",
    "peekOfCode": "range3 = range(0, 25, 5)  # [0,5,10,15,20]\nrange4 = range(0)  # []\nfor i in range1:\n    print(i)\n# Built-in functions:\n# Filter\nisOdd = lambda num: num % 2 == 1\nfiltered = filter(isOdd, [1, 2, 3, 4])\nprint(list(filtered))\nfor num in filtered:",
    "detail": "MY_GISTS.82154f5060.python-study-guide",
    "documentation": {}
  },
  {
    "label": "range4",
    "kind": 5,
    "importPath": "MY_GISTS.82154f5060.python-study-guide",
    "description": "MY_GISTS.82154f5060.python-study-guide",
    "peekOfCode": "range4 = range(0)  # []\nfor i in range1:\n    print(i)\n# Built-in functions:\n# Filter\nisOdd = lambda num: num % 2 == 1\nfiltered = filter(isOdd, [1, 2, 3, 4])\nprint(list(filtered))\nfor num in filtered:\n    print(f\"first way: {num}\")",
    "detail": "MY_GISTS.82154f5060.python-study-guide",
    "documentation": {}
  },
  {
    "label": "isOdd",
    "kind": 5,
    "importPath": "MY_GISTS.82154f5060.python-study-guide",
    "description": "MY_GISTS.82154f5060.python-study-guide",
    "peekOfCode": "isOdd = lambda num: num % 2 == 1\nfiltered = filter(isOdd, [1, 2, 3, 4])\nprint(list(filtered))\nfor num in filtered:\n    print(f\"first way: {num}\")\nprint(\"--\" * 20)\n[print(f\"list comprehension: {i}\") for i in [1, 2, 3, 4, 5, 6, 7, 8] if i % 2 == 1]\n# Map\ndef toUpper(str):\n    return str.upper()",
    "detail": "MY_GISTS.82154f5060.python-study-guide",
    "documentation": {}
  },
  {
    "label": "filtered",
    "kind": 5,
    "importPath": "MY_GISTS.82154f5060.python-study-guide",
    "description": "MY_GISTS.82154f5060.python-study-guide",
    "peekOfCode": "filtered = filter(isOdd, [1, 2, 3, 4])\nprint(list(filtered))\nfor num in filtered:\n    print(f\"first way: {num}\")\nprint(\"--\" * 20)\n[print(f\"list comprehension: {i}\") for i in [1, 2, 3, 4, 5, 6, 7, 8] if i % 2 == 1]\n# Map\ndef toUpper(str):\n    return str.upper()\nupperCased = map(toUpper, [\"a\", \"b\", \"c\", \"d\"])",
    "detail": "MY_GISTS.82154f5060.python-study-guide",
    "documentation": {}
  },
  {
    "label": "upperCased",
    "kind": 5,
    "importPath": "MY_GISTS.82154f5060.python-study-guide",
    "description": "MY_GISTS.82154f5060.python-study-guide",
    "peekOfCode": "upperCased = map(toUpper, [\"a\", \"b\", \"c\", \"d\"])\nprint(list(upperCased))\n# Sorted\nsorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"])\nprint(list(sorted_items))  # Notice uppercase comes before lowercase\n# Using a key function to control the sorting and make it case insensitive\nsorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"], key=str.lower)\nprint(sorted_items)\n# You can also reverse the sort\nsorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"], key=str.lower, reverse=True)",
    "detail": "MY_GISTS.82154f5060.python-study-guide",
    "documentation": {}
  },
  {
    "label": "sorted_items",
    "kind": 5,
    "importPath": "MY_GISTS.82154f5060.python-study-guide",
    "description": "MY_GISTS.82154f5060.python-study-guide",
    "peekOfCode": "sorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"])\nprint(list(sorted_items))  # Notice uppercase comes before lowercase\n# Using a key function to control the sorting and make it case insensitive\nsorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"], key=str.lower)\nprint(sorted_items)\n# You can also reverse the sort\nsorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"], key=str.lower, reverse=True)\nprint(sorted_items)\n# Enumerate creates a tuple with an index for what you're enumerating\nquarters = [\"First\", \"Second\", \"Third\", \"Fourth\"]",
    "detail": "MY_GISTS.82154f5060.python-study-guide",
    "documentation": {}
  },
  {
    "label": "sorted_items",
    "kind": 5,
    "importPath": "MY_GISTS.82154f5060.python-study-guide",
    "description": "MY_GISTS.82154f5060.python-study-guide",
    "peekOfCode": "sorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"], key=str.lower)\nprint(sorted_items)\n# You can also reverse the sort\nsorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"], key=str.lower, reverse=True)\nprint(sorted_items)\n# Enumerate creates a tuple with an index for what you're enumerating\nquarters = [\"First\", \"Second\", \"Third\", \"Fourth\"]\nprint(list(enumerate(quarters)))\nprint(list(enumerate(quarters, start=1)))\n# Zip takes list and combines them as key value pairs, or really however you need",
    "detail": "MY_GISTS.82154f5060.python-study-guide",
    "documentation": {}
  },
  {
    "label": "sorted_items",
    "kind": 5,
    "importPath": "MY_GISTS.82154f5060.python-study-guide",
    "description": "MY_GISTS.82154f5060.python-study-guide",
    "peekOfCode": "sorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"], key=str.lower, reverse=True)\nprint(sorted_items)\n# Enumerate creates a tuple with an index for what you're enumerating\nquarters = [\"First\", \"Second\", \"Third\", \"Fourth\"]\nprint(list(enumerate(quarters)))\nprint(list(enumerate(quarters, start=1)))\n# Zip takes list and combines them as key value pairs, or really however you need\nkeys = (\"Name\", \"Email\")\nvalues = (\"Buster\", \"cheetoh@johhnydepp.com\")\nzipped = zip(keys, values)",
    "detail": "MY_GISTS.82154f5060.python-study-guide",
    "documentation": {}
  },
  {
    "label": "quarters",
    "kind": 5,
    "importPath": "MY_GISTS.82154f5060.python-study-guide",
    "description": "MY_GISTS.82154f5060.python-study-guide",
    "peekOfCode": "quarters = [\"First\", \"Second\", \"Third\", \"Fourth\"]\nprint(list(enumerate(quarters)))\nprint(list(enumerate(quarters, start=1)))\n# Zip takes list and combines them as key value pairs, or really however you need\nkeys = (\"Name\", \"Email\")\nvalues = (\"Buster\", \"cheetoh@johhnydepp.com\")\nzipped = zip(keys, values)\nprint(list(zipped))\n# You can zip more than 2\nx_coords = [0, 1, 2, 3, 4]",
    "detail": "MY_GISTS.82154f5060.python-study-guide",
    "documentation": {}
  },
  {
    "label": "keys",
    "kind": 5,
    "importPath": "MY_GISTS.82154f5060.python-study-guide",
    "description": "MY_GISTS.82154f5060.python-study-guide",
    "peekOfCode": "keys = (\"Name\", \"Email\")\nvalues = (\"Buster\", \"cheetoh@johhnydepp.com\")\nzipped = zip(keys, values)\nprint(list(zipped))\n# You can zip more than 2\nx_coords = [0, 1, 2, 3, 4]\ny_coords = [4, 6, 10, 9, 10]\nz_coords = [20, 10, 5, 9, 1]\ncoords = zip(x_coords, y_coords, z_coords)\nprint(list(coords))",
    "detail": "MY_GISTS.82154f5060.python-study-guide",
    "documentation": {}
  },
  {
    "label": "values",
    "kind": 5,
    "importPath": "MY_GISTS.82154f5060.python-study-guide",
    "description": "MY_GISTS.82154f5060.python-study-guide",
    "peekOfCode": "values = (\"Buster\", \"cheetoh@johhnydepp.com\")\nzipped = zip(keys, values)\nprint(list(zipped))\n# You can zip more than 2\nx_coords = [0, 1, 2, 3, 4]\ny_coords = [4, 6, 10, 9, 10]\nz_coords = [20, 10, 5, 9, 1]\ncoords = zip(x_coords, y_coords, z_coords)\nprint(list(coords))\n# Len reports the length of strings along with list and any other object data type",
    "detail": "MY_GISTS.82154f5060.python-study-guide",
    "documentation": {}
  },
  {
    "label": "zipped",
    "kind": 5,
    "importPath": "MY_GISTS.82154f5060.python-study-guide",
    "description": "MY_GISTS.82154f5060.python-study-guide",
    "peekOfCode": "zipped = zip(keys, values)\nprint(list(zipped))\n# You can zip more than 2\nx_coords = [0, 1, 2, 3, 4]\ny_coords = [4, 6, 10, 9, 10]\nz_coords = [20, 10, 5, 9, 1]\ncoords = zip(x_coords, y_coords, z_coords)\nprint(list(coords))\n# Len reports the length of strings along with list and any other object data type\nprint_len = lambda item: print(len(item))  # doing this to save myself some typing",
    "detail": "MY_GISTS.82154f5060.python-study-guide",
    "documentation": {}
  },
  {
    "label": "x_coords",
    "kind": 5,
    "importPath": "MY_GISTS.82154f5060.python-study-guide",
    "description": "MY_GISTS.82154f5060.python-study-guide",
    "peekOfCode": "x_coords = [0, 1, 2, 3, 4]\ny_coords = [4, 6, 10, 9, 10]\nz_coords = [20, 10, 5, 9, 1]\ncoords = zip(x_coords, y_coords, z_coords)\nprint(list(coords))\n# Len reports the length of strings along with list and any other object data type\nprint_len = lambda item: print(len(item))  # doing this to save myself some typing\nprint_len(\"Mike\")\nprint_len([1, 5, 2, 10, 3, 10])\nprint_len({1, 5, 10, 9, 10})  # 4 because there is a duplicate here (10)",
    "detail": "MY_GISTS.82154f5060.python-study-guide",
    "documentation": {}
  },
  {
    "label": "y_coords",
    "kind": 5,
    "importPath": "MY_GISTS.82154f5060.python-study-guide",
    "description": "MY_GISTS.82154f5060.python-study-guide",
    "peekOfCode": "y_coords = [4, 6, 10, 9, 10]\nz_coords = [20, 10, 5, 9, 1]\ncoords = zip(x_coords, y_coords, z_coords)\nprint(list(coords))\n# Len reports the length of strings along with list and any other object data type\nprint_len = lambda item: print(len(item))  # doing this to save myself some typing\nprint_len(\"Mike\")\nprint_len([1, 5, 2, 10, 3, 10])\nprint_len({1, 5, 10, 9, 10})  # 4 because there is a duplicate here (10)\nprint_len((1, 4, 10, 9, 20))",
    "detail": "MY_GISTS.82154f5060.python-study-guide",
    "documentation": {}
  },
  {
    "label": "z_coords",
    "kind": 5,
    "importPath": "MY_GISTS.82154f5060.python-study-guide",
    "description": "MY_GISTS.82154f5060.python-study-guide",
    "peekOfCode": "z_coords = [20, 10, 5, 9, 1]\ncoords = zip(x_coords, y_coords, z_coords)\nprint(list(coords))\n# Len reports the length of strings along with list and any other object data type\nprint_len = lambda item: print(len(item))  # doing this to save myself some typing\nprint_len(\"Mike\")\nprint_len([1, 5, 2, 10, 3, 10])\nprint_len({1, 5, 10, 9, 10})  # 4 because there is a duplicate here (10)\nprint_len((1, 4, 10, 9, 20))\n# Max will return the max number in a given scenario",
    "detail": "MY_GISTS.82154f5060.python-study-guide",
    "documentation": {}
  },
  {
    "label": "coords",
    "kind": 5,
    "importPath": "MY_GISTS.82154f5060.python-study-guide",
    "description": "MY_GISTS.82154f5060.python-study-guide",
    "peekOfCode": "coords = zip(x_coords, y_coords, z_coords)\nprint(list(coords))\n# Len reports the length of strings along with list and any other object data type\nprint_len = lambda item: print(len(item))  # doing this to save myself some typing\nprint_len(\"Mike\")\nprint_len([1, 5, 2, 10, 3, 10])\nprint_len({1, 5, 10, 9, 10})  # 4 because there is a duplicate here (10)\nprint_len((1, 4, 10, 9, 20))\n# Max will return the max number in a given scenario\nprint(max(1, 2, 35, 1012, 1))",
    "detail": "MY_GISTS.82154f5060.python-study-guide",
    "documentation": {}
  },
  {
    "label": "print_len",
    "kind": 5,
    "importPath": "MY_GISTS.82154f5060.python-study-guide",
    "description": "MY_GISTS.82154f5060.python-study-guide",
    "peekOfCode": "print_len = lambda item: print(len(item))  # doing this to save myself some typing\nprint_len(\"Mike\")\nprint_len([1, 5, 2, 10, 3, 10])\nprint_len({1, 5, 10, 9, 10})  # 4 because there is a duplicate here (10)\nprint_len((1, 4, 10, 9, 20))\n# Max will return the max number in a given scenario\nprint(max(1, 2, 35, 1012, 1))\n# Min\nprint(min(1, 5, 2, 10))\nprint(min([1, 4, 7, 10]))",
    "detail": "MY_GISTS.82154f5060.python-study-guide",
    "documentation": {}
  },
  {
    "label": "user",
    "kind": 5,
    "importPath": "MY_GISTS.82154f5060.python-study-guide",
    "description": "MY_GISTS.82154f5060.python-study-guide",
    "peekOfCode": "user = {\"Name\": \"Bob\", \"Email\": \"bob@bob.com\"}\nprint(dir(user))\n# Importing packages and modules\n#  - Module - A Python code in a file or directory\n#  - Package - A module which is a directory containing an __init__.py file\n#  - Submodule - A module which is contained within a package\n#  - Name - An exported function, class, or variable in a module\n# Unlike JS, modules export ALL names contained within them without any special export key\n# Assuming we have the following package with four submodules\n#  math",
    "detail": "MY_GISTS.82154f5060.python-study-guide",
    "documentation": {}
  },
  {
    "label": "squares",
    "kind": 5,
    "importPath": "MY_GISTS.82154f5060.python-study-guide",
    "description": "MY_GISTS.82154f5060.python-study-guide",
    "peekOfCode": "squares = []\nfor i in range(10):\n    squares.append(i ** 2)\nprint(squares)\n# value = i ** 2\n# loop = for i in range(10)\nsquares = [i ** 2 for i in range(10)]\nprint(list(squares))\nsentence = \"the rocket came back from mars\"\nvowels = [character for character in sentence if character in \"aeiou\"]",
    "detail": "MY_GISTS.82154f5060.python-study-guide",
    "documentation": {}
  },
  {
    "label": "squares",
    "kind": 5,
    "importPath": "MY_GISTS.82154f5060.python-study-guide",
    "description": "MY_GISTS.82154f5060.python-study-guide",
    "peekOfCode": "squares = [i ** 2 for i in range(10)]\nprint(list(squares))\nsentence = \"the rocket came back from mars\"\nvowels = [character for character in sentence if character in \"aeiou\"]\nprint(vowels)\n# You can also use them on dictionaries. We can use the items() method\n# for the dictionary to loop through it getting the keys and values out at once\nperson = {\"name\": \"Corina\", \"age\": 32, \"height\": 1.4}\n# This loops through and capitalizes the first letter of all keys\nnewPerson = {key.title(): value for key, value in person.items()}",
    "detail": "MY_GISTS.82154f5060.python-study-guide",
    "documentation": {}
  },
  {
    "label": "sentence",
    "kind": 5,
    "importPath": "MY_GISTS.82154f5060.python-study-guide",
    "description": "MY_GISTS.82154f5060.python-study-guide",
    "peekOfCode": "sentence = \"the rocket came back from mars\"\nvowels = [character for character in sentence if character in \"aeiou\"]\nprint(vowels)\n# You can also use them on dictionaries. We can use the items() method\n# for the dictionary to loop through it getting the keys and values out at once\nperson = {\"name\": \"Corina\", \"age\": 32, \"height\": 1.4}\n# This loops through and capitalizes the first letter of all keys\nnewPerson = {key.title(): value for key, value in person.items()}\nprint(list(newPerson.items()))",
    "detail": "MY_GISTS.82154f5060.python-study-guide",
    "documentation": {}
  },
  {
    "label": "vowels",
    "kind": 5,
    "importPath": "MY_GISTS.82154f5060.python-study-guide",
    "description": "MY_GISTS.82154f5060.python-study-guide",
    "peekOfCode": "vowels = [character for character in sentence if character in \"aeiou\"]\nprint(vowels)\n# You can also use them on dictionaries. We can use the items() method\n# for the dictionary to loop through it getting the keys and values out at once\nperson = {\"name\": \"Corina\", \"age\": 32, \"height\": 1.4}\n# This loops through and capitalizes the first letter of all keys\nnewPerson = {key.title(): value for key, value in person.items()}\nprint(list(newPerson.items()))",
    "detail": "MY_GISTS.82154f5060.python-study-guide",
    "documentation": {}
  },
  {
    "label": "person",
    "kind": 5,
    "importPath": "MY_GISTS.82154f5060.python-study-guide",
    "description": "MY_GISTS.82154f5060.python-study-guide",
    "peekOfCode": "person = {\"name\": \"Corina\", \"age\": 32, \"height\": 1.4}\n# This loops through and capitalizes the first letter of all keys\nnewPerson = {key.title(): value for key, value in person.items()}\nprint(list(newPerson.items()))",
    "detail": "MY_GISTS.82154f5060.python-study-guide",
    "documentation": {}
  },
  {
    "label": "newPerson",
    "kind": 5,
    "importPath": "MY_GISTS.82154f5060.python-study-guide",
    "description": "MY_GISTS.82154f5060.python-study-guide",
    "peekOfCode": "newPerson = {key.title(): value for key, value in person.items()}\nprint(list(newPerson.items()))",
    "detail": "MY_GISTS.82154f5060.python-study-guide",
    "documentation": {}
  },
  {
    "label": "AudioToText",
    "kind": 6,
    "importPath": "MY_GISTS.825aa98d8f.audio-2-text",
    "description": "MY_GISTS.825aa98d8f.audio-2-text",
    "peekOfCode": "class AudioToText:\n    \"\"\" Converts an audio file to text. \"\"\"\n    def __init__(self, fileInput, fileOutput, language):\n        \"\"\" Initialize. \"\"\"\n        self.input = fileInput\n        self.output = fileOutput\n        self.language = language\n        self.minSilenceLen = 500                # The minimum length for silent sections in milliseconds.\n        self.silenceThresh = 14                 # The upper bound for how quiet silent in dBFS.\n        self.keepSilence = 500                  # How much silence to keep in ms or a bool.",
    "detail": "MY_GISTS.825aa98d8f.audio-2-text",
    "documentation": {}
  },
  {
    "label": "climbing_staircase",
    "kind": 2,
    "importPath": "MY_GISTS.89502bf395.climbing_staircase",
    "description": "MY_GISTS.89502bf395.climbing_staircase",
    "peekOfCode": "def climbing_staircase(steps, height):\n    dp = [0 for i in range(height)]\n    # add all steps into dp\n    for s in steps:\n        if s <= height:\n            dp[s - 1] = 1\n    # for each position look how you can arrive there\n    for i in range(height):\n        for s in steps:\n            if i - s >= 0:",
    "detail": "MY_GISTS.89502bf395.climbing_staircase",
    "documentation": {}
  },
  {
    "label": "coin_change_1",
    "kind": 2,
    "importPath": "MY_GISTS.89502bf395.coin_change",
    "description": "MY_GISTS.89502bf395.coin_change",
    "peekOfCode": "def coin_change_1(coins, amount):\n    if amount == 0:\n        return 0\n    if len(coins) == 0:\n        return -1\n    max_value = amount + 1  # use this instead of math.inf\n    dp = [max_value for i in range(max_value)]\n    dp[0] = 0\n    for i in range(1, max_value):\n        for c in coins:",
    "detail": "MY_GISTS.89502bf395.coin_change",
    "documentation": {}
  },
  {
    "label": "coin_change_2",
    "kind": 2,
    "importPath": "MY_GISTS.89502bf395.coin_change",
    "description": "MY_GISTS.89502bf395.coin_change",
    "peekOfCode": "def coin_change_2(coins, amount):\n    if amount == 0:\n        return 0\n    if len(coins) == 0:\n        return -1\n    max_value = amount + 1\n    max_coin = min(max_value, max(coins) + 1)\n    dp = [max_value for i in range(max_coin)]\n    dp[0] = 0\n    for i in range(1, max_value):",
    "detail": "MY_GISTS.89502bf395.coin_change",
    "documentation": {}
  },
  {
    "label": "coins",
    "kind": 5,
    "importPath": "MY_GISTS.89502bf395.coin_change",
    "description": "MY_GISTS.89502bf395.coin_change",
    "peekOfCode": "coins = [1, 2, 5]\namount = 11\nprint(coin_change_1(coins, amount))\nprint(coin_change_2(coins, amount))\n# Test 2\n# Correct result => -1\ncoins = [2]\namount = 3\nprint(coin_change_1(coins, amount))\nprint(coin_change_2(coins, amount))",
    "detail": "MY_GISTS.89502bf395.coin_change",
    "documentation": {}
  },
  {
    "label": "amount",
    "kind": 5,
    "importPath": "MY_GISTS.89502bf395.coin_change",
    "description": "MY_GISTS.89502bf395.coin_change",
    "peekOfCode": "amount = 11\nprint(coin_change_1(coins, amount))\nprint(coin_change_2(coins, amount))\n# Test 2\n# Correct result => -1\ncoins = [2]\namount = 3\nprint(coin_change_1(coins, amount))\nprint(coin_change_2(coins, amount))",
    "detail": "MY_GISTS.89502bf395.coin_change",
    "documentation": {}
  },
  {
    "label": "coins",
    "kind": 5,
    "importPath": "MY_GISTS.89502bf395.coin_change",
    "description": "MY_GISTS.89502bf395.coin_change",
    "peekOfCode": "coins = [2]\namount = 3\nprint(coin_change_1(coins, amount))\nprint(coin_change_2(coins, amount))",
    "detail": "MY_GISTS.89502bf395.coin_change",
    "documentation": {}
  },
  {
    "label": "amount",
    "kind": 5,
    "importPath": "MY_GISTS.89502bf395.coin_change",
    "description": "MY_GISTS.89502bf395.coin_change",
    "peekOfCode": "amount = 3\nprint(coin_change_1(coins, amount))\nprint(coin_change_2(coins, amount))",
    "detail": "MY_GISTS.89502bf395.coin_change",
    "documentation": {}
  },
  {
    "label": "count_ip_addresses",
    "kind": 2,
    "importPath": "MY_GISTS.89502bf395.count_ip_addresses",
    "description": "MY_GISTS.89502bf395.count_ip_addresses",
    "peekOfCode": "def count_ip_addresses(S, K):\n    n = len(S)\n    if n == 0:\n        return 0\n    if n < K:\n        return 0\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(K):\n        # if you want to save just little calculations you can use min(3*(i+1), n) instead of n",
    "detail": "MY_GISTS.89502bf395.count_ip_addresses",
    "documentation": {}
  },
  {
    "label": "is_valid",
    "kind": 2,
    "importPath": "MY_GISTS.89502bf395.count_ip_addresses",
    "description": "MY_GISTS.89502bf395.count_ip_addresses",
    "peekOfCode": "def is_valid(S):\n    if (len(S) > 1) and (S[0] == '0'):\n        return False\n    return int(S) <= 255\n###########\n# Testing #\n###########\n# Test 1\n# Correct result => 1\nprint(count_ip_addresses('1234567', 3))",
    "detail": "MY_GISTS.89502bf395.count_ip_addresses",
    "documentation": {}
  },
  {
    "label": "create_palindrome_1",
    "kind": 2,
    "importPath": "MY_GISTS.89502bf395.create_palindrom",
    "description": "MY_GISTS.89502bf395.create_palindrom",
    "peekOfCode": "def create_palindrome_1(word):\n    n = len(word)\n    # base cases\n    if n == 1:\n        return word\n    if n == 2:\n        if word[0] != word[1]:\n            word += word[0] # make a palindrom\n        return word\n    # check if the first and last chars are same",
    "detail": "MY_GISTS.89502bf395.create_palindrom",
    "documentation": {}
  },
  {
    "label": "create_palindrome_2",
    "kind": 2,
    "importPath": "MY_GISTS.89502bf395.create_palindrom",
    "description": "MY_GISTS.89502bf395.create_palindrom",
    "peekOfCode": "def create_palindrome_2(word):\n    n = len(word)\n    dp = [[0 for j in range(n)] for i in range(n)]\n    # run dp\n    for gap in range(1, n):\n        left = 0\n        for right in range(gap, n):\n            if word[left] == word[right]:\n                dp[left][right] = dp[left + 1][right - 1]\n            else:",
    "detail": "MY_GISTS.89502bf395.create_palindrom",
    "documentation": {}
  },
  {
    "label": "build_palindrome",
    "kind": 2,
    "importPath": "MY_GISTS.89502bf395.create_palindrom",
    "description": "MY_GISTS.89502bf395.create_palindrom",
    "peekOfCode": "def build_palindrome(word, dp, left, right):\n    # similar like the first solution, but without exponentialy branching\n    # this is linear time, we already know the inserting values\n    if left > right:\n        return ''\n    if left == right:\n        return word[left]\n    if word[left] == word[right]:\n        return word[left] + build_palindrome(word, dp, left + 1, right - 1) + word[left]\n    if dp[left + 1][right] < dp[left][right - 1]:",
    "detail": "MY_GISTS.89502bf395.create_palindrom",
    "documentation": {}
  },
  {
    "label": "word",
    "kind": 5,
    "importPath": "MY_GISTS.89502bf395.create_palindrom",
    "description": "MY_GISTS.89502bf395.create_palindrom",
    "peekOfCode": "word = 'race'\nprint(create_palindrome_1(word))\nprint(create_palindrome_2(word))\n# Test 2\n# Correct result => 'elgoogle'\nword = 'google'\nprint(create_palindrome_1(word))\nprint(create_palindrome_2(word))\n# Test 3\n# Correct result => 'adcbcda'",
    "detail": "MY_GISTS.89502bf395.create_palindrom",
    "documentation": {}
  },
  {
    "label": "word",
    "kind": 5,
    "importPath": "MY_GISTS.89502bf395.create_palindrom",
    "description": "MY_GISTS.89502bf395.create_palindrom",
    "peekOfCode": "word = 'google'\nprint(create_palindrome_1(word))\nprint(create_palindrome_2(word))\n# Test 3\n# Correct result => 'adcbcda'\nword = 'abcda'\nprint(create_palindrome_1(word))\nprint(create_palindrome_2(word))\n# Test 4\n# Correct result => 'abcdefgfedcba'",
    "detail": "MY_GISTS.89502bf395.create_palindrom",
    "documentation": {}
  },
  {
    "label": "word",
    "kind": 5,
    "importPath": "MY_GISTS.89502bf395.create_palindrom",
    "description": "MY_GISTS.89502bf395.create_palindrom",
    "peekOfCode": "word = 'abcda'\nprint(create_palindrome_1(word))\nprint(create_palindrome_2(word))\n# Test 4\n# Correct result => 'abcdefgfedcba'\nword = 'adefgfdcba'\nprint(create_palindrome_1(word))\nprint(create_palindrome_2(word))",
    "detail": "MY_GISTS.89502bf395.create_palindrom",
    "documentation": {}
  },
  {
    "label": "word",
    "kind": 5,
    "importPath": "MY_GISTS.89502bf395.create_palindrom",
    "description": "MY_GISTS.89502bf395.create_palindrom",
    "peekOfCode": "word = 'adefgfdcba'\nprint(create_palindrome_1(word))\nprint(create_palindrome_2(word))",
    "detail": "MY_GISTS.89502bf395.create_palindrom",
    "documentation": {}
  },
  {
    "label": "interleaving_strings_1",
    "kind": 2,
    "importPath": "MY_GISTS.89502bf395.interleaving_strings",
    "description": "MY_GISTS.89502bf395.interleaving_strings",
    "peekOfCode": "def interleaving_strings_1(A, B, C):\n    nA, nB, nC = len(A), len(B), len(C)\n    if nA + nB != nC:\n        return 0\n    dp = [[0 for j in range(nB + 1)] for i in range(nA + 1)]\n    # starting values\n    dp[0][0] = 1\n    for i in range(1, nA + 1):\n        if A[i - 1] == C[i - 1]:\n            # short form of if A[i - 1] == C[i - 1] and dp[i - 1][0] == 1",
    "detail": "MY_GISTS.89502bf395.interleaving_strings",
    "documentation": {}
  },
  {
    "label": "interleaving_strings_2",
    "kind": 2,
    "importPath": "MY_GISTS.89502bf395.interleaving_strings",
    "description": "MY_GISTS.89502bf395.interleaving_strings",
    "peekOfCode": "def interleaving_strings_2(A, B, C):\n    nA, nB, nC = len(A), len(B), len(C)\n    if nA + nB != nC:\n        return 0\n    dp = [0 for j in range(nB + 1)]\n    # starting values\n    dp[0] = 1\n    for i in range(1, nB + 1):\n        if B[i - 1] == C[i - 1]:\n            dp[i] = dp[i - 1]",
    "detail": "MY_GISTS.89502bf395.interleaving_strings",
    "documentation": {}
  },
  {
    "label": "min_jumps_1",
    "kind": 2,
    "importPath": "MY_GISTS.89502bf395.jump_game_2",
    "description": "MY_GISTS.89502bf395.jump_game_2",
    "peekOfCode": "def min_jumps_1(nums):\n    n = len(nums)\n    if n <= 1:\n        return 0\n    dp = [-1]*n\n    dp[0] = 0\n    for i in range(n):\n        this_jump = i + nums[i]\n        jumps = dp[i] + 1\n        if this_jump >= n - 1:",
    "detail": "MY_GISTS.89502bf395.jump_game_2",
    "documentation": {}
  },
  {
    "label": "min_jumps_2",
    "kind": 2,
    "importPath": "MY_GISTS.89502bf395.jump_game_2",
    "description": "MY_GISTS.89502bf395.jump_game_2",
    "peekOfCode": "def min_jumps_2(nums):\n    n = len(nums)\n    if n <= 1:\n        return 0\n    jumps = 0\n    max_jump = 0\n    new_max_jump = 0\n    for i in range(n):\n        if max_jump < i:\n            max_jump = new_max_jump",
    "detail": "MY_GISTS.89502bf395.jump_game_2",
    "documentation": {}
  },
  {
    "label": "nums",
    "kind": 5,
    "importPath": "MY_GISTS.89502bf395.jump_game_2",
    "description": "MY_GISTS.89502bf395.jump_game_2",
    "peekOfCode": "nums = [2, 3, 1, 1, 4]\nprint(min_jumps_1(nums))\nprint(min_jumps_2(nums))",
    "detail": "MY_GISTS.89502bf395.jump_game_2",
    "documentation": {}
  },
  {
    "label": "longest_common_subsequence",
    "kind": 2,
    "importPath": "MY_GISTS.89502bf395.longest_common_subsequence",
    "description": "MY_GISTS.89502bf395.longest_common_subsequence",
    "peekOfCode": "def longest_common_subsequence(str1, str2):\n    n, m = len(str1), len(str2)\n    # create dp matrix\n    dp = [[0 for j in range(m + 1)] for i in range(n + 1)]\n    # run dp\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            # checks only in 3 directions in the table\n            # in short: to the current position dp could come from those 3 previous positions\n            #   ^  ^",
    "detail": "MY_GISTS.89502bf395.longest_common_subsequence",
    "documentation": {}
  },
  {
    "label": "longest_common_substring",
    "kind": 2,
    "importPath": "MY_GISTS.89502bf395.longest_common_substring",
    "description": "MY_GISTS.89502bf395.longest_common_substring",
    "peekOfCode": "def longest_common_substring(str1, str2):\n    n, m = len(str1), len(str2)\n    # instead of creating a whole dp table, use only 2 rows (current and previous row)\n    curr = [0 for j in range(m + 1)]\n    prev = []\n    max_length = 0\n    max_idx = 0\n    for i in range(1, n + 1):\n        # save the previous row and create the current row\n        prev = curr",
    "detail": "MY_GISTS.89502bf395.longest_common_substring",
    "documentation": {}
  },
  {
    "label": "longest_increasing_subsequence_1",
    "kind": 2,
    "importPath": "MY_GISTS.89502bf395.longest_increasing_subsequence",
    "description": "MY_GISTS.89502bf395.longest_increasing_subsequence",
    "peekOfCode": "def longest_increasing_subsequence_1(nums):\n    n = len(nums)\n    if n == 0:\n        return 0\n    dp = [1 for i in range(n)]\n    max_val = 1\n    # run dp\n    for i in range(n):\n        for j in range(i):\n            if nums[j] < nums[i]:",
    "detail": "MY_GISTS.89502bf395.longest_increasing_subsequence",
    "documentation": {}
  },
  {
    "label": "longest_increasing_subsequence_2",
    "kind": 2,
    "importPath": "MY_GISTS.89502bf395.longest_increasing_subsequence",
    "description": "MY_GISTS.89502bf395.longest_increasing_subsequence",
    "peekOfCode": "def longest_increasing_subsequence_2(nums):\n    n = len(nums)\n    if n == 0:\n        return 0\n    # the last dp array result in longest increasing subsequence\n    dp = []\n    for i in range(n):\n        idx = binary_search(dp, nums[i])\n        k = len(dp)\n        if idx == k:",
    "detail": "MY_GISTS.89502bf395.longest_increasing_subsequence",
    "documentation": {}
  },
  {
    "label": "binary_search",
    "kind": 2,
    "importPath": "MY_GISTS.89502bf395.longest_increasing_subsequence",
    "description": "MY_GISTS.89502bf395.longest_increasing_subsequence",
    "peekOfCode": "def binary_search(dp, target):\n    l = 0\n    r = len(dp) - 1\n    while l <= r:\n        mid = l + (r - l) // 2\n        if dp[mid][-1] == target:\n            return mid\n        elif dp[mid][-1] < target:\n            l = mid + 1\n        else:",
    "detail": "MY_GISTS.89502bf395.longest_increasing_subsequence",
    "documentation": {}
  },
  {
    "label": "arr",
    "kind": 5,
    "importPath": "MY_GISTS.89502bf395.longest_increasing_subsequence",
    "description": "MY_GISTS.89502bf395.longest_increasing_subsequence",
    "peekOfCode": "arr = [10, 9, 2, 5, 3, 7, 101, 18]\nprint(longest_increasing_subsequence_1(arr))\nprint(longest_increasing_subsequence_2(arr))\n# Test 2\n# Correct result => [1, 2, 3]\narr = [1, 2, 3]\nprint(longest_increasing_subsequence_1(arr))\nprint(longest_increasing_subsequence_2(arr))\n# Test 3\n# Correct result => [1, 2, 5, 7, 12] - one of the possible combinations",
    "detail": "MY_GISTS.89502bf395.longest_increasing_subsequence",
    "documentation": {}
  },
  {
    "label": "arr",
    "kind": 5,
    "importPath": "MY_GISTS.89502bf395.longest_increasing_subsequence",
    "description": "MY_GISTS.89502bf395.longest_increasing_subsequence",
    "peekOfCode": "arr = [1, 2, 3]\nprint(longest_increasing_subsequence_1(arr))\nprint(longest_increasing_subsequence_2(arr))\n# Test 3\n# Correct result => [1, 2, 5, 7, 12] - one of the possible combinations\narr = [10, 1, 3, 8, 2, 0, 5, 7, 12, 3]\nprint(longest_increasing_subsequence_1(arr))\nprint(longest_increasing_subsequence_2(arr))\n# Test 4\n# Correct result => [1, 2, 3, 4, 5, 6]",
    "detail": "MY_GISTS.89502bf395.longest_increasing_subsequence",
    "documentation": {}
  },
  {
    "label": "arr",
    "kind": 5,
    "importPath": "MY_GISTS.89502bf395.longest_increasing_subsequence",
    "description": "MY_GISTS.89502bf395.longest_increasing_subsequence",
    "peekOfCode": "arr = [10, 1, 3, 8, 2, 0, 5, 7, 12, 3]\nprint(longest_increasing_subsequence_1(arr))\nprint(longest_increasing_subsequence_2(arr))\n# Test 4\n# Correct result => [1, 2, 3, 4, 5, 6]\narr = [12, 1, 11, 2, 10, 3, 9, 4, 8, 5, 7, 6]\nprint(longest_increasing_subsequence_1(arr))\nprint(longest_increasing_subsequence_2(arr))\n# Test 5\n# Correct result => [1, 2, 3]",
    "detail": "MY_GISTS.89502bf395.longest_increasing_subsequence",
    "documentation": {}
  },
  {
    "label": "arr",
    "kind": 5,
    "importPath": "MY_GISTS.89502bf395.longest_increasing_subsequence",
    "description": "MY_GISTS.89502bf395.longest_increasing_subsequence",
    "peekOfCode": "arr = [12, 1, 11, 2, 10, 3, 9, 4, 8, 5, 7, 6]\nprint(longest_increasing_subsequence_1(arr))\nprint(longest_increasing_subsequence_2(arr))\n# Test 5\n# Correct result => [1, 2, 3]\narr = [1, 4, 2, 0, 3, 1]\nprint(longest_increasing_subsequence_1(arr))\nprint(longest_increasing_subsequence_2(arr))\n# Test 6\n# Correct result => [3] - one of the possible combinations",
    "detail": "MY_GISTS.89502bf395.longest_increasing_subsequence",
    "documentation": {}
  },
  {
    "label": "arr",
    "kind": 5,
    "importPath": "MY_GISTS.89502bf395.longest_increasing_subsequence",
    "description": "MY_GISTS.89502bf395.longest_increasing_subsequence",
    "peekOfCode": "arr = [1, 4, 2, 0, 3, 1]\nprint(longest_increasing_subsequence_1(arr))\nprint(longest_increasing_subsequence_2(arr))\n# Test 6\n# Correct result => [3] - one of the possible combinations\narr = [7, 5, 5, 5, 5, 5, 3]\nprint(longest_increasing_subsequence_1(arr))\nprint(longest_increasing_subsequence_2(arr))",
    "detail": "MY_GISTS.89502bf395.longest_increasing_subsequence",
    "documentation": {}
  },
  {
    "label": "arr",
    "kind": 5,
    "importPath": "MY_GISTS.89502bf395.longest_increasing_subsequence",
    "description": "MY_GISTS.89502bf395.longest_increasing_subsequence",
    "peekOfCode": "arr = [7, 5, 5, 5, 5, 5, 3]\nprint(longest_increasing_subsequence_1(arr))\nprint(longest_increasing_subsequence_2(arr))",
    "detail": "MY_GISTS.89502bf395.longest_increasing_subsequence",
    "documentation": {}
  },
  {
    "label": "max_profit_with_k_transactions",
    "kind": 2,
    "importPath": "MY_GISTS.89502bf395.max_profit_k_transactions",
    "description": "MY_GISTS.89502bf395.max_profit_k_transactions",
    "peekOfCode": "def max_profit_with_k_transactions(prices, k):\n    days = len(prices)\n    if days < 2:\n        # not enough days for a transaction\n        return 0\n    # transaction = buy + sell (2 separate days)\n    # in a day you can sell and after that buy a share\n    # (according to this, can't exists more transactions than the number of the prices/days)\n    k = min(k, days)\n    # create space optimized dp matrix",
    "detail": "MY_GISTS.89502bf395.max_profit_k_transactions",
    "documentation": {}
  },
  {
    "label": "max_subarray_sum",
    "kind": 2,
    "importPath": "MY_GISTS.89502bf395.max_subarray_sum",
    "description": "MY_GISTS.89502bf395.max_subarray_sum",
    "peekOfCode": "def max_subarray_sum(a):\n    curr_sum = 0\n    max_sum = 0\n    for val in a:\n        # extend the current sum with the curren value; \n        # reset it to 0 if it is smaller than 0, we care only about non-negative sums\n        curr_sum = max(0, curr_sum + val)\n        # check if this is the max sum\n        max_sum = max(max_sum, curr_sum)\n    return max_sum",
    "detail": "MY_GISTS.89502bf395.max_subarray_sum",
    "documentation": {}
  },
  {
    "label": "min_cost_coloring",
    "kind": 2,
    "importPath": "MY_GISTS.89502bf395.min_cost_coloring",
    "description": "MY_GISTS.89502bf395.min_cost_coloring",
    "peekOfCode": "def min_cost_coloring(dp):\n    # no need from a new dp matrix, you can use the input matrix\n    n = len(dp)\n    if n == 0:\n        return 0\n    m = len(dp[0])\n    if m < 2:\n        return -1\n    # save only the smallest 2 costs instead of searching the whole previous array\n    prev_min = [(0, -1), (0, -1)]",
    "detail": "MY_GISTS.89502bf395.min_cost_coloring",
    "documentation": {}
  },
  {
    "label": "num_decodings",
    "kind": 2,
    "importPath": "MY_GISTS.89502bf395.number_of_decodings",
    "description": "MY_GISTS.89502bf395.number_of_decodings",
    "peekOfCode": "def num_decodings(code):\n    n = len(code)\n    dp = [0 for i in range(n)]\n    if n == 0:\n        return 0\n    dp[0] = 1\n    if n == 1:\n        return dp[0]\n    dp[1] = (code[1] != '0') + is_valid(code[0:2])\n    for i in range(2, n):",
    "detail": "MY_GISTS.89502bf395.number_of_decodings",
    "documentation": {}
  },
  {
    "label": "is_valid",
    "kind": 2,
    "importPath": "MY_GISTS.89502bf395.number_of_decodings",
    "description": "MY_GISTS.89502bf395.number_of_decodings",
    "peekOfCode": "def is_valid(code):\n    k = int(code)\n    return (k < 27) and (k > 9)\n###########\n# Testing #\n###########\n# Test 1\n# Correct result => 5\nprint(num_decodings('12151'))\n# Test 2",
    "detail": "MY_GISTS.89502bf395.number_of_decodings",
    "documentation": {}
  },
  {
    "label": "num_smses",
    "kind": 2,
    "importPath": "MY_GISTS.89502bf395.number_of_smses",
    "description": "MY_GISTS.89502bf395.number_of_smses",
    "peekOfCode": "def num_smses(sequence):\n    n = len(sequence)\n    dp = [0] * n\n    # dp starting values, check all 4 possible starting combinations\n    for i in range(min(4, n)):\n        if is_valid(sequence[0 : i+1]):\n            dp[i] = 1\n    # run dp\n    for i in range(1, n):\n        # check all 4 possible combinations (x, xx, xxx, xxxx)",
    "detail": "MY_GISTS.89502bf395.number_of_smses",
    "documentation": {}
  },
  {
    "label": "is_valid",
    "kind": 2,
    "importPath": "MY_GISTS.89502bf395.number_of_smses",
    "description": "MY_GISTS.89502bf395.number_of_smses",
    "peekOfCode": "def is_valid(sequence):\n    ch = sequence[0]\n    for c in sequence:\n        if c != ch:\n            return False\n    if sequence == '0':\n        return True\n    if ((ch >= '2' and ch <= '6') or ch == '8') and (len(sequence) < 4):\n        return True\n    if (ch == '7') or (ch == '9'):",
    "detail": "MY_GISTS.89502bf395.number_of_smses",
    "documentation": {}
  },
  {
    "label": "ordered_digits",
    "kind": 2,
    "importPath": "MY_GISTS.89502bf395.ordered_digits",
    "description": "MY_GISTS.89502bf395.ordered_digits",
    "peekOfCode": "def ordered_digits(number):\n    n = len(number)\n    dp = [[0 for j in range(10)] for i in range(2)]\n    for i in range(n):\n        min_prev = float('inf')\n        for j in range(10):\n            # find the min value from the previous digit and add it to the current value\n            min_prev = min(min_prev, dp[(i - 1) % 2][j])\n            # compute diff between the current digit and wanted digit\n            diff = abs(j - int(number[i]))",
    "detail": "MY_GISTS.89502bf395.ordered_digits",
    "documentation": {}
  },
  {
    "label": "split_coins",
    "kind": 2,
    "importPath": "MY_GISTS.89502bf395.split_coins",
    "description": "MY_GISTS.89502bf395.split_coins",
    "peekOfCode": "def split_coins(coins):\n    if len(coins) == 0:\n        return -1\n    full_sum = sum(coins)\n    half_sum = full_sum // 2 + 1\n    dp = [False]*half_sum\n    dp[0] = True\n    for c in coins:\n        for i in range(half_sum - 1, -1, -1):\n            if (i >= c) and dp[i - c]:",
    "detail": "MY_GISTS.89502bf395.split_coins",
    "documentation": {}
  },
  {
    "label": "sum_non_adjacent",
    "kind": 2,
    "importPath": "MY_GISTS.89502bf395.sum_non-adjecent",
    "description": "MY_GISTS.89502bf395.sum_non-adjecent",
    "peekOfCode": "def sum_non_adjacent(arr):\n    n = len(arr)\n    # from the dp matrix you only need the last 3 sums\n    sums = [0, 0, 0]\n    # TODO: refactor these if-elses, those are to skip using of DP matrix\n    if n == 0:\n        return 0\n    # if negative or zero, the sum will be 0\n    sums[0] = max(arr[0], 0)\n    if n == 1:",
    "detail": "MY_GISTS.89502bf395.sum_non-adjecent",
    "documentation": {}
  },
  {
    "label": "operations",
    "kind": 2,
    "importPath": "MY_GISTS.89502bf395.transform_number_ascending_digits",
    "description": "MY_GISTS.89502bf395.transform_number_ascending_digits",
    "peekOfCode": "def operations(number):\n    n = len(number)\n    diff = lambda i, j: abs(j - int(number[i]))\n    # compute diff between the current digit and wanted digit, and fill the dp\n    prev_dp = [min(diff(0, i), 10 - diff(0, i)) for i in range(10)]\n    # go through all digits and see all possible combinations using dynamic programming\n    for i in range(1, n):\n        curr_dp = [min(diff(i, j), 10 - diff(i, j)) for j in range(10)]\n        for j in range(10):\n            # find the min value for the previous digit and add it to the current value",
    "detail": "MY_GISTS.89502bf395.transform_number_ascending_digits",
    "documentation": {}
  },
  {
    "label": "word_break",
    "kind": 2,
    "importPath": "MY_GISTS.89502bf395.word_break",
    "description": "MY_GISTS.89502bf395.word_break",
    "peekOfCode": "def word_break(sentence, words):\n    n, w = len(sentence), len(words)\n    if (n == 0) or (w == 0):\n        return None\n    dw = [-1 for i in range(n + 1)]\n    dp = [math.inf for i in range(n + 1)]\n    dp[0] = 0\n    matched_indices = [0]\n    dic = {}        # save all words in dictionary for faster searching\n    max_word = 0    # length of the max word",
    "detail": "MY_GISTS.89502bf395.word_break",
    "documentation": {}
  },
  {
    "label": "word_break_backtracking",
    "kind": 2,
    "importPath": "MY_GISTS.89502bf395.word_break",
    "description": "MY_GISTS.89502bf395.word_break",
    "peekOfCode": "def word_break_backtracking(sentence, words):\n    all_words = set()\n    # create a set from all words\n    for i in range(len(words)):\n        all_words.add(words[i])\n    n = len(sentence)\n    i = 0\n    subsentence = ''\n    result = deque()\n    # go letter by letter and save the new letter in subsentence",
    "detail": "MY_GISTS.89502bf395.word_break",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.battleplayer",
    "description": "MY_GISTS.8b2c5f97ac.battleplayer",
    "peekOfCode": "def main(args):\n    cmd = args['--server_command']\n    sizex, sizey = [int(i) for i in args['--size'].split(',')]\n    delay = float(args['--delay'])\n    if '--size' not in cmd:\n        cmd += f\" --size={sizex},{sizey}\"\n    smart = args['--smart']\n    if not cmd: return 1\n    pipe = Popen(cmd.split(' '), stdout=PIPE, stdin=PIPE, bufsize=1, close_fds=ON_POSIX, universal_newlines=True)\n    child_stdin, child_stdout = pipe.stdin, pipe.stdout",
    "detail": "MY_GISTS.8b2c5f97ac.battleplayer",
    "documentation": {}
  },
  {
    "label": "__author__",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.battleplayer",
    "description": "MY_GISTS.8b2c5f97ac.battleplayer",
    "peekOfCode": "__author__ = \"Lilian Besson\"\n__name_of_app__ = \"Battle Client\"\n__version__ = \"0.1\"\nimport sys\nfrom collections import defaultdict\nfrom time import sleep\nfrom random import choice\nfrom docopt import docopt\nimport numpy as np\n# https://stackoverflow.com/a/4896288/5889533",
    "detail": "MY_GISTS.8b2c5f97ac.battleplayer",
    "documentation": {}
  },
  {
    "label": "__name_of_app__",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.battleplayer",
    "description": "MY_GISTS.8b2c5f97ac.battleplayer",
    "peekOfCode": "__name_of_app__ = \"Battle Client\"\n__version__ = \"0.1\"\nimport sys\nfrom collections import defaultdict\nfrom time import sleep\nfrom random import choice\nfrom docopt import docopt\nimport numpy as np\n# https://stackoverflow.com/a/4896288/5889533\nfrom subprocess import PIPE, Popen",
    "detail": "MY_GISTS.8b2c5f97ac.battleplayer",
    "documentation": {}
  },
  {
    "label": "__version__",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.battleplayer",
    "description": "MY_GISTS.8b2c5f97ac.battleplayer",
    "peekOfCode": "__version__ = \"0.1\"\nimport sys\nfrom collections import defaultdict\nfrom time import sleep\nfrom random import choice\nfrom docopt import docopt\nimport numpy as np\n# https://stackoverflow.com/a/4896288/5889533\nfrom subprocess import PIPE, Popen\nON_POSIX = 'posix' in sys.builtin_module_names",
    "detail": "MY_GISTS.8b2c5f97ac.battleplayer",
    "documentation": {}
  },
  {
    "label": "ON_POSIX",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.battleplayer",
    "description": "MY_GISTS.8b2c5f97ac.battleplayer",
    "peekOfCode": "ON_POSIX = 'posix' in sys.builtin_module_names\nfrom battleserver import ships, DEFAULT_X, DEFAULT_Y\nlength_of_ships = defaultdict(lambda: min(ships.values()))\nlength_of_ships.update({k.lower(): v for k,v in ships.items()})\n# --- Documentation\ndocumentation = f\"\"\"{__name_of_app__}.\nUsage:\n    battleplayer.py [--delay=<t>] [--smart] [--size=<xy>] [--server_command=<cmd>]\n    battleplayer.py (-h | --help)\n    battleplayer.py --version",
    "detail": "MY_GISTS.8b2c5f97ac.battleplayer",
    "documentation": {}
  },
  {
    "label": "length_of_ships",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.battleplayer",
    "description": "MY_GISTS.8b2c5f97ac.battleplayer",
    "peekOfCode": "length_of_ships = defaultdict(lambda: min(ships.values()))\nlength_of_ships.update({k.lower(): v for k,v in ships.items()})\n# --- Documentation\ndocumentation = f\"\"\"{__name_of_app__}.\nUsage:\n    battleplayer.py [--delay=<t>] [--smart] [--size=<xy>] [--server_command=<cmd>]\n    battleplayer.py (-h | --help)\n    battleplayer.py --version\nOptions:\n    -h --help       Show this screen.",
    "detail": "MY_GISTS.8b2c5f97ac.battleplayer",
    "documentation": {}
  },
  {
    "label": "documentation",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.battleplayer",
    "description": "MY_GISTS.8b2c5f97ac.battleplayer",
    "peekOfCode": "documentation = f\"\"\"{__name_of_app__}.\nUsage:\n    battleplayer.py [--delay=<t>] [--smart] [--size=<xy>] [--server_command=<cmd>]\n    battleplayer.py (-h | --help)\n    battleplayer.py --version\nOptions:\n    -h --help       Show this screen.\n    --version       Show version.\n    --server_command=<cmd>  Play against a server launched by 'cmd' [default: ./battleserver.py --random --play].\n    --size=<xy>     Set size of the board [default: {DEFAULT_X},{DEFAULT_Y}].",
    "detail": "MY_GISTS.8b2c5f97ac.battleplayer",
    "documentation": {}
  },
  {
    "label": "Board",
    "kind": 6,
    "importPath": "MY_GISTS.8b2c5f97ac.battleserver",
    "description": "MY_GISTS.8b2c5f97ac.battleserver",
    "peekOfCode": "class Board(object):\n    def __init__(self, x=DEFAULT_X, y=DEFAULT_Y):\n        self.x = y\n        self.y = x\n        self.board = np.zeros((x, y), dtype=np.uint8)\n    def __getitem__(self, *args, **kwargs): return self.board.__getitem__(*args, **kwargs)\n    def __setitem__(self, *args, **kwargs): return self.board.__setitem__(*args, **kwargs)\n    def is_empty(self):\n        return np.all(self.board == 0)\n    def get_ship(self, x, y):",
    "detail": "MY_GISTS.8b2c5f97ac.battleserver",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.battleserver",
    "description": "MY_GISTS.8b2c5f97ac.battleserver",
    "peekOfCode": "def main(args):\n    # pprint(args)  # DEBUG\n    sizex, sizey = [int(i) for i in args['--size'].split(',')]\n    if min(sizex, sizey) < max_length:\n        print(f\"Error: <xy> both must be >= {max_length}.\")\n        return 1\n    board = Board(x=sizex, y=sizey)\n    for name in ships.keys():\n        if args[f'--{name.lower()}']:\n            if args[f'--{name.lower()}'] == 'r' or args['--random']:",
    "detail": "MY_GISTS.8b2c5f97ac.battleserver",
    "documentation": {}
  },
  {
    "label": "__author__",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.battleserver",
    "description": "MY_GISTS.8b2c5f97ac.battleserver",
    "peekOfCode": "__author__ = \"Lilian Besson\"\n__name_of_app__ = \"Battle Server\"\n__version__ = \"0.1\"\nimport sys\nfrom string import ascii_uppercase\nfrom collections import OrderedDict\nfrom pprint import pprint\nfrom docopt import docopt\nimport numpy as np\n# --- Ships",
    "detail": "MY_GISTS.8b2c5f97ac.battleserver",
    "documentation": {}
  },
  {
    "label": "__name_of_app__",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.battleserver",
    "description": "MY_GISTS.8b2c5f97ac.battleserver",
    "peekOfCode": "__name_of_app__ = \"Battle Server\"\n__version__ = \"0.1\"\nimport sys\nfrom string import ascii_uppercase\nfrom collections import OrderedDict\nfrom pprint import pprint\nfrom docopt import docopt\nimport numpy as np\n# --- Ships\nDEFAULT_X = DEFAULT_Y = 5",
    "detail": "MY_GISTS.8b2c5f97ac.battleserver",
    "documentation": {}
  },
  {
    "label": "__version__",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.battleserver",
    "description": "MY_GISTS.8b2c5f97ac.battleserver",
    "peekOfCode": "__version__ = \"0.1\"\nimport sys\nfrom string import ascii_uppercase\nfrom collections import OrderedDict\nfrom pprint import pprint\nfrom docopt import docopt\nimport numpy as np\n# --- Ships\nDEFAULT_X = DEFAULT_Y = 5\nships = OrderedDict({",
    "detail": "MY_GISTS.8b2c5f97ac.battleserver",
    "documentation": {}
  },
  {
    "label": "DEFAULT_X",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.battleserver",
    "description": "MY_GISTS.8b2c5f97ac.battleserver",
    "peekOfCode": "DEFAULT_X = DEFAULT_Y = 5\nships = OrderedDict({\n    \"Carrier\": 5,\n    \"Battleship\": 4,\n    \"cRuiser\": 3,\n    \"Submarine\": 3,\n    \"Destroyer\": 2,\n})\nmax_length = max(l for l in ships.values())\nsymbol_of_ship = OrderedDict({",
    "detail": "MY_GISTS.8b2c5f97ac.battleserver",
    "documentation": {}
  },
  {
    "label": "ships",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.battleserver",
    "description": "MY_GISTS.8b2c5f97ac.battleserver",
    "peekOfCode": "ships = OrderedDict({\n    \"Carrier\": 5,\n    \"Battleship\": 4,\n    \"cRuiser\": 3,\n    \"Submarine\": 3,\n    \"Destroyer\": 2,\n})\nmax_length = max(l for l in ships.values())\nsymbol_of_ship = OrderedDict({\n    name: str.lower(list(set(name).intersection(ascii_uppercase))[0])",
    "detail": "MY_GISTS.8b2c5f97ac.battleserver",
    "documentation": {}
  },
  {
    "label": "max_length",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.battleserver",
    "description": "MY_GISTS.8b2c5f97ac.battleserver",
    "peekOfCode": "max_length = max(l for l in ships.values())\nsymbol_of_ship = OrderedDict({\n    name: str.lower(list(set(name).intersection(ascii_uppercase))[0])\n    for name in ships.keys()\n})\nship_of_symbol = OrderedDict({v: k for k, v in symbol_of_ship.items()})\n# --- Documentation\ndocumentation = f\"\"\"{__name_of_app__}.\nUsage:\n    battleserver.py {' '.join([f'[--{name.lower()}=<x,y,dir>]' for name in ships.keys()])} [--random] [--size=<xy>] (--show | --play)",
    "detail": "MY_GISTS.8b2c5f97ac.battleserver",
    "documentation": {}
  },
  {
    "label": "symbol_of_ship",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.battleserver",
    "description": "MY_GISTS.8b2c5f97ac.battleserver",
    "peekOfCode": "symbol_of_ship = OrderedDict({\n    name: str.lower(list(set(name).intersection(ascii_uppercase))[0])\n    for name in ships.keys()\n})\nship_of_symbol = OrderedDict({v: k for k, v in symbol_of_ship.items()})\n# --- Documentation\ndocumentation = f\"\"\"{__name_of_app__}.\nUsage:\n    battleserver.py {' '.join([f'[--{name.lower()}=<x,y,dir>]' for name in ships.keys()])} [--random] [--size=<xy>] (--show | --play)\n    battleserver.py (-h | --help)",
    "detail": "MY_GISTS.8b2c5f97ac.battleserver",
    "documentation": {}
  },
  {
    "label": "ship_of_symbol",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.battleserver",
    "description": "MY_GISTS.8b2c5f97ac.battleserver",
    "peekOfCode": "ship_of_symbol = OrderedDict({v: k for k, v in symbol_of_ship.items()})\n# --- Documentation\ndocumentation = f\"\"\"{__name_of_app__}.\nUsage:\n    battleserver.py {' '.join([f'[--{name.lower()}=<x,y,dir>]' for name in ships.keys()])} [--random] [--size=<xy>] (--show | --play)\n    battleserver.py (-h | --help)\n    battleserver.py --version\nOptions:\n    -h --help       Show this screen.\n    --version       Show version.",
    "detail": "MY_GISTS.8b2c5f97ac.battleserver",
    "documentation": {}
  },
  {
    "label": "documentation",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.battleserver",
    "description": "MY_GISTS.8b2c5f97ac.battleserver",
    "peekOfCode": "documentation = f\"\"\"{__name_of_app__}.\nUsage:\n    battleserver.py {' '.join([f'[--{name.lower()}=<x,y,dir>]' for name in ships.keys()])} [--random] [--size=<xy>] (--show | --play)\n    battleserver.py (-h | --help)\n    battleserver.py --version\nOptions:\n    -h --help       Show this screen.\n    --version       Show version.\n    --show          Print the board.\n    --play          Let you play a \"one player\" game interactively.",
    "detail": "MY_GISTS.8b2c5f97ac.battleserver",
    "documentation": {}
  },
  {
    "label": "symbol_of_uint8",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.battleserver",
    "description": "MY_GISTS.8b2c5f97ac.battleserver",
    "peekOfCode": "symbol_of_uint8 = OrderedDict({0: '-'})\nsymbol_of_uint8.update({\n    i+1: symbol_of_ship[name]\n    for i, name in enumerate(ships.keys())\n})\nuint8_of_symbol = OrderedDict({v: k for k, v in symbol_of_uint8.items()})\nclass Board(object):\n    def __init__(self, x=DEFAULT_X, y=DEFAULT_Y):\n        self.x = y\n        self.y = x",
    "detail": "MY_GISTS.8b2c5f97ac.battleserver",
    "documentation": {}
  },
  {
    "label": "uint8_of_symbol",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.battleserver",
    "description": "MY_GISTS.8b2c5f97ac.battleserver",
    "peekOfCode": "uint8_of_symbol = OrderedDict({v: k for k, v in symbol_of_uint8.items()})\nclass Board(object):\n    def __init__(self, x=DEFAULT_X, y=DEFAULT_Y):\n        self.x = y\n        self.y = x\n        self.board = np.zeros((x, y), dtype=np.uint8)\n    def __getitem__(self, *args, **kwargs): return self.board.__getitem__(*args, **kwargs)\n    def __setitem__(self, *args, **kwargs): return self.board.__setitem__(*args, **kwargs)\n    def is_empty(self):\n        return np.all(self.board == 0)",
    "detail": "MY_GISTS.8b2c5f97ac.battleserver",
    "documentation": {}
  },
  {
    "label": "Entry",
    "kind": 6,
    "importPath": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "description": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "peekOfCode": "class Entry(object):\n\tdef __init__(self):\n\t\tself.entry_type = 'UNKNOWN'\n\t\tself.entry_name = ''\n\t\tself.rows = { }\n\tdef ParseFromString(self, text):\n\t\tm = re.match('\\s*@\\s*(\\w+)\\s*({)\\s*', text)\n\t\tif not m:\n\t\t\treturn None\n\t\tself.entry_type = m.group(1)",
    "detail": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "Format",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "description": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "peekOfCode": "def Format(text):\n\treturn ' '.join(text.split())\ndef Capitalize(text):\n\tword_start = True\n\ts = ''\n\tfor c in text.lower():\n\t\tif word_start:\n\t\t\tc = c.upper()\n\t\tword_start = not c.isalpha()\n\t\ts = s + c",
    "detail": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "Capitalize",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "description": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "peekOfCode": "def Capitalize(text):\n\tword_start = True\n\ts = ''\n\tfor c in text.lower():\n\t\tif word_start:\n\t\t\tc = c.upper()\n\t\tword_start = not c.isalpha()\n\t\ts = s + c\n\treturn s\ndef FindMatchingParenthesis(text):",
    "detail": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "FindMatchingParenthesis",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "description": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "peekOfCode": "def FindMatchingParenthesis(text):\n\tnesting = 1\n\tend = 0\n\tfor i in range(1, len(text)):\n\t\tif text[i] == '{':\n\t\t\tnesting = nesting + 1\n\t\telif text[i] == '}':\n\t\t\tnesting = nesting - 1\n\t\tend = i\n\t\tif nesting == 0:",
    "detail": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "RemoveBraces",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "description": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "peekOfCode": "def RemoveBraces(text):\n\tif text[0] == '{':\n\t\t text = text[1:]\n\tif text[-1] == '}':\n\t\t text = text[:-1]\n\treturn text\ndef NormalizeAuthor(text):\n\tparts = text.split(',', 1)\n\tif len(parts) >= 2:\n\t\treturn parts[1].strip() + ' ' + parts[0].strip()",
    "detail": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "NormalizeAuthor",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "description": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "peekOfCode": "def NormalizeAuthor(text):\n\tparts = text.split(',', 1)\n\tif len(parts) >= 2:\n\t\treturn parts[1].strip() + ' ' + parts[0].strip()\n\treturn parts[0].strip()\ndef NormalizeAuthors(text):\n\tauthors = text.split(' and ')\n\treturn ' and '.join([NormalizeAuthor(author) for author in authors])\ndef NormalizePages(text):\n\tparts = text.split('--', 1)",
    "detail": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "NormalizeAuthors",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "description": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "peekOfCode": "def NormalizeAuthors(text):\n\tauthors = text.split(' and ')\n\treturn ' and '.join([NormalizeAuthor(author) for author in authors])\ndef NormalizePages(text):\n\tparts = text.split('--', 1)\n\tif not '--' in text:\n\t\tparts = text.split('-', 1)\n\tnormalized = parts[0].strip()\n\tif len(parts) >= 2:\n\t\tnormalized = parts[0].strip() + '--' + parts[1].strip()",
    "detail": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "NormalizePages",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "description": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "peekOfCode": "def NormalizePages(text):\n\tparts = text.split('--', 1)\n\tif not '--' in text:\n\t\tparts = text.split('-', 1)\n\tnormalized = parts[0].strip()\n\tif len(parts) >= 2:\n\t\tnormalized = parts[0].strip() + '--' + parts[1].strip()\n\treturn normalized\ndef SafeParseInt(text):\n\ttry:",
    "detail": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "SafeParseInt",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "description": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "peekOfCode": "def SafeParseInt(text):\n\ttry:\n        \treturn int(text)\n\texcept ValueError:\n\t\treturn None\ndef NormalizeYear(text):\n\tyear = SafeParseInt(text)\n\tif not year:\n\t\treturn text.strip()\n\tif (year >= 10) and (year <= 99):",
    "detail": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "NormalizeYear",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "description": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "peekOfCode": "def NormalizeYear(text):\n\tyear = SafeParseInt(text)\n\tif not year:\n\t\treturn text.strip()\n\tif (year >= 10) and (year <= 99):\n\t\treturn str(1900 + year)\n\treturn str(year)\ndef NormalizeMonth(text):\n\tprefix = text[:3].lower()\n\tif prefix in months:",
    "detail": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "NormalizeMonth",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "description": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "peekOfCode": "def NormalizeMonth(text):\n\tprefix = text[:3].lower()\n\tif prefix in months:\n\t\treturn months[prefix]\n\treturn text\n# An entry object\nclass Entry(object):\n\tdef __init__(self):\n\t\tself.entry_type = 'UNKNOWN'\n\t\tself.entry_name = ''",
    "detail": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "ParseEntries",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "description": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "peekOfCode": "def ParseEntries(text):\n\tentries = []\n\twhile True:\n\t\te = Entry()\n\t\ttext = e.ParseFromString(text)\n\t\tif not text:\n\t\t\tbreak\n\t\tentries.append(e)\n\treturn entries\ndef SortEntries(entries):",
    "detail": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "SortEntries",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "description": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "peekOfCode": "def SortEntries(entries):\n\tentries.sort(key=lambda e: e.entry_name)\n\tentries.sort(key=lambda e: e.entry_type)\n\tentries.sort(key=lambda e: e.SortKey())\n\treturn entries\ndef ReadFile():\n\tlines = []\n\twith open(sys.argv[1], 'r') as f:\n\t\tfor line in f:\n\t\t\tif line.strip().startswith('%'):",
    "detail": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "ReadFile",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "description": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "peekOfCode": "def ReadFile():\n\tlines = []\n\twith open(sys.argv[1], 'r') as f:\n\t\tfor line in f:\n\t\t\tif line.strip().startswith('%'):\n\t\t\t\tprint(line.strip())\n\t\t\telse:\n\t\t\t\tlines.append(line)\n\ttext = '\\n'.join(lines)\n\treturn text",
    "detail": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "description": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "peekOfCode": "def main():\n\ttext = ReadFile()\n\tentries = ParseEntries(text)\n\tentries = SortEntries(entries)\n\tfor entry in entries:\n\t\tprint(entry.ToString())\nif __name__ == '__main__':\n    main()",
    "detail": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "months",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "description": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "peekOfCode": "months = {\n                'jan'  :  'January',\n                'feb'  :  'February',\n                'mar'  :  'March',\n                'apr'  :  'April',\n                'may'  :  'May',\n                'jun'  :  'June',\n                'jul'  :  'July',\n                'aug'  :  'August',\n                'sep'  :  'September',",
    "detail": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\tword_start",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "description": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "peekOfCode": "\tword_start = True\n\ts = ''\n\tfor c in text.lower():\n\t\tif word_start:\n\t\t\tc = c.upper()\n\t\tword_start = not c.isalpha()\n\t\ts = s + c\n\treturn s\ndef FindMatchingParenthesis(text):\n\tnesting = 1",
    "detail": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\ts",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "description": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "peekOfCode": "\ts = ''\n\tfor c in text.lower():\n\t\tif word_start:\n\t\t\tc = c.upper()\n\t\tword_start = not c.isalpha()\n\t\ts = s + c\n\treturn s\ndef FindMatchingParenthesis(text):\n\tnesting = 1\n\tend = 0",
    "detail": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\t\t\tc",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "description": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "peekOfCode": "\t\t\tc = c.upper()\n\t\tword_start = not c.isalpha()\n\t\ts = s + c\n\treturn s\ndef FindMatchingParenthesis(text):\n\tnesting = 1\n\tend = 0\n\tfor i in range(1, len(text)):\n\t\tif text[i] == '{':\n\t\t\tnesting = nesting + 1",
    "detail": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\t\tword_start",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "description": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "peekOfCode": "\t\tword_start = not c.isalpha()\n\t\ts = s + c\n\treturn s\ndef FindMatchingParenthesis(text):\n\tnesting = 1\n\tend = 0\n\tfor i in range(1, len(text)):\n\t\tif text[i] == '{':\n\t\t\tnesting = nesting + 1\n\t\telif text[i] == '}':",
    "detail": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\t\ts",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "description": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "peekOfCode": "\t\ts = s + c\n\treturn s\ndef FindMatchingParenthesis(text):\n\tnesting = 1\n\tend = 0\n\tfor i in range(1, len(text)):\n\t\tif text[i] == '{':\n\t\t\tnesting = nesting + 1\n\t\telif text[i] == '}':\n\t\t\tnesting = nesting - 1",
    "detail": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\tnesting",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "description": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "peekOfCode": "\tnesting = 1\n\tend = 0\n\tfor i in range(1, len(text)):\n\t\tif text[i] == '{':\n\t\t\tnesting = nesting + 1\n\t\telif text[i] == '}':\n\t\t\tnesting = nesting - 1\n\t\tend = i\n\t\tif nesting == 0:\n\t\t\tbreak",
    "detail": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\tend",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "description": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "peekOfCode": "\tend = 0\n\tfor i in range(1, len(text)):\n\t\tif text[i] == '{':\n\t\t\tnesting = nesting + 1\n\t\telif text[i] == '}':\n\t\t\tnesting = nesting - 1\n\t\tend = i\n\t\tif nesting == 0:\n\t\t\tbreak\n\tend = end + 1",
    "detail": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\t\t\tnesting",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "description": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "peekOfCode": "\t\t\tnesting = nesting + 1\n\t\telif text[i] == '}':\n\t\t\tnesting = nesting - 1\n\t\tend = i\n\t\tif nesting == 0:\n\t\t\tbreak\n\tend = end + 1\n\treturn (text[:end], text[end:])\ndef RemoveBraces(text):\n\tif text[0] == '{':",
    "detail": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\t\t\tnesting",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "description": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "peekOfCode": "\t\t\tnesting = nesting - 1\n\t\tend = i\n\t\tif nesting == 0:\n\t\t\tbreak\n\tend = end + 1\n\treturn (text[:end], text[end:])\ndef RemoveBraces(text):\n\tif text[0] == '{':\n\t\t text = text[1:]\n\tif text[-1] == '}':",
    "detail": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\t\tend",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "description": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "peekOfCode": "\t\tend = i\n\t\tif nesting == 0:\n\t\t\tbreak\n\tend = end + 1\n\treturn (text[:end], text[end:])\ndef RemoveBraces(text):\n\tif text[0] == '{':\n\t\t text = text[1:]\n\tif text[-1] == '}':\n\t\t text = text[:-1]",
    "detail": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\tend",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "description": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "peekOfCode": "\tend = end + 1\n\treturn (text[:end], text[end:])\ndef RemoveBraces(text):\n\tif text[0] == '{':\n\t\t text = text[1:]\n\tif text[-1] == '}':\n\t\t text = text[:-1]\n\treturn text\ndef NormalizeAuthor(text):\n\tparts = text.split(',', 1)",
    "detail": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\tparts",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "description": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "peekOfCode": "\tparts = text.split(',', 1)\n\tif len(parts) >= 2:\n\t\treturn parts[1].strip() + ' ' + parts[0].strip()\n\treturn parts[0].strip()\ndef NormalizeAuthors(text):\n\tauthors = text.split(' and ')\n\treturn ' and '.join([NormalizeAuthor(author) for author in authors])\ndef NormalizePages(text):\n\tparts = text.split('--', 1)\n\tif not '--' in text:",
    "detail": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\tauthors",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "description": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "peekOfCode": "\tauthors = text.split(' and ')\n\treturn ' and '.join([NormalizeAuthor(author) for author in authors])\ndef NormalizePages(text):\n\tparts = text.split('--', 1)\n\tif not '--' in text:\n\t\tparts = text.split('-', 1)\n\tnormalized = parts[0].strip()\n\tif len(parts) >= 2:\n\t\tnormalized = parts[0].strip() + '--' + parts[1].strip()\n\treturn normalized",
    "detail": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\tparts",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "description": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "peekOfCode": "\tparts = text.split('--', 1)\n\tif not '--' in text:\n\t\tparts = text.split('-', 1)\n\tnormalized = parts[0].strip()\n\tif len(parts) >= 2:\n\t\tnormalized = parts[0].strip() + '--' + parts[1].strip()\n\treturn normalized\ndef SafeParseInt(text):\n\ttry:\n        \treturn int(text)",
    "detail": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\t\tparts",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "description": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "peekOfCode": "\t\tparts = text.split('-', 1)\n\tnormalized = parts[0].strip()\n\tif len(parts) >= 2:\n\t\tnormalized = parts[0].strip() + '--' + parts[1].strip()\n\treturn normalized\ndef SafeParseInt(text):\n\ttry:\n        \treturn int(text)\n\texcept ValueError:\n\t\treturn None",
    "detail": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\tnormalized",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "description": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "peekOfCode": "\tnormalized = parts[0].strip()\n\tif len(parts) >= 2:\n\t\tnormalized = parts[0].strip() + '--' + parts[1].strip()\n\treturn normalized\ndef SafeParseInt(text):\n\ttry:\n        \treturn int(text)\n\texcept ValueError:\n\t\treturn None\ndef NormalizeYear(text):",
    "detail": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\t\tnormalized",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "description": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "peekOfCode": "\t\tnormalized = parts[0].strip() + '--' + parts[1].strip()\n\treturn normalized\ndef SafeParseInt(text):\n\ttry:\n        \treturn int(text)\n\texcept ValueError:\n\t\treturn None\ndef NormalizeYear(text):\n\tyear = SafeParseInt(text)\n\tif not year:",
    "detail": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\tyear",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "description": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "peekOfCode": "\tyear = SafeParseInt(text)\n\tif not year:\n\t\treturn text.strip()\n\tif (year >= 10) and (year <= 99):\n\t\treturn str(1900 + year)\n\treturn str(year)\ndef NormalizeMonth(text):\n\tprefix = text[:3].lower()\n\tif prefix in months:\n\t\treturn months[prefix]",
    "detail": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\tprefix",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "description": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "peekOfCode": "\tprefix = text[:3].lower()\n\tif prefix in months:\n\t\treturn months[prefix]\n\treturn text\n# An entry object\nclass Entry(object):\n\tdef __init__(self):\n\t\tself.entry_type = 'UNKNOWN'\n\t\tself.entry_name = ''\n\t\tself.rows = { }",
    "detail": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\t\tself.entry_type",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "description": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "peekOfCode": "\t\tself.entry_type = 'UNKNOWN'\n\t\tself.entry_name = ''\n\t\tself.rows = { }\n\tdef ParseFromString(self, text):\n\t\tm = re.match('\\s*@\\s*(\\w+)\\s*({)\\s*', text)\n\t\tif not m:\n\t\t\treturn None\n\t\tself.entry_type = m.group(1)\n\t\tself.entry_type = self.NormalizedEntryType()\n\t\ttext = text[m.end(2):]",
    "detail": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\t\tself.entry_name",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "description": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "peekOfCode": "\t\tself.entry_name = ''\n\t\tself.rows = { }\n\tdef ParseFromString(self, text):\n\t\tm = re.match('\\s*@\\s*(\\w+)\\s*({)\\s*', text)\n\t\tif not m:\n\t\t\treturn None\n\t\tself.entry_type = m.group(1)\n\t\tself.entry_type = self.NormalizedEntryType()\n\t\ttext = text[m.end(2):]\n\t\ttext, rest = FindMatchingParenthesis(text)",
    "detail": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\t\tself.rows",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "description": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "peekOfCode": "\t\tself.rows = { }\n\tdef ParseFromString(self, text):\n\t\tm = re.match('\\s*@\\s*(\\w+)\\s*({)\\s*', text)\n\t\tif not m:\n\t\t\treturn None\n\t\tself.entry_type = m.group(1)\n\t\tself.entry_type = self.NormalizedEntryType()\n\t\ttext = text[m.end(2):]\n\t\ttext, rest = FindMatchingParenthesis(text)\n\t\tm = re.match('\\s*([^\\s]+)\\s*,\\s*', text)",
    "detail": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\t\tm",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "description": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "peekOfCode": "\t\tm = re.match('\\s*@\\s*(\\w+)\\s*({)\\s*', text)\n\t\tif not m:\n\t\t\treturn None\n\t\tself.entry_type = m.group(1)\n\t\tself.entry_type = self.NormalizedEntryType()\n\t\ttext = text[m.end(2):]\n\t\ttext, rest = FindMatchingParenthesis(text)\n\t\tm = re.match('\\s*([^\\s]+)\\s*,\\s*', text)\n\t\tif m:\n\t\t\tself.entry_name = m.group(1)",
    "detail": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\t\tself.entry_type",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "description": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "peekOfCode": "\t\tself.entry_type = m.group(1)\n\t\tself.entry_type = self.NormalizedEntryType()\n\t\ttext = text[m.end(2):]\n\t\ttext, rest = FindMatchingParenthesis(text)\n\t\tm = re.match('\\s*([^\\s]+)\\s*,\\s*', text)\n\t\tif m:\n\t\t\tself.entry_name = m.group(1)\n\t\t\ttext = text[m.end():]\n\t\twhile text:\n\t\t\ttext = self.ParseRow(text)",
    "detail": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\t\tself.entry_type",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "description": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "peekOfCode": "\t\tself.entry_type = self.NormalizedEntryType()\n\t\ttext = text[m.end(2):]\n\t\ttext, rest = FindMatchingParenthesis(text)\n\t\tm = re.match('\\s*([^\\s]+)\\s*,\\s*', text)\n\t\tif m:\n\t\t\tself.entry_name = m.group(1)\n\t\t\ttext = text[m.end():]\n\t\twhile text:\n\t\t\ttext = self.ParseRow(text)\n\t\treturn rest",
    "detail": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\t\ttext",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "description": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "peekOfCode": "\t\ttext = text[m.end(2):]\n\t\ttext, rest = FindMatchingParenthesis(text)\n\t\tm = re.match('\\s*([^\\s]+)\\s*,\\s*', text)\n\t\tif m:\n\t\t\tself.entry_name = m.group(1)\n\t\t\ttext = text[m.end():]\n\t\twhile text:\n\t\t\ttext = self.ParseRow(text)\n\t\treturn rest\n\tdef ParseRow(self, text):",
    "detail": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\t\tm",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "description": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "peekOfCode": "\t\tm = re.match('\\s*([^\\s]+)\\s*,\\s*', text)\n\t\tif m:\n\t\t\tself.entry_name = m.group(1)\n\t\t\ttext = text[m.end():]\n\t\twhile text:\n\t\t\ttext = self.ParseRow(text)\n\t\treturn rest\n\tdef ParseRow(self, text):\n\t\tm = re.match('\\s*,?\\s*([\\w-]+)\\s*=\\s*', text)\n\t\tif not m:",
    "detail": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\t\t\tself.entry_name",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "description": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "peekOfCode": "\t\t\tself.entry_name = m.group(1)\n\t\t\ttext = text[m.end():]\n\t\twhile text:\n\t\t\ttext = self.ParseRow(text)\n\t\treturn rest\n\tdef ParseRow(self, text):\n\t\tm = re.match('\\s*,?\\s*([\\w-]+)\\s*=\\s*', text)\n\t\tif not m:\n\t\t\treturn None\n\t\tkey = m.group(1)",
    "detail": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\t\t\ttext",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "description": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "peekOfCode": "\t\t\ttext = text[m.end():]\n\t\twhile text:\n\t\t\ttext = self.ParseRow(text)\n\t\treturn rest\n\tdef ParseRow(self, text):\n\t\tm = re.match('\\s*,?\\s*([\\w-]+)\\s*=\\s*', text)\n\t\tif not m:\n\t\t\treturn None\n\t\tkey = m.group(1)\n\t\tif not self.entry_type == 'String':",
    "detail": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\t\t\ttext",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "description": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "peekOfCode": "\t\t\ttext = self.ParseRow(text)\n\t\treturn rest\n\tdef ParseRow(self, text):\n\t\tm = re.match('\\s*,?\\s*([\\w-]+)\\s*=\\s*', text)\n\t\tif not m:\n\t\t\treturn None\n\t\tkey = m.group(1)\n\t\tif not self.entry_type == 'String':\n\t\t\tkey = Capitalize(key)\n\t\ttext = text[m.end():]",
    "detail": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\t\tm",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "description": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "peekOfCode": "\t\tm = re.match('\\s*,?\\s*([\\w-]+)\\s*=\\s*', text)\n\t\tif not m:\n\t\t\treturn None\n\t\tkey = m.group(1)\n\t\tif not self.entry_type == 'String':\n\t\t\tkey = Capitalize(key)\n\t\ttext = text[m.end():]\n\t\tvalue = ''\n\t\tif text[0] == '{':\n\t\t\tvalue, rest = FindMatchingParenthesis(text)",
    "detail": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\t\tkey",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "description": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "peekOfCode": "\t\tkey = m.group(1)\n\t\tif not self.entry_type == 'String':\n\t\t\tkey = Capitalize(key)\n\t\ttext = text[m.end():]\n\t\tvalue = ''\n\t\tif text[0] == '{':\n\t\t\tvalue, rest = FindMatchingParenthesis(text)\n\t\t\tvalue = RemoveBraces(value)\n\t\telif text[0] == '\\\"':\n\t\t\tm = re.match('^\"([^\\\"]+)\"\\s*,?\\s*', text)",
    "detail": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\t\t\tkey",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "description": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "peekOfCode": "\t\t\tkey = Capitalize(key)\n\t\ttext = text[m.end():]\n\t\tvalue = ''\n\t\tif text[0] == '{':\n\t\t\tvalue, rest = FindMatchingParenthesis(text)\n\t\t\tvalue = RemoveBraces(value)\n\t\telif text[0] == '\\\"':\n\t\t\tm = re.match('^\"([^\\\"]+)\"\\s*,?\\s*', text)\n\t\t\tvalue = m.group(1)\n\t\t\trest = text[m.end():]",
    "detail": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\t\ttext",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "description": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "peekOfCode": "\t\ttext = text[m.end():]\n\t\tvalue = ''\n\t\tif text[0] == '{':\n\t\t\tvalue, rest = FindMatchingParenthesis(text)\n\t\t\tvalue = RemoveBraces(value)\n\t\telif text[0] == '\\\"':\n\t\t\tm = re.match('^\"([^\\\"]+)\"\\s*,?\\s*', text)\n\t\t\tvalue = m.group(1)\n\t\t\trest = text[m.end():]\n\t\telse:",
    "detail": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\t\tvalue",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "description": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "peekOfCode": "\t\tvalue = ''\n\t\tif text[0] == '{':\n\t\t\tvalue, rest = FindMatchingParenthesis(text)\n\t\t\tvalue = RemoveBraces(value)\n\t\telif text[0] == '\\\"':\n\t\t\tm = re.match('^\"([^\\\"]+)\"\\s*,?\\s*', text)\n\t\t\tvalue = m.group(1)\n\t\t\trest = text[m.end():]\n\t\telse:\n\t\t\tm = re.match('\\s*(\\w+)\\s*,?\\s*', text)",
    "detail": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\t\t\tvalue",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "description": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "peekOfCode": "\t\t\tvalue = RemoveBraces(value)\n\t\telif text[0] == '\\\"':\n\t\t\tm = re.match('^\"([^\\\"]+)\"\\s*,?\\s*', text)\n\t\t\tvalue = m.group(1)\n\t\t\trest = text[m.end():]\n\t\telse:\n\t\t\tm = re.match('\\s*(\\w+)\\s*,?\\s*', text)\n\t\t\tvalue = m.group(1)\n\t\t\trest = text[m.end():]\n\t\tself.rows[key] = value.strip()",
    "detail": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\t\t\tm",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "description": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "peekOfCode": "\t\t\tm = re.match('^\"([^\\\"]+)\"\\s*,?\\s*', text)\n\t\t\tvalue = m.group(1)\n\t\t\trest = text[m.end():]\n\t\telse:\n\t\t\tm = re.match('\\s*(\\w+)\\s*,?\\s*', text)\n\t\t\tvalue = m.group(1)\n\t\t\trest = text[m.end():]\n\t\tself.rows[key] = value.strip()\n\t\treturn rest\n\tdef NormalizedEntryType(self):",
    "detail": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\t\t\tvalue",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "description": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "peekOfCode": "\t\t\tvalue = m.group(1)\n\t\t\trest = text[m.end():]\n\t\telse:\n\t\t\tm = re.match('\\s*(\\w+)\\s*,?\\s*', text)\n\t\t\tvalue = m.group(1)\n\t\t\trest = text[m.end():]\n\t\tself.rows[key] = value.strip()\n\t\treturn rest\n\tdef NormalizedEntryType(self):\n\t\tentry_type = self.entry_type.lower()",
    "detail": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\t\t\trest",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "description": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "peekOfCode": "\t\t\trest = text[m.end():]\n\t\telse:\n\t\t\tm = re.match('\\s*(\\w+)\\s*,?\\s*', text)\n\t\t\tvalue = m.group(1)\n\t\t\trest = text[m.end():]\n\t\tself.rows[key] = value.strip()\n\t\treturn rest\n\tdef NormalizedEntryType(self):\n\t\tentry_type = self.entry_type.lower()\n\t\tif entry_type in entry_types:",
    "detail": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\t\t\tm",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "description": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "peekOfCode": "\t\t\tm = re.match('\\s*(\\w+)\\s*,?\\s*', text)\n\t\t\tvalue = m.group(1)\n\t\t\trest = text[m.end():]\n\t\tself.rows[key] = value.strip()\n\t\treturn rest\n\tdef NormalizedEntryType(self):\n\t\tentry_type = self.entry_type.lower()\n\t\tif entry_type in entry_types:\n\t\t\tentry_type = entry_types[entry_type]\n\t\treturn entry_type",
    "detail": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\t\t\tvalue",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "description": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "peekOfCode": "\t\t\tvalue = m.group(1)\n\t\t\trest = text[m.end():]\n\t\tself.rows[key] = value.strip()\n\t\treturn rest\n\tdef NormalizedEntryType(self):\n\t\tentry_type = self.entry_type.lower()\n\t\tif entry_type in entry_types:\n\t\t\tentry_type = entry_types[entry_type]\n\t\treturn entry_type\n\tdef ToString(self):",
    "detail": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\t\t\trest",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "description": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "peekOfCode": "\t\t\trest = text[m.end():]\n\t\tself.rows[key] = value.strip()\n\t\treturn rest\n\tdef NormalizedEntryType(self):\n\t\tentry_type = self.entry_type.lower()\n\t\tif entry_type in entry_types:\n\t\t\tentry_type = entry_types[entry_type]\n\t\treturn entry_type\n\tdef ToString(self):\n\t\ts = '@' + self.entry_type + '{'",
    "detail": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\t\tself.rows[key]",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "description": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "peekOfCode": "\t\tself.rows[key] = value.strip()\n\t\treturn rest\n\tdef NormalizedEntryType(self):\n\t\tentry_type = self.entry_type.lower()\n\t\tif entry_type in entry_types:\n\t\t\tentry_type = entry_types[entry_type]\n\t\treturn entry_type\n\tdef ToString(self):\n\t\ts = '@' + self.entry_type + '{'\n\t\tif self.entry_name:",
    "detail": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\t\tentry_type",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "description": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "peekOfCode": "\t\tentry_type = self.entry_type.lower()\n\t\tif entry_type in entry_types:\n\t\t\tentry_type = entry_types[entry_type]\n\t\treturn entry_type\n\tdef ToString(self):\n\t\ts = '@' + self.entry_type + '{'\n\t\tif self.entry_name:\n\t\t\ts += self.entry_name + ','\n\t\ts += '\\n'\n\t\tkeys = sorted(self.rows.keys())",
    "detail": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\t\t\tentry_type",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "description": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "peekOfCode": "\t\t\tentry_type = entry_types[entry_type]\n\t\treturn entry_type\n\tdef ToString(self):\n\t\ts = '@' + self.entry_type + '{'\n\t\tif self.entry_name:\n\t\t\ts += self.entry_name + ','\n\t\ts += '\\n'\n\t\tkeys = sorted(self.rows.keys())\n\t\tfor key in keys:\n\t\t\ts += + 4*' '",
    "detail": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\t\ts",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "description": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "peekOfCode": "\t\ts = '@' + self.entry_type + '{'\n\t\tif self.entry_name:\n\t\t\ts += self.entry_name + ','\n\t\ts += '\\n'\n\t\tkeys = sorted(self.rows.keys())\n\t\tfor key in keys:\n\t\t\ts += + 4*' '\n\t\t\ts += key\n\t\t\ts += max(0, 13-len(key))*' '\n\t\t\ts += ' = '",
    "detail": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\t\tkeys",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "description": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "peekOfCode": "\t\tkeys = sorted(self.rows.keys())\n\t\tfor key in keys:\n\t\t\ts += + 4*' '\n\t\t\ts += key\n\t\t\ts += max(0, 13-len(key))*' '\n\t\t\ts += ' = '\n\t\t\tvalue = self.rows[key]\n\t\t\tif (not self.entry_type == 'String'):\n\t\t\t\tif (key in ['Author', 'Editor']):\n\t\t\t\t\tvalue = NormalizeAuthors(value)",
    "detail": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\t\t\tvalue",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "description": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "peekOfCode": "\t\t\tvalue = self.rows[key]\n\t\t\tif (not self.entry_type == 'String'):\n\t\t\t\tif (key in ['Author', 'Editor']):\n\t\t\t\t\tvalue = NormalizeAuthors(value)\n\t\t\t\tif (key == 'Pages'):\n\t\t\t\t\tvalue = NormalizePages(value)\n\t\t\t\tif (key == 'Year'):\n\t\t\t\t\tvalue = NormalizeYear(value)\n\t\t\t\tif (key == 'Month'):\n\t\t\t\t\tvalue = NormalizeMonth(value)",
    "detail": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\t\t\t\t\tvalue",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "description": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "peekOfCode": "\t\t\t\t\tvalue = NormalizeAuthors(value)\n\t\t\t\tif (key == 'Pages'):\n\t\t\t\t\tvalue = NormalizePages(value)\n\t\t\t\tif (key == 'Year'):\n\t\t\t\t\tvalue = NormalizeYear(value)\n\t\t\t\tif (key == 'Month'):\n\t\t\t\t\tvalue = NormalizeMonth(value)\n\t\t\ts += '{' + Format(value) + '}'\n\t\t\tif self.entry_type != 'String':\n\t\t\t\ts += ','",
    "detail": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\t\t\t\t\tvalue",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "description": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "peekOfCode": "\t\t\t\t\tvalue = NormalizePages(value)\n\t\t\t\tif (key == 'Year'):\n\t\t\t\t\tvalue = NormalizeYear(value)\n\t\t\t\tif (key == 'Month'):\n\t\t\t\t\tvalue = NormalizeMonth(value)\n\t\t\ts += '{' + Format(value) + '}'\n\t\t\tif self.entry_type != 'String':\n\t\t\t\ts += ','\n\t\t\ts += '\\n'\n\t\treturn s + '}\\n'",
    "detail": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\t\t\t\t\tvalue",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "description": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "peekOfCode": "\t\t\t\t\tvalue = NormalizeYear(value)\n\t\t\t\tif (key == 'Month'):\n\t\t\t\t\tvalue = NormalizeMonth(value)\n\t\t\ts += '{' + Format(value) + '}'\n\t\t\tif self.entry_type != 'String':\n\t\t\t\ts += ','\n\t\t\ts += '\\n'\n\t\treturn s + '}\\n'\n\tdef SortKey(self):\n\t\tpriorities = {",
    "detail": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\t\t\t\t\tvalue",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "description": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "peekOfCode": "\t\t\t\t\tvalue = NormalizeMonth(value)\n\t\t\ts += '{' + Format(value) + '}'\n\t\t\tif self.entry_type != 'String':\n\t\t\t\ts += ','\n\t\t\ts += '\\n'\n\t\treturn s + '}\\n'\n\tdef SortKey(self):\n\t\tpriorities = {\n               \t\t'String'        : -99,\n               \t\t'Proceedings'   : 99,",
    "detail": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\t\tpriorities",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "description": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "peekOfCode": "\t\tpriorities = {\n               \t\t'String'        : -99,\n               \t\t'Proceedings'   : 99,\n               \t\t'Book'          : 99,\n\t      \t}\n\t\tif self.entry_type in priorities:\n\t\t\treturn priorities[self.entry_type]\n\t\treturn 0\ndef ParseEntries(text):\n\tentries = []",
    "detail": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\tentries",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "description": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "peekOfCode": "\tentries = []\n\twhile True:\n\t\te = Entry()\n\t\ttext = e.ParseFromString(text)\n\t\tif not text:\n\t\t\tbreak\n\t\tentries.append(e)\n\treturn entries\ndef SortEntries(entries):\n\tentries.sort(key=lambda e: e.entry_name)",
    "detail": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\t\te",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "description": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "peekOfCode": "\t\te = Entry()\n\t\ttext = e.ParseFromString(text)\n\t\tif not text:\n\t\t\tbreak\n\t\tentries.append(e)\n\treturn entries\ndef SortEntries(entries):\n\tentries.sort(key=lambda e: e.entry_name)\n\tentries.sort(key=lambda e: e.entry_type)\n\tentries.sort(key=lambda e: e.SortKey())",
    "detail": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\t\ttext",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "description": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "peekOfCode": "\t\ttext = e.ParseFromString(text)\n\t\tif not text:\n\t\t\tbreak\n\t\tentries.append(e)\n\treturn entries\ndef SortEntries(entries):\n\tentries.sort(key=lambda e: e.entry_name)\n\tentries.sort(key=lambda e: e.entry_type)\n\tentries.sort(key=lambda e: e.SortKey())\n\treturn entries",
    "detail": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\tlines",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "description": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "peekOfCode": "\tlines = []\n\twith open(sys.argv[1], 'r') as f:\n\t\tfor line in f:\n\t\t\tif line.strip().startswith('%'):\n\t\t\t\tprint(line.strip())\n\t\t\telse:\n\t\t\t\tlines.append(line)\n\ttext = '\\n'.join(lines)\n\treturn text\n# main",
    "detail": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\ttext",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "description": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "peekOfCode": "\ttext = '\\n'.join(lines)\n\treturn text\n# main\ndef main():\n\ttext = ReadFile()\n\tentries = ParseEntries(text)\n\tentries = SortEntries(entries)\n\tfor entry in entries:\n\t\tprint(entry.ToString())\nif __name__ == '__main__':",
    "detail": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\ttext",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "description": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "peekOfCode": "\ttext = ReadFile()\n\tentries = ParseEntries(text)\n\tentries = SortEntries(entries)\n\tfor entry in entries:\n\t\tprint(entry.ToString())\nif __name__ == '__main__':\n    main()",
    "detail": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\tentries",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "description": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "peekOfCode": "\tentries = ParseEntries(text)\n\tentries = SortEntries(entries)\n\tfor entry in entries:\n\t\tprint(entry.ToString())\nif __name__ == '__main__':\n    main()",
    "detail": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "\tentries",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "description": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "peekOfCode": "\tentries = SortEntries(entries)\n\tfor entry in entries:\n\t\tprint(entry.ToString())\nif __name__ == '__main__':\n    main()",
    "detail": "MY_GISTS.8b2c5f97ac.bibtex_beautifier",
    "documentation": {}
  },
  {
    "label": "pseudo",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.bitbucket_repolist",
    "description": "MY_GISTS.8b2c5f97ac.bitbucket_repolist",
    "peekOfCode": "pseudo = argv[1] if len(argv) > 1 else \"lbesson\"\njsonfile = \"bitbucket_{}.json\".format(pseudo)\nsystem(\"curl --silent https://bitbucket.org/api/1.0/users/\" + pseudo + \" > \" + jsonfile)\nb = load(open(jsonfile, 'r'))\n# for i in b['repositories']:\n#     print(i['slug'])\nlist_of_repo = sorted([i['slug'] for i in b['repositories']])\nfor i in list_of_repo:\n    print(i)",
    "detail": "MY_GISTS.8b2c5f97ac.bitbucket_repolist",
    "documentation": {}
  },
  {
    "label": "jsonfile",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.bitbucket_repolist",
    "description": "MY_GISTS.8b2c5f97ac.bitbucket_repolist",
    "peekOfCode": "jsonfile = \"bitbucket_{}.json\".format(pseudo)\nsystem(\"curl --silent https://bitbucket.org/api/1.0/users/\" + pseudo + \" > \" + jsonfile)\nb = load(open(jsonfile, 'r'))\n# for i in b['repositories']:\n#     print(i['slug'])\nlist_of_repo = sorted([i['slug'] for i in b['repositories']])\nfor i in list_of_repo:\n    print(i)",
    "detail": "MY_GISTS.8b2c5f97ac.bitbucket_repolist",
    "documentation": {}
  },
  {
    "label": "b",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.bitbucket_repolist",
    "description": "MY_GISTS.8b2c5f97ac.bitbucket_repolist",
    "peekOfCode": "b = load(open(jsonfile, 'r'))\n# for i in b['repositories']:\n#     print(i['slug'])\nlist_of_repo = sorted([i['slug'] for i in b['repositories']])\nfor i in list_of_repo:\n    print(i)",
    "detail": "MY_GISTS.8b2c5f97ac.bitbucket_repolist",
    "documentation": {}
  },
  {
    "label": "list_of_repo",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.bitbucket_repolist",
    "description": "MY_GISTS.8b2c5f97ac.bitbucket_repolist",
    "peekOfCode": "list_of_repo = sorted([i['slug'] for i in b['repositories']])\nfor i in list_of_repo:\n    print(i)",
    "detail": "MY_GISTS.8b2c5f97ac.bitbucket_repolist",
    "documentation": {}
  },
  {
    "label": "day_offset",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.calculate-day-in-your-head",
    "description": "MY_GISTS.8b2c5f97ac.calculate-day-in-your-head",
    "peekOfCode": "def day_offset(y, m, d):\n    # Add 1 if y > 2000 to account for the fact that 2000 was a leap year.\n    year_offset = ( y - 2000 ) + ( ( y - 2000 ) // 4 ) + ( y > 2000 )\n    # Account for wrongly computed leap years\n    year_offset -= ( y - 2000 ) // 100\n    # Add back 1 year if the target year is a leap year but the target day\n    # is after the 29th (in other words, the leap day hasn't happened yet).\n    if y % 100:\n        year_offset += ( y < 2000 ) and not( y % 4 ) and ( m > 2 )\n        year_offset -= ( y > 2000 ) and not( y % 4 ) and ( m < 3 )",
    "detail": "MY_GISTS.8b2c5f97ac.calculate-day-in-your-head",
    "documentation": {}
  },
  {
    "label": "days",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.calculate-day-in-your-head",
    "description": "MY_GISTS.8b2c5f97ac.calculate-day-in-your-head",
    "peekOfCode": "days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\nadjustment = [0, 1, -1, 0, 0, 1, 1, 2, 3, 3, 4, 4]\ndef day_offset(y, m, d):\n    # Add 1 if y > 2000 to account for the fact that 2000 was a leap year.\n    year_offset = ( y - 2000 ) + ( ( y - 2000 ) // 4 ) + ( y > 2000 )\n    # Account for wrongly computed leap years\n    year_offset -= ( y - 2000 ) // 100\n    # Add back 1 year if the target year is a leap year but the target day\n    # is after the 29th (in other words, the leap day hasn't happened yet).\n    if y % 100:",
    "detail": "MY_GISTS.8b2c5f97ac.calculate-day-in-your-head",
    "documentation": {}
  },
  {
    "label": "adjustment",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.calculate-day-in-your-head",
    "description": "MY_GISTS.8b2c5f97ac.calculate-day-in-your-head",
    "peekOfCode": "adjustment = [0, 1, -1, 0, 0, 1, 1, 2, 3, 3, 4, 4]\ndef day_offset(y, m, d):\n    # Add 1 if y > 2000 to account for the fact that 2000 was a leap year.\n    year_offset = ( y - 2000 ) + ( ( y - 2000 ) // 4 ) + ( y > 2000 )\n    # Account for wrongly computed leap years\n    year_offset -= ( y - 2000 ) // 100\n    # Add back 1 year if the target year is a leap year but the target day\n    # is after the 29th (in other words, the leap day hasn't happened yet).\n    if y % 100:\n        year_offset += ( y < 2000 ) and not( y % 4 ) and ( m > 2 )",
    "detail": "MY_GISTS.8b2c5f97ac.calculate-day-in-your-head",
    "documentation": {}
  },
  {
    "label": "maximizeWindow",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.calc_interets",
    "description": "MY_GISTS.8b2c5f97ac.calc_interets",
    "peekOfCode": "def maximizeWindow():\n    \"\"\" Experimental function to try to maximize a plot.\n    - Tries as well as possible to maximize the figure.\n    - Cf. https://stackoverflow.com/q/12439588/\n    \"\"\"\n    try:\n        figManager = plt.get_current_fig_manager()\n        figManager.window.showMaximized()\n    except:\n        try:",
    "detail": "MY_GISTS.8b2c5f97ac.calc_interets",
    "documentation": {}
  },
  {
    "label": "palette",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.calc_interets",
    "description": "MY_GISTS.8b2c5f97ac.calc_interets",
    "peekOfCode": "def palette(nb):\n    \"\"\" Use a smart palette from seaborn, for nb different things to plot.\n    - Ref: http://seaborn.pydata.org/generated/seaborn.hls_palette.html#seaborn.hls_palette\n    \"\"\"\n    return sns.hls_palette(nb + 1)[:nb]\ndef calc_interets(comptes, taux=taux2020):\n    \"\"\" Calcule une estimation de mes intérêts.\"\"\"\n    interet_fin_annee = sum(comptes[k] * taux[k] / 100.0 for k in type_comptes)\n    for k in type_comptes:\n        print(\"Pour mon <blue>compte {:>4}<white>, avec <magenta>{:>10,.2f} €<white>, et un <cyan<taux à <u>{:>4,.2f}%<U><white> {} <green>intérêt ~= {:>6.2f} €<white>.\".format(k.upper(), comptes[k], taux[k], '→', comptes[k] * taux[k] / 100.0))",
    "detail": "MY_GISTS.8b2c5f97ac.calc_interets",
    "documentation": {}
  },
  {
    "label": "calc_interets",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.calc_interets",
    "description": "MY_GISTS.8b2c5f97ac.calc_interets",
    "peekOfCode": "def calc_interets(comptes, taux=taux2020):\n    \"\"\" Calcule une estimation de mes intérêts.\"\"\"\n    interet_fin_annee = sum(comptes[k] * taux[k] / 100.0 for k in type_comptes)\n    for k in type_comptes:\n        print(\"Pour mon <blue>compte {:>4}<white>, avec <magenta>{:>10,.2f} €<white>, et un <cyan<taux à <u>{:>4,.2f}%<U><white> {} <green>intérêt ~= {:>6.2f} €<white>.\".format(k.upper(), comptes[k], taux[k], '→', comptes[k] * taux[k] / 100.0))\n    print(\"<green>Intérêt estimé pour 2016 : {:.2f} €.<white>\".format(interet_fin_annee))\n    print(\"<red>Attention<white> : les vrais intérêts sont calculés toutes les quinzaines, mon estimation n'est pas précise !\")\n    return interet_fin_annee\ndef main(comptes, taux=taux2020):\n    \"\"\" Affiche un beau diagramme camembert montrant la répartition de ses économies. \"\"\"",
    "detail": "MY_GISTS.8b2c5f97ac.calc_interets",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.calc_interets",
    "description": "MY_GISTS.8b2c5f97ac.calc_interets",
    "peekOfCode": "def main(comptes, taux=taux2020):\n    \"\"\" Affiche un beau diagramme camembert montrant la répartition de ses économies. \"\"\"\n    argenttotal = sum(comptes.values())\n    interets = sum(round(comptes[k] * taux[k] / 100.0, 3) for k in type_comptes)\n    print(\"Affichage d'un diagrame camembert en cours...\")\n    valeurs = list(comptes.values())\n    print(\"Valeurs du diagrame : <black>{}<white>\".format(valeurs))\n    etiquettes = []\n    legendes = []\n    for k in type_comptes:",
    "detail": "MY_GISTS.8b2c5f97ac.calc_interets",
    "documentation": {}
  },
  {
    "label": "taux2020",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.calc_interets",
    "description": "MY_GISTS.8b2c5f97ac.calc_interets",
    "peekOfCode": "taux2020 = {'CCP' : 0.00,\n            'LA'  : 0.73,\n            'LEP' : 1.25,  # XXX I don't own a LEP anymore\n            'LJ'  : 1.65,  # XXX I don't own a LJ anymore\n            'PEA' : 0.00,  # XXX I don't own a PEA anymore\n            'PEL' : 2.36,\n            'CCP2': 0.00,\n            }\npath_comptes = \"/home/lilian/comptes.pickle\"\nprint(\"<yellow>Calcul des intérêts, <white>script <u>calc_interets.py<U>:\")",
    "detail": "MY_GISTS.8b2c5f97ac.calc_interets",
    "documentation": {}
  },
  {
    "label": "path_comptes",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.calc_interets",
    "description": "MY_GISTS.8b2c5f97ac.calc_interets",
    "peekOfCode": "path_comptes = \"/home/lilian/comptes.pickle\"\nprint(\"<yellow>Calcul des intérêts, <white>script <u>calc_interets.py<U>:\")\ntry:\n    print(\"Lecture des comptes via le fichier <u>'{}'<U>...\".format(path_comptes))\n    with open(path_comptes, 'r') as f:\n        comptes = pickle.load(f)\nexcept:\n    print(\"Echec de la lecture. Le script va utiliser des valeurs par defaut : 2000.00 dans chaque compte (pour tester).\")\n    comptes = {'CCP': 2000.00,\n               'LA': 2000.00,",
    "detail": "MY_GISTS.8b2c5f97ac.calc_interets",
    "documentation": {}
  },
  {
    "label": "type_comptes",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.calc_interets",
    "description": "MY_GISTS.8b2c5f97ac.calc_interets",
    "peekOfCode": "type_comptes = list(comptes.keys())\ndef maximizeWindow():\n    \"\"\" Experimental function to try to maximize a plot.\n    - Tries as well as possible to maximize the figure.\n    - Cf. https://stackoverflow.com/q/12439588/\n    \"\"\"\n    try:\n        figManager = plt.get_current_fig_manager()\n        figManager.window.showMaximized()\n    except:",
    "detail": "MY_GISTS.8b2c5f97ac.calc_interets",
    "documentation": {}
  },
  {
    "label": "ends_by_0",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.check-property-on-prime-numbers",
    "description": "MY_GISTS.8b2c5f97ac.check-property-on-prime-numbers",
    "peekOfCode": "def ends_by_0(p):\n    return (p % 10) == 9\ndef next_ends_by_9(p):\n    np = nextprime(p)\n    return (np % 10) == 9\ndef next_ends_by_1(p):\n    np = nextprime(p)\n    return (np % 10) == 1\ndef main(maxn):\n    primes = sieve",
    "detail": "MY_GISTS.8b2c5f97ac.check-property-on-prime-numbers",
    "documentation": {}
  },
  {
    "label": "next_ends_by_9",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.check-property-on-prime-numbers",
    "description": "MY_GISTS.8b2c5f97ac.check-property-on-prime-numbers",
    "peekOfCode": "def next_ends_by_9(p):\n    np = nextprime(p)\n    return (np % 10) == 9\ndef next_ends_by_1(p):\n    np = nextprime(p)\n    return (np % 10) == 1\ndef main(maxn):\n    primes = sieve\n    primes.extend(maxn)\n    primes = primes._list",
    "detail": "MY_GISTS.8b2c5f97ac.check-property-on-prime-numbers",
    "documentation": {}
  },
  {
    "label": "next_ends_by_1",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.check-property-on-prime-numbers",
    "description": "MY_GISTS.8b2c5f97ac.check-property-on-prime-numbers",
    "peekOfCode": "def next_ends_by_1(p):\n    np = nextprime(p)\n    return (np % 10) == 1\ndef main(maxn):\n    primes = sieve\n    primes.extend(maxn)\n    primes = primes._list\n    nb_primes = len(primes)\n    print(f\"We found {nb_primes} primes smaller or equal than {maxn}...\")\n    filtered_primes = [ p for p in primes if ends_by_0(p) ]",
    "detail": "MY_GISTS.8b2c5f97ac.check-property-on-prime-numbers",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.check-property-on-prime-numbers",
    "description": "MY_GISTS.8b2c5f97ac.check-property-on-prime-numbers",
    "peekOfCode": "def main(maxn):\n    primes = sieve\n    primes.extend(maxn)\n    primes = primes._list\n    nb_primes = len(primes)\n    print(f\"We found {nb_primes} primes smaller or equal than {maxn}...\")\n    filtered_primes = [ p for p in primes if ends_by_0(p) ]\n    nb_filtered_primes = len(filtered_primes)\n    print(f\"We found {nb_filtered_primes} primes that finishes by 9...\")\n    rate = float(nb_filtered_primes) / float(nb_primes)",
    "detail": "MY_GISTS.8b2c5f97ac.check-property-on-prime-numbers",
    "documentation": {}
  },
  {
    "label": "l_to_c",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.check_IBAN",
    "description": "MY_GISTS.8b2c5f97ac.check_IBAN",
    "peekOfCode": "def l_to_c(l):\n    try:\n        return str(int(l))\n    except ValueError:\n        return str(10 + ord(l.upper()) - ord('A'))\ndef check_iban(iban):\n    print(\"\\nChecking the IBAN number '%s'...\" % iban)\n    ib = iban.replace(' ', '')\n    ib = ib[4:] + ib[:4]\n    print(\"Of length\", len(ib))",
    "detail": "MY_GISTS.8b2c5f97ac.check_IBAN",
    "documentation": {}
  },
  {
    "label": "check_iban",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.check_IBAN",
    "description": "MY_GISTS.8b2c5f97ac.check_IBAN",
    "peekOfCode": "def check_iban(iban):\n    print(\"\\nChecking the IBAN number '%s'...\" % iban)\n    ib = iban.replace(' ', '')\n    ib = ib[4:] + ib[:4]\n    print(\"Of length\", len(ib))\n    i = int(''.join(l_to_c(l) for l in ib))\n    check = (i % 97) == 1\n    if check:\n        print(\"OK '%s' seems to be a valid IBAN number.\" % iban)\n    else:",
    "detail": "MY_GISTS.8b2c5f97ac.check_IBAN",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.check_IBAN",
    "description": "MY_GISTS.8b2c5f97ac.check_IBAN",
    "peekOfCode": "def main(args):\n    try:\n        if not args:\n            check_iban('HAHA LOL YOU THOUGH I WILL LET A REAL IBAN IN MY SCRIPT')\n        else:\n            for iban in args:\n                check_iban(iban)\n        return 0\n    except Exception as e:\n        print(e)",
    "detail": "MY_GISTS.8b2c5f97ac.check_IBAN",
    "documentation": {}
  },
  {
    "label": "l_to_c",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.check_NIRPP",
    "description": "MY_GISTS.8b2c5f97ac.check_NIRPP",
    "peekOfCode": "def l_to_c(l):\n    try:\n        return str(int(l))\n    except ValueError:\n        return str(10 + ord(l.upper()) - ord('A'))\ndef check_nirpp(nirpp, length_checksum=length_checksum):\n    print(\"\\nChecking the NIRPP number '%s' ...\" % nirpp)\n    ib = nirpp.replace(' ', '')\n    checksum = int(ib[-length_checksum:])\n    ib = ib[:-length_checksum]",
    "detail": "MY_GISTS.8b2c5f97ac.check_NIRPP",
    "documentation": {}
  },
  {
    "label": "check_nirpp",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.check_NIRPP",
    "description": "MY_GISTS.8b2c5f97ac.check_NIRPP",
    "peekOfCode": "def check_nirpp(nirpp, length_checksum=length_checksum):\n    print(\"\\nChecking the NIRPP number '%s' ...\" % nirpp)\n    ib = nirpp.replace(' ', '')\n    checksum = int(ib[-length_checksum:])\n    ib = ib[:-length_checksum]\n    print(\"  Of length\", len(ib))\n    num_nirpp = int(''.join(l_to_c(l) for l in ib))\n    print(\"  Of sum num_nirpp =\", num_nirpp)\n    print(\"  Of check sum to 97 =\", (97 - (num_nirpp % 97)))\n    print(\"  And expected checksum was\", checksum)",
    "detail": "MY_GISTS.8b2c5f97ac.check_NIRPP",
    "documentation": {}
  },
  {
    "label": "pprint_nirpp",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.check_NIRPP",
    "description": "MY_GISTS.8b2c5f97ac.check_NIRPP",
    "peekOfCode": "def pprint_nirpp(nirpp, length_checksum=length_checksum):\n    print(\"\\nDisplaying information contained in the NIRPP number '%s' ...\" % nirpp)\n    ib = nirpp.replace(' ', '')\n    ib = ib[:-length_checksum]\n    # Printing\n    for (i, l) in sorted(information_nirpp):\n        n = nirpp[i: i + l]\n        info = information_nirpp[(i, l)]\n        if n in info[\"mapping\"]:\n            explain = \"\\\"{}\\\"\".format(info[\"mapping\"][n])",
    "detail": "MY_GISTS.8b2c5f97ac.check_NIRPP",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.check_NIRPP",
    "description": "MY_GISTS.8b2c5f97ac.check_NIRPP",
    "peekOfCode": "def main(args):\n    try:\n        if not args:\n            check_nirpp('HAHA LOL YOU THOUGH I WILL LET A REAL NIRPP IN MY SCRIPT')\n        else:\n            for nirpp in args:\n                if check_nirpp(nirpp):\n                    pprint_nirpp(nirpp)\n        return 0\n    except Exception as e:",
    "detail": "MY_GISTS.8b2c5f97ac.check_NIRPP",
    "documentation": {}
  },
  {
    "label": "length_checksum",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.check_NIRPP",
    "description": "MY_GISTS.8b2c5f97ac.check_NIRPP",
    "peekOfCode": "length_checksum = 2\ndef l_to_c(l):\n    try:\n        return str(int(l))\n    except ValueError:\n        return str(10 + ord(l.upper()) - ord('A'))\ndef check_nirpp(nirpp, length_checksum=length_checksum):\n    print(\"\\nChecking the NIRPP number '%s' ...\" % nirpp)\n    ib = nirpp.replace(' ', '')\n    checksum = int(ib[-length_checksum:])",
    "detail": "MY_GISTS.8b2c5f97ac.check_NIRPP",
    "documentation": {}
  },
  {
    "label": "information_nirpp",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.check_NIRPP",
    "description": "MY_GISTS.8b2c5f97ac.check_NIRPP",
    "peekOfCode": "information_nirpp = {\n    (0, 1): {\n        \"meaning\": \"sexe\",\n        \"mapping\": {\n            \"1\": \"homme\",\n            \"2\": \"femme\",\n            \"3\": \"personne étrangère de sexe masculin en cours d'immatriculation en France\",\n            \"4\": \"personne étrangère de sexe féminin en cours d'immatriculation en France\"\n        }\n    },",
    "detail": "MY_GISTS.8b2c5f97ac.check_NIRPP",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.check_site_selenium",
    "description": "MY_GISTS.8b2c5f97ac.check_site_selenium",
    "peekOfCode": "def main(URL, message, success):\n    print(f\"Downloading '{URL}'...\")\n    firefoxOptions = webdriver.FirefoxOptions()\n    firefoxOptions.headless = True\n    browser = webdriver.Firefox(options=firefoxOptions)\n    browser.get(URL)\n    source = browser.page_source\n    browser.close()\n    if message in source:\n        print(f\"{URL} indique toujours le message recherché :\\n\\\"{message}\\\"\")",
    "detail": "MY_GISTS.8b2c5f97ac.check_site_selenium",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.check_voyages-sncf",
    "description": "MY_GISTS.8b2c5f97ac.check_voyages-sncf",
    "peekOfCode": "def main(url, MY_OUTWARD_TIME):\n    \"\"\" Go to the page 'url', find the next link to got, then extract the JSON query result, find the wanted train, and display the results.\n    \"\"\"\n    MY_OUTWARD_TIME = MY_OUTWARD_TIME.replace('h', ':')\n    # Create the web browser object\n    b = RB(history=True, allow_redirects=True)\n    # Open the page\n    b.open(url)\n    # Find the next page to go\n    res = str(b.select('#url_redirect_proposals')[0])",
    "detail": "MY_GISTS.8b2c5f97ac.check_voyages-sncf",
    "documentation": {}
  },
  {
    "label": "url_finder",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.check_voyages-sncf",
    "description": "MY_GISTS.8b2c5f97ac.check_voyages-sncf",
    "peekOfCode": "url_finder = re.compile(r'http[^\"]*')\nquery_finder = re.compile(r\"data.query = JSON.parse\\('\\{[^\\n]*\")\nsearchResponse_finder = re.compile(r\"data.searchResponse = JSON.parse\\('\\{[^\\n]*\")\n# url0 = \"http://www.voyages-sncf.com//vsc/train-ticket/?_LANG=fr&site_country=FR&site_language=fr&ORIGIN_CITY=Toulon&DESTINATION_CITY=Paris%20%28Toutes%20gares%20intramuros%29&OUTWARD_DATE=31/05/2016&OUTWARD_TIME=15&INWARD_DATE=&INWARD_TIME=7&COMFORT_CLASS=2&DISTRIBUTED_COUNTRY=FR&NB_TYPO_ADULT=1&bookingChoice=train&PASSENGER_1=YOUNG&PASSENGER_1_CARD=MI1ST&PASSENGER_1_FID_PROG=&PASSENGER_1FID_NUM_BEGIN=&CODE_PROMO_1=&action:searchTravel=Rechercher\"\nURL_TEMPLATE = \"https://www.voyages-sncf.com/vsc/train-ticket/?_LANG=fr&site_country=FR&site_language=fr&ORIGIN_CITY={ORIGIN_CITY}&DESTINATION_CITY={DESTINATION_CITY}&OUTWARD_DATE={DATE}&OUTWARD_TIME={OUTWARD_TIME}&INWARD_DATE=&INWARD_TIME=7&COMFORT_CLASS=2&DISTRIBUTED_COUNTRY=FR&NB_TYPO_ADULT=1&bookingChoice=train&PASSENGER_1=YOUNG&PASSENGER_1_CARD=MI1ST&PASSENGER_1_FID_PROG=&PASSENGER_1FID_NUM_BEGIN=&CODE_PROMO_1=&action:searchTravel=Rechercher\"\n# url1 = 'http://www.voyages-sncf.com/vsc/proposals/findProposals?hid='\ndef main(url, MY_OUTWARD_TIME):\n    \"\"\" Go to the page 'url', find the next link to got, then extract the JSON query result, find the wanted train, and display the results.\n    \"\"\"\n    MY_OUTWARD_TIME = MY_OUTWARD_TIME.replace('h', ':')",
    "detail": "MY_GISTS.8b2c5f97ac.check_voyages-sncf",
    "documentation": {}
  },
  {
    "label": "query_finder",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.check_voyages-sncf",
    "description": "MY_GISTS.8b2c5f97ac.check_voyages-sncf",
    "peekOfCode": "query_finder = re.compile(r\"data.query = JSON.parse\\('\\{[^\\n]*\")\nsearchResponse_finder = re.compile(r\"data.searchResponse = JSON.parse\\('\\{[^\\n]*\")\n# url0 = \"http://www.voyages-sncf.com//vsc/train-ticket/?_LANG=fr&site_country=FR&site_language=fr&ORIGIN_CITY=Toulon&DESTINATION_CITY=Paris%20%28Toutes%20gares%20intramuros%29&OUTWARD_DATE=31/05/2016&OUTWARD_TIME=15&INWARD_DATE=&INWARD_TIME=7&COMFORT_CLASS=2&DISTRIBUTED_COUNTRY=FR&NB_TYPO_ADULT=1&bookingChoice=train&PASSENGER_1=YOUNG&PASSENGER_1_CARD=MI1ST&PASSENGER_1_FID_PROG=&PASSENGER_1FID_NUM_BEGIN=&CODE_PROMO_1=&action:searchTravel=Rechercher\"\nURL_TEMPLATE = \"https://www.voyages-sncf.com/vsc/train-ticket/?_LANG=fr&site_country=FR&site_language=fr&ORIGIN_CITY={ORIGIN_CITY}&DESTINATION_CITY={DESTINATION_CITY}&OUTWARD_DATE={DATE}&OUTWARD_TIME={OUTWARD_TIME}&INWARD_DATE=&INWARD_TIME=7&COMFORT_CLASS=2&DISTRIBUTED_COUNTRY=FR&NB_TYPO_ADULT=1&bookingChoice=train&PASSENGER_1=YOUNG&PASSENGER_1_CARD=MI1ST&PASSENGER_1_FID_PROG=&PASSENGER_1FID_NUM_BEGIN=&CODE_PROMO_1=&action:searchTravel=Rechercher\"\n# url1 = 'http://www.voyages-sncf.com/vsc/proposals/findProposals?hid='\ndef main(url, MY_OUTWARD_TIME):\n    \"\"\" Go to the page 'url', find the next link to got, then extract the JSON query result, find the wanted train, and display the results.\n    \"\"\"\n    MY_OUTWARD_TIME = MY_OUTWARD_TIME.replace('h', ':')\n    # Create the web browser object",
    "detail": "MY_GISTS.8b2c5f97ac.check_voyages-sncf",
    "documentation": {}
  },
  {
    "label": "searchResponse_finder",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.check_voyages-sncf",
    "description": "MY_GISTS.8b2c5f97ac.check_voyages-sncf",
    "peekOfCode": "searchResponse_finder = re.compile(r\"data.searchResponse = JSON.parse\\('\\{[^\\n]*\")\n# url0 = \"http://www.voyages-sncf.com//vsc/train-ticket/?_LANG=fr&site_country=FR&site_language=fr&ORIGIN_CITY=Toulon&DESTINATION_CITY=Paris%20%28Toutes%20gares%20intramuros%29&OUTWARD_DATE=31/05/2016&OUTWARD_TIME=15&INWARD_DATE=&INWARD_TIME=7&COMFORT_CLASS=2&DISTRIBUTED_COUNTRY=FR&NB_TYPO_ADULT=1&bookingChoice=train&PASSENGER_1=YOUNG&PASSENGER_1_CARD=MI1ST&PASSENGER_1_FID_PROG=&PASSENGER_1FID_NUM_BEGIN=&CODE_PROMO_1=&action:searchTravel=Rechercher\"\nURL_TEMPLATE = \"https://www.voyages-sncf.com/vsc/train-ticket/?_LANG=fr&site_country=FR&site_language=fr&ORIGIN_CITY={ORIGIN_CITY}&DESTINATION_CITY={DESTINATION_CITY}&OUTWARD_DATE={DATE}&OUTWARD_TIME={OUTWARD_TIME}&INWARD_DATE=&INWARD_TIME=7&COMFORT_CLASS=2&DISTRIBUTED_COUNTRY=FR&NB_TYPO_ADULT=1&bookingChoice=train&PASSENGER_1=YOUNG&PASSENGER_1_CARD=MI1ST&PASSENGER_1_FID_PROG=&PASSENGER_1FID_NUM_BEGIN=&CODE_PROMO_1=&action:searchTravel=Rechercher\"\n# url1 = 'http://www.voyages-sncf.com/vsc/proposals/findProposals?hid='\ndef main(url, MY_OUTWARD_TIME):\n    \"\"\" Go to the page 'url', find the next link to got, then extract the JSON query result, find the wanted train, and display the results.\n    \"\"\"\n    MY_OUTWARD_TIME = MY_OUTWARD_TIME.replace('h', ':')\n    # Create the web browser object\n    b = RB(history=True, allow_redirects=True)",
    "detail": "MY_GISTS.8b2c5f97ac.check_voyages-sncf",
    "documentation": {}
  },
  {
    "label": "URL_TEMPLATE",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.check_voyages-sncf",
    "description": "MY_GISTS.8b2c5f97ac.check_voyages-sncf",
    "peekOfCode": "URL_TEMPLATE = \"https://www.voyages-sncf.com/vsc/train-ticket/?_LANG=fr&site_country=FR&site_language=fr&ORIGIN_CITY={ORIGIN_CITY}&DESTINATION_CITY={DESTINATION_CITY}&OUTWARD_DATE={DATE}&OUTWARD_TIME={OUTWARD_TIME}&INWARD_DATE=&INWARD_TIME=7&COMFORT_CLASS=2&DISTRIBUTED_COUNTRY=FR&NB_TYPO_ADULT=1&bookingChoice=train&PASSENGER_1=YOUNG&PASSENGER_1_CARD=MI1ST&PASSENGER_1_FID_PROG=&PASSENGER_1FID_NUM_BEGIN=&CODE_PROMO_1=&action:searchTravel=Rechercher\"\n# url1 = 'http://www.voyages-sncf.com/vsc/proposals/findProposals?hid='\ndef main(url, MY_OUTWARD_TIME):\n    \"\"\" Go to the page 'url', find the next link to got, then extract the JSON query result, find the wanted train, and display the results.\n    \"\"\"\n    MY_OUTWARD_TIME = MY_OUTWARD_TIME.replace('h', ':')\n    # Create the web browser object\n    b = RB(history=True, allow_redirects=True)\n    # Open the page\n    b.open(url)",
    "detail": "MY_GISTS.8b2c5f97ac.check_voyages-sncf",
    "documentation": {}
  },
  {
    "label": "Print",
    "kind": 6,
    "importPath": "MY_GISTS.8b2c5f97ac.cherrypy_print_file_interface",
    "description": "MY_GISTS.8b2c5f97ac.cherrypy_print_file_interface",
    "peekOfCode": "class Print(object):\n    @cherrypy.expose\n    def index(self):\n        return HTML_TEMPLATE\n    @cherrypy.expose\n    def send(self, file, user, **kwargs):\n        try:\n            cups.setUser(user)\n            conn = cups.Connection()\n            job_name = str(uuid.uuid4())",
    "detail": "MY_GISTS.8b2c5f97ac.cherrypy_print_file_interface",
    "documentation": {}
  },
  {
    "label": "HTML_TEMPLATE",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.cherrypy_print_file_interface",
    "description": "MY_GISTS.8b2c5f97ac.cherrypy_print_file_interface",
    "peekOfCode": "HTML_TEMPLATE = \"\"\"\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">\n<html><head><title>Print</title>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\">\n</head><body><h1>Print File</h1>\n<form action=\"send\" method=\"POST\" enctype=\"multipart/form-data\">\nFile name: <input name=\"file\" type=\"file\"><br>\nUser name: <input name=\"user\"><br>\n<input name=\"submit\" type=\"submit\">\n</form>",
    "detail": "MY_GISTS.8b2c5f97ac.cherrypy_print_file_interface",
    "documentation": {}
  },
  {
    "label": "get_data",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.cloud_cover_statistics_with_darksky_data",
    "description": "MY_GISTS.8b2c5f97ac.cloud_cover_statistics_with_darksky_data",
    "peekOfCode": "def get_data(location, key, delay=365):\n    thisday = date.today()\n    oneday = timedelta(days=1)\n    alldata = {}\n    all_cloud_cover = {}\n    for d in range(delay):\n        t = thisday.isoformat()\n        if 'T' not in t:\n            t += 'T12:00:00'\n        try:",
    "detail": "MY_GISTS.8b2c5f97ac.cloud_cover_statistics_with_darksky_data",
    "documentation": {}
  },
  {
    "label": "save_data",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.cloud_cover_statistics_with_darksky_data",
    "description": "MY_GISTS.8b2c5f97ac.cloud_cover_statistics_with_darksky_data",
    "peekOfCode": "def save_data(all_cloud_cover, filename):\n    new_dict = dict()\n    for d, k in all_cloud_cover.items():\n        new_dict[d.isoformat()] = k\n    with open(filename, \"w\") as fp:\n        dump(new_dict, fp)\ndef load_data(filename):\n    with open(filename, \"r\") as fp:\n        new_dict = load(fp)\n        all_cloud_cover = dict()",
    "detail": "MY_GISTS.8b2c5f97ac.cloud_cover_statistics_with_darksky_data",
    "documentation": {}
  },
  {
    "label": "load_data",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.cloud_cover_statistics_with_darksky_data",
    "description": "MY_GISTS.8b2c5f97ac.cloud_cover_statistics_with_darksky_data",
    "peekOfCode": "def load_data(filename):\n    with open(filename, \"r\") as fp:\n        new_dict = load(fp)\n        all_cloud_cover = dict()\n        for d, k in new_dict.items():\n            dt = parse(d.replace('T12:00:00', ''))\n            all_cloud_cover[dt] = k\n    return all_cloud_cover\ndef plot_data(all_cloud_cover, name, filename):\n    Xs = np.array(list(all_cloud_cover.keys()))",
    "detail": "MY_GISTS.8b2c5f97ac.cloud_cover_statistics_with_darksky_data",
    "documentation": {}
  },
  {
    "label": "plot_data",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.cloud_cover_statistics_with_darksky_data",
    "description": "MY_GISTS.8b2c5f97ac.cloud_cover_statistics_with_darksky_data",
    "peekOfCode": "def plot_data(all_cloud_cover, name, filename):\n    Xs = np.array(list(all_cloud_cover.keys()))\n    Ys = np.array(list(all_cloud_cover.values()))\n    # Remove day where we couldn't find the data\n    are_nans = np.isnan(Ys)\n    Xs = Xs[~are_nans]\n    Ys = Ys[~are_nans]\n    fig, ax = plt.subplots()\n    ax.set_title(f\"Cloud cover index in {name}\")\n    ax.set_xlabel(\"Date\")",
    "detail": "MY_GISTS.8b2c5f97ac.cloud_cover_statistics_with_darksky_data",
    "documentation": {}
  },
  {
    "label": "plot_data_by_weekday",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.cloud_cover_statistics_with_darksky_data",
    "description": "MY_GISTS.8b2c5f97ac.cloud_cover_statistics_with_darksky_data",
    "peekOfCode": "def plot_data_by_weekday(all_cloud_cover, name, filename):\n    count_of_weekday = np.zeros(7)\n    data_by_weekday = np.zeros(7)\n    mean_by_weekday = np.zeros(7)\n    for x, y in all_cloud_cover.items():\n        if not np.isnan(y):\n            weekday = x.weekday()\n            count_of_weekday[weekday] += 1\n            data_by_weekday[weekday] += y\n            # print(\"For weekday\", weekday, \"one more count with cloud_cover =\", y)",
    "detail": "MY_GISTS.8b2c5f97ac.cloud_cover_statistics_with_darksky_data",
    "documentation": {}
  },
  {
    "label": "read_groups",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.commit_size_vs_commit_message_size",
    "description": "MY_GISTS.8b2c5f97ac.commit_size_vs_commit_message_size",
    "peekOfCode": "def read_groups(data):\n    buf = []\n    for line in data:\n        buf.append(line)\n        if line.find('changed') != -1 and buf:\n            yield buf\n            buf = []\ndef main(url):\n    command = 'git log --no-color --shortstat --log-size --format=oneline --no-merges'.split()\n    data = subprocess.check_output(command).split('\\n')",
    "detail": "MY_GISTS.8b2c5f97ac.commit_size_vs_commit_message_size",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.commit_size_vs_commit_message_size",
    "description": "MY_GISTS.8b2c5f97ac.commit_size_vs_commit_message_size",
    "peekOfCode": "def main(url):\n    command = 'git log --no-color --shortstat --log-size --format=oneline --no-merges'.split()\n    data = subprocess.check_output(command).split('\\n')\n    xs, ys, msgs, commits = [], [], [], []\n    for group in read_groups(data):\n        if len(group) != 3: continue\n        commit = group[0].split()[0]\n        log_size = int(group[0].split()[-1])\n        msg = group[1]\n        change_size = sum(map(int, group[2].split()[3::2]))",
    "detail": "MY_GISTS.8b2c5f97ac.commit_size_vs_commit_message_size",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.deepl",
    "description": "MY_GISTS.8b2c5f97ac.deepl",
    "peekOfCode": "def main(argv, to_language=TO_LANGUAGE, from_language=FROM_LANGUAGE):\n    \"\"\" Main function. Use the arguments of the command line (sys.argv). \"\"\"\n    # TODO use docopt to handle the command line arguments! Cf. http://docopt.org/\n    # TODO can docopt handle a cli documentation with ansicolortags tags in it? Cf. http://ansicolortags.rtfd.io/\n    # Manual handing of the command line arguments\n    if \"-h\" in argv or \"--help\" in argv:\n        printc(\"\"\"\n<green>deepl.py<white> --help|-h | -f file | [--from LANG] [--to LANG] text\nA simple Python script translate a text from a language to another language, using DeepL translator (https://www.deepl.com/translator).\n<u>Examples:<U>",
    "detail": "MY_GISTS.8b2c5f97ac.deepl",
    "documentation": {}
  },
  {
    "label": "FROM_LANGUAGE",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.deepl",
    "description": "MY_GISTS.8b2c5f97ac.deepl",
    "peekOfCode": "FROM_LANGUAGE = 'EN'\nTO_LANGUAGE = 'FR'\ndef main(argv, to_language=TO_LANGUAGE, from_language=FROM_LANGUAGE):\n    \"\"\" Main function. Use the arguments of the command line (sys.argv). \"\"\"\n    # TODO use docopt to handle the command line arguments! Cf. http://docopt.org/\n    # TODO can docopt handle a cli documentation with ansicolortags tags in it? Cf. http://ansicolortags.rtfd.io/\n    # Manual handing of the command line arguments\n    if \"-h\" in argv or \"--help\" in argv:\n        printc(\"\"\"\n<green>deepl.py<white> --help|-h | -f file | [--from LANG] [--to LANG] text",
    "detail": "MY_GISTS.8b2c5f97ac.deepl",
    "documentation": {}
  },
  {
    "label": "TO_LANGUAGE",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.deepl",
    "description": "MY_GISTS.8b2c5f97ac.deepl",
    "peekOfCode": "TO_LANGUAGE = 'FR'\ndef main(argv, to_language=TO_LANGUAGE, from_language=FROM_LANGUAGE):\n    \"\"\" Main function. Use the arguments of the command line (sys.argv). \"\"\"\n    # TODO use docopt to handle the command line arguments! Cf. http://docopt.org/\n    # TODO can docopt handle a cli documentation with ansicolortags tags in it? Cf. http://ansicolortags.rtfd.io/\n    # Manual handing of the command line arguments\n    if \"-h\" in argv or \"--help\" in argv:\n        printc(\"\"\"\n<green>deepl.py<white> --help|-h | -f file | [--from LANG] [--to LANG] text\nA simple Python script translate a text from a language to another language, using DeepL translator (https://www.deepl.com/translator).",
    "detail": "MY_GISTS.8b2c5f97ac.deepl",
    "documentation": {}
  },
  {
    "label": "delBoard",
    "kind": 6,
    "importPath": "MY_GISTS.8b2c5f97ac.delqueen",
    "description": "MY_GISTS.8b2c5f97ac.delqueen",
    "peekOfCode": "class delBoard:\n    \"\"\" A weird object that does nothing while alive,\n    but solves the n-queens problem when garbage collected.\n    It uses CPython's garbage collection graph traversal algorithm to explore\n    the graph of possible solutions to the n-queens problem.\n    Very weird, but it works. And it's fast!\n    \"\"\"\n    def __init__(self, nqueens=None):\n        self.nqueens = nqueens\n    def __del__(self):",
    "detail": "MY_GISTS.8b2c5f97ac.delqueen",
    "documentation": {}
  },
  {
    "label": "nqueens",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.delqueen",
    "description": "MY_GISTS.8b2c5f97ac.delqueen",
    "peekOfCode": "nqueens = int(sys.argv[1]) if len(sys.argv) > 1 else None\nq = delBoard(nqueens)\nif __name__ == \"__main__\":\n    print(\"Interrupt me to solve the {} queens problem!\".format(nqueens))\n    while True:\n        pass",
    "detail": "MY_GISTS.8b2c5f97ac.delqueen",
    "documentation": {}
  },
  {
    "label": "q",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.delqueen",
    "description": "MY_GISTS.8b2c5f97ac.delqueen",
    "peekOfCode": "q = delBoard(nqueens)\nif __name__ == \"__main__\":\n    print(\"Interrupt me to solve the {} queens problem!\".format(nqueens))\n    while True:\n        pass",
    "detail": "MY_GISTS.8b2c5f97ac.delqueen",
    "documentation": {}
  },
  {
    "label": "numexo",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.dump_dD",
    "description": "MY_GISTS.8b2c5f97ac.dump_dD",
    "peekOfCode": "numexo = int(sys.argv[1]) if len(sys.argv) > 1 else 1485\nchapter = str(sys.argv[2]) if len(sys.argv) > 2 else \"\"\nurlToGo = \"http://mp.cpgedupuydelome.fr/mesexos.php?idTeX=%i\" % numexo\nprint(\"Numéro <magenta>%i<reset>. On va vers <u>\\\"%s\\\"<U><white>\" % (numexo, urlToGo))\n# On récupère la page (la partie la plus lente du coup)\nimport urllib2\nresponse = urllib2.urlopen(urlToGo)\nhtml = response.read()\n# BeautifulSoup v3 (et pas v4, attention !)\nfrom BeautifulSoup import BeautifulSoup",
    "detail": "MY_GISTS.8b2c5f97ac.dump_dD",
    "documentation": {}
  },
  {
    "label": "chapter",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.dump_dD",
    "description": "MY_GISTS.8b2c5f97ac.dump_dD",
    "peekOfCode": "chapter = str(sys.argv[2]) if len(sys.argv) > 2 else \"\"\nurlToGo = \"http://mp.cpgedupuydelome.fr/mesexos.php?idTeX=%i\" % numexo\nprint(\"Numéro <magenta>%i<reset>. On va vers <u>\\\"%s\\\"<U><white>\" % (numexo, urlToGo))\n# On récupère la page (la partie la plus lente du coup)\nimport urllib2\nresponse = urllib2.urlopen(urlToGo)\nhtml = response.read()\n# BeautifulSoup v3 (et pas v4, attention !)\nfrom BeautifulSoup import BeautifulSoup\n# On l'analyse",
    "detail": "MY_GISTS.8b2c5f97ac.dump_dD",
    "documentation": {}
  },
  {
    "label": "urlToGo",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.dump_dD",
    "description": "MY_GISTS.8b2c5f97ac.dump_dD",
    "peekOfCode": "urlToGo = \"http://mp.cpgedupuydelome.fr/mesexos.php?idTeX=%i\" % numexo\nprint(\"Numéro <magenta>%i<reset>. On va vers <u>\\\"%s\\\"<U><white>\" % (numexo, urlToGo))\n# On récupère la page (la partie la plus lente du coup)\nimport urllib2\nresponse = urllib2.urlopen(urlToGo)\nhtml = response.read()\n# BeautifulSoup v3 (et pas v4, attention !)\nfrom BeautifulSoup import BeautifulSoup\n# On l'analyse\nparsed_html = BeautifulSoup(html, fromEncoding='utf-8')",
    "detail": "MY_GISTS.8b2c5f97ac.dump_dD",
    "documentation": {}
  },
  {
    "label": "response",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.dump_dD",
    "description": "MY_GISTS.8b2c5f97ac.dump_dD",
    "peekOfCode": "response = urllib2.urlopen(urlToGo)\nhtml = response.read()\n# BeautifulSoup v3 (et pas v4, attention !)\nfrom BeautifulSoup import BeautifulSoup\n# On l'analyse\nparsed_html = BeautifulSoup(html, fromEncoding='utf-8')\nprint(\"<black>Encodage original : %s<white>\\n\\n\" % parsed_html.originalEncoding)\n# On cherche la section <section id=\"contenu\">..</section>\ncontenu = parsed_html.body.find('section', attrs={'id': 'contenu'})\n# Et on prend le contenu de la première <textarea> !",
    "detail": "MY_GISTS.8b2c5f97ac.dump_dD",
    "documentation": {}
  },
  {
    "label": "html",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.dump_dD",
    "description": "MY_GISTS.8b2c5f97ac.dump_dD",
    "peekOfCode": "html = response.read()\n# BeautifulSoup v3 (et pas v4, attention !)\nfrom BeautifulSoup import BeautifulSoup\n# On l'analyse\nparsed_html = BeautifulSoup(html, fromEncoding='utf-8')\nprint(\"<black>Encodage original : %s<white>\\n\\n\" % parsed_html.originalEncoding)\n# On cherche la section <section id=\"contenu\">..</section>\ncontenu = parsed_html.body.find('section', attrs={'id': 'contenu'})\n# Et on prend le contenu de la première <textarea> !\ncodeTeX = contenu.findAll('textarea', limit=1)[0].renderContents()",
    "detail": "MY_GISTS.8b2c5f97ac.dump_dD",
    "documentation": {}
  },
  {
    "label": "parsed_html",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.dump_dD",
    "description": "MY_GISTS.8b2c5f97ac.dump_dD",
    "peekOfCode": "parsed_html = BeautifulSoup(html, fromEncoding='utf-8')\nprint(\"<black>Encodage original : %s<white>\\n\\n\" % parsed_html.originalEncoding)\n# On cherche la section <section id=\"contenu\">..</section>\ncontenu = parsed_html.body.find('section', attrs={'id': 'contenu'})\n# Et on prend le contenu de la première <textarea> !\ncodeTeX = contenu.findAll('textarea', limit=1)[0].renderContents()\n# Quelques corrections, parce que BeautifulSoup échappe certains trucs\ncodeTeX = codeTeX.replace(\"&amp;\", \"&\").replace(\"&lt;\", \"<\").replace(\"&gt;\", \">\").replace(\"&le;\", \"<=\").replace(\"&ge;\", \">=\")\n# Et d'autres erreurs fréquentes.\ncodeTeX = codeTeX.replace(\"^ - \", \"^{-}\")",
    "detail": "MY_GISTS.8b2c5f97ac.dump_dD",
    "documentation": {}
  },
  {
    "label": "contenu",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.dump_dD",
    "description": "MY_GISTS.8b2c5f97ac.dump_dD",
    "peekOfCode": "contenu = parsed_html.body.find('section', attrs={'id': 'contenu'})\n# Et on prend le contenu de la première <textarea> !\ncodeTeX = contenu.findAll('textarea', limit=1)[0].renderContents()\n# Quelques corrections, parce que BeautifulSoup échappe certains trucs\ncodeTeX = codeTeX.replace(\"&amp;\", \"&\").replace(\"&lt;\", \"<\").replace(\"&gt;\", \">\").replace(\"&le;\", \"<=\").replace(\"&ge;\", \">=\")\n# Et d'autres erreurs fréquentes.\ncodeTeX = codeTeX.replace(\"^ - \", \"^{-}\")\n# Ici on pourrait utiliser un outil de traduction bien conçu pour produire codeTeX_en en anglais\n# FIXME !\n# Là on galère pour afficher en UTF-8. Zut !",
    "detail": "MY_GISTS.8b2c5f97ac.dump_dD",
    "documentation": {}
  },
  {
    "label": "codeTeX",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.dump_dD",
    "description": "MY_GISTS.8b2c5f97ac.dump_dD",
    "peekOfCode": "codeTeX = contenu.findAll('textarea', limit=1)[0].renderContents()\n# Quelques corrections, parce que BeautifulSoup échappe certains trucs\ncodeTeX = codeTeX.replace(\"&amp;\", \"&\").replace(\"&lt;\", \"<\").replace(\"&gt;\", \">\").replace(\"&le;\", \"<=\").replace(\"&ge;\", \">=\")\n# Et d'autres erreurs fréquentes.\ncodeTeX = codeTeX.replace(\"^ - \", \"^{-}\")\n# Ici on pourrait utiliser un outil de traduction bien conçu pour produire codeTeX_en en anglais\n# FIXME !\n# Là on galère pour afficher en UTF-8. Zut !\n# print( unicode( codeTeX ) )\nprint(\"<blue><u>Code LaTeX de cet exercice:<U><white>\\n\\n%s\" % codeTeX)",
    "detail": "MY_GISTS.8b2c5f97ac.dump_dD",
    "documentation": {}
  },
  {
    "label": "codeTeX",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.dump_dD",
    "description": "MY_GISTS.8b2c5f97ac.dump_dD",
    "peekOfCode": "codeTeX = codeTeX.replace(\"&amp;\", \"&\").replace(\"&lt;\", \"<\").replace(\"&gt;\", \">\").replace(\"&le;\", \"<=\").replace(\"&ge;\", \">=\")\n# Et d'autres erreurs fréquentes.\ncodeTeX = codeTeX.replace(\"^ - \", \"^{-}\")\n# Ici on pourrait utiliser un outil de traduction bien conçu pour produire codeTeX_en en anglais\n# FIXME !\n# Là on galère pour afficher en UTF-8. Zut !\n# print( unicode( codeTeX ) )\nprint(\"<blue><u>Code LaTeX de cet exercice:<U><white>\\n\\n%s\" % codeTeX)\n# On créé un fichier TeX\nname = \"ex_%i.fr.tex\" % numexo",
    "detail": "MY_GISTS.8b2c5f97ac.dump_dD",
    "documentation": {}
  },
  {
    "label": "codeTeX",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.dump_dD",
    "description": "MY_GISTS.8b2c5f97ac.dump_dD",
    "peekOfCode": "codeTeX = codeTeX.replace(\"^ - \", \"^{-}\")\n# Ici on pourrait utiliser un outil de traduction bien conçu pour produire codeTeX_en en anglais\n# FIXME !\n# Là on galère pour afficher en UTF-8. Zut !\n# print( unicode( codeTeX ) )\nprint(\"<blue><u>Code LaTeX de cet exercice:<U><white>\\n\\n%s\" % codeTeX)\n# On créé un fichier TeX\nname = \"ex_%i.fr.tex\" % numexo\nout = open(name, mode=\"w\")\n# On va écrire le code de l'exercice dedans",
    "detail": "MY_GISTS.8b2c5f97ac.dump_dD",
    "documentation": {}
  },
  {
    "label": "name",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.dump_dD",
    "description": "MY_GISTS.8b2c5f97ac.dump_dD",
    "peekOfCode": "name = \"ex_%i.fr.tex\" % numexo\nout = open(name, mode=\"w\")\n# On va écrire le code de l'exercice dedans\nprint(\"<green>On écrit dans %s !<white>\" % out)\n# Ajout de la possibilité de préciser le chapitre courant en train d'être construit.\nif chapter:\n    chapter = chapter.replace(\"_\", \" \").replace(\"/\", \"\")\n    print(\"<magenta>Pour le chapitre '%s' :<white>\" % chapter)\n    out.write(\"%%%% -*- mode: latex; coding: utf-8 -*-\\n%%%% Chapter : %s.\\n%%%% Start of LaTeX code, for exercise #%i (from '%s'), in French (file '%s').\\n\\n\" % (chapter, numexo, urlToGo, name))\nelse:",
    "detail": "MY_GISTS.8b2c5f97ac.dump_dD",
    "documentation": {}
  },
  {
    "label": "out",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.dump_dD",
    "description": "MY_GISTS.8b2c5f97ac.dump_dD",
    "peekOfCode": "out = open(name, mode=\"w\")\n# On va écrire le code de l'exercice dedans\nprint(\"<green>On écrit dans %s !<white>\" % out)\n# Ajout de la possibilité de préciser le chapitre courant en train d'être construit.\nif chapter:\n    chapter = chapter.replace(\"_\", \" \").replace(\"/\", \"\")\n    print(\"<magenta>Pour le chapitre '%s' :<white>\" % chapter)\n    out.write(\"%%%% -*- mode: latex; coding: utf-8 -*-\\n%%%% Chapter : %s.\\n%%%% Start of LaTeX code, for exercise #%i (from '%s'), in French (file '%s').\\n\\n\" % (chapter, numexo, urlToGo, name))\nelse:\n    out.write(\"%%%% -*- mode: latex; coding: utf-8 -*-\\n%%%% Start of LaTeX code, for exercise #%i (from '%s'), in French (file '%s').\\n\\n\" % (numexo, urlToGo, name))",
    "detail": "MY_GISTS.8b2c5f97ac.dump_dD",
    "documentation": {}
  },
  {
    "label": "match_to_emoji",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.emojize",
    "description": "MY_GISTS.8b2c5f97ac.emojize",
    "peekOfCode": "def match_to_emoji(m):\n    \"\"\"Call emoji.emojize on m).\"\"\"\n    return emojize(m.group(), use_aliases=True)\ndef emojize_all(s):\n    \"\"\"Convert all emojis :aliases: of the string s to emojis in UTF-8.\"\"\"\n    return re.sub(r\":([a-z_-]+):\", match_to_emoji, s)\ndef main(path):\n    \"\"\"Handle the file given by its path.\"\"\"\n    with open(path, 'r') as f:\n        for line in f.readlines():",
    "detail": "MY_GISTS.8b2c5f97ac.emojize",
    "documentation": {}
  },
  {
    "label": "emojize_all",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.emojize",
    "description": "MY_GISTS.8b2c5f97ac.emojize",
    "peekOfCode": "def emojize_all(s):\n    \"\"\"Convert all emojis :aliases: of the string s to emojis in UTF-8.\"\"\"\n    return re.sub(r\":([a-z_-]+):\", match_to_emoji, s)\ndef main(path):\n    \"\"\"Handle the file given by its path.\"\"\"\n    with open(path, 'r') as f:\n        for line in f.readlines():\n            print(emojize_all(line), end='')\nif __name__ == '__main__':\n    from sys import argv",
    "detail": "MY_GISTS.8b2c5f97ac.emojize",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.emojize",
    "description": "MY_GISTS.8b2c5f97ac.emojize",
    "peekOfCode": "def main(path):\n    \"\"\"Handle the file given by its path.\"\"\"\n    with open(path, 'r') as f:\n        for line in f.readlines():\n            print(emojize_all(line), end='')\nif __name__ == '__main__':\n    from sys import argv\n    for arg in argv[1:]:\n        main(arg)\n# End of emojize.py",
    "detail": "MY_GISTS.8b2c5f97ac.emojize",
    "documentation": {}
  },
  {
    "label": "emojize",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.emojize_pngorsvg",
    "description": "MY_GISTS.8b2c5f97ac.emojize_pngorsvg",
    "peekOfCode": "def emojize(s, use_svg=USE_SVG):\n    \"\"\"Call markdown.markdown() on s.\"\"\"\n    emoji_generator = pymdownx.emoji.to_svg if use_svg else pymdownx.emoji.to_png\n    extension_configs = {\n        'pymdownx.emoji': {\n            'emoji_generator': emoji_generator\n        }\n    }\n    res = markdown(s,\n                   extensions=['pymdownx.emoji'],",
    "detail": "MY_GISTS.8b2c5f97ac.emojize_pngorsvg",
    "documentation": {}
  },
  {
    "label": "match_to_emoji",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.emojize_pngorsvg",
    "description": "MY_GISTS.8b2c5f97ac.emojize_pngorsvg",
    "peekOfCode": "def match_to_emoji(m, use_svg=USE_SVG):\n    \"\"\"Call emoji.emojize on m.group().\"\"\"\n    return emojize(m.group(), use_svg=use_svg)\ndef emojize_all(s, use_svg=USE_SVG):\n    \"\"\"Convert all emojis :aliases: of the string s to emojis in UTF-8.\"\"\"\n    return re.sub(r\":([a-z_-]+):\", lambda s2: match_to_emoji(s2, use_svg=use_svg), s)\ndef main(path, use_svg=USE_SVG):\n    \"\"\"Handle the file given by its path.\"\"\"\n    with open(path, 'r') as f:\n        for line in f.readlines():",
    "detail": "MY_GISTS.8b2c5f97ac.emojize_pngorsvg",
    "documentation": {}
  },
  {
    "label": "emojize_all",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.emojize_pngorsvg",
    "description": "MY_GISTS.8b2c5f97ac.emojize_pngorsvg",
    "peekOfCode": "def emojize_all(s, use_svg=USE_SVG):\n    \"\"\"Convert all emojis :aliases: of the string s to emojis in UTF-8.\"\"\"\n    return re.sub(r\":([a-z_-]+):\", lambda s2: match_to_emoji(s2, use_svg=use_svg), s)\ndef main(path, use_svg=USE_SVG):\n    \"\"\"Handle the file given by its path.\"\"\"\n    with open(path, 'r') as f:\n        for line in f.readlines():\n            print(emojize_all(line, use_svg=use_svg), end='')\nif __name__ == '__main__':\n    from sys import argv",
    "detail": "MY_GISTS.8b2c5f97ac.emojize_pngorsvg",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.emojize_pngorsvg",
    "description": "MY_GISTS.8b2c5f97ac.emojize_pngorsvg",
    "peekOfCode": "def main(path, use_svg=USE_SVG):\n    \"\"\"Handle the file given by its path.\"\"\"\n    with open(path, 'r') as f:\n        for line in f.readlines():\n            print(emojize_all(line, use_svg=use_svg), end='')\nif __name__ == '__main__':\n    from sys import argv\n    if '--svg' in argv:\n        USE_SVG = True\n        while '--svg' in argv:",
    "detail": "MY_GISTS.8b2c5f97ac.emojize_pngorsvg",
    "documentation": {}
  },
  {
    "label": "USE_SVG",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.emojize_pngorsvg",
    "description": "MY_GISTS.8b2c5f97ac.emojize_pngorsvg",
    "peekOfCode": "USE_SVG = False\ndef emojize(s, use_svg=USE_SVG):\n    \"\"\"Call markdown.markdown() on s.\"\"\"\n    emoji_generator = pymdownx.emoji.to_svg if use_svg else pymdownx.emoji.to_png\n    extension_configs = {\n        'pymdownx.emoji': {\n            'emoji_generator': emoji_generator\n        }\n    }\n    res = markdown(s,",
    "detail": "MY_GISTS.8b2c5f97ac.emojize_pngorsvg",
    "documentation": {}
  },
  {
    "label": "coin",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.fairCoin",
    "description": "MY_GISTS.8b2c5f97ac.fairCoin",
    "peekOfCode": "def coin(p=0.5):\n    \"\"\" 1 with probability = p, 0 with probability 1 - p. \"\"\"\n    return 1 * (np.random.random() < p)\ndef vonNeumann(q=0.5):\n    \"\"\" Use von Neumann's rejection algorithm with an unknown coin (Bernoulli q). \"\"\"\n    x, y = coin(q), coin(q)\n    while x == y:  # (x, y) not in {(1, 0), (1, 0)}\n        x, y = coin(q), coin(q)\n    return x\ndef main(n=1000):",
    "detail": "MY_GISTS.8b2c5f97ac.fairCoin",
    "documentation": {}
  },
  {
    "label": "vonNeumann",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.fairCoin",
    "description": "MY_GISTS.8b2c5f97ac.fairCoin",
    "peekOfCode": "def vonNeumann(q=0.5):\n    \"\"\" Use von Neumann's rejection algorithm with an unknown coin (Bernoulli q). \"\"\"\n    x, y = coin(q), coin(q)\n    while x == y:  # (x, y) not in {(1, 0), (1, 0)}\n        x, y = coin(q), coin(q)\n    return x\ndef main(n=1000):\n    \"\"\" Check that the von Neumann method is indeed simulating a fair coin. \"\"\"\n    print(\"\\n\\n- Using n = {} tests of the von Neumann method, with unknown q in (0, 1).\".format(n))\n    q = 1.0 / np.pi   # Unknown float number 0.3183098861837907",
    "detail": "MY_GISTS.8b2c5f97ac.fairCoin",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.fairCoin",
    "description": "MY_GISTS.8b2c5f97ac.fairCoin",
    "peekOfCode": "def main(n=1000):\n    \"\"\" Check that the von Neumann method is indeed simulating a fair coin. \"\"\"\n    print(\"\\n\\n- Using n = {} tests of the von Neumann method, with unknown q in (0, 1).\".format(n))\n    q = 1.0 / np.pi   # Unknown float number 0.3183098861837907\n    tests = [vonNeumann(q) for _ in range(n)]\n    assert all(i in {0, 1} for i in tests), \"Error of the vonNeumann function: a value outside of {0, 1} has been produced...\"\n    mu, sigma = np.mean(tests), np.var(tests)\n    print(\"For the values x generated by the vonNeumann(q) function:\\n Average mu = {:.4g} (should be 0.5) and variance sigma = {:.4g} (should be 0.25).\".format(mu, sigma))\n    delta_mu = abs(mu - 0.5) / 0.5\n    delta_sigma = abs(sigma - 0.25) / 0.25",
    "detail": "MY_GISTS.8b2c5f97ac.fairCoin",
    "documentation": {}
  },
  {
    "label": "is_stderr_used",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.fix-iocaml-notebook-exports-to-pdf",
    "description": "MY_GISTS.8b2c5f97ac.fix-iocaml-notebook-exports-to-pdf",
    "peekOfCode": "def is_stderr_used(outputs):\n    for output in outputs:\n        try:\n            if output['name'] == \"stderr\":\n                return True\n        except KeyError:\n            pass\n    return False\ndef transform_data_texthtml(data_texthtml):\n    data_texthtml[0] = data_texthtml[0][2:]",
    "detail": "MY_GISTS.8b2c5f97ac.fix-iocaml-notebook-exports-to-pdf",
    "documentation": {}
  },
  {
    "label": "transform_data_texthtml",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.fix-iocaml-notebook-exports-to-pdf",
    "description": "MY_GISTS.8b2c5f97ac.fix-iocaml-notebook-exports-to-pdf",
    "peekOfCode": "def transform_data_texthtml(data_texthtml):\n    data_texthtml[0] = data_texthtml[0][2:]\n    for i in range(len(data_texthtml)):\n        # Hack to replace a few HTML escaped caracters\n        data_texthtml[i] = data_texthtml[i].replace('&gt;','>').replace('&lt;','<').replace('&quot;','\\'')\n    return data_texthtml\ndef get_data_texthtml(outputs):\n    data_texthtml = []\n    for output in outputs:\n        try:",
    "detail": "MY_GISTS.8b2c5f97ac.fix-iocaml-notebook-exports-to-pdf",
    "documentation": {}
  },
  {
    "label": "get_data_texthtml",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.fix-iocaml-notebook-exports-to-pdf",
    "description": "MY_GISTS.8b2c5f97ac.fix-iocaml-notebook-exports-to-pdf",
    "peekOfCode": "def get_data_texthtml(outputs):\n    data_texthtml = []\n    for output in outputs:\n        try:\n            if output['output_type'] == \"execute_result\" and 'text/html' in output['data']:\n                long_data_texthtml = output['data']['text/html']\n                assert len(long_data_texthtml) >= 8\n                data_texthtml += transform_data_texthtml(long_data_texthtml[6:-1])\n        except KeyError:\n            pass",
    "detail": "MY_GISTS.8b2c5f97ac.fix-iocaml-notebook-exports-to-pdf",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.fix-iocaml-notebook-exports-to-pdf",
    "description": "MY_GISTS.8b2c5f97ac.fix-iocaml-notebook-exports-to-pdf",
    "peekOfCode": "def main(old, new, debug=False):\n    filename = old\n    assert filename[-6:] == '.ipynb', \"Error: the input file is not a .ipynb Jupyter Notebook file.\"\n    with open(filename, 'r') as file:\n        content = json.load(file)\n    # Check that it is a IOCaml notebook\n    assert content['metadata']['kernelspec']['name'] == \"iocaml-kernel\" and content['metadata']['kernelspec']['language'] == \"ocaml\" and content['metadata']['kernelspec']['display_name'] == \"OCaml\", \"Error: the input notebook does not appear to have been produced by the IOCaml OCaml kernel.\"\n    # For each cell\n    for cell in content['cells']:\n        if cell['cell_type'] == \"code\":",
    "detail": "MY_GISTS.8b2c5f97ac.fix-iocaml-notebook-exports-to-pdf",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.fraisMission",
    "description": "MY_GISTS.8b2c5f97ac.fraisMission",
    "peekOfCode": "def main(nbJour=3, nbRepas=None, trains=None, nbNuit=None, totalHotel=None):\n    \"\"\" Calcule et affiche les détails des frais de mission.\n    Par exemple :\n    >>> trains = {\n           \"Rennes > Lille\": (44.00, \"14/12/16\"),\n           \"Lille > Paris \": (25.50, \"16/12/16\"),\n           \"Paris > Rennes\": (35.00, \"03/01/17\"),\n       }\n    >>> main(nbJour=3, trains=trains)\n    ...",
    "detail": "MY_GISTS.8b2c5f97ac.fraisMission",
    "documentation": {}
  },
  {
    "label": "repas",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.fraisMission",
    "description": "MY_GISTS.8b2c5f97ac.fraisMission",
    "peekOfCode": "repas = 15.25\nhotel = 150\ntaxeSejour = 0  # 1.65\nmetro = 1.5\ndef main(nbJour=3, nbRepas=None, trains=None, nbNuit=None, totalHotel=None):\n    \"\"\" Calcule et affiche les détails des frais de mission.\n    Par exemple :\n    >>> trains = {\n           \"Rennes > Lille\": (44.00, \"14/12/16\"),\n           \"Lille > Paris \": (25.50, \"16/12/16\"),",
    "detail": "MY_GISTS.8b2c5f97ac.fraisMission",
    "documentation": {}
  },
  {
    "label": "hotel",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.fraisMission",
    "description": "MY_GISTS.8b2c5f97ac.fraisMission",
    "peekOfCode": "hotel = 150\ntaxeSejour = 0  # 1.65\nmetro = 1.5\ndef main(nbJour=3, nbRepas=None, trains=None, nbNuit=None, totalHotel=None):\n    \"\"\" Calcule et affiche les détails des frais de mission.\n    Par exemple :\n    >>> trains = {\n           \"Rennes > Lille\": (44.00, \"14/12/16\"),\n           \"Lille > Paris \": (25.50, \"16/12/16\"),\n           \"Paris > Rennes\": (35.00, \"03/01/17\"),",
    "detail": "MY_GISTS.8b2c5f97ac.fraisMission",
    "documentation": {}
  },
  {
    "label": "taxeSejour",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.fraisMission",
    "description": "MY_GISTS.8b2c5f97ac.fraisMission",
    "peekOfCode": "taxeSejour = 0  # 1.65\nmetro = 1.5\ndef main(nbJour=3, nbRepas=None, trains=None, nbNuit=None, totalHotel=None):\n    \"\"\" Calcule et affiche les détails des frais de mission.\n    Par exemple :\n    >>> trains = {\n           \"Rennes > Lille\": (44.00, \"14/12/16\"),\n           \"Lille > Paris \": (25.50, \"16/12/16\"),\n           \"Paris > Rennes\": (35.00, \"03/01/17\"),\n       }",
    "detail": "MY_GISTS.8b2c5f97ac.fraisMission",
    "documentation": {}
  },
  {
    "label": "metro",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.fraisMission",
    "description": "MY_GISTS.8b2c5f97ac.fraisMission",
    "peekOfCode": "metro = 1.5\ndef main(nbJour=3, nbRepas=None, trains=None, nbNuit=None, totalHotel=None):\n    \"\"\" Calcule et affiche les détails des frais de mission.\n    Par exemple :\n    >>> trains = {\n           \"Rennes > Lille\": (44.00, \"14/12/16\"),\n           \"Lille > Paris \": (25.50, \"16/12/16\"),\n           \"Paris > Rennes\": (35.00, \"03/01/17\"),\n       }\n    >>> main(nbJour=3, trains=trains)",
    "detail": "MY_GISTS.8b2c5f97ac.fraisMission",
    "documentation": {}
  },
  {
    "label": "testSpecialFile",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.FreeSMS",
    "description": "MY_GISTS.8b2c5f97ac.FreeSMS",
    "peekOfCode": "def testSpecialFile(name, number=''):\n    \"\"\" Test if the hidden file '~/.smsapifreemobile_name.b64' exists and decodes (base64) correctly.\n    \"\"\"\n    assert name in [\"number\", \"user\", \"password\"], \"Error: unknown or incorrect value for 'name' for the function openSpecialFile(name) ...\"\n    # printc(\"<cyan>Testing the hidden file <white>'<u>~/.smsapifreemobile_{}.b64<U>'<cyan>...<white>\".format(name))  # DEBUG\n    try:\n        with open(expanduser('~/') + \".smsapifreemobile_\" + name + number + \".b64\") as f:\n            variable = base64.b64decode(f.readline()[:-1])\n            while variable[-1] == '\\n':\n                variable = variable[:-1]",
    "detail": "MY_GISTS.8b2c5f97ac.FreeSMS",
    "documentation": {}
  },
  {
    "label": "openSpecialFile",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.FreeSMS",
    "description": "MY_GISTS.8b2c5f97ac.FreeSMS",
    "peekOfCode": "def openSpecialFile(name, number=''):\n    \"\"\" Open the hidden file '~/.smsapifreemobile_name.b64', read and decode (base64) and return its content.\n    \"\"\"\n    assert name in [\"number\", \"user\", \"password\"], \"Error: unknown or incorrect value for 'name' for the function openSpecialFile(name) ...\"\n    printc(\"<cyan>Opening the hidden file <white>'<u>~/.smsapifreemobile_{}.b64<U>'<cyan>, read and decode (base64) and return its content...<white>\".format(name))\n    try:\n        with open(expanduser('~/') + \".smsapifreemobile_\" + name + number + \".b64\") as f:\n            variable = base64.b64decode(f.readline()[:-1])\n            while variable[-1] == '\\n':\n                variable = variable[:-1]",
    "detail": "MY_GISTS.8b2c5f97ac.FreeSMS",
    "documentation": {}
  },
  {
    "label": "send_sms",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.FreeSMS",
    "description": "MY_GISTS.8b2c5f97ac.FreeSMS",
    "peekOfCode": "def send_sms(text=\"Empty!\", secured=True, sleep_duration=0):\n    \"\"\" Sens a free SMS to the user identified by [user], with [password].\n    :user: Free Mobile id (of the form [0-9]{8}),\n    :password: Service password (of the form [a-zA-Z0-9]{14}),\n    :text: The content of the message (a warning is displayed if the message is bigger than 480 caracters)\n    :secured: True to use HTTPS, False to use HTTP.\n    Returns a boolean and a status string.\n    \"\"\"\n    # DONE split the text into smaller pieces if length is too big (automatically, or propose to do it ?)\n    if len(text) > MAX_SIZE:",
    "detail": "MY_GISTS.8b2c5f97ac.FreeSMS",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.FreeSMS",
    "description": "MY_GISTS.8b2c5f97ac.FreeSMS",
    "peekOfCode": "def main(argv):\n    \"\"\" Main function. Use the arguments of the command line (sys.argv).\n    \"\"\"\n    # TODO use docopt to handle the command line arguments! Cf. http://docopt.org/\n    # TODO can docopt handle a cli documentation with ansicolortags tags in it? Cf. http://ansicolortags.rtfd.io/\n    # Manual handing of the command line arguments\n    if \"-h\" in argv or \"--help\" in argv:\n        printc(\"\"\"\n<green>FreeSMS.py<white> --help|-h | -f file | [--sleep] body of the message\nA simple Python script to send a text message to a Free Mobile phone.",
    "detail": "MY_GISTS.8b2c5f97ac.FreeSMS",
    "documentation": {}
  },
  {
    "label": "today",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.FreeSMS",
    "description": "MY_GISTS.8b2c5f97ac.FreeSMS",
    "peekOfCode": "today = time.strftime(\"%H:%M:%S %Y-%m-%d\")\ntry:\n    from os.path import expanduser\nexcept ImportError:\n    print(\"Warning, os.path.expanduser is not available, trying to use os.getenv('USER') = {} ...\".format(os.getenv(\"USER\")))\n    def expanduser(s):\n        \"\"\" Try to simulate the os.path.expanduser function. \"\"\"\n        return '/home/' + os.getenv(\"USER\") + '/' + s\nif sys.version_info < (3, 0):\n    from urllib import urlencode",
    "detail": "MY_GISTS.8b2c5f97ac.FreeSMS",
    "documentation": {}
  },
  {
    "label": "numbers",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.FreeSMS",
    "description": "MY_GISTS.8b2c5f97ac.FreeSMS",
    "peekOfCode": "numbers = []\n#: Number (not necessary)\n# number = base64.b64decode(open(expanduser('~') + \".smsapifreemobile_number.b64\").readline()[:-1])\n# if number[-1] == '\\n':\n#     number = number[:-1]\nnumber = openSpecialFile(\"number\")\nnumbers.append(number)\nif testSpecialFile(\"number\", \"2\"):\n    number2 = openSpecialFile(\"number\", \"2\")\n    numbers.append(number2)",
    "detail": "MY_GISTS.8b2c5f97ac.FreeSMS",
    "documentation": {}
  },
  {
    "label": "number",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.FreeSMS",
    "description": "MY_GISTS.8b2c5f97ac.FreeSMS",
    "peekOfCode": "number = openSpecialFile(\"number\")\nnumbers.append(number)\nif testSpecialFile(\"number\", \"2\"):\n    number2 = openSpecialFile(\"number\", \"2\")\n    numbers.append(number2)\n# Detect language\nlanguage = os.getenv(\"LANG\")\nlanguage = language[0:2] if language else \"fr\"\n# Maximum size that can be sent\n# XXX Reference: https://en.wikipedia.org/wiki/Short_Message_Service#Message_size",
    "detail": "MY_GISTS.8b2c5f97ac.FreeSMS",
    "documentation": {}
  },
  {
    "label": "language",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.FreeSMS",
    "description": "MY_GISTS.8b2c5f97ac.FreeSMS",
    "peekOfCode": "language = os.getenv(\"LANG\")\nlanguage = language[0:2] if language else \"fr\"\n# Maximum size that can be sent\n# XXX Reference: https://en.wikipedia.org/wiki/Short_Message_Service#Message_size\n# \"6 to 8 segment messages are the practical maximum\"\nMAX_SIZE = 4 * 159\nSTR_MAX_SIZE = \"4*159\"\nif language == \"fr\":\n    errorcodes = {\n        400: \"Un des paramètres obligatoires est manquant.\",",
    "detail": "MY_GISTS.8b2c5f97ac.FreeSMS",
    "documentation": {}
  },
  {
    "label": "language",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.FreeSMS",
    "description": "MY_GISTS.8b2c5f97ac.FreeSMS",
    "peekOfCode": "language = language[0:2] if language else \"fr\"\n# Maximum size that can be sent\n# XXX Reference: https://en.wikipedia.org/wiki/Short_Message_Service#Message_size\n# \"6 to 8 segment messages are the practical maximum\"\nMAX_SIZE = 4 * 159\nSTR_MAX_SIZE = \"4*159\"\nif language == \"fr\":\n    errorcodes = {\n        400: \"Un des paramètres obligatoires est manquant.\",\n        402: \"Trop de SMS ont été envoyés en trop peu de temps.\",",
    "detail": "MY_GISTS.8b2c5f97ac.FreeSMS",
    "documentation": {}
  },
  {
    "label": "MAX_SIZE",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.FreeSMS",
    "description": "MY_GISTS.8b2c5f97ac.FreeSMS",
    "peekOfCode": "MAX_SIZE = 4 * 159\nSTR_MAX_SIZE = \"4*159\"\nif language == \"fr\":\n    errorcodes = {\n        400: \"Un des paramètres obligatoires est manquant.\",\n        402: \"Trop de SMS ont été envoyés en trop peu de temps.\",\n        403: \"\"\"Le service n'est pas activé sur l'espace abonné, ou login / clé incorrect.\nAllez sur '<black>https://mobile.free.fr/moncompte/index.php?page=options&show=20<white>' svp, et activez l'option correspondate.\"\"\",\n        500: \"Erreur côté serveur. Veuillez réessayez ultérieurement.\",\n        1:   \"Le SMS a été envoyé sur votre mobile ({}).\".format(number) if len(numbers) <= 1 else \"Le SMS a été envoyé sur vos numéros ({}).\".format(numbers),",
    "detail": "MY_GISTS.8b2c5f97ac.FreeSMS",
    "documentation": {}
  },
  {
    "label": "STR_MAX_SIZE",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.FreeSMS",
    "description": "MY_GISTS.8b2c5f97ac.FreeSMS",
    "peekOfCode": "STR_MAX_SIZE = \"4*159\"\nif language == \"fr\":\n    errorcodes = {\n        400: \"Un des paramètres obligatoires est manquant.\",\n        402: \"Trop de SMS ont été envoyés en trop peu de temps.\",\n        403: \"\"\"Le service n'est pas activé sur l'espace abonné, ou login / clé incorrect.\nAllez sur '<black>https://mobile.free.fr/moncompte/index.php?page=options&show=20<white>' svp, et activez l'option correspondate.\"\"\",\n        500: \"Erreur côté serveur. Veuillez réessayez ultérieurement.\",\n        1:   \"Le SMS a été envoyé sur votre mobile ({}).\".format(number) if len(numbers) <= 1 else \"Le SMS a été envoyé sur vos numéros ({}).\".format(numbers),\n        \"toolong\": \"<red>Attention<white> : le message est trop long (+ de <black>{}<white> caracters, soit plus de 3 SMS).\".format(STR_MAX_SIZE)",
    "detail": "MY_GISTS.8b2c5f97ac.FreeSMS",
    "documentation": {}
  },
  {
    "label": "readfiles",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.generate-word-cloud",
    "description": "MY_GISTS.8b2c5f97ac.generate-word-cloud",
    "peekOfCode": "def readfiles(filenames):\n    \"\"\" Return the content of each file, concatenated as one big string.\n    - Path could be relative or absolute, but nothing fancy is done here.\n    \"\"\"\n    text = \"\"\n    # Read the whole text for each file\n    for filename in filenames:\n        try:\n            text += open(filename, 'r').read()\n            text += r\"\\n\"",
    "detail": "MY_GISTS.8b2c5f97ac.generate-word-cloud",
    "documentation": {}
  },
  {
    "label": "generate",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.generate-word-cloud",
    "description": "MY_GISTS.8b2c5f97ac.generate-word-cloud",
    "peekOfCode": "def generate(text, max_words=600, width=1600, height=900):\n    \"\"\" Generate a word cloud image from the given text (one huge string). \"\"\"\n    # Take relative word frequencies into account, lower max_font_size\n    # https://amueller.github.io/word_cloud/generated/wordcloud.WordCloud.html#wordcloud.WordCloud\n    max_words = int(max_words) if max_words is not None else  600\n    width     = int(width)     if width     is not None else  1600\n    height    = int(height)    if height    is not None else  900\n    wc = WordCloud(\n        max_font_size=50,\n        relative_scaling=.5,",
    "detail": "MY_GISTS.8b2c5f97ac.generate-word-cloud",
    "documentation": {}
  },
  {
    "label": "makeimage",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.generate-word-cloud",
    "description": "MY_GISTS.8b2c5f97ac.generate-word-cloud",
    "peekOfCode": "def makeimage(wordcloud,\n              outname='wordcloud.png', title='Word cloud', show=False, force=False):\n    \"\"\" Display or save the wordcloud as a image. \"\"\"\n    # Display the generated image:\n    try:\n        # 2. the matplotlib way:\n        plt.figure()\n        plt.imshow(wordcloud)\n        plt.axis(\"off\")\n        if title:",
    "detail": "MY_GISTS.8b2c5f97ac.generate-word-cloud",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.generate-word-cloud",
    "description": "MY_GISTS.8b2c5f97ac.generate-word-cloud",
    "peekOfCode": "def main(argv):\n    \"\"\" Use the arguments of the command line. \"\"\"\n    # Use the arg parser\n    args = docopt(full_docopt_text, argv=argv, version=\"generate-word-cloud.py v{}\".format(version))\n    # printc(\"<magenta>Arguments: {} <reset>\".format(args))  # DEBUG\n    # Read the files\n    printc(\"<green>Reading the files<reset>, from: <blue>{}<reset>.\".format(args['INFILE']))\n    text = readfiles(args['INFILE'])\n    # Decide where to save it\n    outname = args['--outfile'] if args['--outfile'] else 'wordcloud.png'",
    "detail": "MY_GISTS.8b2c5f97ac.generate-word-cloud",
    "documentation": {}
  },
  {
    "label": "version",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.generate-word-cloud",
    "description": "MY_GISTS.8b2c5f97ac.generate-word-cloud",
    "peekOfCode": "version = '0.2'\nshow = False\ndef readfiles(filenames):\n    \"\"\" Return the content of each file, concatenated as one big string.\n    - Path could be relative or absolute, but nothing fancy is done here.\n    \"\"\"\n    text = \"\"\n    # Read the whole text for each file\n    for filename in filenames:\n        try:",
    "detail": "MY_GISTS.8b2c5f97ac.generate-word-cloud",
    "documentation": {}
  },
  {
    "label": "show",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.generate-word-cloud",
    "description": "MY_GISTS.8b2c5f97ac.generate-word-cloud",
    "peekOfCode": "show = False\ndef readfiles(filenames):\n    \"\"\" Return the content of each file, concatenated as one big string.\n    - Path could be relative or absolute, but nothing fancy is done here.\n    \"\"\"\n    text = \"\"\n    # Read the whole text for each file\n    for filename in filenames:\n        try:\n            text += open(filename, 'r').read()",
    "detail": "MY_GISTS.8b2c5f97ac.generate-word-cloud",
    "documentation": {}
  },
  {
    "label": "full_docopt_text",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.generate-word-cloud",
    "description": "MY_GISTS.8b2c5f97ac.generate-word-cloud",
    "peekOfCode": "full_docopt_text = \"\"\"\ngenerate-word-cloud.py\nUsage:\n  generate-word-cloud.py [-s | --show] [-f | --force] [-o OUTFILE | --outfile=OUTFILE]\n                         [-t TITLE | --title=TITLE] [-m MAX | --max=MAX]\n                         [-w WIDTH | --width=WIDTH] [-H HEIGHT | --height=HEIGHT]\n                         INFILE...\n  generate-word-cloud.py [-h | --help]\n  generate-word-cloud.py [-v | --version]\nOptions:",
    "detail": "MY_GISTS.8b2c5f97ac.generate-word-cloud",
    "documentation": {}
  },
  {
    "label": "response",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.get-json-data-from-google-scholar",
    "description": "MY_GISTS.8b2c5f97ac.get-json-data-from-google-scholar",
    "peekOfCode": "response = urllib.request.urlopen(\n    'https://scholar.google.fr/citations?user={}'.format(sys.argv[1]))\nhtml = response.read()\nm = re.search(\"<tbody(.*)</tbody>\", str(html))\nmm = re.findall(r\"<tr class=\\\"gsc_a_tr\\\">(.*?)</tr>\", m.group(0))\npapers = []\nfor m in mm:\n    xx = re.sub(r\"<(.*?)>\", r\"£\", m)\n    xx = re.sub(r\"£+\", r\"£\", xx)\n    yy = re.findall(r\"£?(.*?)£\", xx)",
    "detail": "MY_GISTS.8b2c5f97ac.get-json-data-from-google-scholar",
    "documentation": {}
  },
  {
    "label": "html",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.get-json-data-from-google-scholar",
    "description": "MY_GISTS.8b2c5f97ac.get-json-data-from-google-scholar",
    "peekOfCode": "html = response.read()\nm = re.search(\"<tbody(.*)</tbody>\", str(html))\nmm = re.findall(r\"<tr class=\\\"gsc_a_tr\\\">(.*?)</tr>\", m.group(0))\npapers = []\nfor m in mm:\n    xx = re.sub(r\"<(.*?)>\", r\"£\", m)\n    xx = re.sub(r\"£+\", r\"£\", xx)\n    yy = re.findall(r\"£?(.*?)£\", xx)\n    paper = {\n        \"title\": yy[0],",
    "detail": "MY_GISTS.8b2c5f97ac.get-json-data-from-google-scholar",
    "documentation": {}
  },
  {
    "label": "m",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.get-json-data-from-google-scholar",
    "description": "MY_GISTS.8b2c5f97ac.get-json-data-from-google-scholar",
    "peekOfCode": "m = re.search(\"<tbody(.*)</tbody>\", str(html))\nmm = re.findall(r\"<tr class=\\\"gsc_a_tr\\\">(.*?)</tr>\", m.group(0))\npapers = []\nfor m in mm:\n    xx = re.sub(r\"<(.*?)>\", r\"£\", m)\n    xx = re.sub(r\"£+\", r\"£\", xx)\n    yy = re.findall(r\"£?(.*?)£\", xx)\n    paper = {\n        \"title\": yy[0],\n        \"author\": yy[1],",
    "detail": "MY_GISTS.8b2c5f97ac.get-json-data-from-google-scholar",
    "documentation": {}
  },
  {
    "label": "mm",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.get-json-data-from-google-scholar",
    "description": "MY_GISTS.8b2c5f97ac.get-json-data-from-google-scholar",
    "peekOfCode": "mm = re.findall(r\"<tr class=\\\"gsc_a_tr\\\">(.*?)</tr>\", m.group(0))\npapers = []\nfor m in mm:\n    xx = re.sub(r\"<(.*?)>\", r\"£\", m)\n    xx = re.sub(r\"£+\", r\"£\", xx)\n    yy = re.findall(r\"£?(.*?)£\", xx)\n    paper = {\n        \"title\": yy[0],\n        \"author\": yy[1],\n        \"booktitle\": yy[2],",
    "detail": "MY_GISTS.8b2c5f97ac.get-json-data-from-google-scholar",
    "documentation": {}
  },
  {
    "label": "papers",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.get-json-data-from-google-scholar",
    "description": "MY_GISTS.8b2c5f97ac.get-json-data-from-google-scholar",
    "peekOfCode": "papers = []\nfor m in mm:\n    xx = re.sub(r\"<(.*?)>\", r\"£\", m)\n    xx = re.sub(r\"£+\", r\"£\", xx)\n    yy = re.findall(r\"£?(.*?)£\", xx)\n    paper = {\n        \"title\": yy[0],\n        \"author\": yy[1],\n        \"booktitle\": yy[2],\n    }",
    "detail": "MY_GISTS.8b2c5f97ac.get-json-data-from-google-scholar",
    "documentation": {}
  },
  {
    "label": "res",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.get-json-data-from-google-scholar",
    "description": "MY_GISTS.8b2c5f97ac.get-json-data-from-google-scholar",
    "peekOfCode": "res = {\"papers\": papers}\nprint(json.JSONEncoder().encode(res))",
    "detail": "MY_GISTS.8b2c5f97ac.get-json-data-from-google-scholar",
    "documentation": {}
  },
  {
    "label": "save_data",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.get_current_temperature",
    "description": "MY_GISTS.8b2c5f97ac.get_current_temperature",
    "peekOfCode": "def save_data(time_of_data, data, filename):\n    new_dict = {\n        time_of_data: data,\n    }\n    old_data = load_data(filename)\n    old_data.update(new_dict)\n    with open(filename, \"w\") as fp:\n        dump(new_dict, fp)\n    return new_dict\ndef load_data(filename):",
    "detail": "MY_GISTS.8b2c5f97ac.get_current_temperature",
    "documentation": {}
  },
  {
    "label": "load_data",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.get_current_temperature",
    "description": "MY_GISTS.8b2c5f97ac.get_current_temperature",
    "peekOfCode": "def load_data(filename):\n    old_data = dict()\n    if isfile(filename):\n        with open(filename, \"r\") as fp:\n            old_data = load(fp)\n    return old_data\ndef get_data(names, locations, key, verbose=True):\n    data = []\n    now = datetime.now()\n    for name, location in zip(names, locations):",
    "detail": "MY_GISTS.8b2c5f97ac.get_current_temperature",
    "documentation": {}
  },
  {
    "label": "get_data",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.get_current_temperature",
    "description": "MY_GISTS.8b2c5f97ac.get_current_temperature",
    "peekOfCode": "def get_data(names, locations, key, verbose=True):\n    data = []\n    now = datetime.now()\n    for name, location in zip(names, locations):\n        weather = forecast(key, *location)\n        temperature_in_F = weather['currently']['temperature']\n        temperature_in_C = round((temperature_in_F - 32) * (5/9), 1)\n        data.append({\n            \"name\": name,\n            \"location\": location,",
    "detail": "MY_GISTS.8b2c5f97ac.get_current_temperature",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.get_current_temperature",
    "description": "MY_GISTS.8b2c5f97ac.get_current_temperature",
    "peekOfCode": "def main(filename, names, locations, key, verbose=True):\n    time_of_data, data = get_data(names, locations, key, verbose=verbose)\n    save_data(time_of_data, data, filename)\n    return time_of_data, data\nif __name__ == '__main__':\n    filename = \"get_current_temperature.json\"\n    names, locations = [], []\n    # https://www.google.fr/maps/place/Supélec/@48.1252316,-1.6255899,17z/\n    name = \"CentraleSupélec, Rennes, France\"\n    location = 48.1252316, -1.6255899",
    "detail": "MY_GISTS.8b2c5f97ac.get_current_temperature",
    "documentation": {}
  },
  {
    "label": "gravatar",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.gravatar",
    "description": "MY_GISTS.8b2c5f97ac.gravatar",
    "peekOfCode": "def gravatar(email, default=default, size=size, secure=secure):\n    \"\"\"\n    gravatar(email, default=default, size=size, secure=secure) -> string\"\n    Return the URL of the gravatar picture associated with @email.\n    @default: default picture to use if not available. Default is %s.\n    @size: format to use (pixel x pixel). Default is %i.\n    @secure: if true, the returned URL use https://secure.gravatar.com instead of http://www.gravatar.com. Default is %s.\"\n    \"\"\" % (default, size, secure)\n    if secure:\n        gravatar_url = \"https://secure.gravatar.com/avatar/\" + hashlib.md5(email.lower()).hexdigest() + \"?r=pg&\"",
    "detail": "MY_GISTS.8b2c5f97ac.gravatar",
    "documentation": {}
  },
  {
    "label": "default",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.gravatar",
    "description": "MY_GISTS.8b2c5f97ac.gravatar",
    "peekOfCode": "default = \"retro\"\nsize = 256\nsecure = True\ndef gravatar(email, default=default, size=size, secure=secure):\n    \"\"\"\n    gravatar(email, default=default, size=size, secure=secure) -> string\"\n    Return the URL of the gravatar picture associated with @email.\n    @default: default picture to use if not available. Default is %s.\n    @size: format to use (pixel x pixel). Default is %i.\n    @secure: if true, the returned URL use https://secure.gravatar.com instead of http://www.gravatar.com. Default is %s.\"",
    "detail": "MY_GISTS.8b2c5f97ac.gravatar",
    "documentation": {}
  },
  {
    "label": "size",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.gravatar",
    "description": "MY_GISTS.8b2c5f97ac.gravatar",
    "peekOfCode": "size = 256\nsecure = True\ndef gravatar(email, default=default, size=size, secure=secure):\n    \"\"\"\n    gravatar(email, default=default, size=size, secure=secure) -> string\"\n    Return the URL of the gravatar picture associated with @email.\n    @default: default picture to use if not available. Default is %s.\n    @size: format to use (pixel x pixel). Default is %i.\n    @secure: if true, the returned URL use https://secure.gravatar.com instead of http://www.gravatar.com. Default is %s.\"\n    \"\"\" % (default, size, secure)",
    "detail": "MY_GISTS.8b2c5f97ac.gravatar",
    "documentation": {}
  },
  {
    "label": "secure",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.gravatar",
    "description": "MY_GISTS.8b2c5f97ac.gravatar",
    "peekOfCode": "secure = True\ndef gravatar(email, default=default, size=size, secure=secure):\n    \"\"\"\n    gravatar(email, default=default, size=size, secure=secure) -> string\"\n    Return the URL of the gravatar picture associated with @email.\n    @default: default picture to use if not available. Default is %s.\n    @size: format to use (pixel x pixel). Default is %i.\n    @secure: if true, the returned URL use https://secure.gravatar.com instead of http://www.gravatar.com. Default is %s.\"\n    \"\"\" % (default, size, secure)\n    if secure:",
    "detail": "MY_GISTS.8b2c5f97ac.gravatar",
    "documentation": {}
  },
  {
    "label": "hashtable",
    "kind": 6,
    "importPath": "MY_GISTS.8b2c5f97ac.handwritten_hashtable",
    "description": "MY_GISTS.8b2c5f97ac.handwritten_hashtable",
    "peekOfCode": "class hashtable(object):\n    \"\"\"Manual implementation of a naive hash table.\n    - Can only store hashable values.\n    - Use single-linked lists to be collision-resistant!\n    - Uses a non cryptographic hash function (default `hash`).\n    \"\"\"\n    def __init__(self, map_values=None, nb_bits=NB_BITS):\n        self._nb_bits = nb_bits\n        self._size = 1 << nb_bits\n        self._nb = 0",
    "detail": "MY_GISTS.8b2c5f97ac.handwritten_hashtable",
    "documentation": {}
  },
  {
    "label": "small_hash",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.handwritten_hashtable",
    "description": "MY_GISTS.8b2c5f97ac.handwritten_hashtable",
    "peekOfCode": "def small_hash(x, nb_bits=3):\n    \"\"\"A naive hash function.\"\"\"\n    # return abs(hash(x)) % 2  # test, to check that collisions are well handled\n    return abs(hash(x)) % (1 << nb_bits)\nNB_BITS = 4\nDEFAULT_SIZE = 1 << NB_BITS\nclass hashtable(object):\n    \"\"\"Manual implementation of a naive hash table.\n    - Can only store hashable values.\n    - Use single-linked lists to be collision-resistant!",
    "detail": "MY_GISTS.8b2c5f97ac.handwritten_hashtable",
    "documentation": {}
  },
  {
    "label": "test",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.handwritten_hashtable",
    "description": "MY_GISTS.8b2c5f97ac.handwritten_hashtable",
    "peekOfCode": "def test():\n    print(\"Creating empty hash table ...\")\n    H = hashtable()\n    print(H)\n    print(\"Inserting i**2 for i = 0..9 ...\")\n    for i in range(10):\n        H.insert(i, i**2)\n    print(H)\n    print(\"Reading i**2 for i = 0..9 ...\")\n    for i in range(10):",
    "detail": "MY_GISTS.8b2c5f97ac.handwritten_hashtable",
    "documentation": {}
  },
  {
    "label": "NB_BITS",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.handwritten_hashtable",
    "description": "MY_GISTS.8b2c5f97ac.handwritten_hashtable",
    "peekOfCode": "NB_BITS = 4\nDEFAULT_SIZE = 1 << NB_BITS\nclass hashtable(object):\n    \"\"\"Manual implementation of a naive hash table.\n    - Can only store hashable values.\n    - Use single-linked lists to be collision-resistant!\n    - Uses a non cryptographic hash function (default `hash`).\n    \"\"\"\n    def __init__(self, map_values=None, nb_bits=NB_BITS):\n        self._nb_bits = nb_bits",
    "detail": "MY_GISTS.8b2c5f97ac.handwritten_hashtable",
    "documentation": {}
  },
  {
    "label": "DEFAULT_SIZE",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.handwritten_hashtable",
    "description": "MY_GISTS.8b2c5f97ac.handwritten_hashtable",
    "peekOfCode": "DEFAULT_SIZE = 1 << NB_BITS\nclass hashtable(object):\n    \"\"\"Manual implementation of a naive hash table.\n    - Can only store hashable values.\n    - Use single-linked lists to be collision-resistant!\n    - Uses a non cryptographic hash function (default `hash`).\n    \"\"\"\n    def __init__(self, map_values=None, nb_bits=NB_BITS):\n        self._nb_bits = nb_bits\n        self._size = 1 << nb_bits",
    "detail": "MY_GISTS.8b2c5f97ac.handwritten_hashtable",
    "documentation": {}
  },
  {
    "label": "HtpasswdFile",
    "kind": 6,
    "importPath": "MY_GISTS.8b2c5f97ac.htpasswd",
    "description": "MY_GISTS.8b2c5f97ac.htpasswd",
    "peekOfCode": "class HtpasswdFile:\n    \"\"\"A class for manipulating htpasswd files.\"\"\"\n    def __init__(self, filename, create=False):\n        self.entries = []\n        self.filename = filename\n        if not create:\n            if os.path.exists(self.filename):\n                self.load()\n            else:\n                raise Exception(\"%s does not exist\" % self.filename)",
    "detail": "MY_GISTS.8b2c5f97ac.htpasswd",
    "documentation": {}
  },
  {
    "label": "salt",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.htpasswd",
    "description": "MY_GISTS.8b2c5f97ac.htpasswd",
    "peekOfCode": "def salt():\n    \"\"\"Returns a string of 2 randome letters\"\"\"\n    letters = 'abcdefghijklmnopqrstuvwxyz' \\\n              'ABCDEFGHIJKLMNOPQRSTUVWXYZ' \\\n              '0123456789/.'\n    return random.choice(letters) + random.choice(letters)\nclass HtpasswdFile:\n    \"\"\"A class for manipulating htpasswd files.\"\"\"\n    def __init__(self, filename, create=False):\n        self.entries = []",
    "detail": "MY_GISTS.8b2c5f97ac.htpasswd",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.htpasswd",
    "description": "MY_GISTS.8b2c5f97ac.htpasswd",
    "peekOfCode": "def main():\n    \"\"\"\n        %prog -b[c] filename username password\n        %prog -D filename username\"\"\"\n    # For now, we only care about the use cases that affect tests/functional.py\n    parser = OptionParser(usage=main.__doc__)\n    parser.add_option('-b', action='store_true', dest='batch', default=False,\n        help='Batch mode; password is passed on the command line IN THE CLEAR.'\n        )\n    parser.add_option('-c', action='store_true', dest='create', default=False,",
    "detail": "MY_GISTS.8b2c5f97ac.htpasswd",
    "documentation": {}
  },
  {
    "label": "logger",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.loggers_test",
    "description": "MY_GISTS.8b2c5f97ac.loggers_test",
    "peekOfCode": "logger = logging.getLogger('your-module')\nlogger.addHandler(coloredlogs.ColoredStreamHandler())\n# Some examples.\nlogger.setLevel(logging.DEBUG)\nlogger.debug(\"this is a debugging message\")\nlogger.info(\"this is an informational message\")\nlogger.warn(\"this is a warning message\")\nlogger.error(\"this is an error message\")\nlogger.fatal(\"this is a fatal message\")\nlogger.critical(\"this is a critical message\")",
    "detail": "MY_GISTS.8b2c5f97ac.loggers_test",
    "documentation": {}
  },
  {
    "label": "notify",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.mail",
    "description": "MY_GISTS.8b2c5f97ac.mail",
    "peekOfCode": "def notify(msg, submsg=\"mail.py : auto mailer (with notify-send)\"):\n ''' Notification using subprocess and notify-send.\n Also print the informations directly to the screen.\n Fails simply if notify-send is not found.'''\n try:\n  subprocess.Popen(['notify-send', msg, submsg])\n except:\n  print \"notify-send : not-found !\"\n  return -1\n print \"msg=%s\\nsubmsg=%s\" % (msg, submsg)",
    "detail": "MY_GISTS.8b2c5f97ac.mail",
    "documentation": {}
  },
  {
    "label": "send_me_an_email",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.mail",
    "description": "MY_GISTS.8b2c5f97ac.mail",
    "peekOfCode": "def send_me_an_email(message, subj=\"[LOG] no object\", me=\"jarvisATcransDOTorg\".replace(\"AT\",\"@\").replace(\"DOT\",\".\"), you=\"jarvisATcransDOTorg\".replace(\"AT\",\"@\").replace(\"DOT\",\".\"), my_identity=\"jarvis log\"):\n\t\"\"\" Send a message [message] by email.\n\tThe content of the email is [message], the subject is [subj].\n\tThe sender is [me], not necessary a valid sender for the SMTP.\n\tThe mail will be sent to [you].\n\tAuto configure with SMTP server on localhost in the cr@ns server (http://www.crans.org)\n\t(c) Lilian Besson, 2012-2013.\n\t\"\"\"\n\tnotify(subj, message+\"\\n### ME=\"+me+\" YOU=\"+you)\n\tmsg = MIMEText(message+(signature % me))",
    "detail": "MY_GISTS.8b2c5f97ac.mail",
    "documentation": {}
  },
  {
    "label": "\tmsg",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.mail",
    "description": "MY_GISTS.8b2c5f97ac.mail",
    "peekOfCode": "\tmsg = MIMEText(message+(signature % me))\n\t# The order is \"important\", to act like a real mail client !\n\tmsg['From'] = my_identity+\" <\"+me+\">\"\n\tmsg['To'] = you\n\tmsg['Subject'] = subj\n\t# Send the message via our own SMTP server, but don't include the\n\t# envelope header.\n\ts = smtplib.SMTP('smtp.crans.org')\n\t# s = smtplib.SMTP('localhost')\n\ts.sendmail(me, [you], msg.as_string())",
    "detail": "MY_GISTS.8b2c5f97ac.mail",
    "documentation": {}
  },
  {
    "label": "\tmsg['From']",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.mail",
    "description": "MY_GISTS.8b2c5f97ac.mail",
    "peekOfCode": "\tmsg['From'] = my_identity+\" <\"+me+\">\"\n\tmsg['To'] = you\n\tmsg['Subject'] = subj\n\t# Send the message via our own SMTP server, but don't include the\n\t# envelope header.\n\ts = smtplib.SMTP('smtp.crans.org')\n\t# s = smtplib.SMTP('localhost')\n\ts.sendmail(me, [you], msg.as_string())\n\ts.quit()\n\tprint \"An email has been sent to %s, from %s <%s>.\" % (you, my_identity, me)",
    "detail": "MY_GISTS.8b2c5f97ac.mail",
    "documentation": {}
  },
  {
    "label": "\tmsg['To']",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.mail",
    "description": "MY_GISTS.8b2c5f97ac.mail",
    "peekOfCode": "\tmsg['To'] = you\n\tmsg['Subject'] = subj\n\t# Send the message via our own SMTP server, but don't include the\n\t# envelope header.\n\ts = smtplib.SMTP('smtp.crans.org')\n\t# s = smtplib.SMTP('localhost')\n\ts.sendmail(me, [you], msg.as_string())\n\ts.quit()\n\tprint \"An email has been sent to %s, from %s <%s>.\" % (you, my_identity, me)\n\tprint \"Title of the email : \\n%s\" % subj",
    "detail": "MY_GISTS.8b2c5f97ac.mail",
    "documentation": {}
  },
  {
    "label": "\tmsg['Subject']",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.mail",
    "description": "MY_GISTS.8b2c5f97ac.mail",
    "peekOfCode": "\tmsg['Subject'] = subj\n\t# Send the message via our own SMTP server, but don't include the\n\t# envelope header.\n\ts = smtplib.SMTP('smtp.crans.org')\n\t# s = smtplib.SMTP('localhost')\n\ts.sendmail(me, [you], msg.as_string())\n\ts.quit()\n\tprint \"An email has been sent to %s, from %s <%s>.\" % (you, my_identity, me)\n\tprint \"Title of the email : \\n%s\" % subj\n\tprint \"Content of the email : \\n%s\" % message",
    "detail": "MY_GISTS.8b2c5f97ac.mail",
    "documentation": {}
  },
  {
    "label": "\ts",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.mail",
    "description": "MY_GISTS.8b2c5f97ac.mail",
    "peekOfCode": "\ts = smtplib.SMTP('smtp.crans.org')\n\t# s = smtplib.SMTP('localhost')\n\ts.sendmail(me, [you], msg.as_string())\n\ts.quit()\n\tprint \"An email has been sent to %s, from %s <%s>.\" % (you, my_identity, me)\n\tprint \"Title of the email : \\n%s\" % subj\n\tprint \"Content of the email : \\n%s\" % message\nimport sys, os\nif __name__ == '__main__':\n  if '-h' in sys.argv or '--help' in sys.argv:",
    "detail": "MY_GISTS.8b2c5f97ac.mail",
    "documentation": {}
  },
  {
    "label": "send_me_an_email",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.mail_ghost",
    "description": "MY_GISTS.8b2c5f97ac.mail_ghost",
    "peekOfCode": "def send_me_an_email(message, subj=\"[LOG] no object\", me=defaultaddress,\n                     you=defaultaddress, my_identity=\"jarvis\"):\n    \"\"\" Send a message [message] by email.\n    The content of the email is [message], the subject is [subj].\n    The sender is [me], not necessary a valid sender for the SMTP.\n    The mail will be sent to [you].\n    Auto configured with SMTP server (smtp.crans.org) with SSL support for the cr@ns server (http://www.crans.org)\n    (c) Lilian Besson, 2012-2014.\n    \"\"\"\n    msg = MIMEText(\"%s\" % (message + (signature % me)).replace(\"\\n\", '\\n'), _charset=\"utf-8\")",
    "detail": "MY_GISTS.8b2c5f97ac.mail_ghost",
    "documentation": {}
  },
  {
    "label": "defaultaddress",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.mail_ghost",
    "description": "MY_GISTS.8b2c5f97ac.mail_ghost",
    "peekOfCode": "defaultaddress = \"jarvisATcransDOTorg\".replace(\"AT\", \"@\").replace(\"DOT\", \".\")\nsignature = \"\"\"\n--\n%s\n\"\"\"\ndef send_me_an_email(message, subj=\"[LOG] no object\", me=defaultaddress,\n                     you=defaultaddress, my_identity=\"jarvis\"):\n    \"\"\" Send a message [message] by email.\n    The content of the email is [message], the subject is [subj].\n    The sender is [me], not necessary a valid sender for the SMTP.",
    "detail": "MY_GISTS.8b2c5f97ac.mail_ghost",
    "documentation": {}
  },
  {
    "label": "signature",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.mail_ghost",
    "description": "MY_GISTS.8b2c5f97ac.mail_ghost",
    "peekOfCode": "signature = \"\"\"\n--\n%s\n\"\"\"\ndef send_me_an_email(message, subj=\"[LOG] no object\", me=defaultaddress,\n                     you=defaultaddress, my_identity=\"jarvis\"):\n    \"\"\" Send a message [message] by email.\n    The content of the email is [message], the subject is [subj].\n    The sender is [me], not necessary a valid sender for the SMTP.\n    The mail will be sent to [you].",
    "detail": "MY_GISTS.8b2c5f97ac.mail_ghost",
    "documentation": {}
  },
  {
    "label": "send_me_an_email",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.mail_html",
    "description": "MY_GISTS.8b2c5f97ac.mail_html",
    "peekOfCode": "def send_me_an_email(message, subj=\"[LOG] no object\", me=defaultaddress,\n                     you=defaultaddress, my_identity=\"jarvis (HTML)\"):\n    \"\"\" Send a message [message] by email.\n    The content of the email is [message] (encoded as HTML), the subject is [subj].\n    The sender is [me], not necessary a valid sender for the SMTP.\n    The mail will be sent to [you].\n    Auto configured with SMTP server (smtp.crans.org) with SSL support for the cr@ns server (http://www.crans.org)\n    (c) Lilian Besson, 2014.\n    \"\"\"\n    msg = MIMEText(\"%s\" % (message + (signature % me)).replace(\"\\n\", '\\n'), _charset=None, _subtype=\"html\")",
    "detail": "MY_GISTS.8b2c5f97ac.mail_html",
    "documentation": {}
  },
  {
    "label": "datetoday",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.mail_html",
    "description": "MY_GISTS.8b2c5f97ac.mail_html",
    "peekOfCode": "datetoday = date.today().isoformat()\ndefaultaddress = \"jarvisATcransDOTorg\".replace(\"AT\", \"@\").replace(\"DOT\", \".\")\nsignature = \"\"\"<br>-- <br>%s<br>\n<img style=\\\"display: none; vibility: hidden;\\\" src=\\\"https://ga-beacon.appspot.com/UA-38514290-15/mail_html.py/\"\"\" + datetoday + \"?pixel\\\" />\"\ndef send_me_an_email(message, subj=\"[LOG] no object\", me=defaultaddress,\n                     you=defaultaddress, my_identity=\"jarvis (HTML)\"):\n    \"\"\" Send a message [message] by email.\n    The content of the email is [message] (encoded as HTML), the subject is [subj].\n    The sender is [me], not necessary a valid sender for the SMTP.\n    The mail will be sent to [you].",
    "detail": "MY_GISTS.8b2c5f97ac.mail_html",
    "documentation": {}
  },
  {
    "label": "defaultaddress",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.mail_html",
    "description": "MY_GISTS.8b2c5f97ac.mail_html",
    "peekOfCode": "defaultaddress = \"jarvisATcransDOTorg\".replace(\"AT\", \"@\").replace(\"DOT\", \".\")\nsignature = \"\"\"<br>-- <br>%s<br>\n<img style=\\\"display: none; vibility: hidden;\\\" src=\\\"https://ga-beacon.appspot.com/UA-38514290-15/mail_html.py/\"\"\" + datetoday + \"?pixel\\\" />\"\ndef send_me_an_email(message, subj=\"[LOG] no object\", me=defaultaddress,\n                     you=defaultaddress, my_identity=\"jarvis (HTML)\"):\n    \"\"\" Send a message [message] by email.\n    The content of the email is [message] (encoded as HTML), the subject is [subj].\n    The sender is [me], not necessary a valid sender for the SMTP.\n    The mail will be sent to [you].\n    Auto configured with SMTP server (smtp.crans.org) with SSL support for the cr@ns server (http://www.crans.org)",
    "detail": "MY_GISTS.8b2c5f97ac.mail_html",
    "documentation": {}
  },
  {
    "label": "signature",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.mail_html",
    "description": "MY_GISTS.8b2c5f97ac.mail_html",
    "peekOfCode": "signature = \"\"\"<br>-- <br>%s<br>\n<img style=\\\"display: none; vibility: hidden;\\\" src=\\\"https://ga-beacon.appspot.com/UA-38514290-15/mail_html.py/\"\"\" + datetoday + \"?pixel\\\" />\"\ndef send_me_an_email(message, subj=\"[LOG] no object\", me=defaultaddress,\n                     you=defaultaddress, my_identity=\"jarvis (HTML)\"):\n    \"\"\" Send a message [message] by email.\n    The content of the email is [message] (encoded as HTML), the subject is [subj].\n    The sender is [me], not necessary a valid sender for the SMTP.\n    The mail will be sent to [you].\n    Auto configured with SMTP server (smtp.crans.org) with SSL support for the cr@ns server (http://www.crans.org)\n    (c) Lilian Besson, 2014.",
    "detail": "MY_GISTS.8b2c5f97ac.mail_html",
    "documentation": {}
  },
  {
    "label": "send_me_an_email",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.mail_tel",
    "description": "MY_GISTS.8b2c5f97ac.mail_tel",
    "peekOfCode": "def send_me_an_email(message, subj=\"[LOG] no object\", me=\"jarvisATcransDOTorg\".replace(\"AT\", \"@\").replace(\"DOT\", \".\"), you=\"0628412257ATsfrDOTfr\".replace(\"AT\", \"@\").replace(\"DOT\", \".\"), my_identity=\"jarvis log\"):\n    \"\"\" Send a message [message] by email.\n    The content of the email is [message], the subject is [subj].\n    The sender is [me], not necessary a valid sender for the SMTP.\n    The mail will be sent to [you].\n    Auto configure with SMTP server on localhost in the cr@ns server (http://www.crans.org)\n    (c) Lilian Besson, 2012-2013.\n    \"\"\"\n    msg = MIMEText(message + (signature % me))\n    # The order is \"important\", to act like a real mail client !",
    "detail": "MY_GISTS.8b2c5f97ac.mail_tel",
    "documentation": {}
  },
  {
    "label": "signature",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.mail_tel",
    "description": "MY_GISTS.8b2c5f97ac.mail_tel",
    "peekOfCode": "signature = \"\"\"\\n\n--\n%s\n\"\"\"\ndef send_me_an_email(message, subj=\"[LOG] no object\", me=\"jarvisATcransDOTorg\".replace(\"AT\", \"@\").replace(\"DOT\", \".\"), you=\"0628412257ATsfrDOTfr\".replace(\"AT\", \"@\").replace(\"DOT\", \".\"), my_identity=\"jarvis log\"):\n    \"\"\" Send a message [message] by email.\n    The content of the email is [message], the subject is [subj].\n    The sender is [me], not necessary a valid sender for the SMTP.\n    The mail will be sent to [you].\n    Auto configure with SMTP server on localhost in the cr@ns server (http://www.crans.org)",
    "detail": "MY_GISTS.8b2c5f97ac.mail_tel",
    "documentation": {}
  },
  {
    "label": "error_dialog",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.MOcamlViewFile",
    "description": "MY_GISTS.8b2c5f97ac.MOcamlViewFile",
    "peekOfCode": "def error_dialog(parent, msg):\n    dialog = gtk.MessageDialog(parent,\n                               gtk.DIALOG_DESTROY_WITH_PARENT,\n                               gtk.MESSAGE_ERROR,\n                               gtk.BUTTONS_OK,\n                               msg)\n    dialog.run()\n    dialog.destroy()\ndef remove_all_marks(buffer):\n    begin, end = buffer.get_bounds()",
    "detail": "MY_GISTS.8b2c5f97ac.MOcamlViewFile",
    "documentation": {}
  },
  {
    "label": "remove_all_marks",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.MOcamlViewFile",
    "description": "MY_GISTS.8b2c5f97ac.MOcamlViewFile",
    "peekOfCode": "def remove_all_marks(buffer):\n    begin, end = buffer.get_bounds()\n    buffer.remove_source_marks(begin, end)\ndef load_file(buffer, path):\n    buffer.begin_not_undoable_action()\n    try:\n        txt = open(path).read()\n    except:\n        return False\n    buffer.set_text(txt)",
    "detail": "MY_GISTS.8b2c5f97ac.MOcamlViewFile",
    "documentation": {}
  },
  {
    "label": "load_file",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.MOcamlViewFile",
    "description": "MY_GISTS.8b2c5f97ac.MOcamlViewFile",
    "peekOfCode": "def load_file(buffer, path):\n    buffer.begin_not_undoable_action()\n    try:\n        txt = open(path).read()\n    except:\n        return False\n    buffer.set_text(txt)\n    buffer.set_data('filename', path)\n    buffer.end_not_undoable_action()\n    buffer.set_modified(False)",
    "detail": "MY_GISTS.8b2c5f97ac.MOcamlViewFile",
    "documentation": {}
  },
  {
    "label": "open_file",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.MOcamlViewFile",
    "description": "MY_GISTS.8b2c5f97ac.MOcamlViewFile",
    "peekOfCode": "def open_file(buffer, filename):\n    # get the new language for the file mimetype\n    manager = buffer.get_data('languages-manager')\n    # essai pour charger un style particulier\n    # gtk-source-style-scheme-manager-get-default\n    try:\n        stylescheme = buffer.get_style_scheme()  # un autre si possible\n    except:\n        # XXX A modifier si on veut un autre\n        manager2 = buffer.get_data('styles-scheme-manager')",
    "detail": "MY_GISTS.8b2c5f97ac.MOcamlViewFile",
    "documentation": {}
  },
  {
    "label": "begin_print_cb",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.MOcamlViewFile",
    "description": "MY_GISTS.8b2c5f97ac.MOcamlViewFile",
    "peekOfCode": "def begin_print_cb(operation, context, compositor):\n    while not compositor.paginate(context):\n        pass\n    n_pages = compositor.get_n_pages()\n    operation.set_n_pages(n_pages)\ndef draw_page_cb(operation, context, page_nr, compositor):\n    compositor.draw_page(context, page_nr)\n# Action callbacks\ndef numbers_toggled_cb(action, sourceview):\n    sourceview.set_show_line_numbers(action.get_active())",
    "detail": "MY_GISTS.8b2c5f97ac.MOcamlViewFile",
    "documentation": {}
  },
  {
    "label": "draw_page_cb",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.MOcamlViewFile",
    "description": "MY_GISTS.8b2c5f97ac.MOcamlViewFile",
    "peekOfCode": "def draw_page_cb(operation, context, page_nr, compositor):\n    compositor.draw_page(context, page_nr)\n# Action callbacks\ndef numbers_toggled_cb(action, sourceview):\n    sourceview.set_show_line_numbers(action.get_active())\ndef marks_toggled_cb(action, sourceview):\n    sourceview.set_show_line_marks(action.get_active())\ndef margin_toggled_cb(action, sourceview):\n    sourceview.set_show_right_margin(action.get_active())\ndef auto_indent_toggled_cb(action, sourceview):",
    "detail": "MY_GISTS.8b2c5f97ac.MOcamlViewFile",
    "documentation": {}
  },
  {
    "label": "numbers_toggled_cb",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.MOcamlViewFile",
    "description": "MY_GISTS.8b2c5f97ac.MOcamlViewFile",
    "peekOfCode": "def numbers_toggled_cb(action, sourceview):\n    sourceview.set_show_line_numbers(action.get_active())\ndef marks_toggled_cb(action, sourceview):\n    sourceview.set_show_line_marks(action.get_active())\ndef margin_toggled_cb(action, sourceview):\n    sourceview.set_show_right_margin(action.get_active())\ndef auto_indent_toggled_cb(action, sourceview):\n    sourceview.set_auto_indent(action.get_active())\ndef insert_spaces_toggled_cb(action, sourceview):\n    sourceview.set_insert_spaces_instead_of_tabs(action.get_active())",
    "detail": "MY_GISTS.8b2c5f97ac.MOcamlViewFile",
    "documentation": {}
  },
  {
    "label": "marks_toggled_cb",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.MOcamlViewFile",
    "description": "MY_GISTS.8b2c5f97ac.MOcamlViewFile",
    "peekOfCode": "def marks_toggled_cb(action, sourceview):\n    sourceview.set_show_line_marks(action.get_active())\ndef margin_toggled_cb(action, sourceview):\n    sourceview.set_show_right_margin(action.get_active())\ndef auto_indent_toggled_cb(action, sourceview):\n    sourceview.set_auto_indent(action.get_active())\ndef insert_spaces_toggled_cb(action, sourceview):\n    sourceview.set_insert_spaces_instead_of_tabs(action.get_active())\ndef tabs_toggled_cb(action, action2, sourceview):\n    sourceview.set_tab_width(action.get_current_value())",
    "detail": "MY_GISTS.8b2c5f97ac.MOcamlViewFile",
    "documentation": {}
  },
  {
    "label": "margin_toggled_cb",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.MOcamlViewFile",
    "description": "MY_GISTS.8b2c5f97ac.MOcamlViewFile",
    "peekOfCode": "def margin_toggled_cb(action, sourceview):\n    sourceview.set_show_right_margin(action.get_active())\ndef auto_indent_toggled_cb(action, sourceview):\n    sourceview.set_auto_indent(action.get_active())\ndef insert_spaces_toggled_cb(action, sourceview):\n    sourceview.set_insert_spaces_instead_of_tabs(action.get_active())\ndef tabs_toggled_cb(action, action2, sourceview):\n    sourceview.set_tab_width(action.get_current_value())\ndef new_view_cb(action, sourceview):\n    window = create_view_window(sourceview.get_buffer(), sourceview)",
    "detail": "MY_GISTS.8b2c5f97ac.MOcamlViewFile",
    "documentation": {}
  },
  {
    "label": "auto_indent_toggled_cb",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.MOcamlViewFile",
    "description": "MY_GISTS.8b2c5f97ac.MOcamlViewFile",
    "peekOfCode": "def auto_indent_toggled_cb(action, sourceview):\n    sourceview.set_auto_indent(action.get_active())\ndef insert_spaces_toggled_cb(action, sourceview):\n    sourceview.set_insert_spaces_instead_of_tabs(action.get_active())\ndef tabs_toggled_cb(action, action2, sourceview):\n    sourceview.set_tab_width(action.get_current_value())\ndef new_view_cb(action, sourceview):\n    window = create_view_window(sourceview.get_buffer(), sourceview)\n    window.set_default_size(683, 700)\n    window.show()",
    "detail": "MY_GISTS.8b2c5f97ac.MOcamlViewFile",
    "documentation": {}
  },
  {
    "label": "insert_spaces_toggled_cb",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.MOcamlViewFile",
    "description": "MY_GISTS.8b2c5f97ac.MOcamlViewFile",
    "peekOfCode": "def insert_spaces_toggled_cb(action, sourceview):\n    sourceview.set_insert_spaces_instead_of_tabs(action.get_active())\ndef tabs_toggled_cb(action, action2, sourceview):\n    sourceview.set_tab_width(action.get_current_value())\ndef new_view_cb(action, sourceview):\n    window = create_view_window(sourceview.get_buffer(), sourceview)\n    window.set_default_size(683, 700)\n    window.show()\ndef print_cb(action, sourceview):\n    window = sourceview.get_toplevel()",
    "detail": "MY_GISTS.8b2c5f97ac.MOcamlViewFile",
    "documentation": {}
  },
  {
    "label": "tabs_toggled_cb",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.MOcamlViewFile",
    "description": "MY_GISTS.8b2c5f97ac.MOcamlViewFile",
    "peekOfCode": "def tabs_toggled_cb(action, action2, sourceview):\n    sourceview.set_tab_width(action.get_current_value())\ndef new_view_cb(action, sourceview):\n    window = create_view_window(sourceview.get_buffer(), sourceview)\n    window.set_default_size(683, 700)\n    window.show()\ndef print_cb(action, sourceview):\n    window = sourceview.get_toplevel()\n    buffer = sourceview.get_buffer()\n    compositor = gtksourceview2.print_compositor_new_from_view(sourceview)",
    "detail": "MY_GISTS.8b2c5f97ac.MOcamlViewFile",
    "documentation": {}
  },
  {
    "label": "new_view_cb",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.MOcamlViewFile",
    "description": "MY_GISTS.8b2c5f97ac.MOcamlViewFile",
    "peekOfCode": "def new_view_cb(action, sourceview):\n    window = create_view_window(sourceview.get_buffer(), sourceview)\n    window.set_default_size(683, 700)\n    window.show()\ndef print_cb(action, sourceview):\n    window = sourceview.get_toplevel()\n    buffer = sourceview.get_buffer()\n    compositor = gtksourceview2.print_compositor_new_from_view(sourceview)\n    compositor.set_wrap_mode(gtk.WRAP_CHAR)\n    compositor.set_highlight_syntax(True)",
    "detail": "MY_GISTS.8b2c5f97ac.MOcamlViewFile",
    "documentation": {}
  },
  {
    "label": "print_cb",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.MOcamlViewFile",
    "description": "MY_GISTS.8b2c5f97ac.MOcamlViewFile",
    "peekOfCode": "def print_cb(action, sourceview):\n    window = sourceview.get_toplevel()\n    buffer = sourceview.get_buffer()\n    compositor = gtksourceview2.print_compositor_new_from_view(sourceview)\n    compositor.set_wrap_mode(gtk.WRAP_CHAR)\n    compositor.set_highlight_syntax(True)\n    compositor.set_print_line_numbers(5)\n    compositor.set_header_format(False, 'Imprimé dans %A', None, '%F')\n    filename = buffer.get_data('filename')\n    compositor.set_footer_format(True, '%T', filename, 'Page %N/%Q')",
    "detail": "MY_GISTS.8b2c5f97ac.MOcamlViewFile",
    "documentation": {}
  },
  {
    "label": "open_file_cb",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.MOcamlViewFile",
    "description": "MY_GISTS.8b2c5f97ac.MOcamlViewFile",
    "peekOfCode": "def open_file_cb(action, buffer):\n    chooser = gtk.FileChooserDialog('Ouvrir un fichier ...', None,\n                                    gtk.FILE_CHOOSER_ACTION_OPEN,\n                                    (gtk.STOCK_CANCEL, gtk.RESPONSE_CANCEL,\n                                     gtk.STOCK_OPEN, gtk.RESPONSE_OK))\n    response = chooser.run()\n    if response == gtk.RESPONSE_OK:\n        filename = chooser.get_filename()\n        if filename:\n            open_file(buffer, filename)",
    "detail": "MY_GISTS.8b2c5f97ac.MOcamlViewFile",
    "documentation": {}
  },
  {
    "label": "update_cursor_position",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.MOcamlViewFile",
    "description": "MY_GISTS.8b2c5f97ac.MOcamlViewFile",
    "peekOfCode": "def update_cursor_position(buffer, view):\n    tabwidth = view.get_tab_width()\n    pos_label = view.get_data('pos_label')\n    iter = buffer.get_iter_at_mark(buffer.get_insert())\n    nchars = iter.get_offset()\n    row = iter.get_line() + 1\n    start = iter.copy()\n    start.set_line_offset(0)\n    col = 0\n    while start.compare(iter) < 0:",
    "detail": "MY_GISTS.8b2c5f97ac.MOcamlViewFile",
    "documentation": {}
  },
  {
    "label": "move_cursor_cb",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.MOcamlViewFile",
    "description": "MY_GISTS.8b2c5f97ac.MOcamlViewFile",
    "peekOfCode": "def move_cursor_cb(buffer, cursoriter, mark, view):\n    update_cursor_position(buffer, view)\ndef window_deleted_cb(widget, ev, view):\n    if windows[0] == widget:\n        gtk.main_quit()\n    else:\n        # remove window from list\n        windows.remove(widget)\n        # we return False since we want the window destroyed\n        return False",
    "detail": "MY_GISTS.8b2c5f97ac.MOcamlViewFile",
    "documentation": {}
  },
  {
    "label": "window_deleted_cb",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.MOcamlViewFile",
    "description": "MY_GISTS.8b2c5f97ac.MOcamlViewFile",
    "peekOfCode": "def window_deleted_cb(widget, ev, view):\n    if windows[0] == widget:\n        gtk.main_quit()\n    else:\n        # remove window from list\n        windows.remove(widget)\n        # we return False since we want the window destroyed\n        return False\n    return True\ndef button_press_cb(view, ev):",
    "detail": "MY_GISTS.8b2c5f97ac.MOcamlViewFile",
    "documentation": {}
  },
  {
    "label": "button_press_cb",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.MOcamlViewFile",
    "description": "MY_GISTS.8b2c5f97ac.MOcamlViewFile",
    "peekOfCode": "def button_press_cb(view, ev):\n    buffer = view.get_buffer()\n    if not view.get_show_line_marks():\n        return False\n    # check that the click was on the left gutter\n    if ev.window == view.get_window(gtk.TEXT_WINDOW_LEFT):\n        if ev.button == 1:\n            mark_category = MARK_CATEGORY_1\n        else:\n            mark_category = MARK_CATEGORY_2",
    "detail": "MY_GISTS.8b2c5f97ac.MOcamlViewFile",
    "documentation": {}
  },
  {
    "label": "create_view_window",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.MOcamlViewFile",
    "description": "MY_GISTS.8b2c5f97ac.MOcamlViewFile",
    "peekOfCode": "def create_view_window(buffer, sourceview=None):\n    # window\n    window = gtk.Window(gtk.WINDOW_TOPLEVEL)\n    window.set_border_width(0)\n    window.set_title('MOcaml FileViewer [Naereen test]')\n    windows.append(window)  # this list contains all view windows\n    # view\n    view = gtksourceview2.View(buffer)\n    buffer.connect('mark_set', move_cursor_cb, view)\n    buffer.connect('changed', update_cursor_position, view)",
    "detail": "MY_GISTS.8b2c5f97ac.MOcamlViewFile",
    "documentation": {}
  },
  {
    "label": "create_main_window",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.MOcamlViewFile",
    "description": "MY_GISTS.8b2c5f97ac.MOcamlViewFile",
    "peekOfCode": "def create_main_window(buffer):\n    window = create_view_window(buffer)\n    ui_manager = window.get_data('ui_manager')\n    # buffer action group\n    action_group = gtk.ActionGroup('BufferActions')\n    action_group.add_actions(buffer_actions, buffer)\n    ui_manager.insert_action_group(action_group, 1)\n    # merge buffer ui\n    ui_manager.add_ui_from_string(buffer_ui_description)\n    # preselect menu checkitems",
    "detail": "MY_GISTS.8b2c5f97ac.MOcamlViewFile",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.MOcamlViewFile",
    "description": "MY_GISTS.8b2c5f97ac.MOcamlViewFile",
    "peekOfCode": "def main(args):\n    # create buffer\n    lm = gtksourceview2.LanguageManager()\n    sm = gtksourceview2.StyleSchemeManager()\n    buffer = gtksourceview2.Buffer()\n    buffer.set_data('languages-manager', lm)\n    buffer.set_data('styles-scheme-manager', sm)\n    # parse arguments\n    if len(args) >= 2:\n        open_file(buffer, args[1])",
    "detail": "MY_GISTS.8b2c5f97ac.MOcamlViewFile",
    "documentation": {}
  },
  {
    "label": "windows",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.MOcamlViewFile",
    "description": "MY_GISTS.8b2c5f97ac.MOcamlViewFile",
    "peekOfCode": "windows = []    # this list contains all view windows\nMARK_CATEGORY_1 = 'one'\nMARK_CATEGORY_2 = 'two'\nDATADIR = '/usr/share'\ndef error_dialog(parent, msg):\n    dialog = gtk.MessageDialog(parent,\n                               gtk.DIALOG_DESTROY_WITH_PARENT,\n                               gtk.MESSAGE_ERROR,\n                               gtk.BUTTONS_OK,\n                               msg)",
    "detail": "MY_GISTS.8b2c5f97ac.MOcamlViewFile",
    "documentation": {}
  },
  {
    "label": "MARK_CATEGORY_1",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.MOcamlViewFile",
    "description": "MY_GISTS.8b2c5f97ac.MOcamlViewFile",
    "peekOfCode": "MARK_CATEGORY_1 = 'one'\nMARK_CATEGORY_2 = 'two'\nDATADIR = '/usr/share'\ndef error_dialog(parent, msg):\n    dialog = gtk.MessageDialog(parent,\n                               gtk.DIALOG_DESTROY_WITH_PARENT,\n                               gtk.MESSAGE_ERROR,\n                               gtk.BUTTONS_OK,\n                               msg)\n    dialog.run()",
    "detail": "MY_GISTS.8b2c5f97ac.MOcamlViewFile",
    "documentation": {}
  },
  {
    "label": "MARK_CATEGORY_2",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.MOcamlViewFile",
    "description": "MY_GISTS.8b2c5f97ac.MOcamlViewFile",
    "peekOfCode": "MARK_CATEGORY_2 = 'two'\nDATADIR = '/usr/share'\ndef error_dialog(parent, msg):\n    dialog = gtk.MessageDialog(parent,\n                               gtk.DIALOG_DESTROY_WITH_PARENT,\n                               gtk.MESSAGE_ERROR,\n                               gtk.BUTTONS_OK,\n                               msg)\n    dialog.run()\n    dialog.destroy()",
    "detail": "MY_GISTS.8b2c5f97ac.MOcamlViewFile",
    "documentation": {}
  },
  {
    "label": "DATADIR",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.MOcamlViewFile",
    "description": "MY_GISTS.8b2c5f97ac.MOcamlViewFile",
    "peekOfCode": "DATADIR = '/usr/share'\ndef error_dialog(parent, msg):\n    dialog = gtk.MessageDialog(parent,\n                               gtk.DIALOG_DESTROY_WITH_PARENT,\n                               gtk.MESSAGE_ERROR,\n                               gtk.BUTTONS_OK,\n                               msg)\n    dialog.run()\n    dialog.destroy()\ndef remove_all_marks(buffer):",
    "detail": "MY_GISTS.8b2c5f97ac.MOcamlViewFile",
    "documentation": {}
  },
  {
    "label": "buffer_actions",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.MOcamlViewFile",
    "description": "MY_GISTS.8b2c5f97ac.MOcamlViewFile",
    "peekOfCode": "buffer_actions = [\n    ('Open', gtk.STOCK_OPEN, '_Ouvre', '<control>O', 'Ouvre un fichier', open_file_cb),\n    ('Quit', gtk.STOCK_QUIT, '_Quitte', '<control>Q', 'Quitte l\\'application', gtk.main_quit)\n]\nview_actions = [\n    ('FileMenu', None, '_Fichier'),\n    ('ViewMenu', None, '_Vue'),\n    ('Print', gtk.STOCK_PRINT, '_Impression', '<control>P', 'Print the file', print_cb),\n    ('NewView', gtk.STOCK_NEW, '_Nouvelle Vue', None, 'Create a new view of the file', new_view_cb),\n    ('TabsWidth', None, '_Largeur des tabulations')",
    "detail": "MY_GISTS.8b2c5f97ac.MOcamlViewFile",
    "documentation": {}
  },
  {
    "label": "view_actions",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.MOcamlViewFile",
    "description": "MY_GISTS.8b2c5f97ac.MOcamlViewFile",
    "peekOfCode": "view_actions = [\n    ('FileMenu', None, '_Fichier'),\n    ('ViewMenu', None, '_Vue'),\n    ('Print', gtk.STOCK_PRINT, '_Impression', '<control>P', 'Print the file', print_cb),\n    ('NewView', gtk.STOCK_NEW, '_Nouvelle Vue', None, 'Create a new view of the file', new_view_cb),\n    ('TabsWidth', None, '_Largeur des tabulations')\n]\ntoggle_actions = [\n    ('ShowNumbers', None, 'Montre les numéros de _lignes', None, 'Toggle visibility of line numbers in the left margin', numbers_toggled_cb, False),\n    ('ShowMarkers', None, 'Montre les _Marqueurs', None, 'Toggle visibility of markers in the left margin', marks_toggled_cb, False),",
    "detail": "MY_GISTS.8b2c5f97ac.MOcamlViewFile",
    "documentation": {}
  },
  {
    "label": "toggle_actions",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.MOcamlViewFile",
    "description": "MY_GISTS.8b2c5f97ac.MOcamlViewFile",
    "peekOfCode": "toggle_actions = [\n    ('ShowNumbers', None, 'Montre les numéros de _lignes', None, 'Toggle visibility of line numbers in the left margin', numbers_toggled_cb, False),\n    ('ShowMarkers', None, 'Montre les _Marqueurs', None, 'Toggle visibility of markers in the left margin', marks_toggled_cb, False),\n    ('ShowMargin', None, 'Montre les M_arges', None, 'Toggle visibility of right margin indicator', margin_toggled_cb, False),\n    ('AutoIndent', None, 'Activer l\\'_auto-indentation', None, 'Toggle automatic auto indentation of text', auto_indent_toggled_cb, False),\n    ('InsertSpaces', None, 'Insérer des e_spaces au lieu des tabulations', None, 'Whether to insert space characters when inserting tabulations', insert_spaces_toggled_cb, False)\n]\nradio_actions = [\n    ('TabsWidth4', None, '4', None, 'Set tabulation width to 4 spaces', 4),\n    ('TabsWidth6', None, '6', None, 'Set tabulation width to 6 spaces', 6),",
    "detail": "MY_GISTS.8b2c5f97ac.MOcamlViewFile",
    "documentation": {}
  },
  {
    "label": "radio_actions",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.MOcamlViewFile",
    "description": "MY_GISTS.8b2c5f97ac.MOcamlViewFile",
    "peekOfCode": "radio_actions = [\n    ('TabsWidth4', None, '4', None, 'Set tabulation width to 4 spaces', 4),\n    ('TabsWidth6', None, '6', None, 'Set tabulation width to 6 spaces', 6),\n    ('TabsWidth8', None, '8', None, 'Set tabulation width to 8 spaces', 8),\n    ('TabsWidth10', None, '10', None, 'Set tabulation width to 10 spaces', 10),\n    ('TabsWidth12', None, '12', None, 'Set tabulation width to 12 spaces', 12),\n    ('TabsWidth14', None, '14', None, 'Set tabulation width to 14 spaces', 14)\n]\nview_ui_description = \"\"\"\n<ui>",
    "detail": "MY_GISTS.8b2c5f97ac.MOcamlViewFile",
    "documentation": {}
  },
  {
    "label": "view_ui_description",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.MOcamlViewFile",
    "description": "MY_GISTS.8b2c5f97ac.MOcamlViewFile",
    "peekOfCode": "view_ui_description = \"\"\"\n<ui>\n  <menubar name='MainMenu'>\n    <menu action='FileMenu'>\n      <menuitem action='NewView'/>\n      <placeholder name=\"FileMenuAdditions\"/>\n      <separator/>\n      <menuitem action='Print'/>\n    </menu>\n    <menu action='ViewMenu'>",
    "detail": "MY_GISTS.8b2c5f97ac.MOcamlViewFile",
    "documentation": {}
  },
  {
    "label": "buffer_ui_description",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.MOcamlViewFile",
    "description": "MY_GISTS.8b2c5f97ac.MOcamlViewFile",
    "peekOfCode": "buffer_ui_description = \"\"\"\n<ui>\n  <menubar name='MainMenu'>\n    <menu action='FileMenu'>\n      <placeholder name=\"FileMenuAdditions\">\n        <menuitem action='Open'/>\n      </placeholder>\n      <separator/>\n      <menuitem action='Quit'/>\n    </menu>",
    "detail": "MY_GISTS.8b2c5f97ac.MOcamlViewFile",
    "documentation": {}
  },
  {
    "label": "sleeptime",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.my-small-slack-bot",
    "description": "MY_GISTS.8b2c5f97ac.my-small-slack-bot",
    "peekOfCode": "def sleeptime(lmbda=MEAN_TIME, use_poisson=True):\n    \"\"\"Random time until next message.\"\"\"\n    if use_poisson:\n        return poisson(lmbda)\n    else:\n        return lmbda\ndef sleep_bar(secs):\n    \"\"\"Sleep with a bar, or not\"\"\"\n    try:\n        # From progressbar example #3, https://github.com/niltonvolpato/python-progressbar/blob/master/examples.py#L67",
    "detail": "MY_GISTS.8b2c5f97ac.my-small-slack-bot",
    "documentation": {}
  },
  {
    "label": "sleep_bar",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.my-small-slack-bot",
    "description": "MY_GISTS.8b2c5f97ac.my-small-slack-bot",
    "peekOfCode": "def sleep_bar(secs):\n    \"\"\"Sleep with a bar, or not\"\"\"\n    try:\n        # From progressbar example #3, https://github.com/niltonvolpato/python-progressbar/blob/master/examples.py#L67\n        from progressbar import Bar, ETA, ProgressBar, ReverseBar\n        widgets = [Bar('>'), ' ', ETA(), ' ', ReverseBar('<')]\n        pbar = ProgressBar(widgets=widgets, maxval=100).start()\n        for i in range(100):\n            # do something\n            time.sleep(secs / 110.)",
    "detail": "MY_GISTS.8b2c5f97ac.my-small-slack-bot",
    "documentation": {}
  },
  {
    "label": "random_line",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.my-small-slack-bot",
    "description": "MY_GISTS.8b2c5f97ac.my-small-slack-bot",
    "peekOfCode": "def random_line(lines):\n    \"\"\"Read the file and select one line.\"\"\"\n    try:\n        return random.choice(lines).replace('`', '').replace('_', '')\n    except:  # Default quote\n        logging.info(\"Failed to read a random line from this list with {} lines...\".format(len(lines)))  # DEBUG\n        return \"I love you !\"\ndef get_reactions(list_of_ts_channel, sc):\n    \"\"\"Get the reaction of users on all the messages sent by the bot, to increase or decrease the frequency of messages.\"\"\"\n    scale_factor = 1.",
    "detail": "MY_GISTS.8b2c5f97ac.my-small-slack-bot",
    "documentation": {}
  },
  {
    "label": "get_reactions",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.my-small-slack-bot",
    "description": "MY_GISTS.8b2c5f97ac.my-small-slack-bot",
    "peekOfCode": "def get_reactions(list_of_ts_channel, sc):\n    \"\"\"Get the reaction of users on all the messages sent by the bot, to increase or decrease the frequency of messages.\"\"\"\n    scale_factor = 1.\n    try:\n        for (ts, c) in list_of_ts_channel:\n            # https://api.slack.com/methods/reactions.get\n            reaction = sc.api_call(\n                \"reactions.get\", channel=c, timestamp=ts\n            )\n            logging.debug(\"reaction =\", reaction)",
    "detail": "MY_GISTS.8b2c5f97ac.my-small-slack-bot",
    "documentation": {}
  },
  {
    "label": "send",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.my-small-slack-bot",
    "description": "MY_GISTS.8b2c5f97ac.my-small-slack-bot",
    "peekOfCode": "def send(text, sc, use_channel=USE_CHANNEL):\n    \"\"\"Send text to channel SLACK_CHANNEL with client sc.\n    - https://github.com/slackapi/python-slackclient#sending-a-message\n    \"\"\"\n    channel = SLACK_CHANNEL if use_channel else SLACK_USER\n    text = \"{}\\n> (Sent by an _open-source_ Python script :snake:, {}, written by Lilian Besson)\".format(text, URL)\n    logging.info(\"Sending the message '{}' to channel/user {} ...\".format(text, channel))\n    # https://api.slack.com/methods/chat.postMessage\n    return sc.api_call(\n        \"chat.postMessage\", channel=channel, text=text,",
    "detail": "MY_GISTS.8b2c5f97ac.my-small-slack-bot",
    "documentation": {}
  },
  {
    "label": "loop",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.my-small-slack-bot",
    "description": "MY_GISTS.8b2c5f97ac.my-small-slack-bot",
    "peekOfCode": "def loop(quote_file=QUOTE_FILE):\n    \"\"\"Main loop.\"\"\"\n    logging.info(\"Starting my Slack bot, reading random quotes from the file {}...\".format(quote_file))\n    # Get list of quotes and parameters\n    the_quote_file = open(quote_file, 'r')\n    lines = the_quote_file.readlines()\n    sc = SlackClient(SLACK_TOKEN)\n    lmbda = MEAN_TIME\n    list_of_ts_channel = []\n    # Start loop",
    "detail": "MY_GISTS.8b2c5f97ac.my-small-slack-bot",
    "documentation": {}
  },
  {
    "label": "MINUTES",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.my-small-slack-bot",
    "description": "MY_GISTS.8b2c5f97ac.my-small-slack-bot",
    "peekOfCode": "MINUTES = 60\nHOURS = 60 * MINUTES\nQUOTE_FILE = os.getenv(\"quotes\", expanduser(join(\"~\", \".quotes.txt\")))\nSLACK_TOKEN = open(expanduser(join(\"~\", \".slack_api_key\")), 'r').readline().strip()\nUSE_CHANNEL = False  # DEBUG\nUSE_CHANNEL = True\nSLACK_USER = \"@lilian\"\nSLACK_CHANNEL = \"#random\"\nMEAN_TIME = (12 * HOURS) if USE_CHANNEL else 30\nURL = \"https://bitbucket.org/lbesson/bin/src/master/my-small-slack-bot.py\"",
    "detail": "MY_GISTS.8b2c5f97ac.my-small-slack-bot",
    "documentation": {}
  },
  {
    "label": "HOURS",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.my-small-slack-bot",
    "description": "MY_GISTS.8b2c5f97ac.my-small-slack-bot",
    "peekOfCode": "HOURS = 60 * MINUTES\nQUOTE_FILE = os.getenv(\"quotes\", expanduser(join(\"~\", \".quotes.txt\")))\nSLACK_TOKEN = open(expanduser(join(\"~\", \".slack_api_key\")), 'r').readline().strip()\nUSE_CHANNEL = False  # DEBUG\nUSE_CHANNEL = True\nSLACK_USER = \"@lilian\"\nSLACK_CHANNEL = \"#random\"\nMEAN_TIME = (12 * HOURS) if USE_CHANNEL else 30\nURL = \"https://bitbucket.org/lbesson/bin/src/master/my-small-slack-bot.py\"\nPOSITIVE_REACTIONS = ['up', '+1', 'thumbsup']",
    "detail": "MY_GISTS.8b2c5f97ac.my-small-slack-bot",
    "documentation": {}
  },
  {
    "label": "QUOTE_FILE",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.my-small-slack-bot",
    "description": "MY_GISTS.8b2c5f97ac.my-small-slack-bot",
    "peekOfCode": "QUOTE_FILE = os.getenv(\"quotes\", expanduser(join(\"~\", \".quotes.txt\")))\nSLACK_TOKEN = open(expanduser(join(\"~\", \".slack_api_key\")), 'r').readline().strip()\nUSE_CHANNEL = False  # DEBUG\nUSE_CHANNEL = True\nSLACK_USER = \"@lilian\"\nSLACK_CHANNEL = \"#random\"\nMEAN_TIME = (12 * HOURS) if USE_CHANNEL else 30\nURL = \"https://bitbucket.org/lbesson/bin/src/master/my-small-slack-bot.py\"\nPOSITIVE_REACTIONS = ['up', '+1', 'thumbsup']\nNEGATIVES_REACTIONS = ['down', '-1', 'thumbsdown']",
    "detail": "MY_GISTS.8b2c5f97ac.my-small-slack-bot",
    "documentation": {}
  },
  {
    "label": "SLACK_TOKEN",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.my-small-slack-bot",
    "description": "MY_GISTS.8b2c5f97ac.my-small-slack-bot",
    "peekOfCode": "SLACK_TOKEN = open(expanduser(join(\"~\", \".slack_api_key\")), 'r').readline().strip()\nUSE_CHANNEL = False  # DEBUG\nUSE_CHANNEL = True\nSLACK_USER = \"@lilian\"\nSLACK_CHANNEL = \"#random\"\nMEAN_TIME = (12 * HOURS) if USE_CHANNEL else 30\nURL = \"https://bitbucket.org/lbesson/bin/src/master/my-small-slack-bot.py\"\nPOSITIVE_REACTIONS = ['up', '+1', 'thumbsup']\nNEGATIVES_REACTIONS = ['down', '-1', 'thumbsdown']\n# --- Functions",
    "detail": "MY_GISTS.8b2c5f97ac.my-small-slack-bot",
    "documentation": {}
  },
  {
    "label": "USE_CHANNEL",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.my-small-slack-bot",
    "description": "MY_GISTS.8b2c5f97ac.my-small-slack-bot",
    "peekOfCode": "USE_CHANNEL = False  # DEBUG\nUSE_CHANNEL = True\nSLACK_USER = \"@lilian\"\nSLACK_CHANNEL = \"#random\"\nMEAN_TIME = (12 * HOURS) if USE_CHANNEL else 30\nURL = \"https://bitbucket.org/lbesson/bin/src/master/my-small-slack-bot.py\"\nPOSITIVE_REACTIONS = ['up', '+1', 'thumbsup']\nNEGATIVES_REACTIONS = ['down', '-1', 'thumbsdown']\n# --- Functions\ndef sleeptime(lmbda=MEAN_TIME, use_poisson=True):",
    "detail": "MY_GISTS.8b2c5f97ac.my-small-slack-bot",
    "documentation": {}
  },
  {
    "label": "USE_CHANNEL",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.my-small-slack-bot",
    "description": "MY_GISTS.8b2c5f97ac.my-small-slack-bot",
    "peekOfCode": "USE_CHANNEL = True\nSLACK_USER = \"@lilian\"\nSLACK_CHANNEL = \"#random\"\nMEAN_TIME = (12 * HOURS) if USE_CHANNEL else 30\nURL = \"https://bitbucket.org/lbesson/bin/src/master/my-small-slack-bot.py\"\nPOSITIVE_REACTIONS = ['up', '+1', 'thumbsup']\nNEGATIVES_REACTIONS = ['down', '-1', 'thumbsdown']\n# --- Functions\ndef sleeptime(lmbda=MEAN_TIME, use_poisson=True):\n    \"\"\"Random time until next message.\"\"\"",
    "detail": "MY_GISTS.8b2c5f97ac.my-small-slack-bot",
    "documentation": {}
  },
  {
    "label": "SLACK_USER",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.my-small-slack-bot",
    "description": "MY_GISTS.8b2c5f97ac.my-small-slack-bot",
    "peekOfCode": "SLACK_USER = \"@lilian\"\nSLACK_CHANNEL = \"#random\"\nMEAN_TIME = (12 * HOURS) if USE_CHANNEL else 30\nURL = \"https://bitbucket.org/lbesson/bin/src/master/my-small-slack-bot.py\"\nPOSITIVE_REACTIONS = ['up', '+1', 'thumbsup']\nNEGATIVES_REACTIONS = ['down', '-1', 'thumbsdown']\n# --- Functions\ndef sleeptime(lmbda=MEAN_TIME, use_poisson=True):\n    \"\"\"Random time until next message.\"\"\"\n    if use_poisson:",
    "detail": "MY_GISTS.8b2c5f97ac.my-small-slack-bot",
    "documentation": {}
  },
  {
    "label": "SLACK_CHANNEL",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.my-small-slack-bot",
    "description": "MY_GISTS.8b2c5f97ac.my-small-slack-bot",
    "peekOfCode": "SLACK_CHANNEL = \"#random\"\nMEAN_TIME = (12 * HOURS) if USE_CHANNEL else 30\nURL = \"https://bitbucket.org/lbesson/bin/src/master/my-small-slack-bot.py\"\nPOSITIVE_REACTIONS = ['up', '+1', 'thumbsup']\nNEGATIVES_REACTIONS = ['down', '-1', 'thumbsdown']\n# --- Functions\ndef sleeptime(lmbda=MEAN_TIME, use_poisson=True):\n    \"\"\"Random time until next message.\"\"\"\n    if use_poisson:\n        return poisson(lmbda)",
    "detail": "MY_GISTS.8b2c5f97ac.my-small-slack-bot",
    "documentation": {}
  },
  {
    "label": "MEAN_TIME",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.my-small-slack-bot",
    "description": "MY_GISTS.8b2c5f97ac.my-small-slack-bot",
    "peekOfCode": "MEAN_TIME = (12 * HOURS) if USE_CHANNEL else 30\nURL = \"https://bitbucket.org/lbesson/bin/src/master/my-small-slack-bot.py\"\nPOSITIVE_REACTIONS = ['up', '+1', 'thumbsup']\nNEGATIVES_REACTIONS = ['down', '-1', 'thumbsdown']\n# --- Functions\ndef sleeptime(lmbda=MEAN_TIME, use_poisson=True):\n    \"\"\"Random time until next message.\"\"\"\n    if use_poisson:\n        return poisson(lmbda)\n    else:",
    "detail": "MY_GISTS.8b2c5f97ac.my-small-slack-bot",
    "documentation": {}
  },
  {
    "label": "URL",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.my-small-slack-bot",
    "description": "MY_GISTS.8b2c5f97ac.my-small-slack-bot",
    "peekOfCode": "URL = \"https://bitbucket.org/lbesson/bin/src/master/my-small-slack-bot.py\"\nPOSITIVE_REACTIONS = ['up', '+1', 'thumbsup']\nNEGATIVES_REACTIONS = ['down', '-1', 'thumbsdown']\n# --- Functions\ndef sleeptime(lmbda=MEAN_TIME, use_poisson=True):\n    \"\"\"Random time until next message.\"\"\"\n    if use_poisson:\n        return poisson(lmbda)\n    else:\n        return lmbda",
    "detail": "MY_GISTS.8b2c5f97ac.my-small-slack-bot",
    "documentation": {}
  },
  {
    "label": "POSITIVE_REACTIONS",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.my-small-slack-bot",
    "description": "MY_GISTS.8b2c5f97ac.my-small-slack-bot",
    "peekOfCode": "POSITIVE_REACTIONS = ['up', '+1', 'thumbsup']\nNEGATIVES_REACTIONS = ['down', '-1', 'thumbsdown']\n# --- Functions\ndef sleeptime(lmbda=MEAN_TIME, use_poisson=True):\n    \"\"\"Random time until next message.\"\"\"\n    if use_poisson:\n        return poisson(lmbda)\n    else:\n        return lmbda\ndef sleep_bar(secs):",
    "detail": "MY_GISTS.8b2c5f97ac.my-small-slack-bot",
    "documentation": {}
  },
  {
    "label": "NEGATIVES_REACTIONS",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.my-small-slack-bot",
    "description": "MY_GISTS.8b2c5f97ac.my-small-slack-bot",
    "peekOfCode": "NEGATIVES_REACTIONS = ['down', '-1', 'thumbsdown']\n# --- Functions\ndef sleeptime(lmbda=MEAN_TIME, use_poisson=True):\n    \"\"\"Random time until next message.\"\"\"\n    if use_poisson:\n        return poisson(lmbda)\n    else:\n        return lmbda\ndef sleep_bar(secs):\n    \"\"\"Sleep with a bar, or not\"\"\"",
    "detail": "MY_GISTS.8b2c5f97ac.my-small-slack-bot",
    "documentation": {}
  },
  {
    "label": "ColorMap",
    "kind": 6,
    "importPath": "MY_GISTS.8b2c5f97ac.numpy_imshow",
    "description": "MY_GISTS.8b2c5f97ac.numpy_imshow",
    "peekOfCode": "class ColorMap:\n    \"\"\" A colormap is used to map scalar values to colors. It is build by\n        adding couples of (value,color) where value must be between 0 and 1.\n        - The 'scale' method allows to specify the range of the colormap and\n        - the 'color' method then returns a color for any value.\n    \"\"\"\n    def __init__(self, colors, name=None):\n        self.colors = colors\n        self.min = 0\n        self.max = 1",
    "detail": "MY_GISTS.8b2c5f97ac.numpy_imshow",
    "documentation": {}
  },
  {
    "label": "termimshow",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.numpy_imshow",
    "description": "MY_GISTS.8b2c5f97ac.numpy_imshow",
    "peekOfCode": "def termimshow(Z, vmin=None, vmax=None, cmap=CM_Hot, show_cmap=True):\n    \"\"\" Show a 2D numpy array using terminal colors. \"\"\"\n    if len(Z.shape) != 2:\n        print(\"Cannot display non 2D array\")\n        return\n    vmin = vmin or Z.min()\n    vmax = vmax or Z.max()\n    cmap.scale(vmin, vmax)\n    # Build initialization string that setup terminal colors\n    init = ''",
    "detail": "MY_GISTS.8b2c5f97ac.numpy_imshow",
    "documentation": {}
  },
  {
    "label": "CM_IceAndFire",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.numpy_imshow",
    "description": "MY_GISTS.8b2c5f97ac.numpy_imshow",
    "peekOfCode": "CM_IceAndFire = ColorMap([(0.00, (0.0, 0.0, 1.0)),\n                         (0.25, (0.0, 0.5, 1.0)),\n                         (0.50, (1.0, 1.0, 1.0)),\n                         (0.75, (1.0, 1.0, 0.0)),\n                         (1.00, (1.0, 0.0, 0.0))], \"Ice and Fire\")\n# ==> GAME OF THRONES !\nCM_Ice = ColorMap([(0.00, (0.0, 0.0, 1.0)),\n                   (0.50, (0.5, 0.5, 1.0)),\n                   (1.00, (1.0, 1.0, 1.0))], \"Ice\")\nCM_Fire = ColorMap([(0.00, (1.0, 1.0, 1.0)),",
    "detail": "MY_GISTS.8b2c5f97ac.numpy_imshow",
    "documentation": {}
  },
  {
    "label": "CM_Ice",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.numpy_imshow",
    "description": "MY_GISTS.8b2c5f97ac.numpy_imshow",
    "peekOfCode": "CM_Ice = ColorMap([(0.00, (0.0, 0.0, 1.0)),\n                   (0.50, (0.5, 0.5, 1.0)),\n                   (1.00, (1.0, 1.0, 1.0))], \"Ice\")\nCM_Fire = ColorMap([(0.00, (1.0, 1.0, 1.0)),\n                    (0.50, (1.0, 1.0, 0.0)),\n                    (1.00, (1.0, 0.0, 0.0))], \"Fire\")\nCM_Hot = ColorMap([(0.00, (0.0, 0.0, 0.0)),\n                   (0.33, (1.0, 0.0, 0.0)),\n                   (0.66, (1.0, 1.0, 0.0)),\n                   (1.00, (1.0, 1.0, 1.0))], \"Hot\")",
    "detail": "MY_GISTS.8b2c5f97ac.numpy_imshow",
    "documentation": {}
  },
  {
    "label": "CM_Fire",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.numpy_imshow",
    "description": "MY_GISTS.8b2c5f97ac.numpy_imshow",
    "peekOfCode": "CM_Fire = ColorMap([(0.00, (1.0, 1.0, 1.0)),\n                    (0.50, (1.0, 1.0, 0.0)),\n                    (1.00, (1.0, 0.0, 0.0))], \"Fire\")\nCM_Hot = ColorMap([(0.00, (0.0, 0.0, 0.0)),\n                   (0.33, (1.0, 0.0, 0.0)),\n                   (0.66, (1.0, 1.0, 0.0)),\n                   (1.00, (1.0, 1.0, 1.0))], \"Hot\")\nCM_Grey = ColorMap([(0.00, (0.0, 0.0, 0.0)),\n                    (1.00, (1.0, 1.0, 1.0))], \"Grey\")\ndef termimshow(Z, vmin=None, vmax=None, cmap=CM_Hot, show_cmap=True):",
    "detail": "MY_GISTS.8b2c5f97ac.numpy_imshow",
    "documentation": {}
  },
  {
    "label": "CM_Hot",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.numpy_imshow",
    "description": "MY_GISTS.8b2c5f97ac.numpy_imshow",
    "peekOfCode": "CM_Hot = ColorMap([(0.00, (0.0, 0.0, 0.0)),\n                   (0.33, (1.0, 0.0, 0.0)),\n                   (0.66, (1.0, 1.0, 0.0)),\n                   (1.00, (1.0, 1.0, 1.0))], \"Hot\")\nCM_Grey = ColorMap([(0.00, (0.0, 0.0, 0.0)),\n                    (1.00, (1.0, 1.0, 1.0))], \"Grey\")\ndef termimshow(Z, vmin=None, vmax=None, cmap=CM_Hot, show_cmap=True):\n    \"\"\" Show a 2D numpy array using terminal colors. \"\"\"\n    if len(Z.shape) != 2:\n        print(\"Cannot display non 2D array\")",
    "detail": "MY_GISTS.8b2c5f97ac.numpy_imshow",
    "documentation": {}
  },
  {
    "label": "CM_Grey",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.numpy_imshow",
    "description": "MY_GISTS.8b2c5f97ac.numpy_imshow",
    "peekOfCode": "CM_Grey = ColorMap([(0.00, (0.0, 0.0, 0.0)),\n                    (1.00, (1.0, 1.0, 1.0))], \"Grey\")\ndef termimshow(Z, vmin=None, vmax=None, cmap=CM_Hot, show_cmap=True):\n    \"\"\" Show a 2D numpy array using terminal colors. \"\"\"\n    if len(Z.shape) != 2:\n        print(\"Cannot display non 2D array\")\n        return\n    vmin = vmin or Z.min()\n    vmax = vmax or Z.max()\n    cmap.scale(vmin, vmax)",
    "detail": "MY_GISTS.8b2c5f97ac.numpy_imshow",
    "documentation": {}
  },
  {
    "label": "PasteBox",
    "kind": 6,
    "importPath": "MY_GISTS.8b2c5f97ac.pastebox",
    "description": "MY_GISTS.8b2c5f97ac.pastebox",
    "peekOfCode": "class PasteBox:\n    def __init__(self):\n        self.replyid = 0\n        self.mode = 'text'\n        self.ttl = 86400\n        self.authhash = None\n    def create(self, content):\n        VALUES = {'content': content,\n                  'replyid': self.replyid,\n                  'mode': self.mode,",
    "detail": "MY_GISTS.8b2c5f97ac.pastebox",
    "documentation": {}
  },
  {
    "label": "usage",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pastebox",
    "description": "MY_GISTS.8b2c5f97ac.pastebox",
    "peekOfCode": "def usage():\n    print(\"\"\"\n    Usage: pastebox.py <option> <pasteid|file> ..\n    Options:\n    --authhash=<authhash>   authentication hash for additional protection ([a-z0-9])\n    --ttl=<ttl>             time to live in seconds\n    -s|--stdout             print paste to stdout\n    -d|--download           download and store to file\n    Usage examples:\n    lspci|pastebox.py        Upload input by piping",
    "detail": "MY_GISTS.8b2c5f97ac.pastebox",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pastebox",
    "description": "MY_GISTS.8b2c5f97ac.pastebox",
    "peekOfCode": "def main(argv):\n    try:\n        opts, args = getopt.getopt(argv, \"sdh\", [\"stdout\", \"download\", \"mode=\", \"authhash=\", \"ttl=\", \"help\"])\n    except getopt.GetoptError:\n        usage()\n        sys.exit(2)\n    paste = PasteBox()\n    for opt, arg in opts:\n        if opt in (\"--mode\"):\n            if arg:",
    "detail": "MY_GISTS.8b2c5f97ac.pastebox",
    "documentation": {}
  },
  {
    "label": "URL",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pastebox",
    "description": "MY_GISTS.8b2c5f97ac.pastebox",
    "peekOfCode": "URL = 'http://p.boxnet.eu/'\nclass PasteBox:\n    def __init__(self):\n        self.replyid = 0\n        self.mode = 'text'\n        self.ttl = 86400\n        self.authhash = None\n    def create(self, content):\n        VALUES = {'content': content,\n                  'replyid': self.replyid,",
    "detail": "MY_GISTS.8b2c5f97ac.pastebox",
    "documentation": {}
  },
  {
    "label": "csv_file",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.plotnotes",
    "description": "MY_GISTS.8b2c5f97ac.plotnotes",
    "peekOfCode": "csv_file = sys.argv[1]\ncsv_name = csv_file[:-3]\n#: Load in the csv file\ncsv_file_object = csv.reader(open(csv_file, 'rb'))\n#: Skip the fist line as it is a header\nheader = csv_file_object.next()\ndata = []\nfor row in csv_file_object:\n    data.append(row)  # adding each row to the data variable\n#: Then convert from a list to an array",
    "detail": "MY_GISTS.8b2c5f97ac.plotnotes",
    "documentation": {}
  },
  {
    "label": "csv_name",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.plotnotes",
    "description": "MY_GISTS.8b2c5f97ac.plotnotes",
    "peekOfCode": "csv_name = csv_file[:-3]\n#: Load in the csv file\ncsv_file_object = csv.reader(open(csv_file, 'rb'))\n#: Skip the fist line as it is a header\nheader = csv_file_object.next()\ndata = []\nfor row in csv_file_object:\n    data.append(row)  # adding each row to the data variable\n#: Then convert from a list to an array\ndata = np.array(data)",
    "detail": "MY_GISTS.8b2c5f97ac.plotnotes",
    "documentation": {}
  },
  {
    "label": "csv_file_object",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.plotnotes",
    "description": "MY_GISTS.8b2c5f97ac.plotnotes",
    "peekOfCode": "csv_file_object = csv.reader(open(csv_file, 'rb'))\n#: Skip the fist line as it is a header\nheader = csv_file_object.next()\ndata = []\nfor row in csv_file_object:\n    data.append(row)  # adding each row to the data variable\n#: Then convert from a list to an array\ndata = np.array(data)\n#: Just the notes\nnotes = data[::, 1].astype(np.float)",
    "detail": "MY_GISTS.8b2c5f97ac.plotnotes",
    "documentation": {}
  },
  {
    "label": "header",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.plotnotes",
    "description": "MY_GISTS.8b2c5f97ac.plotnotes",
    "peekOfCode": "header = csv_file_object.next()\ndata = []\nfor row in csv_file_object:\n    data.append(row)  # adding each row to the data variable\n#: Then convert from a list to an array\ndata = np.array(data)\n#: Just the notes\nnotes = data[::, 1].astype(np.float)\nnbnotes = np.size(notes)\n#: Sort decreasingly",
    "detail": "MY_GISTS.8b2c5f97ac.plotnotes",
    "documentation": {}
  },
  {
    "label": "data",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.plotnotes",
    "description": "MY_GISTS.8b2c5f97ac.plotnotes",
    "peekOfCode": "data = []\nfor row in csv_file_object:\n    data.append(row)  # adding each row to the data variable\n#: Then convert from a list to an array\ndata = np.array(data)\n#: Just the notes\nnotes = data[::, 1].astype(np.float)\nnbnotes = np.size(notes)\n#: Sort decreasingly\nind = np.argsort(notes)",
    "detail": "MY_GISTS.8b2c5f97ac.plotnotes",
    "documentation": {}
  },
  {
    "label": "data",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.plotnotes",
    "description": "MY_GISTS.8b2c5f97ac.plotnotes",
    "peekOfCode": "data = np.array(data)\n#: Just the notes\nnotes = data[::, 1].astype(np.float)\nnbnotes = np.size(notes)\n#: Sort decreasingly\nind = np.argsort(notes)\ndata = data[ind[::-1]]\nnotes = notes[ind[::-1]]\n#: The grades are between 0 and this value. Default is the French convention: 20.\nnoteMax = 20",
    "detail": "MY_GISTS.8b2c5f97ac.plotnotes",
    "documentation": {}
  },
  {
    "label": "notes",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.plotnotes",
    "description": "MY_GISTS.8b2c5f97ac.plotnotes",
    "peekOfCode": "notes = data[::, 1].astype(np.float)\nnbnotes = np.size(notes)\n#: Sort decreasingly\nind = np.argsort(notes)\ndata = data[ind[::-1]]\nnotes = notes[ind[::-1]]\n#: The grades are between 0 and this value. Default is the French convention: 20.\nnoteMax = 20\n###################################################################\n# I want now to produce annex files",
    "detail": "MY_GISTS.8b2c5f97ac.plotnotes",
    "documentation": {}
  },
  {
    "label": "nbnotes",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.plotnotes",
    "description": "MY_GISTS.8b2c5f97ac.plotnotes",
    "peekOfCode": "nbnotes = np.size(notes)\n#: Sort decreasingly\nind = np.argsort(notes)\ndata = data[ind[::-1]]\nnotes = notes[ind[::-1]]\n#: The grades are between 0 and this value. Default is the French convention: 20.\nnoteMax = 20\n###################################################################\n# I want now to produce annex files\nf = file(csv_name + \"table\", 'w')",
    "detail": "MY_GISTS.8b2c5f97ac.plotnotes",
    "documentation": {}
  },
  {
    "label": "ind",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.plotnotes",
    "description": "MY_GISTS.8b2c5f97ac.plotnotes",
    "peekOfCode": "ind = np.argsort(notes)\ndata = data[ind[::-1]]\nnotes = notes[ind[::-1]]\n#: The grades are between 0 and this value. Default is the French convention: 20.\nnoteMax = 20\n###################################################################\n# I want now to produce annex files\nf = file(csv_name + \"table\", 'w')\nf.write(\"%% Notes from '%s'\" % f.name)\nfor i in range(nbnotes):",
    "detail": "MY_GISTS.8b2c5f97ac.plotnotes",
    "documentation": {}
  },
  {
    "label": "data",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.plotnotes",
    "description": "MY_GISTS.8b2c5f97ac.plotnotes",
    "peekOfCode": "data = data[ind[::-1]]\nnotes = notes[ind[::-1]]\n#: The grades are between 0 and this value. Default is the French convention: 20.\nnoteMax = 20\n###################################################################\n# I want now to produce annex files\nf = file(csv_name + \"table\", 'w')\nf.write(\"%% Notes from '%s'\" % f.name)\nfor i in range(nbnotes):\n    f.write(\"\\n%s & %g/%i \\\\\\\\\" % (data[i, 0], notes[i], noteMax))",
    "detail": "MY_GISTS.8b2c5f97ac.plotnotes",
    "documentation": {}
  },
  {
    "label": "notes",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.plotnotes",
    "description": "MY_GISTS.8b2c5f97ac.plotnotes",
    "peekOfCode": "notes = notes[ind[::-1]]\n#: The grades are between 0 and this value. Default is the French convention: 20.\nnoteMax = 20\n###################################################################\n# I want now to produce annex files\nf = file(csv_name + \"table\", 'w')\nf.write(\"%% Notes from '%s'\" % f.name)\nfor i in range(nbnotes):\n    f.write(\"\\n%s & %g/%i \\\\\\\\\" % (data[i, 0], notes[i], noteMax))\n    print(\"I wrote <blue>'%s & %g/%i \\\\\\\\'<white> in <u>%s<U>...\" % (data[i, 0], notes[i], noteMax, f.name))",
    "detail": "MY_GISTS.8b2c5f97ac.plotnotes",
    "documentation": {}
  },
  {
    "label": "noteMax",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.plotnotes",
    "description": "MY_GISTS.8b2c5f97ac.plotnotes",
    "peekOfCode": "noteMax = 20\n###################################################################\n# I want now to produce annex files\nf = file(csv_name + \"table\", 'w')\nf.write(\"%% Notes from '%s'\" % f.name)\nfor i in range(nbnotes):\n    f.write(\"\\n%s & %g/%i \\\\\\\\\" % (data[i, 0], notes[i], noteMax))\n    print(\"I wrote <blue>'%s & %g/%i \\\\\\\\'<white> in <u>%s<U>...\" % (data[i, 0], notes[i], noteMax, f.name))\nminimale = np.min(notes)\nf = file(csv_name + \"minimale\", 'w')",
    "detail": "MY_GISTS.8b2c5f97ac.plotnotes",
    "documentation": {}
  },
  {
    "label": "f",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.plotnotes",
    "description": "MY_GISTS.8b2c5f97ac.plotnotes",
    "peekOfCode": "f = file(csv_name + \"table\", 'w')\nf.write(\"%% Notes from '%s'\" % f.name)\nfor i in range(nbnotes):\n    f.write(\"\\n%s & %g/%i \\\\\\\\\" % (data[i, 0], notes[i], noteMax))\n    print(\"I wrote <blue>'%s & %g/%i \\\\\\\\'<white> in <u>%s<U>...\" % (data[i, 0], notes[i], noteMax, f.name))\nminimale = np.min(notes)\nf = file(csv_name + \"minimale\", 'w')\nf.write(\"%g/%i\" % (minimale, noteMax))\nprint(\"I wrote the value of minimale (<cyan>%g<white>) to <u>%s<U>...\" % (minimale, f.name))\nargminimale = data[np.argmin(notes), 0]",
    "detail": "MY_GISTS.8b2c5f97ac.plotnotes",
    "documentation": {}
  },
  {
    "label": "minimale",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.plotnotes",
    "description": "MY_GISTS.8b2c5f97ac.plotnotes",
    "peekOfCode": "minimale = np.min(notes)\nf = file(csv_name + \"minimale\", 'w')\nf.write(\"%g/%i\" % (minimale, noteMax))\nprint(\"I wrote the value of minimale (<cyan>%g<white>) to <u>%s<U>...\" % (minimale, f.name))\nargminimale = data[np.argmin(notes), 0]\nf = file(csv_name + \"argminimale\", 'w')\nf.write(\"%s\" % argminimale)\nprint(\"I wrote the value of argminimale (<cyan>%s<white>) to <u>%s<U>...\" % (argminimale, f.name))\nmaximale = np.max(notes)\nf = file(csv_name + \"maximale\", 'w')",
    "detail": "MY_GISTS.8b2c5f97ac.plotnotes",
    "documentation": {}
  },
  {
    "label": "f",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.plotnotes",
    "description": "MY_GISTS.8b2c5f97ac.plotnotes",
    "peekOfCode": "f = file(csv_name + \"minimale\", 'w')\nf.write(\"%g/%i\" % (minimale, noteMax))\nprint(\"I wrote the value of minimale (<cyan>%g<white>) to <u>%s<U>...\" % (minimale, f.name))\nargminimale = data[np.argmin(notes), 0]\nf = file(csv_name + \"argminimale\", 'w')\nf.write(\"%s\" % argminimale)\nprint(\"I wrote the value of argminimale (<cyan>%s<white>) to <u>%s<U>...\" % (argminimale, f.name))\nmaximale = np.max(notes)\nf = file(csv_name + \"maximale\", 'w')\nf.write(\"%g/%i\" % (maximale, noteMax))",
    "detail": "MY_GISTS.8b2c5f97ac.plotnotes",
    "documentation": {}
  },
  {
    "label": "argminimale",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.plotnotes",
    "description": "MY_GISTS.8b2c5f97ac.plotnotes",
    "peekOfCode": "argminimale = data[np.argmin(notes), 0]\nf = file(csv_name + \"argminimale\", 'w')\nf.write(\"%s\" % argminimale)\nprint(\"I wrote the value of argminimale (<cyan>%s<white>) to <u>%s<U>...\" % (argminimale, f.name))\nmaximale = np.max(notes)\nf = file(csv_name + \"maximale\", 'w')\nf.write(\"%g/%i\" % (maximale, noteMax))\nprint(\"I wrote the value of maximale (<cyan>%g<white>) to <u>%s<U>...\" % (maximale, f.name))\nargmaximale = data[np.argmax(notes), 0]\nf = file(csv_name + \"argmaximale\", 'w')",
    "detail": "MY_GISTS.8b2c5f97ac.plotnotes",
    "documentation": {}
  },
  {
    "label": "f",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.plotnotes",
    "description": "MY_GISTS.8b2c5f97ac.plotnotes",
    "peekOfCode": "f = file(csv_name + \"argminimale\", 'w')\nf.write(\"%s\" % argminimale)\nprint(\"I wrote the value of argminimale (<cyan>%s<white>) to <u>%s<U>...\" % (argminimale, f.name))\nmaximale = np.max(notes)\nf = file(csv_name + \"maximale\", 'w')\nf.write(\"%g/%i\" % (maximale, noteMax))\nprint(\"I wrote the value of maximale (<cyan>%g<white>) to <u>%s<U>...\" % (maximale, f.name))\nargmaximale = data[np.argmax(notes), 0]\nf = file(csv_name + \"argmaximale\", 'w')\nf.write(\"%s\" % argmaximale)",
    "detail": "MY_GISTS.8b2c5f97ac.plotnotes",
    "documentation": {}
  },
  {
    "label": "maximale",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.plotnotes",
    "description": "MY_GISTS.8b2c5f97ac.plotnotes",
    "peekOfCode": "maximale = np.max(notes)\nf = file(csv_name + \"maximale\", 'w')\nf.write(\"%g/%i\" % (maximale, noteMax))\nprint(\"I wrote the value of maximale (<cyan>%g<white>) to <u>%s<U>...\" % (maximale, f.name))\nargmaximale = data[np.argmax(notes), 0]\nf = file(csv_name + \"argmaximale\", 'w')\nf.write(\"%s\" % argmaximale)\nprint(\"I wrote the value of argmaximale (<cyan>%s<white>) to <u>%s<U>...\" % (argmaximale, f.name))\nmoyenne = np.mean(notes)\nf = file(csv_name + \"moyenne\", 'w')",
    "detail": "MY_GISTS.8b2c5f97ac.plotnotes",
    "documentation": {}
  },
  {
    "label": "f",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.plotnotes",
    "description": "MY_GISTS.8b2c5f97ac.plotnotes",
    "peekOfCode": "f = file(csv_name + \"maximale\", 'w')\nf.write(\"%g/%i\" % (maximale, noteMax))\nprint(\"I wrote the value of maximale (<cyan>%g<white>) to <u>%s<U>...\" % (maximale, f.name))\nargmaximale = data[np.argmax(notes), 0]\nf = file(csv_name + \"argmaximale\", 'w')\nf.write(\"%s\" % argmaximale)\nprint(\"I wrote the value of argmaximale (<cyan>%s<white>) to <u>%s<U>...\" % (argmaximale, f.name))\nmoyenne = np.mean(notes)\nf = file(csv_name + \"moyenne\", 'w')\nf.write(\"%2.2g/%i\" % (moyenne, noteMax))",
    "detail": "MY_GISTS.8b2c5f97ac.plotnotes",
    "documentation": {}
  },
  {
    "label": "argmaximale",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.plotnotes",
    "description": "MY_GISTS.8b2c5f97ac.plotnotes",
    "peekOfCode": "argmaximale = data[np.argmax(notes), 0]\nf = file(csv_name + \"argmaximale\", 'w')\nf.write(\"%s\" % argmaximale)\nprint(\"I wrote the value of argmaximale (<cyan>%s<white>) to <u>%s<U>...\" % (argmaximale, f.name))\nmoyenne = np.mean(notes)\nf = file(csv_name + \"moyenne\", 'w')\nf.write(\"%2.2g/%i\" % (moyenne, noteMax))\nprint(\"I wrote the value of moyenne (<cyan>%2.2g<white>) to <u>%s<U>...\" % (moyenne, f.name))\necarttype = np.std(notes)\nf = file(csv_name + \"ecarttype\", 'w')",
    "detail": "MY_GISTS.8b2c5f97ac.plotnotes",
    "documentation": {}
  },
  {
    "label": "f",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.plotnotes",
    "description": "MY_GISTS.8b2c5f97ac.plotnotes",
    "peekOfCode": "f = file(csv_name + \"argmaximale\", 'w')\nf.write(\"%s\" % argmaximale)\nprint(\"I wrote the value of argmaximale (<cyan>%s<white>) to <u>%s<U>...\" % (argmaximale, f.name))\nmoyenne = np.mean(notes)\nf = file(csv_name + \"moyenne\", 'w')\nf.write(\"%2.2g/%i\" % (moyenne, noteMax))\nprint(\"I wrote the value of moyenne (<cyan>%2.2g<white>) to <u>%s<U>...\" % (moyenne, f.name))\necarttype = np.std(notes)\nf = file(csv_name + \"ecarttype\", 'w')\nf.write(\"%2.2g\" % ecarttype)",
    "detail": "MY_GISTS.8b2c5f97ac.plotnotes",
    "documentation": {}
  },
  {
    "label": "moyenne",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.plotnotes",
    "description": "MY_GISTS.8b2c5f97ac.plotnotes",
    "peekOfCode": "moyenne = np.mean(notes)\nf = file(csv_name + \"moyenne\", 'w')\nf.write(\"%2.2g/%i\" % (moyenne, noteMax))\nprint(\"I wrote the value of moyenne (<cyan>%2.2g<white>) to <u>%s<U>...\" % (moyenne, f.name))\necarttype = np.std(notes)\nf = file(csv_name + \"ecarttype\", 'w')\nf.write(\"%2.2g\" % ecarttype)\nprint(\"I wrote the value of ecarttype (<cyan>%2.2g<white>) to <u>%s<U>...\" % (ecarttype, f.name))\nvariance = np.var(notes)\nf = file(csv_name + \"variance\", 'w')",
    "detail": "MY_GISTS.8b2c5f97ac.plotnotes",
    "documentation": {}
  },
  {
    "label": "f",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.plotnotes",
    "description": "MY_GISTS.8b2c5f97ac.plotnotes",
    "peekOfCode": "f = file(csv_name + \"moyenne\", 'w')\nf.write(\"%2.2g/%i\" % (moyenne, noteMax))\nprint(\"I wrote the value of moyenne (<cyan>%2.2g<white>) to <u>%s<U>...\" % (moyenne, f.name))\necarttype = np.std(notes)\nf = file(csv_name + \"ecarttype\", 'w')\nf.write(\"%2.2g\" % ecarttype)\nprint(\"I wrote the value of ecarttype (<cyan>%2.2g<white>) to <u>%s<U>...\" % (ecarttype, f.name))\nvariance = np.var(notes)\nf = file(csv_name + \"variance\", 'w')\nf.write(\"%2.2g\" % variance)",
    "detail": "MY_GISTS.8b2c5f97ac.plotnotes",
    "documentation": {}
  },
  {
    "label": "ecarttype",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.plotnotes",
    "description": "MY_GISTS.8b2c5f97ac.plotnotes",
    "peekOfCode": "ecarttype = np.std(notes)\nf = file(csv_name + \"ecarttype\", 'w')\nf.write(\"%2.2g\" % ecarttype)\nprint(\"I wrote the value of ecarttype (<cyan>%2.2g<white>) to <u>%s<U>...\" % (ecarttype, f.name))\nvariance = np.var(notes)\nf = file(csv_name + \"variance\", 'w')\nf.write(\"%2.2g\" % variance)\nprint(\"I wrote the value of variance (<cyan>%2.2g<white>) to <u>%s<U>...\" % (variance, f.name))\n###################################################################\n# I want now to plot some graphics about the datas, with matplotlib",
    "detail": "MY_GISTS.8b2c5f97ac.plotnotes",
    "documentation": {}
  },
  {
    "label": "f",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.plotnotes",
    "description": "MY_GISTS.8b2c5f97ac.plotnotes",
    "peekOfCode": "f = file(csv_name + \"ecarttype\", 'w')\nf.write(\"%2.2g\" % ecarttype)\nprint(\"I wrote the value of ecarttype (<cyan>%2.2g<white>) to <u>%s<U>...\" % (ecarttype, f.name))\nvariance = np.var(notes)\nf = file(csv_name + \"variance\", 'w')\nf.write(\"%2.2g\" % variance)\nprint(\"I wrote the value of variance (<cyan>%2.2g<white>) to <u>%s<U>...\" % (variance, f.name))\n###################################################################\n# I want now to plot some graphics about the datas, with matplotlib\nprint(\"\\nPloting some graphics from <u>%s<U> (<neg><green>%i student(s)<Neg><white>)...\" % (csv_name + \"csv\", nbnotes))",
    "detail": "MY_GISTS.8b2c5f97ac.plotnotes",
    "documentation": {}
  },
  {
    "label": "variance",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.plotnotes",
    "description": "MY_GISTS.8b2c5f97ac.plotnotes",
    "peekOfCode": "variance = np.var(notes)\nf = file(csv_name + \"variance\", 'w')\nf.write(\"%2.2g\" % variance)\nprint(\"I wrote the value of variance (<cyan>%2.2g<white>) to <u>%s<U>...\" % (variance, f.name))\n###################################################################\n# I want now to plot some graphics about the datas, with matplotlib\nprint(\"\\nPloting some graphics from <u>%s<U> (<neg><green>%i student(s)<Neg><white>)...\" % (csv_name + \"csv\", nbnotes))\n#: Graph options\npylab.xlabel(u\"Notes (entre $0$ et $%i$)\" % noteMax)\npylab.ylabel(u\"Nombre d'élève(s) ayant eu cette note\")",
    "detail": "MY_GISTS.8b2c5f97ac.plotnotes",
    "documentation": {}
  },
  {
    "label": "f",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.plotnotes",
    "description": "MY_GISTS.8b2c5f97ac.plotnotes",
    "peekOfCode": "f = file(csv_name + \"variance\", 'w')\nf.write(\"%2.2g\" % variance)\nprint(\"I wrote the value of variance (<cyan>%2.2g<white>) to <u>%s<U>...\" % (variance, f.name))\n###################################################################\n# I want now to plot some graphics about the datas, with matplotlib\nprint(\"\\nPloting some graphics from <u>%s<U> (<neg><green>%i student(s)<Neg><white>)...\" % (csv_name + \"csv\", nbnotes))\n#: Graph options\npylab.xlabel(u\"Notes (entre $0$ et $%i$)\" % noteMax)\npylab.ylabel(u\"Nombre d'élève(s) ayant eu cette note\")\npylab.title(u\"Répartition des notes dans la classe\")",
    "detail": "MY_GISTS.8b2c5f97ac.plotnotes",
    "documentation": {}
  },
  {
    "label": "idc",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.plotnotes",
    "description": "MY_GISTS.8b2c5f97ac.plotnotes",
    "peekOfCode": "idc = xvalues > 0\npylab.plot(bins[:-1][idc], xvalues[idc], 'g*--', linewidth=.5, markersize=18)\npylab.xticks(bins[:-1][idc])\n# Tweak spacing to prevent clipping of ylabel\npylab.subplots_adjust(left=0.15)\n# pylab.show()\npylab.savefig(csv_name + \"pdf\")\nprint(\"Ploting the grades repartition on an histogram: <u>\" + csv_name + \"pdf<U>\")\npylab.draw()\npylab.clf()",
    "detail": "MY_GISTS.8b2c5f97ac.plotnotes",
    "documentation": {}
  },
  {
    "label": "Board",
    "kind": 6,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "class Board(object):\n    def __init__(self, x=DEFAULT_X, y=DEFAULT_Y):\n        self.x = y\n        self.y = x\n        self.board = np.zeros((x, y), dtype=np.uint8)\n    def __getitem__(self, *args, **kwargs): return self.board.__getitem__(*args, **kwargs)\n    def __setitem__(self, *args, **kwargs): return self.board.__setitem__(*args, **kwargs)\n    def is_empty(self):\n        return np.all(self.board == 0)\n    def get_ship(self, x, y):",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "Entry",
    "kind": 6,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "class Entry(object):\n\tdef __init__(self):\n\t\tself.entry_type = 'UNKNOWN'\n\t\tself.entry_name = ''\n\t\tself.rows = { }\n\tdef ParseFromString(self, text):\n\t\tm = re.match('\\s*@\\s*(\\w+)\\s*({)\\s*', text)\n\t\tif not m:\n\t\t\treturn None\n\t\tself.entry_type = m.group(1)",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "Print",
    "kind": 6,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "class Print(object):\n    @cherrypy.expose\n    def index(self):\n        return HTML_TEMPLATE\n    @cherrypy.expose\n    def send(self, file, user, **kwargs):\n        try:\n            cups.setUser(user)\n            conn = cups.Connection()\n            job_name = str(uuid.uuid4())",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "delBoard",
    "kind": 6,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "class delBoard:\n    \"\"\" A weird object that does nothing while alive,\n    but solves the n-queens problem when garbage collected.\n    It uses CPython's garbage collection graph traversal algorithm to explore\n    the graph of possible solutions to the n-queens problem.\n    Very weird, but it works. And it's fast!\n    \"\"\"\n    def __init__(self, nqueens=None):\n        self.nqueens = nqueens\n    def __del__(self):",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "hashtable",
    "kind": 6,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "class hashtable(object):\n    \"\"\"Manual implementation of a naive hash table.\n    - Can only store hashable values.\n    - Use single-linked lists to be collision-resistant!\n    - Uses a non cryptographic hash function (default `hash`).\n    \"\"\"\n    def __init__(self, map_values=None, nb_bits=NB_BITS):\n        self._nb_bits = nb_bits\n        self._size = 1 << nb_bits\n        self._nb = 0",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "HtpasswdFile",
    "kind": 6,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "class HtpasswdFile:\n    \"\"\"A class for manipulating htpasswd files.\"\"\"\n    def __init__(self, filename, create=False):\n        self.entries = []\n        self.filename = filename\n        if not create:\n            if os.path.exists(self.filename):\n                self.load()\n            else:\n                raise Exception(\"%s does not exist\" % self.filename)",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "ColorMap",
    "kind": 6,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "class ColorMap:\n    \"\"\" A colormap is used to map scalar values to colors. It is build by\n        adding couples of (value,color) where value must be between 0 and 1.\n        - The 'scale' method allows to specify the range of the colormap and\n        - the 'color' method then returns a color for any value.\n    \"\"\"\n    def __init__(self, colors, name=None):\n        self.colors = colors\n        self.min = 0\n        self.max = 1",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "PasteBox",
    "kind": 6,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "class PasteBox:\n    def __init__(self):\n        self.replyid = 0\n        self.mode = 'text'\n        self.ttl = 86400\n        self.authhash = None\n    def create(self, content):\n        VALUES = {'content': content,\n                  'replyid': self.replyid,\n                  'mode': self.mode,",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "GeditTerminal",
    "kind": 6,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "class GeditTerminal(Gtk.Box):\n    \"\"\"VTE terminal which follows gnome-terminal default profile options\"\"\"\n    __gsignals__ = {\n        \"populate-popup\": (\n            GObject.SIGNAL_RUN_LAST,\n            None,\n            (GObject.TYPE_OBJECT,)\n        )\n    }\n    defaults = {",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "TerminalPlugin",
    "kind": 6,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "class TerminalPlugin(GObject.Object, Gedit.WindowActivatable):\n    __gtype_name__ = \"TerminalPlugin\"\n    window = GObject.property(type=Gedit.Window)\n    def __init__(self):\n        GObject.Object.__init__(self)\n    def do_activate(self):\n        self._panel = GeditTerminal()\n        self._panel.connect(\"populate-popup\", self.on_panel_populate_popup)\n        self._panel.show()\n        image = Gtk.Image.new_from_icon_name(\"utilities-terminal\", Gtk.IconSize.MENU)",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "GeditTerminal2",
    "kind": 6,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "class GeditTerminal2(Gtk.Box):\n    \"\"\"VTE terminal2 which follows gnome-terminal default profile options\"\"\"\n    __gsignals__ = {\n        \"populate-popup\": (\n            GObject.SIGNAL_RUN_LAST,\n            None,\n            (GObject.TYPE_OBJECT,)\n        )\n    }\n    defaults = {",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "TerminalPlugin2",
    "kind": 6,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "class TerminalPlugin2(GObject.Object, Gedit.WindowActivatable):\n    __gtype_name__ = \"TerminalPlugin2\"\n    window = GObject.property(type=Gedit.Window)\n    def __init__(self):\n        GObject.Object.__init__(self)\n    def do_activate(self):\n        self._panel = GeditTerminal2()\n        self._panel.connect(\"populate-popup\", self.on_panel_populate_popup)\n        self._panel.show()\n        image = Gtk.Image.new_from_icon_name(\"utilities-terminal\", Gtk.IconSize.MENU)",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "GeditTerminal3",
    "kind": 6,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "class GeditTerminal3(Gtk.Box):\n    \"\"\"VTE terminal3 which follows gnome-terminal default profile options\"\"\"\n    __gsignals__ = {\n        \"populate-popup\": (\n            GObject.SIGNAL_RUN_LAST,\n            None,\n            (GObject.TYPE_OBJECT,)\n        )\n    }\n    defaults = {",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "TerminalPlugin3",
    "kind": 6,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "class TerminalPlugin3(GObject.Object, Gedit.WindowActivatable):\n    __gtype_name__ = \"TerminalPlugin3\"\n    window = GObject.property(type=Gedit.Window)\n    def __init__(self):\n        GObject.Object.__init__(self)\n    def do_activate(self):\n        self._panel = GeditTerminal3()\n        self._panel.connect(\"populate-popup\", self.on_panel_populate_popup)\n        self._panel.show()\n        image = Gtk.Image.new_from_icon_name(\"utilities-terminal\", Gtk.IconSize.MENU)",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "QuotesSpider",
    "kind": 6,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "class QuotesSpider(scrapy.Spider):\n    \"\"\"Small scrapy Spider.\"\"\"\n    name = \"Watch Later\"\n    start_urls = [\n        'file:///tmp/wl.html'\n    ]\n    custom_settings = {\n    \t\"LOG_ENABLED\": False,\n    \t\"LOG_LEVEL\": 'ERROR',\n    }",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def main(args):\n    # pprint(args)  # DEBUG\n    sizex, sizey = [int(i) for i in args['--size'].split(',')]\n    if min(sizex, sizey) < max_length:\n        print(f\"Error: <xy> both must be >= {max_length}.\")\n        return 1\n    board = Board(x=sizex, y=sizey)\n    for name in ships.keys():\n        if args[f'--{name.lower()}']:\n            if args[f'--{name.lower()}'] == 'r' or args['--random']:",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "Format",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def Format(text):\n\treturn ' '.join(text.split())\ndef Capitalize(text):\n\tword_start = True\n\ts = ''\n\tfor c in text.lower():\n\t\tif word_start:\n\t\t\tc = c.upper()\n\t\tword_start = not c.isalpha()\n\t\ts = s + c",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "Capitalize",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def Capitalize(text):\n\tword_start = True\n\ts = ''\n\tfor c in text.lower():\n\t\tif word_start:\n\t\t\tc = c.upper()\n\t\tword_start = not c.isalpha()\n\t\ts = s + c\n\treturn s\ndef FindMatchingParenthesis(text):",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "FindMatchingParenthesis",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def FindMatchingParenthesis(text):\n\tnesting = 1\n\tend = 0\n\tfor i in range(1, len(text)):\n\t\tif text[i] == '{':\n\t\t\tnesting = nesting + 1\n\t\telif text[i] == '}':\n\t\t\tnesting = nesting - 1\n\t\tend = i\n\t\tif nesting == 0:",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "RemoveBraces",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def RemoveBraces(text):\n\tif text[0] == '{':\n\t\t text = text[1:]\n\tif text[-1] == '}':\n\t\t text = text[:-1]\n\treturn text\ndef NormalizeAuthor(text):\n\tparts = text.split(',', 1)\n\tif len(parts) >= 2:\n\t\treturn parts[1].strip() + ' ' + parts[0].strip()",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "NormalizeAuthor",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def NormalizeAuthor(text):\n\tparts = text.split(',', 1)\n\tif len(parts) >= 2:\n\t\treturn parts[1].strip() + ' ' + parts[0].strip()\n\treturn parts[0].strip()\ndef NormalizeAuthors(text):\n\tauthors = text.split(' and ')\n\treturn ' and '.join([NormalizeAuthor(author) for author in authors])\ndef NormalizePages(text):\n\tparts = text.split('--', 1)",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "NormalizeAuthors",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def NormalizeAuthors(text):\n\tauthors = text.split(' and ')\n\treturn ' and '.join([NormalizeAuthor(author) for author in authors])\ndef NormalizePages(text):\n\tparts = text.split('--', 1)\n\tif not '--' in text:\n\t\tparts = text.split('-', 1)\n\tnormalized = parts[0].strip()\n\tif len(parts) >= 2:\n\t\tnormalized = parts[0].strip() + '--' + parts[1].strip()",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "NormalizePages",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def NormalizePages(text):\n\tparts = text.split('--', 1)\n\tif not '--' in text:\n\t\tparts = text.split('-', 1)\n\tnormalized = parts[0].strip()\n\tif len(parts) >= 2:\n\t\tnormalized = parts[0].strip() + '--' + parts[1].strip()\n\treturn normalized\ndef SafeParseInt(text):\n\ttry:",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "SafeParseInt",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def SafeParseInt(text):\n\ttry:\n        \treturn int(text)\n\texcept ValueError:\n\t\treturn None\ndef NormalizeYear(text):\n\tyear = SafeParseInt(text)\n\tif not year:\n\t\treturn text.strip()\n\tif (year >= 10) and (year <= 99):",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "NormalizeYear",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def NormalizeYear(text):\n\tyear = SafeParseInt(text)\n\tif not year:\n\t\treturn text.strip()\n\tif (year >= 10) and (year <= 99):\n\t\treturn str(1900 + year)\n\treturn str(year)\ndef NormalizeMonth(text):\n\tprefix = text[:3].lower()\n\tif prefix in months:",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "NormalizeMonth",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def NormalizeMonth(text):\n\tprefix = text[:3].lower()\n\tif prefix in months:\n\t\treturn months[prefix]\n\treturn text\n# An entry object\nclass Entry(object):\n\tdef __init__(self):\n\t\tself.entry_type = 'UNKNOWN'\n\t\tself.entry_name = ''",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "ParseEntries",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def ParseEntries(text):\n\tentries = []\n\twhile True:\n\t\te = Entry()\n\t\ttext = e.ParseFromString(text)\n\t\tif not text:\n\t\t\tbreak\n\t\tentries.append(e)\n\treturn entries\ndef SortEntries(entries):",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "SortEntries",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def SortEntries(entries):\n\tentries.sort(key=lambda e: e.entry_name)\n\tentries.sort(key=lambda e: e.entry_type)\n\tentries.sort(key=lambda e: e.SortKey())\n\treturn entries\ndef ReadFile():\n\tlines = []\n\twith open(sys.argv[1], 'r') as f:\n\t\tfor line in f:\n\t\t\tif line.strip().startswith('%'):",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "ReadFile",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def ReadFile():\n\tlines = []\n\twith open(sys.argv[1], 'r') as f:\n\t\tfor line in f:\n\t\t\tif line.strip().startswith('%'):\n\t\t\t\tprint(line.strip())\n\t\t\telse:\n\t\t\t\tlines.append(line)\n\ttext = '\\n'.join(lines)\n\treturn text",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def main():\n\ttext = ReadFile()\n\tentries = ParseEntries(text)\n\tentries = SortEntries(entries)\n\tfor entry in entries:\n\t\tprint(entry.ToString())\nif __name__ == '__main__':\n    main()\n#!/usr/bin/env python\n# -*- coding: utf-8; mode: python -*-",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "maximizeWindow",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def maximizeWindow():\n    \"\"\" Experimental function to try to maximize a plot.\n    - Tries as well as possible to maximize the figure.\n    - Cf. https://stackoverflow.com/q/12439588/\n    \"\"\"\n    try:\n        figManager = plt.get_current_fig_manager()\n        figManager.window.showMaximized()\n    except:\n        try:",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "palette",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def palette(nb):\n    \"\"\" Use a smart palette from seaborn, for nb different things to plot.\n    - Ref: http://seaborn.pydata.org/generated/seaborn.hls_palette.html#seaborn.hls_palette\n    \"\"\"\n    return sns.hls_palette(nb + 1)[:nb]\ndef calc_interets(comptes, taux=taux2020):\n    \"\"\" Calcule une estimation de mes intérêts.\"\"\"\n    interet_fin_annee = sum(comptes[k] * taux[k] / 100.0 for k in type_comptes)\n    for k in type_comptes:\n        print(\"Pour mon <blue>compte {:>4}<white>, avec <magenta>{:>10,.2f} €<white>, et un <cyan<taux à <u>{:>4,.2f}%<U><white> {} <green>intérêt ~= {:>6.2f} €<white>.\".format(k.upper(), comptes[k], taux[k], '→', comptes[k] * taux[k] / 100.0))",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "calc_interets",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def calc_interets(comptes, taux=taux2020):\n    \"\"\" Calcule une estimation de mes intérêts.\"\"\"\n    interet_fin_annee = sum(comptes[k] * taux[k] / 100.0 for k in type_comptes)\n    for k in type_comptes:\n        print(\"Pour mon <blue>compte {:>4}<white>, avec <magenta>{:>10,.2f} €<white>, et un <cyan<taux à <u>{:>4,.2f}%<U><white> {} <green>intérêt ~= {:>6.2f} €<white>.\".format(k.upper(), comptes[k], taux[k], '→', comptes[k] * taux[k] / 100.0))\n    print(\"<green>Intérêt estimé pour 2016 : {:.2f} €.<white>\".format(interet_fin_annee))\n    print(\"<red>Attention<white> : les vrais intérêts sont calculés toutes les quinzaines, mon estimation n'est pas précise !\")\n    return interet_fin_annee\ndef main(comptes, taux=taux2020):\n    \"\"\" Affiche un beau diagramme camembert montrant la répartition de ses économies. \"\"\"",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def main(comptes, taux=taux2020):\n    \"\"\" Affiche un beau diagramme camembert montrant la répartition de ses économies. \"\"\"\n    argenttotal = sum(comptes.values())\n    interets = sum(round(comptes[k] * taux[k] / 100.0, 3) for k in type_comptes)\n    print(\"Affichage d'un diagrame camembert en cours...\")\n    valeurs = list(comptes.values())\n    print(\"Valeurs du diagrame : <black>{}<white>\".format(valeurs))\n    etiquettes = []\n    legendes = []\n    for k in type_comptes:",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "day_offset",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def day_offset(y, m, d):\n    # Add 1 if y > 2000 to account for the fact that 2000 was a leap year.\n    year_offset = ( y - 2000 ) + ( ( y - 2000 ) // 4 ) + ( y > 2000 )\n    # Account for wrongly computed leap years\n    year_offset -= ( y - 2000 ) // 100\n    # Add back 1 year if the target year is a leap year but the target day\n    # is after the 29th (in other words, the leap day hasn't happened yet).\n    if y % 100:\n        year_offset += ( y < 2000 ) and not( y % 4 ) and ( m > 2 )\n        year_offset -= ( y > 2000 ) and not( y % 4 ) and ( m < 3 )",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "l_to_c",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def l_to_c(l):\n    try:\n        return str(int(l))\n    except ValueError:\n        return str(10 + ord(l.upper()) - ord('A'))\ndef check_iban(iban):\n    print(\"\\nChecking the IBAN number '%s'...\" % iban)\n    ib = iban.replace(' ', '')\n    ib = ib[4:] + ib[:4]\n    print(\"Of length\", len(ib))",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "check_iban",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def check_iban(iban):\n    print(\"\\nChecking the IBAN number '%s'...\" % iban)\n    ib = iban.replace(' ', '')\n    ib = ib[4:] + ib[:4]\n    print(\"Of length\", len(ib))\n    i = int(''.join(l_to_c(l) for l in ib))\n    check = (i % 97) == 1\n    if check:\n        print(\"OK '%s' seems to be a valid IBAN number.\" % iban)\n    else:",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def main(args):\n    try:\n        if not args:\n            check_iban('HAHA LOL YOU THOUGH I WILL LET A REAL IBAN IN MY SCRIPT')\n        else:\n            for iban in args:\n                check_iban(iban)\n        return 0\n    except Exception as e:\n        print(e)",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "l_to_c",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def l_to_c(l):\n    try:\n        return str(int(l))\n    except ValueError:\n        return str(10 + ord(l.upper()) - ord('A'))\ndef check_nirpp(nirpp, length_checksum=length_checksum):\n    print(\"\\nChecking the NIRPP number '%s' ...\" % nirpp)\n    ib = nirpp.replace(' ', '')\n    checksum = int(ib[-length_checksum:])\n    ib = ib[:-length_checksum]",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "check_nirpp",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def check_nirpp(nirpp, length_checksum=length_checksum):\n    print(\"\\nChecking the NIRPP number '%s' ...\" % nirpp)\n    ib = nirpp.replace(' ', '')\n    checksum = int(ib[-length_checksum:])\n    ib = ib[:-length_checksum]\n    print(\"  Of length\", len(ib))\n    num_nirpp = int(''.join(l_to_c(l) for l in ib))\n    print(\"  Of sum num_nirpp =\", num_nirpp)\n    print(\"  Of check sum to 97 =\", (97 - (num_nirpp % 97)))\n    print(\"  And expected checksum was\", checksum)",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "pprint_nirpp",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def pprint_nirpp(nirpp, length_checksum=length_checksum):\n    print(\"\\nDisplaying information contained in the NIRPP number '%s' ...\" % nirpp)\n    ib = nirpp.replace(' ', '')\n    ib = ib[:-length_checksum]\n    # Printing\n    for (i, l) in sorted(information_nirpp):\n        n = nirpp[i: i + l]\n        info = information_nirpp[(i, l)]\n        if n in info[\"mapping\"]:\n            explain = \"\\\"{}\\\"\".format(info[\"mapping\"][n])",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def main(args):\n    try:\n        if not args:\n            check_nirpp('HAHA LOL YOU THOUGH I WILL LET A REAL NIRPP IN MY SCRIPT')\n        else:\n            for nirpp in args:\n                if check_nirpp(nirpp):\n                    pprint_nirpp(nirpp)\n        return 0\n    except Exception as e:",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def main(URL, message, success):\n    print(f\"Downloading '{URL}'...\")\n    firefoxOptions = webdriver.FirefoxOptions()\n    firefoxOptions.headless = True\n    browser = webdriver.Firefox(options=firefoxOptions)\n    browser.get(URL)\n    source = browser.page_source\n    browser.close()\n    if message in source:\n        print(f\"{URL} indique toujours le message recherché :\\n\\\"{message}\\\"\")",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def main(url, MY_OUTWARD_TIME):\n    \"\"\" Go to the page 'url', find the next link to got, then extract the JSON query result, find the wanted train, and display the results.\n    \"\"\"\n    MY_OUTWARD_TIME = MY_OUTWARD_TIME.replace('h', ':')\n    # Create the web browser object\n    b = RB(history=True, allow_redirects=True)\n    # Open the page\n    b.open(url)\n    # Find the next page to go\n    res = str(b.select('#url_redirect_proposals')[0])",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "ends_by_0",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def ends_by_0(p):\n    return (p % 10) == 9\ndef next_ends_by_9(p):\n    np = nextprime(p)\n    return (np % 10) == 9\ndef next_ends_by_1(p):\n    np = nextprime(p)\n    return (np % 10) == 1\ndef main(maxn):\n    primes = sieve",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "next_ends_by_9",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def next_ends_by_9(p):\n    np = nextprime(p)\n    return (np % 10) == 9\ndef next_ends_by_1(p):\n    np = nextprime(p)\n    return (np % 10) == 1\ndef main(maxn):\n    primes = sieve\n    primes.extend(maxn)\n    primes = primes._list",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "next_ends_by_1",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def next_ends_by_1(p):\n    np = nextprime(p)\n    return (np % 10) == 1\ndef main(maxn):\n    primes = sieve\n    primes.extend(maxn)\n    primes = primes._list\n    nb_primes = len(primes)\n    print(f\"We found {nb_primes} primes smaller or equal than {maxn}...\")\n    filtered_primes = [ p for p in primes if ends_by_0(p) ]",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def main(maxn):\n    primes = sieve\n    primes.extend(maxn)\n    primes = primes._list\n    nb_primes = len(primes)\n    print(f\"We found {nb_primes} primes smaller or equal than {maxn}...\")\n    filtered_primes = [ p for p in primes if ends_by_0(p) ]\n    nb_filtered_primes = len(filtered_primes)\n    print(f\"We found {nb_filtered_primes} primes that finishes by 9...\")\n    rate = float(nb_filtered_primes) / float(nb_primes)",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "get_data",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def get_data(location, key, delay=365):\n    thisday = date.today()\n    oneday = timedelta(days=1)\n    alldata = {}\n    all_cloud_cover = {}\n    for d in range(delay):\n        t = thisday.isoformat()\n        if 'T' not in t:\n            t += 'T12:00:00'\n        try:",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "save_data",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def save_data(all_cloud_cover, filename):\n    new_dict = dict()\n    for d, k in all_cloud_cover.items():\n        new_dict[d.isoformat()] = k\n    with open(filename, \"w\") as fp:\n        dump(new_dict, fp)\ndef load_data(filename):\n    with open(filename, \"r\") as fp:\n        new_dict = load(fp)\n        all_cloud_cover = dict()",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "load_data",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def load_data(filename):\n    with open(filename, \"r\") as fp:\n        new_dict = load(fp)\n        all_cloud_cover = dict()\n        for d, k in new_dict.items():\n            dt = parse(d.replace('T12:00:00', ''))\n            all_cloud_cover[dt] = k\n    return all_cloud_cover\ndef plot_data(all_cloud_cover, name, filename):\n    Xs = np.array(list(all_cloud_cover.keys()))",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "plot_data",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def plot_data(all_cloud_cover, name, filename):\n    Xs = np.array(list(all_cloud_cover.keys()))\n    Ys = np.array(list(all_cloud_cover.values()))\n    # Remove day where we couldn't find the data\n    are_nans = np.isnan(Ys)\n    Xs = Xs[~are_nans]\n    Ys = Ys[~are_nans]\n    fig, ax = plt.subplots()\n    ax.set_title(f\"Cloud cover index in {name}\")\n    ax.set_xlabel(\"Date\")",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "plot_data_by_weekday",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def plot_data_by_weekday(all_cloud_cover, name, filename):\n    count_of_weekday = np.zeros(7)\n    data_by_weekday = np.zeros(7)\n    mean_by_weekday = np.zeros(7)\n    for x, y in all_cloud_cover.items():\n        if not np.isnan(y):\n            weekday = x.weekday()\n            count_of_weekday[weekday] += 1\n            data_by_weekday[weekday] += y\n            # print(\"For weekday\", weekday, \"one more count with cloud_cover =\", y)",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "read_groups",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def read_groups(data):\n    buf = []\n    for line in data:\n        buf.append(line)\n        if line.find('changed') != -1 and buf:\n            yield buf\n            buf = []\ndef main(url):\n    command = 'git log --no-color --shortstat --log-size --format=oneline --no-merges'.split()\n    data = subprocess.check_output(command).split('\\n')",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def main(url):\n    command = 'git log --no-color --shortstat --log-size --format=oneline --no-merges'.split()\n    data = subprocess.check_output(command).split('\\n')\n    xs, ys, msgs, commits = [], [], [], []\n    for group in read_groups(data):\n        if len(group) != 3: continue\n        commit = group[0].split()[0]\n        log_size = int(group[0].split()[-1])\n        msg = group[1]\n        change_size = sum(map(int, group[2].split()[3::2]))",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def main(argv, to_language=TO_LANGUAGE, from_language=FROM_LANGUAGE):\n    \"\"\" Main function. Use the arguments of the command line (sys.argv). \"\"\"\n    # TODO use docopt to handle the command line arguments! Cf. http://docopt.org/\n    # TODO can docopt handle a cli documentation with ansicolortags tags in it? Cf. http://ansicolortags.rtfd.io/\n    # Manual handing of the command line arguments\n    if \"-h\" in argv or \"--help\" in argv:\n        printc(\"\"\"\n<green>deepl.py<white> --help|-h | -f file | [--from LANG] [--to LANG] text\nA simple Python script translate a text from a language to another language, using DeepL translator (https://www.deepl.com/translator).\n<u>Examples:<U>",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "match_to_emoji",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def match_to_emoji(m):\n    \"\"\"Call emoji.emojize on m).\"\"\"\n    return emojize(m.group(), use_aliases=True)\ndef emojize_all(s):\n    \"\"\"Convert all emojis :aliases: of the string s to emojis in UTF-8.\"\"\"\n    return re.sub(r\":([a-z_-]+):\", match_to_emoji, s)\ndef main(path):\n    \"\"\"Handle the file given by its path.\"\"\"\n    with open(path, 'r') as f:\n        for line in f.readlines():",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "emojize_all",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def emojize_all(s):\n    \"\"\"Convert all emojis :aliases: of the string s to emojis in UTF-8.\"\"\"\n    return re.sub(r\":([a-z_-]+):\", match_to_emoji, s)\ndef main(path):\n    \"\"\"Handle the file given by its path.\"\"\"\n    with open(path, 'r') as f:\n        for line in f.readlines():\n            print(emojize_all(line), end='')\nif __name__ == '__main__':\n    from sys import argv",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def main(path):\n    \"\"\"Handle the file given by its path.\"\"\"\n    with open(path, 'r') as f:\n        for line in f.readlines():\n            print(emojize_all(line), end='')\nif __name__ == '__main__':\n    from sys import argv\n    for arg in argv[1:]:\n        main(arg)\n# End of emojize.py",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "emojize",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def emojize(s, use_svg=USE_SVG):\n    \"\"\"Call markdown.markdown() on s.\"\"\"\n    emoji_generator = pymdownx.emoji.to_svg if use_svg else pymdownx.emoji.to_png\n    extension_configs = {\n        'pymdownx.emoji': {\n            'emoji_generator': emoji_generator\n        }\n    }\n    res = markdown(s,\n                   extensions=['pymdownx.emoji'],",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "match_to_emoji",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def match_to_emoji(m, use_svg=USE_SVG):\n    \"\"\"Call emoji.emojize on m.group().\"\"\"\n    return emojize(m.group(), use_svg=use_svg)\ndef emojize_all(s, use_svg=USE_SVG):\n    \"\"\"Convert all emojis :aliases: of the string s to emojis in UTF-8.\"\"\"\n    return re.sub(r\":([a-z_-]+):\", lambda s2: match_to_emoji(s2, use_svg=use_svg), s)\ndef main(path, use_svg=USE_SVG):\n    \"\"\"Handle the file given by its path.\"\"\"\n    with open(path, 'r') as f:\n        for line in f.readlines():",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "emojize_all",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def emojize_all(s, use_svg=USE_SVG):\n    \"\"\"Convert all emojis :aliases: of the string s to emojis in UTF-8.\"\"\"\n    return re.sub(r\":([a-z_-]+):\", lambda s2: match_to_emoji(s2, use_svg=use_svg), s)\ndef main(path, use_svg=USE_SVG):\n    \"\"\"Handle the file given by its path.\"\"\"\n    with open(path, 'r') as f:\n        for line in f.readlines():\n            print(emojize_all(line, use_svg=use_svg), end='')\nif __name__ == '__main__':\n    from sys import argv",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def main(path, use_svg=USE_SVG):\n    \"\"\"Handle the file given by its path.\"\"\"\n    with open(path, 'r') as f:\n        for line in f.readlines():\n            print(emojize_all(line, use_svg=use_svg), end='')\nif __name__ == '__main__':\n    from sys import argv\n    if '--svg' in argv:\n        USE_SVG = True\n        while '--svg' in argv:",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "coin",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def coin(p=0.5):\n    \"\"\" 1 with probability = p, 0 with probability 1 - p. \"\"\"\n    return 1 * (np.random.random() < p)\ndef vonNeumann(q=0.5):\n    \"\"\" Use von Neumann's rejection algorithm with an unknown coin (Bernoulli q). \"\"\"\n    x, y = coin(q), coin(q)\n    while x == y:  # (x, y) not in {(1, 0), (1, 0)}\n        x, y = coin(q), coin(q)\n    return x\ndef main(n=1000):",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "vonNeumann",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def vonNeumann(q=0.5):\n    \"\"\" Use von Neumann's rejection algorithm with an unknown coin (Bernoulli q). \"\"\"\n    x, y = coin(q), coin(q)\n    while x == y:  # (x, y) not in {(1, 0), (1, 0)}\n        x, y = coin(q), coin(q)\n    return x\ndef main(n=1000):\n    \"\"\" Check that the von Neumann method is indeed simulating a fair coin. \"\"\"\n    print(\"\\n\\n- Using n = {} tests of the von Neumann method, with unknown q in (0, 1).\".format(n))\n    q = 1.0 / np.pi   # Unknown float number 0.3183098861837907",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def main(n=1000):\n    \"\"\" Check that the von Neumann method is indeed simulating a fair coin. \"\"\"\n    print(\"\\n\\n- Using n = {} tests of the von Neumann method, with unknown q in (0, 1).\".format(n))\n    q = 1.0 / np.pi   # Unknown float number 0.3183098861837907\n    tests = [vonNeumann(q) for _ in range(n)]\n    assert all(i in {0, 1} for i in tests), \"Error of the vonNeumann function: a value outside of {0, 1} has been produced...\"\n    mu, sigma = np.mean(tests), np.var(tests)\n    print(\"For the values x generated by the vonNeumann(q) function:\\n Average mu = {:.4g} (should be 0.5) and variance sigma = {:.4g} (should be 0.25).\".format(mu, sigma))\n    delta_mu = abs(mu - 0.5) / 0.5\n    delta_sigma = abs(sigma - 0.25) / 0.25",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "is_stderr_used",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def is_stderr_used(outputs):\n    for output in outputs:\n        try:\n            if output['name'] == \"stderr\":\n                return True\n        except KeyError:\n            pass\n    return False\ndef transform_data_texthtml(data_texthtml):\n    data_texthtml[0] = data_texthtml[0][2:]",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "transform_data_texthtml",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def transform_data_texthtml(data_texthtml):\n    data_texthtml[0] = data_texthtml[0][2:]\n    for i in range(len(data_texthtml)):\n        # Hack to replace a few HTML escaped caracters\n        data_texthtml[i] = data_texthtml[i].replace('&gt;','>').replace('&lt;','<').replace('&quot;','\\'')\n    return data_texthtml\ndef get_data_texthtml(outputs):\n    data_texthtml = []\n    for output in outputs:\n        try:",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "get_data_texthtml",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def get_data_texthtml(outputs):\n    data_texthtml = []\n    for output in outputs:\n        try:\n            if output['output_type'] == \"execute_result\" and 'text/html' in output['data']:\n                long_data_texthtml = output['data']['text/html']\n                assert len(long_data_texthtml) >= 8\n                data_texthtml += transform_data_texthtml(long_data_texthtml[6:-1])\n        except KeyError:\n            pass",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def main(old, new, debug=False):\n    filename = old\n    assert filename[-6:] == '.ipynb', \"Error: the input file is not a .ipynb Jupyter Notebook file.\"\n    with open(filename, 'r') as file:\n        content = json.load(file)\n    # Check that it is a IOCaml notebook\n    assert content['metadata']['kernelspec']['name'] == \"iocaml-kernel\" and content['metadata']['kernelspec']['language'] == \"ocaml\" and content['metadata']['kernelspec']['display_name'] == \"OCaml\", \"Error: the input notebook does not appear to have been produced by the IOCaml OCaml kernel.\"\n    # For each cell\n    for cell in content['cells']:\n        if cell['cell_type'] == \"code\":",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def main(nbJour=3, nbRepas=None, trains=None, nbNuit=None, totalHotel=None):\n    \"\"\" Calcule et affiche les détails des frais de mission.\n    Par exemple :\n    >>> trains = {\n           \"Rennes > Lille\": (44.00, \"14/12/16\"),\n           \"Lille > Paris \": (25.50, \"16/12/16\"),\n           \"Paris > Rennes\": (35.00, \"03/01/17\"),\n       }\n    >>> main(nbJour=3, trains=trains)\n    ...",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "testSpecialFile",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def testSpecialFile(name, number=''):\n    \"\"\" Test if the hidden file '~/.smsapifreemobile_name.b64' exists and decodes (base64) correctly.\n    \"\"\"\n    assert name in [\"number\", \"user\", \"password\"], \"Error: unknown or incorrect value for 'name' for the function openSpecialFile(name) ...\"\n    # printc(\"<cyan>Testing the hidden file <white>'<u>~/.smsapifreemobile_{}.b64<U>'<cyan>...<white>\".format(name))  # DEBUG\n    try:\n        with open(expanduser('~/') + \".smsapifreemobile_\" + name + number + \".b64\") as f:\n            variable = base64.b64decode(f.readline()[:-1])\n            while variable[-1] == '\\n':\n                variable = variable[:-1]",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "openSpecialFile",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def openSpecialFile(name, number=''):\n    \"\"\" Open the hidden file '~/.smsapifreemobile_name.b64', read and decode (base64) and return its content.\n    \"\"\"\n    assert name in [\"number\", \"user\", \"password\"], \"Error: unknown or incorrect value for 'name' for the function openSpecialFile(name) ...\"\n    printc(\"<cyan>Opening the hidden file <white>'<u>~/.smsapifreemobile_{}.b64<U>'<cyan>, read and decode (base64) and return its content...<white>\".format(name))\n    try:\n        with open(expanduser('~/') + \".smsapifreemobile_\" + name + number + \".b64\") as f:\n            variable = base64.b64decode(f.readline()[:-1])\n            while variable[-1] == '\\n':\n                variable = variable[:-1]",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "send_sms",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def send_sms(text=\"Empty!\", secured=True, sleep_duration=0):\n    \"\"\" Sens a free SMS to the user identified by [user], with [password].\n    :user: Free Mobile id (of the form [0-9]{8}),\n    :password: Service password (of the form [a-zA-Z0-9]{14}),\n    :text: The content of the message (a warning is displayed if the message is bigger than 480 caracters)\n    :secured: True to use HTTPS, False to use HTTP.\n    Returns a boolean and a status string.\n    \"\"\"\n    # DONE split the text into smaller pieces if length is too big (automatically, or propose to do it ?)\n    if len(text) > MAX_SIZE:",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def main(argv):\n    \"\"\" Main function. Use the arguments of the command line (sys.argv).\n    \"\"\"\n    # TODO use docopt to handle the command line arguments! Cf. http://docopt.org/\n    # TODO can docopt handle a cli documentation with ansicolortags tags in it? Cf. http://ansicolortags.rtfd.io/\n    # Manual handing of the command line arguments\n    if \"-h\" in argv or \"--help\" in argv:\n        printc(\"\"\"\n<green>FreeSMS.py<white> --help|-h | -f file | [--sleep] body of the message\nA simple Python script to send a text message to a Free Mobile phone.",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "readfiles",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def readfiles(filenames):\n    \"\"\" Return the content of each file, concatenated as one big string.\n    - Path could be relative or absolute, but nothing fancy is done here.\n    \"\"\"\n    text = \"\"\n    # Read the whole text for each file\n    for filename in filenames:\n        try:\n            text += open(filename, 'r').read()\n            text += r\"\\n\"",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "generate",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def generate(text, max_words=600, width=1600, height=900):\n    \"\"\" Generate a word cloud image from the given text (one huge string). \"\"\"\n    # Take relative word frequencies into account, lower max_font_size\n    # https://amueller.github.io/word_cloud/generated/wordcloud.WordCloud.html#wordcloud.WordCloud\n    max_words = int(max_words) if max_words is not None else  600\n    width     = int(width)     if width     is not None else  1600\n    height    = int(height)    if height    is not None else  900\n    wc = WordCloud(\n        max_font_size=50,\n        relative_scaling=.5,",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "makeimage",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def makeimage(wordcloud,\n              outname='wordcloud.png', title='Word cloud', show=False, force=False):\n    \"\"\" Display or save the wordcloud as a image. \"\"\"\n    # Display the generated image:\n    try:\n        # 2. the matplotlib way:\n        plt.figure()\n        plt.imshow(wordcloud)\n        plt.axis(\"off\")\n        if title:",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def main(argv):\n    \"\"\" Use the arguments of the command line. \"\"\"\n    # Use the arg parser\n    args = docopt(full_docopt_text, argv=argv, version=\"generate-word-cloud.py v{}\".format(version))\n    # printc(\"<magenta>Arguments: {} <reset>\".format(args))  # DEBUG\n    # Read the files\n    printc(\"<green>Reading the files<reset>, from: <blue>{}<reset>.\".format(args['INFILE']))\n    text = readfiles(args['INFILE'])\n    # Decide where to save it\n    outname = args['--outfile'] if args['--outfile'] else 'wordcloud.png'",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "save_data",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def save_data(time_of_data, data, filename):\n    new_dict = {\n        time_of_data: data,\n    }\n    old_data = load_data(filename)\n    old_data.update(new_dict)\n    with open(filename, \"w\") as fp:\n        dump(new_dict, fp)\n    return new_dict\ndef load_data(filename):",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "load_data",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def load_data(filename):\n    old_data = dict()\n    if isfile(filename):\n        with open(filename, \"r\") as fp:\n            old_data = load(fp)\n    return old_data\ndef get_data(names, locations, key, verbose=True):\n    data = []\n    now = datetime.now()\n    for name, location in zip(names, locations):",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "get_data",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def get_data(names, locations, key, verbose=True):\n    data = []\n    now = datetime.now()\n    for name, location in zip(names, locations):\n        weather = forecast(key, *location)\n        temperature_in_F = weather['currently']['temperature']\n        temperature_in_C = round((temperature_in_F - 32) * (5/9), 1)\n        data.append({\n            \"name\": name,\n            \"location\": location,",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def main(filename, names, locations, key, verbose=True):\n    time_of_data, data = get_data(names, locations, key, verbose=verbose)\n    save_data(time_of_data, data, filename)\n    return time_of_data, data\nif __name__ == '__main__':\n    filename = \"get_current_temperature.json\"\n    names, locations = [], []\n    # https://www.google.fr/maps/place/Supélec/@48.1252316,-1.6255899,17z/\n    name = \"CentraleSupélec, Rennes, France\"\n    location = 48.1252316, -1.6255899",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "gravatar",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def gravatar(email, default=default, size=size, secure=secure):\n    \"\"\"\n    gravatar(email, default=default, size=size, secure=secure) -> string\"\n    Return the URL of the gravatar picture associated with @email.\n    @default: default picture to use if not available. Default is %s.\n    @size: format to use (pixel x pixel). Default is %i.\n    @secure: if true, the returned URL use https://secure.gravatar.com instead of http://www.gravatar.com. Default is %s.\"\n    \"\"\" % (default, size, secure)\n    if secure:\n        gravatar_url = \"https://secure.gravatar.com/avatar/\" + hashlib.md5(email.lower()).hexdigest() + \"?r=pg&\"",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "small_hash",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def small_hash(x, nb_bits=3):\n    \"\"\"A naive hash function.\"\"\"\n    # return abs(hash(x)) % 2  # test, to check that collisions are well handled\n    return abs(hash(x)) % (1 << nb_bits)\nNB_BITS = 4\nDEFAULT_SIZE = 1 << NB_BITS\nclass hashtable(object):\n    \"\"\"Manual implementation of a naive hash table.\n    - Can only store hashable values.\n    - Use single-linked lists to be collision-resistant!",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "test",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def test():\n    print(\"Creating empty hash table ...\")\n    H = hashtable()\n    print(H)\n    print(\"Inserting i**2 for i = 0..9 ...\")\n    for i in range(10):\n        H.insert(i, i**2)\n    print(H)\n    print(\"Reading i**2 for i = 0..9 ...\")\n    for i in range(10):",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "salt",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def salt():\n    \"\"\"Returns a string of 2 randome letters\"\"\"\n    letters = 'abcdefghijklmnopqrstuvwxyz' \\\n              'ABCDEFGHIJKLMNOPQRSTUVWXYZ' \\\n              '0123456789/.'\n    return random.choice(letters) + random.choice(letters)\nclass HtpasswdFile:\n    \"\"\"A class for manipulating htpasswd files.\"\"\"\n    def __init__(self, filename, create=False):\n        self.entries = []",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def main():\n    \"\"\"\n        %prog -b[c] filename username password\n        %prog -D filename username\"\"\"\n    # For now, we only care about the use cases that affect tests/functional.py\n    parser = OptionParser(usage=main.__doc__)\n    parser.add_option('-b', action='store_true', dest='batch', default=False,\n        help='Batch mode; password is passed on the command line IN THE CLEAR.'\n        )\n    parser.add_option('-c', action='store_true', dest='create', default=False,",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "notify",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def notify(msg, submsg=\"mail.py : auto mailer (with notify-send)\"):\n ''' Notification using subprocess and notify-send.\n Also print the informations directly to the screen.\n Fails simply if notify-send is not found.'''\n try:\n  subprocess.Popen(['notify-send', msg, submsg])\n except:\n  print \"notify-send : not-found !\"\n  return -1\n print \"msg=%s\\nsubmsg=%s\" % (msg, submsg)",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "send_me_an_email",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def send_me_an_email(message, subj=\"[LOG] no object\", me=\"jarvisATcransDOTorg\".replace(\"AT\",\"@\").replace(\"DOT\",\".\"), you=\"jarvisATcransDOTorg\".replace(\"AT\",\"@\").replace(\"DOT\",\".\"), my_identity=\"jarvis log\"):\n\t\"\"\" Send a message [message] by email.\n\tThe content of the email is [message], the subject is [subj].\n\tThe sender is [me], not necessary a valid sender for the SMTP.\n\tThe mail will be sent to [you].\n\tAuto configure with SMTP server on localhost in the cr@ns server (http://www.crans.org)\n\t(c) Lilian Besson, 2012-2013.\n\t\"\"\"\n\tnotify(subj, message+\"\\n### ME=\"+me+\" YOU=\"+you)\n\tmsg = MIMEText(message+(signature % me))",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "send_me_an_email",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def send_me_an_email(message, subj=\"[LOG] no object\", me=defaultaddress,\n                     you=defaultaddress, my_identity=\"jarvis\"):\n    \"\"\" Send a message [message] by email.\n    The content of the email is [message], the subject is [subj].\n    The sender is [me], not necessary a valid sender for the SMTP.\n    The mail will be sent to [you].\n    Auto configured with SMTP server (smtp.crans.org) with SSL support for the cr@ns server (http://www.crans.org)\n    (c) Lilian Besson, 2012-2014.\n    \"\"\"\n    msg = MIMEText(\"%s\" % (message + (signature % me)).replace(\"\\n\", '\\n'), _charset=\"utf-8\")",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "send_me_an_email",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def send_me_an_email(message, subj=\"[LOG] no object\", me=defaultaddress,\n                     you=defaultaddress, my_identity=\"jarvis (HTML)\"):\n    \"\"\" Send a message [message] by email.\n    The content of the email is [message] (encoded as HTML), the subject is [subj].\n    The sender is [me], not necessary a valid sender for the SMTP.\n    The mail will be sent to [you].\n    Auto configured with SMTP server (smtp.crans.org) with SSL support for the cr@ns server (http://www.crans.org)\n    (c) Lilian Besson, 2014.\n    \"\"\"\n    msg = MIMEText(\"%s\" % (message + (signature % me)).replace(\"\\n\", '\\n'), _charset=None, _subtype=\"html\")",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "send_me_an_email",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def send_me_an_email(message, subj=\"[LOG] no object\", me=\"jarvisATcransDOTorg\".replace(\"AT\", \"@\").replace(\"DOT\", \".\"), you=\"0628412257ATsfrDOTfr\".replace(\"AT\", \"@\").replace(\"DOT\", \".\"), my_identity=\"jarvis log\"):\n    \"\"\" Send a message [message] by email.\n    The content of the email is [message], the subject is [subj].\n    The sender is [me], not necessary a valid sender for the SMTP.\n    The mail will be sent to [you].\n    Auto configure with SMTP server on localhost in the cr@ns server (http://www.crans.org)\n    (c) Lilian Besson, 2012-2013.\n    \"\"\"\n    msg = MIMEText(message + (signature % me))\n    # The order is \"important\", to act like a real mail client !",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "error_dialog",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def error_dialog(parent, msg):\n    dialog = gtk.MessageDialog(parent,\n                               gtk.DIALOG_DESTROY_WITH_PARENT,\n                               gtk.MESSAGE_ERROR,\n                               gtk.BUTTONS_OK,\n                               msg)\n    dialog.run()\n    dialog.destroy()\ndef remove_all_marks(buffer):\n    begin, end = buffer.get_bounds()",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "remove_all_marks",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def remove_all_marks(buffer):\n    begin, end = buffer.get_bounds()\n    buffer.remove_source_marks(begin, end)\ndef load_file(buffer, path):\n    buffer.begin_not_undoable_action()\n    try:\n        txt = open(path).read()\n    except:\n        return False\n    buffer.set_text(txt)",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "load_file",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def load_file(buffer, path):\n    buffer.begin_not_undoable_action()\n    try:\n        txt = open(path).read()\n    except:\n        return False\n    buffer.set_text(txt)\n    buffer.set_data('filename', path)\n    buffer.end_not_undoable_action()\n    buffer.set_modified(False)",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "open_file",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def open_file(buffer, filename):\n    # get the new language for the file mimetype\n    manager = buffer.get_data('languages-manager')\n    # essai pour charger un style particulier\n    # gtk-source-style-scheme-manager-get-default\n    try:\n        stylescheme = buffer.get_style_scheme()  # un autre si possible\n    except:\n        # XXX A modifier si on veut un autre\n        manager2 = buffer.get_data('styles-scheme-manager')",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "begin_print_cb",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def begin_print_cb(operation, context, compositor):\n    while not compositor.paginate(context):\n        pass\n    n_pages = compositor.get_n_pages()\n    operation.set_n_pages(n_pages)\ndef draw_page_cb(operation, context, page_nr, compositor):\n    compositor.draw_page(context, page_nr)\n# Action callbacks\ndef numbers_toggled_cb(action, sourceview):\n    sourceview.set_show_line_numbers(action.get_active())",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "draw_page_cb",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def draw_page_cb(operation, context, page_nr, compositor):\n    compositor.draw_page(context, page_nr)\n# Action callbacks\ndef numbers_toggled_cb(action, sourceview):\n    sourceview.set_show_line_numbers(action.get_active())\ndef marks_toggled_cb(action, sourceview):\n    sourceview.set_show_line_marks(action.get_active())\ndef margin_toggled_cb(action, sourceview):\n    sourceview.set_show_right_margin(action.get_active())\ndef auto_indent_toggled_cb(action, sourceview):",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "numbers_toggled_cb",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def numbers_toggled_cb(action, sourceview):\n    sourceview.set_show_line_numbers(action.get_active())\ndef marks_toggled_cb(action, sourceview):\n    sourceview.set_show_line_marks(action.get_active())\ndef margin_toggled_cb(action, sourceview):\n    sourceview.set_show_right_margin(action.get_active())\ndef auto_indent_toggled_cb(action, sourceview):\n    sourceview.set_auto_indent(action.get_active())\ndef insert_spaces_toggled_cb(action, sourceview):\n    sourceview.set_insert_spaces_instead_of_tabs(action.get_active())",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "marks_toggled_cb",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def marks_toggled_cb(action, sourceview):\n    sourceview.set_show_line_marks(action.get_active())\ndef margin_toggled_cb(action, sourceview):\n    sourceview.set_show_right_margin(action.get_active())\ndef auto_indent_toggled_cb(action, sourceview):\n    sourceview.set_auto_indent(action.get_active())\ndef insert_spaces_toggled_cb(action, sourceview):\n    sourceview.set_insert_spaces_instead_of_tabs(action.get_active())\ndef tabs_toggled_cb(action, action2, sourceview):\n    sourceview.set_tab_width(action.get_current_value())",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "margin_toggled_cb",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def margin_toggled_cb(action, sourceview):\n    sourceview.set_show_right_margin(action.get_active())\ndef auto_indent_toggled_cb(action, sourceview):\n    sourceview.set_auto_indent(action.get_active())\ndef insert_spaces_toggled_cb(action, sourceview):\n    sourceview.set_insert_spaces_instead_of_tabs(action.get_active())\ndef tabs_toggled_cb(action, action2, sourceview):\n    sourceview.set_tab_width(action.get_current_value())\ndef new_view_cb(action, sourceview):\n    window = create_view_window(sourceview.get_buffer(), sourceview)",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "auto_indent_toggled_cb",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def auto_indent_toggled_cb(action, sourceview):\n    sourceview.set_auto_indent(action.get_active())\ndef insert_spaces_toggled_cb(action, sourceview):\n    sourceview.set_insert_spaces_instead_of_tabs(action.get_active())\ndef tabs_toggled_cb(action, action2, sourceview):\n    sourceview.set_tab_width(action.get_current_value())\ndef new_view_cb(action, sourceview):\n    window = create_view_window(sourceview.get_buffer(), sourceview)\n    window.set_default_size(683, 700)\n    window.show()",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "insert_spaces_toggled_cb",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def insert_spaces_toggled_cb(action, sourceview):\n    sourceview.set_insert_spaces_instead_of_tabs(action.get_active())\ndef tabs_toggled_cb(action, action2, sourceview):\n    sourceview.set_tab_width(action.get_current_value())\ndef new_view_cb(action, sourceview):\n    window = create_view_window(sourceview.get_buffer(), sourceview)\n    window.set_default_size(683, 700)\n    window.show()\ndef print_cb(action, sourceview):\n    window = sourceview.get_toplevel()",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "tabs_toggled_cb",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def tabs_toggled_cb(action, action2, sourceview):\n    sourceview.set_tab_width(action.get_current_value())\ndef new_view_cb(action, sourceview):\n    window = create_view_window(sourceview.get_buffer(), sourceview)\n    window.set_default_size(683, 700)\n    window.show()\ndef print_cb(action, sourceview):\n    window = sourceview.get_toplevel()\n    buffer = sourceview.get_buffer()\n    compositor = gtksourceview2.print_compositor_new_from_view(sourceview)",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "new_view_cb",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def new_view_cb(action, sourceview):\n    window = create_view_window(sourceview.get_buffer(), sourceview)\n    window.set_default_size(683, 700)\n    window.show()\ndef print_cb(action, sourceview):\n    window = sourceview.get_toplevel()\n    buffer = sourceview.get_buffer()\n    compositor = gtksourceview2.print_compositor_new_from_view(sourceview)\n    compositor.set_wrap_mode(gtk.WRAP_CHAR)\n    compositor.set_highlight_syntax(True)",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "print_cb",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def print_cb(action, sourceview):\n    window = sourceview.get_toplevel()\n    buffer = sourceview.get_buffer()\n    compositor = gtksourceview2.print_compositor_new_from_view(sourceview)\n    compositor.set_wrap_mode(gtk.WRAP_CHAR)\n    compositor.set_highlight_syntax(True)\n    compositor.set_print_line_numbers(5)\n    compositor.set_header_format(False, 'Imprimé dans %A', None, '%F')\n    filename = buffer.get_data('filename')\n    compositor.set_footer_format(True, '%T', filename, 'Page %N/%Q')",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "open_file_cb",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def open_file_cb(action, buffer):\n    chooser = gtk.FileChooserDialog('Ouvrir un fichier ...', None,\n                                    gtk.FILE_CHOOSER_ACTION_OPEN,\n                                    (gtk.STOCK_CANCEL, gtk.RESPONSE_CANCEL,\n                                     gtk.STOCK_OPEN, gtk.RESPONSE_OK))\n    response = chooser.run()\n    if response == gtk.RESPONSE_OK:\n        filename = chooser.get_filename()\n        if filename:\n            open_file(buffer, filename)",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "update_cursor_position",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def update_cursor_position(buffer, view):\n    tabwidth = view.get_tab_width()\n    pos_label = view.get_data('pos_label')\n    iter = buffer.get_iter_at_mark(buffer.get_insert())\n    nchars = iter.get_offset()\n    row = iter.get_line() + 1\n    start = iter.copy()\n    start.set_line_offset(0)\n    col = 0\n    while start.compare(iter) < 0:",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "move_cursor_cb",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def move_cursor_cb(buffer, cursoriter, mark, view):\n    update_cursor_position(buffer, view)\ndef window_deleted_cb(widget, ev, view):\n    if windows[0] == widget:\n        gtk.main_quit()\n    else:\n        # remove window from list\n        windows.remove(widget)\n        # we return False since we want the window destroyed\n        return False",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "window_deleted_cb",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def window_deleted_cb(widget, ev, view):\n    if windows[0] == widget:\n        gtk.main_quit()\n    else:\n        # remove window from list\n        windows.remove(widget)\n        # we return False since we want the window destroyed\n        return False\n    return True\ndef button_press_cb(view, ev):",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "button_press_cb",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def button_press_cb(view, ev):\n    buffer = view.get_buffer()\n    if not view.get_show_line_marks():\n        return False\n    # check that the click was on the left gutter\n    if ev.window == view.get_window(gtk.TEXT_WINDOW_LEFT):\n        if ev.button == 1:\n            mark_category = MARK_CATEGORY_1\n        else:\n            mark_category = MARK_CATEGORY_2",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "create_view_window",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def create_view_window(buffer, sourceview=None):\n    # window\n    window = gtk.Window(gtk.WINDOW_TOPLEVEL)\n    window.set_border_width(0)\n    window.set_title('MOcaml FileViewer [Naereen test]')\n    windows.append(window)  # this list contains all view windows\n    # view\n    view = gtksourceview2.View(buffer)\n    buffer.connect('mark_set', move_cursor_cb, view)\n    buffer.connect('changed', update_cursor_position, view)",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "create_main_window",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def create_main_window(buffer):\n    window = create_view_window(buffer)\n    ui_manager = window.get_data('ui_manager')\n    # buffer action group\n    action_group = gtk.ActionGroup('BufferActions')\n    action_group.add_actions(buffer_actions, buffer)\n    ui_manager.insert_action_group(action_group, 1)\n    # merge buffer ui\n    ui_manager.add_ui_from_string(buffer_ui_description)\n    # preselect menu checkitems",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def main(args):\n    # create buffer\n    lm = gtksourceview2.LanguageManager()\n    sm = gtksourceview2.StyleSchemeManager()\n    buffer = gtksourceview2.Buffer()\n    buffer.set_data('languages-manager', lm)\n    buffer.set_data('styles-scheme-manager', sm)\n    # parse arguments\n    if len(args) >= 2:\n        open_file(buffer, args[1])",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "sleeptime",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def sleeptime(lmbda=MEAN_TIME, use_poisson=True):\n    \"\"\"Random time until next message.\"\"\"\n    if use_poisson:\n        return poisson(lmbda)\n    else:\n        return lmbda\ndef sleep_bar(secs):\n    \"\"\"Sleep with a bar, or not\"\"\"\n    try:\n        # From progressbar example #3, https://github.com/niltonvolpato/python-progressbar/blob/master/examples.py#L67",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "sleep_bar",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def sleep_bar(secs):\n    \"\"\"Sleep with a bar, or not\"\"\"\n    try:\n        # From progressbar example #3, https://github.com/niltonvolpato/python-progressbar/blob/master/examples.py#L67\n        from progressbar import Bar, ETA, ProgressBar, ReverseBar\n        widgets = [Bar('>'), ' ', ETA(), ' ', ReverseBar('<')]\n        pbar = ProgressBar(widgets=widgets, maxval=100).start()\n        for i in range(100):\n            # do something\n            time.sleep(secs / 110.)",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "random_line",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def random_line(lines):\n    \"\"\"Read the file and select one line.\"\"\"\n    try:\n        return random.choice(lines).replace('`', '').replace('_', '')\n    except:  # Default quote\n        logging.info(\"Failed to read a random line from this list with {} lines...\".format(len(lines)))  # DEBUG\n        return \"I love you !\"\ndef get_reactions(list_of_ts_channel, sc):\n    \"\"\"Get the reaction of users on all the messages sent by the bot, to increase or decrease the frequency of messages.\"\"\"\n    scale_factor = 1.",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "get_reactions",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def get_reactions(list_of_ts_channel, sc):\n    \"\"\"Get the reaction of users on all the messages sent by the bot, to increase or decrease the frequency of messages.\"\"\"\n    scale_factor = 1.\n    try:\n        for (ts, c) in list_of_ts_channel:\n            # https://api.slack.com/methods/reactions.get\n            reaction = sc.api_call(\n                \"reactions.get\", channel=c, timestamp=ts\n            )\n            logging.debug(\"reaction =\", reaction)",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "send",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def send(text, sc, use_channel=USE_CHANNEL):\n    \"\"\"Send text to channel SLACK_CHANNEL with client sc.\n    - https://github.com/slackapi/python-slackclient#sending-a-message\n    \"\"\"\n    channel = SLACK_CHANNEL if use_channel else SLACK_USER\n    text = \"{}\\n> (Sent by an _open-source_ Python script :snake:, {}, written by Lilian Besson)\".format(text, URL)\n    logging.info(\"Sending the message '{}' to channel/user {} ...\".format(text, channel))\n    # https://api.slack.com/methods/chat.postMessage\n    return sc.api_call(\n        \"chat.postMessage\", channel=channel, text=text,",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "loop",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def loop(quote_file=QUOTE_FILE):\n    \"\"\"Main loop.\"\"\"\n    logging.info(\"Starting my Slack bot, reading random quotes from the file {}...\".format(quote_file))\n    # Get list of quotes and parameters\n    the_quote_file = open(quote_file, 'r')\n    lines = the_quote_file.readlines()\n    sc = SlackClient(SLACK_TOKEN)\n    lmbda = MEAN_TIME\n    list_of_ts_channel = []\n    # Start loop",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "termimshow",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def termimshow(Z, vmin=None, vmax=None, cmap=CM_Hot, show_cmap=True):\n    \"\"\" Show a 2D numpy array using terminal colors. \"\"\"\n    if len(Z.shape) != 2:\n        print(\"Cannot display non 2D array\")\n        return\n    vmin = vmin or Z.min()\n    vmax = vmax or Z.max()\n    cmap.scale(vmin, vmax)\n    # Build initialization string that setup terminal colors\n    init = ''",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "usage",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def usage():\n    print(\"\"\"\n    Usage: pastebox.py <option> <pasteid|file> ..\n    Options:\n    --authhash=<authhash>   authentication hash for additional protection ([a-z0-9])\n    --ttl=<ttl>             time to live in seconds\n    -s|--stdout             print paste to stdout\n    -d|--download           download and store to file\n    Usage examples:\n    lspci|pastebox.py        Upload input by piping",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def main(argv):\n    try:\n        opts, args = getopt.getopt(argv, \"sdh\", [\"stdout\", \"download\", \"mode=\", \"authhash=\", \"ttl=\", \"help\"])\n    except getopt.GetoptError:\n        usage()\n        sys.exit(2)\n    paste = PasteBox()\n    for opt, arg in opts:\n        if opt in (\"--mode\"):\n            if arg:",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "markov",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def markov(corpus, start, length):\n    # Counting occurrences\n    next_one = defaultdict(Counter)\n    for sentence in corpus:\n        words = sentence.split()\n        nb_words = len(words)\n        for i in range(nb_words - 1):\n            next_one[words[i]][words[i + 1]] += 1\n    # Initializing states\n    states = {}",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "smooth_nojit",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def smooth_nojit(u, a):\n    y = np.zeros_like(u)\n    y[0] = (1-a)*u[0]\n    for k in range(1, len(u)):\n        y[k] = a*y[k-1] + (1-a)*u[k]\n    return y\nsmooth_jit = numba.jit(smooth_nojit)\n# <- factor ×100 speed-up!\nif __name__ == '__main__':\n    print(\"For 1e6 points...\")",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def main(argv=[], path='/tmp', outfile='test.html', title='Test', use_jquery=False):\n    \"\"\" Convert every input file from Markdown to HTML, and concatenate all them to an output.\"\"\"\n    printc(\"<green>Starting main, with:<white>\")\n    # FIXME printc does not handle UTF-8 correctly ! AAAH!\n    print(\"path='{path}', outfile='{outfile}'.\".format(path=path, outfile=outfile))\n    print(\"And the title is:\", title)\n    fullpath = os.path.join(path, outfile)\n    printc(\"<magenta>The output file will be <white>'<u>{fullpath}<U>'.\".format(fullpath=fullpath))\n    with open(fullpath, \"w\") as html_file:\n        html_file = codecs.getwriter('utf-8')(html_file)",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "exclude_dir",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def exclude_dir(directory):\n    if \"build\" in directory:\n        return True\n    if \".git\" in directory :\n        return True\n    return False\ndef _tex_file_iterator(directory):\n    for p in os.listdir(directory):\n        path=os.path.join(directory,p)\n        if os.path.isfile(path):",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "tex_file_iterator",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def tex_file_iterator(directory):\n    \"\"\"\n    Provides 'mazhe.bib' and then the '.tex' files in the\n    directory (recursive).\n    \"\"\"\n    yield os.path.join(directory,\"mazhe.bib\")\n    for p in _tex_file_iterator(directory):\n        yield p\ndef _file_to_url_iterator(filename):\n    \"\"\"",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "is_serious_url",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def is_serious_url(url):\n    if url == r\"\\lstname\":\n        return False\n    if url in useless_url :\n        return False\n    return True\ndef file_to_url_iterator(filename):\n    for url in _file_to_url_iterator(filename):\n        if is_serious_url(url):\n            yield url",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "file_to_url_iterator",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def file_to_url_iterator(filename):\n    for url in _file_to_url_iterator(filename):\n        if is_serious_url(url):\n            yield url\ndef check_url_corectness(url,f):\n    if url==\"\":\n        print(\"There is an empty URL in \",f)\n    if url[0] not in string.ascii_letters :\n        print(\"In \",f,\" : the url does not starts with an ascii character :\")\n        print(url)",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "check_url_corectness",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def check_url_corectness(url,f):\n    if url==\"\":\n        print(\"There is an empty URL in \",f)\n    if url[0] not in string.ascii_letters :\n        print(\"In \",f,\" : the url does not starts with an ascii character :\")\n        print(url)\ntry:\n    from httplib import HTTPConnection\nexcept ImportError:\n    from http.client import HTTPConnection",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "checkUrl",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def checkUrl(url):\n    try:\n        p = urlparse(url)\n        conn = HTTPConnection(p.netloc)\n        conn.request('HEAD', p.path)\n        resp = conn.getresponse()\n        return resp.status < 400\n    except Exception as e:\n        print(\"Exception:\", e)\n        return False",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "is_not_dead",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def is_not_dead(url):\n    try:\n        ret = requests.head(url)\n        return ret.status_code < 400\n    except Exception as e:\n        print(\"Exception:\", e)\n        return False\nfor f in tex_file_iterator(starting_path):\n    print(\"File\", f)\n    for url in file_to_url_iterator(f):",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "ins_all_positions",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def ins_all_positions(x, l):\n    \"\"\"Return a list of lists obtained from l by inserting x at every possible index.\"\"\"\n    res = []\n    for i in range(0, len(l) + 1):\n        res.append(l[:i] + [x] + l[i:])\n    return res\n# Now the main permutations generator.\ndef first_permutations(iterable):\n    \"\"\"Second algorithm, insert-into-all-positions solution.\"\"\"\n    if len(iterable) == 0:",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "first_permutations",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def first_permutations(iterable):\n    \"\"\"Second algorithm, insert-into-all-positions solution.\"\"\"\n    if len(iterable) == 0:\n        return []\n    # we must specify this edge case\n    elif len(iterable) == 1:\n        return [[iterable[0]]]\n    else:\n        x, xs = iterable[0], iterable[1:]\n        return reduce(lambda acc, p: acc + ins_all_positions(x, p), first_permutations(xs), [])",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "rm",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def rm(x, l):\n    \"\"\"List l without element x.\"\"\"\n    return [y for y in l if x != y]\ndef head_of_all(x, l):\n    \"\"\"List of lists from l where x is the head of all the lists.\"\"\"\n    return [[x] + p for p in l]\ndef second_permutations(iterable):\n    \"\"\"Second algorithm, fixed-head solution.\"\"\"\n    if len(iterable) == 0:\n        return []",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "head_of_all",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def head_of_all(x, l):\n    \"\"\"List of lists from l where x is the head of all the lists.\"\"\"\n    return [[x] + p for p in l]\ndef second_permutations(iterable):\n    \"\"\"Second algorithm, fixed-head solution.\"\"\"\n    if len(iterable) == 0:\n        return []\n    # we must specify this edge case\n    elif len(iterable) == 1:\n        return [[iterable[0]]]",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "second_permutations",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def second_permutations(iterable):\n    \"\"\"Second algorithm, fixed-head solution.\"\"\"\n    if len(iterable) == 0:\n        return []\n    # we must specify this edge case\n    elif len(iterable) == 1:\n        return [[iterable[0]]]\n    else:\n        return reduce(lambda acc, x: acc + head_of_all(x, second_permutations(rm(x, iterable))), iterable, [])\n# --- Third algorithm : Johnson Trotter algorithm",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "attach_direction",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def attach_direction(t, d=left):\n    \"\"\"Attach the direction d to all elements of array t.\"\"\"\n    return [(x, d) for x in t]\ndef remove_direction(t):\n    \"\"\"Remove the attached direction d to all elements of array t.\"\"\"\n    return [y for y, _ in t]\ndef swap(t, i, j):\n    \"\"\"Swap t[i] and t[j] in array t.\"\"\"\n    t[i], t[j] = t[j], t[i]\ndef is_movable(a, i):",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "remove_direction",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def remove_direction(t):\n    \"\"\"Remove the attached direction d to all elements of array t.\"\"\"\n    return [y for y, _ in t]\ndef swap(t, i, j):\n    \"\"\"Swap t[i] and t[j] in array t.\"\"\"\n    t[i], t[j] = t[j], t[i]\ndef is_movable(a, i):\n    \"\"\"Can a[i] be moved?\"\"\"\n    x, d = a[i]\n    if d == left:",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "swap",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def swap(t, i, j):\n    \"\"\"Swap t[i] and t[j] in array t.\"\"\"\n    t[i], t[j] = t[j], t[i]\ndef is_movable(a, i):\n    \"\"\"Can a[i] be moved?\"\"\"\n    x, d = a[i]\n    if d == left:\n        return i > 0 and x > a[i - 1][0]\n    elif d == right:\n        return i < len(a) - 1 and x > a[i + 1][0]",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "is_movable",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def is_movable(a, i):\n    \"\"\"Can a[i] be moved?\"\"\"\n    x, d = a[i]\n    if d == left:\n        return i > 0 and x > a[i - 1][0]\n    elif d == right:\n        return i < len(a) - 1 and x > a[i + 1][0]\n    else:\n        raise ValueError(\"unknown direction d = {}\".format(d))\ndef move(a, i):",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "move",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def move(a, i):\n    \"\"\"Move it if possible.\"\"\"\n    x, d = a[i]\n    if is_movable(a, i):\n        if d == left:\n            swap(a, i, i - 1)\n        elif d == right:\n            swap(a, i, i + 1)\n        else:\n            raise ValueError(\"unknown direction d = {}\".format(d))",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "scan_largest_movable",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def scan_largest_movable(a):\n    \"\"\"Find the largest movable element.\"\"\"\n    def aux(acc, i):\n        if i >= len(a):\n            return acc\n        else:\n            if not is_movable(a, i):\n                return aux(acc, i + 1)\n            else:\n                x, _ = a[i]",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "flip",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def flip(d):\n    \"\"\"Flip direction d : left -> right, right -> left\"\"\"\n    return not d\ndef scan_flip_larger(x, a):\n    \"\"\"Scan to flip larger.\"\"\"\n    for i, (y, d) in enumerate(a):\n        if y > x:\n            a[i] = y, flip(d)\ndef third_permutations(iterable):\n    \"\"\"Third algorithm, Johnson Trotter algorithm.\"\"\"",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "scan_flip_larger",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def scan_flip_larger(x, a):\n    \"\"\"Scan to flip larger.\"\"\"\n    for i, (y, d) in enumerate(a):\n        if y > x:\n            a[i] = y, flip(d)\ndef third_permutations(iterable):\n    \"\"\"Third algorithm, Johnson Trotter algorithm.\"\"\"\n    i = sorted(list(iterable))  # Required by the algorithm\n    a = attach_direction(i)\n    r = list(iterable)[:]",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "third_permutations",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def third_permutations(iterable):\n    \"\"\"Third algorithm, Johnson Trotter algorithm.\"\"\"\n    i = sorted(list(iterable))  # Required by the algorithm\n    a = attach_direction(i)\n    r = list(iterable)[:]\n    while True:\n        p = r[:]\n        yield p\n        i = scan_largest_movable(a)\n        if i is None:  # No more permutation!",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "test",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def test(list_of_f, iterable, stopearly=False):\n    \"\"\" Test that all functions in list_of_f give the same list of permutation on this iterable.\"\"\"\n    print(\"\\n\\nTesting for the list of functions {} ...\".format([f.__name__ for f in list_of_f]))  # DEBUG\n    result = True\n    print(\"Testing for the iterable {} ...\".format(iterable))  # DEBUG\n    i = iterable\n    allperms = []\n    for f in list_of_f:\n        allperms.append(sorted([list(p) for p in f(iterable)]))\n    for i, pi in enumerate(allperms):",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def main():\n    # list_of_f = [itertools_permutations, first_permutations]\n    # list_of_f = [itertools_permutations, first_permutations, second_permutations]\n    list_of_f = [itertools_permutations, first_permutations, second_permutations, third_permutations]\n    iterable = [1, 2, 3]\n    test(list_of_f, iterable)\n    iterable = [1, 2, 3, 4, 5]\n    test(list_of_f, iterable)\n    iterable = [1, 2, 3, 4, 5, 6]\n    test(list_of_f, iterable)",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def main(url, MY_OUTWARD_TIME_MINI, MY_OUTWARD_TIME_MAXI=\"23:59\"):\n    \"\"\" Go to the page 'url', find the next link to got, then extract the JSON query result, find the wanted train, and display the results.\n    \"\"\"\n    MY_OUTWARD_TIME_MINI = MY_OUTWARD_TIME_MINI.replace('h', ':')\n    MY_OUTWARD_TIME_MAXI = MY_OUTWARD_TIME_MAXI.replace('h', ':')\n    # Create the web browser object\n    b = RB(history=True, allow_redirects=True)\n    # Open the page\n    b.open(url)\n    # Find the next page to go",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "lang_to_text",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def lang_to_text(lang, exception=False):\n    \"\"\" lang_to_text(lang, exception=False) -> str\nConvert a Wikipédia language code (two letters) to a English version of the language.\nExample:\n>>> lang_to_text(\"en\")\n'english'\n>>> lang_to_text(\"fr\")\n'french'\n    \"\"\"\n    if exception:",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "download_json",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def download_json(page=\"JSON\", language=language_default,\n                  template_output=template_output_default,\n                  template_url=template_url_default):\n    \"\"\" download_json(page=\"JSON\", template_output=template_output_default,                  language=language_default, template_url=templateurl_default) -> str\nDownload a JSON file.\n@page: tell which Wikipédia page to lookup to.\n@template_output: template string for the output JSON (.json) file.\n@language: language to use for downloading the JSON.\n@template_url: online page to use a format to download the JSON.\nExample:",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "outfile_to_json",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def outfile_to_json(outfile_name):\n    \"\"\" outfile_to_json(outfile_name) -> dir\n    Try to dump and return the content of the file @outfile.\n    \"\"\"\n    outfile = open(outfile_name)\n    # To convert the content of this file in a Python dictionnary.\n    import json\n    try:\n        json_obj = json.loads(outfile.readline())\n    except ValueError:",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "plot_stats_from_json",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def plot_stats_from_json(json_obj, graphic_name=None, graphic_name_template=\"{title}.{lang}.{ext}\", ext=\"all\", title=None):\n    \"\"\" plot_stats_from_json(json_obj, graphic_name=None, graphic_name_template=\"{title}.{lang}.{ext}\", ext=\"png\") -> None\n    Plot a couple of PNG/SVG/PDF statistics.\n    .. warning:: Beta !\n    \"\"\"\n    assert(ext in [\"png\", \"svg\", \"pdf\", \"all\"])\n    title = title if title else json_obj[\"title\"]\n    lang = json_obj[\"project\"]\n    rank = json_obj[\"rank\"]\n    if rank == \"-1\":",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def main(argv):\n    \"\"\" main(argv) -> None\n    Main function. Use the arguments of the command line.\"\"\"\n    # print(\"argv: \", argv)\n    if \"-h\" in argv or \"--help\" in argv:\n        print(\"wikistats.py --help|-h | page [language_code]\")\n        return 1\n    language = argv[1] if len(argv) > 1 else language_default\n    page = argv[0] if len(argv) > 0 else \"Professeur Xavier\"\n    outfile = download_json(page=page, language=language)",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "def main(args):\n    cmd = args['--server_command']\n    sizex, sizey = [int(i) for i in args['--size'].split(',')]\n    delay = float(args['--delay'])\n    if '--size' not in cmd:\n        cmd += f\" --size={sizex},{sizey}\"\n    smart = args['--smart']\n    if not cmd: return 1\n    pipe = Popen(cmd.split(' '), stdout=PIPE, stdin=PIPE, bufsize=1, close_fds=ON_POSIX, universal_newlines=True)\n    child_stdin, child_stdout = pipe.stdin, pipe.stdout",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "__author__",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "__author__ = \"Lilian Besson\"\n__name_of_app__ = \"Battle Server\"\n__version__ = \"0.1\"\nimport sys\nfrom string import ascii_uppercase\nfrom collections import OrderedDict\nfrom pprint import pprint\nfrom docopt import docopt\nimport numpy as np\n# --- Ships",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "__name_of_app__",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "__name_of_app__ = \"Battle Server\"\n__version__ = \"0.1\"\nimport sys\nfrom string import ascii_uppercase\nfrom collections import OrderedDict\nfrom pprint import pprint\nfrom docopt import docopt\nimport numpy as np\n# --- Ships\nDEFAULT_X = DEFAULT_Y = 5",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "__version__",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "__version__ = \"0.1\"\nimport sys\nfrom string import ascii_uppercase\nfrom collections import OrderedDict\nfrom pprint import pprint\nfrom docopt import docopt\nimport numpy as np\n# --- Ships\nDEFAULT_X = DEFAULT_Y = 5\nships = OrderedDict({",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "DEFAULT_X",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "DEFAULT_X = DEFAULT_Y = 5\nships = OrderedDict({\n    \"Carrier\": 5,\n    \"Battleship\": 4,\n    \"cRuiser\": 3,\n    \"Submarine\": 3,\n    \"Destroyer\": 2,\n})\nmax_length = max(l for l in ships.values())\nsymbol_of_ship = OrderedDict({",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "ships",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "ships = OrderedDict({\n    \"Carrier\": 5,\n    \"Battleship\": 4,\n    \"cRuiser\": 3,\n    \"Submarine\": 3,\n    \"Destroyer\": 2,\n})\nmax_length = max(l for l in ships.values())\nsymbol_of_ship = OrderedDict({\n    name: str.lower(list(set(name).intersection(ascii_uppercase))[0])",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "max_length",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "max_length = max(l for l in ships.values())\nsymbol_of_ship = OrderedDict({\n    name: str.lower(list(set(name).intersection(ascii_uppercase))[0])\n    for name in ships.keys()\n})\nship_of_symbol = OrderedDict({v: k for k, v in symbol_of_ship.items()})\n# --- Documentation\ndocumentation = f\"\"\"{__name_of_app__}.\nUsage:\n    battleserver.py {' '.join([f'[--{name.lower()}=<x,y,dir>]' for name in ships.keys()])} [--random] [--size=<xy>] (--show | --play)",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "symbol_of_ship",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "symbol_of_ship = OrderedDict({\n    name: str.lower(list(set(name).intersection(ascii_uppercase))[0])\n    for name in ships.keys()\n})\nship_of_symbol = OrderedDict({v: k for k, v in symbol_of_ship.items()})\n# --- Documentation\ndocumentation = f\"\"\"{__name_of_app__}.\nUsage:\n    battleserver.py {' '.join([f'[--{name.lower()}=<x,y,dir>]' for name in ships.keys()])} [--random] [--size=<xy>] (--show | --play)\n    battleserver.py (-h | --help)",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "ship_of_symbol",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "ship_of_symbol = OrderedDict({v: k for k, v in symbol_of_ship.items()})\n# --- Documentation\ndocumentation = f\"\"\"{__name_of_app__}.\nUsage:\n    battleserver.py {' '.join([f'[--{name.lower()}=<x,y,dir>]' for name in ships.keys()])} [--random] [--size=<xy>] (--show | --play)\n    battleserver.py (-h | --help)\n    battleserver.py --version\nOptions:\n    -h --help       Show this screen.\n    --version       Show version.",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "documentation",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "documentation = f\"\"\"{__name_of_app__}.\nUsage:\n    battleserver.py {' '.join([f'[--{name.lower()}=<x,y,dir>]' for name in ships.keys()])} [--random] [--size=<xy>] (--show | --play)\n    battleserver.py (-h | --help)\n    battleserver.py --version\nOptions:\n    -h --help       Show this screen.\n    --version       Show version.\n    --show          Print the board.\n    --play          Let you play a \"one player\" game interactively.",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "symbol_of_uint8",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "symbol_of_uint8 = OrderedDict({0: '-'})\nsymbol_of_uint8.update({\n    i+1: symbol_of_ship[name]\n    for i, name in enumerate(ships.keys())\n})\nuint8_of_symbol = OrderedDict({v: k for k, v in symbol_of_uint8.items()})\nclass Board(object):\n    def __init__(self, x=DEFAULT_X, y=DEFAULT_Y):\n        self.x = y\n        self.y = x",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "uint8_of_symbol",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "uint8_of_symbol = OrderedDict({v: k for k, v in symbol_of_uint8.items()})\nclass Board(object):\n    def __init__(self, x=DEFAULT_X, y=DEFAULT_Y):\n        self.x = y\n        self.y = x\n        self.board = np.zeros((x, y), dtype=np.uint8)\n    def __getitem__(self, *args, **kwargs): return self.board.__getitem__(*args, **kwargs)\n    def __setitem__(self, *args, **kwargs): return self.board.__setitem__(*args, **kwargs)\n    def is_empty(self):\n        return np.all(self.board == 0)",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "months",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "months = {\n                'jan'  :  'January',\n                'feb'  :  'February',\n                'mar'  :  'March',\n                'apr'  :  'April',\n                'may'  :  'May',\n                'jun'  :  'June',\n                'jul'  :  'July',\n                'aug'  :  'August',\n                'sep'  :  'September',",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "\tword_start",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "\tword_start = True\n\ts = ''\n\tfor c in text.lower():\n\t\tif word_start:\n\t\t\tc = c.upper()\n\t\tword_start = not c.isalpha()\n\t\ts = s + c\n\treturn s\ndef FindMatchingParenthesis(text):\n\tnesting = 1",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "\ts",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "\ts = ''\n\tfor c in text.lower():\n\t\tif word_start:\n\t\t\tc = c.upper()\n\t\tword_start = not c.isalpha()\n\t\ts = s + c\n\treturn s\ndef FindMatchingParenthesis(text):\n\tnesting = 1\n\tend = 0",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "\t\t\tc",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "\t\t\tc = c.upper()\n\t\tword_start = not c.isalpha()\n\t\ts = s + c\n\treturn s\ndef FindMatchingParenthesis(text):\n\tnesting = 1\n\tend = 0\n\tfor i in range(1, len(text)):\n\t\tif text[i] == '{':\n\t\t\tnesting = nesting + 1",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "\t\tword_start",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "\t\tword_start = not c.isalpha()\n\t\ts = s + c\n\treturn s\ndef FindMatchingParenthesis(text):\n\tnesting = 1\n\tend = 0\n\tfor i in range(1, len(text)):\n\t\tif text[i] == '{':\n\t\t\tnesting = nesting + 1\n\t\telif text[i] == '}':",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "\t\ts",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "\t\ts = s + c\n\treturn s\ndef FindMatchingParenthesis(text):\n\tnesting = 1\n\tend = 0\n\tfor i in range(1, len(text)):\n\t\tif text[i] == '{':\n\t\t\tnesting = nesting + 1\n\t\telif text[i] == '}':\n\t\t\tnesting = nesting - 1",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "\tnesting",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "\tnesting = 1\n\tend = 0\n\tfor i in range(1, len(text)):\n\t\tif text[i] == '{':\n\t\t\tnesting = nesting + 1\n\t\telif text[i] == '}':\n\t\t\tnesting = nesting - 1\n\t\tend = i\n\t\tif nesting == 0:\n\t\t\tbreak",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "\tend",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "\tend = 0\n\tfor i in range(1, len(text)):\n\t\tif text[i] == '{':\n\t\t\tnesting = nesting + 1\n\t\telif text[i] == '}':\n\t\t\tnesting = nesting - 1\n\t\tend = i\n\t\tif nesting == 0:\n\t\t\tbreak\n\tend = end + 1",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "\t\t\tnesting",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "\t\t\tnesting = nesting + 1\n\t\telif text[i] == '}':\n\t\t\tnesting = nesting - 1\n\t\tend = i\n\t\tif nesting == 0:\n\t\t\tbreak\n\tend = end + 1\n\treturn (text[:end], text[end:])\ndef RemoveBraces(text):\n\tif text[0] == '{':",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "\t\t\tnesting",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "\t\t\tnesting = nesting - 1\n\t\tend = i\n\t\tif nesting == 0:\n\t\t\tbreak\n\tend = end + 1\n\treturn (text[:end], text[end:])\ndef RemoveBraces(text):\n\tif text[0] == '{':\n\t\t text = text[1:]\n\tif text[-1] == '}':",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "\t\tend",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "\t\tend = i\n\t\tif nesting == 0:\n\t\t\tbreak\n\tend = end + 1\n\treturn (text[:end], text[end:])\ndef RemoveBraces(text):\n\tif text[0] == '{':\n\t\t text = text[1:]\n\tif text[-1] == '}':\n\t\t text = text[:-1]",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "\tend",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "\tend = end + 1\n\treturn (text[:end], text[end:])\ndef RemoveBraces(text):\n\tif text[0] == '{':\n\t\t text = text[1:]\n\tif text[-1] == '}':\n\t\t text = text[:-1]\n\treturn text\ndef NormalizeAuthor(text):\n\tparts = text.split(',', 1)",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "\tparts",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "\tparts = text.split(',', 1)\n\tif len(parts) >= 2:\n\t\treturn parts[1].strip() + ' ' + parts[0].strip()\n\treturn parts[0].strip()\ndef NormalizeAuthors(text):\n\tauthors = text.split(' and ')\n\treturn ' and '.join([NormalizeAuthor(author) for author in authors])\ndef NormalizePages(text):\n\tparts = text.split('--', 1)\n\tif not '--' in text:",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "\tauthors",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "\tauthors = text.split(' and ')\n\treturn ' and '.join([NormalizeAuthor(author) for author in authors])\ndef NormalizePages(text):\n\tparts = text.split('--', 1)\n\tif not '--' in text:\n\t\tparts = text.split('-', 1)\n\tnormalized = parts[0].strip()\n\tif len(parts) >= 2:\n\t\tnormalized = parts[0].strip() + '--' + parts[1].strip()\n\treturn normalized",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "\tparts",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "\tparts = text.split('--', 1)\n\tif not '--' in text:\n\t\tparts = text.split('-', 1)\n\tnormalized = parts[0].strip()\n\tif len(parts) >= 2:\n\t\tnormalized = parts[0].strip() + '--' + parts[1].strip()\n\treturn normalized\ndef SafeParseInt(text):\n\ttry:\n        \treturn int(text)",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "\t\tparts",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "\t\tparts = text.split('-', 1)\n\tnormalized = parts[0].strip()\n\tif len(parts) >= 2:\n\t\tnormalized = parts[0].strip() + '--' + parts[1].strip()\n\treturn normalized\ndef SafeParseInt(text):\n\ttry:\n        \treturn int(text)\n\texcept ValueError:\n\t\treturn None",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "\tnormalized",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "\tnormalized = parts[0].strip()\n\tif len(parts) >= 2:\n\t\tnormalized = parts[0].strip() + '--' + parts[1].strip()\n\treturn normalized\ndef SafeParseInt(text):\n\ttry:\n        \treturn int(text)\n\texcept ValueError:\n\t\treturn None\ndef NormalizeYear(text):",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "\t\tnormalized",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "\t\tnormalized = parts[0].strip() + '--' + parts[1].strip()\n\treturn normalized\ndef SafeParseInt(text):\n\ttry:\n        \treturn int(text)\n\texcept ValueError:\n\t\treturn None\ndef NormalizeYear(text):\n\tyear = SafeParseInt(text)\n\tif not year:",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "\tyear",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "\tyear = SafeParseInt(text)\n\tif not year:\n\t\treturn text.strip()\n\tif (year >= 10) and (year <= 99):\n\t\treturn str(1900 + year)\n\treturn str(year)\ndef NormalizeMonth(text):\n\tprefix = text[:3].lower()\n\tif prefix in months:\n\t\treturn months[prefix]",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "\tprefix",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "\tprefix = text[:3].lower()\n\tif prefix in months:\n\t\treturn months[prefix]\n\treturn text\n# An entry object\nclass Entry(object):\n\tdef __init__(self):\n\t\tself.entry_type = 'UNKNOWN'\n\t\tself.entry_name = ''\n\t\tself.rows = { }",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "\t\tself.entry_type",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "\t\tself.entry_type = 'UNKNOWN'\n\t\tself.entry_name = ''\n\t\tself.rows = { }\n\tdef ParseFromString(self, text):\n\t\tm = re.match('\\s*@\\s*(\\w+)\\s*({)\\s*', text)\n\t\tif not m:\n\t\t\treturn None\n\t\tself.entry_type = m.group(1)\n\t\tself.entry_type = self.NormalizedEntryType()\n\t\ttext = text[m.end(2):]",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "\t\tself.entry_name",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "\t\tself.entry_name = ''\n\t\tself.rows = { }\n\tdef ParseFromString(self, text):\n\t\tm = re.match('\\s*@\\s*(\\w+)\\s*({)\\s*', text)\n\t\tif not m:\n\t\t\treturn None\n\t\tself.entry_type = m.group(1)\n\t\tself.entry_type = self.NormalizedEntryType()\n\t\ttext = text[m.end(2):]\n\t\ttext, rest = FindMatchingParenthesis(text)",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "\t\tself.rows",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "\t\tself.rows = { }\n\tdef ParseFromString(self, text):\n\t\tm = re.match('\\s*@\\s*(\\w+)\\s*({)\\s*', text)\n\t\tif not m:\n\t\t\treturn None\n\t\tself.entry_type = m.group(1)\n\t\tself.entry_type = self.NormalizedEntryType()\n\t\ttext = text[m.end(2):]\n\t\ttext, rest = FindMatchingParenthesis(text)\n\t\tm = re.match('\\s*([^\\s]+)\\s*,\\s*', text)",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "\t\tm",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "\t\tm = re.match('\\s*@\\s*(\\w+)\\s*({)\\s*', text)\n\t\tif not m:\n\t\t\treturn None\n\t\tself.entry_type = m.group(1)\n\t\tself.entry_type = self.NormalizedEntryType()\n\t\ttext = text[m.end(2):]\n\t\ttext, rest = FindMatchingParenthesis(text)\n\t\tm = re.match('\\s*([^\\s]+)\\s*,\\s*', text)\n\t\tif m:\n\t\t\tself.entry_name = m.group(1)",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "\t\tself.entry_type",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "\t\tself.entry_type = m.group(1)\n\t\tself.entry_type = self.NormalizedEntryType()\n\t\ttext = text[m.end(2):]\n\t\ttext, rest = FindMatchingParenthesis(text)\n\t\tm = re.match('\\s*([^\\s]+)\\s*,\\s*', text)\n\t\tif m:\n\t\t\tself.entry_name = m.group(1)\n\t\t\ttext = text[m.end():]\n\t\twhile text:\n\t\t\ttext = self.ParseRow(text)",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "\t\tself.entry_type",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "\t\tself.entry_type = self.NormalizedEntryType()\n\t\ttext = text[m.end(2):]\n\t\ttext, rest = FindMatchingParenthesis(text)\n\t\tm = re.match('\\s*([^\\s]+)\\s*,\\s*', text)\n\t\tif m:\n\t\t\tself.entry_name = m.group(1)\n\t\t\ttext = text[m.end():]\n\t\twhile text:\n\t\t\ttext = self.ParseRow(text)\n\t\treturn rest",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "\t\ttext",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "\t\ttext = text[m.end(2):]\n\t\ttext, rest = FindMatchingParenthesis(text)\n\t\tm = re.match('\\s*([^\\s]+)\\s*,\\s*', text)\n\t\tif m:\n\t\t\tself.entry_name = m.group(1)\n\t\t\ttext = text[m.end():]\n\t\twhile text:\n\t\t\ttext = self.ParseRow(text)\n\t\treturn rest\n\tdef ParseRow(self, text):",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "\t\tm",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "\t\tm = re.match('\\s*([^\\s]+)\\s*,\\s*', text)\n\t\tif m:\n\t\t\tself.entry_name = m.group(1)\n\t\t\ttext = text[m.end():]\n\t\twhile text:\n\t\t\ttext = self.ParseRow(text)\n\t\treturn rest\n\tdef ParseRow(self, text):\n\t\tm = re.match('\\s*,?\\s*([\\w-]+)\\s*=\\s*', text)\n\t\tif not m:",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "\t\t\tself.entry_name",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "\t\t\tself.entry_name = m.group(1)\n\t\t\ttext = text[m.end():]\n\t\twhile text:\n\t\t\ttext = self.ParseRow(text)\n\t\treturn rest\n\tdef ParseRow(self, text):\n\t\tm = re.match('\\s*,?\\s*([\\w-]+)\\s*=\\s*', text)\n\t\tif not m:\n\t\t\treturn None\n\t\tkey = m.group(1)",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "\t\t\ttext",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "\t\t\ttext = text[m.end():]\n\t\twhile text:\n\t\t\ttext = self.ParseRow(text)\n\t\treturn rest\n\tdef ParseRow(self, text):\n\t\tm = re.match('\\s*,?\\s*([\\w-]+)\\s*=\\s*', text)\n\t\tif not m:\n\t\t\treturn None\n\t\tkey = m.group(1)\n\t\tif not self.entry_type == 'String':",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "\t\t\ttext",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "\t\t\ttext = self.ParseRow(text)\n\t\treturn rest\n\tdef ParseRow(self, text):\n\t\tm = re.match('\\s*,?\\s*([\\w-]+)\\s*=\\s*', text)\n\t\tif not m:\n\t\t\treturn None\n\t\tkey = m.group(1)\n\t\tif not self.entry_type == 'String':\n\t\t\tkey = Capitalize(key)\n\t\ttext = text[m.end():]",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "\t\tm",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "\t\tm = re.match('\\s*,?\\s*([\\w-]+)\\s*=\\s*', text)\n\t\tif not m:\n\t\t\treturn None\n\t\tkey = m.group(1)\n\t\tif not self.entry_type == 'String':\n\t\t\tkey = Capitalize(key)\n\t\ttext = text[m.end():]\n\t\tvalue = ''\n\t\tif text[0] == '{':\n\t\t\tvalue, rest = FindMatchingParenthesis(text)",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "\t\tkey",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "\t\tkey = m.group(1)\n\t\tif not self.entry_type == 'String':\n\t\t\tkey = Capitalize(key)\n\t\ttext = text[m.end():]\n\t\tvalue = ''\n\t\tif text[0] == '{':\n\t\t\tvalue, rest = FindMatchingParenthesis(text)\n\t\t\tvalue = RemoveBraces(value)\n\t\telif text[0] == '\\\"':\n\t\t\tm = re.match('^\"([^\\\"]+)\"\\s*,?\\s*', text)",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "\t\t\tkey",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "\t\t\tkey = Capitalize(key)\n\t\ttext = text[m.end():]\n\t\tvalue = ''\n\t\tif text[0] == '{':\n\t\t\tvalue, rest = FindMatchingParenthesis(text)\n\t\t\tvalue = RemoveBraces(value)\n\t\telif text[0] == '\\\"':\n\t\t\tm = re.match('^\"([^\\\"]+)\"\\s*,?\\s*', text)\n\t\t\tvalue = m.group(1)\n\t\t\trest = text[m.end():]",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "\t\ttext",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "\t\ttext = text[m.end():]\n\t\tvalue = ''\n\t\tif text[0] == '{':\n\t\t\tvalue, rest = FindMatchingParenthesis(text)\n\t\t\tvalue = RemoveBraces(value)\n\t\telif text[0] == '\\\"':\n\t\t\tm = re.match('^\"([^\\\"]+)\"\\s*,?\\s*', text)\n\t\t\tvalue = m.group(1)\n\t\t\trest = text[m.end():]\n\t\telse:",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "\t\tvalue",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "\t\tvalue = ''\n\t\tif text[0] == '{':\n\t\t\tvalue, rest = FindMatchingParenthesis(text)\n\t\t\tvalue = RemoveBraces(value)\n\t\telif text[0] == '\\\"':\n\t\t\tm = re.match('^\"([^\\\"]+)\"\\s*,?\\s*', text)\n\t\t\tvalue = m.group(1)\n\t\t\trest = text[m.end():]\n\t\telse:\n\t\t\tm = re.match('\\s*(\\w+)\\s*,?\\s*', text)",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "\t\t\tvalue",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "\t\t\tvalue = RemoveBraces(value)\n\t\telif text[0] == '\\\"':\n\t\t\tm = re.match('^\"([^\\\"]+)\"\\s*,?\\s*', text)\n\t\t\tvalue = m.group(1)\n\t\t\trest = text[m.end():]\n\t\telse:\n\t\t\tm = re.match('\\s*(\\w+)\\s*,?\\s*', text)\n\t\t\tvalue = m.group(1)\n\t\t\trest = text[m.end():]\n\t\tself.rows[key] = value.strip()",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "\t\t\tm",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "\t\t\tm = re.match('^\"([^\\\"]+)\"\\s*,?\\s*', text)\n\t\t\tvalue = m.group(1)\n\t\t\trest = text[m.end():]\n\t\telse:\n\t\t\tm = re.match('\\s*(\\w+)\\s*,?\\s*', text)\n\t\t\tvalue = m.group(1)\n\t\t\trest = text[m.end():]\n\t\tself.rows[key] = value.strip()\n\t\treturn rest\n\tdef NormalizedEntryType(self):",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "\t\t\tvalue",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "\t\t\tvalue = m.group(1)\n\t\t\trest = text[m.end():]\n\t\telse:\n\t\t\tm = re.match('\\s*(\\w+)\\s*,?\\s*', text)\n\t\t\tvalue = m.group(1)\n\t\t\trest = text[m.end():]\n\t\tself.rows[key] = value.strip()\n\t\treturn rest\n\tdef NormalizedEntryType(self):\n\t\tentry_type = self.entry_type.lower()",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "\t\t\trest",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "\t\t\trest = text[m.end():]\n\t\telse:\n\t\t\tm = re.match('\\s*(\\w+)\\s*,?\\s*', text)\n\t\t\tvalue = m.group(1)\n\t\t\trest = text[m.end():]\n\t\tself.rows[key] = value.strip()\n\t\treturn rest\n\tdef NormalizedEntryType(self):\n\t\tentry_type = self.entry_type.lower()\n\t\tif entry_type in entry_types:",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "\t\t\tm",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "\t\t\tm = re.match('\\s*(\\w+)\\s*,?\\s*', text)\n\t\t\tvalue = m.group(1)\n\t\t\trest = text[m.end():]\n\t\tself.rows[key] = value.strip()\n\t\treturn rest\n\tdef NormalizedEntryType(self):\n\t\tentry_type = self.entry_type.lower()\n\t\tif entry_type in entry_types:\n\t\t\tentry_type = entry_types[entry_type]\n\t\treturn entry_type",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "\t\t\tvalue",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "\t\t\tvalue = m.group(1)\n\t\t\trest = text[m.end():]\n\t\tself.rows[key] = value.strip()\n\t\treturn rest\n\tdef NormalizedEntryType(self):\n\t\tentry_type = self.entry_type.lower()\n\t\tif entry_type in entry_types:\n\t\t\tentry_type = entry_types[entry_type]\n\t\treturn entry_type\n\tdef ToString(self):",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "\t\t\trest",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "\t\t\trest = text[m.end():]\n\t\tself.rows[key] = value.strip()\n\t\treturn rest\n\tdef NormalizedEntryType(self):\n\t\tentry_type = self.entry_type.lower()\n\t\tif entry_type in entry_types:\n\t\t\tentry_type = entry_types[entry_type]\n\t\treturn entry_type\n\tdef ToString(self):\n\t\ts = '@' + self.entry_type + '{'",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "\t\tself.rows[key]",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "\t\tself.rows[key] = value.strip()\n\t\treturn rest\n\tdef NormalizedEntryType(self):\n\t\tentry_type = self.entry_type.lower()\n\t\tif entry_type in entry_types:\n\t\t\tentry_type = entry_types[entry_type]\n\t\treturn entry_type\n\tdef ToString(self):\n\t\ts = '@' + self.entry_type + '{'\n\t\tif self.entry_name:",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "\t\tentry_type",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "\t\tentry_type = self.entry_type.lower()\n\t\tif entry_type in entry_types:\n\t\t\tentry_type = entry_types[entry_type]\n\t\treturn entry_type\n\tdef ToString(self):\n\t\ts = '@' + self.entry_type + '{'\n\t\tif self.entry_name:\n\t\t\ts += self.entry_name + ','\n\t\ts += '\\n'\n\t\tkeys = sorted(self.rows.keys())",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "\t\t\tentry_type",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "\t\t\tentry_type = entry_types[entry_type]\n\t\treturn entry_type\n\tdef ToString(self):\n\t\ts = '@' + self.entry_type + '{'\n\t\tif self.entry_name:\n\t\t\ts += self.entry_name + ','\n\t\ts += '\\n'\n\t\tkeys = sorted(self.rows.keys())\n\t\tfor key in keys:\n\t\t\ts += + 4*' '",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "\t\ts",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "\t\ts = '@' + self.entry_type + '{'\n\t\tif self.entry_name:\n\t\t\ts += self.entry_name + ','\n\t\ts += '\\n'\n\t\tkeys = sorted(self.rows.keys())\n\t\tfor key in keys:\n\t\t\ts += + 4*' '\n\t\t\ts += key\n\t\t\ts += max(0, 13-len(key))*' '\n\t\t\ts += ' = '",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "\t\tkeys",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "\t\tkeys = sorted(self.rows.keys())\n\t\tfor key in keys:\n\t\t\ts += + 4*' '\n\t\t\ts += key\n\t\t\ts += max(0, 13-len(key))*' '\n\t\t\ts += ' = '\n\t\t\tvalue = self.rows[key]\n\t\t\tif (not self.entry_type == 'String'):\n\t\t\t\tif (key in ['Author', 'Editor']):\n\t\t\t\t\tvalue = NormalizeAuthors(value)",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "\t\t\tvalue",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "\t\t\tvalue = self.rows[key]\n\t\t\tif (not self.entry_type == 'String'):\n\t\t\t\tif (key in ['Author', 'Editor']):\n\t\t\t\t\tvalue = NormalizeAuthors(value)\n\t\t\t\tif (key == 'Pages'):\n\t\t\t\t\tvalue = NormalizePages(value)\n\t\t\t\tif (key == 'Year'):\n\t\t\t\t\tvalue = NormalizeYear(value)\n\t\t\t\tif (key == 'Month'):\n\t\t\t\t\tvalue = NormalizeMonth(value)",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "\t\t\t\t\tvalue",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "\t\t\t\t\tvalue = NormalizeAuthors(value)\n\t\t\t\tif (key == 'Pages'):\n\t\t\t\t\tvalue = NormalizePages(value)\n\t\t\t\tif (key == 'Year'):\n\t\t\t\t\tvalue = NormalizeYear(value)\n\t\t\t\tif (key == 'Month'):\n\t\t\t\t\tvalue = NormalizeMonth(value)\n\t\t\ts += '{' + Format(value) + '}'\n\t\t\tif self.entry_type != 'String':\n\t\t\t\ts += ','",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "\t\t\t\t\tvalue",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "\t\t\t\t\tvalue = NormalizePages(value)\n\t\t\t\tif (key == 'Year'):\n\t\t\t\t\tvalue = NormalizeYear(value)\n\t\t\t\tif (key == 'Month'):\n\t\t\t\t\tvalue = NormalizeMonth(value)\n\t\t\ts += '{' + Format(value) + '}'\n\t\t\tif self.entry_type != 'String':\n\t\t\t\ts += ','\n\t\t\ts += '\\n'\n\t\treturn s + '}\\n'",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "\t\t\t\t\tvalue",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "\t\t\t\t\tvalue = NormalizeYear(value)\n\t\t\t\tif (key == 'Month'):\n\t\t\t\t\tvalue = NormalizeMonth(value)\n\t\t\ts += '{' + Format(value) + '}'\n\t\t\tif self.entry_type != 'String':\n\t\t\t\ts += ','\n\t\t\ts += '\\n'\n\t\treturn s + '}\\n'\n\tdef SortKey(self):\n\t\tpriorities = {",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "\t\t\t\t\tvalue",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "\t\t\t\t\tvalue = NormalizeMonth(value)\n\t\t\ts += '{' + Format(value) + '}'\n\t\t\tif self.entry_type != 'String':\n\t\t\t\ts += ','\n\t\t\ts += '\\n'\n\t\treturn s + '}\\n'\n\tdef SortKey(self):\n\t\tpriorities = {\n               \t\t'String'        : -99,\n               \t\t'Proceedings'   : 99,",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "\t\tpriorities",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "\t\tpriorities = {\n               \t\t'String'        : -99,\n               \t\t'Proceedings'   : 99,\n               \t\t'Book'          : 99,\n\t      \t}\n\t\tif self.entry_type in priorities:\n\t\t\treturn priorities[self.entry_type]\n\t\treturn 0\ndef ParseEntries(text):\n\tentries = []",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "\tentries",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "\tentries = []\n\twhile True:\n\t\te = Entry()\n\t\ttext = e.ParseFromString(text)\n\t\tif not text:\n\t\t\tbreak\n\t\tentries.append(e)\n\treturn entries\ndef SortEntries(entries):\n\tentries.sort(key=lambda e: e.entry_name)",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "\t\te",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "\t\te = Entry()\n\t\ttext = e.ParseFromString(text)\n\t\tif not text:\n\t\t\tbreak\n\t\tentries.append(e)\n\treturn entries\ndef SortEntries(entries):\n\tentries.sort(key=lambda e: e.entry_name)\n\tentries.sort(key=lambda e: e.entry_type)\n\tentries.sort(key=lambda e: e.SortKey())",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "\t\ttext",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "\t\ttext = e.ParseFromString(text)\n\t\tif not text:\n\t\t\tbreak\n\t\tentries.append(e)\n\treturn entries\ndef SortEntries(entries):\n\tentries.sort(key=lambda e: e.entry_name)\n\tentries.sort(key=lambda e: e.entry_type)\n\tentries.sort(key=lambda e: e.SortKey())\n\treturn entries",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "\tlines",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "\tlines = []\n\twith open(sys.argv[1], 'r') as f:\n\t\tfor line in f:\n\t\t\tif line.strip().startswith('%'):\n\t\t\t\tprint(line.strip())\n\t\t\telse:\n\t\t\t\tlines.append(line)\n\ttext = '\\n'.join(lines)\n\treturn text\n# main",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "\ttext",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "\ttext = '\\n'.join(lines)\n\treturn text\n# main\ndef main():\n\ttext = ReadFile()\n\tentries = ParseEntries(text)\n\tentries = SortEntries(entries)\n\tfor entry in entries:\n\t\tprint(entry.ToString())\nif __name__ == '__main__':",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "\ttext",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "\ttext = ReadFile()\n\tentries = ParseEntries(text)\n\tentries = SortEntries(entries)\n\tfor entry in entries:\n\t\tprint(entry.ToString())\nif __name__ == '__main__':\n    main()\n#!/usr/bin/env python\n# -*- coding: utf-8; mode: python -*-\n\"\"\"",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "\tentries",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "\tentries = ParseEntries(text)\n\tentries = SortEntries(entries)\n\tfor entry in entries:\n\t\tprint(entry.ToString())\nif __name__ == '__main__':\n    main()\n#!/usr/bin/env python\n# -*- coding: utf-8; mode: python -*-\n\"\"\"\nA minimalist script to print the (ordered) list of Bitbucket repositories for a user :",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "\tentries",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "\tentries = SortEntries(entries)\n\tfor entry in entries:\n\t\tprint(entry.ToString())\nif __name__ == '__main__':\n    main()\n#!/usr/bin/env python\n# -*- coding: utf-8; mode: python -*-\n\"\"\"\nA minimalist script to print the (ordered) list of Bitbucket repositories for a user :\n$ bitbucket_repolist.py pseudo",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "pseudo",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "pseudo = argv[1] if len(argv) > 1 else \"lbesson\"\njsonfile = \"bitbucket_{}.json\".format(pseudo)\nsystem(\"curl --silent https://bitbucket.org/api/1.0/users/\" + pseudo + \" > \" + jsonfile)\nb = load(open(jsonfile, 'r'))\n# for i in b['repositories']:\n#     print(i['slug'])\nlist_of_repo = sorted([i['slug'] for i in b['repositories']])\nfor i in list_of_repo:\n    print(i)\n#! /usr/bin/env python2",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "jsonfile",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "jsonfile = \"bitbucket_{}.json\".format(pseudo)\nsystem(\"curl --silent https://bitbucket.org/api/1.0/users/\" + pseudo + \" > \" + jsonfile)\nb = load(open(jsonfile, 'r'))\n# for i in b['repositories']:\n#     print(i['slug'])\nlist_of_repo = sorted([i['slug'] for i in b['repositories']])\nfor i in list_of_repo:\n    print(i)\n#! /usr/bin/env python2\n# -*- coding: utf-8 -*-",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "b",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "b = load(open(jsonfile, 'r'))\n# for i in b['repositories']:\n#     print(i['slug'])\nlist_of_repo = sorted([i['slug'] for i in b['repositories']])\nfor i in list_of_repo:\n    print(i)\n#! /usr/bin/env python2\n# -*- coding: utf-8 -*-\n\"\"\" Petit script Python pour afficher des graphiques de ses comptes et calculer des intérêts.\n- *Date:* 03 January 2019.",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "list_of_repo",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "list_of_repo = sorted([i['slug'] for i in b['repositories']])\nfor i in list_of_repo:\n    print(i)\n#! /usr/bin/env python2\n# -*- coding: utf-8 -*-\n\"\"\" Petit script Python pour afficher des graphiques de ses comptes et calculer des intérêts.\n- *Date:* 03 January 2019.\n- *Author:* Lilian Besson, © 2016-18.\n- *Licence:* MIT Licence (http://lbesson.mit-license.org).\n\"\"\"",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "taux2020",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "taux2020 = {'CCP' : 0.00,\n            'LA'  : 0.73,\n            'LEP' : 1.25,  # XXX I don't own a LEP anymore\n            'LJ'  : 1.65,  # XXX I don't own a LJ anymore\n            'PEA' : 0.00,  # XXX I don't own a PEA anymore\n            'PEL' : 2.36,\n            'CCP2': 0.00,\n            }\npath_comptes = \"/home/lilian/comptes.pickle\"\nprint(\"<yellow>Calcul des intérêts, <white>script <u>calc_interets.py<U>:\")",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "path_comptes",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "path_comptes = \"/home/lilian/comptes.pickle\"\nprint(\"<yellow>Calcul des intérêts, <white>script <u>calc_interets.py<U>:\")\ntry:\n    print(\"Lecture des comptes via le fichier <u>'{}'<U>...\".format(path_comptes))\n    with open(path_comptes, 'r') as f:\n        comptes = pickle.load(f)\nexcept:\n    print(\"Echec de la lecture. Le script va utiliser des valeurs par defaut : 2000.00 dans chaque compte (pour tester).\")\n    comptes = {'CCP': 2000.00,\n               'LA': 2000.00,",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "type_comptes",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "type_comptes = list(comptes.keys())\ndef maximizeWindow():\n    \"\"\" Experimental function to try to maximize a plot.\n    - Tries as well as possible to maximize the figure.\n    - Cf. https://stackoverflow.com/q/12439588/\n    \"\"\"\n    try:\n        figManager = plt.get_current_fig_manager()\n        figManager.window.showMaximized()\n    except:",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "days",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\nadjustment = [0, 1, -1, 0, 0, 1, 1, 2, 3, 3, 4, 4]\ndef day_offset(y, m, d):\n    # Add 1 if y > 2000 to account for the fact that 2000 was a leap year.\n    year_offset = ( y - 2000 ) + ( ( y - 2000 ) // 4 ) + ( y > 2000 )\n    # Account for wrongly computed leap years\n    year_offset -= ( y - 2000 ) // 100\n    # Add back 1 year if the target year is a leap year but the target day\n    # is after the 29th (in other words, the leap day hasn't happened yet).\n    if y % 100:",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "adjustment",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "adjustment = [0, 1, -1, 0, 0, 1, 1, 2, 3, 3, 4, 4]\ndef day_offset(y, m, d):\n    # Add 1 if y > 2000 to account for the fact that 2000 was a leap year.\n    year_offset = ( y - 2000 ) + ( ( y - 2000 ) // 4 ) + ( y > 2000 )\n    # Account for wrongly computed leap years\n    year_offset -= ( y - 2000 ) // 100\n    # Add back 1 year if the target year is a leap year but the target day\n    # is after the 29th (in other words, the leap day hasn't happened yet).\n    if y % 100:\n        year_offset += ( y < 2000 ) and not( y % 4 ) and ( m > 2 )",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "length_checksum",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "length_checksum = 2\ndef l_to_c(l):\n    try:\n        return str(int(l))\n    except ValueError:\n        return str(10 + ord(l.upper()) - ord('A'))\ndef check_nirpp(nirpp, length_checksum=length_checksum):\n    print(\"\\nChecking the NIRPP number '%s' ...\" % nirpp)\n    ib = nirpp.replace(' ', '')\n    checksum = int(ib[-length_checksum:])",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "information_nirpp",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "information_nirpp = {\n    (0, 1): {\n        \"meaning\": \"sexe\",\n        \"mapping\": {\n            \"1\": \"homme\",\n            \"2\": \"femme\",\n            \"3\": \"personne étrangère de sexe masculin en cours d'immatriculation en France\",\n            \"4\": \"personne étrangère de sexe féminin en cours d'immatriculation en France\"\n        }\n    },",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "url_finder",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "url_finder = re.compile(r'http[^\"]*')\nquery_finder = re.compile(r\"data.query = JSON.parse\\('\\{[^\\n]*\")\nsearchResponse_finder = re.compile(r\"data.searchResponse = JSON.parse\\('\\{[^\\n]*\")\n# url0 = \"http://www.voyages-sncf.com//vsc/train-ticket/?_LANG=fr&site_country=FR&site_language=fr&ORIGIN_CITY=Toulon&DESTINATION_CITY=Paris%20%28Toutes%20gares%20intramuros%29&OUTWARD_DATE=31/05/2016&OUTWARD_TIME=15&INWARD_DATE=&INWARD_TIME=7&COMFORT_CLASS=2&DISTRIBUTED_COUNTRY=FR&NB_TYPO_ADULT=1&bookingChoice=train&PASSENGER_1=YOUNG&PASSENGER_1_CARD=MI1ST&PASSENGER_1_FID_PROG=&PASSENGER_1FID_NUM_BEGIN=&CODE_PROMO_1=&action:searchTravel=Rechercher\"\nURL_TEMPLATE = \"https://www.voyages-sncf.com/vsc/train-ticket/?_LANG=fr&site_country=FR&site_language=fr&ORIGIN_CITY={ORIGIN_CITY}&DESTINATION_CITY={DESTINATION_CITY}&OUTWARD_DATE={DATE}&OUTWARD_TIME={OUTWARD_TIME}&INWARD_DATE=&INWARD_TIME=7&COMFORT_CLASS=2&DISTRIBUTED_COUNTRY=FR&NB_TYPO_ADULT=1&bookingChoice=train&PASSENGER_1=YOUNG&PASSENGER_1_CARD=MI1ST&PASSENGER_1_FID_PROG=&PASSENGER_1FID_NUM_BEGIN=&CODE_PROMO_1=&action:searchTravel=Rechercher\"\n# url1 = 'http://www.voyages-sncf.com/vsc/proposals/findProposals?hid='\ndef main(url, MY_OUTWARD_TIME):\n    \"\"\" Go to the page 'url', find the next link to got, then extract the JSON query result, find the wanted train, and display the results.\n    \"\"\"\n    MY_OUTWARD_TIME = MY_OUTWARD_TIME.replace('h', ':')",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "query_finder",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "query_finder = re.compile(r\"data.query = JSON.parse\\('\\{[^\\n]*\")\nsearchResponse_finder = re.compile(r\"data.searchResponse = JSON.parse\\('\\{[^\\n]*\")\n# url0 = \"http://www.voyages-sncf.com//vsc/train-ticket/?_LANG=fr&site_country=FR&site_language=fr&ORIGIN_CITY=Toulon&DESTINATION_CITY=Paris%20%28Toutes%20gares%20intramuros%29&OUTWARD_DATE=31/05/2016&OUTWARD_TIME=15&INWARD_DATE=&INWARD_TIME=7&COMFORT_CLASS=2&DISTRIBUTED_COUNTRY=FR&NB_TYPO_ADULT=1&bookingChoice=train&PASSENGER_1=YOUNG&PASSENGER_1_CARD=MI1ST&PASSENGER_1_FID_PROG=&PASSENGER_1FID_NUM_BEGIN=&CODE_PROMO_1=&action:searchTravel=Rechercher\"\nURL_TEMPLATE = \"https://www.voyages-sncf.com/vsc/train-ticket/?_LANG=fr&site_country=FR&site_language=fr&ORIGIN_CITY={ORIGIN_CITY}&DESTINATION_CITY={DESTINATION_CITY}&OUTWARD_DATE={DATE}&OUTWARD_TIME={OUTWARD_TIME}&INWARD_DATE=&INWARD_TIME=7&COMFORT_CLASS=2&DISTRIBUTED_COUNTRY=FR&NB_TYPO_ADULT=1&bookingChoice=train&PASSENGER_1=YOUNG&PASSENGER_1_CARD=MI1ST&PASSENGER_1_FID_PROG=&PASSENGER_1FID_NUM_BEGIN=&CODE_PROMO_1=&action:searchTravel=Rechercher\"\n# url1 = 'http://www.voyages-sncf.com/vsc/proposals/findProposals?hid='\ndef main(url, MY_OUTWARD_TIME):\n    \"\"\" Go to the page 'url', find the next link to got, then extract the JSON query result, find the wanted train, and display the results.\n    \"\"\"\n    MY_OUTWARD_TIME = MY_OUTWARD_TIME.replace('h', ':')\n    # Create the web browser object",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "searchResponse_finder",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "searchResponse_finder = re.compile(r\"data.searchResponse = JSON.parse\\('\\{[^\\n]*\")\n# url0 = \"http://www.voyages-sncf.com//vsc/train-ticket/?_LANG=fr&site_country=FR&site_language=fr&ORIGIN_CITY=Toulon&DESTINATION_CITY=Paris%20%28Toutes%20gares%20intramuros%29&OUTWARD_DATE=31/05/2016&OUTWARD_TIME=15&INWARD_DATE=&INWARD_TIME=7&COMFORT_CLASS=2&DISTRIBUTED_COUNTRY=FR&NB_TYPO_ADULT=1&bookingChoice=train&PASSENGER_1=YOUNG&PASSENGER_1_CARD=MI1ST&PASSENGER_1_FID_PROG=&PASSENGER_1FID_NUM_BEGIN=&CODE_PROMO_1=&action:searchTravel=Rechercher\"\nURL_TEMPLATE = \"https://www.voyages-sncf.com/vsc/train-ticket/?_LANG=fr&site_country=FR&site_language=fr&ORIGIN_CITY={ORIGIN_CITY}&DESTINATION_CITY={DESTINATION_CITY}&OUTWARD_DATE={DATE}&OUTWARD_TIME={OUTWARD_TIME}&INWARD_DATE=&INWARD_TIME=7&COMFORT_CLASS=2&DISTRIBUTED_COUNTRY=FR&NB_TYPO_ADULT=1&bookingChoice=train&PASSENGER_1=YOUNG&PASSENGER_1_CARD=MI1ST&PASSENGER_1_FID_PROG=&PASSENGER_1FID_NUM_BEGIN=&CODE_PROMO_1=&action:searchTravel=Rechercher\"\n# url1 = 'http://www.voyages-sncf.com/vsc/proposals/findProposals?hid='\ndef main(url, MY_OUTWARD_TIME):\n    \"\"\" Go to the page 'url', find the next link to got, then extract the JSON query result, find the wanted train, and display the results.\n    \"\"\"\n    MY_OUTWARD_TIME = MY_OUTWARD_TIME.replace('h', ':')\n    # Create the web browser object\n    b = RB(history=True, allow_redirects=True)",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "URL_TEMPLATE",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "URL_TEMPLATE = \"https://www.voyages-sncf.com/vsc/train-ticket/?_LANG=fr&site_country=FR&site_language=fr&ORIGIN_CITY={ORIGIN_CITY}&DESTINATION_CITY={DESTINATION_CITY}&OUTWARD_DATE={DATE}&OUTWARD_TIME={OUTWARD_TIME}&INWARD_DATE=&INWARD_TIME=7&COMFORT_CLASS=2&DISTRIBUTED_COUNTRY=FR&NB_TYPO_ADULT=1&bookingChoice=train&PASSENGER_1=YOUNG&PASSENGER_1_CARD=MI1ST&PASSENGER_1_FID_PROG=&PASSENGER_1FID_NUM_BEGIN=&CODE_PROMO_1=&action:searchTravel=Rechercher\"\n# url1 = 'http://www.voyages-sncf.com/vsc/proposals/findProposals?hid='\ndef main(url, MY_OUTWARD_TIME):\n    \"\"\" Go to the page 'url', find the next link to got, then extract the JSON query result, find the wanted train, and display the results.\n    \"\"\"\n    MY_OUTWARD_TIME = MY_OUTWARD_TIME.replace('h', ':')\n    # Create the web browser object\n    b = RB(history=True, allow_redirects=True)\n    # Open the page\n    b.open(url)",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "HTML_TEMPLATE",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "HTML_TEMPLATE = \"\"\"\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">\n<html><head><title>Print</title>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\">\n</head><body><h1>Print File</h1>\n<form action=\"send\" method=\"POST\" enctype=\"multipart/form-data\">\nFile name: <input name=\"file\" type=\"file\"><br>\nUser name: <input name=\"user\"><br>\n<input name=\"submit\" type=\"submit\">\n</form>",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "FROM_LANGUAGE",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "FROM_LANGUAGE = 'EN'\nTO_LANGUAGE = 'FR'\ndef main(argv, to_language=TO_LANGUAGE, from_language=FROM_LANGUAGE):\n    \"\"\" Main function. Use the arguments of the command line (sys.argv). \"\"\"\n    # TODO use docopt to handle the command line arguments! Cf. http://docopt.org/\n    # TODO can docopt handle a cli documentation with ansicolortags tags in it? Cf. http://ansicolortags.rtfd.io/\n    # Manual handing of the command line arguments\n    if \"-h\" in argv or \"--help\" in argv:\n        printc(\"\"\"\n<green>deepl.py<white> --help|-h | -f file | [--from LANG] [--to LANG] text",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "TO_LANGUAGE",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "TO_LANGUAGE = 'FR'\ndef main(argv, to_language=TO_LANGUAGE, from_language=FROM_LANGUAGE):\n    \"\"\" Main function. Use the arguments of the command line (sys.argv). \"\"\"\n    # TODO use docopt to handle the command line arguments! Cf. http://docopt.org/\n    # TODO can docopt handle a cli documentation with ansicolortags tags in it? Cf. http://ansicolortags.rtfd.io/\n    # Manual handing of the command line arguments\n    if \"-h\" in argv or \"--help\" in argv:\n        printc(\"\"\"\n<green>deepl.py<white> --help|-h | -f file | [--from LANG] [--to LANG] text\nA simple Python script translate a text from a language to another language, using DeepL translator (https://www.deepl.com/translator).",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "nqueens",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "nqueens = int(sys.argv[1]) if len(sys.argv) > 1 else None\nq = delBoard(nqueens)\nif __name__ == \"__main__\":\n    print(\"Interrupt me to solve the {} queens problem!\".format(nqueens))\n    while True:\n        pass\n#! /usr/bin/env python\n# -*- coding: utf-8 -*-\n\"\"\"\nA small script to dump all Maths Exercice LaTeX sources from some website.",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "q",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "q = delBoard(nqueens)\nif __name__ == \"__main__\":\n    print(\"Interrupt me to solve the {} queens problem!\".format(nqueens))\n    while True:\n        pass\n#! /usr/bin/env python\n# -*- coding: utf-8 -*-\n\"\"\"\nA small script to dump all Maths Exercice LaTeX sources from some website.\nEavily dependant on the website being used.",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "numexo",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "numexo = int(sys.argv[1]) if len(sys.argv) > 1 else 1485\nchapter = str(sys.argv[2]) if len(sys.argv) > 2 else \"\"\nurlToGo = \"http://mp.cpgedupuydelome.fr/mesexos.php?idTeX=%i\" % numexo\nprint(\"Numéro <magenta>%i<reset>. On va vers <u>\\\"%s\\\"<U><white>\" % (numexo, urlToGo))\n# On récupère la page (la partie la plus lente du coup)\nimport urllib2\nresponse = urllib2.urlopen(urlToGo)\nhtml = response.read()\n# BeautifulSoup v3 (et pas v4, attention !)\nfrom BeautifulSoup import BeautifulSoup",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "chapter",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "chapter = str(sys.argv[2]) if len(sys.argv) > 2 else \"\"\nurlToGo = \"http://mp.cpgedupuydelome.fr/mesexos.php?idTeX=%i\" % numexo\nprint(\"Numéro <magenta>%i<reset>. On va vers <u>\\\"%s\\\"<U><white>\" % (numexo, urlToGo))\n# On récupère la page (la partie la plus lente du coup)\nimport urllib2\nresponse = urllib2.urlopen(urlToGo)\nhtml = response.read()\n# BeautifulSoup v3 (et pas v4, attention !)\nfrom BeautifulSoup import BeautifulSoup\n# On l'analyse",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "urlToGo",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "urlToGo = \"http://mp.cpgedupuydelome.fr/mesexos.php?idTeX=%i\" % numexo\nprint(\"Numéro <magenta>%i<reset>. On va vers <u>\\\"%s\\\"<U><white>\" % (numexo, urlToGo))\n# On récupère la page (la partie la plus lente du coup)\nimport urllib2\nresponse = urllib2.urlopen(urlToGo)\nhtml = response.read()\n# BeautifulSoup v3 (et pas v4, attention !)\nfrom BeautifulSoup import BeautifulSoup\n# On l'analyse\nparsed_html = BeautifulSoup(html, fromEncoding='utf-8')",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "response",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "response = urllib2.urlopen(urlToGo)\nhtml = response.read()\n# BeautifulSoup v3 (et pas v4, attention !)\nfrom BeautifulSoup import BeautifulSoup\n# On l'analyse\nparsed_html = BeautifulSoup(html, fromEncoding='utf-8')\nprint(\"<black>Encodage original : %s<white>\\n\\n\" % parsed_html.originalEncoding)\n# On cherche la section <section id=\"contenu\">..</section>\ncontenu = parsed_html.body.find('section', attrs={'id': 'contenu'})\n# Et on prend le contenu de la première <textarea> !",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "html",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "html = response.read()\n# BeautifulSoup v3 (et pas v4, attention !)\nfrom BeautifulSoup import BeautifulSoup\n# On l'analyse\nparsed_html = BeautifulSoup(html, fromEncoding='utf-8')\nprint(\"<black>Encodage original : %s<white>\\n\\n\" % parsed_html.originalEncoding)\n# On cherche la section <section id=\"contenu\">..</section>\ncontenu = parsed_html.body.find('section', attrs={'id': 'contenu'})\n# Et on prend le contenu de la première <textarea> !\ncodeTeX = contenu.findAll('textarea', limit=1)[0].renderContents()",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "parsed_html",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "parsed_html = BeautifulSoup(html, fromEncoding='utf-8')\nprint(\"<black>Encodage original : %s<white>\\n\\n\" % parsed_html.originalEncoding)\n# On cherche la section <section id=\"contenu\">..</section>\ncontenu = parsed_html.body.find('section', attrs={'id': 'contenu'})\n# Et on prend le contenu de la première <textarea> !\ncodeTeX = contenu.findAll('textarea', limit=1)[0].renderContents()\n# Quelques corrections, parce que BeautifulSoup échappe certains trucs\ncodeTeX = codeTeX.replace(\"&amp;\", \"&\").replace(\"&lt;\", \"<\").replace(\"&gt;\", \">\").replace(\"&le;\", \"<=\").replace(\"&ge;\", \">=\")\n# Et d'autres erreurs fréquentes.\ncodeTeX = codeTeX.replace(\"^ - \", \"^{-}\")",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "contenu",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "contenu = parsed_html.body.find('section', attrs={'id': 'contenu'})\n# Et on prend le contenu de la première <textarea> !\ncodeTeX = contenu.findAll('textarea', limit=1)[0].renderContents()\n# Quelques corrections, parce que BeautifulSoup échappe certains trucs\ncodeTeX = codeTeX.replace(\"&amp;\", \"&\").replace(\"&lt;\", \"<\").replace(\"&gt;\", \">\").replace(\"&le;\", \"<=\").replace(\"&ge;\", \">=\")\n# Et d'autres erreurs fréquentes.\ncodeTeX = codeTeX.replace(\"^ - \", \"^{-}\")\n# Ici on pourrait utiliser un outil de traduction bien conçu pour produire codeTeX_en en anglais\n# FIXME !\n# Là on galère pour afficher en UTF-8. Zut !",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "codeTeX",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "codeTeX = contenu.findAll('textarea', limit=1)[0].renderContents()\n# Quelques corrections, parce que BeautifulSoup échappe certains trucs\ncodeTeX = codeTeX.replace(\"&amp;\", \"&\").replace(\"&lt;\", \"<\").replace(\"&gt;\", \">\").replace(\"&le;\", \"<=\").replace(\"&ge;\", \">=\")\n# Et d'autres erreurs fréquentes.\ncodeTeX = codeTeX.replace(\"^ - \", \"^{-}\")\n# Ici on pourrait utiliser un outil de traduction bien conçu pour produire codeTeX_en en anglais\n# FIXME !\n# Là on galère pour afficher en UTF-8. Zut !\n# print( unicode( codeTeX ) )\nprint(\"<blue><u>Code LaTeX de cet exercice:<U><white>\\n\\n%s\" % codeTeX)",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "codeTeX",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "codeTeX = codeTeX.replace(\"&amp;\", \"&\").replace(\"&lt;\", \"<\").replace(\"&gt;\", \">\").replace(\"&le;\", \"<=\").replace(\"&ge;\", \">=\")\n# Et d'autres erreurs fréquentes.\ncodeTeX = codeTeX.replace(\"^ - \", \"^{-}\")\n# Ici on pourrait utiliser un outil de traduction bien conçu pour produire codeTeX_en en anglais\n# FIXME !\n# Là on galère pour afficher en UTF-8. Zut !\n# print( unicode( codeTeX ) )\nprint(\"<blue><u>Code LaTeX de cet exercice:<U><white>\\n\\n%s\" % codeTeX)\n# On créé un fichier TeX\nname = \"ex_%i.fr.tex\" % numexo",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "codeTeX",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "codeTeX = codeTeX.replace(\"^ - \", \"^{-}\")\n# Ici on pourrait utiliser un outil de traduction bien conçu pour produire codeTeX_en en anglais\n# FIXME !\n# Là on galère pour afficher en UTF-8. Zut !\n# print( unicode( codeTeX ) )\nprint(\"<blue><u>Code LaTeX de cet exercice:<U><white>\\n\\n%s\" % codeTeX)\n# On créé un fichier TeX\nname = \"ex_%i.fr.tex\" % numexo\nout = open(name, mode=\"w\")\n# On va écrire le code de l'exercice dedans",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "name",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "name = \"ex_%i.fr.tex\" % numexo\nout = open(name, mode=\"w\")\n# On va écrire le code de l'exercice dedans\nprint(\"<green>On écrit dans %s !<white>\" % out)\n# Ajout de la possibilité de préciser le chapitre courant en train d'être construit.\nif chapter:\n    chapter = chapter.replace(\"_\", \" \").replace(\"/\", \"\")\n    print(\"<magenta>Pour le chapitre '%s' :<white>\" % chapter)\n    out.write(\"%%%% -*- mode: latex; coding: utf-8 -*-\\n%%%% Chapter : %s.\\n%%%% Start of LaTeX code, for exercise #%i (from '%s'), in French (file '%s').\\n\\n\" % (chapter, numexo, urlToGo, name))\nelse:",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "out",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "out = open(name, mode=\"w\")\n# On va écrire le code de l'exercice dedans\nprint(\"<green>On écrit dans %s !<white>\" % out)\n# Ajout de la possibilité de préciser le chapitre courant en train d'être construit.\nif chapter:\n    chapter = chapter.replace(\"_\", \" \").replace(\"/\", \"\")\n    print(\"<magenta>Pour le chapitre '%s' :<white>\" % chapter)\n    out.write(\"%%%% -*- mode: latex; coding: utf-8 -*-\\n%%%% Chapter : %s.\\n%%%% Start of LaTeX code, for exercise #%i (from '%s'), in French (file '%s').\\n\\n\" % (chapter, numexo, urlToGo, name))\nelse:\n    out.write(\"%%%% -*- mode: latex; coding: utf-8 -*-\\n%%%% Start of LaTeX code, for exercise #%i (from '%s'), in French (file '%s').\\n\\n\" % (numexo, urlToGo, name))",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "USE_SVG",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "USE_SVG = False\ndef emojize(s, use_svg=USE_SVG):\n    \"\"\"Call markdown.markdown() on s.\"\"\"\n    emoji_generator = pymdownx.emoji.to_svg if use_svg else pymdownx.emoji.to_png\n    extension_configs = {\n        'pymdownx.emoji': {\n            'emoji_generator': emoji_generator\n        }\n    }\n    res = markdown(s,",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "repas",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "repas = 15.25\nhotel = 150\ntaxeSejour = 0  # 1.65\nmetro = 1.5\ndef main(nbJour=3, nbRepas=None, trains=None, nbNuit=None, totalHotel=None):\n    \"\"\" Calcule et affiche les détails des frais de mission.\n    Par exemple :\n    >>> trains = {\n           \"Rennes > Lille\": (44.00, \"14/12/16\"),\n           \"Lille > Paris \": (25.50, \"16/12/16\"),",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "hotel",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "hotel = 150\ntaxeSejour = 0  # 1.65\nmetro = 1.5\ndef main(nbJour=3, nbRepas=None, trains=None, nbNuit=None, totalHotel=None):\n    \"\"\" Calcule et affiche les détails des frais de mission.\n    Par exemple :\n    >>> trains = {\n           \"Rennes > Lille\": (44.00, \"14/12/16\"),\n           \"Lille > Paris \": (25.50, \"16/12/16\"),\n           \"Paris > Rennes\": (35.00, \"03/01/17\"),",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "taxeSejour",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "taxeSejour = 0  # 1.65\nmetro = 1.5\ndef main(nbJour=3, nbRepas=None, trains=None, nbNuit=None, totalHotel=None):\n    \"\"\" Calcule et affiche les détails des frais de mission.\n    Par exemple :\n    >>> trains = {\n           \"Rennes > Lille\": (44.00, \"14/12/16\"),\n           \"Lille > Paris \": (25.50, \"16/12/16\"),\n           \"Paris > Rennes\": (35.00, \"03/01/17\"),\n       }",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "metro",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "metro = 1.5\ndef main(nbJour=3, nbRepas=None, trains=None, nbNuit=None, totalHotel=None):\n    \"\"\" Calcule et affiche les détails des frais de mission.\n    Par exemple :\n    >>> trains = {\n           \"Rennes > Lille\": (44.00, \"14/12/16\"),\n           \"Lille > Paris \": (25.50, \"16/12/16\"),\n           \"Paris > Rennes\": (35.00, \"03/01/17\"),\n       }\n    >>> main(nbJour=3, trains=trains)",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "today",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "today = time.strftime(\"%H:%M:%S %Y-%m-%d\")\ntry:\n    from os.path import expanduser\nexcept ImportError:\n    print(\"Warning, os.path.expanduser is not available, trying to use os.getenv('USER') = {} ...\".format(os.getenv(\"USER\")))\n    def expanduser(s):\n        \"\"\" Try to simulate the os.path.expanduser function. \"\"\"\n        return '/home/' + os.getenv(\"USER\") + '/' + s\nif sys.version_info < (3, 0):\n    from urllib import urlencode",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "numbers",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "numbers = []\n#: Number (not necessary)\n# number = base64.b64decode(open(expanduser('~') + \".smsapifreemobile_number.b64\").readline()[:-1])\n# if number[-1] == '\\n':\n#     number = number[:-1]\nnumber = openSpecialFile(\"number\")\nnumbers.append(number)\nif testSpecialFile(\"number\", \"2\"):\n    number2 = openSpecialFile(\"number\", \"2\")\n    numbers.append(number2)",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "number",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "number = openSpecialFile(\"number\")\nnumbers.append(number)\nif testSpecialFile(\"number\", \"2\"):\n    number2 = openSpecialFile(\"number\", \"2\")\n    numbers.append(number2)\n# Detect language\nlanguage = os.getenv(\"LANG\")\nlanguage = language[0:2] if language else \"fr\"\n# Maximum size that can be sent\n# XXX Reference: https://en.wikipedia.org/wiki/Short_Message_Service#Message_size",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "language",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "language = os.getenv(\"LANG\")\nlanguage = language[0:2] if language else \"fr\"\n# Maximum size that can be sent\n# XXX Reference: https://en.wikipedia.org/wiki/Short_Message_Service#Message_size\n# \"6 to 8 segment messages are the practical maximum\"\nMAX_SIZE = 4 * 159\nSTR_MAX_SIZE = \"4*159\"\nif language == \"fr\":\n    errorcodes = {\n        400: \"Un des paramètres obligatoires est manquant.\",",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "language",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "language = language[0:2] if language else \"fr\"\n# Maximum size that can be sent\n# XXX Reference: https://en.wikipedia.org/wiki/Short_Message_Service#Message_size\n# \"6 to 8 segment messages are the practical maximum\"\nMAX_SIZE = 4 * 159\nSTR_MAX_SIZE = \"4*159\"\nif language == \"fr\":\n    errorcodes = {\n        400: \"Un des paramètres obligatoires est manquant.\",\n        402: \"Trop de SMS ont été envoyés en trop peu de temps.\",",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "MAX_SIZE",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "MAX_SIZE = 4 * 159\nSTR_MAX_SIZE = \"4*159\"\nif language == \"fr\":\n    errorcodes = {\n        400: \"Un des paramètres obligatoires est manquant.\",\n        402: \"Trop de SMS ont été envoyés en trop peu de temps.\",\n        403: \"\"\"Le service n'est pas activé sur l'espace abonné, ou login / clé incorrect.\nAllez sur '<black>https://mobile.free.fr/moncompte/index.php?page=options&show=20<white>' svp, et activez l'option correspondate.\"\"\",\n        500: \"Erreur côté serveur. Veuillez réessayez ultérieurement.\",\n        1:   \"Le SMS a été envoyé sur votre mobile ({}).\".format(number) if len(numbers) <= 1 else \"Le SMS a été envoyé sur vos numéros ({}).\".format(numbers),",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "STR_MAX_SIZE",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "STR_MAX_SIZE = \"4*159\"\nif language == \"fr\":\n    errorcodes = {\n        400: \"Un des paramètres obligatoires est manquant.\",\n        402: \"Trop de SMS ont été envoyés en trop peu de temps.\",\n        403: \"\"\"Le service n'est pas activé sur l'espace abonné, ou login / clé incorrect.\nAllez sur '<black>https://mobile.free.fr/moncompte/index.php?page=options&show=20<white>' svp, et activez l'option correspondate.\"\"\",\n        500: \"Erreur côté serveur. Veuillez réessayez ultérieurement.\",\n        1:   \"Le SMS a été envoyé sur votre mobile ({}).\".format(number) if len(numbers) <= 1 else \"Le SMS a été envoyé sur vos numéros ({}).\".format(numbers),\n        \"toolong\": \"<red>Attention<white> : le message est trop long (+ de <black>{}<white> caracters, soit plus de 3 SMS).\".format(STR_MAX_SIZE)",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "version",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "version = '0.2'\nshow = False\ndef readfiles(filenames):\n    \"\"\" Return the content of each file, concatenated as one big string.\n    - Path could be relative or absolute, but nothing fancy is done here.\n    \"\"\"\n    text = \"\"\n    # Read the whole text for each file\n    for filename in filenames:\n        try:",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "show",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "show = False\ndef readfiles(filenames):\n    \"\"\" Return the content of each file, concatenated as one big string.\n    - Path could be relative or absolute, but nothing fancy is done here.\n    \"\"\"\n    text = \"\"\n    # Read the whole text for each file\n    for filename in filenames:\n        try:\n            text += open(filename, 'r').read()",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "full_docopt_text",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "full_docopt_text = \"\"\"\ngenerate-word-cloud.py\nUsage:\n  generate-word-cloud.py [-s | --show] [-f | --force] [-o OUTFILE | --outfile=OUTFILE]\n                         [-t TITLE | --title=TITLE] [-m MAX | --max=MAX]\n                         [-w WIDTH | --width=WIDTH] [-H HEIGHT | --height=HEIGHT]\n                         INFILE...\n  generate-word-cloud.py [-h | --help]\n  generate-word-cloud.py [-v | --version]\nOptions:",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "response",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "response = urllib.request.urlopen(\n    'https://scholar.google.fr/citations?user={}'.format(sys.argv[1]))\nhtml = response.read()\nm = re.search(\"<tbody(.*)</tbody>\", str(html))\nmm = re.findall(r\"<tr class=\\\"gsc_a_tr\\\">(.*?)</tr>\", m.group(0))\npapers = []\nfor m in mm:\n    xx = re.sub(r\"<(.*?)>\", r\"£\", m)\n    xx = re.sub(r\"£+\", r\"£\", xx)\n    yy = re.findall(r\"£?(.*?)£\", xx)",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "html",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "html = response.read()\nm = re.search(\"<tbody(.*)</tbody>\", str(html))\nmm = re.findall(r\"<tr class=\\\"gsc_a_tr\\\">(.*?)</tr>\", m.group(0))\npapers = []\nfor m in mm:\n    xx = re.sub(r\"<(.*?)>\", r\"£\", m)\n    xx = re.sub(r\"£+\", r\"£\", xx)\n    yy = re.findall(r\"£?(.*?)£\", xx)\n    paper = {\n        \"title\": yy[0],",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "m",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "m = re.search(\"<tbody(.*)</tbody>\", str(html))\nmm = re.findall(r\"<tr class=\\\"gsc_a_tr\\\">(.*?)</tr>\", m.group(0))\npapers = []\nfor m in mm:\n    xx = re.sub(r\"<(.*?)>\", r\"£\", m)\n    xx = re.sub(r\"£+\", r\"£\", xx)\n    yy = re.findall(r\"£?(.*?)£\", xx)\n    paper = {\n        \"title\": yy[0],\n        \"author\": yy[1],",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "mm",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "mm = re.findall(r\"<tr class=\\\"gsc_a_tr\\\">(.*?)</tr>\", m.group(0))\npapers = []\nfor m in mm:\n    xx = re.sub(r\"<(.*?)>\", r\"£\", m)\n    xx = re.sub(r\"£+\", r\"£\", xx)\n    yy = re.findall(r\"£?(.*?)£\", xx)\n    paper = {\n        \"title\": yy[0],\n        \"author\": yy[1],\n        \"booktitle\": yy[2],",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "papers",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "papers = []\nfor m in mm:\n    xx = re.sub(r\"<(.*?)>\", r\"£\", m)\n    xx = re.sub(r\"£+\", r\"£\", xx)\n    yy = re.findall(r\"£?(.*?)£\", xx)\n    paper = {\n        \"title\": yy[0],\n        \"author\": yy[1],\n        \"booktitle\": yy[2],\n    }",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "res",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "res = {\"papers\": papers}\nprint(json.JSONEncoder().encode(res))\n#!/usr/bin/env python\n# -*- coding: utf-8; mode: python -*-\n\"\"\"\nA simple python implementation of Gravatar Image requests (using their API).\n- Author: Lilian Besson, (C) 2013.\n- Online: https://bitbucket.org/lbesson/bin/src/master/gravatar.py\n- Licence: MIT Licence (http://lbesson.mit-license.org).\n\"\"\"",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "default",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "default = \"retro\"\nsize = 256\nsecure = True\ndef gravatar(email, default=default, size=size, secure=secure):\n    \"\"\"\n    gravatar(email, default=default, size=size, secure=secure) -> string\"\n    Return the URL of the gravatar picture associated with @email.\n    @default: default picture to use if not available. Default is %s.\n    @size: format to use (pixel x pixel). Default is %i.\n    @secure: if true, the returned URL use https://secure.gravatar.com instead of http://www.gravatar.com. Default is %s.\"",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "size",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "size = 256\nsecure = True\ndef gravatar(email, default=default, size=size, secure=secure):\n    \"\"\"\n    gravatar(email, default=default, size=size, secure=secure) -> string\"\n    Return the URL of the gravatar picture associated with @email.\n    @default: default picture to use if not available. Default is %s.\n    @size: format to use (pixel x pixel). Default is %i.\n    @secure: if true, the returned URL use https://secure.gravatar.com instead of http://www.gravatar.com. Default is %s.\"\n    \"\"\" % (default, size, secure)",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "secure",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "secure = True\ndef gravatar(email, default=default, size=size, secure=secure):\n    \"\"\"\n    gravatar(email, default=default, size=size, secure=secure) -> string\"\n    Return the URL of the gravatar picture associated with @email.\n    @default: default picture to use if not available. Default is %s.\n    @size: format to use (pixel x pixel). Default is %i.\n    @secure: if true, the returned URL use https://secure.gravatar.com instead of http://www.gravatar.com. Default is %s.\"\n    \"\"\" % (default, size, secure)\n    if secure:",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "NB_BITS",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "NB_BITS = 4\nDEFAULT_SIZE = 1 << NB_BITS\nclass hashtable(object):\n    \"\"\"Manual implementation of a naive hash table.\n    - Can only store hashable values.\n    - Use single-linked lists to be collision-resistant!\n    - Uses a non cryptographic hash function (default `hash`).\n    \"\"\"\n    def __init__(self, map_values=None, nb_bits=NB_BITS):\n        self._nb_bits = nb_bits",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "DEFAULT_SIZE",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "DEFAULT_SIZE = 1 << NB_BITS\nclass hashtable(object):\n    \"\"\"Manual implementation of a naive hash table.\n    - Can only store hashable values.\n    - Use single-linked lists to be collision-resistant!\n    - Uses a non cryptographic hash function (default `hash`).\n    \"\"\"\n    def __init__(self, map_values=None, nb_bits=NB_BITS):\n        self._nb_bits = nb_bits\n        self._size = 1 << nb_bits",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "logger",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "logger = logging.getLogger('your-module')\nlogger.addHandler(coloredlogs.ColoredStreamHandler())\n# Some examples.\nlogger.setLevel(logging.DEBUG)\nlogger.debug(\"this is a debugging message\")\nlogger.info(\"this is an informational message\")\nlogger.warn(\"this is a warning message\")\nlogger.error(\"this is an error message\")\nlogger.fatal(\"this is a fatal message\")\nlogger.critical(\"this is a critical message\")",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "\tmsg",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "\tmsg = MIMEText(message+(signature % me))\n\t# The order is \"important\", to act like a real mail client !\n\tmsg['From'] = my_identity+\" <\"+me+\">\"\n\tmsg['To'] = you\n\tmsg['Subject'] = subj\n\t# Send the message via our own SMTP server, but don't include the\n\t# envelope header.\n\ts = smtplib.SMTP('smtp.crans.org')\n\t# s = smtplib.SMTP('localhost')\n\ts.sendmail(me, [you], msg.as_string())",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "\tmsg['From']",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "\tmsg['From'] = my_identity+\" <\"+me+\">\"\n\tmsg['To'] = you\n\tmsg['Subject'] = subj\n\t# Send the message via our own SMTP server, but don't include the\n\t# envelope header.\n\ts = smtplib.SMTP('smtp.crans.org')\n\t# s = smtplib.SMTP('localhost')\n\ts.sendmail(me, [you], msg.as_string())\n\ts.quit()\n\tprint \"An email has been sent to %s, from %s <%s>.\" % (you, my_identity, me)",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "\tmsg['To']",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "\tmsg['To'] = you\n\tmsg['Subject'] = subj\n\t# Send the message via our own SMTP server, but don't include the\n\t# envelope header.\n\ts = smtplib.SMTP('smtp.crans.org')\n\t# s = smtplib.SMTP('localhost')\n\ts.sendmail(me, [you], msg.as_string())\n\ts.quit()\n\tprint \"An email has been sent to %s, from %s <%s>.\" % (you, my_identity, me)\n\tprint \"Title of the email : \\n%s\" % subj",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "\tmsg['Subject']",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "\tmsg['Subject'] = subj\n\t# Send the message via our own SMTP server, but don't include the\n\t# envelope header.\n\ts = smtplib.SMTP('smtp.crans.org')\n\t# s = smtplib.SMTP('localhost')\n\ts.sendmail(me, [you], msg.as_string())\n\ts.quit()\n\tprint \"An email has been sent to %s, from %s <%s>.\" % (you, my_identity, me)\n\tprint \"Title of the email : \\n%s\" % subj\n\tprint \"Content of the email : \\n%s\" % message",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "\ts",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "\ts = smtplib.SMTP('smtp.crans.org')\n\t# s = smtplib.SMTP('localhost')\n\ts.sendmail(me, [you], msg.as_string())\n\ts.quit()\n\tprint \"An email has been sent to %s, from %s <%s>.\" % (you, my_identity, me)\n\tprint \"Title of the email : \\n%s\" % subj\n\tprint \"Content of the email : \\n%s\" % message\nimport sys, os\nif __name__ == '__main__':\n  if '-h' in sys.argv or '--help' in sys.argv:",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "defaultaddress",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "defaultaddress = \"jarvisATcransDOTorg\".replace(\"AT\", \"@\").replace(\"DOT\", \".\")\nsignature = \"\"\"\n--\n%s\n\"\"\"\ndef send_me_an_email(message, subj=\"[LOG] no object\", me=defaultaddress,\n                     you=defaultaddress, my_identity=\"jarvis\"):\n    \"\"\" Send a message [message] by email.\n    The content of the email is [message], the subject is [subj].\n    The sender is [me], not necessary a valid sender for the SMTP.",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "signature",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "signature = \"\"\"\n--\n%s\n\"\"\"\ndef send_me_an_email(message, subj=\"[LOG] no object\", me=defaultaddress,\n                     you=defaultaddress, my_identity=\"jarvis\"):\n    \"\"\" Send a message [message] by email.\n    The content of the email is [message], the subject is [subj].\n    The sender is [me], not necessary a valid sender for the SMTP.\n    The mail will be sent to [you].",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "datetoday",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "datetoday = date.today().isoformat()\ndefaultaddress = \"jarvisATcransDOTorg\".replace(\"AT\", \"@\").replace(\"DOT\", \".\")\nsignature = \"\"\"<br>-- <br>%s<br>\n<img style=\\\"display: none; vibility: hidden;\\\" src=\\\"https://ga-beacon.appspot.com/UA-38514290-15/mail_html.py/\"\"\" + datetoday + \"?pixel\\\" />\"\ndef send_me_an_email(message, subj=\"[LOG] no object\", me=defaultaddress,\n                     you=defaultaddress, my_identity=\"jarvis (HTML)\"):\n    \"\"\" Send a message [message] by email.\n    The content of the email is [message] (encoded as HTML), the subject is [subj].\n    The sender is [me], not necessary a valid sender for the SMTP.\n    The mail will be sent to [you].",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "defaultaddress",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "defaultaddress = \"jarvisATcransDOTorg\".replace(\"AT\", \"@\").replace(\"DOT\", \".\")\nsignature = \"\"\"<br>-- <br>%s<br>\n<img style=\\\"display: none; vibility: hidden;\\\" src=\\\"https://ga-beacon.appspot.com/UA-38514290-15/mail_html.py/\"\"\" + datetoday + \"?pixel\\\" />\"\ndef send_me_an_email(message, subj=\"[LOG] no object\", me=defaultaddress,\n                     you=defaultaddress, my_identity=\"jarvis (HTML)\"):\n    \"\"\" Send a message [message] by email.\n    The content of the email is [message] (encoded as HTML), the subject is [subj].\n    The sender is [me], not necessary a valid sender for the SMTP.\n    The mail will be sent to [you].\n    Auto configured with SMTP server (smtp.crans.org) with SSL support for the cr@ns server (http://www.crans.org)",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "signature",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "signature = \"\"\"<br>-- <br>%s<br>\n<img style=\\\"display: none; vibility: hidden;\\\" src=\\\"https://ga-beacon.appspot.com/UA-38514290-15/mail_html.py/\"\"\" + datetoday + \"?pixel\\\" />\"\ndef send_me_an_email(message, subj=\"[LOG] no object\", me=defaultaddress,\n                     you=defaultaddress, my_identity=\"jarvis (HTML)\"):\n    \"\"\" Send a message [message] by email.\n    The content of the email is [message] (encoded as HTML), the subject is [subj].\n    The sender is [me], not necessary a valid sender for the SMTP.\n    The mail will be sent to [you].\n    Auto configured with SMTP server (smtp.crans.org) with SSL support for the cr@ns server (http://www.crans.org)\n    (c) Lilian Besson, 2014.",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "signature",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "signature = \"\"\"\\n\n--\n%s\n\"\"\"\ndef send_me_an_email(message, subj=\"[LOG] no object\", me=\"jarvisATcransDOTorg\".replace(\"AT\", \"@\").replace(\"DOT\", \".\"), you=\"0628412257ATsfrDOTfr\".replace(\"AT\", \"@\").replace(\"DOT\", \".\"), my_identity=\"jarvis log\"):\n    \"\"\" Send a message [message] by email.\n    The content of the email is [message], the subject is [subj].\n    The sender is [me], not necessary a valid sender for the SMTP.\n    The mail will be sent to [you].\n    Auto configure with SMTP server on localhost in the cr@ns server (http://www.crans.org)",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "windows",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "windows = []    # this list contains all view windows\nMARK_CATEGORY_1 = 'one'\nMARK_CATEGORY_2 = 'two'\nDATADIR = '/usr/share'\ndef error_dialog(parent, msg):\n    dialog = gtk.MessageDialog(parent,\n                               gtk.DIALOG_DESTROY_WITH_PARENT,\n                               gtk.MESSAGE_ERROR,\n                               gtk.BUTTONS_OK,\n                               msg)",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "MARK_CATEGORY_1",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "MARK_CATEGORY_1 = 'one'\nMARK_CATEGORY_2 = 'two'\nDATADIR = '/usr/share'\ndef error_dialog(parent, msg):\n    dialog = gtk.MessageDialog(parent,\n                               gtk.DIALOG_DESTROY_WITH_PARENT,\n                               gtk.MESSAGE_ERROR,\n                               gtk.BUTTONS_OK,\n                               msg)\n    dialog.run()",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "MARK_CATEGORY_2",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "MARK_CATEGORY_2 = 'two'\nDATADIR = '/usr/share'\ndef error_dialog(parent, msg):\n    dialog = gtk.MessageDialog(parent,\n                               gtk.DIALOG_DESTROY_WITH_PARENT,\n                               gtk.MESSAGE_ERROR,\n                               gtk.BUTTONS_OK,\n                               msg)\n    dialog.run()\n    dialog.destroy()",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "DATADIR",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "DATADIR = '/usr/share'\ndef error_dialog(parent, msg):\n    dialog = gtk.MessageDialog(parent,\n                               gtk.DIALOG_DESTROY_WITH_PARENT,\n                               gtk.MESSAGE_ERROR,\n                               gtk.BUTTONS_OK,\n                               msg)\n    dialog.run()\n    dialog.destroy()\ndef remove_all_marks(buffer):",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "buffer_actions",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "buffer_actions = [\n    ('Open', gtk.STOCK_OPEN, '_Ouvre', '<control>O', 'Ouvre un fichier', open_file_cb),\n    ('Quit', gtk.STOCK_QUIT, '_Quitte', '<control>Q', 'Quitte l\\'application', gtk.main_quit)\n]\nview_actions = [\n    ('FileMenu', None, '_Fichier'),\n    ('ViewMenu', None, '_Vue'),\n    ('Print', gtk.STOCK_PRINT, '_Impression', '<control>P', 'Print the file', print_cb),\n    ('NewView', gtk.STOCK_NEW, '_Nouvelle Vue', None, 'Create a new view of the file', new_view_cb),\n    ('TabsWidth', None, '_Largeur des tabulations')",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "view_actions",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "view_actions = [\n    ('FileMenu', None, '_Fichier'),\n    ('ViewMenu', None, '_Vue'),\n    ('Print', gtk.STOCK_PRINT, '_Impression', '<control>P', 'Print the file', print_cb),\n    ('NewView', gtk.STOCK_NEW, '_Nouvelle Vue', None, 'Create a new view of the file', new_view_cb),\n    ('TabsWidth', None, '_Largeur des tabulations')\n]\ntoggle_actions = [\n    ('ShowNumbers', None, 'Montre les numéros de _lignes', None, 'Toggle visibility of line numbers in the left margin', numbers_toggled_cb, False),\n    ('ShowMarkers', None, 'Montre les _Marqueurs', None, 'Toggle visibility of markers in the left margin', marks_toggled_cb, False),",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "toggle_actions",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "toggle_actions = [\n    ('ShowNumbers', None, 'Montre les numéros de _lignes', None, 'Toggle visibility of line numbers in the left margin', numbers_toggled_cb, False),\n    ('ShowMarkers', None, 'Montre les _Marqueurs', None, 'Toggle visibility of markers in the left margin', marks_toggled_cb, False),\n    ('ShowMargin', None, 'Montre les M_arges', None, 'Toggle visibility of right margin indicator', margin_toggled_cb, False),\n    ('AutoIndent', None, 'Activer l\\'_auto-indentation', None, 'Toggle automatic auto indentation of text', auto_indent_toggled_cb, False),\n    ('InsertSpaces', None, 'Insérer des e_spaces au lieu des tabulations', None, 'Whether to insert space characters when inserting tabulations', insert_spaces_toggled_cb, False)\n]\nradio_actions = [\n    ('TabsWidth4', None, '4', None, 'Set tabulation width to 4 spaces', 4),\n    ('TabsWidth6', None, '6', None, 'Set tabulation width to 6 spaces', 6),",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "radio_actions",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "radio_actions = [\n    ('TabsWidth4', None, '4', None, 'Set tabulation width to 4 spaces', 4),\n    ('TabsWidth6', None, '6', None, 'Set tabulation width to 6 spaces', 6),\n    ('TabsWidth8', None, '8', None, 'Set tabulation width to 8 spaces', 8),\n    ('TabsWidth10', None, '10', None, 'Set tabulation width to 10 spaces', 10),\n    ('TabsWidth12', None, '12', None, 'Set tabulation width to 12 spaces', 12),\n    ('TabsWidth14', None, '14', None, 'Set tabulation width to 14 spaces', 14)\n]\nview_ui_description = \"\"\"\n<ui>",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "view_ui_description",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "view_ui_description = \"\"\"\n<ui>\n  <menubar name='MainMenu'>\n    <menu action='FileMenu'>\n      <menuitem action='NewView'/>\n      <placeholder name=\"FileMenuAdditions\"/>\n      <separator/>\n      <menuitem action='Print'/>\n    </menu>\n    <menu action='ViewMenu'>",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "buffer_ui_description",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "buffer_ui_description = \"\"\"\n<ui>\n  <menubar name='MainMenu'>\n    <menu action='FileMenu'>\n      <placeholder name=\"FileMenuAdditions\">\n        <menuitem action='Open'/>\n      </placeholder>\n      <separator/>\n      <menuitem action='Quit'/>\n    </menu>",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "MINUTES",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "MINUTES = 60\nHOURS = 60 * MINUTES\nQUOTE_FILE = os.getenv(\"quotes\", expanduser(join(\"~\", \".quotes.txt\")))\nSLACK_TOKEN = open(expanduser(join(\"~\", \".slack_api_key\")), 'r').readline().strip()\nUSE_CHANNEL = False  # DEBUG\nUSE_CHANNEL = True\nSLACK_USER = \"@lilian\"\nSLACK_CHANNEL = \"#random\"\nMEAN_TIME = (12 * HOURS) if USE_CHANNEL else 30\nURL = \"https://bitbucket.org/lbesson/bin/src/master/my-small-slack-bot.py\"",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "HOURS",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "HOURS = 60 * MINUTES\nQUOTE_FILE = os.getenv(\"quotes\", expanduser(join(\"~\", \".quotes.txt\")))\nSLACK_TOKEN = open(expanduser(join(\"~\", \".slack_api_key\")), 'r').readline().strip()\nUSE_CHANNEL = False  # DEBUG\nUSE_CHANNEL = True\nSLACK_USER = \"@lilian\"\nSLACK_CHANNEL = \"#random\"\nMEAN_TIME = (12 * HOURS) if USE_CHANNEL else 30\nURL = \"https://bitbucket.org/lbesson/bin/src/master/my-small-slack-bot.py\"\nPOSITIVE_REACTIONS = ['up', '+1', 'thumbsup']",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "QUOTE_FILE",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "QUOTE_FILE = os.getenv(\"quotes\", expanduser(join(\"~\", \".quotes.txt\")))\nSLACK_TOKEN = open(expanduser(join(\"~\", \".slack_api_key\")), 'r').readline().strip()\nUSE_CHANNEL = False  # DEBUG\nUSE_CHANNEL = True\nSLACK_USER = \"@lilian\"\nSLACK_CHANNEL = \"#random\"\nMEAN_TIME = (12 * HOURS) if USE_CHANNEL else 30\nURL = \"https://bitbucket.org/lbesson/bin/src/master/my-small-slack-bot.py\"\nPOSITIVE_REACTIONS = ['up', '+1', 'thumbsup']\nNEGATIVES_REACTIONS = ['down', '-1', 'thumbsdown']",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "SLACK_TOKEN",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "SLACK_TOKEN = open(expanduser(join(\"~\", \".slack_api_key\")), 'r').readline().strip()\nUSE_CHANNEL = False  # DEBUG\nUSE_CHANNEL = True\nSLACK_USER = \"@lilian\"\nSLACK_CHANNEL = \"#random\"\nMEAN_TIME = (12 * HOURS) if USE_CHANNEL else 30\nURL = \"https://bitbucket.org/lbesson/bin/src/master/my-small-slack-bot.py\"\nPOSITIVE_REACTIONS = ['up', '+1', 'thumbsup']\nNEGATIVES_REACTIONS = ['down', '-1', 'thumbsdown']\n# --- Functions",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "USE_CHANNEL",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "USE_CHANNEL = False  # DEBUG\nUSE_CHANNEL = True\nSLACK_USER = \"@lilian\"\nSLACK_CHANNEL = \"#random\"\nMEAN_TIME = (12 * HOURS) if USE_CHANNEL else 30\nURL = \"https://bitbucket.org/lbesson/bin/src/master/my-small-slack-bot.py\"\nPOSITIVE_REACTIONS = ['up', '+1', 'thumbsup']\nNEGATIVES_REACTIONS = ['down', '-1', 'thumbsdown']\n# --- Functions\ndef sleeptime(lmbda=MEAN_TIME, use_poisson=True):",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "USE_CHANNEL",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "USE_CHANNEL = True\nSLACK_USER = \"@lilian\"\nSLACK_CHANNEL = \"#random\"\nMEAN_TIME = (12 * HOURS) if USE_CHANNEL else 30\nURL = \"https://bitbucket.org/lbesson/bin/src/master/my-small-slack-bot.py\"\nPOSITIVE_REACTIONS = ['up', '+1', 'thumbsup']\nNEGATIVES_REACTIONS = ['down', '-1', 'thumbsdown']\n# --- Functions\ndef sleeptime(lmbda=MEAN_TIME, use_poisson=True):\n    \"\"\"Random time until next message.\"\"\"",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "SLACK_USER",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "SLACK_USER = \"@lilian\"\nSLACK_CHANNEL = \"#random\"\nMEAN_TIME = (12 * HOURS) if USE_CHANNEL else 30\nURL = \"https://bitbucket.org/lbesson/bin/src/master/my-small-slack-bot.py\"\nPOSITIVE_REACTIONS = ['up', '+1', 'thumbsup']\nNEGATIVES_REACTIONS = ['down', '-1', 'thumbsdown']\n# --- Functions\ndef sleeptime(lmbda=MEAN_TIME, use_poisson=True):\n    \"\"\"Random time until next message.\"\"\"\n    if use_poisson:",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "SLACK_CHANNEL",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "SLACK_CHANNEL = \"#random\"\nMEAN_TIME = (12 * HOURS) if USE_CHANNEL else 30\nURL = \"https://bitbucket.org/lbesson/bin/src/master/my-small-slack-bot.py\"\nPOSITIVE_REACTIONS = ['up', '+1', 'thumbsup']\nNEGATIVES_REACTIONS = ['down', '-1', 'thumbsdown']\n# --- Functions\ndef sleeptime(lmbda=MEAN_TIME, use_poisson=True):\n    \"\"\"Random time until next message.\"\"\"\n    if use_poisson:\n        return poisson(lmbda)",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "MEAN_TIME",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "MEAN_TIME = (12 * HOURS) if USE_CHANNEL else 30\nURL = \"https://bitbucket.org/lbesson/bin/src/master/my-small-slack-bot.py\"\nPOSITIVE_REACTIONS = ['up', '+1', 'thumbsup']\nNEGATIVES_REACTIONS = ['down', '-1', 'thumbsdown']\n# --- Functions\ndef sleeptime(lmbda=MEAN_TIME, use_poisson=True):\n    \"\"\"Random time until next message.\"\"\"\n    if use_poisson:\n        return poisson(lmbda)\n    else:",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "URL",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "URL = \"https://bitbucket.org/lbesson/bin/src/master/my-small-slack-bot.py\"\nPOSITIVE_REACTIONS = ['up', '+1', 'thumbsup']\nNEGATIVES_REACTIONS = ['down', '-1', 'thumbsdown']\n# --- Functions\ndef sleeptime(lmbda=MEAN_TIME, use_poisson=True):\n    \"\"\"Random time until next message.\"\"\"\n    if use_poisson:\n        return poisson(lmbda)\n    else:\n        return lmbda",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "POSITIVE_REACTIONS",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "POSITIVE_REACTIONS = ['up', '+1', 'thumbsup']\nNEGATIVES_REACTIONS = ['down', '-1', 'thumbsdown']\n# --- Functions\ndef sleeptime(lmbda=MEAN_TIME, use_poisson=True):\n    \"\"\"Random time until next message.\"\"\"\n    if use_poisson:\n        return poisson(lmbda)\n    else:\n        return lmbda\ndef sleep_bar(secs):",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "NEGATIVES_REACTIONS",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "NEGATIVES_REACTIONS = ['down', '-1', 'thumbsdown']\n# --- Functions\ndef sleeptime(lmbda=MEAN_TIME, use_poisson=True):\n    \"\"\"Random time until next message.\"\"\"\n    if use_poisson:\n        return poisson(lmbda)\n    else:\n        return lmbda\ndef sleep_bar(secs):\n    \"\"\"Sleep with a bar, or not\"\"\"",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "CM_IceAndFire",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "CM_IceAndFire = ColorMap([(0.00, (0.0, 0.0, 1.0)),\n                         (0.25, (0.0, 0.5, 1.0)),\n                         (0.50, (1.0, 1.0, 1.0)),\n                         (0.75, (1.0, 1.0, 0.0)),\n                         (1.00, (1.0, 0.0, 0.0))], \"Ice and Fire\")\n# ==> GAME OF THRONES !\nCM_Ice = ColorMap([(0.00, (0.0, 0.0, 1.0)),\n                   (0.50, (0.5, 0.5, 1.0)),\n                   (1.00, (1.0, 1.0, 1.0))], \"Ice\")\nCM_Fire = ColorMap([(0.00, (1.0, 1.0, 1.0)),",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "CM_Ice",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "CM_Ice = ColorMap([(0.00, (0.0, 0.0, 1.0)),\n                   (0.50, (0.5, 0.5, 1.0)),\n                   (1.00, (1.0, 1.0, 1.0))], \"Ice\")\nCM_Fire = ColorMap([(0.00, (1.0, 1.0, 1.0)),\n                    (0.50, (1.0, 1.0, 0.0)),\n                    (1.00, (1.0, 0.0, 0.0))], \"Fire\")\nCM_Hot = ColorMap([(0.00, (0.0, 0.0, 0.0)),\n                   (0.33, (1.0, 0.0, 0.0)),\n                   (0.66, (1.0, 1.0, 0.0)),\n                   (1.00, (1.0, 1.0, 1.0))], \"Hot\")",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "CM_Fire",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "CM_Fire = ColorMap([(0.00, (1.0, 1.0, 1.0)),\n                    (0.50, (1.0, 1.0, 0.0)),\n                    (1.00, (1.0, 0.0, 0.0))], \"Fire\")\nCM_Hot = ColorMap([(0.00, (0.0, 0.0, 0.0)),\n                   (0.33, (1.0, 0.0, 0.0)),\n                   (0.66, (1.0, 1.0, 0.0)),\n                   (1.00, (1.0, 1.0, 1.0))], \"Hot\")\nCM_Grey = ColorMap([(0.00, (0.0, 0.0, 0.0)),\n                    (1.00, (1.0, 1.0, 1.0))], \"Grey\")\ndef termimshow(Z, vmin=None, vmax=None, cmap=CM_Hot, show_cmap=True):",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "CM_Hot",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "CM_Hot = ColorMap([(0.00, (0.0, 0.0, 0.0)),\n                   (0.33, (1.0, 0.0, 0.0)),\n                   (0.66, (1.0, 1.0, 0.0)),\n                   (1.00, (1.0, 1.0, 1.0))], \"Hot\")\nCM_Grey = ColorMap([(0.00, (0.0, 0.0, 0.0)),\n                    (1.00, (1.0, 1.0, 1.0))], \"Grey\")\ndef termimshow(Z, vmin=None, vmax=None, cmap=CM_Hot, show_cmap=True):\n    \"\"\" Show a 2D numpy array using terminal colors. \"\"\"\n    if len(Z.shape) != 2:\n        print(\"Cannot display non 2D array\")",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "CM_Grey",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "CM_Grey = ColorMap([(0.00, (0.0, 0.0, 0.0)),\n                    (1.00, (1.0, 1.0, 1.0))], \"Grey\")\ndef termimshow(Z, vmin=None, vmax=None, cmap=CM_Hot, show_cmap=True):\n    \"\"\" Show a 2D numpy array using terminal colors. \"\"\"\n    if len(Z.shape) != 2:\n        print(\"Cannot display non 2D array\")\n        return\n    vmin = vmin or Z.min()\n    vmax = vmax or Z.max()\n    cmap.scale(vmin, vmax)",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "URL",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "URL = 'http://p.boxnet.eu/'\nclass PasteBox:\n    def __init__(self):\n        self.replyid = 0\n        self.mode = 'text'\n        self.ttl = 86400\n        self.authhash = None\n    def create(self, content):\n        VALUES = {'content': content,\n                  'replyid': self.replyid,",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "csv_file",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "csv_file = sys.argv[1]\ncsv_name = csv_file[:-3]\n#: Load in the csv file\ncsv_file_object = csv.reader(open(csv_file, 'rb'))\n#: Skip the fist line as it is a header\nheader = csv_file_object.next()\ndata = []\nfor row in csv_file_object:\n    data.append(row)  # adding each row to the data variable\n#: Then convert from a list to an array",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "csv_name",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "csv_name = csv_file[:-3]\n#: Load in the csv file\ncsv_file_object = csv.reader(open(csv_file, 'rb'))\n#: Skip the fist line as it is a header\nheader = csv_file_object.next()\ndata = []\nfor row in csv_file_object:\n    data.append(row)  # adding each row to the data variable\n#: Then convert from a list to an array\ndata = np.array(data)",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "csv_file_object",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "csv_file_object = csv.reader(open(csv_file, 'rb'))\n#: Skip the fist line as it is a header\nheader = csv_file_object.next()\ndata = []\nfor row in csv_file_object:\n    data.append(row)  # adding each row to the data variable\n#: Then convert from a list to an array\ndata = np.array(data)\n#: Just the notes\nnotes = data[::, 1].astype(np.float)",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "header",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "header = csv_file_object.next()\ndata = []\nfor row in csv_file_object:\n    data.append(row)  # adding each row to the data variable\n#: Then convert from a list to an array\ndata = np.array(data)\n#: Just the notes\nnotes = data[::, 1].astype(np.float)\nnbnotes = np.size(notes)\n#: Sort decreasingly",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "data",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "data = []\nfor row in csv_file_object:\n    data.append(row)  # adding each row to the data variable\n#: Then convert from a list to an array\ndata = np.array(data)\n#: Just the notes\nnotes = data[::, 1].astype(np.float)\nnbnotes = np.size(notes)\n#: Sort decreasingly\nind = np.argsort(notes)",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "data",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "data = np.array(data)\n#: Just the notes\nnotes = data[::, 1].astype(np.float)\nnbnotes = np.size(notes)\n#: Sort decreasingly\nind = np.argsort(notes)\ndata = data[ind[::-1]]\nnotes = notes[ind[::-1]]\n#: The grades are between 0 and this value. Default is the French convention: 20.\nnoteMax = 20",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "notes",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "notes = data[::, 1].astype(np.float)\nnbnotes = np.size(notes)\n#: Sort decreasingly\nind = np.argsort(notes)\ndata = data[ind[::-1]]\nnotes = notes[ind[::-1]]\n#: The grades are between 0 and this value. Default is the French convention: 20.\nnoteMax = 20\n###################################################################\n# I want now to produce annex files",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "nbnotes",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "nbnotes = np.size(notes)\n#: Sort decreasingly\nind = np.argsort(notes)\ndata = data[ind[::-1]]\nnotes = notes[ind[::-1]]\n#: The grades are between 0 and this value. Default is the French convention: 20.\nnoteMax = 20\n###################################################################\n# I want now to produce annex files\nf = file(csv_name + \"table\", 'w')",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "ind",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "ind = np.argsort(notes)\ndata = data[ind[::-1]]\nnotes = notes[ind[::-1]]\n#: The grades are between 0 and this value. Default is the French convention: 20.\nnoteMax = 20\n###################################################################\n# I want now to produce annex files\nf = file(csv_name + \"table\", 'w')\nf.write(\"%% Notes from '%s'\" % f.name)\nfor i in range(nbnotes):",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "data",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "data = data[ind[::-1]]\nnotes = notes[ind[::-1]]\n#: The grades are between 0 and this value. Default is the French convention: 20.\nnoteMax = 20\n###################################################################\n# I want now to produce annex files\nf = file(csv_name + \"table\", 'w')\nf.write(\"%% Notes from '%s'\" % f.name)\nfor i in range(nbnotes):\n    f.write(\"\\n%s & %g/%i \\\\\\\\\" % (data[i, 0], notes[i], noteMax))",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "notes",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "notes = notes[ind[::-1]]\n#: The grades are between 0 and this value. Default is the French convention: 20.\nnoteMax = 20\n###################################################################\n# I want now to produce annex files\nf = file(csv_name + \"table\", 'w')\nf.write(\"%% Notes from '%s'\" % f.name)\nfor i in range(nbnotes):\n    f.write(\"\\n%s & %g/%i \\\\\\\\\" % (data[i, 0], notes[i], noteMax))\n    print(\"I wrote <blue>'%s & %g/%i \\\\\\\\'<white> in <u>%s<U>...\" % (data[i, 0], notes[i], noteMax, f.name))",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "noteMax",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "noteMax = 20\n###################################################################\n# I want now to produce annex files\nf = file(csv_name + \"table\", 'w')\nf.write(\"%% Notes from '%s'\" % f.name)\nfor i in range(nbnotes):\n    f.write(\"\\n%s & %g/%i \\\\\\\\\" % (data[i, 0], notes[i], noteMax))\n    print(\"I wrote <blue>'%s & %g/%i \\\\\\\\'<white> in <u>%s<U>...\" % (data[i, 0], notes[i], noteMax, f.name))\nminimale = np.min(notes)\nf = file(csv_name + \"minimale\", 'w')",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "f",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "f = file(csv_name + \"table\", 'w')\nf.write(\"%% Notes from '%s'\" % f.name)\nfor i in range(nbnotes):\n    f.write(\"\\n%s & %g/%i \\\\\\\\\" % (data[i, 0], notes[i], noteMax))\n    print(\"I wrote <blue>'%s & %g/%i \\\\\\\\'<white> in <u>%s<U>...\" % (data[i, 0], notes[i], noteMax, f.name))\nminimale = np.min(notes)\nf = file(csv_name + \"minimale\", 'w')\nf.write(\"%g/%i\" % (minimale, noteMax))\nprint(\"I wrote the value of minimale (<cyan>%g<white>) to <u>%s<U>...\" % (minimale, f.name))\nargminimale = data[np.argmin(notes), 0]",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "minimale",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "minimale = np.min(notes)\nf = file(csv_name + \"minimale\", 'w')\nf.write(\"%g/%i\" % (minimale, noteMax))\nprint(\"I wrote the value of minimale (<cyan>%g<white>) to <u>%s<U>...\" % (minimale, f.name))\nargminimale = data[np.argmin(notes), 0]\nf = file(csv_name + \"argminimale\", 'w')\nf.write(\"%s\" % argminimale)\nprint(\"I wrote the value of argminimale (<cyan>%s<white>) to <u>%s<U>...\" % (argminimale, f.name))\nmaximale = np.max(notes)\nf = file(csv_name + \"maximale\", 'w')",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "f",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "f = file(csv_name + \"minimale\", 'w')\nf.write(\"%g/%i\" % (minimale, noteMax))\nprint(\"I wrote the value of minimale (<cyan>%g<white>) to <u>%s<U>...\" % (minimale, f.name))\nargminimale = data[np.argmin(notes), 0]\nf = file(csv_name + \"argminimale\", 'w')\nf.write(\"%s\" % argminimale)\nprint(\"I wrote the value of argminimale (<cyan>%s<white>) to <u>%s<U>...\" % (argminimale, f.name))\nmaximale = np.max(notes)\nf = file(csv_name + \"maximale\", 'w')\nf.write(\"%g/%i\" % (maximale, noteMax))",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "argminimale",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "argminimale = data[np.argmin(notes), 0]\nf = file(csv_name + \"argminimale\", 'w')\nf.write(\"%s\" % argminimale)\nprint(\"I wrote the value of argminimale (<cyan>%s<white>) to <u>%s<U>...\" % (argminimale, f.name))\nmaximale = np.max(notes)\nf = file(csv_name + \"maximale\", 'w')\nf.write(\"%g/%i\" % (maximale, noteMax))\nprint(\"I wrote the value of maximale (<cyan>%g<white>) to <u>%s<U>...\" % (maximale, f.name))\nargmaximale = data[np.argmax(notes), 0]\nf = file(csv_name + \"argmaximale\", 'w')",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "f",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "f = file(csv_name + \"argminimale\", 'w')\nf.write(\"%s\" % argminimale)\nprint(\"I wrote the value of argminimale (<cyan>%s<white>) to <u>%s<U>...\" % (argminimale, f.name))\nmaximale = np.max(notes)\nf = file(csv_name + \"maximale\", 'w')\nf.write(\"%g/%i\" % (maximale, noteMax))\nprint(\"I wrote the value of maximale (<cyan>%g<white>) to <u>%s<U>...\" % (maximale, f.name))\nargmaximale = data[np.argmax(notes), 0]\nf = file(csv_name + \"argmaximale\", 'w')\nf.write(\"%s\" % argmaximale)",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "maximale",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "maximale = np.max(notes)\nf = file(csv_name + \"maximale\", 'w')\nf.write(\"%g/%i\" % (maximale, noteMax))\nprint(\"I wrote the value of maximale (<cyan>%g<white>) to <u>%s<U>...\" % (maximale, f.name))\nargmaximale = data[np.argmax(notes), 0]\nf = file(csv_name + \"argmaximale\", 'w')\nf.write(\"%s\" % argmaximale)\nprint(\"I wrote the value of argmaximale (<cyan>%s<white>) to <u>%s<U>...\" % (argmaximale, f.name))\nmoyenne = np.mean(notes)\nf = file(csv_name + \"moyenne\", 'w')",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "f",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "f = file(csv_name + \"maximale\", 'w')\nf.write(\"%g/%i\" % (maximale, noteMax))\nprint(\"I wrote the value of maximale (<cyan>%g<white>) to <u>%s<U>...\" % (maximale, f.name))\nargmaximale = data[np.argmax(notes), 0]\nf = file(csv_name + \"argmaximale\", 'w')\nf.write(\"%s\" % argmaximale)\nprint(\"I wrote the value of argmaximale (<cyan>%s<white>) to <u>%s<U>...\" % (argmaximale, f.name))\nmoyenne = np.mean(notes)\nf = file(csv_name + \"moyenne\", 'w')\nf.write(\"%2.2g/%i\" % (moyenne, noteMax))",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "argmaximale",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "argmaximale = data[np.argmax(notes), 0]\nf = file(csv_name + \"argmaximale\", 'w')\nf.write(\"%s\" % argmaximale)\nprint(\"I wrote the value of argmaximale (<cyan>%s<white>) to <u>%s<U>...\" % (argmaximale, f.name))\nmoyenne = np.mean(notes)\nf = file(csv_name + \"moyenne\", 'w')\nf.write(\"%2.2g/%i\" % (moyenne, noteMax))\nprint(\"I wrote the value of moyenne (<cyan>%2.2g<white>) to <u>%s<U>...\" % (moyenne, f.name))\necarttype = np.std(notes)\nf = file(csv_name + \"ecarttype\", 'w')",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "f",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "f = file(csv_name + \"argmaximale\", 'w')\nf.write(\"%s\" % argmaximale)\nprint(\"I wrote the value of argmaximale (<cyan>%s<white>) to <u>%s<U>...\" % (argmaximale, f.name))\nmoyenne = np.mean(notes)\nf = file(csv_name + \"moyenne\", 'w')\nf.write(\"%2.2g/%i\" % (moyenne, noteMax))\nprint(\"I wrote the value of moyenne (<cyan>%2.2g<white>) to <u>%s<U>...\" % (moyenne, f.name))\necarttype = np.std(notes)\nf = file(csv_name + \"ecarttype\", 'w')\nf.write(\"%2.2g\" % ecarttype)",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "moyenne",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "moyenne = np.mean(notes)\nf = file(csv_name + \"moyenne\", 'w')\nf.write(\"%2.2g/%i\" % (moyenne, noteMax))\nprint(\"I wrote the value of moyenne (<cyan>%2.2g<white>) to <u>%s<U>...\" % (moyenne, f.name))\necarttype = np.std(notes)\nf = file(csv_name + \"ecarttype\", 'w')\nf.write(\"%2.2g\" % ecarttype)\nprint(\"I wrote the value of ecarttype (<cyan>%2.2g<white>) to <u>%s<U>...\" % (ecarttype, f.name))\nvariance = np.var(notes)\nf = file(csv_name + \"variance\", 'w')",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "f",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "f = file(csv_name + \"moyenne\", 'w')\nf.write(\"%2.2g/%i\" % (moyenne, noteMax))\nprint(\"I wrote the value of moyenne (<cyan>%2.2g<white>) to <u>%s<U>...\" % (moyenne, f.name))\necarttype = np.std(notes)\nf = file(csv_name + \"ecarttype\", 'w')\nf.write(\"%2.2g\" % ecarttype)\nprint(\"I wrote the value of ecarttype (<cyan>%2.2g<white>) to <u>%s<U>...\" % (ecarttype, f.name))\nvariance = np.var(notes)\nf = file(csv_name + \"variance\", 'w')\nf.write(\"%2.2g\" % variance)",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "ecarttype",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "ecarttype = np.std(notes)\nf = file(csv_name + \"ecarttype\", 'w')\nf.write(\"%2.2g\" % ecarttype)\nprint(\"I wrote the value of ecarttype (<cyan>%2.2g<white>) to <u>%s<U>...\" % (ecarttype, f.name))\nvariance = np.var(notes)\nf = file(csv_name + \"variance\", 'w')\nf.write(\"%2.2g\" % variance)\nprint(\"I wrote the value of variance (<cyan>%2.2g<white>) to <u>%s<U>...\" % (variance, f.name))\n###################################################################\n# I want now to plot some graphics about the datas, with matplotlib",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "f",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "f = file(csv_name + \"ecarttype\", 'w')\nf.write(\"%2.2g\" % ecarttype)\nprint(\"I wrote the value of ecarttype (<cyan>%2.2g<white>) to <u>%s<U>...\" % (ecarttype, f.name))\nvariance = np.var(notes)\nf = file(csv_name + \"variance\", 'w')\nf.write(\"%2.2g\" % variance)\nprint(\"I wrote the value of variance (<cyan>%2.2g<white>) to <u>%s<U>...\" % (variance, f.name))\n###################################################################\n# I want now to plot some graphics about the datas, with matplotlib\nprint(\"\\nPloting some graphics from <u>%s<U> (<neg><green>%i student(s)<Neg><white>)...\" % (csv_name + \"csv\", nbnotes))",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "variance",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "variance = np.var(notes)\nf = file(csv_name + \"variance\", 'w')\nf.write(\"%2.2g\" % variance)\nprint(\"I wrote the value of variance (<cyan>%2.2g<white>) to <u>%s<U>...\" % (variance, f.name))\n###################################################################\n# I want now to plot some graphics about the datas, with matplotlib\nprint(\"\\nPloting some graphics from <u>%s<U> (<neg><green>%i student(s)<Neg><white>)...\" % (csv_name + \"csv\", nbnotes))\n#: Graph options\npylab.xlabel(u\"Notes (entre $0$ et $%i$)\" % noteMax)\npylab.ylabel(u\"Nombre d'élève(s) ayant eu cette note\")",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "f",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "f = file(csv_name + \"variance\", 'w')\nf.write(\"%2.2g\" % variance)\nprint(\"I wrote the value of variance (<cyan>%2.2g<white>) to <u>%s<U>...\" % (variance, f.name))\n###################################################################\n# I want now to plot some graphics about the datas, with matplotlib\nprint(\"\\nPloting some graphics from <u>%s<U> (<neg><green>%i student(s)<Neg><white>)...\" % (csv_name + \"csv\", nbnotes))\n#: Graph options\npylab.xlabel(u\"Notes (entre $0$ et $%i$)\" % noteMax)\npylab.ylabel(u\"Nombre d'élève(s) ayant eu cette note\")\npylab.title(u\"Répartition des notes dans la classe\")",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "idc",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "idc = xvalues > 0\npylab.plot(bins[:-1][idc], xvalues[idc], 'g*--', linewidth=.5, markersize=18)\npylab.xticks(bins[:-1][idc])\n# Tweak spacing to prevent clipping of ylabel\npylab.subplots_adjust(left=0.15)\n# pylab.show()\npylab.savefig(csv_name + \"pdf\")\nprint(\"Ploting the grades repartition on an histogram: <u>\" + csv_name + \"pdf<U>\")\npylab.draw()\npylab.clf()",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "Q",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "Q = [ Int('Q_%i' % (i + 1)) for i in range(8) ]\n# Each queen is in a column {1, ... 8 }\nval_c = [ And(1 <= Q[i], Q[i] <= 8) for i in range(8) ]\n# At most one queen per column\ncol_c = [ Distinct(Q) ]\n# Diagonal constraint\ndiag_c = [ If(i == j,\n              True,\n              And(Q[i] - Q[j] != i - j, Q[i] - Q[j] != j - i))\n           for i in range(8) for j in range(i) ]",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "val_c",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "val_c = [ And(1 <= Q[i], Q[i] <= 8) for i in range(8) ]\n# At most one queen per column\ncol_c = [ Distinct(Q) ]\n# Diagonal constraint\ndiag_c = [ If(i == j,\n              True,\n              And(Q[i] - Q[j] != i - j, Q[i] - Q[j] != j - i))\n           for i in range(8) for j in range(i) ]\nsolve(val_c + col_c + diag_c)\n#!/usr/bin/env python3",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "col_c",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "col_c = [ Distinct(Q) ]\n# Diagonal constraint\ndiag_c = [ If(i == j,\n              True,\n              And(Q[i] - Q[j] != i - j, Q[i] - Q[j] != j - i))\n           for i in range(8) for j in range(i) ]\nsolve(val_c + col_c + diag_c)\n#!/usr/bin/env python3\n#-*- coding: utf8 -*-\n\"\"\"Produce text from a list of sentences, inspired by https://github.com/jilljenn/markov.py\"\"\"",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "diag_c",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "diag_c = [ If(i == j,\n              True,\n              And(Q[i] - Q[j] != i - j, Q[i] - Q[j] != j - i))\n           for i in range(8) for j in range(i) ]\nsolve(val_c + col_c + diag_c)\n#!/usr/bin/env python3\n#-*- coding: utf8 -*-\n\"\"\"Produce text from a list of sentences, inspired by https://github.com/jilljenn/markov.py\"\"\"\nimport argparse\nimport os",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "WORD_LIST",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "WORD_LIST = '/home/lilian/bin/latin.txt'\ndef markov(corpus, start, length):\n    # Counting occurrences\n    next_one = defaultdict(Counter)\n    for sentence in corpus:\n        words = sentence.split()\n        nb_words = len(words)\n        for i in range(nb_words - 1):\n            next_one[words[i]][words[i + 1]] += 1\n    # Initializing states",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "description",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "description = ('Generates Markdown formatted text from standalone '\n               'reStructuredText sources.  ' + default_description)\npublish_cmdline(writer=markdown.Writer(), description=description)\n/home/lilian/publis/selfspy-vis/selfvis.py\n#! /usr/bin/env python2\n# -*- coding: utf-8; mode: python -*-\n\"\"\" A tiny Python script to call sleep for a random time, drawn from a Poisson distribution of a certain mean time.\nRequirements:\n- numpy.random (poisson) is needed.\nAbout:",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "MINUTE",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "MINUTE = 60\nMEAN_TIME = 3 * MINUTE\n# --- Main script\nif __name__ == '__main__':\n    mean_time = int(sys.argv[1]) if len(sys.argv) > 1 else MEAN_TIME\n    waiting_time = poisson(mean_time)\n    print(\"Sleeping for {:.3g} seconds ...\".format(waiting_time))  # DEBUG\n    sys.exit(sleep(waiting_time))\n# End of sleep-poisson-time.py\n#!/usr/bin/env python3",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "MEAN_TIME",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "MEAN_TIME = 3 * MINUTE\n# --- Main script\nif __name__ == '__main__':\n    mean_time = int(sys.argv[1]) if len(sys.argv) > 1 else MEAN_TIME\n    waiting_time = poisson(mean_time)\n    print(\"Sleeping for {:.3g} seconds ...\".format(waiting_time))  # DEBUG\n    sys.exit(sleep(waiting_time))\n# End of sleep-poisson-time.py\n#!/usr/bin/env python3\n# -*- coding: utf8 -*-",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "smooth_jit",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "smooth_jit = numba.jit(smooth_nojit)\n# <- factor ×100 speed-up!\nif __name__ == '__main__':\n    print(\"For 1e6 points...\")\n    u = np.random.randn(int(1e6), 1)\n    a = 0.95\n    start = time()\n    smooth_nojit(u, a)\n    print(f\"No jit: {time() - start:.3g} seconds\")\n    start = time()",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "__author__",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "__author__ = \"Lilian Besson\"\n__version__ = \"0.3.1\"\n# TODO: improve conformity with StrapDown.js Markdown parser:\n# nested list for instance, generic source code printer etc.\ntry:\n    try:\n        # Load ansicolortags (Cf. http://ansicolortags.readthedocs.io/)\n        from ansicolortags import printc\n    except ImportError as e:\n        print(\"Optional dependancy (ansicolortags) is not available, using regular print function.\")",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "__version__",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "__version__ = \"0.3.1\"\n# TODO: improve conformity with StrapDown.js Markdown parser:\n# nested list for instance, generic source code printer etc.\ntry:\n    try:\n        # Load ansicolortags (Cf. http://ansicolortags.readthedocs.io/)\n        from ansicolortags import printc\n    except ImportError as e:\n        print(\"Optional dependancy (ansicolortags) is not available, using regular print function.\")\n        print(\"  You can install it with : 'pip install ansicolortags' (or sudo pip)...\")",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "sys.stdout",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "sys.stdout = codecs.getwriter('utf-8')(sys.stdout)\nbeta = False\neraseFileAlreadyThere = False\ndef main(argv=[], path='/tmp', outfile='test.html', title='Test', use_jquery=False):\n    \"\"\" Convert every input file from Markdown to HTML, and concatenate all them to an output.\"\"\"\n    printc(\"<green>Starting main, with:<white>\")\n    # FIXME printc does not handle UTF-8 correctly ! AAAH!\n    print(\"path='{path}', outfile='{outfile}'.\".format(path=path, outfile=outfile))\n    print(\"And the title is:\", title)\n    fullpath = os.path.join(path, outfile)",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "beta",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "beta = False\neraseFileAlreadyThere = False\ndef main(argv=[], path='/tmp', outfile='test.html', title='Test', use_jquery=False):\n    \"\"\" Convert every input file from Markdown to HTML, and concatenate all them to an output.\"\"\"\n    printc(\"<green>Starting main, with:<white>\")\n    # FIXME printc does not handle UTF-8 correctly ! AAAH!\n    print(\"path='{path}', outfile='{outfile}'.\".format(path=path, outfile=outfile))\n    print(\"And the title is:\", title)\n    fullpath = os.path.join(path, outfile)\n    printc(\"<magenta>The output file will be <white>'<u>{fullpath}<U>'.\".format(fullpath=fullpath))",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "eraseFileAlreadyThere",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "eraseFileAlreadyThere = False\ndef main(argv=[], path='/tmp', outfile='test.html', title='Test', use_jquery=False):\n    \"\"\" Convert every input file from Markdown to HTML, and concatenate all them to an output.\"\"\"\n    printc(\"<green>Starting main, with:<white>\")\n    # FIXME printc does not handle UTF-8 correctly ! AAAH!\n    print(\"path='{path}', outfile='{outfile}'.\".format(path=path, outfile=outfile))\n    print(\"And the title is:\", title)\n    fullpath = os.path.join(path, outfile)\n    printc(\"<magenta>The output file will be <white>'<u>{fullpath}<U>'.\".format(fullpath=fullpath))\n    with open(fullpath, \"w\") as html_file:",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "SIZE",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "SIZE = 3\n# 9x9 matrix of integer variables\nX = [\n     [ z3.Int(\"x_%s_%s\" % (i + 1, j + 1)) for j in range(SIZE**2) ]\n     for i in range(SIZE**2)\n]\n# each cell contains a value in {1, ..., 9}\ncells_c = [ z3.And(1 <= X[i][j], X[i][j] <= SIZE**2)\n            for i in range(SIZE**2)\n            for j in range(SIZE**2)",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "X",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "X = [\n     [ z3.Int(\"x_%s_%s\" % (i + 1, j + 1)) for j in range(SIZE**2) ]\n     for i in range(SIZE**2)\n]\n# each cell contains a value in {1, ..., 9}\ncells_c = [ z3.And(1 <= X[i][j], X[i][j] <= SIZE**2)\n            for i in range(SIZE**2)\n            for j in range(SIZE**2)\n          ]\n# each row contains a digit at most once",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "cells_c",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "cells_c = [ z3.And(1 <= X[i][j], X[i][j] <= SIZE**2)\n            for i in range(SIZE**2)\n            for j in range(SIZE**2)\n          ]\n# each row contains a digit at most once\nrows_c = [ z3.Distinct(X[i]) for i in range(SIZE**2) ]\n# each column contains a digit at most once\ncols_c = [ z3.Distinct( [ X[i][j] for i in range(SIZE**2) ] )\n           for j in range(SIZE**2)\n         ]",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "rows_c",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "rows_c = [ z3.Distinct(X[i]) for i in range(SIZE**2) ]\n# each column contains a digit at most once\ncols_c = [ z3.Distinct( [ X[i][j] for i in range(SIZE**2) ] )\n           for j in range(SIZE**2)\n         ]\n# each 3x3 square contains a digit at most once\nsq_c = [ z3.Distinct([ X[SIZE * i0 + i][SIZE * j0 + j]\n                       for i in range(SIZE)\n                                        for j in range(SIZE)\n                  ])",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "cols_c",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "cols_c = [ z3.Distinct( [ X[i][j] for i in range(SIZE**2) ] )\n           for j in range(SIZE**2)\n         ]\n# each 3x3 square contains a digit at most once\nsq_c = [ z3.Distinct([ X[SIZE * i0 + i][SIZE * j0 + j]\n                       for i in range(SIZE)\n                                        for j in range(SIZE)\n                  ])\n        for i0 in range(SIZE)\n        for j0 in range(SIZE)",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "sq_c",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "sq_c = [ z3.Distinct([ X[SIZE * i0 + i][SIZE * j0 + j]\n                       for i in range(SIZE)\n                                        for j in range(SIZE)\n                  ])\n        for i0 in range(SIZE)\n        for j0 in range(SIZE)\n       ]\nsudoku_c = cells_c + rows_c + cols_c + sq_c\n# sudoku instance, we use '0' for empty cells\nif SIZE != 3:",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "sudoku_c",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "sudoku_c = cells_c + rows_c + cols_c + sq_c\n# sudoku instance, we use '0' for empty cells\nif SIZE != 3:\n    print(\"TODO write an instance of size = {}.\".format(SIZE))\n    sys.exit(1)\ninstance = [[0, 0, 0, 0, 0, 0, 7, 0, 0],\n            [7, 3, 0, 0, 4, 0, 0, 0, 0],\n            [1, 0, 0, 7, 5, 0, 0, 3, 0],\n            [0, 0, 3, 2, 0, 5, 4, 0, 7],\n            [0, 0, 0, 9, 0, 8, 0, 0, 0],",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "instance",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "instance = [[0, 0, 0, 0, 0, 0, 7, 0, 0],\n            [7, 3, 0, 0, 4, 0, 0, 0, 0],\n            [1, 0, 0, 7, 5, 0, 0, 3, 0],\n            [0, 0, 3, 2, 0, 5, 4, 0, 7],\n            [0, 0, 0, 9, 0, 8, 0, 0, 0],\n            [2, 0, 7, 1, 0, 4, 5, 0, 0],\n            [0, 6, 0, 0, 8, 7, 0, 0, 4],\n            [0, 0, 0, 0, 9, 0, 0, 1, 3],\n            [0, 0, 2, 0, 0, 0, 0, 0, 0]]\ntry:",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "before",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "before = time.time()\ninstance_c = [ z3.If(instance[i][j] == 0, True, X[i][j] == instance[i][j])\n               for i in range(9) for j in range(9)\n             ]\ns = z3.Solver()\ns.add(sudoku_c + instance_c)\nif s.check() == z3.sat:\n    m = s.model()\n    after = time.time()\n    duration = after - before",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "instance_c",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "instance_c = [ z3.If(instance[i][j] == 0, True, X[i][j] == instance[i][j])\n               for i in range(9) for j in range(9)\n             ]\ns = z3.Solver()\ns.add(sudoku_c + instance_c)\nif s.check() == z3.sat:\n    m = s.model()\n    after = time.time()\n    duration = after - before\n    print(\"Solved in {:.4g} seconds.\".format(duration))",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "s",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "s = z3.Solver()\ns.add(sudoku_c + instance_c)\nif s.check() == z3.sat:\n    m = s.model()\n    after = time.time()\n    duration = after - before\n    print(\"Solved in {:.4g} seconds.\".format(duration))\n    r = [ [ m.evaluate(X[i][j]) for j in range(SIZE**2) ]\n            for i in range(SIZE**2) ]\n    z3.print_matrix(r)",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "__author__",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "__author__ = \"Paolo Borelli, Lilian BESSON <lbesson at ens-cachan dot fr> for Naereen CORP.\"\n__version__ = \"3.2.2\"\n__appname__ = \"gedit-terminal\"\n__app_disp_name__ = \"Gedit Embeded Terminal\"\n__website__ = \"https://sites.google.com/site/naereencorp/gedit/\"\nprint \".:[ Initializing %s, v%s. (c) %s ]:.\" % (__app_disp_name__, __version__, __author__)\nprint \".:[ Take a look at %s for more informations, or for the latest version of this piece of software. ]:.\" % (__website__)\nfrom gi.repository import GObject, GLib, Gio, Pango, Gdk, Gtk, Gedit, Vte\nimport os\nimport gettext",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "__version__",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "__version__ = \"3.2.2\"\n__appname__ = \"gedit-terminal\"\n__app_disp_name__ = \"Gedit Embeded Terminal\"\n__website__ = \"https://sites.google.com/site/naereencorp/gedit/\"\nprint \".:[ Initializing %s, v%s. (c) %s ]:.\" % (__app_disp_name__, __version__, __author__)\nprint \".:[ Take a look at %s for more informations, or for the latest version of this piece of software. ]:.\" % (__website__)\nfrom gi.repository import GObject, GLib, Gio, Pango, Gdk, Gtk, Gedit, Vte\nimport os\nimport gettext\nfrom gpdefs import *",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "__appname__",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "__appname__ = \"gedit-terminal\"\n__app_disp_name__ = \"Gedit Embeded Terminal\"\n__website__ = \"https://sites.google.com/site/naereencorp/gedit/\"\nprint \".:[ Initializing %s, v%s. (c) %s ]:.\" % (__app_disp_name__, __version__, __author__)\nprint \".:[ Take a look at %s for more informations, or for the latest version of this piece of software. ]:.\" % (__website__)\nfrom gi.repository import GObject, GLib, Gio, Pango, Gdk, Gtk, Gedit, Vte\nimport os\nimport gettext\nfrom gpdefs import *\nfrom signal import SIGTERM, SIGKILL",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "__app_disp_name__",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "__app_disp_name__ = \"Gedit Embeded Terminal\"\n__website__ = \"https://sites.google.com/site/naereencorp/gedit/\"\nprint \".:[ Initializing %s, v%s. (c) %s ]:.\" % (__app_disp_name__, __version__, __author__)\nprint \".:[ Take a look at %s for more informations, or for the latest version of this piece of software. ]:.\" % (__website__)\nfrom gi.repository import GObject, GLib, Gio, Pango, Gdk, Gtk, Gedit, Vte\nimport os\nimport gettext\nfrom gpdefs import *\nfrom signal import SIGTERM, SIGKILL\ntry:",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "__website__",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "__website__ = \"https://sites.google.com/site/naereencorp/gedit/\"\nprint \".:[ Initializing %s, v%s. (c) %s ]:.\" % (__app_disp_name__, __version__, __author__)\nprint \".:[ Take a look at %s for more informations, or for the latest version of this piece of software. ]:.\" % (__website__)\nfrom gi.repository import GObject, GLib, Gio, Pango, Gdk, Gtk, Gedit, Vte\nimport os\nimport gettext\nfrom gpdefs import *\nfrom signal import SIGTERM, SIGKILL\ntry:\n    gettext.bindtextdomain(GETTEXT_PACKAGE, GP_LOCALEDIR)",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "__author__",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "__author__ = \"Paolo Borelli, Lilian BESSON <lbesson at ens-cachan dot fr> for Naereen CORP.\"\n__version__ = \"3.2.3\"\n__appname__ = \"gedit-terminal2\"\n__app_disp_name__ = \"Gedit Embeded Terminal Lateral\"\n__website__ = \"https://sites.google.com/site/naereencorp/gedit/\"\nprint \".:[ Initializing %s, v%s. (c) %s ]:.\" % (__app_disp_name__, __version__, __author__)\nprint \".:[ Take a look at %s for more informations, or for the latest version of this piece of software. ]:.\" % (__website__)\nfrom gi.repository import GObject, GLib, Gio, Pango, Gdk, Gtk, Gedit, Vte\nimport os\nimport gettext",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "__version__",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "__version__ = \"3.2.3\"\n__appname__ = \"gedit-terminal2\"\n__app_disp_name__ = \"Gedit Embeded Terminal Lateral\"\n__website__ = \"https://sites.google.com/site/naereencorp/gedit/\"\nprint \".:[ Initializing %s, v%s. (c) %s ]:.\" % (__app_disp_name__, __version__, __author__)\nprint \".:[ Take a look at %s for more informations, or for the latest version of this piece of software. ]:.\" % (__website__)\nfrom gi.repository import GObject, GLib, Gio, Pango, Gdk, Gtk, Gedit, Vte\nimport os\nimport gettext\nfrom gpdefs import *",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "__appname__",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "__appname__ = \"gedit-terminal2\"\n__app_disp_name__ = \"Gedit Embeded Terminal Lateral\"\n__website__ = \"https://sites.google.com/site/naereencorp/gedit/\"\nprint \".:[ Initializing %s, v%s. (c) %s ]:.\" % (__app_disp_name__, __version__, __author__)\nprint \".:[ Take a look at %s for more informations, or for the latest version of this piece of software. ]:.\" % (__website__)\nfrom gi.repository import GObject, GLib, Gio, Pango, Gdk, Gtk, Gedit, Vte\nimport os\nimport gettext\nfrom gpdefs import *\nfrom signal import SIGTERM, SIGKILL",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "__app_disp_name__",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "__app_disp_name__ = \"Gedit Embeded Terminal Lateral\"\n__website__ = \"https://sites.google.com/site/naereencorp/gedit/\"\nprint \".:[ Initializing %s, v%s. (c) %s ]:.\" % (__app_disp_name__, __version__, __author__)\nprint \".:[ Take a look at %s for more informations, or for the latest version of this piece of software. ]:.\" % (__website__)\nfrom gi.repository import GObject, GLib, Gio, Pango, Gdk, Gtk, Gedit, Vte\nimport os\nimport gettext\nfrom gpdefs import *\nfrom signal import SIGTERM, SIGKILL\ntry:",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "__website__",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "__website__ = \"https://sites.google.com/site/naereencorp/gedit/\"\nprint \".:[ Initializing %s, v%s. (c) %s ]:.\" % (__app_disp_name__, __version__, __author__)\nprint \".:[ Take a look at %s for more informations, or for the latest version of this piece of software. ]:.\" % (__website__)\nfrom gi.repository import GObject, GLib, Gio, Pango, Gdk, Gtk, Gedit, Vte\nimport os\nimport gettext\nfrom gpdefs import *\nfrom signal import SIGTERM, SIGKILL\ntry:\n    gettext.bindtextdomain(GETTEXT_PACKAGE, GP_LOCALEDIR)",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "__author__",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "__author__ = \"Paolo Borelli, Lilian BESSON <lbesson at ens-cachan dot fr> for Naereen CORP.\"\n__version__ = \"3.2.3\"\n__appname__ = \"gedit-terminal3\"\n__app_disp_name__ = \"Gedit Embeded Terminal3\"\n__website__ = \"https://sites.google.com/site/naereencorp/gedit/\"\nprint \".:[ Initializing %s, v%s. (c) %s ]:.\" % (__app_disp_name__, __version__, __author__)\nprint \".:[ Take a look at %s for more informations, or for the latest version of this piece of software. ]:.\" % (__website__)\nfrom gi.repository import GObject, GLib, Gio, Pango, Gdk, Gtk, Gedit, Vte\nimport os\nimport gettext",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "__version__",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "__version__ = \"3.2.3\"\n__appname__ = \"gedit-terminal3\"\n__app_disp_name__ = \"Gedit Embeded Terminal3\"\n__website__ = \"https://sites.google.com/site/naereencorp/gedit/\"\nprint \".:[ Initializing %s, v%s. (c) %s ]:.\" % (__app_disp_name__, __version__, __author__)\nprint \".:[ Take a look at %s for more informations, or for the latest version of this piece of software. ]:.\" % (__website__)\nfrom gi.repository import GObject, GLib, Gio, Pango, Gdk, Gtk, Gedit, Vte\nimport os\nimport gettext\nfrom gpdefs import *",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "__appname__",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "__appname__ = \"gedit-terminal3\"\n__app_disp_name__ = \"Gedit Embeded Terminal3\"\n__website__ = \"https://sites.google.com/site/naereencorp/gedit/\"\nprint \".:[ Initializing %s, v%s. (c) %s ]:.\" % (__app_disp_name__, __version__, __author__)\nprint \".:[ Take a look at %s for more informations, or for the latest version of this piece of software. ]:.\" % (__website__)\nfrom gi.repository import GObject, GLib, Gio, Pango, Gdk, Gtk, Gedit, Vte\nimport os\nimport gettext\nfrom gpdefs import *\nfrom signal import SIGTERM, SIGKILL",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "__app_disp_name__",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "__app_disp_name__ = \"Gedit Embeded Terminal3\"\n__website__ = \"https://sites.google.com/site/naereencorp/gedit/\"\nprint \".:[ Initializing %s, v%s. (c) %s ]:.\" % (__app_disp_name__, __version__, __author__)\nprint \".:[ Take a look at %s for more informations, or for the latest version of this piece of software. ]:.\" % (__website__)\nfrom gi.repository import GObject, GLib, Gio, Pango, Gdk, Gtk, Gedit, Vte\nimport os\nimport gettext\nfrom gpdefs import *\nfrom signal import SIGTERM, SIGKILL\ntry:",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "__website__",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "__website__ = \"https://sites.google.com/site/naereencorp/gedit/\"\nprint \".:[ Initializing %s, v%s. (c) %s ]:.\" % (__app_disp_name__, __version__, __author__)\nprint \".:[ Take a look at %s for more informations, or for the latest version of this piece of software. ]:.\" % (__website__)\nfrom gi.repository import GObject, GLib, Gio, Pango, Gdk, Gtk, Gedit, Vte\nimport os\nimport gettext\nfrom gpdefs import *\nfrom signal import SIGTERM, SIGKILL\ntry:\n    gettext.bindtextdomain(GETTEXT_PACKAGE, GP_LOCALEDIR)",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "left",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "left = False\nright = True\ndef attach_direction(t, d=left):\n    \"\"\"Attach the direction d to all elements of array t.\"\"\"\n    return [(x, d) for x in t]\ndef remove_direction(t):\n    \"\"\"Remove the attached direction d to all elements of array t.\"\"\"\n    return [y for y, _ in t]\ndef swap(t, i, j):\n    \"\"\"Swap t[i] and t[j] in array t.\"\"\"",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "right",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "right = True\ndef attach_direction(t, d=left):\n    \"\"\"Attach the direction d to all elements of array t.\"\"\"\n    return [(x, d) for x in t]\ndef remove_direction(t):\n    \"\"\"Remove the attached direction d to all elements of array t.\"\"\"\n    return [y for y, _ in t]\ndef swap(t, i, j):\n    \"\"\"Swap t[i] and t[j] in array t.\"\"\"\n    t[i], t[j] = t[j], t[i]",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "url_finder",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "url_finder = re.compile(r'http[^\"]*')\nquery_finder = re.compile(r\"data.query = JSON.parse\\('\\{[^\\n]*\")\nsearchResponse_finder = re.compile(r\"data.searchResponse = JSON.parse\\('\\{[^\\n]*\")\n# url0 = \"http://www.voyages-sncf.com//vsc/train-ticket/?_LANG=fr&site_country=FR&site_language=fr&ORIGIN_CITY=Toulon&DESTINATION_CITY=Paris%20%28Toutes%20gares%20intramuros%29&OUTWARD_DATE=31/05/2016&OUTWARD_TIME=15&INWARD_DATE=&INWARD_TIME=7&COMFORT_CLASS=2&DISTRIBUTED_COUNTRY=FR&NB_TYPO_ADULT=1&bookingChoice=train&PASSENGER_1=YOUNG&PASSENGER_1_CARD=MI1ST&PASSENGER_1_FID_PROG=&PASSENGER_1FID_NUM_BEGIN=&CODE_PROMO_1=&action:searchTravel=Rechercher\"\n#URL_TEMPLATE = \"http://www.voyages-sncf.com//vsc/train-ticket/?_LANG=fr&site_country=FR&site_language=fr&ORIGIN_CITY={ORIGIN_CITY}&DESTINATION_CITY={DESTINATION_CITY}&OUTWARD_DATE={DATE}&OUTWARD_TIME={OUTWARD_TIME}&INWARD_DATE=&INWARD_TIME=7&COMFORT_CLASS=2&DISTRIBUTED_COUNTRY=FR&NB_TYPO_ADULT=1&bookingChoice=train&PASSENGER_1=YOUNG&PASSENGER_1_CARD=MI1ST&PASSENGER_1_FID_PROG=&PASSENGER_1FID_NUM_BEGIN=&CODE_PROMO_1=&action:searchTravel=Rechercher\"\nURL_TEMPLATE = 'https://www.oui.sncf/vsc/train-ticket/?_LANG=fr&ORIGIN_CITY={ORIGIN_CITY}&DESTINATION_CITY={DESTINATION_CITY}&OUTWARD_DATE={DATE}&OUTWARD_TIME={OUTWARD_TIME}&DIRECT_TRAVEL_CHECK=1&COMFORT_CLASS=2&PASSENGER_1=YOUNG&PASSENGER_1_CARD=&PASSENGER_1_FID_PROG=&PASSENGER_1FID_NUM_BEGIN=&CODE_PROMO_1=&PASSENGER_1_CARD_NUMBER=&PASSENGER_1_CARD_BIRTH_DATE=&action:searchTravelLaunchTrain=Rechercher'\n#EXEMPLE SANS CARTE PARTICULIERE TARIF NORMAL\n# url1 = 'http://www.voyages-sncf.com/vsc/proposals/findProposals?hid='\ndef main(url, MY_OUTWARD_TIME_MINI, MY_OUTWARD_TIME_MAXI=\"23:59\"):\n    \"\"\" Go to the page 'url', find the next link to got, then extract the JSON query result, find the wanted train, and display the results.",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "query_finder",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "query_finder = re.compile(r\"data.query = JSON.parse\\('\\{[^\\n]*\")\nsearchResponse_finder = re.compile(r\"data.searchResponse = JSON.parse\\('\\{[^\\n]*\")\n# url0 = \"http://www.voyages-sncf.com//vsc/train-ticket/?_LANG=fr&site_country=FR&site_language=fr&ORIGIN_CITY=Toulon&DESTINATION_CITY=Paris%20%28Toutes%20gares%20intramuros%29&OUTWARD_DATE=31/05/2016&OUTWARD_TIME=15&INWARD_DATE=&INWARD_TIME=7&COMFORT_CLASS=2&DISTRIBUTED_COUNTRY=FR&NB_TYPO_ADULT=1&bookingChoice=train&PASSENGER_1=YOUNG&PASSENGER_1_CARD=MI1ST&PASSENGER_1_FID_PROG=&PASSENGER_1FID_NUM_BEGIN=&CODE_PROMO_1=&action:searchTravel=Rechercher\"\n#URL_TEMPLATE = \"http://www.voyages-sncf.com//vsc/train-ticket/?_LANG=fr&site_country=FR&site_language=fr&ORIGIN_CITY={ORIGIN_CITY}&DESTINATION_CITY={DESTINATION_CITY}&OUTWARD_DATE={DATE}&OUTWARD_TIME={OUTWARD_TIME}&INWARD_DATE=&INWARD_TIME=7&COMFORT_CLASS=2&DISTRIBUTED_COUNTRY=FR&NB_TYPO_ADULT=1&bookingChoice=train&PASSENGER_1=YOUNG&PASSENGER_1_CARD=MI1ST&PASSENGER_1_FID_PROG=&PASSENGER_1FID_NUM_BEGIN=&CODE_PROMO_1=&action:searchTravel=Rechercher\"\nURL_TEMPLATE = 'https://www.oui.sncf/vsc/train-ticket/?_LANG=fr&ORIGIN_CITY={ORIGIN_CITY}&DESTINATION_CITY={DESTINATION_CITY}&OUTWARD_DATE={DATE}&OUTWARD_TIME={OUTWARD_TIME}&DIRECT_TRAVEL_CHECK=1&COMFORT_CLASS=2&PASSENGER_1=YOUNG&PASSENGER_1_CARD=&PASSENGER_1_FID_PROG=&PASSENGER_1FID_NUM_BEGIN=&CODE_PROMO_1=&PASSENGER_1_CARD_NUMBER=&PASSENGER_1_CARD_BIRTH_DATE=&action:searchTravelLaunchTrain=Rechercher'\n#EXEMPLE SANS CARTE PARTICULIERE TARIF NORMAL\n# url1 = 'http://www.voyages-sncf.com/vsc/proposals/findProposals?hid='\ndef main(url, MY_OUTWARD_TIME_MINI, MY_OUTWARD_TIME_MAXI=\"23:59\"):\n    \"\"\" Go to the page 'url', find the next link to got, then extract the JSON query result, find the wanted train, and display the results.\n    \"\"\"",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "searchResponse_finder",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "searchResponse_finder = re.compile(r\"data.searchResponse = JSON.parse\\('\\{[^\\n]*\")\n# url0 = \"http://www.voyages-sncf.com//vsc/train-ticket/?_LANG=fr&site_country=FR&site_language=fr&ORIGIN_CITY=Toulon&DESTINATION_CITY=Paris%20%28Toutes%20gares%20intramuros%29&OUTWARD_DATE=31/05/2016&OUTWARD_TIME=15&INWARD_DATE=&INWARD_TIME=7&COMFORT_CLASS=2&DISTRIBUTED_COUNTRY=FR&NB_TYPO_ADULT=1&bookingChoice=train&PASSENGER_1=YOUNG&PASSENGER_1_CARD=MI1ST&PASSENGER_1_FID_PROG=&PASSENGER_1FID_NUM_BEGIN=&CODE_PROMO_1=&action:searchTravel=Rechercher\"\n#URL_TEMPLATE = \"http://www.voyages-sncf.com//vsc/train-ticket/?_LANG=fr&site_country=FR&site_language=fr&ORIGIN_CITY={ORIGIN_CITY}&DESTINATION_CITY={DESTINATION_CITY}&OUTWARD_DATE={DATE}&OUTWARD_TIME={OUTWARD_TIME}&INWARD_DATE=&INWARD_TIME=7&COMFORT_CLASS=2&DISTRIBUTED_COUNTRY=FR&NB_TYPO_ADULT=1&bookingChoice=train&PASSENGER_1=YOUNG&PASSENGER_1_CARD=MI1ST&PASSENGER_1_FID_PROG=&PASSENGER_1FID_NUM_BEGIN=&CODE_PROMO_1=&action:searchTravel=Rechercher\"\nURL_TEMPLATE = 'https://www.oui.sncf/vsc/train-ticket/?_LANG=fr&ORIGIN_CITY={ORIGIN_CITY}&DESTINATION_CITY={DESTINATION_CITY}&OUTWARD_DATE={DATE}&OUTWARD_TIME={OUTWARD_TIME}&DIRECT_TRAVEL_CHECK=1&COMFORT_CLASS=2&PASSENGER_1=YOUNG&PASSENGER_1_CARD=&PASSENGER_1_FID_PROG=&PASSENGER_1FID_NUM_BEGIN=&CODE_PROMO_1=&PASSENGER_1_CARD_NUMBER=&PASSENGER_1_CARD_BIRTH_DATE=&action:searchTravelLaunchTrain=Rechercher'\n#EXEMPLE SANS CARTE PARTICULIERE TARIF NORMAL\n# url1 = 'http://www.voyages-sncf.com/vsc/proposals/findProposals?hid='\ndef main(url, MY_OUTWARD_TIME_MINI, MY_OUTWARD_TIME_MAXI=\"23:59\"):\n    \"\"\" Go to the page 'url', find the next link to got, then extract the JSON query result, find the wanted train, and display the results.\n    \"\"\"\n    MY_OUTWARD_TIME_MINI = MY_OUTWARD_TIME_MINI.replace('h', ':')",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "#URL_TEMPLATE",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "#URL_TEMPLATE = \"http://www.voyages-sncf.com//vsc/train-ticket/?_LANG=fr&site_country=FR&site_language=fr&ORIGIN_CITY={ORIGIN_CITY}&DESTINATION_CITY={DESTINATION_CITY}&OUTWARD_DATE={DATE}&OUTWARD_TIME={OUTWARD_TIME}&INWARD_DATE=&INWARD_TIME=7&COMFORT_CLASS=2&DISTRIBUTED_COUNTRY=FR&NB_TYPO_ADULT=1&bookingChoice=train&PASSENGER_1=YOUNG&PASSENGER_1_CARD=MI1ST&PASSENGER_1_FID_PROG=&PASSENGER_1FID_NUM_BEGIN=&CODE_PROMO_1=&action:searchTravel=Rechercher\"\nURL_TEMPLATE = 'https://www.oui.sncf/vsc/train-ticket/?_LANG=fr&ORIGIN_CITY={ORIGIN_CITY}&DESTINATION_CITY={DESTINATION_CITY}&OUTWARD_DATE={DATE}&OUTWARD_TIME={OUTWARD_TIME}&DIRECT_TRAVEL_CHECK=1&COMFORT_CLASS=2&PASSENGER_1=YOUNG&PASSENGER_1_CARD=&PASSENGER_1_FID_PROG=&PASSENGER_1FID_NUM_BEGIN=&CODE_PROMO_1=&PASSENGER_1_CARD_NUMBER=&PASSENGER_1_CARD_BIRTH_DATE=&action:searchTravelLaunchTrain=Rechercher'\n#EXEMPLE SANS CARTE PARTICULIERE TARIF NORMAL\n# url1 = 'http://www.voyages-sncf.com/vsc/proposals/findProposals?hid='\ndef main(url, MY_OUTWARD_TIME_MINI, MY_OUTWARD_TIME_MAXI=\"23:59\"):\n    \"\"\" Go to the page 'url', find the next link to got, then extract the JSON query result, find the wanted train, and display the results.\n    \"\"\"\n    MY_OUTWARD_TIME_MINI = MY_OUTWARD_TIME_MINI.replace('h', ':')\n    MY_OUTWARD_TIME_MAXI = MY_OUTWARD_TIME_MAXI.replace('h', ':')\n    # Create the web browser object",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "URL_TEMPLATE",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "URL_TEMPLATE = 'https://www.oui.sncf/vsc/train-ticket/?_LANG=fr&ORIGIN_CITY={ORIGIN_CITY}&DESTINATION_CITY={DESTINATION_CITY}&OUTWARD_DATE={DATE}&OUTWARD_TIME={OUTWARD_TIME}&DIRECT_TRAVEL_CHECK=1&COMFORT_CLASS=2&PASSENGER_1=YOUNG&PASSENGER_1_CARD=&PASSENGER_1_FID_PROG=&PASSENGER_1FID_NUM_BEGIN=&CODE_PROMO_1=&PASSENGER_1_CARD_NUMBER=&PASSENGER_1_CARD_BIRTH_DATE=&action:searchTravelLaunchTrain=Rechercher'\n#EXEMPLE SANS CARTE PARTICULIERE TARIF NORMAL\n# url1 = 'http://www.voyages-sncf.com/vsc/proposals/findProposals?hid='\ndef main(url, MY_OUTWARD_TIME_MINI, MY_OUTWARD_TIME_MAXI=\"23:59\"):\n    \"\"\" Go to the page 'url', find the next link to got, then extract the JSON query result, find the wanted train, and display the results.\n    \"\"\"\n    MY_OUTWARD_TIME_MINI = MY_OUTWARD_TIME_MINI.replace('h', ':')\n    MY_OUTWARD_TIME_MAXI = MY_OUTWARD_TIME_MAXI.replace('h', ':')\n    # Create the web browser object\n    b = RB(history=True, allow_redirects=True)",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "language_default",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "language_default = os.getenv(\"LANG\")[0:2]\ndef lang_to_text(lang, exception=False):\n    \"\"\" lang_to_text(lang, exception=False) -> str\nConvert a Wikipédia language code (two letters) to a English version of the language.\nExample:\n>>> lang_to_text(\"en\")\n'english'\n>>> lang_to_text(\"fr\")\n'french'\n    \"\"\"",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "latest",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "latest = 30  # also 60 or 90 are available\ntemplate_url_default = \"http://stats.grok.se/json/{language}/latest{latest}/{page}\"\ntemplate_output_default = \"{page}.{language}.json\"\ndef download_json(page=\"JSON\", language=language_default,\n                  template_output=template_output_default,\n                  template_url=template_url_default):\n    \"\"\" download_json(page=\"JSON\", template_output=template_output_default,                  language=language_default, template_url=templateurl_default) -> str\nDownload a JSON file.\n@page: tell which Wikipédia page to lookup to.\n@template_output: template string for the output JSON (.json) file.",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "template_url_default",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "template_url_default = \"http://stats.grok.se/json/{language}/latest{latest}/{page}\"\ntemplate_output_default = \"{page}.{language}.json\"\ndef download_json(page=\"JSON\", language=language_default,\n                  template_output=template_output_default,\n                  template_url=template_url_default):\n    \"\"\" download_json(page=\"JSON\", template_output=template_output_default,                  language=language_default, template_url=templateurl_default) -> str\nDownload a JSON file.\n@page: tell which Wikipédia page to lookup to.\n@template_output: template string for the output JSON (.json) file.\n@language: language to use for downloading the JSON.",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "template_output_default",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "template_output_default = \"{page}.{language}.json\"\ndef download_json(page=\"JSON\", language=language_default,\n                  template_output=template_output_default,\n                  template_url=template_url_default):\n    \"\"\" download_json(page=\"JSON\", template_output=template_output_default,                  language=language_default, template_url=templateurl_default) -> str\nDownload a JSON file.\n@page: tell which Wikipédia page to lookup to.\n@template_output: template string for the output JSON (.json) file.\n@language: language to use for downloading the JSON.\n@template_url: online page to use a format to download the JSON.",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "logging.getLogger('scrapy').propagate",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "logging.getLogger('scrapy').propagate = False\nlogging.getLogger('scrapy.utils').propagate = False\nclass QuotesSpider(scrapy.Spider):\n    \"\"\"Small scrapy Spider.\"\"\"\n    name = \"Watch Later\"\n    start_urls = [\n        'file:///tmp/wl.html'\n    ]\n    custom_settings = {\n    \t\"LOG_ENABLED\": False,",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "logging.getLogger('scrapy.utils').propagate",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "logging.getLogger('scrapy.utils').propagate = False\nclass QuotesSpider(scrapy.Spider):\n    \"\"\"Small scrapy Spider.\"\"\"\n    name = \"Watch Later\"\n    start_urls = [\n        'file:///tmp/wl.html'\n    ]\n    custom_settings = {\n    \t\"LOG_ENABLED\": False,\n    \t\"LOG_LEVEL\": 'ERROR',",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "__author__",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "__author__ = \"Lilian Besson\"\n__name_of_app__ = \"Battle Client\"\n__version__ = \"0.1\"\nimport sys\nfrom collections import defaultdict\nfrom time import sleep\nfrom random import choice\nfrom docopt import docopt\nimport numpy as np\n# https://stackoverflow.com/a/4896288/5889533",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "__name_of_app__",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "__name_of_app__ = \"Battle Client\"\n__version__ = \"0.1\"\nimport sys\nfrom collections import defaultdict\nfrom time import sleep\nfrom random import choice\nfrom docopt import docopt\nimport numpy as np\n# https://stackoverflow.com/a/4896288/5889533\nfrom subprocess import PIPE, Popen",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "__version__",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "__version__ = \"0.1\"\nimport sys\nfrom collections import defaultdict\nfrom time import sleep\nfrom random import choice\nfrom docopt import docopt\nimport numpy as np\n# https://stackoverflow.com/a/4896288/5889533\nfrom subprocess import PIPE, Popen\nON_POSIX = 'posix' in sys.builtin_module_names",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "ON_POSIX",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "ON_POSIX = 'posix' in sys.builtin_module_names\nfrom battleserver import ships, DEFAULT_X, DEFAULT_Y\nlength_of_ships = defaultdict(lambda: min(ships.values()))\nlength_of_ships.update({k.lower(): v for k,v in ships.items()})\n# --- Documentation\ndocumentation = f\"\"\"{__name_of_app__}.\nUsage:\n    battleplayer.py [--delay=<t>] [--smart] [--size=<xy>] [--server_command=<cmd>]\n    battleplayer.py (-h | --help)\n    battleplayer.py --version",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "length_of_ships",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "length_of_ships = defaultdict(lambda: min(ships.values()))\nlength_of_ships.update({k.lower(): v for k,v in ships.items()})\n# --- Documentation\ndocumentation = f\"\"\"{__name_of_app__}.\nUsage:\n    battleplayer.py [--delay=<t>] [--smart] [--size=<xy>] [--server_command=<cmd>]\n    battleplayer.py (-h | --help)\n    battleplayer.py --version\nOptions:\n    -h --help       Show this screen.",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "documentation",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.pyutils",
    "description": "MY_GISTS.8b2c5f97ac.pyutils",
    "peekOfCode": "documentation = f\"\"\"{__name_of_app__}.\nUsage:\n    battleplayer.py [--delay=<t>] [--smart] [--size=<xy>] [--server_command=<cmd>]\n    battleplayer.py (-h | --help)\n    battleplayer.py --version\nOptions:\n    -h --help       Show this screen.\n    --version       Show version.\n    --server_command=<cmd>  Play against a server launched by 'cmd' [default: ./battleserver.py --random --play].\n    --size=<xy>     Set size of the board [default: {DEFAULT_X},{DEFAULT_Y}].",
    "detail": "MY_GISTS.8b2c5f97ac.pyutils",
    "documentation": {}
  },
  {
    "label": "Q",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.queen",
    "description": "MY_GISTS.8b2c5f97ac.queen",
    "peekOfCode": "Q = [ Int('Q_%i' % (i + 1)) for i in range(8) ]\n# Each queen is in a column {1, ... 8 }\nval_c = [ And(1 <= Q[i], Q[i] <= 8) for i in range(8) ]\n# At most one queen per column\ncol_c = [ Distinct(Q) ]\n# Diagonal constraint\ndiag_c = [ If(i == j,\n              True,\n              And(Q[i] - Q[j] != i - j, Q[i] - Q[j] != j - i))\n           for i in range(8) for j in range(i) ]",
    "detail": "MY_GISTS.8b2c5f97ac.queen",
    "documentation": {}
  },
  {
    "label": "val_c",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.queen",
    "description": "MY_GISTS.8b2c5f97ac.queen",
    "peekOfCode": "val_c = [ And(1 <= Q[i], Q[i] <= 8) for i in range(8) ]\n# At most one queen per column\ncol_c = [ Distinct(Q) ]\n# Diagonal constraint\ndiag_c = [ If(i == j,\n              True,\n              And(Q[i] - Q[j] != i - j, Q[i] - Q[j] != j - i))\n           for i in range(8) for j in range(i) ]\nsolve(val_c + col_c + diag_c)",
    "detail": "MY_GISTS.8b2c5f97ac.queen",
    "documentation": {}
  },
  {
    "label": "col_c",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.queen",
    "description": "MY_GISTS.8b2c5f97ac.queen",
    "peekOfCode": "col_c = [ Distinct(Q) ]\n# Diagonal constraint\ndiag_c = [ If(i == j,\n              True,\n              And(Q[i] - Q[j] != i - j, Q[i] - Q[j] != j - i))\n           for i in range(8) for j in range(i) ]\nsolve(val_c + col_c + diag_c)",
    "detail": "MY_GISTS.8b2c5f97ac.queen",
    "documentation": {}
  },
  {
    "label": "diag_c",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.queen",
    "description": "MY_GISTS.8b2c5f97ac.queen",
    "peekOfCode": "diag_c = [ If(i == j,\n              True,\n              And(Q[i] - Q[j] != i - j, Q[i] - Q[j] != j - i))\n           for i in range(8) for j in range(i) ]\nsolve(val_c + col_c + diag_c)",
    "detail": "MY_GISTS.8b2c5f97ac.queen",
    "documentation": {}
  },
  {
    "label": "markov",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.random_latin_citation",
    "description": "MY_GISTS.8b2c5f97ac.random_latin_citation",
    "peekOfCode": "def markov(corpus, start, length):\n    # Counting occurrences\n    next_one = defaultdict(Counter)\n    for sentence in corpus:\n        words = sentence.split()\n        nb_words = len(words)\n        for i in range(nb_words - 1):\n            next_one[words[i]][words[i + 1]] += 1\n    # Initializing states\n    states = {}",
    "detail": "MY_GISTS.8b2c5f97ac.random_latin_citation",
    "documentation": {}
  },
  {
    "label": "WORD_LIST",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.random_latin_citation",
    "description": "MY_GISTS.8b2c5f97ac.random_latin_citation",
    "peekOfCode": "WORD_LIST = '/home/lilian/bin/latin.txt'\ndef markov(corpus, start, length):\n    # Counting occurrences\n    next_one = defaultdict(Counter)\n    for sentence in corpus:\n        words = sentence.split()\n        nb_words = len(words)\n        for i in range(nb_words - 1):\n            next_one[words[i]][words[i + 1]] += 1\n    # Initializing states",
    "detail": "MY_GISTS.8b2c5f97ac.random_latin_citation",
    "documentation": {}
  },
  {
    "label": "description",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.rst2md",
    "description": "MY_GISTS.8b2c5f97ac.rst2md",
    "peekOfCode": "description = ('Generates Markdown formatted text from standalone '\n               'reStructuredText sources.  ' + default_description)\npublish_cmdline(writer=markdown.Writer(), description=description)",
    "detail": "MY_GISTS.8b2c5f97ac.rst2md",
    "documentation": {}
  },
  {
    "label": "MINUTE",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.sleep-poisson-time",
    "description": "MY_GISTS.8b2c5f97ac.sleep-poisson-time",
    "peekOfCode": "MINUTE = 60\nMEAN_TIME = 3 * MINUTE\n# --- Main script\nif __name__ == '__main__':\n    mean_time = int(sys.argv[1]) if len(sys.argv) > 1 else MEAN_TIME\n    waiting_time = poisson(mean_time)\n    print(\"Sleeping for {:.3g} seconds ...\".format(waiting_time))  # DEBUG\n    sys.exit(sleep(waiting_time))\n# End of sleep-poisson-time.py",
    "detail": "MY_GISTS.8b2c5f97ac.sleep-poisson-time",
    "documentation": {}
  },
  {
    "label": "MEAN_TIME",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.sleep-poisson-time",
    "description": "MY_GISTS.8b2c5f97ac.sleep-poisson-time",
    "peekOfCode": "MEAN_TIME = 3 * MINUTE\n# --- Main script\nif __name__ == '__main__':\n    mean_time = int(sys.argv[1]) if len(sys.argv) > 1 else MEAN_TIME\n    waiting_time = poisson(mean_time)\n    print(\"Sleeping for {:.3g} seconds ...\".format(waiting_time))  # DEBUG\n    sys.exit(sleep(waiting_time))\n# End of sleep-poisson-time.py",
    "detail": "MY_GISTS.8b2c5f97ac.sleep-poisson-time",
    "documentation": {}
  },
  {
    "label": "smooth_nojit",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.smooth_filter_nojit_and_jit",
    "description": "MY_GISTS.8b2c5f97ac.smooth_filter_nojit_and_jit",
    "peekOfCode": "def smooth_nojit(u, a):\n    y = np.zeros_like(u)\n    y[0] = (1-a)*u[0]\n    for k in range(1, len(u)):\n        y[k] = a*y[k-1] + (1-a)*u[k]\n    return y\nsmooth_jit = numba.jit(smooth_nojit)\n# <- factor ×100 speed-up!\nif __name__ == '__main__':\n    print(\"For 1e6 points...\")",
    "detail": "MY_GISTS.8b2c5f97ac.smooth_filter_nojit_and_jit",
    "documentation": {}
  },
  {
    "label": "smooth_jit",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.smooth_filter_nojit_and_jit",
    "description": "MY_GISTS.8b2c5f97ac.smooth_filter_nojit_and_jit",
    "peekOfCode": "smooth_jit = numba.jit(smooth_nojit)\n# <- factor ×100 speed-up!\nif __name__ == '__main__':\n    print(\"For 1e6 points...\")\n    u = np.random.randn(int(1e6), 1)\n    a = 0.95\n    start = time()\n    smooth_nojit(u, a)\n    print(f\"No jit: {time() - start:.3g} seconds\")\n    start = time()",
    "detail": "MY_GISTS.8b2c5f97ac.smooth_filter_nojit_and_jit",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.strapdown2html",
    "description": "MY_GISTS.8b2c5f97ac.strapdown2html",
    "peekOfCode": "def main(argv=[], path='/tmp', outfile='test.html', title='Test', use_jquery=False):\n    \"\"\" Convert every input file from Markdown to HTML, and concatenate all them to an output.\"\"\"\n    printc(\"<green>Starting main, with:<white>\")\n    # FIXME printc does not handle UTF-8 correctly ! AAAH!\n    print(\"path='{path}', outfile='{outfile}'.\".format(path=path, outfile=outfile))\n    print(\"And the title is:\", title)\n    fullpath = os.path.join(path, outfile)\n    printc(\"<magenta>The output file will be <white>'<u>{fullpath}<U>'.\".format(fullpath=fullpath))\n    with open(fullpath, \"w\") as html_file:\n        html_file = codecs.getwriter('utf-8')(html_file)",
    "detail": "MY_GISTS.8b2c5f97ac.strapdown2html",
    "documentation": {}
  },
  {
    "label": "__author__",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.strapdown2html",
    "description": "MY_GISTS.8b2c5f97ac.strapdown2html",
    "peekOfCode": "__author__ = \"Lilian Besson\"\n__version__ = \"0.3.1\"\n# TODO: improve conformity with StrapDown.js Markdown parser:\n# nested list for instance, generic source code printer etc.\ntry:\n    try:\n        # Load ansicolortags (Cf. http://ansicolortags.readthedocs.io/)\n        from ansicolortags import printc\n    except ImportError as e:\n        print(\"Optional dependancy (ansicolortags) is not available, using regular print function.\")",
    "detail": "MY_GISTS.8b2c5f97ac.strapdown2html",
    "documentation": {}
  },
  {
    "label": "__version__",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.strapdown2html",
    "description": "MY_GISTS.8b2c5f97ac.strapdown2html",
    "peekOfCode": "__version__ = \"0.3.1\"\n# TODO: improve conformity with StrapDown.js Markdown parser:\n# nested list for instance, generic source code printer etc.\ntry:\n    try:\n        # Load ansicolortags (Cf. http://ansicolortags.readthedocs.io/)\n        from ansicolortags import printc\n    except ImportError as e:\n        print(\"Optional dependancy (ansicolortags) is not available, using regular print function.\")\n        print(\"  You can install it with : 'pip install ansicolortags' (or sudo pip)...\")",
    "detail": "MY_GISTS.8b2c5f97ac.strapdown2html",
    "documentation": {}
  },
  {
    "label": "sys.stdout",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.strapdown2html",
    "description": "MY_GISTS.8b2c5f97ac.strapdown2html",
    "peekOfCode": "sys.stdout = codecs.getwriter('utf-8')(sys.stdout)\nbeta = False\neraseFileAlreadyThere = False\ndef main(argv=[], path='/tmp', outfile='test.html', title='Test', use_jquery=False):\n    \"\"\" Convert every input file from Markdown to HTML, and concatenate all them to an output.\"\"\"\n    printc(\"<green>Starting main, with:<white>\")\n    # FIXME printc does not handle UTF-8 correctly ! AAAH!\n    print(\"path='{path}', outfile='{outfile}'.\".format(path=path, outfile=outfile))\n    print(\"And the title is:\", title)\n    fullpath = os.path.join(path, outfile)",
    "detail": "MY_GISTS.8b2c5f97ac.strapdown2html",
    "documentation": {}
  },
  {
    "label": "beta",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.strapdown2html",
    "description": "MY_GISTS.8b2c5f97ac.strapdown2html",
    "peekOfCode": "beta = False\neraseFileAlreadyThere = False\ndef main(argv=[], path='/tmp', outfile='test.html', title='Test', use_jquery=False):\n    \"\"\" Convert every input file from Markdown to HTML, and concatenate all them to an output.\"\"\"\n    printc(\"<green>Starting main, with:<white>\")\n    # FIXME printc does not handle UTF-8 correctly ! AAAH!\n    print(\"path='{path}', outfile='{outfile}'.\".format(path=path, outfile=outfile))\n    print(\"And the title is:\", title)\n    fullpath = os.path.join(path, outfile)\n    printc(\"<magenta>The output file will be <white>'<u>{fullpath}<U>'.\".format(fullpath=fullpath))",
    "detail": "MY_GISTS.8b2c5f97ac.strapdown2html",
    "documentation": {}
  },
  {
    "label": "eraseFileAlreadyThere",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.strapdown2html",
    "description": "MY_GISTS.8b2c5f97ac.strapdown2html",
    "peekOfCode": "eraseFileAlreadyThere = False\ndef main(argv=[], path='/tmp', outfile='test.html', title='Test', use_jquery=False):\n    \"\"\" Convert every input file from Markdown to HTML, and concatenate all them to an output.\"\"\"\n    printc(\"<green>Starting main, with:<white>\")\n    # FIXME printc does not handle UTF-8 correctly ! AAAH!\n    print(\"path='{path}', outfile='{outfile}'.\".format(path=path, outfile=outfile))\n    print(\"And the title is:\", title)\n    fullpath = os.path.join(path, outfile)\n    printc(\"<magenta>The output file will be <white>'<u>{fullpath}<U>'.\".format(fullpath=fullpath))\n    with open(fullpath, \"w\") as html_file:",
    "detail": "MY_GISTS.8b2c5f97ac.strapdown2html",
    "documentation": {}
  },
  {
    "label": "SIZE",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.sudoku",
    "description": "MY_GISTS.8b2c5f97ac.sudoku",
    "peekOfCode": "SIZE = 3\n# 9x9 matrix of integer variables\nX = [\n     [ z3.Int(\"x_%s_%s\" % (i + 1, j + 1)) for j in range(SIZE**2) ]\n     for i in range(SIZE**2)\n]\n# each cell contains a value in {1, ..., 9}\ncells_c = [ z3.And(1 <= X[i][j], X[i][j] <= SIZE**2)\n            for i in range(SIZE**2)\n            for j in range(SIZE**2)",
    "detail": "MY_GISTS.8b2c5f97ac.sudoku",
    "documentation": {}
  },
  {
    "label": "X",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.sudoku",
    "description": "MY_GISTS.8b2c5f97ac.sudoku",
    "peekOfCode": "X = [\n     [ z3.Int(\"x_%s_%s\" % (i + 1, j + 1)) for j in range(SIZE**2) ]\n     for i in range(SIZE**2)\n]\n# each cell contains a value in {1, ..., 9}\ncells_c = [ z3.And(1 <= X[i][j], X[i][j] <= SIZE**2)\n            for i in range(SIZE**2)\n            for j in range(SIZE**2)\n          ]\n# each row contains a digit at most once",
    "detail": "MY_GISTS.8b2c5f97ac.sudoku",
    "documentation": {}
  },
  {
    "label": "cells_c",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.sudoku",
    "description": "MY_GISTS.8b2c5f97ac.sudoku",
    "peekOfCode": "cells_c = [ z3.And(1 <= X[i][j], X[i][j] <= SIZE**2)\n            for i in range(SIZE**2)\n            for j in range(SIZE**2)\n          ]\n# each row contains a digit at most once\nrows_c = [ z3.Distinct(X[i]) for i in range(SIZE**2) ]\n# each column contains a digit at most once\ncols_c = [ z3.Distinct( [ X[i][j] for i in range(SIZE**2) ] )\n           for j in range(SIZE**2)\n         ]",
    "detail": "MY_GISTS.8b2c5f97ac.sudoku",
    "documentation": {}
  },
  {
    "label": "rows_c",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.sudoku",
    "description": "MY_GISTS.8b2c5f97ac.sudoku",
    "peekOfCode": "rows_c = [ z3.Distinct(X[i]) for i in range(SIZE**2) ]\n# each column contains a digit at most once\ncols_c = [ z3.Distinct( [ X[i][j] for i in range(SIZE**2) ] )\n           for j in range(SIZE**2)\n         ]\n# each 3x3 square contains a digit at most once\nsq_c = [ z3.Distinct([ X[SIZE * i0 + i][SIZE * j0 + j]\n                       for i in range(SIZE)\n                                        for j in range(SIZE)\n                  ])",
    "detail": "MY_GISTS.8b2c5f97ac.sudoku",
    "documentation": {}
  },
  {
    "label": "cols_c",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.sudoku",
    "description": "MY_GISTS.8b2c5f97ac.sudoku",
    "peekOfCode": "cols_c = [ z3.Distinct( [ X[i][j] for i in range(SIZE**2) ] )\n           for j in range(SIZE**2)\n         ]\n# each 3x3 square contains a digit at most once\nsq_c = [ z3.Distinct([ X[SIZE * i0 + i][SIZE * j0 + j]\n                       for i in range(SIZE)\n                                        for j in range(SIZE)\n                  ])\n        for i0 in range(SIZE)\n        for j0 in range(SIZE)",
    "detail": "MY_GISTS.8b2c5f97ac.sudoku",
    "documentation": {}
  },
  {
    "label": "sq_c",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.sudoku",
    "description": "MY_GISTS.8b2c5f97ac.sudoku",
    "peekOfCode": "sq_c = [ z3.Distinct([ X[SIZE * i0 + i][SIZE * j0 + j]\n                       for i in range(SIZE)\n                                        for j in range(SIZE)\n                  ])\n        for i0 in range(SIZE)\n        for j0 in range(SIZE)\n       ]\nsudoku_c = cells_c + rows_c + cols_c + sq_c\n# sudoku instance, we use '0' for empty cells\nif SIZE != 3:",
    "detail": "MY_GISTS.8b2c5f97ac.sudoku",
    "documentation": {}
  },
  {
    "label": "sudoku_c",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.sudoku",
    "description": "MY_GISTS.8b2c5f97ac.sudoku",
    "peekOfCode": "sudoku_c = cells_c + rows_c + cols_c + sq_c\n# sudoku instance, we use '0' for empty cells\nif SIZE != 3:\n    print(\"TODO write an instance of size = {}.\".format(SIZE))\n    sys.exit(1)\ninstance = [[0, 0, 0, 0, 0, 0, 7, 0, 0],\n            [7, 3, 0, 0, 4, 0, 0, 0, 0],\n            [1, 0, 0, 7, 5, 0, 0, 3, 0],\n            [0, 0, 3, 2, 0, 5, 4, 0, 7],\n            [0, 0, 0, 9, 0, 8, 0, 0, 0],",
    "detail": "MY_GISTS.8b2c5f97ac.sudoku",
    "documentation": {}
  },
  {
    "label": "instance",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.sudoku",
    "description": "MY_GISTS.8b2c5f97ac.sudoku",
    "peekOfCode": "instance = [[0, 0, 0, 0, 0, 0, 7, 0, 0],\n            [7, 3, 0, 0, 4, 0, 0, 0, 0],\n            [1, 0, 0, 7, 5, 0, 0, 3, 0],\n            [0, 0, 3, 2, 0, 5, 4, 0, 7],\n            [0, 0, 0, 9, 0, 8, 0, 0, 0],\n            [2, 0, 7, 1, 0, 4, 5, 0, 0],\n            [0, 6, 0, 0, 8, 7, 0, 0, 4],\n            [0, 0, 0, 0, 9, 0, 0, 1, 3],\n            [0, 0, 2, 0, 0, 0, 0, 0, 0]]\ntry:",
    "detail": "MY_GISTS.8b2c5f97ac.sudoku",
    "documentation": {}
  },
  {
    "label": "before",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.sudoku",
    "description": "MY_GISTS.8b2c5f97ac.sudoku",
    "peekOfCode": "before = time.time()\ninstance_c = [ z3.If(instance[i][j] == 0, True, X[i][j] == instance[i][j])\n               for i in range(9) for j in range(9)\n             ]\ns = z3.Solver()\ns.add(sudoku_c + instance_c)\nif s.check() == z3.sat:\n    m = s.model()\n    after = time.time()\n    duration = after - before",
    "detail": "MY_GISTS.8b2c5f97ac.sudoku",
    "documentation": {}
  },
  {
    "label": "instance_c",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.sudoku",
    "description": "MY_GISTS.8b2c5f97ac.sudoku",
    "peekOfCode": "instance_c = [ z3.If(instance[i][j] == 0, True, X[i][j] == instance[i][j])\n               for i in range(9) for j in range(9)\n             ]\ns = z3.Solver()\ns.add(sudoku_c + instance_c)\nif s.check() == z3.sat:\n    m = s.model()\n    after = time.time()\n    duration = after - before\n    print(\"Solved in {:.4g} seconds.\".format(duration))",
    "detail": "MY_GISTS.8b2c5f97ac.sudoku",
    "documentation": {}
  },
  {
    "label": "s",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.sudoku",
    "description": "MY_GISTS.8b2c5f97ac.sudoku",
    "peekOfCode": "s = z3.Solver()\ns.add(sudoku_c + instance_c)\nif s.check() == z3.sat:\n    m = s.model()\n    after = time.time()\n    duration = after - before\n    print(\"Solved in {:.4g} seconds.\".format(duration))\n    r = [ [ m.evaluate(X[i][j]) for j in range(SIZE**2) ]\n            for i in range(SIZE**2) ]\n    z3.print_matrix(r)",
    "detail": "MY_GISTS.8b2c5f97ac.sudoku",
    "documentation": {}
  },
  {
    "label": "GeditTerminal",
    "kind": 6,
    "importPath": "MY_GISTS.8b2c5f97ac.terminal",
    "description": "MY_GISTS.8b2c5f97ac.terminal",
    "peekOfCode": "class GeditTerminal(Gtk.Box):\n    \"\"\"VTE terminal which follows gnome-terminal default profile options\"\"\"\n    __gsignals__ = {\n        \"populate-popup\": (\n            GObject.SIGNAL_RUN_LAST,\n            None,\n            (GObject.TYPE_OBJECT,)\n        )\n    }\n    defaults = {",
    "detail": "MY_GISTS.8b2c5f97ac.terminal",
    "documentation": {}
  },
  {
    "label": "TerminalPlugin",
    "kind": 6,
    "importPath": "MY_GISTS.8b2c5f97ac.terminal",
    "description": "MY_GISTS.8b2c5f97ac.terminal",
    "peekOfCode": "class TerminalPlugin(GObject.Object, Gedit.WindowActivatable):\n    __gtype_name__ = \"TerminalPlugin\"\n    window = GObject.property(type=Gedit.Window)\n    def __init__(self):\n        GObject.Object.__init__(self)\n    def do_activate(self):\n        self._panel = GeditTerminal()\n        self._panel.connect(\"populate-popup\", self.on_panel_populate_popup)\n        self._panel.show()\n        image = Gtk.Image.new_from_icon_name(\"utilities-terminal\", Gtk.IconSize.MENU)",
    "detail": "MY_GISTS.8b2c5f97ac.terminal",
    "documentation": {}
  },
  {
    "label": "__author__",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.terminal",
    "description": "MY_GISTS.8b2c5f97ac.terminal",
    "peekOfCode": "__author__ = \"Paolo Borelli, Lilian BESSON <lbesson at ens-cachan dot fr> for Naereen CORP.\"\n__version__ = \"3.2.2\"\n__appname__ = \"gedit-terminal\"\n__app_disp_name__ = \"Gedit Embeded Terminal\"\n__website__ = \"https://sites.google.com/site/naereencorp/gedit/\"\nprint \".:[ Initializing %s, v%s. (c) %s ]:.\" % (__app_disp_name__, __version__, __author__)\nprint \".:[ Take a look at %s for more informations, or for the latest version of this piece of software. ]:.\" % (__website__)\nfrom gi.repository import GObject, GLib, Gio, Pango, Gdk, Gtk, Gedit, Vte\nimport os\nimport gettext",
    "detail": "MY_GISTS.8b2c5f97ac.terminal",
    "documentation": {}
  },
  {
    "label": "__version__",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.terminal",
    "description": "MY_GISTS.8b2c5f97ac.terminal",
    "peekOfCode": "__version__ = \"3.2.2\"\n__appname__ = \"gedit-terminal\"\n__app_disp_name__ = \"Gedit Embeded Terminal\"\n__website__ = \"https://sites.google.com/site/naereencorp/gedit/\"\nprint \".:[ Initializing %s, v%s. (c) %s ]:.\" % (__app_disp_name__, __version__, __author__)\nprint \".:[ Take a look at %s for more informations, or for the latest version of this piece of software. ]:.\" % (__website__)\nfrom gi.repository import GObject, GLib, Gio, Pango, Gdk, Gtk, Gedit, Vte\nimport os\nimport gettext\nfrom gpdefs import *",
    "detail": "MY_GISTS.8b2c5f97ac.terminal",
    "documentation": {}
  },
  {
    "label": "__appname__",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.terminal",
    "description": "MY_GISTS.8b2c5f97ac.terminal",
    "peekOfCode": "__appname__ = \"gedit-terminal\"\n__app_disp_name__ = \"Gedit Embeded Terminal\"\n__website__ = \"https://sites.google.com/site/naereencorp/gedit/\"\nprint \".:[ Initializing %s, v%s. (c) %s ]:.\" % (__app_disp_name__, __version__, __author__)\nprint \".:[ Take a look at %s for more informations, or for the latest version of this piece of software. ]:.\" % (__website__)\nfrom gi.repository import GObject, GLib, Gio, Pango, Gdk, Gtk, Gedit, Vte\nimport os\nimport gettext\nfrom gpdefs import *\nfrom signal import SIGTERM, SIGKILL",
    "detail": "MY_GISTS.8b2c5f97ac.terminal",
    "documentation": {}
  },
  {
    "label": "__app_disp_name__",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.terminal",
    "description": "MY_GISTS.8b2c5f97ac.terminal",
    "peekOfCode": "__app_disp_name__ = \"Gedit Embeded Terminal\"\n__website__ = \"https://sites.google.com/site/naereencorp/gedit/\"\nprint \".:[ Initializing %s, v%s. (c) %s ]:.\" % (__app_disp_name__, __version__, __author__)\nprint \".:[ Take a look at %s for more informations, or for the latest version of this piece of software. ]:.\" % (__website__)\nfrom gi.repository import GObject, GLib, Gio, Pango, Gdk, Gtk, Gedit, Vte\nimport os\nimport gettext\nfrom gpdefs import *\nfrom signal import SIGTERM, SIGKILL\ntry:",
    "detail": "MY_GISTS.8b2c5f97ac.terminal",
    "documentation": {}
  },
  {
    "label": "__website__",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.terminal",
    "description": "MY_GISTS.8b2c5f97ac.terminal",
    "peekOfCode": "__website__ = \"https://sites.google.com/site/naereencorp/gedit/\"\nprint \".:[ Initializing %s, v%s. (c) %s ]:.\" % (__app_disp_name__, __version__, __author__)\nprint \".:[ Take a look at %s for more informations, or for the latest version of this piece of software. ]:.\" % (__website__)\nfrom gi.repository import GObject, GLib, Gio, Pango, Gdk, Gtk, Gedit, Vte\nimport os\nimport gettext\nfrom gpdefs import *\nfrom signal import SIGTERM, SIGKILL\ntry:\n    gettext.bindtextdomain(GETTEXT_PACKAGE, GP_LOCALEDIR)",
    "detail": "MY_GISTS.8b2c5f97ac.terminal",
    "documentation": {}
  },
  {
    "label": "GeditTerminal2",
    "kind": 6,
    "importPath": "MY_GISTS.8b2c5f97ac.terminal2",
    "description": "MY_GISTS.8b2c5f97ac.terminal2",
    "peekOfCode": "class GeditTerminal2(Gtk.Box):\n    \"\"\"VTE terminal2 which follows gnome-terminal default profile options\"\"\"\n    __gsignals__ = {\n        \"populate-popup\": (\n            GObject.SIGNAL_RUN_LAST,\n            None,\n            (GObject.TYPE_OBJECT,)\n        )\n    }\n    defaults = {",
    "detail": "MY_GISTS.8b2c5f97ac.terminal2",
    "documentation": {}
  },
  {
    "label": "TerminalPlugin2",
    "kind": 6,
    "importPath": "MY_GISTS.8b2c5f97ac.terminal2",
    "description": "MY_GISTS.8b2c5f97ac.terminal2",
    "peekOfCode": "class TerminalPlugin2(GObject.Object, Gedit.WindowActivatable):\n    __gtype_name__ = \"TerminalPlugin2\"\n    window = GObject.property(type=Gedit.Window)\n    def __init__(self):\n        GObject.Object.__init__(self)\n    def do_activate(self):\n        self._panel = GeditTerminal2()\n        self._panel.connect(\"populate-popup\", self.on_panel_populate_popup)\n        self._panel.show()\n        image = Gtk.Image.new_from_icon_name(\"utilities-terminal\", Gtk.IconSize.MENU)",
    "detail": "MY_GISTS.8b2c5f97ac.terminal2",
    "documentation": {}
  },
  {
    "label": "__author__",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.terminal2",
    "description": "MY_GISTS.8b2c5f97ac.terminal2",
    "peekOfCode": "__author__ = \"Paolo Borelli, Lilian BESSON <lbesson at ens-cachan dot fr> for Naereen CORP.\"\n__version__ = \"3.2.3\"\n__appname__ = \"gedit-terminal2\"\n__app_disp_name__ = \"Gedit Embeded Terminal Lateral\"\n__website__ = \"https://sites.google.com/site/naereencorp/gedit/\"\nprint \".:[ Initializing %s, v%s. (c) %s ]:.\" % (__app_disp_name__, __version__, __author__)\nprint \".:[ Take a look at %s for more informations, or for the latest version of this piece of software. ]:.\" % (__website__)\nfrom gi.repository import GObject, GLib, Gio, Pango, Gdk, Gtk, Gedit, Vte\nimport os\nimport gettext",
    "detail": "MY_GISTS.8b2c5f97ac.terminal2",
    "documentation": {}
  },
  {
    "label": "__version__",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.terminal2",
    "description": "MY_GISTS.8b2c5f97ac.terminal2",
    "peekOfCode": "__version__ = \"3.2.3\"\n__appname__ = \"gedit-terminal2\"\n__app_disp_name__ = \"Gedit Embeded Terminal Lateral\"\n__website__ = \"https://sites.google.com/site/naereencorp/gedit/\"\nprint \".:[ Initializing %s, v%s. (c) %s ]:.\" % (__app_disp_name__, __version__, __author__)\nprint \".:[ Take a look at %s for more informations, or for the latest version of this piece of software. ]:.\" % (__website__)\nfrom gi.repository import GObject, GLib, Gio, Pango, Gdk, Gtk, Gedit, Vte\nimport os\nimport gettext\nfrom gpdefs import *",
    "detail": "MY_GISTS.8b2c5f97ac.terminal2",
    "documentation": {}
  },
  {
    "label": "__appname__",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.terminal2",
    "description": "MY_GISTS.8b2c5f97ac.terminal2",
    "peekOfCode": "__appname__ = \"gedit-terminal2\"\n__app_disp_name__ = \"Gedit Embeded Terminal Lateral\"\n__website__ = \"https://sites.google.com/site/naereencorp/gedit/\"\nprint \".:[ Initializing %s, v%s. (c) %s ]:.\" % (__app_disp_name__, __version__, __author__)\nprint \".:[ Take a look at %s for more informations, or for the latest version of this piece of software. ]:.\" % (__website__)\nfrom gi.repository import GObject, GLib, Gio, Pango, Gdk, Gtk, Gedit, Vte\nimport os\nimport gettext\nfrom gpdefs import *\nfrom signal import SIGTERM, SIGKILL",
    "detail": "MY_GISTS.8b2c5f97ac.terminal2",
    "documentation": {}
  },
  {
    "label": "__app_disp_name__",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.terminal2",
    "description": "MY_GISTS.8b2c5f97ac.terminal2",
    "peekOfCode": "__app_disp_name__ = \"Gedit Embeded Terminal Lateral\"\n__website__ = \"https://sites.google.com/site/naereencorp/gedit/\"\nprint \".:[ Initializing %s, v%s. (c) %s ]:.\" % (__app_disp_name__, __version__, __author__)\nprint \".:[ Take a look at %s for more informations, or for the latest version of this piece of software. ]:.\" % (__website__)\nfrom gi.repository import GObject, GLib, Gio, Pango, Gdk, Gtk, Gedit, Vte\nimport os\nimport gettext\nfrom gpdefs import *\nfrom signal import SIGTERM, SIGKILL\ntry:",
    "detail": "MY_GISTS.8b2c5f97ac.terminal2",
    "documentation": {}
  },
  {
    "label": "__website__",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.terminal2",
    "description": "MY_GISTS.8b2c5f97ac.terminal2",
    "peekOfCode": "__website__ = \"https://sites.google.com/site/naereencorp/gedit/\"\nprint \".:[ Initializing %s, v%s. (c) %s ]:.\" % (__app_disp_name__, __version__, __author__)\nprint \".:[ Take a look at %s for more informations, or for the latest version of this piece of software. ]:.\" % (__website__)\nfrom gi.repository import GObject, GLib, Gio, Pango, Gdk, Gtk, Gedit, Vte\nimport os\nimport gettext\nfrom gpdefs import *\nfrom signal import SIGTERM, SIGKILL\ntry:\n    gettext.bindtextdomain(GETTEXT_PACKAGE, GP_LOCALEDIR)",
    "detail": "MY_GISTS.8b2c5f97ac.terminal2",
    "documentation": {}
  },
  {
    "label": "GeditTerminal3",
    "kind": 6,
    "importPath": "MY_GISTS.8b2c5f97ac.terminal3",
    "description": "MY_GISTS.8b2c5f97ac.terminal3",
    "peekOfCode": "class GeditTerminal3(Gtk.Box):\n    \"\"\"VTE terminal3 which follows gnome-terminal default profile options\"\"\"\n    __gsignals__ = {\n        \"populate-popup\": (\n            GObject.SIGNAL_RUN_LAST,\n            None,\n            (GObject.TYPE_OBJECT,)\n        )\n    }\n    defaults = {",
    "detail": "MY_GISTS.8b2c5f97ac.terminal3",
    "documentation": {}
  },
  {
    "label": "TerminalPlugin3",
    "kind": 6,
    "importPath": "MY_GISTS.8b2c5f97ac.terminal3",
    "description": "MY_GISTS.8b2c5f97ac.terminal3",
    "peekOfCode": "class TerminalPlugin3(GObject.Object, Gedit.WindowActivatable):\n    __gtype_name__ = \"TerminalPlugin3\"\n    window = GObject.property(type=Gedit.Window)\n    def __init__(self):\n        GObject.Object.__init__(self)\n    def do_activate(self):\n        self._panel = GeditTerminal3()\n        self._panel.connect(\"populate-popup\", self.on_panel_populate_popup)\n        self._panel.show()\n        image = Gtk.Image.new_from_icon_name(\"utilities-terminal\", Gtk.IconSize.MENU)",
    "detail": "MY_GISTS.8b2c5f97ac.terminal3",
    "documentation": {}
  },
  {
    "label": "__author__",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.terminal3",
    "description": "MY_GISTS.8b2c5f97ac.terminal3",
    "peekOfCode": "__author__ = \"Paolo Borelli, Lilian BESSON <lbesson at ens-cachan dot fr> for Naereen CORP.\"\n__version__ = \"3.2.3\"\n__appname__ = \"gedit-terminal3\"\n__app_disp_name__ = \"Gedit Embeded Terminal3\"\n__website__ = \"https://sites.google.com/site/naereencorp/gedit/\"\nprint \".:[ Initializing %s, v%s. (c) %s ]:.\" % (__app_disp_name__, __version__, __author__)\nprint \".:[ Take a look at %s for more informations, or for the latest version of this piece of software. ]:.\" % (__website__)\nfrom gi.repository import GObject, GLib, Gio, Pango, Gdk, Gtk, Gedit, Vte\nimport os\nimport gettext",
    "detail": "MY_GISTS.8b2c5f97ac.terminal3",
    "documentation": {}
  },
  {
    "label": "__version__",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.terminal3",
    "description": "MY_GISTS.8b2c5f97ac.terminal3",
    "peekOfCode": "__version__ = \"3.2.3\"\n__appname__ = \"gedit-terminal3\"\n__app_disp_name__ = \"Gedit Embeded Terminal3\"\n__website__ = \"https://sites.google.com/site/naereencorp/gedit/\"\nprint \".:[ Initializing %s, v%s. (c) %s ]:.\" % (__app_disp_name__, __version__, __author__)\nprint \".:[ Take a look at %s for more informations, or for the latest version of this piece of software. ]:.\" % (__website__)\nfrom gi.repository import GObject, GLib, Gio, Pango, Gdk, Gtk, Gedit, Vte\nimport os\nimport gettext\nfrom gpdefs import *",
    "detail": "MY_GISTS.8b2c5f97ac.terminal3",
    "documentation": {}
  },
  {
    "label": "__appname__",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.terminal3",
    "description": "MY_GISTS.8b2c5f97ac.terminal3",
    "peekOfCode": "__appname__ = \"gedit-terminal3\"\n__app_disp_name__ = \"Gedit Embeded Terminal3\"\n__website__ = \"https://sites.google.com/site/naereencorp/gedit/\"\nprint \".:[ Initializing %s, v%s. (c) %s ]:.\" % (__app_disp_name__, __version__, __author__)\nprint \".:[ Take a look at %s for more informations, or for the latest version of this piece of software. ]:.\" % (__website__)\nfrom gi.repository import GObject, GLib, Gio, Pango, Gdk, Gtk, Gedit, Vte\nimport os\nimport gettext\nfrom gpdefs import *\nfrom signal import SIGTERM, SIGKILL",
    "detail": "MY_GISTS.8b2c5f97ac.terminal3",
    "documentation": {}
  },
  {
    "label": "__app_disp_name__",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.terminal3",
    "description": "MY_GISTS.8b2c5f97ac.terminal3",
    "peekOfCode": "__app_disp_name__ = \"Gedit Embeded Terminal3\"\n__website__ = \"https://sites.google.com/site/naereencorp/gedit/\"\nprint \".:[ Initializing %s, v%s. (c) %s ]:.\" % (__app_disp_name__, __version__, __author__)\nprint \".:[ Take a look at %s for more informations, or for the latest version of this piece of software. ]:.\" % (__website__)\nfrom gi.repository import GObject, GLib, Gio, Pango, Gdk, Gtk, Gedit, Vte\nimport os\nimport gettext\nfrom gpdefs import *\nfrom signal import SIGTERM, SIGKILL\ntry:",
    "detail": "MY_GISTS.8b2c5f97ac.terminal3",
    "documentation": {}
  },
  {
    "label": "__website__",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.terminal3",
    "description": "MY_GISTS.8b2c5f97ac.terminal3",
    "peekOfCode": "__website__ = \"https://sites.google.com/site/naereencorp/gedit/\"\nprint \".:[ Initializing %s, v%s. (c) %s ]:.\" % (__app_disp_name__, __version__, __author__)\nprint \".:[ Take a look at %s for more informations, or for the latest version of this piece of software. ]:.\" % (__website__)\nfrom gi.repository import GObject, GLib, Gio, Pango, Gdk, Gtk, Gedit, Vte\nimport os\nimport gettext\nfrom gpdefs import *\nfrom signal import SIGTERM, SIGKILL\ntry:\n    gettext.bindtextdomain(GETTEXT_PACKAGE, GP_LOCALEDIR)",
    "detail": "MY_GISTS.8b2c5f97ac.terminal3",
    "documentation": {}
  },
  {
    "label": "ins_all_positions",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.test-permutation-algorithms",
    "description": "MY_GISTS.8b2c5f97ac.test-permutation-algorithms",
    "peekOfCode": "def ins_all_positions(x, l):\n    \"\"\"Return a list of lists obtained from l by inserting x at every possible index.\"\"\"\n    res = []\n    for i in range(0, len(l) + 1):\n        res.append(l[:i] + [x] + l[i:])\n    return res\n# Now the main permutations generator.\ndef first_permutations(iterable):\n    \"\"\"Second algorithm, insert-into-all-positions solution.\"\"\"\n    if len(iterable) == 0:",
    "detail": "MY_GISTS.8b2c5f97ac.test-permutation-algorithms",
    "documentation": {}
  },
  {
    "label": "first_permutations",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.test-permutation-algorithms",
    "description": "MY_GISTS.8b2c5f97ac.test-permutation-algorithms",
    "peekOfCode": "def first_permutations(iterable):\n    \"\"\"Second algorithm, insert-into-all-positions solution.\"\"\"\n    if len(iterable) == 0:\n        return []\n    # we must specify this edge case\n    elif len(iterable) == 1:\n        return [[iterable[0]]]\n    else:\n        x, xs = iterable[0], iterable[1:]\n        return reduce(lambda acc, p: acc + ins_all_positions(x, p), first_permutations(xs), [])",
    "detail": "MY_GISTS.8b2c5f97ac.test-permutation-algorithms",
    "documentation": {}
  },
  {
    "label": "rm",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.test-permutation-algorithms",
    "description": "MY_GISTS.8b2c5f97ac.test-permutation-algorithms",
    "peekOfCode": "def rm(x, l):\n    \"\"\"List l without element x.\"\"\"\n    return [y for y in l if x != y]\ndef head_of_all(x, l):\n    \"\"\"List of lists from l where x is the head of all the lists.\"\"\"\n    return [[x] + p for p in l]\ndef second_permutations(iterable):\n    \"\"\"Second algorithm, fixed-head solution.\"\"\"\n    if len(iterable) == 0:\n        return []",
    "detail": "MY_GISTS.8b2c5f97ac.test-permutation-algorithms",
    "documentation": {}
  },
  {
    "label": "head_of_all",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.test-permutation-algorithms",
    "description": "MY_GISTS.8b2c5f97ac.test-permutation-algorithms",
    "peekOfCode": "def head_of_all(x, l):\n    \"\"\"List of lists from l where x is the head of all the lists.\"\"\"\n    return [[x] + p for p in l]\ndef second_permutations(iterable):\n    \"\"\"Second algorithm, fixed-head solution.\"\"\"\n    if len(iterable) == 0:\n        return []\n    # we must specify this edge case\n    elif len(iterable) == 1:\n        return [[iterable[0]]]",
    "detail": "MY_GISTS.8b2c5f97ac.test-permutation-algorithms",
    "documentation": {}
  },
  {
    "label": "second_permutations",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.test-permutation-algorithms",
    "description": "MY_GISTS.8b2c5f97ac.test-permutation-algorithms",
    "peekOfCode": "def second_permutations(iterable):\n    \"\"\"Second algorithm, fixed-head solution.\"\"\"\n    if len(iterable) == 0:\n        return []\n    # we must specify this edge case\n    elif len(iterable) == 1:\n        return [[iterable[0]]]\n    else:\n        return reduce(lambda acc, x: acc + head_of_all(x, second_permutations(rm(x, iterable))), iterable, [])\n# --- Third algorithm : Johnson Trotter algorithm",
    "detail": "MY_GISTS.8b2c5f97ac.test-permutation-algorithms",
    "documentation": {}
  },
  {
    "label": "attach_direction",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.test-permutation-algorithms",
    "description": "MY_GISTS.8b2c5f97ac.test-permutation-algorithms",
    "peekOfCode": "def attach_direction(t, d=left):\n    \"\"\"Attach the direction d to all elements of array t.\"\"\"\n    return [(x, d) for x in t]\ndef remove_direction(t):\n    \"\"\"Remove the attached direction d to all elements of array t.\"\"\"\n    return [y for y, _ in t]\ndef swap(t, i, j):\n    \"\"\"Swap t[i] and t[j] in array t.\"\"\"\n    t[i], t[j] = t[j], t[i]\ndef is_movable(a, i):",
    "detail": "MY_GISTS.8b2c5f97ac.test-permutation-algorithms",
    "documentation": {}
  },
  {
    "label": "remove_direction",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.test-permutation-algorithms",
    "description": "MY_GISTS.8b2c5f97ac.test-permutation-algorithms",
    "peekOfCode": "def remove_direction(t):\n    \"\"\"Remove the attached direction d to all elements of array t.\"\"\"\n    return [y for y, _ in t]\ndef swap(t, i, j):\n    \"\"\"Swap t[i] and t[j] in array t.\"\"\"\n    t[i], t[j] = t[j], t[i]\ndef is_movable(a, i):\n    \"\"\"Can a[i] be moved?\"\"\"\n    x, d = a[i]\n    if d == left:",
    "detail": "MY_GISTS.8b2c5f97ac.test-permutation-algorithms",
    "documentation": {}
  },
  {
    "label": "swap",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.test-permutation-algorithms",
    "description": "MY_GISTS.8b2c5f97ac.test-permutation-algorithms",
    "peekOfCode": "def swap(t, i, j):\n    \"\"\"Swap t[i] and t[j] in array t.\"\"\"\n    t[i], t[j] = t[j], t[i]\ndef is_movable(a, i):\n    \"\"\"Can a[i] be moved?\"\"\"\n    x, d = a[i]\n    if d == left:\n        return i > 0 and x > a[i - 1][0]\n    elif d == right:\n        return i < len(a) - 1 and x > a[i + 1][0]",
    "detail": "MY_GISTS.8b2c5f97ac.test-permutation-algorithms",
    "documentation": {}
  },
  {
    "label": "is_movable",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.test-permutation-algorithms",
    "description": "MY_GISTS.8b2c5f97ac.test-permutation-algorithms",
    "peekOfCode": "def is_movable(a, i):\n    \"\"\"Can a[i] be moved?\"\"\"\n    x, d = a[i]\n    if d == left:\n        return i > 0 and x > a[i - 1][0]\n    elif d == right:\n        return i < len(a) - 1 and x > a[i + 1][0]\n    else:\n        raise ValueError(\"unknown direction d = {}\".format(d))\ndef move(a, i):",
    "detail": "MY_GISTS.8b2c5f97ac.test-permutation-algorithms",
    "documentation": {}
  },
  {
    "label": "move",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.test-permutation-algorithms",
    "description": "MY_GISTS.8b2c5f97ac.test-permutation-algorithms",
    "peekOfCode": "def move(a, i):\n    \"\"\"Move it if possible.\"\"\"\n    x, d = a[i]\n    if is_movable(a, i):\n        if d == left:\n            swap(a, i, i - 1)\n        elif d == right:\n            swap(a, i, i + 1)\n        else:\n            raise ValueError(\"unknown direction d = {}\".format(d))",
    "detail": "MY_GISTS.8b2c5f97ac.test-permutation-algorithms",
    "documentation": {}
  },
  {
    "label": "scan_largest_movable",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.test-permutation-algorithms",
    "description": "MY_GISTS.8b2c5f97ac.test-permutation-algorithms",
    "peekOfCode": "def scan_largest_movable(a):\n    \"\"\"Find the largest movable element.\"\"\"\n    def aux(acc, i):\n        if i >= len(a):\n            return acc\n        else:\n            if not is_movable(a, i):\n                return aux(acc, i + 1)\n            else:\n                x, _ = a[i]",
    "detail": "MY_GISTS.8b2c5f97ac.test-permutation-algorithms",
    "documentation": {}
  },
  {
    "label": "flip",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.test-permutation-algorithms",
    "description": "MY_GISTS.8b2c5f97ac.test-permutation-algorithms",
    "peekOfCode": "def flip(d):\n    \"\"\"Flip direction d : left -> right, right -> left\"\"\"\n    return not d\ndef scan_flip_larger(x, a):\n    \"\"\"Scan to flip larger.\"\"\"\n    for i, (y, d) in enumerate(a):\n        if y > x:\n            a[i] = y, flip(d)\ndef third_permutations(iterable):\n    \"\"\"Third algorithm, Johnson Trotter algorithm.\"\"\"",
    "detail": "MY_GISTS.8b2c5f97ac.test-permutation-algorithms",
    "documentation": {}
  },
  {
    "label": "scan_flip_larger",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.test-permutation-algorithms",
    "description": "MY_GISTS.8b2c5f97ac.test-permutation-algorithms",
    "peekOfCode": "def scan_flip_larger(x, a):\n    \"\"\"Scan to flip larger.\"\"\"\n    for i, (y, d) in enumerate(a):\n        if y > x:\n            a[i] = y, flip(d)\ndef third_permutations(iterable):\n    \"\"\"Third algorithm, Johnson Trotter algorithm.\"\"\"\n    i = sorted(list(iterable))  # Required by the algorithm\n    a = attach_direction(i)\n    r = list(iterable)[:]",
    "detail": "MY_GISTS.8b2c5f97ac.test-permutation-algorithms",
    "documentation": {}
  },
  {
    "label": "third_permutations",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.test-permutation-algorithms",
    "description": "MY_GISTS.8b2c5f97ac.test-permutation-algorithms",
    "peekOfCode": "def third_permutations(iterable):\n    \"\"\"Third algorithm, Johnson Trotter algorithm.\"\"\"\n    i = sorted(list(iterable))  # Required by the algorithm\n    a = attach_direction(i)\n    r = list(iterable)[:]\n    while True:\n        p = r[:]\n        yield p\n        i = scan_largest_movable(a)\n        if i is None:  # No more permutation!",
    "detail": "MY_GISTS.8b2c5f97ac.test-permutation-algorithms",
    "documentation": {}
  },
  {
    "label": "test",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.test-permutation-algorithms",
    "description": "MY_GISTS.8b2c5f97ac.test-permutation-algorithms",
    "peekOfCode": "def test(list_of_f, iterable, stopearly=False):\n    \"\"\" Test that all functions in list_of_f give the same list of permutation on this iterable.\"\"\"\n    print(\"\\n\\nTesting for the list of functions {} ...\".format([f.__name__ for f in list_of_f]))  # DEBUG\n    result = True\n    print(\"Testing for the iterable {} ...\".format(iterable))  # DEBUG\n    i = iterable\n    allperms = []\n    for f in list_of_f:\n        allperms.append(sorted([list(p) for p in f(iterable)]))\n    for i, pi in enumerate(allperms):",
    "detail": "MY_GISTS.8b2c5f97ac.test-permutation-algorithms",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.test-permutation-algorithms",
    "description": "MY_GISTS.8b2c5f97ac.test-permutation-algorithms",
    "peekOfCode": "def main():\n    # list_of_f = [itertools_permutations, first_permutations]\n    # list_of_f = [itertools_permutations, first_permutations, second_permutations]\n    list_of_f = [itertools_permutations, first_permutations, second_permutations, third_permutations]\n    iterable = [1, 2, 3]\n    test(list_of_f, iterable)\n    iterable = [1, 2, 3, 4, 5]\n    test(list_of_f, iterable)\n    iterable = [1, 2, 3, 4, 5, 6]\n    test(list_of_f, iterable)",
    "detail": "MY_GISTS.8b2c5f97ac.test-permutation-algorithms",
    "documentation": {}
  },
  {
    "label": "left",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.test-permutation-algorithms",
    "description": "MY_GISTS.8b2c5f97ac.test-permutation-algorithms",
    "peekOfCode": "left = False\nright = True\ndef attach_direction(t, d=left):\n    \"\"\"Attach the direction d to all elements of array t.\"\"\"\n    return [(x, d) for x in t]\ndef remove_direction(t):\n    \"\"\"Remove the attached direction d to all elements of array t.\"\"\"\n    return [y for y, _ in t]\ndef swap(t, i, j):\n    \"\"\"Swap t[i] and t[j] in array t.\"\"\"",
    "detail": "MY_GISTS.8b2c5f97ac.test-permutation-algorithms",
    "documentation": {}
  },
  {
    "label": "right",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.test-permutation-algorithms",
    "description": "MY_GISTS.8b2c5f97ac.test-permutation-algorithms",
    "peekOfCode": "right = True\ndef attach_direction(t, d=left):\n    \"\"\"Attach the direction d to all elements of array t.\"\"\"\n    return [(x, d) for x in t]\ndef remove_direction(t):\n    \"\"\"Remove the attached direction d to all elements of array t.\"\"\"\n    return [y for y, _ in t]\ndef swap(t, i, j):\n    \"\"\"Swap t[i] and t[j] in array t.\"\"\"\n    t[i], t[j] = t[j], t[i]",
    "detail": "MY_GISTS.8b2c5f97ac.test-permutation-algorithms",
    "documentation": {}
  },
  {
    "label": "exclude_dir",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.test_dead_link",
    "description": "MY_GISTS.8b2c5f97ac.test_dead_link",
    "peekOfCode": "def exclude_dir(directory):\n    if \"build\" in directory:\n        return True\n    if \".git\" in directory :\n        return True\n    return False\ndef _tex_file_iterator(directory):\n    for p in os.listdir(directory):\n        path=os.path.join(directory,p)\n        if os.path.isfile(path):",
    "detail": "MY_GISTS.8b2c5f97ac.test_dead_link",
    "documentation": {}
  },
  {
    "label": "tex_file_iterator",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.test_dead_link",
    "description": "MY_GISTS.8b2c5f97ac.test_dead_link",
    "peekOfCode": "def tex_file_iterator(directory):\n    \"\"\"\n    Provides 'mazhe.bib' and then the '.tex' files in the\n    directory (recursive).\n    \"\"\"\n    yield os.path.join(directory,\"mazhe.bib\")\n    for p in _tex_file_iterator(directory):\n        yield p\ndef _file_to_url_iterator(filename):\n    \"\"\"",
    "detail": "MY_GISTS.8b2c5f97ac.test_dead_link",
    "documentation": {}
  },
  {
    "label": "is_serious_url",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.test_dead_link",
    "description": "MY_GISTS.8b2c5f97ac.test_dead_link",
    "peekOfCode": "def is_serious_url(url):\n    if url == r\"\\lstname\":\n        return False\n    if url in useless_url :\n        return False\n    return True\ndef file_to_url_iterator(filename):\n    for url in _file_to_url_iterator(filename):\n        if is_serious_url(url):\n            yield url",
    "detail": "MY_GISTS.8b2c5f97ac.test_dead_link",
    "documentation": {}
  },
  {
    "label": "file_to_url_iterator",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.test_dead_link",
    "description": "MY_GISTS.8b2c5f97ac.test_dead_link",
    "peekOfCode": "def file_to_url_iterator(filename):\n    for url in _file_to_url_iterator(filename):\n        if is_serious_url(url):\n            yield url\ndef check_url_corectness(url,f):\n    if url==\"\":\n        print(\"There is an empty URL in \",f)\n    if url[0] not in string.ascii_letters :\n        print(\"In \",f,\" : the url does not starts with an ascii character :\")\n        print(url)",
    "detail": "MY_GISTS.8b2c5f97ac.test_dead_link",
    "documentation": {}
  },
  {
    "label": "check_url_corectness",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.test_dead_link",
    "description": "MY_GISTS.8b2c5f97ac.test_dead_link",
    "peekOfCode": "def check_url_corectness(url,f):\n    if url==\"\":\n        print(\"There is an empty URL in \",f)\n    if url[0] not in string.ascii_letters :\n        print(\"In \",f,\" : the url does not starts with an ascii character :\")\n        print(url)\ntry:\n    from httplib import HTTPConnection\nexcept ImportError:\n    from http.client import HTTPConnection",
    "detail": "MY_GISTS.8b2c5f97ac.test_dead_link",
    "documentation": {}
  },
  {
    "label": "checkUrl",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.test_dead_link",
    "description": "MY_GISTS.8b2c5f97ac.test_dead_link",
    "peekOfCode": "def checkUrl(url):\n    try:\n        p = urlparse(url)\n        conn = HTTPConnection(p.netloc)\n        conn.request('HEAD', p.path)\n        resp = conn.getresponse()\n        return resp.status < 400\n    except Exception as e:\n        print(\"Exception:\", e)\n        return False",
    "detail": "MY_GISTS.8b2c5f97ac.test_dead_link",
    "documentation": {}
  },
  {
    "label": "is_not_dead",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.test_dead_link",
    "description": "MY_GISTS.8b2c5f97ac.test_dead_link",
    "peekOfCode": "def is_not_dead(url):\n    try:\n        ret = requests.head(url)\n        return ret.status_code < 400\n    except Exception as e:\n        print(\"Exception:\", e)\n        return False\nfor f in tex_file_iterator(starting_path):\n    print(\"File\", f)\n    for url in file_to_url_iterator(f):",
    "detail": "MY_GISTS.8b2c5f97ac.test_dead_link",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.TGV",
    "description": "MY_GISTS.8b2c5f97ac.TGV",
    "peekOfCode": "def main(url, MY_OUTWARD_TIME_MINI, MY_OUTWARD_TIME_MAXI=\"23:59\"):\n    \"\"\" Go to the page 'url', find the next link to got, then extract the JSON query result, find the wanted train, and display the results.\n    \"\"\"\n    MY_OUTWARD_TIME_MINI = MY_OUTWARD_TIME_MINI.replace('h', ':')\n    MY_OUTWARD_TIME_MAXI = MY_OUTWARD_TIME_MAXI.replace('h', ':')\n    # Create the web browser object\n    b = RB(history=True, allow_redirects=True)\n    # Open the page\n    b.open(url)\n    # Find the next page to go",
    "detail": "MY_GISTS.8b2c5f97ac.TGV",
    "documentation": {}
  },
  {
    "label": "url_finder",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.TGV",
    "description": "MY_GISTS.8b2c5f97ac.TGV",
    "peekOfCode": "url_finder = re.compile(r'http[^\"]*')\nquery_finder = re.compile(r\"data.query = JSON.parse\\('\\{[^\\n]*\")\nsearchResponse_finder = re.compile(r\"data.searchResponse = JSON.parse\\('\\{[^\\n]*\")\n# url0 = \"http://www.voyages-sncf.com//vsc/train-ticket/?_LANG=fr&site_country=FR&site_language=fr&ORIGIN_CITY=Toulon&DESTINATION_CITY=Paris%20%28Toutes%20gares%20intramuros%29&OUTWARD_DATE=31/05/2016&OUTWARD_TIME=15&INWARD_DATE=&INWARD_TIME=7&COMFORT_CLASS=2&DISTRIBUTED_COUNTRY=FR&NB_TYPO_ADULT=1&bookingChoice=train&PASSENGER_1=YOUNG&PASSENGER_1_CARD=MI1ST&PASSENGER_1_FID_PROG=&PASSENGER_1FID_NUM_BEGIN=&CODE_PROMO_1=&action:searchTravel=Rechercher\"\n#URL_TEMPLATE = \"http://www.voyages-sncf.com//vsc/train-ticket/?_LANG=fr&site_country=FR&site_language=fr&ORIGIN_CITY={ORIGIN_CITY}&DESTINATION_CITY={DESTINATION_CITY}&OUTWARD_DATE={DATE}&OUTWARD_TIME={OUTWARD_TIME}&INWARD_DATE=&INWARD_TIME=7&COMFORT_CLASS=2&DISTRIBUTED_COUNTRY=FR&NB_TYPO_ADULT=1&bookingChoice=train&PASSENGER_1=YOUNG&PASSENGER_1_CARD=MI1ST&PASSENGER_1_FID_PROG=&PASSENGER_1FID_NUM_BEGIN=&CODE_PROMO_1=&action:searchTravel=Rechercher\"\nURL_TEMPLATE = 'https://www.oui.sncf/vsc/train-ticket/?_LANG=fr&ORIGIN_CITY={ORIGIN_CITY}&DESTINATION_CITY={DESTINATION_CITY}&OUTWARD_DATE={DATE}&OUTWARD_TIME={OUTWARD_TIME}&DIRECT_TRAVEL_CHECK=1&COMFORT_CLASS=2&PASSENGER_1=YOUNG&PASSENGER_1_CARD=&PASSENGER_1_FID_PROG=&PASSENGER_1FID_NUM_BEGIN=&CODE_PROMO_1=&PASSENGER_1_CARD_NUMBER=&PASSENGER_1_CARD_BIRTH_DATE=&action:searchTravelLaunchTrain=Rechercher'\n#EXEMPLE SANS CARTE PARTICULIERE TARIF NORMAL\n# url1 = 'http://www.voyages-sncf.com/vsc/proposals/findProposals?hid='\ndef main(url, MY_OUTWARD_TIME_MINI, MY_OUTWARD_TIME_MAXI=\"23:59\"):\n    \"\"\" Go to the page 'url', find the next link to got, then extract the JSON query result, find the wanted train, and display the results.",
    "detail": "MY_GISTS.8b2c5f97ac.TGV",
    "documentation": {}
  },
  {
    "label": "query_finder",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.TGV",
    "description": "MY_GISTS.8b2c5f97ac.TGV",
    "peekOfCode": "query_finder = re.compile(r\"data.query = JSON.parse\\('\\{[^\\n]*\")\nsearchResponse_finder = re.compile(r\"data.searchResponse = JSON.parse\\('\\{[^\\n]*\")\n# url0 = \"http://www.voyages-sncf.com//vsc/train-ticket/?_LANG=fr&site_country=FR&site_language=fr&ORIGIN_CITY=Toulon&DESTINATION_CITY=Paris%20%28Toutes%20gares%20intramuros%29&OUTWARD_DATE=31/05/2016&OUTWARD_TIME=15&INWARD_DATE=&INWARD_TIME=7&COMFORT_CLASS=2&DISTRIBUTED_COUNTRY=FR&NB_TYPO_ADULT=1&bookingChoice=train&PASSENGER_1=YOUNG&PASSENGER_1_CARD=MI1ST&PASSENGER_1_FID_PROG=&PASSENGER_1FID_NUM_BEGIN=&CODE_PROMO_1=&action:searchTravel=Rechercher\"\n#URL_TEMPLATE = \"http://www.voyages-sncf.com//vsc/train-ticket/?_LANG=fr&site_country=FR&site_language=fr&ORIGIN_CITY={ORIGIN_CITY}&DESTINATION_CITY={DESTINATION_CITY}&OUTWARD_DATE={DATE}&OUTWARD_TIME={OUTWARD_TIME}&INWARD_DATE=&INWARD_TIME=7&COMFORT_CLASS=2&DISTRIBUTED_COUNTRY=FR&NB_TYPO_ADULT=1&bookingChoice=train&PASSENGER_1=YOUNG&PASSENGER_1_CARD=MI1ST&PASSENGER_1_FID_PROG=&PASSENGER_1FID_NUM_BEGIN=&CODE_PROMO_1=&action:searchTravel=Rechercher\"\nURL_TEMPLATE = 'https://www.oui.sncf/vsc/train-ticket/?_LANG=fr&ORIGIN_CITY={ORIGIN_CITY}&DESTINATION_CITY={DESTINATION_CITY}&OUTWARD_DATE={DATE}&OUTWARD_TIME={OUTWARD_TIME}&DIRECT_TRAVEL_CHECK=1&COMFORT_CLASS=2&PASSENGER_1=YOUNG&PASSENGER_1_CARD=&PASSENGER_1_FID_PROG=&PASSENGER_1FID_NUM_BEGIN=&CODE_PROMO_1=&PASSENGER_1_CARD_NUMBER=&PASSENGER_1_CARD_BIRTH_DATE=&action:searchTravelLaunchTrain=Rechercher'\n#EXEMPLE SANS CARTE PARTICULIERE TARIF NORMAL\n# url1 = 'http://www.voyages-sncf.com/vsc/proposals/findProposals?hid='\ndef main(url, MY_OUTWARD_TIME_MINI, MY_OUTWARD_TIME_MAXI=\"23:59\"):\n    \"\"\" Go to the page 'url', find the next link to got, then extract the JSON query result, find the wanted train, and display the results.\n    \"\"\"",
    "detail": "MY_GISTS.8b2c5f97ac.TGV",
    "documentation": {}
  },
  {
    "label": "searchResponse_finder",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.TGV",
    "description": "MY_GISTS.8b2c5f97ac.TGV",
    "peekOfCode": "searchResponse_finder = re.compile(r\"data.searchResponse = JSON.parse\\('\\{[^\\n]*\")\n# url0 = \"http://www.voyages-sncf.com//vsc/train-ticket/?_LANG=fr&site_country=FR&site_language=fr&ORIGIN_CITY=Toulon&DESTINATION_CITY=Paris%20%28Toutes%20gares%20intramuros%29&OUTWARD_DATE=31/05/2016&OUTWARD_TIME=15&INWARD_DATE=&INWARD_TIME=7&COMFORT_CLASS=2&DISTRIBUTED_COUNTRY=FR&NB_TYPO_ADULT=1&bookingChoice=train&PASSENGER_1=YOUNG&PASSENGER_1_CARD=MI1ST&PASSENGER_1_FID_PROG=&PASSENGER_1FID_NUM_BEGIN=&CODE_PROMO_1=&action:searchTravel=Rechercher\"\n#URL_TEMPLATE = \"http://www.voyages-sncf.com//vsc/train-ticket/?_LANG=fr&site_country=FR&site_language=fr&ORIGIN_CITY={ORIGIN_CITY}&DESTINATION_CITY={DESTINATION_CITY}&OUTWARD_DATE={DATE}&OUTWARD_TIME={OUTWARD_TIME}&INWARD_DATE=&INWARD_TIME=7&COMFORT_CLASS=2&DISTRIBUTED_COUNTRY=FR&NB_TYPO_ADULT=1&bookingChoice=train&PASSENGER_1=YOUNG&PASSENGER_1_CARD=MI1ST&PASSENGER_1_FID_PROG=&PASSENGER_1FID_NUM_BEGIN=&CODE_PROMO_1=&action:searchTravel=Rechercher\"\nURL_TEMPLATE = 'https://www.oui.sncf/vsc/train-ticket/?_LANG=fr&ORIGIN_CITY={ORIGIN_CITY}&DESTINATION_CITY={DESTINATION_CITY}&OUTWARD_DATE={DATE}&OUTWARD_TIME={OUTWARD_TIME}&DIRECT_TRAVEL_CHECK=1&COMFORT_CLASS=2&PASSENGER_1=YOUNG&PASSENGER_1_CARD=&PASSENGER_1_FID_PROG=&PASSENGER_1FID_NUM_BEGIN=&CODE_PROMO_1=&PASSENGER_1_CARD_NUMBER=&PASSENGER_1_CARD_BIRTH_DATE=&action:searchTravelLaunchTrain=Rechercher'\n#EXEMPLE SANS CARTE PARTICULIERE TARIF NORMAL\n# url1 = 'http://www.voyages-sncf.com/vsc/proposals/findProposals?hid='\ndef main(url, MY_OUTWARD_TIME_MINI, MY_OUTWARD_TIME_MAXI=\"23:59\"):\n    \"\"\" Go to the page 'url', find the next link to got, then extract the JSON query result, find the wanted train, and display the results.\n    \"\"\"\n    MY_OUTWARD_TIME_MINI = MY_OUTWARD_TIME_MINI.replace('h', ':')",
    "detail": "MY_GISTS.8b2c5f97ac.TGV",
    "documentation": {}
  },
  {
    "label": "#URL_TEMPLATE",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.TGV",
    "description": "MY_GISTS.8b2c5f97ac.TGV",
    "peekOfCode": "#URL_TEMPLATE = \"http://www.voyages-sncf.com//vsc/train-ticket/?_LANG=fr&site_country=FR&site_language=fr&ORIGIN_CITY={ORIGIN_CITY}&DESTINATION_CITY={DESTINATION_CITY}&OUTWARD_DATE={DATE}&OUTWARD_TIME={OUTWARD_TIME}&INWARD_DATE=&INWARD_TIME=7&COMFORT_CLASS=2&DISTRIBUTED_COUNTRY=FR&NB_TYPO_ADULT=1&bookingChoice=train&PASSENGER_1=YOUNG&PASSENGER_1_CARD=MI1ST&PASSENGER_1_FID_PROG=&PASSENGER_1FID_NUM_BEGIN=&CODE_PROMO_1=&action:searchTravel=Rechercher\"\nURL_TEMPLATE = 'https://www.oui.sncf/vsc/train-ticket/?_LANG=fr&ORIGIN_CITY={ORIGIN_CITY}&DESTINATION_CITY={DESTINATION_CITY}&OUTWARD_DATE={DATE}&OUTWARD_TIME={OUTWARD_TIME}&DIRECT_TRAVEL_CHECK=1&COMFORT_CLASS=2&PASSENGER_1=YOUNG&PASSENGER_1_CARD=&PASSENGER_1_FID_PROG=&PASSENGER_1FID_NUM_BEGIN=&CODE_PROMO_1=&PASSENGER_1_CARD_NUMBER=&PASSENGER_1_CARD_BIRTH_DATE=&action:searchTravelLaunchTrain=Rechercher'\n#EXEMPLE SANS CARTE PARTICULIERE TARIF NORMAL\n# url1 = 'http://www.voyages-sncf.com/vsc/proposals/findProposals?hid='\ndef main(url, MY_OUTWARD_TIME_MINI, MY_OUTWARD_TIME_MAXI=\"23:59\"):\n    \"\"\" Go to the page 'url', find the next link to got, then extract the JSON query result, find the wanted train, and display the results.\n    \"\"\"\n    MY_OUTWARD_TIME_MINI = MY_OUTWARD_TIME_MINI.replace('h', ':')\n    MY_OUTWARD_TIME_MAXI = MY_OUTWARD_TIME_MAXI.replace('h', ':')\n    # Create the web browser object",
    "detail": "MY_GISTS.8b2c5f97ac.TGV",
    "documentation": {}
  },
  {
    "label": "URL_TEMPLATE",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.TGV",
    "description": "MY_GISTS.8b2c5f97ac.TGV",
    "peekOfCode": "URL_TEMPLATE = 'https://www.oui.sncf/vsc/train-ticket/?_LANG=fr&ORIGIN_CITY={ORIGIN_CITY}&DESTINATION_CITY={DESTINATION_CITY}&OUTWARD_DATE={DATE}&OUTWARD_TIME={OUTWARD_TIME}&DIRECT_TRAVEL_CHECK=1&COMFORT_CLASS=2&PASSENGER_1=YOUNG&PASSENGER_1_CARD=&PASSENGER_1_FID_PROG=&PASSENGER_1FID_NUM_BEGIN=&CODE_PROMO_1=&PASSENGER_1_CARD_NUMBER=&PASSENGER_1_CARD_BIRTH_DATE=&action:searchTravelLaunchTrain=Rechercher'\n#EXEMPLE SANS CARTE PARTICULIERE TARIF NORMAL\n# url1 = 'http://www.voyages-sncf.com/vsc/proposals/findProposals?hid='\ndef main(url, MY_OUTWARD_TIME_MINI, MY_OUTWARD_TIME_MAXI=\"23:59\"):\n    \"\"\" Go to the page 'url', find the next link to got, then extract the JSON query result, find the wanted train, and display the results.\n    \"\"\"\n    MY_OUTWARD_TIME_MINI = MY_OUTWARD_TIME_MINI.replace('h', ':')\n    MY_OUTWARD_TIME_MAXI = MY_OUTWARD_TIME_MAXI.replace('h', ':')\n    # Create the web browser object\n    b = RB(history=True, allow_redirects=True)",
    "detail": "MY_GISTS.8b2c5f97ac.TGV",
    "documentation": {}
  },
  {
    "label": "lang_to_text",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.wikistats",
    "description": "MY_GISTS.8b2c5f97ac.wikistats",
    "peekOfCode": "def lang_to_text(lang, exception=False):\n    \"\"\" lang_to_text(lang, exception=False) -> str\nConvert a Wikipédia language code (two letters) to a English version of the language.\nExample:\n>>> lang_to_text(\"en\")\n'english'\n>>> lang_to_text(\"fr\")\n'french'\n    \"\"\"\n    if exception:",
    "detail": "MY_GISTS.8b2c5f97ac.wikistats",
    "documentation": {}
  },
  {
    "label": "download_json",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.wikistats",
    "description": "MY_GISTS.8b2c5f97ac.wikistats",
    "peekOfCode": "def download_json(page=\"JSON\", language=language_default,\n                  template_output=template_output_default,\n                  template_url=template_url_default):\n    \"\"\" download_json(page=\"JSON\", template_output=template_output_default,                  language=language_default, template_url=templateurl_default) -> str\nDownload a JSON file.\n@page: tell which Wikipédia page to lookup to.\n@template_output: template string for the output JSON (.json) file.\n@language: language to use for downloading the JSON.\n@template_url: online page to use a format to download the JSON.\nExample:",
    "detail": "MY_GISTS.8b2c5f97ac.wikistats",
    "documentation": {}
  },
  {
    "label": "outfile_to_json",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.wikistats",
    "description": "MY_GISTS.8b2c5f97ac.wikistats",
    "peekOfCode": "def outfile_to_json(outfile_name):\n    \"\"\" outfile_to_json(outfile_name) -> dir\n    Try to dump and return the content of the file @outfile.\n    \"\"\"\n    outfile = open(outfile_name)\n    # To convert the content of this file in a Python dictionnary.\n    import json\n    try:\n        json_obj = json.loads(outfile.readline())\n    except ValueError:",
    "detail": "MY_GISTS.8b2c5f97ac.wikistats",
    "documentation": {}
  },
  {
    "label": "plot_stats_from_json",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.wikistats",
    "description": "MY_GISTS.8b2c5f97ac.wikistats",
    "peekOfCode": "def plot_stats_from_json(json_obj, graphic_name=None, graphic_name_template=\"{title}.{lang}.{ext}\", ext=\"all\", title=None):\n    \"\"\" plot_stats_from_json(json_obj, graphic_name=None, graphic_name_template=\"{title}.{lang}.{ext}\", ext=\"png\") -> None\n    Plot a couple of PNG/SVG/PDF statistics.\n    .. warning:: Beta !\n    \"\"\"\n    assert(ext in [\"png\", \"svg\", \"pdf\", \"all\"])\n    title = title if title else json_obj[\"title\"]\n    lang = json_obj[\"project\"]\n    rank = json_obj[\"rank\"]\n    if rank == \"-1\":",
    "detail": "MY_GISTS.8b2c5f97ac.wikistats",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "MY_GISTS.8b2c5f97ac.wikistats",
    "description": "MY_GISTS.8b2c5f97ac.wikistats",
    "peekOfCode": "def main(argv):\n    \"\"\" main(argv) -> None\n    Main function. Use the arguments of the command line.\"\"\"\n    # print(\"argv: \", argv)\n    if \"-h\" in argv or \"--help\" in argv:\n        print(\"wikistats.py --help|-h | page [language_code]\")\n        return 1\n    language = argv[1] if len(argv) > 1 else language_default\n    page = argv[0] if len(argv) > 0 else \"Professeur Xavier\"\n    outfile = download_json(page=page, language=language)",
    "detail": "MY_GISTS.8b2c5f97ac.wikistats",
    "documentation": {}
  },
  {
    "label": "language_default",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.wikistats",
    "description": "MY_GISTS.8b2c5f97ac.wikistats",
    "peekOfCode": "language_default = os.getenv(\"LANG\")[0:2]\ndef lang_to_text(lang, exception=False):\n    \"\"\" lang_to_text(lang, exception=False) -> str\nConvert a Wikipédia language code (two letters) to a English version of the language.\nExample:\n>>> lang_to_text(\"en\")\n'english'\n>>> lang_to_text(\"fr\")\n'french'\n    \"\"\"",
    "detail": "MY_GISTS.8b2c5f97ac.wikistats",
    "documentation": {}
  },
  {
    "label": "latest",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.wikistats",
    "description": "MY_GISTS.8b2c5f97ac.wikistats",
    "peekOfCode": "latest = 30  # also 60 or 90 are available\ntemplate_url_default = \"http://stats.grok.se/json/{language}/latest{latest}/{page}\"\ntemplate_output_default = \"{page}.{language}.json\"\ndef download_json(page=\"JSON\", language=language_default,\n                  template_output=template_output_default,\n                  template_url=template_url_default):\n    \"\"\" download_json(page=\"JSON\", template_output=template_output_default,                  language=language_default, template_url=templateurl_default) -> str\nDownload a JSON file.\n@page: tell which Wikipédia page to lookup to.\n@template_output: template string for the output JSON (.json) file.",
    "detail": "MY_GISTS.8b2c5f97ac.wikistats",
    "documentation": {}
  },
  {
    "label": "template_url_default",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.wikistats",
    "description": "MY_GISTS.8b2c5f97ac.wikistats",
    "peekOfCode": "template_url_default = \"http://stats.grok.se/json/{language}/latest{latest}/{page}\"\ntemplate_output_default = \"{page}.{language}.json\"\ndef download_json(page=\"JSON\", language=language_default,\n                  template_output=template_output_default,\n                  template_url=template_url_default):\n    \"\"\" download_json(page=\"JSON\", template_output=template_output_default,                  language=language_default, template_url=templateurl_default) -> str\nDownload a JSON file.\n@page: tell which Wikipédia page to lookup to.\n@template_output: template string for the output JSON (.json) file.\n@language: language to use for downloading the JSON.",
    "detail": "MY_GISTS.8b2c5f97ac.wikistats",
    "documentation": {}
  },
  {
    "label": "template_output_default",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.wikistats",
    "description": "MY_GISTS.8b2c5f97ac.wikistats",
    "peekOfCode": "template_output_default = \"{page}.{language}.json\"\ndef download_json(page=\"JSON\", language=language_default,\n                  template_output=template_output_default,\n                  template_url=template_url_default):\n    \"\"\" download_json(page=\"JSON\", template_output=template_output_default,                  language=language_default, template_url=templateurl_default) -> str\nDownload a JSON file.\n@page: tell which Wikipédia page to lookup to.\n@template_output: template string for the output JSON (.json) file.\n@language: language to use for downloading the JSON.\n@template_url: online page to use a format to download the JSON.",
    "detail": "MY_GISTS.8b2c5f97ac.wikistats",
    "documentation": {}
  },
  {
    "label": "QuotesSpider",
    "kind": 6,
    "importPath": "MY_GISTS.8b2c5f97ac.youtube_playlist_spider_scrapy",
    "description": "MY_GISTS.8b2c5f97ac.youtube_playlist_spider_scrapy",
    "peekOfCode": "class QuotesSpider(scrapy.Spider):\n    \"\"\"Small scrapy Spider.\"\"\"\n    name = \"Watch Later\"\n    start_urls = [\n        'file:///tmp/wl.html'\n    ]\n    custom_settings = {\n    \t\"LOG_ENABLED\": False,\n    \t\"LOG_LEVEL\": 'ERROR',\n    }",
    "detail": "MY_GISTS.8b2c5f97ac.youtube_playlist_spider_scrapy",
    "documentation": {}
  },
  {
    "label": "logging.getLogger('scrapy').propagate",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.youtube_playlist_spider_scrapy",
    "description": "MY_GISTS.8b2c5f97ac.youtube_playlist_spider_scrapy",
    "peekOfCode": "logging.getLogger('scrapy').propagate = False\nlogging.getLogger('scrapy.utils').propagate = False\nclass QuotesSpider(scrapy.Spider):\n    \"\"\"Small scrapy Spider.\"\"\"\n    name = \"Watch Later\"\n    start_urls = [\n        'file:///tmp/wl.html'\n    ]\n    custom_settings = {\n    \t\"LOG_ENABLED\": False,",
    "detail": "MY_GISTS.8b2c5f97ac.youtube_playlist_spider_scrapy",
    "documentation": {}
  },
  {
    "label": "logging.getLogger('scrapy.utils').propagate",
    "kind": 5,
    "importPath": "MY_GISTS.8b2c5f97ac.youtube_playlist_spider_scrapy",
    "description": "MY_GISTS.8b2c5f97ac.youtube_playlist_spider_scrapy",
    "peekOfCode": "logging.getLogger('scrapy.utils').propagate = False\nclass QuotesSpider(scrapy.Spider):\n    \"\"\"Small scrapy Spider.\"\"\"\n    name = \"Watch Later\"\n    start_urls = [\n        'file:///tmp/wl.html'\n    ]\n    custom_settings = {\n    \t\"LOG_ENABLED\": False,\n    \t\"LOG_LEVEL\": 'ERROR',",
    "detail": "MY_GISTS.8b2c5f97ac.youtube_playlist_spider_scrapy",
    "documentation": {}
  },
  {
    "label": "hashString",
    "kind": 2,
    "importPath": "MY_GISTS.8bc2b4f886.anagram-detection",
    "description": "MY_GISTS.8bc2b4f886.anagram-detection",
    "peekOfCode": "def hashString(str):\n  # Map characters to prime numbers to multiply\n  charMap = {\n    'a': 2,\n    'b': 3,\n    'c': 5,\n    'd': 7,\n    'e': 11,\n    'f': 13,\n    'g': 17,",
    "detail": "MY_GISTS.8bc2b4f886.anagram-detection",
    "documentation": {}
  },
  {
    "label": "anagramDetection",
    "kind": 2,
    "importPath": "MY_GISTS.8bc2b4f886.anagram-detection",
    "description": "MY_GISTS.8bc2b4f886.anagram-detection",
    "peekOfCode": "def anagramDetection(parent, child):\n  length = len(child)\n  anagram = hashString(child)\n  total = 0\n  for i in range(0, len(parent) - length):\n    if hashString(parent[i: i + length]) == anagram:\n      total = total + 1\n  return total",
    "detail": "MY_GISTS.8bc2b4f886.anagram-detection",
    "documentation": {}
  },
  {
    "label": "array_pair_sum_tests",
    "kind": 6,
    "importPath": "MY_GISTS.8bc2b4f886.array-pair-sum",
    "description": "MY_GISTS.8bc2b4f886.array-pair-sum",
    "peekOfCode": "class array_pair_sum_tests(unittest.TestCase):\n    def setUp(self):\n        self.arr1 = [3, 4, 5, 6, 7]\n        self.arr2 = [3, 4, 5, 4, 4]\n        self.result1 = [[3, 7], [4, 6]]\n        self.result2 = [[3, 5], [4, 4], [4, 4], [4, 4]]\n    def test_one(self):\n        self.assertEqual(\n            array_pair_sum_iterative(self.arr1, 10), self.result1)\n        self.assertEqual(",
    "detail": "MY_GISTS.8bc2b4f886.array-pair-sum",
    "documentation": {}
  },
  {
    "label": "array_pair_sum_iterative",
    "kind": 2,
    "importPath": "MY_GISTS.8bc2b4f886.array-pair-sum",
    "description": "MY_GISTS.8bc2b4f886.array-pair-sum",
    "peekOfCode": "def array_pair_sum_iterative(arr, k):\n    \"\"\"\n    returns the array of pairs using an iterative method.\n    complexity: O(n^2)\n    \"\"\"\n    result = []\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == k:\n                result.append([arr[i], arr[j]])",
    "detail": "MY_GISTS.8bc2b4f886.array-pair-sum",
    "documentation": {}
  },
  {
    "label": "array_pair_sum_sort",
    "kind": 2,
    "importPath": "MY_GISTS.8bc2b4f886.array-pair-sum",
    "description": "MY_GISTS.8bc2b4f886.array-pair-sum",
    "peekOfCode": "def array_pair_sum_sort(arr, k):\n    \"\"\"\n    first sort the array and then use binary search to find pairs.\n    complexity: O(nlogn)\n    \"\"\"\n    result = []\n    arr.sort()\n    for i in range(len(arr)):\n        if k - arr[i] in arr[i+1:]:\n            result.append([arr[i], k - arr[i]])",
    "detail": "MY_GISTS.8bc2b4f886.array-pair-sum",
    "documentation": {}
  },
  {
    "label": "array_pair_sum_hash_table",
    "kind": 2,
    "importPath": "MY_GISTS.8bc2b4f886.array-pair-sum",
    "description": "MY_GISTS.8bc2b4f886.array-pair-sum",
    "peekOfCode": "def array_pair_sum_hash_table(arr, k):\n    \"\"\"\n    Use a hash table to store array elements of pairs.\n    complexity: O(n)\n    \"\"\"\n    result = []\n    hash_table = {}\n    for e in arr:\n        if e in hash_table:\n            result.append([k - e, e])",
    "detail": "MY_GISTS.8bc2b4f886.array-pair-sum",
    "documentation": {}
  },
  {
    "label": "balancedBrackets",
    "kind": 2,
    "importPath": "MY_GISTS.8bc2b4f886.balanced-brackets",
    "description": "MY_GISTS.8bc2b4f886.balanced-brackets",
    "peekOfCode": "def balancedBrackets(string):\n  stack = []\n  # Process every character on input\n  for char in string:\n    # Assign an initial value in case the stack is empty\n    last = 0\n    # Assign the value of the last element if stack is not empty\n    if stack:\n      last = stack[len(stack) - 1]\n    if stack and last in brackets and brackets[last] == char:",
    "detail": "MY_GISTS.8bc2b4f886.balanced-brackets",
    "documentation": {}
  },
  {
    "label": "brackets",
    "kind": 5,
    "importPath": "MY_GISTS.8bc2b4f886.balanced-brackets",
    "description": "MY_GISTS.8bc2b4f886.balanced-brackets",
    "peekOfCode": "brackets = {\n  '(': ')',\n  '{': '}',\n  '[': ']'\n}\n# On each input string, process it using the balance checker\ndef balancedBrackets(string):\n  stack = []\n  # Process every character on input\n  for char in string:",
    "detail": "MY_GISTS.8bc2b4f886.balanced-brackets",
    "documentation": {}
  },
  {
    "label": "f",
    "kind": 2,
    "importPath": "MY_GISTS.8bc2b4f886.convert-array",
    "description": "MY_GISTS.8bc2b4f886.convert-array",
    "peekOfCode": "def f(arr):\n    \"\"\"sorts the array by numbers in place using constant extra space\"\"\"\n    position = 0\n    for i in xrange(len(arr) / 3):\n        gap = (len(arr) - position) / 3\n        arr.insert(position + 1, arr.pop(position + gap * 1))\n        arr.insert(position + 2, arr.pop(position + gap * 2))\n        position += 3\n    return arr",
    "detail": "MY_GISTS.8bc2b4f886.convert-array",
    "documentation": {}
  },
  {
    "label": "convert_to_number",
    "kind": 2,
    "importPath": "MY_GISTS.8bc2b4f886.csv-parsing",
    "description": "MY_GISTS.8bc2b4f886.csv-parsing",
    "peekOfCode": "def convert_to_number(value):\n    \"\"\"converts the passed over string to a number, if possible\"\"\"\n    try:\n        return int(value)\n    except ValueError:\n        pass\n    return value\ndef csv_parsing(csv):\n    \"\"\"returns list of string/numeric csv values\"\"\"\n    count = 0",
    "detail": "MY_GISTS.8bc2b4f886.csv-parsing",
    "documentation": {}
  },
  {
    "label": "csv_parsing",
    "kind": 2,
    "importPath": "MY_GISTS.8bc2b4f886.csv-parsing",
    "description": "MY_GISTS.8bc2b4f886.csv-parsing",
    "peekOfCode": "def csv_parsing(csv):\n    \"\"\"returns list of string/numeric csv values\"\"\"\n    count = 0\n    values = []\n    pos = 0\n    while pos < len(csv):\n        if csv[pos] == ',': # skip comma from previous iteration\n            pos += 1\n        values.insert(count, '')\n        while pos < len(csv) and csv[pos] != ',':",
    "detail": "MY_GISTS.8bc2b4f886.csv-parsing",
    "documentation": {}
  },
  {
    "label": "even_occuring_element",
    "kind": 2,
    "importPath": "MY_GISTS.8bc2b4f886.even-occuring-element",
    "description": "MY_GISTS.8bc2b4f886.even-occuring-element",
    "peekOfCode": "def even_occuring_element(arr):\n    \"\"\"Returns the even occuring element within a list of integers\"\"\"\n    dict = {}\n    for num in arr:\n        if num in dict:\n            dict[num] += 1\n        else:\n            dict[num] = 1\n    for num in dict:\n        if not dict[num] & 1: # bitwise check for parity.",
    "detail": "MY_GISTS.8bc2b4f886.even-occuring-element",
    "documentation": {}
  },
  {
    "label": "factorial_iterative",
    "kind": 2,
    "importPath": "MY_GISTS.8bc2b4f886.factorial",
    "description": "MY_GISTS.8bc2b4f886.factorial",
    "peekOfCode": "def factorial_iterative(num):\n    \"\"\"returns the factorial of num using an iterative method.\"\"\"\n    factor = 1\n    for i in xrange(1, num + 1):\n        factor *= i\n    return factor\ndef factorial_reduce(num):\n    \"\"\"returns the factorial of num using a reduce (shortest method).\"\"\"\n    return reduce(lambda x, y: x * y, range(1, num + 1))\ndef factorial_recursive(num):",
    "detail": "MY_GISTS.8bc2b4f886.factorial",
    "documentation": {}
  },
  {
    "label": "factorial_reduce",
    "kind": 2,
    "importPath": "MY_GISTS.8bc2b4f886.factorial",
    "description": "MY_GISTS.8bc2b4f886.factorial",
    "peekOfCode": "def factorial_reduce(num):\n    \"\"\"returns the factorial of num using a reduce (shortest method).\"\"\"\n    return reduce(lambda x, y: x * y, range(1, num + 1))\ndef factorial_recursive(num):\n    \"\"\"returns the factorial of num using a recursive method.\"\"\"\n    if num == 1:\n        return 1\n    return num * factorial_recursive(num -1)",
    "detail": "MY_GISTS.8bc2b4f886.factorial",
    "documentation": {}
  },
  {
    "label": "factorial_recursive",
    "kind": 2,
    "importPath": "MY_GISTS.8bc2b4f886.factorial",
    "description": "MY_GISTS.8bc2b4f886.factorial",
    "peekOfCode": "def factorial_recursive(num):\n    \"\"\"returns the factorial of num using a recursive method.\"\"\"\n    if num == 1:\n        return 1\n    return num * factorial_recursive(num -1)",
    "detail": "MY_GISTS.8bc2b4f886.factorial",
    "documentation": {}
  },
  {
    "label": "fibonacci_iterative",
    "kind": 2,
    "importPath": "MY_GISTS.8bc2b4f886.fibonacci",
    "description": "MY_GISTS.8bc2b4f886.fibonacci",
    "peekOfCode": "def fibonacci_iterative(limit):\n    \"\"\"fibonacci sequence using an iterative approach.\"\"\"\n    a, b = 0, 1\n    for i in xrange(limit):\n        a, b = b, a + b\n    return a\ndef fibonacci_recursive(limit):\n    \"\"\"fibonacci sequence using a recusive approach.\"\"\"\n    if limit <= 1:\n        return limit",
    "detail": "MY_GISTS.8bc2b4f886.fibonacci",
    "documentation": {}
  },
  {
    "label": "fibonacci_recursive",
    "kind": 2,
    "importPath": "MY_GISTS.8bc2b4f886.fibonacci",
    "description": "MY_GISTS.8bc2b4f886.fibonacci",
    "peekOfCode": "def fibonacci_recursive(limit):\n    \"\"\"fibonacci sequence using a recusive approach.\"\"\"\n    if limit <= 1:\n        return limit\n    return fibonacci_recursive(limit - 1) + fibonacci_recursive(limit - 2)\ndef fibonacci_reduce(limit):\n    \"\"\"fibonacci sequence using reduce (shortest option).\"\"\"\n    return reduce(lambda x, y: x + [x[y] + x[y - 1]], range(1, limit), [0, 1])[-1]\ndef fibonacci_comprehension(limit):\n    \"\"\"fibonacci sequence using a list comprehension.\"\"\"",
    "detail": "MY_GISTS.8bc2b4f886.fibonacci",
    "documentation": {}
  },
  {
    "label": "fibonacci_reduce",
    "kind": 2,
    "importPath": "MY_GISTS.8bc2b4f886.fibonacci",
    "description": "MY_GISTS.8bc2b4f886.fibonacci",
    "peekOfCode": "def fibonacci_reduce(limit):\n    \"\"\"fibonacci sequence using reduce (shortest option).\"\"\"\n    return reduce(lambda x, y: x + [x[y] + x[y - 1]], range(1, limit), [0, 1])[-1]\ndef fibonacci_comprehension(limit):\n    \"\"\"fibonacci sequence using a list comprehension.\"\"\"\n    sequence = [0, 1]\n    [sequence.append(sequence[i] + sequence[i-1]) for i in range(1, limit)]\n    return sequence[-1]",
    "detail": "MY_GISTS.8bc2b4f886.fibonacci",
    "documentation": {}
  },
  {
    "label": "fibonacci_comprehension",
    "kind": 2,
    "importPath": "MY_GISTS.8bc2b4f886.fibonacci",
    "description": "MY_GISTS.8bc2b4f886.fibonacci",
    "peekOfCode": "def fibonacci_comprehension(limit):\n    \"\"\"fibonacci sequence using a list comprehension.\"\"\"\n    sequence = [0, 1]\n    [sequence.append(sequence[i] + sequence[i-1]) for i in range(1, limit)]\n    return sequence[-1]",
    "detail": "MY_GISTS.8bc2b4f886.fibonacci",
    "documentation": {}
  },
  {
    "label": "difference_set",
    "kind": 2,
    "importPath": "MY_GISTS.8bc2b4f886.find-missing-element",
    "description": "MY_GISTS.8bc2b4f886.find-missing-element",
    "peekOfCode": "def difference_set(orig, shuffled):\n    \"\"\"finds the missing element using a set.\"\"\"\n    return set(orig).difference(set(shuffled)).pop()\ndef difference_iterative(orig, shuffled):\n    \"\"\"finds the missing element by iterating over the list\"\"\"\n    for x in orig:\n        if not x in shuffled:\n            return x",
    "detail": "MY_GISTS.8bc2b4f886.find-missing-element",
    "documentation": {}
  },
  {
    "label": "difference_iterative",
    "kind": 2,
    "importPath": "MY_GISTS.8bc2b4f886.find-missing-element",
    "description": "MY_GISTS.8bc2b4f886.find-missing-element",
    "peekOfCode": "def difference_iterative(orig, shuffled):\n    \"\"\"finds the missing element by iterating over the list\"\"\"\n    for x in orig:\n        if not x in shuffled:\n            return x",
    "detail": "MY_GISTS.8bc2b4f886.find-missing-element",
    "documentation": {}
  },
  {
    "label": "first_non_repeated_character",
    "kind": 2,
    "importPath": "MY_GISTS.8bc2b4f886.first-non-repeated-character",
    "description": "MY_GISTS.8bc2b4f886.first-non-repeated-character",
    "peekOfCode": "def first_non_repeated_character(str):\n    \"\"\"finds the first character in a string that's not repreated\"\"\"\n    for i, char in enumerate(str):\n        if i - 1 >= 0 and char == str[i - 1]:\n            continue\n        if i + 1 < len(str) and char == str[i + 1]:\n            continue\n        return char",
    "detail": "MY_GISTS.8bc2b4f886.first-non-repeated-character",
    "documentation": {}
  },
  {
    "label": "flatten_array",
    "kind": 2,
    "importPath": "MY_GISTS.8bc2b4f886.flatten-array",
    "description": "MY_GISTS.8bc2b4f886.flatten-array",
    "peekOfCode": "def flatten_array(orig):\n    \"\"\"returns a new, flattened, list\"\"\"\n    flattened_list = []\n    for item in orig:\n        if isinstance(item, list):\n            flattened_list += flatten_array(item)\n        else:\n            flattened_list.append(item)\n    return flattened_list\ndef flatten_in_place(orig):",
    "detail": "MY_GISTS.8bc2b4f886.flatten-array",
    "documentation": {}
  },
  {
    "label": "flatten_in_place",
    "kind": 2,
    "importPath": "MY_GISTS.8bc2b4f886.flatten-array",
    "description": "MY_GISTS.8bc2b4f886.flatten-array",
    "peekOfCode": "def flatten_in_place(orig):\n    \"\"\"flattens a given list in place\"\"\"\n    is_flattened = False\n    while not is_flattened: # iterating until no more lists are found\n        is_flattened = True\n        for i, item in enumerate(orig):\n            if isinstance(item, list):\n                is_flattened = False\n                orig = orig[:i] + item + orig[i + 1:]\n    return orig",
    "detail": "MY_GISTS.8bc2b4f886.flatten-array",
    "documentation": {}
  },
  {
    "label": "largest_continuous_sum",
    "kind": 2,
    "importPath": "MY_GISTS.8bc2b4f886.largest-continuous-sum",
    "description": "MY_GISTS.8bc2b4f886.largest-continuous-sum",
    "peekOfCode": "def largest_continuous_sum(arr):\n    \"\"\"returns the highest sum of a continuous sequence in a given list\"\"\"\n    largest = 0\n    queue = []\n    for num in arr:\n        if len(queue) > 0 and queue[-1] + 1 != num:\n            sum = reduce(lambda x, y: x + y, queue)\n            if largest < sum:\n                largest = sum\n            queue = []",
    "detail": "MY_GISTS.8bc2b4f886.largest-continuous-sum",
    "documentation": {}
  },
  {
    "label": "getSumOfMultiple",
    "kind": 2,
    "importPath": "MY_GISTS.8bc2b4f886.multiples-of-3-and-5",
    "description": "MY_GISTS.8bc2b4f886.multiples-of-3-and-5",
    "peekOfCode": "def getSumOfMultiple(num, limit):\n  return int((ceil(limit / num) - 1) * ceil(limit / num) * num / 2)\ndef getSumOfMultiples(multiples, limit):\n  result = 0\n  sign = 1\n  for i in range(1, len(multiples) + 1):\n    for x in combinations(multiples, i):\n      result += sign * getSumOfMultiple(reduce(mul, x, 1), limit)\n    sign *= -1\n  return result",
    "detail": "MY_GISTS.8bc2b4f886.multiples-of-3-and-5",
    "documentation": {}
  },
  {
    "label": "getSumOfMultiples",
    "kind": 2,
    "importPath": "MY_GISTS.8bc2b4f886.multiples-of-3-and-5",
    "description": "MY_GISTS.8bc2b4f886.multiples-of-3-and-5",
    "peekOfCode": "def getSumOfMultiples(multiples, limit):\n  result = 0\n  sign = 1\n  for i in range(1, len(multiples) + 1):\n    for x in combinations(multiples, i):\n      result += sign * getSumOfMultiple(reduce(mul, x, 1), limit)\n    sign *= -1\n  return result",
    "detail": "MY_GISTS.8bc2b4f886.multiples-of-3-and-5",
    "documentation": {}
  },
  {
    "label": "once",
    "kind": 6,
    "importPath": "MY_GISTS.8bc2b4f886.once",
    "description": "MY_GISTS.8bc2b4f886.once",
    "peekOfCode": "class once:\n    def __init__(self, func, times=1):\n        self.times = int(times)\n        self.func  = func\n    def __call__(self, *args, **kwargs):\n        if self.times > 0:\n            self.times -= 1\n            return self.func(*args, **kwargs)",
    "detail": "MY_GISTS.8bc2b4f886.once",
    "documentation": {}
  },
  {
    "label": "is_prime",
    "kind": 2,
    "importPath": "MY_GISTS.8bc2b4f886.prime-number",
    "description": "MY_GISTS.8bc2b4f886.prime-number",
    "peekOfCode": "def is_prime(n):\n    if n <= 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    for i in xrange(3, int(sqrt(n))+1, 2):\n        if n % i == 0:\n            return False",
    "detail": "MY_GISTS.8bc2b4f886.prime-number",
    "documentation": {}
  },
  {
    "label": "quickSort",
    "kind": 2,
    "importPath": "MY_GISTS.8bc2b4f886.quick-sort",
    "description": "MY_GISTS.8bc2b4f886.quick-sort",
    "peekOfCode": "def quickSort(lst):\n    # List of 0 or 1 items is already sorted\n    if len(lst) <= 1:\n        return lst\n    else:\n        # Pivot can be chosen randomly\n        pivotIndex = randint(0, len(lst)-1)\n        pivot = lst[pivotIndex]\n        # Elements lower than and greater than pivot\n        lesser, greater = [], []",
    "detail": "MY_GISTS.8bc2b4f886.quick-sort",
    "documentation": {}
  },
  {
    "label": "Node",
    "kind": 6,
    "importPath": "MY_GISTS.8bc2b4f886.tree-level-order-print",
    "description": "MY_GISTS.8bc2b4f886.tree-level-order-print",
    "peekOfCode": "class Node(object):\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\ndef traverse_levelorder(root):\n    if not root:\n        return\n    q = [root, True]  # Use True as sentinel for end of row\n    while len(q) > 0:",
    "detail": "MY_GISTS.8bc2b4f886.tree-level-order-print",
    "documentation": {}
  },
  {
    "label": "traverse_levelorder",
    "kind": 2,
    "importPath": "MY_GISTS.8bc2b4f886.tree-level-order-print",
    "description": "MY_GISTS.8bc2b4f886.tree-level-order-print",
    "peekOfCode": "def traverse_levelorder(root):\n    if not root:\n        return\n    q = [root, True]  # Use True as sentinel for end of row\n    while len(q) > 0:\n        node = q.pop(0)\n        print node.value,\n        if node.left:\n            q.append(node.left)\n        if node.right:",
    "detail": "MY_GISTS.8bc2b4f886.tree-level-order-print",
    "documentation": {}
  },
  {
    "label": "plt.rcParams['font.family']",
    "kind": 5,
    "importPath": "MY_GISTS.8e9cb14158.base_graph",
    "description": "MY_GISTS.8e9cb14158.base_graph",
    "peekOfCode": "plt.rcParams['font.family'] = 'MEIRYO'\nplt.rcParams[\"font.size\"] = 18\nw, h, dpi = 1920, 1080, 144\nfig = plt.figure(figsize=(w / dpi, h / dpi), dpi=dpi, facecolor='white')\nx = np.arange(-0.2, 7, 0.001)\ny1 = 3 * np.sin(x)\ny2 = 2.3 * np.sin(x )\nplt.xticks(np.linspace(0, np.pi * 2.5, num=6, endpoint=True))\nplt.yticks(np.linspace(-11, 11, num=23, endpoint=True))\nplt.grid(True)",
    "detail": "MY_GISTS.8e9cb14158.base_graph",
    "documentation": {}
  },
  {
    "label": "plt.rcParams[\"font.size\"]",
    "kind": 5,
    "importPath": "MY_GISTS.8e9cb14158.base_graph",
    "description": "MY_GISTS.8e9cb14158.base_graph",
    "peekOfCode": "plt.rcParams[\"font.size\"] = 18\nw, h, dpi = 1920, 1080, 144\nfig = plt.figure(figsize=(w / dpi, h / dpi), dpi=dpi, facecolor='white')\nx = np.arange(-0.2, 7, 0.001)\ny1 = 3 * np.sin(x)\ny2 = 2.3 * np.sin(x )\nplt.xticks(np.linspace(0, np.pi * 2.5, num=6, endpoint=True))\nplt.yticks(np.linspace(-11, 11, num=23, endpoint=True))\nplt.grid(True)\nplt.plot(x, y1, label=\"電流\")",
    "detail": "MY_GISTS.8e9cb14158.base_graph",
    "documentation": {}
  },
  {
    "label": "fig",
    "kind": 5,
    "importPath": "MY_GISTS.8e9cb14158.base_graph",
    "description": "MY_GISTS.8e9cb14158.base_graph",
    "peekOfCode": "fig = plt.figure(figsize=(w / dpi, h / dpi), dpi=dpi, facecolor='white')\nx = np.arange(-0.2, 7, 0.001)\ny1 = 3 * np.sin(x)\ny2 = 2.3 * np.sin(x )\nplt.xticks(np.linspace(0, np.pi * 2.5, num=6, endpoint=True))\nplt.yticks(np.linspace(-11, 11, num=23, endpoint=True))\nplt.grid(True)\nplt.plot(x, y1, label=\"電流\")\nplt.plot(x, y2, label='両端電圧')\nplt.legend()",
    "detail": "MY_GISTS.8e9cb14158.base_graph",
    "documentation": {}
  },
  {
    "label": "x",
    "kind": 5,
    "importPath": "MY_GISTS.8e9cb14158.base_graph",
    "description": "MY_GISTS.8e9cb14158.base_graph",
    "peekOfCode": "x = np.arange(-0.2, 7, 0.001)\ny1 = 3 * np.sin(x)\ny2 = 2.3 * np.sin(x )\nplt.xticks(np.linspace(0, np.pi * 2.5, num=6, endpoint=True))\nplt.yticks(np.linspace(-11, 11, num=23, endpoint=True))\nplt.grid(True)\nplt.plot(x, y1, label=\"電流\")\nplt.plot(x, y2, label='両端電圧')\nplt.legend()\nplt.legend(bbox_to_anchor=(1, 1), loc='upper right', borderaxespad=1)",
    "detail": "MY_GISTS.8e9cb14158.base_graph",
    "documentation": {}
  },
  {
    "label": "y1",
    "kind": 5,
    "importPath": "MY_GISTS.8e9cb14158.base_graph",
    "description": "MY_GISTS.8e9cb14158.base_graph",
    "peekOfCode": "y1 = 3 * np.sin(x)\ny2 = 2.3 * np.sin(x )\nplt.xticks(np.linspace(0, np.pi * 2.5, num=6, endpoint=True))\nplt.yticks(np.linspace(-11, 11, num=23, endpoint=True))\nplt.grid(True)\nplt.plot(x, y1, label=\"電流\")\nplt.plot(x, y2, label='両端電圧')\nplt.legend()\nplt.legend(bbox_to_anchor=(1, 1), loc='upper right', borderaxespad=1)\nplt.show()",
    "detail": "MY_GISTS.8e9cb14158.base_graph",
    "documentation": {}
  },
  {
    "label": "y2",
    "kind": 5,
    "importPath": "MY_GISTS.8e9cb14158.base_graph",
    "description": "MY_GISTS.8e9cb14158.base_graph",
    "peekOfCode": "y2 = 2.3 * np.sin(x )\nplt.xticks(np.linspace(0, np.pi * 2.5, num=6, endpoint=True))\nplt.yticks(np.linspace(-11, 11, num=23, endpoint=True))\nplt.grid(True)\nplt.plot(x, y1, label=\"電流\")\nplt.plot(x, y2, label='両端電圧')\nplt.legend()\nplt.legend(bbox_to_anchor=(1, 1), loc='upper right', borderaxespad=1)\nplt.show()",
    "detail": "MY_GISTS.8e9cb14158.base_graph",
    "documentation": {}
  },
  {
    "label": "input_list",
    "kind": 5,
    "importPath": "MY_GISTS.8f9226612b.prac3",
    "description": "MY_GISTS.8f9226612b.prac3",
    "peekOfCode": "input_list = input(\"Enter a list of numbers: \")\nlist = input_list.split()  # separting the elements by spaces in the list\nfor x in list:\n    if int(x) < 5:\n        print(x)\nprint([x for x in list if int(x) < 5])\nnum = int(input(\"Enter a number: \"))\nprint([x for x in list if int(x) < num])",
    "detail": "MY_GISTS.8f9226612b.prac3",
    "documentation": {}
  },
  {
    "label": "list",
    "kind": 5,
    "importPath": "MY_GISTS.8f9226612b.prac3",
    "description": "MY_GISTS.8f9226612b.prac3",
    "peekOfCode": "list = input_list.split()  # separting the elements by spaces in the list\nfor x in list:\n    if int(x) < 5:\n        print(x)\nprint([x for x in list if int(x) < 5])\nnum = int(input(\"Enter a number: \"))\nprint([x for x in list if int(x) < num])",
    "detail": "MY_GISTS.8f9226612b.prac3",
    "documentation": {}
  },
  {
    "label": "num",
    "kind": 5,
    "importPath": "MY_GISTS.8f9226612b.prac3",
    "description": "MY_GISTS.8f9226612b.prac3",
    "peekOfCode": "num = int(input(\"Enter a number: \"))\nprint([x for x in list if int(x) < num])",
    "detail": "MY_GISTS.8f9226612b.prac3",
    "documentation": {}
  },
  {
    "label": "name",
    "kind": 5,
    "importPath": "MY_GISTS.9ecd1d14eb.prac1",
    "description": "MY_GISTS.9ecd1d14eb.prac1",
    "peekOfCode": "name = input(\"What's you name? \")\nage = int(input(\"What's your age? \"))\ncurrent_year = date.today().year\nif age >= 100:\n    print(name + \", you have turned 100 in the year: \", current_year - (age - 100))\nelse:\n    print(name + \", you will turn 100 in year: \", current_year + (100 - age))",
    "detail": "MY_GISTS.9ecd1d14eb.prac1",
    "documentation": {}
  },
  {
    "label": "age",
    "kind": 5,
    "importPath": "MY_GISTS.9ecd1d14eb.prac1",
    "description": "MY_GISTS.9ecd1d14eb.prac1",
    "peekOfCode": "age = int(input(\"What's your age? \"))\ncurrent_year = date.today().year\nif age >= 100:\n    print(name + \", you have turned 100 in the year: \", current_year - (age - 100))\nelse:\n    print(name + \", you will turn 100 in year: \", current_year + (100 - age))",
    "detail": "MY_GISTS.9ecd1d14eb.prac1",
    "documentation": {}
  },
  {
    "label": "current_year",
    "kind": 5,
    "importPath": "MY_GISTS.9ecd1d14eb.prac1",
    "description": "MY_GISTS.9ecd1d14eb.prac1",
    "peekOfCode": "current_year = date.today().year\nif age >= 100:\n    print(name + \", you have turned 100 in the year: \", current_year - (age - 100))\nelse:\n    print(name + \", you will turn 100 in year: \", current_year + (100 - age))",
    "detail": "MY_GISTS.9ecd1d14eb.prac1",
    "documentation": {}
  },
  {
    "label": "hello",
    "kind": 2,
    "importPath": "MY_GISTS.a1ea600ece.app",
    "description": "MY_GISTS.a1ea600ece.app",
    "peekOfCode": "def hello():\n    message = request.args.get(\"message\")\n    if not message:\n        message = \"Hello World!\"\n    return simple_package.echo(message)\n@app.route(\"/shout\")\ndef shout():\n    message = request.args.get(\"message\")\n    if not message:\n        message = \"Hello World!\"",
    "detail": "MY_GISTS.a1ea600ece.app",
    "documentation": {}
  },
  {
    "label": "shout",
    "kind": 2,
    "importPath": "MY_GISTS.a1ea600ece.app",
    "description": "MY_GISTS.a1ea600ece.app",
    "peekOfCode": "def shout():\n    message = request.args.get(\"message\")\n    if not message:\n        message = \"Hello World!\"\n    return simple_package.shout(message)",
    "detail": "MY_GISTS.a1ea600ece.app",
    "documentation": {}
  },
  {
    "label": "app",
    "kind": 5,
    "importPath": "MY_GISTS.a1ea600ece.app",
    "description": "MY_GISTS.a1ea600ece.app",
    "peekOfCode": "app = Flask(__name__)\n@app.route(\"/\")\ndef hello():\n    message = request.args.get(\"message\")\n    if not message:\n        message = \"Hello World!\"\n    return simple_package.echo(message)\n@app.route(\"/shout\")\ndef shout():\n    message = request.args.get(\"message\")",
    "detail": "MY_GISTS.a1ea600ece.app",
    "documentation": {}
  },
  {
    "label": "Stat",
    "kind": 6,
    "importPath": "MY_GISTS.a800a711fd.traveling-salesman",
    "description": "MY_GISTS.a800a711fd.traveling-salesman",
    "peekOfCode": "class State :\n    name = \"\"\n    visited = 0\nclass Action :\n    act = \"\"\nclass Problem :\n    def input(self) :\n        global cityNum\n        global cityArr\n        global builtStates",
    "detail": "MY_GISTS.a800a711fd.traveling-salesman",
    "documentation": {}
  },
  {
    "label": "Actio",
    "kind": 6,
    "importPath": "MY_GISTS.a800a711fd.traveling-salesman",
    "description": "MY_GISTS.a800a711fd.traveling-salesman",
    "peekOfCode": "class Action :\n    act = \"\"\nclass Problem :\n    def input(self) :\n        global cityNum\n        global cityArr\n        global builtStates\n        cityNum = int(input('Enter number of cities: '))\n        mylist =[]\n        for n in range (0,cityNum) :",
    "detail": "MY_GISTS.a800a711fd.traveling-salesman",
    "documentation": {}
  },
  {
    "label": "Proble",
    "kind": 6,
    "importPath": "MY_GISTS.a800a711fd.traveling-salesman",
    "description": "MY_GISTS.a800a711fd.traveling-salesman",
    "peekOfCode": "class Problem :\n    def input(self) :\n        global cityNum\n        global cityArr\n        global builtStates\n        cityNum = int(input('Enter number of cities: '))\n        mylist =[]\n        for n in range (0,cityNum) :\n            x = input('Enter the %d line : ' % n)\n            y=x.split()",
    "detail": "MY_GISTS.a800a711fd.traveling-salesman",
    "documentation": {}
  },
  {
    "label": "cityNum",
    "kind": 5,
    "importPath": "MY_GISTS.a800a711fd.traveling-salesman",
    "description": "MY_GISTS.a800a711fd.traveling-salesman",
    "peekOfCode": "cityNum = None\ncityArr = []\nactions = []\nbuiltStates = []\nclass State :\n    name = \"\"\n    visited = 0\nclass Action :\n    act = \"\"\nclass Problem :",
    "detail": "MY_GISTS.a800a711fd.traveling-salesman",
    "documentation": {}
  },
  {
    "label": "cityArr",
    "kind": 5,
    "importPath": "MY_GISTS.a800a711fd.traveling-salesman",
    "description": "MY_GISTS.a800a711fd.traveling-salesman",
    "peekOfCode": "cityArr = []\nactions = []\nbuiltStates = []\nclass State :\n    name = \"\"\n    visited = 0\nclass Action :\n    act = \"\"\nclass Problem :\n    def input(self) :",
    "detail": "MY_GISTS.a800a711fd.traveling-salesman",
    "documentation": {}
  },
  {
    "label": "actions",
    "kind": 5,
    "importPath": "MY_GISTS.a800a711fd.traveling-salesman",
    "description": "MY_GISTS.a800a711fd.traveling-salesman",
    "peekOfCode": "actions = []\nbuiltStates = []\nclass State :\n    name = \"\"\n    visited = 0\nclass Action :\n    act = \"\"\nclass Problem :\n    def input(self) :\n        global cityNum",
    "detail": "MY_GISTS.a800a711fd.traveling-salesman",
    "documentation": {}
  },
  {
    "label": "builtStates",
    "kind": 5,
    "importPath": "MY_GISTS.a800a711fd.traveling-salesman",
    "description": "MY_GISTS.a800a711fd.traveling-salesman",
    "peekOfCode": "builtStates = []\nclass State :\n    name = \"\"\n    visited = 0\nclass Action :\n    act = \"\"\nclass Problem :\n    def input(self) :\n        global cityNum\n        global cityArr",
    "detail": "MY_GISTS.a800a711fd.traveling-salesman",
    "documentation": {}
  },
  {
    "label": "getReposURLs",
    "kind": 6,
    "importPath": "MY_GISTS.a8b5d78375.githubcloner",
    "description": "MY_GISTS.a8b5d78375.githubcloner",
    "peekOfCode": "class getReposURLs:\n    def __init__(self, api_prefix, exclude_repos=None):\n        self.user_agent = \"GithubCloner (https://github.com/mazen160/GithubCloner)\"\n        self.headers = {'User-Agent': self.user_agent, 'Accept': '*/*'}\n        self.timeout = 30\n        self.api_prefix = api_prefix\n        self.excluded_repos_list = [] if exclude_repos is None else\\\n            exclude_repos.strip().split(',')\n    def filter_excluded_repos(self, url):\n        '''",
    "detail": "MY_GISTS.a8b5d78375.githubcloner",
    "documentation": {}
  },
  {
    "label": "parseGitURL",
    "kind": 2,
    "importPath": "MY_GISTS.a8b5d78375.githubcloner",
    "description": "MY_GISTS.a8b5d78375.githubcloner",
    "peekOfCode": "def parseGitURL(URL, username=None, token=None):\n    \"\"\"\n    This function parses the GIT URL.\n    \"\"\"\n    URL = URL.replace(\"git://\", \"https://\")\n    if (username or token) is not None:\n        URL = URL.replace(\n            \"https://\", \"https://{0}:{1}@\".format(username, token))\n    return URL\ndef get_repopath(repo_username, repo_name, prefix_mode):",
    "detail": "MY_GISTS.a8b5d78375.githubcloner",
    "documentation": {}
  },
  {
    "label": "get_repopath",
    "kind": 2,
    "importPath": "MY_GISTS.a8b5d78375.githubcloner",
    "description": "MY_GISTS.a8b5d78375.githubcloner",
    "peekOfCode": "def get_repopath(repo_username, repo_name, prefix_mode):\n    \"\"\"\n    Returns a string of the repo path.\n    \"\"\"\n    if prefix_mode == \"none\":\n        repopath = repo_name\n    elif prefix_mode == \"underscore\":\n        repopath = repo_username + \"_\" + repo_name\n    elif prefix_mode == \"directory\":\n        repopath = repo_username + \"/\" + repo_name",
    "detail": "MY_GISTS.a8b5d78375.githubcloner",
    "documentation": {}
  },
  {
    "label": "cloneRepo",
    "kind": 2,
    "importPath": "MY_GISTS.a8b5d78375.githubcloner",
    "description": "MY_GISTS.a8b5d78375.githubcloner",
    "peekOfCode": "def cloneRepo(URL,\n              cloningpath,\n              username=None,\n              token=None,\n              prefix_mode=\"underscore\"):\n    \"\"\"\n    Clones a single GIT repository.\n    Input:-\n    URL: GIT repository URL.\n    cloningPath: the directory that the repository will be cloned at.",
    "detail": "MY_GISTS.a8b5d78375.githubcloner",
    "documentation": {}
  },
  {
    "label": "cloneBulkRepos",
    "kind": 2,
    "importPath": "MY_GISTS.a8b5d78375.githubcloner",
    "description": "MY_GISTS.a8b5d78375.githubcloner",
    "peekOfCode": "def cloneBulkRepos(URLs,\n                   cloningPath,\n                   threads_limit=5,\n                   username=None,\n                   token=None,\n                   prefix_mode=\"underscore\"):\n    \"\"\"\n    Clones a bulk of GIT repositories.\n    Input:-\n    URLs: A list of GIT repository URLs.",
    "detail": "MY_GISTS.a8b5d78375.githubcloner",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "MY_GISTS.a8b5d78375.githubcloner",
    "description": "MY_GISTS.a8b5d78375.githubcloner",
    "peekOfCode": "def main():\n    \"\"\"\n    The main function.\n    \"\"\"\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"-u\", \"--user\",\n                        dest=\"users\",\n                        help=\"Github user (comma-separated input for multiple Github users).\",\n                        action='store')\n    parser.add_argument(\"-org\", \"--org\",",
    "detail": "MY_GISTS.a8b5d78375.githubcloner",
    "documentation": {}
  },
  {
    "label": "get_links",
    "kind": 2,
    "importPath": "MY_GISTS.aed12c3466.medium-scraper",
    "description": "MY_GISTS.aed12c3466.medium-scraper",
    "peekOfCode": "def get_links(tag, suffix):\n    url = 'https://medium.com/tag/' + tag\n    urls = [url + '/' + s for s in suffix]\n    links = []\n    for url in urls:\n        data = requests.get(url)\n        soup = BeautifulSoup(data.content, 'html.parser')\n        articles = soup.findAll('div', {\"class\": \"postArticle-readMore\"})\n        for i in articles:\n            links.append(i.a.get('href'))",
    "detail": "MY_GISTS.aed12c3466.medium-scraper",
    "documentation": {}
  },
  {
    "label": "get_article",
    "kind": 2,
    "importPath": "MY_GISTS.aed12c3466.medium-scraper",
    "description": "MY_GISTS.aed12c3466.medium-scraper",
    "peekOfCode": "def get_article(links):\n    articles = []\n    for link in links:\n        try:\n            article = {}\n            data = requests.get(link)\n            soup = BeautifulSoup(data.content, 'html.parser')\n            title = soup.findAll('title')[0]\n            title = title.get_text()\n            author = soup.findAll('meta', {\"name\": \"author\"})[0]",
    "detail": "MY_GISTS.aed12c3466.medium-scraper",
    "documentation": {}
  },
  {
    "label": "save_articles",
    "kind": 2,
    "importPath": "MY_GISTS.aed12c3466.medium-scraper",
    "description": "MY_GISTS.aed12c3466.medium-scraper",
    "peekOfCode": "def save_articles(articles, csv_file,  is_write = True):\n    csv_columns = ['author', 'claps', 'reading_time', 'link', 'title', 'text']\n    print(csv_file)\n    if is_write:\n        with open(csv_file, 'w') as csvfile:\n            writer = csv.DictWriter(csvfile, fieldnames=csv_columns, delimiter='|')\n            writer.writeheader()\n            for data in articles:\n                writer.writerow(data)\n            csvfile.close()",
    "detail": "MY_GISTS.aed12c3466.medium-scraper",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "MY_GISTS.aed12c3466.medium-scraper",
    "description": "MY_GISTS.aed12c3466.medium-scraper",
    "peekOfCode": "def main():\n    is_write = True\n    tags = input('Write tags in space separated format.\\n')\n    tags = tags.split(' ')\n    file_name = input('Write destination file name.\\n')\n    if len(file_name.split('.')) == 1:\n        file_name += '.csv'\n    suffixes = ['', 'latest', 'archive/2000', 'archive/2001', 'archive/2002', 'archive/2003', 'archive/2004', 'archive/2005', 'archive/2006', 'archive/2007', 'archive/2008', 'archive/2009',\n            'archive/2010', 'archive/2011', 'archive/2012', 'archive/2013', 'archive/2014', 'archive/2015', 'archive/2016', 'archive/2017', 'archive/2018']\n    for tag in tags:",
    "detail": "MY_GISTS.aed12c3466.medium-scraper",
    "documentation": {}
  },
  {
    "label": "add",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def add(param1, param2):\n    return param1 + param2\n#------------------------------------------------------------------------------------------------#\n#------------------------------------------------------------------------------------------------#\ndef centuryFromYear(year):\n    return ((year - 1) // 100) + 1\n#------------------------------------------------------------------------------------------------#\ndef checkPalindrome(inputString):\n    return inputString == inputString[::-1]\n#------------------------------------------------------------------------------------------------#",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "centuryFromYear",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def centuryFromYear(year):\n    return ((year - 1) // 100) + 1\n#------------------------------------------------------------------------------------------------#\ndef checkPalindrome(inputString):\n    return inputString == inputString[::-1]\n#------------------------------------------------------------------------------------------------#\ndef adjacentElementsProduct(inputArray):\n    max = inputArray[0] * inputArray[1]\n    for i in range(len(inputArray) - 1):\n        if inputArray[i] * inputArray[i + 1] > max:",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "checkPalindrome",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def checkPalindrome(inputString):\n    return inputString == inputString[::-1]\n#------------------------------------------------------------------------------------------------#\ndef adjacentElementsProduct(inputArray):\n    max = inputArray[0] * inputArray[1]\n    for i in range(len(inputArray) - 1):\n        if inputArray[i] * inputArray[i + 1] > max:\n            max = inputArray[i] * inputArray[i + 1]\n    return max\n#------------------------------------------------------------------------------------------------#",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "adjacentElementsProduct",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def adjacentElementsProduct(inputArray):\n    max = inputArray[0] * inputArray[1]\n    for i in range(len(inputArray) - 1):\n        if inputArray[i] * inputArray[i + 1] > max:\n            max = inputArray[i] * inputArray[i + 1]\n    return max\n#------------------------------------------------------------------------------------------------#\ndef shapeArea(n):\n    sum = n * 2 - 1\n    for i in range(1, (n * 2) - 1, 2):",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "shapeArea",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def shapeArea(n):\n    sum = n * 2 - 1\n    for i in range(1, (n * 2) - 1, 2):\n        sum += i * 2\n    return sum\n#------------------------------------------------------------------------------------------------#\ndef makeArrayConsecutive2(statues):\n    return max(statues) - min(statues) - len(statues) + 1\n#------------------------------------------------------------------------------------------------#\ndef almostIncreasingSequence(sequence):",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "makeArrayConsecutive2",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def makeArrayConsecutive2(statues):\n    return max(statues) - min(statues) - len(statues) + 1\n#------------------------------------------------------------------------------------------------#\ndef almostIncreasingSequence(sequence):\n    i = 0\n    while i < len(sequence) - 1:\n        if not sequence[i] < sequence[i + 1]:\n            if increasingSequence(\n                sequence[:i] + sequence[i + 1 :]\n            ) or increasingSequence(sequence[: i + 1] + sequence[i + 2 :]):",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "almostIncreasingSequence",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def almostIncreasingSequence(sequence):\n    i = 0\n    while i < len(sequence) - 1:\n        if not sequence[i] < sequence[i + 1]:\n            if increasingSequence(\n                sequence[:i] + sequence[i + 1 :]\n            ) or increasingSequence(sequence[: i + 1] + sequence[i + 2 :]):\n                return True\n            else:\n                return False",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "increasingSequence",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def increasingSequence(sequence):\n    for i in range(len(sequence) - 1):\n        if not sequence[i] < sequence[i + 1]:\n            return False\n    return True\n#------------------------------------------------------------------------------------------------#\ndef matrixElementsSum(matrix):\n    if len(matrix) > 1:\n        for row in range(1, len(matrix)):\n            for room in range(len(matrix[row])):",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "matrixElementsSum",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def matrixElementsSum(matrix):\n    if len(matrix) > 1:\n        for row in range(1, len(matrix)):\n            for room in range(len(matrix[row])):\n                if matrix[row - 1][room] == 0:\n                    matrix[row][room] = 0\n    sum = 0\n    for row in matrix:\n        for room in row:\n            sum += room",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "allLongestStrings",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def allLongestStrings(inputArray):\n    length = max([len(word) for word in inputArray])\n    result = [word for word in inputArray if len(word) == length]\n    return result\n#------------------------------------------------------------------------------------------------#\ndef commonCharacterCount(s1, s2):\n    count = 0\n    word2 = list(s2)\n    for letter in s1:\n        if letter in word2:",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "commonCharacterCount",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def commonCharacterCount(s1, s2):\n    count = 0\n    word2 = list(s2)\n    for letter in s1:\n        if letter in word2:\n            word2.remove(letter)\n            count += 1\n    return count\n#------------------------------------------------------------------------------------------------#\ndef isLucky(n):",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "isLucky",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def isLucky(n):\n    string = str(n)\n    top = [int(x) for x in string[: len(string) // 2]]\n    bottom = [int(x) for x in string[len(string) // 2 :]]\n    return sum(top) == sum(bottom)\n#------------------------------------------------------------------------------------------------#\ndef sortByHeight(a):\n    treePositions = [x for x in range(len(a)) if a[x] == -1]\n    people = sorted([x for x in a if x != -1])\n    for tree in treePositions:",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "sortByHeight",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def sortByHeight(a):\n    treePositions = [x for x in range(len(a)) if a[x] == -1]\n    people = sorted([x for x in a if x != -1])\n    for tree in treePositions:\n        people.insert(tree, -1)\n    return people\nimport re\n#------------------------------------------------------------------------------------------------#\ndef reverseParentheses(s):\n    while \"(\" in s:",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "reverseParentheses",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def reverseParentheses(s):\n    while \"(\" in s:\n        match = re.search(\"\\([^()]*\\)\", s)\n        match_string = match.group(0)[1 : len(match.group(0)) - 1]\n        reversed_match_string = match_string[::-1]\n        s = s[: match.start()] + reversed_match_string + s[match.end() :]\n    return s\n#------------------------------------------------------------------------------------------------#\ndef alternatingSums(a):\n    team1 = sum(a[0::2])",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "alternatingSums",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def alternatingSums(a):\n    team1 = sum(a[0::2])\n    team2 = sum(a[1::2])\n    return [team1, team2]\n#------------------------------------------------------------------------------------------------#\ndef addBorder(picture):\n    picture = [\"*\" + string + \"*\" for string in picture]\n    picture = [(\"*\" * len(picture[0]))] + picture + [(\"*\" * len(picture[0]))]\n    return picture\n#------------------------------------------------------------------------------------------------#",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "addBorder",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def addBorder(picture):\n    picture = [\"*\" + string + \"*\" for string in picture]\n    picture = [(\"*\" * len(picture[0]))] + picture + [(\"*\" * len(picture[0]))]\n    return picture\n#------------------------------------------------------------------------------------------------#\ndef areSimilar(a, b):\n    diff = [i for i in range(len(a)) if a[i] != b[i]]\n    if len(diff) == 2:\n        b[diff[0]], b[diff[1]] = b[diff[1]], b[diff[0]]\n    return a == b",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "areSimilar",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def areSimilar(a, b):\n    diff = [i for i in range(len(a)) if a[i] != b[i]]\n    if len(diff) == 2:\n        b[diff[0]], b[diff[1]] = b[diff[1]], b[diff[0]]\n    return a == b\n#------------------------------------------------------------------------------------------------#\ndef arrayChange(inputArray):\n    count = 0\n    for i in range(1, len(inputArray)):\n        if inputArray[i - 1] >= inputArray[i]:",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "arrayChange",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def arrayChange(inputArray):\n    count = 0\n    for i in range(1, len(inputArray)):\n        if inputArray[i - 1] >= inputArray[i]:\n            difference = inputArray[i - 1] - inputArray[i]\n            inputArray[i] += difference + 1\n            count += difference + 1\n    return count\n#------------------------------------------------------------------------------------------------#\ndef palindromeRearranging(inputString):",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "palindromeRearranging",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def palindromeRearranging(inputString):\n    inputList = sorted(inputString)\n    foundMiddle = False\n    while len(inputList) > 1:\n        if inputList[0] == inputList[1]:\n            del inputList[1]\n        elif not foundMiddle:\n            foundMiddle = True\n        else:\n            return False",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "areEquallyStrong",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def areEquallyStrong(yourLeft, yourRight, friendsLeft, friendsRight):\n    sameHands = yourLeft == friendsLeft and yourRight == friendsRight\n    differentHands = yourLeft == friendsRight and yourRight == friendsLeft\n    return sameHands or differentHands\n#------------------------------------------------------------------------------------------------#\ndef arrayMaximalAdjacentDifference(inputArray):\n    diffs = []\n    for i in range(len(inputArray) - 1):\n        diffs.append(abs(inputArray[i] - inputArray[i + 1]))\n    return max(diffs)",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "arrayMaximalAdjacentDifference",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def arrayMaximalAdjacentDifference(inputArray):\n    diffs = []\n    for i in range(len(inputArray) - 1):\n        diffs.append(abs(inputArray[i] - inputArray[i + 1]))\n    return max(diffs)\n#------------------------------------------------------------------------------------------------#\ndef isIPv4Address(inputString):\n    strings = [string for string in inputString.split(\".\")]\n    for string in strings:\n        if not string.isdecimal():",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "isIPv4Address",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def isIPv4Address(inputString):\n    strings = [string for string in inputString.split(\".\")]\n    for string in strings:\n        if not string.isdecimal():\n            return False\n    nums = [int(num) for num in strings]\n    return max(nums) <= 255 and min(nums) >= 0 and len(nums) == 4\n#------------------------------------------------------------------------------------------------#\ndef avoidObstacles(inputArray):\n    for length in range(2, max(inputArray) + 2):",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "avoidObstacles",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def avoidObstacles(inputArray):\n    for length in range(2, max(inputArray) + 2):\n        done = True\n        jump = length\n        while jump < (max(inputArray) + length):\n            if jump in inputArray:\n                done = False\n                break\n            jump += length\n        if done:",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "boxBlur",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def boxBlur(image):\n    outImage = []\n    for row in range(1, len(image) - 1):\n        line = []\n        for pixel in range(1, len(image[row]) - 1):\n            total = (\n                image[row - 1][pixel - 1]\n                + image[row - 1][pixel]\n                + image[row - 1][pixel + 1]\n                + image[row][pixel - 1]",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "minesweeper",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def minesweeper(matrix):\n    TOP = 0\n    BOTTOM = len(matrix) - 1\n    LEFT = 0\n    RIGHT = len(matrix[0]) - 1\n    outMatrix = []\n    for row in range(len(matrix)):\n        outRow = []\n        for cell in range(len(matrix[row])):\n            outRow.append(0)",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "arrayReplace",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def arrayReplace(inputArray, elemToReplace, substitutionElem):\n    return [x if x != elemToReplace else substitutionElem for x in inputArray]\n#------------------------------------------------------------------------------------------------#\ndef evenDigitsOnly(n):\n    return all(\n        (True if digit in (\"0\", \"2\", \"4\", \"6\", \"8\") else False for digit in str(n))\n    )\n#------------------------------------------------------------------------------------------------#\ndef variableName(name):\n    return name.replace(\"_\", \"\").isalnum() and not name[0].isdigit()",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "evenDigitsOnly",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def evenDigitsOnly(n):\n    return all(\n        (True if digit in (\"0\", \"2\", \"4\", \"6\", \"8\") else False for digit in str(n))\n    )\n#------------------------------------------------------------------------------------------------#\ndef variableName(name):\n    return name.replace(\"_\", \"\").isalnum() and not name[0].isdigit()\n#------------------------------------------------------------------------------------------------#\ndef alphabeticShift(inputString):\n    return \"\".join([chr(ord(x) + 1) if x != \"z\" else \"a\" for x in inputString])",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "variableName",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def variableName(name):\n    return name.replace(\"_\", \"\").isalnum() and not name[0].isdigit()\n#------------------------------------------------------------------------------------------------#\ndef alphabeticShift(inputString):\n    return \"\".join([chr(ord(x) + 1) if x != \"z\" else \"a\" for x in inputString])\n#------------------------------------------------------------------------------------------------#\ndef chessBoardCellColor(cell1, cell2):\n    color1 = ((ord(cell1[0]) - ord(\"A\")) + ord(cell1[1]) - ord(\"1\")) % 2 == 0\n    color2 = ((ord(cell2[0]) - ord(\"A\")) + ord(cell2[1]) - ord(\"1\")) % 2 == 0\n    return color1 == color2",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "alphabeticShift",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def alphabeticShift(inputString):\n    return \"\".join([chr(ord(x) + 1) if x != \"z\" else \"a\" for x in inputString])\n#------------------------------------------------------------------------------------------------#\ndef chessBoardCellColor(cell1, cell2):\n    color1 = ((ord(cell1[0]) - ord(\"A\")) + ord(cell1[1]) - ord(\"1\")) % 2 == 0\n    color2 = ((ord(cell2[0]) - ord(\"A\")) + ord(cell2[1]) - ord(\"1\")) % 2 == 0\n    return color1 == color2\n#------------------------------------------------------------------------------------------------#\ndef circleOfNumbers(n, firstNumber):\n    return (firstNumber + (n / 2)) % n",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "chessBoardCellColor",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def chessBoardCellColor(cell1, cell2):\n    color1 = ((ord(cell1[0]) - ord(\"A\")) + ord(cell1[1]) - ord(\"1\")) % 2 == 0\n    color2 = ((ord(cell2[0]) - ord(\"A\")) + ord(cell2[1]) - ord(\"1\")) % 2 == 0\n    return color1 == color2\n#------------------------------------------------------------------------------------------------#\ndef circleOfNumbers(n, firstNumber):\n    return (firstNumber + (n / 2)) % n\n#------------------------------------------------------------------------------------------------#\ndef depositProfit(deposit, rate, threshold):\n    year = 0",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "circleOfNumbers",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def circleOfNumbers(n, firstNumber):\n    return (firstNumber + (n / 2)) % n\n#------------------------------------------------------------------------------------------------#\ndef depositProfit(deposit, rate, threshold):\n    year = 0\n    while deposit < threshold:\n        deposit *= 1 + (rate / 100)\n        year += 1\n    return year\n#------------------------------------------------------------------------------------------------#",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "depositProfit",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def depositProfit(deposit, rate, threshold):\n    year = 0\n    while deposit < threshold:\n        deposit *= 1 + (rate / 100)\n        year += 1\n    return year\n#------------------------------------------------------------------------------------------------#\n#------------------------------------------------------------------------------------------------#\ndef absoluteValuesSumMinimization(a):\n    sums = {}",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "absoluteValuesSumMinimization",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def absoluteValuesSumMinimization(a):\n    sums = {}\n    for num in a:\n        total = sum([abs(a[i] - num) for i in range(len(a))])\n        if total in sums:\n            sums[total] = min(num, sums[total])\n        else:\n            sums[total] = num\n        print(sums)\n    return sums[min(sums)]",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "stringsRearrangement",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def stringsRearrangement(inputArray):\n    permutations = itertools.permutations(inputArray)\n    for array in permutations:\n        if testArrangement(array):\n            return True\n    return False\n#------------------------------------------------------------------------------------------------#\ndef testArrangement(array):\n    for i in range(len(array) - 1):\n        if sum([a != b for a, b in zip(array[i], array[i + 1])]) != 1:",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "testArrangement",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def testArrangement(array):\n    for i in range(len(array) - 1):\n        if sum([a != b for a, b in zip(array[i], array[i + 1])]) != 1:\n            return False\n    return True\n#------------------------------------------------------------------------------------------------#\ndef extractEachKth(inputArray, k):\n    return [inputArray[x] for x in range(len(inputArray)) if (x + 1) % k != 0]\n#------------------------------------------------------------------------------------------------#\ndef firstDigit(inputString):",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "extractEachKth",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def extractEachKth(inputArray, k):\n    return [inputArray[x] for x in range(len(inputArray)) if (x + 1) % k != 0]\n#------------------------------------------------------------------------------------------------#\ndef firstDigit(inputString):\n    for char in inputString:\n        if char.isdigit():\n            return char\n#------------------------------------------------------------------------------------------------#\ndef differentSymbolsNaive(s):\n    return len(set(s))",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "firstDigit",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def firstDigit(inputString):\n    for char in inputString:\n        if char.isdigit():\n            return char\n#------------------------------------------------------------------------------------------------#\ndef differentSymbolsNaive(s):\n    return len(set(s))\n#------------------------------------------------------------------------------------------------#\ndef arrayMaxConsecutiveSum(inputArray, k):\n    sums = [sum(inputArray[:k])]",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "differentSymbolsNaive",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def differentSymbolsNaive(s):\n    return len(set(s))\n#------------------------------------------------------------------------------------------------#\ndef arrayMaxConsecutiveSum(inputArray, k):\n    sums = [sum(inputArray[:k])]\n    for i in range(1, len(inputArray) - k + 1):\n        sums.append(sums[i - 1] - inputArray[i - 1] + inputArray[i + k - 1])\n    return max(sums)\n#------------------------------------------------------------------------------------------------#\ndef growingPlant(upSpeed, downSpeed, desiredHeight):",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "arrayMaxConsecutiveSum",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def arrayMaxConsecutiveSum(inputArray, k):\n    sums = [sum(inputArray[:k])]\n    for i in range(1, len(inputArray) - k + 1):\n        sums.append(sums[i - 1] - inputArray[i - 1] + inputArray[i + k - 1])\n    return max(sums)\n#------------------------------------------------------------------------------------------------#\ndef growingPlant(upSpeed, downSpeed, desiredHeight):\n    height = 0\n    days = 1\n    height += upSpeed",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "growingPlant",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def growingPlant(upSpeed, downSpeed, desiredHeight):\n    height = 0\n    days = 1\n    height += upSpeed\n    while height < desiredHeight:\n        days += 1\n        height -= downSpeed\n        height += upSpeed\n    return days\n#------------------------------------------------------------------------------------------------#",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "knapsackLight",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def knapsackLight(value1, weight1, value2, weight2, maxW):\n    if weight1 + weight2 <= maxW:\n        return value1 + value2\n    if weight1 <= maxW and (weight2 > maxW or value1 >= value2):\n        return value1\n    if weight2 <= maxW and (weight1 > maxW or value2 >= value1):\n        return value2\n    return 0\n#------------------------------------------------------------------------------------------------#\ndef longestDigitsPrefix(inputString):",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "longestDigitsPrefix",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def longestDigitsPrefix(inputString):\n    for char in range(len(inputString)):\n        if not inputString[char].isdigit():\n            return inputString[:char]\n    return inputString\n#------------------------------------------------------------------------------------------------#\ndef digitDegree(n):\n    degree = 0\n    while len(str(n)) > 1:\n        n = sum((int(digit) for digit in str(n)))",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "digitDegree",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def digitDegree(n):\n    degree = 0\n    while len(str(n)) > 1:\n        n = sum((int(digit) for digit in str(n)))\n        degree += 1\n    return degree\n#------------------------------------------------------------------------------------------------#\ndef bishopAndPawn(bishop, pawn):\n    return abs(ord(bishop[0]) - ord(pawn[0])) == abs(ord(bishop[1]) - ord(pawn[1]))\n#------------------------------------------------------------------------------------------------#",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "bishopAndPawn",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def bishopAndPawn(bishop, pawn):\n    return abs(ord(bishop[0]) - ord(pawn[0])) == abs(ord(bishop[1]) - ord(pawn[1]))\n#------------------------------------------------------------------------------------------------#\ndef isBeautifulString(inputString):\n    for letter in range(ord(\"a\"), ord(\"z\")):\n        if inputString.count(chr(letter)) < inputString.count(chr(letter + 1)):\n            return False\n    return True\n#------------------------------------------------------------------------------------------------#\ndef findEmailDomain(address):",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "isBeautifulString",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def isBeautifulString(inputString):\n    for letter in range(ord(\"a\"), ord(\"z\")):\n        if inputString.count(chr(letter)) < inputString.count(chr(letter + 1)):\n            return False\n    return True\n#------------------------------------------------------------------------------------------------#\ndef findEmailDomain(address):\n    return address[address.rfind(\"@\") + 1 :]\n#------------------------------------------------------------------------------------------------#\ndef buildPalindrome(st):",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "findEmailDomain",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def findEmailDomain(address):\n    return address[address.rfind(\"@\") + 1 :]\n#------------------------------------------------------------------------------------------------#\ndef buildPalindrome(st):\n    if st == st[::-1]:  # Check for initial palindrome\n        return st\n    index = 0\n    subStr = st[index:]\n    while subStr != subStr[::-1]:  # while substring is not a palindrome\n        index += 1",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "buildPalindrome",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def buildPalindrome(st):\n    if st == st[::-1]:  # Check for initial palindrome\n        return st\n    index = 0\n    subStr = st[index:]\n    while subStr != subStr[::-1]:  # while substring is not a palindrome\n        index += 1\n        subStr = st[index:]\n    return st + st[index - 1 :: -1]\n#------------------------------------------------------------------------------------------------#",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "electionsWinners",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def electionsWinners(votes, k):\n    winners = 0\n    current_winner = max(votes)\n    for candidate in votes:\n        if k > 0 and candidate + k > current_winner:\n            winners += 1\n        if k == 0 and candidate == current_winner and votes.count(candidate) == 1:\n            winners += 1\n    return winners\n#------------------------------------------------------------------------------------------------#",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "isMAC48Address",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def isMAC48Address(inputString):\n    hex_chars = (\n        \"1\",\n        \"2\",\n        \"3\",\n        \"4\",\n        \"5\",\n        \"6\",\n        \"7\",\n        \"8\",",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "isDigit",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def isDigit(symbol):\n    return symbol.isdigit()\n#------------------------------------------------------------------------------------------------#\ndef lineEncoding(s):\n    count = 1\n    output = []\n    for char in range(1, len(s)):\n        if s[char] == s[char - 1]:\n            count += 1\n        else:",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "lineEncoding",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def lineEncoding(s):\n    count = 1\n    output = []\n    for char in range(1, len(s)):\n        if s[char] == s[char - 1]:\n            count += 1\n        else:\n            if count > 1:\n                output.append(str(count) + s[char - 1])\n            else:",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "chessKnight",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def chessKnight(cell):\n    moves = 0\n    # Starting at the top left, going counter-clockwise\n    if ord(cell[0]) >= ord(\"b\") and ord(cell[1]) <= ord(\"6\"):\n        moves += 1\n    if ord(cell[0]) >= ord(\"c\") and ord(cell[1]) <= ord(\"7\"):\n        moves += 1\n    if ord(cell[0]) >= ord(\"c\") and ord(cell[1]) >= ord(\"2\"):\n        moves += 1\n    if ord(cell[0]) >= ord(\"b\") and ord(cell[1]) >= ord(\"3\"):",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "deleteDigit",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def deleteDigit(n):\n    num = str(n)\n    highest = 0\n    for digit in range(len(num)):\n        output = num[:digit] + num[digit + 1 :]\n        if int(output) > int(highest):\n            highest = output\n    return int(highest)\n#------------------------------------------------------------------------------------------------#\ndef longestWord(text):",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "longestWord",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def longestWord(text):\n    longest = []\n    word = []\n    for char in text:\n        if ord(\"A\") <= ord(char) <= ord(\"Z\") or ord(\"a\") <= ord(char) <= ord(\"z\"):\n            word.append(char)\n        else:\n            if len(word) > len(longest):\n                longest = word\n            word = []",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "validTime",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def validTime(time):\n    groups = time.split(\":\")\n    if len(groups) != 2:\n        return False\n    if not (groups[0].isdigit() and groups[1].isdigit()):\n        return False\n    if int(groups[0]) > 23 or int(groups[1]) > 59:\n        return False\n    return True\n#------------------------------------------------------------------------------------------------#",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "sumUpNumbers",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def sumUpNumbers(inputString):\n    total = 0\n    current_num = []\n    for char in inputString:\n        if char.isdigit():\n            current_num.append(char)\n        else:\n            if len(current_num) > 0:\n                num = int(\"\".join(current_num))\n                total += num",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "differentSquares",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def differentSquares(matrix):\n    squares = set()\n    for row in range(len(matrix) - 1):\n        for cell in range(len(matrix[row]) - 1):\n            square = (\n                (matrix[row][cell], matrix[row][cell + 1]),\n                (matrix[row + 1][cell], matrix[row + 1][cell + 1]),\n            )\n            squares.add(square)\n    return len(squares)",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "digitsProduct",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def digitsProduct(product):\n    # New idea: add product to factors\n    # while max(factors) > 10: split that num into factors\n    if product == 0:\n        return 10\n    factors = [product]\n    while max(factors) > 9:\n        factored = findFactors(max(factors))\n        if factored:\n            factors.remove(max(factors))",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "findFactors",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def findFactors(n):\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return i, n // i\n    return False\n#------------------------------------------------------------------------------------------------#\ndef fileNaming(names):\n    outnames = []\n    for name in names:\n        if name in outnames:",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "fileNaming",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def fileNaming(names):\n    outnames = []\n    for name in names:\n        if name in outnames:\n            k = 1\n            while \"{}({})\".format(name, k) in outnames:\n                k += 1\n            name = \"{}({})\".format(name, k)\n        outnames.append(name)\n    return outnames",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "messageFromBinaryCode",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def messageFromBinaryCode(code):\n    output = []\n    for i in range(0, len(code), 8):\n        letter = chr(int(code[i : i + 8], 2))\n        output.append(letter)\n    return \"\".join(output)\n#------------------------------------------------------------------------------------------------#\ndef spiralNumbers(n):\n    LEFT = \"left\"\n    RIGHT = \"right\"",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "spiralNumbers",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def spiralNumbers(n):\n    LEFT = \"left\"\n    RIGHT = \"right\"\n    UP = \"up\"\n    DOWN = \"down\"\n    direction = RIGHT\n    spiral = [[0 for i in range(n)] for j in range(n)]\n    row = 0\n    cell = 0\n    for num in range(1, (n * n) + 1):",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "sudoku",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def sudoku(grid):\n    match = [i for i in range(1, 10)]\n    for row in grid:\n        if sorted(row) != match:\n            return False\n    for column_index in range(9):\n        column = [grid[row_index][column_index] for row_index in range(9)]\n        if sorted(column) != match:\n            return False\n    for row in range(0, 9, 3):",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "addTwoDigits",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def addTwoDigits(n):\n    return (n // 10) + (n % 10)\n#------------------------------------------------------------------------------------------------#\ndef largestNumber(n):\n    return int(\"9\" * n)\n#------------------------------------------------------------------------------------------------#\ndef candies(n, m):\n    return (m // n) * n\n#------------------------------------------------------------------------------------------------#",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "largestNumber",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def largestNumber(n):\n    return int(\"9\" * n)\n#------------------------------------------------------------------------------------------------#\ndef candies(n, m):\n    return (m // n) * n\n#------------------------------------------------------------------------------------------------#\ndef seatsInTheater(nCols, nRows, col, row):\n    return (nCols - col + 1) * (nRows - row)\n#------------------------------------------------------------------------------------------------#",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "candies",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def candies(n, m):\n    return (m // n) * n\n#------------------------------------------------------------------------------------------------#\ndef seatsInTheater(nCols, nRows, col, row):\n    return (nCols - col + 1) * (nRows - row)\n#------------------------------------------------------------------------------------------------#\ndef maxMultiple(divisor, bound):\n    for num in range(bound, 1, -1):\n        if num % divisor == 0:\n            return num",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "seatsInTheater",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def seatsInTheater(nCols, nRows, col, row):\n    return (nCols - col + 1) * (nRows - row)\n#------------------------------------------------------------------------------------------------#\ndef maxMultiple(divisor, bound):\n    for num in range(bound, 1, -1):\n        if num % divisor == 0:\n            return num\n    return 0\n#------------------------------------------------------------------------------------------------#\ndef circleOfNumbers(n, firstNumber):",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "maxMultiple",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def maxMultiple(divisor, bound):\n    for num in range(bound, 1, -1):\n        if num % divisor == 0:\n            return num\n    return 0\n#------------------------------------------------------------------------------------------------#\ndef circleOfNumbers(n, firstNumber):\n    return (firstNumber + (n // 2)) % n\n#------------------------------------------------------------------------------------------------#\ndef lateRide(n):",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "circleOfNumbers",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def circleOfNumbers(n, firstNumber):\n    return (firstNumber + (n // 2)) % n\n#------------------------------------------------------------------------------------------------#\ndef lateRide(n):\n    hours = n // 60\n    minutes = n % 60\n    return (hours // 10) + (hours % 10) + (minutes // 10) + (minutes % 10)\n#------------------------------------------------------------------------------------------------#\ndef phoneCall(min1, min2_10, min11, s):\n    if s < min1:",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "lateRide",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def lateRide(n):\n    hours = n // 60\n    minutes = n % 60\n    return (hours // 10) + (hours % 10) + (minutes // 10) + (minutes % 10)\n#------------------------------------------------------------------------------------------------#\ndef phoneCall(min1, min2_10, min11, s):\n    if s < min1:\n        return 0\n    if s == min1:\n        return 1",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "phoneCall",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def phoneCall(min1, min2_10, min11, s):\n    if s < min1:\n        return 0\n    if s == min1:\n        return 1\n    if s <= min1 + (min2_10 * 9):\n        s -= min1\n        return (s // min2_10) + 1\n    s -= min1\n    s -= min2_10 * 9",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "reachNextLevel",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def reachNextLevel(experience, threshold, reward):\n    return experience + reward >= threshold\n#------------------------------------------------------------------------------------------------#\ndef knapsackLight(value1, weight1, value2, weight2, maxW):\n    if weight1 + weight2 <= maxW:\n        return value1 + value2\n    if weight1 <= maxW and weight2 <= maxW:\n        return max(value1, value2)\n    if weight1 <= maxW:\n        return value1",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "knapsackLight",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def knapsackLight(value1, weight1, value2, weight2, maxW):\n    if weight1 + weight2 <= maxW:\n        return value1 + value2\n    if weight1 <= maxW and weight2 <= maxW:\n        return max(value1, value2)\n    if weight1 <= maxW:\n        return value1\n    if weight2 <= maxW:\n        return value2\n    return 0",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "extraNumber",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def extraNumber(a, b, c):\n    if a == b:\n        return c\n    if a == c:\n        return b\n    return a\n#------------------------------------------------------------------------------------------------#\ndef isInfiniteProcess(a, b):\n    return a > b or (a % 2 != b % 2)\n#------------------------------------------------------------------------------------------------#",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "isInfiniteProcess",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def isInfiniteProcess(a, b):\n    return a > b or (a % 2 != b % 2)\n#------------------------------------------------------------------------------------------------#\ndef arithmeticExpression(a, b, c):\n    return a + b == c or a - b == c or a * b == c or a / b == c\n#------------------------------------------------------------------------------------------------#\ndef tennisSet(score1, score2):\n    if max(score1, score2) == 6 and min(score1, score2) < 5:\n        return True\n    if 5 <= min(score1, score2) <= 6 and max(score1, score2) == 7:",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "arithmeticExpression",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def arithmeticExpression(a, b, c):\n    return a + b == c or a - b == c or a * b == c or a / b == c\n#------------------------------------------------------------------------------------------------#\ndef tennisSet(score1, score2):\n    if max(score1, score2) == 6 and min(score1, score2) < 5:\n        return True\n    if 5 <= min(score1, score2) <= 6 and max(score1, score2) == 7:\n        return True\n    return False\n#------------------------------------------------------------------------------------------------#",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "tennisSet",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def tennisSet(score1, score2):\n    if max(score1, score2) == 6 and min(score1, score2) < 5:\n        return True\n    if 5 <= min(score1, score2) <= 6 and max(score1, score2) == 7:\n        return True\n    return False\n#------------------------------------------------------------------------------------------------#\ndef willYou(young, beautiful, loved):\n    return (young and beautiful) != loved\n#------------------------------------------------------------------------------------------------#",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "willYou",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def willYou(young, beautiful, loved):\n    return (young and beautiful) != loved\n#------------------------------------------------------------------------------------------------#\ndef metroCard(lastNumberOfDays):\n    if lastNumberOfDays == 30 or lastNumberOfDays == 28:\n        return [31]\n    return [28, 30, 31]\n#------------------------------------------------------------------------------------------------#\ndef killKthBit(n, k):\n    return n & ~(2 ** (k - 1))",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "metroCard",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def metroCard(lastNumberOfDays):\n    if lastNumberOfDays == 30 or lastNumberOfDays == 28:\n        return [31]\n    return [28, 30, 31]\n#------------------------------------------------------------------------------------------------#\ndef killKthBit(n, k):\n    return n & ~(2 ** (k - 1))\n#------------------------------------------------------------------------------------------------#\ndef arrayPacking(a):\n    binary_array = [bin(num)[2:].rjust(8, \"0\") for num in a]",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "killKthBit",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def killKthBit(n, k):\n    return n & ~(2 ** (k - 1))\n#------------------------------------------------------------------------------------------------#\ndef arrayPacking(a):\n    binary_array = [bin(num)[2:].rjust(8, \"0\") for num in a]\n    out_string = \"\".join(binary_array[::-1])\n    return int(out_string, 2)\n#------------------------------------------------------------------------------------------------#\ndef rangeBitCount(a, b):\n    array = list(range(a, b + 1))",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "arrayPacking",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def arrayPacking(a):\n    binary_array = [bin(num)[2:].rjust(8, \"0\") for num in a]\n    out_string = \"\".join(binary_array[::-1])\n    return int(out_string, 2)\n#------------------------------------------------------------------------------------------------#\ndef rangeBitCount(a, b):\n    array = list(range(a, b + 1))\n    binary_array = [bin(num) for num in array]\n    count_array = [binary.count(\"1\") for binary in binary_array]\n    return sum(count_array)",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "rangeBitCount",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def rangeBitCount(a, b):\n    array = list(range(a, b + 1))\n    binary_array = [bin(num) for num in array]\n    count_array = [binary.count(\"1\") for binary in binary_array]\n    return sum(count_array)\n#------------------------------------------------------------------------------------------------#\ndef mirrorBits(a):\n    binary = bin(a)[2:]\n    return int(binary[::-1], 2)\n#------------------------------------------------------------------------------------------------#",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "mirrorBits",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def mirrorBits(a):\n    binary = bin(a)[2:]\n    return int(binary[::-1], 2)\n#------------------------------------------------------------------------------------------------#\ndef secondRightmostZeroBit(n):\n    return 2 ** bin(n)[::-1].find(\"0\", bin(n)[::-1].find(\"0\") + 1)\n#------------------------------------------------------------------------------------------------#\ndef swapAdjacentBits(n):\n    return ((n >> 1) & 1431655765) | ((n << 1) & 2863311530)\n#------------------------------------------------------------------------------------------------#",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "secondRightmostZeroBit",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def secondRightmostZeroBit(n):\n    return 2 ** bin(n)[::-1].find(\"0\", bin(n)[::-1].find(\"0\") + 1)\n#------------------------------------------------------------------------------------------------#\ndef swapAdjacentBits(n):\n    return ((n >> 1) & 1431655765) | ((n << 1) & 2863311530)\n#------------------------------------------------------------------------------------------------#\ndef differentRightmostBit(n, m):\n    return 2 ** bin((n ^ m))[::-1].find(\"1\")\n#------------------------------------------------------------------------------------------------#",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "swapAdjacentBits",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def swapAdjacentBits(n):\n    return ((n >> 1) & 1431655765) | ((n << 1) & 2863311530)\n#------------------------------------------------------------------------------------------------#\ndef differentRightmostBit(n, m):\n    return 2 ** bin((n ^ m))[::-1].find(\"1\")\n#------------------------------------------------------------------------------------------------#\ndef equalPairOfBits(n, m):\n    return 2 ** bin(~(n ^ m))[::-1].find(\"1\")\n#------------------------------------------------------------------------------------------------#",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "differentRightmostBit",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def differentRightmostBit(n, m):\n    return 2 ** bin((n ^ m))[::-1].find(\"1\")\n#------------------------------------------------------------------------------------------------#\ndef equalPairOfBits(n, m):\n    return 2 ** bin(~(n ^ m))[::-1].find(\"1\")\n#------------------------------------------------------------------------------------------------#\ndef leastFactorial(n):\n    factorial = 1\n    index = 1\n    while factorial < n:",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "equalPairOfBits",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def equalPairOfBits(n, m):\n    return 2 ** bin(~(n ^ m))[::-1].find(\"1\")\n#------------------------------------------------------------------------------------------------#\ndef leastFactorial(n):\n    factorial = 1\n    index = 1\n    while factorial < n:\n        index += 1\n        factorial *= index\n    return factorial",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "leastFactorial",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def leastFactorial(n):\n    factorial = 1\n    index = 1\n    while factorial < n:\n        index += 1\n        factorial *= index\n    return factorial\n#------------------------------------------------------------------------------------------------#\ndef countSumOfTwoRepresentations2(n, l, r):\n    count = 0",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "countSumOfTwoRepresentations2",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def countSumOfTwoRepresentations2(n, l, r):\n    count = 0\n    a = max(n - r, l)\n    b = n - a\n    while a <= r and a <= b:\n        count += 1\n        a += 1\n        b -= 1\n    return count\n#------------------------------------------------------------------------------------------------#",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "magicalWell",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def magicalWell(a, b, n):\n    total = 0\n    for i in range(n):\n        total += a * b\n        a += 1\n        b += 1\n    return total\n#------------------------------------------------------------------------------------------------#\ndef lineUp(commands):\n    count = 0",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "lineUp",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def lineUp(commands):\n    count = 0\n    smart_student = 0\n    dumb_student = 0\n    for command in commands:\n        if command == \"L\":\n            smart_student = (smart_student - 1) % 4\n            dumb_student = (dumb_student + 1) % 4\n        elif command == \"R\":\n            smart_student = (smart_student + 1) % 4",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "additionWithoutCarrying",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def additionWithoutCarrying(param1, param2):\n    # Convert numbers to strings\n    str1 = str(param1)\n    str2 = str(param2)\n    # Pad both to the same length with zeroes (to the left of the numbers)\n    length = max(len(str2), len(str1))\n    str1 = str1.rjust(length, \"0\")\n    str2 = str2.rjust(length, \"0\")\n    output = []\n    for num1, num2 in zip(str1, str2):",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "appleBoxes",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def appleBoxes(k):\n    red = 0\n    yellow = 0\n    for i in range(1, k + 1, 2):\n        yellow += i * i\n    for i in range(2, k + 1, 2):\n        red += i * i\n    return red - yellow\n#------------------------------------------------------------------------------------------------#\ndef increaseNumberRoundness(n):",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "increaseNumberRoundness",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def increaseNumberRoundness(n):\n    string = str(n)\n    # Check for immediate rejection\n    if \"0\" not in string or len(string) < 2:\n        return False\n    # Since we know there's a 0, if it's not on\n    # the left, then we know to accept\n    if string[-1] != \"0\":\n        return True\n    # If there is only one 0, it must be at the end, so reject.",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "rounders",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def rounders(value):\n    length = len(str(value))\n    magnitude = length - 1\n    for i in range(length - 1):\n        value = int((value / 10) + 0.5)\n    return value * (10 ** magnitude)\n#------------------------------------------------------------------------------------------------#\ndef candles(candlesNumber, makeNew):\n    totalBurned = 0\n    leftovers = 0",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "candles",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def candles(candlesNumber, makeNew):\n    totalBurned = 0\n    leftovers = 0\n    while candlesNumber > 0:\n        totalBurned += candlesNumber\n        leftovers += candlesNumber\n        candlesNumber = 0\n        candlesNumber = leftovers // makeNew\n        leftovers = leftovers % makeNew\n    return totalBurned",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "countBlackCells",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def countBlackCells(n, m):\n    gcd = find_gcd(n, m)\n    line_cells = n + m - gcd\n    line_corner_cells = (gcd - 1) * 2\n    return line_cells + line_corner_cells\n#------------------------------------------------------------------------------------------------#\ndef find_gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "find_gcd",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def find_gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n#------------------------------------------------------------------------------------------------#\ndef createArray(size):\n    return [1] * size\n#------------------------------------------------------------------------------------------------#\ndef arrayReplace(inputArray, elemToReplace, substitutionElem):\n    output = [",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "createArray",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def createArray(size):\n    return [1] * size\n#------------------------------------------------------------------------------------------------#\ndef arrayReplace(inputArray, elemToReplace, substitutionElem):\n    output = [\n        elem if elem != elemToReplace else substitutionElem for elem in inputArray\n    ]\n    return output\n#------------------------------------------------------------------------------------------------#\ndef firstReverseTry(arr):",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "arrayReplace",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def arrayReplace(inputArray, elemToReplace, substitutionElem):\n    output = [\n        elem if elem != elemToReplace else substitutionElem for elem in inputArray\n    ]\n    return output\n#------------------------------------------------------------------------------------------------#\ndef firstReverseTry(arr):\n    if len(arr) < 2:\n        return arr\n    if len(arr) < 4:",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "firstReverseTry",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def firstReverseTry(arr):\n    if len(arr) < 2:\n        return arr\n    if len(arr) < 4:\n        return arr[::-1]\n    return arr[-1:] + arr[1:-1] + arr[:1]\n#------------------------------------------------------------------------------------------------#\ndef concatenateArrays(a, b):\n    return a + b\n#------------------------------------------------------------------------------------------------#",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "concatenateArrays",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def concatenateArrays(a, b):\n    return a + b\n#------------------------------------------------------------------------------------------------#\ndef removeArrayPart(inputArray, l, r):\n    return inputArray[:l] + inputArray[r + 1 :]\n#------------------------------------------------------------------------------------------------#\ndef isSmooth(arr):\n    if arr[0] != arr[-1]:\n        return False\n    if len(arr) % 2 == 0:",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "removeArrayPart",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def removeArrayPart(inputArray, l, r):\n    return inputArray[:l] + inputArray[r + 1 :]\n#------------------------------------------------------------------------------------------------#\ndef isSmooth(arr):\n    if arr[0] != arr[-1]:\n        return False\n    if len(arr) % 2 == 0:\n        middle = arr[len(arr) // 2] + arr[(len(arr) // 2) - 1]\n    else:\n        middle = arr[len(arr) // 2]",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "isSmooth",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def isSmooth(arr):\n    if arr[0] != arr[-1]:\n        return False\n    if len(arr) % 2 == 0:\n        middle = arr[len(arr) // 2] + arr[(len(arr) // 2) - 1]\n    else:\n        middle = arr[len(arr) // 2]\n    return arr[0] == middle\n#------------------------------------------------------------------------------------------------#\ndef replaceMiddle(arr):",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "replaceMiddle",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def replaceMiddle(arr):\n    if len(arr) % 2 != 0:\n        return arr\n    right_middle = len(arr) // 2\n    middle_value = arr[right_middle] + arr[right_middle - 1]\n    return arr[: right_middle - 1] + [middle_value] + arr[right_middle + 1 :]\n#------------------------------------------------------------------------------------------------#\ndef makeArrayConsecutive2(statues):\n    count = 0\n    for i in range(min(statues), max(statues)):",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "makeArrayConsecutive2",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def makeArrayConsecutive2(statues):\n    count = 0\n    for i in range(min(statues), max(statues)):\n        if i not in statues:\n            count += 1\n    return count\n#------------------------------------------------------------------------------------------------#\ndef isPower(n):\n    if n == 1:\n        return True",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "isPower",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def isPower(n):\n    if n == 1:\n        return True\n    a = 2\n    b = 2\n    while a ** 2 <= n:\n        while a ** b <= n:\n            if a ** b == n:\n                return True\n            b += 1",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "isSumOfConsecutive2",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def isSumOfConsecutive2(n):\n    count = 0\n    right = 2\n    arr = [1, 2]\n    while right <= (n // 2) + 1:\n        total = sum(arr)\n        if total == n:\n            count += 1\n            del arr[0]\n        elif total < n:",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "squareDigitsSequence",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def squareDigitsSequence(a0):\n    sequence = [a0]\n    while sequence[-1] not in sequence[:-1]:\n        next_value = 0\n        for digit in str(sequence[-1]):\n            next_value += int(digit) ** 2\n        sequence.append(next_value)\n    return len(sequence)\n#------------------------------------------------------------------------------------------------#\ndef pagesNumberingWithInk(current, numberOfDigits):",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "pagesNumberingWithInk",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def pagesNumberingWithInk(current, numberOfDigits):\n    numberOfDigits -= len(str(current))\n    next_digits = len(str(current + 1))\n    while numberOfDigits >= next_digits:\n        current += 1\n        numberOfDigits -= next_digits\n        next_digits = len(str(current))\n    return current\n#------------------------------------------------------------------------------------------------#\ndef comfortableNumbers(l, r):",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "comfortableNumbers",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def comfortableNumbers(l, r):\n    count = 0\n    for a in range(l, r):\n        for b in range(a + 1, r + 1):\n            a_sum = sum(int(digit) for digit in str(a))\n            b_sum = sum(int(digit) for digit in str(b))\n            if b <= a + a_sum and a >= b - b_sum:\n                count += 1\n    return count\n#------------------------------------------------------------------------------------------------#",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "weakNumbers",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def weakNumbers(n):\n    all_factors = [count_factors(num) for num in range(1, n + 1)]\n    weaknesses = []\n    for num, num_factors in enumerate(all_factors, 1):\n        weakness = 0\n        for factor in all_factors[:num]:\n            if factor > num_factors:\n                weakness += 1\n        weaknesses.append(weakness)\n        weakest = max(weaknesses)",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "count_factors",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def count_factors(n):\n    factors = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            factors += 1\n    return factors\nprint(weakNumbers(500))\nimport math\n#------------------------------------------------------------------------------------------------#\ndef rectangleRotation(a, b):",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "rectangleRotation",
    "kind": 2,
    "importPath": "MY_GISTS.afb9985219.GCA-Prep",
    "description": "MY_GISTS.afb9985219.GCA-Prep",
    "peekOfCode": "def rectangleRotation(a, b):\n    n = a / (2 ** 0.5)\n    m = b / (2 ** 0.5)\n    points = (math.floor(n) * math.floor(m)) + (math.ceil(n) * math.ceil(m))\n    if math.floor(n) % 2 != math.floor(m) % 2:\n        points -= 1\n    return points\n# rectangleRotation(6, 4)\nprint(rectangleRotation(8, 6))",
    "detail": "MY_GISTS.afb9985219.GCA-Prep",
    "documentation": {}
  },
  {
    "label": "find_all_paths",
    "kind": 2,
    "importPath": "MY_GISTS.b46192bc87.possible-paths",
    "description": "MY_GISTS.b46192bc87.possible-paths",
    "peekOfCode": "def find_all_paths(graph, start, end, path =[]):\n  path = path + [start]\n  if start == end:\n    return [path]\n  paths = []\n  for node in graph[start]:\n    if node not in path:\n      newpaths = find_all_paths(graph, node, end, path)\n    for newpath in newpaths:\n      paths.append(newpath)",
    "detail": "MY_GISTS.b46192bc87.possible-paths",
    "documentation": {}
  },
  {
    "label": "reverse",
    "kind": 2,
    "importPath": "MY_GISTS.b464d9ddb7.prac6",
    "description": "MY_GISTS.b464d9ddb7.prac6",
    "peekOfCode": "def reverse(string):\n    str = \"\"\n    for x in string:\n        str = x + str\n    return str\nstring = input(\"Enter a string: \")\nif string == reverse(string):\n    print(string + \" is a palindrome.\")\nelse:\n    print(string + \" is not a palindrome.\")",
    "detail": "MY_GISTS.b464d9ddb7.prac6",
    "documentation": {}
  },
  {
    "label": "reverse",
    "kind": 2,
    "importPath": "MY_GISTS.b464d9ddb7.prac6",
    "description": "MY_GISTS.b464d9ddb7.prac6",
    "peekOfCode": "def reverse(string):\n    str = \"\".join(reversed(string))\n    return str\nstring = input(\"Enter another string: \")\nif string == reverse(string):\n    print(string + \" is a palindrome.\")\nelse:\n    print(string + \" is not a palindrome.\")\n\"\"\"\nA string can be reversed in other ways too. You can reverse a string using stack,",
    "detail": "MY_GISTS.b464d9ddb7.prac6",
    "documentation": {}
  },
  {
    "label": "string",
    "kind": 5,
    "importPath": "MY_GISTS.b464d9ddb7.prac6",
    "description": "MY_GISTS.b464d9ddb7.prac6",
    "peekOfCode": "string = input(\"Enter a string: \")\nif string == reverse(string):\n    print(string + \" is a palindrome.\")\nelse:\n    print(string + \" is not a palindrome.\")\n# using reversed built-in function\ndef reverse(string):\n    str = \"\".join(reversed(string))\n    return str\nstring = input(\"Enter another string: \")",
    "detail": "MY_GISTS.b464d9ddb7.prac6",
    "documentation": {}
  },
  {
    "label": "string",
    "kind": 5,
    "importPath": "MY_GISTS.b464d9ddb7.prac6",
    "description": "MY_GISTS.b464d9ddb7.prac6",
    "peekOfCode": "string = input(\"Enter another string: \")\nif string == reverse(string):\n    print(string + \" is a palindrome.\")\nelse:\n    print(string + \" is not a palindrome.\")\n\"\"\"\nA string can be reversed in other ways too. You can reverse a string using stack,\nusing recursion and using extended slice systex.\n\"\"\"",
    "detail": "MY_GISTS.b464d9ddb7.prac6",
    "documentation": {}
  },
  {
    "label": "guess_num",
    "kind": 2,
    "importPath": "MY_GISTS.b4f6ab3a92.prac9",
    "description": "MY_GISTS.b4f6ab3a92.prac9",
    "peekOfCode": "def guess_num(num, num1):\n    if num > num1:\n        return \"Too low.\"\n    elif num < num1:\n        return \"Too high.\"\n    else:\n        return \"yes\"\nprint(\"\\nGame starts.\\nType exit to quit.\")\ncount = 0\nwhile True:",
    "detail": "MY_GISTS.b4f6ab3a92.prac9",
    "documentation": {}
  },
  {
    "label": "num",
    "kind": 5,
    "importPath": "MY_GISTS.b4f6ab3a92.prac9",
    "description": "MY_GISTS.b4f6ab3a92.prac9",
    "peekOfCode": "num = random.randint(1, 100)\ndef guess_num(num, num1):\n    if num > num1:\n        return \"Too low.\"\n    elif num < num1:\n        return \"Too high.\"\n    else:\n        return \"yes\"\nprint(\"\\nGame starts.\\nType exit to quit.\")\ncount = 0",
    "detail": "MY_GISTS.b4f6ab3a92.prac9",
    "documentation": {}
  },
  {
    "label": "count",
    "kind": 5,
    "importPath": "MY_GISTS.b4f6ab3a92.prac9",
    "description": "MY_GISTS.b4f6ab3a92.prac9",
    "peekOfCode": "count = 0\nwhile True:\n    num1 = input(\"Guess the number: \")\n    count += 1\n    if num1 == \"exit\":\n        break\n    result = guess_num(num, int(num1))\n    if result == \"yes\":\n        print(\n            \"Congrats!!! You have guessed the correct number in \"",
    "detail": "MY_GISTS.b4f6ab3a92.prac9",
    "documentation": {}
  },
  {
    "label": "Error",
    "kind": 6,
    "importPath": "MY_GISTS.b90c84fa79.rand-string-gen",
    "description": "MY_GISTS.b90c84fa79.rand-string-gen",
    "peekOfCode": "class Error( Exception ):\n\tpass\nescapes = {\n\t'n' : '\\n',\n\t'r' : '\\r',\n\t't' : '\\t',\n\t'v' : '\\v',\n\t'0' : '\\0'\n}\nrx_octet = re.compile( '([0-8][0-8][0-8]|[0])' )",
    "detail": "MY_GISTS.b90c84fa79.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "Compiler",
    "kind": 6,
    "importPath": "MY_GISTS.b90c84fa79.rand-string-gen",
    "description": "MY_GISTS.b90c84fa79.rand-string-gen",
    "peekOfCode": "class Compiler:\n\tdef __init__( self, src ):\n\t\tself.src = src\n\t\tself.ofs = 0\n\t\tself.opens = 0\n\t\tself.closes = 0\n\t\tself.limit = 4\n\tdef parse_rpt( self, op ):\n\t\tm = rx_repeat.match( self.src, self.ofs )\n\t\tif not m:",
    "detail": "MY_GISTS.b90c84fa79.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "Generator",
    "kind": 6,
    "importPath": "MY_GISTS.b90c84fa79.rand-string-gen",
    "description": "MY_GISTS.b90c84fa79.rand-string-gen",
    "peekOfCode": "class Generator:\n\tdef __init__( self, root ):\n\t\tif not root: raise Exception #TODO\n\t\tself.root = root\n\tdef generate( self, seed = None, vm = None ):\n\t\tif vm is None: vm = Vm( seed )\t\t\n\t\tself.root( vm )\n\t\treturn str( vm )\nclass Vm:\n\tdef __init__( self, seed = None ):",
    "detail": "MY_GISTS.b90c84fa79.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "Vm",
    "kind": 6,
    "importPath": "MY_GISTS.b90c84fa79.rand-string-gen",
    "description": "MY_GISTS.b90c84fa79.rand-string-gen",
    "peekOfCode": "class Vm:\n\tdef __init__( self, seed = None ):\n\t\tself.rng = random.WichmannHill( seed )\n\t\tself.out = []\n\t\tself.groups = {}\n\tdef choose( self, field ):\n\t\t\"selects a random value from 0 .. field - 1, or the list\"\n\t\tif isinstance( field, int ):\n\t\t\treturn self.rng.randint( 0, field )\n\t\telse:",
    "detail": "MY_GISTS.b90c84fa79.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "Capture",
    "kind": 6,
    "importPath": "MY_GISTS.b90c84fa79.rand-string-gen",
    "description": "MY_GISTS.b90c84fa79.rand-string-gen",
    "peekOfCode": "class Capture:\n\tdef __init__( self, vm, ref ):\n\t\tself.vm = vm\n\t\tself.ref = ref\n\tdef __enter__( self ):\n\t\tself.out = self.vm.out\n\t\tself.vm.out = []\n\tdef __exit__( self, errtyp, errval, errtb ):\n\t\tif errtyp or errval: return False\n\t\tvm = self.vm",
    "detail": "MY_GISTS.b90c84fa79.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "op_dat",
    "kind": 2,
    "importPath": "MY_GISTS.b90c84fa79.rand-string-gen",
    "description": "MY_GISTS.b90c84fa79.rand-string-gen",
    "peekOfCode": "def op_dat( data ):\n\tdef op_dat_fn( vm ):\n\t\tvm.write( data )\n\treturn op_dat_fn\ndef op_seq( seq ):\n\tdef op_seq_fn( vm ):\n\t\tfor op in seq: \n\t\t\top( vm )\n\t\treturn True\n\treturn op_seq_fn",
    "detail": "MY_GISTS.b90c84fa79.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "op_seq",
    "kind": 2,
    "importPath": "MY_GISTS.b90c84fa79.rand-string-gen",
    "description": "MY_GISTS.b90c84fa79.rand-string-gen",
    "peekOfCode": "def op_seq( seq ):\n\tdef op_seq_fn( vm ):\n\t\tfor op in seq: \n\t\t\top( vm )\n\t\treturn True\n\treturn op_seq_fn\ndef op_alt( alt ):\n\tdef op_alt_fn( vm ):\n\t\tvm.choose( alt )( vm )\n\treturn op_alt_fn",
    "detail": "MY_GISTS.b90c84fa79.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "op_alt",
    "kind": 2,
    "importPath": "MY_GISTS.b90c84fa79.rand-string-gen",
    "description": "MY_GISTS.b90c84fa79.rand-string-gen",
    "peekOfCode": "def op_alt( alt ):\n\tdef op_alt_fn( vm ):\n\t\tvm.choose( alt )( vm )\n\treturn op_alt_fn\ndef op_set( ix, op ):\n\tdef op_set_fn( vm ):\n\t\twith vm.capture( ix ): op( vm )\n\treturn op_set_fn\ndef op_ref( ix ):\n\tdef op_ref_fn( vm ):",
    "detail": "MY_GISTS.b90c84fa79.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "op_set",
    "kind": 2,
    "importPath": "MY_GISTS.b90c84fa79.rand-string-gen",
    "description": "MY_GISTS.b90c84fa79.rand-string-gen",
    "peekOfCode": "def op_set( ix, op ):\n\tdef op_set_fn( vm ):\n\t\twith vm.capture( ix ): op( vm )\n\treturn op_set_fn\ndef op_ref( ix ):\n\tdef op_ref_fn( vm ):\n\t\tvm.write( vm.group( ix ) )\n\treturn op_ref_fn\ndef op_nul( ):\n\tdef op_nul_fn( vm ):",
    "detail": "MY_GISTS.b90c84fa79.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "op_ref",
    "kind": 2,
    "importPath": "MY_GISTS.b90c84fa79.rand-string-gen",
    "description": "MY_GISTS.b90c84fa79.rand-string-gen",
    "peekOfCode": "def op_ref( ix ):\n\tdef op_ref_fn( vm ):\n\t\tvm.write( vm.group( ix ) )\n\treturn op_ref_fn\ndef op_nul( ):\n\tdef op_nul_fn( vm ):\n\t\tpass\n\treturn op_nul_fn\ndef op_rpt( op, m, n ):\n\tif m == n:",
    "detail": "MY_GISTS.b90c84fa79.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "op_nul",
    "kind": 2,
    "importPath": "MY_GISTS.b90c84fa79.rand-string-gen",
    "description": "MY_GISTS.b90c84fa79.rand-string-gen",
    "peekOfCode": "def op_nul( ):\n\tdef op_nul_fn( vm ):\n\t\tpass\n\treturn op_nul_fn\ndef op_rpt( op, m, n ):\n\tif m == n:\n\t\tdef op_fix_rpt_fn( vm ):\n\t\t\tfor i in range( 0, m ):\n\t\t\t\top( vm )\n\t\treturn op_fix_rpt_fn",
    "detail": "MY_GISTS.b90c84fa79.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "op_rpt",
    "kind": 2,
    "importPath": "MY_GISTS.b90c84fa79.rand-string-gen",
    "description": "MY_GISTS.b90c84fa79.rand-string-gen",
    "peekOfCode": "def op_rpt( op, m, n ):\n\tif m == n:\n\t\tdef op_fix_rpt_fn( vm ):\n\t\t\tfor i in range( 0, m ):\n\t\t\t\top( vm )\n\t\treturn op_fix_rpt_fn\n\tif m > n: n, m = m, n\t\n\tr = n - m\n\tdef op_rpt_fn( vm ):\n\t\tfor i in range( 0, m + vm.choose( r ) ):",
    "detail": "MY_GISTS.b90c84fa79.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "op_opt",
    "kind": 2,
    "importPath": "MY_GISTS.b90c84fa79.rand-string-gen",
    "description": "MY_GISTS.b90c84fa79.rand-string-gen",
    "peekOfCode": "def op_opt( op ):\n\tdef op_opt_fn( vm ):\n\t\tif vm.choose( 2 ): op( vm )\n\treturn op_opt_fn\ndef op_rng( s ):\n\ts = ''.join( s )\n\tdef op_rng_fn( vm ):\n\t\tvm.write( vm.choose( s ) )\n\treturn op_rng_fn\nany_op = op_rng( map( chr, range( 0, 255 ) ) )",
    "detail": "MY_GISTS.b90c84fa79.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "op_rng",
    "kind": 2,
    "importPath": "MY_GISTS.b90c84fa79.rand-string-gen",
    "description": "MY_GISTS.b90c84fa79.rand-string-gen",
    "peekOfCode": "def op_rng( s ):\n\ts = ''.join( s )\n\tdef op_rng_fn( vm ):\n\t\tvm.write( vm.choose( s ) )\n\treturn op_rng_fn\nany_op = op_rng( map( chr, range( 0, 255 ) ) )\ndef mk_seq_op( seq ):\n\t\"unifies a sequence of 0 to N requirements into a minimal operation\"\n\tif not seq: return op_nul( )\n\tif callable( seq ): return seq",
    "detail": "MY_GISTS.b90c84fa79.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "mk_seq_op",
    "kind": 2,
    "importPath": "MY_GISTS.b90c84fa79.rand-string-gen",
    "description": "MY_GISTS.b90c84fa79.rand-string-gen",
    "peekOfCode": "def mk_seq_op( seq ):\n\t\"unifies a sequence of 0 to N requirements into a minimal operation\"\n\tif not seq: return op_nul( )\n\tif callable( seq ): return seq\n\tif isinstance( seq, str ): return op_dat( seq )\n\tout = []; buf = ''\n\tfor op in seq:\n\t\tif isinstance( op, str ):\n\t\t\tbuf += op\n\t\telse:",
    "detail": "MY_GISTS.b90c84fa79.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "generate",
    "kind": 2,
    "importPath": "MY_GISTS.b90c84fa79.rand-string-gen",
    "description": "MY_GISTS.b90c84fa79.rand-string-gen",
    "peekOfCode": "def generate( fx, seed = None, vm = None ):\n\tif isinstance( fx, str ):\n\t\tfx = compile( fx )\n\treturn fx.generate( seed, vm )\ndef compile( data ):\n\treturn Generator( Compiler( data ).parse_expr( ) )\ndef test( ex, seed = None ):\n\tr = re.compile( '^' + ex + '$' )\n\tdata = generate( ex, seed )\n\tk = r.match( data )",
    "detail": "MY_GISTS.b90c84fa79.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "compile",
    "kind": 2,
    "importPath": "MY_GISTS.b90c84fa79.rand-string-gen",
    "description": "MY_GISTS.b90c84fa79.rand-string-gen",
    "peekOfCode": "def compile( data ):\n\treturn Generator( Compiler( data ).parse_expr( ) )\ndef test( ex, seed = None ):\n\tr = re.compile( '^' + ex + '$' )\n\tdata = generate( ex, seed )\n\tk = r.match( data )\n\tprint >>sys.stderr, 'TESTING: %s, RESULT: %r, %s' % ( \n\t\tex, data, \"PASSED\" if k else \"FAILED\" \n\t)\n\treturn k",
    "detail": "MY_GISTS.b90c84fa79.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "test",
    "kind": 2,
    "importPath": "MY_GISTS.b90c84fa79.rand-string-gen",
    "description": "MY_GISTS.b90c84fa79.rand-string-gen",
    "peekOfCode": "def test( ex, seed = None ):\n\tr = re.compile( '^' + ex + '$' )\n\tdata = generate( ex, seed )\n\tk = r.match( data )\n\tprint >>sys.stderr, 'TESTING: %s, RESULT: %r, %s' % ( \n\t\tex, data, \"PASSED\" if k else \"FAILED\" \n\t)\n\treturn k\ndef test_batch( seed = None ):\n\treturn ( test( 'a' )",
    "detail": "MY_GISTS.b90c84fa79.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "test_batch",
    "kind": 2,
    "importPath": "MY_GISTS.b90c84fa79.rand-string-gen",
    "description": "MY_GISTS.b90c84fa79.rand-string-gen",
    "peekOfCode": "def test_batch( seed = None ):\n\treturn ( test( 'a' )\n\t\t and test( 'a|b', seed )\n\t\t and test( 'a|b|c', seed )\n\t\t and test( 'aa', seed )\n\t\t and test( 'aa|b', seed )\n\t\t and test( 'aa|bb', seed )\n\t\t and test( 'aa|bb|c', seed )\n\t\t and test( 'a|bb|c', seed )\n\t\t and test( 'a|bb|cc', seed )",
    "detail": "MY_GISTS.b90c84fa79.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\tr",
    "kind": 5,
    "importPath": "MY_GISTS.b90c84fa79.rand-string-gen",
    "description": "MY_GISTS.b90c84fa79.rand-string-gen",
    "peekOfCode": "\tr = n - m\n\tdef op_rpt_fn( vm ):\n\t\tfor i in range( 0, m + vm.choose( r ) ):\n\t\t\top( vm )\n\treturn op_rpt_fn\ndef op_opt( op ):\n\tdef op_opt_fn( vm ):\n\t\tif vm.choose( 2 ): op( vm )\n\treturn op_opt_fn\ndef op_rng( s ):",
    "detail": "MY_GISTS.b90c84fa79.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\ts",
    "kind": 5,
    "importPath": "MY_GISTS.b90c84fa79.rand-string-gen",
    "description": "MY_GISTS.b90c84fa79.rand-string-gen",
    "peekOfCode": "\ts = ''.join( s )\n\tdef op_rng_fn( vm ):\n\t\tvm.write( vm.choose( s ) )\n\treturn op_rng_fn\nany_op = op_rng( map( chr, range( 0, 255 ) ) )\ndef mk_seq_op( seq ):\n\t\"unifies a sequence of 0 to N requirements into a minimal operation\"\n\tif not seq: return op_nul( )\n\tif callable( seq ): return seq\n\tif isinstance( seq, str ): return op_dat( seq )",
    "detail": "MY_GISTS.b90c84fa79.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "any_op",
    "kind": 5,
    "importPath": "MY_GISTS.b90c84fa79.rand-string-gen",
    "description": "MY_GISTS.b90c84fa79.rand-string-gen",
    "peekOfCode": "any_op = op_rng( map( chr, range( 0, 255 ) ) )\ndef mk_seq_op( seq ):\n\t\"unifies a sequence of 0 to N requirements into a minimal operation\"\n\tif not seq: return op_nul( )\n\tif callable( seq ): return seq\n\tif isinstance( seq, str ): return op_dat( seq )\n\tout = []; buf = ''\n\tfor op in seq:\n\t\tif isinstance( op, str ):\n\t\t\tbuf += op",
    "detail": "MY_GISTS.b90c84fa79.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\tout",
    "kind": 5,
    "importPath": "MY_GISTS.b90c84fa79.rand-string-gen",
    "description": "MY_GISTS.b90c84fa79.rand-string-gen",
    "peekOfCode": "\tout = []; buf = ''\n\tfor op in seq:\n\t\tif isinstance( op, str ):\n\t\t\tbuf += op\n\t\telse:\n\t\t\tif buf:\n\t\t\t\tout.append( op_dat( buf ) )\n\t\t\t\tbuf = ''\n\t\t\tif op:\n\t\t\t\tout.append( op )",
    "detail": "MY_GISTS.b90c84fa79.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\t\t\tbuf",
    "kind": 5,
    "importPath": "MY_GISTS.b90c84fa79.rand-string-gen",
    "description": "MY_GISTS.b90c84fa79.rand-string-gen",
    "peekOfCode": "\t\t\t\tbuf = ''\n\t\t\tif op:\n\t\t\t\tout.append( op )\n\tif buf:\n\t\tout.append( op_dat( buf ) )\n\tif len( out ) == 1:\t\t\n\t\treturn out[0]\n\telse:\n\t\treturn op_seq( out )\nclass Error( Exception ):",
    "detail": "MY_GISTS.b90c84fa79.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "escapes",
    "kind": 5,
    "importPath": "MY_GISTS.b90c84fa79.rand-string-gen",
    "description": "MY_GISTS.b90c84fa79.rand-string-gen",
    "peekOfCode": "escapes = {\n\t'n' : '\\n',\n\t'r' : '\\r',\n\t't' : '\\t',\n\t'v' : '\\v',\n\t'0' : '\\0'\n}\nrx_octet = re.compile( '([0-8][0-8][0-8]|[0])' )\nrx_refer = re.compile( '([0-9][0-9]?)')\nrx_range = re.compile( '[^\\\\\\\\]')",
    "detail": "MY_GISTS.b90c84fa79.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "rx_octet",
    "kind": 5,
    "importPath": "MY_GISTS.b90c84fa79.rand-string-gen",
    "description": "MY_GISTS.b90c84fa79.rand-string-gen",
    "peekOfCode": "rx_octet = re.compile( '([0-8][0-8][0-8]|[0])' )\nrx_refer = re.compile( '([0-9][0-9]?)')\nrx_range = re.compile( '[^\\\\\\\\]')\nrx_repeat = re.compile( '([0-9]+)(,[0-9]+)?\\\\}' )\nclass Compiler:\n\tdef __init__( self, src ):\n\t\tself.src = src\n\t\tself.ofs = 0\n\t\tself.opens = 0\n\t\tself.closes = 0",
    "detail": "MY_GISTS.b90c84fa79.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "rx_refer",
    "kind": 5,
    "importPath": "MY_GISTS.b90c84fa79.rand-string-gen",
    "description": "MY_GISTS.b90c84fa79.rand-string-gen",
    "peekOfCode": "rx_refer = re.compile( '([0-9][0-9]?)')\nrx_range = re.compile( '[^\\\\\\\\]')\nrx_repeat = re.compile( '([0-9]+)(,[0-9]+)?\\\\}' )\nclass Compiler:\n\tdef __init__( self, src ):\n\t\tself.src = src\n\t\tself.ofs = 0\n\t\tself.opens = 0\n\t\tself.closes = 0\n\t\tself.limit = 4",
    "detail": "MY_GISTS.b90c84fa79.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "rx_range",
    "kind": 5,
    "importPath": "MY_GISTS.b90c84fa79.rand-string-gen",
    "description": "MY_GISTS.b90c84fa79.rand-string-gen",
    "peekOfCode": "rx_range = re.compile( '[^\\\\\\\\]')\nrx_repeat = re.compile( '([0-9]+)(,[0-9]+)?\\\\}' )\nclass Compiler:\n\tdef __init__( self, src ):\n\t\tself.src = src\n\t\tself.ofs = 0\n\t\tself.opens = 0\n\t\tself.closes = 0\n\t\tself.limit = 4\n\tdef parse_rpt( self, op ):",
    "detail": "MY_GISTS.b90c84fa79.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "rx_repeat",
    "kind": 5,
    "importPath": "MY_GISTS.b90c84fa79.rand-string-gen",
    "description": "MY_GISTS.b90c84fa79.rand-string-gen",
    "peekOfCode": "rx_repeat = re.compile( '([0-9]+)(,[0-9]+)?\\\\}' )\nclass Compiler:\n\tdef __init__( self, src ):\n\t\tself.src = src\n\t\tself.ofs = 0\n\t\tself.opens = 0\n\t\tself.closes = 0\n\t\tself.limit = 4\n\tdef parse_rpt( self, op ):\n\t\tm = rx_repeat.match( self.src, self.ofs )",
    "detail": "MY_GISTS.b90c84fa79.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\tself.src",
    "kind": 5,
    "importPath": "MY_GISTS.b90c84fa79.rand-string-gen",
    "description": "MY_GISTS.b90c84fa79.rand-string-gen",
    "peekOfCode": "\t\tself.src = src\n\t\tself.ofs = 0\n\t\tself.opens = 0\n\t\tself.closes = 0\n\t\tself.limit = 4\n\tdef parse_rpt( self, op ):\n\t\tm = rx_repeat.match( self.src, self.ofs )\n\t\tif not m:\n\t\t\traise Error( '\"{\" followed without matching \"}\"') #TODO: Python ignores this silently.\n\t\tself.ofs = m.end( )",
    "detail": "MY_GISTS.b90c84fa79.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\tself.ofs",
    "kind": 5,
    "importPath": "MY_GISTS.b90c84fa79.rand-string-gen",
    "description": "MY_GISTS.b90c84fa79.rand-string-gen",
    "peekOfCode": "\t\tself.ofs = 0\n\t\tself.opens = 0\n\t\tself.closes = 0\n\t\tself.limit = 4\n\tdef parse_rpt( self, op ):\n\t\tm = rx_repeat.match( self.src, self.ofs )\n\t\tif not m:\n\t\t\traise Error( '\"{\" followed without matching \"}\"') #TODO: Python ignores this silently.\n\t\tself.ofs = m.end( )\n\t\tif not m.group(2):",
    "detail": "MY_GISTS.b90c84fa79.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\tself.opens",
    "kind": 5,
    "importPath": "MY_GISTS.b90c84fa79.rand-string-gen",
    "description": "MY_GISTS.b90c84fa79.rand-string-gen",
    "peekOfCode": "\t\tself.opens = 0\n\t\tself.closes = 0\n\t\tself.limit = 4\n\tdef parse_rpt( self, op ):\n\t\tm = rx_repeat.match( self.src, self.ofs )\n\t\tif not m:\n\t\t\traise Error( '\"{\" followed without matching \"}\"') #TODO: Python ignores this silently.\n\t\tself.ofs = m.end( )\n\t\tif not m.group(2):\n\t\t\tn = int( m.group( 1 ) )",
    "detail": "MY_GISTS.b90c84fa79.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\tself.closes",
    "kind": 5,
    "importPath": "MY_GISTS.b90c84fa79.rand-string-gen",
    "description": "MY_GISTS.b90c84fa79.rand-string-gen",
    "peekOfCode": "\t\tself.closes = 0\n\t\tself.limit = 4\n\tdef parse_rpt( self, op ):\n\t\tm = rx_repeat.match( self.src, self.ofs )\n\t\tif not m:\n\t\t\traise Error( '\"{\" followed without matching \"}\"') #TODO: Python ignores this silently.\n\t\tself.ofs = m.end( )\n\t\tif not m.group(2):\n\t\t\tn = int( m.group( 1 ) )\n\t\t\treturn op_rpt( op, n, n )",
    "detail": "MY_GISTS.b90c84fa79.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\tself.limit",
    "kind": 5,
    "importPath": "MY_GISTS.b90c84fa79.rand-string-gen",
    "description": "MY_GISTS.b90c84fa79.rand-string-gen",
    "peekOfCode": "\t\tself.limit = 4\n\tdef parse_rpt( self, op ):\n\t\tm = rx_repeat.match( self.src, self.ofs )\n\t\tif not m:\n\t\t\traise Error( '\"{\" followed without matching \"}\"') #TODO: Python ignores this silently.\n\t\tself.ofs = m.end( )\n\t\tif not m.group(2):\n\t\t\tn = int( m.group( 1 ) )\n\t\t\treturn op_rpt( op, n, n )\n\t\tn = int( m.group(2)[1:] )",
    "detail": "MY_GISTS.b90c84fa79.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\tm",
    "kind": 5,
    "importPath": "MY_GISTS.b90c84fa79.rand-string-gen",
    "description": "MY_GISTS.b90c84fa79.rand-string-gen",
    "peekOfCode": "\t\tm = rx_repeat.match( self.src, self.ofs )\n\t\tif not m:\n\t\t\traise Error( '\"{\" followed without matching \"}\"') #TODO: Python ignores this silently.\n\t\tself.ofs = m.end( )\n\t\tif not m.group(2):\n\t\t\tn = int( m.group( 1 ) )\n\t\t\treturn op_rpt( op, n, n )\n\t\tn = int( m.group(2)[1:] )\n\t\tm = int( m.group(1) )\n\t\treturn op_rpt( op, m, n )",
    "detail": "MY_GISTS.b90c84fa79.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\tself.ofs",
    "kind": 5,
    "importPath": "MY_GISTS.b90c84fa79.rand-string-gen",
    "description": "MY_GISTS.b90c84fa79.rand-string-gen",
    "peekOfCode": "\t\tself.ofs = m.end( )\n\t\tif not m.group(2):\n\t\t\tn = int( m.group( 1 ) )\n\t\t\treturn op_rpt( op, n, n )\n\t\tn = int( m.group(2)[1:] )\n\t\tm = int( m.group(1) )\n\t\treturn op_rpt( op, m, n )\n\tdef parse_rng( self ):\n\t\tend = len( self.src )\n\t\tif self.ofs >= end:",
    "detail": "MY_GISTS.b90c84fa79.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\t\tn",
    "kind": 5,
    "importPath": "MY_GISTS.b90c84fa79.rand-string-gen",
    "description": "MY_GISTS.b90c84fa79.rand-string-gen",
    "peekOfCode": "\t\t\tn = int( m.group( 1 ) )\n\t\t\treturn op_rpt( op, n, n )\n\t\tn = int( m.group(2)[1:] )\n\t\tm = int( m.group(1) )\n\t\treturn op_rpt( op, m, n )\n\tdef parse_rng( self ):\n\t\tend = len( self.src )\n\t\tif self.ofs >= end:\n\t\t\traise Error( '\"[\" at end of expression' )\n\t\tif self.src[self.ofs] == '^':",
    "detail": "MY_GISTS.b90c84fa79.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\tn",
    "kind": 5,
    "importPath": "MY_GISTS.b90c84fa79.rand-string-gen",
    "description": "MY_GISTS.b90c84fa79.rand-string-gen",
    "peekOfCode": "\t\tn = int( m.group(2)[1:] )\n\t\tm = int( m.group(1) )\n\t\treturn op_rpt( op, m, n )\n\tdef parse_rng( self ):\n\t\tend = len( self.src )\n\t\tif self.ofs >= end:\n\t\t\traise Error( '\"[\" at end of expression' )\n\t\tif self.src[self.ofs] == '^':\n\t\t\tself.ofs += 1\n\t\t\tx = self.parse_rng_items( )",
    "detail": "MY_GISTS.b90c84fa79.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\tm",
    "kind": 5,
    "importPath": "MY_GISTS.b90c84fa79.rand-string-gen",
    "description": "MY_GISTS.b90c84fa79.rand-string-gen",
    "peekOfCode": "\t\tm = int( m.group(1) )\n\t\treturn op_rpt( op, m, n )\n\tdef parse_rng( self ):\n\t\tend = len( self.src )\n\t\tif self.ofs >= end:\n\t\t\traise Error( '\"[\" at end of expression' )\n\t\tif self.src[self.ofs] == '^':\n\t\t\tself.ofs += 1\n\t\t\tx = self.parse_rng_items( )\n\t\t\ts = set( )",
    "detail": "MY_GISTS.b90c84fa79.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\tend",
    "kind": 5,
    "importPath": "MY_GISTS.b90c84fa79.rand-string-gen",
    "description": "MY_GISTS.b90c84fa79.rand-string-gen",
    "peekOfCode": "\t\tend = len( self.src )\n\t\tif self.ofs >= end:\n\t\t\traise Error( '\"[\" at end of expression' )\n\t\tif self.src[self.ofs] == '^':\n\t\t\tself.ofs += 1\n\t\t\tx = self.parse_rng_items( )\n\t\t\ts = set( )\n\t\t\tfor i in range( 0, 127 ): #TODO: configurable\n\t\t\t\tc = chr( i )\n\t\t\t\tif c not in x: s.add( c )",
    "detail": "MY_GISTS.b90c84fa79.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\t\tx",
    "kind": 5,
    "importPath": "MY_GISTS.b90c84fa79.rand-string-gen",
    "description": "MY_GISTS.b90c84fa79.rand-string-gen",
    "peekOfCode": "\t\t\tx = self.parse_rng_items( )\n\t\t\ts = set( )\n\t\t\tfor i in range( 0, 127 ): #TODO: configurable\n\t\t\t\tc = chr( i )\n\t\t\t\tif c not in x: s.add( c )\n\t\telse:\n\t\t\ts = self.parse_rng_items( )\n\t\treturn op_rng( s )\n\tdef parse_rng_items( self ):\n\t\tend = len( self.src )",
    "detail": "MY_GISTS.b90c84fa79.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\t\ts",
    "kind": 5,
    "importPath": "MY_GISTS.b90c84fa79.rand-string-gen",
    "description": "MY_GISTS.b90c84fa79.rand-string-gen",
    "peekOfCode": "\t\t\ts = set( )\n\t\t\tfor i in range( 0, 127 ): #TODO: configurable\n\t\t\t\tc = chr( i )\n\t\t\t\tif c not in x: s.add( c )\n\t\telse:\n\t\t\ts = self.parse_rng_items( )\n\t\treturn op_rng( s )\n\tdef parse_rng_items( self ):\n\t\tend = len( self.src )\n\t\ts = set()",
    "detail": "MY_GISTS.b90c84fa79.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\t\t\tc",
    "kind": 5,
    "importPath": "MY_GISTS.b90c84fa79.rand-string-gen",
    "description": "MY_GISTS.b90c84fa79.rand-string-gen",
    "peekOfCode": "\t\t\t\tc = chr( i )\n\t\t\t\tif c not in x: s.add( c )\n\t\telse:\n\t\t\ts = self.parse_rng_items( )\n\t\treturn op_rng( s )\n\tdef parse_rng_items( self ):\n\t\tend = len( self.src )\n\t\ts = set()\n\t\twhile self.ofs < end:\n\t\t\tch = self.src[ self.ofs ]",
    "detail": "MY_GISTS.b90c84fa79.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\t\ts",
    "kind": 5,
    "importPath": "MY_GISTS.b90c84fa79.rand-string-gen",
    "description": "MY_GISTS.b90c84fa79.rand-string-gen",
    "peekOfCode": "\t\t\ts = self.parse_rng_items( )\n\t\treturn op_rng( s )\n\tdef parse_rng_items( self ):\n\t\tend = len( self.src )\n\t\ts = set()\n\t\twhile self.ofs < end:\n\t\t\tch = self.src[ self.ofs ]\n\t\t\tif ch == ']': \n\t\t\t\tself.ofs += 1\n\t\t\t\treturn s",
    "detail": "MY_GISTS.b90c84fa79.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\tend",
    "kind": 5,
    "importPath": "MY_GISTS.b90c84fa79.rand-string-gen",
    "description": "MY_GISTS.b90c84fa79.rand-string-gen",
    "peekOfCode": "\t\tend = len( self.src )\n\t\ts = set()\n\t\twhile self.ofs < end:\n\t\t\tch = self.src[ self.ofs ]\n\t\t\tif ch == ']': \n\t\t\t\tself.ofs += 1\n\t\t\t\treturn s\n\t\t\ta = self.parse_rng_item( )\n\t\t\tif self.src[ self.ofs ] == '-':\n\t\t\t\tself.ofs += 1",
    "detail": "MY_GISTS.b90c84fa79.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\ts",
    "kind": 5,
    "importPath": "MY_GISTS.b90c84fa79.rand-string-gen",
    "description": "MY_GISTS.b90c84fa79.rand-string-gen",
    "peekOfCode": "\t\ts = set()\n\t\twhile self.ofs < end:\n\t\t\tch = self.src[ self.ofs ]\n\t\t\tif ch == ']': \n\t\t\t\tself.ofs += 1\n\t\t\t\treturn s\n\t\t\ta = self.parse_rng_item( )\n\t\t\tif self.src[ self.ofs ] == '-':\n\t\t\t\tself.ofs += 1\n\t\t\t\tb = self.parse_rng_item( )",
    "detail": "MY_GISTS.b90c84fa79.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\t\tch",
    "kind": 5,
    "importPath": "MY_GISTS.b90c84fa79.rand-string-gen",
    "description": "MY_GISTS.b90c84fa79.rand-string-gen",
    "peekOfCode": "\t\t\tch = self.src[ self.ofs ]\n\t\t\tif ch == ']': \n\t\t\t\tself.ofs += 1\n\t\t\t\treturn s\n\t\t\ta = self.parse_rng_item( )\n\t\t\tif self.src[ self.ofs ] == '-':\n\t\t\t\tself.ofs += 1\n\t\t\t\tb = self.parse_rng_item( )\n\t\t\t\tfor i in range( ord( a ), ord( b ) + 1 ):\n\t\t\t\t\tch = chr( i )",
    "detail": "MY_GISTS.b90c84fa79.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\t\ta",
    "kind": 5,
    "importPath": "MY_GISTS.b90c84fa79.rand-string-gen",
    "description": "MY_GISTS.b90c84fa79.rand-string-gen",
    "peekOfCode": "\t\t\ta = self.parse_rng_item( )\n\t\t\tif self.src[ self.ofs ] == '-':\n\t\t\t\tself.ofs += 1\n\t\t\t\tb = self.parse_rng_item( )\n\t\t\t\tfor i in range( ord( a ), ord( b ) + 1 ):\n\t\t\t\t\tch = chr( i )\n\t\t\t\t\ts.add( ch )\n\t\t\telse:\n\t\t\t\ts.add( a )\n\t\traise Error( 'unmatched \"[\"' )",
    "detail": "MY_GISTS.b90c84fa79.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\t\t\tb",
    "kind": 5,
    "importPath": "MY_GISTS.b90c84fa79.rand-string-gen",
    "description": "MY_GISTS.b90c84fa79.rand-string-gen",
    "peekOfCode": "\t\t\t\tb = self.parse_rng_item( )\n\t\t\t\tfor i in range( ord( a ), ord( b ) + 1 ):\n\t\t\t\t\tch = chr( i )\n\t\t\t\t\ts.add( ch )\n\t\t\telse:\n\t\t\t\ts.add( a )\n\t\traise Error( 'unmatched \"[\"' )\n\tdef parse_rng_item( self ):\n\t\tend = len( self.src )\n\t\tif self.ofs >= end: raise Error( '\"[\" at end of expression' )",
    "detail": "MY_GISTS.b90c84fa79.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\t\t\t\tch",
    "kind": 5,
    "importPath": "MY_GISTS.b90c84fa79.rand-string-gen",
    "description": "MY_GISTS.b90c84fa79.rand-string-gen",
    "peekOfCode": "\t\t\t\t\tch = chr( i )\n\t\t\t\t\ts.add( ch )\n\t\t\telse:\n\t\t\t\ts.add( a )\n\t\traise Error( 'unmatched \"[\"' )\n\tdef parse_rng_item( self ):\n\t\tend = len( self.src )\n\t\tif self.ofs >= end: raise Error( '\"[\" at end of expression' )\n\t\tch = self.src[ self.ofs ]\n\t\tself.ofs += 1",
    "detail": "MY_GISTS.b90c84fa79.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\tend",
    "kind": 5,
    "importPath": "MY_GISTS.b90c84fa79.rand-string-gen",
    "description": "MY_GISTS.b90c84fa79.rand-string-gen",
    "peekOfCode": "\t\tend = len( self.src )\n\t\tif self.ofs >= end: raise Error( '\"[\" at end of expression' )\n\t\tch = self.src[ self.ofs ]\n\t\tself.ofs += 1\n\t\tif ch == '\\\\':\n\t\t\tif self.ofs >= end: raise Error( '\"\\\\\" at end of expression' )\n\t\t\tm = rx_octet.match( self.src, self.ofs )\n\t\t\tif m:\n\t\t\t\tself.ofs = m.end( )\n\t\t\t\treturn chr( int( m.group(1), 8 ) )",
    "detail": "MY_GISTS.b90c84fa79.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\tch",
    "kind": 5,
    "importPath": "MY_GISTS.b90c84fa79.rand-string-gen",
    "description": "MY_GISTS.b90c84fa79.rand-string-gen",
    "peekOfCode": "\t\tch = self.src[ self.ofs ]\n\t\tself.ofs += 1\n\t\tif ch == '\\\\':\n\t\t\tif self.ofs >= end: raise Error( '\"\\\\\" at end of expression' )\n\t\t\tm = rx_octet.match( self.src, self.ofs )\n\t\t\tif m:\n\t\t\t\tself.ofs = m.end( )\n\t\t\t\treturn chr( int( m.group(1), 8 ) )\n\t\telse:\n\t\t\treturn ch",
    "detail": "MY_GISTS.b90c84fa79.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\t\tm",
    "kind": 5,
    "importPath": "MY_GISTS.b90c84fa79.rand-string-gen",
    "description": "MY_GISTS.b90c84fa79.rand-string-gen",
    "peekOfCode": "\t\t\tm = rx_octet.match( self.src, self.ofs )\n\t\t\tif m:\n\t\t\t\tself.ofs = m.end( )\n\t\t\t\treturn chr( int( m.group(1), 8 ) )\n\t\telse:\n\t\t\treturn ch\n\tdef parse_esc( self ):\n\t\tif self.ofs >= len( self.src ):\n\t\t\traise Error( '\"\\\\\" at end of expression' )\n\t\tm = rx_octet.match( self.src, self.ofs )",
    "detail": "MY_GISTS.b90c84fa79.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\t\t\tself.ofs",
    "kind": 5,
    "importPath": "MY_GISTS.b90c84fa79.rand-string-gen",
    "description": "MY_GISTS.b90c84fa79.rand-string-gen",
    "peekOfCode": "\t\t\t\tself.ofs = m.end( )\n\t\t\t\treturn chr( int( m.group(1), 8 ) )\n\t\telse:\n\t\t\treturn ch\n\tdef parse_esc( self ):\n\t\tif self.ofs >= len( self.src ):\n\t\t\traise Error( '\"\\\\\" at end of expression' )\n\t\tm = rx_octet.match( self.src, self.ofs )\n\t\tif m:\n\t\t\tself.ofs = m.end( )",
    "detail": "MY_GISTS.b90c84fa79.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\tm",
    "kind": 5,
    "importPath": "MY_GISTS.b90c84fa79.rand-string-gen",
    "description": "MY_GISTS.b90c84fa79.rand-string-gen",
    "peekOfCode": "\t\tm = rx_octet.match( self.src, self.ofs )\n\t\tif m:\n\t\t\tself.ofs = m.end( )\n\t\t\treturn op_data( chr( int( m.group(1), 8 ) ) )\n\t\tm = rx_refer.match( self.src, self.ofs )\n\t\tif m:\n\t\t\tself.ofs = m.end( )\n\t\t\tix = int( m.group( 1 ), 8 )\n\t\t\tif ix > self.closes:\n\t\t\t\traise Error( 'illegal forward reference' ) # not that there are any legal ones.",
    "detail": "MY_GISTS.b90c84fa79.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\t\tself.ofs",
    "kind": 5,
    "importPath": "MY_GISTS.b90c84fa79.rand-string-gen",
    "description": "MY_GISTS.b90c84fa79.rand-string-gen",
    "peekOfCode": "\t\t\tself.ofs = m.end( )\n\t\t\treturn op_data( chr( int( m.group(1), 8 ) ) )\n\t\tm = rx_refer.match( self.src, self.ofs )\n\t\tif m:\n\t\t\tself.ofs = m.end( )\n\t\t\tix = int( m.group( 1 ), 8 )\n\t\t\tif ix > self.closes:\n\t\t\t\traise Error( 'illegal forward reference' ) # not that there are any legal ones.\n\t\t\treturn op_ref( ix )\n\t\tch = self.src[self.ofs]",
    "detail": "MY_GISTS.b90c84fa79.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\tm",
    "kind": 5,
    "importPath": "MY_GISTS.b90c84fa79.rand-string-gen",
    "description": "MY_GISTS.b90c84fa79.rand-string-gen",
    "peekOfCode": "\t\tm = rx_refer.match( self.src, self.ofs )\n\t\tif m:\n\t\t\tself.ofs = m.end( )\n\t\t\tix = int( m.group( 1 ), 8 )\n\t\t\tif ix > self.closes:\n\t\t\t\traise Error( 'illegal forward reference' ) # not that there are any legal ones.\n\t\t\treturn op_ref( ix )\n\t\tch = self.src[self.ofs]\n\t\tself.ofs += 1\n\t\treturn escapes.get( ch, ch )\t\t\t\t",
    "detail": "MY_GISTS.b90c84fa79.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\t\tself.ofs",
    "kind": 5,
    "importPath": "MY_GISTS.b90c84fa79.rand-string-gen",
    "description": "MY_GISTS.b90c84fa79.rand-string-gen",
    "peekOfCode": "\t\t\tself.ofs = m.end( )\n\t\t\tix = int( m.group( 1 ), 8 )\n\t\t\tif ix > self.closes:\n\t\t\t\traise Error( 'illegal forward reference' ) # not that there are any legal ones.\n\t\t\treturn op_ref( ix )\n\t\tch = self.src[self.ofs]\n\t\tself.ofs += 1\n\t\treturn escapes.get( ch, ch )\t\t\t\t\n\tdef parse_expr( self, inner = False ):\n\t\t\"parses a possibly branched expression yielding none or an operation\"",
    "detail": "MY_GISTS.b90c84fa79.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\t\tix",
    "kind": 5,
    "importPath": "MY_GISTS.b90c84fa79.rand-string-gen",
    "description": "MY_GISTS.b90c84fa79.rand-string-gen",
    "peekOfCode": "\t\t\tix = int( m.group( 1 ), 8 )\n\t\t\tif ix > self.closes:\n\t\t\t\traise Error( 'illegal forward reference' ) # not that there are any legal ones.\n\t\t\treturn op_ref( ix )\n\t\tch = self.src[self.ofs]\n\t\tself.ofs += 1\n\t\treturn escapes.get( ch, ch )\t\t\t\t\n\tdef parse_expr( self, inner = False ):\n\t\t\"parses a possibly branched expression yielding none or an operation\"\n\t\topt = []\t # We start with an empty sequence of requirements.",
    "detail": "MY_GISTS.b90c84fa79.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\tch",
    "kind": 5,
    "importPath": "MY_GISTS.b90c84fa79.rand-string-gen",
    "description": "MY_GISTS.b90c84fa79.rand-string-gen",
    "peekOfCode": "\t\tch = self.src[self.ofs]\n\t\tself.ofs += 1\n\t\treturn escapes.get( ch, ch )\t\t\t\t\n\tdef parse_expr( self, inner = False ):\n\t\t\"parses a possibly branched expression yielding none or an operation\"\n\t\topt = []\t # We start with an empty sequence of requirements.\n\t\topts = [opt] # And a empty list of branches.\n\t\tend = len( self.src )\n\t\twhile self.ofs < end:\n\t\t\tch = self.src[ self.ofs ]",
    "detail": "MY_GISTS.b90c84fa79.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\topt",
    "kind": 5,
    "importPath": "MY_GISTS.b90c84fa79.rand-string-gen",
    "description": "MY_GISTS.b90c84fa79.rand-string-gen",
    "peekOfCode": "\t\topt = []\t # We start with an empty sequence of requirements.\n\t\topts = [opt] # And a empty list of branches.\n\t\tend = len( self.src )\n\t\twhile self.ofs < end:\n\t\t\tch = self.src[ self.ofs ]\n\t\t\tself.ofs += 1\n\t\t\tif ch == '|':\n\t\t\t\topt = []\n\t\t\t\topts.append( opt )\n\t\t\telif ch =='(':",
    "detail": "MY_GISTS.b90c84fa79.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\topts",
    "kind": 5,
    "importPath": "MY_GISTS.b90c84fa79.rand-string-gen",
    "description": "MY_GISTS.b90c84fa79.rand-string-gen",
    "peekOfCode": "\t\topts = [opt] # And a empty list of branches.\n\t\tend = len( self.src )\n\t\twhile self.ofs < end:\n\t\t\tch = self.src[ self.ofs ]\n\t\t\tself.ofs += 1\n\t\t\tif ch == '|':\n\t\t\t\topt = []\n\t\t\t\topts.append( opt )\n\t\t\telif ch =='(':\n\t\t\t\tself.opens += 1",
    "detail": "MY_GISTS.b90c84fa79.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\tend",
    "kind": 5,
    "importPath": "MY_GISTS.b90c84fa79.rand-string-gen",
    "description": "MY_GISTS.b90c84fa79.rand-string-gen",
    "peekOfCode": "\t\tend = len( self.src )\n\t\twhile self.ofs < end:\n\t\t\tch = self.src[ self.ofs ]\n\t\t\tself.ofs += 1\n\t\t\tif ch == '|':\n\t\t\t\topt = []\n\t\t\t\topts.append( opt )\n\t\t\telif ch =='(':\n\t\t\t\tself.opens += 1\n\t\t\t\topt.append( op_set( self.opens, self.parse_expr( True ) ) )",
    "detail": "MY_GISTS.b90c84fa79.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\t\tch",
    "kind": 5,
    "importPath": "MY_GISTS.b90c84fa79.rand-string-gen",
    "description": "MY_GISTS.b90c84fa79.rand-string-gen",
    "peekOfCode": "\t\t\tch = self.src[ self.ofs ]\n\t\t\tself.ofs += 1\n\t\t\tif ch == '|':\n\t\t\t\topt = []\n\t\t\t\topts.append( opt )\n\t\t\telif ch =='(':\n\t\t\t\tself.opens += 1\n\t\t\t\topt.append( op_set( self.opens, self.parse_expr( True ) ) )\n\t\t\t\tself.closes += 1\n\t\t\telif ch == ')':",
    "detail": "MY_GISTS.b90c84fa79.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\t\t\topt",
    "kind": 5,
    "importPath": "MY_GISTS.b90c84fa79.rand-string-gen",
    "description": "MY_GISTS.b90c84fa79.rand-string-gen",
    "peekOfCode": "\t\t\t\topt = []\n\t\t\t\topts.append( opt )\n\t\t\telif ch =='(':\n\t\t\t\tself.opens += 1\n\t\t\t\topt.append( op_set( self.opens, self.parse_expr( True ) ) )\n\t\t\t\tself.closes += 1\n\t\t\telif ch == ')':\n\t\t\t\tif not inner: raise Error( 'unmatched \")\"' )\n\t\t\t\tinner = False\n\t\t\t\tbreak",
    "detail": "MY_GISTS.b90c84fa79.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\t\t\tinner",
    "kind": 5,
    "importPath": "MY_GISTS.b90c84fa79.rand-string-gen",
    "description": "MY_GISTS.b90c84fa79.rand-string-gen",
    "peekOfCode": "\t\t\t\tinner = False\n\t\t\t\tbreak\n\t\t\telif ch == '\\\\':\n\t\t\t\topt.append( self.parse_esc( ) )\n\t\t\telif ch == '.':\n                                opt.append( any_op )\n\t\t\telif ch == '*':\n\t\t\t\tif not opt: raise Error( 'nothing to repeat' )\n\t\t\t\t#TODO: Catch and Report multiple-repeat.\n\t\t\t\topt[-1] = op_rpt( mk_seq_op( opt[-1] ), 0, self.limit )",
    "detail": "MY_GISTS.b90c84fa79.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\t\t\topt[-1]",
    "kind": 5,
    "importPath": "MY_GISTS.b90c84fa79.rand-string-gen",
    "description": "MY_GISTS.b90c84fa79.rand-string-gen",
    "peekOfCode": "\t\t\t\topt[-1] = op_rpt( mk_seq_op( opt[-1] ), 0, self.limit )\n\t\t\telif ch == '+':\n\t\t\t\tif not opt: raise Error( 'nothing to repeat' )\n\t\t\t\t#TODO: Catch and Report multiple-repeat.\n\t\t\t\topt[-1] = op_rpt( mk_seq_op( opt[-1] ), 1, self.limit )\n\t\t\telif ch == '?':\n\t\t\t\tif not opt: raise Error( 'nothing to repeat' )\n\t\t\t\t#TODO: Catch and Report multiple-repeat.\n\t\t\t\topt[-1] = op_opt( mk_seq_op( opt[-1] ) )\n\t\t\telif ch == '[':",
    "detail": "MY_GISTS.b90c84fa79.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\t\t\topt[-1]",
    "kind": 5,
    "importPath": "MY_GISTS.b90c84fa79.rand-string-gen",
    "description": "MY_GISTS.b90c84fa79.rand-string-gen",
    "peekOfCode": "\t\t\t\topt[-1] = op_rpt( mk_seq_op( opt[-1] ), 1, self.limit )\n\t\t\telif ch == '?':\n\t\t\t\tif not opt: raise Error( 'nothing to repeat' )\n\t\t\t\t#TODO: Catch and Report multiple-repeat.\n\t\t\t\topt[-1] = op_opt( mk_seq_op( opt[-1] ) )\n\t\t\telif ch == '[':\n\t\t\t\topt.append( self.parse_rng( ) )\n\t\t\telif ch == '{':\n\t\t\t\tif not opt: raise Error( 'nothing to repeat' )\n\t\t\t\t#TODO: Catch and Report multiple-repeat.",
    "detail": "MY_GISTS.b90c84fa79.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\t\t\topt[-1]",
    "kind": 5,
    "importPath": "MY_GISTS.b90c84fa79.rand-string-gen",
    "description": "MY_GISTS.b90c84fa79.rand-string-gen",
    "peekOfCode": "\t\t\t\topt[-1] = op_opt( mk_seq_op( opt[-1] ) )\n\t\t\telif ch == '[':\n\t\t\t\topt.append( self.parse_rng( ) )\n\t\t\telif ch == '{':\n\t\t\t\tif not opt: raise Error( 'nothing to repeat' )\n\t\t\t\t#TODO: Catch and Report multiple-repeat.\n\t\t\t\topt[-1] = self.parse_rpt( mk_seq_op( opt[-1] ) )\n\t\t\telse:\n\t\t\t\topt.append( ch )\n\t\tif inner:",
    "detail": "MY_GISTS.b90c84fa79.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\t\t\topt[-1]",
    "kind": 5,
    "importPath": "MY_GISTS.b90c84fa79.rand-string-gen",
    "description": "MY_GISTS.b90c84fa79.rand-string-gen",
    "peekOfCode": "\t\t\t\topt[-1] = self.parse_rpt( mk_seq_op( opt[-1] ) )\n\t\t\telse:\n\t\t\t\topt.append( ch )\n\t\tif inner:\n\t\t\traise Error( 'unmatched \"(\"' )\n\t\topts = filter( lambda x:x, opts )\n\t\tif not opts:\n\t\t\treturn op_nul( )\n\t\telif len( opts ) == 1:\n\t\t\treturn mk_seq_op( opt )",
    "detail": "MY_GISTS.b90c84fa79.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\topts",
    "kind": 5,
    "importPath": "MY_GISTS.b90c84fa79.rand-string-gen",
    "description": "MY_GISTS.b90c84fa79.rand-string-gen",
    "peekOfCode": "\t\topts = filter( lambda x:x, opts )\n\t\tif not opts:\n\t\t\treturn op_nul( )\n\t\telif len( opts ) == 1:\n\t\t\treturn mk_seq_op( opt )\n\t\telse:\n\t\t\treturn op_alt( map( mk_seq_op, opts ) )\nclass Generator:\n\tdef __init__( self, root ):\n\t\tif not root: raise Exception #TODO",
    "detail": "MY_GISTS.b90c84fa79.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\tself.root",
    "kind": 5,
    "importPath": "MY_GISTS.b90c84fa79.rand-string-gen",
    "description": "MY_GISTS.b90c84fa79.rand-string-gen",
    "peekOfCode": "\t\tself.root = root\n\tdef generate( self, seed = None, vm = None ):\n\t\tif vm is None: vm = Vm( seed )\t\t\n\t\tself.root( vm )\n\t\treturn str( vm )\nclass Vm:\n\tdef __init__( self, seed = None ):\n\t\tself.rng = random.WichmannHill( seed )\n\t\tself.out = []\n\t\tself.groups = {}",
    "detail": "MY_GISTS.b90c84fa79.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\tself.rng",
    "kind": 5,
    "importPath": "MY_GISTS.b90c84fa79.rand-string-gen",
    "description": "MY_GISTS.b90c84fa79.rand-string-gen",
    "peekOfCode": "\t\tself.rng = random.WichmannHill( seed )\n\t\tself.out = []\n\t\tself.groups = {}\n\tdef choose( self, field ):\n\t\t\"selects a random value from 0 .. field - 1, or the list\"\n\t\tif isinstance( field, int ):\n\t\t\treturn self.rng.randint( 0, field )\n\t\telse:\n\t\t\treturn self.rng.choice( field )\n\tdef write( self, data ):",
    "detail": "MY_GISTS.b90c84fa79.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\tself.out",
    "kind": 5,
    "importPath": "MY_GISTS.b90c84fa79.rand-string-gen",
    "description": "MY_GISTS.b90c84fa79.rand-string-gen",
    "peekOfCode": "\t\tself.out = []\n\t\tself.groups = {}\n\tdef choose( self, field ):\n\t\t\"selects a random value from 0 .. field - 1, or the list\"\n\t\tif isinstance( field, int ):\n\t\t\treturn self.rng.randint( 0, field )\n\t\telse:\n\t\t\treturn self.rng.choice( field )\n\tdef write( self, data ):\n\t\tself.out.append( data )",
    "detail": "MY_GISTS.b90c84fa79.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\tself.groups",
    "kind": 5,
    "importPath": "MY_GISTS.b90c84fa79.rand-string-gen",
    "description": "MY_GISTS.b90c84fa79.rand-string-gen",
    "peekOfCode": "\t\tself.groups = {}\n\tdef choose( self, field ):\n\t\t\"selects a random value from 0 .. field - 1, or the list\"\n\t\tif isinstance( field, int ):\n\t\t\treturn self.rng.randint( 0, field )\n\t\telse:\n\t\t\treturn self.rng.choice( field )\n\tdef write( self, data ):\n\t\tself.out.append( data )\n\tdef group( self, tag ):",
    "detail": "MY_GISTS.b90c84fa79.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\tself.vm",
    "kind": 5,
    "importPath": "MY_GISTS.b90c84fa79.rand-string-gen",
    "description": "MY_GISTS.b90c84fa79.rand-string-gen",
    "peekOfCode": "\t\tself.vm = vm\n\t\tself.ref = ref\n\tdef __enter__( self ):\n\t\tself.out = self.vm.out\n\t\tself.vm.out = []\n\tdef __exit__( self, errtyp, errval, errtb ):\n\t\tif errtyp or errval: return False\n\t\tvm = self.vm\n\t\tdata = ''.join( vm.out )\n\t\tvm.out = self.out",
    "detail": "MY_GISTS.b90c84fa79.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\tself.ref",
    "kind": 5,
    "importPath": "MY_GISTS.b90c84fa79.rand-string-gen",
    "description": "MY_GISTS.b90c84fa79.rand-string-gen",
    "peekOfCode": "\t\tself.ref = ref\n\tdef __enter__( self ):\n\t\tself.out = self.vm.out\n\t\tself.vm.out = []\n\tdef __exit__( self, errtyp, errval, errtb ):\n\t\tif errtyp or errval: return False\n\t\tvm = self.vm\n\t\tdata = ''.join( vm.out )\n\t\tvm.out = self.out\n\t\tvm.write( data )",
    "detail": "MY_GISTS.b90c84fa79.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\tself.out",
    "kind": 5,
    "importPath": "MY_GISTS.b90c84fa79.rand-string-gen",
    "description": "MY_GISTS.b90c84fa79.rand-string-gen",
    "peekOfCode": "\t\tself.out = self.vm.out\n\t\tself.vm.out = []\n\tdef __exit__( self, errtyp, errval, errtb ):\n\t\tif errtyp or errval: return False\n\t\tvm = self.vm\n\t\tdata = ''.join( vm.out )\n\t\tvm.out = self.out\n\t\tvm.write( data )\n\t\tvm.groups[self.ref] = data\ndef generate( fx, seed = None, vm = None ):",
    "detail": "MY_GISTS.b90c84fa79.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\tself.vm.out",
    "kind": 5,
    "importPath": "MY_GISTS.b90c84fa79.rand-string-gen",
    "description": "MY_GISTS.b90c84fa79.rand-string-gen",
    "peekOfCode": "\t\tself.vm.out = []\n\tdef __exit__( self, errtyp, errval, errtb ):\n\t\tif errtyp or errval: return False\n\t\tvm = self.vm\n\t\tdata = ''.join( vm.out )\n\t\tvm.out = self.out\n\t\tvm.write( data )\n\t\tvm.groups[self.ref] = data\ndef generate( fx, seed = None, vm = None ):\n\tif isinstance( fx, str ):",
    "detail": "MY_GISTS.b90c84fa79.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\tvm",
    "kind": 5,
    "importPath": "MY_GISTS.b90c84fa79.rand-string-gen",
    "description": "MY_GISTS.b90c84fa79.rand-string-gen",
    "peekOfCode": "\t\tvm = self.vm\n\t\tdata = ''.join( vm.out )\n\t\tvm.out = self.out\n\t\tvm.write( data )\n\t\tvm.groups[self.ref] = data\ndef generate( fx, seed = None, vm = None ):\n\tif isinstance( fx, str ):\n\t\tfx = compile( fx )\n\treturn fx.generate( seed, vm )\ndef compile( data ):",
    "detail": "MY_GISTS.b90c84fa79.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\tdata",
    "kind": 5,
    "importPath": "MY_GISTS.b90c84fa79.rand-string-gen",
    "description": "MY_GISTS.b90c84fa79.rand-string-gen",
    "peekOfCode": "\t\tdata = ''.join( vm.out )\n\t\tvm.out = self.out\n\t\tvm.write( data )\n\t\tvm.groups[self.ref] = data\ndef generate( fx, seed = None, vm = None ):\n\tif isinstance( fx, str ):\n\t\tfx = compile( fx )\n\treturn fx.generate( seed, vm )\ndef compile( data ):\n\treturn Generator( Compiler( data ).parse_expr( ) )",
    "detail": "MY_GISTS.b90c84fa79.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\tvm.out",
    "kind": 5,
    "importPath": "MY_GISTS.b90c84fa79.rand-string-gen",
    "description": "MY_GISTS.b90c84fa79.rand-string-gen",
    "peekOfCode": "\t\tvm.out = self.out\n\t\tvm.write( data )\n\t\tvm.groups[self.ref] = data\ndef generate( fx, seed = None, vm = None ):\n\tif isinstance( fx, str ):\n\t\tfx = compile( fx )\n\treturn fx.generate( seed, vm )\ndef compile( data ):\n\treturn Generator( Compiler( data ).parse_expr( ) )\ndef test( ex, seed = None ):",
    "detail": "MY_GISTS.b90c84fa79.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\tvm.groups[self.ref]",
    "kind": 5,
    "importPath": "MY_GISTS.b90c84fa79.rand-string-gen",
    "description": "MY_GISTS.b90c84fa79.rand-string-gen",
    "peekOfCode": "\t\tvm.groups[self.ref] = data\ndef generate( fx, seed = None, vm = None ):\n\tif isinstance( fx, str ):\n\t\tfx = compile( fx )\n\treturn fx.generate( seed, vm )\ndef compile( data ):\n\treturn Generator( Compiler( data ).parse_expr( ) )\ndef test( ex, seed = None ):\n\tr = re.compile( '^' + ex + '$' )\n\tdata = generate( ex, seed )",
    "detail": "MY_GISTS.b90c84fa79.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\t\tfx",
    "kind": 5,
    "importPath": "MY_GISTS.b90c84fa79.rand-string-gen",
    "description": "MY_GISTS.b90c84fa79.rand-string-gen",
    "peekOfCode": "\t\tfx = compile( fx )\n\treturn fx.generate( seed, vm )\ndef compile( data ):\n\treturn Generator( Compiler( data ).parse_expr( ) )\ndef test( ex, seed = None ):\n\tr = re.compile( '^' + ex + '$' )\n\tdata = generate( ex, seed )\n\tk = r.match( data )\n\tprint >>sys.stderr, 'TESTING: %s, RESULT: %r, %s' % ( \n\t\tex, data, \"PASSED\" if k else \"FAILED\" ",
    "detail": "MY_GISTS.b90c84fa79.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\tr",
    "kind": 5,
    "importPath": "MY_GISTS.b90c84fa79.rand-string-gen",
    "description": "MY_GISTS.b90c84fa79.rand-string-gen",
    "peekOfCode": "\tr = re.compile( '^' + ex + '$' )\n\tdata = generate( ex, seed )\n\tk = r.match( data )\n\tprint >>sys.stderr, 'TESTING: %s, RESULT: %r, %s' % ( \n\t\tex, data, \"PASSED\" if k else \"FAILED\" \n\t)\n\treturn k\ndef test_batch( seed = None ):\n\treturn ( test( 'a' )\n\t\t and test( 'a|b', seed )",
    "detail": "MY_GISTS.b90c84fa79.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\tdata",
    "kind": 5,
    "importPath": "MY_GISTS.b90c84fa79.rand-string-gen",
    "description": "MY_GISTS.b90c84fa79.rand-string-gen",
    "peekOfCode": "\tdata = generate( ex, seed )\n\tk = r.match( data )\n\tprint >>sys.stderr, 'TESTING: %s, RESULT: %r, %s' % ( \n\t\tex, data, \"PASSED\" if k else \"FAILED\" \n\t)\n\treturn k\ndef test_batch( seed = None ):\n\treturn ( test( 'a' )\n\t\t and test( 'a|b', seed )\n\t\t and test( 'a|b|c', seed )",
    "detail": "MY_GISTS.b90c84fa79.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "\tk",
    "kind": 5,
    "importPath": "MY_GISTS.b90c84fa79.rand-string-gen",
    "description": "MY_GISTS.b90c84fa79.rand-string-gen",
    "peekOfCode": "\tk = r.match( data )\n\tprint >>sys.stderr, 'TESTING: %s, RESULT: %r, %s' % ( \n\t\tex, data, \"PASSED\" if k else \"FAILED\" \n\t)\n\treturn k\ndef test_batch( seed = None ):\n\treturn ( test( 'a' )\n\t\t and test( 'a|b', seed )\n\t\t and test( 'a|b|c', seed )\n\t\t and test( 'aa', seed )",
    "detail": "MY_GISTS.b90c84fa79.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "__all__",
    "kind": 5,
    "importPath": "MY_GISTS.b90c84fa79.rand-string-gen",
    "description": "MY_GISTS.b90c84fa79.rand-string-gen",
    "peekOfCode": "__all__ = [\n\t'compile', 'generate', 'Generator'\n]\nif __name__ == '__main__':\n\ttest_batch( )",
    "detail": "MY_GISTS.b90c84fa79.rand-string-gen",
    "documentation": {}
  },
  {
    "label": "mydict",
    "kind": 5,
    "importPath": "MY_GISTS.babcbaf107.Dictionaries",
    "description": "MY_GISTS.babcbaf107.Dictionaries",
    "peekOfCode": "mydict = {'a':1,'b':2}\n# add new (key,value) pair\nmydict['c'] = 3\n# modify existing (key,value) pair\nmydict['a'] = 5\n# remove (key,value) pair\nmydict.pop('a')\n# get length of the dictionary\nprint(len(mydict))\n# iteration through keys",
    "detail": "MY_GISTS.babcbaf107.Dictionaries",
    "documentation": {}
  },
  {
    "label": "mydict['c']",
    "kind": 5,
    "importPath": "MY_GISTS.babcbaf107.Dictionaries",
    "description": "MY_GISTS.babcbaf107.Dictionaries",
    "peekOfCode": "mydict['c'] = 3\n# modify existing (key,value) pair\nmydict['a'] = 5\n# remove (key,value) pair\nmydict.pop('a')\n# get length of the dictionary\nprint(len(mydict))\n# iteration through keys\nfor key in mydict.keys():\n  print(key)",
    "detail": "MY_GISTS.babcbaf107.Dictionaries",
    "documentation": {}
  },
  {
    "label": "mydict['a']",
    "kind": 5,
    "importPath": "MY_GISTS.babcbaf107.Dictionaries",
    "description": "MY_GISTS.babcbaf107.Dictionaries",
    "peekOfCode": "mydict['a'] = 5\n# remove (key,value) pair\nmydict.pop('a')\n# get length of the dictionary\nprint(len(mydict))\n# iteration through keys\nfor key in mydict.keys():\n  print(key)\n# iteration through values\nfor value in mydict.values():",
    "detail": "MY_GISTS.babcbaf107.Dictionaries",
    "documentation": {}
  },
  {
    "label": "number",
    "kind": 5,
    "importPath": "MY_GISTS.bfaab4c900.CountofDigits",
    "description": "MY_GISTS.bfaab4c900.CountofDigits",
    "peekOfCode": "number = int(input())\ncounter =0\nwhile number > 0:\n    number = number//10\n    print(number)\n    counter +=1\nprint(\"number of digits :\",counter)",
    "detail": "MY_GISTS.bfaab4c900.CountofDigits",
    "documentation": {}
  },
  {
    "label": "bubble_sort",
    "kind": 2,
    "importPath": "MY_GISTS.c2e4e8a288.bubble_sort",
    "description": "MY_GISTS.c2e4e8a288.bubble_sort",
    "peekOfCode": "def bubble_sort(collection):\n    counter = 0\n    length = len(collection)\n    for i in range(0, length - 1):\n        is_sorted = True\n        for j in range(0, length - 1):\n            if collection[j] > collection[j + 1]:\n                collection[j], collection[j + 1] = collection[j + 1], collection[j]\n                is_sorted = False\n        counter += 1",
    "detail": "MY_GISTS.c2e4e8a288.bubble_sort",
    "documentation": {}
  },
  {
    "label": "visualization",
    "kind": 2,
    "importPath": "MY_GISTS.c2e4e8a288.bubble_sort",
    "description": "MY_GISTS.c2e4e8a288.bubble_sort",
    "peekOfCode": "def visualization():\n    length = 10\n    collection = [randint(0, length) for _ in range(length)]\n    print(\"Initial list:\", collection)\n    print(\"Visualization of algorithm work.\")\n    collection, counter = bubble_sort(collection)\n    print(\"Final list:\", collection)\n    print(\"Total numbers of passages:\", counter)\ndef main():\n    elapsed_time = timeit.timeit(visualization, number=1)",
    "detail": "MY_GISTS.c2e4e8a288.bubble_sort",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "MY_GISTS.c2e4e8a288.bubble_sort",
    "description": "MY_GISTS.c2e4e8a288.bubble_sort",
    "peekOfCode": "def main():\n    elapsed_time = timeit.timeit(visualization, number=1)\n    print(\"Elapsed time: \", round(elapsed_time, 7), \"sec.\")\nif __name__ == \"__main__\":\n    main()",
    "detail": "MY_GISTS.c2e4e8a288.bubble_sort",
    "documentation": {}
  },
  {
    "label": "bucket_sort",
    "kind": 2,
    "importPath": "MY_GISTS.c2e4e8a288.bucket_sort",
    "description": "MY_GISTS.c2e4e8a288.bucket_sort",
    "peekOfCode": "def bucket_sort(collection):\n    length = len(collection)\n    buckets_list = [0 for _ in range(length + 1)]\n    print(\"\\tBuckets list before sorting - {}\".format(buckets_list))\n    for j in range(length):\n        buckets_list[collection[j]] += 1\n    print(\"\\tBuckets list after sorting - {}\".format(buckets_list))\n    counter = 0\n    for i in range(length + 1):\n        for j in range(buckets_list[i]):",
    "detail": "MY_GISTS.c2e4e8a288.bucket_sort",
    "documentation": {}
  },
  {
    "label": "visualization",
    "kind": 2,
    "importPath": "MY_GISTS.c2e4e8a288.bucket_sort",
    "description": "MY_GISTS.c2e4e8a288.bucket_sort",
    "peekOfCode": "def visualization():\n    length = 10\n    collection = [randint(0, length) for _ in range(length)]\n    print(\"Initial list:\", collection)\n    print(\"Visualization of algorithm work.\")\n    collection = bucket_sort(collection)\n    print(\"Final list:\", collection)\ndef main():\n    elapsed_time = timeit.timeit(visualization, number=1)\n    print(\"Elapsed time: \", round(elapsed_time, 7), \"sec.\")",
    "detail": "MY_GISTS.c2e4e8a288.bucket_sort",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "MY_GISTS.c2e4e8a288.bucket_sort",
    "description": "MY_GISTS.c2e4e8a288.bucket_sort",
    "peekOfCode": "def main():\n    elapsed_time = timeit.timeit(visualization, number=1)\n    print(\"Elapsed time: \", round(elapsed_time, 7), \"sec.\")\nif __name__ == \"__main__\":\n    main()",
    "detail": "MY_GISTS.c2e4e8a288.bucket_sort",
    "documentation": {}
  },
  {
    "label": "cocktail_sort",
    "kind": 2,
    "importPath": "MY_GISTS.c2e4e8a288.cocktail_sort",
    "description": "MY_GISTS.c2e4e8a288.cocktail_sort",
    "peekOfCode": "def cocktail_sort(collection):\n    counter = 0\n    length = len(collection)\n    left, right = 0, length - 1\n    while left <= right:\n        for i in range(left, right, +1):\n            if collection[i] > collection[i + 1]:\n                collection[i], collection[i + 1] = collection[i + 1], collection[i]\n        right -= 1\n        for i in range(right, left, -1):",
    "detail": "MY_GISTS.c2e4e8a288.cocktail_sort",
    "documentation": {}
  },
  {
    "label": "visualization",
    "kind": 2,
    "importPath": "MY_GISTS.c2e4e8a288.cocktail_sort",
    "description": "MY_GISTS.c2e4e8a288.cocktail_sort",
    "peekOfCode": "def visualization():\n    length = 10\n    collection = [randint(0, length) for _ in range(length)]\n    print(\"Initial list:\", collection)\n    print(\"Visualization of algorithm work.\")\n    collection, counter = cocktail_sort(collection)\n    print(\"Final list:\", collection)\n    print(\"Total numbers of passages:\", counter)\ndef main():\n    elapsed_time = timeit.timeit(visualization, number=1)",
    "detail": "MY_GISTS.c2e4e8a288.cocktail_sort",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "MY_GISTS.c2e4e8a288.cocktail_sort",
    "description": "MY_GISTS.c2e4e8a288.cocktail_sort",
    "peekOfCode": "def main():\n    elapsed_time = timeit.timeit(visualization, number=1)\n    print(\"Elapsed time: \", round(elapsed_time, 7), \"sec.\")\nif __name__ == \"__main__\":\n    main()",
    "detail": "MY_GISTS.c2e4e8a288.cocktail_sort",
    "documentation": {}
  },
  {
    "label": "comb_sort",
    "kind": 2,
    "importPath": "MY_GISTS.c2e4e8a288.comb_sort",
    "description": "MY_GISTS.c2e4e8a288.comb_sort",
    "peekOfCode": "def comb_sort(collection, counter):\n    length = len(collection)\n    gap = length * 10 // 13 if length > 1 else 0\n    while gap:\n        if 8 < gap < 11:\n            gap = 11\n        swapped = 0\n        for index in range(length - gap):\n            if collection[index + gap] < collection[index]:\n                collection[index + gap], collection[index] = (",
    "detail": "MY_GISTS.c2e4e8a288.comb_sort",
    "documentation": {}
  },
  {
    "label": "visualization",
    "kind": 2,
    "importPath": "MY_GISTS.c2e4e8a288.comb_sort",
    "description": "MY_GISTS.c2e4e8a288.comb_sort",
    "peekOfCode": "def visualization():\n    counter = 0\n    length = 10\n    collection = [randint(0, length) for _ in range(length)]\n    print(\"Initial list:\", collection)\n    print(\"Visualization of algorithm work.\")\n    collection, counter = comb_sort(collection, counter)\n    print(\"Final list:\", collection)\n    print(\"Total numbers of passages:\", counter)\ndef main():",
    "detail": "MY_GISTS.c2e4e8a288.comb_sort",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "MY_GISTS.c2e4e8a288.comb_sort",
    "description": "MY_GISTS.c2e4e8a288.comb_sort",
    "peekOfCode": "def main():\n    elapsed_time = timeit.timeit(visualization, number=1)\n    print(\"Elapsed time: \", round(elapsed_time, 7), \"sec.\")\nif __name__ == \"__main__\":\n    main()",
    "detail": "MY_GISTS.c2e4e8a288.comb_sort",
    "documentation": {}
  },
  {
    "label": "gnome_sort",
    "kind": 2,
    "importPath": "MY_GISTS.c2e4e8a288.gnome_sort",
    "description": "MY_GISTS.c2e4e8a288.gnome_sort",
    "peekOfCode": "def gnome_sort(collection):\n    length = len(collection)\n    i, j, counter = 1, 2, 0\n    while i < length:\n        if collection[i - 1] < collection[i]:\n            i, j = j, j + 1\n            counter += 1\n            print(\"Step %i -->\" % counter, collection)\n        else:\n            collection[i], collection[i - 1] = collection[i - 1], collection[i]",
    "detail": "MY_GISTS.c2e4e8a288.gnome_sort",
    "documentation": {}
  },
  {
    "label": "visualization",
    "kind": 2,
    "importPath": "MY_GISTS.c2e4e8a288.gnome_sort",
    "description": "MY_GISTS.c2e4e8a288.gnome_sort",
    "peekOfCode": "def visualization():\n    length = 10\n    collection = [randint(0, length) for _ in range(length)]\n    print(\"Initial list:\", collection)\n    print(\"Visualization of algorithm work.\")\n    collection, counter = gnome_sort(collection)\n    print(\"Final list:\", collection)\n    print(\"Total numbers of passages:\", counter)\ndef main():\n    elapsed_time = timeit.timeit(visualization, number=1)",
    "detail": "MY_GISTS.c2e4e8a288.gnome_sort",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "MY_GISTS.c2e4e8a288.gnome_sort",
    "description": "MY_GISTS.c2e4e8a288.gnome_sort",
    "peekOfCode": "def main():\n    elapsed_time = timeit.timeit(visualization, number=1)\n    print(\"Elapsed time: \", round(elapsed_time, 7), \"sec.\")\nif __name__ == \"__main__\":\n    main()",
    "detail": "MY_GISTS.c2e4e8a288.gnome_sort",
    "documentation": {}
  },
  {
    "label": "insertion_sort",
    "kind": 2,
    "importPath": "MY_GISTS.c2e4e8a288.insertion_sort",
    "description": "MY_GISTS.c2e4e8a288.insertion_sort",
    "peekOfCode": "def insertion_sort(collection):\n    counter = 0\n    length = len(collection)\n    for i in range(0, length):\n        value = collection[i]\n        j = i\n        while (j > 0) and (collection[j - 1] > value):\n            collection[j] = collection[j - 1]\n            j -= 1\n        collection[j] = value",
    "detail": "MY_GISTS.c2e4e8a288.insertion_sort",
    "documentation": {}
  },
  {
    "label": "visualization",
    "kind": 2,
    "importPath": "MY_GISTS.c2e4e8a288.insertion_sort",
    "description": "MY_GISTS.c2e4e8a288.insertion_sort",
    "peekOfCode": "def visualization():\n    length = 10\n    collection = [randint(0, length) for _ in range(length)]\n    print(\"Initial list:\", collection)\n    print(\"Visualization of algorithm work.\")\n    collection, counter = insertion_sort(collection)\n    print(\"Final list:\", collection)\n    print(\"Total numbers of passages:\", counter)\ndef main():\n    elapsed_time = timeit.timeit(visualization, number=1)",
    "detail": "MY_GISTS.c2e4e8a288.insertion_sort",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "MY_GISTS.c2e4e8a288.insertion_sort",
    "description": "MY_GISTS.c2e4e8a288.insertion_sort",
    "peekOfCode": "def main():\n    elapsed_time = timeit.timeit(visualization, number=1)\n    print(\"Elapsed time: \", round(elapsed_time, 7), \"sec.\")\nif __name__ == \"__main__\":\n    main()",
    "detail": "MY_GISTS.c2e4e8a288.insertion_sort",
    "documentation": {}
  },
  {
    "label": "merge_sort",
    "kind": 2,
    "importPath": "MY_GISTS.c2e4e8a288.merge_sort",
    "description": "MY_GISTS.c2e4e8a288.merge_sort",
    "peekOfCode": "def merge_sort(collection, length, counter):\n    if len(collection) > 1:\n        middle_position = len(collection) // 2\n        left = collection[:middle_position]\n        right = collection[middle_position:]\n        counter = merge_sort(left, length, counter)\n        counter = merge_sort(right, length, counter)\n        left_index, right_index, index = 0, 0, 0\n        while (left_index < len(left)) and (right_index < len(right)):\n            if left[left_index] < right[right_index]:",
    "detail": "MY_GISTS.c2e4e8a288.merge_sort",
    "documentation": {}
  },
  {
    "label": "visualization",
    "kind": 2,
    "importPath": "MY_GISTS.c2e4e8a288.merge_sort",
    "description": "MY_GISTS.c2e4e8a288.merge_sort",
    "peekOfCode": "def visualization():\n    counter = 0\n    length = 10\n    collection = [randint(0, length) for _ in range(length)]\n    print(\"Initial list:\", collection)\n    print(\"Visualization of algorithm work.\")\n    collection, counter = merge_sort(collection, length, counter)\n    print(\"Final list:\", collection)\n    print(\"Total numbers of passages:\", counter)\ndef main():",
    "detail": "MY_GISTS.c2e4e8a288.merge_sort",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "MY_GISTS.c2e4e8a288.merge_sort",
    "description": "MY_GISTS.c2e4e8a288.merge_sort",
    "peekOfCode": "def main():\n    elapsed_time = timeit.timeit(visualization, number=1)\n    print(\"Elapsed time: \", round(elapsed_time, 7), \"sec.\")\nif __name__ == \"__main__\":\n    main()",
    "detail": "MY_GISTS.c2e4e8a288.merge_sort",
    "documentation": {}
  },
  {
    "label": "partition",
    "kind": 2,
    "importPath": "MY_GISTS.c2e4e8a288.quick_sort",
    "description": "MY_GISTS.c2e4e8a288.quick_sort",
    "peekOfCode": "def partition(collection, left, right):\n    pivot = collection[right]\n    j = left\n    for i in range(left, right):\n        if collection[i] <= pivot:\n            collection[i], collection[j] = collection[j], collection[i]\n            j += 1\n    collection[right], collection[j] = collection[j], collection[right]\n    return j\ndef quickSort(collection, left, right, counter):",
    "detail": "MY_GISTS.c2e4e8a288.quick_sort",
    "documentation": {}
  },
  {
    "label": "quickSort",
    "kind": 2,
    "importPath": "MY_GISTS.c2e4e8a288.quick_sort",
    "description": "MY_GISTS.c2e4e8a288.quick_sort",
    "peekOfCode": "def quickSort(collection, left, right, counter):\n    if left < right:\n        counter += 1\n        print(\"Step %i -->\" % counter, collection)\n        mainstay = partition(collection, left, right)\n        collection, counter = quickSort(collection, left, mainstay - 1, counter)\n        collection, counter = quickSort(collection, mainstay + 1, right, counter)\n    return collection, counter\ndef visualization():\n    counter = 0",
    "detail": "MY_GISTS.c2e4e8a288.quick_sort",
    "documentation": {}
  },
  {
    "label": "visualization",
    "kind": 2,
    "importPath": "MY_GISTS.c2e4e8a288.quick_sort",
    "description": "MY_GISTS.c2e4e8a288.quick_sort",
    "peekOfCode": "def visualization():\n    counter = 0\n    length = 10\n    collection = [randint(0, length) for _ in range(length)]\n    print(\"Initial list:\", collection)\n    print(\"Visualization of algorithm work.\")\n    collection, counter = quickSort(collection, 0, length - 1, counter)\n    print(\"Final list:\", collection)\n    print(\"Total numbers of passages:\", counter)\ndef main():",
    "detail": "MY_GISTS.c2e4e8a288.quick_sort",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "MY_GISTS.c2e4e8a288.quick_sort",
    "description": "MY_GISTS.c2e4e8a288.quick_sort",
    "peekOfCode": "def main():\n    elapsedTime = timeit.timeit(visualization, number=1)\n    print(\"Elapsed time: \", round(elapsedTime, 7), \"sec.\")\nif __name__ == \"__main__\":\n    main()",
    "detail": "MY_GISTS.c2e4e8a288.quick_sort",
    "documentation": {}
  },
  {
    "label": "selection_sort",
    "kind": 2,
    "importPath": "MY_GISTS.c2e4e8a288.selection_sort",
    "description": "MY_GISTS.c2e4e8a288.selection_sort",
    "peekOfCode": "def selection_sort(collection):\n    counter = 0\n    length = len(collection)\n    for i in range(0, length - 1):\n        j = i\n        for index in range(i + 1, length):\n            if collection[index] < collection[j]:\n                j = index\n        collection[j], collection[i] = collection[i], collection[j]\n        counter += 1",
    "detail": "MY_GISTS.c2e4e8a288.selection_sort",
    "documentation": {}
  },
  {
    "label": "visualization",
    "kind": 2,
    "importPath": "MY_GISTS.c2e4e8a288.selection_sort",
    "description": "MY_GISTS.c2e4e8a288.selection_sort",
    "peekOfCode": "def visualization():\n    length = 10\n    collection = [randint(0, length) for _ in range(length)]\n    print(\"Initial list:\", collection)\n    print(\"Visualization of algorithm work.\")\n    collection, counter = selection_sort(collection)\n    print(\"Final list:\", collection)\n    print(\"Total numbers of passages:\", counter)\ndef main():\n    elapsed_time = timeit.timeit(visualization, number=1)",
    "detail": "MY_GISTS.c2e4e8a288.selection_sort",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "MY_GISTS.c2e4e8a288.selection_sort",
    "description": "MY_GISTS.c2e4e8a288.selection_sort",
    "peekOfCode": "def main():\n    elapsed_time = timeit.timeit(visualization, number=1)\n    print(\"Elapsed time: \", round(elapsed_time, 7), \"sec.\")\nif __name__ == \"__main__\":\n    main()",
    "detail": "MY_GISTS.c2e4e8a288.selection_sort",
    "documentation": {}
  },
  {
    "label": "shell_sort",
    "kind": 2,
    "importPath": "MY_GISTS.c2e4e8a288.shell_sort",
    "description": "MY_GISTS.c2e4e8a288.shell_sort",
    "peekOfCode": "def shell_sort(collection):\n    length = len(collection)\n    middle, counter = length // 2, 0\n    while middle > 0:\n        for i in range(0, length - middle):\n            j = i\n            while (j >= 0) and (collection[j] > collection[j + middle]):\n                temp = collection[j]\n                collection[j] = collection[j + middle]\n                collection[j + middle] = temp",
    "detail": "MY_GISTS.c2e4e8a288.shell_sort",
    "documentation": {}
  },
  {
    "label": "visualization",
    "kind": 2,
    "importPath": "MY_GISTS.c2e4e8a288.shell_sort",
    "description": "MY_GISTS.c2e4e8a288.shell_sort",
    "peekOfCode": "def visualization():\n    length = 10\n    collection = [randint(0, length) for _ in range(length)]\n    print(\"Initial list:\", collection)\n    print(\"Visualization of algorithm work.\")\n    collection, counter = shell_sort(collection)\n    print(\"Final list:\", collection)\n    print(\"Total numbers of passages:\", counter)\ndef main():\n    elapsed_time = timeit.timeit(visualization, number=1)",
    "detail": "MY_GISTS.c2e4e8a288.shell_sort",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "MY_GISTS.c2e4e8a288.shell_sort",
    "description": "MY_GISTS.c2e4e8a288.shell_sort",
    "peekOfCode": "def main():\n    elapsed_time = timeit.timeit(visualization, number=1)\n    print(\"Elapsed time: \", round(elapsed_time, 7), \"sec.\")\nif __name__ == \"__main__\":\n    main()",
    "detail": "MY_GISTS.c2e4e8a288.shell_sort",
    "documentation": {}
  },
  {
    "label": "stooge_sort",
    "kind": 2,
    "importPath": "MY_GISTS.c2e4e8a288.stooge_sort",
    "description": "MY_GISTS.c2e4e8a288.stooge_sort",
    "peekOfCode": "def stooge_sort(collection, left, right, counter):\n    if left >= right:\n        return\n    if collection[right] < collection[left]:\n        collection[left], collection[right] = collection[right], collection[left]\n        counter += 1\n        print(\"Step %i -->\" % counter, collection)\n    if (right - left + 1) > 2:\n        list_part = (right - left + 1) // 3\n        counter = stooge_sort(collection, left, right - list_part, counter)",
    "detail": "MY_GISTS.c2e4e8a288.stooge_sort",
    "documentation": {}
  },
  {
    "label": "visualization",
    "kind": 2,
    "importPath": "MY_GISTS.c2e4e8a288.stooge_sort",
    "description": "MY_GISTS.c2e4e8a288.stooge_sort",
    "peekOfCode": "def visualization():\n    counter = 0\n    length_list = 10\n    collection = [randint(0, length_list) for _ in range(length_list)]\n    print(\"Initial list:\", collection)\n    print(\"Visualization of algorithm work.\")\n    counter = stooge_sort(collection, 0, length_list - 1, counter)\n    print(\"Final list:\", collection)\n    print(\"Total numbers of passages:\", counter)\ndef main():",
    "detail": "MY_GISTS.c2e4e8a288.stooge_sort",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "MY_GISTS.c2e4e8a288.stooge_sort",
    "description": "MY_GISTS.c2e4e8a288.stooge_sort",
    "peekOfCode": "def main():\n    elapsed_time = timeit.timeit(visualization, number=1)\n    print(\"Elapsed time: \", round(elapsed_time, 7), \"sec.\")\nif __name__ == \"__main__\":\n    main()",
    "detail": "MY_GISTS.c2e4e8a288.stooge_sort",
    "documentation": {}
  },
  {
    "label": "process_dir",
    "kind": 2,
    "importPath": "MY_GISTS.c666c5f78b.dir2html",
    "description": "MY_GISTS.c666c5f78b.dir2html",
    "peekOfCode": "def process_dir(top_dir, opts):\n    glob_patt = opts.filter or '*'\n    path_top_dir: Path\n    path_top_dir = Path(top_dir)\n    index_file = None\n    index_path = Path(path_top_dir, opts.output_file)\n    if opts.verbose:\n        print(f'Traversing dir {path_top_dir.absolute()}')\n    try:\n        index_file = open(index_path, 'w')",
    "detail": "MY_GISTS.c666c5f78b.dir2html",
    "documentation": {}
  },
  {
    "label": "pretty_size",
    "kind": 2,
    "importPath": "MY_GISTS.c666c5f78b.dir2html",
    "description": "MY_GISTS.c666c5f78b.dir2html",
    "peekOfCode": "def pretty_size(bytes, units=UNITS_MAPPING):\n    \"\"\"Human-readable file sizes.\n    ripped from https://pypi.python.org/pypi/hurry.filesize/\n    \"\"\"\n    for factor, suffix in units:\n        if bytes >= factor:\n            break\n    amount = int(bytes / factor)\n    if isinstance(suffix, tuple):\n        singular, multiple = suffix",
    "detail": "MY_GISTS.c666c5f78b.dir2html",
    "documentation": {}
  },
  {
    "label": "DEFAULT_OUTPUT_FILE",
    "kind": 5,
    "importPath": "MY_GISTS.c666c5f78b.dir2html",
    "description": "MY_GISTS.c666c5f78b.dir2html",
    "peekOfCode": "DEFAULT_OUTPUT_FILE = 'sitemap.html'\ndef process_dir(top_dir, opts):\n    glob_patt = opts.filter or '*'\n    path_top_dir: Path\n    path_top_dir = Path(top_dir)\n    index_file = None\n    index_path = Path(path_top_dir, opts.output_file)\n    if opts.verbose:\n        print(f'Traversing dir {path_top_dir.absolute()}')\n    try:",
    "detail": "MY_GISTS.c666c5f78b.dir2html",
    "documentation": {}
  },
  {
    "label": "UNITS_MAPPING",
    "kind": 5,
    "importPath": "MY_GISTS.c666c5f78b.dir2html",
    "description": "MY_GISTS.c666c5f78b.dir2html",
    "peekOfCode": "UNITS_MAPPING = [\n    (1024 ** 5, ' PB'),\n    (1024 ** 4, ' TB'),\n    (1024 ** 3, ' GB'),\n    (1024 ** 2, ' MB'),\n    (1024 ** 1, ' KB'),\n    (1024 ** 0, (' byte', ' bytes')),\n]\ndef pretty_size(bytes, units=UNITS_MAPPING):\n    \"\"\"Human-readable file sizes.",
    "detail": "MY_GISTS.c666c5f78b.dir2html",
    "documentation": {}
  },
  {
    "label": "dtw",
    "kind": 2,
    "importPath": "MY_GISTS.c9a43c8b88.dynamic-time-warping",
    "description": "MY_GISTS.c9a43c8b88.dynamic-time-warping",
    "peekOfCode": "def dtw(x, y, dist, warp=1, w=inf, s=1.0):\n    \"\"\"\n    Computes Dynamic Time Warping (DTW) of two sequences.\n    :param array x: N1*M array\n    :param array y: N2*M array\n    :param func dist: distance used as cost measure\n    :param int warp: how many shifts are computed.\n    :param int w: window size limiting the maximal distance between indices of matched entries |i,j|.\n    :param float s: weight applied on off-diagonal moves of the path. As s gets larger, the warping path is increasingly biased towards the diagonal\n    Returns the minimum distance, the cost matrix, the accumulated cost matrix, and the wrap path.",
    "detail": "MY_GISTS.c9a43c8b88.dynamic-time-warping",
    "documentation": {}
  },
  {
    "label": "accelerated_dtw",
    "kind": 2,
    "importPath": "MY_GISTS.c9a43c8b88.dynamic-time-warping",
    "description": "MY_GISTS.c9a43c8b88.dynamic-time-warping",
    "peekOfCode": "def accelerated_dtw(x, y, dist, warp=1):\n    \"\"\"\n    Computes Dynamic Time Warping (DTW) of two sequences in a faster way.\n    Instead of iterating through each element and calculating each distance,\n    this uses the cdist function from scipy (https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.distance.cdist.html)\n    :param array x: N1*M array\n    :param array y: N2*M array\n    :param string or func dist: distance parameter for cdist. When string is given, cdist uses optimized functions for the distance metrics.\n    If a string is passed, the distance function can be 'braycurtis', 'canberra', 'chebyshev', 'cityblock', 'correlation', 'cosine', 'dice', 'euclidean', 'hamming', 'jaccard', 'kulsinski', 'mahalanobis', 'matching', 'minkowski', 'rogerstanimoto', 'russellrao', 'seuclidean', 'sokalmichener', 'sokalsneath', 'sqeuclidean', 'wminkowski', 'yule'.\n    :param int warp: how many shifts are computed.",
    "detail": "MY_GISTS.c9a43c8b88.dynamic-time-warping",
    "documentation": {}
  },
  {
    "label": "stack",
    "kind": 6,
    "importPath": "MY_GISTS.cc65371ece.stack",
    "description": "MY_GISTS.cc65371ece.stack",
    "peekOfCode": "class stack:\n  # by default pass in [] as inivial value\n  def __init__(self,initialVal=[]):\n    self.stack = initialVal\n  # push is to append to the tail of the list\n  def push(self,ele):\n    self.stack.append(ele)\n    return self.stack\n  # pop is to remove from the tail of the list\n  def pop(self):",
    "detail": "MY_GISTS.cc65371ece.stack",
    "documentation": {}
  },
  {
    "label": "random_choice",
    "kind": 2,
    "importPath": "MY_GISTS.cd676f9476.rock-paper-scissors",
    "description": "MY_GISTS.cd676f9476.rock-paper-scissors",
    "peekOfCode": "def random_choice(options=[\"rock\", \"paper\", \"scissors\"]):\n    return random.choice(options)\ndef determine_winner(choice1, choice2):\n    \"\"\"\n    Determines the winning choice between two choices from selectable options: \"rock\", \"paper\", or \"scissors\".\n    Returns the winning choice (e.g. \"paper\"), or None if there is a tie.\n    Example: determine_winner(\"rock\", \"paper\")\n    \"\"\"\n    winners = {\n        \"rock\":{",
    "detail": "MY_GISTS.cd676f9476.rock-paper-scissors",
    "documentation": {}
  },
  {
    "label": "determine_winner",
    "kind": 2,
    "importPath": "MY_GISTS.cd676f9476.rock-paper-scissors",
    "description": "MY_GISTS.cd676f9476.rock-paper-scissors",
    "peekOfCode": "def determine_winner(choice1, choice2):\n    \"\"\"\n    Determines the winning choice between two choices from selectable options: \"rock\", \"paper\", or \"scissors\".\n    Returns the winning choice (e.g. \"paper\"), or None if there is a tie.\n    Example: determine_winner(\"rock\", \"paper\")\n    \"\"\"\n    winners = {\n        \"rock\":{\n            \"rock\": None, # represents a tie\n            \"paper\": \"paper\",",
    "detail": "MY_GISTS.cd676f9476.rock-paper-scissors",
    "documentation": {}
  },
  {
    "label": "GUI_WINDOW_TITLE",
    "kind": 5,
    "importPath": "MY_GISTS.cd676f9476.rock-paper-scissors",
    "description": "MY_GISTS.cd676f9476.rock-paper-scissors",
    "peekOfCode": "GUI_WINDOW_TITLE = \"Rock-Paper-Scissors\"\nWELCOME_MESSAGE = \"Hi. Welcome to my Rock-Paper-Scissors game!\"\nGUI_PROMPT_MESSAGE = \"Please choose an option from the dropdown:\"\nWIN_MESSAGE = \"Congratulations, you won!\"\nLOSE_MESSAGE = \"Oh, the computer won. It's ok.\"\nTIE_MESSAGE = \"Oh, it's a tie.\"\ndef random_choice(options=[\"rock\", \"paper\", \"scissors\"]):\n    return random.choice(options)\ndef determine_winner(choice1, choice2):\n    \"\"\"",
    "detail": "MY_GISTS.cd676f9476.rock-paper-scissors",
    "documentation": {}
  },
  {
    "label": "WELCOME_MESSAGE",
    "kind": 5,
    "importPath": "MY_GISTS.cd676f9476.rock-paper-scissors",
    "description": "MY_GISTS.cd676f9476.rock-paper-scissors",
    "peekOfCode": "WELCOME_MESSAGE = \"Hi. Welcome to my Rock-Paper-Scissors game!\"\nGUI_PROMPT_MESSAGE = \"Please choose an option from the dropdown:\"\nWIN_MESSAGE = \"Congratulations, you won!\"\nLOSE_MESSAGE = \"Oh, the computer won. It's ok.\"\nTIE_MESSAGE = \"Oh, it's a tie.\"\ndef random_choice(options=[\"rock\", \"paper\", \"scissors\"]):\n    return random.choice(options)\ndef determine_winner(choice1, choice2):\n    \"\"\"\n    Determines the winning choice between two choices from selectable options: \"rock\", \"paper\", or \"scissors\".",
    "detail": "MY_GISTS.cd676f9476.rock-paper-scissors",
    "documentation": {}
  },
  {
    "label": "GUI_PROMPT_MESSAGE",
    "kind": 5,
    "importPath": "MY_GISTS.cd676f9476.rock-paper-scissors",
    "description": "MY_GISTS.cd676f9476.rock-paper-scissors",
    "peekOfCode": "GUI_PROMPT_MESSAGE = \"Please choose an option from the dropdown:\"\nWIN_MESSAGE = \"Congratulations, you won!\"\nLOSE_MESSAGE = \"Oh, the computer won. It's ok.\"\nTIE_MESSAGE = \"Oh, it's a tie.\"\ndef random_choice(options=[\"rock\", \"paper\", \"scissors\"]):\n    return random.choice(options)\ndef determine_winner(choice1, choice2):\n    \"\"\"\n    Determines the winning choice between two choices from selectable options: \"rock\", \"paper\", or \"scissors\".\n    Returns the winning choice (e.g. \"paper\"), or None if there is a tie.",
    "detail": "MY_GISTS.cd676f9476.rock-paper-scissors",
    "documentation": {}
  },
  {
    "label": "WIN_MESSAGE",
    "kind": 5,
    "importPath": "MY_GISTS.cd676f9476.rock-paper-scissors",
    "description": "MY_GISTS.cd676f9476.rock-paper-scissors",
    "peekOfCode": "WIN_MESSAGE = \"Congratulations, you won!\"\nLOSE_MESSAGE = \"Oh, the computer won. It's ok.\"\nTIE_MESSAGE = \"Oh, it's a tie.\"\ndef random_choice(options=[\"rock\", \"paper\", \"scissors\"]):\n    return random.choice(options)\ndef determine_winner(choice1, choice2):\n    \"\"\"\n    Determines the winning choice between two choices from selectable options: \"rock\", \"paper\", or \"scissors\".\n    Returns the winning choice (e.g. \"paper\"), or None if there is a tie.\n    Example: determine_winner(\"rock\", \"paper\")",
    "detail": "MY_GISTS.cd676f9476.rock-paper-scissors",
    "documentation": {}
  },
  {
    "label": "LOSE_MESSAGE",
    "kind": 5,
    "importPath": "MY_GISTS.cd676f9476.rock-paper-scissors",
    "description": "MY_GISTS.cd676f9476.rock-paper-scissors",
    "peekOfCode": "LOSE_MESSAGE = \"Oh, the computer won. It's ok.\"\nTIE_MESSAGE = \"Oh, it's a tie.\"\ndef random_choice(options=[\"rock\", \"paper\", \"scissors\"]):\n    return random.choice(options)\ndef determine_winner(choice1, choice2):\n    \"\"\"\n    Determines the winning choice between two choices from selectable options: \"rock\", \"paper\", or \"scissors\".\n    Returns the winning choice (e.g. \"paper\"), or None if there is a tie.\n    Example: determine_winner(\"rock\", \"paper\")\n    \"\"\"",
    "detail": "MY_GISTS.cd676f9476.rock-paper-scissors",
    "documentation": {}
  },
  {
    "label": "TIE_MESSAGE",
    "kind": 5,
    "importPath": "MY_GISTS.cd676f9476.rock-paper-scissors",
    "description": "MY_GISTS.cd676f9476.rock-paper-scissors",
    "peekOfCode": "TIE_MESSAGE = \"Oh, it's a tie.\"\ndef random_choice(options=[\"rock\", \"paper\", \"scissors\"]):\n    return random.choice(options)\ndef determine_winner(choice1, choice2):\n    \"\"\"\n    Determines the winning choice between two choices from selectable options: \"rock\", \"paper\", or \"scissors\".\n    Returns the winning choice (e.g. \"paper\"), or None if there is a tie.\n    Example: determine_winner(\"rock\", \"paper\")\n    \"\"\"\n    winners = {",
    "detail": "MY_GISTS.cd676f9476.rock-paper-scissors",
    "documentation": {}
  },
  {
    "label": "Dict",
    "kind": 6,
    "importPath": "MY_GISTS.d01e75f863.hash",
    "description": "MY_GISTS.d01e75f863.hash",
    "peekOfCode": "class Dict:\n    def __init__(self, capacity=8):\n        self.storage = [None] * capacity        \n        self.capacity = capacity\n        self.item_count = 0\n​\n    def hash(self, string):\n        bytes = string.encode()\n        sum = 0\n        for byte in bytes:",
    "detail": "MY_GISTS.d01e75f863.hash",
    "documentation": {}
  },
  {
    "label": "d",
    "kind": 5,
    "importPath": "MY_GISTS.d01e75f863.hash",
    "description": "MY_GISTS.d01e75f863.hash",
    "peekOfCode": "d = Dict(8)\n​\nd['apple'] = 'is a fruit'\nd['banana'] = 'is also fruit'\nd['cucumber'] = 'is a vegetable'\nd['peach'] = 'This is definitely not a banana'\nd['pineapple'] = 'is tasty'\nprint(d.storage)\nd['papaya'] = 'is tropical'\nprint(d.storage)",
    "detail": "MY_GISTS.d01e75f863.hash",
    "documentation": {}
  },
  {
    "label": "d['apple']",
    "kind": 5,
    "importPath": "MY_GISTS.d01e75f863.hash",
    "description": "MY_GISTS.d01e75f863.hash",
    "peekOfCode": "d['apple'] = 'is a fruit'\nd['banana'] = 'is also fruit'\nd['cucumber'] = 'is a vegetable'\nd['peach'] = 'This is definitely not a banana'\nd['pineapple'] = 'is tasty'\nprint(d.storage)\nd['papaya'] = 'is tropical'\nprint(d.storage)\n​",
    "detail": "MY_GISTS.d01e75f863.hash",
    "documentation": {}
  },
  {
    "label": "d['banana']",
    "kind": 5,
    "importPath": "MY_GISTS.d01e75f863.hash",
    "description": "MY_GISTS.d01e75f863.hash",
    "peekOfCode": "d['banana'] = 'is also fruit'\nd['cucumber'] = 'is a vegetable'\nd['peach'] = 'This is definitely not a banana'\nd['pineapple'] = 'is tasty'\nprint(d.storage)\nd['papaya'] = 'is tropical'\nprint(d.storage)\n​",
    "detail": "MY_GISTS.d01e75f863.hash",
    "documentation": {}
  },
  {
    "label": "d['cucumber']",
    "kind": 5,
    "importPath": "MY_GISTS.d01e75f863.hash",
    "description": "MY_GISTS.d01e75f863.hash",
    "peekOfCode": "d['cucumber'] = 'is a vegetable'\nd['peach'] = 'This is definitely not a banana'\nd['pineapple'] = 'is tasty'\nprint(d.storage)\nd['papaya'] = 'is tropical'\nprint(d.storage)\n​",
    "detail": "MY_GISTS.d01e75f863.hash",
    "documentation": {}
  },
  {
    "label": "d['peach']",
    "kind": 5,
    "importPath": "MY_GISTS.d01e75f863.hash",
    "description": "MY_GISTS.d01e75f863.hash",
    "peekOfCode": "d['peach'] = 'This is definitely not a banana'\nd['pineapple'] = 'is tasty'\nprint(d.storage)\nd['papaya'] = 'is tropical'\nprint(d.storage)\n​",
    "detail": "MY_GISTS.d01e75f863.hash",
    "documentation": {}
  },
  {
    "label": "d['pineapple']",
    "kind": 5,
    "importPath": "MY_GISTS.d01e75f863.hash",
    "description": "MY_GISTS.d01e75f863.hash",
    "peekOfCode": "d['pineapple'] = 'is tasty'\nprint(d.storage)\nd['papaya'] = 'is tropical'\nprint(d.storage)\n​",
    "detail": "MY_GISTS.d01e75f863.hash",
    "documentation": {}
  },
  {
    "label": "d['papaya']",
    "kind": 5,
    "importPath": "MY_GISTS.d01e75f863.hash",
    "description": "MY_GISTS.d01e75f863.hash",
    "peekOfCode": "d['papaya'] = 'is tropical'\nprint(d.storage)\n​",
    "detail": "MY_GISTS.d01e75f863.hash",
    "documentation": {}
  },
  {
    "label": "reverse",
    "kind": 2,
    "importPath": "MY_GISTS.d46170d021.best-way",
    "description": "MY_GISTS.d46170d021.best-way",
    "peekOfCode": "def reverse(string):\n    string = string[::-1]\n    return string",
    "detail": "MY_GISTS.d46170d021.best-way",
    "documentation": {}
  },
  {
    "label": "reverse",
    "kind": 2,
    "importPath": "MY_GISTS.d46170d021.not-great-way",
    "description": "MY_GISTS.d46170d021.not-great-way",
    "peekOfCode": "def reverse(string):\n    string = \"\".join(reversed(string))\n    return string",
    "detail": "MY_GISTS.d46170d021.not-great-way",
    "documentation": {}
  },
  {
    "label": "createStack",
    "kind": 2,
    "importPath": "MY_GISTS.d46170d021.rev-str-stack",
    "description": "MY_GISTS.d46170d021.rev-str-stack",
    "peekOfCode": "def createStack():\n    stack=[]\n    return stack\n# Function to determine the size of the stack\ndef size(stack):\n    return len(stack)\n# Stack is empty if the size is 0\ndef isEmpty(stack):\n    if size(stack) == 0:\n        return true",
    "detail": "MY_GISTS.d46170d021.rev-str-stack",
    "documentation": {}
  },
  {
    "label": "size",
    "kind": 2,
    "importPath": "MY_GISTS.d46170d021.rev-str-stack",
    "description": "MY_GISTS.d46170d021.rev-str-stack",
    "peekOfCode": "def size(stack):\n    return len(stack)\n# Stack is empty if the size is 0\ndef isEmpty(stack):\n    if size(stack) == 0:\n        return true\n# Function to add an item to stack . It\n# increases size by 1    \ndef push(stack,item):\n    stack.append(item)",
    "detail": "MY_GISTS.d46170d021.rev-str-stack",
    "documentation": {}
  },
  {
    "label": "isEmpty",
    "kind": 2,
    "importPath": "MY_GISTS.d46170d021.rev-str-stack",
    "description": "MY_GISTS.d46170d021.rev-str-stack",
    "peekOfCode": "def isEmpty(stack):\n    if size(stack) == 0:\n        return true\n# Function to add an item to stack . It\n# increases size by 1    \ndef push(stack,item):\n    stack.append(item)\n# Function to remove an item from stack. \n# It decreases size by 1\ndef pop(stack):",
    "detail": "MY_GISTS.d46170d021.rev-str-stack",
    "documentation": {}
  },
  {
    "label": "push",
    "kind": 2,
    "importPath": "MY_GISTS.d46170d021.rev-str-stack",
    "description": "MY_GISTS.d46170d021.rev-str-stack",
    "peekOfCode": "def push(stack,item):\n    stack.append(item)\n# Function to remove an item from stack. \n# It decreases size by 1\ndef pop(stack):\n    if isEmpty(stack): return\n    return stack.pop()\n# A stack based function to reverse a string\ndef reverse(string):\n    n = len(string)",
    "detail": "MY_GISTS.d46170d021.rev-str-stack",
    "documentation": {}
  },
  {
    "label": "pop",
    "kind": 2,
    "importPath": "MY_GISTS.d46170d021.rev-str-stack",
    "description": "MY_GISTS.d46170d021.rev-str-stack",
    "peekOfCode": "def pop(stack):\n    if isEmpty(stack): return\n    return stack.pop()\n# A stack based function to reverse a string\ndef reverse(string):\n    n = len(string)\n    # Create a empty stack\n    stack = createStack()\n    # Push all characters of string to stack\n    for i in range(0,n,1):",
    "detail": "MY_GISTS.d46170d021.rev-str-stack",
    "documentation": {}
  },
  {
    "label": "reverse",
    "kind": 2,
    "importPath": "MY_GISTS.d46170d021.rev-str-stack",
    "description": "MY_GISTS.d46170d021.rev-str-stack",
    "peekOfCode": "def reverse(string):\n    n = len(string)\n    # Create a empty stack\n    stack = createStack()\n    # Push all characters of string to stack\n    for i in range(0,n,1):\n        push(stack,string[i])\n    # Making the string empty since all\n    # characters are saved in stack    \n    string=\"\"",
    "detail": "MY_GISTS.d46170d021.rev-str-stack",
    "documentation": {}
  },
  {
    "label": "reverse",
    "kind": 2,
    "importPath": "MY_GISTS.d46170d021.rev1",
    "description": "MY_GISTS.d46170d021.rev1",
    "peekOfCode": "def reverse(s):\n    if len(s) == 0:\n        return s\n    else:\n        return reverse(s[1:]) + s[0]",
    "detail": "MY_GISTS.d46170d021.rev1",
    "documentation": {}
  },
  {
    "label": "reverse",
    "kind": 2,
    "importPath": "MY_GISTS.d46170d021.reverse",
    "description": "MY_GISTS.d46170d021.reverse",
    "peekOfCode": "def reverse(s):\n  str = \"\"\n  for i in s:\n    str = i + str\n  return str",
    "detail": "MY_GISTS.d46170d021.reverse",
    "documentation": {}
  },
  {
    "label": "assignHoles",
    "kind": 2,
    "importPath": "MY_GISTS.d7ce83eba7.prac13",
    "description": "MY_GISTS.d7ce83eba7.prac13",
    "peekOfCode": "def assignHoles(mice, holes):\n    max = -sys.maxsize\n    if len(mice) != len(holes):\n        return -1\n    else:\n        mice.sort()\n        holes.sort()\n        for i in range(0, len(mice) - 1):\n            if max < abs(mice[i] - holes[i]):\n                max = abs(mice[i] - holes[i])",
    "detail": "MY_GISTS.d7ce83eba7.prac13",
    "documentation": {}
  },
  {
    "label": "memoize",
    "kind": 2,
    "importPath": "MY_GISTS.dcbda484b2.memoize",
    "description": "MY_GISTS.dcbda484b2.memoize",
    "peekOfCode": "def memoize(func):\n    cache = {}\n    def wrapped(*args, **kwargs):\n        key = (tuple(args), tuple(kwargs.items()))\n        if key not in cache:\n            cache[key] = func(*args, **kwargs)\n        return cache[key]\n    return wrapped",
    "detail": "MY_GISTS.dcbda484b2.memoize",
    "documentation": {}
  },
  {
    "label": "Human",
    "kind": 6,
    "importPath": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "description": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "peekOfCode": "class Human:\n    # A class attribute. It is shared by all instances of this class\n    species = \"H. sapiens\"\n    # Basic initializer, this is called when this class is instantiated.\n    # Note that the double leading and trailing underscores denote objects\n    # or attributes that are used by Python but that live in user-controlled\n    # namespaces. Methods(or objects or attributes) like: __init__, __str__,\n    # __repr__ etc. are called special methods (or sometimes called dunder methods)\n    # You should not invent such names on your own.\n    def __init__(self, name):",
    "detail": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "Superhero",
    "kind": 6,
    "importPath": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "description": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "peekOfCode": "class Superhero(Human):\n    # If the child class should inherit all of the parent's definitions without\n    # any modifications, you can just use the \"pass\" keyword (and nothing else)\n    # but in this case it is commented out to allow for a unique child class:\n    # pass\n    # Child classes can override their parents' attributes\n    species = \"Superhuman\"\n    # Children automatically inherit their parent class's constructor including\n    # its arguments, but can also define additional arguments or definitions\n    # and override its methods such as the class constructor.",
    "detail": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "Bat",
    "kind": 6,
    "importPath": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "description": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "peekOfCode": "class Bat:\n    species = \"Baty\"\n    def __init__(self, can_fly=True):\n        self.fly = can_fly\n    # This class also has a say method\n    def say(self, msg):\n        msg = \"... ... ...\"\n        return msg\n    # And its own method as well\n    def sonar(self):",
    "detail": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "Batman",
    "kind": 6,
    "importPath": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "description": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "peekOfCode": "class Batman(Superhero, Bat):\n    def __init__(self, *args, **kwargs):\n        # Typically to inherit attributes you have to call super:\n        # super(Batman, self).__init__(*args, **kwargs)\n        # However we are dealing with multiple inheritance here, and super()\n        # only works with the next base class in the MRO list.\n        # So instead we explicitly call __init__ for all ancestors.\n        # The use of *args and **kwargs allows for a clean way to pass arguments,\n        # with each parent \"peeling a layer of the onion\".\n        Superhero.__init__(",
    "detail": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "add",
    "kind": 2,
    "importPath": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "description": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "peekOfCode": "def add(x, y):\n    print(\"x is {} and y is {}\".format(x, y))\n    return x + y  # Return values with a return statement\n# Calling functions with parameters\nadd(5, 6)  # => prints out \"x is 5 and y is 6\" and returns 11\n# Another way to call functions is with keyword arguments\nadd(y=6, x=5)  # Keyword arguments can arrive in any order.\n# You can define functions that take a variable number of\n# positional arguments\ndef varargs(*args):",
    "detail": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "varargs",
    "kind": 2,
    "importPath": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "description": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "peekOfCode": "def varargs(*args):\n    return args\nvarargs(1, 2, 3)  # => (1, 2, 3)\n# You can define functions that take a variable number of\n# keyword arguments, as well\ndef keyword_args(**kwargs):\n    return kwargs\n# Let's call it to see what happens\nkeyword_args(big=\"foot\", loch=\"ness\")  # => {\"big\": \"foot\", \"loch\": \"ness\"}\n# You can do both at once, if you like",
    "detail": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "keyword_args",
    "kind": 2,
    "importPath": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "description": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "peekOfCode": "def keyword_args(**kwargs):\n    return kwargs\n# Let's call it to see what happens\nkeyword_args(big=\"foot\", loch=\"ness\")  # => {\"big\": \"foot\", \"loch\": \"ness\"}\n# You can do both at once, if you like\ndef all_the_args(*args, **kwargs):\n    print(args)\n    print(kwargs)\n\"\"\"\nall_the_args(1, 2, a=3, b=4) prints:",
    "detail": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "all_the_args",
    "kind": 2,
    "importPath": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "description": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "peekOfCode": "def all_the_args(*args, **kwargs):\n    print(args)\n    print(kwargs)\n\"\"\"\nall_the_args(1, 2, a=3, b=4) prints:\n    (1, 2)\n    {\"a\": 3, \"b\": 4}\n\"\"\"\n# When calling functions, you can do the opposite of args/kwargs!\n# Use * to expand tuples and use ** to expand kwargs.",
    "detail": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "swap",
    "kind": 2,
    "importPath": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "description": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "peekOfCode": "def swap(x, y):\n    return y, x  # Return multiple values as a tuple without the parenthesis.\n    # (Note: parenthesis have been excluded but can be included)\nx = 1\ny = 2\nx, y = swap(x, y)  # => x = 2, y = 1\n# (x, y) = swap(x,y)  # Again parenthesis have been excluded but can be included.\n# Function Scope\nx = 5\ndef set_x(num):",
    "detail": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "set_x",
    "kind": 2,
    "importPath": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "description": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "peekOfCode": "def set_x(num):\n    # Local var x not the same as global variable x\n    x = num  # => 43\n    print(x)  # => 43\ndef set_global_x(num):\n    global x\n    print(x)  # => 5\n    x = num  # global var x is now set to 6\n    print(x)  # => 6\nset_x(43)",
    "detail": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "set_global_x",
    "kind": 2,
    "importPath": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "description": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "peekOfCode": "def set_global_x(num):\n    global x\n    print(x)  # => 5\n    x = num  # global var x is now set to 6\n    print(x)  # => 6\nset_x(43)\nset_global_x(6)\n# Python has first class functions\ndef create_adder(x):\n    def adder(y):",
    "detail": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "create_adder",
    "kind": 2,
    "importPath": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "description": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "peekOfCode": "def create_adder(x):\n    def adder(y):\n        return x + y\n    return adder\nadd_10 = create_adder(10)\nadd_10(3)  # => 13\n# There are also anonymous functions\n(lambda x: x > 2)(3)  # => True\n(lambda x, y: x ** 2 + y ** 2)(2, 1)  # => 5\n# There are built-in higher order functions",
    "detail": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "double_numbers",
    "kind": 2,
    "importPath": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "description": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "peekOfCode": "def double_numbers(iterable):\n    for i in iterable:\n        yield i + i\n# Generators are memory-efficient because they only load the data needed to\n# process the next value in the iterable. This allows them to perform\n# operations on otherwise prohibitively large value ranges.\n# NOTE: `range` replaces `xrange` in Python 3.\nfor i in double_numbers(range(1, 900000000)):  # `range` is a generator.\n    print(i)\n    if i >= 30:",
    "detail": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "beg",
    "kind": 2,
    "importPath": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "description": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "peekOfCode": "def beg(target_function):\n    @wraps(target_function)\n    def wrapper(*args, **kwargs):\n        msg, say_please = target_function(*args, **kwargs)\n        if say_please:\n            return \"{} {}\".format(msg, \"Please! I am poor :(\")\n        return msg\n    return wrapper\n@beg\ndef say(say_please=False):",
    "detail": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "say",
    "kind": 2,
    "importPath": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "description": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "peekOfCode": "def say(say_please=False):\n    msg = \"Can you buy me a beer?\"\n    return msg, say_please\nprint(say())  # Can you buy me a beer?\nprint(say(say_please=True))  # Can you buy me a beer? Please! I am poor :(",
    "detail": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "a",
    "kind": 5,
    "importPath": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "description": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "peekOfCode": "a = [1, 2, 3, 4]  # Point a at a new list, [1, 2, 3, 4]\nb = a  # Point b at what a is pointing to\nb is a  # => True, a and b refer to the same object\nb == a  # => True, a's and b's objects are equal\nb = [1, 2, 3, 4]  # Point b at a new list, [1, 2, 3, 4]\nb is a  # => False, a and b do not refer to the same object\nb == a  # => True, a's and b's objects are equal\n# Strings are created with \" or '\n\"This is a string.\"\n\"This is also a string.\"",
    "detail": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "b",
    "kind": 5,
    "importPath": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "description": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "peekOfCode": "b = a  # Point b at what a is pointing to\nb is a  # => True, a and b refer to the same object\nb == a  # => True, a's and b's objects are equal\nb = [1, 2, 3, 4]  # Point b at a new list, [1, 2, 3, 4]\nb is a  # => False, a and b do not refer to the same object\nb == a  # => True, a's and b's objects are equal\n# Strings are created with \" or '\n\"This is a string.\"\n\"This is also a string.\"\n# Strings can be added too! But try not to do this.",
    "detail": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "b",
    "kind": 5,
    "importPath": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "description": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "peekOfCode": "b = [1, 2, 3, 4]  # Point b at a new list, [1, 2, 3, 4]\nb is a  # => False, a and b do not refer to the same object\nb == a  # => True, a's and b's objects are equal\n# Strings are created with \" or '\n\"This is a string.\"\n\"This is also a string.\"\n# Strings can be added too! But try not to do this.\n\"Hello \" + \"world!\"  # => \"Hello world!\"\n# String literals (but not variables) can be concatenated without using '+'\n\"Hello \" \"world!\"  # => \"Hello world!\"",
    "detail": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "name",
    "kind": 5,
    "importPath": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "description": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "peekOfCode": "name = \"Reiko\"\nf\"She said her name is {name}.\"  # => \"She said her name is Reiko\"\n# You can basically put any Python statement inside the braces and it will be output in the string.\nf\"{name} is {len(name)} characters long.\"  # => \"Reiko is 5 characters long.\"\n# None is an object\nNone  # => None\n# Don't use the equality \"==\" symbol to compare objects to None\n# Use \"is\" instead. This checks for equality of object identity.\n\"etc\" is None  # => False\nNone is None  # => True",
    "detail": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "input_string_var",
    "kind": 5,
    "importPath": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "description": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "peekOfCode": "input_string_var = input(\"Enter some data: \")  # Returns the data as a string\n# Note: In earlier versions of Python, input() method was named as raw_input()\n# There are no declarations, only assignments.\n# Convention is to use lower_case_with_underscores\nsome_var = 5\nsome_var  # => 5\n# Accessing a previously unassigned variable is an exception.\n# See Control Flow to learn more about exception handling.\nsome_unknown_var  # Raises a NameError\n# if can be used as an expression",
    "detail": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "some_var",
    "kind": 5,
    "importPath": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "description": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "peekOfCode": "some_var = 5\nsome_var  # => 5\n# Accessing a previously unassigned variable is an exception.\n# See Control Flow to learn more about exception handling.\nsome_unknown_var  # Raises a NameError\n# if can be used as an expression\n# Equivalent of C's '?:' ternary operator\n\"yahoo!\" if 3 > 2 else 2  # => \"yahoo!\"\n# Lists store sequences\nli = []",
    "detail": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "li",
    "kind": 5,
    "importPath": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "description": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "peekOfCode": "li = []\n# You can start with a prefilled list\nother_li = [4, 5, 6]\n# Add stuff to the end of a list with append\nli.append(1)  # li is now [1]\nli.append(2)  # li is now [1, 2]\nli.append(4)  # li is now [1, 2, 4]\nli.append(3)  # li is now [1, 2, 4, 3]\n# Remove from the end with pop\nli.pop()  # => 3 and li is now [1, 2, 4]",
    "detail": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "other_li",
    "kind": 5,
    "importPath": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "description": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "peekOfCode": "other_li = [4, 5, 6]\n# Add stuff to the end of a list with append\nli.append(1)  # li is now [1]\nli.append(2)  # li is now [1, 2]\nli.append(4)  # li is now [1, 2, 4]\nli.append(3)  # li is now [1, 2, 4, 3]\n# Remove from the end with pop\nli.pop()  # => 3 and li is now [1, 2, 4]\n# Let's put it back\nli.append(3)  # li is now [1, 2, 4, 3] again.",
    "detail": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "li2",
    "kind": 5,
    "importPath": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "description": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "peekOfCode": "li2 = li[:]  # => li2 = [1, 2, 4, 3] but (li2 is li) will result in false.\n# Remove arbitrary elements from a list with \"del\"\ndel li[2]  # li is now [1, 2, 3]\n# Remove first occurrence of a value\nli.remove(2)  # li is now [1, 3]\nli.remove(2)  # Raises a ValueError as 2 is not in the list\n# Insert an element at a specific index\nli.insert(1, 2)  # li is now [1, 2, 3] again\n# Get the index of the first item found matching the argument\nli.index(2)  # => 1",
    "detail": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "tup",
    "kind": 5,
    "importPath": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "description": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "peekOfCode": "tup = (1, 2, 3)\ntup[0]  # => 1\ntup[0] = 3  # Raises a TypeError\n# Note that a tuple of length one has to have a comma after the last element but\n# tuples of other lengths, even zero, do not.\ntype((1))  # => <class 'int'>\ntype((1,))  # => <class 'tuple'>\ntype(())  # => <class 'tuple'>\n# You can do most of the list operations on tuples too\nlen(tup)  # => 3",
    "detail": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "tup[0]",
    "kind": 5,
    "importPath": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "description": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "peekOfCode": "tup[0] = 3  # Raises a TypeError\n# Note that a tuple of length one has to have a comma after the last element but\n# tuples of other lengths, even zero, do not.\ntype((1))  # => <class 'int'>\ntype((1,))  # => <class 'tuple'>\ntype(())  # => <class 'tuple'>\n# You can do most of the list operations on tuples too\nlen(tup)  # => 3\ntup + (4, 5, 6)  # => (1, 2, 3, 4, 5, 6)\ntup[:2]  # => (1, 2)",
    "detail": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "empty_dict",
    "kind": 5,
    "importPath": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "description": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "peekOfCode": "empty_dict = {}\n# Here is a prefilled dictionary\nfilled_dict = {\"one\": 1, \"two\": 2, \"three\": 3}\n# Note keys for dictionaries have to be immutable types. This is to ensure that\n# the key can be converted to a constant hash value for quick look-ups.\n# Immutable types include ints, floats, strings, tuples.\ninvalid_dict = {[1, 2, 3]: \"123\"}  # => Raises a TypeError: unhashable type: 'list'\nvalid_dict = {(1, 2, 3): [1, 2, 3]}  # Values can be of any type, however.\n# Look up values with []\nfilled_dict[\"one\"]  # => 1",
    "detail": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "filled_dict",
    "kind": 5,
    "importPath": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "description": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "peekOfCode": "filled_dict = {\"one\": 1, \"two\": 2, \"three\": 3}\n# Note keys for dictionaries have to be immutable types. This is to ensure that\n# the key can be converted to a constant hash value for quick look-ups.\n# Immutable types include ints, floats, strings, tuples.\ninvalid_dict = {[1, 2, 3]: \"123\"}  # => Raises a TypeError: unhashable type: 'list'\nvalid_dict = {(1, 2, 3): [1, 2, 3]}  # Values can be of any type, however.\n# Look up values with []\nfilled_dict[\"one\"]  # => 1\n# Get all keys as an iterable with \"keys()\". We need to wrap the call in list()\n# to turn it into a list. We'll talk about those later.  Note - for Python",
    "detail": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "invalid_dict",
    "kind": 5,
    "importPath": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "description": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "peekOfCode": "invalid_dict = {[1, 2, 3]: \"123\"}  # => Raises a TypeError: unhashable type: 'list'\nvalid_dict = {(1, 2, 3): [1, 2, 3]}  # Values can be of any type, however.\n# Look up values with []\nfilled_dict[\"one\"]  # => 1\n# Get all keys as an iterable with \"keys()\". We need to wrap the call in list()\n# to turn it into a list. We'll talk about those later.  Note - for Python\n# versions <3.7, dictionary key ordering is not guaranteed. Your results might\n# not match the example below exactly. However, as of Python 3.7, dictionary\n# items maintain the order at which they are inserted into the dictionary.\nlist(filled_dict.keys())  # => [\"three\", \"two\", \"one\"] in Python <3.7",
    "detail": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "valid_dict",
    "kind": 5,
    "importPath": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "description": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "peekOfCode": "valid_dict = {(1, 2, 3): [1, 2, 3]}  # Values can be of any type, however.\n# Look up values with []\nfilled_dict[\"one\"]  # => 1\n# Get all keys as an iterable with \"keys()\". We need to wrap the call in list()\n# to turn it into a list. We'll talk about those later.  Note - for Python\n# versions <3.7, dictionary key ordering is not guaranteed. Your results might\n# not match the example below exactly. However, as of Python 3.7, dictionary\n# items maintain the order at which they are inserted into the dictionary.\nlist(filled_dict.keys())  # => [\"three\", \"two\", \"one\"] in Python <3.7\nlist(filled_dict.keys())  # => [\"one\", \"two\", \"three\"] in Python 3.7+",
    "detail": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "filled_dict[\"four\"]",
    "kind": 5,
    "importPath": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "description": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "peekOfCode": "filled_dict[\"four\"] = 4  # another way to add to dict\n# Remove keys from a dictionary with del\ndel filled_dict[\"one\"]  # Removes the key \"one\" from filled dict\n# From Python 3.5 you can also use the additional unpacking options\n{\"a\": 1, **{\"b\": 2}}  # => {'a': 1, 'b': 2}\n{\"a\": 1, **{\"a\": 2}}  # => {'a': 2}\n# Sets store ... well sets\nempty_set = set()\n# Initialize a set with a bunch of values. Yeah, it looks a bit like a dict. Sorry.\nsome_set = {1, 1, 2, 2, 3, 4}  # some_set is now {1, 2, 3, 4}",
    "detail": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "empty_set",
    "kind": 5,
    "importPath": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "description": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "peekOfCode": "empty_set = set()\n# Initialize a set with a bunch of values. Yeah, it looks a bit like a dict. Sorry.\nsome_set = {1, 1, 2, 2, 3, 4}  # some_set is now {1, 2, 3, 4}\n# Similar to keys of a dictionary, elements of a set have to be immutable.\ninvalid_set = {[1], 1}  # => Raises a TypeError: unhashable type: 'list'\nvalid_set = {(1,), 1}\n# Add one more item to the set\nfilled_set = some_set\nfilled_set.add(5)  # filled_set is now {1, 2, 3, 4, 5}\n# Sets do not have duplicate elements",
    "detail": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "some_set",
    "kind": 5,
    "importPath": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "description": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "peekOfCode": "some_set = {1, 1, 2, 2, 3, 4}  # some_set is now {1, 2, 3, 4}\n# Similar to keys of a dictionary, elements of a set have to be immutable.\ninvalid_set = {[1], 1}  # => Raises a TypeError: unhashable type: 'list'\nvalid_set = {(1,), 1}\n# Add one more item to the set\nfilled_set = some_set\nfilled_set.add(5)  # filled_set is now {1, 2, 3, 4, 5}\n# Sets do not have duplicate elements\nfilled_set.add(5)  # it remains as before {1, 2, 3, 4, 5}\n# Do set intersection with &",
    "detail": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "invalid_set",
    "kind": 5,
    "importPath": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "description": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "peekOfCode": "invalid_set = {[1], 1}  # => Raises a TypeError: unhashable type: 'list'\nvalid_set = {(1,), 1}\n# Add one more item to the set\nfilled_set = some_set\nfilled_set.add(5)  # filled_set is now {1, 2, 3, 4, 5}\n# Sets do not have duplicate elements\nfilled_set.add(5)  # it remains as before {1, 2, 3, 4, 5}\n# Do set intersection with &\nother_set = {3, 4, 5, 6}\nfilled_set & other_set  # => {3, 4, 5}",
    "detail": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "valid_set",
    "kind": 5,
    "importPath": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "description": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "peekOfCode": "valid_set = {(1,), 1}\n# Add one more item to the set\nfilled_set = some_set\nfilled_set.add(5)  # filled_set is now {1, 2, 3, 4, 5}\n# Sets do not have duplicate elements\nfilled_set.add(5)  # it remains as before {1, 2, 3, 4, 5}\n# Do set intersection with &\nother_set = {3, 4, 5, 6}\nfilled_set & other_set  # => {3, 4, 5}\n# Do set union with |",
    "detail": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "filled_set",
    "kind": 5,
    "importPath": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "description": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "peekOfCode": "filled_set = some_set\nfilled_set.add(5)  # filled_set is now {1, 2, 3, 4, 5}\n# Sets do not have duplicate elements\nfilled_set.add(5)  # it remains as before {1, 2, 3, 4, 5}\n# Do set intersection with &\nother_set = {3, 4, 5, 6}\nfilled_set & other_set  # => {3, 4, 5}\n# Do set union with |\nfilled_set | other_set  # => {1, 2, 3, 4, 5, 6}\n# Do set difference with -",
    "detail": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "other_set",
    "kind": 5,
    "importPath": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "description": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "peekOfCode": "other_set = {3, 4, 5, 6}\nfilled_set & other_set  # => {3, 4, 5}\n# Do set union with |\nfilled_set | other_set  # => {1, 2, 3, 4, 5, 6}\n# Do set difference with -\n{1, 2, 3, 4} - {2, 3, 5}  # => {1, 4}\n# Do set symmetric difference with ^\n{1, 2, 3, 4} ^ {2, 3, 5}  # => {1, 4, 5}\n# Check if set on the left is a superset of set on the right\n{1, 2} >= {1, 2, 3}  # => False",
    "detail": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "some_var",
    "kind": 5,
    "importPath": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "description": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "peekOfCode": "some_var = 5\n# Here is an if statement. Indentation is significant in Python!\n# Convention is to use four spaces, not tabs.\n# This prints \"some_var is smaller than 10\"\nif some_var > 10:\n    print(\"some_var is totally bigger than 10.\")\nelif some_var < 10:  # This elif clause is optional.\n    print(\"some_var is smaller than 10.\")\nelse:  # This is optional too.\n    print(\"some_var is indeed 10.\")",
    "detail": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "list",
    "kind": 5,
    "importPath": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "description": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "peekOfCode": "list = [\"dog\", \"cat\", \"mouse\"]\nfor i, value in enumerate(list):\n    print(i, value)\n\"\"\"\nWhile loops go until a condition is no longer met.\nprints:\n    0\n    1\n    2\n    3",
    "detail": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "x",
    "kind": 5,
    "importPath": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "description": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "peekOfCode": "x = 0\nwhile x < 4:\n    print(x)\n    x += 1  # Shorthand for x = x + 1\n# Handle exceptions with a try/except block\ntry:\n    # Use \"raise\" to raise an error\n    raise IndexError(\"This is an index error\")\nexcept IndexError as e:\n    pass  # Pass is just a no-op. Usually you would do recovery here.",
    "detail": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "contents",
    "kind": 5,
    "importPath": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "description": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "peekOfCode": "contents = {\"aa\": 12, \"bb\": 21}\nwith open(\"myfile1.txt\", \"w+\") as file:\n    file.write(str(contents))  # writes a string to a file\nwith open(\"myfile2.txt\", \"w+\") as file:\n    file.write(json.dumps(contents))  # writes an object to a file\n# Reading from a file\nwith open(\"myfile1.txt\", \"r+\") as file:\n    contents = file.read()  # reads a string from a file\nprint(contents)\n# print: {\"aa\": 12, \"bb\": 21}",
    "detail": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "filled_dict",
    "kind": 5,
    "importPath": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "description": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "peekOfCode": "filled_dict = {\"one\": 1, \"two\": 2, \"three\": 3}\nour_iterable = filled_dict.keys()\nprint(\n    our_iterable\n)  # => dict_keys(['one', 'two', 'three']). This is an object that implements our Iterable interface.\n# We can loop over it.\nfor i in our_iterable:\n    print(i)  # Prints one, two, three\n# However we cannot address elements by index.\nour_iterable[1]  # Raises a TypeError",
    "detail": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "our_iterable",
    "kind": 5,
    "importPath": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "description": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "peekOfCode": "our_iterable = filled_dict.keys()\nprint(\n    our_iterable\n)  # => dict_keys(['one', 'two', 'three']). This is an object that implements our Iterable interface.\n# We can loop over it.\nfor i in our_iterable:\n    print(i)  # Prints one, two, three\n# However we cannot address elements by index.\nour_iterable[1]  # Raises a TypeError\n# An iterable is an object that knows how to create an iterator.",
    "detail": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "our_iterator",
    "kind": 5,
    "importPath": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "description": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "peekOfCode": "our_iterator = iter(our_iterable)\n# Our iterator is an object that can remember the state as we traverse through it.\n# We get the next object with \"next()\".\nnext(our_iterator)  # => \"one\"\n# It maintains state as we iterate.\nnext(our_iterator)  # => \"two\"\nnext(our_iterator)  # => \"three\"\n# After the iterator has returned all of its data, it raises a StopIteration exception\nnext(our_iterator)  # Raises StopIteration\n# We can also loop over it, in fact, \"for\" does this implicitly!",
    "detail": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "our_iterator",
    "kind": 5,
    "importPath": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "description": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "peekOfCode": "our_iterator = iter(our_iterable)\nfor i in our_iterator:\n    print(i)  # Prints one, two, three\n# You can grab all the elements of an iterable or iterator by calling list() on it.\nlist(our_iterable)  # => Returns [\"one\", \"two\", \"three\"]\nlist(our_iterator)  # => Returns [] because state is saved\n####################################################\n## 4. Functions\n####################################################\n# Use \"def\" to create new functions",
    "detail": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "args",
    "kind": 5,
    "importPath": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "description": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "peekOfCode": "args = (1, 2, 3, 4)\nkwargs = {\"a\": 3, \"b\": 4}\nall_the_args(*args)  # equivalent to all_the_args(1, 2, 3, 4)\nall_the_args(**kwargs)  # equivalent to all_the_args(a=3, b=4)\nall_the_args(*args, **kwargs)  # equivalent to all_the_args(1, 2, 3, 4, a=3, b=4)\n# Returning multiple values (with tuple assignments)\ndef swap(x, y):\n    return y, x  # Return multiple values as a tuple without the parenthesis.\n    # (Note: parenthesis have been excluded but can be included)\nx = 1",
    "detail": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "kwargs",
    "kind": 5,
    "importPath": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "description": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "peekOfCode": "kwargs = {\"a\": 3, \"b\": 4}\nall_the_args(*args)  # equivalent to all_the_args(1, 2, 3, 4)\nall_the_args(**kwargs)  # equivalent to all_the_args(a=3, b=4)\nall_the_args(*args, **kwargs)  # equivalent to all_the_args(1, 2, 3, 4, a=3, b=4)\n# Returning multiple values (with tuple assignments)\ndef swap(x, y):\n    return y, x  # Return multiple values as a tuple without the parenthesis.\n    # (Note: parenthesis have been excluded but can be included)\nx = 1\ny = 2",
    "detail": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "x",
    "kind": 5,
    "importPath": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "description": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "peekOfCode": "x = 1\ny = 2\nx, y = swap(x, y)  # => x = 2, y = 1\n# (x, y) = swap(x,y)  # Again parenthesis have been excluded but can be included.\n# Function Scope\nx = 5\ndef set_x(num):\n    # Local var x not the same as global variable x\n    x = num  # => 43\n    print(x)  # => 43",
    "detail": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "y",
    "kind": 5,
    "importPath": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "description": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "peekOfCode": "y = 2\nx, y = swap(x, y)  # => x = 2, y = 1\n# (x, y) = swap(x,y)  # Again parenthesis have been excluded but can be included.\n# Function Scope\nx = 5\ndef set_x(num):\n    # Local var x not the same as global variable x\n    x = num  # => 43\n    print(x)  # => 43\ndef set_global_x(num):",
    "detail": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "x",
    "kind": 5,
    "importPath": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "description": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "peekOfCode": "x = 5\ndef set_x(num):\n    # Local var x not the same as global variable x\n    x = num  # => 43\n    print(x)  # => 43\ndef set_global_x(num):\n    global x\n    print(x)  # => 5\n    x = num  # global var x is now set to 6\n    print(x)  # => 6",
    "detail": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "add_10",
    "kind": 5,
    "importPath": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "description": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "peekOfCode": "add_10 = create_adder(10)\nadd_10(3)  # => 13\n# There are also anonymous functions\n(lambda x: x > 2)(3)  # => True\n(lambda x, y: x ** 2 + y ** 2)(2, 1)  # => 5\n# There are built-in higher order functions\nlist(map(add_10, [1, 2, 3]))  # => [11, 12, 13]\nlist(map(max, [1, 2, 3], [4, 2, 1]))  # => [4, 2, 3]\nlist(filter(lambda x: x > 5, [3, 4, 5, 6, 7]))  # => [6, 7]\n# We can use list comprehensions for nice maps and filters",
    "detail": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "values",
    "kind": 5,
    "importPath": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "description": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "peekOfCode": "values = (-x for x in [1, 2, 3, 4, 5])\nfor x in values:\n    print(x)  # prints -1 -2 -3 -4 -5 to console/terminal\n# You can also cast a generator comprehension directly to a list.\nvalues = (-x for x in [1, 2, 3, 4, 5])\ngen_to_list = list(values)\nprint(gen_to_list)  # => [-1, -2, -3, -4, -5]\n# Decorators\n# In this example `beg` wraps `say`. If say_please is True then it\n# will change the returned message.",
    "detail": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "values",
    "kind": 5,
    "importPath": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "description": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "peekOfCode": "values = (-x for x in [1, 2, 3, 4, 5])\ngen_to_list = list(values)\nprint(gen_to_list)  # => [-1, -2, -3, -4, -5]\n# Decorators\n# In this example `beg` wraps `say`. If say_please is True then it\n# will change the returned message.\nfrom functools import wraps\ndef beg(target_function):\n    @wraps(target_function)\n    def wrapper(*args, **kwargs):",
    "detail": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "gen_to_list",
    "kind": 5,
    "importPath": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "description": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "peekOfCode": "gen_to_list = list(values)\nprint(gen_to_list)  # => [-1, -2, -3, -4, -5]\n# Decorators\n# In this example `beg` wraps `say`. If say_please is True then it\n# will change the returned message.\nfrom functools import wraps\ndef beg(target_function):\n    @wraps(target_function)\n    def wrapper(*args, **kwargs):\n        msg, say_please = target_function(*args, **kwargs)",
    "detail": "MY_GISTS.dd7fd80df3.python-cheatsheet",
    "documentation": {}
  },
  {
    "label": "Solution",
    "kind": 6,
    "importPath": "MY_GISTS.de5fab461e.search-in-rotated-sorted-array",
    "description": "MY_GISTS.de5fab461e.search-in-rotated-sorted-array",
    "peekOfCode": "class Solution:\n    def search(self, nums, target):\n        if not nums:\n            return -1\n        return self.binarySearch(nums, target, 0, len(nums)-1)\n    def binarySearch(self, nums, target, start, end):\n        if end < start:\n            return -1\n        mid = (start+end)//2\n        if nums[mid] == target:",
    "detail": "MY_GISTS.de5fab461e.search-in-rotated-sorted-array",
    "documentation": {}
  },
  {
    "label": "choice",
    "kind": 2,
    "importPath": "MY_GISTS.ded8ffe312.prac8",
    "description": "MY_GISTS.ded8ffe312.prac8",
    "peekOfCode": "def choice():\n    input_int = int(input(\"1. Rock\\n2. Paper\\n3. Scissors\\nEnter your choice: \"))\n    return input_int\nwhile True:\n    print(\"\\nTeam 1\", end=\"\")\n    team1 = choice()\n    print(\"Team 2\", end=\"\")\n    team2 = choice()\n    if team1 == 1:\n        if team2 == 1:",
    "detail": "MY_GISTS.ded8ffe312.prac8",
    "documentation": {}
  },
  {
    "label": "binary_search",
    "kind": 2,
    "importPath": "MY_GISTS.dfb1c47990.binary_search",
    "description": "MY_GISTS.dfb1c47990.binary_search",
    "peekOfCode": "def binary_search(collection, target):\n    left, right, counter = 0, len(collection), 0\n    while left != right:\n        c = (left + right) // 2\n        if target == collection[c]:\n            counter += 1\n            print(\"Step %i -->\" % counter, [collection[c]])\n            return c, counter\n        elif target < collection[c]:\n            counter += 1",
    "detail": "MY_GISTS.dfb1c47990.binary_search",
    "documentation": {}
  },
  {
    "label": "visualization",
    "kind": 2,
    "importPath": "MY_GISTS.dfb1c47990.binary_search",
    "description": "MY_GISTS.dfb1c47990.binary_search",
    "peekOfCode": "def visualization():\n    length = 10\n    collection = [item for item in range(0, length)]\n    target = randint(0, length - 1)\n    print(\"Initial list:\", collection)\n    print(\"The number of which must be found:\", target)\n    print(\"Visualization of algorithm work.\")\n    result, counter = binary_search(collection, target)\n    if result != -1:\n        print(\"Result of searching:\", result)",
    "detail": "MY_GISTS.dfb1c47990.binary_search",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "MY_GISTS.dfb1c47990.binary_search",
    "description": "MY_GISTS.dfb1c47990.binary_search",
    "peekOfCode": "def main():\n    elapsed_time = timeit.timeit(visualization, number=1)\n    print(\"Elapsed time: \", round(elapsed_time, 7), \"sec.\")\nif __name__ == \"__main__\":\n    main()",
    "detail": "MY_GISTS.dfb1c47990.binary_search",
    "documentation": {}
  },
  {
    "label": "interpolation_search",
    "kind": 2,
    "importPath": "MY_GISTS.dfb1c47990.interpolation_search",
    "description": "MY_GISTS.dfb1c47990.interpolation_search",
    "peekOfCode": "def interpolation_search(collection, target):\n    left, right, counter = 0, len(collection) - 1, 0\n    while (collection[left] <= target) and (collection[right] >= target):\n        middle = left + ((target - collection[left]) * (right - left)) // (\n            collection[right] - collection[left]\n        )\n        if collection[middle] < target:\n            counter += 1\n            left = middle + 1\n            print(\"Step %i -->\" % counter, collection[left:])",
    "detail": "MY_GISTS.dfb1c47990.interpolation_search",
    "documentation": {}
  },
  {
    "label": "visualization",
    "kind": 2,
    "importPath": "MY_GISTS.dfb1c47990.interpolation_search",
    "description": "MY_GISTS.dfb1c47990.interpolation_search",
    "peekOfCode": "def visualization():\n    length = 10\n    collection = [item for item in range(0, length)]\n    target = randint(0, length - 1)\n    print(\"Initial list:\", collection)\n    print(\"The number of which must be found:\", target)\n    print(\"Visualization of algorithm work.\")\n    result, counter = interpolation_search(collection, target)\n    if result != -1:\n        print(\"Result of searching: \", result)",
    "detail": "MY_GISTS.dfb1c47990.interpolation_search",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "MY_GISTS.dfb1c47990.interpolation_search",
    "description": "MY_GISTS.dfb1c47990.interpolation_search",
    "peekOfCode": "def main():\n    elapsed_time = timeit.timeit(visualization, number=1)\n    print(\"Elapsed time: \", round(elapsed_time, 7), \"sec.\")\nif __name__ == \"__main__\":\n    main()",
    "detail": "MY_GISTS.dfb1c47990.interpolation_search",
    "documentation": {}
  },
  {
    "label": "linear_search",
    "kind": 2,
    "importPath": "MY_GISTS.dfb1c47990.linear_search",
    "description": "MY_GISTS.dfb1c47990.linear_search",
    "peekOfCode": "def linear_search(collection, target):\n    for i in range(0, len(collection)):\n        if collection[i] == target:\n            return i\n    return -1\ndef visualization():\n    length = 10\n    collection = [randint(0, length) for _ in range(0, length)]\n    target = randint(0, length - 1)\n    print(\"Initial list:\", collection)",
    "detail": "MY_GISTS.dfb1c47990.linear_search",
    "documentation": {}
  },
  {
    "label": "visualization",
    "kind": 2,
    "importPath": "MY_GISTS.dfb1c47990.linear_search",
    "description": "MY_GISTS.dfb1c47990.linear_search",
    "peekOfCode": "def visualization():\n    length = 10\n    collection = [randint(0, length) for _ in range(0, length)]\n    target = randint(0, length - 1)\n    print(\"Initial list:\", collection)\n    print(\"The number of which must be found:\", target)\n    result = linear_search(collection, target)\n    if result != -1:\n        print(\"Result of searching: \", result)\n    else:",
    "detail": "MY_GISTS.dfb1c47990.linear_search",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "MY_GISTS.dfb1c47990.linear_search",
    "description": "MY_GISTS.dfb1c47990.linear_search",
    "peekOfCode": "def main():\n    elapsed_time = timeit.timeit(visualization, number=1)\n    print(\"Elapsed time: \", round(elapsed_time, 7), \"sec.\")\nif __name__ == \"__main__\":\n    main()",
    "detail": "MY_GISTS.dfb1c47990.linear_search",
    "documentation": {}
  },
  {
    "label": "num1",
    "kind": 5,
    "importPath": "MY_GISTS.e4a8be831f.prac2",
    "description": "MY_GISTS.e4a8be831f.prac2",
    "peekOfCode": "num1 = int(input(\"Enter a number: \"))\nif num1 % 4 == 0:\n    print(\"The number is a multiple of 4.\")\nelif num1 % 2 == 0:\n    print(\"The number is a Even number.\")\nelse:\n    print(\"The number is a Odd number.\")\nnum = int(input(\"Again, enter a number: \"))\ncheck = int(input(\"Enter another number: \"))\nres = num / check",
    "detail": "MY_GISTS.e4a8be831f.prac2",
    "documentation": {}
  },
  {
    "label": "num",
    "kind": 5,
    "importPath": "MY_GISTS.e4a8be831f.prac2",
    "description": "MY_GISTS.e4a8be831f.prac2",
    "peekOfCode": "num = int(input(\"Again, enter a number: \"))\ncheck = int(input(\"Enter another number: \"))\nres = num / check\nif type(res) == int:\n    print(check, \" divides evenly into \", num)\nelse:\n    print(check, \" doesn't divide evenly into \", num)",
    "detail": "MY_GISTS.e4a8be831f.prac2",
    "documentation": {}
  },
  {
    "label": "check",
    "kind": 5,
    "importPath": "MY_GISTS.e4a8be831f.prac2",
    "description": "MY_GISTS.e4a8be831f.prac2",
    "peekOfCode": "check = int(input(\"Enter another number: \"))\nres = num / check\nif type(res) == int:\n    print(check, \" divides evenly into \", num)\nelse:\n    print(check, \" doesn't divide evenly into \", num)",
    "detail": "MY_GISTS.e4a8be831f.prac2",
    "documentation": {}
  },
  {
    "label": "res",
    "kind": 5,
    "importPath": "MY_GISTS.e4a8be831f.prac2",
    "description": "MY_GISTS.e4a8be831f.prac2",
    "peekOfCode": "res = num / check\nif type(res) == int:\n    print(check, \" divides evenly into \", num)\nelse:\n    print(check, \" doesn't divide evenly into \", num)",
    "detail": "MY_GISTS.e4a8be831f.prac2",
    "documentation": {}
  },
  {
    "label": "fibonacci",
    "kind": 2,
    "importPath": "MY_GISTS.e544330836.prac10",
    "description": "MY_GISTS.e544330836.prac10",
    "peekOfCode": "def fibonacci(n):\n    print(\"1, 1, \", end=\"\")\n    count = 2\n    first_num = 1\n    sec_num = 1\n    while count < n:\n        sum = first_num + sec_num\n        print(sum, end=\", \")\n        first_num = sec_num\n        sec_num = sum",
    "detail": "MY_GISTS.e544330836.prac10",
    "documentation": {}
  },
  {
    "label": "n",
    "kind": 5,
    "importPath": "MY_GISTS.e544330836.prac10",
    "description": "MY_GISTS.e544330836.prac10",
    "peekOfCode": "n = int(input(\"Enter the number of fibonacci number you want to generate: \"))\nfibonacci(n)",
    "detail": "MY_GISTS.e544330836.prac10",
    "documentation": {}
  },
  {
    "label": "formation_num",
    "kind": 5,
    "importPath": "MY_GISTS.edcbe51ff1.calculator",
    "description": "MY_GISTS.edcbe51ff1.calculator",
    "peekOfCode": "formation_num = 32 # defining no of signs, we are using it on on multiple places\nprint('*' * formation_num) # for formation\ntitle = '   A simple python calculator'\nprint(title)\nprint('-' * formation_num) # for formation\nnum1 = float(input('   Type first number: '))\nnum2 = float(input('   Type second number: '))\noperator = input('   Type operator: ')\naddition = num1 + num2\nsubtraction = num1 - num2",
    "detail": "MY_GISTS.edcbe51ff1.calculator",
    "documentation": {}
  },
  {
    "label": "title",
    "kind": 5,
    "importPath": "MY_GISTS.edcbe51ff1.calculator",
    "description": "MY_GISTS.edcbe51ff1.calculator",
    "peekOfCode": "title = '   A simple python calculator'\nprint(title)\nprint('-' * formation_num) # for formation\nnum1 = float(input('   Type first number: '))\nnum2 = float(input('   Type second number: '))\noperator = input('   Type operator: ')\naddition = num1 + num2\nsubtraction = num1 - num2\nmultiplication = num1 * num2\ndivision = num1 / num2",
    "detail": "MY_GISTS.edcbe51ff1.calculator",
    "documentation": {}
  },
  {
    "label": "num1",
    "kind": 5,
    "importPath": "MY_GISTS.edcbe51ff1.calculator",
    "description": "MY_GISTS.edcbe51ff1.calculator",
    "peekOfCode": "num1 = float(input('   Type first number: '))\nnum2 = float(input('   Type second number: '))\noperator = input('   Type operator: ')\naddition = num1 + num2\nsubtraction = num1 - num2\nmultiplication = num1 * num2\ndivision = num1 / num2\nif operator == '+':\n   print(f'   Result: {num1} + {num2} = {addition}')\nelif operator == '-':",
    "detail": "MY_GISTS.edcbe51ff1.calculator",
    "documentation": {}
  },
  {
    "label": "num2",
    "kind": 5,
    "importPath": "MY_GISTS.edcbe51ff1.calculator",
    "description": "MY_GISTS.edcbe51ff1.calculator",
    "peekOfCode": "num2 = float(input('   Type second number: '))\noperator = input('   Type operator: ')\naddition = num1 + num2\nsubtraction = num1 - num2\nmultiplication = num1 * num2\ndivision = num1 / num2\nif operator == '+':\n   print(f'   Result: {num1} + {num2} = {addition}')\nelif operator == '-':\n   print(f'   Result: {num1} - {num2} = {subtraction}')",
    "detail": "MY_GISTS.edcbe51ff1.calculator",
    "documentation": {}
  },
  {
    "label": "operator",
    "kind": 5,
    "importPath": "MY_GISTS.edcbe51ff1.calculator",
    "description": "MY_GISTS.edcbe51ff1.calculator",
    "peekOfCode": "operator = input('   Type operator: ')\naddition = num1 + num2\nsubtraction = num1 - num2\nmultiplication = num1 * num2\ndivision = num1 / num2\nif operator == '+':\n   print(f'   Result: {num1} + {num2} = {addition}')\nelif operator == '-':\n   print(f'   Result: {num1} - {num2} = {subtraction}')\nelif operator == '*':",
    "detail": "MY_GISTS.edcbe51ff1.calculator",
    "documentation": {}
  },
  {
    "label": "addition",
    "kind": 5,
    "importPath": "MY_GISTS.edcbe51ff1.calculator",
    "description": "MY_GISTS.edcbe51ff1.calculator",
    "peekOfCode": "addition = num1 + num2\nsubtraction = num1 - num2\nmultiplication = num1 * num2\ndivision = num1 / num2\nif operator == '+':\n   print(f'   Result: {num1} + {num2} = {addition}')\nelif operator == '-':\n   print(f'   Result: {num1} - {num2} = {subtraction}')\nelif operator == '*':\n   print(f'   Result: {num1} * {num2} = {multiplication}')",
    "detail": "MY_GISTS.edcbe51ff1.calculator",
    "documentation": {}
  },
  {
    "label": "subtraction",
    "kind": 5,
    "importPath": "MY_GISTS.edcbe51ff1.calculator",
    "description": "MY_GISTS.edcbe51ff1.calculator",
    "peekOfCode": "subtraction = num1 - num2\nmultiplication = num1 * num2\ndivision = num1 / num2\nif operator == '+':\n   print(f'   Result: {num1} + {num2} = {addition}')\nelif operator == '-':\n   print(f'   Result: {num1} - {num2} = {subtraction}')\nelif operator == '*':\n   print(f'   Result: {num1} * {num2} = {multiplication}')\nelif operator == '/':",
    "detail": "MY_GISTS.edcbe51ff1.calculator",
    "documentation": {}
  },
  {
    "label": "multiplication",
    "kind": 5,
    "importPath": "MY_GISTS.edcbe51ff1.calculator",
    "description": "MY_GISTS.edcbe51ff1.calculator",
    "peekOfCode": "multiplication = num1 * num2\ndivision = num1 / num2\nif operator == '+':\n   print(f'   Result: {num1} + {num2} = {addition}')\nelif operator == '-':\n   print(f'   Result: {num1} - {num2} = {subtraction}')\nelif operator == '*':\n   print(f'   Result: {num1} * {num2} = {multiplication}')\nelif operator == '/':\n   print(f'   Result: {num1} / {num2} = {division}')",
    "detail": "MY_GISTS.edcbe51ff1.calculator",
    "documentation": {}
  },
  {
    "label": "division",
    "kind": 5,
    "importPath": "MY_GISTS.edcbe51ff1.calculator",
    "description": "MY_GISTS.edcbe51ff1.calculator",
    "peekOfCode": "division = num1 / num2\nif operator == '+':\n   print(f'   Result: {num1} + {num2} = {addition}')\nelif operator == '-':\n   print(f'   Result: {num1} - {num2} = {subtraction}')\nelif operator == '*':\n   print(f'   Result: {num1} * {num2} = {multiplication}')\nelif operator == '/':\n   print(f'   Result: {num1} / {num2} = {division}')\nelse :",
    "detail": "MY_GISTS.edcbe51ff1.calculator",
    "documentation": {}
  },
  {
    "label": "formation_num",
    "kind": 5,
    "importPath": "MY_GISTS.edcbe51ff1.grades",
    "description": "MY_GISTS.edcbe51ff1.grades",
    "peekOfCode": "formation_num = 40 # defining no of signs, we are using it on on multiple places\nprint('*' * formation_num) # for formation\ntitle = 'Python Marksheet'\nprint(f'\\t{title}')\nprint('-' * formation_num) # for formation\n# student info\nname = input('\\t Name: ')\nroll_no = int(input('\\t Roll No: ')) \n# total marks per subject, assigned multiple variables in one line\nmathematics_marks, physics_marks, chemistry_marks, islamiat_marks, urdu_marks = 100, 100, 100, 100, 75",
    "detail": "MY_GISTS.edcbe51ff1.grades",
    "documentation": {}
  },
  {
    "label": "title",
    "kind": 5,
    "importPath": "MY_GISTS.edcbe51ff1.grades",
    "description": "MY_GISTS.edcbe51ff1.grades",
    "peekOfCode": "title = 'Python Marksheet'\nprint(f'\\t{title}')\nprint('-' * formation_num) # for formation\n# student info\nname = input('\\t Name: ')\nroll_no = int(input('\\t Roll No: ')) \n# total marks per subject, assigned multiple variables in one line\nmathematics_marks, physics_marks, chemistry_marks, islamiat_marks, urdu_marks = 100, 100, 100, 100, 75\n# input\nmathematics = int(input(f'\\t Mathematics marks out of {mathematics_marks}: '))",
    "detail": "MY_GISTS.edcbe51ff1.grades",
    "documentation": {}
  },
  {
    "label": "name",
    "kind": 5,
    "importPath": "MY_GISTS.edcbe51ff1.grades",
    "description": "MY_GISTS.edcbe51ff1.grades",
    "peekOfCode": "name = input('\\t Name: ')\nroll_no = int(input('\\t Roll No: ')) \n# total marks per subject, assigned multiple variables in one line\nmathematics_marks, physics_marks, chemistry_marks, islamiat_marks, urdu_marks = 100, 100, 100, 100, 75\n# input\nmathematics = int(input(f'\\t Mathematics marks out of {mathematics_marks}: '))\nchemistry = int(input(f'\\t Chemistry marks out of {chemistry_marks}: '))\nphysics = int(input(f'\\t Physics marks out of {physics_marks}: '))\nurdu = int(input(f'\\t Urdu marks out of {urdu_marks}: '))\nislamiat = int(input(f'\\t Islamiat marks out of {islamiat_marks}: '))",
    "detail": "MY_GISTS.edcbe51ff1.grades",
    "documentation": {}
  },
  {
    "label": "roll_no",
    "kind": 5,
    "importPath": "MY_GISTS.edcbe51ff1.grades",
    "description": "MY_GISTS.edcbe51ff1.grades",
    "peekOfCode": "roll_no = int(input('\\t Roll No: ')) \n# total marks per subject, assigned multiple variables in one line\nmathematics_marks, physics_marks, chemistry_marks, islamiat_marks, urdu_marks = 100, 100, 100, 100, 75\n# input\nmathematics = int(input(f'\\t Mathematics marks out of {mathematics_marks}: '))\nchemistry = int(input(f'\\t Chemistry marks out of {chemistry_marks}: '))\nphysics = int(input(f'\\t Physics marks out of {physics_marks}: '))\nurdu = int(input(f'\\t Urdu marks out of {urdu_marks}: '))\nislamiat = int(input(f'\\t Islamiat marks out of {islamiat_marks}: '))\n# calculating total marks, obtained marks and percentage",
    "detail": "MY_GISTS.edcbe51ff1.grades",
    "documentation": {}
  },
  {
    "label": "mathematics",
    "kind": 5,
    "importPath": "MY_GISTS.edcbe51ff1.grades",
    "description": "MY_GISTS.edcbe51ff1.grades",
    "peekOfCode": "mathematics = int(input(f'\\t Mathematics marks out of {mathematics_marks}: '))\nchemistry = int(input(f'\\t Chemistry marks out of {chemistry_marks}: '))\nphysics = int(input(f'\\t Physics marks out of {physics_marks}: '))\nurdu = int(input(f'\\t Urdu marks out of {urdu_marks}: '))\nislamiat = int(input(f'\\t Islamiat marks out of {islamiat_marks}: '))\n# calculating total marks, obtained marks and percentage\ntotal_marks = mathematics_marks + physics_marks + chemistry_marks + islamiat_marks + urdu_marks\nobtained_marks = mathematics + chemistry + physics + urdu + islamiat\npercentage = round(obtained_marks / total_marks * 100, 2) # round to two decimal point\n# defining variables for grades",
    "detail": "MY_GISTS.edcbe51ff1.grades",
    "documentation": {}
  },
  {
    "label": "chemistry",
    "kind": 5,
    "importPath": "MY_GISTS.edcbe51ff1.grades",
    "description": "MY_GISTS.edcbe51ff1.grades",
    "peekOfCode": "chemistry = int(input(f'\\t Chemistry marks out of {chemistry_marks}: '))\nphysics = int(input(f'\\t Physics marks out of {physics_marks}: '))\nurdu = int(input(f'\\t Urdu marks out of {urdu_marks}: '))\nislamiat = int(input(f'\\t Islamiat marks out of {islamiat_marks}: '))\n# calculating total marks, obtained marks and percentage\ntotal_marks = mathematics_marks + physics_marks + chemistry_marks + islamiat_marks + urdu_marks\nobtained_marks = mathematics + chemistry + physics + urdu + islamiat\npercentage = round(obtained_marks / total_marks * 100, 2) # round to two decimal point\n# defining variables for grades\ngrade_A = 'Grade: Grade A'",
    "detail": "MY_GISTS.edcbe51ff1.grades",
    "documentation": {}
  },
  {
    "label": "physics",
    "kind": 5,
    "importPath": "MY_GISTS.edcbe51ff1.grades",
    "description": "MY_GISTS.edcbe51ff1.grades",
    "peekOfCode": "physics = int(input(f'\\t Physics marks out of {physics_marks}: '))\nurdu = int(input(f'\\t Urdu marks out of {urdu_marks}: '))\nislamiat = int(input(f'\\t Islamiat marks out of {islamiat_marks}: '))\n# calculating total marks, obtained marks and percentage\ntotal_marks = mathematics_marks + physics_marks + chemistry_marks + islamiat_marks + urdu_marks\nobtained_marks = mathematics + chemistry + physics + urdu + islamiat\npercentage = round(obtained_marks / total_marks * 100, 2) # round to two decimal point\n# defining variables for grades\ngrade_A = 'Grade: Grade A'\ngrade_B = 'Grade: Grade B'",
    "detail": "MY_GISTS.edcbe51ff1.grades",
    "documentation": {}
  },
  {
    "label": "urdu",
    "kind": 5,
    "importPath": "MY_GISTS.edcbe51ff1.grades",
    "description": "MY_GISTS.edcbe51ff1.grades",
    "peekOfCode": "urdu = int(input(f'\\t Urdu marks out of {urdu_marks}: '))\nislamiat = int(input(f'\\t Islamiat marks out of {islamiat_marks}: '))\n# calculating total marks, obtained marks and percentage\ntotal_marks = mathematics_marks + physics_marks + chemistry_marks + islamiat_marks + urdu_marks\nobtained_marks = mathematics + chemistry + physics + urdu + islamiat\npercentage = round(obtained_marks / total_marks * 100, 2) # round to two decimal point\n# defining variables for grades\ngrade_A = 'Grade: Grade A'\ngrade_B = 'Grade: Grade B'\ngrade_C = 'Grade: Grade C'",
    "detail": "MY_GISTS.edcbe51ff1.grades",
    "documentation": {}
  },
  {
    "label": "islamiat",
    "kind": 5,
    "importPath": "MY_GISTS.edcbe51ff1.grades",
    "description": "MY_GISTS.edcbe51ff1.grades",
    "peekOfCode": "islamiat = int(input(f'\\t Islamiat marks out of {islamiat_marks}: '))\n# calculating total marks, obtained marks and percentage\ntotal_marks = mathematics_marks + physics_marks + chemistry_marks + islamiat_marks + urdu_marks\nobtained_marks = mathematics + chemistry + physics + urdu + islamiat\npercentage = round(obtained_marks / total_marks * 100, 2) # round to two decimal point\n# defining variables for grades\ngrade_A = 'Grade: Grade A'\ngrade_B = 'Grade: Grade B'\ngrade_C = 'Grade: Grade C'\ngrade_D = 'Grade: Grade D'",
    "detail": "MY_GISTS.edcbe51ff1.grades",
    "documentation": {}
  },
  {
    "label": "total_marks",
    "kind": 5,
    "importPath": "MY_GISTS.edcbe51ff1.grades",
    "description": "MY_GISTS.edcbe51ff1.grades",
    "peekOfCode": "total_marks = mathematics_marks + physics_marks + chemistry_marks + islamiat_marks + urdu_marks\nobtained_marks = mathematics + chemistry + physics + urdu + islamiat\npercentage = round(obtained_marks / total_marks * 100, 2) # round to two decimal point\n# defining variables for grades\ngrade_A = 'Grade: Grade A'\ngrade_B = 'Grade: Grade B'\ngrade_C = 'Grade: Grade C'\ngrade_D = 'Grade: Grade D'\ngrade_F = 'Grade: Grade F (failed)'\n# output",
    "detail": "MY_GISTS.edcbe51ff1.grades",
    "documentation": {}
  },
  {
    "label": "obtained_marks",
    "kind": 5,
    "importPath": "MY_GISTS.edcbe51ff1.grades",
    "description": "MY_GISTS.edcbe51ff1.grades",
    "peekOfCode": "obtained_marks = mathematics + chemistry + physics + urdu + islamiat\npercentage = round(obtained_marks / total_marks * 100, 2) # round to two decimal point\n# defining variables for grades\ngrade_A = 'Grade: Grade A'\ngrade_B = 'Grade: Grade B'\ngrade_C = 'Grade: Grade C'\ngrade_D = 'Grade: Grade D'\ngrade_F = 'Grade: Grade F (failed)'\n# output\nprint('≈' * formation_num) # for formation",
    "detail": "MY_GISTS.edcbe51ff1.grades",
    "documentation": {}
  },
  {
    "label": "percentage",
    "kind": 5,
    "importPath": "MY_GISTS.edcbe51ff1.grades",
    "description": "MY_GISTS.edcbe51ff1.grades",
    "peekOfCode": "percentage = round(obtained_marks / total_marks * 100, 2) # round to two decimal point\n# defining variables for grades\ngrade_A = 'Grade: Grade A'\ngrade_B = 'Grade: Grade B'\ngrade_C = 'Grade: Grade C'\ngrade_D = 'Grade: Grade D'\ngrade_F = 'Grade: Grade F (failed)'\n# output\nprint('≈' * formation_num) # for formation\nprint(f'   Name: {name}   Roll No: {roll_no }')",
    "detail": "MY_GISTS.edcbe51ff1.grades",
    "documentation": {}
  },
  {
    "label": "grade_A",
    "kind": 5,
    "importPath": "MY_GISTS.edcbe51ff1.grades",
    "description": "MY_GISTS.edcbe51ff1.grades",
    "peekOfCode": "grade_A = 'Grade: Grade A'\ngrade_B = 'Grade: Grade B'\ngrade_C = 'Grade: Grade C'\ngrade_D = 'Grade: Grade D'\ngrade_F = 'Grade: Grade F (failed)'\n# output\nprint('≈' * formation_num) # for formation\nprint(f'   Name: {name}   Roll No: {roll_no }')\nprint(f'   Total Marks: {total_marks}   Obtained Marks: {obtained_marks}')\nprint(f'   Percentage: {percentage}%')",
    "detail": "MY_GISTS.edcbe51ff1.grades",
    "documentation": {}
  },
  {
    "label": "grade_B",
    "kind": 5,
    "importPath": "MY_GISTS.edcbe51ff1.grades",
    "description": "MY_GISTS.edcbe51ff1.grades",
    "peekOfCode": "grade_B = 'Grade: Grade B'\ngrade_C = 'Grade: Grade C'\ngrade_D = 'Grade: Grade D'\ngrade_F = 'Grade: Grade F (failed)'\n# output\nprint('≈' * formation_num) # for formation\nprint(f'   Name: {name}   Roll No: {roll_no }')\nprint(f'   Total Marks: {total_marks}   Obtained Marks: {obtained_marks}')\nprint(f'   Percentage: {percentage}%')\n# grading",
    "detail": "MY_GISTS.edcbe51ff1.grades",
    "documentation": {}
  },
  {
    "label": "grade_C",
    "kind": 5,
    "importPath": "MY_GISTS.edcbe51ff1.grades",
    "description": "MY_GISTS.edcbe51ff1.grades",
    "peekOfCode": "grade_C = 'Grade: Grade C'\ngrade_D = 'Grade: Grade D'\ngrade_F = 'Grade: Grade F (failed)'\n# output\nprint('≈' * formation_num) # for formation\nprint(f'   Name: {name}   Roll No: {roll_no }')\nprint(f'   Total Marks: {total_marks}   Obtained Marks: {obtained_marks}')\nprint(f'   Percentage: {percentage}%')\n# grading\nif percentage >= 90:",
    "detail": "MY_GISTS.edcbe51ff1.grades",
    "documentation": {}
  },
  {
    "label": "grade_D",
    "kind": 5,
    "importPath": "MY_GISTS.edcbe51ff1.grades",
    "description": "MY_GISTS.edcbe51ff1.grades",
    "peekOfCode": "grade_D = 'Grade: Grade D'\ngrade_F = 'Grade: Grade F (failed)'\n# output\nprint('≈' * formation_num) # for formation\nprint(f'   Name: {name}   Roll No: {roll_no }')\nprint(f'   Total Marks: {total_marks}   Obtained Marks: {obtained_marks}')\nprint(f'   Percentage: {percentage}%')\n# grading\nif percentage >= 90:\n   print(f'   {grade_A}')",
    "detail": "MY_GISTS.edcbe51ff1.grades",
    "documentation": {}
  },
  {
    "label": "grade_F",
    "kind": 5,
    "importPath": "MY_GISTS.edcbe51ff1.grades",
    "description": "MY_GISTS.edcbe51ff1.grades",
    "peekOfCode": "grade_F = 'Grade: Grade F (failed)'\n# output\nprint('≈' * formation_num) # for formation\nprint(f'   Name: {name}   Roll No: {roll_no }')\nprint(f'   Total Marks: {total_marks}   Obtained Marks: {obtained_marks}')\nprint(f'   Percentage: {percentage}%')\n# grading\nif percentage >= 90:\n   print(f'   {grade_A}')\nelif percentage >= 80:",
    "detail": "MY_GISTS.edcbe51ff1.grades",
    "documentation": {}
  },
  {
    "label": "multiplication_table",
    "kind": 2,
    "importPath": "MY_GISTS.edcbe51ff1.multiplication-table",
    "description": "MY_GISTS.edcbe51ff1.multiplication-table",
    "peekOfCode": "def multiplication_table():\n   value = int(input('please type a number: '))\n   for num in range(1, 11):\n      print(f'{value} * {num} = {value * num}' )\nmultiplication_table()",
    "detail": "MY_GISTS.edcbe51ff1.multiplication-table",
    "documentation": {}
  },
  {
    "label": "prime_num",
    "kind": 2,
    "importPath": "MY_GISTS.edcbe51ff1.prime",
    "description": "MY_GISTS.edcbe51ff1.prime",
    "peekOfCode": "def prime_num():\n   value = int(input('please type a number: '))\n   for num in range(2,value):\n      if value % num == 0:\n         return f'{value} is not a prime number'\n   return f'{value} is a prime number'\nprint(prime_num())",
    "detail": "MY_GISTS.edcbe51ff1.prime",
    "documentation": {}
  },
  {
    "label": "remove_from_list",
    "kind": 2,
    "importPath": "MY_GISTS.edcbe51ff1.remove-from-list",
    "description": "MY_GISTS.edcbe51ff1.remove-from-list",
    "peekOfCode": "def remove_from_list(lst, val):\n   for num in lst:\n      print(num)\n      if val in lst:\n         lst.remove(val)\n   return lst\nnums = [2, 7, 7, 6, 2, 11, 9, 1, -4, 7, 1]\nvalue = 7\nprint(remove_from_list(nums, value))",
    "detail": "MY_GISTS.edcbe51ff1.remove-from-list",
    "documentation": {}
  },
  {
    "label": "nums",
    "kind": 5,
    "importPath": "MY_GISTS.edcbe51ff1.remove-from-list",
    "description": "MY_GISTS.edcbe51ff1.remove-from-list",
    "peekOfCode": "nums = [2, 7, 7, 6, 2, 11, 9, 1, -4, 7, 1]\nvalue = 7\nprint(remove_from_list(nums, value))",
    "detail": "MY_GISTS.edcbe51ff1.remove-from-list",
    "documentation": {}
  },
  {
    "label": "value",
    "kind": 5,
    "importPath": "MY_GISTS.edcbe51ff1.remove-from-list",
    "description": "MY_GISTS.edcbe51ff1.remove-from-list",
    "peekOfCode": "value = 7\nprint(remove_from_list(nums, value))",
    "detail": "MY_GISTS.edcbe51ff1.remove-from-list",
    "documentation": {}
  },
  {
    "label": "AngryBird",
    "kind": 6,
    "importPath": "MY_GISTS.f04630ef88.python-4-beginners",
    "description": "MY_GISTS.f04630ef88.python-4-beginners",
    "peekOfCode": "class AngryBird:\n    # Slots optimize property access and memory usage and prevent you\n    # from arbitrarily assigning new properties the instance\n    __slots__ = [\"_x\", \"_y\"]\n    # Constructor\n    def __init__(self, x=0, y=0):\n        # Doc String\n        \"\"\"\n        Construct a new AngryBird by setting it's position to (0, 0)\n        \"\"\"",
    "detail": "MY_GISTS.f04630ef88.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "say_hi",
    "kind": 2,
    "importPath": "MY_GISTS.f04630ef88.python-4-beginners",
    "description": "MY_GISTS.f04630ef88.python-4-beginners",
    "peekOfCode": "def say_hi(name):\n    \"\"\"<---- Multi-Line Comments and Docstrings\n    This is where you put your content for help() to inform the user\n    about what your function does and how to use it\n    \"\"\"\n    print(f\"Hello {name}!\")\nprint(say_hi(\"Bryan\"))  # Should get the print inside the function, then None\n# Boolean Values\n# Work the same as in JS, except they are title case: True and False\na = True",
    "detail": "MY_GISTS.f04630ef88.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "printCopyright",
    "kind": 2,
    "importPath": "MY_GISTS.f04630ef88.python-4-beginners",
    "description": "MY_GISTS.f04630ef88.python-4-beginners",
    "peekOfCode": "def printCopyright():\n    print(\"Copyright 2021, Bgoonz\")\n# Lambdas are one liners! (Should be at least, you can use parenthesis to disobey)\ndef avg(num1, num2):\n    return print(num1 + num2)\navg(1, 2)\n# Calling it with keyword arguments, order does not matter\navg(num2=20, num1=1252)\nprintCopyright()\n# We can give parameters default arguments like JS",
    "detail": "MY_GISTS.f04630ef88.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "avg",
    "kind": 2,
    "importPath": "MY_GISTS.f04630ef88.python-4-beginners",
    "description": "MY_GISTS.f04630ef88.python-4-beginners",
    "peekOfCode": "def avg(num1, num2):\n    return print(num1 + num2)\navg(1, 2)\n# Calling it with keyword arguments, order does not matter\navg(num2=20, num1=1252)\nprintCopyright()\n# We can give parameters default arguments like JS\ndef greeting(name, saying=\"Hello\"):\n    print(saying, name)\ngreeting(\"Mike\")  # Hello Mike",
    "detail": "MY_GISTS.f04630ef88.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "greeting",
    "kind": 2,
    "importPath": "MY_GISTS.f04630ef88.python-4-beginners",
    "description": "MY_GISTS.f04630ef88.python-4-beginners",
    "peekOfCode": "def greeting(name, saying=\"Hello\"):\n    print(saying, name)\ngreeting(\"Mike\")  # Hello Mike\ngreeting(\"Bryan\", saying=\"Hello there...\")\n# A common gotcha is using a mutable object for a default parameter\n# All invocations of the function reference the same mutable object\ndef append_item(item_name, item_list=[]):  # Will it obey and give us a new list?\n    item_list.append(item_name)\n    return item_list\n# Uses same item list unless otherwise stated which is counterintuitive",
    "detail": "MY_GISTS.f04630ef88.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "append_item",
    "kind": 2,
    "importPath": "MY_GISTS.f04630ef88.python-4-beginners",
    "description": "MY_GISTS.f04630ef88.python-4-beginners",
    "peekOfCode": "def append_item(item_name, item_list=[]):  # Will it obey and give us a new list?\n    item_list.append(item_name)\n    return item_list\n# Uses same item list unless otherwise stated which is counterintuitive\nprint(append_item(\"notebook\"))\nprint(append_item(\"notebook\"))\nprint(append_item(\"notebook\", []))\n# Errors - Unlike JS, if we pass the incorrect amount of arguments to a function,\n#          it will throw an error\n# avg(1)  # TypeError",
    "detail": "MY_GISTS.f04630ef88.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "add",
    "kind": 2,
    "importPath": "MY_GISTS.f04630ef88.python-4-beginners",
    "description": "MY_GISTS.f04630ef88.python-4-beginners",
    "peekOfCode": "def add(a, b, *args):\n    # args is a tuple of the rest of the arguments\n    total = a + b\n    for n in args:\n        total += n\n    return total\nprint(add(1, 2))  # args is None, returns 3\nprint(add(1, 2, 3, 4, 5, 6))  # args is (3, 4, 5, 6), returns 21\n# Variable Length Keyword Arguments\ndef print_names_and_countries(greeting, **kwargs):",
    "detail": "MY_GISTS.f04630ef88.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "print_names_and_countries",
    "kind": 2,
    "importPath": "MY_GISTS.f04630ef88.python-4-beginners",
    "description": "MY_GISTS.f04630ef88.python-4-beginners",
    "peekOfCode": "def print_names_and_countries(greeting, **kwargs):\n    # kwargs is a dictionary of the rest of the keyword arguments\n    for k, v in kwargs.items():\n        print(greeting, k, \"from\", v)\nprint_names_and_countries(\n    \"Hey there\", Monica=\"Sweden\", Mike=\"The United States\", Mark=\"China\"\n)\n# We can combine all of these together\ndef example2(arg1, arg2, *args, kw_1=\"cheese\", kw_2=\"horse\", **kwargs):\n    pass",
    "detail": "MY_GISTS.f04630ef88.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "example2",
    "kind": 2,
    "importPath": "MY_GISTS.f04630ef88.python-4-beginners",
    "description": "MY_GISTS.f04630ef88.python-4-beginners",
    "peekOfCode": "def example2(arg1, arg2, *args, kw_1=\"cheese\", kw_2=\"horse\", **kwargs):\n    pass\n# Lists are mutable arrays\nempty_list = []\nroomates = [\"Beau\", \"Delynn\"]\n# List built-in function makes a list too\nspecials = list()\n# We can use 'in' to test if something is in the list, like 'includes' in JS\nprint(1 in [1, 2, 4])  # True\nprint(2 in [1, 3, 5])  # False",
    "detail": "MY_GISTS.f04630ef88.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "isOdd",
    "kind": 2,
    "importPath": "MY_GISTS.f04630ef88.python-4-beginners",
    "description": "MY_GISTS.f04630ef88.python-4-beginners",
    "peekOfCode": "def isOdd(num):\n    return num % 2 == 1\nfiltered = filter(isOdd, [1, 2, 3, 4])\nprint(list(filtered))\nfor num in filtered:\n    print(f\"first way: {num}\")\nprint(\"--\" * 20)\n[print(f\"list comprehension: {i}\")\n for i in [1, 2, 3, 4, 5, 6, 7, 8] if i % 2 == 1]\n# Map",
    "detail": "MY_GISTS.f04630ef88.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "toUpper",
    "kind": 2,
    "importPath": "MY_GISTS.f04630ef88.python-4-beginners",
    "description": "MY_GISTS.f04630ef88.python-4-beginners",
    "peekOfCode": "def toUpper(str):\n    return str.upper()\nupperCased = map(toUpper, [\"a\", \"b\", \"c\", \"d\"])\nprint(list(upperCased))\n# Sorted\nsorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"])\nprint(list(sorted_items))  # Notice uppercase comes before lowercase\n# Using a key function to control the sorting and make it case insensitive\nsorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"], key=str.lower)\nprint(sorted_items)",
    "detail": "MY_GISTS.f04630ef88.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "print_len",
    "kind": 2,
    "importPath": "MY_GISTS.f04630ef88.python-4-beginners",
    "description": "MY_GISTS.f04630ef88.python-4-beginners",
    "peekOfCode": "def print_len(item):\n    return print(len(item))\nprint_len(\"Mike\")\nprint_len([1, 5, 2, 10, 3, 10])\nprint_len({1, 5, 10, 9, 10})  # 4 because there is a duplicate here (10)\nprint_len((1, 4, 10, 9, 20))\n# Max will return the max number in a given scenario\nprint(max(1, 2, 35, 1012, 1))\n# Min\nprint(min(1, 5, 2, 10))",
    "detail": "MY_GISTS.f04630ef88.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "a",
    "kind": 5,
    "importPath": "MY_GISTS.f04630ef88.python-4-beginners",
    "description": "MY_GISTS.f04630ef88.python-4-beginners",
    "peekOfCode": "a = True\nb = False\n# Logical Operators\n# ! = not, || = or, && = and\nprint(True and True)\nprint(True and not True)\nprint(True or True)\n# Truthiness - Everything is True except...\n# False - None, False, '', [], (), set(), range(0)\n# Number Values",
    "detail": "MY_GISTS.f04630ef88.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "b",
    "kind": 5,
    "importPath": "MY_GISTS.f04630ef88.python-4-beginners",
    "description": "MY_GISTS.f04630ef88.python-4-beginners",
    "peekOfCode": "b = False\n# Logical Operators\n# ! = not, || = or, && = and\nprint(True and True)\nprint(True and not True)\nprint(True or True)\n# Truthiness - Everything is True except...\n# False - None, False, '', [], (), set(), range(0)\n# Number Values\n# Integers are numbers without a floating decimal point",
    "detail": "MY_GISTS.f04630ef88.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "name",
    "kind": 5,
    "importPath": "MY_GISTS.f04630ef88.python-4-beginners",
    "description": "MY_GISTS.f04630ef88.python-4-beginners",
    "peekOfCode": "name = \"Bryan\"\nfor i in range(len(name)):\n    print(name[i])  # B, r, y, a, n\n# We can index starting from the end as well, with negatives\noccupation = \"Full Stack Software Engineer\"\nprint(occupation[-3])  # e\n# We can also get ranges in the index with the [start:stop:step] syntax\nprint(occupation[0:4:1])  # step and stop are optional, stop is exclusive\nprint(occupation[::4])  # beginning to end, every 4th letter\nprint(occupation[4:14:2])  # Let's get weird with it!",
    "detail": "MY_GISTS.f04630ef88.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "occupation",
    "kind": 5,
    "importPath": "MY_GISTS.f04630ef88.python-4-beginners",
    "description": "MY_GISTS.f04630ef88.python-4-beginners",
    "peekOfCode": "occupation = \"Full Stack Software Engineer\"\nprint(occupation[-3])  # e\n# We can also get ranges in the index with the [start:stop:step] syntax\nprint(occupation[0:4:1])  # step and stop are optional, stop is exclusive\nprint(occupation[::4])  # beginning to end, every 4th letter\nprint(occupation[4:14:2])  # Let's get weird with it!\n# NOTE: Indexing out of range will give you an IndexError\n# We can also get the index og things with the .index() method, similar to indexOf()\nprint(occupation.index(\"Stack\"))\nprint([\"Mike\", \"Barry\", \"Cole\", \"James\", \"Mark\"].index(\"Cole\"))",
    "detail": "MY_GISTS.f04630ef88.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "first_name",
    "kind": 5,
    "importPath": "MY_GISTS.f04630ef88.python-4-beginners",
    "description": "MY_GISTS.f04630ef88.python-4-beginners",
    "peekOfCode": "first_name = \"Bryan\"\nlast_name = \"Guner\"\nprint(\"Your name is {0} {1}\".format(first_name, last_name))\n# Useful String Methods\nprint(\"Hello\".upper())  # HELLO\nprint(\"Hello\".lower())  # hello\nprint(\"HELLO\".islower())  # False\nprint(\"HELLO\".isupper())  # True\nprint(\"Hello\".startswith(\"he\"))  # False\nprint(\"Hello\".endswith(\"lo\"))  # True",
    "detail": "MY_GISTS.f04630ef88.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "last_name",
    "kind": 5,
    "importPath": "MY_GISTS.f04630ef88.python-4-beginners",
    "description": "MY_GISTS.f04630ef88.python-4-beginners",
    "peekOfCode": "last_name = \"Guner\"\nprint(\"Your name is {0} {1}\".format(first_name, last_name))\n# Useful String Methods\nprint(\"Hello\".upper())  # HELLO\nprint(\"Hello\".lower())  # hello\nprint(\"HELLO\".islower())  # False\nprint(\"HELLO\".isupper())  # True\nprint(\"Hello\".startswith(\"he\"))  # False\nprint(\"Hello\".endswith(\"lo\"))  # True\nprint(\"Hello There\".split())  # [Hello, There]",
    "detail": "MY_GISTS.f04630ef88.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "a",
    "kind": 5,
    "importPath": "MY_GISTS.f04630ef88.python-4-beginners",
    "description": "MY_GISTS.f04630ef88.python-4-beginners",
    "peekOfCode": "a = 3\nb = a\nc = \"heyoo\"\nb = [\"reassignment\", \"is\", \"fine\", \"G!\"]\n# Comparison Operators - Python uses the same equality operators as JS, but no ===\n# < - Less than\n# > - Greater than\n# <= - Less than or Equal\n# >= - Greater than or Equal\n# == - Equal to",
    "detail": "MY_GISTS.f04630ef88.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "b",
    "kind": 5,
    "importPath": "MY_GISTS.f04630ef88.python-4-beginners",
    "description": "MY_GISTS.f04630ef88.python-4-beginners",
    "peekOfCode": "b = a\nc = \"heyoo\"\nb = [\"reassignment\", \"is\", \"fine\", \"G!\"]\n# Comparison Operators - Python uses the same equality operators as JS, but no ===\n# < - Less than\n# > - Greater than\n# <= - Less than or Equal\n# >= - Greater than or Equal\n# == - Equal to\n# != - Not equal to",
    "detail": "MY_GISTS.f04630ef88.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "c",
    "kind": 5,
    "importPath": "MY_GISTS.f04630ef88.python-4-beginners",
    "description": "MY_GISTS.f04630ef88.python-4-beginners",
    "peekOfCode": "c = \"heyoo\"\nb = [\"reassignment\", \"is\", \"fine\", \"G!\"]\n# Comparison Operators - Python uses the same equality operators as JS, but no ===\n# < - Less than\n# > - Greater than\n# <= - Less than or Equal\n# >= - Greater than or Equal\n# == - Equal to\n# != - Not equal to\n# is - Refers to exact same memory location",
    "detail": "MY_GISTS.f04630ef88.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "b",
    "kind": 5,
    "importPath": "MY_GISTS.f04630ef88.python-4-beginners",
    "description": "MY_GISTS.f04630ef88.python-4-beginners",
    "peekOfCode": "b = [\"reassignment\", \"is\", \"fine\", \"G!\"]\n# Comparison Operators - Python uses the same equality operators as JS, but no ===\n# < - Less than\n# > - Greater than\n# <= - Less than or Equal\n# >= - Greater than or Equal\n# == - Equal to\n# != - Not equal to\n# is - Refers to exact same memory location\n# not - !",
    "detail": "MY_GISTS.f04630ef88.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "lst",
    "kind": 5,
    "importPath": "MY_GISTS.f04630ef88.python-4-beginners",
    "description": "MY_GISTS.f04630ef88.python-4-beginners",
    "peekOfCode": "lst = [1, 2, 3, 4]\nfor i in lst:\n    print(i)\n# Looping over a dictionary\nspam = {\"color\": \"red\", \"age\": 42, \"items\": [(1, \"hey\"), (2, \"hooo!\")]}\nfor v in spam.values():\n    print(v)\n# Loop over a list of tuples and destructuring the values\n# Assuming spam.items returns a list of tuples each containing two items (k, v)\nfor k, v in spam.items():",
    "detail": "MY_GISTS.f04630ef88.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "spam",
    "kind": 5,
    "importPath": "MY_GISTS.f04630ef88.python-4-beginners",
    "description": "MY_GISTS.f04630ef88.python-4-beginners",
    "peekOfCode": "spam = {\"color\": \"red\", \"age\": 42, \"items\": [(1, \"hey\"), (2, \"hooo!\")]}\nfor v in spam.values():\n    print(v)\n# Loop over a list of tuples and destructuring the values\n# Assuming spam.items returns a list of tuples each containing two items (k, v)\nfor k, v in spam.items():\n    print(f\"{k}: {v}\")\n# While loops as long as the condition is True\n#  - Exit loop early with break\n#  - Exit iteration early with continue",
    "detail": "MY_GISTS.f04630ef88.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "spam",
    "kind": 5,
    "importPath": "MY_GISTS.f04630ef88.python-4-beginners",
    "description": "MY_GISTS.f04630ef88.python-4-beginners",
    "peekOfCode": "spam = 0\nwhile True:\n    print(\"Sike That's the wrong Numba\")\n    spam += 1\n    if spam < 5:\n        continue\n    break\n# Functions - use def keyword to define a function in Python\ndef printCopyright():\n    print(\"Copyright 2021, Bgoonz\")",
    "detail": "MY_GISTS.f04630ef88.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "empty_list",
    "kind": 5,
    "importPath": "MY_GISTS.f04630ef88.python-4-beginners",
    "description": "MY_GISTS.f04630ef88.python-4-beginners",
    "peekOfCode": "empty_list = []\nroomates = [\"Beau\", \"Delynn\"]\n# List built-in function makes a list too\nspecials = list()\n# We can use 'in' to test if something is in the list, like 'includes' in JS\nprint(1 in [1, 2, 4])  # True\nprint(2 in [1, 3, 5])  # False\n# Dictionaries - Similar to JS POJO's or Map, containing key value pairs\na = {\"one\": 1, \"two\": 2, \"three\": 3}\nb = dict(one=1, two=2, three=3)",
    "detail": "MY_GISTS.f04630ef88.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "roomates",
    "kind": 5,
    "importPath": "MY_GISTS.f04630ef88.python-4-beginners",
    "description": "MY_GISTS.f04630ef88.python-4-beginners",
    "peekOfCode": "roomates = [\"Beau\", \"Delynn\"]\n# List built-in function makes a list too\nspecials = list()\n# We can use 'in' to test if something is in the list, like 'includes' in JS\nprint(1 in [1, 2, 4])  # True\nprint(2 in [1, 3, 5])  # False\n# Dictionaries - Similar to JS POJO's or Map, containing key value pairs\na = {\"one\": 1, \"two\": 2, \"three\": 3}\nb = dict(one=1, two=2, three=3)\n# Can use 'in' on dictionaries too (for keys)",
    "detail": "MY_GISTS.f04630ef88.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "specials",
    "kind": 5,
    "importPath": "MY_GISTS.f04630ef88.python-4-beginners",
    "description": "MY_GISTS.f04630ef88.python-4-beginners",
    "peekOfCode": "specials = list()\n# We can use 'in' to test if something is in the list, like 'includes' in JS\nprint(1 in [1, 2, 4])  # True\nprint(2 in [1, 3, 5])  # False\n# Dictionaries - Similar to JS POJO's or Map, containing key value pairs\na = {\"one\": 1, \"two\": 2, \"three\": 3}\nb = dict(one=1, two=2, three=3)\n# Can use 'in' on dictionaries too (for keys)\nprint(\"one\" in a)  # True\nprint(3 in b)  # False",
    "detail": "MY_GISTS.f04630ef88.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "a",
    "kind": 5,
    "importPath": "MY_GISTS.f04630ef88.python-4-beginners",
    "description": "MY_GISTS.f04630ef88.python-4-beginners",
    "peekOfCode": "a = {\"one\": 1, \"two\": 2, \"three\": 3}\nb = dict(one=1, two=2, three=3)\n# Can use 'in' on dictionaries too (for keys)\nprint(\"one\" in a)  # True\nprint(3 in b)  # False\n# Sets - Just like JS, unordered collection of distinct objects\nbedroom = {\"bed\", \"tv\", \"computer\", \"clothes\", \"playstation 4\"}\n# bedroom = set(\"bed\", \"tv\", \"computer\", \"clothes\", \"playstation 5\")\nschool_bag = set(\n    [\"book\", \"paper\", \"pencil\", \"pencil\", \"book\", \"book\", \"book\", \"eraser\"]",
    "detail": "MY_GISTS.f04630ef88.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "b",
    "kind": 5,
    "importPath": "MY_GISTS.f04630ef88.python-4-beginners",
    "description": "MY_GISTS.f04630ef88.python-4-beginners",
    "peekOfCode": "b = dict(one=1, two=2, three=3)\n# Can use 'in' on dictionaries too (for keys)\nprint(\"one\" in a)  # True\nprint(3 in b)  # False\n# Sets - Just like JS, unordered collection of distinct objects\nbedroom = {\"bed\", \"tv\", \"computer\", \"clothes\", \"playstation 4\"}\n# bedroom = set(\"bed\", \"tv\", \"computer\", \"clothes\", \"playstation 5\")\nschool_bag = set(\n    [\"book\", \"paper\", \"pencil\", \"pencil\", \"book\", \"book\", \"book\", \"eraser\"]\n)",
    "detail": "MY_GISTS.f04630ef88.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "bedroom",
    "kind": 5,
    "importPath": "MY_GISTS.f04630ef88.python-4-beginners",
    "description": "MY_GISTS.f04630ef88.python-4-beginners",
    "peekOfCode": "bedroom = {\"bed\", \"tv\", \"computer\", \"clothes\", \"playstation 4\"}\n# bedroom = set(\"bed\", \"tv\", \"computer\", \"clothes\", \"playstation 5\")\nschool_bag = set(\n    [\"book\", \"paper\", \"pencil\", \"pencil\", \"book\", \"book\", \"book\", \"eraser\"]\n)\nprint(school_bag)\nprint(bedroom)\n# We can use 'in' on sets as wel\nprint(1 in {1, 2, 3})  # True\nprint(4 in {1, 3, 5})  # False",
    "detail": "MY_GISTS.f04630ef88.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "school_bag",
    "kind": 5,
    "importPath": "MY_GISTS.f04630ef88.python-4-beginners",
    "description": "MY_GISTS.f04630ef88.python-4-beginners",
    "peekOfCode": "school_bag = set(\n    [\"book\", \"paper\", \"pencil\", \"pencil\", \"book\", \"book\", \"book\", \"eraser\"]\n)\nprint(school_bag)\nprint(bedroom)\n# We can use 'in' on sets as wel\nprint(1 in {1, 2, 3})  # True\nprint(4 in {1, 3, 5})  # False\n# Tuples are immutable lists of items\ntime_blocks = (\"AM\", \"PM\")",
    "detail": "MY_GISTS.f04630ef88.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "time_blocks",
    "kind": 5,
    "importPath": "MY_GISTS.f04630ef88.python-4-beginners",
    "description": "MY_GISTS.f04630ef88.python-4-beginners",
    "peekOfCode": "time_blocks = (\"AM\", \"PM\")\ncolors = \"red\", \"green\", \"blue\"  # Parenthesis not needed but encouraged\n# The tuple built-in function can be used to convert things to tuples\nprint(tuple(\"abc\"))\nprint(tuple([1, 2, 3]))\n# 'in' may be used on tuples as well\nprint(1 in (1, 2, 3))  # True\nprint(5 in (1, 4, 3))  # False\n# Ranges are immutable lists of numbers, often used with for loops\n#   - start - default: 0, first number in sequence",
    "detail": "MY_GISTS.f04630ef88.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "colors",
    "kind": 5,
    "importPath": "MY_GISTS.f04630ef88.python-4-beginners",
    "description": "MY_GISTS.f04630ef88.python-4-beginners",
    "peekOfCode": "colors = \"red\", \"green\", \"blue\"  # Parenthesis not needed but encouraged\n# The tuple built-in function can be used to convert things to tuples\nprint(tuple(\"abc\"))\nprint(tuple([1, 2, 3]))\n# 'in' may be used on tuples as well\nprint(1 in (1, 2, 3))  # True\nprint(5 in (1, 4, 3))  # False\n# Ranges are immutable lists of numbers, often used with for loops\n#   - start - default: 0, first number in sequence\n#   - stop - required, next number past last number in sequence",
    "detail": "MY_GISTS.f04630ef88.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "range1",
    "kind": 5,
    "importPath": "MY_GISTS.f04630ef88.python-4-beginners",
    "description": "MY_GISTS.f04630ef88.python-4-beginners",
    "peekOfCode": "range1 = range(5)  # [0,1,2,3,4]\nrange2 = range(1, 5)  # [1,2,3,4]\nrange3 = range(0, 25, 5)  # [0,5,10,15,20]\nrange4 = range(0)  # []\nfor i in range1:\n    print(i)\n# Built-in functions:\n# Filter\ndef isOdd(num):\n    return num % 2 == 1",
    "detail": "MY_GISTS.f04630ef88.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "range2",
    "kind": 5,
    "importPath": "MY_GISTS.f04630ef88.python-4-beginners",
    "description": "MY_GISTS.f04630ef88.python-4-beginners",
    "peekOfCode": "range2 = range(1, 5)  # [1,2,3,4]\nrange3 = range(0, 25, 5)  # [0,5,10,15,20]\nrange4 = range(0)  # []\nfor i in range1:\n    print(i)\n# Built-in functions:\n# Filter\ndef isOdd(num):\n    return num % 2 == 1\nfiltered = filter(isOdd, [1, 2, 3, 4])",
    "detail": "MY_GISTS.f04630ef88.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "range3",
    "kind": 5,
    "importPath": "MY_GISTS.f04630ef88.python-4-beginners",
    "description": "MY_GISTS.f04630ef88.python-4-beginners",
    "peekOfCode": "range3 = range(0, 25, 5)  # [0,5,10,15,20]\nrange4 = range(0)  # []\nfor i in range1:\n    print(i)\n# Built-in functions:\n# Filter\ndef isOdd(num):\n    return num % 2 == 1\nfiltered = filter(isOdd, [1, 2, 3, 4])\nprint(list(filtered))",
    "detail": "MY_GISTS.f04630ef88.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "range4",
    "kind": 5,
    "importPath": "MY_GISTS.f04630ef88.python-4-beginners",
    "description": "MY_GISTS.f04630ef88.python-4-beginners",
    "peekOfCode": "range4 = range(0)  # []\nfor i in range1:\n    print(i)\n# Built-in functions:\n# Filter\ndef isOdd(num):\n    return num % 2 == 1\nfiltered = filter(isOdd, [1, 2, 3, 4])\nprint(list(filtered))\nfor num in filtered:",
    "detail": "MY_GISTS.f04630ef88.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "filtered",
    "kind": 5,
    "importPath": "MY_GISTS.f04630ef88.python-4-beginners",
    "description": "MY_GISTS.f04630ef88.python-4-beginners",
    "peekOfCode": "filtered = filter(isOdd, [1, 2, 3, 4])\nprint(list(filtered))\nfor num in filtered:\n    print(f\"first way: {num}\")\nprint(\"--\" * 20)\n[print(f\"list comprehension: {i}\")\n for i in [1, 2, 3, 4, 5, 6, 7, 8] if i % 2 == 1]\n# Map\ndef toUpper(str):\n    return str.upper()",
    "detail": "MY_GISTS.f04630ef88.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "upperCased",
    "kind": 5,
    "importPath": "MY_GISTS.f04630ef88.python-4-beginners",
    "description": "MY_GISTS.f04630ef88.python-4-beginners",
    "peekOfCode": "upperCased = map(toUpper, [\"a\", \"b\", \"c\", \"d\"])\nprint(list(upperCased))\n# Sorted\nsorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"])\nprint(list(sorted_items))  # Notice uppercase comes before lowercase\n# Using a key function to control the sorting and make it case insensitive\nsorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"], key=str.lower)\nprint(sorted_items)\n# You can also reverse the sort\nsorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"],",
    "detail": "MY_GISTS.f04630ef88.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "sorted_items",
    "kind": 5,
    "importPath": "MY_GISTS.f04630ef88.python-4-beginners",
    "description": "MY_GISTS.f04630ef88.python-4-beginners",
    "peekOfCode": "sorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"])\nprint(list(sorted_items))  # Notice uppercase comes before lowercase\n# Using a key function to control the sorting and make it case insensitive\nsorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"], key=str.lower)\nprint(sorted_items)\n# You can also reverse the sort\nsorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"],\n                      key=str.lower, reverse=True)\nprint(sorted_items)\n# Enumerate creates a tuple with an index for what you're enumerating",
    "detail": "MY_GISTS.f04630ef88.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "sorted_items",
    "kind": 5,
    "importPath": "MY_GISTS.f04630ef88.python-4-beginners",
    "description": "MY_GISTS.f04630ef88.python-4-beginners",
    "peekOfCode": "sorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"], key=str.lower)\nprint(sorted_items)\n# You can also reverse the sort\nsorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"],\n                      key=str.lower, reverse=True)\nprint(sorted_items)\n# Enumerate creates a tuple with an index for what you're enumerating\nquarters = [\"First\", \"Second\", \"Third\", \"Fourth\"]\nprint(list(enumerate(quarters)))\nprint(list(enumerate(quarters, start=1)))",
    "detail": "MY_GISTS.f04630ef88.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "sorted_items",
    "kind": 5,
    "importPath": "MY_GISTS.f04630ef88.python-4-beginners",
    "description": "MY_GISTS.f04630ef88.python-4-beginners",
    "peekOfCode": "sorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"],\n                      key=str.lower, reverse=True)\nprint(sorted_items)\n# Enumerate creates a tuple with an index for what you're enumerating\nquarters = [\"First\", \"Second\", \"Third\", \"Fourth\"]\nprint(list(enumerate(quarters)))\nprint(list(enumerate(quarters, start=1)))\n# Zip takes list and combines them as key value pairs, or really however you need\nkeys = (\"Name\", \"Email\")\nvalues = (\"Buster\", \"cheetoh@johhnydepp.com\")",
    "detail": "MY_GISTS.f04630ef88.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "quarters",
    "kind": 5,
    "importPath": "MY_GISTS.f04630ef88.python-4-beginners",
    "description": "MY_GISTS.f04630ef88.python-4-beginners",
    "peekOfCode": "quarters = [\"First\", \"Second\", \"Third\", \"Fourth\"]\nprint(list(enumerate(quarters)))\nprint(list(enumerate(quarters, start=1)))\n# Zip takes list and combines them as key value pairs, or really however you need\nkeys = (\"Name\", \"Email\")\nvalues = (\"Buster\", \"cheetoh@johhnydepp.com\")\nzipped = zip(keys, values)\nprint(list(zipped))\n# You can zip more than 2\nx_coords = [0, 1, 2, 3, 4]",
    "detail": "MY_GISTS.f04630ef88.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "keys",
    "kind": 5,
    "importPath": "MY_GISTS.f04630ef88.python-4-beginners",
    "description": "MY_GISTS.f04630ef88.python-4-beginners",
    "peekOfCode": "keys = (\"Name\", \"Email\")\nvalues = (\"Buster\", \"cheetoh@johhnydepp.com\")\nzipped = zip(keys, values)\nprint(list(zipped))\n# You can zip more than 2\nx_coords = [0, 1, 2, 3, 4]\ny_coords = [4, 6, 10, 9, 10]\nz_coords = [20, 10, 5, 9, 1]\ncoords = zip(x_coords, y_coords, z_coords)\nprint(list(coords))",
    "detail": "MY_GISTS.f04630ef88.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "values",
    "kind": 5,
    "importPath": "MY_GISTS.f04630ef88.python-4-beginners",
    "description": "MY_GISTS.f04630ef88.python-4-beginners",
    "peekOfCode": "values = (\"Buster\", \"cheetoh@johhnydepp.com\")\nzipped = zip(keys, values)\nprint(list(zipped))\n# You can zip more than 2\nx_coords = [0, 1, 2, 3, 4]\ny_coords = [4, 6, 10, 9, 10]\nz_coords = [20, 10, 5, 9, 1]\ncoords = zip(x_coords, y_coords, z_coords)\nprint(list(coords))\n# Len reports the length of strings along with list and any other object data type",
    "detail": "MY_GISTS.f04630ef88.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "zipped",
    "kind": 5,
    "importPath": "MY_GISTS.f04630ef88.python-4-beginners",
    "description": "MY_GISTS.f04630ef88.python-4-beginners",
    "peekOfCode": "zipped = zip(keys, values)\nprint(list(zipped))\n# You can zip more than 2\nx_coords = [0, 1, 2, 3, 4]\ny_coords = [4, 6, 10, 9, 10]\nz_coords = [20, 10, 5, 9, 1]\ncoords = zip(x_coords, y_coords, z_coords)\nprint(list(coords))\n# Len reports the length of strings along with list and any other object data type\n# doing this to save myself some typing",
    "detail": "MY_GISTS.f04630ef88.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "x_coords",
    "kind": 5,
    "importPath": "MY_GISTS.f04630ef88.python-4-beginners",
    "description": "MY_GISTS.f04630ef88.python-4-beginners",
    "peekOfCode": "x_coords = [0, 1, 2, 3, 4]\ny_coords = [4, 6, 10, 9, 10]\nz_coords = [20, 10, 5, 9, 1]\ncoords = zip(x_coords, y_coords, z_coords)\nprint(list(coords))\n# Len reports the length of strings along with list and any other object data type\n# doing this to save myself some typing\ndef print_len(item):\n    return print(len(item))\nprint_len(\"Mike\")",
    "detail": "MY_GISTS.f04630ef88.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "y_coords",
    "kind": 5,
    "importPath": "MY_GISTS.f04630ef88.python-4-beginners",
    "description": "MY_GISTS.f04630ef88.python-4-beginners",
    "peekOfCode": "y_coords = [4, 6, 10, 9, 10]\nz_coords = [20, 10, 5, 9, 1]\ncoords = zip(x_coords, y_coords, z_coords)\nprint(list(coords))\n# Len reports the length of strings along with list and any other object data type\n# doing this to save myself some typing\ndef print_len(item):\n    return print(len(item))\nprint_len(\"Mike\")\nprint_len([1, 5, 2, 10, 3, 10])",
    "detail": "MY_GISTS.f04630ef88.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "z_coords",
    "kind": 5,
    "importPath": "MY_GISTS.f04630ef88.python-4-beginners",
    "description": "MY_GISTS.f04630ef88.python-4-beginners",
    "peekOfCode": "z_coords = [20, 10, 5, 9, 1]\ncoords = zip(x_coords, y_coords, z_coords)\nprint(list(coords))\n# Len reports the length of strings along with list and any other object data type\n# doing this to save myself some typing\ndef print_len(item):\n    return print(len(item))\nprint_len(\"Mike\")\nprint_len([1, 5, 2, 10, 3, 10])\nprint_len({1, 5, 10, 9, 10})  # 4 because there is a duplicate here (10)",
    "detail": "MY_GISTS.f04630ef88.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "coords",
    "kind": 5,
    "importPath": "MY_GISTS.f04630ef88.python-4-beginners",
    "description": "MY_GISTS.f04630ef88.python-4-beginners",
    "peekOfCode": "coords = zip(x_coords, y_coords, z_coords)\nprint(list(coords))\n# Len reports the length of strings along with list and any other object data type\n# doing this to save myself some typing\ndef print_len(item):\n    return print(len(item))\nprint_len(\"Mike\")\nprint_len([1, 5, 2, 10, 3, 10])\nprint_len({1, 5, 10, 9, 10})  # 4 because there is a duplicate here (10)\nprint_len((1, 4, 10, 9, 20))",
    "detail": "MY_GISTS.f04630ef88.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "user",
    "kind": 5,
    "importPath": "MY_GISTS.f04630ef88.python-4-beginners",
    "description": "MY_GISTS.f04630ef88.python-4-beginners",
    "peekOfCode": "user = {\"Name\": \"Bob\", \"Email\": \"bob@bob.com\"}\nprint(dir(user))\n# Importing packages and modules\n#  - Module - A Python code in a file or directory\n#  - Package - A module which is a directory containing an __init__.py file\n#  - Submodule - A module which is contained within a package\n#  - Name - An exported function, class, or variable in a module\n# Unlike JS, modules export ALL names contained within them without any special export key\n# Assuming we have the following package with four submodules\n#  math",
    "detail": "MY_GISTS.f04630ef88.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "squares",
    "kind": 5,
    "importPath": "MY_GISTS.f04630ef88.python-4-beginners",
    "description": "MY_GISTS.f04630ef88.python-4-beginners",
    "peekOfCode": "squares = []\nfor i in range(10):\n    squares.append(i ** 2)\nprint(squares)\n# value = i ** 2\n# loop = for i in range(10)\nsquares = [i ** 2 for i in range(10)]\nprint(list(squares))\nsentence = \"the rocket came back from mars\"\nvowels = [character for character in sentence if character in \"aeiou\"]",
    "detail": "MY_GISTS.f04630ef88.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "squares",
    "kind": 5,
    "importPath": "MY_GISTS.f04630ef88.python-4-beginners",
    "description": "MY_GISTS.f04630ef88.python-4-beginners",
    "peekOfCode": "squares = [i ** 2 for i in range(10)]\nprint(list(squares))\nsentence = \"the rocket came back from mars\"\nvowels = [character for character in sentence if character in \"aeiou\"]\nprint(vowels)\n# You can also use them on dictionaries. We can use the items() method\n# for the dictionary to loop through it getting the keys and values out at once\nperson = {\"name\": \"Corina\", \"age\": 32, \"height\": 1.4}\n# This loops through and capitalizes the first letter of all keys\nnewPerson = {key.title(): value for key, value in person.items()}",
    "detail": "MY_GISTS.f04630ef88.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "sentence",
    "kind": 5,
    "importPath": "MY_GISTS.f04630ef88.python-4-beginners",
    "description": "MY_GISTS.f04630ef88.python-4-beginners",
    "peekOfCode": "sentence = \"the rocket came back from mars\"\nvowels = [character for character in sentence if character in \"aeiou\"]\nprint(vowels)\n# You can also use them on dictionaries. We can use the items() method\n# for the dictionary to loop through it getting the keys and values out at once\nperson = {\"name\": \"Corina\", \"age\": 32, \"height\": 1.4}\n# This loops through and capitalizes the first letter of all keys\nnewPerson = {key.title(): value for key, value in person.items()}\nprint(list(newPerson.items()))",
    "detail": "MY_GISTS.f04630ef88.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "vowels",
    "kind": 5,
    "importPath": "MY_GISTS.f04630ef88.python-4-beginners",
    "description": "MY_GISTS.f04630ef88.python-4-beginners",
    "peekOfCode": "vowels = [character for character in sentence if character in \"aeiou\"]\nprint(vowels)\n# You can also use them on dictionaries. We can use the items() method\n# for the dictionary to loop through it getting the keys and values out at once\nperson = {\"name\": \"Corina\", \"age\": 32, \"height\": 1.4}\n# This loops through and capitalizes the first letter of all keys\nnewPerson = {key.title(): value for key, value in person.items()}\nprint(list(newPerson.items()))",
    "detail": "MY_GISTS.f04630ef88.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "person",
    "kind": 5,
    "importPath": "MY_GISTS.f04630ef88.python-4-beginners",
    "description": "MY_GISTS.f04630ef88.python-4-beginners",
    "peekOfCode": "person = {\"name\": \"Corina\", \"age\": 32, \"height\": 1.4}\n# This loops through and capitalizes the first letter of all keys\nnewPerson = {key.title(): value for key, value in person.items()}\nprint(list(newPerson.items()))",
    "detail": "MY_GISTS.f04630ef88.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "newPerson",
    "kind": 5,
    "importPath": "MY_GISTS.f04630ef88.python-4-beginners",
    "description": "MY_GISTS.f04630ef88.python-4-beginners",
    "peekOfCode": "newPerson = {key.title(): value for key, value in person.items()}\nprint(list(newPerson.items()))",
    "detail": "MY_GISTS.f04630ef88.python-4-beginners",
    "documentation": {}
  },
  {
    "label": "enumToString",
    "kind": 2,
    "importPath": "MY_GISTS.f07841d470.enum-2-string",
    "description": "MY_GISTS.f07841d470.enum-2-string",
    "peekOfCode": "def enumToString(constants, enum, elem):\n    all = constants.all_values(enum)\n    for e in all.keys():\n        if str(elem) == str(all[e]):\n            return e\n    return \"<unknown>\"",
    "detail": "MY_GISTS.f07841d470.enum-2-string",
    "documentation": {}
  },
  {
    "label": "add",
    "kind": 2,
    "importPath": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "description": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "peekOfCode": "def add(x, y):\n    print(\"x is {} and y is {}\".format(x, y))\n    return x + y  # Return values with a return statement\n# Calling functions with parameters\nadd(5, 6)  # => prints out \"x is 5 and y is 6\" and returns 11\n# Another way to call functions is with keyword arguments\nadd(y=6, x=5)  # Keyword arguments can arrive in any order.\n# You can define functions that take a variable number of\n# positional arguments\ndef varargs(*args):",
    "detail": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "documentation": {}
  },
  {
    "label": "varargs",
    "kind": 2,
    "importPath": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "description": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "peekOfCode": "def varargs(*args):\n    return args\nvarargs(1, 2, 3)  # => (1, 2, 3)\n# You can define functions that take a variable number of\n# keyword arguments, as well\ndef keyword_args(**kwargs):\n    return kwargs\n# Let's call it to see what happens\nkeyword_args(big=\"foot\", loch=\"ness\")  # => {\"big\": \"foot\", \"loch\": \"ness\"}\n# You can do both at once, if you like",
    "detail": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "documentation": {}
  },
  {
    "label": "keyword_args",
    "kind": 2,
    "importPath": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "description": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "peekOfCode": "def keyword_args(**kwargs):\n    return kwargs\n# Let's call it to see what happens\nkeyword_args(big=\"foot\", loch=\"ness\")  # => {\"big\": \"foot\", \"loch\": \"ness\"}\n# You can do both at once, if you like\ndef all_the_args(*args, **kwargs):\n    print(args)\n    print(kwargs)\n\"\"\"\nall_the_args(1, 2, a=3, b=4) prints:",
    "detail": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "documentation": {}
  },
  {
    "label": "all_the_args",
    "kind": 2,
    "importPath": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "description": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "peekOfCode": "def all_the_args(*args, **kwargs):\n    print(args)\n    print(kwargs)\n\"\"\"\nall_the_args(1, 2, a=3, b=4) prints:\n    (1, 2)\n    {\"a\": 3, \"b\": 4}\n\"\"\"\n# When calling functions, you can do the opposite of args/kwargs!\n# Use * to expand tuples and use ** to expand kwargs.",
    "detail": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "documentation": {}
  },
  {
    "label": "swap",
    "kind": 2,
    "importPath": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "description": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "peekOfCode": "def swap(x, y):\n    return y, x  # Return multiple values as a tuple without the parenthesis.\n                 # (Note: parenthesis have been excluded but can be included)\nx = 1\ny = 2\nx, y = swap(x, y)     # => x = 2, y = 1\n# (x, y) = swap(x,y)  # Again parenthesis have been excluded but can be included.\n# Function Scope\nx = 5\ndef set_x(num):",
    "detail": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "documentation": {}
  },
  {
    "label": "set_x",
    "kind": 2,
    "importPath": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "description": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "peekOfCode": "def set_x(num):\n    # Local var x not the same as global variable x\n    x = num    # => 43\n    print(x)   # => 43\ndef set_global_x(num):\n    global x\n    print(x)   # => 5\n    x = num    # global var x is now set to 6\n    print(x)   # => 6\nset_x(43)",
    "detail": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "documentation": {}
  },
  {
    "label": "set_global_x",
    "kind": 2,
    "importPath": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "description": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "peekOfCode": "def set_global_x(num):\n    global x\n    print(x)   # => 5\n    x = num    # global var x is now set to 6\n    print(x)   # => 6\nset_x(43)\nset_global_x(6)\n# Python has first class functions\ndef create_adder(x):\n    def adder(y):",
    "detail": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "documentation": {}
  },
  {
    "label": "create_adder",
    "kind": 2,
    "importPath": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "description": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "peekOfCode": "def create_adder(x):\n    def adder(y):\n        return x + y\n    return adder\nadd_10 = create_adder(10)\nadd_10(3)   # => 13\n# There are also anonymous functions\n(lambda x: x > 2)(3)                  # => True\n(lambda x, y: x ** 2 + y ** 2)(2, 1)  # => 5\n# There are built-in higher order functions",
    "detail": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "documentation": {}
  },
  {
    "label": "a",
    "kind": 5,
    "importPath": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "description": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "peekOfCode": "a = [1, 2, 3, 4]  # Point a at a new list, [1, 2, 3, 4]\nb = a             # Point b at what a is pointing to\nb is a            # => True, a and b refer to the same object\nb == a            # => True, a's and b's objects are equal\nb = [1, 2, 3, 4]  # Point b at a new list, [1, 2, 3, 4]\nb is a            # => False, a and b do not refer to the same object\nb == a            # => True, a's and b's objects are equal\n# Strings are created with \" or '\n\"This is a string.\"\n'This is also a string.'",
    "detail": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "documentation": {}
  },
  {
    "label": "b",
    "kind": 5,
    "importPath": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "description": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "peekOfCode": "b = a             # Point b at what a is pointing to\nb is a            # => True, a and b refer to the same object\nb == a            # => True, a's and b's objects are equal\nb = [1, 2, 3, 4]  # Point b at a new list, [1, 2, 3, 4]\nb is a            # => False, a and b do not refer to the same object\nb == a            # => True, a's and b's objects are equal\n# Strings are created with \" or '\n\"This is a string.\"\n'This is also a string.'\n# Strings can be added too! But try not to do this.",
    "detail": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "documentation": {}
  },
  {
    "label": "b",
    "kind": 5,
    "importPath": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "description": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "peekOfCode": "b = [1, 2, 3, 4]  # Point b at a new list, [1, 2, 3, 4]\nb is a            # => False, a and b do not refer to the same object\nb == a            # => True, a's and b's objects are equal\n# Strings are created with \" or '\n\"This is a string.\"\n'This is also a string.'\n# Strings can be added too! But try not to do this.\n\"Hello \" + \"world!\"  # => \"Hello world!\"\n# String literals (but not variables) can be concatenated without using '+'\n\"Hello \" \"world!\"    # => \"Hello world!\"",
    "detail": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "documentation": {}
  },
  {
    "label": "name",
    "kind": 5,
    "importPath": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "description": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "peekOfCode": "name = \"Reiko\"\nf\"She said her name is {name}.\" # => \"She said her name is Reiko\"\n# You can basically put any Python statement inside the braces and it will be output in the string.\nf\"{name} is {len(name)} characters long.\" # => \"Reiko is 5 characters long.\"\n# None is an object\nNone  # => None\n# Don't use the equality \"==\" symbol to compare objects to None\n# Use \"is\" instead. This checks for equality of object identity.\n\"etc\" is None  # => False\nNone is None   # => True",
    "detail": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "documentation": {}
  },
  {
    "label": "input_string_var",
    "kind": 5,
    "importPath": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "description": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "peekOfCode": "input_string_var = input(\"Enter some data: \") # Returns the data as a string\n# Note: In earlier versions of Python, input() method was named as raw_input()\n# There are no declarations, only assignments.\n# Convention is to use lower_case_with_underscores\nsome_var = 5\nsome_var  # => 5\n# Accessing a previously unassigned variable is an exception.\n# See Control Flow to learn more about exception handling.\nsome_unknown_var  # Raises a NameError\n# if can be used as an expression",
    "detail": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "documentation": {}
  },
  {
    "label": "some_var",
    "kind": 5,
    "importPath": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "description": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "peekOfCode": "some_var = 5\nsome_var  # => 5\n# Accessing a previously unassigned variable is an exception.\n# See Control Flow to learn more about exception handling.\nsome_unknown_var  # Raises a NameError\n# if can be used as an expression\n# Equivalent of C's '?:' ternary operator\n\"yahoo!\" if 3 > 2 else 2  # => \"yahoo!\"\n# Lists store sequences\nli = []",
    "detail": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "documentation": {}
  },
  {
    "label": "li",
    "kind": 5,
    "importPath": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "description": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "peekOfCode": "li = []\n# You can start with a prefilled list\nother_li = [4, 5, 6]\n# Add stuff to the end of a list with append\nli.append(1)    # li is now [1]\nli.append(2)    # li is now [1, 2]\nli.append(4)    # li is now [1, 2, 4]\nli.append(3)    # li is now [1, 2, 4, 3]\n# Remove from the end with pop\nli.pop()        # => 3 and li is now [1, 2, 4]",
    "detail": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "documentation": {}
  },
  {
    "label": "other_li",
    "kind": 5,
    "importPath": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "description": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "peekOfCode": "other_li = [4, 5, 6]\n# Add stuff to the end of a list with append\nli.append(1)    # li is now [1]\nli.append(2)    # li is now [1, 2]\nli.append(4)    # li is now [1, 2, 4]\nli.append(3)    # li is now [1, 2, 4, 3]\n# Remove from the end with pop\nli.pop()        # => 3 and li is now [1, 2, 4]\n# Let's put it back\nli.append(3)    # li is now [1, 2, 4, 3] again.",
    "detail": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "documentation": {}
  },
  {
    "label": "li2",
    "kind": 5,
    "importPath": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "description": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "peekOfCode": "li2 = li[:]  # => li2 = [1, 2, 4, 3] but (li2 is li) will result in false.\n# Remove arbitrary elements from a list with \"del\"\ndel li[2]  # li is now [1, 2, 3]\n# Remove first occurrence of a value\nli.remove(2)  # li is now [1, 3]\nli.remove(2)  # Raises a ValueError as 2 is not in the list\n# Insert an element at a specific index\nli.insert(1, 2)  # li is now [1, 2, 3] again\n# Get the index of the first item found matching the argument\nli.index(2)  # => 1",
    "detail": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "documentation": {}
  },
  {
    "label": "tup",
    "kind": 5,
    "importPath": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "description": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "peekOfCode": "tup = (1, 2, 3)\ntup[0]      # => 1\ntup[0] = 3  # Raises a TypeError\n# Note that a tuple of length one has to have a comma after the last element but\n# tuples of other lengths, even zero, do not.\ntype((1))   # => <class 'int'>\ntype((1,))  # => <class 'tuple'>\ntype(())    # => <class 'tuple'>\n# You can do most of the list operations on tuples too\nlen(tup)         # => 3",
    "detail": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "documentation": {}
  },
  {
    "label": "tup[0]",
    "kind": 5,
    "importPath": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "description": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "peekOfCode": "tup[0] = 3  # Raises a TypeError\n# Note that a tuple of length one has to have a comma after the last element but\n# tuples of other lengths, even zero, do not.\ntype((1))   # => <class 'int'>\ntype((1,))  # => <class 'tuple'>\ntype(())    # => <class 'tuple'>\n# You can do most of the list operations on tuples too\nlen(tup)         # => 3\ntup + (4, 5, 6)  # => (1, 2, 3, 4, 5, 6)\ntup[:2]          # => (1, 2)",
    "detail": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "documentation": {}
  },
  {
    "label": "empty_dict",
    "kind": 5,
    "importPath": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "description": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "peekOfCode": "empty_dict = {}\n# Here is a prefilled dictionary\nfilled_dict = {\"one\": 1, \"two\": 2, \"three\": 3}\n# Note keys for dictionaries have to be immutable types. This is to ensure that\n# the key can be converted to a constant hash value for quick look-ups.\n# Immutable types include ints, floats, strings, tuples.\ninvalid_dict = {[1,2,3]: \"123\"}  # => Raises a TypeError: unhashable type: 'list'\nvalid_dict = {(1,2,3):[1,2,3]}   # Values can be of any type, however.\n# Look up values with []\nfilled_dict[\"one\"]  # => 1",
    "detail": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "documentation": {}
  },
  {
    "label": "filled_dict",
    "kind": 5,
    "importPath": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "description": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "peekOfCode": "filled_dict = {\"one\": 1, \"two\": 2, \"three\": 3}\n# Note keys for dictionaries have to be immutable types. This is to ensure that\n# the key can be converted to a constant hash value for quick look-ups.\n# Immutable types include ints, floats, strings, tuples.\ninvalid_dict = {[1,2,3]: \"123\"}  # => Raises a TypeError: unhashable type: 'list'\nvalid_dict = {(1,2,3):[1,2,3]}   # Values can be of any type, however.\n# Look up values with []\nfilled_dict[\"one\"]  # => 1\n# Get all keys as an iterable with \"keys()\". We need to wrap the call in list()\n# to turn it into a list. We'll talk about those later.  Note - for Python",
    "detail": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "documentation": {}
  },
  {
    "label": "invalid_dict",
    "kind": 5,
    "importPath": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "description": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "peekOfCode": "invalid_dict = {[1,2,3]: \"123\"}  # => Raises a TypeError: unhashable type: 'list'\nvalid_dict = {(1,2,3):[1,2,3]}   # Values can be of any type, however.\n# Look up values with []\nfilled_dict[\"one\"]  # => 1\n# Get all keys as an iterable with \"keys()\". We need to wrap the call in list()\n# to turn it into a list. We'll talk about those later.  Note - for Python\n# versions <3.7, dictionary key ordering is not guaranteed. Your results might\n# not match the example below exactly. However, as of Python 3.7, dictionary\n# items maintain the order at which they are inserted into the dictionary.\nlist(filled_dict.keys())  # => [\"three\", \"two\", \"one\"] in Python <3.7",
    "detail": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "documentation": {}
  },
  {
    "label": "valid_dict",
    "kind": 5,
    "importPath": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "description": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "peekOfCode": "valid_dict = {(1,2,3):[1,2,3]}   # Values can be of any type, however.\n# Look up values with []\nfilled_dict[\"one\"]  # => 1\n# Get all keys as an iterable with \"keys()\". We need to wrap the call in list()\n# to turn it into a list. We'll talk about those later.  Note - for Python\n# versions <3.7, dictionary key ordering is not guaranteed. Your results might\n# not match the example below exactly. However, as of Python 3.7, dictionary\n# items maintain the order at which they are inserted into the dictionary.\nlist(filled_dict.keys())  # => [\"three\", \"two\", \"one\"] in Python <3.7\nlist(filled_dict.keys())  # => [\"one\", \"two\", \"three\"] in Python 3.7+",
    "detail": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "documentation": {}
  },
  {
    "label": "filled_dict[\"four\"]",
    "kind": 5,
    "importPath": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "description": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "peekOfCode": "filled_dict[\"four\"] = 4         # another way to add to dict\n# Remove keys from a dictionary with del\ndel filled_dict[\"one\"]  # Removes the key \"one\" from filled dict\n# From Python 3.5 you can also use the additional unpacking options\n{'a': 1, **{'b': 2}}  # => {'a': 1, 'b': 2}\n{'a': 1, **{'a': 2}}  # => {'a': 2}\n# Sets store ... well sets\nempty_set = set()\n# Initialize a set with a bunch of values. Yeah, it looks a bit like a dict. Sorry.\nsome_set = {1, 1, 2, 2, 3, 4}  # some_set is now {1, 2, 3, 4}",
    "detail": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "documentation": {}
  },
  {
    "label": "empty_set",
    "kind": 5,
    "importPath": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "description": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "peekOfCode": "empty_set = set()\n# Initialize a set with a bunch of values. Yeah, it looks a bit like a dict. Sorry.\nsome_set = {1, 1, 2, 2, 3, 4}  # some_set is now {1, 2, 3, 4}\n# Similar to keys of a dictionary, elements of a set have to be immutable.\ninvalid_set = {[1], 1}  # => Raises a TypeError: unhashable type: 'list'\nvalid_set = {(1,), 1}\n# Add one more item to the set\nfilled_set = some_set\nfilled_set.add(5)  # filled_set is now {1, 2, 3, 4, 5}\n# Sets do not have duplicate elements",
    "detail": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "documentation": {}
  },
  {
    "label": "some_set",
    "kind": 5,
    "importPath": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "description": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "peekOfCode": "some_set = {1, 1, 2, 2, 3, 4}  # some_set is now {1, 2, 3, 4}\n# Similar to keys of a dictionary, elements of a set have to be immutable.\ninvalid_set = {[1], 1}  # => Raises a TypeError: unhashable type: 'list'\nvalid_set = {(1,), 1}\n# Add one more item to the set\nfilled_set = some_set\nfilled_set.add(5)  # filled_set is now {1, 2, 3, 4, 5}\n# Sets do not have duplicate elements\nfilled_set.add(5)  # it remains as before {1, 2, 3, 4, 5}\n# Do set intersection with &",
    "detail": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "documentation": {}
  },
  {
    "label": "invalid_set",
    "kind": 5,
    "importPath": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "description": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "peekOfCode": "invalid_set = {[1], 1}  # => Raises a TypeError: unhashable type: 'list'\nvalid_set = {(1,), 1}\n# Add one more item to the set\nfilled_set = some_set\nfilled_set.add(5)  # filled_set is now {1, 2, 3, 4, 5}\n# Sets do not have duplicate elements\nfilled_set.add(5)  # it remains as before {1, 2, 3, 4, 5}\n# Do set intersection with &\nother_set = {3, 4, 5, 6}\nfilled_set & other_set  # => {3, 4, 5}",
    "detail": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "documentation": {}
  },
  {
    "label": "valid_set",
    "kind": 5,
    "importPath": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "description": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "peekOfCode": "valid_set = {(1,), 1}\n# Add one more item to the set\nfilled_set = some_set\nfilled_set.add(5)  # filled_set is now {1, 2, 3, 4, 5}\n# Sets do not have duplicate elements\nfilled_set.add(5)  # it remains as before {1, 2, 3, 4, 5}\n# Do set intersection with &\nother_set = {3, 4, 5, 6}\nfilled_set & other_set  # => {3, 4, 5}\n# Do set union with |",
    "detail": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "documentation": {}
  },
  {
    "label": "filled_set",
    "kind": 5,
    "importPath": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "description": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "peekOfCode": "filled_set = some_set\nfilled_set.add(5)  # filled_set is now {1, 2, 3, 4, 5}\n# Sets do not have duplicate elements\nfilled_set.add(5)  # it remains as before {1, 2, 3, 4, 5}\n# Do set intersection with &\nother_set = {3, 4, 5, 6}\nfilled_set & other_set  # => {3, 4, 5}\n# Do set union with |\nfilled_set | other_set  # => {1, 2, 3, 4, 5, 6}\n# Do set difference with -",
    "detail": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "documentation": {}
  },
  {
    "label": "other_set",
    "kind": 5,
    "importPath": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "description": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "peekOfCode": "other_set = {3, 4, 5, 6}\nfilled_set & other_set  # => {3, 4, 5}\n# Do set union with |\nfilled_set | other_set  # => {1, 2, 3, 4, 5, 6}\n# Do set difference with -\n{1, 2, 3, 4} - {2, 3, 5}  # => {1, 4}\n# Do set symmetric difference with ^\n{1, 2, 3, 4} ^ {2, 3, 5}  # => {1, 4, 5}\n# Check if set on the left is a superset of set on the right\n{1, 2} >= {1, 2, 3} # => False",
    "detail": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "documentation": {}
  },
  {
    "label": "some_var",
    "kind": 5,
    "importPath": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "description": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "peekOfCode": "some_var = 5\n# Here is an if statement. Indentation is significant in Python!\n# Convention is to use four spaces, not tabs.\n# This prints \"some_var is smaller than 10\"\nif some_var > 10:\n    print(\"some_var is totally bigger than 10.\")\nelif some_var < 10:    # This elif clause is optional.\n    print(\"some_var is smaller than 10.\")\nelse:                  # This is optional too.\n    print(\"some_var is indeed 10.\")",
    "detail": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "documentation": {}
  },
  {
    "label": "list",
    "kind": 5,
    "importPath": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "description": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "peekOfCode": "list = [\"dog\", \"cat\", \"mouse\"]\nfor i, value in enumerate(list):\n    print(i, value)\n\"\"\"\nWhile loops go until a condition is no longer met.\nprints:\n    0\n    1\n    2\n    3",
    "detail": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "documentation": {}
  },
  {
    "label": "x",
    "kind": 5,
    "importPath": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "description": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "peekOfCode": "x = 0\nwhile x < 4:\n    print(x)\n    x += 1  # Shorthand for x = x + 1\n# Handle exceptions with a try/except block\ntry:\n    # Use \"raise\" to raise an error\n    raise IndexError(\"This is an index error\")\nexcept IndexError as e:\n    pass                 # Pass is just a no-op. Usually you would do recovery here.",
    "detail": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "documentation": {}
  },
  {
    "label": "contents",
    "kind": 5,
    "importPath": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "description": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "peekOfCode": "contents = {\"aa\": 12, \"bb\": 21}\nwith open(\"myfile1.txt\", \"w+\") as file:\n    file.write(str(contents))        # writes a string to a file\nwith open(\"myfile2.txt\", \"w+\") as file:\n    file.write(json.dumps(contents)) # writes an object to a file\n# Reading from a file\nwith open('myfile1.txt', \"r+\") as file:\n    contents = file.read()           # reads a string from a file\nprint(contents)\n# print: {\"aa\": 12, \"bb\": 21}",
    "detail": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "documentation": {}
  },
  {
    "label": "filled_dict",
    "kind": 5,
    "importPath": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "description": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "peekOfCode": "filled_dict = {\"one\": 1, \"two\": 2, \"three\": 3}\nour_iterable = filled_dict.keys()\nprint(our_iterable)  # => dict_keys(['one', 'two', 'three']). This is an object that implements our Iterable interface.\n# We can loop over it.\nfor i in our_iterable:\n    print(i)  # Prints one, two, three\n# However we cannot address elements by index.\nour_iterable[1]  # Raises a TypeError\n# An iterable is an object that knows how to create an iterator.\nour_iterator = iter(our_iterable)",
    "detail": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "documentation": {}
  },
  {
    "label": "our_iterable",
    "kind": 5,
    "importPath": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "description": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "peekOfCode": "our_iterable = filled_dict.keys()\nprint(our_iterable)  # => dict_keys(['one', 'two', 'three']). This is an object that implements our Iterable interface.\n# We can loop over it.\nfor i in our_iterable:\n    print(i)  # Prints one, two, three\n# However we cannot address elements by index.\nour_iterable[1]  # Raises a TypeError\n# An iterable is an object that knows how to create an iterator.\nour_iterator = iter(our_iterable)\n# Our iterator is an object that can remember the state as we traverse through it.",
    "detail": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "documentation": {}
  },
  {
    "label": "our_iterator",
    "kind": 5,
    "importPath": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "description": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "peekOfCode": "our_iterator = iter(our_iterable)\n# Our iterator is an object that can remember the state as we traverse through it.\n# We get the next object with \"next()\".\nnext(our_iterator)  # => \"one\"\n# It maintains state as we iterate.\nnext(our_iterator)  # => \"two\"\nnext(our_iterator)  # => \"three\"\n# After the iterator has returned all of its data, it raises a StopIteration exception\nnext(our_iterator)  # Raises StopIteration\n# We can also loop over it, in fact, \"for\" does this implicitly!",
    "detail": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "documentation": {}
  },
  {
    "label": "our_iterator",
    "kind": 5,
    "importPath": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "description": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "peekOfCode": "our_iterator = iter(our_iterable)\nfor i in our_iterator:\n    print(i)  # Prints one, two, three\n# You can grab all the elements of an iterable or iterator by calling list() on it.\nlist(our_iterable)  # => Returns [\"one\", \"two\", \"three\"]\nlist(our_iterator)  # => Returns [] because state is saved\n####################################################\n## 4. Functions\n####################################################\n# Use \"def\" to create new functions",
    "detail": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "documentation": {}
  },
  {
    "label": "args",
    "kind": 5,
    "importPath": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "description": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "peekOfCode": "args = (1, 2, 3, 4)\nkwargs = {\"a\": 3, \"b\": 4}\nall_the_args(*args)            # equivalent to all_the_args(1, 2, 3, 4)\nall_the_args(**kwargs)         # equivalent to all_the_args(a=3, b=4)\nall_the_args(*args, **kwargs)  # equivalent to all_the_args(1, 2, 3, 4, a=3, b=4)\n# Returning multiple values (with tuple assignments)\ndef swap(x, y):\n    return y, x  # Return multiple values as a tuple without the parenthesis.\n                 # (Note: parenthesis have been excluded but can be included)\nx = 1",
    "detail": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "documentation": {}
  },
  {
    "label": "kwargs",
    "kind": 5,
    "importPath": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "description": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "peekOfCode": "kwargs = {\"a\": 3, \"b\": 4}\nall_the_args(*args)            # equivalent to all_the_args(1, 2, 3, 4)\nall_the_args(**kwargs)         # equivalent to all_the_args(a=3, b=4)\nall_the_args(*args, **kwargs)  # equivalent to all_the_args(1, 2, 3, 4, a=3, b=4)\n# Returning multiple values (with tuple assignments)\ndef swap(x, y):\n    return y, x  # Return multiple values as a tuple without the parenthesis.\n                 # (Note: parenthesis have been excluded but can be included)\nx = 1\ny = 2",
    "detail": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "documentation": {}
  },
  {
    "label": "x",
    "kind": 5,
    "importPath": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "description": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "peekOfCode": "x = 1\ny = 2\nx, y = swap(x, y)     # => x = 2, y = 1\n# (x, y) = swap(x,y)  # Again parenthesis have been excluded but can be included.\n# Function Scope\nx = 5\ndef set_x(num):\n    # Local var x not the same as global variable x\n    x = num    # => 43\n    print(x)   # => 43",
    "detail": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "documentation": {}
  },
  {
    "label": "y",
    "kind": 5,
    "importPath": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "description": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "peekOfCode": "y = 2\nx, y = swap(x, y)     # => x = 2, y = 1\n# (x, y) = swap(x,y)  # Again parenthesis have been excluded but can be included.\n# Function Scope\nx = 5\ndef set_x(num):\n    # Local var x not the same as global variable x\n    x = num    # => 43\n    print(x)   # => 43\ndef set_global_x(num):",
    "detail": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "documentation": {}
  },
  {
    "label": "x",
    "kind": 5,
    "importPath": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "description": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "peekOfCode": "x = 5\ndef set_x(num):\n    # Local var x not the same as global variable x\n    x = num    # => 43\n    print(x)   # => 43\ndef set_global_x(num):\n    global x\n    print(x)   # => 5\n    x = num    # global var x is now set to 6\n    print(x)   # => 6",
    "detail": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "documentation": {}
  },
  {
    "label": "add_10",
    "kind": 5,
    "importPath": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "description": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "peekOfCode": "add_10 = create_adder(10)\nadd_10(3)   # => 13\n# There are also anonymous functions\n(lambda x: x > 2)(3)                  # => True\n(lambda x, y: x ** 2 + y ** 2)(2, 1)  # => 5\n# There are built-in higher order functions\nlist(map(add_10, [1, 2, 3]))          # => [11, 12, 13]\nlist(map(max, [1, 2, 3], [4, 2, 1]))  # => [4, 2, 3]\nlist(filter(lambda x: x > 5, [3, 4, 5, 6, 7]))  # => [6, 7]\n# We can use list comprehensions for nice maps and filters",
    "detail": "MY_GISTS.f246e9513b.short-py-cheatsheet",
    "documentation": {}
  },
  {
    "label": "myset",
    "kind": 5,
    "importPath": "MY_GISTS.fd055be641.set1",
    "description": "MY_GISTS.fd055be641.set1",
    "peekOfCode": "myset = set([1,2,3,3,3])\n# set initialization using {}\nmyset = {1,2,3,3,3}\n# iteration of set\nfor ele in myset:\n  print(ele)\n# check if ele in set:\nprint(True if ele in myset else False)\n# add an element to set:\nmyset.add(ele)",
    "detail": "MY_GISTS.fd055be641.set1",
    "documentation": {}
  },
  {
    "label": "myset",
    "kind": 5,
    "importPath": "MY_GISTS.fd055be641.set1",
    "description": "MY_GISTS.fd055be641.set1",
    "peekOfCode": "myset = {1,2,3,3,3}\n# iteration of set\nfor ele in myset:\n  print(ele)\n# check if ele in set:\nprint(True if ele in myset else False)\n# add an element to set:\nmyset.add(ele)\n# remove an element from set\nmyset.remove(ele)",
    "detail": "MY_GISTS.fd055be641.set1",
    "documentation": {}
  },
  {
    "label": "myset1",
    "kind": 5,
    "importPath": "MY_GISTS.fd055be641.set2",
    "description": "MY_GISTS.fd055be641.set2",
    "peekOfCode": "myset1 = {1,2,3}\nmyset2 = {1,2,4,5}\n# union\nmyset = myset1.union(myset2)\n# intersection\nmyset = myset1.intersection(myset2)\n# difference\nmyset = myset1.difference(myset2)",
    "detail": "MY_GISTS.fd055be641.set2",
    "documentation": {}
  },
  {
    "label": "myset2",
    "kind": 5,
    "importPath": "MY_GISTS.fd055be641.set2",
    "description": "MY_GISTS.fd055be641.set2",
    "peekOfCode": "myset2 = {1,2,4,5}\n# union\nmyset = myset1.union(myset2)\n# intersection\nmyset = myset1.intersection(myset2)\n# difference\nmyset = myset1.difference(myset2)",
    "detail": "MY_GISTS.fd055be641.set2",
    "documentation": {}
  },
  {
    "label": "myset",
    "kind": 5,
    "importPath": "MY_GISTS.fd055be641.set2",
    "description": "MY_GISTS.fd055be641.set2",
    "peekOfCode": "myset = myset1.union(myset2)\n# intersection\nmyset = myset1.intersection(myset2)\n# difference\nmyset = myset1.difference(myset2)",
    "detail": "MY_GISTS.fd055be641.set2",
    "documentation": {}
  },
  {
    "label": "myset",
    "kind": 5,
    "importPath": "MY_GISTS.fd055be641.set2",
    "description": "MY_GISTS.fd055be641.set2",
    "peekOfCode": "myset = myset1.intersection(myset2)\n# difference\nmyset = myset1.difference(myset2)",
    "detail": "MY_GISTS.fd055be641.set2",
    "documentation": {}
  },
  {
    "label": "myset",
    "kind": 5,
    "importPath": "MY_GISTS.fd055be641.set2",
    "description": "MY_GISTS.fd055be641.set2",
    "peekOfCode": "myset = myset1.difference(myset2)",
    "detail": "MY_GISTS.fd055be641.set2",
    "documentation": {}
  },
  {
    "label": "AngryBird",
    "kind": 6,
    "importPath": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "description": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "peekOfCode": "class AngryBird:\n    # Slots optimize property access and memory usage and prevent you\n    # from arbitrarily assigning new properties the instance\n    __slots__ = [\"_x\", \"_y\"]\n    # Constructor\n    def __init__(self, x=0, y=0):\n        # Doc String\n        \"\"\"\n        Construct a new AngryBird by setting it's position to (0, 0)\n        \"\"\"",
    "detail": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "say_hi",
    "kind": 2,
    "importPath": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "description": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "peekOfCode": "def say_hi(name):\n    \"\"\"<---- Multi-Line Comments and Docstrings\n    This is where you put your content for help() to inform the user\n    about what your function does and how to use it\n    \"\"\"\n    print(f\"Hello {name}!\")\nprint(say_hi(\"Bryan\"))  # Should get the print inside the function, then None\n# Boolean Values\n# Work the same as in JS, except they are title case: True and False\na = True",
    "detail": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "printCopyright",
    "kind": 2,
    "importPath": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "description": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "peekOfCode": "def printCopyright():\n    print(\"Copyright 2021, Bgoonz\")\n# Lambdas are one liners! (Should be at least, you can use parenthesis to disobey)\navg = lambda num1, num2: print(num1 + num2)\navg(1, 2)\n# Calling it with keyword arguments, order does not matter\navg(num2=20, num1=1252)\nprintCopyright()\n# We can give parameters default arguments like JS\ndef greeting(name, saying=\"Hello\"):",
    "detail": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "greeting",
    "kind": 2,
    "importPath": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "description": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "peekOfCode": "def greeting(name, saying=\"Hello\"):\n    print(saying, name)\ngreeting(\"Mike\")  # Hello Mike\ngreeting(\"Bryan\", saying=\"Hello there...\")\n# A common gotcha is using a mutable object for a default parameter\n# All invocations of the function reference the same mutable object\ndef append_item(item_name, item_list=[]):  # Will it obey and give us a new list?\n    item_list.append(item_name)\n    return item_list\n# Uses same item list unless otherwise stated which is counterintuitive",
    "detail": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "append_item",
    "kind": 2,
    "importPath": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "description": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "peekOfCode": "def append_item(item_name, item_list=[]):  # Will it obey and give us a new list?\n    item_list.append(item_name)\n    return item_list\n# Uses same item list unless otherwise stated which is counterintuitive\nprint(append_item(\"notebook\"))\nprint(append_item(\"notebook\"))\nprint(append_item(\"notebook\", []))\n# Errors - Unlike JS, if we pass the incorrect amount of arguments to a function,\n#          it will throw an error\n# avg(1)  # TypeError",
    "detail": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "add",
    "kind": 2,
    "importPath": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "description": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "peekOfCode": "def add(a, b, *args):\n    # args is a tuple of the rest of the arguments\n    total = a + b\n    for n in args:\n        total += n\n    return total\nprint(add(1, 2))  # args is None, returns 3\nprint(add(1, 2, 3, 4, 5, 6))  # args is (3, 4, 5, 6), returns 21\n# Variable Length Keyword Arguments\ndef print_names_and_countries(greeting, **kwargs):",
    "detail": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "print_names_and_countries",
    "kind": 2,
    "importPath": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "description": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "peekOfCode": "def print_names_and_countries(greeting, **kwargs):\n    # kwargs is a dictionary of the rest of the keyword arguments\n    for k, v in kwargs.items():\n        print(greeting, k, \"from\", v)\nprint_names_and_countries(\n    \"Hey there\", Monica=\"Sweden\", Mike=\"The United States\", Mark=\"China\"\n)\n# We can combine all of these together\ndef example2(arg1, arg2, *args, kw_1=\"cheese\", kw_2=\"horse\", **kwargs):\n    pass",
    "detail": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "example2",
    "kind": 2,
    "importPath": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "description": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "peekOfCode": "def example2(arg1, arg2, *args, kw_1=\"cheese\", kw_2=\"horse\", **kwargs):\n    pass\n# Lists are mutable arrays\nempty_list = []\nroomates = [\"Beau\", \"Delynn\"]\n# List built-in function makes a list too\nspecials = list()\n# We can use 'in' to test if something is in the list, like 'includes' in JS\nprint(1 in [1, 2, 4])  # True\nprint(2 in [1, 3, 5])  # False",
    "detail": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "toUpper",
    "kind": 2,
    "importPath": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "description": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "peekOfCode": "def toUpper(str):\n    return str.upper()\nupperCased = map(toUpper, [\"a\", \"b\", \"c\", \"d\"])\nprint(list(upperCased))\n# Sorted\nsorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"])\nprint(list(sorted_items))  # Notice uppercase comes before lowercase\n# Using a key function to control the sorting and make it case insensitive\nsorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"], key=str.lower)\nprint(sorted_items)",
    "detail": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "add",
    "kind": 2,
    "importPath": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "description": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "peekOfCode": "def add(num1, num2):\n    return num1 + num2\n# Notice the . syntax because this package can import it's own submodules.\n# Our __init__.py has the following files\n# This imports the 'add' function\n# And now it's also re-exported in here as well\n# from .addition import add\n# These import and re-export the rest of the functions from the submodule\n# from .subtraction import subtract\n# from .division import divide",
    "detail": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "a",
    "kind": 5,
    "importPath": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "description": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "peekOfCode": "a = True\nb = False\n# Logical Operators\n# ! = not, || = or, && = and\nprint(True and True)\nprint(True and not True)\nprint(True or True)\n# Truthiness - Everything is True except...\n# False - None, False, '', [], (), set(), range(0)\n# Number Values",
    "detail": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "b",
    "kind": 5,
    "importPath": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "description": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "peekOfCode": "b = False\n# Logical Operators\n# ! = not, || = or, && = and\nprint(True and True)\nprint(True and not True)\nprint(True or True)\n# Truthiness - Everything is True except...\n# False - None, False, '', [], (), set(), range(0)\n# Number Values\n# Integers are numbers without a floating decimal point",
    "detail": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "name",
    "kind": 5,
    "importPath": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "description": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "peekOfCode": "name = \"Bryan\"\nfor i in range(len(name)):\n    print(name[i])  # B, r, y, a, n\n# We can index starting from the end as well, with negatives\noccupation = \"Full Stack Software Engineer\"\nprint(occupation[-3])  # e\n# We can also get ranges in the index with the [start:stop:step] syntax\nprint(occupation[0:4:1])  # step and stop are optional, stop is exclusive\nprint(occupation[::4])  # beginning to end, every 4th letter\nprint(occupation[4:14:2])  # Let's get weird with it!",
    "detail": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "occupation",
    "kind": 5,
    "importPath": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "description": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "peekOfCode": "occupation = \"Full Stack Software Engineer\"\nprint(occupation[-3])  # e\n# We can also get ranges in the index with the [start:stop:step] syntax\nprint(occupation[0:4:1])  # step and stop are optional, stop is exclusive\nprint(occupation[::4])  # beginning to end, every 4th letter\nprint(occupation[4:14:2])  # Let's get weird with it!\n# NOTE: Indexing out of range will give you an IndexError\n# We can also get the index og things with the .index() method, similar to indexOf()\nprint(occupation.index(\"Stack\"))\nprint([\"Mike\", \"Barry\", \"Cole\", \"James\", \"Mark\"].index(\"Cole\"))",
    "detail": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "first_name",
    "kind": 5,
    "importPath": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "description": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "peekOfCode": "first_name = \"Bryan\"\nlast_name = \"Guner\"\nprint(\"Your name is {0} {1}\".format(first_name, last_name))\n# Useful String Methods\nprint(\"Hello\".upper())  # HELLO\nprint(\"Hello\".lower())  # hello\nprint(\"HELLO\".islower())  # False\nprint(\"HELLO\".isupper())  # True\nprint(\"Hello\".startswith(\"he\"))  # False\nprint(\"Hello\".endswith(\"lo\"))  # True",
    "detail": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "last_name",
    "kind": 5,
    "importPath": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "description": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "peekOfCode": "last_name = \"Guner\"\nprint(\"Your name is {0} {1}\".format(first_name, last_name))\n# Useful String Methods\nprint(\"Hello\".upper())  # HELLO\nprint(\"Hello\".lower())  # hello\nprint(\"HELLO\".islower())  # False\nprint(\"HELLO\".isupper())  # True\nprint(\"Hello\".startswith(\"he\"))  # False\nprint(\"Hello\".endswith(\"lo\"))  # True\nprint(\"Hello There\".split())  # [Hello, There]",
    "detail": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "a",
    "kind": 5,
    "importPath": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "description": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "peekOfCode": "a = 3\nb = a\nc = \"heyoo\"\nb = [\"reassignment\", \"is\", \"fine\", \"G!\"]\n# Comparison Operators - Python uses the same equality operators as JS, but no ===\n# < - Less than\n# > - Greater than\n# <= - Less than or Equal\n# >= - Greater than or Equal\n# == - Equal to",
    "detail": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "b",
    "kind": 5,
    "importPath": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "description": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "peekOfCode": "b = a\nc = \"heyoo\"\nb = [\"reassignment\", \"is\", \"fine\", \"G!\"]\n# Comparison Operators - Python uses the same equality operators as JS, but no ===\n# < - Less than\n# > - Greater than\n# <= - Less than or Equal\n# >= - Greater than or Equal\n# == - Equal to\n# != - Not equal to",
    "detail": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "c",
    "kind": 5,
    "importPath": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "description": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "peekOfCode": "c = \"heyoo\"\nb = [\"reassignment\", \"is\", \"fine\", \"G!\"]\n# Comparison Operators - Python uses the same equality operators as JS, but no ===\n# < - Less than\n# > - Greater than\n# <= - Less than or Equal\n# >= - Greater than or Equal\n# == - Equal to\n# != - Not equal to\n# is - Refers to exact same memory location",
    "detail": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "b",
    "kind": 5,
    "importPath": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "description": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "peekOfCode": "b = [\"reassignment\", \"is\", \"fine\", \"G!\"]\n# Comparison Operators - Python uses the same equality operators as JS, but no ===\n# < - Less than\n# > - Greater than\n# <= - Less than or Equal\n# >= - Greater than or Equal\n# == - Equal to\n# != - Not equal to\n# is - Refers to exact same memory location\n# not - !",
    "detail": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "lst",
    "kind": 5,
    "importPath": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "description": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "peekOfCode": "lst = [1, 2, 3, 4]\nfor i in lst:\n    print(i)\n# Looping over a dictionary\nspam = {\"color\": \"red\", \"age\": 42, \"items\": [(1, \"hey\"), (2, \"hooo!\")]}\nfor v in spam.values():\n    print(v)\n# Loop over a list of tuples and destructuring the values\n# Assuming spam.items returns a list of tuples each containing two items (k, v)\nfor k, v in spam.items():",
    "detail": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "spam",
    "kind": 5,
    "importPath": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "description": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "peekOfCode": "spam = {\"color\": \"red\", \"age\": 42, \"items\": [(1, \"hey\"), (2, \"hooo!\")]}\nfor v in spam.values():\n    print(v)\n# Loop over a list of tuples and destructuring the values\n# Assuming spam.items returns a list of tuples each containing two items (k, v)\nfor k, v in spam.items():\n    print(f\"{k}: {v}\")\n# While loops as long as the condition is True\n#  - Exit loop early with break\n#  - Exit iteration early with continue",
    "detail": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "spam",
    "kind": 5,
    "importPath": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "description": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "peekOfCode": "spam = 0\nwhile True:\n    print(\"Sike That's the wrong Numba\")\n    spam += 1\n    if spam < 5:\n        continue\n    break\n# Functions - use def keyword to define a function in Python\ndef printCopyright():\n    print(\"Copyright 2021, Bgoonz\")",
    "detail": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "avg",
    "kind": 5,
    "importPath": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "description": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "peekOfCode": "avg = lambda num1, num2: print(num1 + num2)\navg(1, 2)\n# Calling it with keyword arguments, order does not matter\navg(num2=20, num1=1252)\nprintCopyright()\n# We can give parameters default arguments like JS\ndef greeting(name, saying=\"Hello\"):\n    print(saying, name)\ngreeting(\"Mike\")  # Hello Mike\ngreeting(\"Bryan\", saying=\"Hello there...\")",
    "detail": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "empty_list",
    "kind": 5,
    "importPath": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "description": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "peekOfCode": "empty_list = []\nroomates = [\"Beau\", \"Delynn\"]\n# List built-in function makes a list too\nspecials = list()\n# We can use 'in' to test if something is in the list, like 'includes' in JS\nprint(1 in [1, 2, 4])  # True\nprint(2 in [1, 3, 5])  # False\n# Dictionaries - Similar to JS POJO's or Map, containing key value pairs\na = {\"one\": 1, \"two\": 2, \"three\": 3}\nb = dict(one=1, two=2, three=3)",
    "detail": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "roomates",
    "kind": 5,
    "importPath": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "description": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "peekOfCode": "roomates = [\"Beau\", \"Delynn\"]\n# List built-in function makes a list too\nspecials = list()\n# We can use 'in' to test if something is in the list, like 'includes' in JS\nprint(1 in [1, 2, 4])  # True\nprint(2 in [1, 3, 5])  # False\n# Dictionaries - Similar to JS POJO's or Map, containing key value pairs\na = {\"one\": 1, \"two\": 2, \"three\": 3}\nb = dict(one=1, two=2, three=3)\n# Can use 'in' on dictionaries too (for keys)",
    "detail": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "specials",
    "kind": 5,
    "importPath": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "description": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "peekOfCode": "specials = list()\n# We can use 'in' to test if something is in the list, like 'includes' in JS\nprint(1 in [1, 2, 4])  # True\nprint(2 in [1, 3, 5])  # False\n# Dictionaries - Similar to JS POJO's or Map, containing key value pairs\na = {\"one\": 1, \"two\": 2, \"three\": 3}\nb = dict(one=1, two=2, three=3)\n# Can use 'in' on dictionaries too (for keys)\nprint(\"one\" in a)  # True\nprint(3 in b)  # False",
    "detail": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "a",
    "kind": 5,
    "importPath": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "description": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "peekOfCode": "a = {\"one\": 1, \"two\": 2, \"three\": 3}\nb = dict(one=1, two=2, three=3)\n# Can use 'in' on dictionaries too (for keys)\nprint(\"one\" in a)  # True\nprint(3 in b)  # False\n# Sets - Just like JS, unordered collection of distinct objects\nbedroom = {\"bed\", \"tv\", \"computer\", \"clothes\", \"playstation 4\"}\n# bedroom = set(\"bed\", \"tv\", \"computer\", \"clothes\", \"playstation 5\")\nschool_bag = set(\n    [\"book\", \"paper\", \"pencil\", \"pencil\", \"book\", \"book\", \"book\", \"eraser\"]",
    "detail": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "b",
    "kind": 5,
    "importPath": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "description": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "peekOfCode": "b = dict(one=1, two=2, three=3)\n# Can use 'in' on dictionaries too (for keys)\nprint(\"one\" in a)  # True\nprint(3 in b)  # False\n# Sets - Just like JS, unordered collection of distinct objects\nbedroom = {\"bed\", \"tv\", \"computer\", \"clothes\", \"playstation 4\"}\n# bedroom = set(\"bed\", \"tv\", \"computer\", \"clothes\", \"playstation 5\")\nschool_bag = set(\n    [\"book\", \"paper\", \"pencil\", \"pencil\", \"book\", \"book\", \"book\", \"eraser\"]\n)",
    "detail": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "bedroom",
    "kind": 5,
    "importPath": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "description": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "peekOfCode": "bedroom = {\"bed\", \"tv\", \"computer\", \"clothes\", \"playstation 4\"}\n# bedroom = set(\"bed\", \"tv\", \"computer\", \"clothes\", \"playstation 5\")\nschool_bag = set(\n    [\"book\", \"paper\", \"pencil\", \"pencil\", \"book\", \"book\", \"book\", \"eraser\"]\n)\nprint(school_bag)\nprint(bedroom)\n# We can use 'in' on sets as wel\nprint(1 in {1, 2, 3})  # True\nprint(4 in {1, 3, 5})  # False",
    "detail": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "school_bag",
    "kind": 5,
    "importPath": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "description": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "peekOfCode": "school_bag = set(\n    [\"book\", \"paper\", \"pencil\", \"pencil\", \"book\", \"book\", \"book\", \"eraser\"]\n)\nprint(school_bag)\nprint(bedroom)\n# We can use 'in' on sets as wel\nprint(1 in {1, 2, 3})  # True\nprint(4 in {1, 3, 5})  # False\n# Tuples are immutable lists of items\ntime_blocks = (\"AM\", \"PM\")",
    "detail": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "time_blocks",
    "kind": 5,
    "importPath": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "description": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "peekOfCode": "time_blocks = (\"AM\", \"PM\")\ncolors = \"red\", \"green\", \"blue\"  # Parenthesis not needed but encouraged\n# The tuple built-in function can be used to convert things to tuples\nprint(tuple(\"abc\"))\nprint(tuple([1, 2, 3]))\n# 'in' may be used on tuples as well\nprint(1 in (1, 2, 3))  # True\nprint(5 in (1, 4, 3))  # False\n# Ranges are immutable lists of numbers, often used with for loops\n#   - start - default: 0, first number in sequence",
    "detail": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "colors",
    "kind": 5,
    "importPath": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "description": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "peekOfCode": "colors = \"red\", \"green\", \"blue\"  # Parenthesis not needed but encouraged\n# The tuple built-in function can be used to convert things to tuples\nprint(tuple(\"abc\"))\nprint(tuple([1, 2, 3]))\n# 'in' may be used on tuples as well\nprint(1 in (1, 2, 3))  # True\nprint(5 in (1, 4, 3))  # False\n# Ranges are immutable lists of numbers, often used with for loops\n#   - start - default: 0, first number in sequence\n#   - stop - required, next number past last number in sequence",
    "detail": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "range1",
    "kind": 5,
    "importPath": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "description": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "peekOfCode": "range1 = range(5)  # [0,1,2,3,4]\nrange2 = range(1, 5)  # [1,2,3,4]\nrange3 = range(0, 25, 5)  # [0,5,10,15,20]\nrange4 = range(0)  # []\nfor i in range1:\n    print(i)\n# Built-in functions:\n# Filter\nisOdd = lambda num: num % 2 == 1\nfiltered = filter(isOdd, [1, 2, 3, 4])",
    "detail": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "range2",
    "kind": 5,
    "importPath": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "description": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "peekOfCode": "range2 = range(1, 5)  # [1,2,3,4]\nrange3 = range(0, 25, 5)  # [0,5,10,15,20]\nrange4 = range(0)  # []\nfor i in range1:\n    print(i)\n# Built-in functions:\n# Filter\nisOdd = lambda num: num % 2 == 1\nfiltered = filter(isOdd, [1, 2, 3, 4])\nprint(list(filtered))",
    "detail": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "range3",
    "kind": 5,
    "importPath": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "description": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "peekOfCode": "range3 = range(0, 25, 5)  # [0,5,10,15,20]\nrange4 = range(0)  # []\nfor i in range1:\n    print(i)\n# Built-in functions:\n# Filter\nisOdd = lambda num: num % 2 == 1\nfiltered = filter(isOdd, [1, 2, 3, 4])\nprint(list(filtered))\nfor num in filtered:",
    "detail": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "range4",
    "kind": 5,
    "importPath": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "description": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "peekOfCode": "range4 = range(0)  # []\nfor i in range1:\n    print(i)\n# Built-in functions:\n# Filter\nisOdd = lambda num: num % 2 == 1\nfiltered = filter(isOdd, [1, 2, 3, 4])\nprint(list(filtered))\nfor num in filtered:\n    print(f\"first way: {num}\")",
    "detail": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "isOdd",
    "kind": 5,
    "importPath": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "description": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "peekOfCode": "isOdd = lambda num: num % 2 == 1\nfiltered = filter(isOdd, [1, 2, 3, 4])\nprint(list(filtered))\nfor num in filtered:\n    print(f\"first way: {num}\")\nprint(\"--\" * 20)\n[print(f\"list comprehension: {i}\") for i in [1, 2, 3, 4, 5, 6, 7, 8] if i % 2 == 1]\n# Map\ndef toUpper(str):\n    return str.upper()",
    "detail": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "filtered",
    "kind": 5,
    "importPath": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "description": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "peekOfCode": "filtered = filter(isOdd, [1, 2, 3, 4])\nprint(list(filtered))\nfor num in filtered:\n    print(f\"first way: {num}\")\nprint(\"--\" * 20)\n[print(f\"list comprehension: {i}\") for i in [1, 2, 3, 4, 5, 6, 7, 8] if i % 2 == 1]\n# Map\ndef toUpper(str):\n    return str.upper()\nupperCased = map(toUpper, [\"a\", \"b\", \"c\", \"d\"])",
    "detail": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "upperCased",
    "kind": 5,
    "importPath": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "description": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "peekOfCode": "upperCased = map(toUpper, [\"a\", \"b\", \"c\", \"d\"])\nprint(list(upperCased))\n# Sorted\nsorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"])\nprint(list(sorted_items))  # Notice uppercase comes before lowercase\n# Using a key function to control the sorting and make it case insensitive\nsorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"], key=str.lower)\nprint(sorted_items)\n# You can also reverse the sort\nsorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"], key=str.lower, reverse=True)",
    "detail": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "sorted_items",
    "kind": 5,
    "importPath": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "description": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "peekOfCode": "sorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"])\nprint(list(sorted_items))  # Notice uppercase comes before lowercase\n# Using a key function to control the sorting and make it case insensitive\nsorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"], key=str.lower)\nprint(sorted_items)\n# You can also reverse the sort\nsorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"], key=str.lower, reverse=True)\nprint(sorted_items)\n# Enumerate creates a tuple with an index for what you're enumerating\nquarters = [\"First\", \"Second\", \"Third\", \"Fourth\"]",
    "detail": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "sorted_items",
    "kind": 5,
    "importPath": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "description": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "peekOfCode": "sorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"], key=str.lower)\nprint(sorted_items)\n# You can also reverse the sort\nsorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"], key=str.lower, reverse=True)\nprint(sorted_items)\n# Enumerate creates a tuple with an index for what you're enumerating\nquarters = [\"First\", \"Second\", \"Third\", \"Fourth\"]\nprint(list(enumerate(quarters)))\nprint(list(enumerate(quarters, start=1)))\n# Zip takes list and combines them as key value pairs, or really however you need",
    "detail": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "sorted_items",
    "kind": 5,
    "importPath": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "description": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "peekOfCode": "sorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"], key=str.lower, reverse=True)\nprint(sorted_items)\n# Enumerate creates a tuple with an index for what you're enumerating\nquarters = [\"First\", \"Second\", \"Third\", \"Fourth\"]\nprint(list(enumerate(quarters)))\nprint(list(enumerate(quarters, start=1)))\n# Zip takes list and combines them as key value pairs, or really however you need\nkeys = (\"Name\", \"Email\")\nvalues = (\"Buster\", \"cheetoh@johhnydepp.com\")\nzipped = zip(keys, values)",
    "detail": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "quarters",
    "kind": 5,
    "importPath": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "description": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "peekOfCode": "quarters = [\"First\", \"Second\", \"Third\", \"Fourth\"]\nprint(list(enumerate(quarters)))\nprint(list(enumerate(quarters, start=1)))\n# Zip takes list and combines them as key value pairs, or really however you need\nkeys = (\"Name\", \"Email\")\nvalues = (\"Buster\", \"cheetoh@johhnydepp.com\")\nzipped = zip(keys, values)\nprint(list(zipped))\n# You can zip more than 2\nx_coords = [0, 1, 2, 3, 4]",
    "detail": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "keys",
    "kind": 5,
    "importPath": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "description": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "peekOfCode": "keys = (\"Name\", \"Email\")\nvalues = (\"Buster\", \"cheetoh@johhnydepp.com\")\nzipped = zip(keys, values)\nprint(list(zipped))\n# You can zip more than 2\nx_coords = [0, 1, 2, 3, 4]\ny_coords = [4, 6, 10, 9, 10]\nz_coords = [20, 10, 5, 9, 1]\ncoords = zip(x_coords, y_coords, z_coords)\nprint(list(coords))",
    "detail": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "values",
    "kind": 5,
    "importPath": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "description": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "peekOfCode": "values = (\"Buster\", \"cheetoh@johhnydepp.com\")\nzipped = zip(keys, values)\nprint(list(zipped))\n# You can zip more than 2\nx_coords = [0, 1, 2, 3, 4]\ny_coords = [4, 6, 10, 9, 10]\nz_coords = [20, 10, 5, 9, 1]\ncoords = zip(x_coords, y_coords, z_coords)\nprint(list(coords))\n# Len reports the length of strings along with list and any other object data type",
    "detail": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "zipped",
    "kind": 5,
    "importPath": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "description": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "peekOfCode": "zipped = zip(keys, values)\nprint(list(zipped))\n# You can zip more than 2\nx_coords = [0, 1, 2, 3, 4]\ny_coords = [4, 6, 10, 9, 10]\nz_coords = [20, 10, 5, 9, 1]\ncoords = zip(x_coords, y_coords, z_coords)\nprint(list(coords))\n# Len reports the length of strings along with list and any other object data type\nprint_len = lambda item: print(len(item))  # doing this to save myself some typing",
    "detail": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "x_coords",
    "kind": 5,
    "importPath": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "description": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "peekOfCode": "x_coords = [0, 1, 2, 3, 4]\ny_coords = [4, 6, 10, 9, 10]\nz_coords = [20, 10, 5, 9, 1]\ncoords = zip(x_coords, y_coords, z_coords)\nprint(list(coords))\n# Len reports the length of strings along with list and any other object data type\nprint_len = lambda item: print(len(item))  # doing this to save myself some typing\nprint_len(\"Mike\")\nprint_len([1, 5, 2, 10, 3, 10])\nprint_len({1, 5, 10, 9, 10})  # 4 because there is a duplicate here (10)",
    "detail": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "y_coords",
    "kind": 5,
    "importPath": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "description": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "peekOfCode": "y_coords = [4, 6, 10, 9, 10]\nz_coords = [20, 10, 5, 9, 1]\ncoords = zip(x_coords, y_coords, z_coords)\nprint(list(coords))\n# Len reports the length of strings along with list and any other object data type\nprint_len = lambda item: print(len(item))  # doing this to save myself some typing\nprint_len(\"Mike\")\nprint_len([1, 5, 2, 10, 3, 10])\nprint_len({1, 5, 10, 9, 10})  # 4 because there is a duplicate here (10)\nprint_len((1, 4, 10, 9, 20))",
    "detail": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "z_coords",
    "kind": 5,
    "importPath": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "description": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "peekOfCode": "z_coords = [20, 10, 5, 9, 1]\ncoords = zip(x_coords, y_coords, z_coords)\nprint(list(coords))\n# Len reports the length of strings along with list and any other object data type\nprint_len = lambda item: print(len(item))  # doing this to save myself some typing\nprint_len(\"Mike\")\nprint_len([1, 5, 2, 10, 3, 10])\nprint_len({1, 5, 10, 9, 10})  # 4 because there is a duplicate here (10)\nprint_len((1, 4, 10, 9, 20))\n# Max will return the max number in a given scenario",
    "detail": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "coords",
    "kind": 5,
    "importPath": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "description": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "peekOfCode": "coords = zip(x_coords, y_coords, z_coords)\nprint(list(coords))\n# Len reports the length of strings along with list and any other object data type\nprint_len = lambda item: print(len(item))  # doing this to save myself some typing\nprint_len(\"Mike\")\nprint_len([1, 5, 2, 10, 3, 10])\nprint_len({1, 5, 10, 9, 10})  # 4 because there is a duplicate here (10)\nprint_len((1, 4, 10, 9, 20))\n# Max will return the max number in a given scenario\nprint(max(1, 2, 35, 1012, 1))",
    "detail": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "print_len",
    "kind": 5,
    "importPath": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "description": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "peekOfCode": "print_len = lambda item: print(len(item))  # doing this to save myself some typing\nprint_len(\"Mike\")\nprint_len([1, 5, 2, 10, 3, 10])\nprint_len({1, 5, 10, 9, 10})  # 4 because there is a duplicate here (10)\nprint_len((1, 4, 10, 9, 20))\n# Max will return the max number in a given scenario\nprint(max(1, 2, 35, 1012, 1))\n# Min\nprint(min(1, 5, 2, 10))\nprint(min([1, 4, 7, 10]))",
    "detail": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "user",
    "kind": 5,
    "importPath": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "description": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "peekOfCode": "user = {\"Name\": \"Bob\", \"Email\": \"bob@bob.com\"}\nprint(dir(user))\n# Importing packages and modules\n#  - Module - A Python code in a file or directory\n#  - Package - A module which is a directory containing an __init__.py file\n#  - Submodule - A module which is contained within a package\n#  - Name - An exported function, class, or variable in a module\n# Unlike JS, modules export ALL names contained within them without any special export key\n# Assuming we have the following package with four submodules\n#  math",
    "detail": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "squares",
    "kind": 5,
    "importPath": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "description": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "peekOfCode": "squares = []\nfor i in range(10):\n    squares.append(i ** 2)\nprint(squares)\n# value = i ** 2\n# loop = for i in range(10)\nsquares = [i ** 2 for i in range(10)]\nprint(list(squares))\nsentence = \"the rocket came back from mars\"\nvowels = [character for character in sentence if character in \"aeiou\"]",
    "detail": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "squares",
    "kind": 5,
    "importPath": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "description": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "peekOfCode": "squares = [i ** 2 for i in range(10)]\nprint(list(squares))\nsentence = \"the rocket came back from mars\"\nvowels = [character for character in sentence if character in \"aeiou\"]\nprint(vowels)\n# You can also use them on dictionaries. We can use the items() method\n# for the dictionary to loop through it getting the keys and values out at once\nperson = {\"name\": \"Corina\", \"age\": 32, \"height\": 1.4}\n# This loops through and capitalizes the first letter of all keys\nnewPerson = {key.title(): value for key, value in person.items()}",
    "detail": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "sentence",
    "kind": 5,
    "importPath": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "description": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "peekOfCode": "sentence = \"the rocket came back from mars\"\nvowels = [character for character in sentence if character in \"aeiou\"]\nprint(vowels)\n# You can also use them on dictionaries. We can use the items() method\n# for the dictionary to loop through it getting the keys and values out at once\nperson = {\"name\": \"Corina\", \"age\": 32, \"height\": 1.4}\n# This loops through and capitalizes the first letter of all keys\nnewPerson = {key.title(): value for key, value in person.items()}\nprint(list(newPerson.items()))",
    "detail": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "vowels",
    "kind": 5,
    "importPath": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "description": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "peekOfCode": "vowels = [character for character in sentence if character in \"aeiou\"]\nprint(vowels)\n# You can also use them on dictionaries. We can use the items() method\n# for the dictionary to loop through it getting the keys and values out at once\nperson = {\"name\": \"Corina\", \"age\": 32, \"height\": 1.4}\n# This loops through and capitalizes the first letter of all keys\nnewPerson = {key.title(): value for key, value in person.items()}\nprint(list(newPerson.items()))",
    "detail": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "person",
    "kind": 5,
    "importPath": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "description": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "peekOfCode": "person = {\"name\": \"Corina\", \"age\": 32, \"height\": 1.4}\n# This loops through and capitalizes the first letter of all keys\nnewPerson = {key.title(): value for key, value in person.items()}\nprint(list(newPerson.items()))",
    "detail": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "newPerson",
    "kind": 5,
    "importPath": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "description": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "peekOfCode": "newPerson = {key.title(): value for key, value in person.items()}\nprint(list(newPerson.items()))",
    "detail": "MY_GISTS.fdc7a1759a.pythonstudyguide",
    "documentation": {}
  },
  {
    "label": "input_str",
    "kind": 5,
    "importPath": "MY_GISTS.fec2fc7682.prac7",
    "description": "MY_GISTS.fec2fc7682.prac7",
    "peekOfCode": "input_str = input(\"Enter a list of elements: \")\nlist1 = [int(x) for x in input_str.split() if int(x) % 2 == 0]\nprint(list1)",
    "detail": "MY_GISTS.fec2fc7682.prac7",
    "documentation": {}
  },
  {
    "label": "list1",
    "kind": 5,
    "importPath": "MY_GISTS.fec2fc7682.prac7",
    "description": "MY_GISTS.fec2fc7682.prac7",
    "peekOfCode": "list1 = [int(x) for x in input_str.split() if int(x) % 2 == 0]\nprint(list1)",
    "detail": "MY_GISTS.fec2fc7682.prac7",
    "documentation": {}
  },
  {
    "label": "download_all_from_user",
    "kind": 2,
    "importPath": "MY_GISTS.gist",
    "description": "MY_GISTS.gist",
    "peekOfCode": "def download_all_from_user(user: str):\n    next_page = True\n    page = 1\n    while next_page:\n        url = f\"https://api.github.com/users/{user}/gists?page={page}\"\n        response = requests.get(url)\n        if not len(response.json()):\n            next_page = False\n        else:\n            page += 1",
    "detail": "MY_GISTS.gist",
    "documentation": {}
  },
  {
    "label": "download_all",
    "kind": 2,
    "importPath": "MY_GISTS.gist",
    "description": "MY_GISTS.gist",
    "peekOfCode": "def download_all(gists: list):\n    with PoolExecutor(max_workers=10) as executor:\n        for _ in executor.map(download, gists):\n            pass\ndef download(gist):\n    target = gist[\"id\"] + hashlib.md5(gist[\"updated_at\"].encode(\"utf-8\")).hexdigest()\n    call([\"git\", \"clone\", gist[\"git_pull_url\"], target])\n    description_file = os.path.join(target, \"description.txt\")\n    with open(description_file, \"w\") as f:\n        f.write(f\"{gist['description']}\\n\")",
    "detail": "MY_GISTS.gist",
    "documentation": {}
  },
  {
    "label": "download",
    "kind": 2,
    "importPath": "MY_GISTS.gist",
    "description": "MY_GISTS.gist",
    "peekOfCode": "def download(gist):\n    target = gist[\"id\"] + hashlib.md5(gist[\"updated_at\"].encode(\"utf-8\")).hexdigest()\n    call([\"git\", \"clone\", gist[\"git_pull_url\"], target])\n    description_file = os.path.join(target, \"description.txt\")\n    with open(description_file, \"w\") as f:\n        f.write(f\"{gist['description']}\\n\")\n# Run\nuser = sys.argv[1]\ndownload_all_from_user(user)",
    "detail": "MY_GISTS.gist",
    "documentation": {}
  },
  {
    "label": "user",
    "kind": 5,
    "importPath": "MY_GISTS.gist",
    "description": "MY_GISTS.gist",
    "peekOfCode": "user = sys.argv[1]\ndownload_all_from_user(user)",
    "detail": "MY_GISTS.gist",
    "documentation": {}
  },
  {
    "label": "create_db",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.create_db",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.create_db",
    "peekOfCode": "def create_db():\n  assert not os.path.exists(DB_FILE)\n  (con, cur) = db_connect()\n  cur.execute('''CREATE TABLE query_log\n    (id INTEGER PRIMARY KEY,\n     post_date TEXT,\n     ip_addr TEXT,\n     user_agent TEXT,\n     input_script TEXT,\n     had_error INTEGER)''')",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.create_db",
    "documentation": {}
  },
  {
    "label": "db_connect",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.db_common",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.db_common",
    "peekOfCode": "def db_connect():\n  con = sqlite3.connect(DB_FILE)\n  cur = con.cursor()\n  return (con, cur)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.db_common",
    "documentation": {}
  },
  {
    "label": "DB_FILE",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.db_common",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.db_common",
    "peekOfCode": "DB_FILE = 'edu-python-log.sqlite3'\ndef db_connect():\n  con = sqlite3.connect(DB_FILE)\n  cur = con.cursor()\n  return (con, cur)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.db_common",
    "documentation": {}
  },
  {
    "label": "QUESTIONS_DIR",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.load_question",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.load_question",
    "peekOfCode": "QUESTIONS_DIR = '../questions/'\nfrom parse_questions import parseQuestionsFile\nimport cgi, os, json\nform = cgi.FieldStorage()\nquestion_file = form['question_file'].value\nfn = QUESTIONS_DIR + question_file + '.txt'\nassert os.path.isfile(fn)\n# Crucial first line to make sure that Apache serves this data\n# correctly - DON'T FORGET THE EXTRA NEWLINES!!!:\nprint \"Content-type: text/plain; charset=iso-8859-1\\n\\n\"",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.load_question",
    "documentation": {}
  },
  {
    "label": "form",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.load_question",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.load_question",
    "peekOfCode": "form = cgi.FieldStorage()\nquestion_file = form['question_file'].value\nfn = QUESTIONS_DIR + question_file + '.txt'\nassert os.path.isfile(fn)\n# Crucial first line to make sure that Apache serves this data\n# correctly - DON'T FORGET THE EXTRA NEWLINES!!!:\nprint \"Content-type: text/plain; charset=iso-8859-1\\n\\n\"\nprint json.dumps(parseQuestionsFile(fn))",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.load_question",
    "documentation": {}
  },
  {
    "label": "question_file",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.load_question",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.load_question",
    "peekOfCode": "question_file = form['question_file'].value\nfn = QUESTIONS_DIR + question_file + '.txt'\nassert os.path.isfile(fn)\n# Crucial first line to make sure that Apache serves this data\n# correctly - DON'T FORGET THE EXTRA NEWLINES!!!:\nprint \"Content-type: text/plain; charset=iso-8859-1\\n\\n\"\nprint json.dumps(parseQuestionsFile(fn))",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.load_question",
    "documentation": {}
  },
  {
    "label": "fn",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.load_question",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.load_question",
    "peekOfCode": "fn = QUESTIONS_DIR + question_file + '.txt'\nassert os.path.isfile(fn)\n# Crucial first line to make sure that Apache serves this data\n# correctly - DON'T FORGET THE EXTRA NEWLINES!!!:\nprint \"Content-type: text/plain; charset=iso-8859-1\\n\\n\"\nprint json.dumps(parseQuestionsFile(fn))",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.load_question",
    "documentation": {}
  },
  {
    "label": "encode",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.p4_encoder",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.p4_encoder",
    "peekOfCode": "def encode(dat, ignore_id=False):\n  def append_attributes(ret, new_compound_obj_ids, dict):\n      \"\"\" Put attributes onto ret.   \"\"\"\n      # traverse the __dict__ to grab attributes\n      # (filter out useless-seeming ones):\n      user_attrs = sorted([e for e in dict.keys()\n              if e not in {'__doc__', '__module__', '__return__', '__locals__',\n                           '__weakref__', '__dict__'}\n                         ])\n      for attr in user_attrs:",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.p4_encoder",
    "documentation": {}
  },
  {
    "label": "real_to_small_IDs",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.p4_encoder",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.p4_encoder",
    "peekOfCode": "real_to_small_IDs = {}\ncur_small_id = 1\nimport re, types\n#typeRE = re.compile(\"<type '(.*)'>\")                 # not used in Python 3\nclassRE = re.compile(\"<class '(.*)'>\")\nfunctionRE = re.compile(\"<function (\\w*) (.*)>\")      # new case for Python 3\n# When we find a <class x> and x is in this list, don't confuse the beginner by listing the inner details\nnative_types = ['int', 'float', 'str', 'tuple', 'list', 'set', 'dict', 'bool', 'NoneType', 'bytes', 'type', 'object']\ndef encode(dat, ignore_id=False):\n  def append_attributes(ret, new_compound_obj_ids, dict):",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.p4_encoder",
    "documentation": {}
  },
  {
    "label": "cur_small_id",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.p4_encoder",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.p4_encoder",
    "peekOfCode": "cur_small_id = 1\nimport re, types\n#typeRE = re.compile(\"<type '(.*)'>\")                 # not used in Python 3\nclassRE = re.compile(\"<class '(.*)'>\")\nfunctionRE = re.compile(\"<function (\\w*) (.*)>\")      # new case for Python 3\n# When we find a <class x> and x is in this list, don't confuse the beginner by listing the inner details\nnative_types = ['int', 'float', 'str', 'tuple', 'list', 'set', 'dict', 'bool', 'NoneType', 'bytes', 'type', 'object']\ndef encode(dat, ignore_id=False):\n  def append_attributes(ret, new_compound_obj_ids, dict):\n      \"\"\" Put attributes onto ret.   \"\"\"",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.p4_encoder",
    "documentation": {}
  },
  {
    "label": "#typeRE",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.p4_encoder",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.p4_encoder",
    "peekOfCode": "#typeRE = re.compile(\"<type '(.*)'>\")                 # not used in Python 3\nclassRE = re.compile(\"<class '(.*)'>\")\nfunctionRE = re.compile(\"<function (\\w*) (.*)>\")      # new case for Python 3\n# When we find a <class x> and x is in this list, don't confuse the beginner by listing the inner details\nnative_types = ['int', 'float', 'str', 'tuple', 'list', 'set', 'dict', 'bool', 'NoneType', 'bytes', 'type', 'object']\ndef encode(dat, ignore_id=False):\n  def append_attributes(ret, new_compound_obj_ids, dict):\n      \"\"\" Put attributes onto ret.   \"\"\"\n      # traverse the __dict__ to grab attributes\n      # (filter out useless-seeming ones):",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.p4_encoder",
    "documentation": {}
  },
  {
    "label": "classRE",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.p4_encoder",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.p4_encoder",
    "peekOfCode": "classRE = re.compile(\"<class '(.*)'>\")\nfunctionRE = re.compile(\"<function (\\w*) (.*)>\")      # new case for Python 3\n# When we find a <class x> and x is in this list, don't confuse the beginner by listing the inner details\nnative_types = ['int', 'float', 'str', 'tuple', 'list', 'set', 'dict', 'bool', 'NoneType', 'bytes', 'type', 'object']\ndef encode(dat, ignore_id=False):\n  def append_attributes(ret, new_compound_obj_ids, dict):\n      \"\"\" Put attributes onto ret.   \"\"\"\n      # traverse the __dict__ to grab attributes\n      # (filter out useless-seeming ones):\n      user_attrs = sorted([e for e in dict.keys()",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.p4_encoder",
    "documentation": {}
  },
  {
    "label": "functionRE",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.p4_encoder",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.p4_encoder",
    "peekOfCode": "functionRE = re.compile(\"<function (\\w*) (.*)>\")      # new case for Python 3\n# When we find a <class x> and x is in this list, don't confuse the beginner by listing the inner details\nnative_types = ['int', 'float', 'str', 'tuple', 'list', 'set', 'dict', 'bool', 'NoneType', 'bytes', 'type', 'object']\ndef encode(dat, ignore_id=False):\n  def append_attributes(ret, new_compound_obj_ids, dict):\n      \"\"\" Put attributes onto ret.   \"\"\"\n      # traverse the __dict__ to grab attributes\n      # (filter out useless-seeming ones):\n      user_attrs = sorted([e for e in dict.keys()\n              if e not in {'__doc__', '__module__', '__return__', '__locals__',",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.p4_encoder",
    "documentation": {}
  },
  {
    "label": "native_types",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.p4_encoder",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.p4_encoder",
    "peekOfCode": "native_types = ['int', 'float', 'str', 'tuple', 'list', 'set', 'dict', 'bool', 'NoneType', 'bytes', 'type', 'object']\ndef encode(dat, ignore_id=False):\n  def append_attributes(ret, new_compound_obj_ids, dict):\n      \"\"\" Put attributes onto ret.   \"\"\"\n      # traverse the __dict__ to grab attributes\n      # (filter out useless-seeming ones):\n      user_attrs = sorted([e for e in dict.keys()\n              if e not in {'__doc__', '__module__', '__return__', '__locals__',\n                           '__weakref__', '__dict__'}\n                         ])",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.p4_encoder",
    "documentation": {}
  },
  {
    "label": "parseQuestionsFile",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.parse_questions",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.parse_questions",
    "peekOfCode": "def parseQuestionsFile(filename):\n  ret = {}\n  ret['tests'] = []\n  ret['expects'] = []\n  curParts = []\n  curDelimiter = None\n  def processRecord():\n    if curDelimiter == 'Name:':\n      ret['name'] = '\\n'.join(curParts).strip()\n    elif curDelimiter == 'Question:':",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.parse_questions",
    "documentation": {}
  },
  {
    "label": "delimiters",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.parse_questions",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.parse_questions",
    "peekOfCode": "delimiters = set(['Name:', 'Question:', 'Hint:', 'Solution:',\n'Skeleton:', 'Test:', 'Expect:'])\ndef parseQuestionsFile(filename):\n  ret = {}\n  ret['tests'] = []\n  ret['expects'] = []\n  curParts = []\n  curDelimiter = None\n  def processRecord():\n    if curDelimiter == 'Name:':",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.parse_questions",
    "documentation": {}
  },
  {
    "label": "encode",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.pg_encoder",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.pg_encoder",
    "peekOfCode": "def encode(dat, ignore_id=False):\n  def encode_helper(dat, compound_obj_ids):\n    # primitive type\n    if dat is None or \\\n       type(dat) in (int, long, float, str, bool):\n      return dat\n    # compound type\n    else:\n      my_id = id(dat)\n      global cur_small_id",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.pg_encoder",
    "documentation": {}
  },
  {
    "label": "real_to_small_IDs",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.pg_encoder",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.pg_encoder",
    "peekOfCode": "real_to_small_IDs = {}\ncur_small_id = 1\nimport re, types\ntypeRE = re.compile(\"<type '(.*)'>\")\nclassRE = re.compile(\"<class '(.*)'>\")\ndef encode(dat, ignore_id=False):\n  def encode_helper(dat, compound_obj_ids):\n    # primitive type\n    if dat is None or \\\n       type(dat) in (int, long, float, str, bool):",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.pg_encoder",
    "documentation": {}
  },
  {
    "label": "cur_small_id",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.pg_encoder",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.pg_encoder",
    "peekOfCode": "cur_small_id = 1\nimport re, types\ntypeRE = re.compile(\"<type '(.*)'>\")\nclassRE = re.compile(\"<class '(.*)'>\")\ndef encode(dat, ignore_id=False):\n  def encode_helper(dat, compound_obj_ids):\n    # primitive type\n    if dat is None or \\\n       type(dat) in (int, long, float, str, bool):\n      return dat",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.pg_encoder",
    "documentation": {}
  },
  {
    "label": "typeRE",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.pg_encoder",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.pg_encoder",
    "peekOfCode": "typeRE = re.compile(\"<type '(.*)'>\")\nclassRE = re.compile(\"<class '(.*)'>\")\ndef encode(dat, ignore_id=False):\n  def encode_helper(dat, compound_obj_ids):\n    # primitive type\n    if dat is None or \\\n       type(dat) in (int, long, float, str, bool):\n      return dat\n    # compound type\n    else:",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.pg_encoder",
    "documentation": {}
  },
  {
    "label": "classRE",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.pg_encoder",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.pg_encoder",
    "peekOfCode": "classRE = re.compile(\"<class '(.*)'>\")\ndef encode(dat, ignore_id=False):\n  def encode_helper(dat, compound_obj_ids):\n    # primitive type\n    if dat is None or \\\n       type(dat) in (int, long, float, str, bool):\n      return dat\n    # compound type\n    else:\n      my_id = id(dat)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.pg_encoder",
    "documentation": {}
  },
  {
    "label": "PGLogger",
    "kind": 6,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.pg_logger",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.pg_logger",
    "peekOfCode": "class PGLogger(bdb.Bdb):\n    def __init__(self, finalizer_func, ignore_id=False):\n        bdb.Bdb.__init__(self)\n        self.mainpyfile = ''\n        self._wait_for_mainpyfile = 0\n        # a function that takes the output trace as a parameter and\n        # processes it\n        self.finalizer_func = finalizer_func\n        # each entry contains a dict with the information for a single\n        # executed line",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.pg_logger",
    "documentation": {}
  },
  {
    "label": "set_max_executed_lines",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.pg_logger",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.pg_logger",
    "peekOfCode": "def set_max_executed_lines(m):\n  global MAX_EXECUTED_LINES\n  MAX_EXECUTED_LINES = m\nimport sys\nimport bdb # the KEY import here!\nimport os\nimport re\nimport traceback\nimport cStringIO\nimport pg_encoder",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.pg_logger",
    "documentation": {}
  },
  {
    "label": "get_user_stdout",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.pg_logger",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.pg_logger",
    "peekOfCode": "def get_user_stdout(frame):\n  return frame.f_globals['__stdout__'].getvalue()\ndef get_user_globals(frame):\n  d = filter_var_dict(frame.f_globals)\n  # also filter out __return__ for globals only, but NOT for locals\n  if '__return__' in d:\n    del d['__return__']\n  return d\ndef get_user_locals(frame):\n  return filter_var_dict(frame.f_locals)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.pg_logger",
    "documentation": {}
  },
  {
    "label": "get_user_globals",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.pg_logger",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.pg_logger",
    "peekOfCode": "def get_user_globals(frame):\n  d = filter_var_dict(frame.f_globals)\n  # also filter out __return__ for globals only, but NOT for locals\n  if '__return__' in d:\n    del d['__return__']\n  return d\ndef get_user_locals(frame):\n  return filter_var_dict(frame.f_locals)\ndef filter_var_dict(d):\n  ret = {}",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.pg_logger",
    "documentation": {}
  },
  {
    "label": "get_user_locals",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.pg_logger",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.pg_logger",
    "peekOfCode": "def get_user_locals(frame):\n  return filter_var_dict(frame.f_locals)\ndef filter_var_dict(d):\n  ret = {}\n  for (k,v) in d.iteritems():\n    if k not in IGNORE_VARS:\n      ret[k] = v\n  return ret\nclass PGLogger(bdb.Bdb):\n    def __init__(self, finalizer_func, ignore_id=False):",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.pg_logger",
    "documentation": {}
  },
  {
    "label": "filter_var_dict",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.pg_logger",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.pg_logger",
    "peekOfCode": "def filter_var_dict(d):\n  ret = {}\n  for (k,v) in d.iteritems():\n    if k not in IGNORE_VARS:\n      ret[k] = v\n  return ret\nclass PGLogger(bdb.Bdb):\n    def __init__(self, finalizer_func, ignore_id=False):\n        bdb.Bdb.__init__(self)\n        self.mainpyfile = ''",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.pg_logger",
    "documentation": {}
  },
  {
    "label": "exec_script_str",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.pg_logger",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.pg_logger",
    "peekOfCode": "def exec_script_str(script_str, finalizer_func, ignore_id=False):\n  logger = PGLogger(finalizer_func, ignore_id)\n  logger._runscript(script_str)\n  logger.finalize()\ndef exec_file_and_pretty_print(mainpyfile):\n  import pprint\n  if not os.path.exists(mainpyfile):\n    print 'Error:', mainpyfile, 'does not exist'\n    sys.exit(1)\n  def pretty_print(output_lst):",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.pg_logger",
    "documentation": {}
  },
  {
    "label": "exec_file_and_pretty_print",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.pg_logger",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.pg_logger",
    "peekOfCode": "def exec_file_and_pretty_print(mainpyfile):\n  import pprint\n  if not os.path.exists(mainpyfile):\n    print 'Error:', mainpyfile, 'does not exist'\n    sys.exit(1)\n  def pretty_print(output_lst):\n    for e in output_lst:\n      pprint.pprint(e)\n  output_lst = exec_script_str(open(mainpyfile).read(), pretty_print)\nif __name__ == '__main__':",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.pg_logger",
    "documentation": {}
  },
  {
    "label": "MAX_EXECUTED_LINES",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.pg_logger",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.pg_logger",
    "peekOfCode": "MAX_EXECUTED_LINES = 200\ndef set_max_executed_lines(m):\n  global MAX_EXECUTED_LINES\n  MAX_EXECUTED_LINES = m\nimport sys\nimport bdb # the KEY import here!\nimport os\nimport re\nimport traceback\nimport cStringIO",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.pg_logger",
    "documentation": {}
  },
  {
    "label": "IGNORE_VARS",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.pg_logger",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.pg_logger",
    "peekOfCode": "IGNORE_VARS = set(('__stdout__', '__builtins__', '__name__', '__exception__'))\ndef get_user_stdout(frame):\n  return frame.f_globals['__stdout__'].getvalue()\ndef get_user_globals(frame):\n  d = filter_var_dict(frame.f_globals)\n  # also filter out __return__ for globals only, but NOT for locals\n  if '__return__' in d:\n    del d['__return__']\n  return d\ndef get_user_locals(frame):",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.pg_logger",
    "documentation": {}
  },
  {
    "label": "execute",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.run_tests",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.run_tests",
    "peekOfCode": "def execute(test_script):\n  def my_finalizer(output_lst):\n    outfile = open(test_script[:-3] + '.out', 'w')\n    output_json = json.dumps(output_lst)\n    print >> outfile, output_json\n  pg_logger.exec_script_str(open(test_script).read(), my_finalizer, True)\ndef clobber_golden_file(golden_file):\n  print '  Overriding golden file'\n  outfile = golden_file.replace('.golden', '.out')\n  assert os.path.isfile(outfile)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.run_tests",
    "documentation": {}
  },
  {
    "label": "clobber_golden_file",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.run_tests",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.run_tests",
    "peekOfCode": "def clobber_golden_file(golden_file):\n  print '  Overriding golden file'\n  outfile = golden_file.replace('.golden', '.out')\n  assert os.path.isfile(outfile)\n  shutil.copy(outfile, golden_file)\n# returns True if there is a diff, False otherwise\ndef diff_test_golden_data(golden_file):\n  outfile = golden_file.replace('.golden', '.out')\n  assert os.path.isfile(outfile)\n  assert os.path.isfile(golden_file)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.run_tests",
    "documentation": {}
  },
  {
    "label": "diff_test_golden_data",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.run_tests",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.run_tests",
    "peekOfCode": "def diff_test_golden_data(golden_file):\n  outfile = golden_file.replace('.golden', '.out')\n  assert os.path.isfile(outfile)\n  assert os.path.isfile(golden_file)\n  # filter out machine-specific memory addresses:\n  outfile_filtered = \\\n    [re.sub(' 0x.+?>', ' 0xADDR>', e) for e in open(outfile).readlines()]\n  golden_file_filtered = \\\n    [re.sub(' 0x.+?>', ' 0xADDR>', e) for e in open(golden_file).readlines()]\n  return outfile_filtered != golden_file_filtered",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.run_tests",
    "documentation": {}
  },
  {
    "label": "diff_test_output",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.run_tests",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.run_tests",
    "peekOfCode": "def diff_test_output(test_name):\n  golden_file = test_name[:-3] + '.golden'\n  assert os.path.isfile(golden_file)\n  outfile = golden_file.replace('.golden', '.out')\n  assert os.path.isfile(outfile)\n  golden_s = open(golden_file).readlines()\n  out_s = open(outfile).readlines()\n  golden_s_filtered = [re.sub(' 0x.+?>', ' 0xADDR>', e) for e in golden_s]\n  out_s_filtered = [re.sub(' 0x.+?>', ' 0xADDR>', e) for e in out_s]\n  for line in difflib.unified_diff(golden_s_filtered, out_s_filtered, \\",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.run_tests",
    "documentation": {}
  },
  {
    "label": "run_test",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.run_tests",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.run_tests",
    "peekOfCode": "def run_test(test_name, clobber_golden=False):\n  print 'Testing', test_name\n  assert test_name.endswith('.py')\n  outfile = test_name[:-3] + '.out'\n  if os.path.isfile(outfile):\n    os.remove(outfile)\n  try:\n    execute(test_name)\n  except:\n    pass",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.run_tests",
    "documentation": {}
  },
  {
    "label": "run_all_tests",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.run_tests",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.run_tests",
    "peekOfCode": "def run_all_tests(clobber=False):\n  for t in ALL_TESTS:\n    run_test(t, clobber)\ndef diff_all_test_outputs():\n  for t in ALL_TESTS:\n    print '=== diffing', t, '==='\n    diff_test_output(t)\nif __name__ == \"__main__\":\n  os.chdir(REGTEST_DIR) # change to this dir to make everything easier\n  parser = optparse.OptionParser()",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.run_tests",
    "documentation": {}
  },
  {
    "label": "diff_all_test_outputs",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.run_tests",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.run_tests",
    "peekOfCode": "def diff_all_test_outputs():\n  for t in ALL_TESTS:\n    print '=== diffing', t, '==='\n    diff_test_output(t)\nif __name__ == \"__main__\":\n  os.chdir(REGTEST_DIR) # change to this dir to make everything easier\n  parser = optparse.OptionParser()\n  parser.add_option(\"--all\", action=\"store_true\", dest=\"run_all\",\n                    help=\"Run all tests\")\n  parser.add_option(\"--only-clobber\", action=\"store_true\", dest=\"only_clobber\",",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.run_tests",
    "documentation": {}
  },
  {
    "label": "REGTEST_DIR",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.run_tests",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.run_tests",
    "peekOfCode": "REGTEST_DIR = '../test-programs/'\nALL_TESTS = [e for e in os.listdir(REGTEST_DIR) if e.endswith('.py')]\n# return True if there seemed to be an error in execution\ndef execute(test_script):\n  def my_finalizer(output_lst):\n    outfile = open(test_script[:-3] + '.out', 'w')\n    output_json = json.dumps(output_lst)\n    print >> outfile, output_json\n  pg_logger.exec_script_str(open(test_script).read(), my_finalizer, True)\ndef clobber_golden_file(golden_file):",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.run_tests",
    "documentation": {}
  },
  {
    "label": "ALL_TESTS",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.run_tests",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.run_tests",
    "peekOfCode": "ALL_TESTS = [e for e in os.listdir(REGTEST_DIR) if e.endswith('.py')]\n# return True if there seemed to be an error in execution\ndef execute(test_script):\n  def my_finalizer(output_lst):\n    outfile = open(test_script[:-3] + '.out', 'w')\n    output_json = json.dumps(output_lst)\n    print >> outfile, output_json\n  pg_logger.exec_script_str(open(test_script).read(), my_finalizer, True)\ndef clobber_golden_file(golden_file):\n  print '  Overriding golden file'",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.run_tests",
    "documentation": {}
  },
  {
    "label": "web_finalizer",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.web_exec",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.web_exec",
    "peekOfCode": "def web_finalizer(output_lst):\n  # use compactly=False to produce human-readable JSON,\n  # except at the expense of being a LARGER download\n  output_json = json.dumps(output_lst)\n  # query logging is optional\n  if LOG_QUERIES:\n    # just to be paranoid, don't croak the whole program just\n    # because there's some error in logging it to the database\n    try:\n      # log queries into sqlite database:",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.web_exec",
    "documentation": {}
  },
  {
    "label": "LOG_QUERIES",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.web_exec",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.web_exec",
    "peekOfCode": "LOG_QUERIES = False # don't do logging for now\nimport cgi\nimport pg_logger\nimport json\nif LOG_QUERIES:\n  import os, time, db_common\ndef web_finalizer(output_lst):\n  # use compactly=False to produce human-readable JSON,\n  # except at the expense of being a LARGER download\n  output_json = json.dumps(output_lst)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.web_exec",
    "documentation": {}
  },
  {
    "label": "form",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.web_exec",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.web_exec",
    "peekOfCode": "form = cgi.FieldStorage()\nuser_script = form['user_script'].value\nif 'max_instructions' in form:\n  pg_logger.set_max_executed_lines(int(form['max_instructions'].value))\npg_logger.exec_script_str(user_script, web_finalizer)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.web_exec",
    "documentation": {}
  },
  {
    "label": "user_script",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.web_exec",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.web_exec",
    "peekOfCode": "user_script = form['user_script'].value\nif 'max_instructions' in form:\n  pg_logger.set_max_executed_lines(int(form['max_instructions'].value))\npg_logger.exec_script_str(user_script, web_finalizer)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.web_exec",
    "documentation": {}
  },
  {
    "label": "user_script_finalizer",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.web_run_test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.web_run_test",
    "peekOfCode": "def user_script_finalizer(output_lst):\n  # very important!\n  global user_trace, expect_trace_final_entry\n  user_trace = output_lst\n  # dunno which order these events come in ...\n  if user_trace and expect_trace_final_entry:\n    really_finalize()\ndef expect_script_finalizer(output_lst):\n  # very important!\n  global user_trace, expect_trace_final_entry",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.web_run_test",
    "documentation": {}
  },
  {
    "label": "expect_script_finalizer",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.web_run_test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.web_run_test",
    "peekOfCode": "def expect_script_finalizer(output_lst):\n  # very important!\n  global user_trace, expect_trace_final_entry\n  expect_trace_final_entry = output_lst[-1]\n  # if there's an error here, bail NOW and return an error\n  if (expect_trace_final_entry['event'] != 'return' or \\\n      expect_trace_final_entry['func_name'] != '<module>'):\n    ret = {}\n    ret['status'] = 'error'\n    ret['error_msg'] = \"Fatal error: expected output is malformed!\"",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.web_run_test",
    "documentation": {}
  },
  {
    "label": "really_finalize",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.web_run_test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.web_run_test",
    "peekOfCode": "def really_finalize():\n  # Procedure for grading testResults vs. expectResults:\n  # - The final line in expectResults should be a 'return' from\n  #   '<module>' that contains only ONE global variable.  THAT'S\n  #   the variable that we're gonna compare against testResults.\n  vars_to_compare = expect_trace_final_entry['globals'].keys()\n  if len(vars_to_compare) != 1:\n    ret['status'] = 'error'\n    ret['error_msg'] = \"Fatal error: expected output has more than one global var!\"\n  else:",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.web_run_test",
    "documentation": {}
  },
  {
    "label": "user_trace",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.web_run_test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.web_run_test",
    "peekOfCode": "user_trace = None # the FULL user trace (without any IDs, though)\nexpect_trace_final_entry = None\ndef user_script_finalizer(output_lst):\n  # very important!\n  global user_trace, expect_trace_final_entry\n  user_trace = output_lst\n  # dunno which order these events come in ...\n  if user_trace and expect_trace_final_entry:\n    really_finalize()\ndef expect_script_finalizer(output_lst):",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.web_run_test",
    "documentation": {}
  },
  {
    "label": "expect_trace_final_entry",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.web_run_test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.web_run_test",
    "peekOfCode": "expect_trace_final_entry = None\ndef user_script_finalizer(output_lst):\n  # very important!\n  global user_trace, expect_trace_final_entry\n  user_trace = output_lst\n  # dunno which order these events come in ...\n  if user_trace and expect_trace_final_entry:\n    really_finalize()\ndef expect_script_finalizer(output_lst):\n  # very important!",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.web_run_test",
    "documentation": {}
  },
  {
    "label": "form",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.web_run_test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.web_run_test",
    "peekOfCode": "form = cgi.FieldStorage()\nuser_script = form['user_script'].value\nexpect_script = form['expect_script'].value\n# WEIRD: always run the expect_script FIRST since it's less likely to have\n# errors.  for some mysterious reason, if there's an error in user_script,\n# then it will never run expect_script\n#\n# also make sure to ignore IDs so that we can do direct object comparisons!\npg_logger.exec_script_str(expect_script, expect_script_finalizer, ignore_id=True)\n# set a custom instruction limit only for user scripts ...",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.web_run_test",
    "documentation": {}
  },
  {
    "label": "user_script",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.web_run_test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.web_run_test",
    "peekOfCode": "user_script = form['user_script'].value\nexpect_script = form['expect_script'].value\n# WEIRD: always run the expect_script FIRST since it's less likely to have\n# errors.  for some mysterious reason, if there's an error in user_script,\n# then it will never run expect_script\n#\n# also make sure to ignore IDs so that we can do direct object comparisons!\npg_logger.exec_script_str(expect_script, expect_script_finalizer, ignore_id=True)\n# set a custom instruction limit only for user scripts ...\nif 'max_instructions' in form:",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.web_run_test",
    "documentation": {}
  },
  {
    "label": "expect_script",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.web_run_test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.web_run_test",
    "peekOfCode": "expect_script = form['expect_script'].value\n# WEIRD: always run the expect_script FIRST since it's less likely to have\n# errors.  for some mysterious reason, if there's an error in user_script,\n# then it will never run expect_script\n#\n# also make sure to ignore IDs so that we can do direct object comparisons!\npg_logger.exec_script_str(expect_script, expect_script_finalizer, ignore_id=True)\n# set a custom instruction limit only for user scripts ...\nif 'max_instructions' in form:\n  pg_logger.set_max_executed_lines(int(form['max_instructions'].value))",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.cgi-bin.web_run_test",
    "documentation": {}
  },
  {
    "label": "x",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.circ_ref",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.circ_ref",
    "peekOfCode": "x = [1, 2]\nx.append(x)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.circ_ref",
    "documentation": {}
  },
  {
    "label": "x",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.circ_ref_2",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.circ_ref_2",
    "peekOfCode": "x = [1, 2]\ny = [3, 4, x]\nx.append(y)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.circ_ref_2",
    "documentation": {}
  },
  {
    "label": "y",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.circ_ref_2",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.circ_ref_2",
    "peekOfCode": "y = [3, 4, x]\nx.append(y)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.circ_ref_2",
    "documentation": {}
  },
  {
    "label": "a",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.circ_ref_fake",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.circ_ref_fake",
    "peekOfCode": "a = [10, 20, 30]\nb = a\nc = [10, 20, 30]\nd = (a, b, c)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.circ_ref_fake",
    "documentation": {}
  },
  {
    "label": "b",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.circ_ref_fake",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.circ_ref_fake",
    "peekOfCode": "b = a\nc = [10, 20, 30]\nd = (a, b, c)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.circ_ref_fake",
    "documentation": {}
  },
  {
    "label": "c",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.circ_ref_fake",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.circ_ref_fake",
    "peekOfCode": "c = [10, 20, 30]\nd = (a, b, c)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.circ_ref_fake",
    "documentation": {}
  },
  {
    "label": "d",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.circ_ref_fake",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.circ_ref_fake",
    "peekOfCode": "d = (a, b, c)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.circ_ref_fake",
    "documentation": {}
  },
  {
    "label": "Point",
    "kind": 6,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.class_test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.class_test",
    "peekOfCode": "class Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    def __str__(self):\n        return \"(%d, %d)\" % (self.x, self.y)\np = Point(1, 2)\nprint p\np2 = Point(3, -4)\nprint p2",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.class_test",
    "documentation": {}
  },
  {
    "label": "p",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.class_test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.class_test",
    "peekOfCode": "p = Point(1, 2)\nprint p\np2 = Point(3, -4)\nprint p2",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.class_test",
    "documentation": {}
  },
  {
    "label": "p2",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.class_test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.class_test",
    "peekOfCode": "p2 = Point(3, -4)\nprint p2",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.class_test",
    "documentation": {}
  },
  {
    "label": "Outer",
    "kind": 6,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.class_test_2",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.class_test_2",
    "peekOfCode": "class Outer():\n   pass\no = Outer()\no.a = 5\no.b = \"Hi\"\nprint o",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.class_test_2",
    "documentation": {}
  },
  {
    "label": "o",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.class_test_2",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.class_test_2",
    "peekOfCode": "o = Outer()\no.a = 5\no.b = \"Hi\"\nprint o",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.class_test_2",
    "documentation": {}
  },
  {
    "label": "o.a",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.class_test_2",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.class_test_2",
    "peekOfCode": "o.a = 5\no.b = \"Hi\"\nprint o",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.class_test_2",
    "documentation": {}
  },
  {
    "label": "o.b",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.class_test_2",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.class_test_2",
    "peekOfCode": "o.b = \"Hi\"\nprint o",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.class_test_2",
    "documentation": {}
  },
  {
    "label": "Staff601",
    "kind": 6,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.class_test_3",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.class_test_3",
    "peekOfCode": "class Staff601:\n    course = '6.01'\n    building = 34\n    room = 501\npat = Staff601()\nprint pat.course\npat.name = 'Pat'\npat.age = 60\npat.role = 'Professor'\nprint pat.building",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.class_test_3",
    "documentation": {}
  },
  {
    "label": "pat",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.class_test_3",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.class_test_3",
    "peekOfCode": "pat = Staff601()\nprint pat.course\npat.name = 'Pat'\npat.age = 60\npat.role = 'Professor'\nprint pat.building\npat.building = 32\nprint pat.building",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.class_test_3",
    "documentation": {}
  },
  {
    "label": "pat.name",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.class_test_3",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.class_test_3",
    "peekOfCode": "pat.name = 'Pat'\npat.age = 60\npat.role = 'Professor'\nprint pat.building\npat.building = 32\nprint pat.building",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.class_test_3",
    "documentation": {}
  },
  {
    "label": "pat.age",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.class_test_3",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.class_test_3",
    "peekOfCode": "pat.age = 60\npat.role = 'Professor'\nprint pat.building\npat.building = 32\nprint pat.building",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.class_test_3",
    "documentation": {}
  },
  {
    "label": "pat.role",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.class_test_3",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.class_test_3",
    "peekOfCode": "pat.role = 'Professor'\nprint pat.building\npat.building = 32\nprint pat.building",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.class_test_3",
    "documentation": {}
  },
  {
    "label": "pat.building",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.class_test_3",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.class_test_3",
    "peekOfCode": "pat.building = 32\nprint pat.building",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.class_test_3",
    "documentation": {}
  },
  {
    "label": "x",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.data_test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.data_test",
    "peekOfCode": "x = ('hello', 'world', 1, 2, 3, 'goodbye')\ny = list(x)\nz = set(x)\nw = {\"joe\" : 5, \"mindy\" : 6, \"jack\" : 7}",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.data_test",
    "documentation": {}
  },
  {
    "label": "y",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.data_test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.data_test",
    "peekOfCode": "y = list(x)\nz = set(x)\nw = {\"joe\" : 5, \"mindy\" : 6, \"jack\" : 7}",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.data_test",
    "documentation": {}
  },
  {
    "label": "z",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.data_test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.data_test",
    "peekOfCode": "z = set(x)\nw = {\"joe\" : 5, \"mindy\" : 6, \"jack\" : 7}",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.data_test",
    "documentation": {}
  },
  {
    "label": "w",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.data_test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.data_test",
    "peekOfCode": "w = {\"joe\" : 5, \"mindy\" : 6, \"jack\" : 7}",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.data_test",
    "documentation": {}
  },
  {
    "label": "foo",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.dict_error",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.dict_error",
    "peekOfCode": "def foo():\n  local_y[('tup', 'le')] = set([1, 2, 3])\nfoo()",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.dict_error",
    "documentation": {}
  },
  {
    "label": "foo",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.dict_test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.dict_test",
    "peekOfCode": "def foo():\n  local_x = {1 : 2}\n  local_y = {}\n  local_y[('tup', 'le')] = set([1, 2, 3])\n  print \"hello\", local_y.values()\nfoo()",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.dict_test",
    "documentation": {}
  },
  {
    "label": "x",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.dict_test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.dict_test",
    "peekOfCode": "x = {1 : 2}\nx[('tup', 'le')] = set([1, 2, 3])\ndef foo():\n  local_x = {1 : 2}\n  local_y = {}\n  local_y[('tup', 'le')] = set([1, 2, 3])\n  print \"hello\", local_y.values()\nfoo()",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.dict_test",
    "documentation": {}
  },
  {
    "label": "g",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.func_exception",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.func_exception",
    "peekOfCode": "def g(x,y):\n    print(\"In g\")\n    ans = x/y\n    return ans\ng(5, 0)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.func_exception",
    "documentation": {}
  },
  {
    "label": "x",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.generator_test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.generator_test",
    "peekOfCode": "x = (e for e in range(10))\ny = x\nz = (e for e in range(10))",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.generator_test",
    "documentation": {}
  },
  {
    "label": "y",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.generator_test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.generator_test",
    "peekOfCode": "y = x\nz = (e for e in range(10))",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.generator_test",
    "documentation": {}
  },
  {
    "label": "z",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.generator_test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.generator_test",
    "peekOfCode": "z = (e for e in range(10))",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.generator_test",
    "documentation": {}
  },
  {
    "label": "arr",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.infinite_loop",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.infinite_loop",
    "peekOfCode": "arr = [1, 1]\nprint arr[0]\nwhile True:\n  print arr[-1]\n  tmp = sum(arr)\n  arr.append(tmp)\n  del arr[0]",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.infinite_loop",
    "documentation": {}
  },
  {
    "label": "summation",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.lambda_1",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.lambda_1",
    "peekOfCode": "def summation(low, high, f, next):\n  s = 0\n  x = low\n  while x <= high:\n    s = s + f(x)\n    x = next(x)\n  return s\ndef sumsquares(low, high):\n  return summation(low, high, lambda x: x**2, lambda x: x+1)\nprint sumsquares(1, 5)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.lambda_1",
    "documentation": {}
  },
  {
    "label": "sumsquares",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.lambda_1",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.lambda_1",
    "peekOfCode": "def sumsquares(low, high):\n  return summation(low, high, lambda x: x**2, lambda x: x+1)\nprint sumsquares(1, 5)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.lambda_1",
    "documentation": {}
  },
  {
    "label": "x",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.list_dict_test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.list_dict_test",
    "peekOfCode": "x = {}\nl = ['hello', \"world\", 'goodbye']\nfor (i, e) in enumerate(l):\n    x[e] = i\nprint x",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.list_dict_test",
    "documentation": {}
  },
  {
    "label": "l",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.list_dict_test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.list_dict_test",
    "peekOfCode": "l = ['hello', \"world\", 'goodbye']\nfor (i, e) in enumerate(l):\n    x[e] = i\nprint x",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.list_dict_test",
    "documentation": {}
  },
  {
    "label": "x",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.list_test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.list_test",
    "peekOfCode": "x = [1, 2, \"hello\", (3, 4)]",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.list_test",
    "documentation": {}
  },
  {
    "label": "A",
    "kind": 6,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.newstyle_class",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.newstyle_class",
    "peekOfCode": "class A(object):\n  bla = \"A\"\n  def __init__(self):\n    self.blb = \"B\"\n  def x(self):\n    self.bla = self.blb\na = A()\na.x()\nprint a.bla\nprint A.bla",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.newstyle_class",
    "documentation": {}
  },
  {
    "label": "a",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.newstyle_class",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.newstyle_class",
    "peekOfCode": "a = A()\na.x()\nprint a.bla\nprint A.bla",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.newstyle_class",
    "documentation": {}
  },
  {
    "label": "add",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.one_func",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.one_func",
    "peekOfCode": "def add(a, b, c):\n  d = a + b\n  return c + d\nx = 5\ny = 10\nz = x * y\nprint add(x, y, z)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.one_func",
    "documentation": {}
  },
  {
    "label": "x",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.one_func",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.one_func",
    "peekOfCode": "x = 5\ny = 10\nz = x * y\nprint add(x, y, z)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.one_func",
    "documentation": {}
  },
  {
    "label": "y",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.one_func",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.one_func",
    "peekOfCode": "y = 10\nz = x * y\nprint add(x, y, z)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.one_func",
    "documentation": {}
  },
  {
    "label": "z",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.one_func",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.one_func",
    "peekOfCode": "z = x * y\nprint add(x, y, z)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.one_func",
    "documentation": {}
  },
  {
    "label": "x",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.parse_error",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.parse_error",
    "peekOfCode": "x = 0\nfor i in range(10):\n  x += 1\n   print x\n  x += 1",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.parse_error",
    "documentation": {}
  },
  {
    "label": "x",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.parse_error_2",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.parse_error_2",
    "peekOfCode": "x = 5\ny = x\nz = x + y\nfor x haslk;fjlasfhlkjl;sa",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.parse_error_2",
    "documentation": {}
  },
  {
    "label": "y",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.parse_error_2",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.parse_error_2",
    "peekOfCode": "y = x\nz = x + y\nfor x haslk;fjlasfhlkjl;sa",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.parse_error_2",
    "documentation": {}
  },
  {
    "label": "z",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.parse_error_2",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.parse_error_2",
    "peekOfCode": "z = x + y\nfor x haslk;fjlasfhlkjl;sa",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.parse_error_2",
    "documentation": {}
  },
  {
    "label": "x",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.parse_error_3",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.parse_error_3",
    "peekOfCode": "x = []\nfor i in range(10):\n    x.append(i)\n    if i == 24:\n        pass\n   print y",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.parse_error_3",
    "documentation": {}
  },
  {
    "label": "x",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.runtime_error",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.runtime_error",
    "peekOfCode": "x = 5\nfor i in range(10):\n  if i == x:\n    z = x + y # ERROR!\n  else:\n    z = i\n  print z",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.runtime_error",
    "documentation": {}
  },
  {
    "label": "x",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.set_test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.set_test",
    "peekOfCode": "x = set()\nx.add('a')\nx.add('a')\nx.add('b')\nx.add('c')\nx.add('b')",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.set_test",
    "documentation": {}
  },
  {
    "label": "x",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.simple",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.simple",
    "peekOfCode": "x = 5\ny = 10\nz = x * y\nprint \"HELLO WORLD\"\nfor i in range(10):\n  print z * i",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.simple",
    "documentation": {}
  },
  {
    "label": "y",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.simple",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.simple",
    "peekOfCode": "y = 10\nz = x * y\nprint \"HELLO WORLD\"\nfor i in range(10):\n  print z * i",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.simple",
    "documentation": {}
  },
  {
    "label": "z",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.simple",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.simple",
    "peekOfCode": "z = x * y\nprint \"HELLO WORLD\"\nfor i in range(10):\n  print z * i",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.simple",
    "documentation": {}
  },
  {
    "label": "f",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.three_lists",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.three_lists",
    "peekOfCode": "def f(xs):\n    print(xs)\na = [10, 20, 30]\nb = a\nc = [10, 20, 30]\nd = 24\ne = (a, b, c)\nf(b)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.three_lists",
    "documentation": {}
  },
  {
    "label": "a",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.three_lists",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.three_lists",
    "peekOfCode": "a = [10, 20, 30]\nb = a\nc = [10, 20, 30]\nd = 24\ne = (a, b, c)\nf(b)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.three_lists",
    "documentation": {}
  },
  {
    "label": "b",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.three_lists",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.three_lists",
    "peekOfCode": "b = a\nc = [10, 20, 30]\nd = 24\ne = (a, b, c)\nf(b)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.three_lists",
    "documentation": {}
  },
  {
    "label": "c",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.three_lists",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.three_lists",
    "peekOfCode": "c = [10, 20, 30]\nd = 24\ne = (a, b, c)\nf(b)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.three_lists",
    "documentation": {}
  },
  {
    "label": "d",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.three_lists",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.three_lists",
    "peekOfCode": "d = 24\ne = (a, b, c)\nf(b)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.three_lists",
    "documentation": {}
  },
  {
    "label": "e",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.three_lists",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.three_lists",
    "peekOfCode": "e = (a, b, c)\nf(b)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.three_lists",
    "documentation": {}
  },
  {
    "label": "x",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.tuple_test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.tuple_test",
    "peekOfCode": "x = (1, 2, 3)\ny = (4,)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.tuple_test",
    "documentation": {}
  },
  {
    "label": "y",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.tuple_test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.tuple_test",
    "peekOfCode": "y = (4,)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.tuple_test",
    "documentation": {}
  },
  {
    "label": "add",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.two_funcs",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.two_funcs",
    "peekOfCode": "def add(a, b, c):\n  d = a + b\n  return c + d\ndef double_add(a, b, c):\n  x = add(a, b, c)\n  y = add(a, b, c)\n  return x + y\nx = 5\ny = 10\nz = x * y",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.two_funcs",
    "documentation": {}
  },
  {
    "label": "double_add",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.two_funcs",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.two_funcs",
    "peekOfCode": "def double_add(a, b, c):\n  x = add(a, b, c)\n  y = add(a, b, c)\n  return x + y\nx = 5\ny = 10\nz = x * y\nprint add(x, y, z)\nprint double_add(x, y, z)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.two_funcs",
    "documentation": {}
  },
  {
    "label": "x",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.two_funcs",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.two_funcs",
    "peekOfCode": "x = 5\ny = 10\nz = x * y\nprint add(x, y, z)\nprint double_add(x, y, z)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.two_funcs",
    "documentation": {}
  },
  {
    "label": "y",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.two_funcs",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.two_funcs",
    "peekOfCode": "y = 10\nz = x * y\nprint add(x, y, z)\nprint double_add(x, y, z)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.two_funcs",
    "documentation": {}
  },
  {
    "label": "z",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.two_funcs",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.two_funcs",
    "peekOfCode": "z = x * y\nprint add(x, y, z)\nprint double_add(x, y, z)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.test-programs.two_funcs",
    "documentation": {}
  },
  {
    "label": "square",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.tutorials.advanced.map",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.tutorials.advanced.map",
    "peekOfCode": "def square(x):\n    return x*x\ndef map(f, lst):\n    ret = []\n    for elt in lst:\n        ret.append(f(elt))\n    return ret\ny = map(square, [1,2,3,4,5,6])",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.tutorials.advanced.map",
    "documentation": {}
  },
  {
    "label": "map",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.tutorials.advanced.map",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.tutorials.advanced.map",
    "peekOfCode": "def map(f, lst):\n    ret = []\n    for elt in lst:\n        ret.append(f(elt))\n    return ret\ny = map(square, [1,2,3,4,5,6])",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.tutorials.advanced.map",
    "documentation": {}
  },
  {
    "label": "y",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.tutorials.advanced.map",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.tutorials.advanced.map",
    "peekOfCode": "y = map(square, [1,2,3,4,5,6])",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.tutorials.advanced.map",
    "documentation": {}
  },
  {
    "label": "sqrt",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.tutorials.math.newton",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.tutorials.math.newton",
    "peekOfCode": "def sqrt(x):\n  def average(a, b):\n    return (a + b) / 2.0\n  def is_good_enough(guess):\n    return (abs((guess * guess) - x) < 0.001)\n  def improve(guess):\n    return average(guess, x / guess)\n  def sqrt_iter(guess):\n    if is_good_enough(guess):\n      return guess",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.tutorials.math.newton",
    "documentation": {}
  },
  {
    "label": "map",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.tutorials.MIT-6.01.map",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.tutorials.MIT-6.01.map",
    "peekOfCode": "def map(func, lst):\n  if lst == []:\n    return []\n  else:\n    return [func(lst[0])] + map(func, lst[1:])\ndef halveElements(lst):\n  return map(lambda x: x / 2.0, lst)\ninput = [2, 4, 6, 8, 10]\noutput = halveElements(input)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.tutorials.MIT-6.01.map",
    "documentation": {}
  },
  {
    "label": "halveElements",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.tutorials.MIT-6.01.map",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.tutorials.MIT-6.01.map",
    "peekOfCode": "def halveElements(lst):\n  return map(lambda x: x / 2.0, lst)\ninput = [2, 4, 6, 8, 10]\noutput = halveElements(input)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.tutorials.MIT-6.01.map",
    "documentation": {}
  },
  {
    "label": "input",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.tutorials.MIT-6.01.map",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.tutorials.MIT-6.01.map",
    "peekOfCode": "input = [2, 4, 6, 8, 10]\noutput = halveElements(input)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.tutorials.MIT-6.01.map",
    "documentation": {}
  },
  {
    "label": "output",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.tutorials.MIT-6.01.map",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.tutorials.MIT-6.01.map",
    "peekOfCode": "output = halveElements(input)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.tutorials.MIT-6.01.map",
    "documentation": {}
  },
  {
    "label": "Staff601",
    "kind": 6,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.tutorials.MIT-6.01.oop_1",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.tutorials.MIT-6.01.oop_1",
    "peekOfCode": "class Staff601:\n    course = '6.01'\n    building = 34\n    room = 501\n    def salutation(self):\n        return self.role + ' ' + self.name\npat = Staff601()\nprint pat.course\npat.name = 'Pat'\npat.age = 60",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.tutorials.MIT-6.01.oop_1",
    "documentation": {}
  },
  {
    "label": "pat",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.tutorials.MIT-6.01.oop_1",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.tutorials.MIT-6.01.oop_1",
    "peekOfCode": "pat = Staff601()\nprint pat.course\npat.name = 'Pat'\npat.age = 60\npat.role = 'Professor'\nprint pat.building\npat.building = 32\nprint pat.building\nprint pat.salutation()\nprint Staff601.salutation(pat)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.tutorials.MIT-6.01.oop_1",
    "documentation": {}
  },
  {
    "label": "pat.name",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.tutorials.MIT-6.01.oop_1",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.tutorials.MIT-6.01.oop_1",
    "peekOfCode": "pat.name = 'Pat'\npat.age = 60\npat.role = 'Professor'\nprint pat.building\npat.building = 32\nprint pat.building\nprint pat.salutation()\nprint Staff601.salutation(pat)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.tutorials.MIT-6.01.oop_1",
    "documentation": {}
  },
  {
    "label": "pat.age",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.tutorials.MIT-6.01.oop_1",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.tutorials.MIT-6.01.oop_1",
    "peekOfCode": "pat.age = 60\npat.role = 'Professor'\nprint pat.building\npat.building = 32\nprint pat.building\nprint pat.salutation()\nprint Staff601.salutation(pat)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.tutorials.MIT-6.01.oop_1",
    "documentation": {}
  },
  {
    "label": "pat.role",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.tutorials.MIT-6.01.oop_1",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.tutorials.MIT-6.01.oop_1",
    "peekOfCode": "pat.role = 'Professor'\nprint pat.building\npat.building = 32\nprint pat.building\nprint pat.salutation()\nprint Staff601.salutation(pat)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.tutorials.MIT-6.01.oop_1",
    "documentation": {}
  },
  {
    "label": "pat.building",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.tutorials.MIT-6.01.oop_1",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.tutorials.MIT-6.01.oop_1",
    "peekOfCode": "pat.building = 32\nprint pat.building\nprint pat.salutation()\nprint Staff601.salutation(pat)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.tutorials.MIT-6.01.oop_1",
    "documentation": {}
  },
  {
    "label": "Staff601",
    "kind": 6,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.tutorials.MIT-6.01.oop_2",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.tutorials.MIT-6.01.oop_2",
    "peekOfCode": "class Staff601:\n    course = '6.01'\n    building = 34\n    room = 501\n    def __init__(self, name, role, years, salary):\n      self.name = name\n      self.role = role\n      self.age = years\n      self.salary = salary\n    def salutation(self):",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.tutorials.MIT-6.01.oop_2",
    "documentation": {}
  },
  {
    "label": "pat",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.tutorials.MIT-6.01.oop_2",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.tutorials.MIT-6.01.oop_2",
    "peekOfCode": "pat = Staff601('Pat', 'Professor', 60, 100000)\nprint pat.salutation()",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.tutorials.MIT-6.01.oop_2",
    "documentation": {}
  },
  {
    "label": "Staff601",
    "kind": 6,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.tutorials.MIT-6.01.oop_3",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.tutorials.MIT-6.01.oop_3",
    "peekOfCode": "class Staff601:\n    course = '6.01'\n    building = 34\n    room = 501\n    def giveRaise(self, percentage):\n        self.salary = self.salary + self.salary * percentage\nclass Prof601(Staff601):\n    salary = 100000\n    def __init__(self, name, age):\n        self.name = name",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.tutorials.MIT-6.01.oop_3",
    "documentation": {}
  },
  {
    "label": "Prof601",
    "kind": 6,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.tutorials.MIT-6.01.oop_3",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.tutorials.MIT-6.01.oop_3",
    "peekOfCode": "class Prof601(Staff601):\n    salary = 100000\n    def __init__(self, name, age):\n        self.name = name\n        self.giveRaise((age - 18) * 0.03)\n    def salutation(self):\n        return self.role + ' ' + self.name\npat = Prof601('Pat', 60)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.tutorials.MIT-6.01.oop_3",
    "documentation": {}
  },
  {
    "label": "pat",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.tutorials.MIT-6.01.oop_3",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.tutorials.MIT-6.01.oop_3",
    "peekOfCode": "pat = Prof601('Pat', 60)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.tutorials.MIT-6.01.oop_3",
    "documentation": {}
  },
  {
    "label": "summation",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.tutorials.MIT-6.01.summation",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.tutorials.MIT-6.01.summation",
    "peekOfCode": "def summation(low, high, f, next):\n  s = 0\n  x = low\n  while x <= high:\n    s = s + f(x)\n    x = next(x)\n  return s\ndef sumsquares(low, high):\n  return summation(low, high, lambda x: x**2, lambda x: x+1)\nprint sumsquares(1, 10)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.tutorials.MIT-6.01.summation",
    "documentation": {}
  },
  {
    "label": "sumsquares",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.tutorials.MIT-6.01.summation",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.tutorials.MIT-6.01.summation",
    "peekOfCode": "def sumsquares(low, high):\n  return summation(low, high, lambda x: x**2, lambda x: x+1)\nprint sumsquares(1, 10)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.tutorials.MIT-6.01.summation",
    "documentation": {}
  },
  {
    "label": "A",
    "kind": 6,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.tutorials.oop.oop_demo",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.tutorials.oop.oop_demo",
    "peekOfCode": "class A:\n  x = 1\n  y = 'hello'\nclass B:\n  z = 'bye'\nclass C(A,B):\n  def salutation(self):\n    return '%d %s %s' % (self.x, self.y, self.z)\ninst = C()\nprint inst.salutation()",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.tutorials.oop.oop_demo",
    "documentation": {}
  },
  {
    "label": "B",
    "kind": 6,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.tutorials.oop.oop_demo",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.tutorials.oop.oop_demo",
    "peekOfCode": "class B:\n  z = 'bye'\nclass C(A,B):\n  def salutation(self):\n    return '%d %s %s' % (self.x, self.y, self.z)\ninst = C()\nprint inst.salutation()\ninst.x = 100\nprint inst.salutation()",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.tutorials.oop.oop_demo",
    "documentation": {}
  },
  {
    "label": "C",
    "kind": 6,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.tutorials.oop.oop_demo",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.tutorials.oop.oop_demo",
    "peekOfCode": "class C(A,B):\n  def salutation(self):\n    return '%d %s %s' % (self.x, self.y, self.z)\ninst = C()\nprint inst.salutation()\ninst.x = 100\nprint inst.salutation()",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.tutorials.oop.oop_demo",
    "documentation": {}
  },
  {
    "label": "inst",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.tutorials.oop.oop_demo",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.tutorials.oop.oop_demo",
    "peekOfCode": "inst = C()\nprint inst.salutation()\ninst.x = 100\nprint inst.salutation()",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.tutorials.oop.oop_demo",
    "documentation": {}
  },
  {
    "label": "inst.x",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.tutorials.oop.oop_demo",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.tutorials.oop.oop_demo",
    "peekOfCode": "inst.x = 100\nprint inst.salutation()",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.tutorials.oop.oop_demo",
    "documentation": {}
  },
  {
    "label": "amountBorrowed",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.tutorials.personal-finance.compound_interest",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.tutorials.personal-finance.compound_interest",
    "peekOfCode": "amountBorrowed = 1000\nannualRate = 0.08\ncurrentYear = 2010\nyearsToBorrow = 10\n# output:\namountOwed = amountBorrowed\nfor i in range(yearsToBorrow):\n  currentYear = currentYear + 1\n  amountOwed = amountOwed + (amountOwed * annualRate)\n  print \"Year:\", currentYear, \"| Amount owed:\", round(amountOwed, 2)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.tutorials.personal-finance.compound_interest",
    "documentation": {}
  },
  {
    "label": "annualRate",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.tutorials.personal-finance.compound_interest",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.tutorials.personal-finance.compound_interest",
    "peekOfCode": "annualRate = 0.08\ncurrentYear = 2010\nyearsToBorrow = 10\n# output:\namountOwed = amountBorrowed\nfor i in range(yearsToBorrow):\n  currentYear = currentYear + 1\n  amountOwed = amountOwed + (amountOwed * annualRate)\n  print \"Year:\", currentYear, \"| Amount owed:\", round(amountOwed, 2)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.tutorials.personal-finance.compound_interest",
    "documentation": {}
  },
  {
    "label": "currentYear",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.tutorials.personal-finance.compound_interest",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.tutorials.personal-finance.compound_interest",
    "peekOfCode": "currentYear = 2010\nyearsToBorrow = 10\n# output:\namountOwed = amountBorrowed\nfor i in range(yearsToBorrow):\n  currentYear = currentYear + 1\n  amountOwed = amountOwed + (amountOwed * annualRate)\n  print \"Year:\", currentYear, \"| Amount owed:\", round(amountOwed, 2)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.tutorials.personal-finance.compound_interest",
    "documentation": {}
  },
  {
    "label": "yearsToBorrow",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.tutorials.personal-finance.compound_interest",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.tutorials.personal-finance.compound_interest",
    "peekOfCode": "yearsToBorrow = 10\n# output:\namountOwed = amountBorrowed\nfor i in range(yearsToBorrow):\n  currentYear = currentYear + 1\n  amountOwed = amountOwed + (amountOwed * annualRate)\n  print \"Year:\", currentYear, \"| Amount owed:\", round(amountOwed, 2)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.tutorials.personal-finance.compound_interest",
    "documentation": {}
  },
  {
    "label": "amountOwed",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.tutorials.personal-finance.compound_interest",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.tutorials.personal-finance.compound_interest",
    "peekOfCode": "amountOwed = amountBorrowed\nfor i in range(yearsToBorrow):\n  currentYear = currentYear + 1\n  amountOwed = amountOwed + (amountOwed * annualRate)\n  print \"Year:\", currentYear, \"| Amount owed:\", round(amountOwed, 2)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v1-v2.tutorials.personal-finance.compound_interest",
    "documentation": {}
  },
  {
    "label": "GenericNode",
    "kind": 6,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.charts.templatetags.charts",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.charts.templatetags.charts",
    "peekOfCode": "class GenericNode(Node):\n    def __init__(self, args):\n        self.args = map(unicode,args)\n    def render(self,context):\n        for n,arg in enumerate(self.args):\n            if arg in context:\n                self.args[n] = resolve_variable(arg, context)\n            elif arg[0] == '\"' and arg[-1] == '\"':\n                self.args[n] = arg[1:-1]\n            elif arg[0] == \"'\" and arg[-1] == \"'\":",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.charts.templatetags.charts",
    "documentation": {}
  },
  {
    "label": "ChartNode",
    "kind": 6,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.charts.templatetags.charts",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.charts.templatetags.charts",
    "peekOfCode": "class ChartNode(Node):\n    def __init__(self, tokens, nodelist):\n        self.type = None\n        self.tokens = []\n        self.mode = None\n        if tokens and len(tokens)>1:\n            self.type = tokens[1]   \n            if tokens[-2] == 'as':\n                self.mode = tokens[-1]\n                self.tokens = tokens[2:-2]",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.charts.templatetags.charts",
    "documentation": {}
  },
  {
    "label": "FancyNode",
    "kind": 6,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.charts.templatetags.charts",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.charts.templatetags.charts",
    "peekOfCode": "class FancyNode(GenericNode):\n    cls = None\n    def post_render(self,context):\n        mode = None\n        self.args = self.args[1:]\n        if self.args[-2] == 'as':\n            mode = self.args[-1]\n            self.args = self.args[:-2]\n        for n,arg in enumerate(self.args):\n            self.args[n] = arg.replace('\\\\n','\\n').replace('\\\\r','\\r')",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.charts.templatetags.charts",
    "documentation": {}
  },
  {
    "label": "NoteNode",
    "kind": 6,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.charts.templatetags.charts",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.charts.templatetags.charts",
    "peekOfCode": "class NoteNode(FancyNode):\n    cls = GChartWrapper.Note\ndef note(parser, token):\n    return NoteNode(token.split_contents())\nregister.tag(note)\nclass PinNode(FancyNode):\n    cls = GChartWrapper.Pin\ndef pin(parser, token):\n    return PinNode(token.split_contents())\nregister.tag(pin)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.charts.templatetags.charts",
    "documentation": {}
  },
  {
    "label": "PinNode",
    "kind": 6,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.charts.templatetags.charts",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.charts.templatetags.charts",
    "peekOfCode": "class PinNode(FancyNode):\n    cls = GChartWrapper.Pin\ndef pin(parser, token):\n    return PinNode(token.split_contents())\nregister.tag(pin)\nclass TextNode(FancyNode):\n    cls = GChartWrapper.Text\ndef text(parser, token):\n    return TextNode(token.split_contents())\nregister.tag(text)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.charts.templatetags.charts",
    "documentation": {}
  },
  {
    "label": "TextNode",
    "kind": 6,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.charts.templatetags.charts",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.charts.templatetags.charts",
    "peekOfCode": "class TextNode(FancyNode):\n    cls = GChartWrapper.Text\ndef text(parser, token):\n    return TextNode(token.split_contents())\nregister.tag(text)\nclass BubbleNode(FancyNode):\n    cls = GChartWrapper.Bubble\ndef bubble(parser, token):\n    return BubbleNode(token.split_contents())\nregister.tag(bubble)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.charts.templatetags.charts",
    "documentation": {}
  },
  {
    "label": "BubbleNode",
    "kind": 6,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.charts.templatetags.charts",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.charts.templatetags.charts",
    "peekOfCode": "class BubbleNode(FancyNode):\n    cls = GChartWrapper.Bubble\ndef bubble(parser, token):\n    return BubbleNode(token.split_contents())\nregister.tag(bubble)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.charts.templatetags.charts",
    "documentation": {}
  },
  {
    "label": "attribute",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.charts.templatetags.charts",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.charts.templatetags.charts",
    "peekOfCode": "def attribute(parser, token):\n    return GenericNode(token.split_contents())\nfor tag in GChartWrapper.constants.TTAGSATTRS:\n    register.tag(tag, attribute)\nclass ChartNode(Node):\n    def __init__(self, tokens, nodelist):\n        self.type = None\n        self.tokens = []\n        self.mode = None\n        if tokens and len(tokens)>1:",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.charts.templatetags.charts",
    "documentation": {}
  },
  {
    "label": "make_chart",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.charts.templatetags.charts",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.charts.templatetags.charts",
    "peekOfCode": "def make_chart(parser, token):\n    nodelist = parser.parse(('endchart',))\n    parser.delete_first_token()\n    tokens = token.contents.split()\n    return ChartNode(tokens,nodelist)\nregister.tag('chart', make_chart)\nclass FancyNode(GenericNode):\n    cls = None\n    def post_render(self,context):\n        mode = None",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.charts.templatetags.charts",
    "documentation": {}
  },
  {
    "label": "note",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.charts.templatetags.charts",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.charts.templatetags.charts",
    "peekOfCode": "def note(parser, token):\n    return NoteNode(token.split_contents())\nregister.tag(note)\nclass PinNode(FancyNode):\n    cls = GChartWrapper.Pin\ndef pin(parser, token):\n    return PinNode(token.split_contents())\nregister.tag(pin)\nclass TextNode(FancyNode):\n    cls = GChartWrapper.Text",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.charts.templatetags.charts",
    "documentation": {}
  },
  {
    "label": "pin",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.charts.templatetags.charts",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.charts.templatetags.charts",
    "peekOfCode": "def pin(parser, token):\n    return PinNode(token.split_contents())\nregister.tag(pin)\nclass TextNode(FancyNode):\n    cls = GChartWrapper.Text\ndef text(parser, token):\n    return TextNode(token.split_contents())\nregister.tag(text)\nclass BubbleNode(FancyNode):\n    cls = GChartWrapper.Bubble",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.charts.templatetags.charts",
    "documentation": {}
  },
  {
    "label": "text",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.charts.templatetags.charts",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.charts.templatetags.charts",
    "peekOfCode": "def text(parser, token):\n    return TextNode(token.split_contents())\nregister.tag(text)\nclass BubbleNode(FancyNode):\n    cls = GChartWrapper.Bubble\ndef bubble(parser, token):\n    return BubbleNode(token.split_contents())\nregister.tag(bubble)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.charts.templatetags.charts",
    "documentation": {}
  },
  {
    "label": "bubble",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.charts.templatetags.charts",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.charts.templatetags.charts",
    "peekOfCode": "def bubble(parser, token):\n    return BubbleNode(token.split_contents())\nregister.tag(bubble)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.charts.templatetags.charts",
    "documentation": {}
  },
  {
    "label": "register",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.charts.templatetags.charts",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.charts.templatetags.charts",
    "peekOfCode": "register = Library()\nclass GenericNode(Node):\n    def __init__(self, args):\n        self.args = map(unicode,args)\n    def render(self,context):\n        for n,arg in enumerate(self.args):\n            if arg in context:\n                self.args[n] = resolve_variable(arg, context)\n            elif arg[0] == '\"' and arg[-1] == '\"':\n                self.args[n] = arg[1:-1]",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.charts.templatetags.charts",
    "documentation": {}
  },
  {
    "label": "quote",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.constants",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.constants",
    "peekOfCode": "def quote(s):\n    try:\n        return  quote_plus(s.encode('utf-8'),'+.,:|/?&$=')\n    except:\n        return  quote_plus(s,'+.,:|/?&$=')\ndef smart_str(s):\n    try:\n        s = quote(s)\n    except:\n        pass",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.constants",
    "documentation": {}
  },
  {
    "label": "smart_str",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.constants",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.constants",
    "peekOfCode": "def smart_str(s):\n    try:\n        s = quote(s)\n    except:\n        pass\n    # pgbovine - never use utf-8\n    #if PY_VER == '2.x':\n    #    return unicode(s).encode('utf-8') # Py2K\n    return str(s)#.encode('utf-8') # Py3K\nAPIPARAMS = ('chxtc', 'chxt', 'chxp', 'chxs', 'chxr', 'chco', 'chtm', 'chld',",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.constants",
    "documentation": {}
  },
  {
    "label": "APIPARAMS",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.constants",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.constants",
    "peekOfCode": "APIPARAMS = ('chxtc', 'chxt', 'chxp', 'chxs', 'chxr', 'chco', 'chtm', 'chld',\n    'chts', 'chtt', 'chxl', 'chd', 'chf', 'chg', 'chl', 'chm', 'chp', 'chs',\n    'cht', 'chls', 'chdlp', 'chds', 'chbh', 'chdl', 'choe', 'chst', 'chma')\nMARKERS = 'acdostvVhxrRbBDF'\nTYPES = ('bvs', 'p3', 'qr', 'lc', 'p', 'bhg', 'pc', 's', 'r', 'rs', 'bvg', 't',\n    'v', 'lxy', 'bhs', 'gom', 'ls')\nIMGATTRS = ('title','alt','align','border','height','width','ismap','longdesc',\n'usemap','id','class','style','lang','xml:lang','onclick','ondblclick','onmousedown',\n'onmouseup','onmouseover','onmousemove','onmouseout','onkeypress','onkeydown','onkeyup')\nGEO = ('africa','asia','europe','middle_east','south_america','usa','world')",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.constants",
    "documentation": {}
  },
  {
    "label": "MARKERS",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.constants",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.constants",
    "peekOfCode": "MARKERS = 'acdostvVhxrRbBDF'\nTYPES = ('bvs', 'p3', 'qr', 'lc', 'p', 'bhg', 'pc', 's', 'r', 'rs', 'bvg', 't',\n    'v', 'lxy', 'bhs', 'gom', 'ls')\nIMGATTRS = ('title','alt','align','border','height','width','ismap','longdesc',\n'usemap','id','class','style','lang','xml:lang','onclick','ondblclick','onmousedown',\n'onmouseup','onmouseover','onmousemove','onmouseout','onkeypress','onkeydown','onkeyup')\nGEO = ('africa','asia','europe','middle_east','south_america','usa','world')\nTTAGSATTRS = ('label','title','color','line','grid','bar','marker','fill','legend','axes',\n'encoding','scale','size','type','dataset','img','map','bar_width_spacing',\n'legend_pos','output_encoding','level_data')",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.constants",
    "documentation": {}
  },
  {
    "label": "TYPES",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.constants",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.constants",
    "peekOfCode": "TYPES = ('bvs', 'p3', 'qr', 'lc', 'p', 'bhg', 'pc', 's', 'r', 'rs', 'bvg', 't',\n    'v', 'lxy', 'bhs', 'gom', 'ls')\nIMGATTRS = ('title','alt','align','border','height','width','ismap','longdesc',\n'usemap','id','class','style','lang','xml:lang','onclick','ondblclick','onmousedown',\n'onmouseup','onmouseover','onmousemove','onmouseout','onkeypress','onkeydown','onkeyup')\nGEO = ('africa','asia','europe','middle_east','south_america','usa','world')\nTTAGSATTRS = ('label','title','color','line','grid','bar','marker','fill','legend','axes',\n'encoding','scale','size','type','dataset','img','map','bar_width_spacing',\n'legend_pos','output_encoding','level_data')\nAPIURL = 'http://chart.apis.google.com/chart?' ",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.constants",
    "documentation": {}
  },
  {
    "label": "IMGATTRS",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.constants",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.constants",
    "peekOfCode": "IMGATTRS = ('title','alt','align','border','height','width','ismap','longdesc',\n'usemap','id','class','style','lang','xml:lang','onclick','ondblclick','onmousedown',\n'onmouseup','onmouseover','onmousemove','onmouseout','onkeypress','onkeydown','onkeyup')\nGEO = ('africa','asia','europe','middle_east','south_america','usa','world')\nTTAGSATTRS = ('label','title','color','line','grid','bar','marker','fill','legend','axes',\n'encoding','scale','size','type','dataset','img','map','bar_width_spacing',\n'legend_pos','output_encoding','level_data')\nAPIURL = 'http://chart.apis.google.com/chart?' \nCOLOR_MAP = {\n    'aliceblue': 'F0F8FF',",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.constants",
    "documentation": {}
  },
  {
    "label": "GEO",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.constants",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.constants",
    "peekOfCode": "GEO = ('africa','asia','europe','middle_east','south_america','usa','world')\nTTAGSATTRS = ('label','title','color','line','grid','bar','marker','fill','legend','axes',\n'encoding','scale','size','type','dataset','img','map','bar_width_spacing',\n'legend_pos','output_encoding','level_data')\nAPIURL = 'http://chart.apis.google.com/chart?' \nCOLOR_MAP = {\n    'aliceblue': 'F0F8FF',\n    'antiquewhite': 'FAEBD7',\n    'aqua': '00FFFF',\n    'aquamarine': '7FFFD4',",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.constants",
    "documentation": {}
  },
  {
    "label": "TTAGSATTRS",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.constants",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.constants",
    "peekOfCode": "TTAGSATTRS = ('label','title','color','line','grid','bar','marker','fill','legend','axes',\n'encoding','scale','size','type','dataset','img','map','bar_width_spacing',\n'legend_pos','output_encoding','level_data')\nAPIURL = 'http://chart.apis.google.com/chart?' \nCOLOR_MAP = {\n    'aliceblue': 'F0F8FF',\n    'antiquewhite': 'FAEBD7',\n    'aqua': '00FFFF',\n    'aquamarine': '7FFFD4',\n    'azure': 'F0FFFF',",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.constants",
    "documentation": {}
  },
  {
    "label": "APIURL",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.constants",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.constants",
    "peekOfCode": "APIURL = 'http://chart.apis.google.com/chart?' \nCOLOR_MAP = {\n    'aliceblue': 'F0F8FF',\n    'antiquewhite': 'FAEBD7',\n    'aqua': '00FFFF',\n    'aquamarine': '7FFFD4',\n    'azure': 'F0FFFF',\n    'beige': 'F5F5DC',\n    'bisque': 'FFE4C4',\n    'black': '000000',",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.constants",
    "documentation": {}
  },
  {
    "label": "COLOR_MAP",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.constants",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.constants",
    "peekOfCode": "COLOR_MAP = {\n    'aliceblue': 'F0F8FF',\n    'antiquewhite': 'FAEBD7',\n    'aqua': '00FFFF',\n    'aquamarine': '7FFFD4',\n    'azure': 'F0FFFF',\n    'beige': 'F5F5DC',\n    'bisque': 'FFE4C4',\n    'black': '000000',\n    'blanchedalmond': 'FFEBCD',",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.constants",
    "documentation": {}
  },
  {
    "label": "PIN_TYPES",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.constants",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.constants",
    "peekOfCode": "PIN_TYPES = ('pin_letter','pin_icon','xpin_letter','xpin_icon','spin')\nPIN_ICONS = ('home', 'home', 'WC', 'WCfemale', 'WCmale', 'accomm', 'airport',\n    'baby', 'bar', 'bicycle', 'bus', 'cafe', 'camping', 'car', 'caution', 'cinema',\n    'computer', 'corporate', 'dollar', 'euro', 'fire', 'flag', 'floral', 'helicopter',\n    'home', 'info', 'landslide', 'legal', 'location', 'locomotive', 'medical',\n    'mobile', 'motorcycle', 'music', 'parking', 'pet', 'petrol', 'phone', 'picnic',\n    'postal', 'pound', 'repair', 'restaurant', 'sail', 'school', 'scissors', 'ship',\n    'shoppingbag', 'shoppingcart', 'ski', 'snack', 'snow', 'sport', 'swim', 'taxi',\n    'train', 'truck', 'wheelchair', 'yen')\nPIN_SHAPES = ('pin','star','sleft','sright')",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.constants",
    "documentation": {}
  },
  {
    "label": "PIN_ICONS",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.constants",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.constants",
    "peekOfCode": "PIN_ICONS = ('home', 'home', 'WC', 'WCfemale', 'WCmale', 'accomm', 'airport',\n    'baby', 'bar', 'bicycle', 'bus', 'cafe', 'camping', 'car', 'caution', 'cinema',\n    'computer', 'corporate', 'dollar', 'euro', 'fire', 'flag', 'floral', 'helicopter',\n    'home', 'info', 'landslide', 'legal', 'location', 'locomotive', 'medical',\n    'mobile', 'motorcycle', 'music', 'parking', 'pet', 'petrol', 'phone', 'picnic',\n    'postal', 'pound', 'repair', 'restaurant', 'sail', 'school', 'scissors', 'ship',\n    'shoppingbag', 'shoppingcart', 'ski', 'snack', 'snow', 'sport', 'swim', 'taxi',\n    'train', 'truck', 'wheelchair', 'yen')\nPIN_SHAPES = ('pin','star','sleft','sright')\nNOTE_TYPES = ('note_title','note','weather')",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.constants",
    "documentation": {}
  },
  {
    "label": "PIN_SHAPES",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.constants",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.constants",
    "peekOfCode": "PIN_SHAPES = ('pin','star','sleft','sright')\nNOTE_TYPES = ('note_title','note','weather')\nNOTE_IMAGES = ('arrow_d', 'balloon', 'pinned_c', 'sticky_y', 'taped_y', 'thought')\nNOTE_WEATHERS = ('clear-night-moon', 'cloudy-heavy', 'cloudy-sunny', 'cloudy',\n    'rain', 'rainy-sunny', 'snow', 'snowflake', 'snowy-sunny', 'sunny-cloudy',\n    'sunny', 'thermometer-cold', 'thermometer-hot', 'thunder', 'windy')\nBUBBLE_TYPES = ('icon_text_small','icon_text_big','icon_texts_big','texts_big')\nBUBBLE_SICONS = ('WC', 'WCfemale', 'WCmale', 'accomm', 'airport', 'baby', 'bar',\n    'bicycle', 'bus', 'cafe', 'camping', 'car', 'caution', 'cinema', 'computer',\n    'corporate', 'dollar', 'euro', 'fire', 'flag', 'floral', 'helicopter', 'home',",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.constants",
    "documentation": {}
  },
  {
    "label": "NOTE_TYPES",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.constants",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.constants",
    "peekOfCode": "NOTE_TYPES = ('note_title','note','weather')\nNOTE_IMAGES = ('arrow_d', 'balloon', 'pinned_c', 'sticky_y', 'taped_y', 'thought')\nNOTE_WEATHERS = ('clear-night-moon', 'cloudy-heavy', 'cloudy-sunny', 'cloudy',\n    'rain', 'rainy-sunny', 'snow', 'snowflake', 'snowy-sunny', 'sunny-cloudy',\n    'sunny', 'thermometer-cold', 'thermometer-hot', 'thunder', 'windy')\nBUBBLE_TYPES = ('icon_text_small','icon_text_big','icon_texts_big','texts_big')\nBUBBLE_SICONS = ('WC', 'WCfemale', 'WCmale', 'accomm', 'airport', 'baby', 'bar',\n    'bicycle', 'bus', 'cafe', 'camping', 'car', 'caution', 'cinema', 'computer',\n    'corporate', 'dollar', 'euro', 'fire', 'flag', 'floral', 'helicopter', 'home',\n    'info', 'landslide', 'legal', 'location', 'locomotive', 'medical', 'mobile',",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.constants",
    "documentation": {}
  },
  {
    "label": "NOTE_IMAGES",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.constants",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.constants",
    "peekOfCode": "NOTE_IMAGES = ('arrow_d', 'balloon', 'pinned_c', 'sticky_y', 'taped_y', 'thought')\nNOTE_WEATHERS = ('clear-night-moon', 'cloudy-heavy', 'cloudy-sunny', 'cloudy',\n    'rain', 'rainy-sunny', 'snow', 'snowflake', 'snowy-sunny', 'sunny-cloudy',\n    'sunny', 'thermometer-cold', 'thermometer-hot', 'thunder', 'windy')\nBUBBLE_TYPES = ('icon_text_small','icon_text_big','icon_texts_big','texts_big')\nBUBBLE_SICONS = ('WC', 'WCfemale', 'WCmale', 'accomm', 'airport', 'baby', 'bar',\n    'bicycle', 'bus', 'cafe', 'camping', 'car', 'caution', 'cinema', 'computer',\n    'corporate', 'dollar', 'euro', 'fire', 'flag', 'floral', 'helicopter', 'home',\n    'info', 'landslide', 'legal', 'location', 'locomotive', 'medical', 'mobile',\n    'motorcycle', 'music', 'parking', 'pet', 'petrol', 'phone', 'picnic', 'postal',",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.constants",
    "documentation": {}
  },
  {
    "label": "NOTE_WEATHERS",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.constants",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.constants",
    "peekOfCode": "NOTE_WEATHERS = ('clear-night-moon', 'cloudy-heavy', 'cloudy-sunny', 'cloudy',\n    'rain', 'rainy-sunny', 'snow', 'snowflake', 'snowy-sunny', 'sunny-cloudy',\n    'sunny', 'thermometer-cold', 'thermometer-hot', 'thunder', 'windy')\nBUBBLE_TYPES = ('icon_text_small','icon_text_big','icon_texts_big','texts_big')\nBUBBLE_SICONS = ('WC', 'WCfemale', 'WCmale', 'accomm', 'airport', 'baby', 'bar',\n    'bicycle', 'bus', 'cafe', 'camping', 'car', 'caution', 'cinema', 'computer',\n    'corporate', 'dollar', 'euro', 'fire', 'flag', 'floral', 'helicopter', 'home',\n    'info', 'landslide', 'legal', 'location', 'locomotive', 'medical', 'mobile',\n    'motorcycle', 'music', 'parking', 'pet', 'petrol', 'phone', 'picnic', 'postal',\n    'pound', 'repair', 'restaurant', 'sail', 'school', 'scissors', 'ship', 'shoppingbag',",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.constants",
    "documentation": {}
  },
  {
    "label": "BUBBLE_TYPES",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.constants",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.constants",
    "peekOfCode": "BUBBLE_TYPES = ('icon_text_small','icon_text_big','icon_texts_big','texts_big')\nBUBBLE_SICONS = ('WC', 'WCfemale', 'WCmale', 'accomm', 'airport', 'baby', 'bar',\n    'bicycle', 'bus', 'cafe', 'camping', 'car', 'caution', 'cinema', 'computer',\n    'corporate', 'dollar', 'euro', 'fire', 'flag', 'floral', 'helicopter', 'home',\n    'info', 'landslide', 'legal', 'location', 'locomotive', 'medical', 'mobile',\n    'motorcycle', 'music', 'parking', 'pet', 'petrol', 'phone', 'picnic', 'postal',\n    'pound', 'repair', 'restaurant', 'sail', 'school', 'scissors', 'ship', 'shoppingbag',\n    'shoppingcart', 'ski', 'snack', 'snow', 'sport', 'swim', 'taxi', 'train',\n    'truck', 'wheelchair', 'yen')\nBUBBLE_LICONS = ('beer', 'bike', 'car', 'house', 'petrol', 'ski', 'snack')",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.constants",
    "documentation": {}
  },
  {
    "label": "BUBBLE_SICONS",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.constants",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.constants",
    "peekOfCode": "BUBBLE_SICONS = ('WC', 'WCfemale', 'WCmale', 'accomm', 'airport', 'baby', 'bar',\n    'bicycle', 'bus', 'cafe', 'camping', 'car', 'caution', 'cinema', 'computer',\n    'corporate', 'dollar', 'euro', 'fire', 'flag', 'floral', 'helicopter', 'home',\n    'info', 'landslide', 'legal', 'location', 'locomotive', 'medical', 'mobile',\n    'motorcycle', 'music', 'parking', 'pet', 'petrol', 'phone', 'picnic', 'postal',\n    'pound', 'repair', 'restaurant', 'sail', 'school', 'scissors', 'ship', 'shoppingbag',\n    'shoppingcart', 'ski', 'snack', 'snow', 'sport', 'swim', 'taxi', 'train',\n    'truck', 'wheelchair', 'yen')\nBUBBLE_LICONS = ('beer', 'bike', 'car', 'house', 'petrol', 'ski', 'snack')\nLEGEND_POSITIONS = ('b','t','r','l','bv','tv')",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.constants",
    "documentation": {}
  },
  {
    "label": "BUBBLE_LICONS",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.constants",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.constants",
    "peekOfCode": "BUBBLE_LICONS = ('beer', 'bike', 'car', 'house', 'petrol', 'ski', 'snack')\nLEGEND_POSITIONS = ('b','t','r','l','bv','tv')",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.constants",
    "documentation": {}
  },
  {
    "label": "LEGEND_POSITIONS",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.constants",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.constants",
    "peekOfCode": "LEGEND_POSITIONS = ('b','t','r','l','bv','tv')",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.constants",
    "documentation": {}
  },
  {
    "label": "Encoder",
    "kind": 6,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.encoding",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.encoding",
    "peekOfCode": "class Encoder:\n    \"\"\"Data encoder that handles simple,text, and extended encodings\n    Based on javascript encoding algorithm and pygooglecharts\"\"\"\n    def __init__(self, encoding=None, scale=None, series=''):\n        self.series = series or ''\n        if encoding is None:\n            encoding = 'text'\n        assert(encoding in ('simple','text','extended')),\\\n            'Unknown encoding: %s'%encoding\n        self.encoding = encoding",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.encoding",
    "documentation": {}
  },
  {
    "label": "coding",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.encoding",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.encoding",
    "peekOfCode": "coding = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'\necoding = coding + '-.'\ncodeset =  {\n    'simple': {\n        'coding': coding,\n        'max_value':  61,\n        'char': ',',\n        'dchar': '',\n        'none': '_',\n        'value': lambda x: coding[x]",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.encoding",
    "documentation": {}
  },
  {
    "label": "ecoding",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.encoding",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.encoding",
    "peekOfCode": "ecoding = coding + '-.'\ncodeset =  {\n    'simple': {\n        'coding': coding,\n        'max_value':  61,\n        'char': ',',\n        'dchar': '',\n        'none': '_',\n        'value': lambda x: coding[x]\n    },",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.encoding",
    "documentation": {}
  },
  {
    "label": "codeset",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.encoding",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.encoding",
    "peekOfCode": "codeset =  {\n    'simple': {\n        'coding': coding,\n        'max_value':  61,\n        'char': ',',\n        'dchar': '',\n        'none': '_',\n        'value': lambda x: coding[x]\n    },\n    'text': {",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.encoding",
    "documentation": {}
  },
  {
    "label": "Axes",
    "kind": 6,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.GChart",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.GChart",
    "peekOfCode": "class Axes(dict):\n    \"\"\"\n    Axes attribute dictionary storage\n    Use this class via GChart(...).axes\n    Methods are taken one at a time, like so:\n    >>> G = GChart()\n    >>> G.axes.type('xy')\n    {}\n    >>> G.axes.label(1,'Label1') # X Axis\n    {}",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.GChart",
    "documentation": {}
  },
  {
    "label": "GChart",
    "kind": 6,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.GChart",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.GChart",
    "peekOfCode": "class GChart(dict):\n    \"\"\"Main chart class\n    Chart type must be valid for cht parameter\n    Dataset can be any python iterable and be multi dimensional\n    Kwargs will be put into chart API params if valid\"\"\"\n    def __init__(self, ctype=None, dataset=[], **kwargs):\n        self._series = kwargs.pop('series',None)\n        self.lines,self.fills,self.markers,self.scales = [],[],[],[]\n        self._geo,self._ld = '',''\n        self._dataset = dataset",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.GChart",
    "documentation": {}
  },
  {
    "label": "QRCode",
    "kind": 6,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.GChart",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.GChart",
    "peekOfCode": "class QRCode(GChart):\n    def __init__(self, content='', **kwargs):\n        kwargs['choe'] = 'UTF-8'\n        if isinstance(content, str):\n            kwargs['chl'] = quote(content).replace('%0A','\\n')\n        else:\n            kwargs['chl'] = quote(content[0]).replace('%0A','\\n')\n        GChart.__init__(self, 'qr', None, **kwargs)\nclass _AbstractGChart(GChart):\n    o,t = {},None",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.GChart",
    "documentation": {}
  },
  {
    "label": "_AbstractGChart",
    "kind": 6,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.GChart",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.GChart",
    "peekOfCode": "class _AbstractGChart(GChart):\n    o,t = {},None\n    def __init__(self, dataset, **kwargs):\n        kwargs.update(self.o)\n        GChart.__init__(self, self.t, dataset, **kwargs)\nclass Meter(_AbstractGChart):   o,t = {'encoding':'text'},'gom'\nclass Line(_AbstractGChart):     t = 'lc' \nclass LineXY(_AbstractGChart):     t = 'lxy' \nclass HorizontalBarStack(_AbstractGChart):     t = 'bhs' \nclass VerticalBarStack(_AbstractGChart):     t = 'bvs' ",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.GChart",
    "documentation": {}
  },
  {
    "label": "Meter",
    "kind": 6,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.GChart",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.GChart",
    "peekOfCode": "class Meter(_AbstractGChart):   o,t = {'encoding':'text'},'gom'\nclass Line(_AbstractGChart):     t = 'lc' \nclass LineXY(_AbstractGChart):     t = 'lxy' \nclass HorizontalBarStack(_AbstractGChart):     t = 'bhs' \nclass VerticalBarStack(_AbstractGChart):     t = 'bvs' \nclass HorizontalBarGroup(_AbstractGChart):     t = 'bhg' \nclass VerticalBarGroup(_AbstractGChart):     t = 'bvg' \nclass Pie(_AbstractGChart):     t = 'p' \nclass Pie3D(_AbstractGChart):     t = 'p3' \nclass Venn(_AbstractGChart):     t = 'v' ",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.GChart",
    "documentation": {}
  },
  {
    "label": "Line",
    "kind": 6,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.GChart",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.GChart",
    "peekOfCode": "class Line(_AbstractGChart):     t = 'lc' \nclass LineXY(_AbstractGChart):     t = 'lxy' \nclass HorizontalBarStack(_AbstractGChart):     t = 'bhs' \nclass VerticalBarStack(_AbstractGChart):     t = 'bvs' \nclass HorizontalBarGroup(_AbstractGChart):     t = 'bhg' \nclass VerticalBarGroup(_AbstractGChart):     t = 'bvg' \nclass Pie(_AbstractGChart):     t = 'p' \nclass Pie3D(_AbstractGChart):     t = 'p3' \nclass Venn(_AbstractGChart):     t = 'v' \nclass Scatter(_AbstractGChart):     t = 's' ",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.GChart",
    "documentation": {}
  },
  {
    "label": "LineXY",
    "kind": 6,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.GChart",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.GChart",
    "peekOfCode": "class LineXY(_AbstractGChart):     t = 'lxy' \nclass HorizontalBarStack(_AbstractGChart):     t = 'bhs' \nclass VerticalBarStack(_AbstractGChart):     t = 'bvs' \nclass HorizontalBarGroup(_AbstractGChart):     t = 'bhg' \nclass VerticalBarGroup(_AbstractGChart):     t = 'bvg' \nclass Pie(_AbstractGChart):     t = 'p' \nclass Pie3D(_AbstractGChart):     t = 'p3' \nclass Venn(_AbstractGChart):     t = 'v' \nclass Scatter(_AbstractGChart):     t = 's' \nclass Sparkline(_AbstractGChart):     t = 'ls' ",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.GChart",
    "documentation": {}
  },
  {
    "label": "HorizontalBarStack",
    "kind": 6,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.GChart",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.GChart",
    "peekOfCode": "class HorizontalBarStack(_AbstractGChart):     t = 'bhs' \nclass VerticalBarStack(_AbstractGChart):     t = 'bvs' \nclass HorizontalBarGroup(_AbstractGChart):     t = 'bhg' \nclass VerticalBarGroup(_AbstractGChart):     t = 'bvg' \nclass Pie(_AbstractGChart):     t = 'p' \nclass Pie3D(_AbstractGChart):     t = 'p3' \nclass Venn(_AbstractGChart):     t = 'v' \nclass Scatter(_AbstractGChart):     t = 's' \nclass Sparkline(_AbstractGChart):     t = 'ls' \nclass Radar(_AbstractGChart):     t = 'r' ",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.GChart",
    "documentation": {}
  },
  {
    "label": "VerticalBarStack",
    "kind": 6,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.GChart",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.GChart",
    "peekOfCode": "class VerticalBarStack(_AbstractGChart):     t = 'bvs' \nclass HorizontalBarGroup(_AbstractGChart):     t = 'bhg' \nclass VerticalBarGroup(_AbstractGChart):     t = 'bvg' \nclass Pie(_AbstractGChart):     t = 'p' \nclass Pie3D(_AbstractGChart):     t = 'p3' \nclass Venn(_AbstractGChart):     t = 'v' \nclass Scatter(_AbstractGChart):     t = 's' \nclass Sparkline(_AbstractGChart):     t = 'ls' \nclass Radar(_AbstractGChart):     t = 'r' \nclass RadarSpline(_AbstractGChart):     t = 'rs' ",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.GChart",
    "documentation": {}
  },
  {
    "label": "HorizontalBarGroup",
    "kind": 6,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.GChart",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.GChart",
    "peekOfCode": "class HorizontalBarGroup(_AbstractGChart):     t = 'bhg' \nclass VerticalBarGroup(_AbstractGChart):     t = 'bvg' \nclass Pie(_AbstractGChart):     t = 'p' \nclass Pie3D(_AbstractGChart):     t = 'p3' \nclass Venn(_AbstractGChart):     t = 'v' \nclass Scatter(_AbstractGChart):     t = 's' \nclass Sparkline(_AbstractGChart):     t = 'ls' \nclass Radar(_AbstractGChart):     t = 'r' \nclass RadarSpline(_AbstractGChart):     t = 'rs' \nclass Map(_AbstractGChart):     t = 't' ",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.GChart",
    "documentation": {}
  },
  {
    "label": "VerticalBarGroup",
    "kind": 6,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.GChart",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.GChart",
    "peekOfCode": "class VerticalBarGroup(_AbstractGChart):     t = 'bvg' \nclass Pie(_AbstractGChart):     t = 'p' \nclass Pie3D(_AbstractGChart):     t = 'p3' \nclass Venn(_AbstractGChart):     t = 'v' \nclass Scatter(_AbstractGChart):     t = 's' \nclass Sparkline(_AbstractGChart):     t = 'ls' \nclass Radar(_AbstractGChart):     t = 'r' \nclass RadarSpline(_AbstractGChart):     t = 'rs' \nclass Map(_AbstractGChart):     t = 't' \nclass PieC(_AbstractGChart):     t = 'pc' ",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.GChart",
    "documentation": {}
  },
  {
    "label": "Pie",
    "kind": 6,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.GChart",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.GChart",
    "peekOfCode": "class Pie(_AbstractGChart):     t = 'p' \nclass Pie3D(_AbstractGChart):     t = 'p3' \nclass Venn(_AbstractGChart):     t = 'v' \nclass Scatter(_AbstractGChart):     t = 's' \nclass Sparkline(_AbstractGChart):     t = 'ls' \nclass Radar(_AbstractGChart):     t = 'r' \nclass RadarSpline(_AbstractGChart):     t = 'rs' \nclass Map(_AbstractGChart):     t = 't' \nclass PieC(_AbstractGChart):     t = 'pc' \n########################################",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.GChart",
    "documentation": {}
  },
  {
    "label": "Pie3D",
    "kind": 6,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.GChart",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.GChart",
    "peekOfCode": "class Pie3D(_AbstractGChart):     t = 'p3' \nclass Venn(_AbstractGChart):     t = 'v' \nclass Scatter(_AbstractGChart):     t = 's' \nclass Sparkline(_AbstractGChart):     t = 'ls' \nclass Radar(_AbstractGChart):     t = 'r' \nclass RadarSpline(_AbstractGChart):     t = 'rs' \nclass Map(_AbstractGChart):     t = 't' \nclass PieC(_AbstractGChart):     t = 'pc' \n########################################\n# Now for something completely different",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.GChart",
    "documentation": {}
  },
  {
    "label": "Venn",
    "kind": 6,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.GChart",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.GChart",
    "peekOfCode": "class Venn(_AbstractGChart):     t = 'v' \nclass Scatter(_AbstractGChart):     t = 's' \nclass Sparkline(_AbstractGChart):     t = 'ls' \nclass Radar(_AbstractGChart):     t = 'r' \nclass RadarSpline(_AbstractGChart):     t = 'rs' \nclass Map(_AbstractGChart):     t = 't' \nclass PieC(_AbstractGChart):     t = 'pc' \n########################################\n# Now for something completely different\n########################################",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.GChart",
    "documentation": {}
  },
  {
    "label": "Scatter",
    "kind": 6,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.GChart",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.GChart",
    "peekOfCode": "class Scatter(_AbstractGChart):     t = 's' \nclass Sparkline(_AbstractGChart):     t = 'ls' \nclass Radar(_AbstractGChart):     t = 'r' \nclass RadarSpline(_AbstractGChart):     t = 'rs' \nclass Map(_AbstractGChart):     t = 't' \nclass PieC(_AbstractGChart):     t = 'pc' \n########################################\n# Now for something completely different\n########################################\nclass Text(GChart):",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.GChart",
    "documentation": {}
  },
  {
    "label": "Sparkline",
    "kind": 6,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.GChart",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.GChart",
    "peekOfCode": "class Sparkline(_AbstractGChart):     t = 'ls' \nclass Radar(_AbstractGChart):     t = 'r' \nclass RadarSpline(_AbstractGChart):     t = 'rs' \nclass Map(_AbstractGChart):     t = 't' \nclass PieC(_AbstractGChart):     t = 'pc' \n########################################\n# Now for something completely different\n########################################\nclass Text(GChart):\n    def render(self): pass",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.GChart",
    "documentation": {}
  },
  {
    "label": "Radar",
    "kind": 6,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.GChart",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.GChart",
    "peekOfCode": "class Radar(_AbstractGChart):     t = 'r' \nclass RadarSpline(_AbstractGChart):     t = 'rs' \nclass Map(_AbstractGChart):     t = 't' \nclass PieC(_AbstractGChart):     t = 'pc' \n########################################\n# Now for something completely different\n########################################\nclass Text(GChart):\n    def render(self): pass\n    def __init__(self, *args):",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.GChart",
    "documentation": {}
  },
  {
    "label": "RadarSpline",
    "kind": 6,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.GChart",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.GChart",
    "peekOfCode": "class RadarSpline(_AbstractGChart):     t = 'rs' \nclass Map(_AbstractGChart):     t = 't' \nclass PieC(_AbstractGChart):     t = 'pc' \n########################################\n# Now for something completely different\n########################################\nclass Text(GChart):\n    def render(self): pass\n    def __init__(self, *args):\n        GChart.__init__(self)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.GChart",
    "documentation": {}
  },
  {
    "label": "Map",
    "kind": 6,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.GChart",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.GChart",
    "peekOfCode": "class Map(_AbstractGChart):     t = 't' \nclass PieC(_AbstractGChart):     t = 'pc' \n########################################\n# Now for something completely different\n########################################\nclass Text(GChart):\n    def render(self): pass\n    def __init__(self, *args):\n        GChart.__init__(self)\n        self['chst'] = 'd_text_outline'",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.GChart",
    "documentation": {}
  },
  {
    "label": "PieC",
    "kind": 6,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.GChart",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.GChart",
    "peekOfCode": "class PieC(_AbstractGChart):     t = 'pc' \n########################################\n# Now for something completely different\n########################################\nclass Text(GChart):\n    def render(self): pass\n    def __init__(self, *args):\n        GChart.__init__(self)\n        self['chst'] = 'd_text_outline'\n        args = list(map(str, color_args(args, 0, 3)))",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.GChart",
    "documentation": {}
  },
  {
    "label": "Text",
    "kind": 6,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.GChart",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.GChart",
    "peekOfCode": "class Text(GChart):\n    def render(self): pass\n    def __init__(self, *args):\n        GChart.__init__(self)\n        self['chst'] = 'd_text_outline'\n        args = list(map(str, color_args(args, 0, 3)))\n        assert args[2] in 'lrh', 'Invalid text alignment'\n        assert args[4] in '_b', 'Invalid font style'\n        self['chld'] = '|'.join(args).replace('\\r\\n','|')\\\n            .replace('\\r','|').replace('\\n','|').replace(' ','+')",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.GChart",
    "documentation": {}
  },
  {
    "label": "Pin",
    "kind": 6,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.GChart",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.GChart",
    "peekOfCode": "class Pin(GChart):\n    def render(self): pass\n    def __init__(self, ptype, *args):\n        GChart.__init__(self)\n        assert ptype in PIN_TYPES, 'Invalid type'\n        if ptype == \"pin_letter\":\n            args = color_args(args, 1,2)\n        elif ptype == 'pin_icon':\n            args = list(color_args(args, 1))\n            assert args[0] in PIN_ICONS, 'Invalid icon name'",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.GChart",
    "documentation": {}
  },
  {
    "label": "Note",
    "kind": 6,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.GChart",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.GChart",
    "peekOfCode": "class Note(GChart):\n    def render(self): pass\n    def __init__(self, *args):\n        GChart.__init__(self)\n        assert args[0] in NOTE_TYPES,'Invalid note type'\n        assert args[1] in NOTE_IMAGES,'Invalid note image'\n        if args[0].find('note')>-1:\n            self['chst'] =  'd_f%s'%args[0]\n            args = list(color_args(args, 3))\n        else:",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.GChart",
    "documentation": {}
  },
  {
    "label": "Bubble",
    "kind": 6,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.GChart",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.GChart",
    "peekOfCode": "class Bubble(GChart):\n    def render(self): pass\n    def __init__(self, btype, *args):\n        GChart.__init__(self)\n        assert btype in BUBBLE_TYPES, 'Invalid type'\n        if btype in ('icon_text_small','icon_text_big'):\n            args = list(color_args(args, 3,4))\n            assert args[0] in BUBBLE_SICONS,'Invalid icon type'\n        elif btype == 'icon_texts_big':\n            args = list(color_args(args, 2,3))",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.GChart",
    "documentation": {}
  },
  {
    "label": "GraphViz",
    "kind": 6,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.GChart",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.GChart",
    "peekOfCode": "class GraphViz(GChart):\n    def render(self): pass\n    def __init__(self, dot_string):\n        GChart.__init__(self)\n        self['chl'] = dot_string\n        self['cht'] = 'gv'",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.GChart",
    "documentation": {}
  },
  {
    "label": "lookup_color",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.GChart",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.GChart",
    "peekOfCode": "def lookup_color(color):\n    \"\"\"\n    Returns the hex color for any valid css color name\n    >>> lookup_color('aliceblue')\n    'F0F8FF'\n    \"\"\"\n    if color is None: return\n    color = color.lower()\n    if color in COLOR_MAP:\n        return COLOR_MAP[color]",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.GChart",
    "documentation": {}
  },
  {
    "label": "color_args",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.GChart",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.GChart",
    "peekOfCode": "def color_args(args, *indexes):\n    \"\"\"\n    Color a list of arguments on particular indexes\n    >>> c = color_args([None,'blue'], 1)\n    >>> c.next()\n    None\n    >>> c.next()\n    '0000FF'\n    \"\"\"\n    for i,arg in enumerate(args):",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.GChartWrapper.GChart",
    "documentation": {}
  },
  {
    "label": "foo",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.screenshot-renderer.test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.screenshot-renderer.test",
    "peekOfCode": "def foo(lst):\n    lst.append(\"hello\")\n    bar(lst)\ndef bar(myLst):\n    print(myLst)\nfoo(x)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.screenshot-renderer.test",
    "documentation": {}
  },
  {
    "label": "bar",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.screenshot-renderer.test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.screenshot-renderer.test",
    "peekOfCode": "def bar(myLst):\n    print(myLst)\nfoo(x)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.screenshot-renderer.test",
    "documentation": {}
  },
  {
    "label": "x",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.screenshot-renderer.test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.screenshot-renderer.test",
    "peekOfCode": "x = [1, 2, 3]\ny = [4, 5, 6]\nz = y\ny = x\nx = z\nx = [1, 2, 3] # a different [1, 2, 3] list!\ny = x\nx.append(4)\ny.append(5)\nz = [1, 2, 3, 4, 5] # a different list!",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.screenshot-renderer.test",
    "documentation": {}
  },
  {
    "label": "y",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.screenshot-renderer.test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.screenshot-renderer.test",
    "peekOfCode": "y = [4, 5, 6]\nz = y\ny = x\nx = z\nx = [1, 2, 3] # a different [1, 2, 3] list!\ny = x\nx.append(4)\ny.append(5)\nz = [1, 2, 3, 4, 5] # a different list!\nx.append(6)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.screenshot-renderer.test",
    "documentation": {}
  },
  {
    "label": "z",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.screenshot-renderer.test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.screenshot-renderer.test",
    "peekOfCode": "z = y\ny = x\nx = z\nx = [1, 2, 3] # a different [1, 2, 3] list!\ny = x\nx.append(4)\ny.append(5)\nz = [1, 2, 3, 4, 5] # a different list!\nx.append(6)\ny = \"hello\"",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.screenshot-renderer.test",
    "documentation": {}
  },
  {
    "label": "y",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.screenshot-renderer.test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.screenshot-renderer.test",
    "peekOfCode": "y = x\nx = z\nx = [1, 2, 3] # a different [1, 2, 3] list!\ny = x\nx.append(4)\ny.append(5)\nz = [1, 2, 3, 4, 5] # a different list!\nx.append(6)\ny = \"hello\"\ndef foo(lst):",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.screenshot-renderer.test",
    "documentation": {}
  },
  {
    "label": "x",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.screenshot-renderer.test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.screenshot-renderer.test",
    "peekOfCode": "x = z\nx = [1, 2, 3] # a different [1, 2, 3] list!\ny = x\nx.append(4)\ny.append(5)\nz = [1, 2, 3, 4, 5] # a different list!\nx.append(6)\ny = \"hello\"\ndef foo(lst):\n    lst.append(\"hello\")",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.screenshot-renderer.test",
    "documentation": {}
  },
  {
    "label": "x",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.screenshot-renderer.test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.screenshot-renderer.test",
    "peekOfCode": "x = [1, 2, 3] # a different [1, 2, 3] list!\ny = x\nx.append(4)\ny.append(5)\nz = [1, 2, 3, 4, 5] # a different list!\nx.append(6)\ny = \"hello\"\ndef foo(lst):\n    lst.append(\"hello\")\n    bar(lst)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.screenshot-renderer.test",
    "documentation": {}
  },
  {
    "label": "y",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.screenshot-renderer.test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.screenshot-renderer.test",
    "peekOfCode": "y = x\nx.append(4)\ny.append(5)\nz = [1, 2, 3, 4, 5] # a different list!\nx.append(6)\ny = \"hello\"\ndef foo(lst):\n    lst.append(\"hello\")\n    bar(lst)\ndef bar(myLst):",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.screenshot-renderer.test",
    "documentation": {}
  },
  {
    "label": "z",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.screenshot-renderer.test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.screenshot-renderer.test",
    "peekOfCode": "z = [1, 2, 3, 4, 5] # a different list!\nx.append(6)\ny = \"hello\"\ndef foo(lst):\n    lst.append(\"hello\")\n    bar(lst)\ndef bar(myLst):\n    print(myLst)\nfoo(x)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.screenshot-renderer.test",
    "documentation": {}
  },
  {
    "label": "y",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.screenshot-renderer.test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.screenshot-renderer.test",
    "peekOfCode": "y = \"hello\"\ndef foo(lst):\n    lst.append(\"hello\")\n    bar(lst)\ndef bar(myLst):\n    print(myLst)\nfoo(x)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.screenshot-renderer.test",
    "documentation": {}
  },
  {
    "label": "factorial",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.doctest-tests.lab1",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.doctest-tests.lab1",
    "peekOfCode": "def factorial(n):\n    \"\"\"\n    Lab part 1\n    lab description in markdown format\n    Return the factorial of n, an exact integer >= 0.\n    If the result is small enough to fit in an int, return an int.\n    Else return a long.\n    ------\n    >>> print [factorial(n) for n in range(6)]\n    [1, 1, 2, 6, 24, 120]",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.doctest-tests.lab1",
    "documentation": {}
  },
  {
    "label": "add",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.doctest-tests.lab1",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.doctest-tests.lab1",
    "peekOfCode": "def add(x, y):\n    return x + y\ndef slow_multiply(a, b):\n    \"\"\"\n    Lab part 2\n    Return the product of 'a' and 'b'\n    ------\n>>> print slow_multiply(3, 5)\n15\n>>> print slow_multiply(5, 3)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.doctest-tests.lab1",
    "documentation": {}
  },
  {
    "label": "slow_multiply",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.doctest-tests.lab1",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.doctest-tests.lab1",
    "peekOfCode": "def slow_multiply(a, b):\n    \"\"\"\n    Lab part 2\n    Return the product of 'a' and 'b'\n    ------\n>>> print slow_multiply(3, 5)\n15\n>>> print slow_multiply(5, 3)\n15\n>>> print slow_multiply(0, 1)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.doctest-tests.lab1",
    "documentation": {}
  },
  {
    "label": "find_age",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.doctest-tests.lab1",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.doctest-tests.lab1",
    "peekOfCode": "def find_age(person):\n    \"\"\"\n    Lab part 3\n    Fetch the age for a given person's name\n    ------\n>>> print find_age('John')\n21\n>>> print find_age('Carol')\n18\n>>> print find_age('Jane')",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.doctest-tests.lab1",
    "documentation": {}
  },
  {
    "label": "GLOBAL_DATA",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.doctest-tests.lab1",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.doctest-tests.lab1",
    "peekOfCode": "GLOBAL_DATA = [{\"name\": \"John\",  \"age\": 21},\n               {\"name\": \"Jane\",  \"age\": 35},\n               {\"name\": \"Carol\", \"age\": 18}]\ndef find_age(person):\n    \"\"\"\n    Lab part 3\n    Fetch the age for a given person's name\n    ------\n>>> print find_age('John')\n21",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.doctest-tests.lab1",
    "documentation": {}
  },
  {
    "label": "add",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.doctest-tests.labtiny",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.doctest-tests.labtiny",
    "peekOfCode": "def add(x, y):\n    return x + y\ndef slow_multiply(a, b):\n    \"\"\"\n    Lab part 2\n    Return the product of 'a' and 'b'\n    ------\n>>> print slow_multiply(3, 5)\n15\n    \"\"\"",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.doctest-tests.labtiny",
    "documentation": {}
  },
  {
    "label": "slow_multiply",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.doctest-tests.labtiny",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.doctest-tests.labtiny",
    "peekOfCode": "def slow_multiply(a, b):\n    \"\"\"\n    Lab part 2\n    Return the product of 'a' and 'b'\n    ------\n>>> print slow_multiply(3, 5)\n15\n    \"\"\"\n    i = 0\n    prod = 0",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.doctest-tests.labtiny",
    "documentation": {}
  },
  {
    "label": "LAB_NAME",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.doctest-tests.labtiny",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.doctest-tests.labtiny",
    "peekOfCode": "LAB_NAME = \"First doctest lab\"\nLAB_DESCRIPTION =\nThis is my first **lab** in [markdown](https://daringfireball.net/projects/markdown/syntax) format\n- shawn\n- is\n- cool\nwoohoo!\n'''\n# helper function written by student, not part of the lab\ndef add(x, y):",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.doctest-tests.labtiny",
    "documentation": {}
  },
  {
    "label": "LAB_DESCRIPTION",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.doctest-tests.labtiny",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.doctest-tests.labtiny",
    "peekOfCode": "LAB_DESCRIPTION =\nThis is my first **lab** in [markdown](https://daringfireball.net/projects/markdown/syntax) format\n- shawn\n- is\n- cool\nwoohoo!\n'''\n# helper function written by student, not part of the lab\ndef add(x, y):\n    return x + y",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.doctest-tests.labtiny",
    "documentation": {}
  },
  {
    "label": "age",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.basic-data-structures",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.basic-data-structures",
    "peekOfCode": "age = 26\npi = 3.14159\n# strings!\ns = 'Rutherford Birchard Hayes'\ntokens = s.split()\n# list (mutable sequence)\nbeatles = ['John', 'Paul', 'George']\n# tuple (immutable sequence)\nages = (18, 21, 28, 21, 22)\n# set (no order, no duplicates)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.basic-data-structures",
    "documentation": {}
  },
  {
    "label": "pi",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.basic-data-structures",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.basic-data-structures",
    "peekOfCode": "pi = 3.14159\n# strings!\ns = 'Rutherford Birchard Hayes'\ntokens = s.split()\n# list (mutable sequence)\nbeatles = ['John', 'Paul', 'George']\n# tuple (immutable sequence)\nages = (18, 21, 28, 21, 22)\n# set (no order, no duplicates)\nuniqueAges = set() # empty set",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.basic-data-structures",
    "documentation": {}
  },
  {
    "label": "s",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.basic-data-structures",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.basic-data-structures",
    "peekOfCode": "s = 'Rutherford Birchard Hayes'\ntokens = s.split()\n# list (mutable sequence)\nbeatles = ['John', 'Paul', 'George']\n# tuple (immutable sequence)\nages = (18, 21, 28, 21, 22)\n# set (no order, no duplicates)\nuniqueAges = set() # empty set\nuniqueAges = set(ages)\nuniqueAges.remove(21)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.basic-data-structures",
    "documentation": {}
  },
  {
    "label": "tokens",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.basic-data-structures",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.basic-data-structures",
    "peekOfCode": "tokens = s.split()\n# list (mutable sequence)\nbeatles = ['John', 'Paul', 'George']\n# tuple (immutable sequence)\nages = (18, 21, 28, 21, 22)\n# set (no order, no duplicates)\nuniqueAges = set() # empty set\nuniqueAges = set(ages)\nuniqueAges.remove(21)\n# dict - mapping unique keys to values",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.basic-data-structures",
    "documentation": {}
  },
  {
    "label": "beatles",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.basic-data-structures",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.basic-data-structures",
    "peekOfCode": "beatles = ['John', 'Paul', 'George']\n# tuple (immutable sequence)\nages = (18, 21, 28, 21, 22)\n# set (no order, no duplicates)\nuniqueAges = set() # empty set\nuniqueAges = set(ages)\nuniqueAges.remove(21)\n# dict - mapping unique keys to values\nnetWorth = {}\nnetWorth['Donald Trump'] = 3000000000",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.basic-data-structures",
    "documentation": {}
  },
  {
    "label": "ages",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.basic-data-structures",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.basic-data-structures",
    "peekOfCode": "ages = (18, 21, 28, 21, 22)\n# set (no order, no duplicates)\nuniqueAges = set() # empty set\nuniqueAges = set(ages)\nuniqueAges.remove(21)\n# dict - mapping unique keys to values\nnetWorth = {}\nnetWorth['Donald Trump'] = 3000000000\nnetWorth['Bill Gates'] = 58000000000\nnetWorth['Joe Postdoc'] = 20000",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.basic-data-structures",
    "documentation": {}
  },
  {
    "label": "uniqueAges",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.basic-data-structures",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.basic-data-structures",
    "peekOfCode": "uniqueAges = set() # empty set\nuniqueAges = set(ages)\nuniqueAges.remove(21)\n# dict - mapping unique keys to values\nnetWorth = {}\nnetWorth['Donald Trump'] = 3000000000\nnetWorth['Bill Gates'] = 58000000000\nnetWorth['Joe Postdoc'] = 20000",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.basic-data-structures",
    "documentation": {}
  },
  {
    "label": "uniqueAges",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.basic-data-structures",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.basic-data-structures",
    "peekOfCode": "uniqueAges = set(ages)\nuniqueAges.remove(21)\n# dict - mapping unique keys to values\nnetWorth = {}\nnetWorth['Donald Trump'] = 3000000000\nnetWorth['Bill Gates'] = 58000000000\nnetWorth['Joe Postdoc'] = 20000",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.basic-data-structures",
    "documentation": {}
  },
  {
    "label": "netWorth",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.basic-data-structures",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.basic-data-structures",
    "peekOfCode": "netWorth = {}\nnetWorth['Donald Trump'] = 3000000000\nnetWorth['Bill Gates'] = 58000000000\nnetWorth['Joe Postdoc'] = 20000",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.basic-data-structures",
    "documentation": {}
  },
  {
    "label": "t",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.binary-tree",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.binary-tree",
    "peekOfCode": "t = [[['a', 'b'], ['c', 'd']], [[1,2], [3,4]]]",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.binary-tree",
    "documentation": {}
  },
  {
    "label": "x",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.circular",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.circular",
    "peekOfCode": "x = [1,2]\ny = [1,2]\nz = [1,2]\nw = [1,2]\nx[1] = y\ny[1] = z\nz[1] = w\nw[1] = x",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.circular",
    "documentation": {}
  },
  {
    "label": "y",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.circular",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.circular",
    "peekOfCode": "y = [1,2]\nz = [1,2]\nw = [1,2]\nx[1] = y\ny[1] = z\nz[1] = w\nw[1] = x",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.circular",
    "documentation": {}
  },
  {
    "label": "z",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.circular",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.circular",
    "peekOfCode": "z = [1,2]\nw = [1,2]\nx[1] = y\ny[1] = z\nz[1] = w\nw[1] = x",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.circular",
    "documentation": {}
  },
  {
    "label": "w",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.circular",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.circular",
    "peekOfCode": "w = [1,2]\nx[1] = y\ny[1] = z\nz[1] = w\nw[1] = x",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.circular",
    "documentation": {}
  },
  {
    "label": "x[1]",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.circular",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.circular",
    "peekOfCode": "x[1] = y\ny[1] = z\nz[1] = w\nw[1] = x",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.circular",
    "documentation": {}
  },
  {
    "label": "y[1]",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.circular",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.circular",
    "peekOfCode": "y[1] = z\nz[1] = w\nw[1] = x",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.circular",
    "documentation": {}
  },
  {
    "label": "z[1]",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.circular",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.circular",
    "peekOfCode": "z[1] = w\nw[1] = x",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.circular",
    "documentation": {}
  },
  {
    "label": "w[1]",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.circular",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.circular",
    "peekOfCode": "w[1] = x",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.circular",
    "documentation": {}
  },
  {
    "label": "x",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.criss-cross",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.criss-cross",
    "peekOfCode": "x = [1,2]\ny = [3,x]\nx[1] = y",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.criss-cross",
    "documentation": {}
  },
  {
    "label": "y",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.criss-cross",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.criss-cross",
    "peekOfCode": "y = [3,x]\nx[1] = y",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.criss-cross",
    "documentation": {}
  },
  {
    "label": "x[1]",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.criss-cross",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.criss-cross",
    "peekOfCode": "x[1] = y",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.criss-cross",
    "documentation": {}
  },
  {
    "label": "x",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.double-nudge",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.double-nudge",
    "peekOfCode": "x = [1, [2,  None]]\ny = [1, 2]\nz = [1, 2]\nx[1][0] = y # should nudge y to over the right\nz[1] = x    # should nudge BOTH x and y over to the right",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.double-nudge",
    "documentation": {}
  },
  {
    "label": "y",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.double-nudge",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.double-nudge",
    "peekOfCode": "y = [1, 2]\nz = [1, 2]\nx[1][0] = y # should nudge y to over the right\nz[1] = x    # should nudge BOTH x and y over to the right",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.double-nudge",
    "documentation": {}
  },
  {
    "label": "z",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.double-nudge",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.double-nudge",
    "peekOfCode": "z = [1, 2]\nx[1][0] = y # should nudge y to over the right\nz[1] = x    # should nudge BOTH x and y over to the right",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.double-nudge",
    "documentation": {}
  },
  {
    "label": "x[1][0]",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.double-nudge",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.double-nudge",
    "peekOfCode": "x[1][0] = y # should nudge y to over the right\nz[1] = x    # should nudge BOTH x and y over to the right",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.double-nudge",
    "documentation": {}
  },
  {
    "label": "z[1]",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.double-nudge",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.double-nudge",
    "peekOfCode": "z[1] = x    # should nudge BOTH x and y over to the right",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.double-nudge",
    "documentation": {}
  },
  {
    "label": "execute",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.opt_frontend_golden_test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.opt_frontend_golden_test",
    "peekOfCode": "def execute(input_filename, option_name):\n  assert os.path.isfile(input_filename)\n  (base, ext) = os.path.splitext(input_filename)\n  args = [input_filename, 'localhost:8080', 'visualize.html', OPTIONS_DICT[option_name]]\n  (stdout, stderr) = Popen(PROGRAM + args,\n                           stdout=PIPE, stderr=PIPE).communicate()\ndef clobber_golden_file(outfile, golden_file):\n  print '  Clobber %s => %s' % (outfile, golden_file)\n  shutil.copy(outfile, golden_file)\n# trivial EXACT FILE MATCH comparison, which works only if you're",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.opt_frontend_golden_test",
    "documentation": {}
  },
  {
    "label": "clobber_golden_file",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.opt_frontend_golden_test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.opt_frontend_golden_test",
    "peekOfCode": "def clobber_golden_file(outfile, golden_file):\n  print '  Clobber %s => %s' % (outfile, golden_file)\n  shutil.copy(outfile, golden_file)\n# trivial EXACT FILE MATCH comparison, which works only if you're\n# running on the exact same machine!\n'''\ndef png_files_differ(f1, f2):\n    return not filecmp.cmp(f1, f2)\n'''\n# fuzzy image comparison using ImageMagick",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.opt_frontend_golden_test",
    "documentation": {}
  },
  {
    "label": "png_files_differ",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.opt_frontend_golden_test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.opt_frontend_golden_test",
    "peekOfCode": "def png_files_differ(f1, f2):\n    return not filecmp.cmp(f1, f2)\n'''\n# fuzzy image comparison using ImageMagick\n# see: http://www.imagemagick.org/Usage/compare/\n# compare -metric AE -fuzz 1% aliasing.txt.step.2.png.regular.png  ../golden-files/regular/aliasing.txt.step.3.png -compose src -highlight-color White -lowlight-color Black cmp.png\nDIFF_PNG = '/tmp/diff.png'\ndef png_files_differ(f1, f2):\n    # adjust fuzz to a higher percentage if it's not sensitive enough\n    # /tmp/diff.png shows pixel differences,",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.opt_frontend_golden_test",
    "documentation": {}
  },
  {
    "label": "png_files_differ",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.opt_frontend_golden_test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.opt_frontend_golden_test",
    "peekOfCode": "def png_files_differ(f1, f2):\n    # adjust fuzz to a higher percentage if it's not sensitive enough\n    # /tmp/diff.png shows pixel differences,\n    # and the number of differed pixels is sent to stderr\n    cmdline = ['compare', '-metric', 'AE', '-fuzz', '3%',\n               f1, f2,\n               '-compose', 'src', '-highlight-color', 'White',\n               '-lowlight-color', 'Black', DIFF_PNG]\n    (stdout, stderr) = Popen(cmdline, stdout=PIPE, stderr=PIPE).communicate()\n    assert stderr",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.opt_frontend_golden_test",
    "documentation": {}
  },
  {
    "label": "run_test",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.opt_frontend_golden_test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.opt_frontend_golden_test",
    "peekOfCode": "def run_test(input_filename, clobber_golden=False):\n    try:\n        print 'Testing', input_filename\n        bn = os.path.basename(input_filename)\n        # test all frontend display options\n        for option in OPTIONS_DICT:\n            print \"  \" + option\n            execute(input_filename, option)\n            output_png_files = [e for e in os.listdir('.') if bn + '.step.' in e]\n            if not output_png_files:",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.opt_frontend_golden_test",
    "documentation": {}
  },
  {
    "label": "run_all_tests",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.opt_frontend_golden_test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.opt_frontend_golden_test",
    "peekOfCode": "def run_all_tests(clobber=False):\n  for t in ALL_TESTS:\n    run_test(t, clobber)\nif __name__ == \"__main__\":\n  parser = optparse.OptionParser()\n  parser.add_option(\"--all\", action=\"store_true\", dest=\"run_all\",\n                    help=\"Run all tests\")\n  parser.add_option(\"--clobber\", action=\"store_true\", dest=\"clobber\",\n                    help=\"Clobber golden files when running tests\")\n  parser.add_option(\"--test\", dest=\"test_name\",",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.opt_frontend_golden_test",
    "documentation": {}
  },
  {
    "label": "HTML_DICT",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.opt_frontend_golden_test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.opt_frontend_golden_test",
    "peekOfCode": "HTML_DICT = {\n  'regular': 'visualize.html',\n  'csc108h': 'csc108h.html',\n  'composingprograms': 'composingprograms.html',\n}\n'''\nOPTIONS_DICT = {\n  'regular': 'cumulative=false&heapPrimitives=false&drawParentPointers=false&textReferences=false&py=2',\n  'csc108h': 'cumulative=false&heapPrimitives=true&drawParentPointers=false&textReferences=true&py=2',\n  'composingprograms': 'cumulative=true&heapPrimitives=false&drawParentPointers=false&textReferences=false&py=3',",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.opt_frontend_golden_test",
    "documentation": {}
  },
  {
    "label": "OPTIONS_DICT",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.opt_frontend_golden_test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.opt_frontend_golden_test",
    "peekOfCode": "OPTIONS_DICT = {\n  'regular': 'cumulative=false&heapPrimitives=false&drawParentPointers=false&textReferences=false&py=2',\n  'csc108h': 'cumulative=false&heapPrimitives=true&drawParentPointers=false&textReferences=true&py=2',\n  'composingprograms': 'cumulative=true&heapPrimitives=false&drawParentPointers=false&textReferences=false&py=3',\n}\nimport os, re, shutil, optparse, filecmp\nfrom subprocess import *\nRED   = '\\033[91m'\nENDC  = '\\033[0m'  # end color\ndef execute(input_filename, option_name):",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.opt_frontend_golden_test",
    "documentation": {}
  },
  {
    "label": "DIFF_PNG",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.opt_frontend_golden_test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.opt_frontend_golden_test",
    "peekOfCode": "DIFF_PNG = '/tmp/diff.png'\ndef png_files_differ(f1, f2):\n    # adjust fuzz to a higher percentage if it's not sensitive enough\n    # /tmp/diff.png shows pixel differences,\n    # and the number of differed pixels is sent to stderr\n    cmdline = ['compare', '-metric', 'AE', '-fuzz', '3%',\n               f1, f2,\n               '-compose', 'src', '-highlight-color', 'White',\n               '-lowlight-color', 'Black', DIFF_PNG]\n    (stdout, stderr) = Popen(cmdline, stdout=PIPE, stderr=PIPE).communicate()",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.frontend-tests.opt_frontend_golden_test",
    "documentation": {}
  },
  {
    "label": "filter_output",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.golden_test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.golden_test",
    "peekOfCode": "def filter_output(s):\n  return s\ndef execute(input_filename):\n  assert os.path.isfile(input_filename)\n  (base, ext) = os.path.splitext(input_filename)\n  assert ext == INPUT_FILE_EXTENSION\n  (stdout, stderr) = Popen(PROGRAM + [input_filename], stdout=PIPE, stderr=PIPE).communicate()\n  if stderr:\n    print '(has stderr)'\n  #  print '  stderr {'",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.golden_test",
    "documentation": {}
  },
  {
    "label": "execute",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.golden_test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.golden_test",
    "peekOfCode": "def execute(input_filename):\n  assert os.path.isfile(input_filename)\n  (base, ext) = os.path.splitext(input_filename)\n  assert ext == INPUT_FILE_EXTENSION\n  (stdout, stderr) = Popen(PROGRAM + [input_filename], stdout=PIPE, stderr=PIPE).communicate()\n  if stderr:\n    print '(has stderr)'\n  #  print '  stderr {'\n  #  print stderr, '}'\n  else:",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.golden_test",
    "documentation": {}
  },
  {
    "label": "clobber_golden_file",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.golden_test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.golden_test",
    "peekOfCode": "def clobber_golden_file(golden_file):\n  (base, ext) = os.path.splitext(golden_file)\n  outfile = base + OUTPUT_FILE_EXTENSION\n  assert os.path.isfile(outfile)\n  print '  Clobber %s => %s' % (outfile, golden_file)\n  shutil.copy(outfile, golden_file)\n# returns True if there is a diff, False otherwise\ndef golden_differs_from_out(golden_file):\n  (base, ext) = os.path.splitext(golden_file)\n  outfile = base + OUTPUT_FILE_EXTENSION",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.golden_test",
    "documentation": {}
  },
  {
    "label": "golden_differs_from_out",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.golden_test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.golden_test",
    "peekOfCode": "def golden_differs_from_out(golden_file):\n  (base, ext) = os.path.splitext(golden_file)\n  outfile = base + OUTPUT_FILE_EXTENSION\n  assert os.path.isfile(outfile)\n  assert os.path.isfile(golden_file)\n  golden_s = open(golden_file).readlines()\n  out_s = open(outfile).readlines()\n  golden_s_filtered = filter_output(golden_s)\n  out_s_filtered = filter_output(out_s)\n  return out_s_filtered != golden_s_filtered",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.golden_test",
    "documentation": {}
  },
  {
    "label": "diff_test_output",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.golden_test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.golden_test",
    "peekOfCode": "def diff_test_output(test_name):\n  (base, ext) = os.path.splitext(test_name)\n  golden_file = base + GOLDEN_FILE_EXTENSION\n  assert os.path.isfile(golden_file)\n  outfile = base + OUTPUT_FILE_EXTENSION\n  assert os.path.isfile(outfile)\n  golden_s = open(golden_file).readlines()\n  out_s = open(outfile).readlines()\n  golden_s_filtered = filter_output(golden_s)\n  out_s_filtered = filter_output(out_s)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.golden_test",
    "documentation": {}
  },
  {
    "label": "run_test",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.golden_test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.golden_test",
    "peekOfCode": "def run_test(input_filename, clobber_golden=False):\n  print 'Testing', input_filename,\n  (base, ext) = os.path.splitext(input_filename)\n  assert ext == INPUT_FILE_EXTENSION\n  # to eliminate possibility of using stale output:\n  outfile = base + OUTPUT_FILE_EXTENSION\n  if os.path.isfile(outfile):\n    os.remove(outfile)\n  input_fullpath = input_filename\n  execute(input_fullpath)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.golden_test",
    "documentation": {}
  },
  {
    "label": "run_all_tests",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.golden_test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.golden_test",
    "peekOfCode": "def run_all_tests(clobber=False):\n  for t in ALL_TESTS:\n    run_test(t, clobber)\ndef diff_all_test_outputs():\n  for t in ALL_TESTS:\n    diff_test_output(t)\nif __name__ == \"__main__\":\n  parser = optparse.OptionParser()\n  parser.add_option(\"--all\", action=\"store_true\", dest=\"run_all\",\n                    help=\"Run all tests\")",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.golden_test",
    "documentation": {}
  },
  {
    "label": "diff_all_test_outputs",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.golden_test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.golden_test",
    "peekOfCode": "def diff_all_test_outputs():\n  for t in ALL_TESTS:\n    diff_test_output(t)\nif __name__ == \"__main__\":\n  parser = optparse.OptionParser()\n  parser.add_option(\"--all\", action=\"store_true\", dest=\"run_all\",\n                    help=\"Run all tests\")\n  parser.add_option(\"--only-clobber\", action=\"store_true\", dest=\"only_clobber\",\n                    help=\"Clobber ALL golden files WITHOUT re-running tests\")\n  parser.add_option(\"--clobber\", action=\"store_true\", dest=\"clobber\",",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.golden_test",
    "documentation": {}
  },
  {
    "label": "#GEN_JSON_TRACE_PY",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.golden_test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.golden_test",
    "peekOfCode": "#GEN_JSON_TRACE_PY = '../generate_json_trace.py' # old v3 version\nGEN_JSON_TRACE_PY = '../../v5-unity/generate_json_trace.py'\n# no longer supported by v5-unity\nIGNORED_TESTS = [\n    'backend-tests/cs61a-multi-lambdas.txt', # WEIRD NON-DETERMINISTIC TEST!!!\n    'backend-tests/callback-test.txt',\n    'backend-tests/ttt_min.txt',\n    '../example-code/chris-meyers/optFib.txt',\n    '../example-code/chris-meyers/optMinpath.txt',\n    '../example-code/chris-meyers/optSieve.txt',",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.golden_test",
    "documentation": {}
  },
  {
    "label": "GEN_JSON_TRACE_PY",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.golden_test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.golden_test",
    "peekOfCode": "GEN_JSON_TRACE_PY = '../../v5-unity/generate_json_trace.py'\n# no longer supported by v5-unity\nIGNORED_TESTS = [\n    'backend-tests/cs61a-multi-lambdas.txt', # WEIRD NON-DETERMINISTIC TEST!!!\n    'backend-tests/callback-test.txt',\n    'backend-tests/ttt_min.txt',\n    '../example-code/chris-meyers/optFib.txt',\n    '../example-code/chris-meyers/optMinpath.txt',\n    '../example-code/chris-meyers/optSieve.txt',\n    '../example-code/chris-meyers/optKnapsack.txt',",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.golden_test",
    "documentation": {}
  },
  {
    "label": "IGNORED_TESTS",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.golden_test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.golden_test",
    "peekOfCode": "IGNORED_TESTS = [\n    'backend-tests/cs61a-multi-lambdas.txt', # WEIRD NON-DETERMINISTIC TEST!!!\n    'backend-tests/callback-test.txt',\n    'backend-tests/ttt_min.txt',\n    '../example-code/chris-meyers/optFib.txt',\n    '../example-code/chris-meyers/optMinpath.txt',\n    '../example-code/chris-meyers/optSieve.txt',\n    '../example-code/chris-meyers/optKnapsack.txt',\n]\nimport itertools",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.tests.golden_test",
    "documentation": {}
  },
  {
    "label": "TNode",
    "kind": 6,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.bintree_module",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.bintree_module",
    "peekOfCode": "class TNode:\n  def __init__(self, dat, left=None, right=None):\n    self.data = dat\n    self.parent = None\n    self.left = left\n    self.right = right\n    if self.left:\n      self.left.parent = self\n    if self.right:\n      self.right.parent = self",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.bintree_module",
    "documentation": {}
  },
  {
    "label": "BST",
    "kind": 6,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.bintree_module",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.bintree_module",
    "peekOfCode": "class BST(object):\n    \"\"\"\nSimple binary search tree implementation.\nThis BST supports insert, find, and delete-min operations.\nEach tree contains some (possibly 0) BSTnode objects, representing nodes,\nand a pointer to the root.\n\"\"\"\n    def __init__(self):\n        self.root = None\n    def to_graphviz_img(self):",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.bintree_module",
    "documentation": {}
  },
  {
    "label": "BST",
    "kind": 6,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.bintree_module",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.bintree_module",
    "peekOfCode": "class BST:\n    def __init__(self):\n        self.root = None\n    def to_graphviz_img(self):\n        if self.root:\n            return GChartWrapper.GraphViz(self.root.to_graphviz_string())\n        else:\n            return ''        \n    def insert(self, t):\n        \"\"\"Insert data t into this BST, modifying it in-place.\"\"\"",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.bintree_module",
    "documentation": {}
  },
  {
    "label": "highlight_and_display",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.bintree_module",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.bintree_module",
    "peekOfCode": "def highlight_and_display(root):\n    def f(node):\n        node.highlight()\n        html_module.display_img(root.to_graphviz_img()) #break\n        node.reset_style()\n    return f\ndef preorder(t, visitfn):\n    if not t:\n        return\n    visitfn(t)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.bintree_module",
    "documentation": {}
  },
  {
    "label": "preorder",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.bintree_module",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.bintree_module",
    "peekOfCode": "def preorder(t, visitfn):\n    if not t:\n        return\n    visitfn(t)\n    preorder(t.left, visitfn)\n    preorder(t.right, visitfn)\npreorder(r, highlight_and_display(r))\n'''\nfrom collections import defaultdict\nimport GChartWrapper",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.bintree_module",
    "documentation": {}
  },
  {
    "label": "highlight_and_display",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.bintree_module",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.bintree_module",
    "peekOfCode": "def highlight_and_display(root):\n    def f(node):\n        node.highlight()\n        html_module.display_img(root.to_graphviz_img()) #break\n        node.reset_style()\n    return f\ndef preorder(t, visitfn):\n    if not t:\n        return\n    visitfn(t)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.bintree_module",
    "documentation": {}
  },
  {
    "label": "preorder",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.bintree_module",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.bintree_module",
    "peekOfCode": "def preorder(t, visitfn):\n    if not t:\n        return\n    visitfn(t)\n    preorder(t.left, visitfn)\n    preorder(t.right, visitfn)\npreorder(r, highlight_and_display(r))\n'''\n'''\nfrom bintree_module import BST",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.bintree_module",
    "documentation": {}
  },
  {
    "label": "r",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.bintree_module",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.bintree_module",
    "peekOfCode": "r = TNode('a',\n          left=TNode('b0',\n                     left=TNode('c0',\n                                right=TNode('d1')),\n                     right=TNode('c1',\n                                 left=TNode('d3'),\n                                 right=TNode('d4'))),\n          right=TNode('b1',\n                      left=TNode('c2')))\ndef highlight_and_display(root):",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.bintree_module",
    "documentation": {}
  },
  {
    "label": "is_python3",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.bintree_module",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.bintree_module",
    "peekOfCode": "is_python3 = (sys.version_info[0] == 3)\nif is_python3:\n  import io as cStringIO\nelse:\n  import cStringIO\nID = 0\n# somewhat inspired by bst.py from MIT 6.006 OCW\n# http://ocw.mit.edu/ans7870/6/6.006/s08/lecturenotes/search.htm\nclass TNode:\n  def __init__(self, dat, left=None, right=None):",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.bintree_module",
    "documentation": {}
  },
  {
    "label": "ID",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.bintree_module",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.bintree_module",
    "peekOfCode": "ID = 0\n# somewhat inspired by bst.py from MIT 6.006 OCW\n# http://ocw.mit.edu/ans7870/6/6.006/s08/lecturenotes/search.htm\nclass TNode:\n  def __init__(self, dat, left=None, right=None):\n    self.data = dat\n    self.parent = None\n    self.left = left\n    self.right = right\n    if self.left:",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.bintree_module",
    "documentation": {}
  },
  {
    "label": "r",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.bintree_module",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.bintree_module",
    "peekOfCode": "r = TNode('a',\n          left=TNode('b0',\n                     left=TNode('c0',\n                                right=TNode('d1')),\n                     right=TNode('c1',\n                                 left=TNode('d3'),\n                                 right=TNode('d4'))),\n          right=TNode('b1',\n                      left=TNode('c2')))\ndef highlight_and_display(root):",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.bintree_module",
    "documentation": {}
  },
  {
    "label": "t",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.bintree_module",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.bintree_module",
    "peekOfCode": "t = BST()\nhtml_module.display_img(t.to_graphviz_img())\nnums = range(10)\nrandom.shuffle(nums)\nfor i in nums:\n  t.insert(i)\n  html_module.display_img(t.to_graphviz_img())\n'''\n# insertion into a BST with each step animated\n#",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.bintree_module",
    "documentation": {}
  },
  {
    "label": "nums",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.bintree_module",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.bintree_module",
    "peekOfCode": "nums = range(10)\nrandom.shuffle(nums)\nfor i in nums:\n  t.insert(i)\n  html_module.display_img(t.to_graphviz_img())\n'''\n# insertion into a BST with each step animated\n#\n# TODO: think of a more elegant way to separate out algorithm from HTML\n# rendering code",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.bintree_module",
    "documentation": {}
  },
  {
    "label": "t",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.bintree_module",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.bintree_module",
    "peekOfCode": "t = BST()\nnums = range(10)\nrandom.shuffle(nums)\nfor i in nums:\n      t.insert(i)\n'''",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.bintree_module",
    "documentation": {}
  },
  {
    "label": "nums",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.bintree_module",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.bintree_module",
    "peekOfCode": "nums = range(10)\nrandom.shuffle(nums)\nfor i in nums:\n      t.insert(i)\n'''",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.bintree_module",
    "documentation": {}
  },
  {
    "label": "web_exec",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.bottle_server",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.bottle_server",
    "peekOfCode": "def web_exec(name):\n    return 'OK'\n@route('/LIVE_exec_<name:re:.+>.py')\ndef live_exec(name):\n    return 'OK'\n@route('/<filepath:path>')\ndef index(filepath):\n    # special-case for testing name_lookup.py ...\n    if 'name_lookup.py' in filepath:\n        return json.dumps(dict(name='TEST NAME', email='TEST EMAIL'))",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.bottle_server",
    "documentation": {}
  },
  {
    "label": "live_exec",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.bottle_server",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.bottle_server",
    "peekOfCode": "def live_exec(name):\n    return 'OK'\n@route('/<filepath:path>')\ndef index(filepath):\n    # special-case for testing name_lookup.py ...\n    if 'name_lookup.py' in filepath:\n        return json.dumps(dict(name='TEST NAME', email='TEST EMAIL'))\n    return static_file(filepath, root='.')\n@get('/exec')\ndef get_exec():",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.bottle_server",
    "documentation": {}
  },
  {
    "label": "index",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.bottle_server",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.bottle_server",
    "peekOfCode": "def index(filepath):\n    # special-case for testing name_lookup.py ...\n    if 'name_lookup.py' in filepath:\n        return json.dumps(dict(name='TEST NAME', email='TEST EMAIL'))\n    return static_file(filepath, root='.')\n@get('/exec')\ndef get_exec():\n  out_s = StringIO.StringIO()\n  def json_finalizer(input_code, output_trace):\n    ret = dict(code=input_code, trace=output_trace)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.bottle_server",
    "documentation": {}
  },
  {
    "label": "get_exec",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.bottle_server",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.bottle_server",
    "peekOfCode": "def get_exec():\n  out_s = StringIO.StringIO()\n  def json_finalizer(input_code, output_trace):\n    ret = dict(code=input_code, trace=output_trace)\n    json_output = json.dumps(ret, indent=None)\n    out_s.write(json_output)\n  options = json.loads(request.query.options_json)\n  pg_logger.exec_script_str_local(request.query.user_script,\n                                  request.query.raw_input_json,\n                                  options['cumulative_mode'],",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.bottle_server",
    "documentation": {}
  },
  {
    "label": "load_matrix_problem",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.bottle_server",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.bottle_server",
    "peekOfCode": "def load_matrix_problem():\n  prob_name = request.query.problem_name\n  assert type(prob_name) in (str, unicode)\n  # whitelist\n  assert prob_name in ('python_comprehension-1',)\n  fn = 'matrix-demo/' + prob_name + '.py'\n  f = open(fn)\n  cod = f.read()\n  f.close()\n  import doctest",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.bottle_server",
    "documentation": {}
  },
  {
    "label": "submit_matrix_problem",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.bottle_server",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.bottle_server",
    "peekOfCode": "def submit_matrix_problem():\n  user_code = request.query.submitted_code\n  prob_name = request.query.problem_name\n  assert type(prob_name) in (str, unicode)\n  # whitelist\n  assert prob_name in ('python_comprehension-1',)\n  test_fn = 'matrix-demo/' + prob_name + '.test.py'\n  test_cod = open(test_fn).read()\n  # concatenate!\n  script = test_cod + '\\n' + user_code + \\",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.bottle_server",
    "documentation": {}
  },
  {
    "label": "callback_func",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.callback_module",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.callback_module",
    "peekOfCode": "def callback_func(func_arg):\n  func_arg()",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.callback_module",
    "documentation": {}
  },
  {
    "label": "x",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.example",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.example",
    "peekOfCode": "x = 5\ny = 10\nz = x + y",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.example",
    "documentation": {}
  },
  {
    "label": "y",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.example",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.example",
    "peekOfCode": "y = 10\nz = x + y",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.example",
    "documentation": {}
  },
  {
    "label": "z",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.example",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.example",
    "peekOfCode": "z = x + y",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.example",
    "documentation": {}
  },
  {
    "label": "json_finalizer",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.generate_json_trace",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.generate_json_trace",
    "peekOfCode": "def json_finalizer(input_code, output_trace):\n  ret = dict(code=input_code, trace=output_trace)\n  # sort_keys=True leads to printing in DETERMINISTIC order, but might\n  # screw up some old tests ... however, there is STILL non-determinism\n  # in Python 3.3 tests, ugh!\n  json_output = json.dumps(ret, indent=INDENT_LEVEL)\n  return json_output\ndef js_var_finalizer(input_code, output_trace):\n  global JS_VARNAME\n  ret = dict(code=input_code, trace=output_trace)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.generate_json_trace",
    "documentation": {}
  },
  {
    "label": "js_var_finalizer",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.generate_json_trace",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.generate_json_trace",
    "peekOfCode": "def js_var_finalizer(input_code, output_trace):\n  global JS_VARNAME\n  ret = dict(code=input_code, trace=output_trace)\n  json_output = json.dumps(ret, indent=None)\n  return \"var %s = %s;\" % (JS_VARNAME, json_output)\nparser = OptionParser(usage=\"Generate JSON trace for pytutor\")\nparser.add_option('-c', '--cumulative', default=False, action='store_true',\n        help='output cumulative trace.')\nparser.add_option('-p', '--heapPrimitives', default=False, action='store_true',\n        help='render primitives as heap objects.')",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.generate_json_trace",
    "documentation": {}
  },
  {
    "label": "json.encoder.FLOAT_REPR",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.generate_json_trace",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.generate_json_trace",
    "peekOfCode": "json.encoder.FLOAT_REPR = lambda f: ('%.3f' % f)\ndef json_finalizer(input_code, output_trace):\n  ret = dict(code=input_code, trace=output_trace)\n  # sort_keys=True leads to printing in DETERMINISTIC order, but might\n  # screw up some old tests ... however, there is STILL non-determinism\n  # in Python 3.3 tests, ugh!\n  json_output = json.dumps(ret, indent=INDENT_LEVEL)\n  return json_output\ndef js_var_finalizer(input_code, output_trace):\n  global JS_VARNAME",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.generate_json_trace",
    "documentation": {}
  },
  {
    "label": "parser",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.generate_json_trace",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.generate_json_trace",
    "peekOfCode": "parser = OptionParser(usage=\"Generate JSON trace for pytutor\")\nparser.add_option('-c', '--cumulative', default=False, action='store_true',\n        help='output cumulative trace.')\nparser.add_option('-p', '--heapPrimitives', default=False, action='store_true',\n        help='render primitives as heap objects.')\nparser.add_option('-o', '--compact', default=False, action='store_true',\n        help='output compact trace.')\nparser.add_option('-i', '--input', default=False, action='store',\n        help='JSON list of strings for simulated raw_input.', dest='raw_input_lst_json')\nparser.add_option(\"--create_jsvar\", dest=\"js_varname\", default=None,",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.generate_json_trace",
    "documentation": {}
  },
  {
    "label": "INDENT_LEVEL",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.generate_json_trace",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.generate_json_trace",
    "peekOfCode": "INDENT_LEVEL = None if options.compact else 2\nif options.usercode:\n  INDENT_LEVEL = None\n  print(pg_logger.exec_script_str_local(options.usercode,\n                                        options.raw_input_lst_json,\n                                        options.cumulative,\n                                        options.heapPrimitives,\n                                        json_finalizer))\nelse:\n  fin = sys.stdin if args[0] == \"-\" else open(args[0])",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.generate_json_trace",
    "documentation": {}
  },
  {
    "label": "ColorTable",
    "kind": 6,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.htmlexample_module",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.htmlexample_module",
    "peekOfCode": "class ColorTable:\n    def __init__(self, num_rows, num_columns):\n        self.num_rows = num_rows\n        self.num_columns = num_columns\n        # create a 2D matrix of empty strings\n        self.table = []\n        for i in range(self.num_rows):\n            new_lst = ['' for e in range(self.num_columns)]\n            self.table.append(new_lst)\n    # color must be a legal HTML color string",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.htmlexample_module",
    "documentation": {}
  },
  {
    "label": "t",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.htmlexample_module",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.htmlexample_module",
    "peekOfCode": "t = ColorTable(3, 4)\nt.set_color(0, 0, 'red')\nt.render_HTML()\nt.set_color(1, 1, 'green')\nt.render_HTML()\nt.set_color(2, 2, 'blue')\nt.render_HTML()\nfor i in range(3):\n    for j in range(4):\n        t.set_color(i, j, 'gray')",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.htmlexample_module",
    "documentation": {}
  },
  {
    "label": "HtmlFram",
    "kind": 6,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.htmlFrame",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.htmlFrame",
    "peekOfCode": "class HtmlFrame :\n    def __init__ (self, template=dft_template, banner=\"\") :\n        self.outputOn = True\n        self.template = template\n        self.banner   = banner\n        self.item1 = self.item2 = self.item3 = \"\"\n    def makeEofPage(self) :\n        pass\n    def makeFrame (self,template=None) :\n        if not template : template = self.template",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.htmlFrame",
    "documentation": {}
  },
  {
    "label": "dft_template",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.htmlFrame",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.htmlFrame",
    "peekOfCode": "dft_template = \"\"\"\n<html><body>\n<h3>%(banner)s</h3>\n<div>%(item1)s</div>\n<div>%(item2)s</div>\n<div>%(item3)s</div>\n</html></body>\n\"\"\"\nclass HtmlFrame :\n    def __init__ (self, template=dft_template, banner=\"\") :",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.htmlFrame",
    "documentation": {}
  },
  {
    "label": "display_img",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.html_module",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.html_module",
    "peekOfCode": "def display_img(src):\n  setHTML('<img src=\"%s\"/>' % str(src))",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.html_module",
    "documentation": {}
  },
  {
    "label": "check_viz_config",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.make_visualizations",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.make_visualizations",
    "peekOfCode": "def check_viz_config(parent, config):\n    \"\"\"Check that config is a valid visualization configuration\"\"\"\n    isOK = True\n    if type(config) != dict:\n        print \"In {0}, {1} is not a dictionary\".format(parent,config)\n        return False\n    for key, value in config.iteritems():\n        config_field_type = VIZ_CONFIG_TYPES.get(key)\n        if config_field_type is None:\n            print \"Unknown visualizer key:\", key",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.make_visualizations",
    "documentation": {}
  },
  {
    "label": "check_html_build",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.make_visualizations",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.make_visualizations",
    "peekOfCode": "def check_html_build(html, html_build_info):\n    \"\"\"Check that the build information for this html file is valid.\"\"\"\n    if len(html_build_info) != 2:\n        print \"The build list for {0} should have 2 entries\".format(html)\n        return False\n    if type(html_build_info[0]) != unicode or \\\n            not html_build_info[0].endswith('.js'):\n        print \"The first argument of build list for {0} should be a .js file\".format(html)\n    if type(html_build_info[1]) != dict:\n        print \"The html build information must be a dictionary\"",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.make_visualizations",
    "documentation": {}
  },
  {
    "label": "check_build_info",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.make_visualizations",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.make_visualizations",
    "peekOfCode": "def check_build_info(build_info):\n    \"\"\"Check that the json info is a valid 'Makefile'\"\"\"\n    isOK = True\n    if type(build_info) != dict:\n        print \"The build information must be a dictionary\"\n        return False\n    for key, value in build_info.iteritems():\n        if key == 'default_viz_config':\n            isOK = check_viz_config(build_info, value) and isOK\n        elif key == 'visualizer_url':",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.make_visualizations",
    "documentation": {}
  },
  {
    "label": "update_dict",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.make_visualizations",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.make_visualizations",
    "peekOfCode": "def update_dict(d, defaultd):\n    \"\"\"Update d with key,value pairs in defaultd if the key is not in d.\n    If the value is the empty string then that entry is removed from \n    the dictionary\"\"\"\n    for key, value in defaultd.iteritems():\n        if key not in d:\n            d[key] = value\n        elif value == '':\n            d.pop(key)\ndef get_build_info(json_file):",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.make_visualizations",
    "documentation": {}
  },
  {
    "label": "get_build_info",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.make_visualizations",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.make_visualizations",
    "peekOfCode": "def get_build_info(json_file):\n    \"\"\"Return the build information in json_file. \n    Check if file is valid.\n    \"\"\"\n    try:\n        fp = open(json_file, 'rU')\n        text = fp.read()\n        fp.close()\n        text = re.sub(COMMENT_RE, '', text, flags=re.M)\n        build_info = json.loads(text)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.make_visualizations",
    "documentation": {}
  },
  {
    "label": "get_vizname_root",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.make_visualizations",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.make_visualizations",
    "peekOfCode": "def get_vizname_root(py_file):\n    \"\"\"Return the name to be used as the prefix for Trace, Visualizer etc\"\"\"\n    return os.path.basename(py_file).replace('.', '_')                           \ndef run_command(gen_trace, py_file):\n    \"\"\" Return the output of generate_json_trace.py on py_file\"\"\"\n    command = COMMAND.format(gen_trace, get_vizname_root(py_file), py_file)\n    return subprocess.check_output(command,bufsize=1,\n                                   close_fds=True,\n                                   shell=True)\ndef make_viz(build_info, html_files):",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.make_visualizations",
    "documentation": {}
  },
  {
    "label": "run_command",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.make_visualizations",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.make_visualizations",
    "peekOfCode": "def run_command(gen_trace, py_file):\n    \"\"\" Return the output of generate_json_trace.py on py_file\"\"\"\n    command = COMMAND.format(gen_trace, get_vizname_root(py_file), py_file)\n    return subprocess.check_output(command,bufsize=1,\n                                   close_fds=True,\n                                   shell=True)\ndef make_viz(build_info, html_files):\n    \"\"\"Build the visualizations specified in build_info and html_files\"\"\"\n    abspath = os.path.abspath(__file__)\n    dname = os.path.dirname(abspath)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.make_visualizations",
    "documentation": {}
  },
  {
    "label": "make_viz",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.make_visualizations",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.make_visualizations",
    "peekOfCode": "def make_viz(build_info, html_files):\n    \"\"\"Build the visualizations specified in build_info and html_files\"\"\"\n    abspath = os.path.abspath(__file__)\n    dname = os.path.dirname(abspath)\n    prog = os.path.join(dname, GEN_JSON)\n    # if no html files are supplied 'make' all of them\n    if not html_files:\n        html_files = [h for h in build_info if h.endswith('.html')]\n    for html in html_files:\n        if html in build_info:",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.make_visualizations",
    "documentation": {}
  },
  {
    "label": "get_viz_config",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.make_visualizations",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.make_visualizations",
    "peekOfCode": "def get_viz_config(conf):\n    \"\"\"Get the configuration params for visualization.\"\"\"\n    text = json.dumps(conf)\n    # The callbacks are strings in conf and need to be turned into\n    # function relreences by removing the quotes\n    for patt, repl in CALLBACK_PATTERN_REPL:\n        text = re.sub(patt, repl, text)\n    return text\ndef make_html_viz(prog, html_file, html_info):\n    \"\"\"'Make' the visualizations for html_file\"\"\"",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.make_visualizations",
    "documentation": {}
  },
  {
    "label": "make_html_viz",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.make_visualizations",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.make_visualizations",
    "peekOfCode": "def make_html_viz(prog, html_file, html_info):\n    \"\"\"'Make' the visualizations for html_file\"\"\"\n    js_out, py_dict = html_info\n    # all_traces is a string containing all the js trace datastructures\n    # for all the supplied .py files for html_file\n    try:\n        all_traces = '\\n'.join(run_command(prog, py) for py in py_dict)\n    except Exception as e:\n        print str(e)\n        return",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.make_visualizations",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.make_visualizations",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.make_visualizations",
    "peekOfCode": "def main(args):\n    build_info = get_build_info(args[0])\n    if build_info is None:\n        print \"Make aborted\"\n    else:\n        make_viz(build_info, args[1:])\nif __name__ == '__main__': \n    usage = \"usage: %prog json_file [py_files]\"\n    parser = OptionParser(usage = usage)\n    options,args = parser.parse_args()",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.make_visualizations",
    "documentation": {}
  },
  {
    "label": "GEN_JSON",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.make_visualizations",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.make_visualizations",
    "peekOfCode": "GEN_JSON = \"generate_json_trace.py\"\n# The command used to generate traces {0} will be the full path to GEN_JSON\n# !! WARNING !! python below might need to be modified to point at the \n# correct version\nCOMMAND = \"python {0} --create_jsvar={1}Trace {2}\"\n# The possible keys for configuring the visualization and their types\n# At the moment changing callbacks are not supported - \n# 'heightChangeCallback' is hard-wired in\nVIZ_CONFIG_TYPES = {#'heightChangeCallback': unicode,\n                    #'updateOutputCallback': unicode,",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.make_visualizations",
    "documentation": {}
  },
  {
    "label": "COMMAND",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.make_visualizations",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.make_visualizations",
    "peekOfCode": "COMMAND = \"python {0} --create_jsvar={1}Trace {2}\"\n# The possible keys for configuring the visualization and their types\n# At the moment changing callbacks are not supported - \n# 'heightChangeCallback' is hard-wired in\nVIZ_CONFIG_TYPES = {#'heightChangeCallback': unicode,\n                    #'updateOutputCallback': unicode,\n                    #'executeCodeWithRawInputFunc': unicode,\n                    'embeddedMode': bool,\n                    'startingInstruction': int,\n                    'verticalStack': bool,",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.make_visualizations",
    "documentation": {}
  },
  {
    "label": "VIZ_CONFIG_TYPES",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.make_visualizations",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.make_visualizations",
    "peekOfCode": "VIZ_CONFIG_TYPES = {#'heightChangeCallback': unicode,\n                    #'updateOutputCallback': unicode,\n                    #'executeCodeWithRawInputFunc': unicode,\n                    'embeddedMode': bool,\n                    'startingInstruction': int,\n                    'verticalStack': bool,\n                    'jumpToEnd': bool,\n                    'codeDivWidth': int,\n                    'codeDivHeight': int,\n                    'hideOutput' : bool,",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.make_visualizations",
    "documentation": {}
  },
  {
    "label": "CALLBACK_PATTERN_REPL",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.make_visualizations",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.make_visualizations",
    "peekOfCode": "CALLBACK_PATTERN_REPL = [\n    (r'\"heightChangeCallback\"\\s*:\\s*\"([^\"]*)\"', r'\"heightChangeCallback\":\\1'),\n    (r'\"dateOutputCallback\"\\s*:\\s*\"([^\"]*)\"', r'\"OutputCallback\":\\1'),\n    (r'\"executeCodeWithRawInputFunc\"\\s*:\\s*\"([^\"]*)\"', \n     r'\"executeCodeWithRawInputFunc\":\\1')\n    ]\n#  visualize.html in OPT home              \nDEFALUT_VIZ_URL = 'http://pythontutor.com/visualize.html'\n# The global default visualization configuration\n# Note: heightChangeCallback is hard-wired to be redrawAllVisualizerArrows",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.make_visualizations",
    "documentation": {}
  },
  {
    "label": "DEFALUT_VIZ_URL",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.make_visualizations",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.make_visualizations",
    "peekOfCode": "DEFALUT_VIZ_URL = 'http://pythontutor.com/visualize.html'\n# The global default visualization configuration\n# Note: heightChangeCallback is hard-wired to be redrawAllVisualizerArrows\nDEFAULT_VIZ_CONFIG = {'heightChangeCallback': 'redrawAllVisualizerArrows'}\n# The string used to generate js code for ExecutionVisualizer\nVIZ_VAR = \\\n\"\"\"var {0}Visualizer = \n   new ExecutionVisualizer('{0}Div', {0}Trace,\n          {1});\"\"\"\n# The following is used to inject the dependencies and other info",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.make_visualizations",
    "documentation": {}
  },
  {
    "label": "DEFAULT_VIZ_CONFIG",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.make_visualizations",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.make_visualizations",
    "peekOfCode": "DEFAULT_VIZ_CONFIG = {'heightChangeCallback': 'redrawAllVisualizerArrows'}\n# The string used to generate js code for ExecutionVisualizer\nVIZ_VAR = \\\n\"\"\"var {0}Visualizer = \n   new ExecutionVisualizer('{0}Div', {0}Trace,\n          {1});\"\"\"\n# The following is used to inject the dependencies and other info\n# into the web pages. If this info is already there then it will be replaced.\n# If your file already has this info in but does not have the \n# PY_TUTOR_END footer then manually remove this info.",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.make_visualizations",
    "documentation": {}
  },
  {
    "label": "VIZ_VAR",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.make_visualizations",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.make_visualizations",
    "peekOfCode": "VIZ_VAR = \\\n\"\"\"var {0}Visualizer = \n   new ExecutionVisualizer('{0}Div', {0}Trace,\n          {1});\"\"\"\n# The following is used to inject the dependencies and other info\n# into the web pages. If this info is already there then it will be replaced.\n# If your file already has this info in but does not have the \n# PY_TUTOR_END footer then manually remove this info.\n# This information is based on the example from 'http://pythontutor.com'\nPY_TUTOR_START = '<!-- dependencies for pytutor.js -->'",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.make_visualizations",
    "documentation": {}
  },
  {
    "label": "PY_TUTOR_START",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.make_visualizations",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.make_visualizations",
    "peekOfCode": "PY_TUTOR_START = '<!-- dependencies for pytutor.js -->'\nPY_TUTOR_END = '<!-- end of dependencies for pytutor.js -->'\nPY_TUTOR_DEPEND = PY_TUTOR_START + \\\n\"\"\"\n<script type=\"text/javascript\" src=\"js/d3.v2.min.js\"></script>\n<script type=\"text/javascript\" src=\"js/jquery-1.8.2.min.js\"></script>\n<script type=\"text/javascript\" src=\"js/jquery.simplemodal.js\"></script> <!-- for questions -->\n<script type=\"text/javascript\" src=\"js/jquery.ba-bbq.min.js\"></script> <!-- for handling back button and URL hashes -->\n<script type=\"text/javascript\" src=\"js/jquery.jsPlumb-1.3.10-all-min.js \"></script> <!-- for rendering SVG connectors \n                                                                                         DO NOT UPGRADE ABOVE 1.3.10 OR ELSE BREAKAGE WILL OCCUR -->",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.make_visualizations",
    "documentation": {}
  },
  {
    "label": "PY_TUTOR_END",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.make_visualizations",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.make_visualizations",
    "peekOfCode": "PY_TUTOR_END = '<!-- end of dependencies for pytutor.js -->'\nPY_TUTOR_DEPEND = PY_TUTOR_START + \\\n\"\"\"\n<script type=\"text/javascript\" src=\"js/d3.v2.min.js\"></script>\n<script type=\"text/javascript\" src=\"js/jquery-1.8.2.min.js\"></script>\n<script type=\"text/javascript\" src=\"js/jquery.simplemodal.js\"></script> <!-- for questions -->\n<script type=\"text/javascript\" src=\"js/jquery.ba-bbq.min.js\"></script> <!-- for handling back button and URL hashes -->\n<script type=\"text/javascript\" src=\"js/jquery.jsPlumb-1.3.10-all-min.js \"></script> <!-- for rendering SVG connectors \n                                                                                         DO NOT UPGRADE ABOVE 1.3.10 OR ELSE BREAKAGE WILL OCCUR -->\n<script type=\"text/javascript\" src=\"js/jquery-ui-1.8.24.custom.min.js\"></script> <!-- for sliders and other UI elements -->",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.make_visualizations",
    "documentation": {}
  },
  {
    "label": "PY_TUTOR_DEPEND",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.make_visualizations",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.make_visualizations",
    "peekOfCode": "PY_TUTOR_DEPEND = PY_TUTOR_START + \\\n\"\"\"\n<script type=\"text/javascript\" src=\"js/d3.v2.min.js\"></script>\n<script type=\"text/javascript\" src=\"js/jquery-1.8.2.min.js\"></script>\n<script type=\"text/javascript\" src=\"js/jquery.simplemodal.js\"></script> <!-- for questions -->\n<script type=\"text/javascript\" src=\"js/jquery.ba-bbq.min.js\"></script> <!-- for handling back button and URL hashes -->\n<script type=\"text/javascript\" src=\"js/jquery.jsPlumb-1.3.10-all-min.js \"></script> <!-- for rendering SVG connectors \n                                                                                         DO NOT UPGRADE ABOVE 1.3.10 OR ELSE BREAKAGE WILL OCCUR -->\n<script type=\"text/javascript\" src=\"js/jquery-ui-1.8.24.custom.min.js\"></script> <!-- for sliders and other UI elements -->\n<link type=\"text/css\" href=\"css/ui-lightness/jquery-ui-1.8.24.custom.css\" rel=\"stylesheet\" />",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.make_visualizations",
    "documentation": {}
  },
  {
    "label": "PY_TUTOR_RE",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.make_visualizations",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.make_visualizations",
    "peekOfCode": "PY_TUTOR_RE = PY_TUTOR_START + '.*' + PY_TUTOR_END\n# Used to inject a comment along with the dependency information so that\n# you can cut and paste into the appropriate place in to the page body\nDIV_TEXT = '<div id=\"{0}Div\"></div>'\n# The ready function to go at the end ot the generated .js file\nDOCUMENT_READY_TEXT = \\\n\"\"\"\n$(document).ready(function() {{\n{0}\n    function redrawAllVisualizerArrows() {{",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.make_visualizations",
    "documentation": {}
  },
  {
    "label": "DIV_TEXT",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.make_visualizations",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.make_visualizations",
    "peekOfCode": "DIV_TEXT = '<div id=\"{0}Div\"></div>'\n# The ready function to go at the end ot the generated .js file\nDOCUMENT_READY_TEXT = \\\n\"\"\"\n$(document).ready(function() {{\n{0}\n    function redrawAllVisualizerArrows() {{\n        {1}\n    }}\n$(window).resize(redrawAllVisualizerArrows);",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.make_visualizations",
    "documentation": {}
  },
  {
    "label": "DOCUMENT_READY_TEXT",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.make_visualizations",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.make_visualizations",
    "peekOfCode": "DOCUMENT_READY_TEXT = \\\n\"\"\"\n$(document).ready(function() {{\n{0}\n    function redrawAllVisualizerArrows() {{\n        {1}\n    }}\n$(window).resize(redrawAllVisualizerArrows);\n}});\n\"\"\"",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.make_visualizations",
    "documentation": {}
  },
  {
    "label": "REDRAW_CONNECTORS_TEXT",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.make_visualizations",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.make_visualizations",
    "peekOfCode": "REDRAW_CONNECTORS_TEXT = \"if ({0}Visualizer) {0}Visualizer.redrawConnectors();\"\nCOMMENT_RE = r'#.*$'\ndef check_viz_config(parent, config):\n    \"\"\"Check that config is a valid visualization configuration\"\"\"\n    isOK = True\n    if type(config) != dict:\n        print \"In {0}, {1} is not a dictionary\".format(parent,config)\n        return False\n    for key, value in config.iteritems():\n        config_field_type = VIZ_CONFIG_TYPES.get(key)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.make_visualizations",
    "documentation": {}
  },
  {
    "label": "COMMENT_RE",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.make_visualizations",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.make_visualizations",
    "peekOfCode": "COMMENT_RE = r'#.*$'\ndef check_viz_config(parent, config):\n    \"\"\"Check that config is a valid visualization configuration\"\"\"\n    isOK = True\n    if type(config) != dict:\n        print \"In {0}, {1} is not a dictionary\".format(parent,config)\n        return False\n    for key, value in config.iteritems():\n        config_field_type = VIZ_CONFIG_TYPES.get(key)\n        if config_field_type is None:",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.make_visualizations",
    "documentation": {}
  },
  {
    "label": "Matri",
    "kind": 6,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.matrix",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.matrix",
    "peekOfCode": "class Matrix :\n    def __init__ (self, nrows=1, ncols=1, data=None,\n                  dftFormat=\"\", dftStyle=\"\", title=\"\",\n                  tableAttr=dftTableAttr, tableHeaders=None,\n                  Expand=True) :\n        self.nrows = nrows\n        self.ncols = ncols\n        self.values = {}\n        self.expanded = Expand\n        if Expand :",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.matrix",
    "documentation": {}
  },
  {
    "label": "dictToLol",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.matrix",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.matrix",
    "peekOfCode": "def dictToLol(dic) :\n    \"Convert dict to a list of lists\"\n    keys = dic.keys(); keys.sort()\n    lists = []\n    for key in keys :\n        val = dic[key]\n        if type(val) not in typeSeq : val = [val]\n        lists.append([key]+list(val))\n    return lists",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.matrix",
    "documentation": {}
  },
  {
    "label": "dftTableAttr",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.matrix",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.matrix",
    "peekOfCode": "dftTableAttr = 'cellspacing=\"0\" cellpadding=\"10\"'\nclass Matrix :\n    def __init__ (self, nrows=1, ncols=1, data=None,\n                  dftFormat=\"\", dftStyle=\"\", title=\"\",\n                  tableAttr=dftTableAttr, tableHeaders=None,\n                  Expand=True) :\n        self.nrows = nrows\n        self.ncols = ncols\n        self.values = {}\n        self.expanded = Expand",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.matrix",
    "documentation": {}
  },
  {
    "label": "typeSeq",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.matrix",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.matrix",
    "peekOfCode": "typeSeq = (type([]), type((1,2)))\ndef dictToLol(dic) :\n    \"Convert dict to a list of lists\"\n    keys = dic.keys(); keys.sort()\n    lists = []\n    for key in keys :\n        val = dic[key]\n        if type(val) not in typeSeq : val = [val]\n        lists.append([key]+list(val))\n    return lists",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.matrix",
    "documentation": {}
  },
  {
    "label": "form",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.name_lookup",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.name_lookup",
    "peekOfCode": "form = cgi.FieldStorage()\nrequested_email = form['email'].value\nprint(\"Content-type: text/plain; charset=iso-8859-1\\n\")\nfor line in open('names.csv'):\n    toks = line.strip().split(',')\n    name = toks[0].strip()\n    email = toks[1].strip()\n    if email == requested_email:\n        print(json.dumps({'name': name, 'email': email}))\n        sys.exit(0) # get out early",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.name_lookup",
    "documentation": {}
  },
  {
    "label": "requested_email",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.name_lookup",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.name_lookup",
    "peekOfCode": "requested_email = form['email'].value\nprint(\"Content-type: text/plain; charset=iso-8859-1\\n\")\nfor line in open('names.csv'):\n    toks = line.strip().split(',')\n    name = toks[0].strip()\n    email = toks[1].strip()\n    if email == requested_email:\n        print(json.dumps({'name': name, 'email': email}))\n        sys.exit(0) # get out early\nprint(json.dumps({'error': 1}))",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.name_lookup",
    "documentation": {}
  },
  {
    "label": "Application",
    "kind": 6,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.opt-ipy-server",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.opt-ipy-server",
    "peekOfCode": "class Application(tornado.web.Application):\n    # singleton\n    current_full_trace = None\n    def __init__(self):\n        handlers = [\n            (r\"/js/(.*)\",\n             tornado.web.StaticFileHandler,\n             {\"path\": os.path.join(os.path.dirname(__file__), 'js/')}),\n            (r\"/css/(.*)\",\n             tornado.web.StaticFileHandler,",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.opt-ipy-server",
    "documentation": {}
  },
  {
    "label": "MainHandler",
    "kind": 6,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.opt-ipy-server",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.opt-ipy-server",
    "peekOfCode": "class MainHandler(tornado.web.RequestHandler):\n    def get(self):\n        self.render(\"opt-ipy.html\")\nclass WholeTraceHandler(tornado.web.RequestHandler):\n    def post(self):\n        message = self.request.body\n        dat = json.loads(message.decode())\n        Application.current_full_trace = dat\n        js_msg=dict(payload=Application.current_full_trace, type='wholetrace')\n        ChatSocketHandler.send_updates(json.dumps(js_msg))",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.opt-ipy-server",
    "documentation": {}
  },
  {
    "label": "WholeTraceHandler",
    "kind": 6,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.opt-ipy-server",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.opt-ipy-server",
    "peekOfCode": "class WholeTraceHandler(tornado.web.RequestHandler):\n    def post(self):\n        message = self.request.body\n        dat = json.loads(message.decode())\n        Application.current_full_trace = dat\n        js_msg=dict(payload=Application.current_full_trace, type='wholetrace')\n        ChatSocketHandler.send_updates(json.dumps(js_msg))\nclass DiffTraceHandler(tornado.web.RequestHandler):\n    def post(self):\n        # TODO: implement me using, say,",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.opt-ipy-server",
    "documentation": {}
  },
  {
    "label": "DiffTraceHandler",
    "kind": 6,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.opt-ipy-server",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.opt-ipy-server",
    "peekOfCode": "class DiffTraceHandler(tornado.web.RequestHandler):\n    def post(self):\n        # TODO: implement me using, say,\n        # https://code.google.com/p/google-diff-match-patch/\n        pass\nclass ClearHandler(tornado.web.RequestHandler):\n    def post(self):\n        Application.current_full_trace = None\n        js_msg=dict(type='clear')\n        ChatSocketHandler.send_updates(json.dumps(js_msg))",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.opt-ipy-server",
    "documentation": {}
  },
  {
    "label": "ClearHandler",
    "kind": 6,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.opt-ipy-server",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.opt-ipy-server",
    "peekOfCode": "class ClearHandler(tornado.web.RequestHandler):\n    def post(self):\n        Application.current_full_trace = None\n        js_msg=dict(type='clear')\n        ChatSocketHandler.send_updates(json.dumps(js_msg))\nclass ChatSocketHandler(tornado.websocket.WebSocketHandler):\n    waiters = set()\n    def allow_draft76(self):\n        # for iOS 5.0 Safari\n        return True",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.opt-ipy-server",
    "documentation": {}
  },
  {
    "label": "ChatSocketHandler",
    "kind": 6,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.opt-ipy-server",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.opt-ipy-server",
    "peekOfCode": "class ChatSocketHandler(tornado.websocket.WebSocketHandler):\n    waiters = set()\n    def allow_draft76(self):\n        # for iOS 5.0 Safari\n        return True\n    def open(self):\n        ChatSocketHandler.waiters.add(self)\n        # when a new connection is made, send the entire trace to only\n        # THIS browser\n        if Application.current_full_trace:",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.opt-ipy-server",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.opt-ipy-server",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.opt-ipy-server",
    "peekOfCode": "def main():\n    tornado.options.parse_command_line()\n    app = Application()\n    app.listen(options.port)\n    tornado.ioloop.IOLoop.instance().start()\nif __name__ == \"__main__\":\n    main()",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.opt-ipy-server",
    "documentation": {}
  },
  {
    "label": "OptHistory",
    "kind": 6,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.opt-ipy",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.opt-ipy",
    "peekOfCode": "class OptHistory(object):\n    def __init__(self):\n        self.executed_stmts = []\n    def pop_last(self):\n        self.executed_stmts.pop()\n    def get_code(self):\n        return '\\n'.join(self.executed_stmts)\n    def run_str_and_broadcast(self, stmt_str):\n        '''\n        Run stmt_str and transmit trace to server",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.opt-ipy",
    "documentation": {}
  },
  {
    "label": "opt_pre_run_code_hook",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.opt-ipy",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.opt-ipy",
    "peekOfCode": "def opt_pre_run_code_hook(self):\n    # when you run multiple statements on one line using a semicolon:\n    # e.g., \"print x; print y\", this function will fire multiple times.\n    # we want to avoid duplicates!\n    last_cmd = self.history_manager.input_hist_parsed[-1]\n    last_cmd_index = len(self.history_manager.input_hist_parsed) - 1\n    # also don't intercept special ipython commands\n    if 'get_ipython().' in last_cmd:\n        return\n    if self.meta.last_cmd_index == last_cmd_index:",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.opt-ipy",
    "documentation": {}
  },
  {
    "label": "opt_clear",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.opt-ipy",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.opt-ipy",
    "peekOfCode": "def opt_clear(self, params):\n    ip = get_ipython()\n    filtered_user_ns = set()\n    for k, v in viewitems(ip.user_ns):\n        if k[0] == '_':\n            continue\n        if k in ('In', 'Out', 'help', 'quit', 'exit', 'get_ipython'):\n            continue\n        filtered_user_ns.add(k)\n    for k in filtered_user_ns:",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.opt-ipy",
    "documentation": {}
  },
  {
    "label": "load_ipython_extension",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.opt-ipy",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.opt-ipy",
    "peekOfCode": "def load_ipython_extension(ipython):\n    # The `ipython` argument is the currently active `InteractiveShell`\n    # instance, which can be used in any way. This allows you to register\n    # new magics or aliases, for example.\n    ipython.meta.opt_history = OptHistory()\n    ipython.meta.last_cmd = None\n    ipython.meta.last_cmd_index = -1 # set to an impossible initial value\n    # NB: spelling might be different in older IPython versions\n    ipython.set_hook('pre_run_code_hook', opt_pre_run_code_hook)\n    ipython.define_magic('clear', opt_clear)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.opt-ipy",
    "documentation": {}
  },
  {
    "label": "unload_ipython_extension",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.opt-ipy",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.opt-ipy",
    "peekOfCode": "def unload_ipython_extension(ipython):\n    # If you want your extension to be unloadable, put that logic here.\n    pass",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.opt-ipy",
    "documentation": {}
  },
  {
    "label": "SERVER_ADDR",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.opt-ipy",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.opt-ipy",
    "peekOfCode": "SERVER_ADDR = \"http://localhost:8888/\"\nassert SERVER_ADDR[-1] == '/'\nimport sys, json\nimport pg_logger\n# TODO: use the 'six' library to smooth out py2 and py3 differences\nis_python3 = (sys.version_info[0] == 3)\nviewitems = None\nurlopen = None\nif is_python3:\n    import urllib",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.opt-ipy",
    "documentation": {}
  },
  {
    "label": "is_python3",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.opt-ipy",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.opt-ipy",
    "peekOfCode": "is_python3 = (sys.version_info[0] == 3)\nviewitems = None\nurlopen = None\nif is_python3:\n    import urllib\n    urlopen = urllib.request.urlopen\n    viewitems = lambda x: x.items()\nelse:\n    import urllib2\n    urlopen = urllib2.urlopen",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.opt-ipy",
    "documentation": {}
  },
  {
    "label": "viewitems",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.opt-ipy",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.opt-ipy",
    "peekOfCode": "viewitems = None\nurlopen = None\nif is_python3:\n    import urllib\n    urlopen = urllib.request.urlopen\n    viewitems = lambda x: x.items()\nelse:\n    import urllib2\n    urlopen = urllib2.urlopen\n    viewitems = lambda x: x.iteritems()",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.opt-ipy",
    "documentation": {}
  },
  {
    "label": "urlopen",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.opt-ipy",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.opt-ipy",
    "peekOfCode": "urlopen = None\nif is_python3:\n    import urllib\n    urlopen = urllib.request.urlopen\n    viewitems = lambda x: x.items()\nelse:\n    import urllib2\n    urlopen = urllib2.urlopen\n    viewitems = lambda x: x.iteritems()\n# Standardize display of floats to 3 significant figures",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.opt-ipy",
    "documentation": {}
  },
  {
    "label": "json.encoder.FLOAT_REPR",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.opt-ipy",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.opt-ipy",
    "peekOfCode": "json.encoder.FLOAT_REPR = lambda f: ('%.3f' % f)\n#INDENT_LEVEL = 2   # human-readable\nINDENT_LEVEL = None # compact\n# TODO: support incremental pushes to the OPT frontend for efficiency\n# and better \"snappiness\"\n#\n# I think the easiest way to do diffs is to set INDENT_LEVEL = 2 above\n# and then simply send the diff of the JSON string to the server.\n# It's WAY TOO COMPLICATED to try implementing semantic diffs of the\n# OPT trace ourselves, since there are too many corner cases.",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.opt-ipy",
    "documentation": {}
  },
  {
    "label": "#INDENT_LEVEL",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.opt-ipy",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.opt-ipy",
    "peekOfCode": "#INDENT_LEVEL = 2   # human-readable\nINDENT_LEVEL = None # compact\n# TODO: support incremental pushes to the OPT frontend for efficiency\n# and better \"snappiness\"\n#\n# I think the easiest way to do diffs is to set INDENT_LEVEL = 2 above\n# and then simply send the diff of the JSON string to the server.\n# It's WAY TOO COMPLICATED to try implementing semantic diffs of the\n# OPT trace ourselves, since there are too many corner cases.\n#",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.opt-ipy",
    "documentation": {}
  },
  {
    "label": "INDENT_LEVEL",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.opt-ipy",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.opt-ipy",
    "peekOfCode": "INDENT_LEVEL = None # compact\n# TODO: support incremental pushes to the OPT frontend for efficiency\n# and better \"snappiness\"\n#\n# I think the easiest way to do diffs is to set INDENT_LEVEL = 2 above\n# and then simply send the diff of the JSON string to the server.\n# It's WAY TOO COMPLICATED to try implementing semantic diffs of the\n# OPT trace ourselves, since there are too many corner cases.\n#\n# text diffs are an elegant solution :)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.opt-ipy",
    "documentation": {}
  },
  {
    "label": "ObjectEncoder",
    "kind": 6,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_encoder",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_encoder",
    "peekOfCode": "class ObjectEncoder:\n  def __init__(self, render_heap_primitives):\n    # Key: canonicalized small ID\n    # Value: encoded (compound) heap object\n    self.encoded_heap_objects = {}\n    self.render_heap_primitives = render_heap_primitives\n    self.id_to_small_IDs = {}\n    self.cur_small_ID = 1\n    # wow, creating unique identifiers for lambdas is quite annoying,\n    # especially if we want to properly differentiate:",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_encoder",
    "documentation": {}
  },
  {
    "label": "is_class",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_encoder",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_encoder",
    "peekOfCode": "def is_class(dat):\n  \"\"\"Return whether dat is a class.\"\"\"\n  if is_python3:\n    return isinstance(dat, type)\n  else:\n    return type(dat) in (types.ClassType, types.TypeType)\ndef is_instance(dat):\n  \"\"\"Return whether dat is an instance of a class.\"\"\"\n  if is_python3:\n    return type(dat) not in PRIMITIVE_TYPES and \\",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_encoder",
    "documentation": {}
  },
  {
    "label": "is_instance",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_encoder",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_encoder",
    "peekOfCode": "def is_instance(dat):\n  \"\"\"Return whether dat is an instance of a class.\"\"\"\n  if is_python3:\n    return type(dat) not in PRIMITIVE_TYPES and \\\n           isinstance(type(dat), type) and \\\n           not isinstance(dat, type)\n  else:\n    # ugh, classRE match is a bit of a hack :(\n    return type(dat) == types.InstanceType or classRE.match(str(type(dat)))\ndef get_name(obj):",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_encoder",
    "documentation": {}
  },
  {
    "label": "get_name",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_encoder",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_encoder",
    "peekOfCode": "def get_name(obj):\n  \"\"\"Return the name of an object.\"\"\"\n  return obj.__name__ if hasattr(obj, '__name__') else get_name(type(obj))\nPRIMITIVE_TYPES = (int, long, float, str, unicode, bool, type(None))\ndef encode_primitive(dat):\n  t = type(dat)\n  if t is float:\n    if math.isinf(dat):\n      if dat > 0:\n        return ['SPECIAL_FLOAT', 'Infinity']",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_encoder",
    "documentation": {}
  },
  {
    "label": "encode_primitive",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_encoder",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_encoder",
    "peekOfCode": "def encode_primitive(dat):\n  t = type(dat)\n  if t is float:\n    if math.isinf(dat):\n      if dat > 0:\n        return ['SPECIAL_FLOAT', 'Infinity']\n      else:\n        return ['SPECIAL_FLOAT', '-Infinity']\n    elif math.isnan(dat):\n      return ['SPECIAL_FLOAT', 'NaN']",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_encoder",
    "documentation": {}
  },
  {
    "label": "create_lambda_line_number",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_encoder",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_encoder",
    "peekOfCode": "def create_lambda_line_number(codeobj, line_to_lambda_code):\n  try:\n    lambda_lineno = codeobj.co_firstlineno\n    lst = line_to_lambda_code[lambda_lineno]\n    ind = lst.index(codeobj)\n    # add a suffix for all subsequent lambdas on a line beyond the first\n    # (nix this for now because order isn't guaranteed when you have\n    #  multiple lambdas on the same line)\n    '''\n    if ind > 0:",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_encoder",
    "documentation": {}
  },
  {
    "label": "FLOAT_PRECISION",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_encoder",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_encoder",
    "peekOfCode": "FLOAT_PRECISION = 4\nfrom collections import defaultdict\nimport re, types\nimport sys\nimport math\ntypeRE = re.compile(\"<type '(.*)'>\")\nclassRE = re.compile(\"<class '(.*)'>\")\nimport inspect\n# TODO: maybe use the 'six' library to smooth over Py2 and Py3 incompatibilities?\nis_python3 = (sys.version_info[0] == 3)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_encoder",
    "documentation": {}
  },
  {
    "label": "typeRE",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_encoder",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_encoder",
    "peekOfCode": "typeRE = re.compile(\"<type '(.*)'>\")\nclassRE = re.compile(\"<class '(.*)'>\")\nimport inspect\n# TODO: maybe use the 'six' library to smooth over Py2 and Py3 incompatibilities?\nis_python3 = (sys.version_info[0] == 3)\nif is_python3:\n  # avoid name errors (GROSS!)\n  long = int\n  unicode = str\ndef is_class(dat):",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_encoder",
    "documentation": {}
  },
  {
    "label": "classRE",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_encoder",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_encoder",
    "peekOfCode": "classRE = re.compile(\"<class '(.*)'>\")\nimport inspect\n# TODO: maybe use the 'six' library to smooth over Py2 and Py3 incompatibilities?\nis_python3 = (sys.version_info[0] == 3)\nif is_python3:\n  # avoid name errors (GROSS!)\n  long = int\n  unicode = str\ndef is_class(dat):\n  \"\"\"Return whether dat is a class.\"\"\"",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_encoder",
    "documentation": {}
  },
  {
    "label": "is_python3",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_encoder",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_encoder",
    "peekOfCode": "is_python3 = (sys.version_info[0] == 3)\nif is_python3:\n  # avoid name errors (GROSS!)\n  long = int\n  unicode = str\ndef is_class(dat):\n  \"\"\"Return whether dat is a class.\"\"\"\n  if is_python3:\n    return isinstance(dat, type)\n  else:",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_encoder",
    "documentation": {}
  },
  {
    "label": "PRIMITIVE_TYPES",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_encoder",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_encoder",
    "peekOfCode": "PRIMITIVE_TYPES = (int, long, float, str, unicode, bool, type(None))\ndef encode_primitive(dat):\n  t = type(dat)\n  if t is float:\n    if math.isinf(dat):\n      if dat > 0:\n        return ['SPECIAL_FLOAT', 'Infinity']\n      else:\n        return ['SPECIAL_FLOAT', '-Infinity']\n    elif math.isnan(dat):",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_encoder",
    "documentation": {}
  },
  {
    "label": "NullDevice",
    "kind": 6,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "peekOfCode": "class NullDevice():\n    def write(self, s):\n        pass\n# These could lead to XSS or other code injection attacks, so be careful:\n__html__ = None\ndef setHTML(htmlStr):\n  global __html__\n  __html__ = htmlStr\n__css__ = None\ndef setCSS(cssStr):",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "documentation": {}
  },
  {
    "label": "RawInputException",
    "kind": 6,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "peekOfCode": "class RawInputException(Exception):\n  pass\ndef raw_input_wrapper(prompt=''):\n  if input_string_queue:\n    input_str = input_string_queue.pop(0)\n    # write the prompt and user input to stdout, to emulate what happens\n    # at the terminal\n    sys.stdout.write(str(prompt)) # always convert prompt into a string\n    sys.stdout.write(input_str + \"\\n\") # newline to simulate the user hitting Enter\n    return input_str",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "documentation": {}
  },
  {
    "label": "MouseInputException",
    "kind": 6,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "peekOfCode": "class MouseInputException(Exception):\n  pass\ndef mouse_input_wrapper(prompt=''):\n  if input_string_queue:\n    return input_string_queue.pop(0)\n  raise MouseInputException(prompt)\n# blacklist of builtins\nBANNED_BUILTINS = ['reload', 'open', 'compile',\n                   'file', 'eval', 'exec', 'execfile',\n                   'exit', 'quit', 'help',",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "documentation": {}
  },
  {
    "label": "PGLogger",
    "kind": 6,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "peekOfCode": "class PGLogger(bdb.Bdb):\n    def __init__(self, cumulative_mode, heap_primitives, show_only_outputs, finalizer_func,\n                 disable_security_checks=False, crazy_mode=False):\n        bdb.Bdb.__init__(self)\n        self.mainpyfile = ''\n        self._wait_for_mainpyfile = 0\n        self.disable_security_checks = disable_security_checks\n        # if True, then displays ALL stack frames that have ever existed\n        # rather than only those currently on the stack (and their\n        # lexical parents)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "documentation": {}
  },
  {
    "label": "setHTML",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "peekOfCode": "def setHTML(htmlStr):\n  global __html__\n  __html__ = htmlStr\n__css__ = None\ndef setCSS(cssStr):\n  global __css__\n  __css__ = cssStr\n__js__ = None\ndef setJS(jsStr):\n  global __js__",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "documentation": {}
  },
  {
    "label": "setCSS",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "peekOfCode": "def setCSS(cssStr):\n  global __css__\n  __css__ = cssStr\n__js__ = None\ndef setJS(jsStr):\n  global __js__\n  __js__ = jsStr\n# ugh, I can't figure out why in Python 2, __builtins__ seems to\n# be a dict, but in Python 3, __builtins__ seems to be a module,\n# so just handle both cases ... UGLY!",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "documentation": {}
  },
  {
    "label": "setJS",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "peekOfCode": "def setJS(jsStr):\n  global __js__\n  __js__ = jsStr\n# ugh, I can't figure out why in Python 2, __builtins__ seems to\n# be a dict, but in Python 3, __builtins__ seems to be a module,\n# so just handle both cases ... UGLY!\nif type(__builtins__) is dict:\n  BUILTIN_IMPORT = __builtins__['__import__']\nelse:\n  assert type(__builtins__) is types.ModuleType",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "documentation": {}
  },
  {
    "label": "open_wrapper",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "peekOfCode": "def open_wrapper(*args):\n  if is_python3:\n      raise Exception('''open() is not supported by Python Tutor.\nInstead use io.StringIO() to simulate a file.\nHere is an example: http://goo.gl/uNvBGl''')\n  else:\n      raise Exception('''open() is not supported by Python Tutor.\nInstead use StringIO.StringIO() to simulate a file.\nHere is an example: http://goo.gl/Q9xQ4p''')\n# create a more sensible error message for unsupported features",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "documentation": {}
  },
  {
    "label": "create_banned_builtins_wrapper",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "peekOfCode": "def create_banned_builtins_wrapper(fn_name):\n  def err_func(*args):\n    raise Exception(\"'\" + fn_name + \"' is not supported by Python Tutor.\")\n  return err_func\nclass RawInputException(Exception):\n  pass\ndef raw_input_wrapper(prompt=''):\n  if input_string_queue:\n    input_str = input_string_queue.pop(0)\n    # write the prompt and user input to stdout, to emulate what happens",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "documentation": {}
  },
  {
    "label": "raw_input_wrapper",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "peekOfCode": "def raw_input_wrapper(prompt=''):\n  if input_string_queue:\n    input_str = input_string_queue.pop(0)\n    # write the prompt and user input to stdout, to emulate what happens\n    # at the terminal\n    sys.stdout.write(str(prompt)) # always convert prompt into a string\n    sys.stdout.write(input_str + \"\\n\") # newline to simulate the user hitting Enter\n    return input_str\n  raise RawInputException(str(prompt)) # always convert prompt into a string\n# Python 2 input() does eval(raw_input())",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "documentation": {}
  },
  {
    "label": "python2_input_wrapper",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "peekOfCode": "def python2_input_wrapper(prompt=''):\n  if input_string_queue:\n    input_str = input_string_queue.pop(0)\n    # write the prompt and user input to stdout, to emulate what happens\n    # at the terminal\n    sys.stdout.write(str(prompt)) # always convert prompt into a string\n    sys.stdout.write(input_str + \"\\n\") # newline to simulate the user hitting Enter\n    return eval(input_str) # remember to eval!\n  raise RawInputException(str(prompt)) # always convert prompt into a string\nclass MouseInputException(Exception):",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "documentation": {}
  },
  {
    "label": "mouse_input_wrapper",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "peekOfCode": "def mouse_input_wrapper(prompt=''):\n  if input_string_queue:\n    return input_string_queue.pop(0)\n  raise MouseInputException(prompt)\n# blacklist of builtins\nBANNED_BUILTINS = ['reload', 'open', 'compile',\n                   'file', 'eval', 'exec', 'execfile',\n                   'exit', 'quit', 'help',\n                   'dir', 'globals', 'locals', 'vars']\n# Peter says 'apply' isn't dangerous, so don't ban it",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "documentation": {}
  },
  {
    "label": "get_user_stdout",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "peekOfCode": "def get_user_stdout(frame):\n  my_user_stdout = frame.f_globals['__user_stdout__']\n  # This is SUPER KRAZY! In Python 2, the buflist inside of a StringIO\n  # instance can be made up of both str and unicode, so we need to convert\n  # the str to unicode and replace invalid characters with the Unicode '?'\n  # But leave unicode elements alone. This way, EVERYTHING inside buflist\n  # will be unicode. (Note that in Python 3, everything is already unicode,\n  # so we're fine.)\n  if not is_python3:\n    my_user_stdout.buflist = [(e.decode('utf-8', 'replace')",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "documentation": {}
  },
  {
    "label": "get_user_globals",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "peekOfCode": "def get_user_globals(frame, at_global_scope=False):\n  d = filter_var_dict(frame.f_globals)\n  # don't blurt out all of f_valuestack for now ...\n  '''\n  if at_global_scope and hasattr(frame, 'f_valuestack'):\n    for (i, e) in enumerate(frame.f_valuestack):\n      d['_tmp' + str(i+1)] = e\n  '''\n  # print out list objects being built up in Python 2.x list comprehensions\n  # (which don't have its own special <listcomp> frame, sadly)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "documentation": {}
  },
  {
    "label": "get_user_locals",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "peekOfCode": "def get_user_locals(frame):\n  ret = filter_var_dict(frame.f_locals)\n  # don't blurt out all of f_valuestack for now ...\n  '''\n  if hasattr(frame, 'f_valuestack'):\n    for (i, e) in enumerate(frame.f_valuestack):\n      ret['_tmp' + str(i+1)] = e\n  '''\n  # special printing of list/set/dict comprehension objects as they are\n  # being built up incrementally ...",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "documentation": {}
  },
  {
    "label": "filter_var_dict",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "peekOfCode": "def filter_var_dict(d):\n  ret = {}\n  for (k,v) in d.items():\n    if k not in IGNORE_VARS:\n      ret[k] = v\n  return ret\n# yield all function objects locally-reachable from frame,\n# making sure to traverse inside all compound objects ...\ndef visit_all_locally_reachable_function_objs(frame):\n  for (k, v) in get_user_locals(frame).items():",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "documentation": {}
  },
  {
    "label": "visit_all_locally_reachable_function_objs",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "peekOfCode": "def visit_all_locally_reachable_function_objs(frame):\n  for (k, v) in get_user_locals(frame).items():\n    for e in visit_function_obj(v, set()):\n      if e: # only non-null if it's a function object\n        assert type(e) in (types.FunctionType, types.MethodType)\n        yield e\n# TODO: this might be slow if we're traversing inside lots of objects:\ndef visit_function_obj(v, ids_seen_set):\n  v_id = id(v)\n  # to prevent infinite loop",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "documentation": {}
  },
  {
    "label": "visit_function_obj",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "peekOfCode": "def visit_function_obj(v, ids_seen_set):\n  v_id = id(v)\n  # to prevent infinite loop\n  if v_id in ids_seen_set:\n    yield None\n  else:\n    ids_seen_set.add(v_id)\n    typ = type(v)\n    # simple base case\n    if typ in (types.FunctionType, types.MethodType):",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "documentation": {}
  },
  {
    "label": "exec_script_str",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "peekOfCode": "def exec_script_str(script_str, raw_input_lst_json, options_json, finalizer_func):\n  options = json.loads(options_json)\n  py_crazy_mode = ('py_crazy_mode' in options and options['py_crazy_mode'])\n  logger = PGLogger(options['cumulative_mode'], options['heap_primitives'], options['show_only_outputs'], finalizer_func,\n                    crazy_mode=py_crazy_mode)\n  # TODO: refactor these NOT to be globals\n  global input_string_queue\n  input_string_queue = []\n  if raw_input_lst_json:\n    # TODO: if we want to support unicode, remove str() cast",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "documentation": {}
  },
  {
    "label": "exec_script_str_local",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "peekOfCode": "def exec_script_str_local(script_str, raw_input_lst_json, cumulative_mode, heap_primitives, finalizer_func):\n  # TODO: add py_crazy_mode option here too ...\n  logger = PGLogger(cumulative_mode, heap_primitives, False, finalizer_func, disable_security_checks=True)\n  # TODO: refactor these NOT to be globals\n  global input_string_queue\n  input_string_queue = []\n  if raw_input_lst_json:\n    # TODO: if we want to support unicode, remove str() cast\n    input_string_queue = [str(e) for e in json.loads(raw_input_lst_json)]\n  global __html__, __css__, __js__",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "documentation": {}
  },
  {
    "label": "exec_str_with_user_ns",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "peekOfCode": "def exec_str_with_user_ns(script_str, user_ns, finalizer_func):\n  logger = PGLogger(False, False, False, finalizer_func, disable_security_checks=True)\n  global __html__, __css__, __js__\n  __html__, __css__, __js__ = None, None, None\n  try:\n    logger._runscript(script_str, user_ns)\n  except bdb.BdbQuit:\n    pass\n  finally:\n    return logger.finalize()",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "documentation": {}
  },
  {
    "label": "is_python3",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "peekOfCode": "is_python3 = (sys.version_info[0] == 3)\n# NB: don't use cStringIO since it doesn't support unicode!!!\nif is_python3:\n  import io as StringIO\n  import io # expose regular io for Python3 users too\nelse:\n  import StringIO\nimport pg_encoder\n# TODO: not threadsafe:\n# upper-bound on the number of executed lines, in order to guard against",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "documentation": {}
  },
  {
    "label": "#MAX_EXECUTED_LINES",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "peekOfCode": "#MAX_EXECUTED_LINES = 300\nMAX_EXECUTED_LINES = 1000 # on 2016-05-01, I increased the limit from 300 to 1000 for Python due to popular user demand! and I also improved the warning message\n#DEBUG = False\nDEBUG = True\nBREAKPOINT_STR = '#break'\nCLASS_RE = re.compile('class\\s+')\n# simple sandboxing scheme:\n#\n# - use resource.setrlimit to deprive this process of ANY file descriptors\n#   (which will cause file read/write and subprocess shell launches to fail)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "documentation": {}
  },
  {
    "label": "MAX_EXECUTED_LINES",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "peekOfCode": "MAX_EXECUTED_LINES = 1000 # on 2016-05-01, I increased the limit from 300 to 1000 for Python due to popular user demand! and I also improved the warning message\n#DEBUG = False\nDEBUG = True\nBREAKPOINT_STR = '#break'\nCLASS_RE = re.compile('class\\s+')\n# simple sandboxing scheme:\n#\n# - use resource.setrlimit to deprive this process of ANY file descriptors\n#   (which will cause file read/write and subprocess shell launches to fail)\n# - restrict user builtins and module imports",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "documentation": {}
  },
  {
    "label": "#DEBUG",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "peekOfCode": "#DEBUG = False\nDEBUG = True\nBREAKPOINT_STR = '#break'\nCLASS_RE = re.compile('class\\s+')\n# simple sandboxing scheme:\n#\n# - use resource.setrlimit to deprive this process of ANY file descriptors\n#   (which will cause file read/write and subprocess shell launches to fail)\n# - restrict user builtins and module imports\n#   (beware that this is NOT foolproof at all ... there are known flaws!)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "documentation": {}
  },
  {
    "label": "DEBUG",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "peekOfCode": "DEBUG = True\nBREAKPOINT_STR = '#break'\nCLASS_RE = re.compile('class\\s+')\n# simple sandboxing scheme:\n#\n# - use resource.setrlimit to deprive this process of ANY file descriptors\n#   (which will cause file read/write and subprocess shell launches to fail)\n# - restrict user builtins and module imports\n#   (beware that this is NOT foolproof at all ... there are known flaws!)\n#",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "documentation": {}
  },
  {
    "label": "BREAKPOINT_STR",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "peekOfCode": "BREAKPOINT_STR = '#break'\nCLASS_RE = re.compile('class\\s+')\n# simple sandboxing scheme:\n#\n# - use resource.setrlimit to deprive this process of ANY file descriptors\n#   (which will cause file read/write and subprocess shell launches to fail)\n# - restrict user builtins and module imports\n#   (beware that this is NOT foolproof at all ... there are known flaws!)\n#\n# ALWAYS use defense-in-depth and don't just rely on these simple mechanisms",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "documentation": {}
  },
  {
    "label": "CLASS_RE",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "peekOfCode": "CLASS_RE = re.compile('class\\s+')\n# simple sandboxing scheme:\n#\n# - use resource.setrlimit to deprive this process of ANY file descriptors\n#   (which will cause file read/write and subprocess shell launches to fail)\n# - restrict user builtins and module imports\n#   (beware that this is NOT foolproof at all ... there are known flaws!)\n#\n# ALWAYS use defense-in-depth and don't just rely on these simple mechanisms\ntry:",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "documentation": {}
  },
  {
    "label": "__html__",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "peekOfCode": "__html__ = None\ndef setHTML(htmlStr):\n  global __html__\n  __html__ = htmlStr\n__css__ = None\ndef setCSS(cssStr):\n  global __css__\n  __css__ = cssStr\n__js__ = None\ndef setJS(jsStr):",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "documentation": {}
  },
  {
    "label": "__css__",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "peekOfCode": "__css__ = None\ndef setCSS(cssStr):\n  global __css__\n  __css__ = cssStr\n__js__ = None\ndef setJS(jsStr):\n  global __js__\n  __js__ = jsStr\n# ugh, I can't figure out why in Python 2, __builtins__ seems to\n# be a dict, but in Python 3, __builtins__ seems to be a module,",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "documentation": {}
  },
  {
    "label": "__js__",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "peekOfCode": "__js__ = None\ndef setJS(jsStr):\n  global __js__\n  __js__ = jsStr\n# ugh, I can't figure out why in Python 2, __builtins__ seems to\n# be a dict, but in Python 3, __builtins__ seems to be a module,\n# so just handle both cases ... UGLY!\nif type(__builtins__) is dict:\n  BUILTIN_IMPORT = __builtins__['__import__']\nelse:",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "documentation": {}
  },
  {
    "label": "ALLOWED_STDLIB_MODULE_IMPORTS",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "peekOfCode": "ALLOWED_STDLIB_MODULE_IMPORTS = ('math', 'random', 'time', 'datetime',\n                          'functools', 'itertools', 'operator', 'string',\n                          'collections', 're', 'json',\n                          'heapq', 'bisect', 'copy', 'hashlib')\n# allow users to import but don't explicitly import it since it's\n# already been done above\nOTHER_STDLIB_WHITELIST = ('StringIO', 'io')\n# whitelist of custom modules to import into OPT\n# (TODO: support modules in a subdirectory, but there are various\n# logistical problems with doing so that I can't overcome at the moment,",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "documentation": {}
  },
  {
    "label": "OTHER_STDLIB_WHITELIST",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "peekOfCode": "OTHER_STDLIB_WHITELIST = ('StringIO', 'io')\n# whitelist of custom modules to import into OPT\n# (TODO: support modules in a subdirectory, but there are various\n# logistical problems with doing so that I can't overcome at the moment,\n# especially getting setHTML, setCSS, and setJS to work in the imported\n# modules.)\nCUSTOM_MODULE_IMPORTS = ('callback_module',\n                         'ttt_module',\n                         'html_module',\n                         'htmlexample_module',",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "documentation": {}
  },
  {
    "label": "CUSTOM_MODULE_IMPORTS",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "peekOfCode": "CUSTOM_MODULE_IMPORTS = ('callback_module',\n                         'ttt_module',\n                         'html_module',\n                         'htmlexample_module',\n# ignore these troublesome imports for now\n#                         'watch_module',   # 'import sys' might be troublesome\n#                         'bintree_module',\n#                         'GChartWrapper',\n                         'matrix',\n                         'htmlFrame')",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "documentation": {}
  },
  {
    "label": "input_string_queue",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "peekOfCode": "input_string_queue = []\ndef open_wrapper(*args):\n  if is_python3:\n      raise Exception('''open() is not supported by Python Tutor.\nInstead use io.StringIO() to simulate a file.\nHere is an example: http://goo.gl/uNvBGl''')\n  else:\n      raise Exception('''open() is not supported by Python Tutor.\nInstead use StringIO.StringIO() to simulate a file.\nHere is an example: http://goo.gl/Q9xQ4p''')",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "documentation": {}
  },
  {
    "label": "BANNED_BUILTINS",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "peekOfCode": "BANNED_BUILTINS = ['reload', 'open', 'compile',\n                   'file', 'eval', 'exec', 'execfile',\n                   'exit', 'quit', 'help',\n                   'dir', 'globals', 'locals', 'vars']\n# Peter says 'apply' isn't dangerous, so don't ban it\nIGNORE_VARS = set(('__user_stdout__', '__OPT_toplevel__', '__builtins__', '__name__', '__exception__', '__doc__', '__package__'))\ndef get_user_stdout(frame):\n  my_user_stdout = frame.f_globals['__user_stdout__']\n  # This is SUPER KRAZY! In Python 2, the buflist inside of a StringIO\n  # instance can be made up of both str and unicode, so we need to convert",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "documentation": {}
  },
  {
    "label": "IGNORE_VARS",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "peekOfCode": "IGNORE_VARS = set(('__user_stdout__', '__OPT_toplevel__', '__builtins__', '__name__', '__exception__', '__doc__', '__package__'))\ndef get_user_stdout(frame):\n  my_user_stdout = frame.f_globals['__user_stdout__']\n  # This is SUPER KRAZY! In Python 2, the buflist inside of a StringIO\n  # instance can be made up of both str and unicode, so we need to convert\n  # the str to unicode and replace invalid characters with the Unicode '?'\n  # But leave unicode elements alone. This way, EVERYTHING inside buflist\n  # will be unicode. (Note that in Python 3, everything is already unicode,\n  # so we're fine.)\n  if not is_python3:",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pg_logger",
    "documentation": {}
  },
  {
    "label": "TutorPage",
    "kind": 6,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pythontutor",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pythontutor",
    "peekOfCode": "class TutorPage(webapp2.RequestHandler):\n  def get(self):\n    self.response.headers['Content-Type'] = 'text/html'\n    template = JINJA_ENVIRONMENT.get_template('visualize.html')\n    self.response.out.write(template.render())\nclass IframeEmbedPage(webapp2.RequestHandler):\n  def get(self):\n    self.response.headers['Content-Type'] = 'text/html'\n    template = JINJA_ENVIRONMENT.get_template('iframe-embed.html')\n    self.response.out.write(template.render())",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pythontutor",
    "documentation": {}
  },
  {
    "label": "IframeEmbedPage",
    "kind": 6,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pythontutor",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pythontutor",
    "peekOfCode": "class IframeEmbedPage(webapp2.RequestHandler):\n  def get(self):\n    self.response.headers['Content-Type'] = 'text/html'\n    template = JINJA_ENVIRONMENT.get_template('iframe-embed.html')\n    self.response.out.write(template.render())\nclass LessonPage(webapp2.RequestHandler):\n  def get(self):\n    self.response.headers['Content-Type'] = 'text/html'\n    template = JINJA_ENVIRONMENT.get_template('lesson.html')\n    self.response.out.write(template.render())",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pythontutor",
    "documentation": {}
  },
  {
    "label": "LessonPage",
    "kind": 6,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pythontutor",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pythontutor",
    "peekOfCode": "class LessonPage(webapp2.RequestHandler):\n  def get(self):\n    self.response.headers['Content-Type'] = 'text/html'\n    template = JINJA_ENVIRONMENT.get_template('lesson.html')\n    self.response.out.write(template.render())\nclass ExecScript(webapp2.RequestHandler):\n  def json_finalizer(self, input_code, output_trace):\n    ret = dict(code=input_code, trace=output_trace)\n    json_output = json.dumps(ret, indent=None) # use indent=None for most compact repr\n    self.response.out.write(json_output)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pythontutor",
    "documentation": {}
  },
  {
    "label": "ExecScript",
    "kind": 6,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pythontutor",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pythontutor",
    "peekOfCode": "class ExecScript(webapp2.RequestHandler):\n  def json_finalizer(self, input_code, output_trace):\n    ret = dict(code=input_code, trace=output_trace)\n    json_output = json.dumps(ret, indent=None) # use indent=None for most compact repr\n    self.response.out.write(json_output)\n  def get(self):\n    self.response.headers['Content-Type'] = 'application/json'\n    self.response.headers['Cache-Control'] = 'no-cache'\n    pg_logger.exec_script_str(self.request.get('user_script'),\n                              self.request.get('raw_input_json'),",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pythontutor",
    "documentation": {}
  },
  {
    "label": "TEST_STR",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pythontutor",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pythontutor",
    "peekOfCode": "TEST_STR = \"import os\\nos.chdir('/')\"\nJINJA_ENVIRONMENT = jinja2.Environment(loader=jinja2.FileSystemLoader(os.path.dirname(__file__)))\nclass TutorPage(webapp2.RequestHandler):\n  def get(self):\n    self.response.headers['Content-Type'] = 'text/html'\n    template = JINJA_ENVIRONMENT.get_template('visualize.html')\n    self.response.out.write(template.render())\nclass IframeEmbedPage(webapp2.RequestHandler):\n  def get(self):\n    self.response.headers['Content-Type'] = 'text/html'",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pythontutor",
    "documentation": {}
  },
  {
    "label": "JINJA_ENVIRONMENT",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pythontutor",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pythontutor",
    "peekOfCode": "JINJA_ENVIRONMENT = jinja2.Environment(loader=jinja2.FileSystemLoader(os.path.dirname(__file__)))\nclass TutorPage(webapp2.RequestHandler):\n  def get(self):\n    self.response.headers['Content-Type'] = 'text/html'\n    template = JINJA_ENVIRONMENT.get_template('visualize.html')\n    self.response.out.write(template.render())\nclass IframeEmbedPage(webapp2.RequestHandler):\n  def get(self):\n    self.response.headers['Content-Type'] = 'text/html'\n    template = JINJA_ENVIRONMENT.get_template('iframe-embed.html')",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pythontutor",
    "documentation": {}
  },
  {
    "label": "app",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pythontutor",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pythontutor",
    "peekOfCode": "app = webapp2.WSGIApplication([('/', TutorPage),\n                               ('/iframe-embed.html', IframeEmbedPage),\n                               ('/lesson.html', LessonPage),\n                               ('/exec', ExecScript)],\n                              debug=True)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.pythontutor",
    "documentation": {}
  },
  {
    "label": "selection_sort",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.selection_sort_watch",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.selection_sort_watch",
    "peekOfCode": "def selection_sort(A):\n    for i in range(len(A)): #break\n        mini = min(A[i:])\n        min_index = A[i:].index(mini) + i   \n        if i != min_index:\n            A[min_index], A[i] = A[i], A[min_index]\n    return A\nprint(selection_sort([3, 5, 2, 1, 8, 5, 9]))",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.selection_sort_watch",
    "documentation": {}
  },
  {
    "label": "SandboxExecutor",
    "kind": 6,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.simple_sandbox",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.simple_sandbox",
    "peekOfCode": "class SandboxExecutor(bdb.Bdb):\n    def __init__(self, finalizer_func):\n        bdb.Bdb.__init__(self)\n        self.ORIGINAL_STDOUT = sys.stdout\n        self.ORIGINAL_STDERR = sys.stderr\n        self.executed_script = None # Python script to be executed!\n        # a function that takes the output trace as a parameter and\n        # processes it\n        self.finalizer_func = finalizer_func\n    def _runscript(self, script_str):",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.simple_sandbox",
    "documentation": {}
  },
  {
    "label": "print_finalizer",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.simple_sandbox",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.simple_sandbox",
    "peekOfCode": "def print_finalizer(executor):\n    #print 'DONE:'\n    #print executor.executed_script\n    print('stdout:')\n    print(executor.user_stdout.getvalue())\n    print('stderr:')\n    print(executor.user_stderr.getvalue())\n# the MAIN meaty function!!!\ndef exec_str(script_str, finalizer):\n  logger = SandboxExecutor(finalizer)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.simple_sandbox",
    "documentation": {}
  },
  {
    "label": "exec_str",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.simple_sandbox",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.simple_sandbox",
    "peekOfCode": "def exec_str(script_str, finalizer):\n  logger = SandboxExecutor(finalizer)\n  try:\n    logger._runscript(script_str)\n  except bdb.BdbQuit:\n    pass\n  finally:\n    return logger.finalize()\nif __name__ == \"__main__\":\n   script = open(sys.argv[1]).read()",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.simple_sandbox",
    "documentation": {}
  },
  {
    "label": "is_python3",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.simple_sandbox",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.simple_sandbox",
    "peekOfCode": "is_python3 = (sys.version_info[0] == 3)\nif is_python3:\n  import io as cStringIO\nelse:\n  import cStringIO\n#DEBUG = False\nDEBUG = True\n# simple sandboxing scheme:\n#\n# - use resource.setrlimit to deprive this process of ANY file descriptors",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.simple_sandbox",
    "documentation": {}
  },
  {
    "label": "#DEBUG",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.simple_sandbox",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.simple_sandbox",
    "peekOfCode": "#DEBUG = False\nDEBUG = True\n# simple sandboxing scheme:\n#\n# - use resource.setrlimit to deprive this process of ANY file descriptors\n#   (which will cause file read/write and subprocess shell launches to fail)\n# - restrict user builtins and module imports\n#   (beware that this is NOT foolproof at all ... there are known flaws!)\n#\n# ALWAYS use defense-in-depth and don't just rely on these simple mechanisms",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.simple_sandbox",
    "documentation": {}
  },
  {
    "label": "DEBUG",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.simple_sandbox",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.simple_sandbox",
    "peekOfCode": "DEBUG = True\n# simple sandboxing scheme:\n#\n# - use resource.setrlimit to deprive this process of ANY file descriptors\n#   (which will cause file read/write and subprocess shell launches to fail)\n# - restrict user builtins and module imports\n#   (beware that this is NOT foolproof at all ... there are known flaws!)\n#\n# ALWAYS use defense-in-depth and don't just rely on these simple mechanisms\nimport resource",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.simple_sandbox",
    "documentation": {}
  },
  {
    "label": "ALLOWED_MODULE_IMPORTS",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.simple_sandbox",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.simple_sandbox",
    "peekOfCode": "ALLOWED_MODULE_IMPORTS = ('doctest',)\n# PREEMPTIVELY import all of these modules, so that when the user's\n# script imports them, it won't try to do a file read (since they've\n# already been imported and cached in memory). Remember that when\n# the user's code runs, resource.setrlimit(resource.RLIMIT_NOFILE, (0, 0))\n# will already be in effect, so no more files can be opened.\n#\n# NB: All modules in CUSTOM_MODULE_IMPORTS will be imported, warts and\n# all, so they better work on Python 2 and 3!\nfor m in ALLOWED_MODULE_IMPORTS:",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.simple_sandbox",
    "documentation": {}
  },
  {
    "label": "Game",
    "kind": 6,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.ttt_module",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.ttt_module",
    "peekOfCode": "class Game(object):\n    \"Move stuff here later\"\n    pass\nclass TTTGame(Game):\n    def __init__(self, player1, player2, verbose=True):\n        print('Initializing TTTGame')\n        self.board = [' '] * 9 # board is 1-D array of squares; can be mapped to 2-D.\n        self.tomove = 0\n        self.symbols = ['X', 'O']\n        self.players = [player1, player2] # player strategy functions",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.ttt_module",
    "documentation": {}
  },
  {
    "label": "TTTGame",
    "kind": 6,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.ttt_module",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.ttt_module",
    "peekOfCode": "class TTTGame(Game):\n    def __init__(self, player1, player2, verbose=True):\n        print('Initializing TTTGame')\n        self.board = [' '] * 9 # board is 1-D array of squares; can be mapped to 2-D.\n        self.tomove = 0\n        self.symbols = ['X', 'O']\n        self.players = [player1, player2] # player strategy functions\n        self.lines = [(0, 1, 2), (3, 4, 5), (6, 7, 8),\n                      (0, 3, 6), (1, 4, 7), (2, 5, 8),\n                      (0, 4, 8), (2, 4, 6)]",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.ttt_module",
    "documentation": {}
  },
  {
    "label": "tagger",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.ttt_module",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.ttt_module",
    "peekOfCode": "def tagger(tagname):\n    \"Make a function that can be used to generate HTML.\"\n    def tagfn(*content, **kwargs):\n        args = ('' if not kwargs else\n                ' ' + ' '.join('{}={!r}'.format(k, kwargs[k]) for k in kwargs))\n        return \"<{}{}>{}</{}>\".format(\n               tagname, args, join(content), tagname)\n    #tagfn.__name__ = tagname # not allowed in OPT sandbox\n    return tagfn\nA, B, I, P, TABLE, TR, TD, TH = map(tagger, 'A B I P, TABLE TR TD TH'.split())",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.ttt_module",
    "documentation": {}
  },
  {
    "label": "join",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.ttt_module",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.ttt_module",
    "peekOfCode": "def join(content):\n    \"Like ' '.join(content), but recurses into nested lists.\"\n    return (content if isinstance(content, str) else\n            ' '.join(map(join, content)) if isinstance(content, (list, tuple)) else\n        str(content))\n# Python 3 doesn't have xrange, so bind it to range\ntry:\n  _ = xrange\nexcept NameError:\n  xrange = range",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.ttt_module",
    "documentation": {}
  },
  {
    "label": "table",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.ttt_module",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.ttt_module",
    "peekOfCode": "def table(matrix, **kwargs):\n    \"\"\"Given [[a, b, c], [d, e, f]], lay it out as a table.\n    Each cell gets an id number, starting at 0.  Table can have kwargs.\"\"\"\n    ints = iter(xrange(1000000))\n    return TABLE([TR([TD(c, id=next(ints)) for c in row])\n                  for row in matrix],\n                 **kwargs)\ncss = \"\"\"#htmlOutputDiv table, #htmlOutputDiv td, #htmlOutputDiv th {\n  background-color: white;\n  border-collapse: collapse;",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.ttt_module",
    "documentation": {}
  },
  {
    "label": "other",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.ttt_module",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.ttt_module",
    "peekOfCode": "def other(player): return 1 - player",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.ttt_module",
    "documentation": {}
  },
  {
    "label": "css",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.ttt_module",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.ttt_module",
    "peekOfCode": "css = \"\"\"#htmlOutputDiv table, #htmlOutputDiv td, #htmlOutputDiv th {\n  background-color: white;\n  border-collapse: collapse;\n  border: 2px solid black; }\n#htmlOutputDiv td, #htmlOutputDiv th {\n  width: 30px;\n  height: 30px;\n  font-family: sans-serif;\n  text-align: center; }\"\"\"\nclass Game(object):",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.ttt_module",
    "documentation": {}
  },
  {
    "label": "watchedlist",
    "kind": 6,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.watch_module",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.watch_module",
    "peekOfCode": "class watchedlist(list):\n    \"\"\"A class that wraps a list, and monitors sets and gets.  \n    Optionally monitors local variables.\"\"\"\n    def __setitem__(self, i, val):\n        print('setting A[{}] = {}'.format(i, val))\n        self.watchlocals()\n        return list.__setitem__(self, i, val)\n    def __getitem__(self, i):\n        print('fetching A[{}]; value is {};'.format(\n          self, i, list.__getitem__(self, i)))",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.watch_module",
    "documentation": {}
  },
  {
    "label": "watchfn",
    "kind": 6,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.watch_module",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.watch_module",
    "peekOfCode": "class watchfn(object):\n    \"\"\"Decorator that watches the arguments of a function.\n    Specify watchedspecs for each positional argument, and optionally \n    for keyword arguments.\"\"\"\n    def __init__(self, *args, **kwargs):\n        self.args, self.kwargs = args, kwargs\n    def __call__(self, fn):\n        def wrapped_fn(*args, **kwargs):\n            args = [watch(obj, spec) for (obj, spec) in zip(args, self.args)]\n            kwargs = {k: watch(kwargs[k], self.args.get(k, None)) for k in kwargs}",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.watch_module",
    "documentation": {}
  },
  {
    "label": "watch",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.watch_module",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.watch_module",
    "peekOfCode": "def watch(object, watchedspec):\n    \"\"\"Wrap object with a wrapper class (like watchedlist).\n    watchedspec is either None or a callable (like watchedlist), or\n    a 2-tuple of (callable, local_var_names), where local_var_names\n    can be a string or a sequence of strings.\"\"\"\n    if not watchedspec:\n        return object\n    kind, locals = (watchedspec if isinstance(watchedspec, (tuple, list)) else\n                    (watchedspec, ()))\n    if isinstance(locals, str): locals = locals.split()",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.watch_module",
    "documentation": {}
  },
  {
    "label": "cgi_finalizer",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.web_exec",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.web_exec",
    "peekOfCode": "def cgi_finalizer(input_code, output_trace):\n  \"\"\"Write JSON output for js/pytutor.js as a CGI result.\"\"\"\n  ret = dict(code=input_code, trace=output_trace)\n  json_output = json.dumps(ret, indent=None) # use indent=None for most compact repr\n  if LOG_QUERIES:\n    # just to be paranoid, don't croak the whole program just\n    # because there's some error in logging it to the database\n    try:\n      # log queries into sqlite database.\n      # make sure that your web server's account has write permissions",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.web_exec",
    "documentation": {}
  },
  {
    "label": "LOG_QUERIES",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.web_exec",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.web_exec",
    "peekOfCode": "LOG_QUERIES = False\nif LOG_QUERIES:\n  import os, datetime, create_log_db, sqlite3\ndef cgi_finalizer(input_code, output_trace):\n  \"\"\"Write JSON output for js/pytutor.js as a CGI result.\"\"\"\n  ret = dict(code=input_code, trace=output_trace)\n  json_output = json.dumps(ret, indent=None) # use indent=None for most compact repr\n  if LOG_QUERIES:\n    # just to be paranoid, don't croak the whole program just\n    # because there's some error in logging it to the database",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.web_exec",
    "documentation": {}
  },
  {
    "label": "raw_input_json",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.web_exec",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.web_exec",
    "peekOfCode": "raw_input_json = None\noptions_json = None\n# If you pass in a filename as an argument, then process script from that file ...\nif len(sys.argv) > 1:\n  user_script = open(sys.argv[1]).read()\n# Otherwise act like a CGI script with parameters:\n#   user_script\n#   raw_input_json\n#   options_json\nelse:",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.web_exec",
    "documentation": {}
  },
  {
    "label": "options_json",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.web_exec",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.web_exec",
    "peekOfCode": "options_json = None\n# If you pass in a filename as an argument, then process script from that file ...\nif len(sys.argv) > 1:\n  user_script = open(sys.argv[1]).read()\n# Otherwise act like a CGI script with parameters:\n#   user_script\n#   raw_input_json\n#   options_json\nelse:\n  form = cgi.FieldStorage()",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v3.web_exec",
    "documentation": {}
  },
  {
    "label": "filter_output",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.tests.golden_test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.tests.golden_test",
    "peekOfCode": "def filter_output(lines):\n  # substitute memory addresses with 0xADDR to prevent spurious diffs\n  x = [memaddr_RE.sub('0xADDR', s) for s in lines]\n  x = [objid_RE.sub('\"ID\":', s) for s in x]\n  # hack: string it all together into one giant string before doing a\n  # multi-line comparison\n  fullstr = ''.join(x) # don't need an extra newline since all lines are already separated by newline chars\n  fullstr = objrefid_RE.sub('\"REF\", ID', fullstr)\n  return fullstr\ndef execute(input_filename):",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.tests.golden_test",
    "documentation": {}
  },
  {
    "label": "execute",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.tests.golden_test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.tests.golden_test",
    "peekOfCode": "def execute(input_filename):\n  assert os.path.isfile(input_filename)\n  (base, ext) = os.path.splitext(input_filename)\n  assert ext in INPUT_FILE_EXTENSIONS\n  (stdout, stderr) = Popen(PROGRAM + [input_filename], stdout=PIPE, stderr=PIPE).communicate()\n  if stderr:\n    print '(has stderr)'\n  #  print '  stderr {'\n  #  print stderr, '}'\n  else:",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.tests.golden_test",
    "documentation": {}
  },
  {
    "label": "clobber_golden_file",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.tests.golden_test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.tests.golden_test",
    "peekOfCode": "def clobber_golden_file(golden_file):\n  (base, ext) = os.path.splitext(golden_file)\n  outfile = base + OUTPUT_FILE_EXTENSION\n  assert os.path.isfile(outfile)\n  print '  Clobber %s => %s' % (outfile, golden_file)\n  shutil.copy(outfile, golden_file)\n# returns True if there is a diff, False otherwise\ndef golden_differs_from_out(golden_file):\n  (base, ext) = os.path.splitext(golden_file)\n  outfile = base + OUTPUT_FILE_EXTENSION",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.tests.golden_test",
    "documentation": {}
  },
  {
    "label": "golden_differs_from_out",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.tests.golden_test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.tests.golden_test",
    "peekOfCode": "def golden_differs_from_out(golden_file):\n  (base, ext) = os.path.splitext(golden_file)\n  outfile = base + OUTPUT_FILE_EXTENSION\n  assert os.path.isfile(outfile)\n  assert os.path.isfile(golden_file)\n  golden_s = open(golden_file).readlines()\n  out_s = open(outfile).readlines()\n  golden_s_filtered = filter_output(golden_s)\n  out_s_filtered = filter_output(out_s)\n  return out_s_filtered != golden_s_filtered",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.tests.golden_test",
    "documentation": {}
  },
  {
    "label": "diff_test_output",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.tests.golden_test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.tests.golden_test",
    "peekOfCode": "def diff_test_output(test_name):\n  (base, ext) = os.path.splitext(test_name)\n  golden_file = base + GOLDEN_FILE_EXTENSION\n  assert os.path.isfile(golden_file)\n  outfile = base + OUTPUT_FILE_EXTENSION\n  assert os.path.isfile(outfile)\n  golden_s = open(golden_file).readlines()\n  out_s = open(outfile).readlines()\n  golden_s_filtered = filter_output(golden_s)\n  out_s_filtered = filter_output(out_s)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.tests.golden_test",
    "documentation": {}
  },
  {
    "label": "run_test",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.tests.golden_test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.tests.golden_test",
    "peekOfCode": "def run_test(input_filename, clobber_golden=False):\n  print 'Testing', input_filename,\n  sys.stdout.flush()\n  (base, ext) = os.path.splitext(input_filename)\n  assert ext in INPUT_FILE_EXTENSIONS\n  # to eliminate possibility of using stale output:\n  outfile = base + OUTPUT_FILE_EXTENSION\n  if os.path.isfile(outfile):\n    os.remove(outfile)\n  input_fullpath = input_filename",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.tests.golden_test",
    "documentation": {}
  },
  {
    "label": "run_all_tests",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.tests.golden_test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.tests.golden_test",
    "peekOfCode": "def run_all_tests(clobber=False):\n  for t in ALL_TESTS:\n    run_test(t, clobber)\ndef diff_all_test_outputs():\n  for t in ALL_TESTS:\n    diff_test_output(t)\nif __name__ == \"__main__\":\n  parser = optparse.OptionParser()\n  parser.add_option(\"--all\", action=\"store_true\", dest=\"run_all\",\n                    help=\"Run all tests\")",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.tests.golden_test",
    "documentation": {}
  },
  {
    "label": "diff_all_test_outputs",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.tests.golden_test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.tests.golden_test",
    "peekOfCode": "def diff_all_test_outputs():\n  for t in ALL_TESTS:\n    diff_test_output(t)\nif __name__ == \"__main__\":\n  parser = optparse.OptionParser()\n  parser.add_option(\"--all\", action=\"store_true\", dest=\"run_all\",\n                    help=\"Run all tests\")\n  parser.add_option(\"--only-clobber\", action=\"store_true\", dest=\"only_clobber\",\n                    help=\"Clobber ALL golden files WITHOUT re-running tests\")\n  parser.add_option(\"--clobber\", action=\"store_true\", dest=\"clobber\",",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.tests.golden_test",
    "documentation": {}
  },
  {
    "label": "TESTDIRS",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.tests.golden_test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.tests.golden_test",
    "peekOfCode": "TESTDIRS = ['.']\nINPUT_FILE_EXTENSIONS = ['.c', '.cpp']\n# program to run, with input file as an extra argument\nPROGRAM = ['python', 'run_test_from_scratch.py']\n# this program should output to stdout, which will be redirected to this\n# extension:\nOUTPUT_FILE_EXTENSION = '.out'\n# extension for golden files:\nGOLDEN_FILE_EXTENSION = '.golden'\nimport itertools",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.tests.golden_test",
    "documentation": {}
  },
  {
    "label": "INPUT_FILE_EXTENSIONS",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.tests.golden_test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.tests.golden_test",
    "peekOfCode": "INPUT_FILE_EXTENSIONS = ['.c', '.cpp']\n# program to run, with input file as an extra argument\nPROGRAM = ['python', 'run_test_from_scratch.py']\n# this program should output to stdout, which will be redirected to this\n# extension:\nOUTPUT_FILE_EXTENSION = '.out'\n# extension for golden files:\nGOLDEN_FILE_EXTENSION = '.golden'\nimport itertools\nimport os, re, shutil, sys, optparse, difflib",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.tests.golden_test",
    "documentation": {}
  },
  {
    "label": "PROGRAM",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.tests.golden_test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.tests.golden_test",
    "peekOfCode": "PROGRAM = ['python', 'run_test_from_scratch.py']\n# this program should output to stdout, which will be redirected to this\n# extension:\nOUTPUT_FILE_EXTENSION = '.out'\n# extension for golden files:\nGOLDEN_FILE_EXTENSION = '.golden'\nimport itertools\nimport os, re, shutil, sys, optparse, difflib\nfrom subprocess import *\nRED   = '\\033[91m'",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.tests.golden_test",
    "documentation": {}
  },
  {
    "label": "OUTPUT_FILE_EXTENSION",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.tests.golden_test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.tests.golden_test",
    "peekOfCode": "OUTPUT_FILE_EXTENSION = '.out'\n# extension for golden files:\nGOLDEN_FILE_EXTENSION = '.golden'\nimport itertools\nimport os, re, shutil, sys, optparse, difflib\nfrom subprocess import *\nRED   = '\\033[91m'\nENDC  = '\\033[0m'  # end color\nimport re\nmemaddr_RE = re.compile('0x[0-9A-Fa-f]+')",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.tests.golden_test",
    "documentation": {}
  },
  {
    "label": "GOLDEN_FILE_EXTENSION",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.tests.golden_test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.tests.golden_test",
    "peekOfCode": "GOLDEN_FILE_EXTENSION = '.golden'\nimport itertools\nimport os, re, shutil, sys, optparse, difflib\nfrom subprocess import *\nRED   = '\\033[91m'\nENDC  = '\\033[0m'  # end color\nimport re\nmemaddr_RE = re.compile('0x[0-9A-Fa-f]+')\n# canonicalize all object IDs, such as \"206\":\n# since they sometimes vary across executions due to different memory",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.tests.golden_test",
    "documentation": {}
  },
  {
    "label": "memaddr_RE",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.tests.golden_test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.tests.golden_test",
    "peekOfCode": "memaddr_RE = re.compile('0x[0-9A-Fa-f]+')\n# canonicalize all object IDs, such as \"206\":\n# since they sometimes vary across executions due to different memory\n# layout and such\nobjid_RE = re.compile('\"\\d+\":')\n# also canonicalize the corresponding reference IDs, such as \"REF\",\\n386\n# (but note that this must be run on all lines together, not just\n# individual lines, since it spans two lines)\nobjrefid_RE = re.compile('\"REF\",\\s+\\d+')\ndef filter_output(lines):",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.tests.golden_test",
    "documentation": {}
  },
  {
    "label": "objid_RE",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.tests.golden_test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.tests.golden_test",
    "peekOfCode": "objid_RE = re.compile('\"\\d+\":')\n# also canonicalize the corresponding reference IDs, such as \"REF\",\\n386\n# (but note that this must be run on all lines together, not just\n# individual lines, since it spans two lines)\nobjrefid_RE = re.compile('\"REF\",\\s+\\d+')\ndef filter_output(lines):\n  # substitute memory addresses with 0xADDR to prevent spurious diffs\n  x = [memaddr_RE.sub('0xADDR', s) for s in lines]\n  x = [objid_RE.sub('\"ID\":', s) for s in x]\n  # hack: string it all together into one giant string before doing a",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.tests.golden_test",
    "documentation": {}
  },
  {
    "label": "objrefid_RE",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.tests.golden_test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.tests.golden_test",
    "peekOfCode": "objrefid_RE = re.compile('\"REF\",\\s+\\d+')\ndef filter_output(lines):\n  # substitute memory addresses with 0xADDR to prevent spurious diffs\n  x = [memaddr_RE.sub('0xADDR', s) for s in lines]\n  x = [objid_RE.sub('\"ID\":', s) for s in x]\n  # hack: string it all together into one giant string before doing a\n  # multi-line comparison\n  fullstr = ''.join(x) # don't need an extra newline since all lines are already separated by newline chars\n  fullstr = objrefid_RE.sub('\"REF\", ID', fullstr)\n  return fullstr",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.tests.golden_test",
    "documentation": {}
  },
  {
    "label": "bn",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.tests.run_test_from_scratch",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.tests.run_test_from_scratch",
    "peekOfCode": "bn = os.path.splitext(sys.argv[1])[0]\ntrace_f = bn + '.trace'\nif os.path.exists(trace_f):\n    os.remove(trace_f)\nsubprocess.call([\"make\", trace_f]) # synchronous\nassert os.path.exists(trace_f)\n# print out trace_f to stdout\nfor line in open(trace_f):\n    print line,\n#os.remove(trace_f) # clean up",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.tests.run_test_from_scratch",
    "documentation": {}
  },
  {
    "label": "trace_f",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.tests.run_test_from_scratch",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.tests.run_test_from_scratch",
    "peekOfCode": "trace_f = bn + '.trace'\nif os.path.exists(trace_f):\n    os.remove(trace_f)\nsubprocess.call([\"make\", trace_f]) # synchronous\nassert os.path.exists(trace_f)\n# print out trace_f to stdout\nfor line in open(trace_f):\n    print line,\n#os.remove(trace_f) # clean up",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.tests.run_test_from_scratch",
    "documentation": {}
  },
  {
    "label": "VALGRIND_MSG_RE",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.run_cpp_backend",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.run_cpp_backend",
    "peekOfCode": "VALGRIND_MSG_RE = re.compile('==\\d+== (.*)$')\nend_of_trace_error_msg = None\nDN = os.path.dirname(sys.argv[0])\nif not DN:\n    DN = '.' # so that we always have an executable path like ./usercode.exe\nUSER_PROGRAM = sys.argv[1] # string containing the program to be run\nLANG = sys.argv[2] # 'c' for C or 'cpp' for C++\nprettydump = False\nif len(sys.argv) > 3:\n    if sys.argv[3] == '--prettydump':",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.run_cpp_backend",
    "documentation": {}
  },
  {
    "label": "end_of_trace_error_msg",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.run_cpp_backend",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.run_cpp_backend",
    "peekOfCode": "end_of_trace_error_msg = None\nDN = os.path.dirname(sys.argv[0])\nif not DN:\n    DN = '.' # so that we always have an executable path like ./usercode.exe\nUSER_PROGRAM = sys.argv[1] # string containing the program to be run\nLANG = sys.argv[2] # 'c' for C or 'cpp' for C++\nprettydump = False\nif len(sys.argv) > 3:\n    if sys.argv[3] == '--prettydump':\n        prettydump = True",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.run_cpp_backend",
    "documentation": {}
  },
  {
    "label": "DN",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.run_cpp_backend",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.run_cpp_backend",
    "peekOfCode": "DN = os.path.dirname(sys.argv[0])\nif not DN:\n    DN = '.' # so that we always have an executable path like ./usercode.exe\nUSER_PROGRAM = sys.argv[1] # string containing the program to be run\nLANG = sys.argv[2] # 'c' for C or 'cpp' for C++\nprettydump = False\nif len(sys.argv) > 3:\n    if sys.argv[3] == '--prettydump':\n        prettydump = True\nif LANG == 'c':",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.run_cpp_backend",
    "documentation": {}
  },
  {
    "label": "USER_PROGRAM",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.run_cpp_backend",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.run_cpp_backend",
    "peekOfCode": "USER_PROGRAM = sys.argv[1] # string containing the program to be run\nLANG = sys.argv[2] # 'c' for C or 'cpp' for C++\nprettydump = False\nif len(sys.argv) > 3:\n    if sys.argv[3] == '--prettydump':\n        prettydump = True\nif LANG == 'c':\n    CC = 'gcc'\n    DIALECT = '-std=c11'\n    FN = 'usercode.c'",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.run_cpp_backend",
    "documentation": {}
  },
  {
    "label": "LANG",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.run_cpp_backend",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.run_cpp_backend",
    "peekOfCode": "LANG = sys.argv[2] # 'c' for C or 'cpp' for C++\nprettydump = False\nif len(sys.argv) > 3:\n    if sys.argv[3] == '--prettydump':\n        prettydump = True\nif LANG == 'c':\n    CC = 'gcc'\n    DIALECT = '-std=c11'\n    FN = 'usercode.c'\nelse:",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.run_cpp_backend",
    "documentation": {}
  },
  {
    "label": "prettydump",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.run_cpp_backend",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.run_cpp_backend",
    "peekOfCode": "prettydump = False\nif len(sys.argv) > 3:\n    if sys.argv[3] == '--prettydump':\n        prettydump = True\nif LANG == 'c':\n    CC = 'gcc'\n    DIALECT = '-std=c11'\n    FN = 'usercode.c'\nelse:\n    CC = 'g++'",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.run_cpp_backend",
    "documentation": {}
  },
  {
    "label": "F_PATH",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.run_cpp_backend",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.run_cpp_backend",
    "peekOfCode": "F_PATH = os.path.join(DN, FN)\nVGTRACE_PATH = os.path.join(DN, 'usercode.vgtrace')\nEXE_PATH = os.path.join(DN, 'usercode.exe')\n# get rid of stray files so that we don't accidentally use a stray one\nfor f in (F_PATH, VGTRACE_PATH, EXE_PATH):\n    if os.path.exists(f):\n        os.remove(f)\n# write USER_PROGRAM into F_PATH\nwith open(F_PATH, 'w') as f:\n    f.write(USER_PROGRAM)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.run_cpp_backend",
    "documentation": {}
  },
  {
    "label": "VGTRACE_PATH",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.run_cpp_backend",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.run_cpp_backend",
    "peekOfCode": "VGTRACE_PATH = os.path.join(DN, 'usercode.vgtrace')\nEXE_PATH = os.path.join(DN, 'usercode.exe')\n# get rid of stray files so that we don't accidentally use a stray one\nfor f in (F_PATH, VGTRACE_PATH, EXE_PATH):\n    if os.path.exists(f):\n        os.remove(f)\n# write USER_PROGRAM into F_PATH\nwith open(F_PATH, 'w') as f:\n    f.write(USER_PROGRAM)\n# compile it!",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.run_cpp_backend",
    "documentation": {}
  },
  {
    "label": "EXE_PATH",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.run_cpp_backend",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.run_cpp_backend",
    "peekOfCode": "EXE_PATH = os.path.join(DN, 'usercode.exe')\n# get rid of stray files so that we don't accidentally use a stray one\nfor f in (F_PATH, VGTRACE_PATH, EXE_PATH):\n    if os.path.exists(f):\n        os.remove(f)\n# write USER_PROGRAM into F_PATH\nwith open(F_PATH, 'w') as f:\n    f.write(USER_PROGRAM)\n# compile it!\np = Popen([CC, DIALECT, '-ggdb', '-O0', '-fno-omit-frame-pointer', '-o', EXE_PATH, F_PATH],",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.run_cpp_backend",
    "documentation": {}
  },
  {
    "label": "p",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.run_cpp_backend",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.run_cpp_backend",
    "peekOfCode": "p = Popen([CC, DIALECT, '-ggdb', '-O0', '-fno-omit-frame-pointer', '-o', EXE_PATH, F_PATH],\n          stdout=PIPE, stderr=PIPE)\n(gcc_stdout, gcc_stderr) = p.communicate()\ngcc_retcode = p.returncode\nif gcc_retcode == 0:\n    print >> sys.stderr, '=== gcc stderr ==='\n    print >> sys.stderr, gcc_stderr\n    print >> sys.stderr, '==='\n    # run it with Valgrind\n    VALGRIND_EXE = os.path.join(DN, 'valgrind-3.11.0/inst/bin/valgrind')",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.run_cpp_backend",
    "documentation": {}
  },
  {
    "label": "gcc_retcode",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.run_cpp_backend",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.run_cpp_backend",
    "peekOfCode": "gcc_retcode = p.returncode\nif gcc_retcode == 0:\n    print >> sys.stderr, '=== gcc stderr ==='\n    print >> sys.stderr, gcc_stderr\n    print >> sys.stderr, '==='\n    # run it with Valgrind\n    VALGRIND_EXE = os.path.join(DN, 'valgrind-3.11.0/inst/bin/valgrind')\n    # tricky! --source-filename takes a basename only, not a full pathname:\n    valgrind_p = Popen(['stdbuf', '-o0', # VERY IMPORTANT to disable stdout buffering so that stdout is traced properly\n                        VALGRIND_EXE,",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.run_cpp_backend",
    "documentation": {}
  },
  {
    "label": "process_record",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.vg_to_opt_trace",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.vg_to_opt_trace",
    "peekOfCode": "def process_record(lines):\n    if not lines:\n        return True # 'nil success case to keep the parser going\n    err_lines = []\n    stdout_lines = []\n    regular_lines = []\n    for e in lines:\n        if e.startswith('ERROR: '):\n            err_lines.append(e)\n        elif e.startswith('STDOUT: '):",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.vg_to_opt_trace",
    "documentation": {}
  },
  {
    "label": "process_json_obj",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.vg_to_opt_trace",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.vg_to_opt_trace",
    "peekOfCode": "def process_json_obj(obj, err_str, stdout_str):\n    #print '---'\n    #pp.pprint(obj)\n    #print\n    assert len(obj['stack']) > 0 # C programs always have a main at least!\n    obj['stack'].reverse() # make the stack grow down to follow convention\n    top_stack_entry = obj['stack'][-1]\n    # create an execution point object\n    ret = {}\n    heap = {}",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.vg_to_opt_trace",
    "documentation": {}
  },
  {
    "label": "encode_value",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.vg_to_opt_trace",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.vg_to_opt_trace",
    "peekOfCode": "def encode_value(obj, heap):\n    if obj['kind'] == 'base':\n        return ['C_DATA', obj['addr'], obj['type'], obj['val']]\n    elif obj['kind'] == 'pointer':\n        if 'deref_val' in obj:\n            encode_value(obj['deref_val'], heap) # update the heap\n        return ['C_DATA', obj['addr'], 'pointer', obj['val']]\n    elif obj['kind'] == 'struct':\n        ret = ['C_STRUCT', obj['addr'], obj['type']]\n        # sort struct members by address so that they look ORDERED",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.vg_to_opt_trace",
    "documentation": {}
  },
  {
    "label": "pp",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.vg_to_opt_trace",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.vg_to_opt_trace",
    "peekOfCode": "pp = pprint.PrettyPrinter(indent=2)\nRECORD_SEP = '=== pg_trace_inst ==='\nMAX_STEPS = 1000\nONLY_ONE_REC_PER_LINE = True\nall_execution_points = []\n# False if record isn't parsed properly or is an exception\ndef process_record(lines):\n    if not lines:\n        return True # 'nil success case to keep the parser going\n    err_lines = []",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.vg_to_opt_trace",
    "documentation": {}
  },
  {
    "label": "RECORD_SEP",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.vg_to_opt_trace",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.vg_to_opt_trace",
    "peekOfCode": "RECORD_SEP = '=== pg_trace_inst ==='\nMAX_STEPS = 1000\nONLY_ONE_REC_PER_LINE = True\nall_execution_points = []\n# False if record isn't parsed properly or is an exception\ndef process_record(lines):\n    if not lines:\n        return True # 'nil success case to keep the parser going\n    err_lines = []\n    stdout_lines = []",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.vg_to_opt_trace",
    "documentation": {}
  },
  {
    "label": "MAX_STEPS",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.vg_to_opt_trace",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.vg_to_opt_trace",
    "peekOfCode": "MAX_STEPS = 1000\nONLY_ONE_REC_PER_LINE = True\nall_execution_points = []\n# False if record isn't parsed properly or is an exception\ndef process_record(lines):\n    if not lines:\n        return True # 'nil success case to keep the parser going\n    err_lines = []\n    stdout_lines = []\n    regular_lines = []",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.vg_to_opt_trace",
    "documentation": {}
  },
  {
    "label": "ONLY_ONE_REC_PER_LINE",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.vg_to_opt_trace",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.vg_to_opt_trace",
    "peekOfCode": "ONLY_ONE_REC_PER_LINE = True\nall_execution_points = []\n# False if record isn't parsed properly or is an exception\ndef process_record(lines):\n    if not lines:\n        return True # 'nil success case to keep the parser going\n    err_lines = []\n    stdout_lines = []\n    regular_lines = []\n    for e in lines:",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.vg_to_opt_trace",
    "documentation": {}
  },
  {
    "label": "all_execution_points",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.vg_to_opt_trace",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.vg_to_opt_trace",
    "peekOfCode": "all_execution_points = []\n# False if record isn't parsed properly or is an exception\ndef process_record(lines):\n    if not lines:\n        return True # 'nil success case to keep the parser going\n    err_lines = []\n    stdout_lines = []\n    regular_lines = []\n    for e in lines:\n        if e.startswith('ERROR: '):",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.c_cpp.vg_to_opt_trace",
    "documentation": {}
  },
  {
    "label": "filter_output",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.javascript.golden_test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.javascript.golden_test",
    "peekOfCode": "def filter_output(s):\n  return s\ndef execute(input_filename):\n  assert os.path.isfile(input_filename)\n  (base, ext) = os.path.splitext(input_filename)\n  assert ext == INPUT_FILE_EXTENSION\n  (stdout, stderr) = Popen(PROGRAM + [input_filename], stdout=PIPE, stderr=PIPE).communicate()\n  if stderr:\n    print '(has stderr)'\n  #  print '  stderr {'",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.javascript.golden_test",
    "documentation": {}
  },
  {
    "label": "execute",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.javascript.golden_test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.javascript.golden_test",
    "peekOfCode": "def execute(input_filename):\n  assert os.path.isfile(input_filename)\n  (base, ext) = os.path.splitext(input_filename)\n  assert ext == INPUT_FILE_EXTENSION\n  (stdout, stderr) = Popen(PROGRAM + [input_filename], stdout=PIPE, stderr=PIPE).communicate()\n  if stderr:\n    print '(has stderr)'\n  #  print '  stderr {'\n  #  print stderr, '}'\n  else:",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.javascript.golden_test",
    "documentation": {}
  },
  {
    "label": "clobber_golden_file",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.javascript.golden_test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.javascript.golden_test",
    "peekOfCode": "def clobber_golden_file(golden_file):\n  (base, ext) = os.path.splitext(golden_file)\n  outfile = base + OUTPUT_FILE_EXTENSION\n  assert os.path.isfile(outfile)\n  print '  Clobber %s => %s' % (outfile, golden_file)\n  shutil.copy(outfile, golden_file)\n# returns True if there is a diff, False otherwise\ndef golden_differs_from_out(golden_file):\n  (base, ext) = os.path.splitext(golden_file)\n  outfile = base + OUTPUT_FILE_EXTENSION",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.javascript.golden_test",
    "documentation": {}
  },
  {
    "label": "golden_differs_from_out",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.javascript.golden_test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.javascript.golden_test",
    "peekOfCode": "def golden_differs_from_out(golden_file):\n  (base, ext) = os.path.splitext(golden_file)\n  outfile = base + OUTPUT_FILE_EXTENSION\n  assert os.path.isfile(outfile)\n  assert os.path.isfile(golden_file)\n  golden_s = open(golden_file).readlines()\n  out_s = open(outfile).readlines()\n  golden_s_filtered = filter_output(golden_s)\n  out_s_filtered = filter_output(out_s)\n  return out_s_filtered != golden_s_filtered",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.javascript.golden_test",
    "documentation": {}
  },
  {
    "label": "diff_test_output",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.javascript.golden_test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.javascript.golden_test",
    "peekOfCode": "def diff_test_output(test_name):\n  (base, ext) = os.path.splitext(test_name)\n  golden_file = base + GOLDEN_FILE_EXTENSION\n  assert os.path.isfile(golden_file)\n  outfile = base + OUTPUT_FILE_EXTENSION\n  assert os.path.isfile(outfile)\n  golden_s = open(golden_file).readlines()\n  out_s = open(outfile).readlines()\n  golden_s_filtered = filter_output(golden_s)\n  out_s_filtered = filter_output(out_s)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.javascript.golden_test",
    "documentation": {}
  },
  {
    "label": "run_test",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.javascript.golden_test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.javascript.golden_test",
    "peekOfCode": "def run_test(input_filename, clobber_golden=False):\n  print 'Testing', input_filename,\n  (base, ext) = os.path.splitext(input_filename)\n  assert ext == INPUT_FILE_EXTENSION\n  # to eliminate possibility of using stale output:\n  outfile = base + OUTPUT_FILE_EXTENSION\n  if os.path.isfile(outfile):\n    os.remove(outfile)\n  input_fullpath = input_filename\n  execute(input_fullpath)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.javascript.golden_test",
    "documentation": {}
  },
  {
    "label": "run_all_tests",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.javascript.golden_test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.javascript.golden_test",
    "peekOfCode": "def run_all_tests(clobber=False):\n  for t in ALL_TESTS:\n    run_test(t, clobber)\ndef diff_all_test_outputs():\n  for t in ALL_TESTS:\n    diff_test_output(t)\nif __name__ == \"__main__\":\n  parser = optparse.OptionParser()\n  parser.add_option(\"--all\", action=\"store_true\", dest=\"run_all\",\n                    help=\"Run all tests\")",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.javascript.golden_test",
    "documentation": {}
  },
  {
    "label": "diff_all_test_outputs",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.javascript.golden_test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.javascript.golden_test",
    "peekOfCode": "def diff_all_test_outputs():\n  for t in ALL_TESTS:\n    diff_test_output(t)\nif __name__ == \"__main__\":\n  parser = optparse.OptionParser()\n  parser.add_option(\"--all\", action=\"store_true\", dest=\"run_all\",\n                    help=\"Run all tests\")\n  parser.add_option(\"--only-clobber\", action=\"store_true\", dest=\"only_clobber\",\n                    help=\"Clobber ALL golden files WITHOUT re-running tests\")\n  parser.add_option(\"--clobber\", action=\"store_true\", dest=\"clobber\",",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.javascript.golden_test",
    "documentation": {}
  },
  {
    "label": "TESTDIRS",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.javascript.golden_test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.javascript.golden_test",
    "peekOfCode": "TESTDIRS = ['tests/']\nINPUT_FILE_EXTENSION = '.js'\n# see Makefile: run 'make depsLinux' or 'make depsMac' to install node-v6.0.0\nPROGRAM = ['node-v6.0.0/bin/node', '--expose-debug-as=Debug', 'jslogger.js', '--prettydump=true']\n# this program should output to stdout, which will be redirected to this\n# extension:\nOUTPUT_FILE_EXTENSION = '.out'\n# extension for golden files:\nGOLDEN_FILE_EXTENSION = '.golden'\nimport itertools",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.javascript.golden_test",
    "documentation": {}
  },
  {
    "label": "INPUT_FILE_EXTENSION",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.javascript.golden_test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.javascript.golden_test",
    "peekOfCode": "INPUT_FILE_EXTENSION = '.js'\n# see Makefile: run 'make depsLinux' or 'make depsMac' to install node-v6.0.0\nPROGRAM = ['node-v6.0.0/bin/node', '--expose-debug-as=Debug', 'jslogger.js', '--prettydump=true']\n# this program should output to stdout, which will be redirected to this\n# extension:\nOUTPUT_FILE_EXTENSION = '.out'\n# extension for golden files:\nGOLDEN_FILE_EXTENSION = '.golden'\nimport itertools\nimport os, re, shutil, optparse, difflib",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.javascript.golden_test",
    "documentation": {}
  },
  {
    "label": "PROGRAM",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.javascript.golden_test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.javascript.golden_test",
    "peekOfCode": "PROGRAM = ['node-v6.0.0/bin/node', '--expose-debug-as=Debug', 'jslogger.js', '--prettydump=true']\n# this program should output to stdout, which will be redirected to this\n# extension:\nOUTPUT_FILE_EXTENSION = '.out'\n# extension for golden files:\nGOLDEN_FILE_EXTENSION = '.golden'\nimport itertools\nimport os, re, shutil, optparse, difflib\nfrom subprocess import *\nRED   = '\\033[91m'",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.javascript.golden_test",
    "documentation": {}
  },
  {
    "label": "OUTPUT_FILE_EXTENSION",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.javascript.golden_test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.javascript.golden_test",
    "peekOfCode": "OUTPUT_FILE_EXTENSION = '.out'\n# extension for golden files:\nGOLDEN_FILE_EXTENSION = '.golden'\nimport itertools\nimport os, re, shutil, optparse, difflib\nfrom subprocess import *\nRED   = '\\033[91m'\nENDC  = '\\033[0m'  # end color\ndef filter_output(s):\n  return s",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.javascript.golden_test",
    "documentation": {}
  },
  {
    "label": "GOLDEN_FILE_EXTENSION",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.javascript.golden_test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.javascript.golden_test",
    "peekOfCode": "GOLDEN_FILE_EXTENSION = '.golden'\nimport itertools\nimport os, re, shutil, optparse, difflib\nfrom subprocess import *\nRED   = '\\033[91m'\nENDC  = '\\033[0m'  # end color\ndef filter_output(s):\n  return s\ndef execute(input_filename):\n  assert os.path.isfile(input_filename)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.javascript.golden_test",
    "documentation": {}
  },
  {
    "label": "filter_output",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.ruby.golden_test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.ruby.golden_test",
    "peekOfCode": "def filter_output(lines):\n  # substitute memory addresses with 0xADDR to prevent spurious diffs\n  x = [memaddr_RE.sub('0xADDR', s) for s in lines]\n  x = [objid_RE.sub('\"ID\":', s) for s in x]\n  # hack: string it all together into one giant string before doing a\n  # multi-line comparison\n  fullstr = ''.join(x) # don't need an extra newline since all lines are already separated by newline chars\n  fullstr = objrefid_RE.sub('\"REF\", ID', fullstr)\n  ret = fullstr.split('\\n') # split again to get a list of lines\n  return ret",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.ruby.golden_test",
    "documentation": {}
  },
  {
    "label": "execute",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.ruby.golden_test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.ruby.golden_test",
    "peekOfCode": "def execute(input_filename):\n  assert os.path.isfile(input_filename)\n  (base, ext) = os.path.splitext(input_filename)\n  assert ext == INPUT_FILE_EXTENSION\n  (stdout, stderr) = Popen(PROGRAM + [input_filename], stdout=PIPE, stderr=PIPE).communicate()\n  if stderr:\n    print '(has stderr)'\n  #  print '  stderr {'\n  #  print stderr, '}'\n  else:",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.ruby.golden_test",
    "documentation": {}
  },
  {
    "label": "clobber_golden_file",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.ruby.golden_test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.ruby.golden_test",
    "peekOfCode": "def clobber_golden_file(golden_file):\n  (base, ext) = os.path.splitext(golden_file)\n  outfile = base + OUTPUT_FILE_EXTENSION\n  assert os.path.isfile(outfile)\n  print '  Clobber %s => %s' % (outfile, golden_file)\n  shutil.copy(outfile, golden_file)\n# returns True if there is a diff, False otherwise\ndef golden_differs_from_out(golden_file):\n  (base, ext) = os.path.splitext(golden_file)\n  outfile = base + OUTPUT_FILE_EXTENSION",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.ruby.golden_test",
    "documentation": {}
  },
  {
    "label": "golden_differs_from_out",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.ruby.golden_test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.ruby.golden_test",
    "peekOfCode": "def golden_differs_from_out(golden_file):\n  (base, ext) = os.path.splitext(golden_file)\n  outfile = base + OUTPUT_FILE_EXTENSION\n  assert os.path.isfile(outfile)\n  assert os.path.isfile(golden_file)\n  golden_s = open(golden_file).readlines()\n  out_s = open(outfile).readlines()\n  golden_s_filtered = filter_output(golden_s)\n  out_s_filtered = filter_output(out_s)\n  return out_s_filtered != golden_s_filtered",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.ruby.golden_test",
    "documentation": {}
  },
  {
    "label": "print_filtered_outfile",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.ruby.golden_test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.ruby.golden_test",
    "peekOfCode": "def print_filtered_outfile(test_name):\n  (base, ext) = os.path.splitext(test_name)\n  outfile = base + OUTPUT_FILE_EXTENSION\n  assert os.path.isfile(outfile)\n  out_s = open(outfile).readlines()\n  out_s_filtered = filter_output(out_s)\n  for line in out_s_filtered:\n    print line\ndef diff_test_output(test_name):\n  (base, ext) = os.path.splitext(test_name)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.ruby.golden_test",
    "documentation": {}
  },
  {
    "label": "diff_test_output",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.ruby.golden_test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.ruby.golden_test",
    "peekOfCode": "def diff_test_output(test_name):\n  (base, ext) = os.path.splitext(test_name)\n  golden_file = base + GOLDEN_FILE_EXTENSION\n  assert os.path.isfile(golden_file)\n  outfile = base + OUTPUT_FILE_EXTENSION\n  assert os.path.isfile(outfile)\n  golden_s = open(golden_file).readlines()\n  out_s = open(outfile).readlines()\n  golden_s_filtered = filter_output(golden_s)\n  out_s_filtered = filter_output(out_s)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.ruby.golden_test",
    "documentation": {}
  },
  {
    "label": "run_test",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.ruby.golden_test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.ruby.golden_test",
    "peekOfCode": "def run_test(input_filename, clobber_golden=False):\n  print 'Testing', input_filename,\n  (base, ext) = os.path.splitext(input_filename)\n  assert ext == INPUT_FILE_EXTENSION\n  # to eliminate possibility of using stale output:\n  outfile = base + OUTPUT_FILE_EXTENSION\n  if os.path.isfile(outfile):\n    os.remove(outfile)\n  input_fullpath = input_filename\n  execute(input_fullpath)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.ruby.golden_test",
    "documentation": {}
  },
  {
    "label": "run_all_tests",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.ruby.golden_test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.ruby.golden_test",
    "peekOfCode": "def run_all_tests(clobber=False):\n  for t in ALL_TESTS:\n    run_test(t, clobber)\ndef diff_all_test_outputs():\n  for t in ALL_TESTS:\n    diff_test_output(t)\nif __name__ == \"__main__\":\n  parser = optparse.OptionParser()\n  parser.add_option(\"--all\", action=\"store_true\", dest=\"run_all\",\n                    help=\"Run all tests\")",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.ruby.golden_test",
    "documentation": {}
  },
  {
    "label": "diff_all_test_outputs",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.ruby.golden_test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.ruby.golden_test",
    "peekOfCode": "def diff_all_test_outputs():\n  for t in ALL_TESTS:\n    diff_test_output(t)\nif __name__ == \"__main__\":\n  parser = optparse.OptionParser()\n  parser.add_option(\"--all\", action=\"store_true\", dest=\"run_all\",\n                    help=\"Run all tests\")\n  parser.add_option(\"--only-clobber\", action=\"store_true\", dest=\"only_clobber\",\n                    help=\"Clobber ALL golden files WITHOUT re-running tests\")\n  parser.add_option(\"--clobber\", action=\"store_true\", dest=\"clobber\",",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.ruby.golden_test",
    "documentation": {}
  },
  {
    "label": "TESTDIRS",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.ruby.golden_test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.ruby.golden_test",
    "peekOfCode": "TESTDIRS = ['tests/']\nINPUT_FILE_EXTENSION = '.rb'\n# program to run, with input file as an extra argument\nPROGRAM = ['./ruby', 'pg_logger.rb', '-f']\n# this program should output to stdout, which will be redirected to this\n# extension:\nOUTPUT_FILE_EXTENSION = '.out'\n# extension for golden files:\nGOLDEN_FILE_EXTENSION = '.golden'\nimport itertools",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.ruby.golden_test",
    "documentation": {}
  },
  {
    "label": "INPUT_FILE_EXTENSION",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.ruby.golden_test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.ruby.golden_test",
    "peekOfCode": "INPUT_FILE_EXTENSION = '.rb'\n# program to run, with input file as an extra argument\nPROGRAM = ['./ruby', 'pg_logger.rb', '-f']\n# this program should output to stdout, which will be redirected to this\n# extension:\nOUTPUT_FILE_EXTENSION = '.out'\n# extension for golden files:\nGOLDEN_FILE_EXTENSION = '.golden'\nimport itertools\nimport os, re, shutil, optparse, difflib",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.ruby.golden_test",
    "documentation": {}
  },
  {
    "label": "PROGRAM",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.ruby.golden_test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.ruby.golden_test",
    "peekOfCode": "PROGRAM = ['./ruby', 'pg_logger.rb', '-f']\n# this program should output to stdout, which will be redirected to this\n# extension:\nOUTPUT_FILE_EXTENSION = '.out'\n# extension for golden files:\nGOLDEN_FILE_EXTENSION = '.golden'\nimport itertools\nimport os, re, shutil, optparse, difflib\nfrom subprocess import *\nRED   = '\\033[91m'",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.ruby.golden_test",
    "documentation": {}
  },
  {
    "label": "OUTPUT_FILE_EXTENSION",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.ruby.golden_test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.ruby.golden_test",
    "peekOfCode": "OUTPUT_FILE_EXTENSION = '.out'\n# extension for golden files:\nGOLDEN_FILE_EXTENSION = '.golden'\nimport itertools\nimport os, re, shutil, optparse, difflib\nfrom subprocess import *\nRED   = '\\033[91m'\nENDC  = '\\033[0m'  # end color\nimport re\nmemaddr_RE = re.compile('0x[0-9a-f]+')",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.ruby.golden_test",
    "documentation": {}
  },
  {
    "label": "GOLDEN_FILE_EXTENSION",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.ruby.golden_test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.ruby.golden_test",
    "peekOfCode": "GOLDEN_FILE_EXTENSION = '.golden'\nimport itertools\nimport os, re, shutil, optparse, difflib\nfrom subprocess import *\nRED   = '\\033[91m'\nENDC  = '\\033[0m'  # end color\nimport re\nmemaddr_RE = re.compile('0x[0-9a-f]+')\n# canonicalize all object IDs, such as \"206\":\n# since they sometimes vary across executions due to different memory",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.ruby.golden_test",
    "documentation": {}
  },
  {
    "label": "memaddr_RE",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.ruby.golden_test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.ruby.golden_test",
    "peekOfCode": "memaddr_RE = re.compile('0x[0-9a-f]+')\n# canonicalize all object IDs, such as \"206\":\n# since they sometimes vary across executions due to different memory\n# layout and such\nobjid_RE = re.compile('\"\\d+\":')\n# also canonicalize the corresponding reference IDs, such as \"REF\",\\n386\n# (but note that this must be run on all lines together, not just\n# individual lines, since it spans two lines)\nobjrefid_RE = re.compile('\"REF\",\\s+\\d+')\ndef filter_output(lines):",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.ruby.golden_test",
    "documentation": {}
  },
  {
    "label": "objid_RE",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.ruby.golden_test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.ruby.golden_test",
    "peekOfCode": "objid_RE = re.compile('\"\\d+\":')\n# also canonicalize the corresponding reference IDs, such as \"REF\",\\n386\n# (but note that this must be run on all lines together, not just\n# individual lines, since it spans two lines)\nobjrefid_RE = re.compile('\"REF\",\\s+\\d+')\ndef filter_output(lines):\n  # substitute memory addresses with 0xADDR to prevent spurious diffs\n  x = [memaddr_RE.sub('0xADDR', s) for s in lines]\n  x = [objid_RE.sub('\"ID\":', s) for s in x]\n  # hack: string it all together into one giant string before doing a",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.ruby.golden_test",
    "documentation": {}
  },
  {
    "label": "objrefid_RE",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.ruby.golden_test",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.ruby.golden_test",
    "peekOfCode": "objrefid_RE = re.compile('\"REF\",\\s+\\d+')\ndef filter_output(lines):\n  # substitute memory addresses with 0xADDR to prevent spurious diffs\n  x = [memaddr_RE.sub('0xADDR', s) for s in lines]\n  x = [objid_RE.sub('\"ID\":', s) for s in x]\n  # hack: string it all together into one giant string before doing a\n  # multi-line comparison\n  fullstr = ''.join(x) # don't need an extra newline since all lines are already separated by newline chars\n  fullstr = objrefid_RE.sub('\"REF\", ID', fullstr)\n  ret = fullstr.split('\\n') # split again to get a list of lines",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.backends.ruby.golden_test",
    "documentation": {}
  },
  {
    "label": "p",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.docker-rm-long-processes",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.docker-rm-long-processes",
    "peekOfCode": "p = subprocess.Popen(['docker', 'ps', '-a'], stdout=subprocess.PIPE)\nids_to_remove = []\nfor line in p.stdout.readlines():\n    # skip header line\n    if line.startswith('CONTAINER'):\n        continue\n    # if something is running for a long time, then KILL IT\n    if 'minute' in line or 'hour' in line:\n        print line,\n        container_id = line.split()[0]",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.docker-rm-long-processes",
    "documentation": {}
  },
  {
    "label": "ids_to_remove",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.docker-rm-long-processes",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.docker-rm-long-processes",
    "peekOfCode": "ids_to_remove = []\nfor line in p.stdout.readlines():\n    # skip header line\n    if line.startswith('CONTAINER'):\n        continue\n    # if something is running for a long time, then KILL IT\n    if 'minute' in line or 'hour' in line:\n        print line,\n        container_id = line.split()[0]\n        ids_to_remove.append(container_id)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v4-cokapi.docker-rm-long-processes",
    "documentation": {}
  },
  {
    "label": "call_opt_backend",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.codechella-to-codcast.call_opt_backend",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.codechella-to-codcast.call_opt_backend",
    "peekOfCode": "def call_opt_backend(myAppState, useBackupUrl=False):\n    py = myAppState['py']\n    url = pyToUrl[py]\n    if py in ('2', '3'):\n        #mainUrl = 'http://localhost:8003/' + url\n        mainUrl = 'http://pythontutor.com/' + url\n        backupUrl = None\n    else:\n        assert py in ('c', 'cpp', 'ruby', 'js', 'ts', 'java')\n        mainUrl = 'http://cokapi.com/' + url",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.codechella-to-codcast.call_opt_backend",
    "documentation": {}
  },
  {
    "label": "TEST_APP_STATE",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.codechella-to-codcast.call_opt_backend",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.codechella-to-codcast.call_opt_backend",
    "peekOfCode": "TEST_APP_STATE = {\n    \"origin\": \"opt-frontend.js\",\n    \"code\": \"x = [1,2,3]\\ny = [4,5,6]\\nprint x, y\",\n    \"textReferences\": \"false\",\n    \"cumulative\": \"false\",\n    \"rawInputLstJSON\": \"[]\",\n    \"mode\": \"edit\",\n    \"heapPrimitives\": \"nevernest\",\n    \"py\": \"2\"\n}",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.codechella-to-codcast.call_opt_backend",
    "documentation": {}
  },
  {
    "label": "pyToUrl",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.codechella-to-codcast.call_opt_backend",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.codechella-to-codcast.call_opt_backend",
    "peekOfCode": "pyToUrl = {\n    '2': 'web_exec_py2.py',\n    '3': 'web_exec_py3.py',\n    'js': 'exec_js_jsonp',\n    'ts': 'exec_ts_jsonp',\n    'java': 'exec_java_jsonp',\n    'ruby': 'exec_ruby_jsonp',\n    'c': 'exec_c_jsonp',\n    'cpp': 'exec_cpp_jsonp',\n}",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.codechella-to-codcast.call_opt_backend",
    "documentation": {}
  },
  {
    "label": "ALL_LEGIT_TYPES",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.codechella-to-codcast.convert",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.codechella-to-codcast.convert",
    "peekOfCode": "ALL_LEGIT_TYPES = (\n    'app.initialAppState',\n    'hello',\n    'peer-update',\n    'form-update',\n    'cursor-update',\n    'chat',\n    'app.editCode',\n    'app.executeCode',\n    'app.updateOutput',",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.codechella-to-codcast.convert",
    "documentation": {}
  },
  {
    "label": "clientIdtoUsername",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.codechella-to-codcast.convert",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.codechella-to-codcast.convert",
    "peekOfCode": "clientIdtoUsername = {}\nfirstInitialAppState = None\nfirstClientId = None\nraw_events = []\n# Key: delta 'd' field, value: list of code edit events with that same 'd'\n#\n# NB: this won't be fully accurate if there are several *independent*\n# sets of edits occurring at vastly different times which have the same 'd'\nall_code_edits_by_deltas = defaultdict(list)\nfor line in open(sys.argv[1]):",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.codechella-to-codcast.convert",
    "documentation": {}
  },
  {
    "label": "firstInitialAppState",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.codechella-to-codcast.convert",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.codechella-to-codcast.convert",
    "peekOfCode": "firstInitialAppState = None\nfirstClientId = None\nraw_events = []\n# Key: delta 'd' field, value: list of code edit events with that same 'd'\n#\n# NB: this won't be fully accurate if there are several *independent*\n# sets of edits occurring at vastly different times which have the same 'd'\nall_code_edits_by_deltas = defaultdict(list)\nfor line in open(sys.argv[1]):\n    rec = json.loads(line)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.codechella-to-codcast.convert",
    "documentation": {}
  },
  {
    "label": "firstClientId",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.codechella-to-codcast.convert",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.codechella-to-codcast.convert",
    "peekOfCode": "firstClientId = None\nraw_events = []\n# Key: delta 'd' field, value: list of code edit events with that same 'd'\n#\n# NB: this won't be fully accurate if there are several *independent*\n# sets of edits occurring at vastly different times which have the same 'd'\nall_code_edits_by_deltas = defaultdict(list)\nfor line in open(sys.argv[1]):\n    rec = json.loads(line)\n    if rec['type'] != 'togetherjs':",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.codechella-to-codcast.convert",
    "documentation": {}
  },
  {
    "label": "raw_events",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.codechella-to-codcast.convert",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.codechella-to-codcast.convert",
    "peekOfCode": "raw_events = []\n# Key: delta 'd' field, value: list of code edit events with that same 'd'\n#\n# NB: this won't be fully accurate if there are several *independent*\n# sets of edits occurring at vastly different times which have the same 'd'\nall_code_edits_by_deltas = defaultdict(list)\nfor line in open(sys.argv[1]):\n    rec = json.loads(line)\n    if rec['type'] != 'togetherjs':\n        continue",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.codechella-to-codcast.convert",
    "documentation": {}
  },
  {
    "label": "all_code_edits_by_deltas",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.codechella-to-codcast.convert",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.codechella-to-codcast.convert",
    "peekOfCode": "all_code_edits_by_deltas = defaultdict(list)\nfor line in open(sys.argv[1]):\n    rec = json.loads(line)\n    if rec['type'] != 'togetherjs':\n        continue\n    tjs = rec['togetherjs']\n    typ = tjs['type']\n    if typ not in ALL_LEGIT_TYPES:\n        continue\n    # read only the FIRST initialAppState since we'll assume that's who",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.codechella-to-codcast.convert",
    "documentation": {}
  },
  {
    "label": "events",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.codechella-to-codcast.convert",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.codechella-to-codcast.convert",
    "peekOfCode": "events = []\nfor e in raw_events:\n    tjs = e['togetherjs']\n    # clean up and append to final events\n    dt = dateutil.parser.parse(e['date'])\n    # get timestamp in milliseconds\n    ms = int(time.mktime(dt.timetuple())) * 1000\n    # for app.codeEdit events, look up who the ORIGINAL PERSON was who\n    # initiated this edit event, and log their clientId, which may be\n    # different than your own clientId",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.codechella-to-codcast.convert",
    "documentation": {}
  },
  {
    "label": "myTraceCache",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.codechella-to-codcast.convert",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.codechella-to-codcast.convert",
    "peekOfCode": "myTraceCache = []\nfor e in events:\n    if e['type'] == 'app.executeCode':\n        myAppState = e['myAppState']\n        r = call_opt_backend(myAppState)\n        #print r.url\n        serverResultJson = r.json()\n        if 'trace' in serverResultJson:\n            myTrace = serverResultJson['trace']\n            myTraceCache.append([myAppState, myTrace])",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.codechella-to-codcast.convert",
    "documentation": {}
  },
  {
    "label": "initialAppState",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.codechella-to-codcast.convert",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.codechella-to-codcast.convert",
    "peekOfCode": "initialAppState = firstInitialAppState['togetherjs']['myAppState']\ninitialAppState['clientId'] = firstInitialAppState['togetherjs']['clientId'] # augment it\nfirstDt = dateutil.parser.parse(firstInitialAppState['date'])\nfirstTs = int(time.mktime(firstDt.timetuple())) * 1000 # milliseconds\n# prepend a special app.startRecordingDemo event to events\nstartRecordingDemoEvent = {'type': 'app.startRecordingDemo',\n                           'clientId': firstInitialAppState['togetherjs']['clientId'],\n                           'ts': firstTs,\n                           'sameUrl': True,\n                           'peer': {'color': '#8d549f'}} # not sure if this is necessary",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.codechella-to-codcast.convert",
    "documentation": {}
  },
  {
    "label": "initialAppState['clientId']",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.codechella-to-codcast.convert",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.codechella-to-codcast.convert",
    "peekOfCode": "initialAppState['clientId'] = firstInitialAppState['togetherjs']['clientId'] # augment it\nfirstDt = dateutil.parser.parse(firstInitialAppState['date'])\nfirstTs = int(time.mktime(firstDt.timetuple())) * 1000 # milliseconds\n# prepend a special app.startRecordingDemo event to events\nstartRecordingDemoEvent = {'type': 'app.startRecordingDemo',\n                           'clientId': firstInitialAppState['togetherjs']['clientId'],\n                           'ts': firstTs,\n                           'sameUrl': True,\n                           'peer': {'color': '#8d549f'}} # not sure if this is necessary\nevents.insert(0, startRecordingDemoEvent)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.codechella-to-codcast.convert",
    "documentation": {}
  },
  {
    "label": "firstDt",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.codechella-to-codcast.convert",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.codechella-to-codcast.convert",
    "peekOfCode": "firstDt = dateutil.parser.parse(firstInitialAppState['date'])\nfirstTs = int(time.mktime(firstDt.timetuple())) * 1000 # milliseconds\n# prepend a special app.startRecordingDemo event to events\nstartRecordingDemoEvent = {'type': 'app.startRecordingDemo',\n                           'clientId': firstInitialAppState['togetherjs']['clientId'],\n                           'ts': firstTs,\n                           'sameUrl': True,\n                           'peer': {'color': '#8d549f'}} # not sure if this is necessary\nevents.insert(0, startRecordingDemoEvent)\n# ok finally produce the codcast object and write it out to stdout as JSON",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.codechella-to-codcast.convert",
    "documentation": {}
  },
  {
    "label": "firstTs",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.codechella-to-codcast.convert",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.codechella-to-codcast.convert",
    "peekOfCode": "firstTs = int(time.mktime(firstDt.timetuple())) * 1000 # milliseconds\n# prepend a special app.startRecordingDemo event to events\nstartRecordingDemoEvent = {'type': 'app.startRecordingDemo',\n                           'clientId': firstInitialAppState['togetherjs']['clientId'],\n                           'ts': firstTs,\n                           'sameUrl': True,\n                           'peer': {'color': '#8d549f'}} # not sure if this is necessary\nevents.insert(0, startRecordingDemoEvent)\n# ok finally produce the codcast object and write it out to stdout as JSON\ncodcastObj = {'initialAppState': initialAppState,",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.codechella-to-codcast.convert",
    "documentation": {}
  },
  {
    "label": "startRecordingDemoEvent",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.codechella-to-codcast.convert",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.codechella-to-codcast.convert",
    "peekOfCode": "startRecordingDemoEvent = {'type': 'app.startRecordingDemo',\n                           'clientId': firstInitialAppState['togetherjs']['clientId'],\n                           'ts': firstTs,\n                           'sameUrl': True,\n                           'peer': {'color': '#8d549f'}} # not sure if this is necessary\nevents.insert(0, startRecordingDemoEvent)\n# ok finally produce the codcast object and write it out to stdout as JSON\ncodcastObj = {'initialAppState': initialAppState,\n              'events': events,\n              'traceCache': myTraceCache}",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.codechella-to-codcast.convert",
    "documentation": {}
  },
  {
    "label": "codcastObj",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.codechella-to-codcast.convert",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.codechella-to-codcast.convert",
    "peekOfCode": "codcastObj = {'initialAppState': initialAppState,\n              'events': events,\n              'traceCache': myTraceCache}\nprint json.dumps(codcastObj)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.codechella-to-codcast.convert",
    "documentation": {}
  },
  {
    "label": "PREFIX",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.add_cache_busting_query_strings",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.add_cache_busting_query_strings",
    "peekOfCode": "PREFIX = 'src=\"'\nSUFFIX = '\"'\nSTUFF_RE = re.compile(PREFIX + '(build/.*[.]js).*?' + SUFFIX)\nprint 'Added cache-busting hashes to these HTML files:'\nfor f in os.listdir('.'):\n  if f.endswith('.html'):\n    new_f = f + '.NEW'\n    with open(new_f, 'w') as out:\n      for line in open(f):\n        m = STUFF_RE.search(line)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.add_cache_busting_query_strings",
    "documentation": {}
  },
  {
    "label": "SUFFIX",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.add_cache_busting_query_strings",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.add_cache_busting_query_strings",
    "peekOfCode": "SUFFIX = '\"'\nSTUFF_RE = re.compile(PREFIX + '(build/.*[.]js).*?' + SUFFIX)\nprint 'Added cache-busting hashes to these HTML files:'\nfor f in os.listdir('.'):\n  if f.endswith('.html'):\n    new_f = f + '.NEW'\n    with open(new_f, 'w') as out:\n      for line in open(f):\n        m = STUFF_RE.search(line)\n        if m:",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.add_cache_busting_query_strings",
    "documentation": {}
  },
  {
    "label": "STUFF_RE",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.add_cache_busting_query_strings",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.add_cache_busting_query_strings",
    "peekOfCode": "STUFF_RE = re.compile(PREFIX + '(build/.*[.]js).*?' + SUFFIX)\nprint 'Added cache-busting hashes to these HTML files:'\nfor f in os.listdir('.'):\n  if f.endswith('.html'):\n    new_f = f + '.NEW'\n    with open(new_f, 'w') as out:\n      for line in open(f):\n        m = STUFF_RE.search(line)\n        if m:\n          js_filename = m.group(1)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.add_cache_busting_query_strings",
    "documentation": {}
  },
  {
    "label": "dummy_ok",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.bottle_server",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.bottle_server",
    "peekOfCode": "def dummy_ok(name=None):\n    return 'OK'\n@route('/<filepath:path>')\ndef index(filepath):\n    return static_file(filepath, root='.')\n# Note that this will run either Python 2 or 3, depending on which\n# version of Python you used to start the server, REGARDLESS of which\n# route was taken:\n@route('/web_exec_py2.py')\n@route('/web_exec_py3.py')",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.bottle_server",
    "documentation": {}
  },
  {
    "label": "index",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.bottle_server",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.bottle_server",
    "peekOfCode": "def index(filepath):\n    return static_file(filepath, root='.')\n# Note that this will run either Python 2 or 3, depending on which\n# version of Python you used to start the server, REGARDLESS of which\n# route was taken:\n@route('/web_exec_py2.py')\n@route('/web_exec_py3.py')\n@route('/LIVE_exec_py2.py')\n@route('/LIVE_exec_py3.py')\ndef get_py_exec():",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.bottle_server",
    "documentation": {}
  },
  {
    "label": "get_py_exec",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.bottle_server",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.bottle_server",
    "peekOfCode": "def get_py_exec():\n  out_s = StringIO.StringIO()\n  def json_finalizer(input_code, output_trace):\n    ret = dict(code=input_code, trace=output_trace)\n    json_output = json.dumps(ret, indent=None)\n    out_s.write(json_output)\n  options = json.loads(request.query.options_json)\n  pg_logger.exec_script_str_local(request.query.user_script,\n                                  request.query.raw_input_json,\n                                  options['cumulative_mode'],",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.bottle_server",
    "documentation": {}
  },
  {
    "label": "opt_run_doctest",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.doctest_exec",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.doctest_exec",
    "peekOfCode": "def opt_run_doctest(doctest, example_number, student_code, probe_exprs):\n    def my_finalizer(input_code, output_trace):\n        ret = dict(doctest=encode_doctest(doctest),\n                   example_number=example_number,\n                   student_code=student_code,\n                   opt_trace=output_trace)\n        json_output = json.dumps(ret, indent=None) # use indent=None, indent=2 for debugging\n        print(json_output)\n        #pp.pprint(output_trace) # for debugging\n    def opt_doctest_exec_script_str(script_str, custom_modules):",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.doctest_exec",
    "documentation": {}
  },
  {
    "label": "pp",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.doctest_exec",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.doctest_exec",
    "peekOfCode": "pp = pprint.PrettyPrinter()\ndef opt_run_doctest(doctest, example_number, student_code, probe_exprs):\n    def my_finalizer(input_code, output_trace):\n        ret = dict(doctest=encode_doctest(doctest),\n                   example_number=example_number,\n                   student_code=student_code,\n                   opt_trace=output_trace)\n        json_output = json.dumps(ret, indent=None) # use indent=None, indent=2 for debugging\n        print(json_output)\n        #pp.pprint(output_trace) # for debugging",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.doctest_exec",
    "documentation": {}
  },
  {
    "label": "encode_doctest",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.doctest_reader",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.doctest_reader",
    "peekOfCode": "def encode_doctest(t):\n    encoded_test = {}\n    encoded_test['docstring'] = t.docstring\n    encoded_test['name'] = t.name\n    encoded_test['filename'] = t.filename\n    encoded_examples = []\n    encoded_test['examples'] = encoded_examples\n    for e in t.examples:\n        encoded_examples.append(\n            dict(source=e.source,",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.doctest_reader",
    "documentation": {}
  },
  {
    "label": "lines_to_skip",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.doctest_splitter",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.doctest_splitter",
    "peekOfCode": "lines_to_skip = set()\nstripped_filelines = []\nif __name__ == \"__main__\":\n    fullpath = sys.argv[1]\n    assert fullpath.endswith(\".py\")\n    # lifted from doctest.py\n    # It is a module -- insert its dir into sys.path and try to\n    # import it. If it is part of a package, that possibly\n    # won't work because of package imports.\n    dirname, filename = os.path.split(fullpath)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.doctest_splitter",
    "documentation": {}
  },
  {
    "label": "stripped_filelines",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.doctest_splitter",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.doctest_splitter",
    "peekOfCode": "stripped_filelines = []\nif __name__ == \"__main__\":\n    fullpath = sys.argv[1]\n    assert fullpath.endswith(\".py\")\n    # lifted from doctest.py\n    # It is a module -- insert its dir into sys.path and try to\n    # import it. If it is part of a package, that possibly\n    # won't work because of package imports.\n    dirname, filename = os.path.split(fullpath)\n    sys.path.insert(0, dirname)",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.doctest_splitter",
    "documentation": {}
  },
  {
    "label": "json_finalizer",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.generate_json_trace",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.generate_json_trace",
    "peekOfCode": "def json_finalizer(input_code, output_trace):\n  ret = dict(code=input_code, trace=output_trace)\n  # sort_keys=True leads to printing in DETERMINISTIC order, but might\n  # screw up some old tests ... however, there is STILL non-determinism\n  # in Python 3.3 tests, ugh!\n  #\n  # TODO: for Python 3.6, think about reinstating sort_keys=True as a\n  # command-line option for tests only? maybe don't activate it for reals\n  # since that might falsely give users the impression that object/dict keys\n  # are always sorted",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.generate_json_trace",
    "documentation": {}
  },
  {
    "label": "js_var_finalizer",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.generate_json_trace",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.generate_json_trace",
    "peekOfCode": "def js_var_finalizer(input_code, output_trace):\n  global JS_VARNAME\n  ret = dict(code=input_code, trace=output_trace)\n  json_output = json.dumps(ret, indent=None)\n  return \"var %s = %s;\" % (JS_VARNAME, json_output)\nparser = OptionParser(usage=\"Generate JSON trace for pytutor\")\nparser.add_option('-c', '--cumulative', default=False, action='store_true',\n        help='output cumulative trace.')\nparser.add_option('-p', '--heapPrimitives', default=False, action='store_true',\n        help='render primitives as heap objects.')",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.generate_json_trace",
    "documentation": {}
  },
  {
    "label": "json.encoder.FLOAT_REPR",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.generate_json_trace",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.generate_json_trace",
    "peekOfCode": "json.encoder.FLOAT_REPR = lambda f: ('%.3f' % f)\ndef json_finalizer(input_code, output_trace):\n  ret = dict(code=input_code, trace=output_trace)\n  # sort_keys=True leads to printing in DETERMINISTIC order, but might\n  # screw up some old tests ... however, there is STILL non-determinism\n  # in Python 3.3 tests, ugh!\n  #\n  # TODO: for Python 3.6, think about reinstating sort_keys=True as a\n  # command-line option for tests only? maybe don't activate it for reals\n  # since that might falsely give users the impression that object/dict keys",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.generate_json_trace",
    "documentation": {}
  },
  {
    "label": "parser",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.generate_json_trace",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.generate_json_trace",
    "peekOfCode": "parser = OptionParser(usage=\"Generate JSON trace for pytutor\")\nparser.add_option('-c', '--cumulative', default=False, action='store_true',\n        help='output cumulative trace.')\nparser.add_option('-p', '--heapPrimitives', default=False, action='store_true',\n        help='render primitives as heap objects.')\nparser.add_option('-o', '--compact', default=False, action='store_true',\n        help='output compact trace.')\nparser.add_option('--allmodules', default=False, action='store_true',\n        help='allow importing of all installed Python modules.')\nparser.add_option('-i', '--input', default=False, action='store',",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.generate_json_trace",
    "documentation": {}
  },
  {
    "label": "INDENT_LEVEL",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.generate_json_trace",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.generate_json_trace",
    "peekOfCode": "INDENT_LEVEL = None if options.compact else 2\nif options.usercode:\n  INDENT_LEVEL = None\n  probe_exprs = None\n  if options.probe_exprs_json:\n    probe_exprs = json.loads(options.probe_exprs_json)\n  allow_all_modules = False\n  if options.allmodules:\n    allow_all_modules = True\n  print(pg_logger.exec_script_str_local(options.usercode,",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.generate_json_trace",
    "documentation": {}
  },
  {
    "label": "cgi_finalizer",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.LIVE_exec_py2",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.LIVE_exec_py2",
    "peekOfCode": "def cgi_finalizer(input_code, output_trace):\n  \"\"\"Write JSON output for js/pytutor.js as a CGI result.\"\"\"\n  ret = dict(code=input_code, trace=output_trace)\n  json_output = json.dumps(ret, indent=None) # use indent=None for most compact repr\n  if LOG_QUERIES:\n    # just to be paranoid, don't croak the whole program just\n    # because there's some error in logging it to the database\n    try:\n      # log queries into sqlite database.\n      # make sure that your web server's account has write permissions",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.LIVE_exec_py2",
    "documentation": {}
  },
  {
    "label": "LOG_QUERIES",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.LIVE_exec_py2",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.LIVE_exec_py2",
    "peekOfCode": "LOG_QUERIES = False\nif LOG_QUERIES:\n  import os, datetime, create_log_db, sqlite3\ndef cgi_finalizer(input_code, output_trace):\n  \"\"\"Write JSON output for js/pytutor.js as a CGI result.\"\"\"\n  ret = dict(code=input_code, trace=output_trace)\n  json_output = json.dumps(ret, indent=None) # use indent=None for most compact repr\n  if LOG_QUERIES:\n    # just to be paranoid, don't croak the whole program just\n    # because there's some error in logging it to the database",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.LIVE_exec_py2",
    "documentation": {}
  },
  {
    "label": "raw_input_json",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.LIVE_exec_py2",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.LIVE_exec_py2",
    "peekOfCode": "raw_input_json = None\noptions_json = None\n# If you pass in a filename as an argument, then process script from that file ...\nif len(sys.argv) > 1:\n  user_script = open(sys.argv[1]).read()\n# Otherwise act like a CGI script with parameters:\n#   user_script\n#   raw_input_json\n#   options_json\nelse:",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.LIVE_exec_py2",
    "documentation": {}
  },
  {
    "label": "options_json",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.LIVE_exec_py2",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.LIVE_exec_py2",
    "peekOfCode": "options_json = None\n# If you pass in a filename as an argument, then process script from that file ...\nif len(sys.argv) > 1:\n  user_script = open(sys.argv[1]).read()\n# Otherwise act like a CGI script with parameters:\n#   user_script\n#   raw_input_json\n#   options_json\nelse:\n  form = cgi.FieldStorage()",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.LIVE_exec_py2",
    "documentation": {}
  },
  {
    "label": "cgi_finalizer",
    "kind": 2,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.LIVE_exec_py3",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.LIVE_exec_py3",
    "peekOfCode": "def cgi_finalizer(input_code, output_trace):\n  \"\"\"Write JSON output for js/pytutor.js as a CGI result.\"\"\"\n  ret = dict(code=input_code, trace=output_trace)\n  json_output = json.dumps(ret, indent=None) # use indent=None for most compact repr\n  if LOG_QUERIES:\n    # just to be paranoid, don't croak the whole program just\n    # because there's some error in logging it to the database\n    try:\n      # log queries into sqlite database.\n      # make sure that your web server's account has write permissions",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.LIVE_exec_py3",
    "documentation": {}
  },
  {
    "label": "LOG_QUERIES",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.LIVE_exec_py3",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.LIVE_exec_py3",
    "peekOfCode": "LOG_QUERIES = False\nif LOG_QUERIES:\n  import os, datetime, create_log_db, sqlite3\ndef cgi_finalizer(input_code, output_trace):\n  \"\"\"Write JSON output for js/pytutor.js as a CGI result.\"\"\"\n  ret = dict(code=input_code, trace=output_trace)\n  json_output = json.dumps(ret, indent=None) # use indent=None for most compact repr\n  if LOG_QUERIES:\n    # just to be paranoid, don't croak the whole program just\n    # because there's some error in logging it to the database",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.LIVE_exec_py3",
    "documentation": {}
  },
  {
    "label": "raw_input_json",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.LIVE_exec_py3",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.LIVE_exec_py3",
    "peekOfCode": "raw_input_json = None\noptions_json = None\n# If you pass in a filename as an argument, then process script from that file ...\nif len(sys.argv) > 1:\n  user_script = open(sys.argv[1]).read()\n# Otherwise act like a CGI script with parameters:\n#   user_script\n#   raw_input_json\n#   options_json\nelse:",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.LIVE_exec_py3",
    "documentation": {}
  },
  {
    "label": "options_json",
    "kind": 5,
    "importPath": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.LIVE_exec_py3",
    "description": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.LIVE_exec_py3",
    "peekOfCode": "options_json = None\n# If you pass in a filename as an argument, then process script from that file ...\nif len(sys.argv) > 1:\n  user_script = open(sys.argv[1]).read()\n# Otherwise act like a CGI script with parameters:\n#   user_script\n#   raw_input_json\n#   options_json\nelse:\n  form = cgi.FieldStorage()",
    "detail": "scrap.test.2emulate._ALLREPOS.OnlinePythonTutor.v5-unity.LIVE_exec_py3",
    "documentation": {}
  },
  {
    "label": "process_dir",
    "kind": 2,
    "importPath": "scrap.dirhtml",
    "description": "scrap.dirhtml",
    "peekOfCode": "def process_dir(top_dir, opts):\n    glob_patt = opts.filter or \"*\"\n    path_top_dir: Path\n    path_top_dir = Path(top_dir)\n    index_file = None\n    index_path = Path(path_top_dir, opts.output_file)\n    if opts.verbose:\n        print(f\"Traversing dir {path_top_dir.absolute()}\")\n    try:\n        index_file = open(index_path, \"w\")",
    "detail": "scrap.dirhtml",
    "documentation": {}
  },
  {
    "label": "pretty_size",
    "kind": 2,
    "importPath": "scrap.dirhtml",
    "description": "scrap.dirhtml",
    "peekOfCode": "def pretty_size(bytes, units=UNITS_MAPPING):\n    \"\"\"Human-readable file sizes.\n    ripped from https://pypi.python.org/pypi/hurry.filesize/\n    \"\"\"\n    for factor, suffix in units:\n        if bytes >= factor:\n            break\n    amount = int(bytes / factor)\n    if isinstance(suffix, tuple):\n        singular, multiple = suffix",
    "detail": "scrap.dirhtml",
    "documentation": {}
  },
  {
    "label": "DEFAULT_OUTPUT_FILE",
    "kind": 5,
    "importPath": "scrap.dirhtml",
    "description": "scrap.dirhtml",
    "peekOfCode": "DEFAULT_OUTPUT_FILE = \"directory.html\"\ndef process_dir(top_dir, opts):\n    glob_patt = opts.filter or \"*\"\n    path_top_dir: Path\n    path_top_dir = Path(top_dir)\n    index_file = None\n    index_path = Path(path_top_dir, opts.output_file)\n    if opts.verbose:\n        print(f\"Traversing dir {path_top_dir.absolute()}\")\n    try:",
    "detail": "scrap.dirhtml",
    "documentation": {}
  },
  {
    "label": "UNITS_MAPPING",
    "kind": 5,
    "importPath": "scrap.dirhtml",
    "description": "scrap.dirhtml",
    "peekOfCode": "UNITS_MAPPING = [\n    (1024 ** 5, \" PB\"),\n    (1024 ** 4, \" TB\"),\n    (1024 ** 3, \" GB\"),\n    (1024 ** 2, \" MB\"),\n    (1024 ** 1, \" KB\"),\n    (1024 ** 0, (\" byte\", \" bytes\")),\n]\ndef pretty_size(bytes, units=UNITS_MAPPING):\n    \"\"\"Human-readable file sizes.",
    "detail": "scrap.dirhtml",
    "documentation": {}
  },
  {
    "label": "download_all_from_user",
    "kind": 2,
    "importPath": "scrap.gist",
    "description": "scrap.gist",
    "peekOfCode": "def download_all_from_user(user: str):\n    next_page = True\n    page = 1\n    while next_page:\n        url = f\"https://api.github.com/users/{user}/gists?page={page}\"\n        response = requests.get(url)\n        if not len(response.json()):\n            next_page = False\n        else:\n            page += 1",
    "detail": "scrap.gist",
    "documentation": {}
  },
  {
    "label": "download_all",
    "kind": 2,
    "importPath": "scrap.gist",
    "description": "scrap.gist",
    "peekOfCode": "def download_all(gists: list):\n    with PoolExecutor(max_workers=10) as executor:\n        for _ in executor.map(download, gists):\n            pass\ndef download(gist):\n    target = gist[\"id\"] + hashlib.md5(gist[\"updated_at\"].encode(\"utf-8\")).hexdigest()\n    call([\"git\", \"clone\", gist[\"git_pull_url\"], target])\n    description_file = os.path.join(target, \"description.txt\")\n    with open(description_file, \"w\") as f:\n        f.write(f\"{gist['description']}\\n\")",
    "detail": "scrap.gist",
    "documentation": {}
  },
  {
    "label": "download",
    "kind": 2,
    "importPath": "scrap.gist",
    "description": "scrap.gist",
    "peekOfCode": "def download(gist):\n    target = gist[\"id\"] + hashlib.md5(gist[\"updated_at\"].encode(\"utf-8\")).hexdigest()\n    call([\"git\", \"clone\", gist[\"git_pull_url\"], target])\n    description_file = os.path.join(target, \"description.txt\")\n    with open(description_file, \"w\") as f:\n        f.write(f\"{gist['description']}\\n\")\n# Run\nuser = sys.argv[1]\ndownload_all_from_user(user)",
    "detail": "scrap.gist",
    "documentation": {}
  },
  {
    "label": "user",
    "kind": 5,
    "importPath": "scrap.gist",
    "description": "scrap.gist",
    "peekOfCode": "user = sys.argv[1]\ndownload_all_from_user(user)",
    "detail": "scrap.gist",
    "documentation": {}
  },
  {
    "label": "process_dir",
    "kind": 2,
    "importPath": "dirhtml",
    "description": "dirhtml",
    "peekOfCode": "def process_dir(top_dir, opts):\n    glob_patt = opts.filter or \"*\"\n    path_top_dir: Path\n    path_top_dir = Path(top_dir)\n    index_file = None\n    index_path = Path(path_top_dir, opts.output_file)\n    if opts.verbose:\n        print(f\"Traversing dir {path_top_dir.absolute()}\")\n    try:\n        index_file = open(index_path, \"w\")",
    "detail": "dirhtml",
    "documentation": {}
  },
  {
    "label": "pretty_size",
    "kind": 2,
    "importPath": "dirhtml",
    "description": "dirhtml",
    "peekOfCode": "def pretty_size(bytes, units=UNITS_MAPPING):\n    \"\"\"Human-readable file sizes.\n    ripped from https://pypi.python.org/pypi/hurry.filesize/\n    \"\"\"\n    for factor, suffix in units:\n        if bytes >= factor:\n            break\n    amount = int(bytes / factor)\n    if isinstance(suffix, tuple):\n        singular, multiple = suffix",
    "detail": "dirhtml",
    "documentation": {}
  },
  {
    "label": "DEFAULT_OUTPUT_FILE",
    "kind": 5,
    "importPath": "dirhtml",
    "description": "dirhtml",
    "peekOfCode": "DEFAULT_OUTPUT_FILE = \"directory.html\"\ndef process_dir(top_dir, opts):\n    glob_patt = opts.filter or \"*\"\n    path_top_dir: Path\n    path_top_dir = Path(top_dir)\n    index_file = None\n    index_path = Path(path_top_dir, opts.output_file)\n    if opts.verbose:\n        print(f\"Traversing dir {path_top_dir.absolute()}\")\n    try:",
    "detail": "dirhtml",
    "documentation": {}
  },
  {
    "label": "UNITS_MAPPING",
    "kind": 5,
    "importPath": "dirhtml",
    "description": "dirhtml",
    "peekOfCode": "UNITS_MAPPING = [\n    (1024 ** 5, \" PB\"),\n    (1024 ** 4, \" TB\"),\n    (1024 ** 3, \" GB\"),\n    (1024 ** 2, \" MB\"),\n    (1024 ** 1, \" KB\"),\n    (1024 ** 0, (\" byte\", \" bytes\")),\n]\ndef pretty_size(bytes, units=UNITS_MAPPING):\n    \"\"\"Human-readable file sizes.",
    "detail": "dirhtml",
    "documentation": {}
  },
  {
    "label": "download_all_from_user",
    "kind": 2,
    "importPath": "gist",
    "description": "gist",
    "peekOfCode": "def download_all_from_user(user: str):\n    next_page = True\n    page = 1\n    while next_page:\n        url = f\"https://api.github.com/users/{user}/gists?page={page}\"\n        response = requests.get(url)\n        if not len(response.json()):\n            next_page = False\n        else:\n            page += 1",
    "detail": "gist",
    "documentation": {}
  },
  {
    "label": "download_all",
    "kind": 2,
    "importPath": "gist",
    "description": "gist",
    "peekOfCode": "def download_all(gists: list):\n    with PoolExecutor(max_workers=10) as executor:\n        for _ in executor.map(download, gists):\n            pass\ndef download(gist):\n    target = gist[\"id\"] + hashlib.md5(gist[\"updated_at\"].encode(\"utf-8\")).hexdigest()\n    call([\"git\", \"clone\", gist[\"git_pull_url\"], target])\n    description_file = os.path.join(target, \"description.txt\")\n    with open(description_file, \"w\") as f:\n        f.write(f\"{gist['description']}\\n\")",
    "detail": "gist",
    "documentation": {}
  },
  {
    "label": "download",
    "kind": 2,
    "importPath": "gist",
    "description": "gist",
    "peekOfCode": "def download(gist):\n    target = gist[\"id\"] + hashlib.md5(gist[\"updated_at\"].encode(\"utf-8\")).hexdigest()\n    call([\"git\", \"clone\", gist[\"git_pull_url\"], target])\n    description_file = os.path.join(target, \"description.txt\")\n    with open(description_file, \"w\") as f:\n        f.write(f\"{gist['description']}\\n\")\n# Run\nuser = sys.argv[1]\ndownload_all_from_user(user)",
    "detail": "gist",
    "documentation": {}
  },
  {
    "label": "user",
    "kind": 5,
    "importPath": "gist",
    "description": "gist",
    "peekOfCode": "user = sys.argv[1]\ndownload_all_from_user(user)",
    "detail": "gist",
    "documentation": {}
  }
]
