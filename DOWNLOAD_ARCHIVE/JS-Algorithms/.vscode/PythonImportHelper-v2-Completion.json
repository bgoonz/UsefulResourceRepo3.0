[
  {
    "label": "unittest",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "unittest",
    "description": "unittest",
    "detail": "unittest",
    "documentation": {}
  },
  {
    "label": "main",
    "importPath": "unittest",
    "description": "unittest",
    "isExtraImport": true,
    "detail": "unittest",
    "documentation": {}
  },
  {
    "label": "main",
    "importPath": "unittest",
    "description": "unittest",
    "isExtraImport": true,
    "detail": "unittest",
    "documentation": {}
  },
  {
    "label": "main",
    "importPath": "unittest",
    "description": "unittest",
    "isExtraImport": true,
    "detail": "unittest",
    "documentation": {}
  },
  {
    "label": "main",
    "importPath": "unittest",
    "description": "unittest",
    "isExtraImport": true,
    "detail": "unittest",
    "documentation": {}
  },
  {
    "label": "main",
    "importPath": "unittest",
    "description": "unittest",
    "isExtraImport": true,
    "detail": "unittest",
    "documentation": {}
  },
  {
    "label": "sys",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "sys",
    "description": "sys",
    "detail": "sys",
    "documentation": {}
  },
  {
    "label": "tarfile",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "tarfile",
    "description": "tarfile",
    "detail": "tarfile",
    "documentation": {}
  },
  {
    "label": "division",
    "importPath": "__future__",
    "description": "__future__",
    "isExtraImport": true,
    "detail": "__future__",
    "documentation": {}
  },
  {
    "label": "math",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "math",
    "description": "math",
    "detail": "math",
    "documentation": {}
  },
  {
    "label": "ceil",
    "importPath": "math",
    "description": "math",
    "isExtraImport": true,
    "detail": "math",
    "documentation": {}
  },
  {
    "label": "sqrt",
    "importPath": "math",
    "description": "math",
    "isExtraImport": true,
    "detail": "math",
    "documentation": {}
  },
  {
    "label": "combinations",
    "importPath": "itertools",
    "description": "itertools",
    "isExtraImport": true,
    "detail": "itertools",
    "documentation": {}
  },
  {
    "label": "mul",
    "importPath": "operator",
    "description": "operator",
    "isExtraImport": true,
    "detail": "operator",
    "documentation": {}
  },
  {
    "label": "random",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "random",
    "description": "random",
    "detail": "random",
    "documentation": {}
  },
  {
    "label": "randint",
    "importPath": "random",
    "description": "random",
    "isExtraImport": true,
    "detail": "random",
    "documentation": {}
  },
  {
    "label": "psutil",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "psutil",
    "description": "psutil",
    "detail": "psutil",
    "documentation": {}
  },
  {
    "label": "json",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "json",
    "description": "json",
    "detail": "json",
    "documentation": {}
  },
  {
    "label": "pafy",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "pafy",
    "description": "pafy",
    "detail": "pafy",
    "documentation": {}
  },
  {
    "label": "shape_calculator",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "shape_calculator",
    "description": "shape_calculator",
    "detail": "shape_calculator",
    "documentation": {}
  },
  {
    "label": "range",
    "importPath": "builtins",
    "description": "builtins",
    "isExtraImport": true,
    "detail": "builtins",
    "documentation": {}
  },
  {
    "label": "budget",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "budget",
    "description": "budget",
    "detail": "budget",
    "documentation": {}
  },
  {
    "label": "create_spend_chart",
    "importPath": "budget",
    "description": "budget",
    "isExtraImport": true,
    "detail": "budget",
    "documentation": {}
  },
  {
    "label": "create_spend_chart",
    "importPath": "budget",
    "description": "budget",
    "isExtraImport": true,
    "detail": "budget",
    "documentation": {}
  },
  {
    "label": "re",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "re",
    "description": "re",
    "detail": "re",
    "documentation": {}
  },
  {
    "label": "arithmetic_arranger",
    "importPath": "arithmetic_arranger",
    "description": "arithmetic_arranger",
    "isExtraImport": true,
    "detail": "arithmetic_arranger",
    "documentation": {}
  },
  {
    "label": "arithmetic_arranger",
    "importPath": "arithmetic_arranger",
    "description": "arithmetic_arranger",
    "isExtraImport": true,
    "detail": "arithmetic_arranger",
    "documentation": {}
  },
  {
    "label": "prob_calculator",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "prob_calculator",
    "description": "prob_calculator",
    "detail": "prob_calculator",
    "documentation": {}
  },
  {
    "label": "copy",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "copy",
    "description": "copy",
    "detail": "copy",
    "documentation": {}
  },
  {
    "label": "add_time",
    "importPath": "time_calculator",
    "description": "time_calculator",
    "isExtraImport": true,
    "detail": "time_calculator",
    "documentation": {}
  },
  {
    "label": "add_time",
    "importPath": "time_calculator",
    "description": "time_calculator",
    "isExtraImport": true,
    "detail": "time_calculator",
    "documentation": {}
  },
  {
    "label": "BinarySearch",
    "importPath": "binary_search",
    "description": "binary_search",
    "isExtraImport": true,
    "detail": "binary_search",
    "documentation": {}
  },
  {
    "label": "time",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "time",
    "description": "time",
    "detail": "time",
    "documentation": {}
  },
  {
    "label": "deque",
    "importPath": "collections",
    "description": "collections",
    "isExtraImport": true,
    "detail": "collections",
    "documentation": {}
  },
  {
    "label": "zeros",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.all_zeros",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.all_zeros",
    "peekOfCode": "def zeros(arr, n):\n    count = 0\n    for i in range(n):\n        if arr[i] != 0:\n            arr[count] = arr[i]\n            count += 1\n    while count < n:\n        arr[count] = 0\n        count += 1\ndef print_arr(arr, n):",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.all_zeros",
    "documentation": {}
  },
  {
    "label": "print_arr",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.all_zeros",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.all_zeros",
    "peekOfCode": "def print_arr(arr, n):\n    for i in range(n):\n        print(arr[i], end=\" \")\narr = [1, 0, 0, 2, 5, 0]\nzeros(arr, len(arr))\nprint_arr(arr, len(arr))",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.all_zeros",
    "documentation": {}
  },
  {
    "label": "arr",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.all_zeros",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.all_zeros",
    "peekOfCode": "arr = [1, 0, 0, 2, 5, 0]\nzeros(arr, len(arr))\nprint_arr(arr, len(arr))",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.all_zeros",
    "documentation": {}
  },
  {
    "label": "hashString",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.anagram-detection",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.anagram-detection",
    "peekOfCode": "def hashString(str):\n    # Map characters to prime numbers to multiply\n    charMap = {\n        \"a\": 2,\n        \"b\": 3,\n        \"c\": 5,\n        \"d\": 7,\n        \"e\": 11,\n        \"f\": 13,\n        \"g\": 17,",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.anagram-detection",
    "documentation": {}
  },
  {
    "label": "anagramDetection",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.anagram-detection",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.anagram-detection",
    "peekOfCode": "def anagramDetection(parent, child):\n    length = len(child)\n    anagram = hashString(child)\n    total = 0\n    for i in range(0, len(parent) - length):\n        if hashString(parent[i : i + length]) == anagram:\n            total = total + 1\n    return total",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.anagram-detection",
    "documentation": {}
  },
  {
    "label": "SortAnagram",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.Anagram",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.Anagram",
    "peekOfCode": "def SortAnagram(arr):\n    temp = []\n    stage = []\n    dic = []\n    for i in arr:\n        for j in i:\n            stage.append(j)\n        stage.sort()\n        temp.append(\"\".join(stage))\n        stage = []",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.Anagram",
    "documentation": {}
  },
  {
    "label": "arr",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.Anagram",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.Anagram",
    "peekOfCode": "arr = [\"cat\", \"dog\", \"tac\", \"god\", \"act\"]\nSortAnagram(arr)",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.Anagram",
    "documentation": {}
  },
  {
    "label": "array_pair_sum_tests",
    "kind": 6,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.array-pair-sum",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.array-pair-sum",
    "peekOfCode": "class array_pair_sum_tests(unittest.TestCase):\n    def setUp(self):\n        self.arr1 = [3, 4, 5, 6, 7]\n        self.arr2 = [3, 4, 5, 4, 4]\n        self.result1 = [[3, 7], [4, 6]]\n        self.result2 = [[3, 5], [4, 4], [4, 4], [4, 4]]\n    def test_one(self):\n        self.assertEqual(array_pair_sum_iterative(self.arr1, 10), self.result1)\n        self.assertEqual(array_pair_sum_sort(self.arr1, 10), self.result1)\n        self.assertEqual(array_pair_sum_hash_table(self.arr1, 10), self.result1)",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.array-pair-sum",
    "documentation": {}
  },
  {
    "label": "array_pair_sum_iterative",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.array-pair-sum",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.array-pair-sum",
    "peekOfCode": "def array_pair_sum_iterative(arr, k):\n    \"\"\"\n    returns the array of pairs using an iterative method.\n    complexity: O(n^2)\n    \"\"\"\n    result = []\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == k:\n                result.append([arr[i], arr[j]])",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.array-pair-sum",
    "documentation": {}
  },
  {
    "label": "array_pair_sum_sort",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.array-pair-sum",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.array-pair-sum",
    "peekOfCode": "def array_pair_sum_sort(arr, k):\n    \"\"\"\n    first sort the array and then use binary search to find pairs.\n    complexity: O(nlogn)\n    \"\"\"\n    result = []\n    arr.sort()\n    for i in range(len(arr)):\n        if k - arr[i] in arr[i + 1 :]:\n            result.append([arr[i], k - arr[i]])",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.array-pair-sum",
    "documentation": {}
  },
  {
    "label": "array_pair_sum_hash_table",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.array-pair-sum",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.array-pair-sum",
    "peekOfCode": "def array_pair_sum_hash_table(arr, k):\n    \"\"\"\n    Use a hash table to store array elements of pairs.\n    complexity: O(n)\n    \"\"\"\n    result = []\n    hash_table = {}\n    for e in arr:\n        if e in hash_table:\n            result.append([k - e, e])",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.array-pair-sum",
    "documentation": {}
  },
  {
    "label": "balancedBrackets",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.balanced-brackets",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.balanced-brackets",
    "peekOfCode": "def balancedBrackets(string):\n    stack = []\n    # Process every character on input\n    for char in string:\n        # Assign an initial value in case the stack is empty\n        last = 0\n        # Assign the value of the last element if stack is not empty\n        if stack:\n            last = stack[len(stack) - 1]\n        if stack and last in brackets and brackets[last] == char:",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.balanced-brackets",
    "documentation": {}
  },
  {
    "label": "brackets",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.balanced-brackets",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.balanced-brackets",
    "peekOfCode": "brackets = {\"(\": \")\", \"{\": \"}\", \"[\": \"]\"}\n# On each input string, process it using the balance checker\ndef balancedBrackets(string):\n    stack = []\n    # Process every character on input\n    for char in string:\n        # Assign an initial value in case the stack is empty\n        last = 0\n        # Assign the value of the last element if stack is not empty\n        if stack:",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.balanced-brackets",
    "documentation": {}
  },
  {
    "label": "balance",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.balance_parenthisis",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.balance_parenthisis",
    "peekOfCode": "def balance(arr):\n    open_bracket = [\"[\", \"{\", \"(\"]\n    close_bracket = [\"]\", \"}\", \")\"]\n    stack = []\n    for i in arr:\n        if i in open_bracket:\n            stack.append(i)\n        elif i in close_bracket:\n            pos = close_bracket.index(i)\n            if len(stack) >= 0 and (open_bracket[pos] == stack[len(stack) - 1]):",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.balance_parenthisis",
    "documentation": {}
  },
  {
    "label": "arr",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.balance_parenthisis",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.balance_parenthisis",
    "peekOfCode": "arr = [\"{\", \"[\", \"]\", \"}\"]\nprint(balance(arr))",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.balance_parenthisis",
    "documentation": {}
  },
  {
    "label": "binary_search_iterative",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.binary_search",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.binary_search",
    "peekOfCode": "def binary_search_iterative(arr, l, r, x):\n    while l <= r:\n        mid = l + (r - l) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            l = mid + 1\n        else:\n            l = r - 1\n    return -1",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.binary_search",
    "documentation": {}
  },
  {
    "label": "binary_search_recursive",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.binary_search",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.binary_search",
    "peekOfCode": "def binary_search_recursive(arr, l, r, x):\n    if l <= r:\n        mid = l + (r - l) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            return binary_search_recursive(arr, mid + 1, r, x)\n        else:\n            return binary_search_recursive(arr, l, mid - 1, x)\n    else:",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.binary_search",
    "documentation": {}
  },
  {
    "label": "arr",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.binary_search",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.binary_search",
    "peekOfCode": "arr = [1, 2, 3, 4, 5, 6]\nx = 5\nprint(\"iterative approach to find element using\")\ndef binary_search_iterative(arr, l, r, x):\n    while l <= r:\n        mid = l + (r - l) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            l = mid + 1",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.binary_search",
    "documentation": {}
  },
  {
    "label": "x",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.binary_search",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.binary_search",
    "peekOfCode": "x = 5\nprint(\"iterative approach to find element using\")\ndef binary_search_iterative(arr, l, r, x):\n    while l <= r:\n        mid = l + (r - l) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            l = mid + 1\n        else:",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.binary_search",
    "documentation": {}
  },
  {
    "label": "result_iterative",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.binary_search",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.binary_search",
    "peekOfCode": "result_iterative = binary_search_iterative(arr, 0, len(arr) - 1, x)\nif result_iterative != -1:\n    print(\"element found: \" + str(result_iterative))\nelse:\n    print(\"not found\")\nprint(\"#########################################\")\nprint(\"recursive approach to find element using\")\ndef binary_search_recursive(arr, l, r, x):\n    if l <= r:\n        mid = l + (r - l) // 2",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.binary_search",
    "documentation": {}
  },
  {
    "label": "result_recursive",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.binary_search",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.binary_search",
    "peekOfCode": "result_recursive = binary_search_recursive(arr, 0, len(arr) - 1, x)\nif result_iterative != -1:\n    print(\"element found: \" + str(result_recursive))\nelse:\n    print(\"not found\")",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.binary_search",
    "documentation": {}
  },
  {
    "label": "bubble_sort",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.buble_sort",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.buble_sort",
    "peekOfCode": "def bubble_sort(arr, n):\n    for i in range(n):\n        for j in range(0, n - i - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n    return arr\narr = [64, 34, 25, 12, 22, 11, 90]\nresult = bubble_sort(arr, len(arr))\nprint(result)",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.buble_sort",
    "documentation": {}
  },
  {
    "label": "arr",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.buble_sort",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.buble_sort",
    "peekOfCode": "arr = [64, 34, 25, 12, 22, 11, 90]\nresult = bubble_sort(arr, len(arr))\nprint(result)",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.buble_sort",
    "documentation": {}
  },
  {
    "label": "result",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.buble_sort",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.buble_sort",
    "peekOfCode": "result = bubble_sort(arr, len(arr))\nprint(result)",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.buble_sort",
    "documentation": {}
  },
  {
    "label": "orangesRotting",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.celeb",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.celeb",
    "peekOfCode": "def orangesRotting(elemnts):\n    if not elemnts or len(elemnts) == 0:\n        return 0\n    n = len(elemnts)\n    m = len(elemnts[0])\n    rotten = []\n    for i in range(n):\n        for j in range(m):\n            if elemnts[i][j] == 2:\n                rotten.append((i, j))",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.celeb",
    "documentation": {}
  },
  {
    "label": "f",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.convert-array",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.convert-array",
    "peekOfCode": "def f(arr):\n    \"\"\"sorts the array by numbers in place using constant extra space\"\"\"\n    position = 0\n    for i in xrange(len(arr) / 3):\n        gap = (len(arr) - position) / 3\n        arr.insert(position + 1, arr.pop(position + gap * 1))\n        arr.insert(position + 2, arr.pop(position + gap * 2))\n        position += 3\n    return arr",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.convert-array",
    "documentation": {}
  },
  {
    "label": "CountChar",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.Count the characters ",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.Count the characters ",
    "peekOfCode": "def CountChar(String, Occurance):\n    STROCR = {}\n    RESULT = []\n    for i in range(len(String)):\n        if String[i] in STROCR.keys():\n            STROCR[String[i]] += 1\n        else:\n            STROCR[String[i]] = 1\n    for j in STROCR.keys():\n        if STROCR[j] == Occurance:",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.Count the characters ",
    "documentation": {}
  },
  {
    "label": "String",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.Count the characters ",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.Count the characters ",
    "peekOfCode": "String = \"geeksforgeeks\"\nOccurance = 2\nCountChar(String, Occurance)",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.Count the characters ",
    "documentation": {}
  },
  {
    "label": "Occurance",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.Count the characters ",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.Count the characters ",
    "peekOfCode": "Occurance = 2\nCountChar(String, Occurance)",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.Count the characters ",
    "documentation": {}
  },
  {
    "label": "countingValleys",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.Counting_Valleys",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.Counting_Valleys",
    "peekOfCode": "def countingValleys(steps, path):\n    # Write your code here\n    path = list(path)\n    sealevel = valley = 0\n    for paths in path:\n        if paths == \"U\":\n            sealevel += 1\n        else:\n            sealevel -= 1\n        if paths == \"U\" and sealevel == 0:",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.Counting_Valleys",
    "documentation": {}
  },
  {
    "label": "path",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.Counting_Valleys",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.Counting_Valleys",
    "peekOfCode": "path = \"UDDDUDUU\"\nsteps = 8\nprint(countingValleys(steps, path))",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.Counting_Valleys",
    "documentation": {}
  },
  {
    "label": "steps",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.Counting_Valleys",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.Counting_Valleys",
    "peekOfCode": "steps = 8\nprint(countingValleys(steps, path))",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.Counting_Valleys",
    "documentation": {}
  },
  {
    "label": "cyclic_rotation",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.cyclic_rotation",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.cyclic_rotation",
    "peekOfCode": "def cyclic_rotation(arr, n):\n    temp = arr[n - 1]\n    for i in range(n - 1, 0, -1):\n        arr[i] = arr[i - 1]\n    arr[0] = temp\ndef print_array(arr, n):\n    for i in range(n):\n        print(arr[i])\narr = [1, 2, 3, 4, 5]\ncyclic_rotation(arr, 5)",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.cyclic_rotation",
    "documentation": {}
  },
  {
    "label": "print_array",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.cyclic_rotation",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.cyclic_rotation",
    "peekOfCode": "def print_array(arr, n):\n    for i in range(n):\n        print(arr[i])\narr = [1, 2, 3, 4, 5]\ncyclic_rotation(arr, 5)\nprint_array(arr, 5)",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.cyclic_rotation",
    "documentation": {}
  },
  {
    "label": "arr",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.cyclic_rotation",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.cyclic_rotation",
    "peekOfCode": "arr = [1, 2, 3, 4, 5]\ncyclic_rotation(arr, 5)\nprint_array(arr, 5)",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.cyclic_rotation",
    "documentation": {}
  },
  {
    "label": "Dis_array",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.Distinct Digit Array",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.Distinct Digit Array",
    "peekOfCode": "def Dis_array(arr):\n    dup = []\n    for i in arr:\n        length = len(str(i))\n        i = str(i)\n        for j in range(length):\n            if i[j] in dup:\n                pass\n            else:\n                dup.append(i[j])",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.Distinct Digit Array",
    "documentation": {}
  },
  {
    "label": "arr",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.Distinct Digit Array",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.Distinct Digit Array",
    "peekOfCode": "arr = [131, 11, 48]\nDis_array(arr)",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.Distinct Digit Array",
    "documentation": {}
  },
  {
    "label": "Stack",
    "kind": 6,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.Doubling_stack",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.Doubling_stack",
    "peekOfCode": "class Stack:\n    def __init__(self, limit=10):\n        self.stack = []\n        self.limit = limit\n    def push(self, n):\n        if len(self.stack) > self.limit:\n            self.doublelimit()\n        else:\n            self.stack.append(n)\n    def pop(self):",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.Doubling_stack",
    "documentation": {}
  },
  {
    "label": "sta",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.Doubling_stack",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.Doubling_stack",
    "peekOfCode": "sta = Stack(5)\nsta.push(1)\nsta.push(2)\nsta.push(1)\nsta.push(2)\nsta.push(2)\nsta.push(2)\nsta.PrintStack()\nsta.Length()",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.Doubling_stack",
    "documentation": {}
  },
  {
    "label": "duplicate_removal",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.duplicate_removal",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.duplicate_removal",
    "peekOfCode": "def duplicate_removal(arr):\n    dictonary = {}\n    for i in arr:\n        if i in dictonary:\n            dictonary[i] = dictonary[i] + 1\n        else:\n            dictonary[i] = 1\n    return dictonary.keys()\narr = [1, 2, 2, 3, 4, 5, 5, 6, 7]\nprint(int(len(list(duplicate_removal(arr)))))",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.duplicate_removal",
    "documentation": {}
  },
  {
    "label": "arr",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.duplicate_removal",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.duplicate_removal",
    "peekOfCode": "arr = [1, 2, 2, 3, 4, 5, 5, 6, 7]\nprint(int(len(list(duplicate_removal(arr)))))",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.duplicate_removal",
    "documentation": {}
  },
  {
    "label": "even_occuring_element",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.even-occuring-element",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.even-occuring-element",
    "peekOfCode": "def even_occuring_element(arr):\n    \"\"\"Returns the even occuring element within a list of integers\"\"\"\n    dict = {}\n    for num in arr:\n        if num in dict:\n            dict[num] += 1\n        else:\n            dict[num] = 1\n    for num in dict:\n        if not dict[num] & 1:  # bitwise check for parity.",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.even-occuring-element",
    "documentation": {}
  },
  {
    "label": "find",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.exists_in",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.exists_in",
    "peekOfCode": "def find(arr, search, n):\n    for i in range(n):\n        if arr[i] == search:\n            return True\n            break\narr = [1, 2, 3, 4, 5, 6]\nsearch = 4\nprint(find(arr, search, 6))",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.exists_in",
    "documentation": {}
  },
  {
    "label": "arr",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.exists_in",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.exists_in",
    "peekOfCode": "arr = [1, 2, 3, 4, 5, 6]\nsearch = 4\nprint(find(arr, search, 6))",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.exists_in",
    "documentation": {}
  },
  {
    "label": "search",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.exists_in",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.exists_in",
    "peekOfCode": "search = 4\nprint(find(arr, search, 6))",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.exists_in",
    "documentation": {}
  },
  {
    "label": "fname",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.extract",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.extract",
    "peekOfCode": "fname = \"spark-3.0.2-bin-hadoop2.7.tgz\"\nif fname.endswith(\"tgz\"):\n    tar = tarfile.open(\n        \"C:\\\\Users\\\\ag16000\\Downloads\\\\spark-3.0.2-bin-hadoop2.7.tgz\", \"r:gz\"\n    )\n    tar.extractall()\n    tar.close()\nelif fname.endswith(\"tar\"):\n    tar = tarfile.open(\n        \"C:\\\\Users\\\\ag16000\\Downloads\\\\spark-3.0.2-bin-hadoop2.7.tgz\", \"r:\"",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.extract",
    "documentation": {}
  },
  {
    "label": "factorial_iterative",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.factorial",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.factorial",
    "peekOfCode": "def factorial_iterative(num):\n    \"\"\"returns the factorial of num using an iterative method.\"\"\"\n    factor = 1\n    for i in xrange(1, num + 1):\n        factor *= i\n    return factor\ndef factorial_reduce(num):\n    \"\"\"returns the factorial of num using a reduce (shortest method).\"\"\"\n    return reduce(lambda x, y: x * y, range(1, num + 1))\ndef factorial_recursive(num):",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.factorial",
    "documentation": {}
  },
  {
    "label": "factorial_reduce",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.factorial",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.factorial",
    "peekOfCode": "def factorial_reduce(num):\n    \"\"\"returns the factorial of num using a reduce (shortest method).\"\"\"\n    return reduce(lambda x, y: x * y, range(1, num + 1))\ndef factorial_recursive(num):\n    \"\"\"returns the factorial of num using a recursive method.\"\"\"\n    if num == 1:\n        return 1\n    return num * factorial_recursive(num - 1)",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.factorial",
    "documentation": {}
  },
  {
    "label": "factorial_recursive",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.factorial",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.factorial",
    "peekOfCode": "def factorial_recursive(num):\n    \"\"\"returns the factorial of num using a recursive method.\"\"\"\n    if num == 1:\n        return 1\n    return num * factorial_recursive(num - 1)",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.factorial",
    "documentation": {}
  },
  {
    "label": "fibonacci_iterative",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.fibonacci",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.fibonacci",
    "peekOfCode": "def fibonacci_iterative(limit):\n    \"\"\"fibonacci sequence using an iterative approach.\"\"\"\n    a, b = 0, 1\n    for i in xrange(limit):\n        a, b = b, a + b\n    return a\ndef fibonacci_recursive(limit):\n    \"\"\"fibonacci sequence using a recusive approach.\"\"\"\n    if limit <= 1:\n        return limit",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.fibonacci",
    "documentation": {}
  },
  {
    "label": "fibonacci_recursive",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.fibonacci",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.fibonacci",
    "peekOfCode": "def fibonacci_recursive(limit):\n    \"\"\"fibonacci sequence using a recusive approach.\"\"\"\n    if limit <= 1:\n        return limit\n    return fibonacci_recursive(limit - 1) + fibonacci_recursive(limit - 2)\ndef fibonacci_reduce(limit):\n    \"\"\"fibonacci sequence using reduce (shortest option).\"\"\"\n    return reduce(lambda x, y: x + [x[y] + x[y - 1]], range(1, limit), [0, 1])[-1]\ndef fibonacci_comprehension(limit):\n    \"\"\"fibonacci sequence using a list comprehension.\"\"\"",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.fibonacci",
    "documentation": {}
  },
  {
    "label": "fibonacci_reduce",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.fibonacci",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.fibonacci",
    "peekOfCode": "def fibonacci_reduce(limit):\n    \"\"\"fibonacci sequence using reduce (shortest option).\"\"\"\n    return reduce(lambda x, y: x + [x[y] + x[y - 1]], range(1, limit), [0, 1])[-1]\ndef fibonacci_comprehension(limit):\n    \"\"\"fibonacci sequence using a list comprehension.\"\"\"\n    sequence = [0, 1]\n    [sequence.append(sequence[i] + sequence[i - 1]) for i in range(1, limit)]\n    return sequence[-1]",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.fibonacci",
    "documentation": {}
  },
  {
    "label": "fibonacci_comprehension",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.fibonacci",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.fibonacci",
    "peekOfCode": "def fibonacci_comprehension(limit):\n    \"\"\"fibonacci sequence using a list comprehension.\"\"\"\n    sequence = [0, 1]\n    [sequence.append(sequence[i] + sequence[i - 1]) for i in range(1, limit)]\n    return sequence[-1]",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.fibonacci",
    "documentation": {}
  },
  {
    "label": "fib_series",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.fib_series",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.fib_series",
    "peekOfCode": "def fib_series(count):\n    a = 0\n    b = 1\n    c = 1\n    for i in range(count):\n        a = b\n        b = c\n        c = a + b\n        print(a)\nfib_series(10)",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.fib_series",
    "documentation": {}
  },
  {
    "label": "findDuplicate",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.Find the Duplicate Number",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.Find the Duplicate Number",
    "peekOfCode": "def findDuplicate(arr):\n    for i in range(len(arr)):\n        if arr[i] == arr[i + 1]:\n            return arr[i]\n        else:\n            pass\narr = [1, 3, 4, 2, 2]\nprint(findDuplicate(arr))",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.Find the Duplicate Number",
    "documentation": {}
  },
  {
    "label": "arr",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.Find the Duplicate Number",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.Find the Duplicate Number",
    "peekOfCode": "arr = [1, 3, 4, 2, 2]\nprint(findDuplicate(arr))",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.Find the Duplicate Number",
    "documentation": {}
  },
  {
    "label": "difference_set",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.find-missing-element",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.find-missing-element",
    "peekOfCode": "def difference_set(orig, shuffled):\n    \"\"\"finds the missing element using a set.\"\"\"\n    return set(orig).difference(set(shuffled)).pop()\ndef difference_iterative(orig, shuffled):\n    \"\"\"finds the missing element by iterating over the list\"\"\"\n    for x in orig:\n        if not x in shuffled:\n            return x",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.find-missing-element",
    "documentation": {}
  },
  {
    "label": "difference_iterative",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.find-missing-element",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.find-missing-element",
    "peekOfCode": "def difference_iterative(orig, shuffled):\n    \"\"\"finds the missing element by iterating over the list\"\"\"\n    for x in orig:\n        if not x in shuffled:\n            return x",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.find-missing-element",
    "documentation": {}
  },
  {
    "label": "first_non_repeated_character",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.first-non-repeated-character",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.first-non-repeated-character",
    "peekOfCode": "def first_non_repeated_character(str):\n    \"\"\"finds the first character in a string that's not repreated\"\"\"\n    for i, char in enumerate(str):\n        if i - 1 >= 0 and char == str[i - 1]:\n            continue\n        if i + 1 < len(str) and char == str[i + 1]:\n            continue\n        return char",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.first-non-repeated-character",
    "documentation": {}
  },
  {
    "label": "left_search",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.first_occurance",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.first_occurance",
    "peekOfCode": "def left_search(arr, low, high, x):\n    temp = -1\n    while low <= high:\n        mid = low + (high - low) // 2\n        if arr[mid] > x:\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            temp = mid",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.first_occurance",
    "documentation": {}
  },
  {
    "label": "right_search",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.first_occurance",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.first_occurance",
    "peekOfCode": "def right_search(arr, low, high, x):\n    temp = -1\n    while low <= high:\n        mid = low + (high - low) // 2\n        if arr[mid] > x:\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            temp = mid",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.first_occurance",
    "documentation": {}
  },
  {
    "label": "arr",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.first_occurance",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.first_occurance",
    "peekOfCode": "arr = [1, 4, 4, 4, 5, 6, 7]\nl_result = left_search(arr, 0, len(arr), 4)\nr_result = right_search(arr, 0, len(arr), 4)\nprint(\"first occurance:\" + str(l_result))\nprint(\"last occurance: \" + str(r_result))",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.first_occurance",
    "documentation": {}
  },
  {
    "label": "l_result",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.first_occurance",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.first_occurance",
    "peekOfCode": "l_result = left_search(arr, 0, len(arr), 4)\nr_result = right_search(arr, 0, len(arr), 4)\nprint(\"first occurance:\" + str(l_result))\nprint(\"last occurance: \" + str(r_result))",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.first_occurance",
    "documentation": {}
  },
  {
    "label": "r_result",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.first_occurance",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.first_occurance",
    "peekOfCode": "r_result = right_search(arr, 0, len(arr), 4)\nprint(\"first occurance:\" + str(l_result))\nprint(\"last occurance: \" + str(r_result))",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.first_occurance",
    "documentation": {}
  },
  {
    "label": "flatten_array",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.flatten-array",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.flatten-array",
    "peekOfCode": "def flatten_array(orig):\n    \"\"\"returns a new, flattened, list\"\"\"\n    flattened_list = []\n    for item in orig:\n        if isinstance(item, list):\n            flattened_list += flatten_array(item)\n        else:\n            flattened_list.append(item)\n    return flattened_list\ndef flatten_in_place(orig):",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.flatten-array",
    "documentation": {}
  },
  {
    "label": "flatten_in_place",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.flatten-array",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.flatten-array",
    "peekOfCode": "def flatten_in_place(orig):\n    \"\"\"flattens a given list in place\"\"\"\n    is_flattened = False\n    while not is_flattened:  # iterating until no more lists are found\n        is_flattened = True\n        for i, item in enumerate(orig):\n            if isinstance(item, list):\n                is_flattened = False\n                orig = orig[:i] + item + orig[i + 1 :]\n    return orig",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.flatten-array",
    "documentation": {}
  },
  {
    "label": "jumpingOnClouds",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.Jumping_on_the_Clouds",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.Jumping_on_the_Clouds",
    "peekOfCode": "def jumpingOnClouds(c):\n    i = counter = 0\n    length = len(c)\n    while i < length - 1:\n        if c[i + 2] == 0:\n            i += 2\n        else:\n            i += 1\n        counter += 1\n    return counter",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.Jumping_on_the_Clouds",
    "documentation": {}
  },
  {
    "label": "arr",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.Jumping_on_the_Clouds",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.Jumping_on_the_Clouds",
    "peekOfCode": "arr = [0, 0, 0, 0, 1, 0]\nprint(jumpingOnClouds(arr))",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.Jumping_on_the_Clouds",
    "documentation": {}
  },
  {
    "label": "kidsWithCandies",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.Kids With the Greatest Number of Candies",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.Kids With the Greatest Number of Candies",
    "peekOfCode": "def kidsWithCandies(candies, extraCandies):\n    temp_array = []\n    max_element = max(candies)\n    for i in candies:\n        temp = i + extraCandies\n        if max_element <= temp:\n            temp_array.append(True)\n        else:\n            temp_array.append(False)\n    return temp_array",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.Kids With the Greatest Number of Candies",
    "documentation": {}
  },
  {
    "label": "candies",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.Kids With the Greatest Number of Candies",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.Kids With the Greatest Number of Candies",
    "peekOfCode": "candies = [2, 3, 5, 1, 3]\nextraCandies = 3\nprint(kidsWithCandies(candies, extraCandies))",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.Kids With the Greatest Number of Candies",
    "documentation": {}
  },
  {
    "label": "extraCandies",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.Kids With the Greatest Number of Candies",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.Kids With the Greatest Number of Candies",
    "peekOfCode": "extraCandies = 3\nprint(kidsWithCandies(candies, extraCandies))",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.Kids With the Greatest Number of Candies",
    "documentation": {}
  },
  {
    "label": "kthSmallest",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.Kth smallest element",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.Kth smallest element",
    "peekOfCode": "def kthSmallest(arr, l, r, k):\n    if k > 0 and k <= r - l + 1:\n        pos = randomPartition(arr, l, r)\n        if pos - l == k - 1:\n            return arr[pos]\n        if pos - l > k - 1:\n            return kthSmallest(arr, l, pos - 1, k)\n        return kthSmallest(arr, pos + 1, r, k - pos + l - 1)\n    return 999999999999\ndef swap(arr, a, b):",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.Kth smallest element",
    "documentation": {}
  },
  {
    "label": "swap",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.Kth smallest element",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.Kth smallest element",
    "peekOfCode": "def swap(arr, a, b):\n    temp = arr[a]\n    arr[a] = arr[b]\n    arr[b] = temp\ndef partition(arr, l, r):\n    x = arr[r]\n    i = l\n    for j in range(l, r):\n        if arr[j] <= x:\n            swap(arr, i, j)",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.Kth smallest element",
    "documentation": {}
  },
  {
    "label": "partition",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.Kth smallest element",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.Kth smallest element",
    "peekOfCode": "def partition(arr, l, r):\n    x = arr[r]\n    i = l\n    for j in range(l, r):\n        if arr[j] <= x:\n            swap(arr, i, j)\n            i += 1\n    swap(arr, i, r)\n    return i\ndef randomPartition(arr, l, r):",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.Kth smallest element",
    "documentation": {}
  },
  {
    "label": "randomPartition",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.Kth smallest element",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.Kth smallest element",
    "peekOfCode": "def randomPartition(arr, l, r):\n    n = r - l + 1\n    pivot = int(random.random() % n)\n    swap(arr, l + pivot, r)\n    return partition(arr, l, r)",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.Kth smallest element",
    "documentation": {}
  },
  {
    "label": "kth_array",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.kth_largest",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.kth_largest",
    "peekOfCode": "def kth_array(arr, n):\n    arr.sort(reverse=True)\n    for i in range(n):\n        print(arr[i])\narr = [1, 23, 12, 9, 30, 2, 50]\nkth_array(arr, 3)",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.kth_largest",
    "documentation": {}
  },
  {
    "label": "arr",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.kth_largest",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.kth_largest",
    "peekOfCode": "arr = [1, 23, 12, 9, 30, 2, 50]\nkth_array(arr, 3)",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.kth_largest",
    "documentation": {}
  },
  {
    "label": "largest_continuous_sum",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.largest-continuous-sum",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.largest-continuous-sum",
    "peekOfCode": "def largest_continuous_sum(arr):\n    \"\"\"returns the highest sum of a continuous sequence in a given list\"\"\"\n    largest = 0\n    queue = []\n    for num in arr:\n        if len(queue) > 0 and queue[-1] + 1 != num:\n            sum = reduce(lambda x, y: x + y, queue)\n            if largest < sum:\n                largest = sum\n            queue = []",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.largest-continuous-sum",
    "documentation": {}
  },
  {
    "label": "addTwoNumbers",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.leet_1",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.leet_1",
    "peekOfCode": "def addTwoNumbers(l1, l2):\n    l1.reverse()\n    l2.reverse()\n    con_1 = \"\"\n    con_2 = \"\"\n    for i in l1:\n        con_1 += str(i)\n    for i in l2:\n        con_2 += str(i)\n    result = int(con_1) + int(con_2)",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.leet_1",
    "documentation": {}
  },
  {
    "label": "l1",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.leet_1",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.leet_1",
    "peekOfCode": "l1 = [2, 4, 3]\nl2 = [5, 6, 4]\nresult = addTwoNumbers(l1, l2)\nprint(result)",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.leet_1",
    "documentation": {}
  },
  {
    "label": "l2",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.leet_1",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.leet_1",
    "peekOfCode": "l2 = [5, 6, 4]\nresult = addTwoNumbers(l1, l2)\nprint(result)",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.leet_1",
    "documentation": {}
  },
  {
    "label": "result",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.leet_1",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.leet_1",
    "peekOfCode": "result = addTwoNumbers(l1, l2)\nprint(result)",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.leet_1",
    "documentation": {}
  },
  {
    "label": "Node",
    "kind": 6,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.linked_list",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.linked_list",
    "peekOfCode": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n    def PrintList(self):\n        if self.head is not None:\n            itr = self.head",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.linked_list",
    "documentation": {}
  },
  {
    "label": "LinkedList",
    "kind": 6,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.linked_list",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.linked_list",
    "peekOfCode": "class LinkedList:\n    def __init__(self):\n        self.head = None\n    def PrintList(self):\n        if self.head is not None:\n            itr = self.head\n            while itr:\n                print(itr.data, end=\"-->\")\n                itr = itr.next\nif __name__ == \"__main__\":",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.linked_list",
    "documentation": {}
  },
  {
    "label": "getSumOfMultiple",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.multiples-of-3-and-5",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.multiples-of-3-and-5",
    "peekOfCode": "def getSumOfMultiple(num, limit):\n    return int((ceil(limit / num) - 1) * ceil(limit / num) * num / 2)\ndef getSumOfMultiples(multiples, limit):\n    result = 0\n    sign = 1\n    for i in range(1, len(multiples) + 1):\n        for x in combinations(multiples, i):\n            result += sign * getSumOfMultiple(reduce(mul, x, 1), limit)\n        sign *= -1\n    return result",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.multiples-of-3-and-5",
    "documentation": {}
  },
  {
    "label": "getSumOfMultiples",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.multiples-of-3-and-5",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.multiples-of-3-and-5",
    "peekOfCode": "def getSumOfMultiples(multiples, limit):\n    result = 0\n    sign = 1\n    for i in range(1, len(multiples) + 1):\n        for x in combinations(multiples, i):\n            result += sign * getSumOfMultiple(reduce(mul, x, 1), limit)\n        sign *= -1\n    return result",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.multiples-of-3-and-5",
    "documentation": {}
  },
  {
    "label": "once",
    "kind": 6,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.once",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.once",
    "peekOfCode": "class once:\n    def __init__(self, func, times=1):\n        self.times = int(times)\n        self.func = func\n    def __call__(self, *args, **kwargs):\n        if self.times > 0:\n            self.times -= 1\n            return self.func(*args, **kwargs)",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.once",
    "documentation": {}
  },
  {
    "label": "is_prime",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.prime-number",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.prime-number",
    "peekOfCode": "def is_prime(n):\n    if n <= 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    for i in xrange(3, int(sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.prime-number",
    "documentation": {}
  },
  {
    "label": "quickSort",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.quick-sort",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.quick-sort",
    "peekOfCode": "def quickSort(lst):\n    # List of 0 or 1 items is already sorted\n    if len(lst) <= 1:\n        return lst\n    else:\n        # Pivot can be chosen randomly\n        pivotIndex = randint(0, len(lst) - 1)\n        pivot = lst[pivotIndex]\n        # Elements lower than and greater than pivot\n        lesser, greater = [], []",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.quick-sort",
    "documentation": {}
  },
  {
    "label": "sorted_rotation",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.sorted_array_rotation",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.sorted_array_rotation",
    "peekOfCode": "def sorted_rotation(arr, low, high, n):\n    while low < high:\n        if arr[low] <= arr[high]:\n            return low\n        mid = low + (high - low) // 2\n        next = (mid + 1) % n\n        prev = (mid + n - 1) % n\n        if arr[mid] < arr[next] and arr[mid] < arr[prev]:\n            return mid\n        elif arr[mid] <= arr[high]:",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.sorted_array_rotation",
    "documentation": {}
  },
  {
    "label": "arr",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.sorted_array_rotation",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.sorted_array_rotation",
    "peekOfCode": "arr = [6, 7, 8, 9, 1, 2, 3, 4, 5]\nresult = sorted_rotation(arr, 0, len(arr) - 1, len(arr))\nprint(\"array is rotated by : \" + result)",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.sorted_array_rotation",
    "documentation": {}
  },
  {
    "label": "result",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.sorted_array_rotation",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.sorted_array_rotation",
    "peekOfCode": "result = sorted_rotation(arr, 0, len(arr) - 1, len(arr))\nprint(\"array is rotated by : \" + result)",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.sorted_array_rotation",
    "documentation": {}
  },
  {
    "label": "sort_num",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.sort_0_1_2",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.sort_0_1_2",
    "peekOfCode": "def sort_num(arr, n):\n    cnt0 = 0\n    cnt1 = 0\n    cnt2 = 0\n    for i in range(n):\n        if arr[i] == 0:\n            cnt0 += 1\n        elif arr[i] == 1:\n            cnt1 += 1\n        elif arr[i] == 2:",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.sort_0_1_2",
    "documentation": {}
  },
  {
    "label": "print_arr",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.sort_0_1_2",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.sort_0_1_2",
    "peekOfCode": "def print_arr(arr, n):\n    for i in range(n):\n        print(arr[i], end=\" \")\narr = [0, 1, 2, 0, 1, 2]\nn = len(arr)\nsort_num(arr, n)\nprint_arr(arr, n)",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.sort_0_1_2",
    "documentation": {}
  },
  {
    "label": "arr",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.sort_0_1_2",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.sort_0_1_2",
    "peekOfCode": "arr = [0, 1, 2, 0, 1, 2]\nn = len(arr)\nsort_num(arr, n)\nprint_arr(arr, n)",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.sort_0_1_2",
    "documentation": {}
  },
  {
    "label": "n",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.sort_0_1_2",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.sort_0_1_2",
    "peekOfCode": "n = len(arr)\nsort_num(arr, n)\nprint_arr(arr, n)",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.sort_0_1_2",
    "documentation": {}
  },
  {
    "label": "sprialMatrix",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.sprial_rotation",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.sprial_rotation",
    "peekOfCode": "def sprialMatrix(arr, m, n):\n    k = 0\n    l = 0\n    while k < m and l < n:\n        for i in range(l, n):\n            print(arr[k][i], end=\" \")\n        k += 1\n        for i in range(k, m):\n            print(arr[i][n - 1], end=\" \")\n        n -= 1",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.sprial_rotation",
    "documentation": {}
  },
  {
    "label": "Stack",
    "kind": 6,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.stack_imply",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.stack_imply",
    "peekOfCode": "class Stack:\n    # initialize the constructor of empty array\n    def __init__(self, arr, limit):\n        self.arr = arr\n        self.arr = []\n        self.limit = limit\n    # defining an method to get all the elements in the que\n    def print_elements(self):\n        for i in range(len(self.arr)):\n            print(self.arr[i])",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.stack_imply",
    "documentation": {}
  },
  {
    "label": "sta",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.stack_imply",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.stack_imply",
    "peekOfCode": "sta = Stack([], 4)\n# pushing an element to the array\nsta.push(1)\nsta.push(2)\nsta.push(1)\nsta.push(2)\nsta.push(2)\nsta.push(2)\n# printing all the elements in the stack\nsta.print_elements()",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.stack_imply",
    "documentation": {}
  },
  {
    "label": "Stack",
    "kind": 6,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.stack_max_o(1)",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.stack_max_o(1)",
    "peekOfCode": "class Stack:\n    # initialize the constructor of empty array\n    def __init__(self, arr, limit):\n        self.arr = arr\n        self.arr = []\n        self.limit = limit\n        self.max_array = []\n    # defining an method to get all the elements in the que\n    def print_elements(self):\n        for i in range(len(self.arr)):",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.stack_max_o(1)",
    "documentation": {}
  },
  {
    "label": "sta",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.stack_max_o(1)",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.stack_max_o(1)",
    "peekOfCode": "sta = Stack([], 6)\n# pushing an element to the array\nsta.push(10)\nsta.maxPush()\nprint(\"-------------------\")\nsta.push(2)\nsta.maxPush()\nprint(\"-------------------\")\nsta.push(3)\nsta.maxPush()",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.stack_max_o(1)",
    "documentation": {}
  },
  {
    "label": "Solution",
    "kind": 6,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.Strong Password Checker",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.Strong Password Checker",
    "peekOfCode": "class Solution:\n    def strongPasswordChecker(self, s: str) -> int:\n        len_passwd = len(s)\n        lowercase, uppercase, digit = False, False, False\n        repeating = []  # list of interval of consecutive char.\n        for idx, char in enumerate(s):\n            if not lowercase and 97 <= ord(char) <= 122:\n                lowercase = True\n            if not uppercase and 65 <= ord(char) <= 90:\n                uppercase = True",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.Strong Password Checker",
    "documentation": {}
  },
  {
    "label": "Sol",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.Strong Password Checker",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.Strong Password Checker",
    "peekOfCode": "Sol = Solution()\nprint(Sol.strongPasswordChecker(\"a\"))",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.Strong Password Checker",
    "documentation": {}
  },
  {
    "label": "exactMatch",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.substring_search",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.substring_search",
    "peekOfCode": "def exactMatch(text, pat, text_index, pat_index):\n    if text_index == len(text) and pat_index != len(pat):\n        return 0\n    # Else If last character of pattern reaches\n    if pat_index == len(pat):\n        return 1\n    if text[text_index] == pat[pat_index]:\n        return exactMatch(text, pat, text_index + 1, pat_index + 1)\n    return 0\n# This function returns true if 'text' contain 'pat'",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.substring_search",
    "documentation": {}
  },
  {
    "label": "contains",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.substring_search",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.substring_search",
    "peekOfCode": "def contains(text, pat, text_index, pat_index):\n    # If last character of text reaches\n    if text_index == len(text):\n        return 0\n    # If current characters of pat and text match\n    if text[text_index] == pat[pat_index]:\n        if exactMatch(text, pat, text_index, pat_index):\n            return 1\n        else:\n            return contains(text, pat, text_index + 1, pat_index)",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.substring_search",
    "documentation": {}
  },
  {
    "label": "Solution",
    "kind": 6,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.sun_finder",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.sun_finder",
    "peekOfCode": "class Solution:\n    # def __init__(self,arr,n,target):\n    #     self.arr=arr\n    #     self.n=n\n    #     self.target=target\n    def twoSum(self, arr, n, target):\n        for i in range(self.n):\n            for j in range(1, self.n):\n                result = self.arr[i] + self.arr[j]\n                if result == self.target:",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.sun_finder",
    "documentation": {}
  },
  {
    "label": "temp",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.sun_finder",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.sun_finder",
    "peekOfCode": "temp = Solution([2, 7, 11, 15], len([2, 7, 11, 15]), 9)\ntemp.twoSum()",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.sun_finder",
    "documentation": {}
  },
  {
    "label": "getListOfProcessSortedByMemory",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.system_process_scanner",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.system_process_scanner",
    "peekOfCode": "def getListOfProcessSortedByMemory():\n    listOfProcObjects = []\n    for proc in psutil.process_iter():\n        pinfo = proc.as_dict(attrs=[\"pid\", \"name\"])\n        pinfo[\"CPU_USAGE\"] = proc.memory_info().vms / (1024 * 1024)\n        # Append dict to list\n        listOfProcObjects.append(pinfo)\n    listOfProcObjects = sorted(\n        listOfProcObjects, key=lambda procObj: procObj[\"CPU_USAGE\"], reverse=True\n    )",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.system_process_scanner",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.system_process_scanner",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.system_process_scanner",
    "peekOfCode": "def main():\n    print(\"##### Create a list of all running processes #######\")\n    getListOfProcessSortedByMemory()\nif __name__ == \"__main__\":\n    main()",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.system_process_scanner",
    "documentation": {}
  },
  {
    "label": "theBoard",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.temp",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.temp",
    "peekOfCode": "theBoard = [' '] * 10\nprint(theBoard)\n((bo[7] == le and bo[8] == le and bo[9] == le) or # across the top\n    (bo[4] == le and bo[5] == le and bo[6] == le) or # across the middle\n    (bo[1] == le and bo[2] == le and bo[3] == le) or # across the bottom\n    (bo[7] == le and bo[4] == le and bo[1] == le) or # down the left side\n    (bo[8] == le and bo[5] == le and bo[2] == le) or # down the middle\n    (bo[9] == le and bo[6] == le and bo[3] == le) or # down the right side\n    (bo[7] == le and bo[5] == le and bo[3] == le) or # diagonal\n    (bo[9] == le and bo[5] == le and bo[1] == le)) ",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.temp",
    "documentation": {}
  },
  {
    "label": "drawBoard",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.TicTacToe",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.TicTacToe",
    "peekOfCode": "def drawBoard(board):\n    # This function prints out the board that it was passed.\n    # \"board\" is a list of 10 strings representing the board (ignore index 0)\n    print(\"   |   |\")\n    print(\" \" + board[7] + \" | \" + board[8] + \" | \" + board[9])\n    print(\"   |   |\")\n    print(\"-----------\")\n    print(\"   |   |\")\n    print(\" \" + board[4] + \" | \" + board[5] + \" | \" + board[6])\n    print(\"   |   |\")",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.TicTacToe",
    "documentation": {}
  },
  {
    "label": "inputPlayerLetter",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.TicTacToe",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.TicTacToe",
    "peekOfCode": "def inputPlayerLetter():\n    # Lets the player type which letter they want to be.\n    # Returns a list with the player’s letter as the first item, and the computer's letter as the second.\n    letter = \"\"\n    while not (letter == \"X\" or letter == \"O\"):\n        print(\"Do you want to be X or O?\")\n        letter = input().upper()\n    # the first element in the list is the player’s letter, the second is the computer's letter.\n    if letter == \"X\":\n        return [\"X\", \"O\"]",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.TicTacToe",
    "documentation": {}
  },
  {
    "label": "whoGoesFirst",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.TicTacToe",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.TicTacToe",
    "peekOfCode": "def whoGoesFirst():\n    # Randomly choose the player who goes first.\n    if random.randint(0, 1) == 0:\n        return \"computer\"\n    else:\n        return \"player\"\ndef playAgain():\n    # This function returns True if the player wants to play again, otherwise it returns False.\n    print(\"Do you want to play again? (yes or no)\")\n    return input().lower().startswith(\"y\")",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.TicTacToe",
    "documentation": {}
  },
  {
    "label": "playAgain",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.TicTacToe",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.TicTacToe",
    "peekOfCode": "def playAgain():\n    # This function returns True if the player wants to play again, otherwise it returns False.\n    print(\"Do you want to play again? (yes or no)\")\n    return input().lower().startswith(\"y\")\ndef makeMove(board, letter, move):\n    board[move] = letter\ndef isWinner(bo, le):\n    # Given a board and a player’s letter, this function returns True if that player has won.\n    # We use bo instead of board and le instead of letter so we don’t have to type as much.\n    return (",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.TicTacToe",
    "documentation": {}
  },
  {
    "label": "makeMove",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.TicTacToe",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.TicTacToe",
    "peekOfCode": "def makeMove(board, letter, move):\n    board[move] = letter\ndef isWinner(bo, le):\n    # Given a board and a player’s letter, this function returns True if that player has won.\n    # We use bo instead of board and le instead of letter so we don’t have to type as much.\n    return (\n        (bo[7] == le and bo[8] == le and bo[9] == le)\n        or (bo[4] == le and bo[5] == le and bo[6] == le)  # across the top\n        or (bo[1] == le and bo[2] == le and bo[3] == le)  # across the middle\n        or (bo[7] == le and bo[4] == le and bo[1] == le)  # across the bottom",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.TicTacToe",
    "documentation": {}
  },
  {
    "label": "isWinner",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.TicTacToe",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.TicTacToe",
    "peekOfCode": "def isWinner(bo, le):\n    # Given a board and a player’s letter, this function returns True if that player has won.\n    # We use bo instead of board and le instead of letter so we don’t have to type as much.\n    return (\n        (bo[7] == le and bo[8] == le and bo[9] == le)\n        or (bo[4] == le and bo[5] == le and bo[6] == le)  # across the top\n        or (bo[1] == le and bo[2] == le and bo[3] == le)  # across the middle\n        or (bo[7] == le and bo[4] == le and bo[1] == le)  # across the bottom\n        or (bo[8] == le and bo[5] == le and bo[2] == le)  # down the left side\n        or (bo[9] == le and bo[6] == le and bo[3] == le)  # down the middle",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.TicTacToe",
    "documentation": {}
  },
  {
    "label": "getBoardCopy",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.TicTacToe",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.TicTacToe",
    "peekOfCode": "def getBoardCopy(board):\n    # Make a duplicate of the board list and return it the duplicate.\n    dupeBoard = []\n    for i in board:\n        dupeBoard.append(i)\n    return dupeBoard\ndef isSpaceFree(board, move):\n    # Return true if the passed move is free on the passed board.\n    return board[move] == \" \"\ndef getPlayerMove(board):",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.TicTacToe",
    "documentation": {}
  },
  {
    "label": "isSpaceFree",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.TicTacToe",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.TicTacToe",
    "peekOfCode": "def isSpaceFree(board, move):\n    # Return true if the passed move is free on the passed board.\n    return board[move] == \" \"\ndef getPlayerMove(board):\n    # Let the player type in their move.\n    move = \" \"\n    while move not in \"1 2 3 4 5 6 7 8 9\".split() or not isSpaceFree(board, int(move)):\n        print(\"What is your next move? (1-9)\")\n        move = input()\n    return int(move)",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.TicTacToe",
    "documentation": {}
  },
  {
    "label": "getPlayerMove",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.TicTacToe",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.TicTacToe",
    "peekOfCode": "def getPlayerMove(board):\n    # Let the player type in their move.\n    move = \" \"\n    while move not in \"1 2 3 4 5 6 7 8 9\".split() or not isSpaceFree(board, int(move)):\n        print(\"What is your next move? (1-9)\")\n        move = input()\n    return int(move)\ndef chooseRandomMoveFromList(board, movesList):\n    # Returns a valid move from the passed list on the passed board.\n    # Returns None if there is no valid move.",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.TicTacToe",
    "documentation": {}
  },
  {
    "label": "chooseRandomMoveFromList",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.TicTacToe",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.TicTacToe",
    "peekOfCode": "def chooseRandomMoveFromList(board, movesList):\n    # Returns a valid move from the passed list on the passed board.\n    # Returns None if there is no valid move.\n    possibleMoves = []\n    for i in movesList:\n        if isSpaceFree(board, i):\n            possibleMoves.append(i)\n    if len(possibleMoves) != 0:\n        return random.choice(possibleMoves)\n    else:",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.TicTacToe",
    "documentation": {}
  },
  {
    "label": "getComputerMove",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.TicTacToe",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.TicTacToe",
    "peekOfCode": "def getComputerMove(board, computerLetter):\n    # Given a board and the computer's letter, determine where to move and return that move.\n    if computerLetter == \"X\":\n        playerLetter = \"O\"\n    else:\n        playerLetter = \"X\"\n    # Here is our algorithm for our Tic Tac Toe AI:\n    # First, check if we can win in the next move\n    for i in range(1, 10):\n        copy = getBoardCopy(board)",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.TicTacToe",
    "documentation": {}
  },
  {
    "label": "isBoardFull",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.TicTacToe",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.TicTacToe",
    "peekOfCode": "def isBoardFull(board):\n    # Return True if every space on the board has been taken. Otherwise return False.\n    for i in range(1, 10):\n        if isSpaceFree(board, i):\n            return False\n    return True\nprint(\"Welcome to Tic Tac Toe!\")\nwhile True:\n    # Reset the board\n    theBoard = [\" \"] * 10",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.TicTacToe",
    "documentation": {}
  },
  {
    "label": "TowerOfHanoi",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.Tower_of_hanoi",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.Tower_of_hanoi",
    "peekOfCode": "def TowerOfHanoi(n, source, destination, auxiliary):\n    if n == 1:\n        print(\"Move disk 1 from source\", source, \"to destination\", destination)\n        return\n    TowerOfHanoi(n - 1, source, auxiliary, destination)\n    print(\"Move disk\", n, \"from source\", source, \"to destination\", destination)\n    TowerOfHanoi(n - 1, auxiliary, destination, source)\n# Driver code\nn = 4\nTowerOfHanoi(n, \"A\", \"B\", \"C\")",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.Tower_of_hanoi",
    "documentation": {}
  },
  {
    "label": "n",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.Tower_of_hanoi",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.Tower_of_hanoi",
    "peekOfCode": "n = 4\nTowerOfHanoi(n, \"A\", \"B\", \"C\")",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.Tower_of_hanoi",
    "documentation": {}
  },
  {
    "label": "LeftMax",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.trapping_water",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.trapping_water",
    "peekOfCode": "def LeftMax(array, i):\n    left = array[i]\n    for j in range(i):\n        # left=max(left,array[j])\n        if left < array[j]:\n            left = array[j]\n        else:\n            left = left\n    return left\ndef RightMax(array, i):",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.trapping_water",
    "documentation": {}
  },
  {
    "label": "RightMax",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.trapping_water",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.trapping_water",
    "peekOfCode": "def RightMax(array, i):\n    right = array[i]\n    for j in range(i + 1, len(array)):\n        # right=max(right,array[j])\n        if right < array[j]:\n            right = array[j]\n        else:\n            right = right\n    return right\ndef TrappingWater(array):",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.trapping_water",
    "documentation": {}
  },
  {
    "label": "TrappingWater",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.trapping_water",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.trapping_water",
    "peekOfCode": "def TrappingWater(array):\n    totalwater = 0\n    for i in range(1, len(array) - 1):\n        leftMax = LeftMax(array, i)\n        rightMax = RightMax(array, i)\n        totalwater = totalwater + (min(leftMax, rightMax) - array[i])\n    return totalwater\narray = [2, 0, 2]\nprint(TrappingWater(array))",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.trapping_water",
    "documentation": {}
  },
  {
    "label": "array",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.trapping_water",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.trapping_water",
    "peekOfCode": "array = [2, 0, 2]\nprint(TrappingWater(array))",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.trapping_water",
    "documentation": {}
  },
  {
    "label": "node",
    "kind": 6,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.traversals",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.traversals",
    "peekOfCode": "class node:\n    def __init__(self, val):\n        self.right = None\n        self.left = None\n        self.val = val\nroot = node(1)\nroot.left = node(2)\nroot.right = node(3)\nroot.left.right = node(5)\nroot.left.left = node(4)",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.traversals",
    "documentation": {}
  },
  {
    "label": "inorder_traversal",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.traversals",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.traversals",
    "peekOfCode": "def inorder_traversal(root):\n    if root:\n        inorder_traversal(root.left)\n        print(root.val)\n        inorder_traversal(root.right)\ndef preorder_traversal(root):\n    if root:\n        print(root.val)\n        preorder_traversal(root.left)\n        preorder_traversal(root.right)",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.traversals",
    "documentation": {}
  },
  {
    "label": "preorder_traversal",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.traversals",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.traversals",
    "peekOfCode": "def preorder_traversal(root):\n    if root:\n        print(root.val)\n        preorder_traversal(root.left)\n        preorder_traversal(root.right)\ndef postorder_traversal(root):\n    if root:\n        postorder_traversal(root.left)\n        postorder_traversal(root.right)\n        print(root.val)",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.traversals",
    "documentation": {}
  },
  {
    "label": "postorder_traversal",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.traversals",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.traversals",
    "peekOfCode": "def postorder_traversal(root):\n    if root:\n        postorder_traversal(root.left)\n        postorder_traversal(root.right)\n        print(root.val)\nprint(\"########################\")\nprint(\"inorder traversal: L N R \")\ninorder_traversal(root)\nprint(\"########################\")\nprint(\"preorder traversal: N L R \")",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.traversals",
    "documentation": {}
  },
  {
    "label": "root",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.traversals",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.traversals",
    "peekOfCode": "root = node(1)\nroot.left = node(2)\nroot.right = node(3)\nroot.left.right = node(5)\nroot.left.left = node(4)\ndef inorder_traversal(root):\n    if root:\n        inorder_traversal(root.left)\n        print(root.val)\n        inorder_traversal(root.right)",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.traversals",
    "documentation": {}
  },
  {
    "label": "root.left",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.traversals",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.traversals",
    "peekOfCode": "root.left = node(2)\nroot.right = node(3)\nroot.left.right = node(5)\nroot.left.left = node(4)\ndef inorder_traversal(root):\n    if root:\n        inorder_traversal(root.left)\n        print(root.val)\n        inorder_traversal(root.right)\ndef preorder_traversal(root):",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.traversals",
    "documentation": {}
  },
  {
    "label": "root.right",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.traversals",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.traversals",
    "peekOfCode": "root.right = node(3)\nroot.left.right = node(5)\nroot.left.left = node(4)\ndef inorder_traversal(root):\n    if root:\n        inorder_traversal(root.left)\n        print(root.val)\n        inorder_traversal(root.right)\ndef preorder_traversal(root):\n    if root:",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.traversals",
    "documentation": {}
  },
  {
    "label": "root.left.right",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.traversals",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.traversals",
    "peekOfCode": "root.left.right = node(5)\nroot.left.left = node(4)\ndef inorder_traversal(root):\n    if root:\n        inorder_traversal(root.left)\n        print(root.val)\n        inorder_traversal(root.right)\ndef preorder_traversal(root):\n    if root:\n        print(root.val)",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.traversals",
    "documentation": {}
  },
  {
    "label": "root.left.left",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.traversals",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.traversals",
    "peekOfCode": "root.left.left = node(4)\ndef inorder_traversal(root):\n    if root:\n        inorder_traversal(root.left)\n        print(root.val)\n        inorder_traversal(root.right)\ndef preorder_traversal(root):\n    if root:\n        print(root.val)\n        preorder_traversal(root.left)",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.traversals",
    "documentation": {}
  },
  {
    "label": "Node",
    "kind": 6,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.tree-level-order-print",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.tree-level-order-print",
    "peekOfCode": "class Node(object):\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\ndef traverse_levelorder(root):\n    if not root:\n        return\n    q = [root, True]  # Use True as sentinel for end of row\n    while len(q) > 0:",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.tree-level-order-print",
    "documentation": {}
  },
  {
    "label": "traverse_levelorder",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.tree-level-order-print",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.tree-level-order-print",
    "peekOfCode": "def traverse_levelorder(root):\n    if not root:\n        return\n    q = [root, True]  # Use True as sentinel for end of row\n    while len(q) > 0:\n        node = q.pop(0)\n        print node.value,\n        if node.left:\n            q.append(node.left)\n        if node.right:",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.tree-level-order-print",
    "documentation": {}
  },
  {
    "label": "Tree",
    "kind": 6,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.tree_creation",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.tree_creation",
    "peekOfCode": "class Tree:\n    def __init__(self, data):\n        self.data = data\n        self.children = []\n        self.parent = None\n    def add_child(self, child):\n        child.parent = self\n        self.children.append(child)\n    def print_elements(self):\n        print(self.data)",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.tree_creation",
    "documentation": {}
  },
  {
    "label": "root",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.tree_creation",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.tree_creation",
    "peekOfCode": "root = Tree(\"electronics\")\nlaptop = Tree(\"laptop\")\nlaptop.add_child(Tree(\"mac\"))\nlaptop.add_child(Tree(\"windows\"))\ncell = Tree(\"cell\")\ncell.add_child(Tree(\"LG\"))\ncell.add_child(Tree(\"apple\"))\nroot.add_child(laptop)\nroot.add_child(cell)\nroot.print_elements()",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.tree_creation",
    "documentation": {}
  },
  {
    "label": "laptop",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.tree_creation",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.tree_creation",
    "peekOfCode": "laptop = Tree(\"laptop\")\nlaptop.add_child(Tree(\"mac\"))\nlaptop.add_child(Tree(\"windows\"))\ncell = Tree(\"cell\")\ncell.add_child(Tree(\"LG\"))\ncell.add_child(Tree(\"apple\"))\nroot.add_child(laptop)\nroot.add_child(cell)\nroot.print_elements()",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.tree_creation",
    "documentation": {}
  },
  {
    "label": "cell",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.tree_creation",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.tree_creation",
    "peekOfCode": "cell = Tree(\"cell\")\ncell.add_child(Tree(\"LG\"))\ncell.add_child(Tree(\"apple\"))\nroot.add_child(laptop)\nroot.add_child(cell)\nroot.print_elements()",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.tree_creation",
    "documentation": {}
  },
  {
    "label": "Triplet",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.TripletSearch",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.TripletSearch",
    "peekOfCode": "def Triplet(arr):\n    n = len(arr)\n    found = True\n    for i in range(n - 1):\n        l = i + 1\n        r = n - 1\n        x = arr[i]\n        while l < r:\n            if arr[l] + arr[r] + x == 0:\n                print(arr[l], arr[r], x)",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.TripletSearch",
    "documentation": {}
  },
  {
    "label": "arr",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.TripletSearch",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.TripletSearch",
    "peekOfCode": "arr = [0, -1, 2, -3, 1]\nTriplet(arr)",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.TripletSearch",
    "documentation": {}
  },
  {
    "label": "Solution",
    "kind": 6,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.Union of two arrays",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.Union of two arrays",
    "peekOfCode": "class Solution:\n    # Function to return the count of number of elements in union of two arrays.\n    def doUnion(self, a, n, b, m):\n        c = a + b\n        c.sort()\n        d = []\n        for i in c:\n            if i not in d:\n                d.append(i)\n            else:",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.Union of two arrays",
    "documentation": {}
  },
  {
    "label": "Solution",
    "kind": 6,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.Union of two arrays",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.Union of two arrays",
    "peekOfCode": "class Solution:\n    # Function to return the count of number of elements in union of two arrays.\n    def doUnion(self, a, n, b, m):\n        c = a + b\n        c.sort()  # O(Mlog(M))+O(Nlog(N))\n        sample_dict = {}\n        for i in c:  # O(M)+O(N)\n            if i in sample_dict.keys():\n                sample_dict[i] += 1\n            else:",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.Union of two arrays",
    "documentation": {}
  },
  {
    "label": "wave",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.wave",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.wave",
    "peekOfCode": "def wave(arr, n):\n    arr.sort()\n    for i in range(0, n - 1, 2):\n        arr[i], arr[i + 1] = arr[i + 1], arr[i]\narr = [10, 90, 49, 2, 1, 5, 23]\nwave(arr, len(arr))\nfor i in range(len(arr)):\n    print(arr[i], end=\" \")",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.wave",
    "documentation": {}
  },
  {
    "label": "arr",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.wave",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.wave",
    "peekOfCode": "arr = [10, 90, 49, 2, 1, 5, 23]\nwave(arr, len(arr))\nfor i in range(len(arr)):\n    print(arr[i], end=\" \")",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.wave",
    "documentation": {}
  },
  {
    "label": "file",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.word_count",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.word_count",
    "peekOfCode": "file = open(\"sample.txt\", \"r\")\nd = dict()\nfor lines in file:\n    lines = lines.strip()\n    lines = lines.lower()\n    words = lines.split(\" \")\n    for word in words:\n        if word in d:\n            d[word] = d[word] + 1\n        else:",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.word_count",
    "documentation": {}
  },
  {
    "label": "d",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.word_count",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.word_count",
    "peekOfCode": "d = dict()\nfor lines in file:\n    lines = lines.strip()\n    lines = lines.lower()\n    words = lines.split(\" \")\n    for word in words:\n        if word in d:\n            d[word] = d[word] + 1\n        else:\n            d[word] = 1",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.word_count",
    "documentation": {}
  },
  {
    "label": "find",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.word_count",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.word_count",
    "peekOfCode": "find = str(input(\"enter the word to count: \"))\nfind = find.lower()\nif find in list(d.keys()):\n    print(f\"{find} : \" + str(d.get(find)))\nelse:\n    print(\"word not present!! \")",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.word_count",
    "documentation": {}
  },
  {
    "label": "find",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.word_count",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.word_count",
    "peekOfCode": "find = find.lower()\nif find in list(d.keys()):\n    print(f\"{find} : \" + str(d.get(find)))\nelse:\n    print(\"word not present!! \")",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.word_count",
    "documentation": {}
  },
  {
    "label": "xor",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.xor",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.xor",
    "peekOfCode": "def xor(arr, n):\n    xor_val = 0\n    for i in range(n):\n        xor_val = xor_val ^ arr[i]\n    return xor_val\narr = [3, 9, 12, 13, 15]\nn = len(arr)\nprint(xor(arr, n))",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.xor",
    "documentation": {}
  },
  {
    "label": "arr",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.xor",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.xor",
    "peekOfCode": "arr = [3, 9, 12, 13, 15]\nn = len(arr)\nprint(xor(arr, n))",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.xor",
    "documentation": {}
  },
  {
    "label": "n",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.xor",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.xor",
    "peekOfCode": "n = len(arr)\nprint(xor(arr, n))",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.xor",
    "documentation": {}
  },
  {
    "label": "url",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.YT_DOWN",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.YT_DOWN",
    "peekOfCode": "url = \"https://www.youtube.com/watch?v=OE7wUUpJw6I&list=PL2_aWCzGMAwLPEZrZIcNEq9ukGWPfLT4A\"\nvideo = pafy.new(url)\nprint(video.title)\nstream = pafy.new(url).streams\nbest = video.getbest()\nfor i in stream:\n    print(i)\nprint(best.resolution, best.extension)\nprint(best.url)\nbest.download(quiet=False)",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.YT_DOWN",
    "documentation": {}
  },
  {
    "label": "video",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.YT_DOWN",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.YT_DOWN",
    "peekOfCode": "video = pafy.new(url)\nprint(video.title)\nstream = pafy.new(url).streams\nbest = video.getbest()\nfor i in stream:\n    print(i)\nprint(best.resolution, best.extension)\nprint(best.url)\nbest.download(quiet=False)",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.YT_DOWN",
    "documentation": {}
  },
  {
    "label": "stream",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.YT_DOWN",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.YT_DOWN",
    "peekOfCode": "stream = pafy.new(url).streams\nbest = video.getbest()\nfor i in stream:\n    print(i)\nprint(best.resolution, best.extension)\nprint(best.url)\nbest.download(quiet=False)",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.YT_DOWN",
    "documentation": {}
  },
  {
    "label": "best",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.YT_DOWN",
    "description": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.YT_DOWN",
    "peekOfCode": "best = video.getbest()\nfor i in stream:\n    print(i)\nprint(best.resolution, best.extension)\nprint(best.url)\nbest.download(quiet=False)",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.ALGO.__PYTHON.YT_DOWN",
    "documentation": {}
  },
  {
    "label": "sum_arr",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.Arrays.python.sum-arr-dir.sum-arr",
    "description": "BGOONZ_DS_EX.DS-n-Algos.Arrays.python.sum-arr-dir.sum-arr",
    "peekOfCode": "def sum_arr(n):\n    res = 0\n    for x in n:\n        res += x\n    return res\nnums = [52345, 746587, 98589, 54398, 9348, 45887, 49856]\ntest = sum_arr(nums)\n# sum() is Pythons built in method of adding all the elements in a list\nif test == sum(nums):\n    print(\"Sum of arr: {}\".format(test))",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.Arrays.python.sum-arr-dir.sum-arr",
    "documentation": {}
  },
  {
    "label": "nums",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.Arrays.python.sum-arr-dir.sum-arr",
    "description": "BGOONZ_DS_EX.DS-n-Algos.Arrays.python.sum-arr-dir.sum-arr",
    "peekOfCode": "nums = [52345, 746587, 98589, 54398, 9348, 45887, 49856]\ntest = sum_arr(nums)\n# sum() is Pythons built in method of adding all the elements in a list\nif test == sum(nums):\n    print(\"Sum of arr: {}\".format(test))\nelse:\n    print(\"Func dosen't work!\")\n# [Running] python -u \"c:\\0-a-A-October\\00-weeks\\08-my-website\\Stable\\Public\\2-content\\Data-Structures\\DS-and-Algorithms-Prac\\In-Progress\\python\\sum-arr-dir\\sum-arr.py\"\n# Sum of arr: 1057010",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.Arrays.python.sum-arr-dir.sum-arr",
    "documentation": {}
  },
  {
    "label": "test",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.Arrays.python.sum-arr-dir.sum-arr",
    "description": "BGOONZ_DS_EX.DS-n-Algos.Arrays.python.sum-arr-dir.sum-arr",
    "peekOfCode": "test = sum_arr(nums)\n# sum() is Pythons built in method of adding all the elements in a list\nif test == sum(nums):\n    print(\"Sum of arr: {}\".format(test))\nelse:\n    print(\"Func dosen't work!\")\n# [Running] python -u \"c:\\0-a-A-October\\00-weeks\\08-my-website\\Stable\\Public\\2-content\\Data-Structures\\DS-and-Algorithms-Prac\\In-Progress\\python\\sum-arr-dir\\sum-arr.py\"\n# Sum of arr: 1057010",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.Arrays.python.sum-arr-dir.sum-arr",
    "documentation": {}
  },
  {
    "label": "avgSums",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.Arrays.python.sum-avg.avg",
    "description": "BGOONZ_DS_EX.DS-n-Algos.Arrays.python.sum-avg.avg",
    "peekOfCode": "def avgSums(a, b, c):\n    summingUp = sum(a) + sum(b) + sum(c)\n    summed = summingUp / 3\n    return summed\nprint(avgSums(m, n, q))\n# [Running] python -u \"c:\\0-a-A-October\\00-weeks\\08-my-website\\Stable\\Public\\2-content\\Data-Structures\\DS-and-Algorithms-Prac\\DS-n-Algos\\Arrays\\python\\sum-avg\\avg.py\"\n# 2892.6666666666665\n#\n# [Done] exited with code=0 in 0.186 seconds",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.Arrays.python.sum-avg.avg",
    "documentation": {}
  },
  {
    "label": "m",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.Arrays.python.sum-avg.avg",
    "description": "BGOONZ_DS_EX.DS-n-Algos.Arrays.python.sum-avg.avg",
    "peekOfCode": "m = [1, 43, 656, 8, 54, 908, 4, 5, 23, 78, 435, 89, 45, 476, 89]\nn = [234, 56, 90, 675, 56, 786, 90, 564, 8, 657, 87, 64, 354, 2, 75]\nq = [34, 76, 76, 564, 34, 32, 16, 67, 25, 98, 90, 345, 235, 64, 134, 76]\ndef avgSums(a, b, c):\n    summingUp = sum(a) + sum(b) + sum(c)\n    summed = summingUp / 3\n    return summed\nprint(avgSums(m, n, q))\n# [Running] python -u \"c:\\0-a-A-October\\00-weeks\\08-my-website\\Stable\\Public\\2-content\\Data-Structures\\DS-and-Algorithms-Prac\\DS-n-Algos\\Arrays\\python\\sum-avg\\avg.py\"\n# 2892.6666666666665",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.Arrays.python.sum-avg.avg",
    "documentation": {}
  },
  {
    "label": "n",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.Arrays.python.sum-avg.avg",
    "description": "BGOONZ_DS_EX.DS-n-Algos.Arrays.python.sum-avg.avg",
    "peekOfCode": "n = [234, 56, 90, 675, 56, 786, 90, 564, 8, 657, 87, 64, 354, 2, 75]\nq = [34, 76, 76, 564, 34, 32, 16, 67, 25, 98, 90, 345, 235, 64, 134, 76]\ndef avgSums(a, b, c):\n    summingUp = sum(a) + sum(b) + sum(c)\n    summed = summingUp / 3\n    return summed\nprint(avgSums(m, n, q))\n# [Running] python -u \"c:\\0-a-A-October\\00-weeks\\08-my-website\\Stable\\Public\\2-content\\Data-Structures\\DS-and-Algorithms-Prac\\DS-n-Algos\\Arrays\\python\\sum-avg\\avg.py\"\n# 2892.6666666666665\n#",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.Arrays.python.sum-avg.avg",
    "documentation": {}
  },
  {
    "label": "q",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.Arrays.python.sum-avg.avg",
    "description": "BGOONZ_DS_EX.DS-n-Algos.Arrays.python.sum-avg.avg",
    "peekOfCode": "q = [34, 76, 76, 564, 34, 32, 16, 67, 25, 98, 90, 345, 235, 64, 134, 76]\ndef avgSums(a, b, c):\n    summingUp = sum(a) + sum(b) + sum(c)\n    summed = summingUp / 3\n    return summed\nprint(avgSums(m, n, q))\n# [Running] python -u \"c:\\0-a-A-October\\00-weeks\\08-my-website\\Stable\\Public\\2-content\\Data-Structures\\DS-and-Algorithms-Prac\\DS-n-Algos\\Arrays\\python\\sum-avg\\avg.py\"\n# 2892.6666666666665\n#\n# [Done] exited with code=0 in 0.186 seconds",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.Arrays.python.sum-avg.avg",
    "documentation": {}
  },
  {
    "label": "rev_word",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.Strings.python.reverse-word.rev-word",
    "description": "BGOONZ_DS_EX.DS-n-Algos.Strings.python.reverse-word.rev-word",
    "peekOfCode": "def rev_word(inStr: str) -> str:\n    return \" \".join(inStr.split()[::-1])\nprint(rev_word(\"Python is kinda cool\"))\n# Print Output:\n# cool kinda is Python\n# Variables:\n# {}",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.Strings.python.reverse-word.rev-word",
    "documentation": {}
  },
  {
    "label": "split_string",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.DS-n-Algos.Strings.python.split-string.split-string",
    "description": "BGOONZ_DS_EX.DS-n-Algos.Strings.python.split-string.split-string",
    "peekOfCode": "def split_string(string: str, break_on: str = \" \") -> list:\n    # A list is similar to an array but apparently not the same\n    split_words = []\n    last_index = 0\n    for index, char in enumerate(string):\n        if char == break_on:\n            split_words.append(string[last_index:index])\n            last_index = index + 1\n        elif index + 1 == len(string):\n            split_words.append(string[last_index : index + 1])",
    "detail": "BGOONZ_DS_EX.DS-n-Algos.Strings.python.split-string.split-string",
    "documentation": {}
  },
  {
    "label": "rect",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.FFCamp.area.main",
    "description": "BGOONZ_DS_EX.FFCamp.area.main",
    "peekOfCode": "rect = shape_calculator.Rectangle(5, 10)\nprint(rect.get_area())\nrect.set_width(3)\nprint(rect.get_perimeter())\nprint(rect)\nsq = shape_calculator.Square(9)\nprint(sq.get_area())\nsq.set_side(4)\nprint(sq.get_diagonal())\nprint(sq)",
    "detail": "BGOONZ_DS_EX.FFCamp.area.main",
    "documentation": {}
  },
  {
    "label": "sq",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.FFCamp.area.main",
    "description": "BGOONZ_DS_EX.FFCamp.area.main",
    "peekOfCode": "sq = shape_calculator.Square(9)\nprint(sq.get_area())\nsq.set_side(4)\nprint(sq.get_diagonal())\nprint(sq)\n# Run unit tests automatically\nmain(module=\"test_module\", exit=False)",
    "detail": "BGOONZ_DS_EX.FFCamp.area.main",
    "documentation": {}
  },
  {
    "label": "Rectangle",
    "kind": 6,
    "importPath": "BGOONZ_DS_EX.FFCamp.area.shape_calculator",
    "description": "BGOONZ_DS_EX.FFCamp.area.shape_calculator",
    "peekOfCode": "class Rectangle:\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n    def set_width(self, w):\n        self.width = w\n        return\n    def set_height(self, h):\n        self.height = h\n        return",
    "detail": "BGOONZ_DS_EX.FFCamp.area.shape_calculator",
    "documentation": {}
  },
  {
    "label": "Square",
    "kind": 6,
    "importPath": "BGOONZ_DS_EX.FFCamp.area.shape_calculator",
    "description": "BGOONZ_DS_EX.FFCamp.area.shape_calculator",
    "peekOfCode": "class Square(Rectangle):\n    def __init__(self, w):\n        super().__init__(w, w)\n    def set_side(self, w):\n        super().set_height(w)\n        super().set_width(w)\n    def set_width(self, w):\n        self.set_side(w)\n    def set_height(self, h):\n        self.set_side(h)",
    "detail": "BGOONZ_DS_EX.FFCamp.area.shape_calculator",
    "documentation": {}
  },
  {
    "label": "UnitTests",
    "kind": 6,
    "importPath": "BGOONZ_DS_EX.FFCamp.area.test_module",
    "description": "BGOONZ_DS_EX.FFCamp.area.test_module",
    "peekOfCode": "class UnitTests(unittest.TestCase):\n    def setUp(self):\n        self.rect = shape_calculator.Rectangle(3, 6)\n        self.sq = shape_calculator.Square(5)\n    def test_subclass(self):\n        actual = issubclass(shape_calculator.Square, shape_calculator.Rectangle)\n        expected = True\n        self.assertEqual(\n            actual,\n            expected,",
    "detail": "BGOONZ_DS_EX.FFCamp.area.test_module",
    "documentation": {}
  },
  {
    "label": "Category",
    "kind": 6,
    "importPath": "BGOONZ_DS_EX.FFCamp.budget.budget",
    "description": "BGOONZ_DS_EX.FFCamp.budget.budget",
    "peekOfCode": "class Category:\n    def __init__(self, name):\n        self.name = name\n        self.balance = 0\n        self.ledger = []\n    def deposit(self, amount, description=\"\"):\n        self.ledger.append({\"amount\": amount, \"description\": description})\n        self.balance += amount\n    def withdraw(self, amount, description=\"\"):\n        if not self.check_funds(amount):",
    "detail": "BGOONZ_DS_EX.FFCamp.budget.budget",
    "documentation": {}
  },
  {
    "label": "create_spend_chart",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.FFCamp.budget.budget",
    "description": "BGOONZ_DS_EX.FFCamp.budget.budget",
    "peekOfCode": "def create_spend_chart(categories):\n    spending = [c.spent() for c in categories]\n    total = sum(spending)\n    percentages = [s * 100 / total for s in spending]\n    ss = [\"Percentage spent by category\"]\n    for i in range(0, 11):\n        level = 10 * (10 - i)\n        s = \"{:>3}| \".format(level)\n        for p in percentages:\n            if p >= level:",
    "detail": "BGOONZ_DS_EX.FFCamp.budget.budget",
    "documentation": {}
  },
  {
    "label": "food",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.FFCamp.budget.main",
    "description": "BGOONZ_DS_EX.FFCamp.budget.main",
    "peekOfCode": "food = budget.Category(\"Food\")\nfood.deposit(1000, \"initial deposit\")\nfood.withdraw(10.15, \"groceries\")\nfood.withdraw(15.89, \"restaurant and more food for dessert\")\nprint(food.get_balance())\nclothing = budget.Category(\"Clothing\")\nfood.transfer(50, clothing)\nclothing.withdraw(25.55)\nclothing.withdraw(100)\nauto = budget.Category(\"Auto\")",
    "detail": "BGOONZ_DS_EX.FFCamp.budget.main",
    "documentation": {}
  },
  {
    "label": "clothing",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.FFCamp.budget.main",
    "description": "BGOONZ_DS_EX.FFCamp.budget.main",
    "peekOfCode": "clothing = budget.Category(\"Clothing\")\nfood.transfer(50, clothing)\nclothing.withdraw(25.55)\nclothing.withdraw(100)\nauto = budget.Category(\"Auto\")\nauto.deposit(1000, \"initial deposit\")\nauto.withdraw(15)\nprint(food)\nprint(clothing)\nprint(create_spend_chart([food, clothing, auto]))",
    "detail": "BGOONZ_DS_EX.FFCamp.budget.main",
    "documentation": {}
  },
  {
    "label": "auto",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.FFCamp.budget.main",
    "description": "BGOONZ_DS_EX.FFCamp.budget.main",
    "peekOfCode": "auto = budget.Category(\"Auto\")\nauto.deposit(1000, \"initial deposit\")\nauto.withdraw(15)\nprint(food)\nprint(clothing)\nprint(create_spend_chart([food, clothing, auto]))\n# Run unit tests automatically\nmain(module=\"test_module\", exit=False)",
    "detail": "BGOONZ_DS_EX.FFCamp.budget.main",
    "documentation": {}
  },
  {
    "label": "UnitTests",
    "kind": 6,
    "importPath": "BGOONZ_DS_EX.FFCamp.budget.test_module",
    "description": "BGOONZ_DS_EX.FFCamp.budget.test_module",
    "peekOfCode": "class UnitTests(unittest.TestCase):\n    def setUp(self):\n        self.food = budget.Category(\"Food\")\n        self.entertainment = budget.Category(\"Entertainment\")\n        self.business = budget.Category(\"Business\")\n    def test_deposit(self):\n        self.food.deposit(900, \"deposit\")\n        actual = self.food.ledger[0]\n        expected = {\"amount\": 900, \"description\": \"deposit\"}\n        self.assertEqual(",
    "detail": "BGOONZ_DS_EX.FFCamp.budget.test_module",
    "documentation": {}
  },
  {
    "label": "arithmetic_arranger",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.FFCamp.fmt.arithmetic_arranger",
    "description": "BGOONZ_DS_EX.FFCamp.fmt.arithmetic_arranger",
    "peekOfCode": "def arithmetic_arranger(problems, calc=False):\n    \"\"\"\n    :type problems: list\n    \"\"\"\n    if len(problems) > 5:\n        return ERR_SIZE\n    rex = re.compile(r\"^[0-9]{1,4}$\")\n    formated = []\n    for p in problems:\n        [a, op, b] = p.split()",
    "detail": "BGOONZ_DS_EX.FFCamp.fmt.arithmetic_arranger",
    "documentation": {}
  },
  {
    "label": "fmt",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.FFCamp.fmt.arithmetic_arranger",
    "description": "BGOONZ_DS_EX.FFCamp.fmt.arithmetic_arranger",
    "peekOfCode": "def fmt(a, op, b, calc):\n    x = int(a)\n    y = int(b)\n    r = x + y if op == \"+\" else x - y\n    base = r if r > 0 else 0 - r\n    n = max([len(a), len(b), len(str(base))]) if calc else max([len(a), len(b)])\n    r = str(r)\n    n += 2  # for the op and a space\n    res = [a.rjust(n), op + \" \" + b.rjust(n - 2), \"-\" * n]\n    if calc:",
    "detail": "BGOONZ_DS_EX.FFCamp.fmt.arithmetic_arranger",
    "documentation": {}
  },
  {
    "label": "ERR_SIZE",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.FFCamp.fmt.arithmetic_arranger",
    "description": "BGOONZ_DS_EX.FFCamp.fmt.arithmetic_arranger",
    "peekOfCode": "ERR_SIZE = \"Error: Too many problems.\"\nERR_OP = \"Error: Operator must be '+' or '-'.\"\nERR_NUM = \"Error: Numbers must only contain digits.\"\nERR_LEN = \"Error: Numbers cannot be more than four digits.\"\ndef arithmetic_arranger(problems, calc=False):\n    \"\"\"\n    :type problems: list\n    \"\"\"\n    if len(problems) > 5:\n        return ERR_SIZE",
    "detail": "BGOONZ_DS_EX.FFCamp.fmt.arithmetic_arranger",
    "documentation": {}
  },
  {
    "label": "ERR_OP",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.FFCamp.fmt.arithmetic_arranger",
    "description": "BGOONZ_DS_EX.FFCamp.fmt.arithmetic_arranger",
    "peekOfCode": "ERR_OP = \"Error: Operator must be '+' or '-'.\"\nERR_NUM = \"Error: Numbers must only contain digits.\"\nERR_LEN = \"Error: Numbers cannot be more than four digits.\"\ndef arithmetic_arranger(problems, calc=False):\n    \"\"\"\n    :type problems: list\n    \"\"\"\n    if len(problems) > 5:\n        return ERR_SIZE\n    rex = re.compile(r\"^[0-9]{1,4}$\")",
    "detail": "BGOONZ_DS_EX.FFCamp.fmt.arithmetic_arranger",
    "documentation": {}
  },
  {
    "label": "ERR_NUM",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.FFCamp.fmt.arithmetic_arranger",
    "description": "BGOONZ_DS_EX.FFCamp.fmt.arithmetic_arranger",
    "peekOfCode": "ERR_NUM = \"Error: Numbers must only contain digits.\"\nERR_LEN = \"Error: Numbers cannot be more than four digits.\"\ndef arithmetic_arranger(problems, calc=False):\n    \"\"\"\n    :type problems: list\n    \"\"\"\n    if len(problems) > 5:\n        return ERR_SIZE\n    rex = re.compile(r\"^[0-9]{1,4}$\")\n    formated = []",
    "detail": "BGOONZ_DS_EX.FFCamp.fmt.arithmetic_arranger",
    "documentation": {}
  },
  {
    "label": "ERR_LEN",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.FFCamp.fmt.arithmetic_arranger",
    "description": "BGOONZ_DS_EX.FFCamp.fmt.arithmetic_arranger",
    "peekOfCode": "ERR_LEN = \"Error: Numbers cannot be more than four digits.\"\ndef arithmetic_arranger(problems, calc=False):\n    \"\"\"\n    :type problems: list\n    \"\"\"\n    if len(problems) > 5:\n        return ERR_SIZE\n    rex = re.compile(r\"^[0-9]{1,4}$\")\n    formated = []\n    for p in problems:",
    "detail": "BGOONZ_DS_EX.FFCamp.fmt.arithmetic_arranger",
    "documentation": {}
  },
  {
    "label": "UnitTests",
    "kind": 6,
    "importPath": "BGOONZ_DS_EX.FFCamp.fmt.test_module",
    "description": "BGOONZ_DS_EX.FFCamp.fmt.test_module",
    "peekOfCode": "class UnitTests(unittest.TestCase):\n    def test_arrangement(self):\n        actual = arithmetic_arranger([\"3 + 855\", \"3801 - 2\", \"45 + 43\", \"123 + 49\"])\n        expected = \"    3      3801      45      123\\n+ 855    -    2    + 43    +  49\\n-----    ------    ----    -----\"\n        self.assertEqual(\n            actual,\n            expected,\n            'Expected different output when calling \"arithmetic_arranger()\" with [\"3 + 855\", \"3801 - 2\", \"45 + 43\", \"123 + 49\"]',\n        )\n        actual = arithmetic_arranger(",
    "detail": "BGOONZ_DS_EX.FFCamp.fmt.test_module",
    "documentation": {}
  },
  {
    "label": "hat",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.FFCamp.probability.main",
    "description": "BGOONZ_DS_EX.FFCamp.probability.main",
    "peekOfCode": "hat = prob_calculator.Hat(blue=4, red=2, green=6)\nprobability = prob_calculator.experiment(\n    hat=hat,\n    expected_balls={\"blue\": 2, \"red\": 1},\n    num_balls_drawn=4,\n    num_experiments=3000,\n)\nprint(\"Probability:\", probability)\n# Run unit tests automatically\nmain(module=\"test_module\", exit=False)",
    "detail": "BGOONZ_DS_EX.FFCamp.probability.main",
    "documentation": {}
  },
  {
    "label": "probability",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.FFCamp.probability.main",
    "description": "BGOONZ_DS_EX.FFCamp.probability.main",
    "peekOfCode": "probability = prob_calculator.experiment(\n    hat=hat,\n    expected_balls={\"blue\": 2, \"red\": 1},\n    num_balls_drawn=4,\n    num_experiments=3000,\n)\nprint(\"Probability:\", probability)\n# Run unit tests automatically\nmain(module=\"test_module\", exit=False)",
    "detail": "BGOONZ_DS_EX.FFCamp.probability.main",
    "documentation": {}
  },
  {
    "label": "Hat",
    "kind": 6,
    "importPath": "BGOONZ_DS_EX.FFCamp.probability.prob_calculator",
    "description": "BGOONZ_DS_EX.FFCamp.probability.prob_calculator",
    "peekOfCode": "class Hat:\n    def __init__(self, **kwargs):\n        self.contents = []\n        for k, v in kwargs.items():\n            self.contents += [k] * int(v)\n    def draw(self, num):\n        n = len(self.contents)\n        if num >= n:\n            return self.contents\n        r = []",
    "detail": "BGOONZ_DS_EX.FFCamp.probability.prob_calculator",
    "documentation": {}
  },
  {
    "label": "experiment",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.FFCamp.probability.prob_calculator",
    "description": "BGOONZ_DS_EX.FFCamp.probability.prob_calculator",
    "peekOfCode": "def experiment(hat, expected_balls, num_balls_drawn, num_experiments):\n    count = 0\n    for _ in range(0, num_experiments):\n        h = copy.deepcopy(hat)\n        balls = h.draw(num_balls_drawn)\n        d = {}\n        for b in balls:\n            v = d.get(b, 0)\n            d[b] = v + 1\n        found = True",
    "detail": "BGOONZ_DS_EX.FFCamp.probability.prob_calculator",
    "documentation": {}
  },
  {
    "label": "UnitTests",
    "kind": 6,
    "importPath": "BGOONZ_DS_EX.FFCamp.probability.test_module",
    "description": "BGOONZ_DS_EX.FFCamp.probability.test_module",
    "peekOfCode": "class UnitTests(unittest.TestCase):\n    def test_hat_class_contents(self):\n        hat = prob_calculator.Hat(red=3, blue=2)\n        actual = hat.contents\n        expected = [\"red\", \"red\", \"red\", \"blue\", \"blue\"]\n        self.assertEqual(\n            actual, expected, \"Expected creation of hat object to add correct contents.\"\n        )\n    def test_hat_draw(self):\n        hat = prob_calculator.Hat(red=5, blue=2)",
    "detail": "BGOONZ_DS_EX.FFCamp.probability.test_module",
    "documentation": {}
  },
  {
    "label": "UnitTests",
    "kind": 6,
    "importPath": "BGOONZ_DS_EX.FFCamp.time.test_module",
    "description": "BGOONZ_DS_EX.FFCamp.time.test_module",
    "peekOfCode": "class UnitTests(unittest.TestCase):\n    def test_same_period(self):\n        actual = add_time(\"3:30 PM\", \"2:12\")\n        expected = \"5:42 PM\"\n        self.assertEqual(\n            actual,\n            expected,\n            'Expected calling \"add_time()\" with \"3:30 PM\", \"2:12\" to return \"5:42 PM\"',\n        )\n    def test_different_period(self):",
    "detail": "BGOONZ_DS_EX.FFCamp.time.test_module",
    "documentation": {}
  },
  {
    "label": "add_time",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.FFCamp.time.time_calculator",
    "description": "BGOONZ_DS_EX.FFCamp.time.time_calculator",
    "peekOfCode": "def add_time(start, duration, day=\"\"):\n    [h, m] = parse_time(start)\n    [ah, am] = parse_duration(duration)\n    m += am\n    h += ah\n    if m > 60:\n        m %= 60\n        h += 1\n    indicator = \"AM\"\n    n = h // 24",
    "detail": "BGOONZ_DS_EX.FFCamp.time.time_calculator",
    "documentation": {}
  },
  {
    "label": "parse_time",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.FFCamp.time.time_calculator",
    "description": "BGOONZ_DS_EX.FFCamp.time.time_calculator",
    "peekOfCode": "def parse_time(t):\n    [hm, am] = t.split()\n    [h, m] = parse_duration(hm)\n    if am != \"AM\":\n        h += 12\n    return [h, m]\ndef parse_duration(d):\n    return map(lambda s: int(s), d.split(\":\"))",
    "detail": "BGOONZ_DS_EX.FFCamp.time.time_calculator",
    "documentation": {}
  },
  {
    "label": "parse_duration",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.FFCamp.time.time_calculator",
    "description": "BGOONZ_DS_EX.FFCamp.time.time_calculator",
    "peekOfCode": "def parse_duration(d):\n    return map(lambda s: int(s), d.split(\":\"))",
    "detail": "BGOONZ_DS_EX.FFCamp.time.time_calculator",
    "documentation": {}
  },
  {
    "label": "day_map",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.FFCamp.time.time_calculator",
    "description": "BGOONZ_DS_EX.FFCamp.time.time_calculator",
    "peekOfCode": "day_map = {\n    \"Monday\": 0,\n    \"Tuesday\": 1,\n    \"Wednesday\": 2,\n    \"Thursday\": 3,\n    \"Friday\": 4,\n    \"Saturday\": 5,\n    \"Sunday\": 6,\n}\nweek_days = {",
    "detail": "BGOONZ_DS_EX.FFCamp.time.time_calculator",
    "documentation": {}
  },
  {
    "label": "week_days",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.FFCamp.time.time_calculator",
    "description": "BGOONZ_DS_EX.FFCamp.time.time_calculator",
    "peekOfCode": "week_days = {\n    0: \"Monday\",\n    1: \"Tuesday\",\n    2: \"Wednesday\",\n    3: \"Thursday\",\n    4: \"Friday\",\n    5: \"Saturday\",\n    6: \"Sunday\",\n}\ndef add_time(start, duration, day=\"\"):",
    "detail": "BGOONZ_DS_EX.FFCamp.time.time_calculator",
    "documentation": {}
  },
  {
    "label": "BinarySearch",
    "kind": 6,
    "importPath": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.01_introduction_to_algorithms.python.binary_search",
    "description": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.01_introduction_to_algorithms.python.binary_search",
    "peekOfCode": "class BinarySearch:\n    def search_iterative(self, list, item):\n        # low and high keep track of which part of the list you'll search in.\n        low = 0\n        high = len(list) - 1\n        # While you haven't narrowed it down to one element ...\n        while low <= high:\n            # ... check the middle element\n            mid = (low + high) // 2\n            guess = list[mid]",
    "detail": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.01_introduction_to_algorithms.python.binary_search",
    "documentation": {}
  },
  {
    "label": "TestBinarySearch",
    "kind": 6,
    "importPath": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.01_introduction_to_algorithms.python.test_binary_search",
    "description": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.01_introduction_to_algorithms.python.test_binary_search",
    "peekOfCode": "class TestBinarySearch(unittest.TestCase):\n    def setUp(self):\n        print(\".......... %s\" % self._testMethodName)\n    # Checking the implementation of iterative binary search\n    def test_iterative_binary_search_with_simple_list(self):\n        # ARRANGE\n        # You can check the index of each item in the items.json file\n        item, expected_index = 3, 1\n        # ACT\n        # Run the method we created and get the index of the item we were looking for",
    "detail": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.01_introduction_to_algorithms.python.test_binary_search",
    "documentation": {}
  },
  {
    "label": "bs",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.01_introduction_to_algorithms.python.test_binary_search",
    "description": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.01_introduction_to_algorithms.python.test_binary_search",
    "peekOfCode": "bs = BinarySearch()\n# Unloading all lists from a file\nwith open(\"items.json\", \"r\") as file:\n    data = json.load(file)\n# Setting values to created variables\nsimple_list = data[\"simple_list\"]\nlist_with_10_items = data[\"list_with_10_items\"]\nlist_with_100_items = data[\"list_with_100_items\"]\nlist_with_1000_items = data[\"list_with_1000_items\"]\n# Test cases to test Binary Search algorithm",
    "detail": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.01_introduction_to_algorithms.python.test_binary_search",
    "documentation": {}
  },
  {
    "label": "simple_list",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.01_introduction_to_algorithms.python.test_binary_search",
    "description": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.01_introduction_to_algorithms.python.test_binary_search",
    "peekOfCode": "simple_list = data[\"simple_list\"]\nlist_with_10_items = data[\"list_with_10_items\"]\nlist_with_100_items = data[\"list_with_100_items\"]\nlist_with_1000_items = data[\"list_with_1000_items\"]\n# Test cases to test Binary Search algorithm\nclass TestBinarySearch(unittest.TestCase):\n    def setUp(self):\n        print(\".......... %s\" % self._testMethodName)\n    # Checking the implementation of iterative binary search\n    def test_iterative_binary_search_with_simple_list(self):",
    "detail": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.01_introduction_to_algorithms.python.test_binary_search",
    "documentation": {}
  },
  {
    "label": "list_with_10_items",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.01_introduction_to_algorithms.python.test_binary_search",
    "description": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.01_introduction_to_algorithms.python.test_binary_search",
    "peekOfCode": "list_with_10_items = data[\"list_with_10_items\"]\nlist_with_100_items = data[\"list_with_100_items\"]\nlist_with_1000_items = data[\"list_with_1000_items\"]\n# Test cases to test Binary Search algorithm\nclass TestBinarySearch(unittest.TestCase):\n    def setUp(self):\n        print(\".......... %s\" % self._testMethodName)\n    # Checking the implementation of iterative binary search\n    def test_iterative_binary_search_with_simple_list(self):\n        # ARRANGE",
    "detail": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.01_introduction_to_algorithms.python.test_binary_search",
    "documentation": {}
  },
  {
    "label": "list_with_100_items",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.01_introduction_to_algorithms.python.test_binary_search",
    "description": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.01_introduction_to_algorithms.python.test_binary_search",
    "peekOfCode": "list_with_100_items = data[\"list_with_100_items\"]\nlist_with_1000_items = data[\"list_with_1000_items\"]\n# Test cases to test Binary Search algorithm\nclass TestBinarySearch(unittest.TestCase):\n    def setUp(self):\n        print(\".......... %s\" % self._testMethodName)\n    # Checking the implementation of iterative binary search\n    def test_iterative_binary_search_with_simple_list(self):\n        # ARRANGE\n        # You can check the index of each item in the items.json file",
    "detail": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.01_introduction_to_algorithms.python.test_binary_search",
    "documentation": {}
  },
  {
    "label": "list_with_1000_items",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.01_introduction_to_algorithms.python.test_binary_search",
    "description": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.01_introduction_to_algorithms.python.test_binary_search",
    "peekOfCode": "list_with_1000_items = data[\"list_with_1000_items\"]\n# Test cases to test Binary Search algorithm\nclass TestBinarySearch(unittest.TestCase):\n    def setUp(self):\n        print(\".......... %s\" % self._testMethodName)\n    # Checking the implementation of iterative binary search\n    def test_iterative_binary_search_with_simple_list(self):\n        # ARRANGE\n        # You can check the index of each item in the items.json file\n        item, expected_index = 3, 1",
    "detail": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.01_introduction_to_algorithms.python.test_binary_search",
    "documentation": {}
  },
  {
    "label": "findSmallest",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.02_selection_sort.python.01_selection_sort",
    "description": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.02_selection_sort.python.01_selection_sort",
    "peekOfCode": "def findSmallest(arr):\n    # Stores the smallest value\n    smallest = arr[0]\n    # Stores the index of the smallest value\n    smallest_index = 0\n    for i in range(1, len(arr)):\n        if arr[i] < smallest:\n            smallest_index = i\n            smallest = arr[i]\n    return smallest_index",
    "detail": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.02_selection_sort.python.01_selection_sort",
    "documentation": {}
  },
  {
    "label": "selectionSort",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.02_selection_sort.python.01_selection_sort",
    "description": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.02_selection_sort.python.01_selection_sort",
    "peekOfCode": "def selectionSort(arr):\n    newArr = []\n    for i in range(len(arr)):\n        # Finds the smallest element in the array and adds it to the new array\n        smallest = findSmallest(arr)\n        newArr.append(arr.pop(smallest))\n    return newArr\nprint(selectionSort([5, 3, 6, 2, 10]))",
    "detail": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.02_selection_sort.python.01_selection_sort",
    "documentation": {}
  },
  {
    "label": "countdown",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.03_recursion.python.01_countdown",
    "description": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.03_recursion.python.01_countdown",
    "peekOfCode": "def countdown(i):\n    # base case\n    if i <= 0:\n        return 0\n    # recursive case\n    else:\n        print(i)\n        return countdown(i - 1)\ncountdown(5)",
    "detail": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.03_recursion.python.01_countdown",
    "documentation": {}
  },
  {
    "label": "greet2",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.03_recursion.python.02_greet",
    "description": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.03_recursion.python.02_greet",
    "peekOfCode": "def greet2(name):\n    print(\"how are you, \", name, \"?\")\ndef bye():\n    print(\"ok bye!\")\ndef greet(name):\n    print(\"hello, \", name, \"!\")\n    greet2(name)\n    print(\"getting ready to say bye...\")\n    bye()\ngreet(\"adit\")",
    "detail": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.03_recursion.python.02_greet",
    "documentation": {}
  },
  {
    "label": "bye",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.03_recursion.python.02_greet",
    "description": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.03_recursion.python.02_greet",
    "peekOfCode": "def bye():\n    print(\"ok bye!\")\ndef greet(name):\n    print(\"hello, \", name, \"!\")\n    greet2(name)\n    print(\"getting ready to say bye...\")\n    bye()\ngreet(\"adit\")",
    "detail": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.03_recursion.python.02_greet",
    "documentation": {}
  },
  {
    "label": "greet",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.03_recursion.python.02_greet",
    "description": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.03_recursion.python.02_greet",
    "peekOfCode": "def greet(name):\n    print(\"hello, \", name, \"!\")\n    greet2(name)\n    print(\"getting ready to say bye...\")\n    bye()\ngreet(\"adit\")",
    "detail": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.03_recursion.python.02_greet",
    "documentation": {}
  },
  {
    "label": "fact",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.03_recursion.python.03_factorial",
    "description": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.03_recursion.python.03_factorial",
    "peekOfCode": "def fact(x):\n    if x == 1:\n        return 1\n    else:\n        return x * fact(x - 1)\nprint(fact(5))",
    "detail": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.03_recursion.python.03_factorial",
    "documentation": {}
  },
  {
    "label": "count",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.03_recursion.python.04_count",
    "description": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.03_recursion.python.04_count",
    "peekOfCode": "def count(arr):\n    if not arr:\n        return 0\n    return 1 + count(arr[1:])",
    "detail": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.03_recursion.python.04_count",
    "documentation": {}
  },
  {
    "label": "binary_search",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.03_recursion.python.05_binary_search_recursive",
    "description": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.03_recursion.python.05_binary_search_recursive",
    "peekOfCode": "def binary_search(arr, target):\n    if not arr:\n        return -1\n    if len(arr) == 1 and arr[0] == target:\n        return arr[0]\n    if len(arr) == 1 and arr[0] != target:\n        return -1\n    low = 0\n    high = len(arr) - 1\n    mid = (low + high) // 2",
    "detail": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.03_recursion.python.05_binary_search_recursive",
    "documentation": {}
  },
  {
    "label": "find_max",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.03_recursion.python.06_find_max",
    "description": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.03_recursion.python.06_find_max",
    "peekOfCode": "def find_max(arr):\n    if len(arr) == 2:\n        return arr[0] if arr[0] > arr[1] else arr[1]\n    sub_max = find_max(arr[1:])\n    return arr[0] if arr[0] > sub_max else sub_max",
    "detail": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.03_recursion.python.06_find_max",
    "documentation": {}
  },
  {
    "label": "sum_array",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.03_recursion.python.07_sum_array",
    "description": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.03_recursion.python.07_sum_array",
    "peekOfCode": "def sum_array(arr):\n    if not arr:\n        return 0\n    return arr[0] + sum_array(arr[1:])",
    "detail": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.03_recursion.python.07_sum_array",
    "documentation": {}
  },
  {
    "label": "sum",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.04_quicksort.python.01_loop_sum",
    "description": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.04_quicksort.python.01_loop_sum",
    "peekOfCode": "def sum(arr):\n    total = 0\n    for x in arr:\n        total += x\n    return total\nprint(sum([1, 2, 3, 4]))",
    "detail": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.04_quicksort.python.01_loop_sum",
    "documentation": {}
  },
  {
    "label": "sum",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.04_quicksort.python.02_recursive_sum",
    "description": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.04_quicksort.python.02_recursive_sum",
    "peekOfCode": "def sum(list):\n    if list == []:\n        return 0\n    return list[0] + sum(list[1:])",
    "detail": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.04_quicksort.python.02_recursive_sum",
    "documentation": {}
  },
  {
    "label": "count",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.04_quicksort.python.03_recursive_count",
    "description": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.04_quicksort.python.03_recursive_count",
    "peekOfCode": "def count(list):\n    if list == []:\n        return 0\n    return 1 + count(list[1:])",
    "detail": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.04_quicksort.python.03_recursive_count",
    "documentation": {}
  },
  {
    "label": "max_",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.04_quicksort.python.04_recursive_max",
    "description": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.04_quicksort.python.04_recursive_max",
    "peekOfCode": "def max_(lst):\n    if len(lst) == 0:\n        return None\n    if len(lst) == 1:\n        return lst[0]\n    else:\n        sub_max = max_(lst[1:])\n        return lst[0] if lst[0] > sub_max else sub_max",
    "detail": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.04_quicksort.python.04_recursive_max",
    "documentation": {}
  },
  {
    "label": "quicksort",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.04_quicksort.python.05_quicksort",
    "description": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.04_quicksort.python.05_quicksort",
    "peekOfCode": "def quicksort(array):\n    if len(array) < 2:\n        # base case, arrays with 0 or 1 element are already \"sorted\"\n        return array\n    else:\n        # recursive case\n        pivot = array[0]\n        # sub-array of all the elements less than the pivot\n        less = [i for i in array[1:] if i <= pivot]\n        # sub-array of all the elements greater than the pivot",
    "detail": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.04_quicksort.python.05_quicksort",
    "documentation": {}
  },
  {
    "label": "book",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.05_hash_tables.python.01_price_of_groceries",
    "description": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.05_hash_tables.python.01_price_of_groceries",
    "peekOfCode": "book = {\"apple\": 0.67, \"milk\": 1.49, \"avocado\": 1.49}\nprint(book)",
    "detail": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.05_hash_tables.python.01_price_of_groceries",
    "documentation": {}
  },
  {
    "label": "check_voter",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.05_hash_tables.python.02_check_voter",
    "description": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.05_hash_tables.python.02_check_voter",
    "peekOfCode": "def check_voter(name):\n    if voted.get(name):\n        print(\"kick them out!\")\n    else:\n        voted[name] = True\n        print(\"let them vote!\")\ncheck_voter(\"tom\")\ncheck_voter(\"mike\")\ncheck_voter(\"mike\")",
    "detail": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.05_hash_tables.python.02_check_voter",
    "documentation": {}
  },
  {
    "label": "voted",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.05_hash_tables.python.02_check_voter",
    "description": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.05_hash_tables.python.02_check_voter",
    "peekOfCode": "voted = {}\ndef check_voter(name):\n    if voted.get(name):\n        print(\"kick them out!\")\n    else:\n        voted[name] = True\n        print(\"let them vote!\")\ncheck_voter(\"tom\")\ncheck_voter(\"mike\")\ncheck_voter(\"mike\")",
    "detail": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.05_hash_tables.python.02_check_voter",
    "documentation": {}
  },
  {
    "label": "person_is_seller",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.06_breadth-first_search.python.01_breadth-first_search",
    "description": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.06_breadth-first_search.python.01_breadth-first_search",
    "peekOfCode": "def person_is_seller(name):\n    return name[-1] == \"m\"\ngraph = {}\ngraph[\"you\"] = [\"alice\", \"bob\", \"claire\"]\ngraph[\"bob\"] = [\"anuj\", \"peggy\"]\ngraph[\"alice\"] = [\"peggy\"]\ngraph[\"claire\"] = [\"thom\", \"jonny\"]\ngraph[\"anuj\"] = []\ngraph[\"peggy\"] = []\ngraph[\"thom\"] = []",
    "detail": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.06_breadth-first_search.python.01_breadth-first_search",
    "documentation": {}
  },
  {
    "label": "search",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.06_breadth-first_search.python.01_breadth-first_search",
    "description": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.06_breadth-first_search.python.01_breadth-first_search",
    "peekOfCode": "def search(name):\n    search_queue = deque()\n    search_queue += graph[name]\n    # This is how you keep track of which people you've searched before.\n    searched = set()\n    while search_queue:\n        person = search_queue.popleft()\n        # Only search this person if you haven't already searched them.\n        if person not in searched:\n            if person_is_seller(person):",
    "detail": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.06_breadth-first_search.python.01_breadth-first_search",
    "documentation": {}
  },
  {
    "label": "graph",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.06_breadth-first_search.python.01_breadth-first_search",
    "description": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.06_breadth-first_search.python.01_breadth-first_search",
    "peekOfCode": "graph = {}\ngraph[\"you\"] = [\"alice\", \"bob\", \"claire\"]\ngraph[\"bob\"] = [\"anuj\", \"peggy\"]\ngraph[\"alice\"] = [\"peggy\"]\ngraph[\"claire\"] = [\"thom\", \"jonny\"]\ngraph[\"anuj\"] = []\ngraph[\"peggy\"] = []\ngraph[\"thom\"] = []\ngraph[\"jonny\"] = []\ndef search(name):",
    "detail": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.06_breadth-first_search.python.01_breadth-first_search",
    "documentation": {}
  },
  {
    "label": "graph[\"you\"]",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.06_breadth-first_search.python.01_breadth-first_search",
    "description": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.06_breadth-first_search.python.01_breadth-first_search",
    "peekOfCode": "graph[\"you\"] = [\"alice\", \"bob\", \"claire\"]\ngraph[\"bob\"] = [\"anuj\", \"peggy\"]\ngraph[\"alice\"] = [\"peggy\"]\ngraph[\"claire\"] = [\"thom\", \"jonny\"]\ngraph[\"anuj\"] = []\ngraph[\"peggy\"] = []\ngraph[\"thom\"] = []\ngraph[\"jonny\"] = []\ndef search(name):\n    search_queue = deque()",
    "detail": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.06_breadth-first_search.python.01_breadth-first_search",
    "documentation": {}
  },
  {
    "label": "graph[\"bob\"]",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.06_breadth-first_search.python.01_breadth-first_search",
    "description": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.06_breadth-first_search.python.01_breadth-first_search",
    "peekOfCode": "graph[\"bob\"] = [\"anuj\", \"peggy\"]\ngraph[\"alice\"] = [\"peggy\"]\ngraph[\"claire\"] = [\"thom\", \"jonny\"]\ngraph[\"anuj\"] = []\ngraph[\"peggy\"] = []\ngraph[\"thom\"] = []\ngraph[\"jonny\"] = []\ndef search(name):\n    search_queue = deque()\n    search_queue += graph[name]",
    "detail": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.06_breadth-first_search.python.01_breadth-first_search",
    "documentation": {}
  },
  {
    "label": "graph[\"alice\"]",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.06_breadth-first_search.python.01_breadth-first_search",
    "description": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.06_breadth-first_search.python.01_breadth-first_search",
    "peekOfCode": "graph[\"alice\"] = [\"peggy\"]\ngraph[\"claire\"] = [\"thom\", \"jonny\"]\ngraph[\"anuj\"] = []\ngraph[\"peggy\"] = []\ngraph[\"thom\"] = []\ngraph[\"jonny\"] = []\ndef search(name):\n    search_queue = deque()\n    search_queue += graph[name]\n    # This is how you keep track of which people you've searched before.",
    "detail": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.06_breadth-first_search.python.01_breadth-first_search",
    "documentation": {}
  },
  {
    "label": "graph[\"claire\"]",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.06_breadth-first_search.python.01_breadth-first_search",
    "description": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.06_breadth-first_search.python.01_breadth-first_search",
    "peekOfCode": "graph[\"claire\"] = [\"thom\", \"jonny\"]\ngraph[\"anuj\"] = []\ngraph[\"peggy\"] = []\ngraph[\"thom\"] = []\ngraph[\"jonny\"] = []\ndef search(name):\n    search_queue = deque()\n    search_queue += graph[name]\n    # This is how you keep track of which people you've searched before.\n    searched = set()",
    "detail": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.06_breadth-first_search.python.01_breadth-first_search",
    "documentation": {}
  },
  {
    "label": "graph[\"anuj\"]",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.06_breadth-first_search.python.01_breadth-first_search",
    "description": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.06_breadth-first_search.python.01_breadth-first_search",
    "peekOfCode": "graph[\"anuj\"] = []\ngraph[\"peggy\"] = []\ngraph[\"thom\"] = []\ngraph[\"jonny\"] = []\ndef search(name):\n    search_queue = deque()\n    search_queue += graph[name]\n    # This is how you keep track of which people you've searched before.\n    searched = set()\n    while search_queue:",
    "detail": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.06_breadth-first_search.python.01_breadth-first_search",
    "documentation": {}
  },
  {
    "label": "graph[\"peggy\"]",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.06_breadth-first_search.python.01_breadth-first_search",
    "description": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.06_breadth-first_search.python.01_breadth-first_search",
    "peekOfCode": "graph[\"peggy\"] = []\ngraph[\"thom\"] = []\ngraph[\"jonny\"] = []\ndef search(name):\n    search_queue = deque()\n    search_queue += graph[name]\n    # This is how you keep track of which people you've searched before.\n    searched = set()\n    while search_queue:\n        person = search_queue.popleft()",
    "detail": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.06_breadth-first_search.python.01_breadth-first_search",
    "documentation": {}
  },
  {
    "label": "graph[\"thom\"]",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.06_breadth-first_search.python.01_breadth-first_search",
    "description": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.06_breadth-first_search.python.01_breadth-first_search",
    "peekOfCode": "graph[\"thom\"] = []\ngraph[\"jonny\"] = []\ndef search(name):\n    search_queue = deque()\n    search_queue += graph[name]\n    # This is how you keep track of which people you've searched before.\n    searched = set()\n    while search_queue:\n        person = search_queue.popleft()\n        # Only search this person if you haven't already searched them.",
    "detail": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.06_breadth-first_search.python.01_breadth-first_search",
    "documentation": {}
  },
  {
    "label": "graph[\"jonny\"]",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.06_breadth-first_search.python.01_breadth-first_search",
    "description": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.06_breadth-first_search.python.01_breadth-first_search",
    "peekOfCode": "graph[\"jonny\"] = []\ndef search(name):\n    search_queue = deque()\n    search_queue += graph[name]\n    # This is how you keep track of which people you've searched before.\n    searched = set()\n    while search_queue:\n        person = search_queue.popleft()\n        # Only search this person if you haven't already searched them.\n        if person not in searched:",
    "detail": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.06_breadth-first_search.python.01_breadth-first_search",
    "documentation": {}
  },
  {
    "label": "find_lowest_cost_node",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.07_dijkstras_algorithm.python.01_dijkstras_algorithm",
    "description": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.07_dijkstras_algorithm.python.01_dijkstras_algorithm",
    "peekOfCode": "def find_lowest_cost_node(costs):\n    lowest_cost = float(\"inf\")\n    lowest_cost_node = None\n    # Go through each node.\n    for node in costs:\n        cost = costs[node]\n        # If it's the lowest cost so far and hasn't been processed yet...\n        if cost < lowest_cost and node not in processed:\n            # ... set it as the new lowest-cost node.\n            lowest_cost = cost",
    "detail": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.07_dijkstras_algorithm.python.01_dijkstras_algorithm",
    "documentation": {}
  },
  {
    "label": "graph",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.07_dijkstras_algorithm.python.01_dijkstras_algorithm",
    "description": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.07_dijkstras_algorithm.python.01_dijkstras_algorithm",
    "peekOfCode": "graph = {}\ngraph[\"start\"] = {}\ngraph[\"start\"][\"a\"] = 6\ngraph[\"start\"][\"b\"] = 2\ngraph[\"a\"] = {}\ngraph[\"a\"][\"fin\"] = 1\ngraph[\"b\"] = {}\ngraph[\"b\"][\"a\"] = 3\ngraph[\"b\"][\"fin\"] = 5\ngraph[\"fin\"] = {}",
    "detail": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.07_dijkstras_algorithm.python.01_dijkstras_algorithm",
    "documentation": {}
  },
  {
    "label": "graph[\"start\"]",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.07_dijkstras_algorithm.python.01_dijkstras_algorithm",
    "description": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.07_dijkstras_algorithm.python.01_dijkstras_algorithm",
    "peekOfCode": "graph[\"start\"] = {}\ngraph[\"start\"][\"a\"] = 6\ngraph[\"start\"][\"b\"] = 2\ngraph[\"a\"] = {}\ngraph[\"a\"][\"fin\"] = 1\ngraph[\"b\"] = {}\ngraph[\"b\"][\"a\"] = 3\ngraph[\"b\"][\"fin\"] = 5\ngraph[\"fin\"] = {}\n# the costs table",
    "detail": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.07_dijkstras_algorithm.python.01_dijkstras_algorithm",
    "documentation": {}
  },
  {
    "label": "graph[\"start\"][\"a\"]",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.07_dijkstras_algorithm.python.01_dijkstras_algorithm",
    "description": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.07_dijkstras_algorithm.python.01_dijkstras_algorithm",
    "peekOfCode": "graph[\"start\"][\"a\"] = 6\ngraph[\"start\"][\"b\"] = 2\ngraph[\"a\"] = {}\ngraph[\"a\"][\"fin\"] = 1\ngraph[\"b\"] = {}\ngraph[\"b\"][\"a\"] = 3\ngraph[\"b\"][\"fin\"] = 5\ngraph[\"fin\"] = {}\n# the costs table\ninfinity = float(\"inf\")",
    "detail": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.07_dijkstras_algorithm.python.01_dijkstras_algorithm",
    "documentation": {}
  },
  {
    "label": "graph[\"start\"][\"b\"]",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.07_dijkstras_algorithm.python.01_dijkstras_algorithm",
    "description": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.07_dijkstras_algorithm.python.01_dijkstras_algorithm",
    "peekOfCode": "graph[\"start\"][\"b\"] = 2\ngraph[\"a\"] = {}\ngraph[\"a\"][\"fin\"] = 1\ngraph[\"b\"] = {}\ngraph[\"b\"][\"a\"] = 3\ngraph[\"b\"][\"fin\"] = 5\ngraph[\"fin\"] = {}\n# the costs table\ninfinity = float(\"inf\")\ncosts = {}",
    "detail": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.07_dijkstras_algorithm.python.01_dijkstras_algorithm",
    "documentation": {}
  },
  {
    "label": "graph[\"a\"]",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.07_dijkstras_algorithm.python.01_dijkstras_algorithm",
    "description": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.07_dijkstras_algorithm.python.01_dijkstras_algorithm",
    "peekOfCode": "graph[\"a\"] = {}\ngraph[\"a\"][\"fin\"] = 1\ngraph[\"b\"] = {}\ngraph[\"b\"][\"a\"] = 3\ngraph[\"b\"][\"fin\"] = 5\ngraph[\"fin\"] = {}\n# the costs table\ninfinity = float(\"inf\")\ncosts = {}\ncosts[\"a\"] = 6",
    "detail": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.07_dijkstras_algorithm.python.01_dijkstras_algorithm",
    "documentation": {}
  },
  {
    "label": "graph[\"a\"][\"fin\"]",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.07_dijkstras_algorithm.python.01_dijkstras_algorithm",
    "description": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.07_dijkstras_algorithm.python.01_dijkstras_algorithm",
    "peekOfCode": "graph[\"a\"][\"fin\"] = 1\ngraph[\"b\"] = {}\ngraph[\"b\"][\"a\"] = 3\ngraph[\"b\"][\"fin\"] = 5\ngraph[\"fin\"] = {}\n# the costs table\ninfinity = float(\"inf\")\ncosts = {}\ncosts[\"a\"] = 6\ncosts[\"b\"] = 2",
    "detail": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.07_dijkstras_algorithm.python.01_dijkstras_algorithm",
    "documentation": {}
  },
  {
    "label": "graph[\"b\"]",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.07_dijkstras_algorithm.python.01_dijkstras_algorithm",
    "description": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.07_dijkstras_algorithm.python.01_dijkstras_algorithm",
    "peekOfCode": "graph[\"b\"] = {}\ngraph[\"b\"][\"a\"] = 3\ngraph[\"b\"][\"fin\"] = 5\ngraph[\"fin\"] = {}\n# the costs table\ninfinity = float(\"inf\")\ncosts = {}\ncosts[\"a\"] = 6\ncosts[\"b\"] = 2\ncosts[\"fin\"] = infinity",
    "detail": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.07_dijkstras_algorithm.python.01_dijkstras_algorithm",
    "documentation": {}
  },
  {
    "label": "graph[\"b\"][\"a\"]",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.07_dijkstras_algorithm.python.01_dijkstras_algorithm",
    "description": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.07_dijkstras_algorithm.python.01_dijkstras_algorithm",
    "peekOfCode": "graph[\"b\"][\"a\"] = 3\ngraph[\"b\"][\"fin\"] = 5\ngraph[\"fin\"] = {}\n# the costs table\ninfinity = float(\"inf\")\ncosts = {}\ncosts[\"a\"] = 6\ncosts[\"b\"] = 2\ncosts[\"fin\"] = infinity\n# the parents table",
    "detail": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.07_dijkstras_algorithm.python.01_dijkstras_algorithm",
    "documentation": {}
  },
  {
    "label": "graph[\"b\"][\"fin\"]",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.07_dijkstras_algorithm.python.01_dijkstras_algorithm",
    "description": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.07_dijkstras_algorithm.python.01_dijkstras_algorithm",
    "peekOfCode": "graph[\"b\"][\"fin\"] = 5\ngraph[\"fin\"] = {}\n# the costs table\ninfinity = float(\"inf\")\ncosts = {}\ncosts[\"a\"] = 6\ncosts[\"b\"] = 2\ncosts[\"fin\"] = infinity\n# the parents table\nparents = {}",
    "detail": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.07_dijkstras_algorithm.python.01_dijkstras_algorithm",
    "documentation": {}
  },
  {
    "label": "graph[\"fin\"]",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.07_dijkstras_algorithm.python.01_dijkstras_algorithm",
    "description": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.07_dijkstras_algorithm.python.01_dijkstras_algorithm",
    "peekOfCode": "graph[\"fin\"] = {}\n# the costs table\ninfinity = float(\"inf\")\ncosts = {}\ncosts[\"a\"] = 6\ncosts[\"b\"] = 2\ncosts[\"fin\"] = infinity\n# the parents table\nparents = {}\nparents[\"a\"] = \"start\"",
    "detail": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.07_dijkstras_algorithm.python.01_dijkstras_algorithm",
    "documentation": {}
  },
  {
    "label": "infinity",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.07_dijkstras_algorithm.python.01_dijkstras_algorithm",
    "description": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.07_dijkstras_algorithm.python.01_dijkstras_algorithm",
    "peekOfCode": "infinity = float(\"inf\")\ncosts = {}\ncosts[\"a\"] = 6\ncosts[\"b\"] = 2\ncosts[\"fin\"] = infinity\n# the parents table\nparents = {}\nparents[\"a\"] = \"start\"\nparents[\"b\"] = \"start\"\nparents[\"fin\"] = None",
    "detail": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.07_dijkstras_algorithm.python.01_dijkstras_algorithm",
    "documentation": {}
  },
  {
    "label": "costs",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.07_dijkstras_algorithm.python.01_dijkstras_algorithm",
    "description": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.07_dijkstras_algorithm.python.01_dijkstras_algorithm",
    "peekOfCode": "costs = {}\ncosts[\"a\"] = 6\ncosts[\"b\"] = 2\ncosts[\"fin\"] = infinity\n# the parents table\nparents = {}\nparents[\"a\"] = \"start\"\nparents[\"b\"] = \"start\"\nparents[\"fin\"] = None\nprocessed = []",
    "detail": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.07_dijkstras_algorithm.python.01_dijkstras_algorithm",
    "documentation": {}
  },
  {
    "label": "costs[\"a\"]",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.07_dijkstras_algorithm.python.01_dijkstras_algorithm",
    "description": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.07_dijkstras_algorithm.python.01_dijkstras_algorithm",
    "peekOfCode": "costs[\"a\"] = 6\ncosts[\"b\"] = 2\ncosts[\"fin\"] = infinity\n# the parents table\nparents = {}\nparents[\"a\"] = \"start\"\nparents[\"b\"] = \"start\"\nparents[\"fin\"] = None\nprocessed = []\ndef find_lowest_cost_node(costs):",
    "detail": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.07_dijkstras_algorithm.python.01_dijkstras_algorithm",
    "documentation": {}
  },
  {
    "label": "costs[\"b\"]",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.07_dijkstras_algorithm.python.01_dijkstras_algorithm",
    "description": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.07_dijkstras_algorithm.python.01_dijkstras_algorithm",
    "peekOfCode": "costs[\"b\"] = 2\ncosts[\"fin\"] = infinity\n# the parents table\nparents = {}\nparents[\"a\"] = \"start\"\nparents[\"b\"] = \"start\"\nparents[\"fin\"] = None\nprocessed = []\ndef find_lowest_cost_node(costs):\n    lowest_cost = float(\"inf\")",
    "detail": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.07_dijkstras_algorithm.python.01_dijkstras_algorithm",
    "documentation": {}
  },
  {
    "label": "costs[\"fin\"]",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.07_dijkstras_algorithm.python.01_dijkstras_algorithm",
    "description": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.07_dijkstras_algorithm.python.01_dijkstras_algorithm",
    "peekOfCode": "costs[\"fin\"] = infinity\n# the parents table\nparents = {}\nparents[\"a\"] = \"start\"\nparents[\"b\"] = \"start\"\nparents[\"fin\"] = None\nprocessed = []\ndef find_lowest_cost_node(costs):\n    lowest_cost = float(\"inf\")\n    lowest_cost_node = None",
    "detail": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.07_dijkstras_algorithm.python.01_dijkstras_algorithm",
    "documentation": {}
  },
  {
    "label": "parents",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.07_dijkstras_algorithm.python.01_dijkstras_algorithm",
    "description": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.07_dijkstras_algorithm.python.01_dijkstras_algorithm",
    "peekOfCode": "parents = {}\nparents[\"a\"] = \"start\"\nparents[\"b\"] = \"start\"\nparents[\"fin\"] = None\nprocessed = []\ndef find_lowest_cost_node(costs):\n    lowest_cost = float(\"inf\")\n    lowest_cost_node = None\n    # Go through each node.\n    for node in costs:",
    "detail": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.07_dijkstras_algorithm.python.01_dijkstras_algorithm",
    "documentation": {}
  },
  {
    "label": "parents[\"a\"]",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.07_dijkstras_algorithm.python.01_dijkstras_algorithm",
    "description": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.07_dijkstras_algorithm.python.01_dijkstras_algorithm",
    "peekOfCode": "parents[\"a\"] = \"start\"\nparents[\"b\"] = \"start\"\nparents[\"fin\"] = None\nprocessed = []\ndef find_lowest_cost_node(costs):\n    lowest_cost = float(\"inf\")\n    lowest_cost_node = None\n    # Go through each node.\n    for node in costs:\n        cost = costs[node]",
    "detail": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.07_dijkstras_algorithm.python.01_dijkstras_algorithm",
    "documentation": {}
  },
  {
    "label": "parents[\"b\"]",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.07_dijkstras_algorithm.python.01_dijkstras_algorithm",
    "description": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.07_dijkstras_algorithm.python.01_dijkstras_algorithm",
    "peekOfCode": "parents[\"b\"] = \"start\"\nparents[\"fin\"] = None\nprocessed = []\ndef find_lowest_cost_node(costs):\n    lowest_cost = float(\"inf\")\n    lowest_cost_node = None\n    # Go through each node.\n    for node in costs:\n        cost = costs[node]\n        # If it's the lowest cost so far and hasn't been processed yet...",
    "detail": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.07_dijkstras_algorithm.python.01_dijkstras_algorithm",
    "documentation": {}
  },
  {
    "label": "parents[\"fin\"]",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.07_dijkstras_algorithm.python.01_dijkstras_algorithm",
    "description": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.07_dijkstras_algorithm.python.01_dijkstras_algorithm",
    "peekOfCode": "parents[\"fin\"] = None\nprocessed = []\ndef find_lowest_cost_node(costs):\n    lowest_cost = float(\"inf\")\n    lowest_cost_node = None\n    # Go through each node.\n    for node in costs:\n        cost = costs[node]\n        # If it's the lowest cost so far and hasn't been processed yet...\n        if cost < lowest_cost and node not in processed:",
    "detail": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.07_dijkstras_algorithm.python.01_dijkstras_algorithm",
    "documentation": {}
  },
  {
    "label": "processed",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.07_dijkstras_algorithm.python.01_dijkstras_algorithm",
    "description": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.07_dijkstras_algorithm.python.01_dijkstras_algorithm",
    "peekOfCode": "processed = []\ndef find_lowest_cost_node(costs):\n    lowest_cost = float(\"inf\")\n    lowest_cost_node = None\n    # Go through each node.\n    for node in costs:\n        cost = costs[node]\n        # If it's the lowest cost so far and hasn't been processed yet...\n        if cost < lowest_cost and node not in processed:\n            # ... set it as the new lowest-cost node.",
    "detail": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.07_dijkstras_algorithm.python.01_dijkstras_algorithm",
    "documentation": {}
  },
  {
    "label": "node",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.07_dijkstras_algorithm.python.01_dijkstras_algorithm",
    "description": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.07_dijkstras_algorithm.python.01_dijkstras_algorithm",
    "peekOfCode": "node = find_lowest_cost_node(costs)\n# If you've processed all the nodes, this while loop is done.\nwhile node is not None:\n    cost = costs[node]\n    # Go through all the neighbors of this node.\n    neighbors = graph[node]\n    for n in neighbors.keys():\n        new_cost = cost + neighbors[n]\n        # If it's cheaper to get to this neighbor by going through this node...\n        if costs[n] > new_cost:",
    "detail": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.07_dijkstras_algorithm.python.01_dijkstras_algorithm",
    "documentation": {}
  },
  {
    "label": "states_needed",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.08_greedy_algorithms.python.01_set_covering",
    "description": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.08_greedy_algorithms.python.01_set_covering",
    "peekOfCode": "states_needed = set([\"mt\", \"wa\", \"or\", \"id\", \"nv\", \"ut\", \"ca\", \"az\"])\nstations = {}\nstations[\"kone\"] = set([\"id\", \"nv\", \"ut\"])\nstations[\"ktwo\"] = set([\"wa\", \"id\", \"mt\"])\nstations[\"kthree\"] = set([\"or\", \"nv\", \"ca\"])\nstations[\"kfour\"] = set([\"nv\", \"ut\"])\nstations[\"kfive\"] = set([\"ca\", \"az\"])\nfinal_stations = set()\nwhile states_needed:\n    best_station = None",
    "detail": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.08_greedy_algorithms.python.01_set_covering",
    "documentation": {}
  },
  {
    "label": "stations",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.08_greedy_algorithms.python.01_set_covering",
    "description": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.08_greedy_algorithms.python.01_set_covering",
    "peekOfCode": "stations = {}\nstations[\"kone\"] = set([\"id\", \"nv\", \"ut\"])\nstations[\"ktwo\"] = set([\"wa\", \"id\", \"mt\"])\nstations[\"kthree\"] = set([\"or\", \"nv\", \"ca\"])\nstations[\"kfour\"] = set([\"nv\", \"ut\"])\nstations[\"kfive\"] = set([\"ca\", \"az\"])\nfinal_stations = set()\nwhile states_needed:\n    best_station = None\n    states_covered = set()",
    "detail": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.08_greedy_algorithms.python.01_set_covering",
    "documentation": {}
  },
  {
    "label": "stations[\"kone\"]",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.08_greedy_algorithms.python.01_set_covering",
    "description": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.08_greedy_algorithms.python.01_set_covering",
    "peekOfCode": "stations[\"kone\"] = set([\"id\", \"nv\", \"ut\"])\nstations[\"ktwo\"] = set([\"wa\", \"id\", \"mt\"])\nstations[\"kthree\"] = set([\"or\", \"nv\", \"ca\"])\nstations[\"kfour\"] = set([\"nv\", \"ut\"])\nstations[\"kfive\"] = set([\"ca\", \"az\"])\nfinal_stations = set()\nwhile states_needed:\n    best_station = None\n    states_covered = set()\n    for station, states_for_station in stations.items():",
    "detail": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.08_greedy_algorithms.python.01_set_covering",
    "documentation": {}
  },
  {
    "label": "stations[\"ktwo\"]",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.08_greedy_algorithms.python.01_set_covering",
    "description": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.08_greedy_algorithms.python.01_set_covering",
    "peekOfCode": "stations[\"ktwo\"] = set([\"wa\", \"id\", \"mt\"])\nstations[\"kthree\"] = set([\"or\", \"nv\", \"ca\"])\nstations[\"kfour\"] = set([\"nv\", \"ut\"])\nstations[\"kfive\"] = set([\"ca\", \"az\"])\nfinal_stations = set()\nwhile states_needed:\n    best_station = None\n    states_covered = set()\n    for station, states_for_station in stations.items():\n        covered = states_needed & states_for_station",
    "detail": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.08_greedy_algorithms.python.01_set_covering",
    "documentation": {}
  },
  {
    "label": "stations[\"kthree\"]",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.08_greedy_algorithms.python.01_set_covering",
    "description": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.08_greedy_algorithms.python.01_set_covering",
    "peekOfCode": "stations[\"kthree\"] = set([\"or\", \"nv\", \"ca\"])\nstations[\"kfour\"] = set([\"nv\", \"ut\"])\nstations[\"kfive\"] = set([\"ca\", \"az\"])\nfinal_stations = set()\nwhile states_needed:\n    best_station = None\n    states_covered = set()\n    for station, states_for_station in stations.items():\n        covered = states_needed & states_for_station\n        if len(covered) > len(states_covered):",
    "detail": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.08_greedy_algorithms.python.01_set_covering",
    "documentation": {}
  },
  {
    "label": "stations[\"kfour\"]",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.08_greedy_algorithms.python.01_set_covering",
    "description": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.08_greedy_algorithms.python.01_set_covering",
    "peekOfCode": "stations[\"kfour\"] = set([\"nv\", \"ut\"])\nstations[\"kfive\"] = set([\"ca\", \"az\"])\nfinal_stations = set()\nwhile states_needed:\n    best_station = None\n    states_covered = set()\n    for station, states_for_station in stations.items():\n        covered = states_needed & states_for_station\n        if len(covered) > len(states_covered):\n            best_station = station",
    "detail": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.08_greedy_algorithms.python.01_set_covering",
    "documentation": {}
  },
  {
    "label": "stations[\"kfive\"]",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.08_greedy_algorithms.python.01_set_covering",
    "description": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.08_greedy_algorithms.python.01_set_covering",
    "peekOfCode": "stations[\"kfive\"] = set([\"ca\", \"az\"])\nfinal_stations = set()\nwhile states_needed:\n    best_station = None\n    states_covered = set()\n    for station, states_for_station in stations.items():\n        covered = states_needed & states_for_station\n        if len(covered) > len(states_covered):\n            best_station = station\n            states_covered = covered",
    "detail": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.08_greedy_algorithms.python.01_set_covering",
    "documentation": {}
  },
  {
    "label": "final_stations",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.08_greedy_algorithms.python.01_set_covering",
    "description": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.08_greedy_algorithms.python.01_set_covering",
    "peekOfCode": "final_stations = set()\nwhile states_needed:\n    best_station = None\n    states_covered = set()\n    for station, states_for_station in stations.items():\n        covered = states_needed & states_for_station\n        if len(covered) > len(states_covered):\n            best_station = station\n            states_covered = covered\n    states_needed -= states_covered",
    "detail": "BGOONZ_DS_EX.Resources.ALL_LANG_DS_EXAMPLES.08_greedy_algorithms.python.01_set_covering",
    "documentation": {}
  },
  {
    "label": "BinaryTreeNode",
    "kind": 6,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.BalancedBinaryTree.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.BalancedBinaryTree.model_solution",
    "peekOfCode": "class BinaryTreeNode:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n    def insertLeft(self, value):\n        self.left = BinaryTreeNode(value)\n        return self.left\n    def insertRight(self, value):\n        self.right = BinaryTreeNode(value)",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.BalancedBinaryTree.model_solution",
    "documentation": {}
  },
  {
    "label": "checkBalanced",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.BalancedBinaryTree.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.BalancedBinaryTree.model_solution",
    "peekOfCode": "def checkBalanced(rootNode):\n    # An empty tree is balanced by default\n    if rootNode == None:\n        return True\n    # recursive helper function to check the min depth of the tree\n    def minDepth(node):\n        if node is None:\n            return 0\n        return 1 + min(minDepth(node.left), minDepth(node.right))\n    # recursive helper function to check the max depth of the tree",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.BalancedBinaryTree.model_solution",
    "documentation": {}
  },
  {
    "label": "root",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.BalancedBinaryTree.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.BalancedBinaryTree.model_solution",
    "peekOfCode": "root = BinaryTreeNode(5)\nprint(checkBalanced(root))  # should print True\nroot.insertLeft(10)\nprint(checkBalanced(root))  # should print False\nroot.insertRight(11)\nprint(checkBalanced(root))  # should print True",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.BalancedBinaryTree.model_solution",
    "documentation": {}
  },
  {
    "label": "balancedBrackets",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.BalancedBrackets.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.BalancedBrackets.model_solution",
    "peekOfCode": "def balancedBrackets(str):\n    line = list(str)  # Convert to array of characters\n    # we use a stack to keep track of the opening brackets\n    stack = []\n    # we use a dict to store the possible openers with\n    # their corresponding closers\n    openers = {\"(\": \")\", \"{\": \"}\", \"[\": \"]\"}\n    closers = {\")\": True, \"}\": True, \"]\": True}\n    for c in line:\n        # if we see an opener, push it onto our stack",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.BalancedBrackets.model_solution",
    "documentation": {}
  },
  {
    "label": "find_max_profit",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.BitcoinTrading.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.BitcoinTrading.model_solution",
    "peekOfCode": "def find_max_profit(prices):\n    minPrice = prices[0]\n    maxProfit = prices[1] - minPrice\n    for currentPrice in prices[1:]:\n        maxProfit = max(currentPrice - minPrice, maxProfit)\n        minPrice = min(currentPrice, minPrice)\n    return maxProfit\n# Some console.log tests\nprint(find_max_profit([10, 7, 5, 8, 11, 9]))\n# should print 6",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.BitcoinTrading.model_solution",
    "documentation": {}
  },
  {
    "label": "BinaryTreeNode",
    "kind": 6,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.BSTFromArray.model_solution.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.BSTFromArray.model_solution.model_solution",
    "peekOfCode": "class BinaryTreeNode:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n# Helper function to validate that the created tree is a valid BST\ndef is_BST(root, min_bound, max_bound):\n    if root is None:\n        return True\n    if root.value < min_bound or root.value > max_bound:",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.BSTFromArray.model_solution.model_solution",
    "documentation": {}
  },
  {
    "label": "create_min_height_bst",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.BSTFromArray.model_solution.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.BSTFromArray.model_solution.model_solution",
    "peekOfCode": "def create_min_height_bst(sorted_array):\n    left = 0\n    right = len(sorted_array) - 1\n    return rec_helper(sorted_array, left, right)\ndef rec_helper(sorted_array, left, right):\n    if left > right:\n        return None\n    midpoint = ((right - left) // 2) + left\n    root = BinaryTreeNode(sorted_array[midpoint])\n    root.left = rec_helper(sorted_array, left, midpoint - 1)",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.BSTFromArray.model_solution.model_solution",
    "documentation": {}
  },
  {
    "label": "rec_helper",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.BSTFromArray.model_solution.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.BSTFromArray.model_solution.model_solution",
    "peekOfCode": "def rec_helper(sorted_array, left, right):\n    if left > right:\n        return None\n    midpoint = ((right - left) // 2) + left\n    root = BinaryTreeNode(sorted_array[midpoint])\n    root.left = rec_helper(sorted_array, left, midpoint - 1)\n    root.right = rec_helper(sorted_array, midpoint + 1, right)\n    return root\nclass BinaryTreeNode:\n    def __init__(self, value):",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.BSTFromArray.model_solution.model_solution",
    "documentation": {}
  },
  {
    "label": "is_BST",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.BSTFromArray.model_solution.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.BSTFromArray.model_solution.model_solution",
    "peekOfCode": "def is_BST(root, min_bound, max_bound):\n    if root is None:\n        return True\n    if root.value < min_bound or root.value > max_bound:\n        return False\n    left = is_BST(root.left, min_bound, root.value - 1)\n    right = is_BST(root.right, root.value + 1, max_bound)\n    return left and right\n# Helper function to check the max height of a BST\ndef find_bst_max_height(node):",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.BSTFromArray.model_solution.model_solution",
    "documentation": {}
  },
  {
    "label": "find_bst_max_height",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.BSTFromArray.model_solution.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.BSTFromArray.model_solution.model_solution",
    "peekOfCode": "def find_bst_max_height(node):\n    if node is None:\n        return 0\n    return 1 + max(find_bst_max_height(node.left), find_bst_max_height(node.right))\n# Helper function to validate that the given BST exhibits the min height\ndef is_bst_min_height(root, N):\n    bst_max_height = find_bst_max_height(root)\n    should_equal = math.floor(math.log2(N)) + 1\n    return bst_max_height == should_equal\n# Helper function to count the number of nodes for a given BST",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.BSTFromArray.model_solution.model_solution",
    "documentation": {}
  },
  {
    "label": "is_bst_min_height",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.BSTFromArray.model_solution.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.BSTFromArray.model_solution.model_solution",
    "peekOfCode": "def is_bst_min_height(root, N):\n    bst_max_height = find_bst_max_height(root)\n    should_equal = math.floor(math.log2(N)) + 1\n    return bst_max_height == should_equal\n# Helper function to count the number of nodes for a given BST\ndef count_bst_nodes(root, count):\n    if root is None:\n        return count\n    count_bst_nodes(root.left, count)\n    count += 1",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.BSTFromArray.model_solution.model_solution",
    "documentation": {}
  },
  {
    "label": "count_bst_nodes",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.BSTFromArray.model_solution.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.BSTFromArray.model_solution.model_solution",
    "peekOfCode": "def count_bst_nodes(root, count):\n    if root is None:\n        return count\n    count_bst_nodes(root.left, count)\n    count += 1\n    count_bst_nodes(root.right, count)\n# Some tests\nsorted_array = [1, 2, 3, 4, 5, 6, 7]\nbst = create_min_height_bst(sorted_array)\nprint(is_BST(bst, float(\"-inf\"), float(\"inf\")))  # should print true",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.BSTFromArray.model_solution.model_solution",
    "documentation": {}
  },
  {
    "label": "sorted_array",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.BSTFromArray.model_solution.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.BSTFromArray.model_solution.model_solution",
    "peekOfCode": "sorted_array = [1, 2, 3, 4, 5, 6, 7]\nbst = create_min_height_bst(sorted_array)\nprint(is_BST(bst, float(\"-inf\"), float(\"inf\")))  # should print true\nprint(is_bst_min_height(bst, len(sorted_array)))  # should print true\nsorted_array = [4, 10, 11, 18, 42, 43, 47, 49, 55, 67, 79, 89, 90, 95, 98, 100]\nbst = create_min_height_bst(sorted_array)\nprint(is_BST(bst, float(\"-inf\"), float(\"inf\")))  # should print true\nprint(is_bst_min_height(bst, len(sorted_array)))  # should print true",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.BSTFromArray.model_solution.model_solution",
    "documentation": {}
  },
  {
    "label": "bst",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.BSTFromArray.model_solution.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.BSTFromArray.model_solution.model_solution",
    "peekOfCode": "bst = create_min_height_bst(sorted_array)\nprint(is_BST(bst, float(\"-inf\"), float(\"inf\")))  # should print true\nprint(is_bst_min_height(bst, len(sorted_array)))  # should print true\nsorted_array = [4, 10, 11, 18, 42, 43, 47, 49, 55, 67, 79, 89, 90, 95, 98, 100]\nbst = create_min_height_bst(sorted_array)\nprint(is_BST(bst, float(\"-inf\"), float(\"inf\")))  # should print true\nprint(is_bst_min_height(bst, len(sorted_array)))  # should print true",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.BSTFromArray.model_solution.model_solution",
    "documentation": {}
  },
  {
    "label": "sorted_array",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.BSTFromArray.model_solution.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.BSTFromArray.model_solution.model_solution",
    "peekOfCode": "sorted_array = [4, 10, 11, 18, 42, 43, 47, 49, 55, 67, 79, 89, 90, 95, 98, 100]\nbst = create_min_height_bst(sorted_array)\nprint(is_BST(bst, float(\"-inf\"), float(\"inf\")))  # should print true\nprint(is_bst_min_height(bst, len(sorted_array)))  # should print true",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.BSTFromArray.model_solution.model_solution",
    "documentation": {}
  },
  {
    "label": "bst",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.BSTFromArray.model_solution.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.BSTFromArray.model_solution.model_solution",
    "peekOfCode": "bst = create_min_height_bst(sorted_array)\nprint(is_BST(bst, float(\"-inf\"), float(\"inf\")))  # should print true\nprint(is_bst_min_height(bst, len(sorted_array)))  # should print true",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.BSTFromArray.model_solution.model_solution",
    "documentation": {}
  },
  {
    "label": "naive_climb_stairs",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.ClimbingStairs.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.ClimbingStairs.model_solution",
    "peekOfCode": "def naive_climb_stairs(n):\n    # base case 1\n    if n < 0:\n        return 0\n    # base case 2\n    elif n == 0:\n        return 1\n    # move towards our base case\n    else:\n        return (",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.ClimbingStairs.model_solution",
    "documentation": {}
  },
  {
    "label": "memoized_climb_stairs",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.ClimbingStairs.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.ClimbingStairs.model_solution",
    "peekOfCode": "def memoized_climb_stairs(n, cache):\n    if n < 0:\n        return 0\n    elif n == 0:\n        return 1\n    elif cache[n] > 1:\n        return cache[n]\n    else:\n        cache[n] = (\n            memoized_climb_stairs(n - 1, cache)",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.ClimbingStairs.model_solution",
    "documentation": {}
  },
  {
    "label": "count_votes",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.CountingVotes.model_solution.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.CountingVotes.model_solution.model_solution",
    "peekOfCode": "def count_votes(arr):\n    counts = {}\n    max_votes = 0\n    winner = \"\"\n    # Iterate over entire array\n    for vote in arr:\n        # If name doesnt exist in counts yet, add it with a value of 0\n        if vote not in counts:\n            counts[vote] = 0\n        # Increment the count of the name",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.CountingVotes.model_solution.model_solution",
    "documentation": {}
  },
  {
    "label": "BinaryTreeNode",
    "kind": 6,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.DepthFirstSearch.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.DepthFirstSearch.model_solution",
    "peekOfCode": "class BinaryTreeNode:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n    def insert_left(self, value):\n        self.left = BinaryTreeNode(value)\n        return self.left\n    def insert_right(self, value):\n        self.right = BinaryTreeNode(value)",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.DepthFirstSearch.model_solution",
    "documentation": {}
  },
  {
    "label": "recursive_depth_first_for_each",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.DepthFirstSearch.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.DepthFirstSearch.model_solution",
    "peekOfCode": "def recursive_depth_first_for_each(node, cb):\n    cb(node.value)\n    if node.left:\n        recursive_depth_first_for_each(node.left, cb)\n    if node.right:\n        recursive_depth_first_for_each(node.right, cb)\n# Iterative implementation\ndef iterative_depth_first_for_each(node, cb):\n    # use a stack to achieve the desired order\n    stack = [node]",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.DepthFirstSearch.model_solution",
    "documentation": {}
  },
  {
    "label": "iterative_depth_first_for_each",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.DepthFirstSearch.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.DepthFirstSearch.model_solution",
    "peekOfCode": "def iterative_depth_first_for_each(node, cb):\n    # use a stack to achieve the desired order\n    stack = [node]\n    while stack:\n        current = stack.pop()\n        # in order to achieve a left-to-right depth-first\n        # ordering, the right node needs to be pushed\n        # to the stack first\n        if current.right:\n            stack.append(current.right)",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.DepthFirstSearch.model_solution",
    "documentation": {}
  },
  {
    "label": "root",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.DepthFirstSearch.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.DepthFirstSearch.model_solution",
    "peekOfCode": "root = BinaryTreeNode(6)\nroot.insert_left(10)\nroot.insert_right(18)\nroot.left.insert_left(9)\nroot.right.insert_right(89)\ncb = lambda x: print(x)\nrecursive_depth_first_for_each(root, cb)  # should print 6 10 9 18 89\nprint()\niterative_depth_first_for_each(root, cb)  # should print 6 10 9 18 89\nprint()",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.DepthFirstSearch.model_solution",
    "documentation": {}
  },
  {
    "label": "cb",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.DepthFirstSearch.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.DepthFirstSearch.model_solution",
    "peekOfCode": "cb = lambda x: print(x)\nrecursive_depth_first_for_each(root, cb)  # should print 6 10 9 18 89\nprint()\niterative_depth_first_for_each(root, cb)  # should print 6 10 9 18 89\nprint()\nroot.left.insert_right(15)\nroot.right.insert_left(0)\nrecursive_depth_first_for_each(root, cb)  # should print 6 10 9 15 18 0 89\nprint()\niterative_depth_first_for_each(root, cb)  # should print 6 10 9 15 18 0 89",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.DepthFirstSearch.model_solution",
    "documentation": {}
  },
  {
    "label": "find_rotation_point",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.FindRotationPoint.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.FindRotationPoint.model_solution",
    "peekOfCode": "def find_rotation_point(words):\n    first_word = words[0]\n    floor_index = 0\n    ceiling_index = len(words) - 1\n    while floor_index < ceiling_index:\n        # guess a point halfway between floor and ceiling\n        guess_index = math.floor(floor_index + ((ceiling_index - floor_index) / 2))\n        # if guess comes after first word or is the first word\n        if words[guess_index] >= first_word:\n            # go right",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.FindRotationPoint.model_solution",
    "documentation": {}
  },
  {
    "label": "smallSet",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.FindRotationPoint.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.FindRotationPoint.model_solution",
    "peekOfCode": "smallSet = [\n    \"ptolemaic\",\n    \"retrograde\",\n    \"supplant\",\n    \"undulate\",\n    \"xenoepist\",\n    \"asymptote\",\n    \"babka\",\n    \"banoffee\",\n    \"engender\",",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.FindRotationPoint.model_solution",
    "documentation": {}
  },
  {
    "label": "largeSet",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.FindRotationPoint.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.FindRotationPoint.model_solution",
    "peekOfCode": "largeSet = [\n    \"zippers\",\n    \"zippier\",\n    \"zippiest\",\n    \"zipping\",\n    \"zippy\",\n    \"zips\",\n    \"ziram\",\n    \"zirams\",\n    \"zircon\",",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.FindRotationPoint.model_solution",
    "documentation": {}
  },
  {
    "label": "integerPairs",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.IntegerPairs.model_solution.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.IntegerPairs.model_solution.model_solution",
    "peekOfCode": "def integerPairs(arr, k):\n    found_pair = False\n    # sort the input array in-place\n    arr.sort()\n    # initialize indices to track both ends of the array\n    first = 0\n    last = len(arr) - 1\n    while first < last:\n        sum = arr[first] + arr[last]\n        # check to see if the two elements sum up to k",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.IntegerPairs.model_solution.model_solution",
    "documentation": {}
  },
  {
    "label": "integerPairs",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.IntegerPairs.model_solution.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.IntegerPairs.model_solution.model_solution",
    "peekOfCode": "def integerPairs(arr, k):\n    found_pair = False\n    # Use a hash to store key-value pairs of numbers\n    hash = {}\n    # Loop through the arr\n    for elem in arr:\n        # check to see if the complement for the\n        # current element exists in the hash\n        if k - elem in hash:\n            print(elem, k - elem)",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.IntegerPairs.model_solution.model_solution",
    "documentation": {}
  },
  {
    "label": "ListNode",
    "kind": 6,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.KthToLastNode.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.KthToLastNode.model_solution",
    "peekOfCode": "class ListNode:\n    def __init__(self, value):\n        self.value = value\n        self.next = None\ndef kthToLastNode(k, head):\n    if k < 1:\n        raise Exception(f\"Impossible to find less than first to last node: {k}\")\n    leftNode = head\n    rightNode = head\n    # move rightNode to the kth node",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.KthToLastNode.model_solution",
    "documentation": {}
  },
  {
    "label": "kthToLastNode",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.KthToLastNode.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.KthToLastNode.model_solution",
    "peekOfCode": "def kthToLastNode(k, head):\n    if k < 1:\n        raise Exception(f\"Impossible to find less than first to last node: {k}\")\n    leftNode = head\n    rightNode = head\n    # move rightNode to the kth node\n    for _ in range(k - 1):\n        # but along the way, if a rightNode doesn't have a next,\n        # then k is greater than the length of the list and there\n        # can't be a kth-to-last node! we'll raise an error",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.KthToLastNode.model_solution",
    "documentation": {}
  },
  {
    "label": "a",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.KthToLastNode.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.KthToLastNode.model_solution",
    "peekOfCode": "a = ListNode(\"Australian Sheperd\")\nb = ListNode(\"Beagle\")\nc = ListNode(\"Cairne Terrier\")\nd = ListNode(\"Dobermann\")\ne = ListNode(\"English Mastiff\")\na.next = b\nb.next = c\nc.next = d\nd.next = e\n# Some tests",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.KthToLastNode.model_solution",
    "documentation": {}
  },
  {
    "label": "b",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.KthToLastNode.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.KthToLastNode.model_solution",
    "peekOfCode": "b = ListNode(\"Beagle\")\nc = ListNode(\"Cairne Terrier\")\nd = ListNode(\"Dobermann\")\ne = ListNode(\"English Mastiff\")\na.next = b\nb.next = c\nc.next = d\nd.next = e\n# Some tests\nprint(kthToLastNode(2, a))  # should print 'Dobermann'",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.KthToLastNode.model_solution",
    "documentation": {}
  },
  {
    "label": "c",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.KthToLastNode.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.KthToLastNode.model_solution",
    "peekOfCode": "c = ListNode(\"Cairne Terrier\")\nd = ListNode(\"Dobermann\")\ne = ListNode(\"English Mastiff\")\na.next = b\nb.next = c\nc.next = d\nd.next = e\n# Some tests\nprint(kthToLastNode(2, a))  # should print 'Dobermann'\nprint(kthToLastNode(5, a))  # should print 'Australian Sheperd'",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.KthToLastNode.model_solution",
    "documentation": {}
  },
  {
    "label": "d",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.KthToLastNode.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.KthToLastNode.model_solution",
    "peekOfCode": "d = ListNode(\"Dobermann\")\ne = ListNode(\"English Mastiff\")\na.next = b\nb.next = c\nc.next = d\nd.next = e\n# Some tests\nprint(kthToLastNode(2, a))  # should print 'Dobermann'\nprint(kthToLastNode(5, a))  # should print 'Australian Sheperd'\nprint(kthToLastNode(3, c))  # should print 'Cairne Terrier'",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.KthToLastNode.model_solution",
    "documentation": {}
  },
  {
    "label": "e",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.KthToLastNode.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.KthToLastNode.model_solution",
    "peekOfCode": "e = ListNode(\"English Mastiff\")\na.next = b\nb.next = c\nc.next = d\nd.next = e\n# Some tests\nprint(kthToLastNode(2, a))  # should print 'Dobermann'\nprint(kthToLastNode(5, a))  # should print 'Australian Sheperd'\nprint(kthToLastNode(3, c))  # should print 'Cairne Terrier'",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.KthToLastNode.model_solution",
    "documentation": {}
  },
  {
    "label": "a.next",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.KthToLastNode.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.KthToLastNode.model_solution",
    "peekOfCode": "a.next = b\nb.next = c\nc.next = d\nd.next = e\n# Some tests\nprint(kthToLastNode(2, a))  # should print 'Dobermann'\nprint(kthToLastNode(5, a))  # should print 'Australian Sheperd'\nprint(kthToLastNode(3, c))  # should print 'Cairne Terrier'",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.KthToLastNode.model_solution",
    "documentation": {}
  },
  {
    "label": "b.next",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.KthToLastNode.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.KthToLastNode.model_solution",
    "peekOfCode": "b.next = c\nc.next = d\nd.next = e\n# Some tests\nprint(kthToLastNode(2, a))  # should print 'Dobermann'\nprint(kthToLastNode(5, a))  # should print 'Australian Sheperd'\nprint(kthToLastNode(3, c))  # should print 'Cairne Terrier'",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.KthToLastNode.model_solution",
    "documentation": {}
  },
  {
    "label": "c.next",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.KthToLastNode.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.KthToLastNode.model_solution",
    "peekOfCode": "c.next = d\nd.next = e\n# Some tests\nprint(kthToLastNode(2, a))  # should print 'Dobermann'\nprint(kthToLastNode(5, a))  # should print 'Australian Sheperd'\nprint(kthToLastNode(3, c))  # should print 'Cairne Terrier'",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.KthToLastNode.model_solution",
    "documentation": {}
  },
  {
    "label": "d.next",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.KthToLastNode.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.KthToLastNode.model_solution",
    "peekOfCode": "d.next = e\n# Some tests\nprint(kthToLastNode(2, a))  # should print 'Dobermann'\nprint(kthToLastNode(5, a))  # should print 'Australian Sheperd'\nprint(kthToLastNode(3, c))  # should print 'Cairne Terrier'",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.KthToLastNode.model_solution",
    "documentation": {}
  },
  {
    "label": "largest_contiguous_sum",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.LargestContiguousSum.model_solution.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.LargestContiguousSum.model_solution.model_solution",
    "peekOfCode": "def largest_contiguous_sum(arr):\n    max_sum = -math.inf\n    current_sum = 0\n    for x in arr:\n        current_sum += x\n        max_sum = max(current_sum, max_sum)\n        current_sum = max(current_sum, 0)\n    return max_sum\n# Tests\nprint(largest_contiguous_sum([5, -9, 6, -2, 3]))  # should print 7",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.LargestContiguousSum.model_solution.model_solution",
    "documentation": {}
  },
  {
    "label": "Stack",
    "kind": 6,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.LargestStack.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.LargestStack.model_solution",
    "peekOfCode": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)\n    def pop(self):\n        if len(self.items) > 0:\n            return self.items.pop()\n        else:\n            return None",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.LargestStack.model_solution",
    "documentation": {}
  },
  {
    "label": "MaxStack",
    "kind": 6,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.LargestStack.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.LargestStack.model_solution",
    "peekOfCode": "class MaxStack:\n    # We use two Stacks, one to store all the values\n    # The other to store just our max values\n    def __init__(self):\n        self.stack = Stack()\n        self.maxValues = Stack()\n    def push(self, item):\n        self.stack.push(item)\n        # If the given item is larger than the\n        # latest max value, add it to the stack",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.LargestStack.model_solution",
    "documentation": {}
  },
  {
    "label": "maxStack",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.LargestStack.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.LargestStack.model_solution",
    "peekOfCode": "maxStack = MaxStack()\nprint(maxStack.getMax())  # should print None\nmaxStack.push(1)\nprint(maxStack.getMax())  # should print 1\nmaxStack.push(100)\nprint(maxStack.getMax())  # should print 100\nmaxStack.pop()\nprint(maxStack.getMax())  # should print 1",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.LargestStack.model_solution",
    "documentation": {}
  },
  {
    "label": "ListNode",
    "kind": 6,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.LinkedListPalindrome.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.LinkedListPalindrome.model_solution",
    "peekOfCode": "class ListNode:\n    def __init__(self, value):\n        self.value = value\n        self.next = None\ndef isLinkedListPalindrome(listNode):\n    fast = listNode\n    slow = listNode\n    stack = []\n    while fast and fast.next:\n        stack.append(slow.value)",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.LinkedListPalindrome.model_solution",
    "documentation": {}
  },
  {
    "label": "isLinkedListPalindrome",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.LinkedListPalindrome.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.LinkedListPalindrome.model_solution",
    "peekOfCode": "def isLinkedListPalindrome(listNode):\n    fast = listNode\n    slow = listNode\n    stack = []\n    while fast and fast.next:\n        stack.append(slow.value)\n        slow = slow.next\n        fast = fast.next.next\n    # fast is a valid node, but fast.next is not\n    # this means we have a list with an odd number",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.LinkedListPalindrome.model_solution",
    "documentation": {}
  },
  {
    "label": "a",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.LinkedListPalindrome.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.LinkedListPalindrome.model_solution",
    "peekOfCode": "a = ListNode(1)\nb = ListNode(2)\nc = ListNode(3)\nd = ListNode(2)\ne = ListNode(1)\na.next = b\nb.next = c\nc.next = d\nd.next = e\nw = ListNode(10)",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.LinkedListPalindrome.model_solution",
    "documentation": {}
  },
  {
    "label": "b",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.LinkedListPalindrome.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.LinkedListPalindrome.model_solution",
    "peekOfCode": "b = ListNode(2)\nc = ListNode(3)\nd = ListNode(2)\ne = ListNode(1)\na.next = b\nb.next = c\nc.next = d\nd.next = e\nw = ListNode(10)\nx = ListNode(11)",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.LinkedListPalindrome.model_solution",
    "documentation": {}
  },
  {
    "label": "c",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.LinkedListPalindrome.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.LinkedListPalindrome.model_solution",
    "peekOfCode": "c = ListNode(3)\nd = ListNode(2)\ne = ListNode(1)\na.next = b\nb.next = c\nc.next = d\nd.next = e\nw = ListNode(10)\nx = ListNode(11)\ny = ListNode(11)",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.LinkedListPalindrome.model_solution",
    "documentation": {}
  },
  {
    "label": "d",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.LinkedListPalindrome.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.LinkedListPalindrome.model_solution",
    "peekOfCode": "d = ListNode(2)\ne = ListNode(1)\na.next = b\nb.next = c\nc.next = d\nd.next = e\nw = ListNode(10)\nx = ListNode(11)\ny = ListNode(11)\nz = ListNode(10)",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.LinkedListPalindrome.model_solution",
    "documentation": {}
  },
  {
    "label": "e",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.LinkedListPalindrome.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.LinkedListPalindrome.model_solution",
    "peekOfCode": "e = ListNode(1)\na.next = b\nb.next = c\nc.next = d\nd.next = e\nw = ListNode(10)\nx = ListNode(11)\ny = ListNode(11)\nz = ListNode(10)\nw.next = x",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.LinkedListPalindrome.model_solution",
    "documentation": {}
  },
  {
    "label": "a.next",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.LinkedListPalindrome.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.LinkedListPalindrome.model_solution",
    "peekOfCode": "a.next = b\nb.next = c\nc.next = d\nd.next = e\nw = ListNode(10)\nx = ListNode(11)\ny = ListNode(11)\nz = ListNode(10)\nw.next = x\nx.next = y",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.LinkedListPalindrome.model_solution",
    "documentation": {}
  },
  {
    "label": "b.next",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.LinkedListPalindrome.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.LinkedListPalindrome.model_solution",
    "peekOfCode": "b.next = c\nc.next = d\nd.next = e\nw = ListNode(10)\nx = ListNode(11)\ny = ListNode(11)\nz = ListNode(10)\nw.next = x\nx.next = y\ny.next = z",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.LinkedListPalindrome.model_solution",
    "documentation": {}
  },
  {
    "label": "c.next",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.LinkedListPalindrome.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.LinkedListPalindrome.model_solution",
    "peekOfCode": "c.next = d\nd.next = e\nw = ListNode(10)\nx = ListNode(11)\ny = ListNode(11)\nz = ListNode(10)\nw.next = x\nx.next = y\ny.next = z\nprint(isLinkedListPalindrome(a))  # should print true",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.LinkedListPalindrome.model_solution",
    "documentation": {}
  },
  {
    "label": "d.next",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.LinkedListPalindrome.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.LinkedListPalindrome.model_solution",
    "peekOfCode": "d.next = e\nw = ListNode(10)\nx = ListNode(11)\ny = ListNode(11)\nz = ListNode(10)\nw.next = x\nx.next = y\ny.next = z\nprint(isLinkedListPalindrome(a))  # should print true\nprint(",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.LinkedListPalindrome.model_solution",
    "documentation": {}
  },
  {
    "label": "w",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.LinkedListPalindrome.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.LinkedListPalindrome.model_solution",
    "peekOfCode": "w = ListNode(10)\nx = ListNode(11)\ny = ListNode(11)\nz = ListNode(10)\nw.next = x\nx.next = y\ny.next = z\nprint(isLinkedListPalindrome(a))  # should print true\nprint(\n    isLinkedListPalindrome(b)",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.LinkedListPalindrome.model_solution",
    "documentation": {}
  },
  {
    "label": "x",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.LinkedListPalindrome.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.LinkedListPalindrome.model_solution",
    "peekOfCode": "x = ListNode(11)\ny = ListNode(11)\nz = ListNode(10)\nw.next = x\nx.next = y\ny.next = z\nprint(isLinkedListPalindrome(a))  # should print true\nprint(\n    isLinkedListPalindrome(b)\n)  # should print false since now the 'a' node is not included in the linked list",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.LinkedListPalindrome.model_solution",
    "documentation": {}
  },
  {
    "label": "y",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.LinkedListPalindrome.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.LinkedListPalindrome.model_solution",
    "peekOfCode": "y = ListNode(11)\nz = ListNode(10)\nw.next = x\nx.next = y\ny.next = z\nprint(isLinkedListPalindrome(a))  # should print true\nprint(\n    isLinkedListPalindrome(b)\n)  # should print false since now the 'a' node is not included in the linked list\nprint(isLinkedListPalindrome(w))  # should print true",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.LinkedListPalindrome.model_solution",
    "documentation": {}
  },
  {
    "label": "z",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.LinkedListPalindrome.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.LinkedListPalindrome.model_solution",
    "peekOfCode": "z = ListNode(10)\nw.next = x\nx.next = y\ny.next = z\nprint(isLinkedListPalindrome(a))  # should print true\nprint(\n    isLinkedListPalindrome(b)\n)  # should print false since now the 'a' node is not included in the linked list\nprint(isLinkedListPalindrome(w))  # should print true",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.LinkedListPalindrome.model_solution",
    "documentation": {}
  },
  {
    "label": "w.next",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.LinkedListPalindrome.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.LinkedListPalindrome.model_solution",
    "peekOfCode": "w.next = x\nx.next = y\ny.next = z\nprint(isLinkedListPalindrome(a))  # should print true\nprint(\n    isLinkedListPalindrome(b)\n)  # should print false since now the 'a' node is not included in the linked list\nprint(isLinkedListPalindrome(w))  # should print true",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.LinkedListPalindrome.model_solution",
    "documentation": {}
  },
  {
    "label": "x.next",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.LinkedListPalindrome.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.LinkedListPalindrome.model_solution",
    "peekOfCode": "x.next = y\ny.next = z\nprint(isLinkedListPalindrome(a))  # should print true\nprint(\n    isLinkedListPalindrome(b)\n)  # should print false since now the 'a' node is not included in the linked list\nprint(isLinkedListPalindrome(w))  # should print true",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.LinkedListPalindrome.model_solution",
    "documentation": {}
  },
  {
    "label": "y.next",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.LinkedListPalindrome.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.LinkedListPalindrome.model_solution",
    "peekOfCode": "y.next = z\nprint(isLinkedListPalindrome(a))  # should print true\nprint(\n    isLinkedListPalindrome(b)\n)  # should print false since now the 'a' node is not included in the linked list\nprint(isLinkedListPalindrome(w))  # should print true",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.LinkedListPalindrome.model_solution",
    "documentation": {}
  },
  {
    "label": "spiralCopy",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.MatrixSpiralCopy.model_solution.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.MatrixSpiralCopy.model_solution.model_solution",
    "peekOfCode": "def spiralCopy(inputMatrix):\n    numRows = len(inputMatrix)\n    numCols = len(inputMatrix[0])\n    # keep track of where we are along each\n    # of the four sides of the matrix\n    topRow = 0\n    bottomRow = numRows - 1\n    leftCol = 0\n    rightCol = numCols - 1\n    result = []",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.MatrixSpiralCopy.model_solution.model_solution",
    "documentation": {}
  },
  {
    "label": "getIndicesOfItemWeights",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.MergingTwoPackages.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.MergingTwoPackages.model_solution",
    "peekOfCode": "def getIndicesOfItemWeights(arr, limit):\n    # use a dictionary to store item weights\n    # along with their 'complement'\n    o = {}\n    for i in range(len(arr)):\n        weight = arr[i]\n        # check the object to see if we have the\n        # complement of the current weight\n        complement = limit - weight\n        if complement in o:",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.MergingTwoPackages.model_solution",
    "documentation": {}
  },
  {
    "label": "Heap",
    "kind": 6,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.MinHeap.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.MinHeap.model_solution",
    "peekOfCode": "class Heap:\n    def __init__(self):\n        self.storage = []\n    def insert(self, value):\n        # push the given value to the end of the storage array\n        self.storage.append(value)\n        # use the `_bubbleUp` method to move this new value to\n        # a valid spot in the min heap\n        self._bubbleUp(len(self.storage) - 1)\n    def delete(self):",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.MinHeap.model_solution",
    "documentation": {}
  },
  {
    "label": "heap",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.MinHeap.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.MinHeap.model_solution",
    "peekOfCode": "heap = Heap()\nprint(heap.getMin())  # should print None\nheap.insert(5)\nprint(heap.getMin())  # should print 5\nheap.insert(100)\nprint(heap.getMin())  # should print 5\nheap.insert(2)\nprint(heap.getMin())  # should print 2\nprint(heap.delete())  # should print 2\nprint(heap.delete())  # should print 5",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.MinHeap.model_solution",
    "documentation": {}
  },
  {
    "label": "naiveMinJumps",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.MinJumps.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.MinJumps.model_solution",
    "peekOfCode": "def naiveMinJumps(arr, start=0, end=None):\n    if end is None:\n        end = len(arr) - 1\n    # base case: when start and end are at the same spot\n    if start >= end:\n        return 0\n    # when nothing is reachable, return infinity\n    if arr[start] == 0:\n        return float(\"inf\")\n    # traverse through all the spots reachable by",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.MinJumps.model_solution",
    "documentation": {}
  },
  {
    "label": "minJumps",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.MinJumps.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.MinJumps.model_solution",
    "peekOfCode": "def minJumps(arr, n=None):\n    if n is None:\n        n = len(arr)\n    jumps = [None] * n\n    if n == 0 or arr[0] == 0:\n        return float(\"inf\")\n    jumps[0] = 0\n    for i in range(1, n):\n        jumps[i] = float(\"inf\")\n        for j in range(n):",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.MinJumps.model_solution",
    "documentation": {}
  },
  {
    "label": "nthFib",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.NthFibonacci.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.NthFibonacci.model_solution",
    "peekOfCode": "def nthFib(n):\n    memo = [None] * (n + 1)\n    def nthFibMemo(n):\n        v = memo[n]\n        if v is None:\n            v = recurse(n)\n            memo[n] = v\n        return v\n    def recurse(n):\n        if n in [0, 1]:",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.NthFibonacci.model_solution",
    "documentation": {}
  },
  {
    "label": "nthFibIterative",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.NthFibonacci.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.NthFibonacci.model_solution",
    "peekOfCode": "def nthFibIterative(n):\n    memo = [None] * (n + 1)\n    memo[0] = 0\n    memo[1] = 1\n    for i in range(2, n + 1):\n        memo[i] = memo[i - 1] + memo[i - 2]\n    return memo[n]\n# Some console.log tests\nprint(nthFib(50))\nprint(nthFibIterative(50))",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.NthFibonacci.model_solution",
    "documentation": {}
  },
  {
    "label": "reconstructTrip",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.OneWayFlight.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.OneWayFlight.model_solution",
    "peekOfCode": "def reconstructTrip(tickets):\n    # use an object to associate sources\n    # and destinations\n    hash = {}\n    route = [None] * (len(tickets) - 1)\n    for ticket in tickets:\n        # check for the start destination of our trip\n        if ticket[0] is None:\n            # add it to our `route` array as the first element\n            route[0] = ticket[1]",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.OneWayFlight.model_solution",
    "documentation": {}
  },
  {
    "label": "shorterSet",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.OneWayFlight.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.OneWayFlight.model_solution",
    "peekOfCode": "shorterSet = [[None, \"PDX\"], [\"PDX\", \"DCA\"], [\"DCA\", None]]\nlongerSet = [\n    [\"PIT\", \"ORD\"],\n    [\"XNA\", \"CID\"],\n    [\"SFO\", \"BHM\"],\n    [\"FLG\", \"XNA\"],\n    [None, \"LAX\"],\n    [\"LAX\", \"SFO\"],\n    [\"CID\", \"SLC\"],\n    [\"ORD\", None],",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.OneWayFlight.model_solution",
    "documentation": {}
  },
  {
    "label": "longerSet",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.OneWayFlight.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.OneWayFlight.model_solution",
    "peekOfCode": "longerSet = [\n    [\"PIT\", \"ORD\"],\n    [\"XNA\", \"CID\"],\n    [\"SFO\", \"BHM\"],\n    [\"FLG\", \"XNA\"],\n    [None, \"LAX\"],\n    [\"LAX\", \"SFO\"],\n    [\"CID\", \"SLC\"],\n    [\"ORD\", None],\n    [\"SLC\", \"PIT\"],",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.OneWayFlight.model_solution",
    "documentation": {}
  },
  {
    "label": "product_of_all_others",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.ProductOfAllOtherNumbers.model_solution.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.ProductOfAllOtherNumbers.model_solution.model_solution",
    "peekOfCode": "def product_of_all_others(arr):\n    if len(arr) < 2:\n        return None\n    products = [0 for _ in range(len(arr))]\n    # For each integer, we find the product of all the integers\n    # before it, storing the total product so far each time\n    product_so_far = 1\n    for i in range(len(arr)):\n        products[i] = product_so_far\n        product_so_far *= arr[i]",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.ProductOfAllOtherNumbers.model_solution.model_solution",
    "documentation": {}
  },
  {
    "label": "Queue",
    "kind": 6,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.QueueWithTwoStacks.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.QueueWithTwoStacks.model_solution",
    "peekOfCode": "class Queue:\n    def __init__(self):\n        # Stack to hold elements that get added\n        self.inStack = []\n        # Stack to hold elements that are getting removed\n        self.outStack = []\n    def enqueue(self, item):\n        self.inStack.append(item)\n    def dequeue(self):\n        # if the outStack is empty",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.QueueWithTwoStacks.model_solution",
    "documentation": {}
  },
  {
    "label": "q",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.QueueWithTwoStacks.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.QueueWithTwoStacks.model_solution",
    "peekOfCode": "q = Queue()\nprint(q.peek())  # should print None\nq.enqueue(10)\nprint(q.peek())  # should print 10\nq.enqueue(9)\nq.enqueue(8)\nprint(q.dequeue())  # should print 10\nprint(q.dequeue())  # should print 9\nprint(q.dequeue())  # should print 8",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.QueueWithTwoStacks.model_solution",
    "documentation": {}
  },
  {
    "label": "ListNode",
    "kind": 6,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.ReverseSubList.model_solution.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.ReverseSubList.model_solution.model_solution",
    "peekOfCode": "class ListNode:\n    def __init__(self, value):\n        self.value = value\n        self.next = None\na = ListNode(\"a\")\nb = ListNode(\"b\")\nc = ListNode(\"c\")\nd = ListNode(\"d\")\ne = ListNode(\"e\")\na.next = b",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.ReverseSubList.model_solution.model_solution",
    "documentation": {}
  },
  {
    "label": "reverseLinkedList",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.ReverseSubList.model_solution.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.ReverseSubList.model_solution.model_solution",
    "peekOfCode": "def reverseLinkedList(node):\n    current = node\n    nextNode = None\n    prevNode = None\n    while current:\n        # store a reference to the next list node\n        # before we overwrite current.next\n        nextNode = current.next\n        # reverse the 'next' pointer\n        current.next = prevNode",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.ReverseSubList.model_solution.model_solution",
    "documentation": {}
  },
  {
    "label": "printList",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.ReverseSubList.model_solution.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.ReverseSubList.model_solution.model_solution",
    "peekOfCode": "def printList(node):\n    current = node\n    while current:\n        print(current.value)\n        current = current.next\nprint(reverseLinkedList(a))\n# should print 'e'\nprintList(e)\n# should print 'e', 'd', 'c', 'b', 'a'",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.ReverseSubList.model_solution.model_solution",
    "documentation": {}
  },
  {
    "label": "a",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.ReverseSubList.model_solution.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.ReverseSubList.model_solution.model_solution",
    "peekOfCode": "a = ListNode(\"a\")\nb = ListNode(\"b\")\nc = ListNode(\"c\")\nd = ListNode(\"d\")\ne = ListNode(\"e\")\na.next = b\nb.next = c\nc.next = d\nd.next = e\n# Function that prints the contents of a linked list",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.ReverseSubList.model_solution.model_solution",
    "documentation": {}
  },
  {
    "label": "b",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.ReverseSubList.model_solution.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.ReverseSubList.model_solution.model_solution",
    "peekOfCode": "b = ListNode(\"b\")\nc = ListNode(\"c\")\nd = ListNode(\"d\")\ne = ListNode(\"e\")\na.next = b\nb.next = c\nc.next = d\nd.next = e\n# Function that prints the contents of a linked list\ndef printList(node):",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.ReverseSubList.model_solution.model_solution",
    "documentation": {}
  },
  {
    "label": "c",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.ReverseSubList.model_solution.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.ReverseSubList.model_solution.model_solution",
    "peekOfCode": "c = ListNode(\"c\")\nd = ListNode(\"d\")\ne = ListNode(\"e\")\na.next = b\nb.next = c\nc.next = d\nd.next = e\n# Function that prints the contents of a linked list\ndef printList(node):\n    current = node",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.ReverseSubList.model_solution.model_solution",
    "documentation": {}
  },
  {
    "label": "d",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.ReverseSubList.model_solution.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.ReverseSubList.model_solution.model_solution",
    "peekOfCode": "d = ListNode(\"d\")\ne = ListNode(\"e\")\na.next = b\nb.next = c\nc.next = d\nd.next = e\n# Function that prints the contents of a linked list\ndef printList(node):\n    current = node\n    while current:",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.ReverseSubList.model_solution.model_solution",
    "documentation": {}
  },
  {
    "label": "e",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.ReverseSubList.model_solution.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.ReverseSubList.model_solution.model_solution",
    "peekOfCode": "e = ListNode(\"e\")\na.next = b\nb.next = c\nc.next = d\nd.next = e\n# Function that prints the contents of a linked list\ndef printList(node):\n    current = node\n    while current:\n        print(current.value)",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.ReverseSubList.model_solution.model_solution",
    "documentation": {}
  },
  {
    "label": "a.next",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.ReverseSubList.model_solution.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.ReverseSubList.model_solution.model_solution",
    "peekOfCode": "a.next = b\nb.next = c\nc.next = d\nd.next = e\n# Function that prints the contents of a linked list\ndef printList(node):\n    current = node\n    while current:\n        print(current.value)\n        current = current.next",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.ReverseSubList.model_solution.model_solution",
    "documentation": {}
  },
  {
    "label": "b.next",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.ReverseSubList.model_solution.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.ReverseSubList.model_solution.model_solution",
    "peekOfCode": "b.next = c\nc.next = d\nd.next = e\n# Function that prints the contents of a linked list\ndef printList(node):\n    current = node\n    while current:\n        print(current.value)\n        current = current.next\nprint(reverseLinkedList(a))",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.ReverseSubList.model_solution.model_solution",
    "documentation": {}
  },
  {
    "label": "c.next",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.ReverseSubList.model_solution.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.ReverseSubList.model_solution.model_solution",
    "peekOfCode": "c.next = d\nd.next = e\n# Function that prints the contents of a linked list\ndef printList(node):\n    current = node\n    while current:\n        print(current.value)\n        current = current.next\nprint(reverseLinkedList(a))\n# should print 'e'",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.ReverseSubList.model_solution.model_solution",
    "documentation": {}
  },
  {
    "label": "d.next",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.ReverseSubList.model_solution.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.ReverseSubList.model_solution.model_solution",
    "peekOfCode": "d.next = e\n# Function that prints the contents of a linked list\ndef printList(node):\n    current = node\n    while current:\n        print(current.value)\n        current = current.next\nprint(reverseLinkedList(a))\n# should print 'e'\nprintList(e)",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.ReverseSubList.model_solution.model_solution",
    "documentation": {}
  },
  {
    "label": "RingBuffer",
    "kind": 6,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.RingBuffer.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.RingBuffer.model_solution",
    "peekOfCode": "class RingBuffer:\n    def __init__(self, capacity):\n        self.capacity = capacity\n        self.current = 0\n        self.storage = [None] * capacity\n    def append(self, item):\n        self.storage[self.current] = item\n        self.current += 1\n        # If we reach the capacity of the buffer\n        # set the current pointer back to the beginning",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.RingBuffer.model_solution",
    "documentation": {}
  },
  {
    "label": "buffer",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.RingBuffer.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.RingBuffer.model_solution",
    "peekOfCode": "buffer = RingBuffer(5)\nbuffer.append(\"a\")\nbuffer.append(\"b\")\nbuffer.append(\"c\")\nbuffer.append(\"d\")\nprint(buffer.allValues())  # should print ['a', 'b', 'c', 'd', 'None']\nbuffer.append(\"e\")\nprint(buffer.allValues())  # should print ['a', 'b', 'c', 'd', 'e']\nbuffer.append(\"f\")\nprint(buffer.allValues())  # should print ['f', 'b', 'c', 'd', 'e']",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.RingBuffer.model_solution",
    "documentation": {}
  },
  {
    "label": "makeBoard",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.RobotPaths.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.RobotPaths.model_solution",
    "peekOfCode": "def makeBoard(n):\n    board = []\n    for i in range(n):\n        board.append([])\n        for _ in range(n):\n            board[i].append(False)\n    return board\ndef robotPaths(n):\n    robotPaths.pathCounter = 0\n    board = makeBoard(n)",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.RobotPaths.model_solution",
    "documentation": {}
  },
  {
    "label": "robotPaths",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.RobotPaths.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.RobotPaths.model_solution",
    "peekOfCode": "def robotPaths(n):\n    robotPaths.pathCounter = 0\n    board = makeBoard(n)\n    hasBeenVisited = lambda i, j: board[i][j]\n    def traversePaths(i, j):\n        if i == n - 1 and j == n - 1:\n            robotPaths.pathCounter += 1\n            return\n        if i < 0 or i >= n or j < 0 or j >= n:\n            return",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.RobotPaths.model_solution",
    "documentation": {}
  },
  {
    "label": "rock_paper_scissors",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.RockPaperScissors.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.RockPaperScissors.model_solution",
    "peekOfCode": "def rock_paper_scissors(n):\n    outcomes = []\n    plays = [\"rock\", \"paper\", \"scissors\"]\n    def find_outcome(rounds_left, result=[]):\n        if rounds_left == 0:\n            outcomes.append(result)\n            return\n        for play in plays:\n            find_outcome(rounds_left - 1, result + [play])\n    find_outcome(n, [])",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.RockPaperScissors.model_solution",
    "documentation": {}
  },
  {
    "label": "rotate_image",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.RotateImage.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.RotateImage.model_solution",
    "peekOfCode": "def rotate_image(image):\n    for row in image:\n        row.reverse()\n    for i in range(len(image)):\n        for j in range(i):\n            image[i][j], image[j][i] = image[j][i], image[i][j]\n    return image\n# Some print tests\nprint(rotate_image([[1, 2], [3, 4]]))  # should print [ [ 2, 4 ], [ 1, 3 ] ]\nprint(",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.RotateImage.model_solution",
    "documentation": {}
  },
  {
    "label": "search_sorted_matrix",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.SearchInSortedMatrix.model_solution.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.SearchInSortedMatrix.model_solution.model_solution",
    "peekOfCode": "def search_sorted_matrix(matrix, target):\n    row = 0\n    col = len(matrix[0]) - 1\n    while row < len(matrix) and col >= 0:\n        if matrix[row][col] > target:\n            col -= 1\n        elif matrix[row][col] < target:\n            row += 1\n        else:\n            return (row, col)",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.SearchInSortedMatrix.model_solution.model_solution",
    "documentation": {}
  },
  {
    "label": "matrix",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.SearchInSortedMatrix.model_solution.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.SearchInSortedMatrix.model_solution.model_solution",
    "peekOfCode": "matrix = [\n    [1, 4, 7, 12, 15, 999],\n    [2, 5, 19, 32, 35, 1001],\n    [4, 8, 24, 34, 36, 1002],\n    [40, 41, 42, 44, 45, 1003],\n    [98, 99, 101, 104, 190, 1009],\n]\nprint(search_sorted_matrix(matrix, 1))  # should print (0, 0)\nprint(search_sorted_matrix(matrix, 7))  # should print (0, 2)\nprint(search_sorted_matrix(matrix, 999))  # should print (0, 5)",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.SearchInSortedMatrix.model_solution.model_solution",
    "documentation": {}
  },
  {
    "label": "SetOfStacks",
    "kind": 6,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.SetOfStacks.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.SetOfStacks.model_solution",
    "peekOfCode": "class SetOfStacks:\n    def __init__(self, capacity):\n        self.capacity = capacity\n        self.stacks = [[]]\n        # the index of the current stack we're on\n        self.stack_index = 0\n    # returns the number of stacks\n    def __len__(self):\n        return self.stack_index + 1\n    def push(self, item):",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.SetOfStacks.model_solution",
    "documentation": {}
  },
  {
    "label": "stacks",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.SetOfStacks.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.SetOfStacks.model_solution",
    "peekOfCode": "stacks = SetOfStacks(3)\nstacks.push(6)\nstacks.push(8)\nstacks.push(3)\nprint(len(stacks))  # should print 1\nstacks.push(4)\nprint(len(stacks))  # should print 2\nprint(stacks.pop_at_no_rollover(0))  # should print 3\nprint(stacks.pop())  # should print 4\nprint(stacks.pop())  # should print 8",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.SetOfStacks.model_solution",
    "documentation": {}
  },
  {
    "label": "parse_number",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.SmallestString.model_solution.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.SmallestString.model_solution.model_solution",
    "peekOfCode": "def parse_number(string, index):\n    number_length = 0\n    number_value = \"\"\n    while index < len(string) and string[index].isdigit():\n        number_length += 1\n        number_value += string[index]\n        index += 1\n    return (int(number_value), number_length)\ndef shortest_string(str1, str2):\n    s1 = 0",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.SmallestString.model_solution.model_solution",
    "documentation": {}
  },
  {
    "label": "shortest_string",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.SmallestString.model_solution.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.SmallestString.model_solution.model_solution",
    "peekOfCode": "def shortest_string(str1, str2):\n    s1 = 0\n    s2 = 0\n    len1 = len(str1) - 1\n    len2 = len(str2) - 1\n    while s1 <= len1 and s2 <= len2:\n        if str1[s1].isalpha() and str2[s2].isalpha():\n            if str1[s1] != str2[s2]:\n                return str1 if str1[s1] < str2[s2] else str2\n            s1 += 1",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.SmallestString.model_solution.model_solution",
    "documentation": {}
  },
  {
    "label": "Stack",
    "kind": 6,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.SortStack.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.SortStack.model_solution",
    "peekOfCode": "class Stack:\n    def __init__(self):\n        self.storage = []\n    def push(self, item):\n        self.storage.append(item)\n    def pop(self):\n        return self.storage.pop()\n    def peek(self):\n        return self.storage[len(self.storage) - 1]\n    def is_empty(self):",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.SortStack.model_solution",
    "documentation": {}
  },
  {
    "label": "sort_stack",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.SortStack.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.SortStack.model_solution",
    "peekOfCode": "def sort_stack(s):\n    # output stack that will hold the sorted elements\n    output = Stack()\n    # keep sorting until the input Stack is completely empty\n    while not s.is_empty():\n        temp = s.pop()\n        # while the output stack still has elements and its\n        # top-most element is larger than the value of temp\n        while not output.is_empty() and output.peek() > temp:\n            # pop off our output stack back into the input stack",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.SortStack.model_solution",
    "documentation": {}
  },
  {
    "label": "s",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.SortStack.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.SortStack.model_solution",
    "peekOfCode": "s = Stack()\ns.push(10)\ns.push(4)\nsorted_stack = sort_stack(s)\nsorted_stack.print_contents()  # should print 4, 10\n# print a newline\nprint()\ns.push(8)\ns.push(5)\ns.push(1)",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.SortStack.model_solution",
    "documentation": {}
  },
  {
    "label": "sorted_stack",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.SortStack.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.SortStack.model_solution",
    "peekOfCode": "sorted_stack = sort_stack(s)\nsorted_stack.print_contents()  # should print 4, 10\n# print a newline\nprint()\ns.push(8)\ns.push(5)\ns.push(1)\ns.push(6)\ns.push(19)\ns.push(4)",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.SortStack.model_solution",
    "documentation": {}
  },
  {
    "label": "sorted_stack",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.SortStack.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.SortStack.model_solution",
    "peekOfCode": "sorted_stack = sort_stack(s)\nsorted_stack.print_contents()  # should print 1, 4, 5, 6, 8, 19",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.SortStack.model_solution",
    "documentation": {}
  },
  {
    "label": "sort_top_scores",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.SortTopScores.model_solution.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.SortTopScores.model_solution.model_solution",
    "peekOfCode": "def sort_top_scores(scores, highest_possible_score):\n    # init a list with length highest_possible_score filled with 0s\n    score_counts = [0 for _ in range(highest_possible_score)]\n    # increment the value at the index of each score so\n    # we get the count of how many times each score appears\n    for score in scores:\n        score_counts[score] += 1\n    # list to hold the sorted scores\n    sorted_scores = []\n    # iterate through our score_counts list",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.SortTopScores.model_solution.model_solution",
    "documentation": {}
  },
  {
    "label": "SuffixTrie",
    "kind": 6,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.SuffixTrie.model_solution.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.SuffixTrie.model_solution.model_solution",
    "peekOfCode": "class SuffixTrie:\n    def __init__(self, string):\n        self.root = {}\n        self.end_symbol = \"*\"\n        self.populate_trie(string)\n    def populate_trie(self, string):\n        # loop through each string index\n        for i, _ in enumerate(string):\n            # pass the index to a helper function that \n            # is responsible for inserting the",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.SuffixTrie.model_solution.model_solution",
    "documentation": {}
  },
  {
    "label": "TempTracker",
    "kind": 6,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.TemperatureTracker.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.TemperatureTracker.model_solution",
    "peekOfCode": "class TempTracker:\n    def __init__(self):\n        # for mode calculation\n        # populate occurrences list with 0s from 0 to 140\n        # since there's never been a recorded temp of > 140 ever\n        self.occurrences = [0] * 140\n        self.max_occurrences = 0\n        self.mode = None\n        # for mean\n        self.n_readings = 0",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.TemperatureTracker.model_solution",
    "documentation": {}
  },
  {
    "label": "time_planner",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.TimePlanner.model_solution.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.TimePlanner.model_solution.model_solution",
    "peekOfCode": "def time_planner(a, b, duration):\n    a_count = 0\n    b_count = 0\n    while a_count < len(a) and b_count < len(b):\n        start = max(a[a_count][0], b[b_count][0])\n        end = min(a[a_count][1], b[b_count][1])\n        if start + duration <= end:\n            return (start, start + duration)\n        if a[a_count][1] < b[b_count][1]:\n            a_count += 1",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.TimePlanner.model_solution.model_solution",
    "documentation": {}
  },
  {
    "label": "BinaryTreeNode",
    "kind": 6,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.ValidateBinaryTree.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.ValidateBinaryTree.model_solution",
    "peekOfCode": "class BinaryTreeNode:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n    def insert_left(self, value):\n        self.left = BinaryTreeNode(value)\n        return self.left\n    def insert_right(self, value):\n        self.right = BinaryTreeNode(value)",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.ValidateBinaryTree.model_solution",
    "documentation": {}
  },
  {
    "label": "is_binary_search_tree",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.ValidateBinaryTree.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.ValidateBinaryTree.model_solution",
    "peekOfCode": "def is_binary_search_tree(root):\n    # start at the root, with an arbitrarily low lower bound\n    # and an arbitrarily high upper bound\n    node_bounds_stack = [{\"node\": root, \"lower\": float(\"-inf\"), \"upper\": float(\"inf\")}]\n    # perform a depth-first traversal\n    while len(node_bounds_stack):\n        node_bounds = node_bounds_stack.pop()\n        node = node_bounds[\"node\"]\n        lower = node_bounds[\"lower\"]\n        upper = node_bounds[\"upper\"]",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.ValidateBinaryTree.model_solution",
    "documentation": {}
  },
  {
    "label": "root",
    "kind": 5,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.ValidateBinaryTree.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.ValidateBinaryTree.model_solution",
    "peekOfCode": "root = BinaryTreeNode(50)\nroot.insert_left(30)\nroot.left.insert_left(20)\nroot.left.insert_right(60)\nroot.insert_right(80)\nroot.right.insert_left(70)\nroot.right.insert_right(90)\nprint(is_binary_search_tree(root.left))  # should print True\nprint(is_binary_search_tree(root.right))  # should print True\nprint(is_binary_search_tree(root))  # should print False",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.ValidateBinaryTree.model_solution",
    "documentation": {}
  },
  {
    "label": "zeros_to_the_right",
    "kind": 2,
    "importPath": "BGOONZ_DS_EX.WHITEBOARD.ZerosToTheRight.model_solution.model_solution",
    "description": "BGOONZ_DS_EX.WHITEBOARD.ZerosToTheRight.model_solution.model_solution",
    "peekOfCode": "def zeros_to_the_right(arr):\n    left = 0\n    right = len(arr) - 1\n    n_zeros = 0\n    while left <= right:\n        if arr[left] == 0 and arr[right] != 0:\n            arr[left], arr[right] = arr[right], arr[left]\n            left += 1\n            right -= 1\n            n_zeros += 1",
    "detail": "BGOONZ_DS_EX.WHITEBOARD.ZerosToTheRight.model_solution.model_solution",
    "documentation": {}
  }
]
