{
  "version": "https://jsonfeed.org/version/1",
  "title": "A Beautiful Site",
  "home_page_url": "https://www.abeautifulsite.net/",
  "feed_url": "https://www.abeautifulsite.net/feed/feed.json",
  "description": "A blog about everything web. Est. 2007",
  "author": {
    "name": "Cory LaViska",
    "url": "https://www.abeautifulsite.net/about/"
  },
  "items": [{
      "id": "https://www.abeautifulsite.net/posts/know-when-to-draw-the-line/",
      "url": "https://www.abeautifulsite.net/posts/know-when-to-draw-the-line/",
      "title": "Know When To Draw The Line",
      "content_html": "<p>One-off variations aren't uncommon, but they don't belong in your design system. You're design system isn't solving for every possible use case — it's encouraging visual consistency and efficient development. Use custom styles for one-offs.</p>\n<p>This came up recently on my team.</p>\n<p>We have a button component that supports prefix icons. By default, the icon color matches the text. In one design, the same button was used but the icon color was the primary color instead. The question came up:</p>\n<blockquote>\n<p>&quot;Should we make a new button variant?&quot;</p>\n</blockquote>\n<p>The answer, of course, was no. Because the button should only look like that in a specific toolbar, the solution was something like:</p>\n<pre><code class=\"language-css\">my-toolbar my-button::part(icon) {\n  color: var(--primary);\n}\n</code></pre>\n<p>Know when to draw the line.</p>\n",
      "date_published": "2021-10-11T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/dont-do-magic/",
      "url": "https://www.abeautifulsite.net/posts/dont-do-magic/",
      "title": "Don&#39;t Do Magic",
      "content_html": "<p>We recently had a design for an &quot;alert&quot; component with an <code>actions</code> slot. In the spec, only secondary buttons were allowed in it.</p>\n<blockquote>\n<p>Dev: &quot;Design only wants secondary buttons in the actions slot, so I'm forcing it.&quot;</p>\n</blockquote>\n<p>The developer was listening for the <code>slotchange</code> event and applying the <code>secondary</code> variant to all buttons in the slot automatically. The idea was to prevent consumers from using the wrong buttons by constraining the design in code. This magic will cause problems.</p>\n<p>Here's the thing: designers change their minds. Sometimes a lot. They might <em>tell</em> you that a design will never, ever change. They might swear to everything holy that it will never change. But it can and often will.</p>\n<p>In this case, forcing a variant on slotted buttons changed them from:</p>\n<pre><code class=\"language-html\">&lt;my-button&gt;\n</code></pre>\n<p>to:</p>\n<pre><code class=\"language-html\">&lt;my-button appearance=&quot;secondary&quot;&gt;\n</code></pre>\n<p>Aside from being unexpected, it leaves the user with no obvious way to add anything other than a secondary button to the slot.</p>\n<blockquote>\n<p>&quot;But that's what design wants!&quot;</p>\n</blockquote>\n<p>...until they realize they need a primary action button in that slot. Now you have to write code to account for this new requirement, PR it, get it reviewed, approved, and push a new version so they can use it. Problem solved, right?</p>\n<p>Not so fast…</p>\n<h2 id=\"scopes-change\">Scopes Change <a class=\"direct-link\" href=\"#scopes-change\">#</a></h2>\n<p>Turns out, another team is using the same component to prototype a new feature and they want to use all possible button variations. This isn't the use case the design team initially specced the component for, but it doesn't make sense to create one from scratch because this one is close enough. Due to time and cost constraints, management decides the existing component should be modified to support both use cases.</p>\n<p>Boom. The design that won't change has changed.</p>\n<p>But remember the magic we coded that forced all slotted buttons to be secondary buttons? Because of that, we have to introduce a breaking change in our alert component OR give users an alternate API that's inconsistent with how buttons already work. Neither option is great.</p>\n<p>In my opinion, locking design choices down with code, or &quot;magic,&quot; is an antipattern. It creates more work for devs, makes things less intuitive for users, and introduces tech debt that will haunt you later on.</p>\n<blockquote>\n<p>&quot;Well then how do we force users to use the right buttons?&quot;</p>\n</blockquote>\n<p>We don't! That's not our job. Neither design nor engineering can account for every possible use case for the components we build.</p>\n<p>Our job is to give users tools to build things with. If I give you a hammer and you smash a hole in the wall instead of tapping in a nail, that's a misuse of the tool.</p>\n<p><img src=\"/images/hammer-oops.gif\" alt=\"Hammering a hole into the wall. Oops.\"></p>\n<h2 id=\"when-bulletproofing-is-overengineering\">When Bulletproofing is Overengineering <a class=\"direct-link\" href=\"#when-bulletproofing-is-overengineering\">#</a></h2>\n<p>As engineers, it can be tempting to make components &quot;bulletproof&quot; using ✨magic✨ code. This is usually an overstep. There are two things you shouldn't underestimate:</p>\n<ol>\n<li>The importance of design reviews</li>\n<li>Use cases that evolve over time</li>\n</ol>\n<p>If you're not taking the time to do design reviews, do them! But don't wait until the very end. You'll have better success if design and engineering work together <em>throughout</em> the process.</p>\n<p>As for magic — I consider it a code smell. If you find yourself forcing things like this via code, that's a red flag. A better approach is good documentation! Show examples of approved use cases. Give users code to copy and paste. Make it easy for them to get it right.</p>\n<p>Users will definitely do things they're not supposed to. Get comfortable with that and catch it in design reviews. Use these instances to understand <em>why</em> they're doing it that way and work with design to iterate if necessary. These are great opportunities to learn from each other.</p>\n<p>Don't assume users are dumb or just don't get it. Give them the tools they need and make it easy for them to succeed. Most importantly, listen to feedback and know when it's time to steer them away from incorrect usage vs. adapting the tooling for new requirements.</p>\n<hr>\n<small>\n<p>This post was originally <a href=\"https://twitter.com/claviska/status/1447562886314971141?s=20\">a series of tweets</a>.</p>\n</small>\n",
      "date_published": "2021-10-11T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/on-buttons-and-links/",
      "url": "https://www.abeautifulsite.net/posts/on-buttons-and-links/",
      "title": "On Buttons and Links",
      "content_html": "<p>I posted a tweet yesterday that was met with some controversy, so I thought it would be a good idea to unravel it.</p>\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">Unpopular opinion: in a design system, a &quot;link&quot; and a &quot;button&quot; should be one component.</p>&mdash; Cory LaViska (@claviska) <a href=\"https://twitter.com/claviska/status/1445479402532261892?ref_src=twsrc%5Etfw\">October 5, 2021</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>At face value, I understand why people are upset with this. It's hard to provide context in 280 characters, though, so <a href=\"https://twitter.com/claviska/status/1445479402532261892\">I made it a thread</a>. That was a mistake, because people don't always read the thread so the intent gets lost and assumptions get made. Twitter is a wonderful place.</p>\n<h2 id=\"semantically-different\">Semantically Different <a class=\"direct-link\" href=\"#semantically-different\">#</a></h2>\n<p>Let's start by stating the obvious. A button and a link are <a href=\"https://www.webaxe.org/proper-use-buttons-links/\">semantically different HTML elements</a>, so no need to bust out the keyboard to tell me that. The idea of merging the two into a single component comes from real world experience working on multiple design system teams for large companies.</p>\n<p>The fact is that designers always, always ask for links that look like buttons and buttons that look like links. I know, <a href=\"https://twitter.com/oliverturner/status/1445724464860127244?s=20\">designers shouldn't do this</a>. But this isn't a fantasy, it's our reality, and <a href=\"https://twitter.com/claviska/status/1445722314889437184\">when it costs your organization measurable value</a> in terms of conversions, sales, etc., you're not going to win that argument.</p>\n<p>Emotions aside, this often leads to developers producing two separate <a href=\"https://explore.fast.design/components/fast-button\">button</a> and <a href=\"https://explore.fast.design/components/fast-anchor\">link</a> components with the same styles and logic, and consumers end up misusing them just like <code>&lt;button&gt;</code> and <code>&lt;a&gt;</code>.</p>\n<p>To alleviate this, <a href=\"https://twitter.com/claviska/status/1445480631832436747\">I propose that a custom element</a> such as <code>&lt;my-button&gt;</code> should render the same &quot;button&quot; visually, but based on the presense of an optional <code>href</code> attribute, it will use a <code>&lt;button&gt;</code> or an <code>&lt;a&gt;</code> under the hood.</p>\n<pre><code class=\"language-html\">&lt;my-button&gt;Save&lt;/my-button&gt;\n&lt;!-- 👉 &lt;button class=&quot;button button--primary&quot;&gt;Save&lt;/button&gt; --&gt;\n\n&lt;my-button href=&quot;/new&quot;&gt;New&lt;/my-button&gt;\n&lt;!-- 👉 &lt;a class=&quot;button button--primary&quot; href=&quot;/new&quot;&gt;New&lt;/a&gt; --&gt;\n</code></pre>\n<p>This makes it more foolproof — if it goes somewhere, it becomes a link. If not, it's remains a button. So far, we're more or less aligned with the Twittersphere…<a href=\"https://twitter.com/EmmaJ_PR/status/1445664177821925387?s=20\">except for one detail</a>:</p>\n<p><em>They should look different because they should do different things.</em></p>\n<h2 id=\"visually-different%3F\">Visually Different? <a class=\"direct-link\" href=\"#visually-different%3F\">#</a></h2>\n<p>As much as I want to agree with this statement, it falls apart in practice. <em>Links will inevitably need to look like buttons from time to time.</em> No, buttons and links are not <em>semantically</em> the same, but there are times when they need to be <em>visually</em> the same.</p>\n<p>In web apps, the function of buttons and links is often blended. Some actions, such as &quot;new,&quot; might simply open a new page. Others aren't as obvious. &quot;Save&quot; might fire off an <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest\">XHR</a> and redirect you to another page if the response is successful — or go nowhere and show an error if the response fails.</p>\n<p>Suddenly, the line between &quot;button&quot; and &quot;link&quot; is more blurry. Should it still be a link if it takes me somewhere only <em>after</em> an XHR is successful? What if the request errors out and doesn't redirect? What if you click a link and the app prevents navigation because you have unsaved changes? There are so many scenarios and &quot;what ifs&quot; that, in practice, it's hard to settle on a 100% agreeable definition.</p>\n<p>And then comes the design team with a Figma for the app's toolbar.</p>\n<p><img src=\"/images/toolbar-with-buttons.png\" alt=\"Button group with four actions: new, edit, settings, download\"></p>\n<p>We'll assume that &quot;New&quot; takes you to <code>/new</code> and &quot;Edit&quot; takes you to <code>/edit/:id</code>. Those should definitely be links! But wait — &quot;Settings&quot; doesn't go anywhere. It just opens up a dialog, so it needs to be a button. And instead of creating an endpoint on the server that downloads the file, we'll use the <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-download\"><code>download</code></a> attribute so that also needs to be a link.</p>\n<p>Let's adjust the design to account for the idea that buttons and links <em>must</em> be visually different.</p>\n<p><img src=\"/images/toolbar-with-buttons-and-links.png\" alt=\"A button group with a new link, edit link, settings button, and a download link\"></p>\n<p>Do you think the design team is going to be thrilled with these changes to the toolbar? Do you think your customers will prefer this toolbar over the previous one?</p>\n<h2 id=\"what-users-expect\">What Users Expect <a class=\"direct-link\" href=\"#what-users-expect\">#</a></h2>\n<p>If the user is presented with a set of actions, <em>they don't care if you use buttons or links under the hood</em>. They care that it's consistent and that each control does what it's supposed to do. Remember that in all cases, each control's action is clearly inferred from its label.</p>\n<p>Whether clicking &quot;Delete&quot; takes the user to a new page to confirm or opens a dialog to confirm is irrelevant. To the user, they're all just &quot;buttons&quot; that do something.*</p>\n<p>It is true that links and buttons have different behaviors and the decision to make them look visually similar should be carefully considered. For example, <kbd>CMD</kbd> or <kbd>CTRL</kbd> + click typically opens a link in a new window. When buttons and links are identical, it can put users at a disadvantage.</p>\n<p>I would recommend <em>not</em> making buttons and links look the same if you can reasonably expect the user will desire such behaviors. Some environments are more predictable than others. But accessibility isn't binary, so thought and consideration is still required from both design and development regardless of your approach.</p>\n<h2 id=\"enforcement-via-api\">Enforcement via API <a class=\"direct-link\" href=\"#enforcement-via-api\">#</a></h2>\n<p>The suggestion I'm making enforces the semantic definition of &quot;button&quot; and &quot;link&quot; by leaning on API design to ensure <abbr title=\"Don't repeat yourself\">DRY</abbr> principles and remove the burden of thought from consumers. This solves the problem of when to use a link or button under the hood.</p>\n<p>It does not answer the question of &quot;<em>should buttons and links be visually similar</em>?&quot; That's a topic I'd love to have a conversation about because there are plenty of use cases that suggest at least sometimes they should.</p>\n<p>Just know that, if you're working on a design system, it's extremely likely you will come across this requirement!</p>\n<hr>\n<small>\n<p>*This doesn't mean you should throw the baby out with the bathwater. It just means there might be situations where you need to use a link as a button, and the user doesn't care as long as it works. The download example comes do mind.</p>\n</small>\n",
      "date_published": "2021-10-06T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/on-using-web-component-libraries/",
      "url": "https://www.abeautifulsite.net/posts/on-using-web-component-libraries/",
      "title": "On Using Web Component Libraries",
      "content_html": "<p>We tend to think of components as things that belong to a framework. After all, React has components, Vue has components, Angular has components…it's just how we've always used them.</p>\n<p>Because of that, people tend to refer to <a href=\"https://lit.dev/\">Lit</a> and <a href=\"https://www.fast.design/docs/fast-element/getting-started/\">FAST Element</a> as frameworks, but they’re not. They’re <em>libraries</em>, and that’s an important distinction.</p>\n<p>If you want a React component to work, you have to use it with React. If you want a Vue component to work, you have to use it with Vue. If you want an Angular component to work…well, you get the point.</p>\n<p><em>With web components, the platform is the framework.</em></p>\n<p>Naturally, a follow up question is &quot;why do you need a library then?&quot; The truth is that we don’t. We can create web components without a library. <a href=\"https://codepen.io/claviska/pen/abwGLPm?editors=0010\">Here's a counter component written in pure JavaScript</a>.</p>\n<pre><code class=\"language-js\">class MyCounter extends HTMLElement {\n  static get observedAttributes() {\n    return ['count'];\n  }\n\n  constructor() {\n    super();\n    this.state = {\n      count: 0\n    };\n    this.attachShadow({ mode: 'open' });\n    this.shadowRoot.innerHTML = `\n      &lt;button type=&quot;button&quot;&gt;\n        Count:\n        &lt;span class=&quot;count&quot;&gt;${this.state.count}&lt;/span&gt;\n      &lt;/button&gt;\n    `;\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  connectedCallback() {\n    this.shadowRoot.querySelector('button').addEventListener('click', this.handleClick);\n  }\n\n  disconnectedCallback() {\n    this.shadowRoot.querySelector('button').removeEventListener('click', this.handleClick);\n  }\n\n  get count() {\n    return this.state.count;\n  }\n\n  set count(newCount) {\n    this.state.count = newCount;\n    this.update();\n  }\n\n  attributeChangedCallback(name, oldValue, newValue) {\n    if (name === 'count') {\n      this.state.count = Number(newValue);\n      this.update();\n    }\n  }\n\n  handleClick() {\n    this.count = this.count + 1;\n  }\n\n  update() {\n    this.shadowRoot.querySelector('.count').textContent = this.state.count;\n  }\n}\n\ncustomElements.define('my-counter', MyCounter);\n</code></pre>\n<p>We <em>choose</em> to use libraries to improve the the component authoring experience and abstract messy boilerplate into efficient, reusable modules. <a href=\"https://codepen.io/claviska/pen/LYLmzKL?editors=0010\">Here's a functionally equivalent counter built with Lit</a>.</p>\n<pre><code class=\"language-ts\">import { LitElement, html } from 'lit';\nimport { customElement, property } from 'lit/decorators.js';\n\n@customElement('my-counter')\nclass MyCounter extends LitElement {\n  @property({ type: Number }) count = 0;\n\n  handleClick() {\n    this.count++;\n  }\n\n  render() {\n    return html`\n      &lt;button type=&quot;button&quot; @click=${this.handleClick}&gt;\n        Count: ${this.count}\n      &lt;/button&gt;\n    `;\n  }\n}\n</code></pre>\n<p>Sure, we can bake features such as declarative rendering and reactivity into each and every component, but that’s not <abbr title=\"Don't Repeat Yourself\">DRY</abbr>. It would convolute the code and make our components larger and more difficult to maintain. That’s not what I want and it's probably not what my users want.</p>\n<p>Alternatively, we could build those features ourselves and split them off into reusable modules — but that's just reinventing the wheel, isn't it?</p>\n<p>When you think of it that way, using a library to build web components makes a lot of sense.</p>\n<hr>\n<small>\n<p>Aside: <a href=\"https://twitter.com/evanplaice/status/1420922358534049804?s=20\">It’s been said</a> that developer experience is the only benefit to using a library. While it’s true that benefits to the end user are marginalized with one-off components, it's worth noting that APIs such as those offered by Lit and FAST Element lead to less bugs due to reduced complexity and less code in the component itself. Consider the counter examples above. Which one is easier to maintain?</p>\n</small>\n",
      "date_published": "2021-09-20T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/finding-the-closest-element-through-shadow-roots/",
      "url": "https://www.abeautifulsite.net/posts/finding-the-closest-element-through-shadow-roots/",
      "title": "Finding the Closest Element Through Shadow Roots",
      "content_html": "<p>A great trick to find the closest element in the DOM that matches an arbitrary selector is <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/closest\"><code>Element.closest()</code></a>.</p>\n<pre><code class=\"language-ts\">// Starts at el and walks the DOM until it finds a parent element\n// that matches the selector. In this case, it will return the\n// &lt;body&gt; element.\nel.closest('body');\n</code></pre>\n<p>But what happens if you do this from inside a custom element's <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot\">shadow root</a>?</p>\n<pre><code class=\"language-ts\">someElementInShadowRoot.closest('body');\n</code></pre>\n<p>By design, <code>Element.closest()</code> will not break out of the shadow root, so <code>null</code> is returned.</p>\n<p>In my case, I needed to determine the <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang\"><code>lang</code></a> of the closest element, even if the element was outside of a shadow root. Time for some recursive magic! ✨</p>\n<p>Here's a TypeScript function that will do just that, even if the root is buried in multiple layers of shadow roots.</p>\n<pre><code class=\"language-ts\">function closest(selector: string, root: Element = this) {\n  function getNext(el: Element | HTMLElement, next = el &amp;&amp; el.closest(selector)): Element | null {\n    if (el instanceof Window || el instanceof Document || !el) {\n      return null;\n    }\n\n    return next ? next : getNext((el.getRootNode() as ShadowRoot).host);\n  }\n\n  return getNext(root);\n}\n</code></pre>\n<p>You can use it like this:</p>\n<pre><code class=\"language-ts\">// Matches the closest element with a lang attribute, even if\n// it's outside of the shadow root\nconst closestEl = closest('[lang]', el);\n</code></pre>\n",
      "date_published": "2021-09-13T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/testing-support-for-focus-visible/",
      "url": "https://www.abeautifulsite.net/posts/testing-support-for-focus-visible/",
      "title": "Testing Support for :focus-visible",
      "content_html": "<p>The new <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/:focus-visible\"><code>:focus-visible</code></a> CSS selector lets us remove unsightly focus rings that often result in developers adding this to their stylesheets:</p>\n<pre><code class=\"language-css\">/* Please don't do this */\nbutton:focus {\n  outline: none;\n}\n</code></pre>\n<p>While unsightly to mouse users, a clear focus indicator is essential for proper accessibility. How else will keyboard users, for example, know which element has focus?</p>\n<p>Fortunately, <code>:focus-visible</code> gives us a way to make everyone happy by only applying focus styles when the user is interacting with a keyboard.</p>\n<pre><code class=\"language-css\">button:focus-visible {\n  outline: dashed 2px orange;\n}\n</code></pre>\n<p>It's <a href=\"https://caniuse.com/mdn-css_selectors_focus-visible\">currently available in all browsers <em>except</em> Safari</a>. Well, it <em>is</em> available in Safari Technology Preview, but it's buried under the experimental features menu and it's not clear when it will land in mainstream Safari.</p>\n<p><a href=\"https://github.com/WICG/focus-visible\">There's a polyfill</a> you can use in the meantime but, since you can't polyfill pseudo selectors, it applies a <code>focus-visible</code> class instead. It's still useful if you really want this behavior, though!</p>\n<h2 id=\"detecting-support\">Detecting Support <a class=\"direct-link\" href=\"#detecting-support\">#</a></h2>\n<p>If you're trying to figure out how to feature detect <code>:focus-visible</code>, you might be surprised to learn that there isn't an obvious way to do it — but there is a way!</p>\n<pre><code class=\"language-js\">function hasFocusVisible() {\n  const style = document.createElement('style');\n  let isSupported;\n\n  try {\n    document.head.appendChild(style);\n    style.sheet.insertRule(':focus-visible { color: inherit }');\n    isSupported = true;\n  } catch {\n    isSupported = false;\n  } finally {\n    style.remove();\n  }\n\n  return isSupported;\n}\n</code></pre>\n<p>The secret sauce is in <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleSheet/insertRule\"><code>CSSStyleSheet.insertRule()</code></a>, which will throw an error if you pass in a style it doesn't understand.</p>\n<p>You can use it like this.</p>\n<pre><code class=\"language-js\">if (hasFocusVisible()) {\n  // Supported!\n} else {\n  // Not supported\n}\n</code></pre>\n<p>This can be pretty helpful if you're building something and you want to provide different behaviors depending on the browser's support for <code>:focus-visible</code>.</p>\n",
      "date_published": "2021-08-24T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/querying-through-shadow-roots/",
      "url": "https://www.abeautifulsite.net/posts/querying-through-shadow-roots/",
      "title": "Querying through shadow roots",
      "content_html": "<p>Let's say I have a web component with an open shadow root, like this one from <a href=\"https://shoelace.style/\">Shoelace</a>.</p>\n<pre><code class=\"language-html\">&lt;sl-button&gt;Click me&lt;/sl-button&gt;\n</code></pre>\n<p>Inside the shadow root is a <code>&lt;button&gt;</code> that I want to target with JavaScript.* Alas, <code>Element.querySelector()</code> doesn't offer a shortcut for traversing shadow roots so we have to do this.</p>\n<pre><code class=\"language-js\">const button = document.querySelector('sl-button').shadowRoot.querySelector('button');\n</code></pre>\n<p>That's pretty verbose! It's nice that we can chain the selectors, but it would be even nicer if we could poke through shadow roots <em>right in</em> the selector.</p>\n<pre><code class=\"language-js\">// This doesn't work, but we can dream\nconst button = document.querySelector('sl-button &gt;&gt;&gt; button');\n</code></pre>\n<p>Well, here's a function that gets us pretty close to that.</p>\n<pre><code class=\"language-js\">function shadowQuery(selector, rootNode = document) {\n  const selectors = String(selector).split('&gt;&gt;&gt;');\n  let currentNode = rootNode;\n\n  selectors.find((selector, index) =&gt; {\n    if (index === 0) {\n      currentNode = rootNode.querySelector(selectors[index]);\n    } else {\n      currentNode = currentNode?.shadowRoot?.querySelector(selectors[index]);\n    }\n\n    return currentNode === null;\n  });\n\n  return currentNode;\n}\n</code></pre>\n<p>This let's you use <code>&gt;&gt;&gt;</code> in your selector instead of splitting it into multiple queries, resulting in a much simpler syntax.</p>\n<pre><code class=\"language-js\">const button = shadowQuery('sl-button &gt;&gt;&gt; button');\n</code></pre>\n<p>Querying starts on <code>document</code> by default, but you can pass a node as the second argument to change that.</p>\n<pre><code class=\"language-js\">const container = document.querySelector('.your-root-node');\nconst button = shadowQuery('sl-button &gt;&gt;&gt; button', container);\n</code></pre>\n<p>Finally, you can even traverse multiple shadow roots in one query.</p>\n<pre><code class=\"language-js\">shadowQuery('my-element &gt;&gt;&gt; my-second-element &gt;&gt;&gt; my-third-element');\n</code></pre>\n<p>*It's worth noting that you probably <em>shouldn't</em> be targeting shadow roots — they're encapsulated for a reason! Nevertheless, this can be very useful in exceptional situations.</p>\n",
      "date_published": "2021-08-04T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/prefers-reduced-motion/",
      "url": "https://www.abeautifulsite.net/posts/prefers-reduced-motion/",
      "title": "Prefers Reduced Motion",
      "content_html": "<p>By now, most devs are familiar with the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-reduced-motion\"><code>prefers-reduced-motion</code></a> media query that tells whether or not a user prefers, well, reduced motion. You can use this to tone down (or turn off) transitions and animations in your stylesheet to accommodate users with vestibular motion disorders.</p>\n<pre><code class=\"language-css\">.animation {\n  /* normal animation */\n}\n\n@media (prefers-reduced-motion) {\n  .animation {\n    /* subtle or no animation */\n  }\n}\n</code></pre>\n<p>That's pretty useful, but if you're using the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Animations_API\">Web Animations API</a>, you may want to check for this with JavaScript instead. Thanks to <code>window.matchMedia</code>, it's pretty easy to do. I like to wrap it up in a small function that returns a boolean: <code>true</code> if the users prefers reduced motion or <code>false</code> if they have no preference.</p>\n<pre><code class=\"language-js\">function prefersReducedMotion() {\n  const query = window.matchMedia('(prefers-reduced-motion: reduce)');\n  return query?.matches;\n}\n</code></pre>\n<p>Usage looks something like this:</p>\n<pre><code class=\"language-js\">if (prefersReducedMotion()) {\n  // subtle or no animation\n} else {\n  // normal animation\n  document.querySelector('.my-element').animate(...);\n}\n</code></pre>\n",
      "date_published": "2021-05-19T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/finding-the-active-element-in-a-shadow-root/",
      "url": "https://www.abeautifulsite.net/posts/finding-the-active-element-in-a-shadow-root/",
      "title": "Finding the active element in a shadow root",
      "content_html": "<p>You can get the focused element with <code>document.activeElement</code> but, if it's inside a shadow root, this will be the <em>host element</em>. This happens because of retargeting, but sometimes you might need access to the internal element that actually has focus.</p>\n<p>Here's a recursive function that will return the internal element that has focus, even if it's inside a shadow root.</p>\n<pre><code class=\"language-ts\">function getActiveElement(root: Document | ShadowRoot = document): Element | null {\n  const activeEl = root.activeElement;\n\n  if (!activeEl) {\n    return null;\n  }\n\n  if (activeEl.shadowRoot) {\n    return getActiveElement(activeEl.shadowRoot);\n  } else {\n    return activeEl;\n  }\n}\n</code></pre>\n<p>Usage:</p>\n<pre><code class=\"language-ts\">const activeEl = getActiveElement();\n</code></pre>\n",
      "date_published": "2021-03-22T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/moving-from-stencil-to-lit-element/",
      "url": "https://www.abeautifulsite.net/posts/moving-from-stencil-to-lit-element/",
      "title": "Moving from Stencil to LitElement",
      "content_html": "<p>Over the weekend, I finished migrating <a href=\"https://shoelace.style/\">Shoelace</a> from <a href=\"https://stenciljs.com/\">Stencil</a> to <a href=\"\">LitElement</a>. Even though consumers of the library won't see much of a difference, this was a major overhaul of Shoelace's internals.</p>\n<p>Naturally, such a big change brings questions from the community, such as <a href=\"https://twitter.com/bitflowertweets/status/1365644475087941635?s=20\">&quot;what were the reasons behind shifting away from Stencil?&quot;</a> These are valid questions, so I wanted to take the time to answer them here.</p>\n<p>But before I jump in, it's worth mentioning that Stencil is a great project that played a significant role in getting me into web components. Being able to type <code>npm init stencil</code> and have an entire project ready to go is really something special.</p>\n<p>Let it also be clear that this isn't a jab at Stencil, nor is it advice for or against using Stencil to build your own projects. This is why <em>I</em> chose to move on based on <em>my</em> experience, <em>my</em> observations, and <em>my</em> desire to own as much of my own code as possible.</p>\n<h2 id=\"less-is-more\">Less is more <a class=\"direct-link\" href=\"#less-is-more\">#</a></h2>\n<p>When you're managing a software project, dependencies can quickly become liabilities. Despite its many niceties, Stencil can be a box of mystery at times. As a contributor, it was difficult for me to dive into its codebase and figure things out. There's little documentation on its internals, so everything requires digging. A lot of digging. Even as a member of the Stencil team, I found it hard to get the information I needed to make useful contributions to the project.</p>\n<p>Why does this matter? Well, when code is complex and lacks documentation, the barrier of entry is higher and people are less apt to make contributions. Despite a tight-knit community of talented Stencil users, many bugs continue to go unpatched. Even worse, a bot <a href=\"https://github.com/ionic-team/stencil/issues?q=is%3Aissue+label%3A%22ionitron%3A+stale+issue%22+\">closes issues</a> after 30 days of inactivity, so many of the bugs that do get reported are <a href=\"https://github.com/ionic-team/stencil/issues/2802\">closed without feedback or resolution</a>. In my opinion, valid, reproducible bugs should remain open until they're resolved to provide transparency and accountability.</p>\n<p>One might surmise that the maintainers are overwhelmed by the number of bugs that get filed, but garbage collecting valid issues is disingenuous and a disservice to the community. I appreciate that Stencil is open source and its maintainers have zero responsibility to fix bugs for free, but I fundamentally disagree with this aspect of how the project is maintained.</p>\n<p>And what happens when I have an issue that I can't resolve myself? Will someone point me in the right direction? Will it ever get fixed? <a href=\"https://github.com/ionic-team/stencil/issues/2198\">Probably not.</a> (That was submitted a year ago, before issues were automatically closed.)</p>\n<h2 id=\"build-%26-distribution\">Build &amp; distribution <a class=\"direct-link\" href=\"#build-%26-distribution\">#</a></h2>\n<p>Stencil is a compiler that generates components using any number of possible <a href=\"https://stenciljs.com/docs/output-targets\">output targets</a>. In theory, this is really convenient because it can produce multiple distributions from a single source. In practice, I found that having two separate distributions made my project harder to document and left users confused.</p>\n<p>These output targets are also limited in terms of configuration. Since last year, Shoelace was plagued with a <a href=\"https://github.com/shoelace-style/shoelace/issues/180\">tree shaking problem</a> I couldn't fix because of this. Moving away from Stencil, I was able to gain full control over how my build works and the tooling used to power it. I leaned on standards and went with a single collection of <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules\">ES modules</a> that work in both browsers and bundlers. Best of all, having full control over the build let me finally resolve that pesky tree shaking issue.</p>\n<h2 id=\"less-magic\">Less Magic <a class=\"direct-link\" href=\"#less-magic\">#</a></h2>\n<p>Speaking of distributions, one thing I'm losing by leaving Stencil is its <a href=\"https://stenciljs.com/docs/distribution\">lazy loading dist</a>. At first, I wondered how I could reproduce this outside of Stencil. It's a very convenient feature for users.</p>\n<p>Lazy loading works by registering every component as an empty custom element. Then, when you insert a component into the DOM, its source is fetched and its internals are swapped out. This is necessary because <a href=\"https://github.com/WICG/webcomponents/issues/829\">you can't reregister custom elements</a>, so you have to resort to a bit of magic. It's a clever trick, but it does lead to a form of <a href=\"https://en.wikipedia.org/wiki/Flash_of_unstyled_content\">FOUC</a>, especially when components are added after the initial page load.</p>\n<p>I believe it was also the source of some strange Shoelace + React/Svelte timing bugs and a very annoying error I kept seeing on the documentation website:</p>\n<blockquote>\n<p>Uncaught (in promise) DOMException: Failed to set the 'adoptedStyleSheets' property on 'ShadowRoot': Sharing constructed stylesheets in multiple documents is not allowed</p>\n</blockquote>\n<p>I'm pretty sure this was a combination of how Docsify loads pages and Stencil's lazy loading, but I was never able to pinpoint it. Regardless, it's no longer an issue with the new version.</p>\n<p>Considering all this, I thought long and hard about the benefits and drawbacks of lazy loading. Ultimately, I decided it wasn't worth the effort. With the latest version of Shoelace, users can load the <a href=\"https://shoelace.style/getting-started/installation\">entire library</a> or <a href=\"https://shoelace.style/getting-started/installation?id=cherry-picking\">cherry pick</a> components — something that wasn't possible before. I think that's a fair tradeoff to avoid all the weird issues it seemed to be causing.</p>\n<h2 id=\"native-templates\">Native templates <a class=\"direct-link\" href=\"#native-templates\">#</a></h2>\n<p>I prefer to stick to the platform when possible. Although I like JSX, I like <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals\">template literals</a> even better because they're simple and they don't require transpilation. Now that the platform has a built-in for templating, we should utilize it.</p>\n<p>The syntax is similar, but not identical. Here's the original render function from Shoelace's badge component.</p>\n<pre><code class=\"language-js\">// JSX\nrender() {\n  return (\n    &lt;span\n      part=&quot;base&quot;\n      class={({\n        badge: true,\n        'badge--primary': this.type === 'primary',\n        'badge--success': this.type === 'success',\n        'badge--info': this.type === 'info',\n        'badge--warning': this.type === 'warning',\n        'badge--danger': this.type === 'danger',\n        'badge--pill': this.pill,\n        'badge--pulse': this.pulse\n      })}\n      role=&quot;status&quot;\n    &gt;\n      &lt;slot /&gt;\n    &lt;/span&gt;\n  );\n}\n</code></pre>\n<p>Compare that to the native equivalent.</p>\n<pre><code class=\"language-js\">// Template literals\nrender() {\n  return html`\n    &lt;span\n      part=&quot;base&quot;\n      class=${classMap({\n        badge: true,\n        'badge--primary': this.type === 'primary',\n        'badge--success': this.type === 'success',\n        'badge--info': this.type === 'info',\n        'badge--warning': this.type === 'warning',\n        'badge--danger': this.type === 'danger',\n        'badge--pill': this.pill,\n        'badge--pulse': this.pulse\n      })}\n      role=&quot;status&quot;\n    &gt;\n      &lt;slot /&gt;\n    &lt;/span&gt;\n  `;\n}\n</code></pre>\n<p>They're so similar. I just don't see why I should run the code through another layer of transpilation when template literals suffice. This is what they were designed to do.</p>\n<p>A special syntax is no longer necessary.</p>\n<h2 id=\"virtual-dom\">Virtual DOM <a class=\"direct-link\" href=\"#virtual-dom\">#</a></h2>\n<p>Like React and other popular frameworks, Stencil uses a virtual DOM (&quot;VDOM&quot;) to render things faster than working directly with the real DOM. However, it's a common misconception that VDOMs are actually faster. <a href=\"https://svelte.dev/blog/virtual-dom-is-pure-overhead\">Rich Harris writes:</a></p>\n<blockquote>\n<p>But hang on a minute! The virtual DOM operations are <strong>in addition to</strong> the eventual operations on the real DOM. The only way it could be faster is if we were comparing it to a less efficient framework (there were plenty to go around back in 2013!), or arguing against a straw man — that the alternative is to do something no-one actually does.</p>\n</blockquote>\n<p>It's an outdated meme. You can write poor performing components with or without a virtual DOM. Consider <a href=\"https://lit-html.polymer-project.org/\">lit-html</a> and <a href=\"https://github.com/WebReflection/uhtml\">µhtml</a>, both of which leverage direct DOM diffing for fast, efficient rendering.</p>\n<p>There's no need for an extra layer here, either.</p>\n<h2 id=\"a-long-time-coming\">A long time coming <a class=\"direct-link\" href=\"#a-long-time-coming\">#</a></h2>\n<p>The move away from Stencil was inevitable. As part of my never-ending quest for simplicity, I've been experimenting with other libraries for a long time. One of the first I explored was <a href=\"https://hybrids.js.org/#/\">Hybrids</a>, which is great if you want to go with a more functional approach. Ultimately, I decided that class-based made the most sense because, well, that's how you create custom elements. You can't do it without extending <code>HTMLElement</code>.</p>\n<pre><code class=\"language-js\">class SlButton extends HTMLElement {\n  // build something awesome\n}\n</code></pre>\n<p>I also dove into <a href=\"https://www.fast.design/\">Microsoft FAST</a> and I like what they're doing. The API is very sensible, but its templates feel a bit strange since you have to use <code>attr=${x =&gt; x.prop}</code> instead of <code>attr=${this.prop}</code>. I believe they do this to provide a faster alternative to DOM-diffing during render, but this would mean a lot more work for me. I also found it confusing that contexts can be nested, which makes larger templates harder to maintain.</p>\n<p>I experimented with my own base class called <a href=\"https://github.com/shoelace-style/shoemaker\">Shoemaker</a>. I wanted to make the thinnest possible abstraction around the features I needed, but the more the project evolved the more I realized I was recreating <a href=\"https://lit-element.polymer-project.org/\">LitElement</a>. Between that and feedback from the community, I decided it didn't make sense to reinvent the wheel.</p>\n<p>I do have a few [opinionated] DX concerns that I'll be sending over to the LitElement team for consideration. However, I've alleviated most of them with a handful of custom decorators.</p>\n<p>I guess that's the nice thing about decorators — you can customize them to your liking.</p>\n<h2 id=\"moving-forward\">Moving forward <a class=\"direct-link\" href=\"#moving-forward\">#</a></h2>\n<p>Consumers of Shoelace won't notice much of a difference in this release. I've simply replaced the old engine with a new one that does the same thing except with a leaner, simpler codebase with less magic. I have a responsibility to my users, so I need to be able to fix problems when they arise. I wasn't always able to do that before. Now I can.</p>\n<p>I'm tired of rebuilding buttons. I designed Shoelace for longevity, taking advantage of the best parts of the platform — the stuff that doesn't change on us every few years. It only makes sense to bring its code closer to the platform as well.</p>\n<p>With LitElement, I'm getting all the features I want with the smallest possible footprint. Now I can get back to building components again.</p>\n<p><em>March 8, 2021 - updated to reflect the latest changes to the library.</em></p>\n",
      "date_published": "2021-03-02T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/svg-repo/",
      "url": "https://www.abeautifulsite.net/posts/svg-repo/",
      "title": "SVG Repo",
      "content_html": "<p>I stumbled upon a great resource for free SVGs. They're currently boasting over 300,000 images. Check it out over at <a href=\"https://www.svgrepo.com/\">SVG repo</a>.</p>\n<p>Looks like <a href=\"https://www.fontrepo.com/\">they have a sister site for fonts</a>, too. Lots of 'em.</p>\n",
      "date_published": "2021-02-15T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/archiving-postleaf/",
      "url": "https://www.abeautifulsite.net/posts/archiving-postleaf/",
      "title": "Archiving Postleaf",
      "content_html": "<p><a href=\"https://github.com/Postleaf/postleaf\">Postleaf</a> — at least in its current form — has been discontinued. In the future, I'd like to bring it back as something different. Maybe an open source project. Maybe a SaaS product. I'm not sure at this point.</p>\n<p>The world still needs a simple platform to encourage blogging and the decentralization of publishing. Unfortunately, This version of Postleaf didn't fill that gap because it was too difficult and expensive for the majority of users to install and host. Aside from that, the world of web hosting has changed significantly in recent years.</p>\n<p>For now, I'm taking some time to focus on other projects and interests. I hope to revisit Postleaf again when the time is right for me, but I'm not exactly sure when that might be.</p>\n<p>That said, I'm archiving the Postleaf repository. Anyone is welcome to fork the project and carry the torch, but I'm hanging onto the &quot;Postleaf&quot; name, U.S. trademark, and website, so new maintainers will need to release it under a different name.</p>\n<p>Thanks for the many years of encouragement. While my vision for Postleaf wasn't fully realized, I've learned so much from this project and its community. I'm still excited for Postleaf's future.</p>\n<p>— Cory</p>\n",
      "date_published": "2021-02-03T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/getting-localized-month-and-day-names-in-the-browser/",
      "url": "https://www.abeautifulsite.net/posts/getting-localized-month-and-day-names-in-the-browser/",
      "title": "Getting localized month and day names in the browser",
      "content_html": "<p>JavaScript has a <a href=\"https://caniuse.com/?search=datetimeformat\">well-supported</a> date/time formatting API called <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\"><code>Intl.DateTimeFormat</code></a>. Here's a tip — you can use it to generate localized month and day names without the need for a language pack! This is super useful if you're building, say, a date picker or a calendar app.</p>\n<p>I've written a couple functions to demonstrate how this works. Consider them MIT licensed if you want to use them!</p>\n<pre><code class=\"language-js\">function getDayNames(locale = 'en', format = 'long') {\n  const formatter = new Intl.DateTimeFormat(locale, { weekday: format, timeZone: 'UTC' });\n  const days = [1, 2, 3, 4, 5, 6, 7].map(day =&gt; {\n    const dd = day &lt; 10 ? `0${day}` : day;\n    return new Date(`2017-01-${dd}T00:00:00+00:00`);\n  });\n  return days.map(date =&gt; formatter.format(date));\n}\n\nfunction getMonthNames(locale = 'en', format = 'long') {\n  const formatter = new Intl.DateTimeFormat(locale, { month: format, timeZone: 'UTC' });\n  const months = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12].map(month =&gt; {\n    const mm = month &lt; 10 ? `0${month}` : month;\n    return new Date(`2017-${mm}-01T00:00:00+00:00`);\n  });\n  return months.map(date =&gt; formatter.format(date));\n}\n</code></pre>\n<p>Each function generates a series of Date objects that align with each day of the week and each month of the year, respectively. Then they loop through each date, passing them to the browser's built-in formatter. The formatter is configured to only output the day/month name, giving us exactly what we want!</p>\n<pre><code>[&quot;Sunday&quot;, &quot;Monday&quot;, &quot;Tuesday&quot;, &quot;Wednesday&quot;, &quot;Thursday&quot;, &quot;Friday&quot;, &quot;Saturday&quot;]\n[&quot;January&quot;, &quot;February&quot;, &quot;March&quot;, &quot;April&quot;, &quot;May&quot;, &quot;June&quot;, &quot;July&quot;, &quot;August&quot;, &quot;September&quot;, &quot;October&quot;, &quot;November&quot;, &quot;December&quot;]\n</code></pre>\n<p>Need them in a different language? Just set the locale argument accordingly. Here's French, for example:</p>\n<pre><code class=\"language-js\">getDayNames('fr');\ngetMonthNames('fr');\n// [&quot;dimanche&quot;, &quot;lundi&quot;, &quot;mardi&quot;, &quot;mercredi&quot;, &quot;jeudi&quot;, &quot;vendredi&quot;, &quot;samedi&quot;]\n// [&quot;janvier&quot;, &quot;février&quot;, &quot;mars&quot;, &quot;avril&quot;, &quot;mai&quot;, &quot;juin&quot;, &quot;juillet&quot;, &quot;août&quot;, &quot;septembre&quot;, &quot;octobre&quot;, &quot;novembre&quot;, &quot;décembre&quot;]\n</code></pre>\n<p>You can even generate short names by setting the format argument to <code>short</code> or <code>narrow</code>.</p>\n<pre><code class=\"language-js\">getDayNames('en', 'short');\ngetMonthNames('en', 'short');\n// [&quot;Sun&quot;, &quot;Mon&quot;, &quot;Tue&quot;, &quot;Wed&quot;, &quot;Thu&quot;, &quot;Fri&quot;, &quot;Sat&quot;]\n// [&quot;Jan&quot;, &quot;Feb&quot;, &quot;Mar&quot;, &quot;Apr&quot;, &quot;May&quot;, &quot;Jun&quot;, &quot;Jul&quot;, &quot;Aug&quot;, &quot;Sep&quot;, &quot;Oct&quot;, &quot;Nov&quot;, &quot;Dec&quot;]\n</code></pre>\n<p>While this trick may not alleviate all your i18n woes, it can certainly reduce the size of your translation packs if you're building something that uses them.</p>\n<p>And here's another tip — you can generate localized relative times such as &quot;4 minutes ago&quot; using a similar technique, except with <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat\"><code>Intl.RelativeTimeFormat</code></a>.</p>\n",
      "date_published": "2020-11-25T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/shoelace-a-forward-thinking-library-of-web-components/",
      "url": "https://www.abeautifulsite.net/posts/shoelace-a-forward-thinking-library-of-web-components/",
      "title": "Shoelace 2.0: a forward-thinking library of web components",
      "content_html": "<p>I've been having a lot of fun with <a href=\"https://stenciljs.com/\">Stencil</a> and web components lately. Back in January, I decided to use it to completely redesign <a href=\"https://shoelace.style/\">Shoelace</a>, an open source project I created a few years ago.</p>\n<p><img src=\"/images/shoelace-2-splash.png\" alt=\"Screenshot of the Shoelace 2 logo\"></p>\n<p>I recently published <a href=\"https://shoelace.style/\">Shoelace 2.0</a> — a collection of professionally-designed, accessible web components.</p>\n<p>One really nice feature of web components is that <strong>you can use them with any framework</strong>. This is an amazing concept, especially for low-level building block components.</p>\n<p>Let me explain why this is so amazing with an example.</p>\n<p>Imagine you're on one of three teams in an organization, all tasked with building a different product. Team 1 wants to use React, Team 2 wants to use Vue, and Team 3 wants to use vanilla HTML+JS. The one requirement you have from your organization is that the UX must be consistent across all three products.</p>\n<p>Obviously, sharing a library of UI components between the projects is the most efficient way to meet that requirement. But if you build your components in Framework A, you can't reuse them in Framework B or Framework C.</p>\n<p>Web components solve this problem. They're <a href=\"https://caniuse.com/#feat=custom-elementsv1\">supported by all modern browsers</a>, they're framework-agnostic, and they're <a href=\"https://developer.mozilla.org/en-US/docs/Web/Web_Components\">built into the standard</a>, so we know they'll be supported for many years to come.</p>\n<p>This is the technology that Shoelace is built on.</p>\n<h2 id=\"%22but-i-only-use-%5Binsert-your-favorite-framework-here%5D!%22\">&quot;But I only use [insert your favorite framework here]!&quot; <a class=\"direct-link\" href=\"#%22but-i-only-use-%5Binsert-your-favorite-framework-here%5D!%22\">#</a></h2>\n<p>I hear you. You <em>only</em> use React/Vue/Angular/whatever, so why should you care if your components work in other frameworks?</p>\n<p>The fact is, at some point your beloved framework will ship a new version with breaking changes, and when that happens, you'll be reworking every button, input, dialog, dropdown, tab group, etc. That's just how software works.</p>\n<p>And further down the road, your framework of choice won't be as ubiquitous as it is today. Things change and, like it or not, you will eventually move on or get left behind.</p>\n<p>Since Shoelace is built on standardized browser APIs, it will be around long after today's most popular frameworks become obsolete.</p>\n<h2 id=\"tl%3Bdr\">TL;DR <a class=\"direct-link\" href=\"#tl%3Bdr\">#</a></h2>\n<p>I love building UI components, but it really sucks to rebuild them for every new framework (and new framework version). With Shoelace, I'm harnessing the power of web components to bring you a reusable, customizable component library that works with whatever framework you're using today and whatever framework you'll be using tomorrow.</p>\n<p><a href=\"https://shoelace.style/\">Check it out at shoelace.style</a></p>\n",
      "date_published": "2020-07-24T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/corys-amazing-dot-paper/",
      "url": "https://www.abeautifulsite.net/posts/corys-amazing-dot-paper/",
      "title": "Cory&#39;s amazing dot paper",
      "content_html": "<p>In a world where designers use Sketch, Photoshop, and other apps to create wireframes, I'm here in my corner holding this old fashioned pencil and a stack of dot paper.</p>\n<p>Sorry, but for me, these primitive tools do the same thing and I find them easier to use.</p>\n<p>I don't know. I guess it's just faster to grab a pencil and paper to transform my thoughts into a wireframe. I also use it for jotting down notes and todos here and there. In fact, aside from GitHub issues, I don't even have a task manager.</p>\n<p>I used to use lined paper, but that's distracting. Then I tried graph paper, which was better but still a bit distracting. At some point, I discovered dot paper, but it's incredibly hard to find and usually expensive.</p>\n<p>So I created my own.</p>\n<p><img src=\"/images/corys-dot-paper.jpg\" alt=\"A small stack of dot paper on top of a wooden desk with a mechanical pencil on top\"></p>\n<p>The dots are intentionally subtle to minimize distraction. I usually print out 20 sheets at a time and use a binder clip to keep them together. A good mechanical pencil is a necessity since it never needs to be sharpened and keeps a consistent edge.</p>\n<p>This is the same paper I used to draw wireframes for my free beautifier tool.</p>\n<p>Today, I'm releasing my homegrown dot paper for free in two variations:</p>\n<ul>\n<li><a href=\"/downloads/dot-paper/dot-paper.pdf\">Dot paper</a></li>\n<li><a href=\"/downloads/dot-paper/dot-paper-grid.pdf\">Dot paper with grid</a></li>\n</ul>\n<p>The version with grid is excellent for wireframes, as it provides a way to measure without counting dots.</p>\n<p>Just download, print, and start creating!</p>\n",
      "date_published": "2019-06-03T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/a-free-html-css-and-js-beautifier/",
      "url": "https://www.abeautifulsite.net/posts/a-free-html-css-and-js-beautifier/",
      "title": "A free HTML, CSS, and JavaScript beautifier",
      "content_html": "<p>Ten years ago, I launched <a href=\"https://dirtymarkup.com\">DirtyMarkup</a> to clean up dirty code. It was a fun little tool, but its best feature was that it was easy to use and didn't have intrusive advertisements.</p>\n<p>I sold DirtyMarkup a couple years ago, and since then the new owners slapped on a header that makes the page scroll and some banner ads. 😒</p>\n<p>I missed having my own tool, so last week I built a new one from scratch that’s even better. 💪</p>\n<p><img src=\"/images/beautifier-wireframe.jpg\" alt=\"Picture of a hand-drawn wireframe of my new tool\"></p>\n<p>You can find it at: <a href=\"https://www.surrealcms.com/beautify\">surrealcms.com/beautify</a></p>\n<p>The new tool doesn’t use Tidy. Instead, it relies on <a href=\"https://prettier.io/\">Prettier</a> for cleaning up HTML, CSS, and JavaScript code. That means it doesn’t require a binary and the results are instant.</p>\n<p>If you’re interested in how I built it, <a href=\"https://www.surrealcms.com/blog/creating-a-code-beautifier-in-two-days.html\">I posted a write-up here</a>.</p>\n",
      "date_published": "2019-05-22T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/lets-encrypt-renews-but-browsers-still-seeing-oldexpired-ssl-certificate/",
      "url": "https://www.abeautifulsite.net/posts/lets-encrypt-renews-but-browsers-still-seeing-oldexpired-ssl-certificate/",
      "title": "Let&#39;s Encrypt renews but browsers still seeing old/expired SSL certificate",
      "content_html": "<p>This morning was frustrating. I recently upgraded my VPS from the deprecated <code>letsencrypt</code> client to the newer <code>cerbot</code> client and generated new certificates for all my personal domains. I thought everything was fine — until I kept seeing intermittent SSL errors.</p>\n<p>I figured I did something wrong, so I triple checked my Apache configs, made sure each website was pointing to the correct certificate, and restarted Apache...things seemed to work in Chrome, but not Firefox.</p>\n<p>Ok, obviously Firefox was caching the certificate, right? I cleared everything. Same error. I reinstalled Firefox. Same error. Then I noticed that, when I refreshed Chrome, I would <em>occasionally</em> see images blocked, then a moment later they would load.</p>\n<p>I ran some SSL tests with mixed results. They were seeing both certs intermittently too. 🤔</p>\n<p>So I disabled the server with <code>sudo service apache2 stop</code>. To my surprise, my websites were online, but this time the SSL was consistently invalid.</p>\n<p>It turns out, when I upgraded to <code>certbot</code>, I somehow launched a second instance Apache that wasn't responding to reloads, so there were two instances handling HTTPS traffic — one serving up the cached certificate from memory.</p>\n<p>To solve the problem, I ran:</p>\n<pre><code class=\"language-bash\">sudo killall apache2\nsudo service apache2 start\n</code></pre>\n<p>Evidently, Chrome is more resilient to this than Firefox. Perhaps when Chrome sees a valid certificate from at least one HTTPS request, it retries any that fail until it gets a valid one.</p>\n<p>Either way, mystery solved. 🕵🏻‍♂️</p>\n",
      "date_published": "2019-05-10T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/introducing-surreal-cms-7/",
      "url": "https://www.abeautifulsite.net/posts/introducing-surreal-cms-7/",
      "title": "Introducing Surreal CMS 7",
      "content_html": "<p>Last November was the 10 year mark for <a href=\"https://www.surrealcms.com/\">Surreal CMS</a>, a content management service I created to manage static (and mostly static) websites.</p>\n<p><img src=\"/images/surreal-cms-7-homepage.png\" alt=\"Screenshot of the Surreal CMS 7 homepage\"></p>\n<p>Last week, <a href=\"https://www.surrealcms.com/blog/announcing-surreal-cms-7.html\">I soft launched Surreal CMS 7</a>. This new version is a complete rebuild from scratch using Node.js + Vue.js. I worked on this new app for a long time, and I'm incredibly happy with the result.</p>\n<p>Everything has been improved in this version, and there's a bunch of great new features that really make static websites fun to manage. Early feedback from new and existing users has been overwhelmingly positive!</p>\n<p><strong>I've also reintroduced the free plan</strong> for personal, educational, and non-profit users!</p>\n<p>The list of updates and improvements is way too long to list here, but you can check out the <a href=\"https://www.surrealcms.com/blog/announcing-surreal-cms-7.html\">official announcement</a> to learn more.</p>\n",
      "date_published": "2019-04-26T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/getting-duplicate-ids-in-an-html-document/",
      "url": "https://www.abeautifulsite.net/posts/getting-duplicate-ids-in-an-html-document/",
      "title": "Getting duplicate ids in an HTML document",
      "content_html": "<p>I needed a way to identify all HTML elements with duplicate IDs. This is a seemingly simple task, but unfortunately, I didn't find anything out there that fit the bill.</p>\n<p>I did find a couple functions that returned the duplicates, but they didn't include the first occurrence (I guess they assume the first occurrence isn't a duplicate, but all subsequent occurrences are).</p>\n<p>So here's a function that does the job.</p>\n<pre><code class=\"language-js\">function getAllDuplicateIds() {  \n  const elements = [...document.querySelectorAll('[id]')];  \n  const ids = elements.map(el =&gt; el.id);  \n  const dups = elements.filter(el =&gt; ids.filter(id =&gt; id === el.id).length &gt; 1);  \n  \n  return dups;  \n}\n</code></pre>\n<p>This function will return an array of elements in the document that have duplicate IDs. If no duplicates are found, an empty array is returned.</p>\n<p>If you only need all occurrences <em>after</em> the first, here's a similar ES6 function for that, too.</p>\n<pre><code class=\"language-js\">function getDuplicateIds() {  \n const elements = [...document.querySelectorAll('[id]')];  \n const ids = [];  \n const dups = [];  \n   \n elements.map(el =&gt; ids.includes(el.id) ? dups.push(el) : ids.push(el.id));  \n   \n return dups;  \n}\n</code></pre>\n",
      "date_published": "2019-04-05T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/a-clever-way-to-style-the-mark-element/",
      "url": "https://www.abeautifulsite.net/posts/a-clever-way-to-style-the-mark-element/",
      "title": "A clever way to style the &lt;mark&gt; element",
      "content_html": "<p>I was checking out the <a href=\"https://cashnotify.com/\">CashNotify app</a> today and I noticed a beautiful style for highlighting text in their testimonials:</p>\n<p><img src=\"/images/styling-mark-1.png\" alt=\"Screenshot of text highlighted with a fancy style\"></p>\n<p>Most textual highlights use a boring rectangle background color, but this stands out and looks gorgeous. I was really hoping they were using a simple <code>&lt;mark&gt;</code> tag to accomplish this and was happy to learn that they are. The markup is as simple as it could be:</p>\n<pre><code class=\"language-html\">Just &lt;mark&gt;highlight&lt;/mark&gt; it!\n</code></pre>\n<p>And the styles are simple too:</p>\n<pre><code class=\"language-css\">mark {\n  background: linear-gradient(-100deg, hsla(48,92%,75%,.3), hsla(48,92%,75%,.7) 95%, hsla(48,92%,75%,.1));\n  border-radius: 1em 0;\n  padding: .5rem;\n}\n</code></pre>\n<p><img src=\"/images/styling-mark-2.png\" alt=\"Another screenshot of text highlighted with a fancy style\"></p>\n",
      "date_published": "2019-02-01T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/opening-a-new-window-after-an-async-operation/",
      "url": "https://www.abeautifulsite.net/posts/opening-a-new-window-after-an-async-operation/",
      "title": "Opening a new window after an async operation",
      "content_html": "<p>I was working on an OAuth implementation the other day and needed to open a third-party auth page in a new window.</p>\n<p>However, I needed to fetch the target URL from the server first, then open the window. Kinda like this:</p>\n<pre><code class=\"language-js\">const button = document.getElementById('auth-button');\nbutton.addEventListener('click', () =&gt; {\n  getAuthUrl().then(url =&gt; {\n    window.open(url);\n  });\n});\n</code></pre>\n<p>Of course, this doesn't work in most browsers — the popup gets blocked because the window wasn't opened immediately after the click.</p>\n<p>To work around this, we need to open the window immediately after the click, so let's use the well-supported about:blank URL to our advantage.</p>\n<pre><code class=\"language-js\">const button = document.getElementById('auth-button');\nbutton.addEventListener('click', () =&gt; {\n  const win = window.open('about:blank');\n\n  getAuthUrl().then(url =&gt; {\n    win.location = url;\n  });\n});\n</code></pre>\n<p>Now the window opens and redirects to the appropriate URL after the async function executes!</p>\n<p>You can take it a step further by opening a special page that shows a loader instead. Just swap out about:blank with your own page.</p>\n",
      "date_published": "2018-08-28T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/zipping-multiple-folders-into-separate-zip-files/",
      "url": "https://www.abeautifulsite.net/posts/zipping-multiple-folders-into-separate-zip-files/",
      "title": "Zipping multiple folders into separate zip files",
      "content_html": "<p>Here's a bash script that will zip all folders in the current directory into separate <code>.zip</code> files:</p>\n<pre><code class=\"language-bash\">for i in */; do zip -r &quot;${i%/}.zip&quot; &quot;$i&quot;; done\n</code></pre>\n<p>I had to do this to 75+ folders today and this definitely saved me some time. It works on macOS too!</p>\n",
      "date_published": "2017-07-31T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/shoelacecss-a-back-to-the-basics-css-starter-kit/",
      "url": "https://www.abeautifulsite.net/posts/shoelacecss-a-back-to-the-basics-css-starter-kit/",
      "title": "Shoelace.style — A back to the basics CSS starter kit",
      "content_html": "<p>I spent some time last week working on a free CSS boilerplate I'm calling <a href=\"https://shoelace.style/\">Shoelace.css</a>. It's kinda like Bootstrap, but a lot leaner and pure CSS. You don't need a preprocessor like Sass or Less to use it, but it's still highly customizable with <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_variables\">CSS variables</a>.</p>\n<p>I'm calling Shoelace a &quot;starter kit&quot;, not a framework. The goal was to create a lightweight, fully customizable, and extensible boilerplate for building websites and web apps.</p>\n<p>What makes Shoelace really awesome is that you can <code>&lt;link&gt;</code> to it with just one line of code and start using it. Customizations can be made in your own stylesheet by simply overriding variables:</p>\n<pre><code class=\"language-css\">:root {\n  --body-bg-color: black;\n  --body-color: white;\n}\n</code></pre>\n<p>Shoelace is only ~31KB minified and comes in at about 7.9KB gzipped. For comparison, Bootstrap 4 alpha 6 is 192KB CSS + 47KB JavaScript. And, starting today, you can use Shoelace via CDN courtesy of <a href=\"https://www.keycdn.com/\">KeyCDN</a>.</p>\n<p>For more info and to grab the source, head over to <a href=\"https://shoelace.style/\">shoelace.style</a>.</p>\n<p><em>July 24, 2020: Shoelace 2.0 has been released. The library has become a collection of professionally-designed web components and is much different than the original version.</em></p>\n",
      "date_published": "2017-07-27T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/downloading-a-list-of-urls-automatically/",
      "url": "https://www.abeautifulsite.net/posts/downloading-a-list-of-urls-automatically/",
      "title": "Downloading a list of URLs automatically",
      "content_html": "<p>I recently needed to download a bunch of files from Amazon S3, but I didn't have direct access to the bucket — I only had a list of URLs.</p>\n<p>There were too many to fetch one by one, so I wanted to fetch them automatically. Here are a couple ways I found to do that.</p>\n<h2 id=\"using-curl\">Using curl <a class=\"direct-link\" href=\"#using-curl\">#</a></h2>\n<p>Curl comes installed on every Mac and just about every Linux distro, so it was my first choice for this task. Turns out it's pretty easy.</p>\n<p>Create a new file called <code>files.txt</code> and paste the URLs one per line. Then run the following command.</p>\n<pre><code class=\"language-bash\">xargs -n 1 curl -O &lt; files.txt\n</code></pre>\n<p>Curl will download each and every file into the current directory.</p>\n<h2 id=\"using-wget\">Using wget <a class=\"direct-link\" href=\"#using-wget\">#</a></h2>\n<p>If you're on Linux or curl isn't available for some reason, you can do the same thing with wget.</p>\n<p>Create a new file called <code>files.txt</code> and paste the URLs one per line. Then run the following command:</p>\n<pre><code class=\"language-bash\">wget -i files.txt\n</code></pre>\n<p>Wget will download each and every file into the current directory.</p>\n<p><strong>Tip for macOS users:</strong> If you want to use wget on macOS, you can install it via <a href=\"https://brew.sh/\">Homebrew</a> using <code>homebrew install wget</code>.</p>\n",
      "date_published": "2017-07-21T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/surreal-cms-acquires-pagelime/",
      "url": "https://www.abeautifulsite.net/posts/surreal-cms-acquires-pagelime/",
      "title": "Surreal CMS acquires PageLime",
      "content_html": "<p>Nearly a decade ago, I launched my first SaaS application. It was a new take on content management — a hosted CMS that reads/writes directly to a web server and uses class attributes to define content regions.</p>\n<p>It was a great idea. Such a great idea that it inspired others to do the same. One of those apps was called PageLime.</p>\n<p>Over the years, I've seen a number of similar services come and go, but PageLime came out swinging. These guys had tons of energy. Hell, they even managed to get <a href=\"http://mashable.com/2010/12/31/pagelime-cms/\">featured by Mashable in 2010</a>. It was the first time I was actually worried about my competition.</p>\n<p>I never imagined that seven years later I would acquire them.</p>\n<p><img src=\"/images/pagelime-backdrop.png\" alt=\"A decorative backdrop used by the original PageLime website\"></p>\n<h2 id=\"what-happened%3F\">What happened? <a class=\"direct-link\" href=\"#what-happened%3F\">#</a></h2>\n<p>About three years ago, I noticed PageLime's support starting to slip. This was evidenced by users' feedback on Twitter and emails from new Surreal CMS users that were coming from PageLime.</p>\n<p>Turns out, for whatever reason, PageLime's founders had moved on to other businesses and someone new had taken over support.</p>\n<p>Since then, PageLime remained stagnant. Development stopped. The forum went offline. Then the blog was taken down. Sure, the website and service were still online, but they were just kinda there.</p>\n<h2 id=\"down-for-a-week\">Down for a week <a class=\"direct-link\" href=\"#down-for-a-week\">#</a></h2>\n<p>On May 25, 2017, Twitter users began reporting that <a href=\"https://twitter.com/karenzadesign/status/869266717108834305\">PageLime was down</a>. Sure enough it was, and it stayed down until June 2 with no official response from support.</p>\n<p>I can only speculate as to what happened. I don't know why it took so long to get the service back online. It was upsetting to users, for sure, but it also upset me as a SaaS owner who takes pride in offering <a href=\"https://twitter.com/claviska/status/869614153828315136\">top notch support</a>.</p>\n<h2 id=\"the-acquisition\">The acquisition <a class=\"direct-link\" href=\"#the-acquisition\">#</a></h2>\n<p>In early June, one of PageLime's co-founders contacted me about sunsetting the service. I outlined my vision for migrating users to Surreal CMS and we eventually came to an agreement for acquisition. (Details of the acquisition will remain private as part of the agreement.)</p>\n<p>Over the last few weeks, I've worked diligently to create a tool that helps PageLime users migrate their account to Surreal CMS. My goal was to make the transition as seamless as possible for everyone.</p>\n<p>Starting today, you can migrate your PageLime account to Surreal CMS in just a few seconds with the automated migration tool available on PageLime's website.</p>\n<h2 id=\"the-shutdown\">The shutdown <a class=\"direct-link\" href=\"#the-shutdown\">#</a></h2>\n<p>PageLime will officially shutdown on August 31, 2017.</p>\n<p>To be clear, I didn't acquire PageLime to shut it down — that was already going to happen. I acquired it to offer users a seamless transition from one service to another, and Surreal CMS is undoubtedly the most qualified alternative for them.</p>\n<p>Of course, the migration is completely opt-in. Users can decide if they want to migrate their accounts to Surreal CMS or seek another service. Those who do migrate will receive two weeks free to make sure Surreal CMS is a good fit for their business.</p>\n<p>I encourage PageLime users to join the <a href=\"https://community.surrealcms.com/\">Surreal CMS community forum</a>. It's a great place to ask questions, meet fellow designers, and show the community what you've been working on.</p>\n<p>If you have questions about your PageLime account or the acquisition, please visit <a href=\"http://pagelime.com\">pagelime.com</a>. If you need to talk to a human, there's a link on the homepage.</p>\n",
      "date_published": "2017-07-14T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/rebuilding-your-spotlight-index-in-macos/",
      "url": "https://www.abeautifulsite.net/posts/rebuilding-your-spotlight-index-in-macos/",
      "title": "Rebuilding your Spotlight index in macOS",
      "content_html": "<p>I use Spotlight more than I like to admit, usually for launching apps. Recently, some of my apps and files stopped appearing — even ones I access frequently.</p>\n<p>After sifting through numerous posts online, I finally discovered one that seems to work. Running this command in the terminal seems to do the trick:</p>\n<pre><code class=\"language-bash\">sudo mdutil -E /\n</code></pre>\n<p>If you're having problem with just a certain disk, you can replace <code>/</code> with the appropriate device name (tip: drag the device into the terminal and let macOS input it for you).</p>\n<p>Finally, my Spotlight is back to normal!</p>\n",
      "date_published": "2017-07-14T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/thoughts-on-amp/",
      "url": "https://www.abeautifulsite.net/posts/thoughts-on-amp/",
      "title": "Thoughts on AMP",
      "content_html": "<p>Some time ago, a user asked about <a href=\"https://www.ampproject.org/\">Google AMP</a> support. At the time, I didn't know much about AMP aside from it made pages load faster on mobile devices. It sounded neat.</p>\n<p>A couple weeks ago, I decided to dive in and integrate AMP with Postleaf. But the deeper I got, the more I realized exactly how it works and why it's terrible for the web.</p>\n<p><a href=\"https://twitter.com/postleafapp/status/863123916126081029\">I went on a Twitter rant</a> about some of the issues I encountered, but I think it will be better to highlight <em>why</em> it's such a bad idea and why I ultimately chose not to add AMP in Postleaf. I'm sure I'll be linking people to this post in the future.</p>\n<p><strong>TL;DR</strong> – AMP is parading around as an open-source initiative that makes the web faster for mobile users, but it's really just Google's way of locking users into their own ecosystem.</p>\n<h2 id=\"the-spec\">The spec <a class=\"direct-link\" href=\"#the-spec\">#</a></h2>\n<p>First off, the AMP spec is way too strict:</p>\n<ul>\n<li>You must include <a href=\"https://www.ampproject.org/docs/tutorials/create/basic_markup\">this exact style block</a> on every page</li>\n<li>The first child element in your <code>&lt;head&gt;</code> tag must be a meta tag specifying UTF-8 encoding</li>\n<li>The second child element must be the AMP script</li>\n<li>You must include a viewport tag with a specific value</li>\n<li>You must put all your custom styles on the page using a <code>&lt;style&gt;</code> block</li>\n<li>You must not use <a href=\"https://www.ampproject.org/docs/guides/responsive/style_pages#disallowed-styles\">restricted CSS properties</a></li>\n<li>You must not use scripts</li>\n<li>You must convert certain HTML tags (such as <code>&lt;img&gt;</code> and <code>&lt;video&gt;</code>) to AMP-compatible tags</li>\n<li>You must convert embedded content to AMP compatible components in order for them to render</li>\n<li><a href=\"https://www.ampproject.org/docs/tutorials/create/basic_markup\">The list goes on</a></li>\n</ul>\n<p>I understand the reason behind some of these requirements, but I disagree with many of them and the overall implementation. As a web developer and publisher, I find it inconvenient and unnecessarily restrictive. This isn't how the web is supposed to be.</p>\n<h2 id=\"components\">Components <a class=\"direct-link\" href=\"#components\">#</a></h2>\n<p>While experimenting, I couldn't get a single <code>&lt;amp-iframe&gt;</code> to load without an error. For all embed providers I tested, the iframe rendered as an empty box. Turns out, the correct way to embed third-party content is with <a href=\"https://ampbyexample.com/#components\">custom AMP components</a>.</p>\n<p>But guess what? If your content incorporates HTML from a third-party website (e.g. via copy &amp; paste or oEmbed), there's virtually no way to convert it to an AMP-compatible component. The spec seems to assume your CMS will be aware of the embedded content's provider, but that isn't always true.</p>\n<p>Furthermore, AMP doesn't have components for all content providers. You're stuck using <a href=\"https://ampbyexample.com/#components\">the ones they want you to use</a>. I'll say it again: this isn't how the web is supposed to be.</p>\n<h2 id=\"no-scripts\">No scripts <a class=\"direct-link\" href=\"#no-scripts\">#</a></h2>\n<p>This isn't necessarily a bad thing, but it has a terrible side effect. On one hand, you'll never seeing those annoying popover ads on an AMP page. On the other, you're not allowed to use any scripts. At all.</p>\n<p>Want a custom nav menu? Sorry, you have to use the <a href=\"https://ampbyexample.com/components/amp-sidebar/\">AMP sidebar</a>. Want to build a carousel? Nope, you have to use the <a href=\"https://ampbyexample.com/components/amp-carousel/\">AMP carousel</a>. Want a custom widget that AMP doesn't support? Nope, too bad.</p>\n<p>If it hasn't become clear by now, AMP is about more than making your pages load faster. It's about locking users into Google's ecosystem.</p>\n<h2 id=\"a-closed-portal\">A closed portal <a class=\"direct-link\" href=\"#a-closed-portal\">#</a></h2>\n<p>It may sound like a conspiracy theory, but I'm not the only one who feels this way. <a href=\"https://danielmiessler.com/blog/google-amp-not-good-thing/\">Daniel Miessler writes:</a></p>\n<blockquote>\n<p>[AMP is] a technology that makes mobile page results load very quickly on Google, it displays the content in a more uniform fashion. But there’s a problem.</p>\n<p><strong>The content loads off of Google’s own server, not from the website itself.</strong></p>\n</blockquote>\n<p>Think about that. By creating an AMP version of your content, you're effectively publishing it to Google's server and giving them permission to do pretty much whatever they want with it.</p>\n<p>Daniel continues:</p>\n<blockquote>\n<p>It’s poisonous to the underlying concept of an open internet.</p>\n<p>If this were to become widely adopted, you’d search for something, get results, consume the content, and you’d never leave Google.</p>\n<p>They want to be a portal, in other words. A portal that you never leave. And this is coming from the most successful and profitable advertising company in the world.</p>\n<p>Who (other than Google) can possibly see this as a good thing?</p>\n</blockquote>\n<p>Exactly. <a href=\"https://www.ampproject.org/\">Their homepage</a> claims that AMP is &quot;an open-source initiative aiming to make the web better for all,&quot; but AMP isn't a good thing for anyone except Google. <a href=\"https://www.theregister.co.uk/2017/05/19/open_source_insider_google_amp_bad_bad_bad/\">According to Scott Gilbertson</a>:</p>\n<blockquote>\n<p>So it's not really about speed. As with anything that eschews standards for its own modified version thereof, it's about lock-in. Tons of pages in Google AMP markup mean tons of pages that are optimized specifically for Google and indexed primarily by Google and shown primarily to Google users. It's Google's attempt to match Facebook's platform. And yes, Facebook is far worse than AMP, but that doesn't make Google AMP a good idea. At least Facebook doesn't try to pretend like it's open.</p>\n</blockquote>\n<p>That's perhaps the worst part. Google has gone out of its way to make AMP seem like an open-source initiative, but the intention is anything but.</p>\n<p>Also concerning is <a href=\"https://80x24.net/post/the-problem-with-amp/\">this post by Kyle Schreiber</a> that discusses Google's governance policy over AMP:</p>\n<blockquote>\n<p>Google has the ability to further change the AMP HTML specification to keep publishers in their ecosystem. Google already makes deleting AMP pages difficult. Despite touting AMP HTML as an open standard, every one of the AMP Project’s core developers appears to be a Google employee.</p>\n</blockquote>\n<p>That doesn't sound nearly as open as their homepage claims.</p>\n<h2 id=\"decentralized-publishing\">Decentralized Publishing <a class=\"direct-link\" href=\"#decentralized-publishing\">#</a></h2>\n<p>One of Postleaf's founding principles revolves around a decentralized publishing experience. I believe this software should be open and free, just like the web is. <em>Just like the web was intended.</em></p>\n<p>You and only you should own and control your content. It's that simple.</p>\n<p>Supporting Google AMP would go against this fundamental belief. It's something I feel very strongly about and it's something I've worked hard to instill into Postleaf.</p>\n<p>The truth is, if you really want your pages to load fast, you don't need AMP. Take it from <a href=\"https://daringfireball.net/linked/2017/05/20/gilbertson-amp\">John Gruber</a>:</p>\n<blockquote>\n<p>Yes, AMP pages load fast, but you don’t need AMP for fast-loading web pages. If you are a publisher and your web pages don’t load fast, the sane solution is to <a href=\"http://idlewords.com/amp_static.html\">fix your fucking website so that pages load fast</a>, not to throw your hands up in the air and implement AMP.</p>\n</blockquote>\n<p>Or, summed up in a tweet by yours truly:</p>\n<blockquote>\n<p>Problem: your website doesn't load fast.</p>\n<p>Solution: optimize, remove cruft, ditch 20+ analytics scripts, don't serve page-blocking ads.</p>\n<p>— Postleaf (@postleafapp) <a href=\"https://twitter.com/postleafapp/status/866086420703784960\">May 21, 2017</a></p>\n</blockquote>\n<p>That said, I think it's pretty obvious I won't be adding support for AMP in Postleaf anytime soon.</p>\n",
      "date_published": "2017-05-23T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/json-feed/",
      "url": "https://www.abeautifulsite.net/posts/json-feed/",
      "title": "JSON Feed",
      "content_html": "<p><a href=\"https://jsonfeed.org/\">JSON Feed</a> is a lot like RSS, except instead of XML it's formatted with JSON. It's a rather new spec, <a href=\"https://jsonfeed.org/2017/05/17/announcing_json_feed\">introduced just last week</a>, but it's been getting some <a href=\"https://daringfireball.net/linked/2017/05/18/maxime-vaillancourt-json-feed-viewer\">major coverage</a> and a number of applications have already started supporting it.</p>\n<p>Since Postleaf was built for the modern publisher, I decided to add support for it in alpha 5. It's just like <a href=\"https://daringfireball.net/linked/2017/05/23/json-feed-dr-drang\">John Gruber says</a>, &quot;easier to generate, easier to parse.&quot;</p>\n<p>I expect to see a lot about JSON Feed in the coming months. I'm even happier to report that, within days of the spec being released, Postleaf is well-prepared!</p>\n",
      "date_published": "2017-05-23T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/postleaf-reimagined/",
      "url": "https://www.abeautifulsite.net/posts/postleaf-reimagined/",
      "title": "Postleaf: reimagined",
      "content_html": "<p>It's been about nine months since Postleaf debuted as a simple, beautiful, open source, PHP blogging platform. The initial version was well-received, landing <a href=\"https://techcrunch.com/2016/08/23/postleaf-is-a-open-source-blogging-platform-for-the-design-conscious/\">an article on TechCrunch</a> and making its way to <a href=\"https://www.producthunt.com/posts/postleaf\">#1 for the day on Product Hunt</a>. (Thank you so much, everyone!)</p>\n<p>Today, I'm announcing something pretty big: <em>A complete redesign, a new platform, and some amazing new features.</em></p>\n<p><img src=\"/images/postleaf-posts.png\" alt=\"Screenshot of the new Postleaf dashboard\"></p>\n<h2 id=\"from-the-ground-up\">From the Ground Up <a class=\"direct-link\" href=\"#from-the-ground-up\">#</a></h2>\n<p>Postleaf has been redesigned from the ground up. I've moved the project to Node.js, refined the user interface, and added a number of incredible features that just work:</p>\n<ul>\n<li>Inline editing</li>\n<li>Distraction-free (&quot;zen&quot;) mode with day and night support</li>\n<li>Automatic responsive images via Dynamic Images</li>\n<li>Themes via Dust.js</li>\n<li>Fast, database-agnostic built-in search</li>\n<li>Integrated file manager</li>\n<li>Out of the box support for JSON-LD, OpenGraph, and Twitter Cards</li>\n<li>oEmbed support for embedding third-party content</li>\n<li>Spotlight-style search from anywhere in the admin panel</li>\n<li>Simple backups (including content as easy-to-read JSON files, themes, and uploads in a single zip file)</li>\n<li>Custom post templates (no limit to how many a theme can have)</li>\n<li>Roles and permissions</li>\n<li>And more</li>\n</ul>\n<p>Everything you loved about the old version of Postleaf is still there and then some. And it's even more simple and beautiful than before.</p>\n<p>You can <a href=\"https://github.com/Postleaf/postleaf/releases\">get the source</a> of the new version on GitHub.</p>\n",
      "date_published": "2017-04-26T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/thoughts-on-uploads/",
      "url": "https://www.abeautifulsite.net/posts/thoughts-on-uploads/",
      "title": "Thoughts on uploads",
      "content_html": "<p>Uploads management is a concept I've always struggled with in Postleaf, but it's a necessary evil. Users have to be able to view and delete files they upload; but at the same time, I've never felt that it should be an integral part of the app.</p>\n<p>Last night I had to face the fact that Postleaf isn't going to ship until it has a damn good uploads manager.</p>\n<p>It was time to face the inevitable. I stayed up <a href=\"https://twitter.com/postleafapp/status/844069264621559808\">all night</a> on a sort of <a href=\"https://www.youtube.com/watch?v=FbccrO8qKog\">vision quest</a> for ideas, and ultimately came up with what I feel is the perfect solution for Postleaf.</p>\n<p><img src=\"/images/uploads-manager.jpg\" alt=\"A hand drawn wireframe of an uploads manager prototype\"></p>\n<p>The concept involves a panel that slides up from the bottom of the screen when the control is activated. Images and other files are displayed in lightbox-style gallery, along with the ability to search, delete, and download files. The panel can be dismissed by clicking or tapping outside of it or by pressing the escape key.</p>\n<p>I created this concept because I don't believe the uploads manager deserves its own dedicated section in the admin panel. People use Postleaf to manage content, not files, so let's stay focused on what we came here to do.</p>\n<p>Managing files is a secondary task, and this panel approach suits it well. The uploads manager can be accessed from anywhere in the app by pressing <kbd>CMD</kbd> + <kbd>SHIFT</kbd> + <kbd>U</kbd>. Alternatively, it can be activated by a form control and used as a file picker.</p>\n<p>Here's a glimpse of an early prototype:</p>\n<p><img src=\"/images/uploads-manager-preview.png\" alt=\"Screenshot of the uploads manager in the Postleaf dashboard\"></p>\n<p>I chose a dark background because it brings more focus to your photos and files. I think it works really well, and I'm excited to bring this concept to life in Postleaf.</p>\n<p>At this rate, I should have the uploads manager ready to roll in a couple days!</p>\n",
      "date_published": "2017-03-21T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/importing-plain-css-files-with-sass/",
      "url": "https://www.abeautifulsite.net/posts/importing-plain-css-files-with-sass/",
      "title": "Importing plain CSS files with Sass",
      "content_html": "<p>When I first started using Sass, there was one thing that drove me crazy about it compared to Less. For some reason, including a plain CSS file just wasn't something the compiler wanted to do:</p>\n<pre><code class=\"language-css\">/* Uncaught, unspecified &quot;error&quot; event. (Ignoring local @import of &quot;animate.min.css&quot; as resource is missing.) */\n@import 'animate.css';\n</code></pre>\n<p>But, annoyingly, the resource <em>is</em> there. So why does the compiler report it missing?</p>\n<p>I may never understand the logic behind this design decision, but the solution is to simply omit the <code>.css</code> extension:</p>\n<pre><code class=\"language-css\">/* Imports animate.css */\n@import 'animate';\n</code></pre>\n<p>This works as of version 3.2. And for those using Less, here's the equivalent syntax:</p>\n<pre><code class=\"language-css\">/* Import CSS file using Less */\n@import (css) &quot;animate.css&quot;;\n</code></pre>\n",
      "date_published": "2017-02-10T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/determining-your-apps-base-directory-in-nodejs/",
      "url": "https://www.abeautifulsite.net/posts/determining-your-apps-base-directory-in-nodejs/",
      "title": "Determining your app&#39;s base directory in Node.js",
      "content_html": "<p>Determining your app's base dir (or <em>document root</em> if you're from a PHP background) isn't as straight forward as you'd think in Node. Here's a little trick to get a globally available reference to your app's root directory.</p>\n<p>Add this somewhere towards the start of your main app file (e.g. <code>app.js</code>):</p>\n<pre><code class=\"language-js\">global.__basedir = __dirname;\n</code></pre>\n<p>This sets a global variable that will always be equivalent to your app's base dir. Use it just like any other variable:</p>\n<pre><code class=\"language-js\">const yourModule = require(__basedir + '/path/to/module.js');\n</code></pre>\n<p>I know what you're thinking: oh no a global! 😫</p>\n<p>And I would normally agree, but I think this technique is a fair exception if you're developing an app. Here's why:</p>\n<ul>\n<li>There <a href=\"http://stackoverflow.com/a/18721515/567486\">really isn't</a> a consistent way to references the base dir without it.</li>\n<li>It's a fair requirement to set if you're worried about reusing modules.</li>\n<li>It's a lot easier and more stable than using <code>../../../file.js</code> all the time.</li>\n<li>It shares the same naming convention as <code>__dirname</code> and <code>__filename</code>.</li>\n</ul>\n<p>There are, of course, other techniques that may or may not be more appropriate depending on your app. However, in my opinion, this approach is the most elegant.</p>\n",
      "date_published": "2017-02-09T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/hashing-passwords-with-nodejs-and-bcrypt/",
      "url": "https://www.abeautifulsite.net/posts/hashing-passwords-with-nodejs-and-bcrypt/",
      "title": "Hashing Passwords with Node.js and bcrypt",
      "content_html": "<p>The <a href=\"https://www.npmjs.com/package/bcrypt\">bcrypt library on NPM</a> makes it really easy to hash and compare passwords in Node. If you're coming from a PHP background, these are roughly equivalent to <a href=\"http://php.net/manual/en/function.password-hash.php\">password_hash()</a> and <a href=\"http://php.net/manual/en/function.password-verify.php\">password_verify()</a>.</p>\n<p>Bcrypt is the de facto way to hash and store passwords. For a brief explanation of why we use one-way hashes instead of encryption, check out <a href=\"http://stackoverflow.com/a/326706\">this answer</a> on StackOverflow.</p>\n<h2 id=\"installing\">Installing <a class=\"direct-link\" href=\"#installing\">#</a></h2>\n<p>To use the library, simply install with NPM:</p>\n<pre><code class=\"language-bash\">npm install --save bcrypt\n</code></pre>\n<p>Then include it like this:</p>\n<pre><code class=\"language-js\">const bcrypt = require('bcrypt');\n</code></pre>\n<h2 id=\"creating-and-verifying-a-password-hash\">Creating and verifying a password hash <a class=\"direct-link\" href=\"#creating-and-verifying-a-password-hash\">#</a></h2>\n<p>Bcrypt supports both sync and async methods. The asynchronous approach is recommended because hashing is CPU intensive, and the synchronous version will block the event loop and prevent your app from handling other requests until it finishes.</p>\n<p>Thus, while the sync version is more convenient, it's best to stick with async if you're concerned about performance.</p>\n<h3 id=\"asynchronous-version\">Asynchronous version <a class=\"direct-link\" href=\"#asynchronous-version\">#</a></h3>\n<p>Hashing a password is as simple as this. The second argument is the number of rounds to use when generating a salt.</p>\n<pre><code class=\"language-js\">bcrypt.hash('myPassword', 10, function(err, hash) {\n  // Store hash\n});\n</code></pre>\n<p>To verify the password later on:</p>\n<pre><code class=\"language-js\">bcrypt.compare('somePassword', hash, function(err, res) {\n  if (res) {\n   // Passwords match\n  } else {\n   // Passwords don't match\n  }\n});\n</code></pre>\n<h3 id=\"synchronous-version\">Synchronous version <a class=\"direct-link\" href=\"#synchronous-version\">#</a></h3>\n<p>If you prefer a synchronous approach, you can do this instead:</p>\n<pre><code class=\"language-js\">let hash = bcrypt.hashSync('myPassword', 10);\n\n// Store hash\n</code></pre>\n<p>To verify the password later on:</p>\n<pre><code class=\"language-js\">if (bcrypt.compareSync('somePassword', hash)) {\n // Passwords match\n} else {\n // Passwords don't match\n}\n</code></pre>\n<p>That's it! You've just hashed and verified your first password using Node.js and bcrypt!</p>\n",
      "date_published": "2017-02-08T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/using-an-orm/",
      "url": "https://www.abeautifulsite.net/posts/using-an-orm/",
      "title": "Using an ORM",
      "content_html": "<p>I've never really bothered with <a href=\"https://en.wikipedia.org/wiki/Object-relational_mapping\">ORMs</a> before, as feelings for them tend to be mixed. I've heard that you can spend twice as long learning an ORM as you can coding raw SQL. 🤷🏻‍♂️</p>\n<p>I figured it was time to see for myself. For the Postleaf rebuild, I decided to try out <a href=\"http://docs.sequelizejs.com/en/v3/\">Sequelize</a>. I discovered it some time ago and really liked what I saw, but never had a chance to use it. I'm glad I finally did.</p>\n<p>The previous version of Postleaf required MySQL. All the models were written from scratch, including CRUD methods (create, read, update, delete) and validation. Believe me when I say that you can waste <em>a lot of time</em> writing your own CRUD methods.</p>\n<p>To make matters worse, some of the queries were proprietary, meaning they'd only work with MySQL. I've wanted to remove that requirement for a long time.</p>\n<p>An ORM can alleviate these pain points. Sequelize, for example, lets you define models and validation using a simple JSON object. It even creates the database schema and models for you, after which you can query the database without writing any SQL at all.</p>\n<p>For example:</p>\n<pre><code class=\"language-js\">// Find the user named Joe\nUser.findOne({\n  where: {\n    name: 'Joe'\n  }\n}).then((user) =&gt; {\n  console.log(user.name); // &quot;Joe&quot;\n});\n</code></pre>\n<p>That's roughly the same as this:</p>\n<pre><code class=\"language-sql\">SELECT id, name, email FROM users WHERE name = 'Joe'\n</code></pre>\n<p>It may seem a bit more verbose for simple queries, but once you start associating models the benefits are more easily understood. With just one additional line of code, I can fetch the user along with all of his posts:</p>\n<pre><code class=\"language-js\">// Find Joe and fetch all of his posts\nUser.findOne({\n  where: {\n    name: 'Joe'\n  },\n  include: Post\n}).then((user) =&gt; {\n  console.log(user.name); // &quot;Joe&quot;\n  console.log(user.posts); // Posts authored by Joe\n});\n</code></pre>\n<p>It gets even more exciting when you realize that Sequelize doesn't just return the raw data, it returns the data as a series of model objects. That means you can do things like this:</p>\n<pre><code class=\"language-js\">// Find Joe and change his name to Bob\nUser.findOne({\n  where: {\n    name: 'Joe'\n  }\n}).then((user) =&gt; {\n  user.name = 'Bob';\n  user.save(); // commit to database\n});\n</code></pre>\n<p>Since raw SQL queries are abstracted into code, I don't have to worry about database-specific quirks — Sequelize does all that in the background. As long as I stick to their API (and avoid database-specific features), Postleaf will be able to run on top of any database that Sequelize supports. (Currently SQLite, MySQL, MariaDB, MSSQL, and PostgreSQL.)</p>\n<p>For now, I've decided to develop with SQLite. It's fast, and I love having a single database file in a known location that you can quickly duplicate or replace. It's great for testing, but I'm definitely trying to support all five platforms for release!</p>\n",
      "date_published": "2017-02-06T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/solving-the-search-problem/",
      "url": "https://www.abeautifulsite.net/posts/solving-the-search-problem/",
      "title": "Solving the search problem",
      "content_html": "<p>I recently wrote about <a href=\"/posts/using-an-orm\">using an ORM</a> and how it allowed me to support five different database platforms with minimal effort. There is, however, one feature that even Sequelize couldn't tackle for me: <em>full-text search</em></p>\n<p>A full-text search is typically a database feature that lets you locate content just like you would in a search engine. Ideally, the results are ranked by some sort of relevancy score.</p>\n<p>The problem is that not all databases support full-text search out of the box, and the ones that do don't necessarily rank results the same way.</p>\n<h2 id=\"searching-with-sqlite\">Searching with SQLite <a class=\"direct-link\" href=\"#searching-with-sqlite\">#</a></h2>\n<p>I'm using SQLite at the moment for development, and while it supports full-text search, you have to use one of three possible extensions (FTS3, FTS4, FTS5) that must be compiled along with SQLite.</p>\n<p>Having three extensions is confusing enough, much less making users compile their own version of SQLite just to run Postleaf. And none of this accounts for the four other database dialects that I'd like to support.</p>\n<h2 id=\"searching-with-mysql\">Searching with MySQL <a class=\"direct-link\" href=\"#searching-with-mysql\">#</a></h2>\n<p>The previous version of Postleaf ran on top of MySQL, which has a built-in full-text search. Once you create an index, you can search against content with relative ease. Results are reasonably relevant, but not amazing.</p>\n<p>Some quirks — it ignores any term that's three letters or less. So a search for &quot;cat&quot; will always yield zero results. And if you want to rank a post's title higher than its content (a weighted search), you have to do the math and write the raw SQL yourself. Lame.</p>\n<h2 id=\"solving-search-is-hard!\">Solving Search is hard! <a class=\"direct-link\" href=\"#solving-search-is-hard!\">#</a></h2>\n<p>It's true, search is hard, but this problem is much bigger than Postleaf. Ghost has a <a href=\"https://github.com/TryGhost/Ghost/issues/5321\">two year old issue</a> about it and a lot of people complain that WordPress searches <a href=\"http://www.noupe.com/wordpress/improving-the-default-search-experience-in-wordpress-75862.html\">lack relevance</a>.</p>\n<p>Sure, if you focus on one particular database or avoid full-text altogether, you can achieve a search that will yield somewhat usable results. It will work, but it won't be amazing. I think that's because databases really weren't meant to do this type of thing.</p>\n<p>A more effective way to solve this problem is with a dedicated search engine such as <a href=\"https://www.elastic.co/products/elasticsearch\">Elasticsearch</a>. Elasticsearch delivers fast, relevant results which is just what we're looking for! Except, of course, it's written in Java and can be somewhat difficult to setup.</p>\n<p>Making a complex third-party app a dependency of Postleaf was simply not going to happen. And while there are other options out there, they tend to be more complicated than they're worth for the simple search that I needed for Postleaf.</p>\n<h2 id=\"experimenting-with-lunr\">Experimenting with Lunr <a class=\"direct-link\" href=\"#experimenting-with-lunr\">#</a></h2>\n<p>After some searching around, I began experimenting with a JavaScript library called <a href=\"http://lunrjs.com/\">Lunr</a>. Lunr can be used with Node.js apps or directly in the browser.</p>\n<p>Essentially, you define an index with the fields you want to search. You can weight a field using the boost option:</p>\n<pre><code class=\"language-js\">var index = lunr(function() {\n  this.field('title', { boost: 10 });\n  this.field('content');\n  this.ref('id');\n});\n</code></pre>\n<p>Then you add items to the index:</p>\n<pre><code class=\"language-js\">index.add({\n  id: 1,\n  title: 'Lorem Ipsum',\n  content: 'Lorem ipsum dolor...'\n});\n</code></pre>\n<p>And then you can search quite easily:</p>\n<pre><code class=\"language-js\">index.search('lorem ipsum');\n</code></pre>\n<p>Lunr is fast, lightweight, and JavaScript. And it's results are spot on! I immediately knew it would be a key component to my full-text search solution, but some challenges still remained.</p>\n<h2 id=\"implementing-lunr-in-postleaf\">Implementing Lunr in Postleaf <a class=\"direct-link\" href=\"#implementing-lunr-in-postleaf\">#</a></h2>\n<p>My initial approach to implementing Lunr turned out to be expensive. I wanted to see how fast fetching, indexing, and searching would be on the fly. It looked something like this:</p>\n<ol>\n<li>Fetch id, title, and content of all posts when a request comes in.</li>\n<li>Create a Lunr index.</li>\n<li>Add each post to the index.</li>\n<li>Search the index for the user's query.</li>\n<li>eturn all posts that matched the IDs that Lunr had returned.</li>\n<li>DesTroy the Lunr index.</li>\n</ol>\n<p>This happened on every single request requiring a search. Obviously it wasn't ideal, but I was surprised at how well it performed even for 1,000 posts. At some point after that, the delay became somewhat noticeable (I think it was 2-3 seconds or so per query).</p>\n<p>I ended up optimizing my approach so the search index is only built once when the app starts. The index persists in memory and, using <a href=\"http://docs.sequelizejs.com/en/latest/docs/hooks/\">Sequelize hooks</a>, it stays up to date when you add, update, or delete posts.</p>\n<p>Since the search happens 100% in memory, it's incredibly fast.</p>\n<p>The biggest drawback to this approach is, of course, keeping the search index in memory. However, for 10,000 posts I extrapolated a footprint of just under 30MB. If you have that many posts, I hope your VPS is strong enough to handle it. 😆</p>\n<p>Needless to say, the Postleaf rebuild is shipping with a fast, relevant, database-agnostic full-text search thanks to Lunr and a very clever Node.js implementation.</p>\n",
      "date_published": "2017-02-06T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/moving-to-nodejs/",
      "url": "https://www.abeautifulsite.net/posts/moving-to-nodejs/",
      "title": "Moving to Node.js",
      "content_html": "<p>The first version of Postleaf was written in PHP and lives on as Leafpub. It's a beautiful piece of software that I'm very proud of, but I decided to move the project to Node.js for a few important reasons. This is by no means a knock on PHP, which will always have a special place in my heart, but more of a changing with the times realization.</p>\n<p>If you've ever worked with Node.js before, you'll know that it's fast. <em>Very fast.</em> The beauty of Node is that it's minimal by design. It can do anything you want it to do with the right packages, and this concept aligns very closely with my vision for Postleaf.</p>\n<p>You've probably been hearing <em>JavaScript is the Future</em> a lot lately. I think there's a lot of truth to that statement, especially as platforms such as <a href=\"https://www.electronjs.org/\">Electron</a> and <a href=\"https://phonegap.com/\">PhoneGap</a> gain popularity and bring JavaScript to places it's never been before.</p>\n<p>In general, I don't think it makes a lot of sense to write the same app three different times in three different languages for three different platforms (think iOS, Android, and Windows Phone apps, for example). We've been doing it for years, but I foresee JavaScript playing a vital role in closing that gap.</p>\n<p>By moving Postleaf to Node.js, its foundation is becoming much more nimble, making it easier to pivot and adapt to an ever-changing technology ecosystem. That, unfortunately, is something I don't think PHP will be able to do.</p>\n",
      "date_published": "2017-02-06T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/ssh-failing-on-macos-sierra/",
      "url": "https://www.abeautifulsite.net/posts/ssh-failing-on-macos-sierra/",
      "title": "SSH failing on macOS Sierra",
      "content_html": "<p>For me, upgrading to MacOS Sierra broke a lot of things that use SSH, including Transmit, Sequel Pro, and a handful of other apps. In fact, it seems to break any app that uses an SSH key with a passphrase. 🤔</p>\n<p>The solution I found was to tell SSH to use the MacOS keychain. Simply edit <code>~/.ssh/config</code> and add the following (you can safely create the file if it doesn't exist):</p>\n<pre><code>Host *  \n    UseKeychain yes\n</code></pre>\n<p>That's it! I didn't even have to restart SSH and everything is connecting fine again. 💪</p>\n",
      "date_published": "2017-01-15T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/getting-it-right/",
      "url": "https://www.abeautifulsite.net/posts/getting-it-right/",
      "title": "Getting it right",
      "content_html": "<p>To my awesome users:</p>\n<p>I've been taking some time to reimagine what Postleaf should have been. Yes, the betas were pretty awesome, but they weren't what I wanted them to be in terms of design, code, and function. I can do better, and you deserve nothing less than my very best.</p>\n<p>The last few months were difficult for me as I struggled to find my place in the world of content management. I thought about giving it up and getting out of software altogether. My vision was cloudy, my passion had faded. Recently, I looked at Postleaf from a completely different perspective and everything started to make sense again.</p>\n<p><em>I have a vision to bring simple, beautiful publishing to the world. And I'm not going to stop until I get it right.</em></p>\n<p>Thanks for giving me the time I needed to find myself.</p>\n<p>Postleaf will be back very soon. And it will be better than you ever imagined.</p>\n<p>— Cory</p>\n",
      "date_published": "2017-01-14T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/simpleimage-3/",
      "url": "https://www.abeautifulsite.net/posts/simpleimage-3/",
      "title": "SimpleImage 3.0",
      "content_html": "<p><a href=\"/posts/the-simple-image-library-for-php\">Back in 2011</a>, I released the first version of SimpleImage for PHP — an open source project for working with images.</p>\n<p>Today, version 3.0 has landed, and there's a lot to love about it.</p>\n<h2 id=\"overview\">Overview <a class=\"direct-link\" href=\"#overview\">#</a></h2>\n<p>Here's how it works at a glance:</p>\n<pre><code class=\"language-php\">try {\n // Create a new SimpleImage object\n $image = new claviska\\SimpleImage();\n\n // Magic! ✨\n $image\n  -&gt;fromFile('image.jpg') // load image.png\n  -&gt;autoOrient() // adjust orientation based on exif data\n  -&gt;resize(320, 200) // resize to 320x200 pixels\n  -&gt;flip('x') // flip horizontally\n  -&gt;colorize('DarkBlue') // tint dark blue\n  -&gt;border('black', 10) // add a 10 pixel black border\n  -&gt;overlay('watermark.png', 'bottom right') // add a watermark image\n  -&gt;toFile('new-image.png', 'image/png') // convert to PNG and save a copy to new-image.png\n  -&gt;toScreen(); // output to the screen\n\n // And much more! 💪\n} catch(Exception $err) {\n // Handle errors\n echo $err-&gt;getMessage();\n}\n</code></pre>\n<h2 id=\"requirements\">Requirements <a class=\"direct-link\" href=\"#requirements\">#</a></h2>\n<ul>\n<li>PHP 5.6+</li>\n<li>GD extension</li>\n</ul>\n<h2 id=\"features\">Features <a class=\"direct-link\" href=\"#features\">#</a></h2>\n<ul>\n<li>Supports reading, writing, and converting GIF, JPEG, PNG, WEBP formats.</li>\n<li>Reads and writes files and data URIs.</li>\n<li>Manipulation: crop, resize, overlay/watermark, adding TTF text</li>\n<li>Drawing: arc, border, dot, ellipse, line, polygon, rectangle, rounded rectangle</li>\n<li>Filters: blur, brighten, colorize, contrast, darken, desaturate, edge detect, emboss, invert, pixelate, sepia, sketch</li>\n<li>Utility methods: color adjustment, darken/lighten color, exif data, height/width, mime type, orientation</li>\n<li>Color arguments can be passed in as any CSS color (e.g. `LightBlue`), a hex color, or an RGB(A) array.</li>\n<li>Support for alpha-transparency (GIF, PNG, WEBP)</li>\n<li>Chainable methods</li>\n<li>Uses exceptions</li>\n<li>Load with Composer or manually (just one file)</li>\n</ul>\n<p><a href=\"https://github.com/claviska/SimpleImage#differences-from-simpleimage-2x\">The readme</a> has a list of changes from the 2.x version of SimpleImage.</p>\n<h2 id=\"download\">Download <a class=\"direct-link\" href=\"#download\">#</a></h2>\n<p><a href=\"https://github.com/claviska/SimpleImage\">Download the latest version on GitHub.</a></p>\n",
      "date_published": "2017-01-10T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/dont-hate-on-php/",
      "url": "https://www.abeautifulsite.net/posts/dont-hate-on-php/",
      "title": "Don&#39;t hate on PHP",
      "content_html": "<p>It wasn't long after launching a major open source PHP project until I started hearing things like <a href=\"https://news.ycombinator.com/item?id=12183268\">this</a>:</p>\n<blockquote>\n<p>I [...] immediately drop interest in a project when I see that it is implemented in PHP.</p>\n</blockquote>\n<p>A lot of people have been <a href=\"https://www.reddit.com/r/programming/comments/2c9i9v/why_does_php_suck/\">hating</a> <a href=\"https://adambard.com/blog/you-write-php-because-you-dont-know-better/\">on</a> <a href=\"https://eev.ee/blog/2012/04/09/php-a-fractal-of-bad-design/\">PHP</a> <a href=\"https://evertpot.com/PHP-Sucks/\">in</a> <a href=\"https://whydoesitsuck.com/why-does-php-suck/\">recent</a> <a href=\"https://wiki.theory.org/YourLanguageSucks#PHP_sucks_because\">years</a>, and frankly, they have every right to. In fact, you can hate on any language you want for whatever reasons you want. I could honestly care less.</p>\n<p>But let me stop you from generalizing that opinion and shoving it down everyone's throat.</p>\n<p><img src=\"/images/captain-ssh.gif\" alt=\"The captain shakes his head &quot;no&quot; and goes &quot;shh&quot;\"></p>\n<p>Sure, there are plenty of things I would change about PHP if I were the one designing it. I could say the same thing about every single programming language in the world, but that's not my job. I'm not engineering programming languages, I'm building web applications with them. And I'm certainly not going to undermine the hard working people who <em>are</em> designing these languages, whether I prefer to use them or not.</p>\n<h2 id=\"it's-just-a-tool\">It's just a tool <a class=\"direct-link\" href=\"#it's-just-a-tool\">#</a></h2>\n<p>What developers seem to forget is that programming languages are nothing more than tools that help you get something done. Just like the tools in your garage, each and every one has a special purpose. Not every tool will work well for every job, and some tools do the same exact thing in very different ways. Variety is the spice of life.</p>\n<p>But nobody tells a roofer his hammer is shit. Nobody tells a plumber his pipe cutter sucks. Nobody tells a carpenter his level is garbage. Each craftsman has their own preference based on their own experience, and that's perfectly acceptable.</p>\n<p><img src=\"/images/hammer-oh.gif\" alt=\"A lady hits the wall with a hammer and acts surprised when a hole appears\"></p>\n<p>If you don't like a tool, put it back in the toolbox. It's that simple. Don't run around telling everyone how shitty a programming language is because you don't like it. It might be your opinion, but it's a subjective, arrogant, and disrespectful opinion. Instead of coming off as a conceited asshole, use your expertise to advise people why a <em>specific tool</em> might be better for a <em>specific purpose</em>.</p>\n<p>Even if you're right with your reason, it won't matter if you're wrong with your approach. We're supposed to be professionals — what say we start acting like it? Who knows what tomorrow will bring. For now, let's stop fussing over the tools we're using and focus on the goals we're trying to accomplish.</p>\n",
      "date_published": "2016-11-22T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/thoughts-on-comments/",
      "url": "https://www.abeautifulsite.net/posts/thoughts-on-comments/",
      "title": "Thoughts on comments",
      "content_html": "<p>For as long as I can remember, comments have been a staple of blogging software. After all, what's a good blog post without a relevant discussion to accompany it?</p>\n<p>You might find it strange to learn that Postleaf doesn't ship with comments. This is by design, and I'll explain why in this post.</p>\n<h2 id=\"the-comment-problem\">The Comment Problem <a class=\"direct-link\" href=\"#the-comment-problem\">#</a></h2>\n<p>Everyone thinks they want comments on their blog. That is, until they have to deal with the problems that those comments create. The biggest problem is by far comment spam. This is such a huge issue that the makers of WordPress established <a href=\"https://akismet.com/\">a dedicated service</a> just to fight it.</p>\n<p>But why does it happen? Well, spammers post bogus comments, those comments contain links, and those links make them money when people click. Since it costs them practically nothing to do it, they keep posting comment spam. A lot of it.</p>\n<h2 id=\"fighting-spam\">Fighting Spam <a class=\"direct-link\" href=\"#fighting-spam\">#</a></h2>\n<p>There are many ways to fight comment spam. One is to moderate all comments before they go public. This really sucks because comments don't go live immediately and you have to manually approve every single one. That makes it hard to have a discussion and it can fill up your inbox.</p>\n<p>Another approach is to add some kind of crazy <a href=\"https://en.wikipedia.org/wiki/CAPTCHA\">CAPTCHA</a> test to your comment form, but these can be difficult even for humans and often discourage visitors from leaving comments.</p>\n<p><a href=\"https://xkcd.com/233/\"><img src=\"/images/a-new-captcha-approach.png\" alt=\"XKCD comic: a new CAPTCHA approach\"></a></p>\n<p>Perhaps the most effective approach is to require users to create an account, verify their email address, and then let them post. But let's be honest, how many people are actually going to take the time to do that? In my experience, not very many. Most people aren't comfortable typing their email address into a web form, so they're probably not going to give you their name, email address, and a password.</p>\n<h2 id=\"everyone-has-an-opinion\">Everyone Has An Opinion <a class=\"direct-link\" href=\"#everyone-has-an-opinion\">#</a></h2>\n<p>Yes, everyone. And many of them feel invincible hiding behind their keyboard so they're not afraid to force that opinion down your throat in the comments. Which brings us to the next big problem with comments: <em>accountability</em>.</p>\n<p>Even if you force users to create an account before posting a comment, there's nothing stopping them from using a bogus name and email address. You're going to end up with a lot of flaming, trash talking, and senseless discussions because there's a huge lack of accountability on the Internet.</p>\n<p><a href=\"https://xkcd.com/386/\"><img src=\"/images/duty-calls.png\" alt=\"XKCD comic: duty calls\"></a></p>\n<p>So how do we fix that? Well, I could spend the next year trying to develop the perfect comment system for Postleaf, but it's a massive undertaking and, to be honest, it would probably never really be good enough.<a href=\"https://xkcd.com/233/\">https://xkcd.com/233/</a></p>\n<p>So what now? Do we ditch comments altogether? 🤔</p>\n<h2 id=\"a-better-way\">A Better Way <a class=\"direct-link\" href=\"#a-better-way\">#</a></h2>\n<p>Some time ago, I got tired of dealing with comment problems and disabled them on my blog. The conversation went quiet, and I started to feel alone in the world. (Ok, not really, but still, not allowing comments at all was pretty lame.)</p>\n<p>Eventually, I decided to try out <a href=\"https://disqus.com/\">Disqus</a>. I added a small JavaScript snippet to my website and BOOM, comments. But not just any comments, good comments.</p>\n<h3 id=\"why-disqus-works\">Why Disqus Works <a class=\"direct-link\" href=\"#why-disqus-works\">#</a></h3>\n<p>The power of Disqus is in its community. Users login to their Disqus account (which they can create from your site if they don't already have one) and they're able to post comments to your blog.</p>\n<p>You're probably wondering, &quot;how is this any different from letting them create an account on <em>my</em> website?&quot;</p>\n<p>It's very different, because they only need to create one account which can be used on any website that runs Disqus. You have immediate access to millions of registered users that you don't have to bother keeping track of. Furthermore, Disqus lets users login through Facebook, Twitter, or Google, which provides the best form of accountability you're going to get on the Internet.</p>\n<p>Since I started using Disqus, I haven't had to deal with comment spam and the conversation has been just that — a conversation. Disqus handles notifications so I know when people post comments and they know when I respond. I can even reply to notifications with various commands to moderate comments by email — a huge time saver! 📫</p>\n<p><em>Update: February 26, 2017</em></p>\n<p>As of February 2017, Disqus converted their free plan into an ad-supported plan. That means, unless you remove Disqus from your website or fork up $10 per month, your website is going to show ads.</p>\n<p>I'm in no way opposed to a SaaS making money, but this feels like a bait and switch. Nobody gets to opt out. Nobody gets grandfathered in. You either pay up, stop using Disqus, or your visitors get subjected to whatever ads Disqus wants to show on your website.</p>\n<p>Not having control over one's own website is something I'm vehemently against.</p>\n<h2 id=\"comments-in-postleaf\">Comments in Postleaf <a class=\"direct-link\" href=\"#comments-in-postleaf\">#</a></h2>\n<p>Comments shouldn't be a chore. They should form relevant, civil discussions that engage your visitors. When you spend all your time moderating comments, you end up with less time for the finer things in life.</p>\n<p>That's why I intentionally left comments out of the Postleaf core. If you want them, I suggest finding a third-party platform or service that suits your needs for now. They are absolutely the best way to promote relevant discussions on your blog without the hassle of dealing with traditional comments.</p>\n",
      "date_published": "2016-06-12T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/code-can-change/",
      "url": "https://www.abeautifulsite.net/posts/code-can-change/",
      "title": "Code can change",
      "content_html": "<p>As a web developer, your code is often visible to anyone who wants to review it. If you're like me, you might get stressed out about the thought of people looking at your work and critiquing or criticizing your app's design.</p>\n<p>Take a deep breath, recenter, and remember that code can always change. That's why we have version numbers!</p>\n<p>Even the most seasoned developers have their own opinion of what &quot;good design&quot; is. No matter how long you spend engineering or reworking your app's design, there's always, always, always going to be more ways to improve it. In fact, the code you write today will probably look like crap to you a year from now. That's part of the learning process.</p>\n<p>Remember, code is dynamic. It's meant to change. So don't obsess about making it perfect. Just make it work, make it easy to understand, and realize you'll probably be changing it one day.</p>\n",
      "date_published": "2016-05-10T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/a-better-way-to-write-config-files-in-php/",
      "url": "https://www.abeautifulsite.net/posts/a-better-way-to-write-config-files-in-php/",
      "title": "A better way to write config files in PHP",
      "content_html": "<p>How many times have you seen something like this in a config file?</p>\n<pre><code class=\"language-php\">$db_host = 'localhost';\n$db_name = 'somedb';\n$db_user = 'someuser';\n$db_pass = 'somepass';\n</code></pre>\n<p>Then, of course, it gets included and the variables are referenced as globals:</p>\n<pre><code class=\"language-php\">include('config.php');\necho $db_host; // 'localhost'\n</code></pre>\n<h2 id=\"a-better-way\">A better way <a class=\"direct-link\" href=\"#a-better-way\">#</a></h2>\n<p>I'm not a fan of using global variables when they can be avoided, so here's an alternative that gives you much more flexibility with your config files.</p>\n<pre><code class=\"language-php\">return [\n  'host' =&gt; 'localhost',\n  'name' =&gt; 'somedb',\n  'user' =&gt; 'someuser',\n  'pass' =&gt; 'somepass'\n];\n</code></pre>\n<p>Simply returning the array allows you to include it into any variable you choose, which is much nicer than cluttering the global namespace with your config.</p>\n<pre><code class=\"language-php\">$database = include('config.php');\necho $database['host']; // 'localhost'\n</code></pre>\n<p>Of course, you can return any data you want with this approach — even a multidimensional array.</p>\n<pre><code class=\"language-php\">return [\n  'database' =&gt; [\n    'host' =&gt; 'localhost',\n    'name' =&gt; 'somedb',\n    'user' =&gt; 'someuser',\n    'pass' =&gt; 'somepass'\n  ],\n  'other-stuff' =&gt; ...\n];\n</code></pre>\n<p>This is by far my favorite way to write config files in PHP.</p>\n",
      "date_published": "2016-05-02T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/how-to-upgrade-or-downgrade-nodejs-using-npm/",
      "url": "https://www.abeautifulsite.net/posts/how-to-upgrade-or-downgrade-nodejs-using-npm/",
      "title": "How to upgrade or downgrade Node.js using npm",
      "content_html": "<p>Need to update your version of <a href=\"https://nodejs.org/\">Node.js</a>? Here's how you can upgrade or downgrade from the command line using npm.</p>\n<h2 id=\"upgrading-to-the-latest-stable-version\">Upgrading to the latest stable version <a class=\"direct-link\" href=\"#upgrading-to-the-latest-stable-version\">#</a></h2>\n<p>This will update you to the latest available stable version:</p>\n<pre><code class=\"language-bash\">sudo npm cache clean -f\nsudo npm install -g n\nsudo n stable\n</code></pre>\n<h2 id=\"upgrading-to-the-latest-lts-version\">Upgrading to the latest LTS version <a class=\"direct-link\" href=\"#upgrading-to-the-latest-lts-version\">#</a></h2>\n<p>Node also offers a <a href=\"https://github.com/nodejs/LTS/\">long-term support (LTS) version</a>. If you need that version (or any other), simply specify the version number you want:</p>\n<pre><code class=\"language-bash\">sudo npm cache clean -f\nsudo npm install -g n\nsudo n 4.4.2\n</code></pre>\n<h2 id=\"checking-your-node-version\">Checking your Node version <a class=\"direct-link\" href=\"#checking-your-node-version\">#</a></h2>\n<p>To see which version of Node is currently installed, simply run:</p>\n<pre><code class=\"language-bash\">node -v\n</code></pre>\n<p>The version number displayed is the one that's currently active on your machine.</p>\n",
      "date_published": "2016-04-05T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/adding-and-removing-virtual-hosts-on-ubuntu-1404/",
      "url": "https://www.abeautifulsite.net/posts/adding-and-removing-virtual-hosts-on-ubuntu-1404/",
      "title": "Adding and removing virtual hosts on Ubuntu 14.04",
      "content_html": "<p>Here's a cheat sheet for working with virtual hosts on an Ubuntu server. The instructions assume you're not logged in as the root user. Change <em><a href=\"http://example.com\">example.com</a></em> to your own domain/subdomain.</p>\n<h2 id=\"adding-a-virtual-host\">Adding a virtual host <a class=\"direct-link\" href=\"#adding-a-virtual-host\">#</a></h2>\n<p>Create the directory for your new site and grant permissions. If your user isn't part of the <code>www-data</code> group, you might want to adjust the second line:</p>\n<pre><code class=\"language-bash\">sudo mkdir -p /var/www/example.com/public\\_html\nsudo chown -R $USER:www-data /var/www/example.com/public\\_html\nsudo chmod -R 755 /var/www/example.com\n</code></pre>\n<p>Add an index page (optional):</p>\n<pre><code class=\"language-bash\">vim /var/www/example.com/public\\_html/index.php\n</code></pre>\n<p>Create the virtual host config file:</p>\n<pre><code class=\"language-bash\">sudo vim /etc/apache2/sites-available/example.com.conf\n</code></pre>\n<p>Here's a very basic example config file you can start with. Paste it in and adjust as necessary:</p>\n<pre><code>&lt;VirtualHost *:80&gt;\n  ServerAdmin admin@example.com\n  ServerName example.com\n  ServerAlias www.example.com\n\n  DocumentRoot /var/www/example.com/public\\_html\n  &lt;Directory /var/www/example.com/public\\_html&gt;\n    Options -Indexes\n    AllowOverride All\n    Order Allow,Deny\n    Allow from All\n  &lt;/Directory&gt;\n\n  ErrorLog ${APACHE\\_LOG\\_DIR}/error.log\n  CustomLog ${APACHE\\_LOG\\_DIR}/access.log combined\n&lt;/VirtualHost&gt;\n</code></pre>\n<p>Now enable the new virtual host and restart Apache:</p>\n<pre><code class=\"language-bash\">sudo a2ensite example.com.conf\nsudo service apache2 restart\n</code></pre>\n<p>If your DNS is already configured, your site should be available at <em><a href=\"http://example.com\">example.com</a></em>.</p>\n<h2 id=\"removing-a-virtual-host\">Removing a virtual host <a class=\"direct-link\" href=\"#removing-a-virtual-host\">#</a></h2>\n<p>First, disable the virtual host and restart Apache:</p>\n<pre><code class=\"language-bash\">sudo rm /etc/apache2/sites-available-example.com.conf\nsudo rm -Rf /var/www/example.com\n</code></pre>\n<p>At this point, the site is disabled and will no longer be accessible.</p>\n<p>Now just remove the config file and cleanup the <code>/var/www/</code> directory to permanently remove the site and all of its files:</p>\n<pre><code class=\"language-bash\">sudo rm /etc/apache2/sites-available/example.com.conf\nsudo rm -Rf /var/www/example.com\n</code></pre>\n",
      "date_published": "2016-03-29T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/lessons-from-a-failed-kickstarter/",
      "url": "https://www.abeautifulsite.net/posts/lessons-from-a-failed-kickstarter/",
      "title": "Lessons from a failed Kickstarter",
      "content_html": "<p>Last week, I launched Particle on Kickstarter. Today, I pulled the plug and canceled the campaign. We had 50 backers and were 5% funded. So why would I do this with 25 days left to go?</p>\n<p>The fact is, this campaign failed before it started, and it was all my fault. I became so consumed by building and running the Kickstarter that I lost my focus on the product I was creating. Here are some of the things I did wrong and why I terminated the campaign early.</p>\n<h2 id=\"not-building-a-following\">Not building a following <a class=\"direct-link\" href=\"#not-building-a-following\">#</a></h2>\n<p>The most important element to a successful crowdfunding campaign is reaching people. Not just anyone, but people interested in what you have to offer — potential backers. Before launching on Kickstarter, I was well aware that many campaigns spent months or even years building a following prior to launching.</p>\n<p>This was my fatal mistake. I thought I could bypass this requirement because I had a network of online properties geared towards web designers and developers (to the tune of 200,000 visitors a month). I went all in hoping to cross promote Particle to people who didn't know what the hell it was and people who weren't even looking for it.</p>\n<p>The results of this obviously weren't favorable. In hindsight, I would have been better off buying ad space on the back of milk cartons. Or maybe not...</p>\n<h2 id=\"relying-on-advertisements\">Relying on advertisements <a class=\"direct-link\" href=\"#relying-on-advertisements\">#</a></h2>\n<p>As a SaaS owner, I'm no stranger to buying banner ads to promote my services. When I realized my first plan of action wasn't performing very well, I figured I'd try a paid advertisement. I knew this was a bad idea, but surely people would see how great my unreleased Kickstarter product was in a 300x125 banner ad and start throwing dollar bills at it!</p>\n<p>Yeah, what was I thinking? It only took a couple days to confirm this mistake. Even with a million impressions that ad wouldn't have come close to paying for itself — and this was a highly targeted website too. Fortunately, I was able to switch it to point to my other service so it wasn't a complete waste of money.</p>\n<p>In short, if you rely on ads to drive traffic to your crowdfunding campaign, you're gonna have a bad time.</p>\n<h2 id=\"falling-for-kickstarter-spam\">Falling for kickstarter spam <a class=\"direct-link\" href=\"#falling-for-kickstarter-spam\">#</a></h2>\n<p>Something I didn't realize until after my campaign launched is that you'll receive a ton of spam through Kickstarter's messaging system. You'll get messages from people who seem legit, but obviously aren't when you look closely at their profile (hint: a signup date of today is a dead giveaway).</p>\n<p>People will offer to write and submit press releases for you, &quot;enhance your SEO,&quot; send out &quot;social media blasts,&quot; and more. They'll promise to boost your campaign's numbers and they'll boast about how successful their services have been with similar crowdfunding campaigns. One clever spammer even took the time to locate my email address and message me outside of Kickstarter's system. Nice try, dude!</p>\n<p>These offers may seem tempting, but most of them are scams — some more obvious than others. I only fell for one called BackerClub, which costs $379, but you only pay if you receive $379 or more from backers in their network. Sounds too good to be true, right? It is. Here's how they scam you.</p>\n<p>BackerClub pretends to be exclusive. You have to &quot;apply&quot; to be featured in their network. Soon after, you'll receive an email telling you that you've been accepted, but due to some bogus algorithm, they need $79 up front to make it worth their while to feature your campaign. If you're stupid enough to pay it, they'll send out a couple emails (probably just to you, who knows) that will drive pretty much zero traffic to your campaign.</p>\n<p>It's amazing how crowdfunding has spawned an entire ecosystem of scumbags who feed off creators that are trying to raise money for projects they've put so much heart and soul into. Trust me, no matter how desperate you are or how good it sounds, it's bullshit.</p>\n<h2 id=\"promoting-via-social-media\">Promoting via social media <a class=\"direct-link\" href=\"#promoting-via-social-media\">#</a></h2>\n<p>This goes hand in hand with not building a following, but I did have a little bit of success promoting Particle on Twitter. Obviously, your results will be better if you have a strong network established and you maintain proper etiquette.</p>\n<p>The problem with Twitter, however, is that you can't really reach out to people without spamming them. That's sort of the nature of their platform, but it's still freaking spam. Although some backers did originate from Twitter, the whole social media thing went south rather quickly.</p>\n<p>It starts with an innocent post that you pin to your profile. Then you reach out to a few people who follow you but you only sort of know. Then you try to insert yourself into relevant conversations with people you don't know. Then you use Advanced Search to look for derogatory things about your competitors and feed on peoples' frustrations by trying to save the day with — guess what — a fucking Kickstarter link asking them for money!</p>\n<p>You start crapping out links to your project with every tweet and your whole social media strategy turns into a total shitfest that you're embarrassed to look at the following day.</p>\n<p>Don't &quot;promote&quot; your campaign like I did. While I did recruit a handful of backers from Twitter, it wasn't worth the effort or the dent in my reputation. There's a right way and a wrong way to promote things on social media. That was the wrong way.</p>\n<h2 id=\"hoping-for-a-break\">Hoping for a break <a class=\"direct-link\" href=\"#hoping-for-a-break\">#</a></h2>\n<p>If your Plan B involves sending emails to everyone at TechCrunch, Mashable, and every other big name blog you can think of hoping to get picked up, don't fucking launch a crowdfunding campaign.</p>\n<p>I knew this from the start, but I figured I'd try anyway. I spent two days sending out personalized emails inviting journalists, bloggers, or whoever else I thought would be interested in a private, prerelease demo of Particle. Crickets.</p>\n<p>It's not that they don't give a shit about Particle, they just have a million emails a day flooding their inbox. You really have to stand out, and even that's probably not enough if you haven't actually launched your product yet.</p>\n<p>Honestly, who wants to write about a blogging platform that hasn't launched yet? Not TechCrunch or Mashable, that's for sure.</p>\n<h2 id=\"not-having-a-shill\">Not having a shill <a class=\"direct-link\" href=\"#not-having-a-shill\">#</a></h2>\n<p>Crowdfunding is a tough nut to crack if you're a new creator. It would have helped a lot to have the support of someone reputable openly supporting the project. In Particle's case, a well-known blogger, for example, could have helped spread the word and instill more confidence in potential backers.</p>\n<p><a href=\"https://www.kickstarter.com/projects/507726696/quantum-chess/description\">Quantum Chess</a> is a great example. They managed to get Paul Rudd to make a comedic video of him and Stephen Hawking playing the game, and that propelled them to exceed their funding goal by almost $3,000. Really, almost $33,000 for a digital chess game (that I'm also guilty of backing). You need a shill.</p>\n<h2 id=\"letting-it-consume-you\">Letting it consume you <a class=\"direct-link\" href=\"#letting-it-consume-you\">#</a></h2>\n<p>Those are all things I failed gloriously at in terms of promoting the campaign, but that's not the reason I pulled the plug. Even if Particle wouldn't have met its funding goal, it would have been fun to see just how much it would have reached.</p>\n<p>By far, what I hated most about running a crowdfunding campaign was how it completely consumed me. I knew it would be a lot of work, and I'm OK with a lot of work, but I wasn't aware of how it eats your soul, shits it out, and then eats it again.</p>\n<p>I spent a month and a half building Particle's campaign, obsessing over each and every little detail. I filmed the video twice, then bought a new camera and filmed it at least four more times trying to get it right. I rewrote the script countless times. I added closed captions to both videos. I spent hours looking for the right music, budgeting, planning out rewards, tweaking content, and crafting images to make Particle as sexy as possible on Kickstarter. I did everything except what I actually like to do, and I wasted a lot of time doing it.</p>\n<p>I remember looking at the launch button last Tuesday. After so much preparation, was it finally time? I knew I wasn't prepared well enough, but I couldn't afford delaying any longer. Or maybe I just couldn't stand being away from the code as long as I'd been. Maybe I was just fed up with staring at myself and watching screencasts of Particle for hours on end. That stupid music still plays in my head.</p>\n<p>With an audible &quot;fuck it,&quot; my finger clicked the launch button.</p>\n<p>That's when I should have realized I made the wrong decision. I didn't prepare well enough, but I was so ready to be done creating that stupid campaign that I just couldn't stand it any longer. I just wanted to get it over with.</p>\n<p>Particle launched when it shouldn't have launched. In fact, it probably never should have been on Kickstarter. I became too consumed by the magic and allure of crowdfunding that I completely lost my ability to think straight. Now, just five days into the live campaign I'm beginning to lose my mind. What has this circus act turned me into? This isn't me. This isn't Particle.</p>\n<h2 id=\"what's-next%3F\">What's next? <a class=\"direct-link\" href=\"#what's-next%3F\">#</a></h2>\n<p>I spent a year and a half building this software, so I'm obviously not giving up on it. Particle is a great product. In fact, I'm using it to write this very post on my iPad and it truly is the best blogging experience I've ever had. No bullshit. Inline editing is awesome!</p>\n<p>But I've realized that trying to jumpstart this project by crowdfunding isn't as appealing as it once was. Yes, the software is fully functional, but there are still things I'd like to improve before I send it off into the world. Having a big chunk of money isn't worth the added stress of deadlines to meet and backers (micro-investors?) to answer to. More importantly, wasting another month trying to get that chunk of money seems more and more ridiculous with each day I spend emailing Mashable and pissing people off on Twitter. Particle will be ready when it's ready, and that's how it should have been all along.</p>\n<p>I would still like to open source Particle and turn it into a sustainable business. On the other hand, I have a family to feed and a lot of time vested in this project. I can't afford to give away nearly two years of work with absolutely no way to monetize it. That would leave us with no food on the table and no money to continue working on Particle, which means we starve, the project fizzles out, and everyone loses.</p>\n<p>Particle needs a premium service or some alternative way to make it sustainable before it can be open sourced.</p>\n<h2 id=\"there's-a-light\">There's a light <a class=\"direct-link\" href=\"#there's-a-light\">#</a></h2>\n<p>I do have some great news: I've teamed up with a good friend who also happens to be one of the best developers I know. After studying Particle's code, he's decided to come onboard to help out with development. This will definitely help speed things up! We'll be taking some time this week to discuss the best approach for releasing Particle, be it open source, SaaS, or a combination of both. Anything is game at this point. Except fucking crowdfunding.</p>\n<p>For those of you who backed Particle, please get in touch with me on Twitter or email (cory at this domain) — I have some stickers for you. For everyone else, you can either follow Particle on Twitter or signup for the mailing list to stay up to date.</p>\n<p>Even though Particle wasn't a good fit for Kickstarter, we're still going to bring inline editing to blogging. It's coming. It's just a matter of time now.</p>\n<p>— Go forth and create!</p>\n<p>Update: Particle has been renamed to Postleaf and is now available at <a href=\"http://postleaf.org\">postleaf.org</a>.</p>\n",
      "date_published": "2016-03-28T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/democratizing-publishing/",
      "url": "https://www.abeautifulsite.net/posts/democratizing-publishing/",
      "title": "Democratizing publishing",
      "content_html": "<p>One of the objectives Matt Mullenweg has for WordPress is to <a href=\"http://www.inc.com/glenn-leibowitz/meet-the-ceo-running-a-billion-dollar-company-with-no-offices-or-email.html\">democratize publishing</a>, which is excellent. But the very same article states another objective is to &quot;capture the 75 percent of the internet that WordPress doesn't already manage.&quot;</p>\n<p>In my opinion, these goals conflict with each other. If Matt truly wanted to democratize publishing, he wouldn't be trying to monopolize it. That's how you destroy a democracy, not create one.</p>\n<p>Of course, WordPress will never truly have 100% of the Internet, but the thought of closing in on that goal is very frightening. I've been a developer long enough to remember all too well how <a href=\"http://mashable.com/2009/07/16/ie6-must-die/\">Internet Explorer 6 stifled innovation for many years</a>.</p>\n<p><img src=\"/images/breaking-bad-frightened.gif\" alt=\"Walter White Frightened\"></p>\n<p>The same will happen as WordPress closes in on their goal, and that's exactly why we need more open source options like <a href=\"https://ghost.org/\">Ghost</a>.</p>\n<p>Some words of wisdom from Nancy Pearcey:</p>\n<blockquote>\n<p>Competition is always a good thing. It forces us to do our best. A monopoly renders people complacent and satisfied with mediocrity.</p>\n</blockquote>\n<p>Now, go forth and create!</p>\n",
      "date_published": "2016-03-28T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/animated-css-hamburger-icons/",
      "url": "https://www.abeautifulsite.net/posts/animated-css-hamburger-icons/",
      "title": "Animated CSS hamburger icons",
      "content_html": "<p>If you need some tasty CSS hamburger icons that animate in fantastic ways, here you go.</p>\n<p><a href=\"https://jonsuh.com/hamburgers/\">Hamburgers</a> is an MIT-licensed CSS library that gives you over a dozen beautifully animated navicons for use in your own projects. Also includes the Sass source so you can customize and compile it yourself.</p>\n<p>This is a beautiful little library!</p>\n",
      "date_published": "2016-03-07T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/flush-dns-cache-on-os-x/",
      "url": "https://www.abeautifulsite.net/posts/flush-dns-cache-on-os-x/",
      "title": "Flushing DNS cache on macOS",
      "content_html": "<p>Here's the best way to flush DNS cache on macOS:</p>\n<pre><code class=\"language-bash\">sudo dscacheutil -flushcache; sudo killall -HUP mDNSResponder; say cache flushed\n</code></pre>\n<p>Notice that last part — that's why this is the best method. You get an audible &quot;cache flushed&quot; almost instantaneously, and the whole process becomes that much more satisfying.</p>\n<p>Another fun variation:</p>\n<pre><code class=\"language-bash\">sudo dscacheutil -flushcache; sudo killall -HUP mDNSResponder; say booyah!\n</code></pre>\n<p>Have at it. It may be silly, but it's the little things in life. Now, go flush that DNS!</p>\n",
      "date_published": "2016-03-02T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/a-clean-fade-in-effect-for-webpages/",
      "url": "https://www.abeautifulsite.net/posts/a-clean-fade-in-effect-for-webpages/",
      "title": "A clean fade-in effect for webpages",
      "content_html": "<p>Here's a nice way to fade your pages in using CSS and a bit of JavaScript. The solution is clean and smooth, with no flickering on load. If JavaScript is disabled, the page will still load but the fade effect will not occur.</p>\n<h2 id=\"how-it-works\">How it works <a class=\"direct-link\" href=\"#how-it-works\">#</a></h2>\n<p>This trick works by adding the <code>fade-out</code> class to your <code>body</code> with a script, then removing it when the page is done loading. The fade effect is handled completely with CSS. We're only using JavaScript to add/remove the class, which will ensure the page still displays if scripts are disabled.</p>\n<h2 id=\"the-css\">The CSS <a class=\"direct-link\" href=\"#the-css\">#</a></h2>\n<p>We start with two very simple styles for the body:</p>\n<pre><code class=\"language-css\">body {\n  opacity: 1;\n  transition: 1s opacity;\n}\n\nbody.fade-out {\n  opacity: 0;\n  transition: none;\n}\n</code></pre>\n<h2 id=\"the-javascript\">The JavaScript <a class=\"direct-link\" href=\"#the-javascript\">#</a></h2>\n<p>Now we need to add the <code>fade-out</code> class to the body as soon as the page loads. We can do this with an inline script right after the opening <code>&lt;body&gt;</code> tag:</p>\n<pre><code class=\"language-html\">&lt;script&gt;\n  document.body.classList.add('fade-out');\n&lt;/script&gt;\n</code></pre>\n<p>The inline script is necessary (as opposed to a script loaded from a separate file) to prevent flickering, as the body would otherwise be briefly visible until the extra script is downloaded by the browser.</p>\n<p>Now we just need to remove the <code>fade-out</code> class from the body once the page is loaded.</p>\n<pre><code class=\"language-js\">window.addEventListener('DOMContentLoaded', () =&gt; {\n  document.body.classList.remove('fade-out');\n});\n</code></pre>\n<h2 id=\"changing-the-fade-color\">Changing the fade color <a class=\"direct-link\" href=\"#changing-the-fade-color\">#</a></h2>\n<p>By default, the user will see a blank white screen until the page fades in. This is customizable through the <code>html</code> selector:</p>\n<pre><code class=\"language-css\">html {\n  background-color: black;\n}\n</code></pre>\n<h2 id=\"tips\">Tips <a class=\"direct-link\" href=\"#tips\">#</a></h2>\n<p>Don't get too carried away with this. It's a useful effect for loading something like a homepage, but it can quickly get annoying if you apply it to every page. Keep it subtle. Users shouldn't actually notice it—it should simply be a pleasant part of their experience.</p>\n<p>This is a really helpful trick if you need to wait for an image or video to load. However, in that case you'll probably want to add a loader. To achieve this, simply add a wrapper element around everything except the loader and apply the <code>fade-out</code> class to that instead of the body.</p>\n",
      "date_published": "2015-09-23T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/how-to-remove-box-shadows-from-input-controls-on-ios/",
      "url": "https://www.abeautifulsite.net/posts/how-to-remove-box-shadows-from-input-controls-on-ios/",
      "title": "How to remove box shadows from input controls on iOS",
      "content_html": "<p>Those default box shadows that appear inside of your input elements on iOS can be pretty annoying, especially if you're going for a flat or subtle look. Here's how to remove them.</p>\n<p>Unfortunately, it's not as simple as setting the <code>box-shadow</code> property to <code>none</code>. Instead, you have to alter the <code>-webkit-appearance</code> property:</p>\n<pre><code class=\"language-css\">input[type=text],\ninput[type=email],\ninput[type=password],\ntextarea {\n  -webkit-appearance: none;\n}\n</code></pre>\n<p>That gets rid of the shadow but, for best results, you'll probably want to set your own border, background, and — perhaps ironically — your own box shadow.</p>\n",
      "date_published": "2015-09-16T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/passing-data-from-php-to-javascript/",
      "url": "https://www.abeautifulsite.net/posts/passing-data-from-php-to-javascript/",
      "title": "Passing data from PHP to JavaScript",
      "content_html": "<p>Have you ever needed to send a PHP variable, array, or object to JavaScript? It can get complicated trying to escape the output properly. Here's a way that always works—no escaping necessary.</p>\n<p>Let's say we have the following variable in PHP:</p>\n<pre><code class=\"language-php\">$name = 'Bob Marley';\n</code></pre>\n<p>And we want to pass it to a JavaScript variable called <code>name</code>. Here's the trick:</p>\n<pre><code class=\"language-php\">echo '&lt;script&gt;';\necho 'var name = ' . json_encode($name) . ';';\necho '&lt;/script&gt;';\n</code></pre>\n<p>Using <code>json_encode()</code>, you'll always get a properly formatted JavaScript object.</p>\n<p>The same trick can be applied to other data types (e.g. integers, arrays, objects, etc.). The following passes an entire array from PHP to JavaScript:</p>\n<pre><code class=\"language-php\">$shirt = array(\n  'color' =&gt; 'blue',\n  'number' =&gt; 23,\n  'size' =&gt; 'XL'\n);\n\necho '&lt;script&gt;';\necho 'var shirt = ' . json_encode($shirt) . ';';\necho '&lt;/script&gt;';\n</code></pre>\n<p>The output looks like this:</p>\n<pre><code class=\"language-html\">&lt;script&gt;var shirt = {&quot;color&quot;:&quot;blue&quot;,&quot;number&quot;:23,&quot;size&quot;:&quot;XL&quot;}&lt;/script&gt;\n</code></pre>\n<p>Don't want it all on one line? Try this instead:</p>\n<pre><code class=\"language-php\">echo &quot;&lt;script&gt;\\n&quot;;\necho 'var shirt = ' . json_encode($shirt, JSON_PRETTY_PRINT) . ';';\necho &quot;\\n&lt;/script&gt;&quot;;\n</code></pre>\n<p>The output is a bit easier to read:</p>\n<pre><code class=\"language-html\">&lt;script&gt;\nvar shirt = {\n  &quot;color&quot;: &quot;blue&quot;,\n  &quot;number&quot;: 1000,\n  &quot;size&quot;: &quot;XL&quot;\n};\n&lt;/script&gt;\n</code></pre>\n<p>A simple trick, but nevertheless useful.</p>\n",
      "date_published": "2015-03-05T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/the-html5-download-attribute/",
      "url": "https://www.abeautifulsite.net/posts/the-html5-download-attribute/",
      "title": "The HTML5 download attribute",
      "content_html": "<p>Years ago I showed you how to <a href=\"/posts/forcing-file-downloads-in-php\">force a file to download with PHP</a>. Now with HTML5, you [almost] don't have to do that anymore.</p>\n<p>The HTML5 <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#Attributes\">download attribute</a> is intended to tell the browser that a certain link should force a certain file to download, optionally with a certain name that might be different than that on the server. Here's what it looks like:</p>\n<pre><code class=\"language-html\">&lt;a href=&quot;/path/to/file.txt&quot; download=&quot;any-name-you-want.txt&quot;&gt;Download&lt;/a&gt;\n</code></pre>\n<p>This will tell your browser to download <code>file.txt</code> and prefill the name to <code>any-name-you-want.txt</code>. No fancy server-side code required. As Mozilla notes, you can also use this technique with data URLs.</p>\n<p>Now, of course, the caveat. <a href=\"http://caniuse.com/#feat=download\">Internet Explorer doesn't support it</a>, and creating a polyfill <a href=\"http://stackoverflow.com/questions/18652750/any-fallback-client-side-solutions-for-the-html5-download-attribute\">isn't really possible</a>. Although you could probably use a combination of feature detection and a proxy server to force the download, but that's really more effort than it's worth.</p>\n",
      "date_published": "2015-02-19T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/get-comfortable-with-abstraction/",
      "url": "https://www.abeautifulsite.net/posts/get-comfortable-with-abstraction/",
      "title": "Get comfortable with abstraction",
      "content_html": "<p>I stumbled across <a href=\"https://twitter.com/ossia/status/565907210497040384/photo/1\">a tweet</a> the other day and it's been resonating in my mind ever since. Mostly because it's something I tend to have a problem with.</p>\n<p>You see, I have this thing where I try really hard to understand exactly how something works—all the way down to the last nut and bolt. Deep down I know that those details are usually irrelevant. But it bothers me to know there are things that I don't know.</p>\n<p>I have a problem with abstraction.</p>\n<p><img src=\"/images/abstraction-comic.png\" alt=\"A comic strip about a person describing something while another person asks question after question\"></p>\n<p>So I'm posting this comic as a reminder for myself to look beyond the details and focus on the big picture. Maybe you'll enjoy reading it too.</p>\n<p><em>Comic courtesy of <a href=\"http://abstrusegoose.com/98\">Abtruse Goose</a></em></p>\n",
      "date_published": "2015-02-18T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/thoughts-on-being-a-good-manager/",
      "url": "https://www.abeautifulsite.net/posts/thoughts-on-being-a-good-manager/",
      "title": "Thoughts on being a good manager",
      "content_html": "<p>Some thoughts I had after conversations with a friend who has a terrible manager. This isn't nearly a comprehensive list, but it highlights many of the problems they were experiencing. Maybe my friend's manager will stumble upon it some day.</p>\n<p><strong>When someone has a grievance, take an objective stance.</strong> Listen to them, understand what they're trying to tell you, and react accordingly. Don’t deny issues that really are issues, and don’t ignore them in hopes that the problems just go away. They won’t. They’ll just snowball into bigger issues.</p>\n<p><strong>You’re the manager.</strong> You’re in charge of making sure the organization is running smoothly. If an employee is faltering, it’s your job to step in and help get things back up to speed. Don’t expect everyone else to pick up the slack—they have a lot of work to do too. As a manager, you’ll gain a lot of respect for getting “down in the trenches” when the team really needs you.</p>\n<p><strong>Discipline employees when they need to be disciplined.</strong> Have a plan in place and follow it for everyone. No exceptions, otherwise you risk enabling abusers.</p>\n<p><strong>Don’t be afraid of confrontation.</strong> This is a sign of weakness, and cunning employees will take advantage of it time after time. When the moment comes, stand your ground, explain the problem clearly, and be prepared to offer a solution.</p>\n<p><strong>Realize when something is out of an employee’s control</strong> (e.g. bereavement leave) versus under an employee’s control (e.g. personal appointments). In case of the latter, insist they try to make time for it outside of their normal work schedule. If that’s not possible, require them to make up missed time before work, after work, or during lunch. This compromise asserts the employee’s value to the organization and will significantly reduce absenteeism.</p>\n<p>Nobody deserves preferential treatment, no matter who they are or what their situation is. Business is business, and if someone has committed to a position, they should honor that commitment or step down until they have the time and energy to resume their obligations.</p>\n<p><strong>When you hire someone and train them for a position, let them do their job.</strong> Correct them when mistakes are made, but if the job is being done correctly and with reasonable efficiency, don’t keep stepping in to micromanage them. This is frustrating for employees, and it’s also a trait of poor management skills.</p>\n<p><strong>Treat your employees like an investment:</strong> pay them well and they will perform well. Don’t tell them that the organization doesn’t have enough money to provide raises—most employees are smarter than that. Give them what they’re worth and set goals for them to earn more. This will motivate them, reduce turnover, and show compassion. Your employees will remember that and will be more apt to stick around and do great work.</p>\n<p><strong>A workplace is like a team:</strong> you have a group of people working together to achieve a common goal. Each player in a team has a specific purpose. When one of those players is underperforming or absent, the rest of the team has to make up for it. When this happens on a regular basis, morale suffers and players become disgruntled—some may even choose to quit. As the “team captain”, this is your fault—not theirs. Don’t let other players adversely affect the rest of the team. It’s your job to step in and keep everything in line.</p>\n<p><strong>Know when to let someone go.</strong> It's always better for the organization and the employee to try to work things out. Alas, the time will come when an employee is no longer a good fit for their position and you need to be OK with letting them go. It's not the end of the world. In many cases the employee will find a new job that suits them even better. If nothing else, being let go is an eye opener that can actually help them become a better employee at their next job.</p>\n<p><strong>At the end of the day, you're the manager.</strong> How your organization operates is a reflection of you. So here's something to keep in mind. It's a quote from Napoleon that I hope will resonate in your thoughts for the rest of your management career: &quot;An army of lions commanded by a deer will never be an army of lions.&quot;</p>\n",
      "date_published": "2015-02-09T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/i-should-have-been-asking-my-users-this-from-the-start/",
      "url": "https://www.abeautifulsite.net/posts/i-should-have-been-asking-my-users-this-from-the-start/",
      "title": "I should have been asking my users this from the start",
      "content_html": "<p>Feedback is critical to an app's success. How will you know what to fix or improve on if your users don't tell you? It seems obvious, but here is something I should have been asking my users from the start.</p>\n<h2 id=\"getting-the-right-feedback-is-critical\">Getting the right feedback is critical <a class=\"direct-link\" href=\"#getting-the-right-feedback-is-critical\">#</a></h2>\n<p>When someone signs up for my service, they get a nice welcome message that thanks them for signing up and shows them how to login. Inside that message, there's also a line that reads something like this:</p>\n<blockquote>\n<p>If you have any questions or suggestions, hit <em>reply</em> and let us know!</p>\n</blockquote>\n<p>This lets people know that we're open to suggestions (which should be a given for a SaaS app), but it really doesn't produce a lot of useful feedback. I think people are desensitized by lines like that, but the message feels a lot less friendly without it.</p>\n<p>I also send follow up emails after a couple days. I'm not trying to sell them something at this point—I'm trying to see if they're having trouble with the app or if they have any questions or feedback for me. This tends to yield a better response, especially when I ask about the user's business and what they expect from my service.</p>\n<p>However, the single most important piece of feedback is something that I didn't start collecting until a few days ago.</p>\n<h2 id=\"a-simple-oversight\">A simple oversight <a class=\"direct-link\" href=\"#a-simple-oversight\">#</a></h2>\n<p>In my app, users can cancel their subscription or delete their account on their own—no need to email in a request. I do this because:</p>\n<ul>\n<li>I don't believe in retention via guilt (i.e. begging users to give it another try)</li>\n<li>It's more convenient for them</li>\n<li>It's less to manage for me</li>\n</ul>\n<p>But what I was missing out on is the feedback that comes from when a user decides to cancel or delete his account. This is very, very important for a SaaS company. How in the world was I not collecting this data?</p>\n<p>The truth is I was trying, but I was going about it all wrong. For awhile now, whenever somebody canceled or deleted their account, the app would send me an email so I could follow up with them to find out why. I thought this would be more personal, as every message I typed was by hand. I almost never got responses to those emails.</p>\n<p>Looking back, that's probably because those users had already disconnected from the service. By the time they received my email, they had already moved on and didn't want to waste anymore of their time on it. It was simply too little, too late.</p>\n<h1 id=\"a-better-way-to-ask-users\">A better way to ask users <a class=\"direct-link\" href=\"#a-better-way-to-ask-users\">#</a></h1>\n<p>It became obvious that I needed to find a better way to ask users for their feedback <em>before</em> they canceled their accounts. So I recently took some time and added a simple text field to the cancel/delete screens. Not a dropdown menu, not radio buttons—just a simple textbox where they can leave one word or 1,000 words. By reaching out to users who are in the process of canceling, I've found that they're much more likely to voice their reasons.</p>\n<p>Since I've made that simple change, I went from almost zero feedback to <em>all but one user</em> telling me why they decided to cancel. (For what it's worth, the person who didn't leave a reason had only signed up a few minutes prior to canceling the account—probably just a window shopper.)</p>\n<p>Even though it's only been a few days, I've learned a lot about why users decide to cancel their accounts. It gives me a better understanding of how they work, how they think, and what they expect, and it gives them a chance to have their voices heard.</p>\n<p>What I found was a better way to ask my users for feedback. It's so ridiculously simple. I just wish I'd thought to do it years ago.</p>\n",
      "date_published": "2015-01-20T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/why-developers-hate-being-interrupted/",
      "url": "https://www.abeautifulsite.net/posts/why-developers-hate-being-interrupted/",
      "title": "Why developers hate being interrupted",
      "content_html": "<p>I stumbled across a post today (that unfortunately no longer exists) and I was almost convinced that I had written it myself. Many of the points in it hit home, so I hope it helps people better understand how developers think and what they go through when interruptions arise.</p>\n<p>One point talks about how much headwork programming requires:</p>\n<blockquote>\n<p>A huge amount of what a developer is doing is in their head. As we write code we need to keep a mental model of how parts of the application that have already been written and are yet to be written interact with the part that we are writing at that moment. We need to have a solid picture of exactly how the code is working as a whole and maintain that picture. It’s not easy, it requires a lot of concentration and has to remain in place while we think of creative and efficient ways to solve the problem at hand.</p>\n</blockquote>\n<p>Another explains why developers are actually the most productive when they seem unproductive:</p>\n<blockquote>\n<p>Developers can appear very unproductive at times, sitting staring at the screen with our headphones on and very little in the way of keyboard clackety-tap. This however is when we are doing our thinking, when we are building up, adding to and rearranging the mental model of how our code will work. This is the biggest and hardest part of development.</p>\n</blockquote>\n<p>It's so true. Breaking a developer's concentration can be devastating to their productivity.</p>\n",
      "date_published": "2015-01-08T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/social-sharing-buttons-are-ineffective/",
      "url": "https://www.abeautifulsite.net/posts/social-sharing-buttons-are-ineffective/",
      "title": "Social sharing buttons are ineffective",
      "content_html": "<p>Back in 2012, I wrote an article called <a href=\"http://www.abeautifulsite.net/down-with-the-share-widget/\">Down with the &quot;Share&quot; Widget.</a> In it, I talked about why plastering social sharing buttons all over your website is completely ineffective. This morning, Smashing Magazine all but confirmed my theory.</p>\n<p>In today's <a href=\"http://www.smashingmagazine.com/smashing-newsletter-issue-127/\">Smashing Newsletter</a>, they wrote:</p>\n<blockquote>\n<p>Are social sharing buttons really that effective to be placed in the most visible areas of websites, sometimes even as <a href=\"https://twitter.com/smashingmag/status/544446915493261312\">“sticky&quot; notes</a> on the left or on the right side of the page? Are there any case studies which provide proof that these social icons are actually effective? Or are they indeed <a href=\"https://twitter.com/smashingmag/status/544446915493261312\">ineffective</a>, <a href=\"http://smashingmagazine.us1.list-manage1.com/track/click?u=16b832d9ad4b28edf261f34df&amp;id=9bc67d4ace&amp;e=52f5f3af5b\">barely used</a> and really just <a href=\"http://smashingmagazine.us1.list-manage.com/track/click?u=16b832d9ad4b28edf261f34df&amp;id=8dbd2681d4&amp;e=52f5f3af5b\">annoying</a>?</p>\n</blockquote>\n<p>While their stance isn't conclusive, the fact that they even raised the question says quite a bit. Are people are finally becoming desensitized to all the Facebook and Twitter logos everywhere? Maybe now that social media is commonplace, we can all get back to writing better content instead of designing trendy new share widgets.</p>\n",
      "date_published": "2014-12-16T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/how-to-use-currentcolor-in-your-stylesheet/",
      "url": "https://www.abeautifulsite.net/posts/how-to-use-currentcolor-in-your-stylesheet/",
      "title": "How to use currentColor in your stylesheet",
      "content_html": "<p>I've had my head buried so deep in code that I hadn't even noticed this existed. It's a simple way to reference the current text color when writing CSS. Works in modern browsers, including IE9+.</p>\n<p>If you use Less or Sass then you probably already use something like <code>@text-color</code>. Alas, CSS doesn't have variables yet, but <code>currentColor</code> will come in handy if you're tired of repeating the same hex codes over and over again. Here's how it works:</p>\n<pre><code class=\"language-css\">div {\n  color: #00f;\n  border: solid 2px currentColor;\n}\n</code></pre>\n<p>That will produce a <code>&lt;div&gt;</code> with blue text and a matching blue border around it. If you need to change it later on, you only need to change it in one place.</p>\n<p>Of course, you can use currentColor for other properties too. Box shadows, background colors—pretty much anything. You can even use <code>currentColor</code> with pseudo elements:</p>\n<pre><code class=\"language-css\">div {\n  color: #00f;\n}\n\ndiv::after {\n  /*\n     Styles for CSS triangles or anything else \n     you'd use a pseudo element for go here\n  */\n  border-color: currentColor;\n}\n</code></pre>\n<p>The resulting <code>border-color</code> will be taken from the <code>&lt;div&gt;</code>, which in this case is <code>#00f</code>.</p>\n",
      "date_published": "2014-12-04T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/i-switched-from-tabs-to-spaces-and-havent-looked-back/",
      "url": "https://www.abeautifulsite.net/posts/i-switched-from-tabs-to-spaces-and-havent-looked-back/",
      "title": "I switched from tabs to spaces and haven&#39;t looked back",
      "content_html": "<p>Last week I started using spaces to indent code instead of tabs. It's something I swore I would never do, but I'm glad I finally did.</p>\n<h2 id=\"why-i-always-preferred-tabs\">Why I always preferred tabs <a class=\"direct-link\" href=\"#why-i-always-preferred-tabs\">#</a></h2>\n<p>Tabs are sensible. They were made to indent things, and code needs to be indented, so it was a good relationship. Probably the two most well-known arguments for using tabs are:</p>\n<ul>\n<li>Tabs reduce file size (although this is negligible and I would never argue based on this point)</li>\n<li>Tabs allow each developers to choose their own indentation level without changing the actual file (this was always my biggest reason, and I think most pro-tab people agree)</li>\n</ul>\n<p>Of course, there are more arguments (and plenty for spaces too), but here's why <em>I've</em> switched.</p>\n<h2 id=\"soft-tabs-make-it-seamless\">Soft tabs make it seamless <a class=\"direct-link\" href=\"#soft-tabs-make-it-seamless\">#</a></h2>\n<p>Most editors support soft tabs, which means you can still use the tab key to indent/outdent and never even notice the difference. Sublime Text 3 is my editor of choice, and it does a superb job of this. It also has some built in tools for converting between tabs and spaces, reindenting, etc. That made it a lot easier for me to switch and update existing files.</p>\n<p>And when I &quot;seamless&quot;, it really has been. I've been a stubborn tab guy for like a decade. My workflow hasn't changed, the keystrokes I use are identical, the code looks the same, and the universe hasn't imploded yet. That's a good sign for my first week.</p>\n<h2 id=\"indentation-is-always-consistent\">Indentation is always consistent <a class=\"direct-link\" href=\"#indentation-is-always-consistent\">#</a></h2>\n<p>One thing that always drove me crazy about using tabs was the way HTML looks when you view the source. Most browsers render tabs the equivalent of eight or more spaces long. Why they do this, I'll never know. But I do know that I don't have to worry about that anymore. +1 for spaces.</p>\n<p>There are other places where indentation varies. In fact, the biggest pro-tab argument ends up being an argument <em>against</em> tabs when you don't have control over how deep indentations go.</p>\n<h2 id=\"everyone-uses-them-now\">Everyone uses them now <a class=\"direct-link\" href=\"#everyone-uses-them-now\">#</a></h2>\n<p><a href=\"http://getbootstrap.com/\">Bootstrap</a> is massively popular, and for a good reason. It cuts out the fat and gives you something tried and tested to develop with. It's a solid framework, and the conventions they use make really good sense.</p>\n<p>So when Mark Otto (probably best known as <a href=\"https://twitter.com/mdo\">@mdo</a>) released his <a href=\"http://codeguide.co/\">code guide</a>, it of course suggested we use soft tabs (spaces). Another hard blow to tab lovers.</p>\n<p>Here's the thing—I normally wouldn't sway and I'd keep doing my own thing code rogue style, but what's the point? If you've ever been on GitHub, it's clear that most developers are using spaces now. As tab lovers, we're pissing into the wind.</p>\n<p>So last week I decided to try out spaces while building <a href=\"http://www.particle.software/\">Particle</a>. I converted all files from tabs to spaces in less than five minutes and just went with it. And I actually liked it. A lot.</p>\n<h2 id=\"my-code-fits-in-now\">My code fits in now <a class=\"direct-link\" href=\"#my-code-fits-in-now\">#</a></h2>\n<p>It's refreshing to know that my code fits in better with other people's code now. I don't have to worry about what other developers and projects are using, because most of them are using spaces anyway. I also don't have to worry about contributing to a project and accidentally sending commits with a mix of tabs and spaces.</p>\n<p>Call it peer pressure. Call it giving up on my beloved tabs. I really don't care anymore. At the end of the day, I looked past an old habit and, for whatever reason, I decided to try something new.</p>\n<p>I switched from tabs to spaces and haven't looked back.</p>\n",
      "date_published": "2014-11-25T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/css-shapes-are-here/",
      "url": "https://www.abeautifulsite.net/posts/css-shapes-are-here/",
      "title": "CSS shapes are here",
      "content_html": "<p>Here's something exciting from the CSS world: shapes!</p>\n<p>Ok, it may not sound all that exciting, but you haven't had a chance to see what can actually be done with CSS shapes yet. (Hint: check out the featured image above.)</p>\n<p>Razvan Caliman <a href=\"http://www.html5rocks.com/en/tutorials/shapes/getting-started/\">explains it</a> like this:</p>\n<blockquote>\n<p>For a long time, web designers have been forced to create within the constraints of the rectangle. Most content on the web is still trapped in simple boxes because most creative ventures into non-rectangular layout end in frustration.</p>\n</blockquote>\n<p>It's true. We didn't even get &quot;circles&quot; until <code>border-radius</code> came around, and even then you'd have to expect IE8 and below to fallback to a square. We've been confined to boxes for a long time.</p>\n<p>So how are things changing? <a href=\"http://www.html5rocks.com/en/tutorials/shapes/getting-started/\">See for yourself</a> over at HTML5 Rocks. It's the best intro to CSS shapes I've seen so far.</p>\n",
      "date_published": "2014-10-16T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/css-reset-with-box-sizing-fix/",
      "url": "https://www.abeautifulsite.net/posts/css-reset-with-box-sizing-fix/",
      "title": "CSS reset with box-sizing fix",
      "content_html": "<p>For ultra lightweight projects where a framework is overkill, I tend to use <a href=\"http://meyerweb.com/eric/tools/css/reset/\">Eric Meyers' CSS reset</a>. And since I'm not a glutton for punishment, I also throw in the tried and tested <a href=\"http://www.paulirish.com/2012/box-sizing-border-box-ftw/\">box-sizing fix</a> popularized by Paul Irish. Instead of searching for and combining these snippets every time I need them, here's a paste-ready version for convenience.</p>\n<pre><code class=\"language-css\">/* CSS reset with box-sizing fix */\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed,\nfigure, figcaption, footer, header, hgroup,\nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n margin: 0;\n padding: 0;\n border: 0;\n font-size: 100%;\n font: inherit;\n vertical-align: baseline;\n}\narticle, aside, details, figcaption, figure,\nfooter, header, hgroup, menu, nav, section {\n display: block;\n}\nhtml {\n box-sizing: border-box;\n}\n*, *:before, *:after {\n box-sizing: inherit;\n}\nbody {\n line-height: 1;\n}\nol, ul {\n list-style: none;\n}\nblockquote, q {\n quotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n content: '';\n content: none;\n}\ntable {\n border-collapse: collapse;\n border-spacing: 0;\n}\n</code></pre>\n<p>No attribution necessary, as this code is considered public domain. Just copy and paste it into your new stylesheet and start designing!</p>\n",
      "date_published": "2014-10-14T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/what-can-you-do-with-a-single-div/",
      "url": "https://www.abeautifulsite.net/posts/what-can-you-do-with-a-single-div/",
      "title": "What can you do with a single &lt;div&gt;?",
      "content_html": "<p>If I told you to make something using only CSS and a single <code>&lt;div&gt;</code>, would you be able to create something incredible?</p>\n<p>That's exactly what <a href=\"https://twitter.com/lynnandtonic\">Lynn Fisher</a> has been doing with <a href=\"http://a.singlediv.com/\">A Single Div</a>. Using only a single HTML element and some CSS, she's created some shockingly complex artwork ranging from Super Mario mushrooms to the iPhone's charging indicator. There's also a Bloody Mary, a breakfast plate, a crayon, a digital camera, and more.</p>\n<p>It's great inspiration and a heck of an argument against superfluous markup. <a href=\"http://a.singlediv.com/\">Check it out</a> and let me know if you think you can create something similar using only a single <code>&lt;div&gt;</code>.</p>\n",
      "date_published": "2014-09-05T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/is-your-product-the-reason-your-startup-is-failing/",
      "url": "https://www.abeautifulsite.net/posts/is-your-product-the-reason-your-startup-is-failing/",
      "title": "Is your product the reason your startup is failing?",
      "content_html": "<p>The idea of launching a product, running your own business, and being your own boss is very appealing. Perhaps that's why so many people risk doing it. The problem is, many of them don't succeed.</p>\n<p>There are hundreds of reasons a startup can fail, but let's focus on one for a minute: your product. Just because you think your product is great, doesn't mean the rest of the world does. Before jumping into anything too serious, ask yourself these questions to determine whether or not your product will fail before it even launches.</p>\n<h2 id=\"is-it-something-people-want%3F\">Is it something people want? <a class=\"direct-link\" href=\"#is-it-something-people-want%3F\">#</a></h2>\n<p>Before you start building, you need to figure out if your product is viable. Is it something that you want to build, or is it something that people want to buy? It's easy to get excited over an idea only to realize later on that nobody actually has a need for what you're making.</p>\n<p>So how can you tell if a product is viable? It's not easy, but you can feel it out by asking potential customers what they think of your idea, if they'd use it, what they'd pay for it, etc. You'd be surprised at how honest most people will be with you.</p>\n<h2 id=\"has-it-been-done-before%3F\">Has it been done before? <a class=\"direct-link\" href=\"#has-it-been-done-before%3F\">#</a></h2>\n<p>Pick a problem and it's probably been solved already. At least, that's what it seems like these days. Seriously, you want a social network for your cat? You got it. How about an app that does nothing more than text your friends the word &quot;yo&quot;? Ditto.</p>\n<p>But you may not be completely out of luck. If you're trying to do something that's already been done, it may still be possible. You'll just have to work a bit harder at it and do it better. The most well-known example of this is probably Facebook. Everyone was using MySpace when Facebook came along and, against all odds, practically destroyed them.</p>\n<p>It's not impossible to successfully do what's already been done, but you'll need to study your competition. Find their weak spots and beat them at their own game. Do what they're doing (or what they're not doing), but do it better. That's how a second-to-market product will have a shot at winning.</p>\n<h2 id=\"is-it-economical%3F\">Is it economical? <a class=\"direct-link\" href=\"#is-it-economical%3F\">#</a></h2>\n<p>Your product must be cost effective so you don't drown in the debt of producing or maintaining it, but it also needs to be cheap enough so your users can afford it. The only reason every other car on the road isn't a <a href=\"http://www.teslamotors.com/\">Tesla</a> right now is because of their higher-than-average price. (Why do you think they're <a href=\"http://www.forbes.com/sites/gregorymcneal/2014/07/16/a-35000-tesla-model-iii-is-coming-in-2017/\">trying so hard</a> to get the cost down?)</p>\n<p>This isn't an easy task either, but overpricing your product can be detrimental to your startup. Again, ask your users what they're willing to pay and see if it aligns with what your costs are and what you're comfortable with the business making. How many people need to buy or subscribe to make it sustainable? Are those numbers even achievable?</p>\n<p>Don't forget to take into account operating costs, marketing budgets, employee salaries, and other expenses. They can add up fast and, if you're not careful, quickly run you into debt.</p>\n<h2 id=\"is-it-too-confusing%3F\">Is it too confusing? <a class=\"direct-link\" href=\"#is-it-too-confusing%3F\">#</a></h2>\n<p>Maybe your product works well, but the average person can't figure out how to use it. That's not good in terms of revenue, because they probably won't become a paying customer. You could be losing your best customers because your product is too confusing to them.</p>\n<p>Fortunately, this is something you can fix. It may be as simple as throwing a getting started video up on your homepage or funneling users through a walkthrough after they sign up. As simple as you think it is—trust me—there are people who won't be able to figure it out.</p>\n<p>Keep in mind that you're using and testing your own product all the time. You live and breathe it. You know everything it does and exactly how it works, but new users are seeing it for the very first time. If anything scares or confuses them, chances are you've lost their business.</p>\n<p>Step back for a minute and purge your brain. Pretend you've never seen your product before. What might be confusing for new users? What could be made easier or more obvious? How could your product become more friendly and inviting? There's always room for improvement, so if you can't identify these things on your own, ask someone for their opinion. A fresh pair of eyes could be just what you need to improve your onboarding strategy.</p>\n<h2 id=\"is-the-timing-right%3F\">Is the timing right? <a class=\"direct-link\" href=\"#is-the-timing-right%3F\">#</a></h2>\n<p><a href=\"https://pr.netflix.com/WebClient/loginPageSalesNetWorksAction.do?contentGroupId=10477\">Netflix was founded in 1997</a> and mailed its first DVD in 1999. Nowadays, pretty much everyone and their mother has a Netflix account, but I bet you're not checking your mailbox for DVDs anymore. That's because <a href=\"http://www.nytimes.com/2007/01/16/technology/16netflix.html\">in 2007</a>, they started their transition into a streaming video service.</p>\n<p>But what would have happened if Netflix started out streaming videos back in the 90s? Would it have been as successful as it is today? Probably not. Back then, the average person was still using <a href=\"http://en.wikipedia.org/wiki/56_kbit/s_modem\">a 56k modem</a>. Try streaming an HD video over a connection that takes 10 seconds to load Yahoo's homepage.</p>\n<p>Timing is everything, and that's something Netflix got right. They started by mailing out DVDs and, as Internet connections got faster, they pioneered a distribution method that wouldn't have been possible in earlier years.</p>\n<p>Maybe your product has the same problem. Maybe it's ahead of its time, or maybe it would have been useful a few years ago. Either way, you have to make sure whatever you're producing is relevant to the here and now. Otherwise, you'll probably have a lot of trouble selling it.</p>\n<h2 id=\"at-the-end-of-the-day\">At the end of the day <a class=\"direct-link\" href=\"#at-the-end-of-the-day\">#</a></h2>\n<p>I hope these questions help you identify any weak points your product may have. This list obviously isn't comprehensive, so if you have anything to add I'd love to hear about it in the comments.</p>\n<p>I hate coming across as a pessimist, but the reality is that starting a business is hard. If it were easy, we'd all be millionaire CEOs by now. So let me leave you with something a bit more optimistic. Here's a quote by Drew Houston, the co-founder and CEO of Dropbox:</p>\n<p>&quot;Don't worry about failure. You only have to be right once.&quot;</p>\n",
      "date_published": "2014-09-04T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/stop-trying-to-build-the-next-unicorn/",
      "url": "https://www.abeautifulsite.net/posts/stop-trying-to-build-the-next-unicorn/",
      "title": "Stop trying to build the next unicorn",
      "content_html": "<p>So, you're building the next big thing? You say you're going to make millions and have a fancy office building out in the valley? That's cool. By the same odds we'll both be rich, because I'm holding tonight's winning lotto ticket.</p>\n<h2 id=\"your-idea-probably-won't-be-the-next-big-thing\">Your idea probably won't be the next big thing <a class=\"direct-link\" href=\"#your-idea-probably-won't-be-the-next-big-thing\">#</a></h2>\n<p>It's true. The odds are against you. Whatever you're building probably won't be the next Facebook or Twitter, but that doesn't mean you can't make a living doing what you love.</p>\n<p>It sounds discouraging, but I'm really just trying to bring you down to earth. Stop reading all those articles about multi-million dollar funding rounds and IPOs. They're exciting. They trigger ambition. But they're not realistic. You might as well be reading about last night's lottery winner.</p>\n<p>You're probably well aware that <a href=\"http://www.businessinsider.com/startup-odds-of-success-2013-5\">most startups fail</a>. It's a vicious world out there with entrepreneurs trying desperately to get their ideas funded. They have an exit strategy even before they have a product. Building something great has taken a backseat to trying to become a billionaire.</p>\n<h2 id=\"success-may-not-be-what-you-think-it-is\">Success may not be what you think it is <a class=\"direct-link\" href=\"#success-may-not-be-what-you-think-it-is\">#</a></h2>\n<p>When someone says &quot;success&quot;, what do you think of? Is it the money? The fame? The idea of retiring young? Is it having big houses and little cars? What type of lifestyle would you live if you were &quot;successful&quot; by your own standard?</p>\n<p>When we're young, we're taught to aim for the sky, but success doesn't have to be so glamourous. In fact, <a href=\"http://blogs.wsj.com/wealth/2011/03/09/dont-envy-the-super-rich-they-are-miserable/\">rich people aren't as happy as you think</a>:</p>\n<blockquote>\n<p>If we can get people just a little bit more informed, so they know that getting the $20 million or $200 million won’t necessarily bring them all that they’d hoped for, then maybe they’d concentrate instead on things that would make the world a better place and could help to make them truly happy.</p>\n</blockquote>\n<p>So what makes you truly happy?</p>\n<h2 id=\"less-is-more\">Less is more <a class=\"direct-link\" href=\"#less-is-more\">#</a></h2>\n<p>What if you could live in a comfortable house, have a nice car, work decent hours, enjoy the work you do, have a healthy budget for your day-to-day needs, and be able to spend more time with your family and friends? The average person would kill to have this life. (If you didn't know that already, you must be a very fortunate person.)</p>\n<p>The truth is, your success is based on many things that are important to you, not just your work. When you put too much focus on one thing, everything else ends up on the back burner. Working too much can <a href=\"http://www.eharmony.com/blog/2013/05/30/psychological-profile-of-the-workaholic-how-working-too-much-ruins-relationships/\">ruin your relationship</a> and even cause you to <a href=\"http://www.forbes.com/sites/daviddisalvo/2012/09/12/why-working-more-than-8-hours-a-day-can-kill-you/\">die young</a>. I wouldn't consider that to be very successful.</p>\n<p>So how do you reach that balance yet still be successful? There's nothing wrong with aiming high—just don't aim too high.</p>\n<h2 id=\"there's-no-shame-in-a-lifestyle-business\">There's no shame in a lifestyle business <a class=\"direct-link\" href=\"#there's-no-shame-in-a-lifestyle-business\">#</a></h2>\n<p>Some people don't like the term <a href=\"http://en.wikipedia.org/wiki/Lifestyle_business\">lifestyle business</a>. If you're not familiar with it, a good definition is:</p>\n<blockquote>\n<p>A business that is set up and run by its founders primarily with the aim of sustaining a particular level of income and no more; or to provide a foundation from which to enjoy a particular lifestyle.</p>\n</blockquote>\n<p>That's exactly what I started in 2008, albeit unknowingly. Of course, at the time, I was hoping my service would take off and be the next big thing—but it wasn't. It didn't make me millions of dollars and it didn't attract a group of check-writing VCs. But it also didn't crush my dreams. Rather, it enlightened me.</p>\n<p>You see, I ended up starting a sustainable business that's been paying my bills since 2008. I live the life I mentioned above, and I consider myself reasonably successful. I have a great service that I enjoy running, awesome users that I love helping, and there's nobody I have to report to at work. I take most weekends off and have plenty of time for family. In fact, I'll be celebrating my honeymoon for a week in the Caribbean next month. Life is good running a lifestyle business.</p>\n<p>Does that mean I won't reach a bit higher with my next project? Absolutely not. I'd love to start another service that's just as (or more) successful than what I'm doing now, but I'm not going to let it dictate my life. The truth is, I'm happy running a lifestyle business. I'm not trying to build the next unicorn and, unless you like being disappointed, neither should you. You'll find much more success in launching something smaller.</p>\n<p>If you're stuck with that &quot;go big or go home&quot; mentality, my advice to you is figure out what you're good at, find a niche you enjoy, and start solving a problem. Grow your idea slowly but steadily, be good to your users, and stop worrying about becoming a millionaire. With your focus on building something you believe in, you'll have a much better chance of success and you just might end up with a business that will be around for years to come. That's way better than most startups do.</p>\n<p>And who knows? Maybe your idea will take you to the top. But if it doesn't, at least you'll still be doing something you love.</p>\n",
      "date_published": "2014-09-02T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/browserstack-stop-using-virtual-machines-for-browser-testing/",
      "url": "https://www.abeautifulsite.net/posts/browserstack-stop-using-virtual-machines-for-browser-testing/",
      "title": "BrowserStack: stop using virtual machines for browser testing",
      "content_html": "<p>Sick of booting up an entire virtual machine (VM) just to test something in IE? With <a href=\"http://www.browserstack.com/\">BrowserStack</a>, you don't need VMware or VirtualBox. Just enter a URL and instantly test on just about any browser you can think of.</p>\n<p>This is legit. It's not just another screenshot service or emulator. You have real-time access to an actual machine running your browser of choice. So how does it work? A BrowserStack engineer <a href=\"http://www.quora.com/Web-Browsers/How-is-browserstack-com-implemented-How-does-it-emulate-various-browsers-within-a-single-browser\">explains</a>:</p>\n<blockquote>\n<p><a href=\"http://BrowserStack.com\">BrowserStack.com</a> works by connecting you with a real machine (let us call it server) running somewhere in one of our geographically distributed datacenters via RFB protocol.</p>\n<p>We use certain open source tools, modified to suit our needs, running on server side. Client browser runs a flash based client application which receives the input from the users and send it across the server. Server gets this input, does the required operation and sends the changes back to the client.</p>\n</blockquote>\n<p>In other words, it's a clever way of remoting into a machine running the target browser, but you don't have to worry about VMs, memory, OS licensing, software updates, or even launching a browser.</p>\n<p>Sound too good to be true? I've used it and it works really well. My biggest concern is that, even with a broadband connection, the remote screen gets a bit choppy (but this can also happen when you run a VM without enough memory). My other concern is the price. At <a href=\"https://www.browserstack.com/pricing\">$39 a month</a> for a solo plan, you need to be doing some serious browser testing to make it worth your while.</p>\n<p>Either way, it's worth checking out. They offer a free trial that gives you 30 minutes of live testing and 100 screenshots. I think you'll be impressed by what they've built over at BrowserStack.</p>\n",
      "date_published": "2014-08-29T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/im-taking-startup-back/",
      "url": "https://www.abeautifulsite.net/posts/im-taking-startup-back/",
      "title": "I&#39;m taking &quot;startup&quot; back",
      "content_html": "<p>The word &quot;startup&quot; has taken on a very unfortunate meaning over the years. I used to think of my own business as a startup, but as its definition evolved, I quickly realized I didn't fit that description at all.</p>\n<p>The word &quot;startup&quot;, by definition, means the act or instance of setting in operation or motion. Or, more appropriately, a fledgling business enterprise. Given that, you could assume that just about any up and coming business is, in fact, a startup. But you'd be wrong.</p>\n<p>What it means today<br>\nWhile the definition will vary from entrepreneur to investor, there's one thing that most startups have in common these days: many seem to be in it for the money. You see, we're in the middle of a <a href=\"http://www.usnews.com/news/articles/2014/02/24/facebook-apple-google-and-the-tech-startup-gold-rush\">gold rush</a>, and everybody wants a piece of the pie.</p>\n<p>Back in the day, running a startup meant that you shared a certain passion and solved a certain problem. It was a culture, one that you submitted to because you wanted to make the world a better place. When you were a startup founder, the last thing on your mind was an exit strategy. Hell, <a href=\"http://www.fastcompany.com/3032341/most-creative-people/this-startup-had-over-5-million-users-and-a-great-product-then-it-folde\">some didn't even have a monetization strategy</a>. You just wanted to build something awesome and feel good knowing people used your product.</p>\n<p>That's not to say that making money isn't important—after all, you have to eventually monetize to stay in business—but sustainability is very different than superabundance. The problem now is that most people are taking that million dollar shot. They care less about what they're building, more about how they're going to get rich, and they're indifferent to the quality of their product.</p>\n<p>You can thank acquisitions like the <a href=\"http://www.businessweek.com/articles/2012-04-09/facebook-snaps-up-instagram\">$1 billion Instagram deal</a> or the absurdly high <a href=\"http://www.businessweek.com/articles/2014-02-19/facebook-acquires-whatsapp-for-19-billion\">$19 billion WhatsApp purchase</a>. Big companies are buying up products and services like they're going out of style, and each high-dollar acquisition just adds fuel to the fire. The idea of becoming a millionaire is poisoning the startup well.</p>\n<p>As a result, &quot;startup&quot; has become synonymous with a business whose primary goal is to make a bunch of money through investments, acquisitions, or the holy IPO grail. They're like the new get-rich-quick schemes.</p>\n<p>Why I'm taking it back<br>\nWhile my company doesn't share the same traits as those above, I always considered it to be a startup. I bootstrapped it back in 2007 and, to this day, I haven't taken investments of any kind. To me, that's one of the most beautiful things about the startup world. You can create something from virtually nothing and, the next thing you know, you're running a profitable business.</p>\n<p>What starts as an idea evolves into a product or service, and it's made great by the passion you have for building it. But when you start thinking more about the money than the experience, you end up adding to the landfill of half-hearted products that nobody ever wanted. If you have an exit strategy before you have an idea, you're doing it for the wrong reason.</p>\n<p>For me, this issue came to light a few years ago when someone made me feel very ignorant for calling my own business a startup.</p>\n<blockquote>\n<p>You run a startup? Who have you pitched your idea to? How much are you seeking for investment? What's your exit strategy?</p>\n</blockquote>\n<p>None of it applied to me, but the questions were asked with such certainty that it felt like they should have. That's become the expectation for startups these days. After I explained that I wasn't doing any of that, he responded with:</p>\n<blockquote>\n<p>Oh, so you're not a startup. You're a bootstrapper.</p>\n</blockquote>\n<p>Suddenly, my product wasn't interesting because I didn't plan on getting acquired or raising millions of dollars.</p>\n<p>In hindsight, I should have corrected him. You see, I've come to realize that it's not my version of &quot;startup&quot; that's been skewed. It's those that think startups have only one purpose—to generate multi-million dollar payouts—who are getting it wrong.</p>\n<p>A startup isn't a wealth generator. Yes, one of their functions is to sustain a business financially, but that's not the reason you should be in the game. A startup is an idea. It's a passion. It's a culture. It's a business that aspires to make the world better, no matter how large or small.</p>\n<p>From now on, when you hear me talk about startups, don't be confused by the people who are starting up just to cash out. Know that when I use the &quot;s&quot; word, I'm referring to those who are doing what they love for reasons that amount to much more than just dollar signs.</p>\n<p>I'm drilling a new well. I'm tossing out the trash. I'm taking &quot;startup&quot; back.</p>\n",
      "date_published": "2014-08-28T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/hide-the-mouse-cursor-with-css/",
      "url": "https://www.abeautifulsite.net/posts/hide-the-mouse-cursor-with-css/",
      "title": "Hide the mouse cursor with CSS",
      "content_html": "<p>I know you can change the mouse cursor using CSS, but I never realized that you can actually hide it altogether.</p>\n<pre><code class=\"language-css\">.no-cursor {\n  cursor: none;\n}\n</code></pre>\n<p>Of course, that doesn't mean you <em>should</em>, it just means you <em>can</em>. Practical uses for this are definitely limited, but things like mouse-based games come to mind.</p>\n<p>What other use cases can you think of for hiding the mouse cursor? If you think of any, <a href=\"https://twitter.com/claviska\">let me know on Twitter.</a></p>\n",
      "date_published": "2014-08-28T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/how-to-leave-a-console-greeting-for-your-visitors/",
      "url": "https://www.abeautifulsite.net/posts/how-to-leave-a-console-greeting-for-your-visitors/",
      "title": "How to leave a console greeting for your visitors",
      "content_html": "<p>Since my audience consists primarily of web developers, I decided to try a little experiment the other day. I added a console greeting to the site for anyone who decides to look under the hood. Here's how I did it.</p>\n<h2 id=\"what-the-heck-is-a-console-greeting%3F\">What the heck is a console greeting? <a class=\"direct-link\" href=\"#what-the-heck-is-a-console-greeting%3F\">#</a></h2>\n<p>Some time ago, I saw a post about a web design agency that advertised a developer job in an HTML comment on their website. The idea was that a developer might be checking out the source and possibly apply for the position. I'm not sure if it worked, but it was definitely a clever idea.</p>\n<p>The other day I was updating a script and thought, &quot;how cool would it be if someone left a fun greeting in the developer console?&quot;</p>\n<p>Lately I've been trying to write more about my experience running a bootstrapped SaaS business, which I think can be very valuable to developers. To help promote this new section of the blog, I added the following message that will appear in a visitor's console should they happen to open it while visiting my site:</p>\n<p><img src=\"/images/console-greeting.png\" alt=\"Screenshot of a console greeting\"></p>\n<p>The greeting invites visitors to check out the <em>Business</em> section of my blog, and I've left my Twitter handle in case they want to get in touch with me. The panther is there as a &quot;wow&quot; effect, which I think will help reception. What's nice is that in Chrome and Safari, the link is actually clickable!</p>\n<h2 id=\"how-to-do-it\">How to do it <a class=\"direct-link\" href=\"#how-to-do-it\">#</a></h2>\n<p>The idea is simple. When the page loads, leave a message in the developer console. All it takes is a bit of JavaScript:</p>\n<pre><code class=\"language-js\">console.log(\n  '\\n' +\n  'Hi there, fellow developer! Thanks for visiting.\\n' +\n  'If you’re an aspiring bootstrapper, startup-er,\\n' +\n  'or business owner, make sure you check out this         (&quot;\\`-’-/&quot;).___..--’’&quot;\\`-._\\n' +\n  'section of the blog for tips and inspiration!            \\`6_ 6  )   \\`-.  (     ).\\`-.__.‘)\\n' +\n  '                                                         (_Y_.)’  ._   )  \\`._ \\`. \\`\\`-..-’\\n' +\n  'http://www.abeautifulsite.net/tags/business            _..\\`--’_..-_/  /--’_.’ ,’\\n' +\n  '                                                      (il),-’‘  (li),’  ((!.-‘\\n' +\n  'I’d love to hear what you think!\\n' +\n  '\\n' +\n  '— Cory\\n'\n);\n</code></pre>\n<p>It's a bit ugly with all the concatenation and newlines, but you get the idea. Of course, if the visitor doesn't have their console open, they simply won't see anything. The script itself is benign and only serves as a clever way to reach out to someone who happens to be browsing with the dev console open.</p>\n<p>What do you think of this idea? Silly, fun, annoying, awesome? What other ways can the console be used to charm or impress your tech-savvy visitors? Have you seen any other websites do this?</p>\n",
      "date_published": "2014-08-27T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/subtle-patterns-hundreds-of-free-backgrounds-that-tile/",
      "url": "https://www.abeautifulsite.net/posts/subtle-patterns-hundreds-of-free-backgrounds-that-tile/",
      "title": "Subtle Patterns: hundreds of free backgrounds that tile",
      "content_html": "<p>I've been using <a href=\"http://subtlepatterns.com/\">Subtle Patterns</a> for quite some time now. All the patterns are great, and their Photoshop plugin is incredibly useful.</p>\n<p>I can't remember when it first launched, but I do remember when there was only one or two pages to browse on the site. Now it has over 380 images you can use for free in your own projects. The collection is curated by <a href=\"https://twitter.com/atlemo\">Atle Mo</a>, who does a great job in maintaining subtle, consistent backgrounds out of the tons of images that users submit.</p>\n<p>All of the patterns tile nicely (which you can test by selecting <em>Preview</em>) and all are available under a Creative Commons license. If you're a designer with a knack for tessellations, you might be one of the <a href=\"http://subtlepatterns.com/submitpattern/\">lucky 3%</a> whose pattern gets accepted.</p>\n<p>I bought the Photoshop plugin the day it came out, which I highly recommend if you use Photoshop for web design. It's so much better than tiling the images yourself or going to <em>Edit &gt; Define Pattern</em> every time you want to try out a new background. It also has a slick logo, which always a good reason to buy something.</p>\n<p><img src=\"/images/subtle-patterns-plugin.png\" alt=\"\"></p>\n<p>Seriously, it's an awesome service, so now's a good time to add <a href=\"http://subtlepatterns.com/\">Subtle Patterns</a> to your bookmarks if it's not already there.</p>\n",
      "date_published": "2014-08-25T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/find-a-name-for-almost-any-hex-color/",
      "url": "https://www.abeautifulsite.net/posts/find-a-name-for-almost-any-hex-color/",
      "title": "Find a name for almost any hex color",
      "content_html": "<p>Have you ever wondered what color that certain shade of blue is? Or maybe you've named your Less/Sass variables something like <em>gray</em>, <em>light gray</em>, <em>lighter gray</em>, etc. Here's a tool that will give you more reasonable names for all those colors.</p>\n<p><a href=\"http://chir.ag/projects/name-that-color/\">Name that Color</a> lets you enter a hex value (or choose one from the color picker) and gives you a human-readable name for the closest matching shade. There are over 1,500 color names available, ranging from <em>alabaster</em> to <em>zinnwaldite</em>. Others are more common, such as <em>brick red</em>, <em>chocolate</em>, and <em>slate gray.</em> Even if you don't land on a perfect match, the nearest named-color is only a shade or two away.</p>\n<p><a href=\"http://chir.ag/projects/name-that-color/\"><img src=\"/images/name-that-color.png\" alt=\"Name that Color\"></a></p>\n<p>The author also provided the <a href=\"http://chir.ag/projects/ntc/\">JavaScript library</a> behind it all under a Creative Commons license. It's really easy to use:</p>\n<pre><code class=\"language-js\">// Find the nearest match\nvar match = ntc.name(&quot;#6195ED&quot;);\n\n// The resulting array\nvar closest = match[0]; // RGB value of the closest match\nvar name    = match[1]; // The color name\nvar exact   = match[2]; // True if it's an exact match\n</code></pre>\n<p>What will you do with this handy tool?</p>\n",
      "date_published": "2014-08-22T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/working-with-html5-data-attributes/",
      "url": "https://www.abeautifulsite.net/posts/working-with-html5-data-attributes/",
      "title": "Working with HTML5 data attributes",
      "content_html": "<p>Before HTML5, working with arbitrary data sucked. To keep things valid, you had to stuff things into <code>rel</code> or <code>class</code> attributes. Some developers even created their own custom attributes. Boy, was it a mess.</p>\n<p>But that all changed with the introduction of HTML5 custom data attributes. Now you can store arbitrary data in an easy, standards-compliant way.</p>\n<h2 id=\"how-do-data-attributes-work%3F\">How do data attributes work? <a class=\"direct-link\" href=\"#how-do-data-attributes-work%3F\">#</a></h2>\n<p>A data attribute is exactly that: a custom attribute that stores data. They are always prefixed with <code>data-</code> followed by something descriptive (according to <a href=\"http://www.w3.org/html/wg/drafts/html/master/dom.html#custom-data-attribute\">the spec</a>, only lower case letters and hyphens are allowed). An element can have any number of data attributes you want.</p>\n<p>Here's an example using a list item to store data for a user:</p>\n<pre><code class=\"language-html\">&lt;li data-id=&quot;1234&quot; data-email=&quot;calvin@example.com&quot; data-age=&quot;21&quot;&gt;Calvin&lt;/li&gt;\n</code></pre>\n<p>Of course, this data isn't very useful to a visitor because they can't actually see it, but it's wildly useful for building web applications. Imagine a delete button in your app:</p>\n<pre><code class=\"language-html\">&lt;button type=&quot;button&quot; data-cmd=&quot;delete&quot; data-id=&quot;1234&quot;&gt;Delete&lt;/button&gt;\n</code></pre>\n<p>All the data you need is right there to send to your backend script. No more <code>rel</code> stuffing or parsing IDs and actions out of other attributes. Data URLs make your life easier.</p>\n<h2 id=\"what-can-you-store%3F\">What can you store? <a class=\"direct-link\" href=\"#what-can-you-store%3F\">#</a></h2>\n<p>One thing to remember when working with data attributes is that you can't store objects in them. Well, you can if you serialize them, but we'll save that for another post.</p>\n<p>For now, just know that you're pretty much limited to storing strings.</p>\n<h2 id=\"reading%2Fwriting-data-attributes-with-javascript\">Reading/writing data attributes with JavaScript <a class=\"direct-link\" href=\"#reading%2Fwriting-data-attributes-with-javascript\">#</a></h2>\n<p>Using the delete button as an example, let's look at how we can access this data with JavaScript.</p>\n<pre><code class=\"language-js\">// Here's our button\nvar button = document.getElementById('your-button-id');\n\n// Get the values\nvar cmd = button.getAttribute('data-cmd');\nvar id = button.getAttribute('data-id');\n\n// Change the values\nbutton.setAttribute('data-cmd', yourNewCmd);\nbutton.setAttribute('data-id', yourNewId);\n</code></pre>\n<p>Pretty simple, right? Now you can pass <code>cmd</code> and <code>id</code> to your app in an AJAX request or do whatever else you need to do with it.</p>\n<h2 id=\"reading%2Fwriting-data-attributes-with-jquery\">Reading/writing data attributes with jQuery <a class=\"direct-link\" href=\"#reading%2Fwriting-data-attributes-with-jquery\">#</a></h2>\n<p>Here's the same thing using jQuery's <a href=\"http://api.jquery.com/attr/\"><code>.attr()</code></a> method:</p>\n<pre><code class=\"language-js\">// Get the values\nvar cmd = $('#your-button-id').attr('data-cmd');\nvar id = $('#your-button-id').attr('data-id');\n\n// Change the values\n$('#your-button-id')\n    .attr('data-cmd', yourNewCmd)\n    .attr('data-id', yourNewId);\n</code></pre>\n<p>Don't get this confused with jQuery's <a href=\"http://api.jquery.com/data/\"><code>.data()</code></a> method. Although there is some overlap in how data attributes and <code>.data()</code> work, they're two totally different things. If you're not familiar with it, just stick with <code>.attr()</code>.</p>\n<h2 id=\"using-the-dataset-api\">Using the dataset API <a class=\"direct-link\" href=\"#using-the-dataset-api\">#</a></h2>\n<p>HTML5 actually has an API just for working with this type of data. Alas, <a href=\"http://caniuse.com/#feat=dataset\">IE10 and below</a> don't fully support it, but it's still worth mentioning.</p>\n<p>Using the button example again, here's how to get and set data attributes using the dataset API:</p>\n<pre><code class=\"language-js\">// Here's our button\nvar button = document.getElementById('your-button-id');\n\n// Get the values\nvar cmd = button.dataset.cmd;\nvar id = button.dataset.id;\n\n// Change the values\nbutton.dataset.cmd = yourNewCmd;\nbutton.dataset.id = yourNewId;\n</code></pre>\n<p>Note how there's no <code>data</code> prefix or dashes here. Similar to the way CSS properties work in JavaScript, you'll need to use camel case notation. The dataset API converts each one so you'll always have <code>data-some-attribute-name</code> in your HTML and <code>dataset.someAttributeName</code> in your JavaScript. Magic!</p>\n<h2 id=\"things-you-can-do-with-data-attributes\">Things you can do with data attributes <a class=\"direct-link\" href=\"#things-you-can-do-with-data-attributes\">#</a></h2>\n<p>The examples above are very basic, but you can do so much with custom data attributes. Here are a few examples off the top of my head.</p>\n<h3 id=\"filtering\">Filtering <a class=\"direct-link\" href=\"#filtering\">#</a></h3>\n<p>Say you have a list of things and you want to filter them by keyword. Just put the keywords into a data attribute and write a short script to loop through and show/hide them accordingly.</p>\n<pre><code class=\"language-html\">&lt;input type=&quot;text&quot; id=&quot;filter&quot;&gt;\n\n&lt;ul class=&quot;cars&quot;&gt;\n    &lt;li data-models=&quot;mustang, f150, 500, fusion&quot;&gt;Ford&lt;/li&gt;\n    &lt;li data-models=&quot;corvette, silverado, impala, cavalier&quot;&gt;Chevrolet&lt;/li&gt;\n    ...\n&lt;/ul&gt;\n</code></pre>\n<p>Here's a quick and dirty filter using jQuery:</p>\n<pre><code>$('#filter').on('keyup', function() {\n  var keyword = $(this).val().toLowerCase();\n  $('.cars &gt; li').each(function() {\n    $(this).toggle(keyword.length &lt; 1 || $(this).attr('data-models').indexOf(keyword) &gt; -1);\n  });\n});\n</code></pre>\n<h3 id=\"styling\">Styling <a class=\"direct-link\" href=\"#styling\">#</a></h3>\n<p>It's arguably better to use classes, but you can style things against data attributes too. Here's how to apply a style if the element has a certain data attribute (regardless of its value). First, the HTML:</p>\n<pre><code class=\"language-html\">&lt;span class=&quot;label&quot; data-warning&gt;\n</code></pre>\n<p>Now the CSS:</p>\n<pre><code class=\"language-css\">[data-warning] {\n  background: red;\n}\n</code></pre>\n<p>But what if we wanted to style it based on the data attribute's value? This will work for any <code>data-warning</code> attribute that contains the word <em>error</em>:</p>\n<pre><code class=\"language-css\">[data-warning*=error] {\n    color: red;\n}\n</code></pre>\n<h3 id=\"configuring\">Configuring <a class=\"direct-link\" href=\"#configuring\">#</a></h3>\n<p><a href=\"http://getbootstrap.com/\">Bootstrap</a> uses data attributes as an HTML alternative to configuring plugins via JavaScript. Here's an example of a <a href=\"http://getbootstrap.com/javascript/#popovers\">popover</a>:</p>\n<pre><code class=\"language-html\">&lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot; data-container=&quot;body&quot; data-toggle=&quot;popover&quot; data-placement=&quot;top&quot; data-content=&quot;Vivamus sagittis lacus vel augue laoreet rutrum faucibus.&quot;&gt;\n  Popover on top\n&lt;/button&gt;\n</code></pre>\n<h2 id=\"a-better-way-to-store-data\">A better way to store data <a class=\"direct-link\" href=\"#a-better-way-to-store-data\">#</a></h2>\n<p>Custom data attributes are widely used all over the web. The nice thing is that they work fine in older browsers, and they adhere to web standards moving forward. That means you can start using them today knowing that they won't stop working tomorrow.</p>\n<p>I've shown you a few common ways to use custom data attributes. What other uses can you think of? Have you used them before? Let me know by commenting below!</p>\n",
      "date_published": "2014-08-21T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/is-it-possible-to-be-an-introverted-entrepreneur/",
      "url": "https://www.abeautifulsite.net/posts/is-it-possible-to-be-an-introverted-entrepreneur/",
      "title": "Is it possible to be an introverted entrepreneur?",
      "content_html": "<p><a href=\"https://twitter.com/rem/status/502438066355961856\">A tweet by Remy Sharp</a> sparked my thoughts about being an introvert and starting a company. I don't hate human beings, but I do tend to keep to myself. How has this impacted my ability to run a successful business?</p>\n<h2 id=\"launching-a-product-is-hard\">Launching a product is hard <a class=\"direct-link\" href=\"#launching-a-product-is-hard\">#</a></h2>\n<p>If you don't have a good network, launching a product is hard. Without an immediate audience to provide feedback and help promote your idea, you're stuck waiting for users to trickle in. That means it takes longer to know what's good, what sucks, and what's missing. The birth of your product is a critical time, so the last thing you want is to have a lot of downtime and lack of feedback during this period.</p>\n<p>When I launched my first SaaS product, that's exactly what happened. I promoted the service through my blog, fed some cash into AdWords, and waited for it to get recognized. I was expecting users to pour in, but that didn't happen. It took some time for things to really pick up, and I attribute that to my lack of social interaction.</p>\n<p>Being an introvert, I wasn't tapped into social media the way many startups are. I didn't hang out at trendy bars with my tech friends. Working from home, I wasn't good at meeting people with similar interests. I thought I could let technology do all the marketing for me.</p>\n<p>It seems that, when you keep to yourself, you end up underestimating the need to connect with people. In hindsight, I made a lot of mistakes because of that. Perhaps the best lesson I've learned out of all this is that you need people, whether you like it or not.</p>\n<h2 id=\"my-product-should-have-failed\">My product should have failed <a class=\"direct-link\" href=\"#my-product-should-have-failed\">#</a></h2>\n<p>By most accounts my product should have failed, but I had one thing that saved it. I'm much better at email than I am in person or on the phone. Because of this, I was able to connect with users who asked questions or signed up and build their trust. I had support emails pushed to my phone and would respond at all times of the day. My commitment to fast and friendly support was my saving grace. It kept things going as I learned how to market and grow a SaaS business.</p>\n<p>As it turned out, I wasn't actually an introvert. I was just better at typing than I was at talking.</p>\n<p>Once I learned to use that to my advantage, everything changed. If I was good at email, why couldn't I be good on Facebook and Twitter, too? That got me out of my shell so I could engage people better online, which has helped significantly. It also encouraged me to get out there in the real world and do the same thing.</p>\n<h2 id=\"networking-is-a-way-of-life\">Networking is a way of life <a class=\"direct-link\" href=\"#networking-is-a-way-of-life\">#</a></h2>\n<p>A very successful person once told me that networking is the key to success. &quot;It's not what you know, it's who you know.&quot; This is unfortunately true in the world of business. If you think you can be an introvert and still be successful, you're in for a rough ride. Of course, nothing is impossible, but why make it harder for yourself? People aren't all that bad.</p>\n<p>If you disagree with that last sentence, perhaps you've been hanging out with the wrong crowd. Find like-minded people that share similar interests. Go out of your comfort zone to reach out and meet people that are more like you. This can be difficult if you're no longer in high school or college, but it's not impossible.</p>\n<p>That same successful person also told me that networking is a way of life. It's not something you force yourself to do just once a month at a local meet-up. It happens anywhere and everywhere you go. Instead of avoiding people, smile and act friendly. Offer to help them whenever you can. You never know when or where you'll spark up a conversation with someone who will change your life.</p>\n<h2 id=\"it's-probably-impossible\">It's probably impossible <a class=\"direct-link\" href=\"#it's-probably-impossible\">#</a></h2>\n<p>Is it impossible to be an introvert and an entrepreneur? Unless you're marketing your product directly to cats, I would say your odds of success are unlikely. I wasn't the most outgoing person and I definitely ran into issues. Fortunately, I was able to realize my aversion to social interaction and work on fixing it.</p>\n<p>That was years ago. Since then, I've grown comfortable walking right up to people and introducing myself. I've given presentations to small and mid-sized groups of people. I try to be more active both online and in person. I attend local meet-ups, conferences, and other social gatherings a few times a month.</p>\n<p>Although I used to be fine with the idea of being an introvert, I've learned that it's not the best personality to have when you're trying to run a business. It's the equivalent of being a lifeguard that doesn't know how to swim. Sure, you might be able to rescue a few people, but your odds of succeeding will be much lower because you're lacking a mission critical skill.</p>\n",
      "date_published": "2014-08-21T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/how-to-use-the-php-ternary-operator/",
      "url": "https://www.abeautifulsite.net/posts/how-to-use-the-php-ternary-operator/",
      "title": "How to use the PHP ternary operator",
      "content_html": "<p>When I learned how to use the ternary operator years ago, I fell in love with it. What a cool way to simplify assignments based on a condition. If you're not sure what the ternary operator is or how it works, you're missing out on a really cool piece of programming knowledge.</p>\n<p>Let's start out with an example and I'll explain how it works below. I'll use PHP, but the syntax is exactly the same for JavaScript. Let's say we want to assign one of two values to <code>$x</code> based on a certain condition. Using a conditional (if/then/else), it would look like this:</p>\n<pre><code class=\"language-php\">if ($valid) {\n  $x = 'yes';\n} else {\n  $x = 'no';\n}\n</code></pre>\n<p>That should be pretty easy to read. If <code>$valid</code> is <code>true</code> set <code>$x</code> to <em>yes</em>, otherwise set it to <em>no</em>. But this example is rather long for such a simple assignment. Let's do it in one line with ternary logic:</p>\n<pre><code class=\"language-php\">$x = $valid ? 'yes' : 'no';\n</code></pre>\n<p>This produces the same result as before, but it's much shorter. Read it out loud like this:</p>\n<blockquote>\n<p>If <em>x</em> is valid set it to <em>yes</em>; otherwise set it to <em>no</em>.</p>\n</blockquote>\n<p>It's not that intimidating once you wrap your head around it. You can even nest them if you feel like being dangerous:</p>\n<pre><code class=\"language-php\">$valid = true;\n$lang = 'french';\n\n$x = $valid ? ($lang === 'french' ? 'oui' : 'yes') : ($lang === 'french' ? 'non' : 'no');\n\necho $x; // outputs 'oui'\n</code></pre>\n<p>Try running this script in your dev environment and playing with the values to better understand how it works.</p>\n<p>I will, however, caution you to not go crazy with these. Overusing and nesting ternary logic can make your code really hard to read. A good rule of thumb is, if you have to re-read it multiple times to understand it, you should probably use a conditional or a switch statement instead.</p>\n<h2 id=\"ternary-shorthand\">Ternary shorthand <a class=\"direct-link\" href=\"#ternary-shorthand\">#</a></h2>\n<p>This trick only works in PHP 5.3+ and can sometimes make your logic even shorter. Consider this:</p>\n<pre><code class=\"language-php\">if ($start) {\n  $start = $start;\n} else {\n  $start = 1;\n}\n</code></pre>\n<p>Granted, you probably wouldn't do that in your code. You'd probably do something like this instead:</p>\n<pre><code class=\"language-php\">if (!$start) {\n  $start = 1;\n}\n</code></pre>\n<p>But that's still three lines of code. Let's try with the shorthand ternary operator now:</p>\n<pre><code class=\"language-php\">$start = $start ?: 1;\n</code></pre>\n<p>Much better. Just remember that this shorthand trick won't work in JavaScript!</p>\n",
      "date_published": "2014-08-18T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/five-things-ive-learned-about-taking-risks/",
      "url": "https://www.abeautifulsite.net/posts/five-things-ive-learned-about-taking-risks/",
      "title": "Five things I&#39;ve learned about taking risks",
      "content_html": "<p>I had a cush job at a university with great benefits, decent pay, and normal hours. Five years ago, I took a risk and gave it all up to start a company. Here are the five most important lessons I've learned about risk-taking.</p>\n<h2 id=\"1.-there-are-good-risks-and-bad-risks\">1. There are good risks and bad risks <a class=\"direct-link\" href=\"#1.-there-are-good-risks-and-bad-risks\">#</a></h2>\n<p>People that jump into things too quickly tend to achieve unfavorable results. They get excited by the potential and become blind to the consequences. On the other hand, people that wait too long end up missing opportunities due to fear and reluctance. Taking risks can be stressful and dangerous, but it can also change your life.</p>\n<p>I've learned that there are good risks and bad risks, but figuring out how to measure them isn't easy. Even if you write down all the pros and cons, the answer might still be unclear. Perhaps that's why so many people talk about risks. It's a complicated subject. <a href=\"http://www.amazon.com/s/ref=sr_nr_n_0/188-1398068-9841564?rh=n%3A283155%2Cn%3A4749%2Ck%3Arisk+taking&amp;keywords=risk+taking&amp;ie=UTF8&amp;qid=1408142253&amp;rnid=1000\">Look how many books there are</a> about it.</p>\n<p>I'd love to say &quot;just go with your gut&quot;, but that hasn't always worked for me. You have to be smart enough to recognize opportunity while being cautious enough to realize what's at stake. It's a lot like gambling, but if you understand the game you're playing you have a much better shot at coming out ahead.</p>\n<p>Do your research. Run numbers. Consider your best and worst case scenarios. Listen to your gut instinct, but don't let it trump logic. At the end of the day, there should be a little bit of comfort and a little bit of concern when you decide to take a risk. If either is missing, consider it a red flag.</p>\n<h2 id=\"2.-the-odds-are-better-than-you-think\">2. The odds are better than you think <a class=\"direct-link\" href=\"#2.-the-odds-are-better-than-you-think\">#</a></h2>\n<p>When I quit my job, I already had something going on the side to help cover my expenses while the business ramped up. I planned it out so if things didn't go the way I expected, I'd have something to fall back on. I would never recommend risking everything without having some kind of safety net. That's a crapshoot and, if you've ever been to Vegas, you should know there's a good chance that it won't work out in your favor.</p>\n<p>The key to taking risks is to take smart ones, which requires a solid understanding of how things work. Of course, there are always uncertainties—that's why it's called a &quot;risk&quot;—but you can stack the deck in your favor by being knowledgeable, timely, and persistent.</p>\n<p>When I launched my first product, it was second to market for the type of service it was. That means it wasn't featured on many tech blogs and it didn't get the kind of coverage or hype that its competitor did. Rather than give up, I decided to roll out some key features quickly and promote the service as much as possible anyway. Marketing wasn't my thing back then (it still isn't), but I studied up and kept at it. My persistence ultimately paid off. In November, my service will see its sixth profitable year of operation!</p>\n<h2 id=\"3.-don't-listen-to-people\">3. Don't listen to people <a class=\"direct-link\" href=\"#3.-don't-listen-to-people\">#</a></h2>\n<p>I talked to a lot of people before quitting my job. I spoke with my parents, my friends, and even some coworkers about it. Their advice was mixed. Some of them told me to go for it and start my own thing, but most of them told me it was a bad idea. While the former fueled my adrenaline, the latter made me very anxious. I wasn't sure how to handle that type of feedback. I mean, these people were all smart and well-educated and I thought my plan was solid. So who should I listen to?</p>\n<p>The answer is none of them. While getting advice from smart and experienced people is perfectly fine, you shouldn't let others decide what risks you take in life. No matter how close you are to someone, they'll never fully understand your situation like you do. They don't know your financial status, how motivated you are, or how successful you'll be. They can only tell you what they would do (or what they wouldn't do) if they were in your shoes.</p>\n<p>Now that could be valuable advice if you're talking to a successful entrepreneur, but how many successful entrepreneurs do you personally know? I didn't know any, so I had to go with my gut. I listened to everyone's advice, thought it through, and decided to take the risk. Six years later, I have no regrets.</p>\n<h2 id=\"4.-the-fun-is-in-the-journey%2C-not-the-destination\">4. The fun is in the journey, not the destination <a class=\"direct-link\" href=\"#4.-the-fun-is-in-the-journey%2C-not-the-destination\">#</a></h2>\n<p>Oh, the many nights I've spent developing things, writing blog posts, fixing bugs, repairing databases, responding to support tickets, and playing around with new technologies. I'm fortunate enough to do what I love for a living, and I never take that for granted. Even when things get stressful, I never wish I were doing something else.</p>\n<p>To keep things moving forward, I have numerous goals: growth, new products, hiring employees, an office building downtown...but there isn't any finish line, nor should there be. With each goal comes new risks, and with each risk my journey gets more exciting. There's no point at which you'll sit down and say, &quot;there, I've done it. It's all over now.&quot; Instead, you'll ask yourself, &quot;what can I do next?&quot;</p>\n<p>Even if you nailed that goal of $1M in revenue, you don't stop working and that's it. There's always something else you can turn your attention to. When you succeed, remember what works. When you fail, remember what doesn't. Use that to your advantage and you'll make better decisions in the future. If starting a business is like a road trip, then knowledge is your fuel. Don't worry so much about the destination—just enjoy the ride and keep putting gas in your tank.</p>\n<h2 id=\"5.-know-when-to-call-it-quits\">5. Know when to call it quits <a class=\"direct-link\" href=\"#5.-know-when-to-call-it-quits\">#</a></h2>\n<p>Sometimes, it just isn't meant to be. Even if you've done something once, doing it again can be a completely different experience. I've played around with many ideas, developed prototypes, bought domain names, and most of them are just memories now. You have to know when to call it quits before it drags you down and burns you out.</p>\n<p>There was a project I really wanted to develop a few years ago. I had a logo designed, created a website for it, and even had a partially working prototype until I hit a major road block. At the time, I had to make a decision. I already wasted months of resources working on a project that I didn't even know was viable, and another project was already overdue for a major update. Should I spend the next six months trying to get this thing to work while the other (more successful) project suffered? No way. It was time to call it quits.</p>\n<p>When you have a lot of time invested into a project—especially your project—it can be very hard to let go. Maybe it's pride or simply the fear of failure. Maybe a bit of both? In the end, I knew I had to give up on it and move on.</p>\n<p>The crazy thing is that once I killed the project, I felt so much better. It was a huge weight off my shoulders. I was able to focus on the more successful service and ultimately launched a new version that caused its user base to triple in one year!</p>\n<h2 id=\"a-tip-to-take-home\">A tip to take home <a class=\"direct-link\" href=\"#a-tip-to-take-home\">#</a></h2>\n<p>Risk-taking shouldn't be something that scares you—it should be something that excites you. Look for opportunities, but be cautious and plan when to make your move. If you asked me for just one piece of advice I've learned about taking risks, it would be this:</p>\n<p>Waiting too long can be just as bad as not waiting long enough!</p>\n",
      "date_published": "2014-08-18T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/using-the-classlist-api/",
      "url": "https://www.abeautifulsite.net/posts/using-the-classlist-api/",
      "title": "Using the classList API",
      "content_html": "<p>jQuery makes it easy to add, remove, and toggle classes on various elements. It's too bad this stuff wasn't built into JavaScript. But wait — it is now!</p>\n<p>What your looking for didn't exist until IE10, but it's been in Firefox, Chrome, Safari, and Opera for some time now. It's called the <code>classList</code> API, and it makes working with classes a breeze, even without a library.</p>\n<p>For these examples, assume that <code>el</code> is a reference to an element on your page.</p>\n<pre><code class=\"language-js\">// Adding a class\nel.classList.add('your-class-name');\n\n// Removing a class\nel.classList.remove('some-class-name');\n\n// Toggling a class on/off\nel.classList.toggle('some-class-name');\n\n// Checking for a class\nif (el.classList.contains('some-class-name')) {\n  // has the class\n} else {\n  // doesn't have the class\n}\n</code></pre>\n<p>This is just as easy as any library out there, and you can use it today if you're not worried about IE9 and below. (Actually, you can still use it with <a href=\"https://github.com/eligrey/classList.js\">a shim</a>.)</p>\n",
      "date_published": "2014-08-15T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/tinypng-a-better-way-to-compress-png-images/",
      "url": "https://www.abeautifulsite.net/posts/tinypng-a-better-way-to-compress-png-images/",
      "title": "TinyPNG: A better way to compress PNG images",
      "content_html": "<p>By now, you know that optimizing images and other resources can reduce bandwidth and help your website load faster. Perhaps you've even used a tool like <a href=\"http://pmt.sourceforge.net/pngcrush/\">Pngcrush</a> before to make your images smaller. Now, there's an even better solution.</p>\n<p><a href=\"https://tinypng.com/\">TinyPNG</a> uses &quot;smart lossy compression techniques&quot; to make your images smaller. <em>But wait, isn't PNG a lossless format?</em> Yes, and that's the beauty of TinyPNG:</p>\n<blockquote>\n<p>By selectively decreasing the number of colors in the image, fewer bytes are required to store the data. The effect is nearly invisible but it makes a very large difference in file size!</p>\n</blockquote>\n<p>To accomplish this, TinyPNG uses a <a href=\"http://en.wikipedia.org/wiki/Quantization_(image_processing)\">quantization</a> algorithm to reduce the number of colors in a way that's virtually undetectable to the naked eye. This is the same technique that <a href=\"/how-to-get-the-dominant-colors-of-an-image-with-javascript\">Color Thief</a> uses to generate color palettes from photos.</p>\n<p>Here's how it works in more detail:</p>\n<blockquote>\n<p>When you upload a PNG (Portable Network Graphics) file, similar colors in your image are combined. This technique is called “quantization”. Because the number of colors is reduced, 24-bit PNG files can be converted to much smaller 8-bit indexed color images. All unnecessary metadata is stripped too. The result: tiny PNG files with 100% support for transparency.</p>\n</blockquote>\n<p>And here's a before/after comparison:</p>\n<p><a href=\"/images/tinypng-example.png\"><img src=\"/images/tinypng-example.png\" alt=\"TinyPNG example\"></a></p>\n<p>It's visually the same, but 74% smaller. Of course, this percentage will vary for each image. I've been using TinyPNG quite a bit lately and haven't found a single instance where the results were unacceptable.</p>\n<p>While using their website is free, there are some paid options for TinyPNG. Instead of dropping your images onto their page, you can get the <a href=\"https://tinypng.com/photoshop\">TinyPNG Photoshop plugin</a> for $40. There's also a <a href=\"https://tinypng.com/developers\">developer API</a> with both free and paid plans. (If you want a Bash script that uses their API, <a href=\"https://github.com/RanyAlbegWein/Tinypng\">here's one</a> by <a href=\"https://twitter.com/ranyalbegwein\">@RanyAlbegWein</a>.)</p>\n<p>What other techniques do you use to make images smaller? Share them with me below!</p>\n",
      "date_published": "2014-08-15T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/what-is-my-browser-this-tool-will-tell-you/",
      "url": "https://www.abeautifulsite.net/posts/what-is-my-browser-this-tool-will-tell-you/",
      "title": "What is my browser? This tool will tell you",
      "content_html": "<p>Last week I wrote about <a href=\"/posts/how-to-get-faster-and-better-help-from-support\">how to get faster and better help from support</a>. One of my suggestions was to tell them what browser, OS, etc. you're using. Here's a free tool that will make that so much easier.</p>\n<p>As soon as you visit <a href=\"https://aboutmybrowser.com\">About My Browser</a>, it will show you what browser and operating system you're using. Scroll down a bit and you'll see more details including:</p>\n<ul>\n<li>Whether or not JavaScript is enabled</li>\n<li>Whether or not the browser is accepting cookies</li>\n<li>Your screen resolution</li>\n<li>Your browser's dimensions</li>\n<li>Whether or not Flash is installed</li>\n<li>Whether or not Java is installed</li>\n<li>Your user agent string</li>\n<li>Your language preference</li>\n</ul>\n<p>The site also gives you a link to copy and paste for a support person or friend. That makes it the perfect tool to hand off to your grandmother who can't get Gmail to load or that annoying guy in the neighborhood who thinks you're tech support because you work on a computer.</p>\n<p>It's nothing that a developer would need, but it's so much easier to say &quot;go here and send me the link&quot; than trying to ask someone who isn't comfortable with computers all those questions.</p>\n",
      "date_published": "2014-08-14T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/smaller-volume-increments-in-os-x/",
      "url": "https://www.abeautifulsite.net/posts/smaller-volume-increments-in-os-x/",
      "title": "Smaller volume increments in macOS",
      "content_html": "<p>Ever wish you turn the volume up or down just a tiny bit more on your Mac? Well, you can.</p>\n<p>You already know you can increase and decrease your Mac's volume with the keyboard, but sometimes the intervals are a bit too much. I usually end up adjusting my external speakers just to get that perfect volume. But that's silly. There's a better way to fine-tune your volume without leaving the keyboard.</p>\n<p><img src=\"/images/volume-buttons.jpg\" alt=\"Photo of a macOS keyboard's volume buttons\"></p>\n<p>Simply pressing <kbd>option</kbd> + <kbd>shift</kbd> + <kbd>volume up/down</kbd> will result in quarter intervals, which means you can achieve that perfect volume without having to do secondary adjustments.</p>\n<p>What other hidden features of OS X have you come across? Give me something post-worthy and I'll write about it and credit you in the article.</p>\n",
      "date_published": "2014-08-13T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/link-to-a-specific-page-in-a-pdf-file/",
      "url": "https://www.abeautifulsite.net/posts/link-to-a-specific-page-in-a-pdf-file/",
      "title": "Link to a specific page in a PDF file",
      "content_html": "<p>Both Chrome and Firefox render PDF files in the browser, making them easier for users to view. Today I wanted to send someone a link to a certain page in a PDF user's manual. Here's how I did it.</p>\n<p>In HTML, you can link to a specific part of the page this using anchors. For example:</p>\n<pre><code class=\"language-html\">&lt;!-- page.html --&gt;\n&lt;h2 id=&quot;anchor-name&quot;&gt;Deep Linking Rocks!&lt;/h2&gt;\n\n&lt;!-- another-page.html --&gt;\n&lt;a href=&quot;page.html#anchor-name&quot;&gt;Go to it!&lt;/a&gt;\n</code></pre>\n<p>When you click the link, your browser will take you to the correct location in <code>page.html</code>, no matter how far down it is.</p>\n<p>But how do you do that with a PDF file? Well, we don't have access to any IDs so the best we can do is pick a page and link to that instead. Try this:</p>\n<pre><code class=\"language-html\">&lt;a href=&quot;document.pdf#page=10&quot;&gt;\n</code></pre>\n<p><a href=\"http://helpx.adobe.com/acrobat/kb/link-html-pdf-page-acrobat.html\">Per Adobe</a>, this will link the user to page 10 of <code>document.pdf</code> in Chrome and Firefox. Note that we're using a hash instead of a question mark—it's not actually query string even though it looks a lot like one.</p>\n<p>Alas, not all browsers open PDFs, so it's best to tell users which page they should look for in case they're using an unsupportive browser.</p>\n<p>As of this writing, Chrome and Firefox both handle this beautifully. Although Safari opens PDFs, it doesn't seem to acknowledge the hash. Of course, this will also work if the user has the Adobe Reader plugin installed.</p>\n",
      "date_published": "2014-08-13T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/lessons-from-my-20s-a-presentation-by-ryan-allis/",
      "url": "https://www.abeautifulsite.net/posts/lessons-from-my-20s-a-presentation-by-ryan-allis/",
      "title": "Lessons from my 20s: a presentation by Ryan Allis",
      "content_html": "<p>Author and entrepreneur <a href=\"https://twitter.com/ryanallis\">Ryan Allis</a> shares 1,264 slides about life, entrepreneurship, and the world.</p>\n<p>We all have goals, but sometimes they seem hard to reach. Really hard. Life happens and things get tough, but don't let it get you down. It's not impossible. It just means you'll have to work a little harder smarter.</p>\n<p>If you're like me, you're driven by aspiration, but it can be easy to get lost on the road to success. Sometimes, simply writing down your goals can make them that much more obtainable. It may sound silly, but it's been repeated by too many successful people to ignore, and Ryan Allis is one of them.</p>\n<blockquote>\n<p>The first ever goal I wrote down at age 16 was &quot;build a company to $1M in sales by 21. I missed this goal by 18 days.</p>\n</blockquote>\n<p><a href=\"http://hive.org/20s/\">In this monster presentation</a>, Ryan shares many experiences and provides great inspiration for anyone with an interest in running a successful business.</p>\n<p>It's a long read and lots of scrolling, so make sure you save it for later if you don't have the time to absorb it all today.</p>\n",
      "date_published": "2014-08-12T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/how-to-get-the-dominant-colors-of-an-image-with-color-thief/",
      "url": "https://www.abeautifulsite.net/posts/how-to-get-the-dominant-colors-of-an-image-with-color-thief/",
      "title": "How to get the dominant colors of an image with Color Thief",
      "content_html": "<p>You know how <a href=\"https://dribbble.com/\">Dribbble</a> shows a color palette for each shot users upload? They always look perfect right? Here's a tool that can give you the same quality results using pure JavaScript.</p>\n<p>I played with <a href=\"http://lokeshdhakar.com/projects/color-thief/\">Color Thief</a> a few months ago but surprisingly never posted about it. For me, something that's easy to use and has consistently great results is pure gold. Here's how it works.</p>\n<h2 id=\"getting-the-dominant-color-of-an-image\">Getting the dominant color of an image <a class=\"direct-link\" href=\"#getting-the-dominant-color-of-an-image\">#</a></h2>\n<pre><code class=\"language-js\">var colorThief = new ColorThief();\ncolorThief.getColor(sourceImage);\n\n// { r: num, g: num, b: num }\n</code></pre>\n<h2 id=\"generating-a-color-palette-from-an-image\">Generating a color palette from an image <a class=\"direct-link\" href=\"#generating-a-color-palette-from-an-image\">#</a></h2>\n<pre><code class=\"language-js\">var colorThief = new ColorThief();\ncolorThief.getPalette(sourceImage, 8);\n\n// [[num, num, num], [num, num, num], ...]\n</code></pre>\n<p>Learn more about <a href=\"http://lokeshdhakar.com/projects/color-thief/\">how Color Thief works</a> and try it out with your own photo. The project was created by <a href=\"https://twitter.com/lokesh\">Lokesh Dhakar</a> and licensed under the MIT license.</p>\n<h2 id=\"what-about-a-php-version%3F\">What about a PHP version? <a class=\"direct-link\" href=\"#what-about-a-php-version%3F\">#</a></h2>\n<p>It's amazing that JavaScript can do all these great things, but if you're running PHP on the backend then you're out of luck. In that case, there's a <a href=\"https://github.com/ksubileau/color-thief-php\">PHP port of Color Thief</a> that you can use for similar results.</p>\n",
      "date_published": "2014-08-12T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/playcanvas-an-easy-open-source-webgl-game-engine/",
      "url": "https://www.abeautifulsite.net/posts/playcanvas-an-easy-open-source-webgl-game-engine/",
      "title": "PlayCanvas: an easy, open source WebGL game engine",
      "content_html": "<p>Last week I wrote about <a href=\"http://www.abeautifulsite.net/faster-javascript-animations-with-velocityjs/\">faster JavaScript animations</a> using VelocityJS. As if that wasn't impressive enough, today I'm giving you a dose of HTML5 and WebGL greatness.</p>\n<p>The project is called <a href=\"https://playcanvas.com/\">PlayCanvas</a>, and it dubs itself an open source game engine that brings fun to the web.</p>\n<blockquote>\n<p>PlayCanvas is the world’s easiest to use WebGL Game Engine. It’s free, it’s open source and it’s backed by amazing developer tools.</p>\n</blockquote>\n<p>It also boasts partnerships with Mozilla, Activision, and ARM. How's that for momentum?</p>\n<p>So what's the big deal? Here's yet another great example of where the web and HTML is going. What started as a simple markup language has evolved into a platform for just about anything you can imagine. Take <a href=\"http://apps.playcanvas.com/playcanvas/swooop/swooop\">Swooop</a> for example, a game built with PlayCanvas whose graphics and gameplay had me convinced I was playing a Nintendo Wii.</p>\n<p>The game isn't elaborate—it was made to demonstrate what you can do with PlayCanvas, but it's stunning nevertheless. You navigate a biplane collecting jewels, stars, and fuel while avoiding clouds and other hazards. The plane circles a three dimensional island full of trees, houses, waterfalls, and rocks. In the distances there's even a windmill and a hot air balloon floating around. Here's an actual screenshot I took while playing:</p>\n<p><img src=\"/images/swooop-screenshot.jpg\" alt=\"Swooop screenshot\"></p>\n<p>Want to try it yourself? You can <a href=\"https://playcanv.as/p/JtL2iqIH/\">play Swooop right now</a> or explore some of the other <a href=\"https://playcanvas.com/explore\">user-contributed games</a>. Of course, many of these are unpolished games with simple objectives, so don't expect Xbox quality here. Think of it as a proof-of-concept.</p>\n<p>Cool, right? Here's one last gem for you: <a href=\"https://playcanv.as/p/NIbWnGY4/\">Lego Gangnam Style</a>.</p>\n<p>You may laugh, but pretty soon we'll be seeing entire movies in HTML/WebGL—we might even be able to make our own.</p>\n",
      "date_published": "2014-08-11T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/box-sizing-border-box-explained/",
      "url": "https://www.abeautifulsite.net/posts/box-sizing-border-box-explained/",
      "title": "box-sizing: border-box explained",
      "content_html": "<p>It's been over two years since Paul Irish <a href=\"http://www.paulirish.com/2012/box-sizing-border-box-ftw/\">famously posted</a> the box-sizing trick that would bring us back to the days of early Internet Explorer.</p>\n<h2 id=\"the-good-ol'-days\">The good ol' days <a class=\"direct-link\" href=\"#the-good-ol'-days\">#</a></h2>\n<p>You might remember how Internet Explorer 6 (quirks mode) and below did that whole <a href=\"http://en.wikipedia.org/wiki/Internet_Explorer_box_model_bug\">box model thing</a> wrong. If not, here's a refresher.</p>\n<p><a href=\"/images/box-model-comparison.png\"><img src=\"/images/box-model-comparison.png\" alt=\"A comparison of the W3C box model to that of old IE\"></a></p>\n<p>You might even remember what a pain it was to develop with. We're not talking about the days of <a href=\"http://www.sitepoint.com/web-foundations/internet-explorer-conditional-comments/\">conditional comments</a>, we're talking about the days of horrible CSS hacks littering stylesheets. You know, like this one:</p>\n<pre><code class=\"language-css\">div {\n    width: 100px;\n}\ndiv {\n    \\width: 140px;\n    w\\idth: 100px;\n}\n</code></pre>\n<p>This hack tricked older versions of Internet Explorer in such a way that the <code>div</code> would be the same width in IE and W3C-compliant browsers. (I don't think I need to go into detail about why this was a bad idea.)</p>\n<p>The funny thing is, we've more or less come full circle to the very model we were fighting against. You see, the <code>border-box</code> trick actually brings us back to the way old IE worked. And it's glorious. There's even <a href=\"http://css-tricks.com/international-box-sizing-awareness-day/\">a special day</a> for it.</p>\n<h2 id=\"how-it-works\">How it works <a class=\"direct-link\" href=\"#how-it-works\">#</a></h2>\n<p>The <code>border-box</code> trick effectively changes the way dimensions are measured for every element so it includes borders and padding. Here's the code, for reference:</p>\n<pre><code class=\"language-css\">*,\nhtml {\n  box-sizing: border-box;\n}\n*, *:before, *:after {\n  box-sizing: inherit;\n}\n</code></pre>\n<p>Think of it as a box model reset that will make you enjoy writing CSS. It's a tried and tested method that works all the way back to IE8, and is used in popular frameworks such as <a href=\"http://getbootstrap.com/\">Bootstrap</a>. There are no performance issues—it's like a little piece of magic on your webpage.</p>\n<h2 id=\"but-some-of-my-plugins-look-funny-now\">But some of my plugins look funny now <a class=\"direct-link\" href=\"#but-some-of-my-plugins-look-funny-now\">#</a></h2>\n<p>I've noticed this a few times before. If you're using a third party plugin whose styles rely on the <code>content-box</code> model, things might look a bit strange. To fix this, you can create an override class or apply the following styles directly to a parent element of the plugin:</p>\n<pre><code class=\"language-css\">.content-box,\n.content-box * {\n  box-sizing: content-box;\n}\n</code></pre>\n<div class=\"content-box\">\n  <!-- plugin HTML here -->\n</div>\n<p>This resets the container and everything inside to the default <code>box-sizing</code> model, so third-party plugins will render correctly.</p>\n<h2 id=\"pick-your-box-model\">Pick your box model <a class=\"direct-link\" href=\"#pick-your-box-model\">#</a></h2>\n<p>The two most common values for <code>box-sizing</code> are <code>border-box</code> and <code>content-box</code>, but another has been introduced more recently. As it's name implies, <code>padding-box</code> measures the element's width, height, and padding but not its border. (Support for the new property <a href=\"http://caniuse.com/css3-boxsizing\">isn't great yet</a>, so avoid using it for anything serious.)</p>\n<p>To better understand each property, here's a diagram for reference.</p>\n<p><a href=\"/images/box-sizing-comparison.png\"><img src=\"/images/box-sizing-comparison.png\" alt=\"A diagram showing the three values for box-sizing: content-box, border-box, and padding-box\"></a></p>\n<p>Oh, and before you ask: no, <a href=\"http://stackoverflow.com/questions/10808413/css3-box-sizing-margin-box-why-not\">there's no margin-box</a>.</p>\n",
      "date_published": "2014-08-08T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/give-your-jpegs-alpha-channels/",
      "url": "https://www.abeautifulsite.net/posts/give-your-jpegs-alpha-channels/",
      "title": "Give your JPEGs alpha channels",
      "content_html": "<p>If you need alpha transparency on the web, 24-bit PNGs are usually your best bet. The only problem is that PNGs are lossless and can grow in file size very quickly — much larger than your average JPEG. So what if there was a way for JPEGs to support alpha channels?</p>\n<p>I discovered this trick on <a href=\"http://w3.eleqtriq.com/2014/08/applying-alpha-channels-to-jpgs/\">eleqtriq</a>. The author demonstrates how you can embed a JPEG into an SVG and, with the clever use of a mask, simulate a JPEG with alpha transparency. Since <a href=\"http://caniuse.com/svg\">browser support for SVG</a> is pretty good, there's nothing stopping you from using this method right now.</p>\n<p>Cool trick, right? Check out <a href=\"http://w3.eleqtriq.com/2014/08/applying-alpha-channels-to-jpgs/\">Dirk Weber's blog</a> to see exactly how it's done.</p>\n",
      "date_published": "2014-08-07T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/how-to-get-faster-and-better-help-from-support/",
      "url": "https://www.abeautifulsite.net/posts/how-to-get-faster-and-better-help-from-support/",
      "title": "How to get faster and better help from support",
      "content_html": "<p>It's tempting to take out your frustrations on the support person answering your email, but don't send out a message raging about their incompetence. Don't tell them how their product sucks or doesn't work the way you expect it to. Don't TYPE IN ALL CAPS to make sure they understand that you're frustrated. It won't get you faster help—it just makes you look like an asshole.<br>\nI'm sure you've had your fair share of horrible customer experiences. It happens, but generally speaking, support teams want to help you resolve whatever issue you're having so you can continue using their product—and they want to do it as quickly as possible.</p>\n<p>Of course, support isn't an easy job. I've done my fair share in the past, and I still help out my own customers to this day. Let me just be clear about one thing: nobody contacts support because everything is fine.</p>\n<p>Here are some tips you can use to better your odds of getting a resolution on your first interaction with support.</p>\n<h2 id=\"explain-the-problem-clearly\">Explain the problem clearly <a class=\"direct-link\" href=\"#explain-the-problem-clearly\">#</a></h2>\n<p>What's obvious to you may not be obvious to the person reading your support ticket. Tell them exactly what's going on. Re-read what you wrote before sending it in and ask yourself if the following questions would make sense to another person:</p>\n<ul>\n<li>What were you trying to do?</li>\n<li>How did you try to do it?</li>\n<li>What did you expect to happen?</li>\n<li>What actually happened?</li>\n</ul>\n<p>In most cases, this would be enough information for me to resolve a support ticket. Don't have tunnel vision when you submit your request. The person on the other end may not know that you were in a certain screen or trying to do a certain task. A clear, concise explanation will alleviate questions that are otherwise obvious to you and can result in a faster resolution.</p>\n<h2 id=\"provide-step-by-step-instructions\">Provide step-by-step instructions <a class=\"direct-link\" href=\"#provide-step-by-step-instructions\">#</a></h2>\n<p>When applicable, provide a bulleted list of the steps you took to produce the error or problem. Unless they have a screen-sharing app, support has no way to see what you're seeing. Tell them what you click, type, or do in a simple list:</p>\n<ol>\n<li>Open the &quot;User&quot; tab</li>\n<li>Select the user named &quot;Bob&quot;</li>\n<li>Click the dropdown under &quot;User Options&quot;</li>\n<li>Select &quot;Delete User&quot;</li>\n<li>An error occurs stating that the user cannot be deleted</li>\n</ol>\n<p>Don't say something like, &quot;I tried to delete Bob but couldn't.&quot; There could be many ways to delete a user and the way you're doing it could be broken—or you could be doing it wrong. Supports needs to know how you're doing things to replicate and fix whatever the issue is.</p>\n<h2 id=\"act-like-a-decent-person\">Act like a decent person <a class=\"direct-link\" href=\"#act-like-a-decent-person\">#</a></h2>\n<p>It should go without saying, but some people still think that hiding behind their monitor and acting like a pretentious asshole is a great way to get help from support. Nothing personal, but the individual you're trying to get help from doesn't care if you're a CEO, a doctor, or the Pope. You're just a number, and reiterating how important you think you are doesn't do anything to get a faster resolution. Neither does sarcasm, name calling, or profanity.</p>\n<p>If you want to have a better support experience, just act like a decent human being. Throw a smiley in there to relieve the tension a bit. I guarantee you'll have a better shot at getting help if you don't act like a jerk. (Tip: I almost always pick the &quot;nice&quot; tickets before the &quot;mean&quot; ones and I pay more attention when those names come up again in the future.)</p>\n<h2 id=\"be-responsive\">Be responsive <a class=\"direct-link\" href=\"#be-responsive\">#</a></h2>\n<p>This is absolutely critical if the support team requires additional information or clarification from you. Make yourself available to answer any questions and aid them in resolving the problem. I've seen tickets sit open for weeks because the person who submitted it went on holiday or &quot;didn't have time&quot; to respond.</p>\n<p>Once your support ticket is in progress, you'll almost always see faster response times than when you submit a new ticket. Take advantage of it and respond as quickly as possible. The sooner you get back to them, the sooner they can get back to you.</p>\n<h2 id=\"talk-about-your-technology\">Talk about your technology <a class=\"direct-link\" href=\"#talk-about-your-technology\">#</a></h2>\n<p>If you're having a problem with software or a web app, tell the support team what operating system and version you're running. When applicable, do the same for your web browser. You'd be surprised how many times simply knowing this would have let me close out tickets on the first interaction. Many web apps include this information in their error reporting or ticketing systems—but it still doesn't hurt to provide it.</p>\n<p>If you don't know what operating system or browser you're using, you can find out by <a href=\"https://www.whatismybrowser.com/\">going here</a>.</p>\n<p>If you're submitting an issue about a web app, keep in mind that browser plugins and add-ons can cause mysterious things to happen. I've seen all sorts of seemingly unrelated things happen as a result of third-party plugins. Try disabling them before submitting a support ticket, or at least let the support person know which ones you have installed in case there's a known issue.</p>\n<h2 id=\"don't-paste-in-huge-amounts-of-text\">Don't paste in huge amounts of text <a class=\"direct-link\" href=\"#don't-paste-in-huge-amounts-of-text\">#</a></h2>\n<p>This is especially true if you're a developer. Don't paste in a megabyte of code or text to &quot;show&quot; support. It just makes the ticket harder to read. I get a certain tingling in my hand when I open a ticket that does this and it makes me want to skip forward to the next one. Please, for the love of everything sacred, use a service like <a href=\"http://pastebin.com/\">PasteBin</a>. If you don't want the information to be public, create a secure link using <a href=\"http://www.dropbox.com/\">Dropbox</a> or even send it as an email attachment.</p>\n<p>Whatever you do, don't start pasting globs of text into your support ticket. Keep the message area to a minimum and link to or attach supplemental information as needed.</p>\n<h2 id=\"know-when-to-mark-things-as-%22urgent%22\">Know when to mark things as &quot;urgent&quot; <a class=\"direct-link\" href=\"#know-when-to-mark-things-as-%22urgent%22\">#</a></h2>\n<p>It's true. Not every issue you submit to support is urgent, so think twice before you check that box or litter the subject line with words like &quot;critical&quot; and &quot;important.&quot;</p>\n<p>So when exactly is something urgent? It really depends on your circumstance. I have a user who puts &quot;urgent&quot; on pretty much every support ticket he opens up, and I would seldom consider any of his requests to be urgent. They're urgent to him, but to nobody else. This desensitizes the word whenever I see it attached to one of his tickets. Remember the boy who cried wolf?</p>\n<p>Think of it like this. If you're looking out your living room window and see a suspicious person walking down the street, you'd call the local police to give them a heads up (not urgent). But if you're looking out that same window and see a suspicious person breaking into your neighbor's house, you'd call 911 (urgent).</p>\n<p>Is your issue worth dialing your support team's 911 hotline? If so, it's probably urgent.</p>\n<h2 id=\"don't-email-your-password\">Don't email your password <a class=\"direct-link\" href=\"#don't-email-your-password\">#</a></h2>\n<p>A support person should never ask you for your password. They have ways of accessing your account securely without having you send your login credentials through a ticket system or email. Don't volunteer it to them, either, because every time they hit &quot;reply&quot; or &quot;forward&quot; your password might be getting sent across the Internet in plain-text.</p>\n<p>In some cases, like Media Temple, you'll need to generate a support pin to verify ownership of your account before calling. That's fine, because the pin is time-sensitive and can only be generated by you. However, they will never ask for your password in a support ticket or email.</p>\n<p>If you haven't already, you should probably train your brain to throw a red flag whenever anyone asks you for your password.</p>\n<h2 id=\"be-patient\">Be patient <a class=\"direct-link\" href=\"#be-patient\">#</a></h2>\n<p>Last but not least, give the support team time to respond. One of my services promises a 24-hour response time—and we deliver on that 99.9% of the time. That's not an easy feat for a bootstrapped company serving users all over the world, but it doesn't stop people from submitting multiple requests, often less than a couple hours apart.</p>\n<p>You have to have patience. Don't submit a ticket and immediately jump on Facebook, Twitter, and every other platform you can find to submit the same request. It's rude, it's annoying, and it requires more time for support to respond. It can also confuse teams who manage support differently through various channels.</p>\n<p>Remember, you're speaking with real people out there. Even though support issues can be difficult and frustrating, keep your cool, be responsive, and be polite. I promise, you'll get much better support that way!</p>\n",
      "date_published": "2014-08-05T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/swapping-variables-with-javascript/",
      "url": "https://www.abeautifulsite.net/posts/swapping-variables-with-javascript/",
      "title": "Swapping variables with JavaScript",
      "content_html": "<p>Swapping the value of two variables normally takes three lines and a temporary variable. What if I told you there was an easier way to do this with JavaScript?</p>\n<h2 id=\"traditional-method\">Traditional method <a class=\"direct-link\" href=\"#traditional-method\">#</a></h2>\n<p>The goal is to swap the values of <code>a</code> and <code>b</code>. The textbook method for doing this looks something like this:</p>\n<pre><code class=\"language-js\">var a = 1; \nvar b = 2;\nvar c;\n\nc = a;\na = b;\nb = c;\n</code></pre>\n<p>Of course, we've introduced another variable called <code>c</code> to temporarily store the original value of <code>a</code> during the swap. But can we do it without <code>c</code>?</p>\n<h2 id=\"one-line-method\">One-line method <a class=\"direct-link\" href=\"#one-line-method\">#</a></h2>\n<p>This trick uses an array to perform the swap. Take a second to wrap your head around it:</p>\n<pre><code class=\"language-js\">b = [a, a = b][0];\n</code></pre>\n<p>There are a few things happening here, so if you're still having trouble understanding how or why this works, I'll explain:</p>\n<ol>\n<li>We're utilizing an array where the first index is the value of <code>a</code> and the second index is the value of  <code>b</code></li>\n<li><code>a</code> is set to the value of <code>b</code> when the array is created</li>\n<li><code>b</code> is set to the first index of the array, which is  a</li>\n<li>MAGIC</li>\n</ol>\n<p>While this trick definitely saves you a few lines of code and a temp variable, be cautious when using it. It's doesn't help that whole code clarity thing.</p>\n<p>Want to learn another cool way to swap variables? If you're a math buff, you'll like the <a href=\"http://chris-taylor.github.io/blog/2013/02/25/xor-trick/\">xor trick</a>.</p>\n",
      "date_published": "2014-08-04T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/the-next-version-of-php-may-very-well-be-7/",
      "url": "https://www.abeautifulsite.net/posts/the-next-version-of-php-may-very-well-be-7/",
      "title": "The next version of PHP may very well be 7",
      "content_html": "<p>We've been hearing about PHP 6 since 2005, but nothing has been brought to fruition yet. In fact, the project was so plagued with problems that in 2010, <a href=\"http://www.computerworld.com/s/article/9222419/PHP_5.4_emerges_with_best_of_abandoned_PHP_6.0\">it was abandoned</a>. It almost felt like PHP would be perpetually stuck at version 5.</p>\n<p>Except now there's talk about another major release. It could be PHP 6, or maybe PHP 7. Between developers, there's <a href=\"https://wiki.php.net/rfc/php6\">a hot debate</a> over what the next major PHP release will be called.</p>\n<blockquote>\n<p>The reason why this question even comes up, is that there has been a previous attempt at a new major version, which was started in 2005 and abandoned in 2010 due to difficulties in the Unicode implementation. Apart from language-integrated Unicode support, most features added for that version were integrated either in PHP 5.3 or PHP 5.4.</p>\n<p>This previous attempt at a new major version was also developed under the name of PHP 6 and as such there are various resources referring to it, including a number of books. There is concern that there might be confusion between the abandoned previous attempt and the work that is currently happening.</p>\n</blockquote>\n<p>If you're not familiar with what happened with the original PHP 6, you can read more its unfortunate demise <a href=\"http://en.wikipedia.org/wiki/PHP#PHP_6_and_Unicode\">here</a>.</p>\n<p>Given that the entire Internet was anticipating a PHP version that will never actually ship, it's probably better to stick with PHP 7.</p>\n",
      "date_published": "2014-08-01T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/svg-has-a-logo/",
      "url": "https://www.abeautifulsite.net/posts/svg-has-a-logo/",
      "title": "SVG has a logo",
      "content_html": "<p>HTML5 was the first to get an <a href=\"http://www.w3.org/html/logo/\">official logo</a>. Web designers rejoiced, some even hacking together matching logos <a href=\"http://www.bobbyberberyan.com/2012/03/html-5-css-3-logos/\">for CSS</a>. But did you know that SVG also has an official logo, and it's—flowery?</p>\n<p><img src=\"/images/svg-logo.png\" alt=\"SVG logo (without text)\"></p>\n<p>The W3C describes it as:</p>\n<blockquote>\n<p>The flower-like structure of the SVG logo evokes creativity and growth, while the connected nodes indicate integration with other technologies.</p>\n</blockquote>\n<p>The logo was based off a design by <a href=\"http://www.root2art.co.uk/svg_logo_download/index.php\">Harvey Rayner</a>. According to the W3C:</p>\n<blockquote>\n<p>It was selected by the SVG Working Group from among hundreds of entries in a contest conducted in 2006 by supporters and vendors of the SVG format.</p>\n</blockquote>\n<p>It's a very symbolic representation of an otherwise difficult technology to sum up in an image. I'd say it's a decent fit, but the version without text might confuse people.</p>\n<p>What do you think of the SVG logo? Have you seen it used anywhere? I have to be honest, I'm on the Internet quite a bit and only stumbled across this yesterday. I wonder what other cool logos I'm missing out on.</p>\n",
      "date_published": "2014-08-01T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/a-user-interface-is-like-a-joke/",
      "url": "https://www.abeautifulsite.net/posts/a-user-interface-is-like-a-joke/",
      "title": "A user interface is like a joke",
      "content_html": "<p>When I hear a simile like this, it's hard to not share. It's not so much an analogy as it is a good rule of thumb:</p>\n<blockquote>\n<p>A user interface is like a joke. If you have to explain it, it's not that good.</p>\n</blockquote>\n<p>And I've heard some websites tell pretty bad jokes...</p>\n",
      "date_published": "2014-08-01T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/parsing-urls-in-javascript/",
      "url": "https://www.abeautifulsite.net/posts/parsing-urls-in-javascript/",
      "title": "Parsing URLs in JavaScript",
      "content_html": "<p>There's an excellent trick to <a href=\"https://gist.github.com/jlong/2428561\">parsing URLs in JavaScript</a>, which was introduced last year by John Long over on GitHub. This technique works great, but the resulting <code>search</code> property will be a raw query string. This isn't very useful if you need to access certain variables in said query string. Thus, the following function expands on this paradigm, providing an additional property that contains an object based on the original query string.</p>\n<pre><code class=\"language-js\">function parseURL(url) {\n\tconst parser = document.createElement('a');\n\tconst searchObject = {};\n\n\t// Let the browser do the work\n\tparser.href = url;\n\n\t// Convert query string to object for convenience\n\tconst queries = parser.search.replace(/^\\?/, '').split('&amp;');\n\tfor (let i = 0; i &lt; queries.length; i++) {\n\t\tconst split = queries[i].split('=');\n\t\tsearchObject[split[0]] = split[1];\n\t}\n\n\treturn {\n\t\tprotocol: parser.protocol,\n\t\thost: parser.host,\n\t\thostname: parser.hostname,\n\t\tport: parser.port,\n\t\tpathname: parser.pathname,\n\t\tsearch: parser.search,\n\t\tsearchObject: searchObject,\n\t\thash: parser.hash\n\t};\n}\n</code></pre>\n<p>Let's try it!</p>\n<pre><code class=\"language-js\">const url = parseURL('https://example.com/index.html?q=test');\n\nconsole.log(url);\n</code></pre>\n<p>And here's the result:</p>\n<pre><code class=\"language-js\">{\n\tprotocol: 'https:',\n\thost: 'example.com',\n\thostname: 'example.com',\n\tport: '',\n\tpathname: '/index.html',\n\tsearch: '?q=test',\n\tsearchObject: {\n    q: 'test'\n  },\n\thash: ''\n}\n</code></pre>\n",
      "date_published": "2013-10-24T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/an-icon-converter-that-supports-multiple-sizes-and-transparency/",
      "url": "https://www.abeautifulsite.net/posts/an-icon-converter-that-supports-multiple-sizes-and-transparency/",
      "title": "An icon converter that supports multiple sizes and transparency",
      "content_html": "<p>If you're looking for an online utility to convert JPEG, PNG, or GIF images to ICO format, here's one that does exactly that. It supports full transparency when converting 24-bit PNGs and even lets you combine multiple resolutions into one icon file — perfect for generating favicons.</p>\n<p>The name of the tool is <a href=\"http://www.icoconverter.com/\">ICO Converter</a> and, while the design of the page isn't very flashy, it works exceptionally well. Give it a try and start making some icons!</p>\n",
      "date_published": "2013-09-19T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/validating-urls-and-email-addresses-in-php/",
      "url": "https://www.abeautifulsite.net/posts/validating-urls-and-email-addresses-in-php/",
      "title": "Validating URLs and email addresses in PHP",
      "content_html": "<p>This is a simple method for validating both email addresses and URLs. Using PHP's <code>filter_var()</code> function, it's actually very easy and doesn't require regular expressions. The following wrapper functions force a true boolean response, so you can use them safely in your logic.</p>\n<h2 id=\"email-addresses\">Email addresses <a class=\"direct-link\" href=\"#email-addresses\">#</a></h2>\n<pre><code class=\"language-php\">function is_email($email) {\n  return filter_var($email, FILTER_VALIDATE_EMAIL) !== false;\n}\n</code></pre>\n<h2 id=\"urls\">URLs <a class=\"direct-link\" href=\"#urls\">#</a></h2>\n<pre><code class=\"language-php\">function is_url($url) {\n  return filter_var($url, FILTER_VALIDATE_URL) !== false;\n}\n</code></pre>\n<p>If you choose to not use the wrappers, just remember that <code>filter_var()</code> doesn't always return a boolean value. It will return the original string on success, and <code>false</code> on failure..</p>\n",
      "date_published": "2013-09-18T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/semantic-version-numbers/",
      "url": "https://www.abeautifulsite.net/posts/semantic-version-numbers/",
      "title": "Semantic version numbers",
      "content_html": "<p>Gone are the days of arbitrarily assigning version numbers to every new software release. With <a href=\"http://semver.org/\">semantic versioning</a>, the question of how and when to bump versions is made simple.</p>\n<p>According to <a href=\"http://semver.org/\">semver.org</a>, the syntax for version numbers should go like this: <code>MAJOR.MINOR.PATCH</code></p>\n<p>When you release a new version, it's easy to determine which numbers to increment:</p>\n<ol>\n<li><code>MAJOR</code> version when you make incompatible API changes,</li>\n<li><code>MINOR</code> version when you add functionality in a backwards-compatible manner, and</li>\n<li><code>PATCH</code> version when you make backwards-compatible bug fixes.</li>\n</ol>\n<p>The entire spec is actually quite short and simple (for a spec), but the concepts therein will [hopefully] change the way developers version their software in the future. While many projects already follow similar conventions, there are still many that don't. This is especially true in the case of smaller projects, where developers seem to arbitrarily bump version numbers without considering the impact such changes may have on their users.</p>\n<p>If you don't have an existing standard for versioning your software, help make the world a better place and consider adopting SemVer in your next project!</p>\n",
      "date_published": "2013-08-21T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/theres-a-reason-that-bootstrap-3-has-ugly-buttons/",
      "url": "https://www.abeautifulsite.net/posts/theres-a-reason-that-bootstrap-3-has-ugly-buttons/",
      "title": "There&#39;s a reason that Bootstrap 3 has ugly buttons",
      "content_html": "<p>It's true. Everyone loves Bootstrap's buttons...at least they did until <a href=\"http://blog.getbootstrap.com/2013/08/19/bootstrap-3-released/\">3.0 came out</a>.</p>\n<p>But before you get upset at <a href=\"https://twitter.com/mdo\">@mdo</a> and <a href=\"https://twitter.com/fat\">@fat</a> for what many mistake to be a move towards the anti-skeuomorphic design trend, you should realize there's more than meets the eye behind the decision to make buttons flat and &quot;ugly&quot; in Bootstrap 3.</p>\n<p><img src=\"/images/bootstrap-buttons.png\" alt=\"Bootstrap 3 default buttons\"></p>\n<p>As Mark Otto <a href=\"https://github.com/twbs/bootstrap/pull/6342#issuecomment-12332378\">stated</a> on GitHub while Bootstrap 3 was under development:</p>\n<blockquote>\n<p>Gradients and other embellishments have temporarily been removed while I focus on other things. It has nothing to do with skeuomorphism or anything like that.</p>\n</blockquote>\n<p>There were plenty of follow ups, both for and against the flat, gradient-less buttons. Unfortunately, what a lot of folks don't realize is that Bootstrap is intended to be a <em>starting point</em> for their projects, not an end-all solution for front-end development. In other words, Bootstrap is <em>supposed</em> to be customized, and adding gradients and other arbitrary styles to the core simply makes that harder to do.</p>\n<p>Aside from that, when things look too good out-of-the-box, people tend to leave them that way. We saw that so much with Bootstrap 2.x that it spawned blog posts imploring people to <a href=\"http://css.dzone.com/articles/please-stop-using-twitter\">stop using Bootstrap</a> (or at least <a href=\"http://peteschuster.com/2013/06/stop-using-bootstrap-and-start-using-bootstrap/\">start using it right</a>).</p>\n<p>Ultimately, Bootstrap 3 encourages people to customize their implementation, and that's a good thing.</p>\n<h2 id=\"a-less-mixin'-for-prettier-buttons\">A Less Mixin' for Prettier Buttons <a class=\"direct-link\" href=\"#a-less-mixin'-for-prettier-buttons\">#</a></h2>\n<p>If you long for the good ol' days of beautiful Bootstrap buttons, I may have a solution that you'll like. It's a <a href=\"https://gist.github.com/claviska/6117193\">Less mixin' for buttons</a>, designed specifically for Bootstrap 3. It's easy to use and customize. Use it in conjunction with Bootstrap's Less files and you'll have nice, customized buttons with minimal effort. Here's a sample:</p>\n<p><img src=\"/images/bootstrap-buttons-mixin.png\" alt=\"Bootstrap 3 pretty buttons\"></p>\n<p>This mixin' works in conjunction with default Bootstrap 3 styles, so you can change pretty much anything with ease. Consider this Gist a public domain offering, and use it however you like.</p>\n",
      "date_published": "2013-08-20T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/whipping-file-inputs-into-shape-with-bootstrap-3/",
      "url": "https://www.abeautifulsite.net/posts/whipping-file-inputs-into-shape-with-bootstrap-3/",
      "title": "Whipping file inputs into shape with Bootstrap",
      "content_html": "<p>There are <a href=\"http://www.quirksmode.org/dom/inputfile.html\">many</a>, <a href=\"https://coderwall.com/p/4etjja\">many</a>, <a href=\"http://viget.com/inspire/custom-file-inputs-with-a-bit-of-jquery\">many</a> ways to hack a file input so it looks and behaves consistently across all browsers. There's even a pretty <a href=\"http://markusslima.github.io/bootstrap-filestyle/\">slick plugin</a> to help get the job done. Unfortunately, most of these solutions are cumbersome, prone to cross-browser issues, and require JavaScript.</p>\n<p>Today, I would like to propose a more fundamental approach for file inputs in Bootstrap 3 and 4.</p>\n<h2 id=\"modern-approach-(ie9%2B)\">Modern approach (IE9+) <a class=\"direct-link\" href=\"#modern-approach-(ie9%2B)\">#</a></h2>\n<p>Let's start by nesting a button inside a <code>&lt;label&gt;</code>, adding the appropriate button classes to style it as we want:</p>\n<pre><code class=\"language-html\">&lt;label class=&quot;btn btn-default btn-file&quot;&gt;\n  Browse &lt;input type=&quot;file&quot; style=&quot;display: none;&quot;&gt;\n&lt;/label&gt;\n</code></pre>\n<h2 id=\"legacy-approach-(ie8-and-below)\">Legacy approach (IE8 and below) <a class=\"direct-link\" href=\"#legacy-approach-(ie8-and-below)\">#</a></h2>\n<p>If you need support for old IE, you can use this legacy approach. Instead of a <code>&lt;label&gt;</code>, wrap your button in a <code>&lt;span&gt;</code>:</p>\n<pre><code class=\"language-html\">&lt;span class=&quot;btn btn-default btn-file&quot;&gt;\n  Browse &lt;input type=&quot;file&quot;&gt;\n&lt;/span&gt;\n</code></pre>\n<p>And then apply the following CSS:</p>\n<pre><code class=\"language-css\">.btn-file {\n  position: relative;\n  overflow: hidden;\n}\n\n.btn-file input[type=file] {\n  position: absolute;\n  top: 0;\n  right: 0;\n  min-width: 100%;\n  min-height: 100%;\n  font-size: 100px;\n  text-align: right;\n  filter: alpha(opacity=0);\n  opacity: 0;\n  outline: none;\n  background: white;\n  cursor: inherit;\n  display: block;\n}\n</code></pre>\n<h2 id=\"customizing-the-button's-appearance\">Customizing the button's appearance <a class=\"direct-link\" href=\"#customizing-the-button's-appearance\">#</a></h2>\n<p>So far so good. Whether you're using the modern approach or the legacy approach, clicking on the &quot;button&quot; will trigger the file input. As a bonus, it will also acquire the <code>:hover</code> and <code>:active</code> pseudo classes so it behaves like a real button too.</p>\n<p>You can use these buttons like you normally would…by themselves, in a button group, or even in an input group.</p>\n<p><img src=\"/images/bootstrap-file-input-example.png\" alt=\"\"></p>\n<h2 id=\"providing-feedback\">Providing feedback <a class=\"direct-link\" href=\"#providing-feedback\">#</a></h2>\n<p>Now with the hard part out of the way, it's a good practice to provide users with a bit of feedback about their selection. A touch of jQuery magic will keep an eye on your file inputs and fire an event called <code>fileselect</code> when a file is chosen:</p>\n<pre><code class=\"language-js\">$(document).on('change', ':file', function() {\n  var input = $(this);\n  var numFiles = input.get(0).files ? input.get(0).files.length : 1;\n  var label = input.val().replace(/\\\\/g, '/').replace(/.*\\//, '');\n  input.trigger('fileselect', [numFiles, label]);\n});\n</code></pre>\n<p>Here's an example to demonstrate the event:</p>\n<pre><code class=\"language-js\">$(document).ready(function() {\n  $(':file').on('fileselect', function(event, numFiles, label) {\n    console.log(numFiles);\n    console.log(label);\n  });\n});\n</code></pre>\n<p>You can use the <code>numFiles</code> or <code>label</code> parameter to show users the name of the file that was selected and, if applicable, how many. Alternatively, you could elect to use the standard <strong>change</strong> event and handle the label yourself.</p>\n<p>This method was tested to work in IE8–IE11 and recent versions of Chrome, Safari, Firefox, and Opera.</p>\n<h2 id=\"see-it-in-action\">See it in action <a class=\"direct-link\" href=\"#see-it-in-action\">#</a></h2>\n<p>For a live demo that you can tinker with, <a href=\"http://codepen.io/claviska/pen/vAgmd/\">view the demo CodePen</a>.</p>\n<p><em>May 20, 2016: added the modern approach and updated the demo.</em></p>\n",
      "date_published": "2013-08-08T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/tips-for-the-aspiring-web-developer/",
      "url": "https://www.abeautifulsite.net/posts/tips-for-the-aspiring-web-developer/",
      "title": "Tips for the aspiring web developer",
      "content_html": "<p>So you want to be a web developer...excellent choice! It's a very rewarding position that can be a lot more fun than most other programming jobs. However, before you take the plunge into a career in web development, there are a few things you should probably consider.</p>\n<h2 id=\"a-different-way-of-life\">A different way of life <a class=\"direct-link\" href=\"#a-different-way-of-life\">#</a></h2>\n<p>I'm not going to start by telling you that you'll be working in at least five different programming languages on a daily basis. Nor am I going to talk about the rapidly changing technologies and standards that you'll need to keep up with. And I'm not even going to mention the multitude of browser quirks that will keep you up into early hours of the morning. All that will come with experience. My goal is to help you understand the type of career—or perhaps the lifestyle—that you're about to undertake.</p>\n<p>As a web developer, the type of organization you work for makes a huge difference in how your career will evolve. Chances are, if you're seriously considering web development as a career, you've already spent some of your own time dabbling in HTML, CSS, JavaScript, and one or more server-side scripting languages. You probably discovered how much fun it can be to make something that millions of people could potentially see. If so, you have passion...and that's a good thing.</p>\n<h2 id=\"it's-ok-to-be-passionate\">It's ok to be passionate <a class=\"direct-link\" href=\"#it's-ok-to-be-passionate\">#</a></h2>\n<p>Passion drives creativity. It's what keeps you working on something for hours on end simply because you want to. It's what eats away at your nights and weekends. It's what sucks the spirit out of your social life. If you don't have that drive, chances are you're not going to enjoy being a web developer.</p>\n<p>In my experience, passionate people tend to have their own way of doing things. The countless hours they spend educating themselves outside the realm of academia gives them insight that people without that dedication will never understand. They change their methods as technology evolves, are generally forward-thinking, and appreciate the &quot;laws&quot; of the web. They take their time to do things right. They care about quality, their user's experience, and the final product. Employers don't always like that, but that doesn't mean it's a bad thing.</p>\n<h2 id=\"%22right%22-is-not-always-right\">&quot;Right&quot; is not always right <a class=\"direct-link\" href=\"#%22right%22-is-not-always-right\">#</a></h2>\n<p>Over the past decade, I've had the opportunity to work (as a web developer) for a manufacturing company, an academic institution, numerous web design firms (as a contractor), and for myself. I surround myself as much as possible with individuals who are in the same field as I am. Through many experiences and many discussions, I've come to realize that doing the &quot;right&quot; thing is not always what employers want you to do, particularly when budgets and deadlines are involved.</p>\n<p>That's a hard realization to come to when you're passionate about what you do. Maybe you wanted to spend extra time refactoring that code you wrote—it &quot;works&quot;, but there's a better way to do it—except the budget doesn't allow for it. Maybe the client needed it out yesterday and you don't have time to finish polishing off the interface you've been working on. Everyone's going to know you're responsible for it, but it's not perfect yet and people may think your work is substandard. These things can be hard to deal with as a developer, so be prepared to sacrifice the quality of your work—or put in extra time off-the-clock—when budgets and timelines don't permit.</p>\n<h2 id=\"never-stop-learning\">Never stop learning <a class=\"direct-link\" href=\"#never-stop-learning\">#</a></h2>\n<p>Where you work also plays a role in how your skills as a web developer evolve. Organizations tend to have their own standards and best practices in place that may or may not be as current as the rest of the world. I've seen design firms who are at least 10 years behind in their development methodologies. Their employees aren't encouraged and, in some cases, aren't permitted to use modern technologies and techniques. While this is obviously terrible for the organization, it's also detrimental to the development of its employees.</p>\n<p>If you find yourself in this position at any point in your career, you should talk to your management about the policies that are holding your organization back. If they're too close-minded to consider anything outside their comfort zone, it may be time to find a position elsewhere. When there's no opportunity to learn new things, you'll likely get burned out and fall behind new trends in technology. That makes you less attractive to future employers, and overall, it's really not much fun.</p>\n<p>Additionally, it's OK to make mistakes provided you learn from them. Always, always, always learn from your mistakes. And don't be afraid to admit when you screw up. You're human. It will happen. Owning up to things will garner you far more respect and wisdom than placing the blame on someone or something else.</p>\n<h2 id=\"be-prepared-to-give-up-sleep\">Be prepared to give up sleep <a class=\"direct-link\" href=\"#be-prepared-to-give-up-sleep\">#</a></h2>\n<p>There have been many, many, many nights where I've watched the sun set, then rise, and then set again. It doesn't happen every day, but it happens. It's something you have to expect as a developer. Whether it's your own product launch or a really long workday that got prolonged because a server crashed, it's going to happen.</p>\n<p>Even when I had an eight-to-five job, there were still nights where important things needed to be done. A lot of times that meant working through the night. In fact, many tech positions share this quality, and developers are definitely no exception.</p>\n<h2 id=\"find-a-routine\">Find a routine <a class=\"direct-link\" href=\"#find-a-routine\">#</a></h2>\n<p>It's not always possible, but following a routine as often as you can will reduce stress, anxiety, and fatigue. Eat at the right times and try to get enough sleep. If you get caught up in a day from hell that shatters your daily routine (which you will at some point), do what you can to get back on track.</p>\n<p>I can't stress this point enough.</p>\n<p>Put down your phone when it's bedtime. Wake up when your alarm goes off. If you set aside some time for your significant other or your friends, give yourself that time to recenter. This may seem to contradict some of the points I've made previously, but this type of career isn't just a career—it's a lifestyle. You have to know how to balance things. Realize your limits and know when to keep going, but also know when to stop.</p>\n<p>It's not as easy as it sounds. In fact, it's something that I continue to have problems with after many years in the field. However, when I do get back into a routine, I notice a clear difference in my attitude, health, performance, and overall well-being. This is really more of an issue for freelancers and startups, but even the eight-to-fiver can benefit from following a good daily routine.</p>\n<h2 id=\"exercise-your-mind-and-your-body\">Exercise your mind and your body <a class=\"direct-link\" href=\"#exercise-your-mind-and-your-body\">#</a></h2>\n<p>This is another thing that a lot of web developers who I meet seem to neglect. No matter how many hours you spend doing it, a code marathon isn't going to make your body healthy. And if your body isn't healthy, your mind will suffer.</p>\n<p>Make it part of your routine. Spend at least 30 minutes a day doing some kind of exercise. Even if you just walk around outside for 30 minutes, it's better than nothing.</p>\n<h2 id=\"get-in-the-zone\">Get in the zone <a class=\"direct-link\" href=\"#get-in-the-zone\">#</a></h2>\n<p>Any web developer knows what it's like, and how frustrating it can be when a distraction takes you out of the zone and blows your developmental buzz. Discover what helps you get in the zone and make it happen. Turn on the right type of music (to me, techno does the trick; anything else and I find myself getting caught up in the lyrics). Turn off your email and only check it at scheduled times. Turn off your cell phone (Android and iOS both have awesome do-not-disturb features). Turn off your instant messager.</p>\n<p>Find your zen. Become one with your code. And then watch your productivity rage.</p>\n<h2 id=\"keep-your-drive\">Keep your drive <a class=\"direct-link\" href=\"#keep-your-drive\">#</a></h2>\n<p>No matter where you work or who you work for, it's important to keep your drive. A successful developer will put in the extra hours to make an amazing product that impresses his manager and clients. Don't get discouraged by a missed deadline—rectify it and explain how you needed the extra time to finish it properly...then try harder to be punctual next time. Learn new things as much as possible and integrate them into your projects when applicable. This keeps you up to date with technology and makes you more valuable to potential employers. If your organization fears new technology, stand up for what you believe in and encourage them to evolve their policies and practices.</p>\n<p>Just remember, the job you have now is just a stepping stone in the river of your career. Don't let anyone pull you into the water and drown out your dreams.</p>\n",
      "date_published": "2012-12-17T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/down-with-the-share-widget/",
      "url": "https://www.abeautifulsite.net/posts/down-with-the-share-widget/",
      "title": "Down with the share widget!",
      "content_html": "<p>In a world dominated by social media, it's natural to want visitors to share your content with friends and followers. This really isn't a bad thing, but how you go about encouraging them can actually be <em>discouraging</em>.</p>\n<h2 id=\"the-rise-of-the-%22share%22-widget\">The rise of the &quot;share&quot; widget <a class=\"direct-link\" href=\"#the-rise-of-the-%22share%22-widget\">#</a></h2>\n<p>Six years ago, Twitter <em>wasn't</em> all over the news. Facebook had <em>just</em> opened itself up to any user over the age of 13. You didn't see social media logos on television commercials or on every box of cereal at the supermarket. The guy on the radio wasn't screaming at you to &quot;like&quot; this and that. Those were the good old days.</p>\n<p>Today, everyone from the kid next door to <a href=\"http://twitter.com/pontifex\">the pope</a> has a Twitter account. Major retailers and brands are reaching out to their customers through Facebook, providing them with offers and incentives faster than they ever could before. Companies are tackling customer support by responding within hours or even minutes to angry consumers who voice their opinions to the world. Social media is good stuff, and even our technophobic grandmothers are getting on board.</p>\n<p>The point is, everyone knows about social media now. It's built into our desktops, tablets, and phones. There are a multitude of apps that make posting content to your favorite service a breeze. So why are we still plastering &quot;share&quot; widgets all over our sites?</p>\n<p>I was recently speaking with a good friend of mine about this. We both have websites, and we both had those tacky, distracting &quot;share&quot; widgets on them at some point. We were social when social wasn't cool.</p>\n<p>But now, it seems like every site we come across has some kind of obtrusive social-sharing widget included on every single page. <em>Share this, tweet that, blah, blah, blah</em>...it's just as distracting and tacky as a big ugly banner ad—and people become desensitized by that sort of thing.</p>\n<h2 id=\"it's-usually-not-worth-it\">It's usually not worth it <a class=\"direct-link\" href=\"#it's-usually-not-worth-it\">#</a></h2>\n<p>That's a pretty bold statement, but let's use the very popular tech blog <a href=\"http://mashable.com/\">Mashable</a> as an example. Mashable reaches out to tech nuts—people who use social media on an unhealthy basis. There's no shortage of social media sharing in Mashable's audience, so if anyone can pull this off, it would be them.</p>\n<p>Considering Mashable <a href=\"http://mashable.com/about/\">boasts</a> 20 million monthly visitors (as well as six million social media followers), you'd think their &quot;share&quot; widgets would have staggering numbers. On the contrary, the average post only appears to get between 500 and 900 collective &quot;shares&quot; in its first 48 hours of existence (an article's prime exposure period). Here's an example from an article posted a couple days ago:</p>\n<p><img src=\"/images/mashable-share.png\" alt=\"Mashable's share widget\"></p>\n<p>While it's impossible to determine the actual number of visits to each article on Mashable, it quickly becomes obvious that the percentage of visitors who bother sharing them is extremely low.</p>\n<p>If a news giant such as Mashable—who garners over 20 million visitors a month—can only pull in a few thousand shares per article, how many do you think your site will be able to pull in?</p>\n<h2 id=\"encourage-them-without-encouraging-them\">Encourage them without encouraging them <a class=\"direct-link\" href=\"#encourage-them-without-encouraging-them\">#</a></h2>\n<p>So how do you encourage users to share your content without slapping an annoying badge or button on your site? The answer comes down to the most fundamental rule of successful bloggers:</p>\n<p><em>Post awesome stuff that people want to read!</em></p>\n<p>No matter how many &quot;like&quot; or &quot;share&quot; widgets you put on your page, if your content sucks, people aren't going to pass it along to their friends. But if your content is interesting, people will share it whether or not those widgets even exist.</p>\n<p>If you think it's all about making it easier for users to share your content...think again. Social integration is built right into most devices these days. You can Tweet directly from the <a href=\"http://www.cultofmac.com/194772/enable-twitter-in-mountain-lion-notification-center-os-x-tips/\">Notification Center</a> in OS X. iOS has both <a href=\"http://mashable.com/2011/06/06/apple-twitter-ios5/\">Twitter</a> and <a href=\"http://mashable.com/2012/06/11/apple-facebook/\">Facebook</a> integrated right into the operating system. Windows 8 connects with those and many more services through its <a href=\"http://www.pcworld.com/article/2013554/windows-8-deep-dive-get-to-know-the-people-app.html\">People App</a>. And all of that goes without mentioning the <a href=\"https://play.google.com/store/apps/category/SOCIAL?feature=category-nav\">many</a>, <a href=\"https://itunes.apple.com/us/genre/ios-social-networking/id6005?mt=8\">many</a> apps that are available on every platform to do the very same things.</p>\n<p>Six years ago, when the average person had no idea what social media was, &quot;share&quot; widgets became a fad. Now, since social media is more than apparent in all our lives, they serve little more than to beg people to do something they would already have done if they really wanted to. Remember, quality is far more important than quantity when it comes to blogging. Besides, wouldn't you rather have people <em>want</em> to share your content instead of <em>begging</em> them to?</p>\n",
      "date_published": "2012-12-14T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/feature-detection-for-css-transitions-via-jquery-support/",
      "url": "https://www.abeautifulsite.net/posts/feature-detection-for-css-transitions-via-jquery-support/",
      "title": "Feature detection for CSS transitions via jQuery $.support",
      "content_html": "<p>When working with CSS transitions, the need to detect whether or not the browser supports them may arise.  It can be of particular use when working with the <a href=\"https://developer.mozilla.org/en-US/docs/CSS/Using_CSS_transitions#Detecting_the_completion_of_a_transition\"><code>transitionend</code></a> event, which won't fire in unsupportive browsers.</p>\n<p>After finding a number of questionable solutions, I came across this <a href=\"https://gist.github.com/373874\">gist</a> that extends jQuery's <code>$.support</code> nicely.</p>\n<pre><code class=\"language-js\">$.support.transition = (function(){\n  var thisBody = document.body || document.documentElement,\n    thisStyle = thisBody.style,\n    support = thisStyle.transition !== undefined || thisStyle.WebkitTransition !== undefined || thisStyle.MozTransition !== undefined || thisStyle.MsTransition !== undefined || thisStyle.OTransition !== undefined;\n  return support;\n})();\n</code></pre>\n<p>The value of <code>$.support.transition</code> will be <code>true</code> or <code>false</code> depending on the browser's capabilities.</p>\n",
      "date_published": "2012-12-09T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/access-pages-without-the-php-extension-using-htaccess/",
      "url": "https://www.abeautifulsite.net/posts/access-pages-without-the-php-extension-using-htaccess/",
      "title": "Access pages without the php extension using .htaccess",
      "content_html": "<p>There are a number of ways to make &quot;clean URLs&quot; work on your site, but this one is pretty straight forward.  It allows you to access <code>/any-page.php</code> by simply going to <code>/any-page</code>.  Just place the following into your <code>.htaccess</code> file (and make sure that <code>mod_rewrite</code> is enabled):</p>\n<pre><code>RewriteEngine On\nRewriteCond %{SCRIPT\\_FILENAME} !-d\nRewriteRule ^(\\[^.\\]+)$ $1.php \\[NC,L\\]\n</code></pre>\n<p>The nice thing about this is that it doesn't affect querystrings.  With this solution, both of these URLs are effectively the same:</p>\n<pre><code>http://example.com/page.php?id=123\n\nhttp://example.com/page?id=123\n</code></pre>\n<p>Of course, the caveat is that you don't have &quot;clean querystrings&quot;, but it's a reasonable trade-off between &quot;clean&quot; and configuration.</p>\n",
      "date_published": "2012-02-03T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/detecting-mobile-devices-with-javascript/",
      "url": "https://www.abeautifulsite.net/posts/detecting-mobile-devices-with-javascript/",
      "title": "Detecting mobile devices with JavaScript",
      "content_html": "<p>While I understand and value the concept of feature detection over browser detection, sometimes the need for knowing whether or not we're dealing with a mobile device arises. For in-depth device checking, you can rely on a complex library such as <a href=\"http://blog.mobileesp.com/\">The MobileESP Project</a>. But for simpler applications, the following snippet can be useful.</p>\n<pre><code class=\"language-js\">var isMobile = {\n  Android: function() {\n    return navigator.userAgent.match(/Android/i);\n  },\n  BlackBerry: function() {\n    return navigator.userAgent.match(/BlackBerry/i);\n  },\n  iOS: function() {\n    return navigator.userAgent.match(/iPhone|iPad|iPod/i);\n  },\n  Opera: function() {\n    return navigator.userAgent.match(/Opera Mini/i);\n  },\n  Windows: function() {\n    return navigator.userAgent.match(/IEMobile/i);\n  },\n  any: function() {\n    return (\n      isMobile.Android() ||\n      isMobile.BlackBerry() ||\n      isMobile.iOS() ||\n      isMobile.Opera() ||\n      isMobile.Windows()\n    );\n  }\n};\n</code></pre>\n<p>While this doesn't account for <em>all</em> mobile platforms, it will pick up the most popular ones out there.</p>\n<h2 id=\"examples\">Examples <a class=\"direct-link\" href=\"#examples\">#</a></h2>\n<p>To check to see if the user is on any of the supported mobile devices:</p>\n<pre><code class=\"language-js\">if (isMobile.any()) {\n  alert('Mobile');\n}\n</code></pre>\n<p>To check to see if the user is on a specific mobile device:</p>\n<pre><code class=\"language-js\">if (isMobile.iOS()) {\n  alert('iOS');\n}\n</code></pre>\n",
      "date_published": "2011-11-23T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/redirecting-to-and-from-the-www-subdomain-with-htaccess/",
      "url": "https://www.abeautifulsite.net/posts/redirecting-to-and-from-the-www-subdomain-with-htaccess/",
      "title": "Redirecting to and from the www subdomain with .htaccess",
      "content_html": "<p>Here are a few snippets that will come in handy if you ever need to redirect <a href=\"http://www.example.com\">www.example.com</a> to <a href=\"http://example.com\">example.com</a> or vice versa.  There are a number of similar methods out there, but I prefer these as you don't need to modify anything between development and production.</p>\n<pre><code class=\"language-apacheconf\"># www.domain.com → domain.com\n&lt;IfModule mod_rewrite.c&gt;\n  RewriteCond %{HTTPS} !=on\n  RewriteCond %{HTTP_HOST} ^www.(.+)$ [NC]\n  RewriteRule ^ http://%1%{REQUEST_URI} [R=301,L]\n&lt;/IfModule&gt;\n\n# domain.com → www.domain.com\n&lt;IfModule mod_rewrite.c&gt;\n  RewriteEngine On\n  RewriteCond %{HTTPS} !=on\n  RewriteCond %{HTTP_HOST} !^www..+$ [NC]\n  RewriteRule ^ http://www.%{HTTP_HOST}%{REQUEST_URI} [R=301,L]\n&lt;/IfModule&gt;\n</code></pre>\n<p>If you plan on using these, you'll need to make sure you have the <a href=\"http://httpd.apache.org/docs/current/mod/mod_rewrite.html\">mod_rewrite module</a> enabled on your server.</p>\n",
      "date_published": "2011-11-17T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/the-simple-image-library-for-php/",
      "url": "https://www.abeautifulsite.net/posts/the-simple-image-library-for-php/",
      "title": "The SimpleImage library for PHP",
      "content_html": "<p>If you love working with PHP but hate the GD library, you'll love the Simple Image PHP class I'm releasing today. This class takes the headache out of dealing with images and features over 25 useful methods.</p>\n<p>The class is incredibly simple to use.  The following two lines will load <strong>image.jpg</strong>, flip it horizontally, rotate it 90 degrees, shrink it to fit within a 320x200 box, apply a sepia effect, convert it to a GIF, and save it to <code>result.gif</code>:</p>\n<pre><code class=\"language-php\">$img = new SimpleImage('image.jpg');\n$img-&gt;flip('x')-&gt;rotate(90)-&gt;best_fit(320, 200)-&gt;sepia()-&gt;save('result.gif');\n</code></pre>\n<p>Here's a list of the supported methods:</p>\n<ul>\n<li><code>flip()</code> - flips an image vertically or horizontally</li>\n<li><code>rotate()</code> - rotates an image at the specified angle</li>\n<li><code>auto_orient()</code> - adjusts the orientation based on the image's EXIF data</li>\n<li><code>resize()</code> - resizes an image to the specified width/height</li>\n<li><code>fit_to_width()</code> - proportionally resizes an image to the specified width</li>\n<li><code>fit_to_height()</code> - proportionally resizes an image to the specified height</li>\n<li><code>best_fit()</code> - proportionally resizes an image to fit within the specified width/height</li>\n<li><code>crop()</code> - crop an image from x1/y1 to x2/y2</li>\n<li><code>square_crop()</code> - trim the image to a square and resize to the specified size</li>\n<li><code>desaturate()</code> - convert the image to grayscale</li>\n<li><code>invert()</code> - invert the image</li>\n<li><code>brightness()</code> - adjust the image's brightness</li>\n<li><code>contrast()</code> - adjust the image's contrast</li>\n<li><code>colorize()</code> - apply the colorize filter</li>\n<li><code>edges()</code> - apply the edges filter</li>\n<li><code>emboss()</code> - apply the emboss filter</li>\n<li><code>mean_remove()</code> - apply the mean removal filter</li>\n<li><code>blur()</code> - apply selective or gaussian blur to the image</li>\n<li><code>sketch()</code> - apply the sketch filter</li>\n<li><code>smooth()</code> - apply the smooth filter</li>\n<li><code>pixelate()</code> - pixelate the image to blocks of the specified size</li>\n<li><code>sepia()</code> - apply a simulated sepia effect</li>\n<li><code>overlay()</code> - overlay one image onto another to create a watermark effect</li>\n<li><code>text()</code> - Add text to the image</li>\n</ul>\n<h2 id=\"download\">Download <a class=\"direct-link\" href=\"#download\">#</a></h2>\n<p>This project is actively maintained on GitHub. Please submit all issues and contributions to the project page. Licensed under the MIT license.</p>\n<p><a href=\"https://github.com/claviska/SimpleImage\">Download the latest version from GitHub</a></p>\n<p><em>January 10, 2017: SimpleImage 3.0 has been released. Please refer to <a href=\"https://github.com/claviska/SimpleImage\">the repo</a> for API changes and the latest features.</em></p>\n",
      "date_published": "2011-11-16T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/how-to-delete-a-tag-on-github/",
      "url": "https://www.abeautifulsite.net/posts/how-to-delete-a-tag-on-github/",
      "title": "How to delete a tag on GitHub",
      "content_html": "<p>In the world of Git, tags are very useful for keeping track of your project's version history. A lot of folks will argue that you shouldn't delete tags, but there are real-world examples in which tags need to be deleted.  That said, it's both a good and a bad thing that <a href=\"http://github.com/\">GitHub</a> hasn't built the ability to delete tags into it's web app.</p>\n<p>It can be frustrating, however, if you ever come across that need.  If you're one of those individuals, open up a terminal window and navigate to your local Git repository.  Once there, simply run these commands, replacing <strong>[tag]</strong> with the tag name:</p>\n<pre><code class=\"language-bash\">git tag -d [tag];\ngit push origin :[tag]\n</code></pre>\n<p>And if your tag has the same name as one of your branches, use this instead:</p>\n<pre><code class=\"language-bash\">git tag -d [tag]\ngit push origin :refs/tags/[tag]\n</code></pre>\n<p>Of course, these steps assume that you have Git running on your local machine.</p>\n<p><em>August 8, 2016:</em> GitHub now lets you delete <em>releases</em> from its website, but this will not delete the tag. As of right now, to delete the actual tag, you still need to use the command line.</p>\n",
      "date_published": "2011-11-16T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/office-2007-files-downloading-as-zip-in-internet-explorer/",
      "url": "https://www.abeautifulsite.net/posts/office-2007-files-downloading-as-zip-in-internet-explorer/",
      "title": "Office 2007 files downloading as ZIP files in Internet Explorer",
      "content_html": "<p>Today I learned that Microsoft Office 2007 files (you know, the new ones that end in DOCX, XLSX, and PPTX) don't always download properly in Internet Explorer. In fact, IE tends to see them as ZIP files and forces their extension to change to <code>.zip</code> when you select <code>download</code>. This is because IE is checking for the MIME type instead of blindly going by file extensions. Ironically, since it doesn't recognize the new Office 2007 files for what they are, IE renames their extensions to <strong>.zip</strong> upon downloading.</p>\n<p>If you're wondering why the extensions get changed to <code>.zip</code>, it's because the new Office 2007 formats are nothing more than a series of XML documents zipped up with their own special file extensions. Java <code>.jar</code> files and Mozilla Firefox <code>.xpi</code> files do mostly the same thing, so this isn't a new concept, but it does seem to introduce a bit of a problem for Internet Explorer users.</p>\n<p>There seem to be a number of &quot;solutions&quot; out there, but many of them involve telling the end user to change a setting in their browser or something like that — definitely not the best solution. Another option is to simply rename the affected file(s) to the appropriate extension(s) and open them up in Office as usual. Although this works, it's still not a great solution since most users won't know to do that.</p>\n<p>The best solution I found was on a <a href=\"http://www.webdeveloper.com/forum/showthread.php?threadid=162526\">forum</a>, where a user suggested setting the MIME types manually on the server. This is obviously a better solution, since end users get the expected behavior and are able to download files with the proper extension. For Apache servers, simply add the following to your config file or create an <code>.htaccess</code> file in the root directory of your website:</p>\n<pre><code class=\"language-apacheconf\">AddType application/vnd.ms-word.document.macroEnabled.12 .docm\nAddType application/vnd.openxmlformats-officedocument.wordprocessingml.document docx\nAddType application/vnd.openxmlformats-officedocument.wordprocessingml.template dotx\nAddType application/vnd.ms-powerpoint.template.macroEnabled.12 potm\nAddType application/vnd.openxmlformats-officedocument.presentationml.template potx\nAddType application/vnd.ms-powerpoint.addin.macroEnabled.12 ppam\nAddType application/vnd.ms-powerpoint.slideshow.macroEnabled.12 ppsm\nAddType application/vnd.openxmlformats-officedocument.presentationml.slideshow ppsx\nAddType application/vnd.ms-powerpoint.presentation.macroEnabled.12 pptm\nAddType application/vnd.openxmlformats-officedocument.presentationml.presentation pptx\nAddType application/vnd.ms-excel.addin.macroEnabled.12 xlam\nAddType application/vnd.ms-excel.sheet.binary.macroEnabled.12 xlsb\nAddType application/vnd.ms-excel.sheet.macroEnabled.12 xlsm\nAddType application/vnd.openxmlformats-officedocument.spreadsheetml.sheet xlsx\nAddType application/vnd.ms-excel.template.macroEnabled.12 xltm\nAddType application/vnd.openxmlformats-officedocument.spreadsheetml.template xltx\n</code></pre>\n<p>Note that, if you're updating your main config file, you'll have to restart Apache before the changes will take affect. With <code>.htaccess</code> files you shouldn't need to restart the server.</p>\n<p>Now your users will be able to download Office 2007 files from your server without any problems.  If you've discovered another method for solving this problem, please share it in the comments!</p>\n",
      "date_published": "2010-03-18T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/smoothly-scroll-to-an-element-without-a-jquery-plugin-2/",
      "url": "https://www.abeautifulsite.net/posts/smoothly-scroll-to-an-element-without-a-jquery-plugin-2/",
      "title": "Smoothly scroll to an element without a jQuery plugin",
      "content_html": "<p>You know that special effect where you click on a link and your browser smoothly scrolls down to the appropriate section of the page? Pretty slick, right? Here are a couple snippets so you can do the same thing on your own website.</p>\n<h2 id=\"scroll-to-a-specific-element\">Scroll to a specific element <a class=\"direct-link\" href=\"#scroll-to-a-specific-element\">#</a></h2>\n<p>Here's how to programmatically scroll to any <a href=\"test\">element</a> on the page. If you're using jQuery, you don't need a plugin. It's very simple:</p>\n<pre><code class=\"language-js\">$('html, body').animate({\n  scrollTop: $(&quot;#target-element&quot;).offset().top\n}, 1000);\n</code></pre>\n<p>This will scroll the page down to <code>#target-element</code> over a period of one second (1,000 milliseconds = 1 second).</p>\n<h2 id=\"scroll-to-the-selected-anchor\">Scroll to the selected anchor <a class=\"direct-link\" href=\"#scroll-to-the-selected-anchor\">#</a></h2>\n<p>You can take things a bit further and animate scrolling for all anchors on your page. The following snippet will watch for clicks on any link that points to an anchor and smoothly scroll down to it:</p>\n<pre><code class=\"language-js\">$('a[href^=&quot;#&quot;]').on('click', function(event) {\n\n  var target = $(this.getAttribute('href'));\n\n  if (target.length) {\n    event.preventDefault();\n    $('html, body').stop().animate({\n      scrollTop: target.offset().top\n    }, 1000);\n  }\n});\n</code></pre>\n<h2 id=\"see-it-in-action\">See it in action <a class=\"direct-link\" href=\"#see-it-in-action\">#</a></h2>\n<p>See the Pen <a href=\"http://codepen.io/claviska/pen/cybdG/\">cybdG</a> by Cory LaViska (<a href=\"http://codepen.io/claviska\">@claviska</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n",
      "date_published": "2010-01-22T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/the-difference-between-web-designers-and-web-developers/",
      "url": "https://www.abeautifulsite.net/posts/the-difference-between-web-designers-and-web-developers/",
      "title": "The difference between web designers and web developers",
      "content_html": "<p>If you've ever worked in, on, with, or around the Internet, you've undoubtedly heard the terms &quot;Web Designer&quot; and &quot;Web Developer&quot;.  Oftentimes, the two phrases are used interchangeably by someone who is not familiar with the industry.  Perhaps the concept is irrelevant to a client who just wants to get their website up and running.  Or to a server administrator who has his concerns in the silicon, steel and software that power your website.  And what about the nice lady over in Human Resources who blotches up the job posting during the hiring process?  I mean — designer and developer — they're the same thing, right?<br>\nLet's face it, if you have the word &quot;Web&quot; in your euphemism, you've probably been hammered with questions from both sides of the playing field.  Designers will hear things like &quot;how can we add a database to the website?&quot;, while developers struggle to answer questions about layout, color selection, image placement, and font styles.</p>\n<p>The truth is, however, that most Web Designers don't know a thing about Base64 encoding, MIME types, SOAP requests, regular expressions, or SQL injection.  On the flip side, there aren't a lot of Web Developers that can create visually stunning websites which gloat the type of appeal that Rembrandt himself would appreciate.</p>\n<p>Due to the demanding nature of the industry, it's all too common to find individuals who are unqualified, inexperienced, or simply not very good at one or the other trying to make their way through a project that requires both creative and technical skills.  This is why many underfunded, poorly planned Web-based projects fail.  Most of the blame can usually be attributed to the fact that not a lot of people actually understand what the difference is between a Web Designer and a Web Developer.  This includes everything from skillsets to the actual role each position plays in the formation of a Web-based project.</p>\n<p>Perhaps the most effective way to differentiate between the two positions is to establish a clear line that separates the roles and responsibilities of each position in the context of a Web-based project.  This will, of course, vary from project to project and from person to person, but we can define a reasonable boundary which the average Web Designer and Web Developer will be comfortable with.</p>\n<h2 id=\"what-exactly-is-a-web-designer%3F\">What exactly is a web designer? <a class=\"direct-link\" href=\"#what-exactly-is-a-web-designer%3F\">#</a></h2>\n<p>The best Web Designers are of the creative type.  They have a knack for getting inside of their clients' heads and realizing their clients' vision.  They take this vision and masterfully convert it into an aesthetically pleasing, artistic design that aims to impress millions of potential viewers.  Some designers study typography, user interface design, and usability.  Most include tools such as Photoshop, Illustrator, and DreamWeaver in their arsenal and frequent sites such as iStockPhoto, Kuler, and a long list of CSS galleries.</p>\n<p>It is common, albeit arguable, that a designer's role should also include slicing images, writing (X)HTML, coding CSS, and drafting or editing copy.  For the most part, you can think of a Web Designer as a creative expert.</p>\n<h2 id=\"what-exactly-is-a-web-developer%3F\">What exactly is a web developer? <a class=\"direct-link\" href=\"#what-exactly-is-a-web-developer%3F\">#</a></h2>\n<p>Web Developers are usually more technical in nature.  They tend to have excellent problem solving skills and are generally good at math.  On a daily basis, a developer will write code in five or more different languages including (X)HTML, CSS, JavaScript, [PHP, ASP, ColdFusion, Ruby, Python, Perl, etc.], and some flavor of SQL.  Web Developers can usually be found wielding some kind of text editor or IDE, an FTP client, three or more web browsers, and development plugins such as Firebug.  They frequent sites similar to the PHP manual, the Mozilla JavaScript reference, and the jQuery Documentation.  A developer also knows what an API is and how to develop with it.</p>\n<p>Although Web Developers are sometimes referred to as programmers, their skills usually exceed those of a conventional software developer.  Think of a Web Developer as more of a technical expert with programming skills.</p>\n<h2 id=\"what-about-people-that-do-both%3F\">What about people that do both? <a class=\"direct-link\" href=\"#what-about-people-that-do-both%3F\">#</a></h2>\n<p>As suggested earlier, it is actually quite common for Web Designers and Web Developers to be expected to take on tasks that are outside of their personal skillsets.  In my experience, I would only consider a very small number of people that I've worked with to be proficient in both design and development.  In most cases, you'll find a cocky developer that thinks his designs are the greatest thing that ever hit the Internet when, in reality, they're mediocre at best.  It's far less common to find a designer who thinks he can code up an entire Web application.</p>\n<h2 id=\"so%2C-which-one-should-i-choose%3F\">So, which one should i choose? <a class=\"direct-link\" href=\"#so%2C-which-one-should-i-choose%3F\">#</a></h2>\n<p>Which one you choose depends on what exactly you are trying to do, but in many cases your project will require skills from both.  If you're looking to start a new website or to redesign your old one, you'll want to look for someone with design talent.  If you're looking for some kind of database, E-Commerce solution, or integration with another application, you'll want to look for someone with strong development skills.</p>\n<p>Despite the fact that this writing strives to define the difference between Web Designers and Web Developers, the reality is that you're bound to find designers who know at least a little bit about development and developers who know at least a little bit about design.  Although both are very different positions which provide entirely different skillsets, the fact of the matter is that most designers and developers have, or will at some point, become factotums — at least to a certain degree.  Some may never bother to differentiate themselves as one or the other.</p>\n<p>Perhaps the most important aspect of managing a Web-based project is being able to determine what skills a particular project requires, and who is the right person for the job.  In this industry it is very clear that, despite a reasonable separation of roles and responsibilities, an individual's job title is not always a reflection of their personal expertise.  It is, alas, more often an indication of their position in terms of demand and naivety.</p>\n",
      "date_published": "2009-12-22T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/new-shortcut-keys-in-windows-7/",
      "url": "https://www.abeautifulsite.net/posts/new-shortcut-keys-in-windows-7/",
      "title": "New shortcut keys in Windows 7",
      "content_html": "<p>I was happy to learn that Windows 7 has some new shortcut keys that let you control certain aspects of window management right out of the box.  They're pretty easy to remember too:</p>\n<ul>\n<li>Win + Up - Maximize the current window</li>\n<li>Win + Down - Restore a maximized window, otherwise minimize it</li>\n<li>Win + Left - Snap the window to the left side of the screen</li>\n<li>Win + Right - Snap the window to the right side of the screen</li>\n<li>Win + Home - Minimize all except the current window</li>\n<li>Win + Space - Temporarily make all windows transparent</li>\n<li>Win + P - Change the display setting</li>\n<li>Win + T - Move forward through items on the taskbar</li>\n<li>Win + Shift + T - Move backwards through items on the taskbar</li>\n<li>Win + 1 - 9 - Launch or switch to the respective taskbar item (if already open)</li>\n</ul>\n<p>If you have multiple screen setup (i.e. dual monitors), these will be helpful:</p>\n<ul>\n<li>Win + Shift + Left - Move window to the monitor on the left</li>\n<li>Win + Shift + Right - Move window to the monitor on the right</li>\n</ul>\n<p>And, similar to the OS X zoom effect, you can zoom in and out using Win + + and Win + -  respectively. For reference, here are some of the other useful Windows key shortcuts that have been around in earlier version of Windows:</p>\n<ul>\n<li>Win + D - Show / Hide the desktop</li>\n<li>Win + E - Launch Windows Explorer</li>\n<li>Win + F - Open up a search window</li>\n<li>Win + L - Lock the computer</li>\n<li>Win + M - Minimize all windows</li>\n<li>Win + R - Show the Run dialog</li>\n<li>Win + Pause - Launch the System Properties window</li>\n</ul>\n<p>If there are other useful Windows shortcuts that you find useful, post them in the comments.</p>\n",
      "date_published": "2009-11-19T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/icon-finder-an-awesome-search-engine-for-icons/",
      "url": "https://www.abeautifulsite.net/posts/icon-finder-an-awesome-search-engine-for-icons/",
      "title": "Icon Finder: an awesome search engine for icons",
      "content_html": "<p>I came across a <a href=\"http://iconfinder.net/\">really awesome icon resource</a> awhile back, but never got a chance to write anything about it. If you're a web designer or developer who always has use for quality icons — especially ones with GPL or similar licenses — this is the website for you. It's essentially a search engine for icons. Everything about this website rocks, especially their logo.</p>\n<p>Not only can you filter by license type and image size, you can also download both the PNG and ICO versions on a black, white, or transparent background. You can edit the tags for any icon and, if after all that you still can't find the icon that's right for you, you can opt to purchase a <a href=\"http://www.iconfinder.net/custom\">custom icon design</a>.</p>\n<p>The website doesn't have a massive selection of icons to choose from yet, but you should find something relevant to what you're looking for. If not, you can always design it and <a href=\"http://www.iconfinder.net/submit\">submit it yourself</a>.</p>\n",
      "date_published": "2009-11-13T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/jsnes-a-nintendo-emulator-built-in-javascript/",
      "url": "https://www.abeautifulsite.net/posts/jsnes-a-nintendo-emulator-built-in-javascript/",
      "title": "JSNES: a Nintendo emulator built in JavaScript",
      "content_html": "<p>I remember, not too long ago, arguing with people who said that JavaScript would never be as good as Flash. Granted, at the time many people were afraid of JavaScript and, thus, it wasn't used as widely as it is today. With the introduction of popular libraries such as <a href=\"http://jquery.com/\">jQuery</a>, <a href=\"http://www.prototypejs.org/\">Prototype</a>, <a href=\"http://mootools.net/\">MooTools</a> and <a href=\"http://www.extjs.com/\">many</a>, <a href=\"http://www.dojotoolkit.org/\">many</a>, <a href=\"http://mochikit.com/\">many</a> others, JavaScript has been on the forefront of the Web 2.0 movement. In fact, it's rare today to visit a webpage that doesn't use JavaScript for at least <em>something</em>. Sure, Flash is still pretty popular, but trends seem to indicate that people are moving further away from it for design and reserving it for <a href=\"http://youtube.com/\">videos</a>, <a href=\"http://developer.yahoo.com/yui/uploader/\">file uploaders</a>, <a href=\"http://www.pogo.com/\">online games</a>, and <a href=\"http://aviary.com/\">high level web-based applications</a>.</p>\n<p><em>So why bother comparing JavaScript to Flash? Everyone knows Flash is better, right?</em></p>\n<p>And by <em>better</em>, we can pretty much agree that Flash can do smoother animations, higher level programming, awesome 3D stuff...the list goes on. In fact, you can make an entire website out of pure Flash if you so desire, and it will look exactly the same in every browser. Why use anything else?</p>\n<p>Well, <a href=\"http://www.useit.com/alertbox/20001029.html\">Flash has its problems</a>, and that goes without even mentioning the fact that it's a closed-source, proprietary technology. (Hint: <a href=\"http://en.wikipedia.org/wiki/ECMAScript\">JavaScript <em>isn't</em></a>.)</p>\n<p><em>But still, you can't do much when it comes to JavaScript. I mean, it's slow, clunky, and each browser does things just a little bit differently.</em></p>\n<p>Yes, this is very much true. Until now, and even still to some degree, JavaScript remains an emerging technology for more advanced applications such as <a href=\"http://sixrevisions.com/javascript/10-impressive-javascript-animation-frameworks/\">animation</a>, <a href=\"http://ui.jquery.com/\">user interface</a>, and even <a href=\"http://www.webresourcesdepot.com/25-amazing-javascript-games-some-fun-and-inspiration/\">games</a>, but it is by no means primitive. Proof of this lays with JSNES, an 8-bit Nintendo Emulator that was built purely in JavaScript.</p>\n<p><img src=\"/images/super-mario-bros-3.png\" alt=\"Screenshot of Super Mario Bros. 3\"></p>\n<p>If you're running Internet Explorer right now, don't bother with the link. You'll need to switch to <a href=\"http://google.com/chrome\">Chrome</a> if you want to play it at near-normal speed. Even Firefox's JavaScript engine is too slow, but it's playable...just really slow.</p>\n<p>So there you have it. No, JavaScript isn't anywhere near Flash in speed or capabilities, but it's definitely getting there and it's making plenty of waves in the process.</p>\n",
      "date_published": "2009-11-10T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/table-cells-and-max-widths-in-internet-explorer-8/",
      "url": "https://www.abeautifulsite.net/posts/table-cells-and-max-widths-in-internet-explorer-8/",
      "title": "Table cells and max-widths in Internet Explorer 8",
      "content_html": "<p>I recently came across a <a href=\"https://connect.microsoft.com/IE/feedback/ViewFeedback.aspx?FeedbackID=425785\">little issue</a> with Internet Explorer 8 and <code>max-width</code>. I had an image inside of a table cell and, for some reason, IE8 completely neglected the corresponding CSS <code>max-width</code> property. The result was the image rendering at full size rather than scaled down to the assigned width, as expected.</p>\n<p>After a <a href=\"http://bytes.com/topic/html-css/answers/870359-ie8-display-table-cell-max-width-bug\">little searching</a>, I found that you can usually resolve this by assigning this to the affected table:</p>\n<pre><code class=\"language-css\">table-layout: fixed;\n</code></pre>\n<p>I'm not a huge fan of quick-fixes like this, but in the case of a blatent browser bug there isn't much you can do without going too far out of your way. I'm sure it will be fixed in an IE8 update soon.</p>\n",
      "date_published": "2009-09-30T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/browser-makers-wheres-the-new-tab-homepage-option/",
      "url": "https://www.abeautifulsite.net/posts/browser-makers-wheres-the-new-tab-homepage-option/",
      "title": "Browser makers: where’s the new tab + homepage option?",
      "content_html": "<p>Ever since tabbed browsing hit the mainstream I've been hooked. It's rare to see less than a handful of tabs open in my web browser at any time. Whether I'm developing, checking email, or just surfing around, I can never seem to have enough tabs! But there's one thing about this incredible feature that has really bugged me since Day One — one that seems to have gone completely unnoticed by all of the browser makers to-date.</p>\n<blockquote>\n<p>Why can't I see my homepage when I open a new tab?</p>\n</blockquote>\n<p>It may seem trivial or silly to complain about, but to me the idea of anything but my homepage opening in a new tab is counterintuitive. For example, if you open a brand new browser window what do you expect to see? Your homepage. If you open any browser (before Safari 4, Opera 9.2, and Google Chrome) what do you expect to see? Your homepage.</p>\n<p>People generally know what to do when they see their homepage because it's familiar to them. Most of them know how to use the address bar to go to another website. Many of them know how to choose a bookmark to quickly get to their favorite places on the web. For the majority of people, having their homepage open up in a new tab is simply what they subconsciously expect to happen.</p>\n<p>The tragedy here is that this isn't currently possible in any browser without the use of a <a href=\"https://addons.mozilla.org/en-US/firefox/addon/777\">plug-in</a>.</p>\n<p>It seems as though browser makers each have their own perspective on what should happen when a new tab is opened. Internet Explorer 8, for example, likes to confuse its users with a mostly empty page to stare at. To spice it up a bit, Microsoft decided to add some infrequently used options that users can click on. How many times have you opened up a new tab because you wanted to &quot;Blog with Windows Live&quot; or &quot;Map [something] with Live Search&quot;? How about &quot;Show copied text&quot;?</p>\n<p><img src=\"/images/ie8-new-tab.gif\" alt=\"New tab view in IE8\"></p>\n<p>These are clearly not options that are useful to users, but considering how well they promote Microsoft's services, I can understand how they got there.</p>\n<p>Firefox is my browser of choice for both development and day-to-day browsing, but sadly, it doesn't do much better than IE when it comes to new tabs. In fact, I think it does even worse in comparison with IE8. It's a completely blank page.</p>\n<p><img src=\"/images/firefox-new-tab.gif\" alt=\"New tab view in Firefox\"></p>\n<p>If I'm not mistaken, Opera was the first to come out with the &quot;smart page&quot; when they introduced <a href=\"http://en.wikipedia.org/wiki/Features_of_the_Opera_web_browser#Speed_Dial\">Speed-Dial</a> in 9.2. Speed Dial allows users to specify up to nine websites from their bookmarks that will appear in a grid for easy access.</p>\n<p><img src=\"/images/opera-new-tab.gif\" alt=\"New tab view in Opera\"></p>\n<p>It wasn't long before other browser makers started trying out their own versions of smart pages. Google Chrome made their smart page more useful by adding a search bar, recent bookmarks, and recently closed tabs. As far as smart pages go, this is probably the best of the bunch for functionality, although the nine websites that are automatically chosen aren't always relevant to your actual use of them.</p>\n<p><img src=\"/images/chrome-new-tab.gif\" alt=\"New tab view in Chrome\"></p>\n<p>Finally, Safari 4 introduced a really slick &quot;Top Sites&quot; smart page that works pretty well. And, as usual with Apple products, it looks great. The only problem is that it's a little too flashy where it should be more functional. For example, click on the Search History box. The page is instantly replaced by a huge, side-scrolling list of websites. Sure it looks nice at first, but as I search through possible results, I can only see one at a time and it's very jumpy during transitions. I prefer Firefox's searchable history over this any day.</p>\n<p><img src=\"/images/safari-new-tab.gif\" alt=\"New tab in Safari\"></p>\n<p>So where do we go from here? Will the world stop because we can't open new tabs and see our homepages? Of course not. It hasn't yet, and we've been dealing with it for years. But why? To me, this seems like a no-brainer that should have made the top of the list for possible &quot;new tab candidates&quot;. At the very least, I'd like to see the browser makers add this in as an option somewhere.</p>\n",
      "date_published": "2009-08-07T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/what-happens-if-ie8-breaks-my-website/",
      "url": "https://www.abeautifulsite.net/posts/what-happens-if-ie8-breaks-my-website/",
      "title": "What happens if IE8 &quot;breaks&quot; my website?",
      "content_html": "<p>Last year all of the hype was about IE8 and <a href=\"http://blogs.msdn.com/ie/archive/2008/01/21/compatibility-and-ie8.aspx\">Microsoft's decision</a> to default the browsers version targeting to &quot;quirks mode&quot; rather than standards mode. This essentially meant that developers would have to opt-in to IE8's standards mode using a proprietary <code>&lt;meta&gt;</code> tag that tells the browser which mode you want it to render your website in.</p>\n<p>Needless to say, this was a very frustrating proposal for developers worldwide. At the same time, Microsoft's obligation to not &quot;break&quot; the web was very understandable. It was a catch 22 for the company, but the issue had to be tended to promptly. After much discussion and some encouragement from the community, <a href=\"http://www.zeldman.com/2008/03/04/microsoft-reverses-version-targeting-default/\">Microsoft officially reversed their decision</a> to handle version targeting this way.</p>\n<p>Now that IE8 has been officially released, one problem still remains for many legacy sites. What if IE8 &quot;breaks&quot; your website? The short-term solution is actually <a href=\"http://msdn.microsoft.com/en-us/library/cc817574.aspx\">very simple</a>:</p>\n<blockquote>\n<p>Windows Internet Explorer 8 introduces document compatibility modes that allow Web developers to tell the browser to render their pages in the same way as older versions would, thereby allowing the developer to choose when to update.</p>\n</blockquote>\n<p>In short, add this tag inside the <code>&lt;head&gt;</code> of each of your webpages and call it a day:</p>\n<pre><code class=\"language-html\">&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=EmulateIE7&quot; /&gt;\n</code></pre>\n<p>Wait! Don't actually call it a day and forget about it! Although I'm sure a lot of folks will do just that, the fact is that you really should treat this as the temporary fix that it is and make an honest effort to get those legacy websites and applications up to date. The reality is, however, that many developers will be confronted with compatibility issues as IE8 gets pushed out to millions of users via <a href=\"http://www.microsoft.com/windows/downloads/windowsupdate/automaticupdate.mspx\">Windows Automatic Update</a>. Of course, many won't have the time or resources it takes to redevelop or modify all those old sites so, in a pinch, you can at least get by.</p>\n",
      "date_published": "2009-06-27T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/images-display-in-firefox-and-safari-but-not-in-internet-explorer/",
      "url": "https://www.abeautifulsite.net/posts/images-display-in-firefox-and-safari-but-not-in-internet-explorer/",
      "title": "Images display in Firefox and Safari, but not in Internet Explorer",
      "content_html": "<p>I ran into a little &quot;gotcha&quot; today where an image was displaying properly in Firefox and Safari, but not in Internet Explorer. The weird thing is that it wasn't showing up as a broken link (no missing image icon with the infamous red 'X'). Instead, it wasn't showing up at all:</p>\n<pre><code class=\"language-html\">&lt;img src=&quot;image.jpg&quot; width=&quot;&quot; height=&quot;&quot;&gt;\n</code></pre>\n<p>As it turns out, if you have the <code>width</code> and <code>height</code> attributes set to an empty string, IE seems to interpret the width and height as zero, which makes the image not appear. All other browsers, of course, seem to discard the empty attributes.</p>\n<p>The solution? Simply remove the empty attributes or plug in the appropriate values.</p>\n",
      "date_published": "2009-04-24T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/php-functions-to-get-and-remove-the-file-extension-from-a-string/",
      "url": "https://www.abeautifulsite.net/posts/php-functions-to-get-and-remove-the-file-extension-from-a-string/",
      "title": "PHP functions to get and remove the file extension from a string",
      "content_html": "<p>I use these regular expressions all the time, but it's much more convenient to have them both in convenient PHP functions.</p>\n<pre><code class=\"language-php\">// Returns only the file extension (without the dot)\nfunction file_ext($filename) {\n  return preg_match('/\\./', $filename) ? preg_replace('/^.*\\./', '', $filename) : '';\n}\n\n// Returns the file name minus its extension\nfunction file_ext_strip($filename){\n  return preg_replace('/.[^.]*$/', '', $filename);\n}\n</code></pre>\n<p>You can also use the built-in <a href=\"http://php.net/manual/en/function.pathinfo.php\"><code>pathinfo</code></a> function to achieve the same result:</p>\n<pre><code class=\"language-php\">$filename = '/path/to/file.ext';\n\necho pathinfo($filename)['extension']; // &quot;ext&quot;\necho pathinfo($filename)['filename']; // &quot;file&quot;\n</code></pre>\n",
      "date_published": "2009-03-12T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/prevent-white-noise-from-appearing-in-images-after-fading/",
      "url": "https://www.abeautifulsite.net/posts/prevent-white-noise-from-appearing-in-images-after-fading/",
      "title": "Prevent white noise from appearing in images after fading",
      "content_html": "<p>The first time I ever saw this alleged bug was in Internet Explorer 7 yesterday. Images were rotating on a page in the form of a slideshow, fading in and out for a nice, smooth transition. One problem, though: in Internet Explorer 7 (and 6, as it turned out), one of the images would appear with a small cluster of white pixels around the black areas.</p>\n<p>To make sure the image wasn't corrupt, I saved it again using PhotoShop. No luck. Even after saving the image as a GIF instead of a JPEG, the white noise persisted in IE.</p>\n<p>Luckily, some research resulted in finding <a href=\"http://www.alexjudd.com/?p=5\">Alex Judd's post</a>, which provided a relatively simple solution to the problem.</p>\n<p>To summarize, the white noise occurs in both IE6 and IE7 on some (but not all) images when they fade in or out. This is especially true when you're using a JavaScript library such as <a href=\"http://jquery.com/\">jQuery</a> or <a href=\"http://script.aculo.us/\">script.aculo.us</a>.</p>\n<p>Evidently, IE mistakes some of the true-black pixels for transparent pixels, which causes the &quot;white&quot; noise (which may not necessarily be white, depending on the underlying background). One work around, as Alex points out, is to adjust the levels of the image in Photoshop very slightly—just enough to eliminate the true-black pixels.</p>\n<p>To do this, open the image up in PhotoShop and perform the following steps:</p>\n<ol>\n<li>Select <code>Image</code>, <code>Adjustments</code>, <code>Levels</code></li>\n<li>Move the <code>Output Levels</code> slider a few pixels to the right (or type in a small number, like 5)</li>\n<li>Save the image</li>\n</ol>\n<p>In most cases, there won't be a noticeable difference in color. Alas, this work around does solve the display problem in IE, but not without tampering with the original image. We'll have to keep our fingers crossed in that IE8 finally addresses this issue.</p>\n",
      "date_published": "2009-01-10T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/abs-becomes-abs-llc/",
      "url": "https://www.abeautifulsite.net/posts/abs-becomes-abs-llc/",
      "title": "A Beautiful Site becomes &quot;A Beautiful Site, LLC&quot;",
      "content_html": "<p>Today has been an exciting day. I received documentation from the State of Florida stating that A Beautiful Site, LLC. is officially a limited liability company. This marks the new beginning of a period of growth for ABS, which has been, until now, a sole proprietorship.</p>\n<p>In the next few weeks, <a href=\"http://www.surrealcms.com/\">Surreal CMS</a> will be officially released to the public. This is the first of a number of services that ABS will offer, with hopes of making many lives easier through creative, effective, and intuitive Web-based applications.</p>\n<p>To all of our clients, readers, and friends: Thank you for all of your support over the last year and a half. Without your patronage, insight, and encouragement, A Beautiful Site would not be where it is today. I look forward to working with all of you for many years to come.</p>\n",
      "date_published": "2008-10-18T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/import-restore-mysql-files-from-the-command-line/",
      "url": "https://www.abeautifulsite.net/posts/import-restore-mysql-files-from-the-command-line/",
      "title": "Import/restore MySQL files from the command line",
      "content_html": "<p>I don't use this very often, but when I do I always spend a decent amount of time trying to figure it out online. Here are the steps to import a large SQL file from the command line.</p>\n<ol>\n<li>Upload the SQL file to the server that your MySQL database is on</li>\n<li>Execute the following command from the terminal (command line):<br>\n<code>mysql -u [username] -p [database name] &lt; /path/to/file/data.sql</code></li>\n<li>Enter the database password when prompted</li>\n</ol>\n<p>Since anything over about 2MB won't paste gracefully into a textarea, this works really well with large SQL files generated by <a href=\"http://www.phpmyadmin.net/\">phpMyAdmin</a>. Remember to truncate data and/or drop tables where necessary before importing, otherwise the restore may not work as intended. (For example, <code>CREATE TABLE</code> will not work if the table already exists and <code>INSERT</code> statements will fail if a primary key already exists.)</p>\n",
      "date_published": "2008-07-24T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/parsing-a-json-string-results-in-an-invalid-label-error/",
      "url": "https://www.abeautifulsite.net/posts/parsing-a-json-string-results-in-an-invalid-label-error/",
      "title": "Parsing a JSON string results in an &#39;Invalid Label&#39; error",
      "content_html": "<p>Whenever I work with AJAX, jQuery is my preferred JavaScript library and PHP is my preferred server-side language. I use JSON whenever I can to pass data between JavaScript and PHP. After all, <code>$.get</code> and <code>$.post</code> both process JSON easily, so it's my data type of choice.</p>\n<p>Sometimes, however, I can't rely on <code>$.get</code> and <code>$.post</code> to do the dirty work for me. One example is when I'm using a hidden <code>iframe</code> to upload a file via &quot;AJAX&quot;. To do this, the form posts the file to a server-side script. The script loads in the hidden <code>iframe</code>, so users don't see what's happening behind the scene. Once the upload is complete, the script outputs some information about the file to the <code>iframe</code> (filename, location, size, etc.). You can then use JavaScript to capture that information.</p>\n<p>For the sake of consistency, my server-side script always outputs a valid JSON string. I rely on this data, which gets scooped out of the <code>iframe</code>, to tell me if the file got uploaded successfully and, if not, what the error was. If so, I need to know the filename, size, and location. What ends up in the <code>iframe</code> usually looks something like this:</p>\n<pre><code class=\"language-js\">{&quot;filename&quot;:&quot;file.ext&quot;,&quot;size&quot;:&quot;2516582&quot;,&quot;location&quot;:&quot;/path/to/file/file.ext&quot;}\n</code></pre>\n<p>To parse the JSON string into a JavaScript object, I use <code>eval()</code>. (Some people prefer to use a <a href=\"http://www.json.org/\">JSON parser</a>, but since the output of the script is controlled, I've never found it necessary for this application.) Alas, when JavaScript evaluates the string it results in an <code>invalid label</code> error.</p>\n<p>The error is the result of <code>eval()</code> interpreting the first item in the string as a label. This gets me everytime, but it's extremely easy to fix. Simply wrap the JSON string in parenthesis within <code>eval()</code>:</p>\n<pre><code class=\"language-js\">var response = eval('(' + jsonString + ')');\n</code></pre>\n<p>This is one of those JavaScript &quot;&quot;gotchas&quot;, so I hope I can save people (and myself) a lot of time by documenting it.</p>\n",
      "date_published": "2008-07-17T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/postjson-for-jquery/",
      "url": "https://www.abeautifulsite.net/posts/postjson-for-jquery/",
      "title": "$.postJSON() for jQuery",
      "content_html": "<p><code>$.getJSON()</code> is pretty handy for sending an AJAX request and getting back JSON data as a response. Alas, the jQuery documentation lacks a sister function that should be named <code>$.postJSON()</code>. Why not just use <code>$.getJSON()</code> and be done with it? Well, perhaps you want to send a large amount of data or, in my case, IE7 just doesn't want to work properly with a GET request.</p>\n<p>It is true, there is currently no <code>$.postJSON()</code> method, but you can accomplish the same thing by specifying a fourth parameter (<code>type</code>) in the <code>$.post()</code> function:</p>\n<pre><code class=\"language-js\">// Send the request\n$.post('script.php', data, function(response) {\n  // Do something with the request\n}, 'json');\n</code></pre>\n<p>This works for <code>$.get()</code> as well, which means <code>$.getJSON()</code> is basically a call to <code>$.get()</code> with <code>'json'</code> as the fourth parameter.</p>\n",
      "date_published": "2008-05-31T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/generate-random-passwords-in-php/",
      "url": "https://www.abeautifulsite.net/posts/generate-random-passwords-in-php/",
      "title": "Generate random passwords in PHP",
      "content_html": "<p>Here is a function I wrote to generate a random string in PHP. It is probably most useful for generating passwords. You can specify the length of the resulting string, as well as what characters are allowed. The default length is eight and the default character set is alphanumeric.</p>\n<pre><code class=\"language-php\">function random_string($length = 8, $chars = null) {\n  if (empty($chars)) $chars = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&quot;;\n  while (strlen($s) &lt; $length) {\n    $s .= substr($chars, rand(0, strlen($chars) - 1), 1);\n  }\n  return $s;\n}\n\n// Usage\necho random_string(10);\n</code></pre>\n",
      "date_published": "2008-05-17T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/fetching-remote-web-pages-with-curl-and-php/",
      "url": "https://www.abeautifulsite.net/posts/fetching-remote-web-pages-with-curl-and-php/",
      "title": "Fetching remote web pages with curl and PHP",
      "content_html": "<p>This is a very brief example of how to use PHP's <a href=\"http://php.net/curl\">curl Library</a> to retrieve the source of a remote webpage.</p>\n<pre><code class=\"language-php\">$c = curl_init();\ncurl_setopt($c, CURLOPT_URL, &quot;http://example.com/&quot;);\ncurl_setopt($c, CURLOPT_RETURNTRANSFER, 1);\n$data = curl_exec($c);\ncurl_close($c);\n</code></pre>\n<p><code>CURLOPT_RETURNTRANSFER</code> is a predefined constant that tells curl to return the output to a variable instead of displaying it in the browser. Visit the <a href=\"http://php.net/\">PHP Manual</a> for a list of all <a href=\"http://php.net/manual/en/curl.constants.php\">CURL predefined constants</a> and their uses.</p>\n<p>The source of the remote file will be stored as a string in <code>$data</code>.</p>\n",
      "date_published": "2008-04-08T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/determine-file-extensions-using-javascript/",
      "url": "https://www.abeautifulsite.net/posts/determine-file-extensions-using-javascript/",
      "title": "Determine file extensions using JavaScript",
      "content_html": "<p>A quick JavaScript function to determine a file's extension.</p>\n<pre><code class=\"language-js\">function fileExt(path) {\n  return path.substr(path.lastIndexOf('.') + 1);\n}\n</code></pre>\n",
      "date_published": "2008-03-20T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/but-we-havent-even-mastered-acid2/",
      "url": "https://www.abeautifulsite.net/posts/but-we-havent-even-mastered-acid2/",
      "title": "But we haven&#39;t even mastered Acid2!",
      "content_html": "<p>Safari was the first mainstream browser to pass the <a href=\"http://www.webstandards.org/action/acid2/\">Acid2 Test</a> now. Opera was a close second. Firefox finally nailed it down with version 3. Even Micrsoft, back in December, announced that <a href=\"http://blogs.msdn.com/ie/archive/2007/12/19/internet-explorer-8-and-acid2-a-milestone.aspx\">IE8 passes the Acid2 Test</a>. Web browsers have certainly come a long way towards standards compliance...or have they?</p>\n<p>From the <a href=\"http://www.webstandards.org/\">WaSP</a>:</p>\n<blockquote>\n<p>The <a href=\"http://www.webstandards.org/action/acid3\">Acid3 Test</a> is designed to test specifications for Web 2.0, and exposes potential flaws in implementations of the public ECMAScript 262 and W3C Document Object Model 2 standards. Collectively known as DOM Scripting, it is these technologies that enable advanced page interactivity and power many advanced web applications such as web-based email and online office applications.</p>\n<p>As a series of 100 mini-tests, Acid3 has already been found to expose flaws in all tested browsers, including Internet Explorer, Firefox, Opera, and Safari. WaSP hopes that Acid3 will prove useful to browser makers during the development of future versions of their products.</p>\n</blockquote>\n<p>Just as no browser properly rendered the Acid2 Test when it was released, no browser currently renders the Acid3 Test properly. Will history repeat itself, or will Opera, Firefox, or maybe even IE8 take the lead and pass the Acid3 test first?</p>\n",
      "date_published": "2008-03-06T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/netscape-support-ending-in-february-2008/",
      "url": "https://www.abeautifulsite.net/posts/netscape-support-ending-in-february-2008/",
      "title": "Netscape support ending in February 2008",
      "content_html": "<p>On December 28th, 2007, the <a href=\"http://blog.netscape.com/\">Netscape Blog</a> announced that AOL is <a href=\"http://blog.netscape.com/2007/12/28/end-of-support-for-netscape-web-browsers/\">ending support for Netscape web browsers</a> effective February 1, 2008. This doesn't come as much of a surprise, considering the significant decline in Netscape's marketshare over the past decade to more competative browsers such as IE, Firefox, Opera, and Apple's Safari. Nevertheless, it is upsetting to see what was once the technical leader among web browsers become a thing of the past.</p>\n<p>Although Netscape has been Mozilla-based since version 6, AOL claims that their &quot;transition into an ad-supported web business leaves little room for the size of investment needed to get the Netscape browser to a point many of its fans expect it to be.&quot; Netscape users are being encouraged to migrate to <a href=\"http://firefox.com/\">Mozilla Firefox</a>. Nostalgic Netscape users can download the <a href=\"https://addons.mozilla.org/en-US/firefox/user/56836\">Netscape theme and extensions</a> for Firefox from the Mozilla website.</p>\n<h2 id=\"a-bit-of-history\">A bit of history <a class=\"direct-link\" href=\"#a-bit-of-history\">#</a></h2>\n<p>Netscape Navigator became extremely popular in the mid-1990's during the consumer Internet revolution. Their success was seen as a threat by Microsoft who promptly responded with Microsoft Internet Explorer. The two companies began an agile battle for marketshare that would eventually be coined the <a href=\"http://en.wikipedia.org/wiki/Browser_wars\">Browser Wars</a>.</p>\n<p>During this time, the rival companies implemented a number of proprietary features in an effort to out perform each other and gain marketshare. Consequently, development was focused more on features than on bug fixes, security, and standardization which led to frustrating and confusing times for consumers and developers alike.</p>\n<p>In 1998, as Internet Explorer grew increasingly more popular, Netscape released most of its source code under an open source license which became known as the <a href=\"http://www.mozilla.org/\">Mozilla Project</a>. After being purchased by AOL, Netscape released version 6.0 which was based on the Mozilla browser, but its success was minimal at best. Netscape continued to use the Mozilla framework through 2008, at which time it was officially discontinued.</p>\n",
      "date_published": "2008-01-03T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/ie8-burns-the-acid-2-test/",
      "url": "https://www.abeautifulsite.net/posts/ie8-burns-the-acid-2-test/",
      "title": "IE8 burns the Acid 2 test",
      "content_html": "<p>An internal build of IE8 is reported to have passed the <a href=\"http://www.hixie.ch/tests/evil/acid/002/\">Acid 2 test</a>. This is great news, as Microsoft is showing more and more progress towards incorporating web standards into Internet Explorer, even though IE7 has remained dormant since it's release back in October 2006.</p>\n<p>The <a href=\"http://blogs.msdn.com/ie/archive/2007/12/19/internet-explorer-8-and-acid2-a-milestone.aspx\">entire post</a> was a breath of fresh air, but I was very impressed by one statement in particular:</p>\n<blockquote>\n<p>With respect to standards and interoperability, our goal in developing Internet Explorer 8 is to support the right set of standards with excellent implementations and do so without breaking the existing web. This second goal refers to the lessons we learned during IE 7. IE7's CSS improvements made IE more compliant with some standards and less compatible with some sites on the web as they were coded. Many sites and developers have done special work to work well with IE6, mostly as a result of the evolution of the web and standards since 2001 and the level of support in the various versions of IE that pre-date many standards. We have a responsibility to respect the work that sites have already done to work with IE. We must deliver improved standards support and backwards compatibility so that IE8 (1) continues to work with the billions of pages on the web today that already work in IE6 and IE7 and (2) makes the development of the next billion pages, in an interoperable way, much easier. We'll blog more, and learn more, about this during the IE8 beta cycle.</p>\n</blockquote>\n<p>A lot of people argue Microsoft's ability to create a browser that is standards compliant, but the preceding paragraph highlights a few important points. Whether they want to or not, Microsoft has an obligation to make their software backwards compatible. This is understandable to a reasonable degree, especially considering the fact that a significant number of websites would suffer considerably if they didn''t.</p>\n<p>A Beta version of IE8 is expected to be available in the first half of 2008.</p>\n",
      "date_published": "2007-12-21T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/jquery-checkboxes-select-all-select-none-and-invert-selection/",
      "url": "https://www.abeautifulsite.net/posts/jquery-checkboxes-select-all-select-none-and-invert-selection/",
      "title": "Select all, select none, and invert selection with jQuery",
      "content_html": "<p>A demonstration of selecting checkboxes using jQuery.We start off with a bunch of checkboxes:</p>\n<pre><code class=\"language-html\">&lt;fieldset id=&quot;group_1&quot;&gt;\n  &lt;input type=&quot;checkbox&quot; name=&quot;numbers[]&quot; value=&quot;0&quot; /&gt;\n  &lt;input type=&quot;checkbox&quot; name=&quot;numbers[]&quot; value=&quot;1&quot; /&gt;\n  &lt;input type=&quot;checkbox&quot; name=&quot;numbers[]&quot; value=&quot;2&quot; /&gt;\n  &lt;input type=&quot;checkbox&quot; name=&quot;numbers[]&quot; value=&quot;3&quot; /&gt;\n  &lt;input type=&quot;checkbox&quot; name=&quot;numbers[]&quot; value=&quot;4&quot; /&gt;\n  &lt;input type=&quot;checkbox&quot; name=&quot;numbers[]&quot; value=&quot;5&quot; /&gt;\n  &lt;input type=&quot;checkbox&quot; name=&quot;numbers[]&quot; value=&quot;6&quot; /&gt;\n  &lt;input type=&quot;checkbox&quot; name=&quot;numbers[]&quot; value=&quot;7&quot; /&gt;\n  &lt;input type=&quot;checkbox&quot; name=&quot;numbers[]&quot; value=&quot;8&quot; /&gt;\n  &lt;input type=&quot;checkbox&quot; name=&quot;numbers[]&quot; value=&quot;9&quot; /&gt;\n&lt;/fieldset&gt;\n</code></pre>\n<p>Now, we add some links:</p>\n<pre><code class=\"language-html\">&lt;a rel=&quot;group_1&quot; href=&quot;#select_all&quot;&gt;Select All&lt;/a&gt;\n&lt;a rel=&quot;group_1&quot; href=&quot;#select_none&quot;&gt;Select None&lt;/a&gt;\n&lt;a rel=&quot;group_1&quot; href=&quot;#invert_selection&quot;&gt;Invert Selection&lt;/a&gt;\n</code></pre>\n<p>The <code>rel</code> attribute is equal to the ID of the containing element of the checkbox group. In this example the containing element is a <code>fieldset</code>, but it could be a <code>DIV</code>, <code>P</code>, <code>UL</code>, etc.</p>\n<p>Now, we add behaviors using jQuery:</p>\n<pre><code class=\"language-html\">&lt;script type=&quot;text/javascript&quot;&gt;\n  $(document).ready(function() {\n    // Select all\n    $(&quot;a[href='#select_all']&quot;).click(function() {\n      $(&quot;#&quot; + $(this).attr('rel') + &quot; input[type='checkbox']&quot;).attr('checked', true);\n      return false;\n    });\n\n    // Select none\n    $(&quot;a[href='#select_none']&quot;).click(function() {\n      $(&quot;#&quot; + $(this).attr('rel') + &quot; input[type='checkbox']&quot;).attr('checked', false);\n      return false;\n    });\n\n    // Invert selection\n    $(&quot;a[href='#invert_selection']&quot;).click(function() {\n      $(&quot;#&quot; + $(this).attr('rel') + &quot; input[type='checkbox']&quot;).each(function() {\n        $(this).attr('checked', !$(this).attr('checked'));\n      });\n      return false;\n    });\n  });\n&lt;/script&gt;\n</code></pre>\n<p>To add the same functionality to another group of checkboxes, create more links and adjust the <code>rel</code> attribute accordingly:</p>\n<pre><code class=\"language-html\">&lt;a rel=&quot;group_2&quot; href=&quot;#select_all&quot;&gt;Select All&lt;/a&gt;\n&lt;a rel=&quot;group_2&quot; href=&quot;#select_none&quot;&gt;Select None&lt;/a&gt;\n&lt;a rel=&quot;group_2&quot; href=&quot;#invert_selection&quot;&gt;Invert Selection&lt;/a&gt;\n\n&lt;a rel=&quot;group_3&quot; href=&quot;#select_all&quot;&gt;Select All&lt;/a&gt;\n&lt;a rel=&quot;group_3&quot; href=&quot;#select_none&quot;&gt;Select None&lt;/a&gt;\n&lt;a rel=&quot;group_3&quot; href=&quot;#invert_selection&quot;&gt;Invert Selection&lt;/a&gt;\n</code></pre>\n",
      "date_published": "2007-12-09T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/external-popup-links-using-jquery/",
      "url": "https://www.abeautifulsite.net/posts/external-popup-links-using-jquery/",
      "title": "External popup links using jQuery",
      "content_html": "<p>With the deprecation of the <code>target</code> attribute in XHTML Strict, opening links in new windows has become a bit trivial, if not annoying, to standardize. I always look for a consistent, unobtrusive approach that degrades gracefully; and since I use jQuery quite frequently, this is how I usually handle them.</p>\n<p>The solution is a small piece of jQuery code in your <code>$(document).ready()</code> section:</p>\n<pre><code class=\"language-js\">$(document).ready(function() {\n  $(document).on('click', 'A[rel=&quot;external&quot;]', function(event) {\n    event.preventDefault();\n    window.open($(this).attr('href'));\n  });\n});\n</code></pre>\n<p>Now, add <code>rel=&quot;external&quot;</code> to all of the links that you want to open in a new window:</p>\n<pre><code class=\"language-html\">&lt;a href=&quot;http://domain.com/&quot; rel=&quot;external&quot;&gt;Domain.com&lt;/a&gt;\n</code></pre>\n<p>From here on out, users that have JavaScript enabled will receive external pages in new windows, while those without JavaScript will still be directed to the appropriate location.</p>\n<p>I use <code>rel=&quot;external&quot;</code> because it's generally a good practice to limit popup links to external websites only. You could very well use <code>rel=&quot;popup&quot;</code> instead, but I prefer the former for semantics.</p>\n",
      "date_published": "2007-11-15T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/convert-arrays-to-csv-with-php/",
      "url": "https://www.abeautifulsite.net/posts/convert-arrays-to-csv-with-php/",
      "title": "Convert arrays to CSV with PHP",
      "content_html": "<p>The following snippet will convert a simple PHP array into CSV (comma-separated values) format.</p>\n<pre><code class=\"language-php\">function csv($array) {\n  $csv = &quot;&quot;;\n  for ($i = 0; $i &lt; count($array); $i++) {\n    $csv .= '&quot;' . str_replace('&quot;', '&quot;&quot;', $array[$i]) . '&quot;';\n    if ($i &lt; count($array) - 1) $csv .= &quot;,&quot;;\n  }\n  return $csv;\n}\n</code></pre>\n<h2 id=\"output\">Output <a class=\"direct-link\" href=\"#output\">#</a></h2>\n<pre><code class=\"language-php\">$a = array(&quot;item 1&quot;, &quot;item 2&quot;, &quot;item 3&quot;);\n\necho csv($a); // &quot;item 1&quot;,&quot;item 2&quot;,&quot;item 3&quot;\n</code></pre>\n",
      "date_published": "2007-10-03T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/getting-proportionally-resized-dimensions-of-an-image/",
      "url": "https://www.abeautifulsite.net/posts/getting-proportionally-resized-dimensions-of-an-image/",
      "title": "Getting proportionally-resized dimensions of an image",
      "content_html": "<p>This is extremely useful when you need to scale down an image within a certain pair of dimensions.</p>\n<h2 id=\"get_resized_dimensions()\">get_resized_dimensions() <a class=\"direct-link\" href=\"#get_resized_dimensions()\">#</a></h2>\n<h3 id=\"parameters\">Parameters <a class=\"direct-link\" href=\"#parameters\">#</a></h3>\n<ul>\n<li><code>$width</code> - The width of the image to be resized</li>\n<li><code>$height</code> - The height of the image to be resized</li>\n<li><code>$max_width</code> - The maximum allowed width of the resized image</li>\n<li><code>$max_height</code> - The maximum allowed height of the resized image</li>\n</ul>\n<h3 id=\"return-values\">Return values <a class=\"direct-link\" href=\"#return-values\">#</a></h3>\n<p>The function outputs an array containing two elements: <code>width</code> and <code>height</code></p>\n<pre><code class=\"language-php\">$new_dimensions = get_resized_dimensions(640, 480, 200, 200)\necho $new_dimensions['width'] . ', ' . $new_dimensions['height'];\n</code></pre>\n<p>The output for the above code will be: <code>200, 150</code></p>\n<h3 id=\"code\">Code <a class=\"direct-link\" href=\"#code\">#</a></h3>\n<pre><code class=\"language-php\">function get_resized_dimensions($width, $height, $max_width, $max_height) {\n  // Check for bad values\n  if ($width &lt;= 0 || $height &lt;= 0) return false;\n\n  // Determine aspect ratio\n  $aspect_ratio = $height / $width;\n\n  // First check width\n  if ($width &gt; $max_width) {\n    $new_width = $max_width;\n    $new_height = $new_width * $aspect_ratio;\n  } else {\n    $new_width = $width;\n    $new_height = $height;\n  }\n\n  // Now check height\n  if ($new_height &gt; $max_height) {\n    $new_height = $max_height;\n    $new_width = $new_height / $aspect_ratio;\n  }\n\n  return array('width' =&gt; $new_width, 'height' =&gt; $new_height);\n}\n</code></pre>\n",
      "date_published": "2007-09-17T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/javascript-functions-for-basename-and-dirname/",
      "url": "https://www.abeautifulsite.net/posts/javascript-functions-for-basename-and-dirname/",
      "title": "JavaScript functions for basename and dirname",
      "content_html": "<p>Here are two JavaScript functions that mimic their PHP cousins.</p>\n<h2 id=\"basename()\">basename() <a class=\"direct-link\" href=\"#basename()\">#</a></h2>\n<pre><code class=\"language-js\">function basename(path) {\n  return path.replace(/.*\\//, '');\n}\n</code></pre>\n<h2 id=\"dirname()\">dirname() <a class=\"direct-link\" href=\"#dirname()\">#</a></h2>\n<pre><code class=\"language-js\">function dirname(path) {\n  return path.match(/.*\\//);\n}\n</code></pre>\n<p>Unlike their PHP cousins, these functions <em>do not</em> support paths separated with backslashes.</p>\n",
      "date_published": "2007-09-16T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/avoiding-timestamp-errors-when-calculating-dates-in-php/",
      "url": "https://www.abeautifulsite.net/posts/avoiding-timestamp-errors-when-calculating-dates-in-php/",
      "title": "Avoiding timestamp errors when calculating dates in php",
      "content_html": "<p>When calculating dates in PHP, it is easy to add millisecond values such as <code>60 * 60 * 24</code> to increment the time by one day. This can become problematic for two main reasons.</p>\n<h2 id=\"issues-with-leap-years\">Issues with leap years <a class=\"direct-link\" href=\"#issues-with-leap-years\">#</a></h2>\n<p>A year has approximately 365.25 days, hence a leap year occurs once every four years. If you start on Tuesday April 1, 2003 at 12:00:00 the timestamp would be <code>1049198400</code>. Adding the length of one day (<code>60 * 60 * 24</code>, or 86,400ms) would give us <code>1049198400</code> + 86,400 = <code>1049284800</code>, which is the same as Wed April 02, 2003 12:00:00. No problem here.</p>\n<p>Using this same methodology, we realize that adding one year (<code>60 * 60 * 24 * 365</code>, or 31,536,000ms) to Wednesday April 02, 2003 12:00:00 would result in <code>1049284800</code> + 31,536,000 = <code>1080820800</code>. This is problematic because <code>1080820800</code> is the timestamp for Thursday 01 April 2004 12:00:00 (we were expecting the next day, 02 April).</p>\n<p>Even if we used <code>60 * 60 * 24 * 365.25</code> (or 31,557,600ms) to compensate for the quarter-day phenomenon, we would end up with <code>1049284800</code> + 31,557,600 = <code>1080842400</code>, which is Thursday 01 Apr 2004 18:00:00. This &quot;miscalculation&quot; is due to the leap day that occurred on 29 February 2004.</p>\n<h2 id=\"issues-with-daylight-saving-time\">Issues with daylight saving time <a class=\"direct-link\" href=\"#issues-with-daylight-saving-time\">#</a></h2>\n<p>Another issue involves Daylight Saving Time (DST). The calculation is affected similarly and a one hour shift forward or backward will occur if your version of PHP is configured to account for DST. This can turn out to be more drastic than a one hour shift, however. Consider this:</p>\n<pre><code class=\"language-php\">$current_date = &quot;2007-11-04&quot;;\n$timestamp = strtotime($current_date);\n$timestamp += 60 * 60 * 24; // one day increment\n$new_date = date(&quot;Y-m-d&quot;, $timestamp);\n</code></pre>\n<p>On 04 November 2007, the time &quot;falls back&quot; one hour, thus <code>$new_date</code> contains the same value as <code>$current_date</code> when <code>$current_date</code> is equal to <code>2007-11-04</code>. Here are some sample outputs surrounding 04 November 2007:</p>\n<table>\n  <thead>\n    <tr>\n      <th>$current_date</th>\n      <th>$new_date</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>2007-11-01</td>\n      <td>2007-11-02</td>\n    </tr>\n    <tr>\n      <td>2007-11-02</td>\n      <td>2007-11-03</td>\n    </tr>\n    <tr>\n      <td>2007-11-03</td>\n      <td>2007-11-04</td>\n    </tr>\n    <tr>\n      <td>2007-11-04</td>\n      <td><mark>2007-11-04</mark></td>\n    </tr>\n    <tr>\n      <td>2007-11-05</td>\n      <td>2007-11-06</td>\n    </tr>\n    <tr>\n      <td>2007-11-06</td>\n      <td>2007-11-07</td>\n    </tr>\n  </tbody>\n</table>\n<p>Consequently, if we were outputting hours, minutes and seconds as well, every day after the DST change would be exactly one hour off (until, of course, the next DST change canceled it out).</p>\n<h2 id=\"a-better-way-to-calculate-dates\">A Better Way to Calculate Dates <a class=\"direct-link\" href=\"#a-better-way-to-calculate-dates\">#</a></h2>\n<p>Fortunately, we can overcome both of these hurdles simply by using the <code>strtotime()</code> function. Instead of adding one day to a timestamp like this:</p>\n<pre><code class=\"language-php\">$date += 60 * 60 * 24;\n</code></pre>\n<p>We can successfully add one day like this:</p>\n<pre><code class=\"language-php\">$date = strtotime(date(&quot;Y-m-d&quot;, strtotime($date)) . &quot; +1 day&quot;);\n</code></pre>\n<p>Similarly, we can use the same method for weeks, months, years, etc.:</p>\n<pre><code class=\"language-php\">$date = strtotime(date(&quot;Y-m-d&quot;, strtotime($date)) . &quot; +1 week&quot;);\n$date = strtotime(date(&quot;Y-m-d&quot;, strtotime($date)) . &quot; +2 week&quot;);\n$date = strtotime(date(&quot;Y-m-d&quot;, strtotime($date)) . &quot; +1 month&quot;);\n$date = strtotime(date(&quot;Y-m-d&quot;, strtotime($date)) . &quot; +30 days&quot;);\n</code></pre>\n<p>Using the <code>strtotime()</code> function to add relative blocks of time results in accurate calculations where the previously shown method sometimes fails.</p>\n<p>What if you wanted to add one month to <code>$date</code>? Using the previous method, you would be forced to estimate the duration of a month or create a really smart algorithm to figure out the exact duration of the given month. Since each month varies in length, the first option is unreliable. The second option has already been incorporated into the <code>strtotime()</code> function, so why not use that instead?</p>\n<h2 id=\"more-examples\">More examples <a class=\"direct-link\" href=\"#more-examples\">#</a></h2>\n<p>You can use the following examples to experiment with. For further documentation, see the <a href=\"http://php.net/\">PHP Manual</a>'s section on <a href=\"http://php.net/strtotime/\"><code>strtotime()</code></a>.</p>\n<pre><code class=\"language-php\">$date = &quot;2005-05-10&quot;;\necho date(&quot;Y-m-d&quot;, strtotime(date(&quot;Y-m-d&quot;, strtotime($date)) . &quot; +30 days&quot;)); // output is 2005-06-09\necho date(&quot;Y-m-d&quot;, strtotime(date(&quot;Y-m-d&quot;, strtotime($date)) . &quot; +4 weeks&quot;)); // output is 2005-06-07\necho date(&quot;Y-m-d&quot;, strtotime(date(&quot;Y-m-d&quot;, strtotime($date)) . &quot; +1 month&quot;)); // output is 2005-06-10\n</code></pre>\n",
      "date_published": "2007-08-29T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/an-excellent-free-font-resource/",
      "url": "https://www.abeautifulsite.net/posts/an-excellent-free-font-resource/",
      "title": "DaFont: an excellent free font resource",
      "content_html": "<p>I came across an excellent website for free fonts online. No annoying pop-ups, minimal banner ads, and the best feature of all — custom previews for all their fonts.</p>\n<p>Check 'em out at <a href=\"http://dafont.com/\">dafont.com</a>.</p>\n",
      "date_published": "2007-07-31T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/forcing-file-downloads-in-php/",
      "url": "https://www.abeautifulsite.net/posts/forcing-file-downloads-in-php/",
      "title": "Forcing file downloads in PHP",
      "content_html": "<p>I've seen a number of methods to force file downloads using the PHP <code>header()</code> function which, essentially, sends a raw HTTP header to the browser. Depending on your browser, some files won't be downloaded automatically. Instead, they will be handled by the browser itself or a corresponding plug-in. This is often an issue with PDF files, TXT files, CSV files, LOG files, multimedia files (MP3, WAV, MOV, MPEG, AVI, etc.), and, for many users, Microsoft Office files. As a developer, being able to force the download of any type of file is extremely useful.</p>\n<h2 id=\"to-force%2C-or-not-to-force%3F\">To force, or not to force? <a class=\"direct-link\" href=\"#to-force%2C-or-not-to-force%3F\">#</a></h2>\n<p>The argument of whether or not it is considered &quot;good practice&quot; to force users to download files rather than letting their browser handle them as exepected does not really have a place in this article. In some cases it is appropriate while in others it is probably not.</p>\n<p>It has been a convenience the many times I have used it to push CSV files out to end users who wouldn't know enough to copy and paste the data from the browser window into a file and then save it.</p>\n<p>It is also handy for when you generate PDF files and want to push them to the user as a download rather than have it open up inside the browser window. Not only does this make the PDF easier for the user to download, it also provides consistency for the way downloads are handled regardless of what browser plug-ins the user has installed.</p>\n<p>Again, in some cases it is appropriate to force a download, in others it is not.</p>\n<h2 id=\"the-force-download-script\">The force download script <a class=\"direct-link\" href=\"#the-force-download-script\">#</a></h2>\n<p>After rigorous browser testing and code tweaking, here is the script I ended up with. All of the unnecessary stuff has been stripped out and it has been simplified as much as possible.</p>\n<pre><code class=\"language-php\">$file = &quot;filename.ext&quot;;\n\n// Quick check to verify that the file exists\nif (!file_exists($file)) die(&quot;File not found&quot;);\n\n// Force the download\nheader(&quot;Content-Disposition: attachment; filename=&quot;&quot; . basename($file) . &quot;&quot;&quot;);\nheader(&quot;Content-Length: &quot; . filesize($file));\nheader(&quot;Content-Type: application/octet-stream;&quot;);\nreadfile($file);\n</code></pre>\n<h3 id=\"using-the-script\">Using the script <a class=\"direct-link\" href=\"#using-the-script\">#</a></h3>\n<p>Although you can implement this script practically anywhere you want, it is easiest to copy the code into a file named something like <code>force_download.php</code> and pass an identifier via query string, POST form data, or session variable. Users who are directed to the script will be prompted to download the appropriate file regardless of their browser and plug-in settings.</p>\n<p>The PHP <code>readfile()</code> function reads files verbatim, including PHP files. This opens up a major security hole if you are passing the actual filename using GET or POST form data (or anything else that the user can spoof). A curious user could easily gain access to sensitive database connection information or other system data by entering something like <code>?file=../includes/db_connection.php</code>. You should always use some kind of identifier to prevent unauthorized access to sensitive information.</p>\n<h3 id=\"compatibility\">Compatibility <a class=\"direct-link\" href=\"#compatibility\">#</a></h3>\n<p>This script has been tested to work in IE6/7, Firefox 2, Opera 9, and Safari 3.</p>\n<h2 id=\"browser-issues\">Browser issues <a class=\"direct-link\" href=\"#browser-issues\">#</a></h2>\n<h3 id=\"safari-%26-filenames\">Safari &amp; filenames <a class=\"direct-link\" href=\"#safari-%26-filenames\">#</a></h3>\n<p>Surprisingly, all of the force-download scripts I researched online failed to work properly in Safari. The download occurred, but the resulting file was named after the script (i.e. <code>force_download.php</code>). If I renamed the downloaded file to its correct name, it would open just fine. This, however, was a terrible inconvenience. A bit of testing revealed the culprit. Most of the scripts had a line similar to this:</p>\n<pre><code class=\"language-php\">header(&quot;Content-Disposition: attachment&quot;);\n</code></pre>\n<p>Others went a step further and had something like this:</p>\n<pre><code class=\"language-php\">header(&quot;Content-Disposition: attachment; filename=&quot; . basename($file));\n</code></pre>\n<p>But the correct way to specify the filename requires that you put double quotes around the filename attribute:</p>\n<pre><code class=\"language-php\">header(&quot;Content-Disposition: attachment; filename=&quot;&quot; . basename($file) . &quot;&quot;&quot;);\n</code></pre>\n<p>By simply adding quotes around the filename, Safari correctly names the resulting download.</p>\n<h3 id=\"caching-problems\">Caching problems <a class=\"direct-link\" href=\"#caching-problems\">#</a></h3>\n<p>Many of the scripts I found included header calls to tell the browser not to use a cached version of the file. Caching wasn't an issue with any of the browsers I tested, but if it becomes problematic, add the following lines to the script (above the call to <code>readfile()</code>).</p>\n<pre><code class=\"language-php\">header(&quot;Cache-Control: no-cache, must-revalidate&quot;);\nheader(&quot;Expires: Mon, 26 Jul 1997 05:00:00 GMT&quot;);\n</code></pre>\n<p>The above lines are from the <a href=\"http://php.net/header\">PHP Manual</a> and are expected to work in most browsers.</p>\n<h3 id=\"internet-explorer-%26-https\">Internet explorer &amp; https <a class=\"direct-link\" href=\"#internet-explorer-%26-https\">#</a></h3>\n<p>Certain versions of Internet Explorer will generate the following error message when downloads are forced using this technique:</p>\n<p>Internet Explorer cannot download file from server.  Internet Explorer was not able to open this Internet site. The requested site is either unavailable or cannot be found. Please try again later.</p>\n<p>To get around this, whenever you are forcing a download over HTTPS append the following two lines of code to the force download script (above the call to <code>readfile()</code>).</p>\n<pre><code class=\"language-php\">// IE fix (for HTTPS only) header('Cache-Control: private');\nheader('Pragma: private');\n</code></pre>\n<p>You can find more information about this bug on the <a href=\"http://support.microsoft.com/kb/316431\">MSDN Help &amp; Support</a> website.</p>\n",
      "date_published": "2007-07-08T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/web-standards-are-just-minor-details/",
      "url": "https://www.abeautifulsite.net/posts/web-standards-are-just-minor-details/",
      "title": "Web standards are just &quot;minor details&quot;",
      "content_html": "<p>A friend of mine recently graduated and spread his wings by venturing into the corporate world. He obtained a position as a junior project manager for a web consulting firm in Atlanta. Their work is very professional and their designs are great, but it was immediately evident that they had no understanding of web standards whatsoever. I asked my friend about his company's stance on the matter.</p>\n<blockquote>\n<p>I asked about that. The sites we build are for industrial use, non-computer people, so we make em work and don't fuss about the minor details — web standards anyway. We focus on functionality.</p>\n</blockquote>\n<p>[Jeffrey Zeldman](Jeffrey Zeldman) would pop a blood vessel if he had heard that. After all, isn't that what web standards is all about? Seems like someone is missing the point here. Mark my word, web companies that worry more about the appearance of their work than the framework that supports it will soon find themselves struggling to keep up with the rest of the world.</p>\n<p>That said, I'd like to recommend a very good book called <a href=\"http://www.zeldman.com/dwws/\">Designing With Web Standards</a>. Whether you want to give a hard-headed employer some insight about the future of the web or you just want to learn a little bit about it yourself, this book will provide you with a complete understanding of what the web was meant to be, and how we're going to get it there.</p>\n<blockquote>\n<p>An equal opportunity disease afflicts nearly every site now on the web, from the humblest personal home pages to the multi-million dollar sites of corporate giants. Cunning and insidious, the disease goes largely unrecognized because it is based on industry norms. Although their owners and managers might not know it yet, 99.9% of all websites are obsolete.</p>\n</blockquote>\n<p>Well said, Mr. Zeldman. Well said.</p>\n",
      "date_published": "2007-07-02T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/creating-stylesheets-for-handheld-devices/",
      "url": "https://www.abeautifulsite.net/posts/creating-stylesheets-for-handheld-devices/",
      "title": "Creating stylesheets for handheld devices",
      "content_html": "<p>It's not uncommon so see someone surfing the net with their cell phone or PDA these days or, at least, trying to. Unfortunately, portable technologies still have a long way to go before they conquer the web with their tiny screens. The good news is that, with a little help from stylesheets, your website can look presentable even in the palm of somebody's hand!</p>\n<h2 id=\"handheld-stylesheets\">Handheld stylesheets <a class=\"direct-link\" href=\"#handheld-stylesheets\">#</a></h2>\n<p>Similar to the way that <a href=\"http://abeautifulsite.net/notebook.php?article=16\">print stylesheets</a> make your webpages ready for paper, handheld stylesheets make your webpages ready for portable devices. This is often necessary due to the fact that most websites aren't designed for small screens. Fortunately, with a little extra effort, this obstacle is easy to overcome.</p>\n<h3 id=\"linking-the-handheld-stylesheet\">Linking the handheld stylesheet <a class=\"direct-link\" href=\"#linking-the-handheld-stylesheet\">#</a></h3>\n<p>We start off by linking to what will become our handheld stylesheet:</p>\n<pre><code class=\"language-html\">&lt;link href=&quot;your_handheld_style.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; media=&quot;handheld&quot; /&gt;\n</code></pre>\n<p>Notice how the <code>media</code> attribute is set to <code>handheld</code> instead of <code>screen</code>.<br>\nNow it's time to create <code>your_handheld_style.css</code>.</p>\n<h3 id=\"creating-the-handheld-stylesheet\">Creating the handheld stylesheet <a class=\"direct-link\" href=\"#creating-the-handheld-stylesheet\">#</a></h3>\n<p>You could use the normal screen stylesheet as a starting point to make your handheld stylesheet. Depending on the complexity of the CSS, it may be better to start from scratch or just copy and paste one section at a time, modifying the styles little by little and testing as you go. You could even choose to make a completely different look and feel for the handheld version of your website. The key thing to remember here is that you're creating a design that is meant to display on small screens, often no larger than 240x320 pixels.</p>\n<p>Which ever route you take, the fact that you will eventually need to preview the &quot;portable&quot; version of your website is inescapable...but what if you don't have a handheld device?</p>\n<h2 id=\"testing-the-handheld-stylesheet-without-a-handheld-device\">Testing the handheld stylesheet without a handheld device <a class=\"direct-link\" href=\"#testing-the-handheld-stylesheet-without-a-handheld-device\">#</a></h2>\n<h3 id=\"using-the-opera-web-browser\">Using the Opera web browser <a class=\"direct-link\" href=\"#using-the-opera-web-browser\">#</a></h3>\n<p>There are a lot of features I really love about <a href=\"http://www.opera.com/\">Opera</a>, one of them being the <em>Small screen</em> feature. By clicking on <code>View</code> → <code>Small screen</code> or by pressing <kbd>Shift</kbd> + <kbd>F11</kbd>, you can preview any website in a simulated &quot;handheld&quot; mode. This is usually how I test my handheld stylesheets when I don't have a portable device laying around:</p>\n<p><img src=\"/images/opera_small_screen.jpg\" alt=\"Opera small screen\"></p>\n<p>During testing in <em>Small screen</em> mode, it may be helpful to add the following code to your stylesheet. This will simulate the screen width of many common portable devices. Just remember to remove it before you upload!</p>\n<pre><code class=\"language-css\">html {\n  width: 240px;\n  border: solid 1px #000000;\n}\n</code></pre>\n<p>Another thing I would recommend using in your handheld stylesheet is this:</p>\n<pre><code class=\"language-html\">* { max-width: 100%; }\n</code></pre>\n<p>This will prevent elements such as images and textareas from exceeding the width of the device's screen.</p>\n<h3 id=\"using-opera-mini\">Using Opera Mini <a class=\"direct-link\" href=\"#using-opera-mini\">#</a></h3>\n<p>Another method to test your handheld stylesheet is with <a href=\"http://www.operamini.com/\">Opera Mini</a>. The program itself requires a mobile phone, but no worries! There's also an <a href=\"http://www.operamini.com/demo/?url=http://abeautifulsite.net\">online simulator</a> you can try out on any website. Here is what A Beautiful Site looks like on it:</p>\n<p><img src=\"/images/opera_mini_simulator.jpg\" alt=\"Opera Mini simulator\"></p>\n<h2 id=\"a-note-about-handheld-stylesheets\">A note about handheld stylesheets <a class=\"direct-link\" href=\"#a-note-about-handheld-stylesheets\">#</a></h2>\n<p>An important thing to remember while you're coding up a handheld stylesheet is the fact that most handhelds <em>will not</em> display your site exactly the way you intend them to. It sounds kind of ironic that you just spent the time writing up a completely different stylesheet just to find out that it's not going to work on the media you intended it to work on. Well, all is not lost. Let me explain...</p>\n<p>Due to hardware and software limitations, most handheld devices are designed to display certain elements of webpages in ways that work for both the device and the user. For example, it wouldn't be of much use if a PDA with a screen resolution of 240x320 pixels displayed a full-size image that was 800x600 pixels. In most cases, the device will automatically scale the image down so the entire image can be viewed. Similar adjustments are made to text, links, form elements, floated elements, etc.</p>\n<p>So what good is a handheld stylesheet if they aren't really supported? Well, they provide a foundation for the design which you <em>intend</em> the portable version of your website to have. Not only that, support for handheld stylesheets is growing rapidly as technology advances. For the little time and effort they actually require to produce, I'd say they're worth the effort.</p>\n<h2 id=\"what-if-i-don't-have-a-handheld-stylesheet%3F\">What if I don't have a handheld stylesheet? <a class=\"direct-link\" href=\"#what-if-i-don't-have-a-handheld-stylesheet%3F\">#</a></h2>\n<p>A good question indeed. Most portable browsers will either make a good attempt at using your normal stylesheet or ditch the styles altogether. The benefit of using handheld stylesheets is that you are, to some extent, guaranteed your website will reflect at least a little bit of the design which you intended.</p>\n<h2 id=\"the-future-of-handheld-stylesheets\">The future of handheld stylesheets <a class=\"direct-link\" href=\"#the-future-of-handheld-stylesheets\">#</a></h2>\n<p>Some portable browsers, such as Opera Mini and Apple's anticipated iPhone version of Safari, do a fairly good job of rendering websites based on their default screen styles. Aside from the low resolutions that portable devices commonly suffer, it makes me wonder if handheld stylesheets will even be necessary in years to come. Since the path is still unclear, however, it can't really hurt to have them.</p>\n",
      "date_published": "2007-05-30T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/creating-a-printable-website-using-print-stylesheets/",
      "url": "https://www.abeautifulsite.net/posts/creating-a-printable-website-using-print-stylesheets/",
      "title": "Creating a printable website using print stylesheets",
      "content_html": "<p>I frequently see little printer icons all over the web that clearly mean I can print out a clean version of the webpage that I'm looking at. These little icons are indeed a beautiful sight from the user's perspective. No more having to modify printer settings or copy and paste certain content areas into a word processing program just to get it on paper. In fact, I used to be quite the fan of printable versions on the web until I realized what a pain it can be to develop them.</p>\n<p>One method I've seen involves creating a separate version of each page that doesn't have the header, footer, and navigational elements. By doing this, one could nearly double the size of their website without even trying, and who knows how many people are actually going to print all those pages. It seems like a wasted effort, if you ask me.</p>\n<p>A somewhat better method that a lot of database-driven websites use is to create a separate version of the content dynamically. This involves using a special page to generate a printable version of the content, again without the header, footer, and navigational elements. This is a lot better because it doesn't involve duplicating content on extra, unnecessary webpages. It still requires, however, extra effort to develop that special page to render the printable content; and who's to say that all the data is coming from just one table in the database? Another potential development nightmare.</p>\n<p>To add insult to injury, both of the aforementioned methods result in the user dealing with an annoying pop-up window or being redirected to the printable version of the page. Oftentimes I thought to myself, &quot;why can't I just hit CTRL+P and print this?&quot; That would be the ultimate user experience. After all, if nothing else is consistent in web browsers it's the ability to click on <code>File | Print</code> to print a webpage. &quot;This has to be possible&quot;, I thought. There must be a way to prevent content from printing like this:</p>\n<p><img src=\"/images/no_print_styles_example.jpg\" alt=\"Example without print styles\"></p>\n<h2 id=\"enter-print-stylesheets\">Enter print stylesheets <a class=\"direct-link\" href=\"#enter-print-stylesheets\">#</a></h2>\n<p>With the web standards revolution going at full force, more and more people are understanding the need for semantic markup and stylesheets. The benefits are many compared to what little old-fashioned development techniques have to offer. In fact, there are <a href=\"http://www.google.com/search?q=the+benefits+of+web+standards\">millions of articles</a> on the web that outline the very benefits I'm referring to.</p>\n<p>This article will cover one aspect of standard CSS that is becoming more and more popular in everyday development practice: print stylesheets.</p>\n<h2 id=\"a-new-way-of-printing\">A new way of printing <a class=\"direct-link\" href=\"#a-new-way-of-printing\">#</a></h2>\n<p>When I began developing A Beautiful Site's Notebook, one of the things I really wanted people to be able to do was print the articles. After all, what good is an article if you can't print it out and take it with you? Another thing I wanted was for the printouts to look clean and professional, which is what I ultimately achieved. If you don't believe me, print this page and see for yourself. I think the before &amp; after results are rather convincing:</p>\n<p><img src=\"/images/print_stylesheets_sample.jpg\" alt=\"Example with print styles\"></p>\n<p>Notice how the version without print styles has the website title, navigation menu, and sidebar content cluttering up the first half of the page? In the styled version, these elements are removed and the page almost looks as if it were printed from a word processing program. The font styles and sizes still match that of the original design, with one exception: I decided to style the main text as <code>Times New Roman</code>, since serif fonts are easier to read on printed media. Most books and magazines use this style of font, so it should give readers a more comfortable feeling when reading the article on paper.</p>\n<p>Note that, compared to the previous examples, the non-styled version of A Beautiful Site's webpages are still clean and easy to read. One of the benefits of using semantic markup means that, print styles or not, your pages will be more legible when they come out of the printer.</p>\n<h2 id=\"minimal-effort\">Minimal effort <a class=\"direct-link\" href=\"#minimal-effort\">#</a></h2>\n<h3 id=\"linking-the-print-stylesheet\">Linking the print stylesheet <a class=\"direct-link\" href=\"#linking-the-print-stylesheet\">#</a></h3>\n<p>It really doesn't take much time and effort to apply this technology to your website. In fact, all you need to do is create an additional stylesheet and link each page to it. I typically add this line directly below the normal stylesheet link:</p>\n<pre><code class=\"language-html\">&lt;link href=&quot;your_print_style.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; media=&quot;print&quot; /&gt;\n</code></pre>\n<p>Notice that the <code>media</code> attribute is set to <code>print</code> instead of <code>screen</code>.</p>\n<p>That was easy, now we need to create <code>your_print_style.css</code>.</p>\n<h3 id=\"creating-the-print-stylesheet\">Creating the print stylesheet <a class=\"direct-link\" href=\"#creating-the-print-stylesheet\">#</a></h3>\n<p>You could simply start from scratch and attempt to recreate the entire look and feel of your site in a printable version. Considering the amount of time it would probably take to do this, it seems rather silly to start from the ground up. My technique for creating print stylesheets is much faster and easier.</p>\n<p>First, I copy the normal stylesheet to the new stylesheet. That's right, <code>select all</code> → <code>copy</code> → <code>paste</code>.</p>\n<p>Second, I decide which elements I <em>don't</em> want to appear on the printed version. For this example, let's pretend we have the following elements: <code>header</code>, <code>nav-menu</code>, <code>sidebar</code>, <code>content</code>, and <code>footer</code>. The only essential element for the printed version will be <code>content</code>, which contains the information that the user is actually trying to print.</p>\n<p>Next, I disable all of the unnecessary elements from appearing using standard CSS:</p>\n<pre><code class=\"language-css\">#header,\n#nav-menu,\n#sidebar,\n#footer {\n  display: none;\n}\n</code></pre>\n<p>Note: To avoid confusion, it's a good idea to delete or comment-out the old CSS that affects these elements.</p>\n<p>The final step is to remove any styles that apply to the <code>content</code> element that may affect the way it appears in the printed version. This may include paddings, margins, borders, or anything else that hinders the appearance. If you're using a sans-serif font, you may also wish to style the main text as a serif font, as I did above.</p>\n<h3 id=\"the-final-design\">The final design <a class=\"direct-link\" href=\"#the-final-design\">#</a></h3>\n<p>You can preview your design without having to print it out using the <code>Print Preview</code> feature in your browser. As with normal stylesheets, feel free to make any adjustments to your print stylesheet to optimize the appearance of the design. Now that you have beautiful, no-hassle, printed versions of your webpages, your users will thank you.</p>\n",
      "date_published": "2007-05-28T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/css-drop-caps/",
      "url": "https://www.abeautifulsite.net/posts/css-drop-caps/",
      "title": "CSS drop caps",
      "content_html": "<p>Traditionally found in printed media, drop caps are created by emphasizing the size, color, weight, or style of the first letter in the first sentence of a paragraph. We can easily reproduce this effect on webpages by using the <code>:first-letter</code> pseudo element.</p>\n<p><img src=\"/images/drop-cap-example.png\" alt=\"Drop cap example\"></p>\n<h2 id=\"writing-the-styles\">Writing the styles <a class=\"direct-link\" href=\"#writing-the-styles\">#</a></h2>\n<p>Let's start by creating a class called <code>drop-cap</code> and adding a bit of style to it:</p>\n<pre><code class=\"language-css\">.drop-cap:first-letter {\n  float: left;\n  font-size: 4em;\n  line-height: 1;\n  margin: .125em .25em;\n}\n</code></pre>\n<p>As you can see, the size of the first letter will be significantly larger then the rest of the text. A typical drop cap will line up with the top of the first line of text and the left margin of the paragraph. Horizonal alignment occurs naturally, but we need to account for vertical alignment. By default, it appears slightly higher than we want it to, so the <code>margin-top</code> attribute offsets it enough to get it in line. Depending on font size and unit, this number will vary.</p>\n<p>You'll also notice that the <code>first-letter</code> is floated. This allows the letter to sink into the text instead of remaining inline.</p>\n<h2 id=\"applying-the-class\">Applying the class <a class=\"direct-link\" href=\"#applying-the-class\">#</a></h2>\n<p>Now that we've created the CSS <code>drop-cap</code> class, it's easy to apply it to any paragraph element:</p>\n<pre><code class=\"language-html\">&lt;p class=&quot;drop-cap&quot;&gt;\n  Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod\n  tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim\n  veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea\n  commodo consequat. Duis aute irure dolor in reprehenderit in voluptate\n  velit esse cillum dolore eu fugiat nulla pariatur.\n&lt;/p&gt;\n</code></pre>\n<p>Which produces something like the image above.</p>\n",
      "date_published": "2007-05-23T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/find-and-replace-hyperlinks-and-email-addresses-in-php/",
      "url": "https://www.abeautifulsite.net/posts/find-and-replace-hyperlinks-and-email-addresses-in-php/",
      "title": "Find and replace hyperlinks and email addresses in PHP",
      "content_html": "<p>These two PHP functions use regular expressions to add the appropriate HTML anchor tags around hyperlinks and email addresses in <code>$string</code>.</p>\n<h2 id=\"php-code\">PHP code <a class=\"direct-link\" href=\"#php-code\">#</a></h2>\n<pre><code class=\"language-php\">function parseHyperlinks($string) {\n  // Add  tags around all hyperlinks in $string\n  return ereg_replace(&quot;[[:alpha:]]+://[^&lt;&gt;[:space:]]+[[:alnum:]/]&quot;, &quot;\\0&quot;, $string);\n}\n\nfunction parseEmails($string) {\n  // Add  tags around all email addresses in $string\n  return ereg_replace(&quot;[_A-Za-z0-9-]+(.[_A-Za-z0-9-]+)*@[A-Za-z0-9-]+(.[A-Za-z0-9-]+)*(.[A-Za-z]{2,3})&quot;, &quot;\\0&quot;, $string);\n}\n</code></pre>\n<h2 id=\"output\">Output <a class=\"direct-link\" href=\"#output\">#</a></h2>\n<p>Using <code>parseHyperlinks()</code>, <code>http://domain.com/index.htm</code> becomes:</p>\n<pre><code class=\"language-html\">&lt;a href=&quot;http://domain.com/index.htm&quot;&gt;http://domain.com/index.htm&lt;/a&gt;\n</code></pre>\n<p>And using <code>parseEmails()</code>, <code>email@domain.com</code> becomes:</p>\n<pre><code class=\"language-html\">&lt;a href=&quot;mailto:email@domain.com&quot;&gt;email@domain.com&gt;&lt;/a&gt;\n</code></pre>\n",
      "date_published": "2007-05-15T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/what-are-favicons/",
      "url": "https://www.abeautifulsite.net/posts/what-are-favicons/",
      "title": "What are favicons?",
      "content_html": "<p>A favicon (pronounced &quot;fave-icon&quot;) is a small, iconic image that represents your website. Favicons are most often found in the address bar of your web browser, but they can also be used in lists of bookmarks in web browsers and feed aggregators.</p>\n<p>Well-designed favicons are styled to match the logo or theme of your website, that way users have a quick and easy way to recognize your website at a glance.</p>\n<p>Here is our favicon, displayed in the Firefox address bar:</p>\n<p><a href=\"/images/favicon_example.png\"><img src=\"/images/favicon_example.png\" alt=\"Example of a favicon\"></a></p>\n<h2 id=\"what-type-of-image-is-a-favicon%3F\">What type of image is a favicon? <a class=\"direct-link\" href=\"#what-type-of-image-is-a-favicon%3F\">#</a></h2>\n<p>Although most modern browsers will recognize PNG, GIF, and JPG formats for favicons, Internet Explorer currently does not. It is recommended to use the Microsoft ICO format, which works in all browsers.</p>\n<h2 id=\"what-size-should-my-favicon-be%3F\">What size should my favicon be? <a class=\"direct-link\" href=\"#what-size-should-my-favicon-be%3F\">#</a></h2>\n<p>Another good reason to use the ICO format is because it can contain multiple favicons of different sizes in one ICO file. It is best to have, at minimum, a 16x16 pixel version. I usually include 32x32 and 48x48 versions as well. That way, if users drag the bookmark to their desktop they will see a nicely scaled version of the icon instead of the 16x16 version stretched out. To learn how to create a favicon with multiple sizes, see <a href=\"#how-to-create-a-favicon\">How to create a favicon</a> below.</p>\n<p><em>Below: 16x16, 32x32, and 48x48 versions of A Beautiful Site's favicon. Each image is embedded in one favicon.ico file.</em></p>\n<p><a href=\"/images/favicon_mult_sizes.png\"><img src=\"/images/favicon_mult_sizes.png\" alt=\"A favicon in multiple sizes\"></a></p>\n<p>The most common sizes for favicons are:</p>\n<ul>\n<li>16x16</li>\n<li>32x32</li>\n<li>48x48</li>\n<li>64x64</li>\n<li>128x128</li>\n</ul>\n<h2 id=\"how-to-create-a-favicon\">How to create a favicon <a class=\"direct-link\" href=\"#how-to-create-a-favicon\">#</a></h2>\n<p>Although there are many ways to create favicons, the easiest is to use an online tool.  We happen to have a <a href=\"http://favikon.com/\">favicon generator</a> that's entirely free.  It's called <a href=\"http://favikon.com/\">Favikon</a>.  To create your favicon using Favikon, simply upload an image, crop it, and then download the resulting icon.</p>\n<h2 id=\"how-to-link-to-your-favicon\">How to link to your favicon <a class=\"direct-link\" href=\"#how-to-link-to-your-favicon\">#</a></h2>\n<p>Now that you've created a nice little favicon, you need to tell web browsers and other applications where to find it. Adding this line to the <code>&lt;head&gt;</code> section of your HTML will ensure that your favicon will be found:</p>\n<pre><code class=\"language-html\">&lt;link rel=&quot;shortcut icon&quot; href=&quot;/favicon.ico&quot; type=&quot;image/x-icon&quot; /&gt;\n</code></pre>\n<p>The location of the favicon isn't really important, as long as the <code>href</code> attribute is accurate. Most favicons, however, are placed in the root directory (the directory that contains the homepage). Keep in mind that it is not necessary to have multiple instances of the same favicon on one website.</p>\n<p>If you add a favicon without linking to it within your HTML, you may notice that some browsers will still find and display it. This only occurs if the favicon is in the root directory. It isn't good to rely on this method, so if you want to make sure that applications will see your favicon, <code>&lt;link&gt;</code> to it!</p>\n",
      "date_published": "2007-05-11T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/using-javascript-to-prevent-comment-spam/",
      "url": "https://www.abeautifulsite.net/posts/using-javascript-to-prevent-comment-spam/",
      "title": "Using JavaScript to prevent comment spam",
      "content_html": "<p>Comment spam (also known as 'link spam', 'blog spam', and 'wikispam') occurs when people or spam bots post comments on someones blog, guestbook, or wiki for the sole purpose of boosting traffic and promoting better search engine rankings for their site. Like email spam, it can be particularly annoying and troublesome to deal with.</p>\n<h2 id=\"common-solutions\">Common Solutions <a class=\"direct-link\" href=\"#common-solutions\">#</a></h2>\n<p>Many companies and organizations have put forth efforts to prevent comment spam. The well-known search engine <a href=\"http://google.com/\">Google</a>, who owns the popular blog site <a href=\"http://blogger.com/\">Blogger</a>, <a href=\"http://googleblog.blogspot.com/2005/01/preventing-comment-spam.html\">announced back in 2005</a> that it would no longer index anchor tags with the <code>rel=&quot;nofollow&quot;</code> attribute in them. Web developers were encouraged to make their software automatically add this attribute to all user-contributed hyperlinks. Although this method will discourage a lot of spammers from wasting their time, it doesn't actually prevent them from posting spam comments.</p>\n<p>Other efforts to combat comment spam focus on the fact that most spammers use automated scripts to submit their messages. These scripts work very much like traditional spam bots but, rather than harvesting email addresses, they target comment forms. Once spammers have a list of comment forms and know the fields that each one asks for, they can use programs like <a href=\"http://curl.haxx.se/\">curl</a> to forge comment submissions. This is an effective way to spam many blogs in a short period of time, so it's used quite commonly.</p>\n<p>A reasonably good method of preventing this type of spam is called <a href=\"http://www.captcha.net/\">CAPTCHA</a>. CAPTCHA typically displays an image of a word or phrase with obscured lettering that OCR scanners can't read. This means that, to successfully submit a comment, the user has to provide the correct response to the CAPTCHA test. Since a human is typically required to pass the test, spam bots can't post bogus comments to sites that use this technology. Unfortunately, this method requires users to take additional steps in order to post comments.</p>\n<p>Of course, you could require that all comments be approved before they are posted, but that requires a lot of extra time and effort, especially for busy sites.</p>\n<h2 id=\"a-better-method%3F\">A Better Method? <a class=\"direct-link\" href=\"#a-better-method%3F\">#</a></h2>\n<p>I've decided to share a method that I've been using on <a href=\"http://laviska.com/\">my personal site</a> for a few years now. I used to get lots of guestbook and comment spam on a daily basis when my forms were left wide open. Since I've applied this technique, I haven't recieved any comment spam at all. That's right, <em>not one</em>. Of course, once I post this there will be nothing stopping spammers from tweaking their bots to work around this solution. At least, for now, it works extremely well.</p>\n<h3 id=\"how-it-works\">How it works <a class=\"direct-link\" href=\"#how-it-works\">#</a></h3>\n<p>It's really quite simple. You start with a basic comment form:</p>\n<pre><code class=\"language-html\">&lt;form id=&quot;comment-form&quot; action=&quot;add-comment.php&quot; method=&quot;post&quot;&gt;\n  [other input fields here]\n  &lt;input type=&quot;submit&quot; value=&quot;Post Comment&quot; /&gt;\n&lt;/form&gt;\n</code></pre>\n<p>Now, to prevent comment spammers, we make a few basic adjustments:</p>\n<pre><code class=\"language-html\">&lt;form id=&quot;comment-form&quot; action=&quot;NO-BLOG-SPAM.PHP&quot; method=&quot;post&quot;&gt;\n  [other input fields here]\n  &lt;input type=&quot;button&quot; value=&quot;Post Comment&quot; onclick=&quot;submitCommentForm();&quot; /&gt;\n&lt;/form&gt;\n</code></pre>\n<p>Notice I changed the form <code>action</code> to <code>NO-BLOG-SPAM.PHP</code>. This could be anything, really, as long as it's not a valid page. Next, I changed the submit button to a regular button and added a JavaScript <code>onclick</code> event. I'll show you the <code>submitCommentForm()</code> function in a minute. First, I want to explain my reasoning for doing all this.</p>\n<p>It makes sense to me to have a bogus <code>action</code> so that, when a spam bot indexes the form information, it is indexing a submission page that doesn't exist. If the spammer was trying to use curl to submit the comment, they would receive a 'Page Does Not Exist' error.</p>\n<p>It also makes sense to me to change the submit button to a regular button. If the spam bot is trying to submit the form from the within the page, it won't know which field triggers the submission. In fact, it would have to be smart enough to follow the JavaScript events for every form element that has one (which, in our case, is only one).</p>\n<p>Now, here's the <code>submitCommentForm()</code> function. Note that I am including this function from a separate file, which means the spam bot would not only have to be able to follow the JavaScript, but also support including scripts from other parts of the page.</p>\n<pre><code class=\"language-js\">function submitCommentForm() {\n  // Change the form action to the real submission page\n  document.getElementById('comment-form').action = &quot;add-comment.php&quot;;\n\n  // Submit the form\n  document.getElementById('comment-form').submit();\n}\n</code></pre>\n<p>As you can see, the when the user clicks on the button labeled 'Post Comment', the <code>submitCommentForm()</code> function is triggered. This changes the form <code>action</code> to the real submission page, allowing the user's submission to post. Of course, this still won't prevent a real human from submitting comment spam, but humans aren't usually into wasting countless hours of their time typing in comment spam. As I stated before, this method has prevented automated comment spam on my personal site for well over two years.</p>\n<h3 id=\"pros\">Pros <a class=\"direct-link\" href=\"#pros\">#</a></h3>\n<ul>\n<li>A lot less comment spam — possibly none</li>\n<li>Users aren't required to take any extra steps in order to post a comment</li>\n</ul>\n<h3 id=\"cons\">Cons <a class=\"direct-link\" href=\"#cons\">#</a></h3>\n<ul>\n<li>Requires JavaScript, otherwise users won't be able to post comments</li>\n</ul>\n",
      "date_published": "2007-05-05T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/password-protection-using-htaccess-and-htpasswd/",
      "url": "https://www.abeautifulsite.net/posts/password-protection-using-htaccess-and-htpasswd/",
      "title": "Password protection using .htaccess and .htpasswd",
      "content_html": "<p>The simplest way I know to password protect files and directories using Apache's <code>.htaccess</code> and <code>.htpasswd</code> files.</p>\n<h2 id=\".htpasswd\">.htpasswd <a class=\"direct-link\" href=\"#.htpasswd\">#</a></h2>\n<p>Create a text file with the following text:</p>\n<pre><code>username:password\n</code></pre>\n<p>The usernames and passwords are stored in this file, one per line, separated by a colon. To allow multiple users:</p>\n<pre><code>firstUser:password\nsecondUser:password\nthirdUser:password\n...\n</code></pre>\n<p>Now, for each password, you have to encrypt it using the <code>htpasswd</code> program (included with Apache). If you don't have this program, you should be able to find a <a href=\"http://www.google.com/search?q=htpasswd+generator\">tool on the web</a> that can do it. If you have Apache installed on your local system, I strongly recommend using it (You can also generate the entire file with this program, saving you the hassle of creating it in a text editor. Visit <a href=\"http://httpd.apache.org/docs/2.0/programs/htpasswd.html\">Apache's website</a> to learn how).</p>\n<h3 id=\"windows-users\">Windows users <a class=\"direct-link\" href=\"#windows-users\">#</a></h3>\n<ol>\n<li>Open a command prompt (Start | Run | <a href=\"http://command.com\">command.com</a>)</li>\n<li>type <code>htpasswd -nb username password</code>, replacing username and password with the appropriate values</li>\n</ol>\n<p>If you get an error message, you'll have to navigate to the directory containing htpasswd.exe (usually Apache[version]bin). If you're not sure where it is, do a search on your system to find it. Once you're in the right directory, try the command again.</p>\n<h3 id=\"linux-users\">Linux users <a class=\"direct-link\" href=\"#linux-users\">#</a></h3>\n<ol>\n<li>Open a terminal</li>\n<li>type <code>htpasswd -nb username password</code>, replacing username and password with the appropriate values</li>\n</ol>\n<p>The program will output something like: <code>username:password</code>. Copy this into your <code>.htpasswd</code> file and save it as <code>.htpasswd</code> (windows users will have to save it as <code>htpasswd.txt</code> and rename it to <code>.htpasswd</code> after uploading).</p>\n<h2 id=\".htaccess\">.htaccess <a class=\"direct-link\" href=\"#.htaccess\">#</a></h2>\n<p>Now you're ready to write your <code>.htaccess</code> file. This will let Apache know that you want it to use your <code>.htpasswd</code> file for authentication. You can protect one or more directories and/or files this way. To create your <code>.htaccess</code> file, create a new text file:</p>\n<h3 id=\"protecting-an-entire-directory\">Protecting an entire directory <a class=\"direct-link\" href=\"#protecting-an-entire-directory\">#</a></h3>\n<pre><code class=\"language-apacheconf\">AuthUserFile /[path]/.htpasswd\nAuthType Basic\nAuthName &quot;Login to access this folder&quot;\nrequire valid-user\n</code></pre>\n<h3 id=\"protecting-a-single-file\">Protecting a single file <a class=\"direct-link\" href=\"#protecting-a-single-file\">#</a></h3>\n<pre><code class=\"language-apacheconf\">AuthUserFile /[path]/.htpasswd\nAuthType Basic\nAuthName &quot;Login to access this file&quot;\nAllow From All\nrequire valid-user\n</code></pre>\n<p><code>AuthUserFile</code> is the server location of the <code>.htpasswd</code> file you have just created. You will need to adjust the path according to your directory structure so that it points to the correct location. <strong>THIS IS VERY IMPORTANT!</strong></p>\n<p>Save it as <code>.htaccess</code> (windows users will have to save it as <code>htaccess.txt</code> and rename it to <code>.htaccess</code> after uploading).</p>\n<h2 id=\"uploading\">Uploading <a class=\"direct-link\" href=\"#uploading\">#</a></h2>\n<p>Upload both of the files to the appropriate directories on your webserver. Open a browser and navigate to the respective URL. You should get a login dialog that prompts you for a username and password.</p>\n<h2 id=\"troubleshooting\">Troubleshooting <a class=\"direct-link\" href=\"#troubleshooting\">#</a></h2>\n<p>If the authentication doesn't work, I would suggest:</p>\n<ol>\n<li>Checking the path you set after <code>AuthUserFile</code>in <code>.htaccess</code></li>\n<li>Verifying that <code>AllowOverride None</code>is not present in the section of your Apache config file (usually called httpd.conf) that corresponds to the correct host. In some cases, you may have to specify <code>AllowOverride All</code> before it will work (even though this is default setting).</li>\n<li>If you used a web-based password encryptor instead of the <code>htpasswd</code> program, <strong>try another one</strong>. I found that many would return encrypted strings that Apache could not authenticate for some reason.</li>\n</ol>\n<p>Good luck!</p>\n",
      "date_published": "2007-04-29T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/gif-jpeg-or-png-using-images-on-the-web/",
      "url": "https://www.abeautifulsite.net/posts/gif-jpeg-or-png-using-images-on-the-web/",
      "title": "GIF, JPEG or PNG? Using images on the web",
      "content_html": "<p>This article aims to describe the difference between the three most popular types of images used on the Web, and how to use them effectively in your websites.</p>\n<h2 id=\"jpeg\">JPEG <a class=\"direct-link\" href=\"#jpeg\">#</a></h2>\n<p>JPEG files are compressed images that maintain a balance of size versus quality. For example: <em>More compression = less image quality = smaller file size</em>. In contrast, <em>less compression = more image quality = larger file size</em>. Since JPEG files do not maintain 100% of the original image's pixel data, it is not considered a lossless image format.</p>\n<h3 id=\"usage\">Usage <a class=\"direct-link\" href=\"#usage\">#</a></h3>\n<p>Due to this sensitive balance, JPEGs are best suited for photographs where slightly depreciated quality is not very noticeable. JPEG is not typically a good format for logos, icons, and other simple images.</p>\n<h2 id=\"gif\">GIF <a class=\"direct-link\" href=\"#gif\">#</a></h2>\n<p>The GIF format was developed by CompuServe specifically for use online. GIF, sometimes pronounced &quot;GIFF&quot;, is a lossless, 8-bit image format. Lossless means that 100% of the original pixel data is maintained. The term 8-bit refers to color depth — an 8-bit image can only have up to 256 colors.</p>\n<h3 id=\"usage-2\">Usage <a class=\"direct-link\" href=\"#usage-2\">#</a></h3>\n<p>Because of these limitations, GIFs <em>should not</em> be used for photographic images. Instead, use them for things like:</p>\n<ul>\n<li>Logos</li>\n<li>Icons</li>\n<li>Layout images (such as corners, borders, etc.)</li>\n<li>Any other small, simple image with only a few colors</li>\n</ul>\n<h3 id=\"transparency\">Transparency <a class=\"direct-link\" href=\"#transparency\">#</a></h3>\n<p>GIF supports basic transparency, which means that certain pixels in the image can be &quot;invisible&quot;, so you can see whatever lies behind them. This is especially useful for making icons that are intended to sit on top of a varying background.</p>\n<h3 id=\"compression\">Compression <a class=\"direct-link\" href=\"#compression\">#</a></h3>\n<p>The GIF format uses the LZW compression algorithm, which is patented by Unisys. For a time, this meant that the authors of image-editing programs were forced to pay Unisys for the rights to include GIF support in their programs. The patent, however, expired on June 20, 2003 in the United States.</p>\n<h3 id=\"interlacing\">Interlacing <a class=\"direct-link\" href=\"#interlacing\">#</a></h3>\n<p>GIF also supports interlacing, which makes the image appear to load faster in web browsers. This could be helpful for people browsing your site on a slow dial-up connection.</p>\n<h3 id=\"animated-gifs\">Animated GIFs <a class=\"direct-link\" href=\"#animated-gifs\">#</a></h3>\n<p>An animated GIF is a single file that contains multiple variations (frames) of an image. These frames are drawn over and over again to create the illusion of animation. When used appropriately, animated GIFs can be catchy and impressive. Unfortunately, many people tend to overuse them on the web, creating a very annoying experience for their users.</p>\n<h2 id=\"png\">PNG <a class=\"direct-link\" href=\"#png\">#</a></h2>\n<p>PNG files, pronounced &quot;PING&quot;, were developed as a freeware alternative to GIF files which, at the time, used a patented compression algorithm. The PNG format is also lossless but, unlike GIF, PNG can support 8-bit and 24-bit images.</p>\n<h3 id=\"8-bit-pngs\">8-bit PNGs <a class=\"direct-link\" href=\"#8-bit-pngs\">#</a></h3>\n<p>An 8-bit PNG can have up to 256-colors with basic transparency. This format is very similar to that of GIFs, except for the compression method.</p>\n<h3 id=\"usage-3\">Usage <a class=\"direct-link\" href=\"#usage-3\">#</a></h3>\n<p>8-bit PNGs should be used the same way as GIFs:</p>\n<ul>\n<li>Logos</li>\n<li>Icons</li>\n<li>Layout images (such as corners, borders, etc.)</li>\n<li>Any other small, simple image with only a few colors</li>\n</ul>\n<h3 id=\"24-bit-pngs\">24-bit PNGs <a class=\"direct-link\" href=\"#24-bit-pngs\">#</a></h3>\n<p>24-bit PNGs can have up to 16 million colors and can support alpha-transparency. This means that a partially transparent image with anti-aliasing can blend smoothly into the background.</p>\n<h3 id=\"png-support\">PNG support <a class=\"direct-link\" href=\"#png-support\">#</a></h3>\n<p>PNG support is becoming more widespread as browser developers become more conscious of <a href=\"http://www.w3.org/\">Web Standards</a>. Fortunately, PNGs are currently supported by all popular web browsers including, IE*, Firefox, Safari, Opera, and Konqueror.</p>\n<p>*Unfortunately, IE6 messes up alpha-transparency in 24-bit PNGs and displays a grayish-blue background color instead. IE6 has also been known to render some 8-bit PNG colors slightly off-hue (a gamma correction error). Although the alpha-transparency issue has been resolved in IE7 beta 2, Microsoft hasn't addressed gamma correction yet.</p>\n",
      "date_published": "2007-04-29T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/business-cards/",
      "url": "https://www.abeautifulsite.net/posts/business-cards/",
      "title": "Business cards",
      "content_html": "<p><a href=\"http://vistaprint.com/\">VistaPrint</a> delivered 1,000 “A Beautiful Site” business cards the other day, and I couldn't resist playing with them.</p>\n<p>I decided to go conservative with the design, relying a bit on curiosity to draw attention to the business. Nevertheless, I am pleased with the way they turned out.</p>\n<p><img src=\"/images/abs-original-business-cards.jpg\" alt=\"A number of business cards layed out in a circle\"></p>\n",
      "date_published": "2007-04-29T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/an-event-apart-boston/",
      "url": "https://www.abeautifulsite.net/posts/an-event-apart-boston/",
      "title": "An Event Apart, Boston",
      "content_html": "<p>The plane took off from Orlando as I sat half asleep in my seat. With my laptop at my feet, I wondered what kind of intriguing things I would learn at the web conference I had signed up for. I anticipated this day for months now and it was finally here. I was on my way to <a href=\"http://aneventapart.com/\">An Event Apart</a>, Boston. Wow!</p>\n<p>I have always been an avid reader of <a href=\"http://alistapart.com/\">A List Apart</a>. They never fail to produce really great articles in regards to every aspect of web design. When I first saw an advertisement for An Event Apart online, I was stoked. I gathered all the information possible and practically begged my employer to fund the trip. A few weeks later, it was said and done. On March 26th and 27th I was in Boston listening to some of the web's greatest voices. It was awesome. No, that's an understatement. It was incredible!</p>\n<h2 id=\"the-hotel\">The hotel <a class=\"direct-link\" href=\"#the-hotel\">#</a></h2>\n<p>The conference was held at the <a href=\"http://marriott.com/hotels/travel/bosco-boston-marriott-copley-place/\">Marriott Copley Place</a>, where I stayed on the 33rd floor. The rooms were very nice, the food services were excellent, and the location was perfect — walking distance to anything you could possibly need and a Shaw's 24-hour supermarket across the street. Nice.</p>\n<p><img src=\"/images/aea-badge.jpg\" alt=\"A picture of my conference badge\"></p>\n<p><img src=\"/images/aea-sign.jpg\" alt=\"Me in front of the An Event Apart sign before the conference\"></p>\n<h2 id=\"day-1\">Day 1 <a class=\"direct-link\" href=\"#day-1\">#</a></h2>\n<p>On the first day I got to put some familiar names with faces. Specifically Jeffrey Zeldman (<a href=\"http://zeldman.com\">zeldman.com</a>), Eric Meyer (<a href=\"http://meyerweb.com\">meyerweb.com</a>), and Dan Cederholm (<a href=\"http://simplebits.com\">simplebits.com</a>). Other speakers who spoke that day were Jason Santa Maria (<a href=\"http://jasonsantamaria.com\">jasonsantamaria.com</a>) on design, Steve Krug (<a href=\"http://sensible.com\">sensible.com</a>) on usability, and Andrew Kirkpatrick (Adobe) on accessibility.</p>\n<p>Lunch was sponsored by Adobe and the opening night party was sponsored by Media Temple at Restaurant 33. I hear everyone had a killer time, but due to a stomach bug I wasn't able to attend the party. ~ sigh ~</p>\n<p>I did get a chance to speak with Dan Cederholm, however. He signed my copy of Bulletproof Web Design and we talked briefly about running a web design business. Dan's a great guy. His willingness to talk with you and his attitude towards those who are interested in the web really impressed me. I hope I have an opportunity to meet with him again in the future.</p>\n<h2 id=\"day-2\">Day 2 <a class=\"direct-link\" href=\"#day-2\">#</a></h2>\n<p>On the second day I got to meet Molly E. Holzshlag (<a href=\"http://molly.com\">molly.com</a>), who has authored over 30-something books about the the web and currently works for Microsoft. Specifically, on the IE7 team. Her speech was entitled, &quot;Building Better Browsers&quot;. After she spoke, I had a chance to meet with her one-on-one for a while. We talked about some of the issues that Microsoft had to face to get IE7 up to speed with the web standards movement. In a nutshell, I'm happy to say that my opinion of Microsoft's recent efforts to improve IE7 has changed for the better. She also assured me that gamma corrections in PNGs is &quot;on the way&quot;. That put a smile on my face.</p>\n<p>Other speakers on Day 2 included Cameron Moll (<a href=\"http://cameronmoll.com\">cameronmoll.com</a>) on design, Ethan Marcotte (<a href=\"http://sidesh0w.com\">sidesh0w.com</a>) on web standards, Eric Meyer on CSS and IE7, and Jeffrey Zeldman on selling design.</p>\n<p>We wrapped up the second day with critiques. A lot of people submitted websites to be critiqued by the speakers, but only a handful were chosen to be reviewed. I didn't submit a site for this...I don't know why.</p>\n<h2 id=\"afterthoughts\">Afterthoughts <a class=\"direct-link\" href=\"#afterthoughts\">#</a></h2>\n<p>An Avent Apart was an experience I won't soon forget. It was worth every penny (even if I had paid for it out of my own pocket). Next time, I think it would be good to see a bit more on design and possibly some hands-on activities. I really liked having the opportunity to meet some of the speakers in person. It was also nice to find out that my understanding of good web practice was on par with the rest of the world.</p>\n<p>A special thanks goes out to all the speakers from An Event Apart, Boston.</p>\n",
      "date_published": "2007-04-29T00:00:00Z"
    },{
      "id": "https://www.abeautifulsite.net/posts/a-beautiful-site-launched/",
      "url": "https://www.abeautifulsite.net/posts/a-beautiful-site-launched/",
      "title": "A Beautiful Site launched",
      "content_html": "<p>I'd like to introduce my new web design studio. After considering a list of potential names and designs, I finally came up with a name that I thought fitting for the kind of web design business that I want to run.</p>\n<p>After a few pencil and paper sketches, a few hours in Photoshop, and a couple of late nights staring into two LCD monitors, A Beautiful Site was born.<br>\nA Beautiful Site is built on a foundation of web standards, user-oriented design, and excellent development practices. These values follow through from the first keystroke to the final pixel. Pride is something that comes at no extra cost to our customers, and that's guaranteed.</p>\n<p>So please feel free to look around. Read some articles, send us a message, or tell a friend about us. I can't wait to hear from you!</p>\n<p><em>Update: It's been awhile since this website first launched and things have changed quite a bit. Here's a glimpse of the original design from 2007.</em></p>\n<p><img src=\"/images/abs-original-website.png\" alt=\"A vintage screenshot of the original website\"></p>\n",
      "date_published": "2007-04-29T00:00:00Z"
    }
  ]
}
