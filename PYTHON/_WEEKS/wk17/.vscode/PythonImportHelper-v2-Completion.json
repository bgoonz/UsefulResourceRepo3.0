[
  {
    "label": "itertools",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "itertools",
    "description": "itertools",
    "detail": "itertools",
    "documentation": {}
  },
  {
    "label": "requests",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "requests",
    "description": "requests",
    "detail": "requests",
    "documentation": {}
  },
  {
    "label": "re",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "re",
    "description": "re",
    "detail": "re",
    "documentation": {}
  },
  {
    "label": "twitter",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "twitter",
    "description": "twitter",
    "detail": "twitter",
    "documentation": {}
  },
  {
    "label": "os",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "os",
    "description": "os",
    "detail": "os",
    "documentation": {}
  },
  {
    "label": "glob",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "glob",
    "description": "glob",
    "detail": "glob",
    "documentation": {}
  },
  {
    "label": "time",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "time",
    "description": "time",
    "detail": "time",
    "documentation": {}
  },
  {
    "label": "random",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "random",
    "description": "random",
    "detail": "random",
    "documentation": {}
  },
  {
    "label": "choice",
    "importPath": "random",
    "description": "random",
    "isExtraImport": true,
    "detail": "random",
    "documentation": {}
  },
  {
    "label": "numpy",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "numpy",
    "description": "numpy",
    "detail": "numpy",
    "documentation": {}
  },
  {
    "label": "fnmatch",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "fnmatch",
    "description": "fnmatch",
    "detail": "fnmatch",
    "documentation": {}
  },
  {
    "label": "Image",
    "importPath": "wand.image",
    "description": "wand.image",
    "isExtraImport": true,
    "detail": "wand.image",
    "documentation": {}
  },
  {
    "label": "size",
    "importPath": "hurry.filesize",
    "description": "hurry.filesize",
    "isExtraImport": true,
    "detail": "hurry.filesize",
    "documentation": {}
  },
  {
    "label": "sys",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "sys",
    "description": "sys",
    "detail": "sys",
    "documentation": {}
  },
  {
    "label": "argv",
    "importPath": "sys",
    "description": "sys",
    "isExtraImport": true,
    "detail": "sys",
    "documentation": {}
  },
  {
    "label": "csv",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "csv",
    "description": "csv",
    "detail": "csv",
    "documentation": {}
  },
  {
    "label": "argparse",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "argparse",
    "description": "argparse",
    "detail": "argparse",
    "documentation": {}
  },
  {
    "label": "check_my_environment",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "check_my_environment",
    "description": "check_my_environment",
    "detail": "check_my_environment",
    "documentation": {}
  },
  {
    "label": "FileSystemLoader",
    "importPath": "jinja2",
    "description": "jinja2",
    "isExtraImport": true,
    "detail": "jinja2",
    "documentation": {}
  },
  {
    "label": "Environment",
    "importPath": "jinja2",
    "description": "jinja2",
    "isExtraImport": true,
    "detail": "jinja2",
    "documentation": {}
  },
  {
    "label": "datetime",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "datetime",
    "description": "datetime",
    "detail": "datetime",
    "documentation": {}
  },
  {
    "label": "datetime",
    "importPath": "datetime",
    "description": "datetime",
    "isExtraImport": true,
    "detail": "datetime",
    "documentation": {}
  },
  {
    "label": "ZipFile",
    "importPath": "zipfile",
    "description": "zipfile",
    "isExtraImport": true,
    "detail": "zipfile",
    "documentation": {}
  },
  {
    "label": "subprocess",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "subprocess",
    "description": "subprocess",
    "detail": "subprocess",
    "documentation": {}
  },
  {
    "label": "check_output",
    "importPath": "subprocess",
    "description": "subprocess",
    "isExtraImport": true,
    "detail": "subprocess",
    "documentation": {}
  },
  {
    "label": "call",
    "importPath": "subprocess",
    "description": "subprocess",
    "isExtraImport": true,
    "detail": "subprocess",
    "documentation": {}
  },
  {
    "label": "run",
    "importPath": "subprocess",
    "description": "subprocess",
    "isExtraImport": true,
    "detail": "subprocess",
    "documentation": {}
  },
  {
    "label": "PIPE",
    "importPath": "subprocess",
    "description": "subprocess",
    "isExtraImport": true,
    "detail": "subprocess",
    "documentation": {}
  },
  {
    "label": "tweepy",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "tweepy",
    "description": "tweepy",
    "detail": "tweepy",
    "documentation": {}
  },
  {
    "label": "Flask",
    "importPath": "flask",
    "description": "flask",
    "isExtraImport": true,
    "detail": "flask",
    "documentation": {}
  },
  {
    "label": "session",
    "importPath": "flask",
    "description": "flask",
    "isExtraImport": true,
    "detail": "flask",
    "documentation": {}
  },
  {
    "label": "url_for",
    "importPath": "flask",
    "description": "flask",
    "isExtraImport": true,
    "detail": "flask",
    "documentation": {}
  },
  {
    "label": "redirect",
    "importPath": "flask",
    "description": "flask",
    "isExtraImport": true,
    "detail": "flask",
    "documentation": {}
  },
  {
    "label": "sqlite3",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "sqlite3",
    "description": "sqlite3",
    "detail": "sqlite3",
    "documentation": {}
  },
  {
    "label": "html",
    "importPath": "lxml",
    "description": "lxml",
    "isExtraImport": true,
    "detail": "lxml",
    "documentation": {}
  },
  {
    "label": "defaultdict",
    "importPath": "collections",
    "description": "collections",
    "isExtraImport": true,
    "detail": "collections",
    "documentation": {}
  },
  {
    "label": "Counter",
    "importPath": "collections",
    "description": "collections",
    "isExtraImport": true,
    "detail": "collections",
    "documentation": {}
  },
  {
    "label": "json",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "json",
    "description": "json",
    "detail": "json",
    "documentation": {}
  },
  {
    "label": "yaml",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "yaml",
    "description": "yaml",
    "detail": "yaml",
    "documentation": {}
  },
  {
    "label": "BeautifulSoup",
    "importPath": "bs4",
    "description": "bs4",
    "isExtraImport": true,
    "detail": "bs4",
    "documentation": {}
  },
  {
    "label": "BeautifulSoup",
    "importPath": "bs4",
    "description": "bs4",
    "isExtraImport": true,
    "detail": "bs4",
    "documentation": {}
  },
  {
    "label": "BeautifulSoup",
    "importPath": "bs4",
    "description": "bs4",
    "isExtraImport": true,
    "detail": "bs4",
    "documentation": {}
  },
  {
    "label": "urllib.request",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "urllib.request",
    "description": "urllib.request",
    "detail": "urllib.request",
    "documentation": {}
  },
  {
    "label": "basename",
    "importPath": "os.path",
    "description": "os.path",
    "isExtraImport": true,
    "detail": "os.path",
    "documentation": {}
  },
  {
    "label": "readline",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "readline",
    "description": "readline",
    "detail": "readline",
    "documentation": {}
  },
  {
    "label": "warnings",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "warnings",
    "description": "warnings",
    "detail": "warnings",
    "documentation": {}
  },
  {
    "label": "RegexpTokenizer",
    "importPath": "nltk.tokenize",
    "description": "nltk.tokenize",
    "isExtraImport": true,
    "detail": "nltk.tokenize",
    "documentation": {}
  },
  {
    "label": "PorterStemmer",
    "importPath": "nltk.stem.porter",
    "description": "nltk.stem.porter",
    "isExtraImport": true,
    "detail": "nltk.stem.porter",
    "documentation": {}
  },
  {
    "label": "gensim",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "gensim",
    "description": "gensim",
    "detail": "gensim",
    "documentation": {}
  },
  {
    "label": "corpora",
    "importPath": "gensim",
    "description": "gensim",
    "isExtraImport": true,
    "detail": "gensim",
    "documentation": {}
  },
  {
    "label": "models",
    "importPath": "gensim",
    "description": "gensim",
    "isExtraImport": true,
    "detail": "gensim",
    "documentation": {}
  },
  {
    "label": "string",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "string",
    "description": "string",
    "detail": "string",
    "documentation": {}
  },
  {
    "label": "pandas",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "pandas",
    "description": "pandas",
    "detail": "pandas",
    "documentation": {}
  },
  {
    "label": "matplotlib.pyplot",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "matplotlib.pyplot",
    "description": "matplotlib.pyplot",
    "detail": "matplotlib.pyplot",
    "documentation": {}
  },
  {
    "label": "sklearn",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "sklearn",
    "description": "sklearn",
    "detail": "sklearn",
    "documentation": {}
  },
  {
    "label": "train_test_split",
    "importPath": "sklearn.cross_validation",
    "description": "sklearn.cross_validation",
    "isExtraImport": true,
    "detail": "sklearn.cross_validation",
    "documentation": {}
  },
  {
    "label": "mean_squared_error",
    "importPath": "sklearn.metrics",
    "description": "sklearn.metrics",
    "isExtraImport": true,
    "detail": "sklearn.metrics",
    "documentation": {}
  },
  {
    "label": "NearestNeighbors",
    "importPath": "sklearn.neighbors",
    "description": "sklearn.neighbors",
    "isExtraImport": true,
    "detail": "sklearn.neighbors",
    "documentation": {}
  },
  {
    "label": "sqlalchemy",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "sqlalchemy",
    "description": "sqlalchemy",
    "detail": "sqlalchemy",
    "documentation": {}
  },
  {
    "label": "rcParams",
    "importPath": "matplotlib",
    "description": "matplotlib",
    "isExtraImport": true,
    "detail": "matplotlib",
    "documentation": {}
  },
  {
    "label": "pyparsing",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "pyparsing",
    "description": "pyparsing",
    "detail": "pyparsing",
    "documentation": {}
  },
  {
    "label": "math",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "math",
    "description": "math",
    "detail": "math",
    "documentation": {}
  },
  {
    "label": "functools",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "functools",
    "description": "functools",
    "detail": "functools",
    "documentation": {}
  },
  {
    "label": "operator",
    "kind": 6,
    "isExtraImport": true,
    "importPath": "operator",
    "description": "operator",
    "detail": "operator",
    "documentation": {}
  },
  {
    "label": "BigO",
    "importPath": "bigO",
    "description": "bigO",
    "isExtraImport": true,
    "detail": "bigO",
    "documentation": {}
  },
  {
    "label": "algorithm",
    "importPath": "bigO",
    "description": "bigO",
    "isExtraImport": true,
    "detail": "bigO",
    "documentation": {}
  },
  {
    "label": "BigO",
    "importPath": "bigO",
    "description": "bigO",
    "isExtraImport": true,
    "detail": "bigO",
    "documentation": {}
  },
  {
    "label": "algorithm",
    "importPath": "bigO",
    "description": "bigO",
    "isExtraImport": true,
    "detail": "bigO",
    "documentation": {}
  },
  {
    "label": "BigO",
    "importPath": "bigO",
    "description": "bigO",
    "isExtraImport": true,
    "detail": "bigO",
    "documentation": {}
  },
  {
    "label": "algorithm",
    "importPath": "bigO",
    "description": "bigO",
    "isExtraImport": true,
    "detail": "bigO",
    "documentation": {}
  },
  {
    "label": "isDifferByOneChar",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.CodeSignal-Solutions-master.Arcade.Intro.Python.stringsRearrangement",
    "description": "CodeSignal-Solutions.CodeSignal-Solutions-master.Arcade.Intro.Python.stringsRearrangement",
    "peekOfCode": "def isDifferByOneChar(str1, str2):\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count == 1\ndef stringsRearrangement(inputArray):\n    possiblePermutations = itertools.permutations(inputArray)\n    for per in possiblePermutations:\n        allMatch = True",
    "detail": "CodeSignal-Solutions.CodeSignal-Solutions-master.Arcade.Intro.Python.stringsRearrangement",
    "documentation": {}
  },
  {
    "label": "stringsRearrangement",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.CodeSignal-Solutions-master.Arcade.Intro.Python.stringsRearrangement",
    "description": "CodeSignal-Solutions.CodeSignal-Solutions-master.Arcade.Intro.Python.stringsRearrangement",
    "peekOfCode": "def stringsRearrangement(inputArray):\n    possiblePermutations = itertools.permutations(inputArray)\n    for per in possiblePermutations:\n        allMatch = True\n        for i in range(len(per) - 1):\n            if not isDifferByOneChar(per[i], per[i + 1]):\n                allMatch = False\n                break\n        if allMatch:\n            return True",
    "detail": "CodeSignal-Solutions.CodeSignal-Solutions-master.Arcade.Intro.Python.stringsRearrangement",
    "documentation": {}
  },
  {
    "label": "concatenateArrays",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.CodeSignal-Solutions-master.Challenges.Python.concatenateArrays",
    "description": "CodeSignal-Solutions.CodeSignal-Solutions-master.Challenges.Python.concatenateArrays",
    "peekOfCode": "def concatenateArrays(a, b):\n    return a + b",
    "detail": "CodeSignal-Solutions.CodeSignal-Solutions-master.Challenges.Python.concatenateArrays",
    "documentation": {}
  },
  {
    "label": "reverseSentence",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.CodeSignal-Solutions-master.Challenges.Python.reverseSentence",
    "description": "CodeSignal-Solutions.CodeSignal-Solutions-master.Challenges.Python.reverseSentence",
    "peekOfCode": "def reverseSentence(sentence):\n    list = sentence.split(\" \")\n    i, out = list.__len__() - 1, \"\"\n    while i >= 0:\n        out += list[i] + \" \"\n        i -= 1\n    return out[0:-1]",
    "detail": "CodeSignal-Solutions.CodeSignal-Solutions-master.Challenges.Python.reverseSentence",
    "documentation": {}
  },
  {
    "label": "url",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.02_find_all_links",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.02_find_all_links",
    "peekOfCode": "url =  ('https://lambda-w-1-notes.netlify.app/')\n# connect to the url\nwebsite = requests.get(url)\n# read html\nhtml = website.text\n# use re.findall to grab all the links\nlinks = re.findall('\"((http|ftp)s?://.*?)\"', html)\n# output links\nfor link in links:\n    print(link[0])",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.02_find_all_links",
    "documentation": {}
  },
  {
    "label": "website",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.02_find_all_links",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.02_find_all_links",
    "peekOfCode": "website = requests.get(url)\n# read html\nhtml = website.text\n# use re.findall to grab all the links\nlinks = re.findall('\"((http|ftp)s?://.*?)\"', html)\n# output links\nfor link in links:\n    print(link[0])",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.02_find_all_links",
    "documentation": {}
  },
  {
    "label": "html",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.02_find_all_links",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.02_find_all_links",
    "peekOfCode": "html = website.text\n# use re.findall to grab all the links\nlinks = re.findall('\"((http|ftp)s?://.*?)\"', html)\n# output links\nfor link in links:\n    print(link[0])",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.02_find_all_links",
    "documentation": {}
  },
  {
    "label": "links",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.02_find_all_links",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.02_find_all_links",
    "peekOfCode": "links = re.findall('\"((http|ftp)s?://.*?)\"', html)\n# output links\nfor link in links:\n    print(link[0])",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.02_find_all_links",
    "documentation": {}
  },
  {
    "label": "TWITTER_CONSUMER_KEY",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.03_simple_twitter_manager",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.03_simple_twitter_manager",
    "peekOfCode": "TWITTER_CONSUMER_KEY = 'XXX'\nTWITTER_CONSUMER_SECRET = 'XXX'\nTWITTER_ACCESS_TOKEN_KEY = 'XXX'\nTWITTER_ACCESS_TOKEN_SECRET = 'XXX'\ntwitter_api = twitter.Api(\n    consumer_key=TWITTER_CONSUMER_KEY,\n    consumer_secret=TWITTER_CONSUMER_SECRET,\n    access_token_key=TWITTER_ACCESS_TOKEN_KEY,\n    access_token_secret=TWITTER_ACCESS_TOKEN_SECRET\n)",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.03_simple_twitter_manager",
    "documentation": {}
  },
  {
    "label": "TWITTER_CONSUMER_SECRET",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.03_simple_twitter_manager",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.03_simple_twitter_manager",
    "peekOfCode": "TWITTER_CONSUMER_SECRET = 'XXX'\nTWITTER_ACCESS_TOKEN_KEY = 'XXX'\nTWITTER_ACCESS_TOKEN_SECRET = 'XXX'\ntwitter_api = twitter.Api(\n    consumer_key=TWITTER_CONSUMER_KEY,\n    consumer_secret=TWITTER_CONSUMER_SECRET,\n    access_token_key=TWITTER_ACCESS_TOKEN_KEY,\n    access_token_secret=TWITTER_ACCESS_TOKEN_SECRET\n)\nif __name__ == '__main__':",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.03_simple_twitter_manager",
    "documentation": {}
  },
  {
    "label": "TWITTER_ACCESS_TOKEN_KEY",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.03_simple_twitter_manager",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.03_simple_twitter_manager",
    "peekOfCode": "TWITTER_ACCESS_TOKEN_KEY = 'XXX'\nTWITTER_ACCESS_TOKEN_SECRET = 'XXX'\ntwitter_api = twitter.Api(\n    consumer_key=TWITTER_CONSUMER_KEY,\n    consumer_secret=TWITTER_CONSUMER_SECRET,\n    access_token_key=TWITTER_ACCESS_TOKEN_KEY,\n    access_token_secret=TWITTER_ACCESS_TOKEN_SECRET\n)\nif __name__ == '__main__':\n    follower_ids = twitter_api.GetFollowerIDs()",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.03_simple_twitter_manager",
    "documentation": {}
  },
  {
    "label": "TWITTER_ACCESS_TOKEN_SECRET",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.03_simple_twitter_manager",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.03_simple_twitter_manager",
    "peekOfCode": "TWITTER_ACCESS_TOKEN_SECRET = 'XXX'\ntwitter_api = twitter.Api(\n    consumer_key=TWITTER_CONSUMER_KEY,\n    consumer_secret=TWITTER_CONSUMER_SECRET,\n    access_token_key=TWITTER_ACCESS_TOKEN_KEY,\n    access_token_secret=TWITTER_ACCESS_TOKEN_SECRET\n)\nif __name__ == '__main__':\n    follower_ids = twitter_api.GetFollowerIDs()\n    following_ids = twitter_api.GetFriendIDs()",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.03_simple_twitter_manager",
    "documentation": {}
  },
  {
    "label": "twitter_api",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.03_simple_twitter_manager",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.03_simple_twitter_manager",
    "peekOfCode": "twitter_api = twitter.Api(\n    consumer_key=TWITTER_CONSUMER_KEY,\n    consumer_secret=TWITTER_CONSUMER_SECRET,\n    access_token_key=TWITTER_ACCESS_TOKEN_KEY,\n    access_token_secret=TWITTER_ACCESS_TOKEN_SECRET\n)\nif __name__ == '__main__':\n    follower_ids = twitter_api.GetFollowerIDs()\n    following_ids = twitter_api.GetFriendIDs()\n    zombie_follows = [following_id for following_id in",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.03_simple_twitter_manager",
    "documentation": {}
  },
  {
    "label": "dict_raise_on_duplicates",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.05_load_json_without_dupes",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.05_load_json_without_dupes",
    "peekOfCode": "def dict_raise_on_duplicates(ordered_pairs):\n    \"\"\"reject duplicate keys\"\"\"\n    my_dict = dict()\n    for key, values in ordered_pairs:\n        if key in my_dict:\n            raise ValueError(\"Duplicate key: {}\".format(key,))\n        else:\n            my_dict[key] = values\n    return my_dict",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.05_load_json_without_dupes",
    "documentation": {}
  },
  {
    "label": "ExecutionTime",
    "kind": 6,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.06_execution_time",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.06_execution_time",
    "peekOfCode": "class ExecutionTime:\n    def __init__(self):\n        self.start_time = time.time()\n    def duration(self):\n        return time.time() - self.start_time\n# ---- run code ---- #\ntimer = ExecutionTime()\nsample_list = list()\nmy_list = [random.randint(1, 888898) for num in\n           range(1, 1000000) if num % 2 == 0]",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.06_execution_time",
    "documentation": {}
  },
  {
    "label": "timer",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.06_execution_time",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.06_execution_time",
    "peekOfCode": "timer = ExecutionTime()\nsample_list = list()\nmy_list = [random.randint(1, 888898) for num in\n           range(1, 1000000) if num % 2 == 0]\nprint('Finished in {} seconds.'.format(timer.duration()))",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.06_execution_time",
    "documentation": {}
  },
  {
    "label": "sample_list",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.06_execution_time",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.06_execution_time",
    "peekOfCode": "sample_list = list()\nmy_list = [random.randint(1, 888898) for num in\n           range(1, 1000000) if num % 2 == 0]\nprint('Finished in {} seconds.'.format(timer.duration()))",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.06_execution_time",
    "documentation": {}
  },
  {
    "label": "my_list",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.06_execution_time",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.06_execution_time",
    "peekOfCode": "my_list = [random.randint(1, 888898) for num in\n           range(1, 1000000) if num % 2 == 0]\nprint('Finished in {} seconds.'.format(timer.duration()))",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.06_execution_time",
    "documentation": {}
  },
  {
    "label": "timeit",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.07_benchmark_permissions_loading_django",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.07_benchmark_permissions_loading_django",
    "peekOfCode": "def timeit(method):\n    def timed(*args, **kw):\n        ts = time.time()\n        result = method(*args, **kw)\n        te = time.time()\n        all_times.append(te - ts)\n        print(all_times)\n        print(numpy.mean(all_times))\n        return result\n    return timed",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.07_benchmark_permissions_loading_django",
    "documentation": {}
  },
  {
    "label": "create_new_db",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.07_benchmark_permissions_loading_django",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.07_benchmark_permissions_loading_django",
    "peekOfCode": "def create_new_db():\n    os.system(\"mysqladmin -u root drop DATABASE_NAME -f\")\n    os.system(\"mysqladmin -u root create DATABASE_NAME -f\")\n    os.system(\"./manage.py syncdb\")\n    os.system(\"./manage.py migrate\")\n@timeit\ndef load_new_perms():\n    os.system(\"./manage.py LOAD_PERMS_COMMAND\")\nif __name__ == \"__main__\":\n    n = 0",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.07_benchmark_permissions_loading_django",
    "documentation": {}
  },
  {
    "label": "load_new_perms",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.07_benchmark_permissions_loading_django",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.07_benchmark_permissions_loading_django",
    "peekOfCode": "def load_new_perms():\n    os.system(\"./manage.py LOAD_PERMS_COMMAND\")\nif __name__ == \"__main__\":\n    n = 0\n    all_times = list()\n    while n < 10:\n        create_new_db()\n        load_new_perms()\n        n += 1",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.07_benchmark_permissions_loading_django",
    "documentation": {}
  },
  {
    "label": "url",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.08_basic_email_web_crawler",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.08_basic_email_web_crawler",
    "peekOfCode": "url = input('Enter a URL (include `http://`): ')\n# connect to the url\nwebsite = requests.get(url)\n# read html\nhtml = website.text\n# use re.findall to grab all the links\nlinks = re.findall('\"((http|ftp)s?://.*?)\"', html)\nemails = re.findall('([\\w\\.,]+@[\\w\\.,]+\\.\\w+)', html)\n# print the number of links in the list\nprint(\"\\nFound {} links\".format(len(links)))",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.08_basic_email_web_crawler",
    "documentation": {}
  },
  {
    "label": "website",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.08_basic_email_web_crawler",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.08_basic_email_web_crawler",
    "peekOfCode": "website = requests.get(url)\n# read html\nhtml = website.text\n# use re.findall to grab all the links\nlinks = re.findall('\"((http|ftp)s?://.*?)\"', html)\nemails = re.findall('([\\w\\.,]+@[\\w\\.,]+\\.\\w+)', html)\n# print the number of links in the list\nprint(\"\\nFound {} links\".format(len(links)))\nfor email in emails:\n    print(email)",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.08_basic_email_web_crawler",
    "documentation": {}
  },
  {
    "label": "html",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.08_basic_email_web_crawler",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.08_basic_email_web_crawler",
    "peekOfCode": "html = website.text\n# use re.findall to grab all the links\nlinks = re.findall('\"((http|ftp)s?://.*?)\"', html)\nemails = re.findall('([\\w\\.,]+@[\\w\\.,]+\\.\\w+)', html)\n# print the number of links in the list\nprint(\"\\nFound {} links\".format(len(links)))\nfor email in emails:\n    print(email)",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.08_basic_email_web_crawler",
    "documentation": {}
  },
  {
    "label": "links",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.08_basic_email_web_crawler",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.08_basic_email_web_crawler",
    "peekOfCode": "links = re.findall('\"((http|ftp)s?://.*?)\"', html)\nemails = re.findall('([\\w\\.,]+@[\\w\\.,]+\\.\\w+)', html)\n# print the number of links in the list\nprint(\"\\nFound {} links\".format(len(links)))\nfor email in emails:\n    print(email)",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.08_basic_email_web_crawler",
    "documentation": {}
  },
  {
    "label": "emails",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.08_basic_email_web_crawler",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.08_basic_email_web_crawler",
    "peekOfCode": "emails = re.findall('([\\w\\.,]+@[\\w\\.,]+\\.\\w+)', html)\n# print the number of links in the list\nprint(\"\\nFound {} links\".format(len(links)))\nfor email in emails:\n    print(email)",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.08_basic_email_web_crawler",
    "documentation": {}
  },
  {
    "label": "crawl",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.09_basic_link_web_crawler",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.09_basic_link_web_crawler",
    "peekOfCode": "def crawl(url):\n    req = requests.get(url)\n    # Check if successful\n    if(req.status_code != 200):\n        return []\n    # Find links\n    links = link_re.findall(req.text)\n    print(\"\\nFound {} links\".format(len(links)))\n    # Search links for emails\n    for link in links:",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.09_basic_link_web_crawler",
    "documentation": {}
  },
  {
    "label": "link_re",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.09_basic_link_web_crawler",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.09_basic_link_web_crawler",
    "peekOfCode": "link_re = re.compile(r'href=\"(.*?)\"')\ndef crawl(url):\n    req = requests.get(url)\n    # Check if successful\n    if(req.status_code != 200):\n        return []\n    # Find links\n    links = link_re.findall(req.text)\n    print(\"\\nFound {} links\".format(len(links)))\n    # Search links for emails",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.09_basic_link_web_crawler",
    "documentation": {}
  },
  {
    "label": "get_file_names",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.10_find_files_recursively",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.10_find_files_recursively",
    "peekOfCode": "def get_file_names(filepath, pattern):\n    matches = []\n    if os.path.exists(filepath):\n        for root, dirnames, filenames in os.walk(filepath):\n            for filename in fnmatch.filter(filenames, pattern):\n                # matches.append(os.path.join(root, filename))  # full path\n                matches.append(os.path.join(filename))  # just file name\n        if matches:\n            print(\"Found {} files:\".format(len(matches)))\n            output_files(matches)",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.10_find_files_recursively",
    "documentation": {}
  },
  {
    "label": "output_files",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.10_find_files_recursively",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.10_find_files_recursively",
    "peekOfCode": "def output_files(list_of_files):\n    for filename in list_of_files:\n        print(filename)\nif __name__ == '__main__':\n    get_file_names(PATH, PATTERN)",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.10_find_files_recursively",
    "documentation": {}
  },
  {
    "label": "PATH",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.10_find_files_recursively",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.10_find_files_recursively",
    "peekOfCode": "PATH = './'\nPATTERN = '*.md'\ndef get_file_names(filepath, pattern):\n    matches = []\n    if os.path.exists(filepath):\n        for root, dirnames, filenames in os.walk(filepath):\n            for filename in fnmatch.filter(filenames, pattern):\n                # matches.append(os.path.join(root, filename))  # full path\n                matches.append(os.path.join(filename))  # just file name\n        if matches:",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.10_find_files_recursively",
    "documentation": {}
  },
  {
    "label": "PATTERN",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.10_find_files_recursively",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.10_find_files_recursively",
    "peekOfCode": "PATTERN = '*.md'\ndef get_file_names(filepath, pattern):\n    matches = []\n    if os.path.exists(filepath):\n        for root, dirnames, filenames in os.walk(filepath):\n            for filename in fnmatch.filter(filenames, pattern):\n                # matches.append(os.path.join(root, filename))  # full path\n                matches.append(os.path.join(filename))  # just file name\n        if matches:\n            print(\"Found {} files:\".format(len(matches)))",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.10_find_files_recursively",
    "documentation": {}
  },
  {
    "label": "get_image_file_names",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.11_optimize_images_with_wand",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.11_optimize_images_with_wand",
    "peekOfCode": "def get_image_file_names(filepath, pattern):\n    matches = []\n    if os.path.exists(filepath):\n        for root, dirnames, filenames in os.walk(filepath):\n            for filename in fnmatch.filter(filenames, pattern):\n                matches.append(os.path.join(root, filename))  # full path\n        if matches:\n            print(\"Found {} files, with a total file size of {}.\".format(\n                len(matches), get_total_size(matches)))\n            return matches",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.11_optimize_images_with_wand",
    "documentation": {}
  },
  {
    "label": "get_total_size",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.11_optimize_images_with_wand",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.11_optimize_images_with_wand",
    "peekOfCode": "def get_total_size(list_of_image_names):\n    total_size = 0\n    for image_name in list_of_image_names:\n        total_size += os.path.getsize(image_name)\n    return size(total_size)\ndef resize_images(list_of_image_names):\n    print(\"Optimizing ... \")\n    for index, image_name in enumerate(list_of_image_names):\n        with open(image_name) as f:\n            image_binary = f.read()",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.11_optimize_images_with_wand",
    "documentation": {}
  },
  {
    "label": "resize_images",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.11_optimize_images_with_wand",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.11_optimize_images_with_wand",
    "peekOfCode": "def resize_images(list_of_image_names):\n    print(\"Optimizing ... \")\n    for index, image_name in enumerate(list_of_image_names):\n        with open(image_name) as f:\n            image_binary = f.read()\n        with Image(blob=image_binary) as img:\n            if img.height >= 600:\n                img.transform(resize='x600')\n                img.save(filename=image_name)\n    print(\"Optimization complete.\")",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.11_optimize_images_with_wand",
    "documentation": {}
  },
  {
    "label": "PATH",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.11_optimize_images_with_wand",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.11_optimize_images_with_wand",
    "peekOfCode": "PATH = '/../../../..'\nPATTERN = '*.jpg'\ndef get_image_file_names(filepath, pattern):\n    matches = []\n    if os.path.exists(filepath):\n        for root, dirnames, filenames in os.walk(filepath):\n            for filename in fnmatch.filter(filenames, pattern):\n                matches.append(os.path.join(root, filename))  # full path\n        if matches:\n            print(\"Found {} files, with a total file size of {}.\".format(",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.11_optimize_images_with_wand",
    "documentation": {}
  },
  {
    "label": "PATTERN",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.11_optimize_images_with_wand",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.11_optimize_images_with_wand",
    "peekOfCode": "PATTERN = '*.jpg'\ndef get_image_file_names(filepath, pattern):\n    matches = []\n    if os.path.exists(filepath):\n        for root, dirnames, filenames in os.walk(filepath):\n            for filename in fnmatch.filter(filenames, pattern):\n                matches.append(os.path.join(root, filename))  # full path\n        if matches:\n            print(\"Found {} files, with a total file size of {}.\".format(\n                len(matches), get_total_size(matches)))",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.11_optimize_images_with_wand",
    "documentation": {}
  },
  {
    "label": "get_arguments",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.12_csv_split",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.12_csv_split",
    "peekOfCode": "def get_arguments():\n    \"\"\"Grab user supplied arguments using the argparse library.\"\"\"\n    # Use arparse to get command line arguments\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"-i\", \"--input_file\", required=True,\n                        help=\"csv input file (with extension)\", type=str)\n    parser.add_argument(\"-o\", \"--output_file\", required=True,\n                        help=\"csv output file (without extension)\", type=str)\n    parser.add_argument(\"-r\", \"--row_limit\", required=True,\n                        help=\"row limit to split csv at\", type=int)",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.12_csv_split",
    "documentation": {}
  },
  {
    "label": "is_valid_file",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.12_csv_split",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.12_csv_split",
    "peekOfCode": "def is_valid_file(parser, file_name):\n    \"\"\"Ensure that the input_file exists.\"\"\"\n    if not os.path.exists(file_name):\n        parser.error(\"The file '{}' does not exist!\".format(file_name))\n        sys.exit(1)\ndef is_valid_csv(parser, file_name, row_limit):\n    \"\"\"\n    Ensure that the # of rows in the input_file\n    is greater than the row_limit.\n    \"\"\"",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.12_csv_split",
    "documentation": {}
  },
  {
    "label": "is_valid_csv",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.12_csv_split",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.12_csv_split",
    "peekOfCode": "def is_valid_csv(parser, file_name, row_limit):\n    \"\"\"\n    Ensure that the # of rows in the input_file\n    is greater than the row_limit.\n    \"\"\"\n    row_count = 0\n    for row in csv.reader(open(file_name)):\n        row_count += 1\n    # Note: You could also use a generator expression\n    # and the sum() function to count the rows:",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.12_csv_split",
    "documentation": {}
  },
  {
    "label": "parse_file",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.12_csv_split",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.12_csv_split",
    "peekOfCode": "def parse_file(arguments):\n    \"\"\"\n    Splits the CSV into multiple files or chunks based on the row_limit.\n    Then create new CSV files.\n    \"\"\"\n    input_file = arguments[0]\n    output_file = arguments[1]\n    row_limit = arguments[2]\n    output_path = '.'  # Current directory\n    # Read CSV, split into list of lists",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.12_csv_split",
    "documentation": {}
  },
  {
    "label": "random_name_generator",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.13_random_name_generator",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.13_random_name_generator",
    "peekOfCode": "def random_name_generator(first, second, x):\n    \"\"\"\n        Generates random names.\n        Arguments:\n         - list of first names\n         - list of last names\n         - number of random names\n    \"\"\"\n    names = []\n    for i in range(x):",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.13_random_name_generator",
    "documentation": {}
  },
  {
    "label": "first_names",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.13_random_name_generator",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.13_random_name_generator",
    "peekOfCode": "first_names = [\"Drew\", \"Mike\", \"Landon\", \"Jeremy\", \"Tyler\", \"Tom\", \"Avery\"]\nlast_names = [\"Smith\", \"Jones\", \"Brighton\", \"Taylor\"]\nnames = random_name_generator(first_names, last_names, 5)\nprint('\\n'.join(names))",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.13_random_name_generator",
    "documentation": {}
  },
  {
    "label": "last_names",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.13_random_name_generator",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.13_random_name_generator",
    "peekOfCode": "last_names = [\"Smith\", \"Jones\", \"Brighton\", \"Taylor\"]\nnames = random_name_generator(first_names, last_names, 5)\nprint('\\n'.join(names))",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.13_random_name_generator",
    "documentation": {}
  },
  {
    "label": "names",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.13_random_name_generator",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.13_random_name_generator",
    "peekOfCode": "names = random_name_generator(first_names, last_names, 5)\nprint('\\n'.join(names))",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.13_random_name_generator",
    "documentation": {}
  },
  {
    "label": "Main",
    "kind": 6,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.15_check_my_environment",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.15_check_my_environment",
    "peekOfCode": "class Main:\n    def __init__(self, configFile):\n        pass\n    def process(self):\n        print(\"ok\")\nif __name__ == \"__main__\":\n    m = Main(some_script.CONFIGFILE)\n    m.process()\n\"\"\"\nimport os",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.15_check_my_environment",
    "documentation": {}
  },
  {
    "label": "get_config_file",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.15_check_my_environment",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.15_check_my_environment",
    "peekOfCode": "def get_config_file():\n    directory = os.path.dirname(__file__)\n    return {\n        \"development\": \"{}/../config/development.cfg\".format(directory),\n        \"staging\": \"{}/../config/staging.cfg\".format(directory),\n        \"production\": \"{}/../config/production.cfg\".format(directory)\n    }.get(ENVIRONMENT, None)\nCONFIGFILE = get_config_file()\nif CONFIGFILE is None:\n    sys.exit(\"Configuration error! Unknown environment set. \\",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.15_check_my_environment",
    "documentation": {}
  },
  {
    "label": "ENVIRONMENT",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.15_check_my_environment",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.15_check_my_environment",
    "peekOfCode": "ENVIRONMENT = \"development\"\nCONFIGFILE = None\ndef get_config_file():\n    directory = os.path.dirname(__file__)\n    return {\n        \"development\": \"{}/../config/development.cfg\".format(directory),\n        \"staging\": \"{}/../config/staging.cfg\".format(directory),\n        \"production\": \"{}/../config/production.cfg\".format(directory)\n    }.get(ENVIRONMENT, None)\nCONFIGFILE = get_config_file()",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.15_check_my_environment",
    "documentation": {}
  },
  {
    "label": "CONFIGFILE",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.15_check_my_environment",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.15_check_my_environment",
    "peekOfCode": "CONFIGFILE = None\ndef get_config_file():\n    directory = os.path.dirname(__file__)\n    return {\n        \"development\": \"{}/../config/development.cfg\".format(directory),\n        \"staging\": \"{}/../config/staging.cfg\".format(directory),\n        \"production\": \"{}/../config/production.cfg\".format(directory)\n    }.get(ENVIRONMENT, None)\nCONFIGFILE = get_config_file()\nif CONFIGFILE is None:",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.15_check_my_environment",
    "documentation": {}
  },
  {
    "label": "CONFIGFILE",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.15_check_my_environment",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.15_check_my_environment",
    "peekOfCode": "CONFIGFILE = get_config_file()\nif CONFIGFILE is None:\n    sys.exit(\"Configuration error! Unknown environment set. \\\n              Edit config.py and set appropriate environment\")\nprint(\"Config file: {}\".format(CONFIGFILE))\nif not os.path.exists(CONFIGFILE):\n    sys.exit(\"Configuration error! Config file does not exist\")\nprint(\"Config ok ....\")",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.15_check_my_environment",
    "documentation": {}
  },
  {
    "label": "render_from_template",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.16_jinja_quick_load",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.16_jinja_quick_load",
    "peekOfCode": "def render_from_template(directory, template_name, **kwargs):\n    loader = FileSystemLoader(directory)\n    env = Environment(loader=loader)\n    template = env.get_template(template_name)\n    return template.render(**kwargs)",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.16_jinja_quick_load",
    "documentation": {}
  },
  {
    "label": "zipdir",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.18_zipper",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.18_zipper",
    "peekOfCode": "def zipdir(path, zip):\n    for root, dirs, files in os.walk(path):\n        for file in files:\n            zip.write(os.path.join(root, file))\nif __name__ == '__main__':\n    zipfile = ZipFile(file_name, 'w')\n    zipdir(dir_name, zipfile)\n    zipfile.close()",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.18_zipper",
    "documentation": {}
  },
  {
    "label": "today",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.18_zipper",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.18_zipper",
    "peekOfCode": "today = datetime.now()\nfile_name = 'zipper_' + today.strftime('%Y.%m.%dh%H%M') + '.zip'\ndir_name = 'tmp/'  # update path\ndef zipdir(path, zip):\n    for root, dirs, files in os.walk(path):\n        for file in files:\n            zip.write(os.path.join(root, file))\nif __name__ == '__main__':\n    zipfile = ZipFile(file_name, 'w')\n    zipdir(dir_name, zipfile)",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.18_zipper",
    "documentation": {}
  },
  {
    "label": "file_name",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.18_zipper",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.18_zipper",
    "peekOfCode": "file_name = 'zipper_' + today.strftime('%Y.%m.%dh%H%M') + '.zip'\ndir_name = 'tmp/'  # update path\ndef zipdir(path, zip):\n    for root, dirs, files in os.walk(path):\n        for file in files:\n            zip.write(os.path.join(root, file))\nif __name__ == '__main__':\n    zipfile = ZipFile(file_name, 'w')\n    zipdir(dir_name, zipfile)\n    zipfile.close()",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.18_zipper",
    "documentation": {}
  },
  {
    "label": "dir_name",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.18_zipper",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.18_zipper",
    "peekOfCode": "dir_name = 'tmp/'  # update path\ndef zipdir(path, zip):\n    for root, dirs, files in os.walk(path):\n        for file in files:\n            zip.write(os.path.join(root, file))\nif __name__ == '__main__':\n    zipfile = ZipFile(file_name, 'w')\n    zipdir(dir_name, zipfile)\n    zipfile.close()",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.18_zipper",
    "documentation": {}
  },
  {
    "label": "convert",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.19_tsv-to-csv",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.19_tsv-to-csv",
    "peekOfCode": "def convert(input, out):\n    if os.path.exists(out):\n        raise ValueError(\"Output file already exists\")\n    reader = csv.reader(open(input, 'rU'), dialect=csv.excel_tab)\n    writer = csv.writer(open(out, \"wb+\"), dialect=\"excel\")\n    for row in reader:\n        writer.writerow(row)\nif __name__ == \"__main__\":\n    convert(sys.argv[1], sys.argv[2])",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.19_tsv-to-csv",
    "documentation": {}
  },
  {
    "label": "file_name",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.20_restore_file_from_git",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.20_restore_file_from_git",
    "peekOfCode": "file_name = str(input('Enter the file name: '))\ncommit = check_output([\"git\", \"rev-list\", \"-n\", \"1\", \"HEAD\", \"--\", file_name])\nprint(str(commit).rstrip())\ncall([\"git\", \"checkout\", str(commit).rstrip()+\"~1\", file_name])\n\"\"\"\nAfter entering a filename, this script searches your Git history for that file.\nIf the file exists, then it will restore it.\n\"\"\"",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.20_restore_file_from_git",
    "documentation": {}
  },
  {
    "label": "commit",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.20_restore_file_from_git",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.20_restore_file_from_git",
    "peekOfCode": "commit = check_output([\"git\", \"rev-list\", \"-n\", \"1\", \"HEAD\", \"--\", file_name])\nprint(str(commit).rstrip())\ncall([\"git\", \"checkout\", str(commit).rstrip()+\"~1\", file_name])\n\"\"\"\nAfter entering a filename, this script searches your Git history for that file.\nIf the file exists, then it will restore it.\n\"\"\"",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.20_restore_file_from_git",
    "documentation": {}
  },
  {
    "label": "get_api_handler",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.21_twitter_bot",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.21_twitter_bot",
    "peekOfCode": "def get_api_handler(cfg):\n    auth = tweepy.OAuthHandler(cfg['consumer_key'], cfg['consumer_secret'])\n    auth.set_access_token(cfg['access_token'], cfg['access_token_secret'])\n    return tweepy.API(auth)\ndef main():\n    api = get_api_handler(cfg)\n    tweet = 'Hello, world from Tweepy!'\n    api.update_status(status=tweet)\nif __name__ == \"__main__\":\n    main()",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.21_twitter_bot",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.21_twitter_bot",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.21_twitter_bot",
    "peekOfCode": "def main():\n    api = get_api_handler(cfg)\n    tweet = 'Hello, world from Tweepy!'\n    api.update_status(status=tweet)\nif __name__ == \"__main__\":\n    main()",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.21_twitter_bot",
    "documentation": {}
  },
  {
    "label": "cfg",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.21_twitter_bot",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.21_twitter_bot",
    "peekOfCode": "cfg = {\n    'consumer_key': 'VALUE',\n    'consumer_secret': 'VALUE',\n    'access_token': 'VALUE',\n    'access_token_secret': 'VALUE'\n}\ndef get_api_handler(cfg):\n    auth = tweepy.OAuthHandler(cfg['consumer_key'], cfg['consumer_secret'])\n    auth.set_access_token(cfg['access_token'], cfg['access_token_secret'])\n    return tweepy.API(auth)",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.21_twitter_bot",
    "documentation": {}
  },
  {
    "label": "set",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.23_flask_session_test",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.23_flask_session_test",
    "peekOfCode": "def set():\n    session.clear()\n    session['works'] = True\n    return redirect(url_for('get'))\n@app.route('/get')\ndef get():\n    works = session.get('works', False)\n    return str(works)\napp.run(sys.argv[1], use_reloader=False)",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.23_flask_session_test",
    "documentation": {}
  },
  {
    "label": "get",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.23_flask_session_test",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.23_flask_session_test",
    "peekOfCode": "def get():\n    works = session.get('works', False)\n    return str(works)\napp.run(sys.argv[1], use_reloader=False)",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.23_flask_session_test",
    "documentation": {}
  },
  {
    "label": "app",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.23_flask_session_test",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.23_flask_session_test",
    "peekOfCode": "app = Flask(__name__)\napp.secret_key = 'secret'\n@app.route('/')\ndef set():\n    session.clear()\n    session['works'] = True\n    return redirect(url_for('get'))\n@app.route('/get')\ndef get():\n    works = session.get('works', False)",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.23_flask_session_test",
    "documentation": {}
  },
  {
    "label": "app.secret_key",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.23_flask_session_test",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.23_flask_session_test",
    "peekOfCode": "app.secret_key = 'secret'\n@app.route('/')\ndef set():\n    session.clear()\n    session['works'] = True\n    return redirect(url_for('get'))\n@app.route('/get')\ndef get():\n    works = session.get('works', False)\n    return str(works)",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.23_flask_session_test",
    "documentation": {}
  },
  {
    "label": "conn",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.24_sql2csv",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.24_sql2csv",
    "peekOfCode": "conn = sqlite3.connect(sys.argv[1])\ncur = conn.cursor()\ndata = cur.execute(\"SELECT * FROM {0}\".format(sys.argv[2]))\nwith open('output.csv', 'wb') as f:\n    writer = csv.writer(f)\n    writer.writerows(data)\nconn.close()",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.24_sql2csv",
    "documentation": {}
  },
  {
    "label": "cur",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.24_sql2csv",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.24_sql2csv",
    "peekOfCode": "cur = conn.cursor()\ndata = cur.execute(\"SELECT * FROM {0}\".format(sys.argv[2]))\nwith open('output.csv', 'wb') as f:\n    writer = csv.writer(f)\n    writer.writerows(data)\nconn.close()",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.24_sql2csv",
    "documentation": {}
  },
  {
    "label": "data",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.24_sql2csv",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.24_sql2csv",
    "peekOfCode": "data = cur.execute(\"SELECT * FROM {0}\".format(sys.argv[2]))\nwith open('output.csv', 'wb') as f:\n    writer = csv.writer(f)\n    writer.writerows(data)\nconn.close()",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.24_sql2csv",
    "documentation": {}
  },
  {
    "label": "get_addresses",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.25_ip2geolocation",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.25_ip2geolocation",
    "peekOfCode": "def get_addresses(filename):\n    \"\"\"\n    Given a CSV file, this function returns a list of lists\n    where each element (list) in the outer list contains the\n    row info from the csv file.\n    \"\"\"\n    all_addresses = []\n    with open(filename, 'rt') as f:\n        reader = csv.reader(f)\n        for row in reader:",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.25_ip2geolocation",
    "documentation": {}
  },
  {
    "label": "get_geolocation",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.25_ip2geolocation",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.25_ip2geolocation",
    "peekOfCode": "def get_geolocation(all_the_ip_address):\n    \"\"\"\n    Given a list of lists from `get_addresses()`, this function\n    returns an updated lists of lists containing the geolocation.\n    \"\"\"\n    print(\"Getting geo information...\")\n    updated_addresses = []\n    counter = 1\n    # update header\n    header_row = all_the_ip_address.pop(0)",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.25_ip2geolocation",
    "documentation": {}
  },
  {
    "label": "create_csv",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.25_ip2geolocation",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.25_ip2geolocation",
    "peekOfCode": "def create_csv(updated_address_list):\n    \"\"\"\n    Given the updated lists of lists from `get_geolocation()`, this function\n    creates a new CSV.\n    \"\"\"\n    import sys\n    if sys.version_info >= (3, 0, 0):\n        f = open('output.csv', 'w', newline='')\n    else:\n        f = open('output.csv', 'wb')",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.25_ip2geolocation",
    "documentation": {}
  },
  {
    "label": "get_stocks",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.26_stock_scraper",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.26_stock_scraper",
    "peekOfCode": "def get_stocks(url):\n    # Make Request\n    page = requests.get(url)\n    # Parse/Scrape\n    tree = html.fromstring(page.text)\n    xpath = '//*[@id=\"mw-content-text\"]/table[1]'\n    rows = tree.xpath(xpath)[0].findall(\"tr\")\n    rows = [(row.getchildren()[0], row.getchildren()[3]) for row in rows[1:]]\n    rows = [(row[0].getchildren()[0].text, row[1].text) for row in rows]\n    industries = defaultdict(list)",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.26_stock_scraper",
    "documentation": {}
  },
  {
    "label": "output_data",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.26_stock_scraper",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.26_stock_scraper",
    "peekOfCode": "def output_data(data_dict):\n    for industry in data_dict:\n        print('\\n'+industry)\n        print('-'*len(industry))\n        for ticker in data_dict[industry]:\n            print(ticker)\nif __name__ == '__main__':\n    url = 'http://en.wikipedia.org/wiki/List_of_S%26P_500_companies'\n    scraped_data = get_stocks(url)\n    output_data(scraped_data)",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.26_stock_scraper",
    "documentation": {}
  },
  {
    "label": "message",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.27_send_sms",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.27_send_sms",
    "peekOfCode": "message = raw_input('Enter a Message: ')\nnumber = raw_input('Enter the phone number: ')\npayload = {'number': number, 'message': message}\nr = requests.post(\"http://textbelt.com/text\", data=payload)\nif r.json()['success']:\n    print('Success!')\nelse:\n    print('Error!')",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.27_send_sms",
    "documentation": {}
  },
  {
    "label": "number",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.27_send_sms",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.27_send_sms",
    "peekOfCode": "number = raw_input('Enter the phone number: ')\npayload = {'number': number, 'message': message}\nr = requests.post(\"http://textbelt.com/text\", data=payload)\nif r.json()['success']:\n    print('Success!')\nelse:\n    print('Error!')",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.27_send_sms",
    "documentation": {}
  },
  {
    "label": "payload",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.27_send_sms",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.27_send_sms",
    "peekOfCode": "payload = {'number': number, 'message': message}\nr = requests.post(\"http://textbelt.com/text\", data=payload)\nif r.json()['success']:\n    print('Success!')\nelse:\n    print('Error!')",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.27_send_sms",
    "documentation": {}
  },
  {
    "label": "r",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.27_send_sms",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.27_send_sms",
    "peekOfCode": "r = requests.post(\"http://textbelt.com/text\", data=payload)\nif r.json()['success']:\n    print('Success!')\nelse:\n    print('Error!')",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.27_send_sms",
    "documentation": {}
  },
  {
    "label": "headers",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.28_income_tax_calculator",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.28_income_tax_calculator",
    "peekOfCode": "headers = {\n    'Content-Type': 'application/x-www-form-urlencoded',\n    'Accept': 'application/json',\n}\ndata = {\n    'pay_rate': '10000',\n    'filing_status': 'single',\n    'pay_periods': 1,\n    'state': 'CO',\n    'year':",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.28_income_tax_calculator",
    "documentation": {}
  },
  {
    "label": "data",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.28_income_tax_calculator",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.28_income_tax_calculator",
    "peekOfCode": "data = {\n    'pay_rate': '10000',\n    'filing_status': 'single',\n    'pay_periods': 1,\n    'state': 'CO',\n    'year':\n    '2014'\n}\nr = requests.post(\n    'http://taxee.io/api/v1/calculate/2014',",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.28_income_tax_calculator",
    "documentation": {}
  },
  {
    "label": "r",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.28_income_tax_calculator",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.28_income_tax_calculator",
    "peekOfCode": "r = requests.post(\n    'http://taxee.io/api/v1/calculate/2014',\n    data=data,\n    headers=headers\n)\nprint(r.text)",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.28_income_tax_calculator",
    "documentation": {}
  },
  {
    "label": "json_data",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.29_json_to_yaml",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.29_json_to_yaml",
    "peekOfCode": "json_data = json.loads(open(sys.argv[1]).read())\n# convert unicode to string\nconverted_json_data = json.dumps(json_data)\n# output yaml\nprint(yaml.dump(yaml.load(converted_json_data), default_flow_style=False))",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.29_json_to_yaml",
    "documentation": {}
  },
  {
    "label": "converted_json_data",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.29_json_to_yaml",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.29_json_to_yaml",
    "peekOfCode": "converted_json_data = json.dumps(json_data)\n# output yaml\nprint(yaml.dump(yaml.load(converted_json_data), default_flow_style=False))",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.29_json_to_yaml",
    "documentation": {}
  },
  {
    "label": "get_arguments",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.30_fullcontact",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.30_fullcontact",
    "peekOfCode": "def get_arguments():\n    if len(sys.argv) is 3:\n        return {\n            'media': sys.argv[1],\n            'user_info': sys.argv[2]\n        }\n    else:\n        print('Specify at least 1 argument')\n        sys.exit()\ndef call_api(contact):",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.30_fullcontact",
    "documentation": {}
  },
  {
    "label": "call_api",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.30_fullcontact",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.30_fullcontact",
    "peekOfCode": "def call_api(contact):\n    url = BASE_URL + '?{0}={1}&apiKey={2}'.format(\n        contact['media'], contact['user_info'], API_KEY)\n    r = requests.get(url)\n    if r.status_code == 200:\n        return r.text\n    else:\n        return \"Sorry, no results found.\"\n# main\nif __name__ == \"__main__\":",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.30_fullcontact",
    "documentation": {}
  },
  {
    "label": "API_KEY",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.30_fullcontact",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.30_fullcontact",
    "peekOfCode": "API_KEY = os.environ.get('FULLCONTACT_API_KEY')\nBASE_URL = 'http://api.fullcontact.com/v2/person.json'\n# helpers\ndef get_arguments():\n    if len(sys.argv) is 3:\n        return {\n            'media': sys.argv[1],\n            'user_info': sys.argv[2]\n        }\n    else:",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.30_fullcontact",
    "documentation": {}
  },
  {
    "label": "BASE_URL",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.30_fullcontact",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.30_fullcontact",
    "peekOfCode": "BASE_URL = 'http://api.fullcontact.com/v2/person.json'\n# helpers\ndef get_arguments():\n    if len(sys.argv) is 3:\n        return {\n            'media': sys.argv[1],\n            'user_info': sys.argv[2]\n        }\n    else:\n        print('Specify at least 1 argument')",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.30_fullcontact",
    "documentation": {}
  },
  {
    "label": "get_arguments",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.31_youtube_sentiment",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.31_youtube_sentiment",
    "peekOfCode": "def get_arguments():\n    if len(sys.argv) is 2:\n        return sys.argv[1]\n    else:\n        print('Specify at least 1 argument')\n        sys.exit()\ndef get_comments(url):\n    html = requests.get('https://plus.googleapis.com/u/0/_/widget/render/comments?first_party_property=YOUTUBE&href=' + url)\n    soup = bs4(html.text, 'html.parser')\n    return [comment.string for comment in soup.findAll('div', class_='Ct')]",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.31_youtube_sentiment",
    "documentation": {}
  },
  {
    "label": "get_comments",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.31_youtube_sentiment",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.31_youtube_sentiment",
    "peekOfCode": "def get_comments(url):\n    html = requests.get('https://plus.googleapis.com/u/0/_/widget/render/comments?first_party_property=YOUTUBE&href=' + url)\n    soup = bs4(html.text, 'html.parser')\n    return [comment.string for comment in soup.findAll('div', class_='Ct')]\ndef calculate_sentiment(comments):\n    positive = 0\n    negative = 0\n    negative_words = [\n        'hate', 'hated', 'dislike', 'disliked', 'awful', 'terrible', 'bad',\n        'painful', 'worst', 'suck', 'rubbish', 'sad', 'sodding'",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.31_youtube_sentiment",
    "documentation": {}
  },
  {
    "label": "calculate_sentiment",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.31_youtube_sentiment",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.31_youtube_sentiment",
    "peekOfCode": "def calculate_sentiment(comments):\n    positive = 0\n    negative = 0\n    negative_words = [\n        'hate', 'hated', 'dislike', 'disliked', 'awful', 'terrible', 'bad',\n        'painful', 'worst', 'suck', 'rubbish', 'sad', 'sodding'\n    ]\n    positive_words = [\n        'love', 'loved', 'like', 'liked', 'awesome', 'amazing', 'good',\n        'great', 'excellent', 'brilliant', 'cool'",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.31_youtube_sentiment",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.31_youtube_sentiment",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.31_youtube_sentiment",
    "peekOfCode": "def main():\n    url = get_arguments()\n    if url:\n        comments = get_comments(url)\n        if len(comments) <= 0:\n            print('This video has no comments.')\n            sys.exit()\n        sentiment = calculate_sentiment(comments)\n        positive_score = sentiment['positive']\n        negative_score = sentiment['negative']",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.31_youtube_sentiment",
    "documentation": {}
  },
  {
    "label": "get_stock_tickers",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.32_stock_scraper",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.32_stock_scraper",
    "peekOfCode": "def get_stock_tickers():\n    req = urllib.request.Request(\n        'http://en.wikipedia.org/wiki/List_of_S%26P_500_companies')\n    page = urllib.request.urlopen(req)\n    soup = BeautifulSoup(page, 'html.parser')\n    table = soup.find('table', {'class': 'wikitable sortable'})\n    tickers = []\n    for row in table.findAll('tr'):\n        col = row.findAll('td')\n        if len(col) > 0:",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.32_stock_scraper",
    "documentation": {}
  },
  {
    "label": "get_stock_prices",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.32_stock_scraper",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.32_stock_scraper",
    "peekOfCode": "def get_stock_prices(ticker_list):\n    for ticker in ticker_list:\n        htmlfile = urllib.request.urlopen(\n            \"http://finance.yahoo.com/q?s={0}\".format(ticker)\n        )\n        htmltext = htmlfile.read()\n        soup = BeautifulSoup(htmltext, 'html.parser')\n        htmlSelector = 'yfs_l84_{0}'.format(ticker.lower())\n        for price in soup.find_all(id=htmlSelector):\n            print('{0} is {1}'.format(ticker, price.text))",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.32_stock_scraper",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.32_stock_scraper",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.32_stock_scraper",
    "peekOfCode": "def main():\n    all_tickers = get_stock_tickers()\n    get_stock_prices(all_tickers)\nif __name__ == '__main__':\n    main()",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.32_stock_scraper",
    "documentation": {}
  },
  {
    "label": "get_data",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.33_country_code",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.33_country_code",
    "peekOfCode": "def get_data(csv_file, json_file):\n    countryCodes = []\n    countryNames = []\n    continentNames = []\n    with open(csv_file, 'rt') as file_one:\n        reader = csv.reader(file_one)\n        with open(json_file) as file_two:\n            json_data = json.load(file_two)\n            all_countries = json_data[\"country\"]\n            for csv_row in reader:",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.33_country_code",
    "documentation": {}
  },
  {
    "label": "write_data",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.33_country_code",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.33_country_code",
    "peekOfCode": "def write_data(array_of_arrays):\n    with open('data.csv', 'wt') as csv_out:\n        writer = csv.writer(csv_out)\n        rows = zip(\n            array_of_arrays[0],\n            array_of_arrays[1],\n            array_of_arrays[2]\n        )\n        for row in rows:\n            writer.writerow(row)",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.33_country_code",
    "documentation": {}
  },
  {
    "label": "get_total_repos",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.34_git_all_repos",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.34_git_all_repos",
    "peekOfCode": "def get_total_repos(group, name):\n    repo_urls = []\n    page = 1\n    while True:\n        url = 'https://api.github.com/{0}/{1}/repos?per_page=100&page={2}'\n        r = requests.get(url.format(group, name, page))\n        if r.status_code == 200:\n            rdata = r.json()\n            for repo in rdata:\n                repo_urls.append(repo['clone_url'])",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.34_git_all_repos",
    "documentation": {}
  },
  {
    "label": "clone_repos",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.34_git_all_repos",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.34_git_all_repos",
    "peekOfCode": "def clone_repos(all_repos):\n    count = 1\n    print('Cloning...')\n    for repo in all_repos:\n        os.system('Git clone ' + repo)\n        print('Completed repo #{0} of {1}'.format(count, len(all_repos)))\n        count += 1\nif __name__ == '__main__':\n    if len(sys.argv) > 2:\n        total = get_total_repos(sys.argv[1], sys.argv[2])",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.34_git_all_repos",
    "documentation": {}
  },
  {
    "label": "help",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.find-in-file",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.find-in-file",
    "peekOfCode": "def help():\n    print(f'Syntax: {basename(argv[0])} (-i|-v|-h)')\n    print('\\t-i:\\tCase insensitive search.')\n    print('\\t-v:\\tVerbose.')\n    print('\\t-h:\\tHelp.')\ndef green(text):\n    return \"\\33[32m\" + text + \"\\33[0m\"\ndef main():\n    # configure extension\n    ext = input('Extensions: [c|cpp] ')",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.find-in-file",
    "documentation": {}
  },
  {
    "label": "green",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.find-in-file",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.find-in-file",
    "peekOfCode": "def green(text):\n    return \"\\33[32m\" + text + \"\\33[0m\"\ndef main():\n    # configure extension\n    ext = input('Extensions: [c|cpp] ')\n    if ext == '':\n        ext = 'c|cpp'\n    elif ext.startswith('[') and ext.endswith(']'):\n        ext.strip('[]')\n    elif ext.startswith('(') and ext.endswith(')'):",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.find-in-file",
    "documentation": {}
  },
  {
    "label": "main",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.find-in-file",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.find-in-file",
    "peekOfCode": "def main():\n    # configure extension\n    ext = input('Extensions: [c|cpp] ')\n    if ext == '':\n        ext = 'c|cpp'\n    elif ext.startswith('[') and ext.endswith(']'):\n        ext.strip('[]')\n    elif ext.startswith('(') and ext.endswith(')'):\n        ext.strip('()')\n    r = run(['find', '.', '-type', 'f', '-regex',",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.find-in-file",
    "documentation": {}
  },
  {
    "label": "VERBOSE",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.find-in-file",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.find-in-file",
    "peekOfCode": "VERBOSE = False\nINSENSITIVE = False\ndef help():\n    print(f'Syntax: {basename(argv[0])} (-i|-v|-h)')\n    print('\\t-i:\\tCase insensitive search.')\n    print('\\t-v:\\tVerbose.')\n    print('\\t-h:\\tHelp.')\ndef green(text):\n    return \"\\33[32m\" + text + \"\\33[0m\"\ndef main():",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.find-in-file",
    "documentation": {}
  },
  {
    "label": "INSENSITIVE",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.find-in-file",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.find-in-file",
    "peekOfCode": "INSENSITIVE = False\ndef help():\n    print(f'Syntax: {basename(argv[0])} (-i|-v|-h)')\n    print('\\t-i:\\tCase insensitive search.')\n    print('\\t-v:\\tVerbose.')\n    print('\\t-h:\\tHelp.')\ndef green(text):\n    return \"\\33[32m\" + text + \"\\33[0m\"\ndef main():\n    # configure extension",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.scripts.find-in-file",
    "documentation": {}
  },
  {
    "label": "page",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.BeautifulSoup4_sample",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.BeautifulSoup4_sample",
    "peekOfCode": "page = requests.get('https://www.census.gov/programs-surveys/popest.html')\nprint(page.status_code)\nsoup = BeautifulSoup(page.text, 'html.parser')\nlink_set = set()\nfor link in soup.find_all('a'):\n    web_links = link.get(\"href\")\n    print(web_links)\n    link_set.add(web_links)\ncsvfile = open('code_python.csv', 'w+', newline='')\nwriter = csv.writer(csvfile)",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.BeautifulSoup4_sample",
    "documentation": {}
  },
  {
    "label": "soup",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.BeautifulSoup4_sample",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.BeautifulSoup4_sample",
    "peekOfCode": "soup = BeautifulSoup(page.text, 'html.parser')\nlink_set = set()\nfor link in soup.find_all('a'):\n    web_links = link.get(\"href\")\n    print(web_links)\n    link_set.add(web_links)\ncsvfile = open('code_python.csv', 'w+', newline='')\nwriter = csv.writer(csvfile)\nwriter.writerow(['Links'])\nfor link in link_set:",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.BeautifulSoup4_sample",
    "documentation": {}
  },
  {
    "label": "link_set",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.BeautifulSoup4_sample",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.BeautifulSoup4_sample",
    "peekOfCode": "link_set = set()\nfor link in soup.find_all('a'):\n    web_links = link.get(\"href\")\n    print(web_links)\n    link_set.add(web_links)\ncsvfile = open('code_python.csv', 'w+', newline='')\nwriter = csv.writer(csvfile)\nwriter.writerow(['Links'])\nfor link in link_set:\n    writer.writerow([link])",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.BeautifulSoup4_sample",
    "documentation": {}
  },
  {
    "label": "csvfile",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.BeautifulSoup4_sample",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.BeautifulSoup4_sample",
    "peekOfCode": "csvfile = open('code_python.csv', 'w+', newline='')\nwriter = csv.writer(csvfile)\nwriter.writerow(['Links'])\nfor link in link_set:\n    writer.writerow([link])\ncsvfile.close()",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.BeautifulSoup4_sample",
    "documentation": {}
  },
  {
    "label": "writer",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.BeautifulSoup4_sample",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.BeautifulSoup4_sample",
    "peekOfCode": "writer = csv.writer(csvfile)\nwriter.writerow(['Links'])\nfor link in link_set:\n    writer.writerow([link])\ncsvfile.close()",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.BeautifulSoup4_sample",
    "documentation": {}
  },
  {
    "label": "text",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.list_regex_match",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.list_regex_match",
    "peekOfCode": "text = {\n    '\"version_name\"': '\"8.5.2\"',\n    '\"abi\"': '\"arm64-v8a\"',\n    '\"x_dpi\"': '515.1539916992188',\n    '\"environment\"': '{\"sdk_version\"',\n    '\"time_zone\"': '\"America\\\\/Wash\"',\n    '\"user\"': '{}}',\n    '\"density_default\"': '560}}',\n    '\"resolution_width\"': '1440',\n    '\"package_name\"': '\"com.okcupid.okcupid\"',",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.list_regex_match",
    "documentation": {}
  },
  {
    "label": "Keywords",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.list_regex_match",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.list_regex_match",
    "peekOfCode": "Keywords = [\n    '37abc5afce16xxx',\n    '867686022684243',\n    'ffffffff-f336-7a7a-0f06-65f40033c587',\n    'long',\n    'Lat',\n    'uuid',\n    'WIFI',\n    'advertiser',\n    'd44bcbfb-873454-4917-9e02-2066d6605d9f',",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.list_regex_match",
    "documentation": {}
  },
  {
    "label": "tokenizer",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.nltk_stemmer",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.nltk_stemmer",
    "peekOfCode": "tokenizer = RegexpTokenizer(r'\\w+')\n#en_stop = get_stop_words('en')\nen_stop = [\"a\", \"about\", \"above\", \"above\", \"across\", \"after\", \"afterwards\", \"again\", \"against\", \"all\", \"almost\", \"alone\", \"along\", \"already\", \"also\",\"although\",\"always\",\"am\",\"among\", \"amongst\", \"amoungst\", \"amount\",  \"an\", \"and\", \"another\", \"any\",\"anyhow\",\"anyone\",\"anything\",\"anyway\", \"anywhere\", \"are\", \"around\", \"as\",  \"at\", \"back\",\"be\",\"became\", \"because\",\"become\",\"becomes\", \"becoming\", \"been\", \"before\", \"beforehand\", \"behind\", \"being\", \"below\", \"beside\", \"besides\", \"between\", \"beyond\", \"bill\", \"both\", \"bottom\",\"but\", \"by\", \"call\", \"can\", \"cannot\", \"cant\", \"co\", \"con\", \"could\", \"couldnt\", \"cry\", \"de\", \"describe\", \"detail\", \"do\", \"done\", \"down\", \"due\", \"during\", \"each\", \"eg\", \"eight\", \"either\", \"eleven\",\"else\", \"elsewhere\", \"empty\", \"enough\", \"etc\", \"even\", \"ever\", \"every\", \"everyone\", \"everything\", \"everywhere\", \"except\", \"few\", \"fifteen\", \"fify\", \"fill\", \"find\", \"fire\", \"first\", \"five\", \"for\", \"former\", \"formerly\", \"forty\", \"found\", \"four\", \"from\", \"front\", \"full\", \"further\", \"get\", \"give\", \"go\", \"had\", \"has\", \"hasnt\", \"have\", \"he\", \"hence\", \"her\", \"here\", \"hereafter\", \"hereby\", \"herein\", \"hereupon\", \"hers\", \"herself\", \"him\", \"himself\", \"his\", \"how\", \"however\", \"hundred\", \"ie\", \"if\", \"in\", \"inc\", \"indeed\", \"interest\", \"into\", \"is\", \"it\", \"its\", \"itself\", \"keep\", \"last\", \"latter\", \"latterly\", \"least\", \"less\", \"ltd\", \"made\", \"many\", \"may\", \"me\", \"meanwhile\", \"might\", \"mill\", \"mine\", \"more\", \"moreover\", \"most\", \"mostly\", \"move\", \"much\", \"must\", \"my\", \"myself\", \"name\", \"namely\", \"neither\", \"never\", \"nevertheless\", \"next\", \"nine\", \"no\", \"nobody\", \"none\", \"noone\", \"nor\", \"not\", \"nothing\", \"now\", \"nowhere\", \"of\", \"off\", \"often\", \"on\", \"once\", \"one\", \"only\", \"onto\", \"or\", \"other\", \"others\", \"otherwise\", \"our\", \"ours\", \"ourselves\", \"out\", \"over\", \"own\",\"part\", \"per\", \"perhaps\", \"please\", \"put\", \"rather\", \"re\", \"same\", \"see\", \"seem\", \"seemed\", \"seeming\", \"seems\", \"serious\", \"several\", \"she\", \"should\", \"show\", \"side\", \"since\", \"sincere\", \"six\", \"sixty\", \"so\", \"some\", \"somehow\", \"someone\", \"something\", \"sometime\", \"sometimes\", \"somewhere\", \"still\", \"such\", \"system\", \"take\", \"ten\", \"than\", \"that\", \"the\", \"their\", \"them\", \"themselves\", \"then\", \"thence\", \"there\", \"thereafter\", \"thereby\", \"therefore\", \"therein\", \"thereupon\", \"these\", \"they\", \"thickv\", \"thin\", \"third\", \"this\", \"those\", \"though\", \"three\", \"through\", \"throughout\", \"thru\", \"thus\", \"to\", \"together\", \"too\", \"top\", \"toward\", \"towards\", \"twelve\", \"twenty\", \"two\", \"un\", \"under\", \"until\", \"up\", \"upon\", \"us\", \"very\", \"via\", \"was\", \"we\", \"well\", \"were\", \"what\", \"whatever\", \"when\", \"whence\", \"whenever\", \"where\", \"whereafter\", \"whereas\", \"whereby\", \"wherein\", \"whereupon\", \"wherever\", \"whether\", \"which\", \"while\", \"whither\", \"who\", \"whoever\", \"whole\", \"whom\", \"whose\", \"why\", \"will\", \"with\", \"within\", \"without\", \"would\", \"yet\", \"you\", \"your\", \"yours\", \"yourself\", \"yourselves\", \"the\"]\np_stemmer = PorterStemmer()\ndoc_a = \"\"\"It might seem crazy what I’m about to say\nSunshine she's here, you can take a break\nI'm a hot air balloon that could go to space\nWith the air, like I don't care baby by the way\nUh huh because I'm happy\nClap along if you feel like a room without a roof",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.nltk_stemmer",
    "documentation": {}
  },
  {
    "label": "#en_stop",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.nltk_stemmer",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.nltk_stemmer",
    "peekOfCode": "#en_stop = get_stop_words('en')\nen_stop = [\"a\", \"about\", \"above\", \"above\", \"across\", \"after\", \"afterwards\", \"again\", \"against\", \"all\", \"almost\", \"alone\", \"along\", \"already\", \"also\",\"although\",\"always\",\"am\",\"among\", \"amongst\", \"amoungst\", \"amount\",  \"an\", \"and\", \"another\", \"any\",\"anyhow\",\"anyone\",\"anything\",\"anyway\", \"anywhere\", \"are\", \"around\", \"as\",  \"at\", \"back\",\"be\",\"became\", \"because\",\"become\",\"becomes\", \"becoming\", \"been\", \"before\", \"beforehand\", \"behind\", \"being\", \"below\", \"beside\", \"besides\", \"between\", \"beyond\", \"bill\", \"both\", \"bottom\",\"but\", \"by\", \"call\", \"can\", \"cannot\", \"cant\", \"co\", \"con\", \"could\", \"couldnt\", \"cry\", \"de\", \"describe\", \"detail\", \"do\", \"done\", \"down\", \"due\", \"during\", \"each\", \"eg\", \"eight\", \"either\", \"eleven\",\"else\", \"elsewhere\", \"empty\", \"enough\", \"etc\", \"even\", \"ever\", \"every\", \"everyone\", \"everything\", \"everywhere\", \"except\", \"few\", \"fifteen\", \"fify\", \"fill\", \"find\", \"fire\", \"first\", \"five\", \"for\", \"former\", \"formerly\", \"forty\", \"found\", \"four\", \"from\", \"front\", \"full\", \"further\", \"get\", \"give\", \"go\", \"had\", \"has\", \"hasnt\", \"have\", \"he\", \"hence\", \"her\", \"here\", \"hereafter\", \"hereby\", \"herein\", \"hereupon\", \"hers\", \"herself\", \"him\", \"himself\", \"his\", \"how\", \"however\", \"hundred\", \"ie\", \"if\", \"in\", \"inc\", \"indeed\", \"interest\", \"into\", \"is\", \"it\", \"its\", \"itself\", \"keep\", \"last\", \"latter\", \"latterly\", \"least\", \"less\", \"ltd\", \"made\", \"many\", \"may\", \"me\", \"meanwhile\", \"might\", \"mill\", \"mine\", \"more\", \"moreover\", \"most\", \"mostly\", \"move\", \"much\", \"must\", \"my\", \"myself\", \"name\", \"namely\", \"neither\", \"never\", \"nevertheless\", \"next\", \"nine\", \"no\", \"nobody\", \"none\", \"noone\", \"nor\", \"not\", \"nothing\", \"now\", \"nowhere\", \"of\", \"off\", \"often\", \"on\", \"once\", \"one\", \"only\", \"onto\", \"or\", \"other\", \"others\", \"otherwise\", \"our\", \"ours\", \"ourselves\", \"out\", \"over\", \"own\",\"part\", \"per\", \"perhaps\", \"please\", \"put\", \"rather\", \"re\", \"same\", \"see\", \"seem\", \"seemed\", \"seeming\", \"seems\", \"serious\", \"several\", \"she\", \"should\", \"show\", \"side\", \"since\", \"sincere\", \"six\", \"sixty\", \"so\", \"some\", \"somehow\", \"someone\", \"something\", \"sometime\", \"sometimes\", \"somewhere\", \"still\", \"such\", \"system\", \"take\", \"ten\", \"than\", \"that\", \"the\", \"their\", \"them\", \"themselves\", \"then\", \"thence\", \"there\", \"thereafter\", \"thereby\", \"therefore\", \"therein\", \"thereupon\", \"these\", \"they\", \"thickv\", \"thin\", \"third\", \"this\", \"those\", \"though\", \"three\", \"through\", \"throughout\", \"thru\", \"thus\", \"to\", \"together\", \"too\", \"top\", \"toward\", \"towards\", \"twelve\", \"twenty\", \"two\", \"un\", \"under\", \"until\", \"up\", \"upon\", \"us\", \"very\", \"via\", \"was\", \"we\", \"well\", \"were\", \"what\", \"whatever\", \"when\", \"whence\", \"whenever\", \"where\", \"whereafter\", \"whereas\", \"whereby\", \"wherein\", \"whereupon\", \"wherever\", \"whether\", \"which\", \"while\", \"whither\", \"who\", \"whoever\", \"whole\", \"whom\", \"whose\", \"why\", \"will\", \"with\", \"within\", \"without\", \"would\", \"yet\", \"you\", \"your\", \"yours\", \"yourself\", \"yourselves\", \"the\"]\np_stemmer = PorterStemmer()\ndoc_a = \"\"\"It might seem crazy what I’m about to say\nSunshine she's here, you can take a break\nI'm a hot air balloon that could go to space\nWith the air, like I don't care baby by the way\nUh huh because I'm happy\nClap along if you feel like a room without a roof\nBecause I'm happy",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.nltk_stemmer",
    "documentation": {}
  },
  {
    "label": "en_stop",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.nltk_stemmer",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.nltk_stemmer",
    "peekOfCode": "en_stop = [\"a\", \"about\", \"above\", \"above\", \"across\", \"after\", \"afterwards\", \"again\", \"against\", \"all\", \"almost\", \"alone\", \"along\", \"already\", \"also\",\"although\",\"always\",\"am\",\"among\", \"amongst\", \"amoungst\", \"amount\",  \"an\", \"and\", \"another\", \"any\",\"anyhow\",\"anyone\",\"anything\",\"anyway\", \"anywhere\", \"are\", \"around\", \"as\",  \"at\", \"back\",\"be\",\"became\", \"because\",\"become\",\"becomes\", \"becoming\", \"been\", \"before\", \"beforehand\", \"behind\", \"being\", \"below\", \"beside\", \"besides\", \"between\", \"beyond\", \"bill\", \"both\", \"bottom\",\"but\", \"by\", \"call\", \"can\", \"cannot\", \"cant\", \"co\", \"con\", \"could\", \"couldnt\", \"cry\", \"de\", \"describe\", \"detail\", \"do\", \"done\", \"down\", \"due\", \"during\", \"each\", \"eg\", \"eight\", \"either\", \"eleven\",\"else\", \"elsewhere\", \"empty\", \"enough\", \"etc\", \"even\", \"ever\", \"every\", \"everyone\", \"everything\", \"everywhere\", \"except\", \"few\", \"fifteen\", \"fify\", \"fill\", \"find\", \"fire\", \"first\", \"five\", \"for\", \"former\", \"formerly\", \"forty\", \"found\", \"four\", \"from\", \"front\", \"full\", \"further\", \"get\", \"give\", \"go\", \"had\", \"has\", \"hasnt\", \"have\", \"he\", \"hence\", \"her\", \"here\", \"hereafter\", \"hereby\", \"herein\", \"hereupon\", \"hers\", \"herself\", \"him\", \"himself\", \"his\", \"how\", \"however\", \"hundred\", \"ie\", \"if\", \"in\", \"inc\", \"indeed\", \"interest\", \"into\", \"is\", \"it\", \"its\", \"itself\", \"keep\", \"last\", \"latter\", \"latterly\", \"least\", \"less\", \"ltd\", \"made\", \"many\", \"may\", \"me\", \"meanwhile\", \"might\", \"mill\", \"mine\", \"more\", \"moreover\", \"most\", \"mostly\", \"move\", \"much\", \"must\", \"my\", \"myself\", \"name\", \"namely\", \"neither\", \"never\", \"nevertheless\", \"next\", \"nine\", \"no\", \"nobody\", \"none\", \"noone\", \"nor\", \"not\", \"nothing\", \"now\", \"nowhere\", \"of\", \"off\", \"often\", \"on\", \"once\", \"one\", \"only\", \"onto\", \"or\", \"other\", \"others\", \"otherwise\", \"our\", \"ours\", \"ourselves\", \"out\", \"over\", \"own\",\"part\", \"per\", \"perhaps\", \"please\", \"put\", \"rather\", \"re\", \"same\", \"see\", \"seem\", \"seemed\", \"seeming\", \"seems\", \"serious\", \"several\", \"she\", \"should\", \"show\", \"side\", \"since\", \"sincere\", \"six\", \"sixty\", \"so\", \"some\", \"somehow\", \"someone\", \"something\", \"sometime\", \"sometimes\", \"somewhere\", \"still\", \"such\", \"system\", \"take\", \"ten\", \"than\", \"that\", \"the\", \"their\", \"them\", \"themselves\", \"then\", \"thence\", \"there\", \"thereafter\", \"thereby\", \"therefore\", \"therein\", \"thereupon\", \"these\", \"they\", \"thickv\", \"thin\", \"third\", \"this\", \"those\", \"though\", \"three\", \"through\", \"throughout\", \"thru\", \"thus\", \"to\", \"together\", \"too\", \"top\", \"toward\", \"towards\", \"twelve\", \"twenty\", \"two\", \"un\", \"under\", \"until\", \"up\", \"upon\", \"us\", \"very\", \"via\", \"was\", \"we\", \"well\", \"were\", \"what\", \"whatever\", \"when\", \"whence\", \"whenever\", \"where\", \"whereafter\", \"whereas\", \"whereby\", \"wherein\", \"whereupon\", \"wherever\", \"whether\", \"which\", \"while\", \"whither\", \"who\", \"whoever\", \"whole\", \"whom\", \"whose\", \"why\", \"will\", \"with\", \"within\", \"without\", \"would\", \"yet\", \"you\", \"your\", \"yours\", \"yourself\", \"yourselves\", \"the\"]\np_stemmer = PorterStemmer()\ndoc_a = \"\"\"It might seem crazy what I’m about to say\nSunshine she's here, you can take a break\nI'm a hot air balloon that could go to space\nWith the air, like I don't care baby by the way\nUh huh because I'm happy\nClap along if you feel like a room without a roof\nBecause I'm happy\nClap along if you feel like happiness is a truth",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.nltk_stemmer",
    "documentation": {}
  },
  {
    "label": "p_stemmer",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.nltk_stemmer",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.nltk_stemmer",
    "peekOfCode": "p_stemmer = PorterStemmer()\ndoc_a = \"\"\"It might seem crazy what I’m about to say\nSunshine she's here, you can take a break\nI'm a hot air balloon that could go to space\nWith the air, like I don't care baby by the way\nUh huh because I'm happy\nClap along if you feel like a room without a roof\nBecause I'm happy\nClap along if you feel like happiness is a truth\nBecause I'm happy",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.nltk_stemmer",
    "documentation": {}
  },
  {
    "label": "doc_a",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.nltk_stemmer",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.nltk_stemmer",
    "peekOfCode": "doc_a = \"\"\"It might seem crazy what I’m about to say\nSunshine she's here, you can take a break\nI'm a hot air balloon that could go to space\nWith the air, like I don't care baby by the way\nUh huh because I'm happy\nClap along if you feel like a room without a roof\nBecause I'm happy\nClap along if you feel like happiness is a truth\nBecause I'm happy\nClap along if you know what happiness is to you",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.nltk_stemmer",
    "documentation": {}
  },
  {
    "label": "doc_set",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.nltk_stemmer",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.nltk_stemmer",
    "peekOfCode": "doc_set = [doc_a]\ntexts = []\nfor i in doc_set:\n    raw = i.lower()\n    tokens = tokenizer.tokenize(raw)\n    stopped_tokens = [i for i in tokens if not i in en_stop]\n    stemmed_tokens = [p_stemmer.stem(i) for i in stopped_tokens]\n    texts.append(stemmed_tokens)\ndictionary = corpora.Dictionary(texts)\nprint(dictionary)",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.nltk_stemmer",
    "documentation": {}
  },
  {
    "label": "texts",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.nltk_stemmer",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.nltk_stemmer",
    "peekOfCode": "texts = []\nfor i in doc_set:\n    raw = i.lower()\n    tokens = tokenizer.tokenize(raw)\n    stopped_tokens = [i for i in tokens if not i in en_stop]\n    stemmed_tokens = [p_stemmer.stem(i) for i in stopped_tokens]\n    texts.append(stemmed_tokens)\ndictionary = corpora.Dictionary(texts)\nprint(dictionary)",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.nltk_stemmer",
    "documentation": {}
  },
  {
    "label": "dictionary",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.nltk_stemmer",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.nltk_stemmer",
    "peekOfCode": "dictionary = corpora.Dictionary(texts)\nprint(dictionary)",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.nltk_stemmer",
    "documentation": {}
  },
  {
    "label": "get_mse",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "peekOfCode": "def get_mse(pred, actual):\n    #Ignore nonzero terms.\n    pred = pred[actual.nonzero()].flatten()\n    actual = actual[actual.nonzero()].flatten()\n    return mean_squared_error(pred, actual)\nget_mse(user_pred, ratings_train) #~8.0 accuracy\nget_mse(user_pred, ratings_test) #~9.0 accuracy\n# use k-nearest neighbors instead\nfrom sklearn.neighbors import NearestNeighbors\n#lets compute the top five similar users by setting a variable, k.",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "documentation": {}
  },
  {
    "label": "r_cols",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "peekOfCode": "r_cols = ['user_id', 'movie_id', 'rating']\nratings = pd.read_csv('C:/Users/xxx/DataScience-Python3_/ml-100k/u.data', sep='\\t', names=r_cols, usecols=range(3), encoding=\"ISO-8859-1\")\nm_cols = ['movie_id', 'title', 'date']\nmovies = pd.read_csv('C:/Users/xxx/DataScience-Python3_/ml-100k/u.item', sep='|', names=m_cols, usecols=range(3), encoding=\"ISO-8859-1\")\nratings = pd.merge(movies, ratings)\nratings.head()\n# Data exploration\nplt.hist(ratings['rating'])\nratings.groupby(['rating'])['user_id'].count()\n# Most movies have 4 stars",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "documentation": {}
  },
  {
    "label": "ratings",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "peekOfCode": "ratings = pd.read_csv('C:/Users/xxx/DataScience-Python3_/ml-100k/u.data', sep='\\t', names=r_cols, usecols=range(3), encoding=\"ISO-8859-1\")\nm_cols = ['movie_id', 'title', 'date']\nmovies = pd.read_csv('C:/Users/xxx/DataScience-Python3_/ml-100k/u.item', sep='|', names=m_cols, usecols=range(3), encoding=\"ISO-8859-1\")\nratings = pd.merge(movies, ratings)\nratings.head()\n# Data exploration\nplt.hist(ratings['rating'])\nratings.groupby(['rating'])['user_id'].count()\n# Most movies have 4 stars\nplt.hist(ratings.groupby(['movie_id'])['movie_id'].count())",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "documentation": {}
  },
  {
    "label": "m_cols",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "peekOfCode": "m_cols = ['movie_id', 'title', 'date']\nmovies = pd.read_csv('C:/Users/xxx/DataScience-Python3_/ml-100k/u.item', sep='|', names=m_cols, usecols=range(3), encoding=\"ISO-8859-1\")\nratings = pd.merge(movies, ratings)\nratings.head()\n# Data exploration\nplt.hist(ratings['rating'])\nratings.groupby(['rating'])['user_id'].count()\n# Most movies have 4 stars\nplt.hist(ratings.groupby(['movie_id'])['movie_id'].count())\n# The distribution of movie views shows that the starting movie_ids have more ratings then later movies.",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "documentation": {}
  },
  {
    "label": "movies",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "peekOfCode": "movies = pd.read_csv('C:/Users/xxx/DataScience-Python3_/ml-100k/u.item', sep='|', names=m_cols, usecols=range(3), encoding=\"ISO-8859-1\")\nratings = pd.merge(movies, ratings)\nratings.head()\n# Data exploration\nplt.hist(ratings['rating'])\nratings.groupby(['rating'])['user_id'].count()\n# Most movies have 4 stars\nplt.hist(ratings.groupby(['movie_id'])['movie_id'].count())\n# The distribution of movie views shows that the starting movie_ids have more ratings then later movies.\nplt.hist(ratings.groupby(['user_id'])['user_id'].count())",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "documentation": {}
  },
  {
    "label": "ratings",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "peekOfCode": "ratings = pd.merge(movies, ratings)\nratings.head()\n# Data exploration\nplt.hist(ratings['rating'])\nratings.groupby(['rating'])['user_id'].count()\n# Most movies have 4 stars\nplt.hist(ratings.groupby(['movie_id'])['movie_id'].count())\n# The distribution of movie views shows that the starting movie_ids have more ratings then later movies.\nplt.hist(ratings.groupby(['user_id'])['user_id'].count())\n#we see that a small number of users has rated the most movies [following approx a power law model imo]",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "documentation": {}
  },
  {
    "label": "#ratings",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "peekOfCode": "#ratings = ratings[ratings['title'].str.contains('19[789]\\d', regex=True)]\n##ratings = ratings[datetime.strptime(ratings['date'], '%Y').date() >= datetime.strptime('1977', '%Y').date()]\n# Rating matrix representation\n# The pivot_table function on a DataFrame will construct a user / movie rating matrix.\n# Note that NaN indicates missing data - movies that specific users didn't rate.\nmovieRatings = ratings.pivot_table(index=['user_id'],columns=['title'],values='rating')\nmovieRatings.head()\n# this does the same but creates a float matrix instead of a dataframe\nn_users = ratings['user_id'].unique().shape[0]\nprint(str(n_users) + ' users')",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "documentation": {}
  },
  {
    "label": "##ratings",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "peekOfCode": "##ratings = ratings[datetime.strptime(ratings['date'], '%Y').date() >= datetime.strptime('1977', '%Y').date()]\n# Rating matrix representation\n# The pivot_table function on a DataFrame will construct a user / movie rating matrix.\n# Note that NaN indicates missing data - movies that specific users didn't rate.\nmovieRatings = ratings.pivot_table(index=['user_id'],columns=['title'],values='rating')\nmovieRatings.head()\n# this does the same but creates a float matrix instead of a dataframe\nn_users = ratings['user_id'].unique().shape[0]\nprint(str(n_users) + ' users')\nn_items = ratings['movie_id'].unique().shape[0]",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "documentation": {}
  },
  {
    "label": "movieRatings",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "peekOfCode": "movieRatings = ratings.pivot_table(index=['user_id'],columns=['title'],values='rating')\nmovieRatings.head()\n# this does the same but creates a float matrix instead of a dataframe\nn_users = ratings['user_id'].unique().shape[0]\nprint(str(n_users) + ' users')\nn_items = ratings['movie_id'].unique().shape[0]\nprint(str(n_items) + ' movies')\nmovieRatingsZ = np.zeros((n_users, n_items))\nfor row in ratings.itertuples():\n    movieRatingsZ[row[1]-1, row[4]-1] = row[5] #1:user_id, 4:movie_id, 5:rating",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "documentation": {}
  },
  {
    "label": "n_users",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "peekOfCode": "n_users = ratings['user_id'].unique().shape[0]\nprint(str(n_users) + ' users')\nn_items = ratings['movie_id'].unique().shape[0]\nprint(str(n_items) + ' movies')\nmovieRatingsZ = np.zeros((n_users, n_items))\nfor row in ratings.itertuples():\n    movieRatingsZ[row[1]-1, row[4]-1] = row[5] #1:user_id, 4:movie_id, 5:rating\nmovieRatings.shape\nmovieRatingsZ.shape # has more columns?\n# Let's determine the sparsity in the data",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "documentation": {}
  },
  {
    "label": "n_items",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "peekOfCode": "n_items = ratings['movie_id'].unique().shape[0]\nprint(str(n_items) + ' movies')\nmovieRatingsZ = np.zeros((n_users, n_items))\nfor row in ratings.itertuples():\n    movieRatingsZ[row[1]-1, row[4]-1] = row[5] #1:user_id, 4:movie_id, 5:rating\nmovieRatings.shape\nmovieRatingsZ.shape # has more columns?\n# Let's determine the sparsity in the data\nsparsity = float(len(movieRatingsZ.nonzero()[0])) # 0 is here not rated / missing.\nsparsity /= (movieRatingsZ.shape[0] * movieRatingsZ.shape[1])",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "documentation": {}
  },
  {
    "label": "movieRatingsZ",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "peekOfCode": "movieRatingsZ = np.zeros((n_users, n_items))\nfor row in ratings.itertuples():\n    movieRatingsZ[row[1]-1, row[4]-1] = row[5] #1:user_id, 4:movie_id, 5:rating\nmovieRatings.shape\nmovieRatingsZ.shape # has more columns?\n# Let's determine the sparsity in the data\nsparsity = float(len(movieRatingsZ.nonzero()[0])) # 0 is here not rated / missing.\nsparsity /= (movieRatingsZ.shape[0] * movieRatingsZ.shape[1])\nsparsity *= 100\nprint('Sparsity: {:4.2f}%'.format(sparsity))",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "documentation": {}
  },
  {
    "label": "sparsity",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "peekOfCode": "sparsity = float(len(movieRatingsZ.nonzero()[0])) # 0 is here not rated / missing.\nsparsity /= (movieRatingsZ.shape[0] * movieRatingsZ.shape[1])\nsparsity *= 100\nprint('Sparsity: {:4.2f}%'.format(sparsity))\n#should be 6.30% - mine is 5.71% - that must be the reult of the initial merge of the two datasets..\n# Item Based CF\n# Let's extract a Series of users who rated Star Wars:\nstarWarsRatings = movieRatings['Star Wars (1977)']\nstarWarsRatings.head()\n# Pandas' corrwith function makes it really easy to compute the pairwise correlation of Star Wars' vector of user rating with every other movie! After that, we'll drop any results that have no data, and construct a new DataFrame of movies and their correlation score (similarity) to Star Wars:",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "documentation": {}
  },
  {
    "label": "starWarsRatings",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "peekOfCode": "starWarsRatings = movieRatings['Star Wars (1977)']\nstarWarsRatings.head()\n# Pandas' corrwith function makes it really easy to compute the pairwise correlation of Star Wars' vector of user rating with every other movie! After that, we'll drop any results that have no data, and construct a new DataFrame of movies and their correlation score (similarity) to Star Wars:\nsimilarMovies = movieRatings.corrwith(starWarsRatings)\nsimilarMovies = similarMovies.dropna()\ndf = pd.DataFrame(similarMovies)\ndf.head(10)\n# (That warning is safe to ignore.) Let's sort the results by similarity score, and we should have the movies most similar to Star Wars! Except... we don't. These results make no sense at all! This is why it's important to know your data - clearly we missed something important.\nsimilarMovies.sort_values(ascending=False)\n# Our results are probably getting messed up by movies that have only been viewed by a handful of people who also happened to like Star Wars. So we need to get rid of movies that were only watched by a few people that are producing spurious results. Let's construct a new DataFrame that counts up how many ratings exist for each movie, and also the average rating while we're at it - that could also come in handy later.",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "documentation": {}
  },
  {
    "label": "similarMovies",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "peekOfCode": "similarMovies = movieRatings.corrwith(starWarsRatings)\nsimilarMovies = similarMovies.dropna()\ndf = pd.DataFrame(similarMovies)\ndf.head(10)\n# (That warning is safe to ignore.) Let's sort the results by similarity score, and we should have the movies most similar to Star Wars! Except... we don't. These results make no sense at all! This is why it's important to know your data - clearly we missed something important.\nsimilarMovies.sort_values(ascending=False)\n# Our results are probably getting messed up by movies that have only been viewed by a handful of people who also happened to like Star Wars. So we need to get rid of movies that were only watched by a few people that are producing spurious results. Let's construct a new DataFrame that counts up how many ratings exist for each movie, and also the average rating while we're at it - that could also come in handy later.\nmovieStats = ratings.groupby('title').agg({'rating': [np.size, np.mean]})\nmovieStats.head()\n# Let's get rid of any movies rated by fewer than 100 people, and check the top-rated ones that are left:    ",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "documentation": {}
  },
  {
    "label": "similarMovies",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "peekOfCode": "similarMovies = similarMovies.dropna()\ndf = pd.DataFrame(similarMovies)\ndf.head(10)\n# (That warning is safe to ignore.) Let's sort the results by similarity score, and we should have the movies most similar to Star Wars! Except... we don't. These results make no sense at all! This is why it's important to know your data - clearly we missed something important.\nsimilarMovies.sort_values(ascending=False)\n# Our results are probably getting messed up by movies that have only been viewed by a handful of people who also happened to like Star Wars. So we need to get rid of movies that were only watched by a few people that are producing spurious results. Let's construct a new DataFrame that counts up how many ratings exist for each movie, and also the average rating while we're at it - that could also come in handy later.\nmovieStats = ratings.groupby('title').agg({'rating': [np.size, np.mean]})\nmovieStats.head()\n# Let's get rid of any movies rated by fewer than 100 people, and check the top-rated ones that are left:    \npopularMovies = movieStats['rating']['size'] >= 150",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "documentation": {}
  },
  {
    "label": "df",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "peekOfCode": "df = pd.DataFrame(similarMovies)\ndf.head(10)\n# (That warning is safe to ignore.) Let's sort the results by similarity score, and we should have the movies most similar to Star Wars! Except... we don't. These results make no sense at all! This is why it's important to know your data - clearly we missed something important.\nsimilarMovies.sort_values(ascending=False)\n# Our results are probably getting messed up by movies that have only been viewed by a handful of people who also happened to like Star Wars. So we need to get rid of movies that were only watched by a few people that are producing spurious results. Let's construct a new DataFrame that counts up how many ratings exist for each movie, and also the average rating while we're at it - that could also come in handy later.\nmovieStats = ratings.groupby('title').agg({'rating': [np.size, np.mean]})\nmovieStats.head()\n# Let's get rid of any movies rated by fewer than 100 people, and check the top-rated ones that are left:    \npopularMovies = movieStats['rating']['size'] >= 150\nmovieStats[popularMovies].sort_values([('rating', 'mean')], ascending=False)[:15]",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "documentation": {}
  },
  {
    "label": "movieStats",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "peekOfCode": "movieStats = ratings.groupby('title').agg({'rating': [np.size, np.mean]})\nmovieStats.head()\n# Let's get rid of any movies rated by fewer than 100 people, and check the top-rated ones that are left:    \npopularMovies = movieStats['rating']['size'] >= 150\nmovieStats[popularMovies].sort_values([('rating', 'mean')], ascending=False)[:15]\n#re.search(r'\\((\\d{4})\\)', movieStats['rating']['title'])\n#newerpopularMovies = re.search(r'\\((\\d{4})\\)', movieStats['rating']['title'])[1]\n# 100 might still be too low, but these results look pretty good as far as \"well rated movies that people have heard of.\" Let's join this data with our original set of similar movies to Star Wars:\ndf = movieStats[popularMovies].join(pd.DataFrame(similarMovies, columns=['similarity']))\ndf.head()",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "documentation": {}
  },
  {
    "label": "popularMovies",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "peekOfCode": "popularMovies = movieStats['rating']['size'] >= 150\nmovieStats[popularMovies].sort_values([('rating', 'mean')], ascending=False)[:15]\n#re.search(r'\\((\\d{4})\\)', movieStats['rating']['title'])\n#newerpopularMovies = re.search(r'\\((\\d{4})\\)', movieStats['rating']['title'])[1]\n# 100 might still be too low, but these results look pretty good as far as \"well rated movies that people have heard of.\" Let's join this data with our original set of similar movies to Star Wars:\ndf = movieStats[popularMovies].join(pd.DataFrame(similarMovies, columns=['similarity']))\ndf.head()\n# And, sort these new results by similarity score. That's more like it!\ndf.sort_values(['similarity'], ascending=False)[1:26]\n# Ideally we'd also filter out the movie we started from - of course Star Wars is 100% similar to itself. But otherwise these results aren't bad.",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "documentation": {}
  },
  {
    "label": "#newerpopularMovies",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "peekOfCode": "#newerpopularMovies = re.search(r'\\((\\d{4})\\)', movieStats['rating']['title'])[1]\n# 100 might still be too low, but these results look pretty good as far as \"well rated movies that people have heard of.\" Let's join this data with our original set of similar movies to Star Wars:\ndf = movieStats[popularMovies].join(pd.DataFrame(similarMovies, columns=['similarity']))\ndf.head()\n# And, sort these new results by similarity score. That's more like it!\ndf.sort_values(['similarity'], ascending=False)[1:26]\n# Ideally we'd also filter out the movie we started from - of course Star Wars is 100% similar to itself. But otherwise these results aren't bad.\n# ## Activity\n# 100 was an arbitrarily chosen cutoff. Try different values - what effect does it have on the end results?\n# UBCF",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "documentation": {}
  },
  {
    "label": "df",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "peekOfCode": "df = movieStats[popularMovies].join(pd.DataFrame(similarMovies, columns=['similarity']))\ndf.head()\n# And, sort these new results by similarity score. That's more like it!\ndf.sort_values(['similarity'], ascending=False)[1:26]\n# Ideally we'd also filter out the movie we started from - of course Star Wars is 100% similar to itself. But otherwise these results aren't bad.\n# ## Activity\n# 100 was an arbitrarily chosen cutoff. Try different values - what effect does it have on the end results?\n# UBCF\n# this does the same but creates a float matrix instead of a dataframe\nn_users = ratings['user_id'].unique().shape[0]",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "documentation": {}
  },
  {
    "label": "n_users",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "peekOfCode": "n_users = ratings['user_id'].unique().shape[0]\nprint(str(n_users) + ' users')\nn_items = ratings['movie_id'].unique().shape[0]\nprint(str(n_items) + ' movies')\nmovieRatingsZ = np.zeros((n_users, n_items))\nfor row in ratings.itertuples():\n    movieRatingsZ[row[1]-1, row[4]-1] = row[5] #1:user_id, 4:movie_id, 5:rating\nmovieRatings.shape\nmovieRatingsZ.shape # has more columns?\nimport sklearn",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "documentation": {}
  },
  {
    "label": "n_items",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "peekOfCode": "n_items = ratings['movie_id'].unique().shape[0]\nprint(str(n_items) + ' movies')\nmovieRatingsZ = np.zeros((n_users, n_items))\nfor row in ratings.itertuples():\n    movieRatingsZ[row[1]-1, row[4]-1] = row[5] #1:user_id, 4:movie_id, 5:rating\nmovieRatings.shape\nmovieRatingsZ.shape # has more columns?\nimport sklearn\nfrom sklearn.cross_validation import train_test_split\nratings_train, ratings_test = train_test_split(movieRatingsZ,test_size=0.33, random_state=42)",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "documentation": {}
  },
  {
    "label": "movieRatingsZ",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "peekOfCode": "movieRatingsZ = np.zeros((n_users, n_items))\nfor row in ratings.itertuples():\n    movieRatingsZ[row[1]-1, row[4]-1] = row[5] #1:user_id, 4:movie_id, 5:rating\nmovieRatings.shape\nmovieRatingsZ.shape # has more columns?\nimport sklearn\nfrom sklearn.cross_validation import train_test_split\nratings_train, ratings_test = train_test_split(movieRatingsZ,test_size=0.33, random_state=42)\n#Let's see the dimensions of the train set and the test set:\nratings_train.shape",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "documentation": {}
  },
  {
    "label": "dist_out",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "peekOfCode": "dist_out = 1- sklearn.metrics.pairwise.cosine_distances(ratings_train)\n#the dimensions of the distance matris is a square matrix of size equal to the number of users\ndist_out.shape\n# Predict the unknown ratings for an active user\n#unknown values can be calculated for all the users by taking the dot product \n#between the distance matrix and the rating matrix and then normalizing the\n#data with the number of ratings \nuser_pred = dist_out.dot(ratings_train) / np.array([np.abs(dist_out).sum(axis=1)]).T\nfrom sklearn.metrics import mean_squared_error\ndef get_mse(pred, actual):",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "documentation": {}
  },
  {
    "label": "user_pred",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "peekOfCode": "user_pred = dist_out.dot(ratings_train) / np.array([np.abs(dist_out).sum(axis=1)]).T\nfrom sklearn.metrics import mean_squared_error\ndef get_mse(pred, actual):\n    #Ignore nonzero terms.\n    pred = pred[actual.nonzero()].flatten()\n    actual = actual[actual.nonzero()].flatten()\n    return mean_squared_error(pred, actual)\nget_mse(user_pred, ratings_train) #~8.0 accuracy\nget_mse(user_pred, ratings_test) #~9.0 accuracy\n# use k-nearest neighbors instead",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "documentation": {}
  },
  {
    "label": "neigh",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "peekOfCode": "neigh = NearestNeighbors(k,'cosine')\nneigh.fit(ratings_train)\ntop_k_distances,top_k_users = neigh.kneighbors(ratings_train,\nreturn_distance=True)\n#Let's see the top five users that are similar to user 1 in the training set:\ntop_k_users[0]\na_user_ratings = ratings[ratings['user_id'].isin([0])]\ntop_k_user_ratings = ratings[ratings['user_id'].isin([253, 134,  43, 602])]\ntop_k_user_stats = top_k_user_ratings.groupby('title').agg({'rating': [np.size, np.mean]})\ntop_k_user_stats.head()",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "documentation": {}
  },
  {
    "label": "top_k_distances,top_k_users",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "peekOfCode": "top_k_distances,top_k_users = neigh.kneighbors(ratings_train,\nreturn_distance=True)\n#Let's see the top five users that are similar to user 1 in the training set:\ntop_k_users[0]\na_user_ratings = ratings[ratings['user_id'].isin([0])]\ntop_k_user_ratings = ratings[ratings['user_id'].isin([253, 134,  43, 602])]\ntop_k_user_stats = top_k_user_ratings.groupby('title').agg({'rating': [np.size, np.mean]})\ntop_k_user_stats.head()\n'list(top_k_user_stats.columns.values) #get the column names\ndf1 = df.assign(top_k_user_stats=df[('rating', 'mean')] * top_k_user_stats[('rating', 'size')] / k)",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "documentation": {}
  },
  {
    "label": "a_user_ratings",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "peekOfCode": "a_user_ratings = ratings[ratings['user_id'].isin([0])]\ntop_k_user_ratings = ratings[ratings['user_id'].isin([253, 134,  43, 602])]\ntop_k_user_stats = top_k_user_ratings.groupby('title').agg({'rating': [np.size, np.mean]})\ntop_k_user_stats.head()\n'list(top_k_user_stats.columns.values) #get the column names\ndf1 = df.assign(top_k_user_stats=df[('rating', 'mean')] * top_k_user_stats[('rating', 'size')] / k)\n#list(df1.columns.values) #get the column names\ndf2 = df1.sort_values([('top_k_user_stats', ''), ('rating', 'mean'),('rating', 'size')], ascending=False)\ndf3 = df2[df2[('rating', 'mean')] >= 4.2]\ndf3.head()",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "documentation": {}
  },
  {
    "label": "top_k_user_ratings",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "peekOfCode": "top_k_user_ratings = ratings[ratings['user_id'].isin([253, 134,  43, 602])]\ntop_k_user_stats = top_k_user_ratings.groupby('title').agg({'rating': [np.size, np.mean]})\ntop_k_user_stats.head()\n'list(top_k_user_stats.columns.values) #get the column names\ndf1 = df.assign(top_k_user_stats=df[('rating', 'mean')] * top_k_user_stats[('rating', 'size')] / k)\n#list(df1.columns.values) #get the column names\ndf2 = df1.sort_values([('top_k_user_stats', ''), ('rating', 'mean'),('rating', 'size')], ascending=False)\ndf3 = df2[df2[('rating', 'mean')] >= 4.2]\ndf3.head()\n#Now choose only the top  users for each user and use their rating #information",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "documentation": {}
  },
  {
    "label": "top_k_user_stats",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "peekOfCode": "top_k_user_stats = top_k_user_ratings.groupby('title').agg({'rating': [np.size, np.mean]})\ntop_k_user_stats.head()\n'list(top_k_user_stats.columns.values) #get the column names\ndf1 = df.assign(top_k_user_stats=df[('rating', 'mean')] * top_k_user_stats[('rating', 'size')] / k)\n#list(df1.columns.values) #get the column names\ndf2 = df1.sort_values([('top_k_user_stats', ''), ('rating', 'mean'),('rating', 'size')], ascending=False)\ndf3 = df2[df2[('rating', 'mean')] >= 4.2]\ndf3.head()\n#Now choose only the top  users for each user and use their rating #information\n#while predicting the ratings using the weighted sum of all of the ratings of these top  similar users.",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "documentation": {}
  },
  {
    "label": "df1",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "peekOfCode": "df1 = df.assign(top_k_user_stats=df[('rating', 'mean')] * top_k_user_stats[('rating', 'size')] / k)\n#list(df1.columns.values) #get the column names\ndf2 = df1.sort_values([('top_k_user_stats', ''), ('rating', 'mean'),('rating', 'size')], ascending=False)\ndf3 = df2[df2[('rating', 'mean')] >= 4.2]\ndf3.head()\n#Now choose only the top  users for each user and use their rating #information\n#while predicting the ratings using the weighted sum of all of the ratings of these top  similar users.\nuser_pred_k = np.zeros(ratings_train.shape)\nfor i in range(ratings_train.shape[0]):\n    user_pred_k[i,:] = top_k_distances[i].T.dot(ratings_train[top_k_users][i]) / np.array([np.abs(top_k_distances[i].T).sum(axis=0)]).T",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "documentation": {}
  },
  {
    "label": "df2",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "peekOfCode": "df2 = df1.sort_values([('top_k_user_stats', ''), ('rating', 'mean'),('rating', 'size')], ascending=False)\ndf3 = df2[df2[('rating', 'mean')] >= 4.2]\ndf3.head()\n#Now choose only the top  users for each user and use their rating #information\n#while predicting the ratings using the weighted sum of all of the ratings of these top  similar users.\nuser_pred_k = np.zeros(ratings_train.shape)\nfor i in range(ratings_train.shape[0]):\n    user_pred_k[i,:] = top_k_distances[i].T.dot(ratings_train[top_k_users][i]) / np.array([np.abs(top_k_distances[i].T).sum(axis=0)]).T\nuser_pred_k\n# Now let's see if the model has improved or not.",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "documentation": {}
  },
  {
    "label": "df3",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "peekOfCode": "df3 = df2[df2[('rating', 'mean')] >= 4.2]\ndf3.head()\n#Now choose only the top  users for each user and use their rating #information\n#while predicting the ratings using the weighted sum of all of the ratings of these top  similar users.\nuser_pred_k = np.zeros(ratings_train.shape)\nfor i in range(ratings_train.shape[0]):\n    user_pred_k[i,:] = top_k_distances[i].T.dot(ratings_train[top_k_users][i]) / np.array([np.abs(top_k_distances[i].T).sum(axis=0)]).T\nuser_pred_k\n# Now let's see if the model has improved or not.\nget_mse(user_pred_k, ratings_train) #~8.0",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "documentation": {}
  },
  {
    "label": "user_pred_k",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "peekOfCode": "user_pred_k = np.zeros(ratings_train.shape)\nfor i in range(ratings_train.shape[0]):\n    user_pred_k[i,:] = top_k_distances[i].T.dot(ratings_train[top_k_users][i]) / np.array([np.abs(top_k_distances[i].T).sum(axis=0)]).T\nuser_pred_k\n# Now let's see if the model has improved or not.\nget_mse(user_pred_k, ratings_train) #~8.0\nget_mse(user_pred_k, ratings_test) #~12.0",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.OlxRecommenderSystem",
    "documentation": {}
  },
  {
    "label": "get_record_from_file",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "peekOfCode": "def get_record_from_file(file_path, keys_to_use):\n    with open(file_path) as artwork_file:\n        content = json.load(artwork_file)\n    record = []\n    for field in keys_to_use:\n        record.append(content[field])\n    return tuple(record)\n#Single file processing function demo\n#SAMPLE_JSON = os.path.join('.','artworks','a','000','a00001-1035.json')\n#single_record = get_record_from_file(SAMPLE_JSON, KEYS_TO_USE)",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "documentation": {}
  },
  {
    "label": "read_artworks_from_json",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "peekOfCode": "def read_artworks_from_json(keys_to_use):\n    ROOT_DIR =  os.path.join('.','artworks')\n    artworks = []\n    for root, _, files in os.walk(ROOT_DIR):\n        for f in files:\n            if f.endswith('json'):\n                record = get_record_from_file(os.path.join(root, f),\n                                             keys_to_use)\n                artworks.append(record)\n            break # only first file in each directory to safe time",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "documentation": {}
  },
  {
    "label": "fill_values",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "peekOfCode": "def fill_values(series):\n    values_counted = series.value_counts()\n    if values_counted.empty: #why is this a property instead of a method?\n        return series\n    most_frequent = values_counted.index[0]\n    filled_medium = series.fillna(most_frequent)\n    return filled_medium\ndef transform_df(source_df):\n    results = []\n    for name, group_df in source_df.groupby('artist'):",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "documentation": {}
  },
  {
    "label": "transform_df",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "peekOfCode": "def transform_df(source_df):\n    results = []\n    for name, group_df in source_df.groupby('artist'):\n        filled_df = group_df.copy()\n        filled_df.loc[:, 'medium'] = fill_values(group_df['medium'])\n        results.append(filled_df)\n    new_df = pd.concat(results)\n    return new_df\n#check results\nfilled_df = transform_df(small_df)",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "documentation": {}
  },
  {
    "label": "np_arr",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "peekOfCode": "np_arr = np.random.rand(3)\npd_series = pd.Series(np_arr,\n                      index=[\"First\",\"Second\",\"Third\"])\narr_2d = np.random.rand(3,2)\narr_2d[0,0]\narr_2d[2,1]\ndf = pd.DataFrame(arr_2d)\ndf.columns\ndf.columns = [\"First\", \"Second\"]\ndf[\"Second\"]",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "documentation": {}
  },
  {
    "label": "pd_series",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "peekOfCode": "pd_series = pd.Series(np_arr,\n                      index=[\"First\",\"Second\",\"Third\"])\narr_2d = np.random.rand(3,2)\narr_2d[0,0]\narr_2d[2,1]\ndf = pd.DataFrame(arr_2d)\ndf.columns\ndf.columns = [\"First\", \"Second\"]\ndf[\"Second\"]\nimport pandas as pd",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "documentation": {}
  },
  {
    "label": "arr_2d",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "peekOfCode": "arr_2d = np.random.rand(3,2)\narr_2d[0,0]\narr_2d[2,1]\ndf = pd.DataFrame(arr_2d)\ndf.columns\ndf.columns = [\"First\", \"Second\"]\ndf[\"Second\"]\nimport pandas as pd\nimport os\n# 1 Reading data",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "documentation": {}
  },
  {
    "label": "df",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "peekOfCode": "df = pd.DataFrame(arr_2d)\ndf.columns\ndf.columns = [\"First\", \"Second\"]\ndf[\"Second\"]\nimport pandas as pd\nimport os\n# 1 Reading data\n# 1.1 reading from a CSV\nCSV_PATH = os.path.join('.', 'artwork_data.csv')\n# specify existing id column as index colum",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "documentation": {}
  },
  {
    "label": "df.columns",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "peekOfCode": "df.columns = [\"First\", \"Second\"]\ndf[\"Second\"]\nimport pandas as pd\nimport os\n# 1 Reading data\n# 1.1 reading from a CSV\nCSV_PATH = os.path.join('.', 'artwork_data.csv')\n# specify existing id column as index colum\n#df = pd.read_csv(CSV_PATH, nrows=5, #only read first 5 rows\n#                 index_col='id')",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "documentation": {}
  },
  {
    "label": "CSV_PATH",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "peekOfCode": "CSV_PATH = os.path.join('.', 'artwork_data.csv')\n# specify existing id column as index colum\n#df = pd.read_csv(CSV_PATH, nrows=5, #only read first 5 rows\n#                 index_col='id')\nCOLS_TO_USE = ['id','artist','title',\n               'medium','year','acquisitionYear',\n               'height','width','units']\ndf = pd.read_csv(CSV_PATH,\n                 index_col='id',\n                 usecols=COLS_TO_USE)",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "documentation": {}
  },
  {
    "label": "#df",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "peekOfCode": "#df = pd.read_csv(CSV_PATH, nrows=5, #only read first 5 rows\n#                 index_col='id')\nCOLS_TO_USE = ['id','artist','title',\n               'medium','year','acquisitionYear',\n               'height','width','units']\ndf = pd.read_csv(CSV_PATH,\n                 index_col='id',\n                 usecols=COLS_TO_USE)\ndf.to_pickle('.\\\\artwork_data_cols.pickle')\n# 1.2 reading from an array record",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "documentation": {}
  },
  {
    "label": "COLS_TO_USE",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "peekOfCode": "COLS_TO_USE = ['id','artist','title',\n               'medium','year','acquisitionYear',\n               'height','width','units']\ndf = pd.read_csv(CSV_PATH,\n                 index_col='id',\n                 usecols=COLS_TO_USE)\ndf.to_pickle('.\\\\artwork_data_cols.pickle')\n# 1.2 reading from an array record\n# example usage of from_recors method\nrecords = [(\"Espresso\", \"$5\"),",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "documentation": {}
  },
  {
    "label": "df",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "peekOfCode": "df = pd.read_csv(CSV_PATH,\n                 index_col='id',\n                 usecols=COLS_TO_USE)\ndf.to_pickle('.\\\\artwork_data_cols.pickle')\n# 1.2 reading from an array record\n# example usage of from_recors method\nrecords = [(\"Espresso\", \"$5\"),\n           (\"Flat White\", \"$10\")]\n#pd.DataFrame.from_records(records)\npd.DataFrame.from_records(records,",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "documentation": {}
  },
  {
    "label": "records",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "peekOfCode": "records = [(\"Espresso\", \"$5\"),\n           (\"Flat White\", \"$10\")]\n#pd.DataFrame.from_records(records)\npd.DataFrame.from_records(records,\n                          columns=[\"Coffee\", \"Price\"])\n# 1.3 reading from a JSON\nimport json\nKEYS_TO_USE = ['id','all_artists','title',\n               'medium', 'dateText', 'acquisitionYear',\n               'height','width','units']",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "documentation": {}
  },
  {
    "label": "KEYS_TO_USE",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "peekOfCode": "KEYS_TO_USE = ['id','all_artists','title',\n               'medium', 'dateText', 'acquisitionYear',\n               'height','width','units']\n''' Process single json file and return a tuple containing specific fields '''\ndef get_record_from_file(file_path, keys_to_use):\n    with open(file_path) as artwork_file:\n        content = json.load(artwork_file)\n    record = []\n    for field in keys_to_use:\n        record.append(content[field])",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "documentation": {}
  },
  {
    "label": "#SAMPLE_JSON",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "peekOfCode": "#SAMPLE_JSON = os.path.join('.','artworks','a','000','a00001-1035.json')\n#single_record = get_record_from_file(SAMPLE_JSON, KEYS_TO_USE)\n# 1.3.1 reading from JSON traversing directories\ndef read_artworks_from_json(keys_to_use):\n    ROOT_DIR =  os.path.join('.','artworks')\n    artworks = []\n    for root, _, files in os.walk(ROOT_DIR):\n        for f in files:\n            if f.endswith('json'):\n                record = get_record_from_file(os.path.join(root, f),",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "documentation": {}
  },
  {
    "label": "#single_record",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "peekOfCode": "#single_record = get_record_from_file(SAMPLE_JSON, KEYS_TO_USE)\n# 1.3.1 reading from JSON traversing directories\ndef read_artworks_from_json(keys_to_use):\n    ROOT_DIR =  os.path.join('.','artworks')\n    artworks = []\n    for root, _, files in os.walk(ROOT_DIR):\n        for f in files:\n            if f.endswith('json'):\n                record = get_record_from_file(os.path.join(root, f),\n                                             keys_to_use)",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "documentation": {}
  },
  {
    "label": "df2",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "peekOfCode": "df2 = read_artworks_from_json(KEYS_TO_USE)\n# 2 Analyze sample data\n# 2.1 Column selection\ndf['artist']\n#df.artist # works but it is discuraged to us this\ndf[['artist', 'title']]\n# 2.1.1 Sample: Number of unique artists in tate data\ndf= pd.read_pickle('.\\\\artwork_data_cols.pickle')\n#\nartists = df['artist']",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "documentation": {}
  },
  {
    "label": "artists",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "peekOfCode": "artists = df['artist']\npd.unique(artists)\nlen(pd.unique(artists))\n# 2.2 Filtering : Artworks by specific artist\nboolean_series = df['artist'] == 'Bacon, Francis'\nboolean_series.value_counts()\n#or couting and then filtering\nartist_counts = df['artist'].value_counts()\nartist_counts['Bacon, Francis']\n# 2.3 Indexing done right ",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "documentation": {}
  },
  {
    "label": "boolean_series",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "peekOfCode": "boolean_series = df['artist'] == 'Bacon, Francis'\nboolean_series.value_counts()\n#or couting and then filtering\nartist_counts = df['artist'].value_counts()\nartist_counts['Bacon, Francis']\n# 2.3 Indexing done right \n# using loc and iloc: Lables vs positions\n#df.loc[Row_index, Column_indexer]\ndf.loc[df['artist']=='Bacon, Francis', : ] # : represents wildcard column\ndf.iloc[100:300, [0,1,4]]",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "documentation": {}
  },
  {
    "label": "artist_counts",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "peekOfCode": "artist_counts = df['artist'].value_counts()\nartist_counts['Bacon, Francis']\n# 2.3 Indexing done right \n# using loc and iloc: Lables vs positions\n#df.loc[Row_index, Column_indexer]\ndf.loc[df['artist']=='Bacon, Francis', : ] # : represents wildcard column\ndf.iloc[100:300, [0,1,4]]\n# 2.3 Sample: Find biggest artwork by area (h*w)\n# Quic data inspection reveals common problems like missing data\ndf['width'].sort_values().head()",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "documentation": {}
  },
  {
    "label": "area",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "peekOfCode": "area = df['height'] * df['width']\n# assign new column to DataFrame\ndf = df.assign(area=area)\n# find biggest area\ndf['area'].max()\ndf['area'].idxmax() # 98367\ndf.loc[df['area'].idxmax(), : ] # Table and Four Chairs\n# Operations on Groups\ndf.groupby('artist')\n# Aggregation, Transformation, Filter (Dropping)",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "documentation": {}
  },
  {
    "label": "df",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "peekOfCode": "df = df.assign(area=area)\n# find biggest area\ndf['area'].max()\ndf['area'].idxmax() # 98367\ndf.loc[df['area'].idxmax(), : ] # Table and Four Chairs\n# Operations on Groups\ndf.groupby('artist')\n# Aggregation, Transformation, Filter (Dropping)\nsmall_df = df.iloc[49980:50019, : ].copy()\ngrouped = small_df.groupby('artist')",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "documentation": {}
  },
  {
    "label": "small_df",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "peekOfCode": "small_df = df.iloc[49980:50019, : ].copy()\ngrouped = small_df.groupby('artist')\nfor name, group_df in grouped:\n    print(name)\n    print(group_df)\n    break\n# Aggregate Example: Min Year by each artist\nfor name, group_df in grouped:\n    min_year = group_df['acquisitionYear'].min()\n    print(\"{} {}\".format(name, min_year))",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "documentation": {}
  },
  {
    "label": "grouped",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "peekOfCode": "grouped = small_df.groupby('artist')\nfor name, group_df in grouped:\n    print(name)\n    print(group_df)\n    break\n# Aggregate Example: Min Year by each artist\nfor name, group_df in grouped:\n    min_year = group_df['acquisitionYear'].min()\n    print(\"{} {}\".format(name, min_year))\n# Transform: Input missing values",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "documentation": {}
  },
  {
    "label": "filled_df",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "peekOfCode": "filled_df = transform_df(small_df)\n# 3 Better and more concise way using built-in methods\n# 3.1 transform\ngrouped_medium = df.groupby('artist')['medium']\ndf.loc[:, 'medium'] = grouped_medium.transform(fill_values)\n# 3.2 Aggregate\ngrouped_acq_year = df.groupby('artist')['acquisitionYear']\nmin_acq_years = grouped_acq_year.agg(np.min)\nmin_acq_years = grouped_acq_year.min()\n# 3.3 Filtering",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "documentation": {}
  },
  {
    "label": "grouped_medium",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "peekOfCode": "grouped_medium = df.groupby('artist')['medium']\ndf.loc[:, 'medium'] = grouped_medium.transform(fill_values)\n# 3.2 Aggregate\ngrouped_acq_year = df.groupby('artist')['acquisitionYear']\nmin_acq_years = grouped_acq_year.agg(np.min)\nmin_acq_years = grouped_acq_year.min()\n# 3.3 Filtering\ngrouped_titles = df.groupby('title')\ntitle_counts = grouped_titles.size().sort_values(ascending=False)\ncondition = lambda x: len(x.index) > 1",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "documentation": {}
  },
  {
    "label": "grouped_acq_year",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "peekOfCode": "grouped_acq_year = df.groupby('artist')['acquisitionYear']\nmin_acq_years = grouped_acq_year.agg(np.min)\nmin_acq_years = grouped_acq_year.min()\n# 3.3 Filtering\ngrouped_titles = df.groupby('title')\ntitle_counts = grouped_titles.size().sort_values(ascending=False)\ncondition = lambda x: len(x.index) > 1\ndup_titles_df = grouped_titles.filter(condition)\ndup_titles_df.sort_values('title', inplace=True)\n# Final Demo",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "documentation": {}
  },
  {
    "label": "min_acq_years",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "peekOfCode": "min_acq_years = grouped_acq_year.agg(np.min)\nmin_acq_years = grouped_acq_year.min()\n# 3.3 Filtering\ngrouped_titles = df.groupby('title')\ntitle_counts = grouped_titles.size().sort_values(ascending=False)\ncondition = lambda x: len(x.index) > 1\ndup_titles_df = grouped_titles.filter(condition)\ndup_titles_df.sort_values('title', inplace=True)\n# Final Demo\n# 4 Outputting Data",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "documentation": {}
  },
  {
    "label": "min_acq_years",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "peekOfCode": "min_acq_years = grouped_acq_year.min()\n# 3.3 Filtering\ngrouped_titles = df.groupby('title')\ntitle_counts = grouped_titles.size().sort_values(ascending=False)\ncondition = lambda x: len(x.index) > 1\ndup_titles_df = grouped_titles.filter(condition)\ndup_titles_df.sort_values('title', inplace=True)\n# Final Demo\n# 4 Outputting Data\n# 4.1 Outputting Data as Excell XLS",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "documentation": {}
  },
  {
    "label": "grouped_titles",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "peekOfCode": "grouped_titles = df.groupby('title')\ntitle_counts = grouped_titles.size().sort_values(ascending=False)\ncondition = lambda x: len(x.index) > 1\ndup_titles_df = grouped_titles.filter(condition)\ndup_titles_df.sort_values('title', inplace=True)\n# Final Demo\n# 4 Outputting Data\n# 4.1 Outputting Data as Excell XLS\nsmall_df.to_excel('basic.xlsx')\nsmall_df.to_excel('no_index.xlsx', index=False)",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "documentation": {}
  },
  {
    "label": "title_counts",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "peekOfCode": "title_counts = grouped_titles.size().sort_values(ascending=False)\ncondition = lambda x: len(x.index) > 1\ndup_titles_df = grouped_titles.filter(condition)\ndup_titles_df.sort_values('title', inplace=True)\n# Final Demo\n# 4 Outputting Data\n# 4.1 Outputting Data as Excell XLS\nsmall_df.to_excel('basic.xlsx')\nsmall_df.to_excel('no_index.xlsx', index=False)\nsmall_df.to_excel('columns.xlsx', columns=['artist', 'title', 'year'])",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "documentation": {}
  },
  {
    "label": "condition",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "peekOfCode": "condition = lambda x: len(x.index) > 1\ndup_titles_df = grouped_titles.filter(condition)\ndup_titles_df.sort_values('title', inplace=True)\n# Final Demo\n# 4 Outputting Data\n# 4.1 Outputting Data as Excell XLS\nsmall_df.to_excel('basic.xlsx')\nsmall_df.to_excel('no_index.xlsx', index=False)\nsmall_df.to_excel('columns.xlsx', columns=['artist', 'title', 'year'])\n# Multiple worksheets",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "documentation": {}
  },
  {
    "label": "dup_titles_df",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "peekOfCode": "dup_titles_df = grouped_titles.filter(condition)\ndup_titles_df.sort_values('title', inplace=True)\n# Final Demo\n# 4 Outputting Data\n# 4.1 Outputting Data as Excell XLS\nsmall_df.to_excel('basic.xlsx')\nsmall_df.to_excel('no_index.xlsx', index=False)\nsmall_df.to_excel('columns.xlsx', columns=['artist', 'title', 'year'])\n# Multiple worksheets\nwriter = pd.ExcelWriter('multi_sheets.xlsx', engine='xlsxwriter')",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "documentation": {}
  },
  {
    "label": "writer",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "peekOfCode": "writer = pd.ExcelWriter('multi_sheets.xlsx', engine='xlsxwriter')\nsmall_df.to_excel(writer, sheet_name=\"Preview\", index=False)\ndf.to_excel(writer, sheet_name=\"Complete\", index=False)\nwriter.save()\n#Conditional Formatting\nartist_counts = df['artist'].value_counts()\nartist_counts.head()\nwriter = pd.ExcelWriter('colors.xlsx', engine='xlsxwriter')\nartist_counts.to_excel(writer, sheet_name=\"Artist Counts\")\nsheet = writer.sheets['Artist Counts']",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "documentation": {}
  },
  {
    "label": "artist_counts",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "peekOfCode": "artist_counts = df['artist'].value_counts()\nartist_counts.head()\nwriter = pd.ExcelWriter('colors.xlsx', engine='xlsxwriter')\nartist_counts.to_excel(writer, sheet_name=\"Artist Counts\")\nsheet = writer.sheets['Artist Counts']\ncells_range = 'B2:B{}'.format(len(artist_counts.index))\nsheet.conditional_format(cells_range, {'type': '2_color_scale',\n                                       'min_value': '10',\n                                       'min_type': 'percentile',\n                                       'max_value': '99',",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "documentation": {}
  },
  {
    "label": "writer",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "peekOfCode": "writer = pd.ExcelWriter('colors.xlsx', engine='xlsxwriter')\nartist_counts.to_excel(writer, sheet_name=\"Artist Counts\")\nsheet = writer.sheets['Artist Counts']\ncells_range = 'B2:B{}'.format(len(artist_counts.index))\nsheet.conditional_format(cells_range, {'type': '2_color_scale',\n                                       'min_value': '10',\n                                       'min_type': 'percentile',\n                                       'max_value': '99',\n                                       'max_type': 'percentile'})\nwriter.save()",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "documentation": {}
  },
  {
    "label": "sheet",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "peekOfCode": "sheet = writer.sheets['Artist Counts']\ncells_range = 'B2:B{}'.format(len(artist_counts.index))\nsheet.conditional_format(cells_range, {'type': '2_color_scale',\n                                       'min_value': '10',\n                                       'min_type': 'percentile',\n                                       'max_value': '99',\n                                       'max_type': 'percentile'})\nwriter.save()\n# 4.2 Outputting Data to a relational DB\nimport sqlite3",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "documentation": {}
  },
  {
    "label": "cells_range",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "peekOfCode": "cells_range = 'B2:B{}'.format(len(artist_counts.index))\nsheet.conditional_format(cells_range, {'type': '2_color_scale',\n                                       'min_value': '10',\n                                       'min_type': 'percentile',\n                                       'max_value': '99',\n                                       'max_type': 'percentile'})\nwriter.save()\n# 4.2 Outputting Data to a relational DB\nimport sqlite3\nwith sqlite3.connect('my_database.db') as conn:",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "documentation": {}
  },
  {
    "label": "acq_years",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "peekOfCode": "acq_years = df.groupby('acquisitionYear').size()\nacq_years.plot()\n# Formatting our plot using Matplotlib\nimport matplotlib.pyplot as plt\nfrom matplotlib import rcParams\nrcParams.update({'figure.autolayout': True,\n                 'axes.titlepad': 20})\ntitle_font = {'family': 'source sans pro',\n              'color': 'darkblue',\n              'weight': 'normal',",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "documentation": {}
  },
  {
    "label": "title_font",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "peekOfCode": "title_font = {'family': 'source sans pro',\n              'color': 'darkblue',\n              'weight': 'normal',\n              'size': 20}\nlabels_font = {'family': 'consolas',\n              'color': 'darkred',\n              'weight': 'normal',\n              'size': 16}\nf = plt.figure()\nsubplot = f.add_subplot(1,1,1)",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "documentation": {}
  },
  {
    "label": "labels_font",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "peekOfCode": "labels_font = {'family': 'consolas',\n              'color': 'darkred',\n              'weight': 'normal',\n              'size': 16}\nf = plt.figure()\nsubplot = f.add_subplot(1,1,1)\nacq_years.plot(ax=subplot, rot=90, logy=True, grid=True)\nsubplot.set_xlabel('Acquistion Year', fontdict=labels_font, labelpad=10)\nsubplot.set_ylabel('Artworks Aquired', fontdict=labels_font)\nsubplot.set_title('Tate Gallery Aquisitions', fontdict=title_font)",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "documentation": {}
  },
  {
    "label": "f",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "peekOfCode": "f = plt.figure()\nsubplot = f.add_subplot(1,1,1)\nacq_years.plot(ax=subplot, rot=90, logy=True, grid=True)\nsubplot.set_xlabel('Acquistion Year', fontdict=labels_font, labelpad=10)\nsubplot.set_ylabel('Artworks Aquired', fontdict=labels_font)\nsubplot.set_title('Tate Gallery Aquisitions', fontdict=title_font)\nsubplot.locator_params(nbins=40,axis='x')\nf.show()\nf.savefig('plot.png')\nf.savefig('plotylog.svg', format='svg')",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "documentation": {}
  },
  {
    "label": "subplot",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "peekOfCode": "subplot = f.add_subplot(1,1,1)\nacq_years.plot(ax=subplot, rot=90, logy=True, grid=True)\nsubplot.set_xlabel('Acquistion Year', fontdict=labels_font, labelpad=10)\nsubplot.set_ylabel('Artworks Aquired', fontdict=labels_font)\nsubplot.set_title('Tate Gallery Aquisitions', fontdict=title_font)\nsubplot.locator_params(nbins=40,axis='x')\nf.show()\nf.savefig('plot.png')\nf.savefig('plotylog.svg', format='svg')",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.PandasFundamentals",
    "documentation": {}
  },
  {
    "label": "single_value",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.pyparsing_sample",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.pyparsing_sample",
    "peekOfCode": "single_value = pp.QuotedString(quoteChar=\"'\", endQuoteChar=\"'\")\nparser = pp.nestedExpr(opener=\"[\", closer=\"]\",\n                       content=single_value,\n                       ignoreExpr=None)\nexample = \"['title|You are looking at article' ['@articlenumber'] ['@articlename']]\"\nprint(parser.parseString(example, parseAll=True))\ntext = '{They {mean to {win}} Wimbledon}'\nprint(pp.nestedExpr(opener='{', closer='}').parseString(text)",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.pyparsing_sample",
    "documentation": {}
  },
  {
    "label": "parser",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.pyparsing_sample",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.pyparsing_sample",
    "peekOfCode": "parser = pp.nestedExpr(opener=\"[\", closer=\"]\",\n                       content=single_value,\n                       ignoreExpr=None)\nexample = \"['title|You are looking at article' ['@articlenumber'] ['@articlename']]\"\nprint(parser.parseString(example, parseAll=True))\ntext = '{They {mean to {win}} Wimbledon}'\nprint(pp.nestedExpr(opener='{', closer='}').parseString(text)",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.pyparsing_sample",
    "documentation": {}
  },
  {
    "label": "example",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.pyparsing_sample",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.pyparsing_sample",
    "peekOfCode": "example = \"['title|You are looking at article' ['@articlenumber'] ['@articlename']]\"\nprint(parser.parseString(example, parseAll=True))\ntext = '{They {mean to {win}} Wimbledon}'\nprint(pp.nestedExpr(opener='{', closer='}').parseString(text)",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.pyparsing_sample",
    "documentation": {}
  },
  {
    "label": "text",
    "kind": 5,
    "importPath": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.pyparsing_sample",
    "description": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.pyparsing_sample",
    "peekOfCode": "text = '{They {mean to {win}} Wimbledon}'\nprint(pp.nestedExpr(opener='{', closer='}').parseString(text)",
    "detail": "CodeSignal-Solutions.node_modules.@bgoonz11.repoutils.python-scripts.pyparsing_sample",
    "documentation": {}
  },
  {
    "label": "add",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.01_-_add",
    "description": "CodeSignal-Solutions.01_-_add",
    "peekOfCode": "def add(param1, param2):\n    return param1 + param2",
    "detail": "CodeSignal-Solutions.01_-_add",
    "documentation": {}
  },
  {
    "label": "centuryFromYear",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.02_-_centuryFromYear",
    "description": "CodeSignal-Solutions.02_-_centuryFromYear",
    "peekOfCode": "def centuryFromYear(year):\n    return ((year - 1) // 100) + 1",
    "detail": "CodeSignal-Solutions.02_-_centuryFromYear",
    "documentation": {}
  },
  {
    "label": "checkPalindrome",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.03_-_checkPalindrome",
    "description": "CodeSignal-Solutions.03_-_checkPalindrome",
    "peekOfCode": "def checkPalindrome(inputString):\n    return inputString == inputString[::-1]",
    "detail": "CodeSignal-Solutions.03_-_checkPalindrome",
    "documentation": {}
  },
  {
    "label": "adjacentElementsProduct",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.04_-_adjacentElementsProduct",
    "description": "CodeSignal-Solutions.04_-_adjacentElementsProduct",
    "peekOfCode": "def adjacentElementsProduct(inputArray):\n    max = inputArray[0] * inputArray[1]\n    for i in range(len(inputArray) - 1):\n        if inputArray[i] * inputArray[i + 1] > max:\n            max = inputArray[i] * inputArray[i + 1]\n    return max",
    "detail": "CodeSignal-Solutions.04_-_adjacentElementsProduct",
    "documentation": {}
  },
  {
    "label": "shapeArea",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.05_-_shapeArea",
    "description": "CodeSignal-Solutions.05_-_shapeArea",
    "peekOfCode": "def shapeArea(n):\n    sum = n * 2 - 1\n    for i in range(1, (n * 2) - 1, 2):\n        sum += i * 2\n    return sum",
    "detail": "CodeSignal-Solutions.05_-_shapeArea",
    "documentation": {}
  },
  {
    "label": "makeArrayConsecutive2",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.06_-_makeArrayConsecutive2",
    "description": "CodeSignal-Solutions.06_-_makeArrayConsecutive2",
    "peekOfCode": "def makeArrayConsecutive2(statues):\n    return max(statues) - min(statues) - len(statues) + 1",
    "detail": "CodeSignal-Solutions.06_-_makeArrayConsecutive2",
    "documentation": {}
  },
  {
    "label": "almostIncreasingSequence",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.07_-_almostIncreasingSequence",
    "description": "CodeSignal-Solutions.07_-_almostIncreasingSequence",
    "peekOfCode": "def almostIncreasingSequence(sequence):\n    i = 0\n    while i < len(sequence) - 1:\n        if not sequence[i] < sequence[i + 1]:\n            if increasingSequence(\n                sequence[:i] + sequence[i + 1:]\n            ) or increasingSequence(sequence[: i + 1] + sequence[i + 2:]):\n                return True\n            else:\n                return False",
    "detail": "CodeSignal-Solutions.07_-_almostIncreasingSequence",
    "documentation": {}
  },
  {
    "label": "increasingSequence",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.07_-_almostIncreasingSequence",
    "description": "CodeSignal-Solutions.07_-_almostIncreasingSequence",
    "peekOfCode": "def increasingSequence(sequence):\n    for i in range(len(sequence) - 1):\n        if not sequence[i] < sequence[i + 1]:\n            return False\n    return True",
    "detail": "CodeSignal-Solutions.07_-_almostIncreasingSequence",
    "documentation": {}
  },
  {
    "label": "matrixElementsSum",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.08_-_matrixElementsSum",
    "description": "CodeSignal-Solutions.08_-_matrixElementsSum",
    "peekOfCode": "def matrixElementsSum(matrix):\n    if len(matrix) > 1:\n        for row in range(1, len(matrix)):\n            for room in range(len(matrix[row])):\n                if matrix[row - 1][room] == 0:\n                    matrix[row][room] = 0\n    sum = 0\n    for row in matrix:\n        for room in row:\n            sum += room",
    "detail": "CodeSignal-Solutions.08_-_matrixElementsSum",
    "documentation": {}
  },
  {
    "label": "allLongestStrings",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.09_-_allLongestStrings",
    "description": "CodeSignal-Solutions.09_-_allLongestStrings",
    "peekOfCode": "def allLongestStrings(inputArray):\n    length = max([len(word) for word in inputArray])\n    result = [word for word in inputArray if len(word) == length]\n    return result",
    "detail": "CodeSignal-Solutions.09_-_allLongestStrings",
    "documentation": {}
  },
  {
    "label": "commonCharacterCount",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.10_-_commonCharacterCount",
    "description": "CodeSignal-Solutions.10_-_commonCharacterCount",
    "peekOfCode": "def commonCharacterCount(s1, s2):\n    count = 0\n    word2 = list(s2)\n    for letter in s1:\n        if letter in word2:\n            word2.remove(letter)\n            count += 1\n    return count",
    "detail": "CodeSignal-Solutions.10_-_commonCharacterCount",
    "documentation": {}
  },
  {
    "label": "isLucky",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.11_-_isLucky",
    "description": "CodeSignal-Solutions.11_-_isLucky",
    "peekOfCode": "def isLucky(n):\n    string = str(n)\n    top = [int(x) for x in string[: len(string) // 2]]\n    bottom = [int(x) for x in string[len(string) // 2:]]\n    return sum(top) == sum(bottom)",
    "detail": "CodeSignal-Solutions.11_-_isLucky",
    "documentation": {}
  },
  {
    "label": "sortByHeight",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.12_-_sortByHeight",
    "description": "CodeSignal-Solutions.12_-_sortByHeight",
    "peekOfCode": "def sortByHeight(a):\n    treePositions = [x for x in range(len(a)) if a[x] == -1]\n    people = sorted([x for x in a if x != -1])\n    for tree in treePositions:\n        people.insert(tree, -1)\n    return people",
    "detail": "CodeSignal-Solutions.12_-_sortByHeight",
    "documentation": {}
  },
  {
    "label": "reverseParentheses",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.13_-_reverseParentheses",
    "description": "CodeSignal-Solutions.13_-_reverseParentheses",
    "peekOfCode": "def reverseParentheses(s):\n    while \"(\" in s:\n        match = re.search(\"\\([^()]*\\)\", s)\n        match_string = match.group(0)[1: len(match.group(0)) - 1]\n        reversed_match_string = match_string[::-1]\n        s = s[: match.start()] + reversed_match_string + s[match.end():]\n    return s",
    "detail": "CodeSignal-Solutions.13_-_reverseParentheses",
    "documentation": {}
  },
  {
    "label": "alternatingSums",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.14_-_alternatingSums",
    "description": "CodeSignal-Solutions.14_-_alternatingSums",
    "peekOfCode": "def alternatingSums(a):\n    team1 = sum(a[0::2])\n    team2 = sum(a[1::2])\n    return [team1, team2]",
    "detail": "CodeSignal-Solutions.14_-_alternatingSums",
    "documentation": {}
  },
  {
    "label": "addBorder",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.15_-_addBorder",
    "description": "CodeSignal-Solutions.15_-_addBorder",
    "peekOfCode": "def addBorder(picture):\n    picture = [\"*\" + string + \"*\" for string in picture]\n    picture = [(\"*\" * len(picture[0]))] + picture + [(\"*\" * len(picture[0]))]\n    return picture",
    "detail": "CodeSignal-Solutions.15_-_addBorder",
    "documentation": {}
  },
  {
    "label": "areSimilar",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.16_-_areSimilar",
    "description": "CodeSignal-Solutions.16_-_areSimilar",
    "peekOfCode": "def areSimilar(a, b):\n    diff = [i for i in range(len(a)) if a[i] != b[i]]\n    if len(diff) == 2:\n        b[diff[0]], b[diff[1]] = b[diff[1]], b[diff[0]]\n    return a == b",
    "detail": "CodeSignal-Solutions.16_-_areSimilar",
    "documentation": {}
  },
  {
    "label": "arrayChange",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.17_-_arrayChange",
    "description": "CodeSignal-Solutions.17_-_arrayChange",
    "peekOfCode": "def arrayChange(inputArray):\n    count = 0\n    for i in range(1, len(inputArray)):\n        if inputArray[i - 1] >= inputArray[i]:\n            difference = inputArray[i - 1] - inputArray[i]\n            inputArray[i] += difference + 1\n            count += difference + 1\n    return count",
    "detail": "CodeSignal-Solutions.17_-_arrayChange",
    "documentation": {}
  },
  {
    "label": "palindromeRearranging",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.18_-_palindromeRearranging",
    "description": "CodeSignal-Solutions.18_-_palindromeRearranging",
    "peekOfCode": "def palindromeRearranging(inputString):\n    inputList = sorted(inputString)\n    foundMiddle = False\n    while len(inputList) > 1:\n        if inputList[0] == inputList[1]:\n            del inputList[1]\n        elif not foundMiddle:\n            foundMiddle = True\n        else:\n            return False",
    "detail": "CodeSignal-Solutions.18_-_palindromeRearranging",
    "documentation": {}
  },
  {
    "label": "areEquallyStrong",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.19_-_areEquallyStrong",
    "description": "CodeSignal-Solutions.19_-_areEquallyStrong",
    "peekOfCode": "def areEquallyStrong(yourLeft, yourRight, friendsLeft, friendsRight):\n    sameHands = yourLeft == friendsLeft and yourRight == friendsRight\n    differentHands = yourLeft == friendsRight and yourRight == friendsLeft\n    return sameHands or differentHands",
    "detail": "CodeSignal-Solutions.19_-_areEquallyStrong",
    "documentation": {}
  },
  {
    "label": "arrayMaximalAdjacentDifference",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.20_-_arrayMaximalAdjacentDifference",
    "description": "CodeSignal-Solutions.20_-_arrayMaximalAdjacentDifference",
    "peekOfCode": "def arrayMaximalAdjacentDifference(inputArray):\n    diffs = []\n    for i in range(len(inputArray) - 1):\n        diffs.append(abs(inputArray[i] - inputArray[i + 1]))\n    return max(diffs)",
    "detail": "CodeSignal-Solutions.20_-_arrayMaximalAdjacentDifference",
    "documentation": {}
  },
  {
    "label": "isIPv4Address",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.21_-_isIPv4Address",
    "description": "CodeSignal-Solutions.21_-_isIPv4Address",
    "peekOfCode": "def isIPv4Address(inputString):\n    strings = [string for string in inputString.split(\".\")]\n    for string in strings:\n        if not string.isdecimal():\n            return False\n    nums = [int(num) for num in strings]\n    return max(nums) <= 255 and min(nums) >= 0 and len(nums) == 4",
    "detail": "CodeSignal-Solutions.21_-_isIPv4Address",
    "documentation": {}
  },
  {
    "label": "avoidObstacles",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.22_-_avoidObstacles",
    "description": "CodeSignal-Solutions.22_-_avoidObstacles",
    "peekOfCode": "def avoidObstacles(inputArray):\n    for length in range(2, max(inputArray) + 2):\n        done = True\n        jump = length\n        while jump < (max(inputArray) + length):\n            if jump in inputArray:\n                done = False\n                break\n            jump += length\n        if done:",
    "detail": "CodeSignal-Solutions.22_-_avoidObstacles",
    "documentation": {}
  },
  {
    "label": "boxBlur",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.23_-_boxBlur",
    "description": "CodeSignal-Solutions.23_-_boxBlur",
    "peekOfCode": "def boxBlur(image):\n    outImage = []\n    for row in range(1, len(image) - 1):\n        line = []\n        for pixel in range(1, len(image[row]) - 1):\n            total = (\n                image[row - 1][pixel - 1]\n                + image[row - 1][pixel]\n                + image[row - 1][pixel + 1]\n                + image[row][pixel - 1]",
    "detail": "CodeSignal-Solutions.23_-_boxBlur",
    "documentation": {}
  },
  {
    "label": "minesweeper",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.24_-_minesweeper",
    "description": "CodeSignal-Solutions.24_-_minesweeper",
    "peekOfCode": "def minesweeper(matrix):\n    TOP = 0\n    BOTTOM = len(matrix) - 1\n    LEFT = 0\n    RIGHT = len(matrix[0]) - 1\n    outMatrix = []\n    for row in range(len(matrix)):\n        outRow = []\n        for cell in range(len(matrix[row])):\n            outRow.append(0)",
    "detail": "CodeSignal-Solutions.24_-_minesweeper",
    "documentation": {}
  },
  {
    "label": "arrayReplace",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.25_-_arrayReplace",
    "description": "CodeSignal-Solutions.25_-_arrayReplace",
    "peekOfCode": "def arrayReplace(inputArray, elemToReplace, substitutionElem):\n    return [x if x != elemToReplace else substitutionElem for x in inputArray]",
    "detail": "CodeSignal-Solutions.25_-_arrayReplace",
    "documentation": {}
  },
  {
    "label": "evenDigitsOnly",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.26_-_evenDigitsOnly",
    "description": "CodeSignal-Solutions.26_-_evenDigitsOnly",
    "peekOfCode": "def evenDigitsOnly(n):\n    return all(\n        (True if digit in (\"0\", \"2\", \"4\", \"6\", \"8\") else False for digit in str(n))\n    )",
    "detail": "CodeSignal-Solutions.26_-_evenDigitsOnly",
    "documentation": {}
  },
  {
    "label": "variableName",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.27_-_variableName",
    "description": "CodeSignal-Solutions.27_-_variableName",
    "peekOfCode": "def variableName(name):\n    return name.replace(\"_\", \"\").isalnum() and not name[0].isdigit()",
    "detail": "CodeSignal-Solutions.27_-_variableName",
    "documentation": {}
  },
  {
    "label": "alphabeticShift",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.28_-_alphabeticShift",
    "description": "CodeSignal-Solutions.28_-_alphabeticShift",
    "peekOfCode": "def alphabeticShift(inputString):\n    return \"\".join([chr(ord(x) + 1) if x != \"z\" else \"a\" for x in inputString])",
    "detail": "CodeSignal-Solutions.28_-_alphabeticShift",
    "documentation": {}
  },
  {
    "label": "chessBoardCellColor",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.29_-_chessBoardCellColor",
    "description": "CodeSignal-Solutions.29_-_chessBoardCellColor",
    "peekOfCode": "def chessBoardCellColor(cell1, cell2):\n    color1 = ((ord(cell1[0]) - ord(\"A\")) + ord(cell1[1]) - ord(\"1\")) % 2 == 0\n    color2 = ((ord(cell2[0]) - ord(\"A\")) + ord(cell2[1]) - ord(\"1\")) % 2 == 0\n    return color1 == color2",
    "detail": "CodeSignal-Solutions.29_-_chessBoardCellColor",
    "documentation": {}
  },
  {
    "label": "circleOfNumbers",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.30_-_circleOfNumbers",
    "description": "CodeSignal-Solutions.30_-_circleOfNumbers",
    "peekOfCode": "def circleOfNumbers(n, firstNumber):\n    return (firstNumber + (n / 2)) % n",
    "detail": "CodeSignal-Solutions.30_-_circleOfNumbers",
    "documentation": {}
  },
  {
    "label": "depositProfit",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.31_-_depositProfit",
    "description": "CodeSignal-Solutions.31_-_depositProfit",
    "peekOfCode": "def depositProfit(deposit, rate, threshold):\n    year = 0\n    while deposit < threshold:\n        deposit *= 1 + (rate / 100)\n        year += 1\n    return year",
    "detail": "CodeSignal-Solutions.31_-_depositProfit",
    "documentation": {}
  },
  {
    "label": "absoluteValuesSumMinimization",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.32_-_absoluteValuesSumMinimization",
    "description": "CodeSignal-Solutions.32_-_absoluteValuesSumMinimization",
    "peekOfCode": "def absoluteValuesSumMinimization(a):\n    sums = {}\n    for num in a:\n        total = sum([abs(a[i] - num) for i in range(len(a))])\n        if total in sums:\n            sums[total] = min(num, sums[total])\n        else:\n            sums[total] = num\n        print(sums)\n    return sums[min(sums)]",
    "detail": "CodeSignal-Solutions.32_-_absoluteValuesSumMinimization",
    "documentation": {}
  },
  {
    "label": "stringsRearrangement",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.33_-_stringsRearrangement",
    "description": "CodeSignal-Solutions.33_-_stringsRearrangement",
    "peekOfCode": "def stringsRearrangement(inputArray):\n    permutations = itertools.permutations(inputArray)\n    for array in permutations:\n        if testArrangement(array):\n            return True\n    return False\ndef testArrangement(array):\n    for i in range(len(array) - 1):\n        if sum([a != b for a, b in zip(array[i], array[i + 1])]) != 1:\n            return False",
    "detail": "CodeSignal-Solutions.33_-_stringsRearrangement",
    "documentation": {}
  },
  {
    "label": "testArrangement",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.33_-_stringsRearrangement",
    "description": "CodeSignal-Solutions.33_-_stringsRearrangement",
    "peekOfCode": "def testArrangement(array):\n    for i in range(len(array) - 1):\n        if sum([a != b for a, b in zip(array[i], array[i + 1])]) != 1:\n            return False\n    return True",
    "detail": "CodeSignal-Solutions.33_-_stringsRearrangement",
    "documentation": {}
  },
  {
    "label": "extractEachKth",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.34_-_extractEachKth",
    "description": "CodeSignal-Solutions.34_-_extractEachKth",
    "peekOfCode": "def extractEachKth(inputArray, k):\n    return [inputArray[x] for x in range(len(inputArray)) if (x + 1) % k != 0]",
    "detail": "CodeSignal-Solutions.34_-_extractEachKth",
    "documentation": {}
  },
  {
    "label": "firstDigit",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.35_-_firstDigit",
    "description": "CodeSignal-Solutions.35_-_firstDigit",
    "peekOfCode": "def firstDigit(inputString):\n    for char in inputString:\n        if char.isdigit():\n            return char",
    "detail": "CodeSignal-Solutions.35_-_firstDigit",
    "documentation": {}
  },
  {
    "label": "differentSymbolsNaive",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.36_-_differentSymbolsNaive",
    "description": "CodeSignal-Solutions.36_-_differentSymbolsNaive",
    "peekOfCode": "def differentSymbolsNaive(s):\n    return len(set(s))",
    "detail": "CodeSignal-Solutions.36_-_differentSymbolsNaive",
    "documentation": {}
  },
  {
    "label": "arrayMaxConsecutiveSum",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.37_-_arrayMaxConsecutiveSum",
    "description": "CodeSignal-Solutions.37_-_arrayMaxConsecutiveSum",
    "peekOfCode": "def arrayMaxConsecutiveSum(inputArray, k):\n    sums = [sum(inputArray[:k])]\n    for i in range(1, len(inputArray) - k + 1):\n        sums.append(sums[i - 1] - inputArray[i - 1] + inputArray[i + k - 1])\n    return max(sums)",
    "detail": "CodeSignal-Solutions.37_-_arrayMaxConsecutiveSum",
    "documentation": {}
  },
  {
    "label": "growingPlant",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.38_-_growingPlant",
    "description": "CodeSignal-Solutions.38_-_growingPlant",
    "peekOfCode": "def growingPlant(upSpeed, downSpeed, desiredHeight):\n    height = 0\n    days = 1\n    height += upSpeed\n    while height < desiredHeight:\n        days += 1\n        height -= downSpeed\n        height += upSpeed\n    return days",
    "detail": "CodeSignal-Solutions.38_-_growingPlant",
    "documentation": {}
  },
  {
    "label": "knapsackLight",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.39_-_knapsackLight",
    "description": "CodeSignal-Solutions.39_-_knapsackLight",
    "peekOfCode": "def knapsackLight(value1, weight1, value2, weight2, maxW):\n    if weight1 + weight2 <= maxW:\n        return value1 + value2\n    if weight1 <= maxW and (weight2 > maxW or value1 >= value2):\n        return value1\n    if weight2 <= maxW and (weight1 > maxW or value2 >= value1):\n        return value2\n    return 0",
    "detail": "CodeSignal-Solutions.39_-_knapsackLight",
    "documentation": {}
  },
  {
    "label": "longestDigitsPrefix",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.40_-_longestDigitsPrefix",
    "description": "CodeSignal-Solutions.40_-_longestDigitsPrefix",
    "peekOfCode": "def longestDigitsPrefix(inputString):\n    for char in range(len(inputString)):\n        if not inputString[char].isdigit():\n            return inputString[:char]\n    return inputString",
    "detail": "CodeSignal-Solutions.40_-_longestDigitsPrefix",
    "documentation": {}
  },
  {
    "label": "digitDegree",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.41_-_digitDegree",
    "description": "CodeSignal-Solutions.41_-_digitDegree",
    "peekOfCode": "def digitDegree(n):\n    degree = 0\n    while len(str(n)) > 1:\n        n = sum((int(digit) for digit in str(n)))\n        degree += 1\n    return degree",
    "detail": "CodeSignal-Solutions.41_-_digitDegree",
    "documentation": {}
  },
  {
    "label": "bishopAndPawn",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.42_-_bishopAndPawn",
    "description": "CodeSignal-Solutions.42_-_bishopAndPawn",
    "peekOfCode": "def bishopAndPawn(bishop, pawn):\n    return abs(ord(bishop[0]) - ord(pawn[0])) == abs(ord(bishop[1]) - ord(pawn[1]))",
    "detail": "CodeSignal-Solutions.42_-_bishopAndPawn",
    "documentation": {}
  },
  {
    "label": "isBeautifulString",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.43_-_isBeautifulString",
    "description": "CodeSignal-Solutions.43_-_isBeautifulString",
    "peekOfCode": "def isBeautifulString(inputString):\n    for letter in range(ord(\"a\"), ord(\"z\")):\n        if inputString.count(chr(letter)) < inputString.count(chr(letter + 1)):\n            return False\n    return True",
    "detail": "CodeSignal-Solutions.43_-_isBeautifulString",
    "documentation": {}
  },
  {
    "label": "findEmailDomain",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.44_-_findEmailDomain",
    "description": "CodeSignal-Solutions.44_-_findEmailDomain",
    "peekOfCode": "def findEmailDomain(address):\n    return address[address.rfind(\"@\") + 1:]",
    "detail": "CodeSignal-Solutions.44_-_findEmailDomain",
    "documentation": {}
  },
  {
    "label": "buildPalindrome",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.45_-_buildPalindrome",
    "description": "CodeSignal-Solutions.45_-_buildPalindrome",
    "peekOfCode": "def buildPalindrome(st):\n    if st == st[::-1]:  # Check for initial palindrome\n        return st\n    index = 0\n    subStr = st[index:]\n    while subStr != subStr[::-1]:  # while substring is not a palindrome\n        index += 1\n        subStr = st[index:]\n    return st + st[index - 1:: -1]",
    "detail": "CodeSignal-Solutions.45_-_buildPalindrome",
    "documentation": {}
  },
  {
    "label": "electionsWinners",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.46_-_electionsWinners",
    "description": "CodeSignal-Solutions.46_-_electionsWinners",
    "peekOfCode": "def electionsWinners(votes, k):\n    winners = 0\n    current_winner = max(votes)\n    for candidate in votes:\n        if k > 0 and candidate + k > current_winner:\n            winners += 1\n        if k == 0 and candidate == current_winner and votes.count(candidate) == 1:\n            winners += 1\n    return winners",
    "detail": "CodeSignal-Solutions.46_-_electionsWinners",
    "documentation": {}
  },
  {
    "label": "isMAC48Address",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.47_-_isMAC48Address",
    "description": "CodeSignal-Solutions.47_-_isMAC48Address",
    "peekOfCode": "def isMAC48Address(inputString):\n    hex_chars = (\n        \"1\",\n        \"2\",\n        \"3\",\n        \"4\",\n        \"5\",\n        \"6\",\n        \"7\",\n        \"8\",",
    "detail": "CodeSignal-Solutions.47_-_isMAC48Address",
    "documentation": {}
  },
  {
    "label": "isDigit",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.48_-_isDigit",
    "description": "CodeSignal-Solutions.48_-_isDigit",
    "peekOfCode": "def isDigit(symbol):\n    return symbol.isdigit()",
    "detail": "CodeSignal-Solutions.48_-_isDigit",
    "documentation": {}
  },
  {
    "label": "lineEncoding",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.49_-_lineEncoding",
    "description": "CodeSignal-Solutions.49_-_lineEncoding",
    "peekOfCode": "def lineEncoding(s):\n    count = 1\n    output = []\n    for char in range(1, len(s)):\n        if s[char] == s[char - 1]:\n            count += 1\n        else:\n            if count > 1:\n                output.append(str(count) + s[char - 1])\n            else:",
    "detail": "CodeSignal-Solutions.49_-_lineEncoding",
    "documentation": {}
  },
  {
    "label": "chessKnight",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.50_-_chessKnight",
    "description": "CodeSignal-Solutions.50_-_chessKnight",
    "peekOfCode": "def chessKnight(cell):\n    moves = 0\n    # Starting at the top left, going counter-clockwise\n    if ord(cell[0]) >= ord(\"b\") and ord(cell[1]) <= ord(\"6\"):\n        moves += 1\n    if ord(cell[0]) >= ord(\"c\") and ord(cell[1]) <= ord(\"7\"):\n        moves += 1\n    if ord(cell[0]) >= ord(\"c\") and ord(cell[1]) >= ord(\"2\"):\n        moves += 1\n    if ord(cell[0]) >= ord(\"b\") and ord(cell[1]) >= ord(\"3\"):",
    "detail": "CodeSignal-Solutions.50_-_chessKnight",
    "documentation": {}
  },
  {
    "label": "deleteDigit",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.51_-_deleteDigit",
    "description": "CodeSignal-Solutions.51_-_deleteDigit",
    "peekOfCode": "def deleteDigit(n):\n    num = str(n)\n    highest = 0\n    for digit in range(len(num)):\n        output = num[:digit] + num[digit + 1:]\n        if int(output) > int(highest):\n            highest = output\n    return int(highest)",
    "detail": "CodeSignal-Solutions.51_-_deleteDigit",
    "documentation": {}
  },
  {
    "label": "longestWord",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.52_-_longestWord",
    "description": "CodeSignal-Solutions.52_-_longestWord",
    "peekOfCode": "def longestWord(text):\n    longest = []\n    word = []\n    for char in text:\n        if ord(\"A\") <= ord(char) <= ord(\"Z\") or ord(\"a\") <= ord(char) <= ord(\"z\"):\n            word.append(char)\n        else:\n            if len(word) > len(longest):\n                longest = word\n            word = []",
    "detail": "CodeSignal-Solutions.52_-_longestWord",
    "documentation": {}
  },
  {
    "label": "validTime",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.53_-_validTime",
    "description": "CodeSignal-Solutions.53_-_validTime",
    "peekOfCode": "def validTime(time):\n    groups = time.split(\":\")\n    if len(groups) != 2:\n        return False\n    if not (groups[0].isdigit() and groups[1].isdigit()):\n        return False\n    if int(groups[0]) > 23 or int(groups[1]) > 59:\n        return False\n    return True",
    "detail": "CodeSignal-Solutions.53_-_validTime",
    "documentation": {}
  },
  {
    "label": "sumUpNumbers",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.54_-_sumUpNumbers",
    "description": "CodeSignal-Solutions.54_-_sumUpNumbers",
    "peekOfCode": "def sumUpNumbers(inputString):\n    total = 0\n    current_num = []\n    for char in inputString:\n        if char.isdigit():\n            current_num.append(char)\n        else:\n            if len(current_num) > 0:\n                num = int(\"\".join(current_num))\n                total += num",
    "detail": "CodeSignal-Solutions.54_-_sumUpNumbers",
    "documentation": {}
  },
  {
    "label": "differentSquares",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.55_-_differentSquares",
    "description": "CodeSignal-Solutions.55_-_differentSquares",
    "peekOfCode": "def differentSquares(matrix):\n    squares = set()\n    for row in range(len(matrix) - 1):\n        for cell in range(len(matrix[row]) - 1):\n            square = (\n                (matrix[row][cell], matrix[row][cell + 1]),\n                (matrix[row + 1][cell], matrix[row + 1][cell + 1]),\n            )\n            squares.add(square)\n    return len(squares)",
    "detail": "CodeSignal-Solutions.55_-_differentSquares",
    "documentation": {}
  },
  {
    "label": "digitsProduct",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.56_-_digitsProduct",
    "description": "CodeSignal-Solutions.56_-_digitsProduct",
    "peekOfCode": "def digitsProduct(product):\n    # New idea: add product to factors\n    # while max(factors) > 10: split that num into factors\n    if product == 0:\n        return 10\n    factors = [product]\n    while max(factors) > 9:\n        factored = findFactors(max(factors))\n        if factored:\n            factors.remove(max(factors))",
    "detail": "CodeSignal-Solutions.56_-_digitsProduct",
    "documentation": {}
  },
  {
    "label": "findFactors",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.56_-_digitsProduct",
    "description": "CodeSignal-Solutions.56_-_digitsProduct",
    "peekOfCode": "def findFactors(n):\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return i, n // i\n    return False",
    "detail": "CodeSignal-Solutions.56_-_digitsProduct",
    "documentation": {}
  },
  {
    "label": "fileNaming",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.57_-_fileNaming",
    "description": "CodeSignal-Solutions.57_-_fileNaming",
    "peekOfCode": "def fileNaming(names):\n    outnames = []\n    for name in names:\n        if name in outnames:\n            k = 1\n            while \"{}({})\".format(name, k) in outnames:\n                k += 1\n            name = \"{}({})\".format(name, k)\n        outnames.append(name)\n    return outnames",
    "detail": "CodeSignal-Solutions.57_-_fileNaming",
    "documentation": {}
  },
  {
    "label": "messageFromBinaryCode",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.58_-_messageFromBinaryCode",
    "description": "CodeSignal-Solutions.58_-_messageFromBinaryCode",
    "peekOfCode": "def messageFromBinaryCode(code):\n    output = []\n    for i in range(0, len(code), 8):\n        letter = chr(int(code[i : i + 8], 2))\n        output.append(letter)\n    return \"\".join(output)",
    "detail": "CodeSignal-Solutions.58_-_messageFromBinaryCode",
    "documentation": {}
  },
  {
    "label": "spiralNumbers",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.59_-_spiralNumbers",
    "description": "CodeSignal-Solutions.59_-_spiralNumbers",
    "peekOfCode": "def spiralNumbers(n):\n    LEFT = \"left\"\n    RIGHT = \"right\"\n    UP = \"up\"\n    DOWN = \"down\"\n    direction = RIGHT\n    spiral = [[0 for i in range(n)] for j in range(n)]\n    row = 0\n    cell = 0\n    for num in range(1, (n * n) + 1):",
    "detail": "CodeSignal-Solutions.59_-_spiralNumbers",
    "documentation": {}
  },
  {
    "label": "sudoku",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.60_-_sudoku",
    "description": "CodeSignal-Solutions.60_-_sudoku",
    "peekOfCode": "def sudoku(grid):\n    match = [i for i in range(1, 10)]\n    for row in grid:\n        if sorted(row) != match:\n            return False\n    for column_index in range(9):\n        column = [grid[row_index][column_index] for row_index in range(9)]\n        if sorted(column) != match:\n            return False\n    for row in range(0, 9, 3):",
    "detail": "CodeSignal-Solutions.60_-_sudoku",
    "documentation": {}
  },
  {
    "label": "addTwoDigits",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.Core_001_-_addTwoDigits",
    "description": "CodeSignal-Solutions.Core_001_-_addTwoDigits",
    "peekOfCode": "def addTwoDigits(n):\n    return (n // 10) + (n % 10)",
    "detail": "CodeSignal-Solutions.Core_001_-_addTwoDigits",
    "documentation": {}
  },
  {
    "label": "largestNumber",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.Core_002_-_largestNumber",
    "description": "CodeSignal-Solutions.Core_002_-_largestNumber",
    "peekOfCode": "def largestNumber(n):\n    return int(\"9\" * n)",
    "detail": "CodeSignal-Solutions.Core_002_-_largestNumber",
    "documentation": {}
  },
  {
    "label": "candies",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.Core_003_-_candies",
    "description": "CodeSignal-Solutions.Core_003_-_candies",
    "peekOfCode": "def candies(n, m):\n    return (m // n) * n",
    "detail": "CodeSignal-Solutions.Core_003_-_candies",
    "documentation": {}
  },
  {
    "label": "seatsInTheater",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.Core_004_-_seatsInTheater",
    "description": "CodeSignal-Solutions.Core_004_-_seatsInTheater",
    "peekOfCode": "def seatsInTheater(nCols, nRows, col, row):\n    return (nCols - col + 1) * (nRows - row)",
    "detail": "CodeSignal-Solutions.Core_004_-_seatsInTheater",
    "documentation": {}
  },
  {
    "label": "maxMultiple",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.Core_005_-_maxMultiple",
    "description": "CodeSignal-Solutions.Core_005_-_maxMultiple",
    "peekOfCode": "def maxMultiple(divisor, bound):\n    for num in range(bound, 1, -1):\n        if num % divisor == 0:\n            return num\n    return 0",
    "detail": "CodeSignal-Solutions.Core_005_-_maxMultiple",
    "documentation": {}
  },
  {
    "label": "circleOfNumbers",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.Core_006_-_circleOfNumbers",
    "description": "CodeSignal-Solutions.Core_006_-_circleOfNumbers",
    "peekOfCode": "def circleOfNumbers(n, firstNumber):\n    return (firstNumber + (n // 2)) % n",
    "detail": "CodeSignal-Solutions.Core_006_-_circleOfNumbers",
    "documentation": {}
  },
  {
    "label": "lateRide",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.Core_007_-_lateRide",
    "description": "CodeSignal-Solutions.Core_007_-_lateRide",
    "peekOfCode": "def lateRide(n):\n    hours = n // 60\n    minutes = n % 60\n    return (hours // 10) + (hours % 10) + (minutes // 10) + (minutes % 10)",
    "detail": "CodeSignal-Solutions.Core_007_-_lateRide",
    "documentation": {}
  },
  {
    "label": "phoneCall",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.Core_008_-_phoneCall",
    "description": "CodeSignal-Solutions.Core_008_-_phoneCall",
    "peekOfCode": "def phoneCall(min1, min2_10, min11, s):\n    if s < min1:\n        return 0\n    if s == min1:\n        return 1\n    if s <= min1 + (min2_10 * 9):\n        s -= min1\n        return (s // min2_10) + 1\n    s -= min1\n    s -= min2_10 * 9",
    "detail": "CodeSignal-Solutions.Core_008_-_phoneCall",
    "documentation": {}
  },
  {
    "label": "reachNextLevel",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.Core_009_-_reachNextLevel",
    "description": "CodeSignal-Solutions.Core_009_-_reachNextLevel",
    "peekOfCode": "def reachNextLevel(experience, threshold, reward):\n    return experience + reward >= threshold",
    "detail": "CodeSignal-Solutions.Core_009_-_reachNextLevel",
    "documentation": {}
  },
  {
    "label": "knapsackLight",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.Core_010_-_knapsackLight",
    "description": "CodeSignal-Solutions.Core_010_-_knapsackLight",
    "peekOfCode": "def knapsackLight(value1, weight1, value2, weight2, maxW):\n    if weight1 + weight2 <= maxW:\n        return value1 + value2\n    if weight1 <= maxW and weight2 <= maxW:\n        return max(value1, value2)\n    if weight1 <= maxW:\n        return value1\n    if weight2 <= maxW:\n        return value2\n    return 0",
    "detail": "CodeSignal-Solutions.Core_010_-_knapsackLight",
    "documentation": {}
  },
  {
    "label": "extraNumber",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.Core_011_-_extraNumber",
    "description": "CodeSignal-Solutions.Core_011_-_extraNumber",
    "peekOfCode": "def extraNumber(a, b, c):\n    if a == b:\n        return c\n    if a == c:\n        return b\n    return a",
    "detail": "CodeSignal-Solutions.Core_011_-_extraNumber",
    "documentation": {}
  },
  {
    "label": "isInfiniteProcess",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.Core_012_-_isInfiniteProcess",
    "description": "CodeSignal-Solutions.Core_012_-_isInfiniteProcess",
    "peekOfCode": "def isInfiniteProcess(a, b):\n    return a > b or (a % 2 != b % 2)",
    "detail": "CodeSignal-Solutions.Core_012_-_isInfiniteProcess",
    "documentation": {}
  },
  {
    "label": "arithmeticExpression",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.Core_013_-_arithmeticExpression",
    "description": "CodeSignal-Solutions.Core_013_-_arithmeticExpression",
    "peekOfCode": "def arithmeticExpression(a, b, c):\n    return a + b == c or a - b == c or a * b == c or a / b == c",
    "detail": "CodeSignal-Solutions.Core_013_-_arithmeticExpression",
    "documentation": {}
  },
  {
    "label": "tennisSet",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.Core_014_-_tennisSet",
    "description": "CodeSignal-Solutions.Core_014_-_tennisSet",
    "peekOfCode": "def tennisSet(score1, score2):\n    if max(score1, score2) == 6 and min(score1, score2) < 5:\n        return True\n    if 5 <= min(score1, score2) <= 6 and max(score1, score2) == 7:\n        return True\n    return False",
    "detail": "CodeSignal-Solutions.Core_014_-_tennisSet",
    "documentation": {}
  },
  {
    "label": "willYou",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.Core_015_-_willYou",
    "description": "CodeSignal-Solutions.Core_015_-_willYou",
    "peekOfCode": "def willYou(young, beautiful, loved):\n    return (young and beautiful) != loved",
    "detail": "CodeSignal-Solutions.Core_015_-_willYou",
    "documentation": {}
  },
  {
    "label": "metroCard",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.Core_016_-_metroCard",
    "description": "CodeSignal-Solutions.Core_016_-_metroCard",
    "peekOfCode": "def metroCard(lastNumberOfDays):\n    if lastNumberOfDays == 30 or lastNumberOfDays == 28:\n        return [31]\n    return [28, 30, 31]",
    "detail": "CodeSignal-Solutions.Core_016_-_metroCard",
    "documentation": {}
  },
  {
    "label": "killKthBit",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.Core_017_-_killKthBit",
    "description": "CodeSignal-Solutions.Core_017_-_killKthBit",
    "peekOfCode": "def killKthBit(n, k):\n    return n & ~(2 ** (k - 1))",
    "detail": "CodeSignal-Solutions.Core_017_-_killKthBit",
    "documentation": {}
  },
  {
    "label": "arrayPacking",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.Core_018_-_arrayPacking",
    "description": "CodeSignal-Solutions.Core_018_-_arrayPacking",
    "peekOfCode": "def arrayPacking(a):\n    binary_array = [bin(num)[2:].rjust(8, \"0\") for num in a]\n    out_string = \"\".join(binary_array[::-1])\n    return int(out_string, 2)",
    "detail": "CodeSignal-Solutions.Core_018_-_arrayPacking",
    "documentation": {}
  },
  {
    "label": "rangeBitCount",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.Core_019_-_rangeBitCount",
    "description": "CodeSignal-Solutions.Core_019_-_rangeBitCount",
    "peekOfCode": "def rangeBitCount(a, b):\n    array = list(range(a, b + 1))\n    binary_array = [bin(num) for num in array]\n    count_array = [binary.count(\"1\") for binary in binary_array]\n    return sum(count_array)",
    "detail": "CodeSignal-Solutions.Core_019_-_rangeBitCount",
    "documentation": {}
  },
  {
    "label": "mirrorBits",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.Core_020_-_mirrorBits",
    "description": "CodeSignal-Solutions.Core_020_-_mirrorBits",
    "peekOfCode": "def mirrorBits(a):\n    binary = bin(a)[2:]\n    return int(binary[::-1], 2)",
    "detail": "CodeSignal-Solutions.Core_020_-_mirrorBits",
    "documentation": {}
  },
  {
    "label": "secondRightmostZeroBit",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.Core_021_-_secondRightmostZeroBit",
    "description": "CodeSignal-Solutions.Core_021_-_secondRightmostZeroBit",
    "peekOfCode": "def secondRightmostZeroBit(n):\n    return 2 ** bin(n)[::-1].find(\"0\", bin(n)[::-1].find(\"0\") + 1)",
    "detail": "CodeSignal-Solutions.Core_021_-_secondRightmostZeroBit",
    "documentation": {}
  },
  {
    "label": "swapAdjacentBits",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.Core_022_-_swapAdjacentBits",
    "description": "CodeSignal-Solutions.Core_022_-_swapAdjacentBits",
    "peekOfCode": "def swapAdjacentBits(n):\n    return ((n >> 1) & 1431655765) | ((n << 1) & 2863311530)",
    "detail": "CodeSignal-Solutions.Core_022_-_swapAdjacentBits",
    "documentation": {}
  },
  {
    "label": "differentRightmostBit",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.Core_023_-_differentRightmostBit",
    "description": "CodeSignal-Solutions.Core_023_-_differentRightmostBit",
    "peekOfCode": "def differentRightmostBit(n, m):\n    return 2 ** bin((n ^ m))[::-1].find(\"1\")",
    "detail": "CodeSignal-Solutions.Core_023_-_differentRightmostBit",
    "documentation": {}
  },
  {
    "label": "equalPairOfBits",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.Core_024_-_equalPairOfBits",
    "description": "CodeSignal-Solutions.Core_024_-_equalPairOfBits",
    "peekOfCode": "def equalPairOfBits(n, m):\n    return 2 ** bin(~(n ^ m))[::-1].find(\"1\")",
    "detail": "CodeSignal-Solutions.Core_024_-_equalPairOfBits",
    "documentation": {}
  },
  {
    "label": "leastFactorial",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.Core_025_-_leastFactorial",
    "description": "CodeSignal-Solutions.Core_025_-_leastFactorial",
    "peekOfCode": "def leastFactorial(n):\n    factorial = 1\n    index = 1\n    while factorial < n:\n        index += 1\n        factorial *= index\n    return factorial",
    "detail": "CodeSignal-Solutions.Core_025_-_leastFactorial",
    "documentation": {}
  },
  {
    "label": "countSumOfTwoRepresentations2",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.Core_026_-_countSumOfTwoRepresentations2",
    "description": "CodeSignal-Solutions.Core_026_-_countSumOfTwoRepresentations2",
    "peekOfCode": "def countSumOfTwoRepresentations2(n, l, r):\n    count = 0\n    a = max(n - r, l)\n    b = n - a\n    while a <= r and a <= b:\n        count += 1\n        a += 1\n        b -= 1\n    return count",
    "detail": "CodeSignal-Solutions.Core_026_-_countSumOfTwoRepresentations2",
    "documentation": {}
  },
  {
    "label": "magicalWell",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.Core_027_-_magicalWell",
    "description": "CodeSignal-Solutions.Core_027_-_magicalWell",
    "peekOfCode": "def magicalWell(a, b, n):\n    total = 0\n    for i in range(n):\n        total += a * b\n        a += 1\n        b += 1\n    return total",
    "detail": "CodeSignal-Solutions.Core_027_-_magicalWell",
    "documentation": {}
  },
  {
    "label": "lineUp",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.Core_028_-_lineUp",
    "description": "CodeSignal-Solutions.Core_028_-_lineUp",
    "peekOfCode": "def lineUp(commands):\n    count = 0\n    smart_student = 0\n    dumb_student = 0\n    for command in commands:\n        if command == \"L\":\n            smart_student = (smart_student - 1) % 4\n            dumb_student = (dumb_student + 1) % 4\n        elif command == \"R\":\n            smart_student = (smart_student + 1) % 4",
    "detail": "CodeSignal-Solutions.Core_028_-_lineUp",
    "documentation": {}
  },
  {
    "label": "additionWithoutCarrying",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.Core_029_-_additionWithoutCarrying",
    "description": "CodeSignal-Solutions.Core_029_-_additionWithoutCarrying",
    "peekOfCode": "def additionWithoutCarrying(param1, param2):\n    # Convert numbers to strings\n    str1 = str(param1)\n    str2 = str(param2)\n    # Pad both to the same length with zeroes (to the left of the numbers)\n    length = max(len(str2), len(str1))\n    str1 = str1.rjust(length, \"0\")\n    str2 = str2.rjust(length, \"0\")\n    output = []\n    for num1, num2 in zip(str1, str2):",
    "detail": "CodeSignal-Solutions.Core_029_-_additionWithoutCarrying",
    "documentation": {}
  },
  {
    "label": "appleBoxes",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.Core_030_-_appleBoxes",
    "description": "CodeSignal-Solutions.Core_030_-_appleBoxes",
    "peekOfCode": "def appleBoxes(k):\n    red = 0\n    yellow = 0\n    for i in range(1, k + 1, 2):\n        yellow += i * i\n    for i in range(2, k + 1, 2):\n        red += i * i\n    return red - yellow",
    "detail": "CodeSignal-Solutions.Core_030_-_appleBoxes",
    "documentation": {}
  },
  {
    "label": "increaseNumberRoundness",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.Core_031_-_increaseNumberRoundness",
    "description": "CodeSignal-Solutions.Core_031_-_increaseNumberRoundness",
    "peekOfCode": "def increaseNumberRoundness(n):\n    string = str(n)\n    # Check for immediate rejection\n    if \"0\" not in string or len(string) < 2:\n        return False\n    # Since we know there's a 0, if it's not on\n    # the left, then we know to accept\n    if string[-1] != \"0\":\n        return True\n    # If there is only one 0, it must be at the end, so reject.",
    "detail": "CodeSignal-Solutions.Core_031_-_increaseNumberRoundness",
    "documentation": {}
  },
  {
    "label": "rounders",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.Core_032_-_rounders",
    "description": "CodeSignal-Solutions.Core_032_-_rounders",
    "peekOfCode": "def rounders(value):\n    length = len(str(value))\n    magnitude = length - 1\n    for i in range(length - 1):\n        value = int((value / 10) + 0.5)\n    return value * (10 ** magnitude)",
    "detail": "CodeSignal-Solutions.Core_032_-_rounders",
    "documentation": {}
  },
  {
    "label": "candles",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.Core_033_-_candles",
    "description": "CodeSignal-Solutions.Core_033_-_candles",
    "peekOfCode": "def candles(candlesNumber, makeNew):\n    totalBurned = 0\n    leftovers = 0\n    while candlesNumber > 0:\n        totalBurned += candlesNumber\n        leftovers += candlesNumber\n        candlesNumber = 0\n        candlesNumber = leftovers // makeNew\n        leftovers = leftovers % makeNew\n    return totalBurned",
    "detail": "CodeSignal-Solutions.Core_033_-_candles",
    "documentation": {}
  },
  {
    "label": "countBlackCells",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.Core_034_-_countBlackCells",
    "description": "CodeSignal-Solutions.Core_034_-_countBlackCells",
    "peekOfCode": "def countBlackCells(n, m):\n    gcd = find_gcd(n, m)\n    line_cells = n + m - gcd\n    line_corner_cells = (gcd - 1) * 2\n    return line_cells + line_corner_cells\ndef find_gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a",
    "detail": "CodeSignal-Solutions.Core_034_-_countBlackCells",
    "documentation": {}
  },
  {
    "label": "find_gcd",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.Core_034_-_countBlackCells",
    "description": "CodeSignal-Solutions.Core_034_-_countBlackCells",
    "peekOfCode": "def find_gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a",
    "detail": "CodeSignal-Solutions.Core_034_-_countBlackCells",
    "documentation": {}
  },
  {
    "label": "createArray",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.Core_035_-_createArray",
    "description": "CodeSignal-Solutions.Core_035_-_createArray",
    "peekOfCode": "def createArray(size):\n    return [1] * size",
    "detail": "CodeSignal-Solutions.Core_035_-_createArray",
    "documentation": {}
  },
  {
    "label": "arrayReplace",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.Core_036_-_arrayReplace",
    "description": "CodeSignal-Solutions.Core_036_-_arrayReplace",
    "peekOfCode": "def arrayReplace(inputArray, elemToReplace, substitutionElem):\n    output = [\n        elem if elem != elemToReplace else substitutionElem for elem in inputArray\n    ]\n    return output",
    "detail": "CodeSignal-Solutions.Core_036_-_arrayReplace",
    "documentation": {}
  },
  {
    "label": "firstReverseTry",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.Core_037_-_firstReverseTry",
    "description": "CodeSignal-Solutions.Core_037_-_firstReverseTry",
    "peekOfCode": "def firstReverseTry(arr):\n    if len(arr) < 2:\n        return arr\n    if len(arr) < 4:\n        return arr[::-1]\n    return arr[-1:] + arr[1:-1] + arr[:1]",
    "detail": "CodeSignal-Solutions.Core_037_-_firstReverseTry",
    "documentation": {}
  },
  {
    "label": "concatenateArrays",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.Core_038_-_concatenateArrays",
    "description": "CodeSignal-Solutions.Core_038_-_concatenateArrays",
    "peekOfCode": "def concatenateArrays(a, b):\n    return a + b",
    "detail": "CodeSignal-Solutions.Core_038_-_concatenateArrays",
    "documentation": {}
  },
  {
    "label": "removeArrayPart",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.Core_039_-_removeArrayPart",
    "description": "CodeSignal-Solutions.Core_039_-_removeArrayPart",
    "peekOfCode": "def removeArrayPart(inputArray, l, r):\n    return inputArray[:l] + inputArray[r + 1 :]",
    "detail": "CodeSignal-Solutions.Core_039_-_removeArrayPart",
    "documentation": {}
  },
  {
    "label": "isSmooth",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.Core_040_-_isSmooth",
    "description": "CodeSignal-Solutions.Core_040_-_isSmooth",
    "peekOfCode": "def isSmooth(arr):\n    if arr[0] != arr[-1]:\n        return False\n    if len(arr) % 2 == 0:\n        middle = arr[len(arr) // 2] + arr[(len(arr) // 2) - 1]\n    else:\n        middle = arr[len(arr) // 2]\n    return arr[0] == middle",
    "detail": "CodeSignal-Solutions.Core_040_-_isSmooth",
    "documentation": {}
  },
  {
    "label": "replaceMiddle",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.Core_041_-_replaceMiddle",
    "description": "CodeSignal-Solutions.Core_041_-_replaceMiddle",
    "peekOfCode": "def replaceMiddle(arr):\n    if len(arr) % 2 != 0:\n        return arr\n    right_middle = len(arr) // 2\n    middle_value = arr[right_middle] + arr[right_middle - 1]\n    return arr[: right_middle - 1] + [middle_value] + arr[right_middle + 1 :]",
    "detail": "CodeSignal-Solutions.Core_041_-_replaceMiddle",
    "documentation": {}
  },
  {
    "label": "makeArrayConsecutive2",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.Core_042_-_makeArrayConsecutive2",
    "description": "CodeSignal-Solutions.Core_042_-_makeArrayConsecutive2",
    "peekOfCode": "def makeArrayConsecutive2(statues):\n    count = 0\n    for i in range(min(statues), max(statues)):\n        if i not in statues:\n            count += 1\n    return count",
    "detail": "CodeSignal-Solutions.Core_042_-_makeArrayConsecutive2",
    "documentation": {}
  },
  {
    "label": "isPower",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.Core_043_-_isPower",
    "description": "CodeSignal-Solutions.Core_043_-_isPower",
    "peekOfCode": "def isPower(n):\n    if n == 1:\n        return True\n    a = 2\n    b = 2\n    while a ** 2 <= n:\n        while a ** b <= n:\n            if a ** b == n:\n                return True\n            b += 1",
    "detail": "CodeSignal-Solutions.Core_043_-_isPower",
    "documentation": {}
  },
  {
    "label": "isSumOfConsecutive2",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.Core_044_-_isSumOfConsecutive2",
    "description": "CodeSignal-Solutions.Core_044_-_isSumOfConsecutive2",
    "peekOfCode": "def isSumOfConsecutive2(n):\n    count = 0\n    right = 2\n    arr = [1, 2]\n    while right <= (n // 2) + 1:\n        total = sum(arr)\n        if total == n:\n            count += 1\n            del arr[0]\n        elif total < n:",
    "detail": "CodeSignal-Solutions.Core_044_-_isSumOfConsecutive2",
    "documentation": {}
  },
  {
    "label": "squareDigitsSequence",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.Core_045_-_squareDigitsSequence",
    "description": "CodeSignal-Solutions.Core_045_-_squareDigitsSequence",
    "peekOfCode": "def squareDigitsSequence(a0):\n    sequence = [a0]\n    while sequence[-1] not in sequence[:-1]:\n        next_value = 0\n        for digit in str(sequence[-1]):\n            next_value += int(digit) ** 2\n        sequence.append(next_value)\n    return len(sequence)",
    "detail": "CodeSignal-Solutions.Core_045_-_squareDigitsSequence",
    "documentation": {}
  },
  {
    "label": "pagesNumberingWithInk",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.Core_046_-_pagesNumberingWithInk",
    "description": "CodeSignal-Solutions.Core_046_-_pagesNumberingWithInk",
    "peekOfCode": "def pagesNumberingWithInk(current, numberOfDigits):\n    numberOfDigits -= len(str(current))\n    next_digits = len(str(current + 1))\n    while numberOfDigits >= next_digits:\n        current += 1\n        numberOfDigits -= next_digits\n        next_digits = len(str(current))\n    return current",
    "detail": "CodeSignal-Solutions.Core_046_-_pagesNumberingWithInk",
    "documentation": {}
  },
  {
    "label": "comfortableNumbers",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.Core_047_-_comfortableNumbers",
    "description": "CodeSignal-Solutions.Core_047_-_comfortableNumbers",
    "peekOfCode": "def comfortableNumbers(l, r):\n    count = 0\n    for a in range(l, r):\n        for b in range(a + 1, r + 1):\n            a_sum = sum(int(digit) for digit in str(a))\n            b_sum = sum(int(digit) for digit in str(b))\n            if b <= a + a_sum and a >= b - b_sum:\n                count += 1\n    return count",
    "detail": "CodeSignal-Solutions.Core_047_-_comfortableNumbers",
    "documentation": {}
  },
  {
    "label": "weakNumbers",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.Core_048_-_weakNumbers",
    "description": "CodeSignal-Solutions.Core_048_-_weakNumbers",
    "peekOfCode": "def weakNumbers(n):\n    all_factors = [count_factors(num) for num in range(1, n + 1)]\n    weaknesses = []\n    for num, num_factors in enumerate(all_factors, 1):\n            weakness = 0\n            for factor in all_factors[:num]:\n                if factor > num_factors:\n                    weakness += 1\n            weaknesses.append(weakness)\n            weakest = max(weaknesses)",
    "detail": "CodeSignal-Solutions.Core_048_-_weakNumbers",
    "documentation": {}
  },
  {
    "label": "count_factors",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.Core_048_-_weakNumbers",
    "description": "CodeSignal-Solutions.Core_048_-_weakNumbers",
    "peekOfCode": "def count_factors(n):\n    factors = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            factors += 1\n    return factors\nprint(weakNumbers(500))",
    "detail": "CodeSignal-Solutions.Core_048_-_weakNumbers",
    "documentation": {}
  },
  {
    "label": "rectangleRotation",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.Core_049_-_rectangleRotation",
    "description": "CodeSignal-Solutions.Core_049_-_rectangleRotation",
    "peekOfCode": "def rectangleRotation(a, b):\n    n = a / (2 ** 0.5)\n    m = b / (2 ** 0.5)\n    points = (math.floor(n) * math.floor(m)) + (math.ceil(n) * math.ceil(m))\n    if math.floor(n) % 2 != math.floor(m) % 2:\n        points -= 1\n    return points\n# rectangleRotation(6, 4)\nprint(rectangleRotation(8, 6))",
    "detail": "CodeSignal-Solutions.Core_049_-_rectangleRotation",
    "documentation": {}
  },
  {
    "label": "add",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def add(param1, param2):\n    return param1 + param2\ndef centuryFromYear(year):\n    return ((year - 1) // 100) + 1\ndef checkPalindrome(inputString):\n    return inputString == inputString[::-1]\ndef adjacentElementsProduct(inputArray):\n    max = inputArray[0] * inputArray[1]\n    for i in range(len(inputArray) - 1):\n        if inputArray[i] * inputArray[i + 1] > max:",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "centuryFromYear",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def centuryFromYear(year):\n    return ((year - 1) // 100) + 1\ndef checkPalindrome(inputString):\n    return inputString == inputString[::-1]\ndef adjacentElementsProduct(inputArray):\n    max = inputArray[0] * inputArray[1]\n    for i in range(len(inputArray) - 1):\n        if inputArray[i] * inputArray[i + 1] > max:\n            max = inputArray[i] * inputArray[i + 1]\n    return max",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "checkPalindrome",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def checkPalindrome(inputString):\n    return inputString == inputString[::-1]\ndef adjacentElementsProduct(inputArray):\n    max = inputArray[0] * inputArray[1]\n    for i in range(len(inputArray) - 1):\n        if inputArray[i] * inputArray[i + 1] > max:\n            max = inputArray[i] * inputArray[i + 1]\n    return max\ndef shapeArea(n):\n    sum = n * 2 - 1",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "adjacentElementsProduct",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def adjacentElementsProduct(inputArray):\n    max = inputArray[0] * inputArray[1]\n    for i in range(len(inputArray) - 1):\n        if inputArray[i] * inputArray[i + 1] > max:\n            max = inputArray[i] * inputArray[i + 1]\n    return max\ndef shapeArea(n):\n    sum = n * 2 - 1\n    for i in range(1, (n * 2) - 1, 2):\n        sum += i * 2",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "shapeArea",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def shapeArea(n):\n    sum = n * 2 - 1\n    for i in range(1, (n * 2) - 1, 2):\n        sum += i * 2\n    return sum\ndef makeArrayConsecutive2(statues):\n    return max(statues) - min(statues) - len(statues) + 1\ndef almostIncreasingSequence(sequence):\n    i = 0\n    while i < len(sequence) - 1:",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "makeArrayConsecutive2",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def makeArrayConsecutive2(statues):\n    return max(statues) - min(statues) - len(statues) + 1\ndef almostIncreasingSequence(sequence):\n    i = 0\n    while i < len(sequence) - 1:\n        if not sequence[i] < sequence[i + 1]:\n            if increasingSequence(\n                sequence[:i] + sequence[i + 1:]\n            ) or increasingSequence(sequence[: i + 1] + sequence[i + 2:]):\n                return True",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "almostIncreasingSequence",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def almostIncreasingSequence(sequence):\n    i = 0\n    while i < len(sequence) - 1:\n        if not sequence[i] < sequence[i + 1]:\n            if increasingSequence(\n                sequence[:i] + sequence[i + 1:]\n            ) or increasingSequence(sequence[: i + 1] + sequence[i + 2:]):\n                return True\n            else:\n                return False",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "increasingSequence",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def increasingSequence(sequence):\n    for i in range(len(sequence) - 1):\n        if not sequence[i] < sequence[i + 1]:\n            return False\n    return True\ndef matrixElementsSum(matrix):\n    if len(matrix) > 1:\n        for row in range(1, len(matrix)):\n            for room in range(len(matrix[row])):\n                if matrix[row - 1][room] == 0:",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "matrixElementsSum",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def matrixElementsSum(matrix):\n    if len(matrix) > 1:\n        for row in range(1, len(matrix)):\n            for room in range(len(matrix[row])):\n                if matrix[row - 1][room] == 0:\n                    matrix[row][room] = 0\n    sum = 0\n    for row in matrix:\n        for room in row:\n            sum += room",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "allLongestStrings",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def allLongestStrings(inputArray):\n    length = max([len(word) for word in inputArray])\n    result = [word for word in inputArray if len(word) == length]\n    return result\ndef commonCharacterCount(s1, s2):\n    count = 0\n    word2 = list(s2)\n    for letter in s1:\n        if letter in word2:\n            word2.remove(letter)",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "commonCharacterCount",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def commonCharacterCount(s1, s2):\n    count = 0\n    word2 = list(s2)\n    for letter in s1:\n        if letter in word2:\n            word2.remove(letter)\n            count += 1\n    return count\ndef isLucky(n):\n    string = str(n)",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "isLucky",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def isLucky(n):\n    string = str(n)\n    top = [int(x) for x in string[: len(string) // 2]]\n    bottom = [int(x) for x in string[len(string) // 2:]]\n    return sum(top) == sum(bottom)\ndef sortByHeight(a):\n    treePositions = [x for x in range(len(a)) if a[x] == -1]\n    people = sorted([x for x in a if x != -1])\n    for tree in treePositions:\n        people.insert(tree, -1)",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "sortByHeight",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def sortByHeight(a):\n    treePositions = [x for x in range(len(a)) if a[x] == -1]\n    people = sorted([x for x in a if x != -1])\n    for tree in treePositions:\n        people.insert(tree, -1)\n    return people\nimport re\ndef reverseParentheses(s):\n    while \"(\" in s:\n        match = re.search(\"\\([^()]*\\)\", s)",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "reverseParentheses",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def reverseParentheses(s):\n    while \"(\" in s:\n        match = re.search(\"\\([^()]*\\)\", s)\n        match_string = match.group(0)[1: len(match.group(0)) - 1]\n        reversed_match_string = match_string[::-1]\n        s = s[: match.start()] + reversed_match_string + s[match.end():]\n    return s\ndef alternatingSums(a):\n    team1 = sum(a[0::2])\n    team2 = sum(a[1::2])",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "alternatingSums",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def alternatingSums(a):\n    team1 = sum(a[0::2])\n    team2 = sum(a[1::2])\n    return [team1, team2]\ndef addBorder(picture):\n    picture = [\"*\" + string + \"*\" for string in picture]\n    picture = [(\"*\" * len(picture[0]))] + picture + [(\"*\" * len(picture[0]))]\n    return picture\ndef areSimilar(a, b):\n    diff = [i for i in range(len(a)) if a[i] != b[i]]",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "addBorder",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def addBorder(picture):\n    picture = [\"*\" + string + \"*\" for string in picture]\n    picture = [(\"*\" * len(picture[0]))] + picture + [(\"*\" * len(picture[0]))]\n    return picture\ndef areSimilar(a, b):\n    diff = [i for i in range(len(a)) if a[i] != b[i]]\n    if len(diff) == 2:\n        b[diff[0]], b[diff[1]] = b[diff[1]], b[diff[0]]\n    return a == b\ndef arrayChange(inputArray):",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "areSimilar",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def areSimilar(a, b):\n    diff = [i for i in range(len(a)) if a[i] != b[i]]\n    if len(diff) == 2:\n        b[diff[0]], b[diff[1]] = b[diff[1]], b[diff[0]]\n    return a == b\ndef arrayChange(inputArray):\n    count = 0\n    for i in range(1, len(inputArray)):\n        if inputArray[i - 1] >= inputArray[i]:\n            difference = inputArray[i - 1] - inputArray[i]",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "arrayChange",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def arrayChange(inputArray):\n    count = 0\n    for i in range(1, len(inputArray)):\n        if inputArray[i - 1] >= inputArray[i]:\n            difference = inputArray[i - 1] - inputArray[i]\n            inputArray[i] += difference + 1\n            count += difference + 1\n    return count\ndef palindromeRearranging(inputString):\n    inputList = sorted(inputString)",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "palindromeRearranging",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def palindromeRearranging(inputString):\n    inputList = sorted(inputString)\n    foundMiddle = False\n    while len(inputList) > 1:\n        if inputList[0] == inputList[1]:\n            del inputList[1]\n        elif not foundMiddle:\n            foundMiddle = True\n        else:\n            return False",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "areEquallyStrong",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def areEquallyStrong(yourLeft, yourRight, friendsLeft, friendsRight):\n    sameHands = yourLeft == friendsLeft and yourRight == friendsRight\n    differentHands = yourLeft == friendsRight and yourRight == friendsLeft\n    return sameHands or differentHands\ndef arrayMaximalAdjacentDifference(inputArray):\n    diffs = []\n    for i in range(len(inputArray) - 1):\n        diffs.append(abs(inputArray[i] - inputArray[i + 1]))\n    return max(diffs)\ndef isIPv4Address(inputString):",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "arrayMaximalAdjacentDifference",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def arrayMaximalAdjacentDifference(inputArray):\n    diffs = []\n    for i in range(len(inputArray) - 1):\n        diffs.append(abs(inputArray[i] - inputArray[i + 1]))\n    return max(diffs)\ndef isIPv4Address(inputString):\n    strings = [string for string in inputString.split(\".\")]\n    for string in strings:\n        if not string.isdecimal():\n            return False",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "isIPv4Address",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def isIPv4Address(inputString):\n    strings = [string for string in inputString.split(\".\")]\n    for string in strings:\n        if not string.isdecimal():\n            return False\n    nums = [int(num) for num in strings]\n    return max(nums) <= 255 and min(nums) >= 0 and len(nums) == 4\ndef avoidObstacles(inputArray):\n    for length in range(2, max(inputArray) + 2):\n        done = True",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "avoidObstacles",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def avoidObstacles(inputArray):\n    for length in range(2, max(inputArray) + 2):\n        done = True\n        jump = length\n        while jump < (max(inputArray) + length):\n            if jump in inputArray:\n                done = False\n                break\n            jump += length\n        if done:",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "boxBlur",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def boxBlur(image):\n    outImage = []\n    for row in range(1, len(image) - 1):\n        line = []\n        for pixel in range(1, len(image[row]) - 1):\n            total = (\n                image[row - 1][pixel - 1]\n                + image[row - 1][pixel]\n                + image[row - 1][pixel + 1]\n                + image[row][pixel - 1]",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "minesweeper",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def minesweeper(matrix):\n    TOP = 0\n    BOTTOM = len(matrix) - 1\n    LEFT = 0\n    RIGHT = len(matrix[0]) - 1\n    outMatrix = []\n    for row in range(len(matrix)):\n        outRow = []\n        for cell in range(len(matrix[row])):\n            outRow.append(0)",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "arrayReplace",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def arrayReplace(inputArray, elemToReplace, substitutionElem):\n    return [x if x != elemToReplace else substitutionElem for x in inputArray]\ndef evenDigitsOnly(n):\n    return all(\n        (True if digit in (\"0\", \"2\", \"4\", \"6\", \"8\") else False for digit in str(n))\n    )\ndef variableName(name):\n    return name.replace(\"_\", \"\").isalnum() and not name[0].isdigit()\ndef alphabeticShift(inputString):\n    return \"\".join([chr(ord(x) + 1) if x != \"z\" else \"a\" for x in inputString])",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "evenDigitsOnly",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def evenDigitsOnly(n):\n    return all(\n        (True if digit in (\"0\", \"2\", \"4\", \"6\", \"8\") else False for digit in str(n))\n    )\ndef variableName(name):\n    return name.replace(\"_\", \"\").isalnum() and not name[0].isdigit()\ndef alphabeticShift(inputString):\n    return \"\".join([chr(ord(x) + 1) if x != \"z\" else \"a\" for x in inputString])\ndef chessBoardCellColor(cell1, cell2):\n    color1 = ((ord(cell1[0]) - ord(\"A\")) + ord(cell1[1]) - ord(\"1\")) % 2 == 0",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "variableName",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def variableName(name):\n    return name.replace(\"_\", \"\").isalnum() and not name[0].isdigit()\ndef alphabeticShift(inputString):\n    return \"\".join([chr(ord(x) + 1) if x != \"z\" else \"a\" for x in inputString])\ndef chessBoardCellColor(cell1, cell2):\n    color1 = ((ord(cell1[0]) - ord(\"A\")) + ord(cell1[1]) - ord(\"1\")) % 2 == 0\n    color2 = ((ord(cell2[0]) - ord(\"A\")) + ord(cell2[1]) - ord(\"1\")) % 2 == 0\n    return color1 == color2\ndef circleOfNumbers(n, firstNumber):\n    return (firstNumber + (n / 2)) % n",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "alphabeticShift",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def alphabeticShift(inputString):\n    return \"\".join([chr(ord(x) + 1) if x != \"z\" else \"a\" for x in inputString])\ndef chessBoardCellColor(cell1, cell2):\n    color1 = ((ord(cell1[0]) - ord(\"A\")) + ord(cell1[1]) - ord(\"1\")) % 2 == 0\n    color2 = ((ord(cell2[0]) - ord(\"A\")) + ord(cell2[1]) - ord(\"1\")) % 2 == 0\n    return color1 == color2\ndef circleOfNumbers(n, firstNumber):\n    return (firstNumber + (n / 2)) % n\ndef depositProfit(deposit, rate, threshold):\n    year = 0",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "chessBoardCellColor",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def chessBoardCellColor(cell1, cell2):\n    color1 = ((ord(cell1[0]) - ord(\"A\")) + ord(cell1[1]) - ord(\"1\")) % 2 == 0\n    color2 = ((ord(cell2[0]) - ord(\"A\")) + ord(cell2[1]) - ord(\"1\")) % 2 == 0\n    return color1 == color2\ndef circleOfNumbers(n, firstNumber):\n    return (firstNumber + (n / 2)) % n\ndef depositProfit(deposit, rate, threshold):\n    year = 0\n    while deposit < threshold:\n        deposit *= 1 + (rate / 100)",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "circleOfNumbers",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def circleOfNumbers(n, firstNumber):\n    return (firstNumber + (n / 2)) % n\ndef depositProfit(deposit, rate, threshold):\n    year = 0\n    while deposit < threshold:\n        deposit *= 1 + (rate / 100)\n        year += 1\n    return year\ndef absoluteValuesSumMinimization(a):\n    sums = {}",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "depositProfit",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def depositProfit(deposit, rate, threshold):\n    year = 0\n    while deposit < threshold:\n        deposit *= 1 + (rate / 100)\n        year += 1\n    return year\ndef absoluteValuesSumMinimization(a):\n    sums = {}\n    for num in a:\n        total = sum([abs(a[i] - num) for i in range(len(a))])",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "absoluteValuesSumMinimization",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def absoluteValuesSumMinimization(a):\n    sums = {}\n    for num in a:\n        total = sum([abs(a[i] - num) for i in range(len(a))])\n        if total in sums:\n            sums[total] = min(num, sums[total])\n        else:\n            sums[total] = num\n        print(sums)\n    return sums[min(sums)]",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "stringsRearrangement",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def stringsRearrangement(inputArray):\n    permutations = itertools.permutations(inputArray)\n    for array in permutations:\n        if testArrangement(array):\n            return True\n    return False\ndef testArrangement(array):\n    for i in range(len(array) - 1):\n        if sum([a != b for a, b in zip(array[i], array[i + 1])]) != 1:\n            return False",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "testArrangement",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def testArrangement(array):\n    for i in range(len(array) - 1):\n        if sum([a != b for a, b in zip(array[i], array[i + 1])]) != 1:\n            return False\n    return True\ndef extractEachKth(inputArray, k):\n    return [inputArray[x] for x in range(len(inputArray)) if (x + 1) % k != 0]\ndef firstDigit(inputString):\n    for char in inputString:\n        if char.isdigit():",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "extractEachKth",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def extractEachKth(inputArray, k):\n    return [inputArray[x] for x in range(len(inputArray)) if (x + 1) % k != 0]\ndef firstDigit(inputString):\n    for char in inputString:\n        if char.isdigit():\n            return char\ndef differentSymbolsNaive(s):\n    return len(set(s))\ndef arrayMaxConsecutiveSum(inputArray, k):\n    sums = [sum(inputArray[:k])]",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "firstDigit",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def firstDigit(inputString):\n    for char in inputString:\n        if char.isdigit():\n            return char\ndef differentSymbolsNaive(s):\n    return len(set(s))\ndef arrayMaxConsecutiveSum(inputArray, k):\n    sums = [sum(inputArray[:k])]\n    for i in range(1, len(inputArray) - k + 1):\n        sums.append(sums[i - 1] - inputArray[i - 1] + inputArray[i + k - 1])",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "differentSymbolsNaive",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def differentSymbolsNaive(s):\n    return len(set(s))\ndef arrayMaxConsecutiveSum(inputArray, k):\n    sums = [sum(inputArray[:k])]\n    for i in range(1, len(inputArray) - k + 1):\n        sums.append(sums[i - 1] - inputArray[i - 1] + inputArray[i + k - 1])\n    return max(sums)\ndef growingPlant(upSpeed, downSpeed, desiredHeight):\n    height = 0\n    days = 1",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "arrayMaxConsecutiveSum",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def arrayMaxConsecutiveSum(inputArray, k):\n    sums = [sum(inputArray[:k])]\n    for i in range(1, len(inputArray) - k + 1):\n        sums.append(sums[i - 1] - inputArray[i - 1] + inputArray[i + k - 1])\n    return max(sums)\ndef growingPlant(upSpeed, downSpeed, desiredHeight):\n    height = 0\n    days = 1\n    height += upSpeed\n    while height < desiredHeight:",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "growingPlant",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def growingPlant(upSpeed, downSpeed, desiredHeight):\n    height = 0\n    days = 1\n    height += upSpeed\n    while height < desiredHeight:\n        days += 1\n        height -= downSpeed\n        height += upSpeed\n    return days\ndef knapsackLight(value1, weight1, value2, weight2, maxW):",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "knapsackLight",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def knapsackLight(value1, weight1, value2, weight2, maxW):\n    if weight1 + weight2 <= maxW:\n        return value1 + value2\n    if weight1 <= maxW and (weight2 > maxW or value1 >= value2):\n        return value1\n    if weight2 <= maxW and (weight1 > maxW or value2 >= value1):\n        return value2\n    return 0\ndef longestDigitsPrefix(inputString):\n    for char in range(len(inputString)):",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "longestDigitsPrefix",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def longestDigitsPrefix(inputString):\n    for char in range(len(inputString)):\n        if not inputString[char].isdigit():\n            return inputString[:char]\n    return inputString\ndef digitDegree(n):\n    degree = 0\n    while len(str(n)) > 1:\n        n = sum((int(digit) for digit in str(n)))\n        degree += 1",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "digitDegree",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def digitDegree(n):\n    degree = 0\n    while len(str(n)) > 1:\n        n = sum((int(digit) for digit in str(n)))\n        degree += 1\n    return degree\ndef bishopAndPawn(bishop, pawn):\n    return abs(ord(bishop[0]) - ord(pawn[0])) == abs(ord(bishop[1]) - ord(pawn[1]))\ndef isBeautifulString(inputString):\n    for letter in range(ord(\"a\"), ord(\"z\")):",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "bishopAndPawn",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def bishopAndPawn(bishop, pawn):\n    return abs(ord(bishop[0]) - ord(pawn[0])) == abs(ord(bishop[1]) - ord(pawn[1]))\ndef isBeautifulString(inputString):\n    for letter in range(ord(\"a\"), ord(\"z\")):\n        if inputString.count(chr(letter)) < inputString.count(chr(letter + 1)):\n            return False\n    return True\ndef findEmailDomain(address):\n    return address[address.rfind(\"@\") + 1:]\ndef buildPalindrome(st):",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "isBeautifulString",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def isBeautifulString(inputString):\n    for letter in range(ord(\"a\"), ord(\"z\")):\n        if inputString.count(chr(letter)) < inputString.count(chr(letter + 1)):\n            return False\n    return True\ndef findEmailDomain(address):\n    return address[address.rfind(\"@\") + 1:]\ndef buildPalindrome(st):\n    if st == st[::-1]:  # Check for initial palindrome\n        return st",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "findEmailDomain",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def findEmailDomain(address):\n    return address[address.rfind(\"@\") + 1:]\ndef buildPalindrome(st):\n    if st == st[::-1]:  # Check for initial palindrome\n        return st\n    index = 0\n    subStr = st[index:]\n    while subStr != subStr[::-1]:  # while substring is not a palindrome\n        index += 1\n        subStr = st[index:]",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "buildPalindrome",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def buildPalindrome(st):\n    if st == st[::-1]:  # Check for initial palindrome\n        return st\n    index = 0\n    subStr = st[index:]\n    while subStr != subStr[::-1]:  # while substring is not a palindrome\n        index += 1\n        subStr = st[index:]\n    return st + st[index - 1:: -1]\ndef electionsWinners(votes, k):",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "electionsWinners",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def electionsWinners(votes, k):\n    winners = 0\n    current_winner = max(votes)\n    for candidate in votes:\n        if k > 0 and candidate + k > current_winner:\n            winners += 1\n        if k == 0 and candidate == current_winner and votes.count(candidate) == 1:\n            winners += 1\n    return winners\ndef isMAC48Address(inputString):",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "isMAC48Address",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def isMAC48Address(inputString):\n    hex_chars = (\n        \"1\",\n        \"2\",\n        \"3\",\n        \"4\",\n        \"5\",\n        \"6\",\n        \"7\",\n        \"8\",",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "isDigit",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def isDigit(symbol):\n    return symbol.isdigit()\ndef lineEncoding(s):\n    count = 1\n    output = []\n    for char in range(1, len(s)):\n        if s[char] == s[char - 1]:\n            count += 1\n        else:\n            if count > 1:",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "lineEncoding",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def lineEncoding(s):\n    count = 1\n    output = []\n    for char in range(1, len(s)):\n        if s[char] == s[char - 1]:\n            count += 1\n        else:\n            if count > 1:\n                output.append(str(count) + s[char - 1])\n            else:",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "chessKnight",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def chessKnight(cell):\n    moves = 0\n    # Starting at the top left, going counter-clockwise\n    if ord(cell[0]) >= ord(\"b\") and ord(cell[1]) <= ord(\"6\"):\n        moves += 1\n    if ord(cell[0]) >= ord(\"c\") and ord(cell[1]) <= ord(\"7\"):\n        moves += 1\n    if ord(cell[0]) >= ord(\"c\") and ord(cell[1]) >= ord(\"2\"):\n        moves += 1\n    if ord(cell[0]) >= ord(\"b\") and ord(cell[1]) >= ord(\"3\"):",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "deleteDigit",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def deleteDigit(n):\n    num = str(n)\n    highest = 0\n    for digit in range(len(num)):\n        output = num[:digit] + num[digit + 1:]\n        if int(output) > int(highest):\n            highest = output\n    return int(highest)\ndef longestWord(text):\n    longest = []",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "longestWord",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def longestWord(text):\n    longest = []\n    word = []\n    for char in text:\n        if ord(\"A\") <= ord(char) <= ord(\"Z\") or ord(\"a\") <= ord(char) <= ord(\"z\"):\n            word.append(char)\n        else:\n            if len(word) > len(longest):\n                longest = word\n            word = []",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "validTime",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def validTime(time):\n    groups = time.split(\":\")\n    if len(groups) != 2:\n        return False\n    if not (groups[0].isdigit() and groups[1].isdigit()):\n        return False\n    if int(groups[0]) > 23 or int(groups[1]) > 59:\n        return False\n    return True\ndef sumUpNumbers(inputString):",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "sumUpNumbers",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def sumUpNumbers(inputString):\n    total = 0\n    current_num = []\n    for char in inputString:\n        if char.isdigit():\n            current_num.append(char)\n        else:\n            if len(current_num) > 0:\n                num = int(\"\".join(current_num))\n                total += num",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "differentSquares",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def differentSquares(matrix):\n    squares = set()\n    for row in range(len(matrix) - 1):\n        for cell in range(len(matrix[row]) - 1):\n            square = (\n                (matrix[row][cell], matrix[row][cell + 1]),\n                (matrix[row + 1][cell], matrix[row + 1][cell + 1]),\n            )\n            squares.add(square)\n    return len(squares)",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "digitsProduct",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def digitsProduct(product):\n    # New idea: add product to factors\n    # while max(factors) > 10: split that num into factors\n    if product == 0:\n        return 10\n    factors = [product]\n    while max(factors) > 9:\n        factored = findFactors(max(factors))\n        if factored:\n            factors.remove(max(factors))",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "findFactors",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def findFactors(n):\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return i, n // i\n    return False\ndef fileNaming(names):\n    outnames = []\n    for name in names:\n        if name in outnames:\n            k = 1",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "fileNaming",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def fileNaming(names):\n    outnames = []\n    for name in names:\n        if name in outnames:\n            k = 1\n            while \"{}({})\".format(name, k) in outnames:\n                k += 1\n            name = \"{}({})\".format(name, k)\n        outnames.append(name)\n    return outnames",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "messageFromBinaryCode",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def messageFromBinaryCode(code):\n    output = []\n    for i in range(0, len(code), 8):\n        letter = chr(int(code[i : i + 8], 2))\n        output.append(letter)\n    return \"\".join(output)\ndef spiralNumbers(n):\n    LEFT = \"left\"\n    RIGHT = \"right\"\n    UP = \"up\"",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "spiralNumbers",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def spiralNumbers(n):\n    LEFT = \"left\"\n    RIGHT = \"right\"\n    UP = \"up\"\n    DOWN = \"down\"\n    direction = RIGHT\n    spiral = [[0 for i in range(n)] for j in range(n)]\n    row = 0\n    cell = 0\n    for num in range(1, (n * n) + 1):",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "sudoku",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def sudoku(grid):\n    match = [i for i in range(1, 10)]\n    for row in grid:\n        if sorted(row) != match:\n            return False\n    for column_index in range(9):\n        column = [grid[row_index][column_index] for row_index in range(9)]\n        if sorted(column) != match:\n            return False\n    for row in range(0, 9, 3):",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "addTwoDigits",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def addTwoDigits(n):\n    return (n // 10) + (n % 10)\ndef largestNumber(n):\n    return int(\"9\" * n)\ndef candies(n, m):\n    return (m // n) * n\ndef seatsInTheater(nCols, nRows, col, row):\n    return (nCols - col + 1) * (nRows - row)\ndef maxMultiple(divisor, bound):\n    for num in range(bound, 1, -1):",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "largestNumber",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def largestNumber(n):\n    return int(\"9\" * n)\ndef candies(n, m):\n    return (m // n) * n\ndef seatsInTheater(nCols, nRows, col, row):\n    return (nCols - col + 1) * (nRows - row)\ndef maxMultiple(divisor, bound):\n    for num in range(bound, 1, -1):\n        if num % divisor == 0:\n            return num",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "candies",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def candies(n, m):\n    return (m // n) * n\ndef seatsInTheater(nCols, nRows, col, row):\n    return (nCols - col + 1) * (nRows - row)\ndef maxMultiple(divisor, bound):\n    for num in range(bound, 1, -1):\n        if num % divisor == 0:\n            return num\n    return 0\ndef circleOfNumbers(n, firstNumber):",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "seatsInTheater",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def seatsInTheater(nCols, nRows, col, row):\n    return (nCols - col + 1) * (nRows - row)\ndef maxMultiple(divisor, bound):\n    for num in range(bound, 1, -1):\n        if num % divisor == 0:\n            return num\n    return 0\ndef circleOfNumbers(n, firstNumber):\n    return (firstNumber + (n // 2)) % n\ndef lateRide(n):",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "maxMultiple",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def maxMultiple(divisor, bound):\n    for num in range(bound, 1, -1):\n        if num % divisor == 0:\n            return num\n    return 0\ndef circleOfNumbers(n, firstNumber):\n    return (firstNumber + (n // 2)) % n\ndef lateRide(n):\n    hours = n // 60\n    minutes = n % 60",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "circleOfNumbers",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def circleOfNumbers(n, firstNumber):\n    return (firstNumber + (n // 2)) % n\ndef lateRide(n):\n    hours = n // 60\n    minutes = n % 60\n    return (hours // 10) + (hours % 10) + (minutes // 10) + (minutes % 10)\ndef phoneCall(min1, min2_10, min11, s):\n    if s < min1:\n        return 0\n    if s == min1:",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "lateRide",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def lateRide(n):\n    hours = n // 60\n    minutes = n % 60\n    return (hours // 10) + (hours % 10) + (minutes // 10) + (minutes % 10)\ndef phoneCall(min1, min2_10, min11, s):\n    if s < min1:\n        return 0\n    if s == min1:\n        return 1\n    if s <= min1 + (min2_10 * 9):",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "phoneCall",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def phoneCall(min1, min2_10, min11, s):\n    if s < min1:\n        return 0\n    if s == min1:\n        return 1\n    if s <= min1 + (min2_10 * 9):\n        s -= min1\n        return (s // min2_10) + 1\n    s -= min1\n    s -= min2_10 * 9",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "reachNextLevel",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def reachNextLevel(experience, threshold, reward):\n    return experience + reward >= threshold\ndef knapsackLight(value1, weight1, value2, weight2, maxW):\n    if weight1 + weight2 <= maxW:\n        return value1 + value2\n    if weight1 <= maxW and weight2 <= maxW:\n        return max(value1, value2)\n    if weight1 <= maxW:\n        return value1\n    if weight2 <= maxW:",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "knapsackLight",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def knapsackLight(value1, weight1, value2, weight2, maxW):\n    if weight1 + weight2 <= maxW:\n        return value1 + value2\n    if weight1 <= maxW and weight2 <= maxW:\n        return max(value1, value2)\n    if weight1 <= maxW:\n        return value1\n    if weight2 <= maxW:\n        return value2\n    return 0",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "extraNumber",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def extraNumber(a, b, c):\n    if a == b:\n        return c\n    if a == c:\n        return b\n    return a\ndef isInfiniteProcess(a, b):\n    return a > b or (a % 2 != b % 2)\ndef arithmeticExpression(a, b, c):\n    return a + b == c or a - b == c or a * b == c or a / b == c",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "isInfiniteProcess",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def isInfiniteProcess(a, b):\n    return a > b or (a % 2 != b % 2)\ndef arithmeticExpression(a, b, c):\n    return a + b == c or a - b == c or a * b == c or a / b == c\ndef tennisSet(score1, score2):\n    if max(score1, score2) == 6 and min(score1, score2) < 5:\n        return True\n    if 5 <= min(score1, score2) <= 6 and max(score1, score2) == 7:\n        return True\n    return False",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "arithmeticExpression",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def arithmeticExpression(a, b, c):\n    return a + b == c or a - b == c or a * b == c or a / b == c\ndef tennisSet(score1, score2):\n    if max(score1, score2) == 6 and min(score1, score2) < 5:\n        return True\n    if 5 <= min(score1, score2) <= 6 and max(score1, score2) == 7:\n        return True\n    return False\ndef willYou(young, beautiful, loved):\n    return (young and beautiful) != loved",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "tennisSet",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def tennisSet(score1, score2):\n    if max(score1, score2) == 6 and min(score1, score2) < 5:\n        return True\n    if 5 <= min(score1, score2) <= 6 and max(score1, score2) == 7:\n        return True\n    return False\ndef willYou(young, beautiful, loved):\n    return (young and beautiful) != loved\ndef metroCard(lastNumberOfDays):\n    if lastNumberOfDays == 30 or lastNumberOfDays == 28:",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "willYou",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def willYou(young, beautiful, loved):\n    return (young and beautiful) != loved\ndef metroCard(lastNumberOfDays):\n    if lastNumberOfDays == 30 or lastNumberOfDays == 28:\n        return [31]\n    return [28, 30, 31]\ndef killKthBit(n, k):\n    return n & ~(2 ** (k - 1))\ndef arrayPacking(a):\n    binary_array = [bin(num)[2:].rjust(8, \"0\") for num in a]",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "metroCard",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def metroCard(lastNumberOfDays):\n    if lastNumberOfDays == 30 or lastNumberOfDays == 28:\n        return [31]\n    return [28, 30, 31]\ndef killKthBit(n, k):\n    return n & ~(2 ** (k - 1))\ndef arrayPacking(a):\n    binary_array = [bin(num)[2:].rjust(8, \"0\") for num in a]\n    out_string = \"\".join(binary_array[::-1])\n    return int(out_string, 2)",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "killKthBit",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def killKthBit(n, k):\n    return n & ~(2 ** (k - 1))\ndef arrayPacking(a):\n    binary_array = [bin(num)[2:].rjust(8, \"0\") for num in a]\n    out_string = \"\".join(binary_array[::-1])\n    return int(out_string, 2)\ndef rangeBitCount(a, b):\n    array = list(range(a, b + 1))\n    binary_array = [bin(num) for num in array]\n    count_array = [binary.count(\"1\") for binary in binary_array]",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "arrayPacking",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def arrayPacking(a):\n    binary_array = [bin(num)[2:].rjust(8, \"0\") for num in a]\n    out_string = \"\".join(binary_array[::-1])\n    return int(out_string, 2)\ndef rangeBitCount(a, b):\n    array = list(range(a, b + 1))\n    binary_array = [bin(num) for num in array]\n    count_array = [binary.count(\"1\") for binary in binary_array]\n    return sum(count_array)\ndef mirrorBits(a):",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "rangeBitCount",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def rangeBitCount(a, b):\n    array = list(range(a, b + 1))\n    binary_array = [bin(num) for num in array]\n    count_array = [binary.count(\"1\") for binary in binary_array]\n    return sum(count_array)\ndef mirrorBits(a):\n    binary = bin(a)[2:]\n    return int(binary[::-1], 2)\ndef secondRightmostZeroBit(n):\n    return 2 ** bin(n)[::-1].find(\"0\", bin(n)[::-1].find(\"0\") + 1)",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "mirrorBits",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def mirrorBits(a):\n    binary = bin(a)[2:]\n    return int(binary[::-1], 2)\ndef secondRightmostZeroBit(n):\n    return 2 ** bin(n)[::-1].find(\"0\", bin(n)[::-1].find(\"0\") + 1)\ndef swapAdjacentBits(n):\n    return ((n >> 1) & 1431655765) | ((n << 1) & 2863311530)\ndef differentRightmostBit(n, m):\n    return 2 ** bin((n ^ m))[::-1].find(\"1\")\ndef equalPairOfBits(n, m):",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "secondRightmostZeroBit",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def secondRightmostZeroBit(n):\n    return 2 ** bin(n)[::-1].find(\"0\", bin(n)[::-1].find(\"0\") + 1)\ndef swapAdjacentBits(n):\n    return ((n >> 1) & 1431655765) | ((n << 1) & 2863311530)\ndef differentRightmostBit(n, m):\n    return 2 ** bin((n ^ m))[::-1].find(\"1\")\ndef equalPairOfBits(n, m):\n    return 2 ** bin(~(n ^ m))[::-1].find(\"1\")\ndef leastFactorial(n):\n    factorial = 1",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "swapAdjacentBits",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def swapAdjacentBits(n):\n    return ((n >> 1) & 1431655765) | ((n << 1) & 2863311530)\ndef differentRightmostBit(n, m):\n    return 2 ** bin((n ^ m))[::-1].find(\"1\")\ndef equalPairOfBits(n, m):\n    return 2 ** bin(~(n ^ m))[::-1].find(\"1\")\ndef leastFactorial(n):\n    factorial = 1\n    index = 1\n    while factorial < n:",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "differentRightmostBit",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def differentRightmostBit(n, m):\n    return 2 ** bin((n ^ m))[::-1].find(\"1\")\ndef equalPairOfBits(n, m):\n    return 2 ** bin(~(n ^ m))[::-1].find(\"1\")\ndef leastFactorial(n):\n    factorial = 1\n    index = 1\n    while factorial < n:\n        index += 1\n        factorial *= index",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "equalPairOfBits",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def equalPairOfBits(n, m):\n    return 2 ** bin(~(n ^ m))[::-1].find(\"1\")\ndef leastFactorial(n):\n    factorial = 1\n    index = 1\n    while factorial < n:\n        index += 1\n        factorial *= index\n    return factorial\ndef countSumOfTwoRepresentations2(n, l, r):",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "leastFactorial",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def leastFactorial(n):\n    factorial = 1\n    index = 1\n    while factorial < n:\n        index += 1\n        factorial *= index\n    return factorial\ndef countSumOfTwoRepresentations2(n, l, r):\n    count = 0\n    a = max(n - r, l)",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "countSumOfTwoRepresentations2",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def countSumOfTwoRepresentations2(n, l, r):\n    count = 0\n    a = max(n - r, l)\n    b = n - a\n    while a <= r and a <= b:\n        count += 1\n        a += 1\n        b -= 1\n    return count\ndef magicalWell(a, b, n):",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "magicalWell",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def magicalWell(a, b, n):\n    total = 0\n    for i in range(n):\n        total += a * b\n        a += 1\n        b += 1\n    return total\ndef lineUp(commands):\n    count = 0\n    smart_student = 0",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "lineUp",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def lineUp(commands):\n    count = 0\n    smart_student = 0\n    dumb_student = 0\n    for command in commands:\n        if command == \"L\":\n            smart_student = (smart_student - 1) % 4\n            dumb_student = (dumb_student + 1) % 4\n        elif command == \"R\":\n            smart_student = (smart_student + 1) % 4",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "additionWithoutCarrying",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def additionWithoutCarrying(param1, param2):\n    # Convert numbers to strings\n    str1 = str(param1)\n    str2 = str(param2)\n    # Pad both to the same length with zeroes (to the left of the numbers)\n    length = max(len(str2), len(str1))\n    str1 = str1.rjust(length, \"0\")\n    str2 = str2.rjust(length, \"0\")\n    output = []\n    for num1, num2 in zip(str1, str2):",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "appleBoxes",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def appleBoxes(k):\n    red = 0\n    yellow = 0\n    for i in range(1, k + 1, 2):\n        yellow += i * i\n    for i in range(2, k + 1, 2):\n        red += i * i\n    return red - yellow\ndef increaseNumberRoundness(n):\n    string = str(n)",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "increaseNumberRoundness",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def increaseNumberRoundness(n):\n    string = str(n)\n    # Check for immediate rejection\n    if \"0\" not in string or len(string) < 2:\n        return False\n    # Since we know there's a 0, if it's not on\n    # the left, then we know to accept\n    if string[-1] != \"0\":\n        return True\n    # If there is only one 0, it must be at the end, so reject.",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "rounders",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def rounders(value):\n    length = len(str(value))\n    magnitude = length - 1\n    for i in range(length - 1):\n        value = int((value / 10) + 0.5)\n    return value * (10 ** magnitude)\ndef candles(candlesNumber, makeNew):\n    totalBurned = 0\n    leftovers = 0\n    while candlesNumber > 0:",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "candles",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def candles(candlesNumber, makeNew):\n    totalBurned = 0\n    leftovers = 0\n    while candlesNumber > 0:\n        totalBurned += candlesNumber\n        leftovers += candlesNumber\n        candlesNumber = 0\n        candlesNumber = leftovers // makeNew\n        leftovers = leftovers % makeNew\n    return totalBurned",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "countBlackCells",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def countBlackCells(n, m):\n    gcd = find_gcd(n, m)\n    line_cells = n + m - gcd\n    line_corner_cells = (gcd - 1) * 2\n    return line_cells + line_corner_cells\ndef find_gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\ndef createArray(size):",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "find_gcd",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def find_gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\ndef createArray(size):\n    return [1] * size\ndef arrayReplace(inputArray, elemToReplace, substitutionElem):\n    output = [\n        elem if elem != elemToReplace else substitutionElem for elem in inputArray\n    ]",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "createArray",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def createArray(size):\n    return [1] * size\ndef arrayReplace(inputArray, elemToReplace, substitutionElem):\n    output = [\n        elem if elem != elemToReplace else substitutionElem for elem in inputArray\n    ]\n    return output\ndef firstReverseTry(arr):\n    if len(arr) < 2:\n        return arr",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "arrayReplace",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def arrayReplace(inputArray, elemToReplace, substitutionElem):\n    output = [\n        elem if elem != elemToReplace else substitutionElem for elem in inputArray\n    ]\n    return output\ndef firstReverseTry(arr):\n    if len(arr) < 2:\n        return arr\n    if len(arr) < 4:\n        return arr[::-1]",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "firstReverseTry",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def firstReverseTry(arr):\n    if len(arr) < 2:\n        return arr\n    if len(arr) < 4:\n        return arr[::-1]\n    return arr[-1:] + arr[1:-1] + arr[:1]\ndef concatenateArrays(a, b):\n    return a + b\ndef removeArrayPart(inputArray, l, r):\n    return inputArray[:l] + inputArray[r + 1 :]",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "concatenateArrays",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def concatenateArrays(a, b):\n    return a + b\ndef removeArrayPart(inputArray, l, r):\n    return inputArray[:l] + inputArray[r + 1 :]\ndef isSmooth(arr):\n    if arr[0] != arr[-1]:\n        return False\n    if len(arr) % 2 == 0:\n        middle = arr[len(arr) // 2] + arr[(len(arr) // 2) - 1]\n    else:",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "removeArrayPart",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def removeArrayPart(inputArray, l, r):\n    return inputArray[:l] + inputArray[r + 1 :]\ndef isSmooth(arr):\n    if arr[0] != arr[-1]:\n        return False\n    if len(arr) % 2 == 0:\n        middle = arr[len(arr) // 2] + arr[(len(arr) // 2) - 1]\n    else:\n        middle = arr[len(arr) // 2]\n    return arr[0] == middle",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "isSmooth",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def isSmooth(arr):\n    if arr[0] != arr[-1]:\n        return False\n    if len(arr) % 2 == 0:\n        middle = arr[len(arr) // 2] + arr[(len(arr) // 2) - 1]\n    else:\n        middle = arr[len(arr) // 2]\n    return arr[0] == middle\ndef replaceMiddle(arr):\n    if len(arr) % 2 != 0:",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "replaceMiddle",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def replaceMiddle(arr):\n    if len(arr) % 2 != 0:\n        return arr\n    right_middle = len(arr) // 2\n    middle_value = arr[right_middle] + arr[right_middle - 1]\n    return arr[: right_middle - 1] + [middle_value] + arr[right_middle + 1 :]\ndef makeArrayConsecutive2(statues):\n    count = 0\n    for i in range(min(statues), max(statues)):\n        if i not in statues:",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "makeArrayConsecutive2",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def makeArrayConsecutive2(statues):\n    count = 0\n    for i in range(min(statues), max(statues)):\n        if i not in statues:\n            count += 1\n    return count\ndef isPower(n):\n    if n == 1:\n        return True\n    a = 2",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "isPower",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def isPower(n):\n    if n == 1:\n        return True\n    a = 2\n    b = 2\n    while a ** 2 <= n:\n        while a ** b <= n:\n            if a ** b == n:\n                return True\n            b += 1",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "isSumOfConsecutive2",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def isSumOfConsecutive2(n):\n    count = 0\n    right = 2\n    arr = [1, 2]\n    while right <= (n // 2) + 1:\n        total = sum(arr)\n        if total == n:\n            count += 1\n            del arr[0]\n        elif total < n:",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "squareDigitsSequence",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def squareDigitsSequence(a0):\n    sequence = [a0]\n    while sequence[-1] not in sequence[:-1]:\n        next_value = 0\n        for digit in str(sequence[-1]):\n            next_value += int(digit) ** 2\n        sequence.append(next_value)\n    return len(sequence)\ndef pagesNumberingWithInk(current, numberOfDigits):\n    numberOfDigits -= len(str(current))",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "pagesNumberingWithInk",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def pagesNumberingWithInk(current, numberOfDigits):\n    numberOfDigits -= len(str(current))\n    next_digits = len(str(current + 1))\n    while numberOfDigits >= next_digits:\n        current += 1\n        numberOfDigits -= next_digits\n        next_digits = len(str(current))\n    return current\ndef comfortableNumbers(l, r):\n    count = 0",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "comfortableNumbers",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def comfortableNumbers(l, r):\n    count = 0\n    for a in range(l, r):\n        for b in range(a + 1, r + 1):\n            a_sum = sum(int(digit) for digit in str(a))\n            b_sum = sum(int(digit) for digit in str(b))\n            if b <= a + a_sum and a >= b - b_sum:\n                count += 1\n    return count\ndef weakNumbers(n):",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "weakNumbers",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def weakNumbers(n):\n    all_factors = [count_factors(num) for num in range(1, n + 1)]\n    weaknesses = []\n    for num, num_factors in enumerate(all_factors, 1):\n            weakness = 0\n            for factor in all_factors[:num]:\n                if factor > num_factors:\n                    weakness += 1\n            weaknesses.append(weakness)\n            weakest = max(weaknesses)",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "count_factors",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def count_factors(n):\n    factors = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            factors += 1\n    return factors\nprint(weakNumbers(500))\nimport math\ndef rectangleRotation(a, b):\n    n = a / (2 ** 0.5)",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "rectangleRotation",
    "kind": 2,
    "importPath": "CodeSignal-Solutions.merged",
    "description": "CodeSignal-Solutions.merged",
    "peekOfCode": "def rectangleRotation(a, b):\n    n = a / (2 ** 0.5)\n    m = b / (2 ** 0.5)\n    points = (math.floor(n) * math.floor(m)) + (math.ceil(n) * math.ceil(m))\n    if math.floor(n) % 2 != math.floor(m) % 2:\n        points -= 1\n    return points\n# rectangleRotation(6, 4)\nprint(rectangleRotation(8, 6))",
    "detail": "CodeSignal-Solutions.merged",
    "documentation": {}
  },
  {
    "label": "add",
    "kind": 2,
    "importPath": "d1.challenges.challenges",
    "description": "d1.challenges.challenges",
    "peekOfCode": "def add(a, b):\n    return a + b\nprint(add(3, 2))\n# \"\"\"\n# Challenge #2:\n# Write a function that takes an integer `minutes` and converts it to seconds.\n# Examples:\n# - convert(5) ➞ 300\n# - convert(3) ➞ 180\n# - convert(2) ➞ 120",
    "detail": "d1.challenges.challenges",
    "documentation": {}
  },
  {
    "label": "convert",
    "kind": 2,
    "importPath": "d1.challenges.challenges",
    "description": "d1.challenges.challenges",
    "peekOfCode": "def convert(minutes):\n    return minutes * 60\nprint(convert(5))\n# \"\"\"\n# Challenge #3:\n# Create a function that takes a string and returns it as an integer.\n# Examples:\n# - string_int(\"6\") ➞ 6\n# - string_int(\"1000\") ➞ 1000\n# - string_int(\"12\") ➞ 12",
    "detail": "d1.challenges.challenges",
    "documentation": {}
  },
  {
    "label": "string_int",
    "kind": 2,
    "importPath": "d1.challenges.challenges",
    "description": "d1.challenges.challenges",
    "peekOfCode": "def string_int(txt):\n    return int(txt)\nprint(string_int(\"6\"))\nprint(string_int(\"1000\"))\nprint(string_int(\"12\"))\n# \"\"\"\n# Challenge #4:\n# Create a function that takes length and width and finds the perimeter of a\n# rectangle.\n# Examples:",
    "detail": "d1.challenges.challenges",
    "documentation": {}
  },
  {
    "label": "greet",
    "kind": 2,
    "importPath": "d1.challenges.cs46_python_i",
    "description": "d1.challenges.cs46_python_i",
    "peekOfCode": "def greet(name=\"world!\"):\n  print(type(name))\n  print(f\"Hello {name}\")\ngreet(\"1234\")\n# lets play with some strings\n# ['capitalize', 'casefold', 'center', 'count', 'encode', 'endswith', 'expandtabs', 'find', 'format', 'format_map', 'index', 'isalnum', 'isalpha', 'isascii', 'isdecimal', 'isdigit', 'isidentifier', 'islower', 'isnumeric', 'isprintable', 'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lower', 'lstrip', 'maketrans', 'partition', 'replace', 'rfind', 'rindex', 'rjust', 'rpartition', 'rsplit', 'rstrip', 'split', 'splitlines', 'startswith', 'strip', 'swapcase', 'title', 'translate', 'upper', 'zfill']\n# print(dir(\"\"))\nprint(help(\"\".count))\na = \"aabbccqqqq\"\nprint(a.count(\"q\"))",
    "detail": "d1.challenges.cs46_python_i",
    "documentation": {}
  },
  {
    "label": "addition",
    "kind": 2,
    "importPath": "d1.challenges.cs46_python_i",
    "description": "d1.challenges.cs46_python_i",
    "peekOfCode": "def addition(a, b):\n    # Your code here\n\"\"\"\nChallenge #2:\nWrite a function that takes an integer `minutes` and converts it to seconds.\nExamples:\n- convert(5) ➞ 300\n- convert(3) ➞ 180\n- convert(2) ➞ 120\n\"\"\"",
    "detail": "d1.challenges.cs46_python_i",
    "documentation": {}
  },
  {
    "label": "convert",
    "kind": 2,
    "importPath": "d1.challenges.cs46_python_i",
    "description": "d1.challenges.cs46_python_i",
    "peekOfCode": "def convert(minutes):\n    # Your code here\n\"\"\"\nChallenge #3:\nCreate a function that takes a string and returns it as an integer.\nExamples:\n- string_int(\"6\") ➞ 6\n- string_int(\"1000\") ➞ 1000\n- string_int(\"12\") ➞ 12\n\"\"\"",
    "detail": "d1.challenges.cs46_python_i",
    "documentation": {}
  },
  {
    "label": "string_int",
    "kind": 2,
    "importPath": "d1.challenges.cs46_python_i",
    "description": "d1.challenges.cs46_python_i",
    "peekOfCode": "def string_int(txt):\n    # Your code here\n\"\"\"\nChallenge #4:\nCreate a function that takes length and width and finds the perimeter of a\nrectangle.\nExamples:\n- find_perimeter(6, 7) ➞ 26\n- find_perimeter(20, 10) ➞ 60\n- find_perimeter(2, 9) ➞ 22",
    "detail": "d1.challenges.cs46_python_i",
    "documentation": {}
  },
  {
    "label": "find_perimeter",
    "kind": 2,
    "importPath": "d1.challenges.cs46_python_i",
    "description": "d1.challenges.cs46_python_i",
    "peekOfCode": "def find_perimeter(length, width):\n\"\"\"\nChallenge #5:\nCreate a function that returns a list of strings sorted by length in ascending\norder.\nExamples:\n- sort_by_length([\"a\", \"ccc\", \"dddd\", \"bb\"]) ➞ [\"a\", \"bb\", \"ccc\", \"dddd\"]\n- sort_by_length([\"apple\", \"pie\", \"shortcake\"]) ➞ [\"pie\", \"apple\", \"shortcake\"]\n- sort_by_length([\"may\", \"april\", \"september\", \"august\"]) ➞ [\"may\", \"april\", \"august\", \"september\"]\n- sort_by_length([]) ➞ []",
    "detail": "d1.challenges.cs46_python_i",
    "documentation": {}
  },
  {
    "label": "sort_by_length",
    "kind": 2,
    "importPath": "d1.challenges.cs46_python_i",
    "description": "d1.challenges.cs46_python_i",
    "peekOfCode": "def sort_by_length(lst):\n\"\"\"\nChallenge #6:\nCreate a function that takes a string, checks if it has the same number of \"x\"s\nand \"o\"s and returns either True or False.\n- Return a boolean value (True or False).\n- The string can contain any character.\n- When no x and no o are in the string, return True.\nExamples:\n- XO(\"ooxx\") ➞ True",
    "detail": "d1.challenges.cs46_python_i",
    "documentation": {}
  },
  {
    "label": "XO",
    "kind": 2,
    "importPath": "d1.challenges.cs46_python_i",
    "description": "d1.challenges.cs46_python_i",
    "peekOfCode": "def XO(txt):\n\"\"\"\nChallenge #7:\nGiven an unsorted list, create a function that returns the nth smallest element\n(the smallest element is the first smallest, the second smallest element is the\nsecond smallest, etc).\nExamples:\n- nth_smallest([7, 5, 3, 1], 1) ➞ 1\n- nth_smallest([1, 3, 5, 7], 3) ➞ 5\n- nth_smallest([1, 3, 5, 7], 5) ➞ None",
    "detail": "d1.challenges.cs46_python_i",
    "documentation": {}
  },
  {
    "label": "nth_smallest",
    "kind": 2,
    "importPath": "d1.challenges.cs46_python_i",
    "description": "d1.challenges.cs46_python_i",
    "peekOfCode": "def nth_smallest(lst, n):\n\"\"\"\nChallenge #8:\nCreate a function that returns the number of arguments it was called with.\nExamples:\n- num_args() ➞ 0\n- num_args(\"foo\") ➞ 1\n- num_args(\"foo\", \"bar\") ➞ 2\n- num_args(True, False) ➞ 2\n- num_args({}) ➞ 1",
    "detail": "d1.challenges.cs46_python_i",
    "documentation": {}
  },
  {
    "label": "num_args",
    "kind": 2,
    "importPath": "d1.challenges.cs46_python_i",
    "description": "d1.challenges.cs46_python_i",
    "peekOfCode": "def num_args():\n\"\"\"\nChallenge #9:\nWrite a function that creates a dictionary with each (key, value) pair being\nthe (lower case, upper case) versions of a letter, respectively.\nExamples:\n- mapping([\"p\", \"s\"]) ➞ { \"p\": \"P\", \"s\": \"S\" }\n- mapping([\"a\", \"b\", \"c\"]) ➞ { \"a\": \"A\", \"b\": \"B\", \"c\": \"C\" }\n- mapping([\"a\", \"v\", \"y\", \"z\"]) ➞ { \"a\": \"A\", \"v\": \"V\", \"y\": \"Y\", \"z\": \"Z\" }\nNotes:",
    "detail": "d1.challenges.cs46_python_i",
    "documentation": {}
  },
  {
    "label": "mapping",
    "kind": 2,
    "importPath": "d1.challenges.cs46_python_i",
    "description": "d1.challenges.cs46_python_i",
    "peekOfCode": "def mapping(letters):\n\"\"\"\nChallenge #10:\nCreate a function that applies a discount d to every number in the list.\nExamples:\n- get_discounts([2, 4, 6, 11], \"50%\") ➞ [1, 2, 3, 5.5]\n- get_discounts([10, 20, 40, 80], \"75%\") ➞ [7.5, 15, 30, 60]\n- get_discounts([100], \"45%\") ➞ [45]\nNotes:\n- The discount is the percentage of the original price (i.e the discount of",
    "detail": "d1.challenges.cs46_python_i",
    "documentation": {}
  },
  {
    "label": "get_discounts",
    "kind": 2,
    "importPath": "d1.challenges.cs46_python_i",
    "description": "d1.challenges.cs46_python_i",
    "peekOfCode": "def get_discounts(nums, percentage):",
    "detail": "d1.challenges.cs46_python_i",
    "documentation": {}
  },
  {
    "label": "a",
    "kind": 5,
    "importPath": "d1.challenges.cs46_python_i",
    "description": "d1.challenges.cs46_python_i",
    "peekOfCode": "a = 10\na = \"a string\"\na = 1.2\na = []\na = ()\na = {\"name\": \"Tom\"}\nb = []\nb.append(\"Dave\")\nb.append(\"Bob\")\nb.append(\"Joe\")",
    "detail": "d1.challenges.cs46_python_i",
    "documentation": {}
  },
  {
    "label": "a",
    "kind": 5,
    "importPath": "d1.challenges.cs46_python_i",
    "description": "d1.challenges.cs46_python_i",
    "peekOfCode": "a = \"a string\"\na = 1.2\na = []\na = ()\na = {\"name\": \"Tom\"}\nb = []\nb.append(\"Dave\")\nb.append(\"Bob\")\nb.append(\"Joe\")\n# print(type(a))",
    "detail": "d1.challenges.cs46_python_i",
    "documentation": {}
  },
  {
    "label": "a",
    "kind": 5,
    "importPath": "d1.challenges.cs46_python_i",
    "description": "d1.challenges.cs46_python_i",
    "peekOfCode": "a = 1.2\na = []\na = ()\na = {\"name\": \"Tom\"}\nb = []\nb.append(\"Dave\")\nb.append(\"Bob\")\nb.append(\"Joe\")\n# print(type(a))\n# print(a[\"name\"])",
    "detail": "d1.challenges.cs46_python_i",
    "documentation": {}
  },
  {
    "label": "a",
    "kind": 5,
    "importPath": "d1.challenges.cs46_python_i",
    "description": "d1.challenges.cs46_python_i",
    "peekOfCode": "a = []\na = ()\na = {\"name\": \"Tom\"}\nb = []\nb.append(\"Dave\")\nb.append(\"Bob\")\nb.append(\"Joe\")\n# print(type(a))\n# print(a[\"name\"])\n# print(dir([]))",
    "detail": "d1.challenges.cs46_python_i",
    "documentation": {}
  },
  {
    "label": "a",
    "kind": 5,
    "importPath": "d1.challenges.cs46_python_i",
    "description": "d1.challenges.cs46_python_i",
    "peekOfCode": "a = ()\na = {\"name\": \"Tom\"}\nb = []\nb.append(\"Dave\")\nb.append(\"Bob\")\nb.append(\"Joe\")\n# print(type(a))\n# print(a[\"name\"])\n# print(dir([]))\nprint(b.pop(0))",
    "detail": "d1.challenges.cs46_python_i",
    "documentation": {}
  },
  {
    "label": "a",
    "kind": 5,
    "importPath": "d1.challenges.cs46_python_i",
    "description": "d1.challenges.cs46_python_i",
    "peekOfCode": "a = {\"name\": \"Tom\"}\nb = []\nb.append(\"Dave\")\nb.append(\"Bob\")\nb.append(\"Joe\")\n# print(type(a))\n# print(a[\"name\"])\n# print(dir([]))\nprint(b.pop(0))\nprint(b)",
    "detail": "d1.challenges.cs46_python_i",
    "documentation": {}
  },
  {
    "label": "b",
    "kind": 5,
    "importPath": "d1.challenges.cs46_python_i",
    "description": "d1.challenges.cs46_python_i",
    "peekOfCode": "b = []\nb.append(\"Dave\")\nb.append(\"Bob\")\nb.append(\"Joe\")\n# print(type(a))\n# print(a[\"name\"])\n# print(dir([]))\nprint(b.pop(0))\nprint(b)\n\"\"\"# PYTHON I CODE: 5976\"\"\"",
    "detail": "d1.challenges.cs46_python_i",
    "documentation": {}
  },
  {
    "label": "a",
    "kind": 5,
    "importPath": "d1.challenges.cs46_python_i",
    "description": "d1.challenges.cs46_python_i",
    "peekOfCode": "a = [\"Dave\"] * 25\na[20] = \"Steve\"\n# for n in range(12, 25):\n#   print(a[n])\nfor x in enumerate(a):\n  i = x[0]\n  e = x[1]\n  if i == 9:\n    continue\n  print(i)",
    "detail": "d1.challenges.cs46_python_i",
    "documentation": {}
  },
  {
    "label": "a[20]",
    "kind": 5,
    "importPath": "d1.challenges.cs46_python_i",
    "description": "d1.challenges.cs46_python_i",
    "peekOfCode": "a[20] = \"Steve\"\n# for n in range(12, 25):\n#   print(a[n])\nfor x in enumerate(a):\n  i = x[0]\n  e = x[1]\n  if i == 9:\n    continue\n  print(i)\n  print(e)",
    "detail": "d1.challenges.cs46_python_i",
    "documentation": {}
  },
  {
    "label": "a",
    "kind": 5,
    "importPath": "d1.challenges.cs46_python_i",
    "description": "d1.challenges.cs46_python_i",
    "peekOfCode": "a = int(input(\"input a number! \"))\nb = int(input(\"input a number! \"))4\nprint(f\"{a + b}\")\n\"\"\"# PYTHON I CODE: 5976\"\"\"\n# lets reuse some code...\ndef greet(name=\"world!\"):\n  print(type(name))\n  print(f\"Hello {name}\")\ngreet(\"1234\")\n# lets play with some strings",
    "detail": "d1.challenges.cs46_python_i",
    "documentation": {}
  },
  {
    "label": "b",
    "kind": 5,
    "importPath": "d1.challenges.cs46_python_i",
    "description": "d1.challenges.cs46_python_i",
    "peekOfCode": "b = int(input(\"input a number! \"))4\nprint(f\"{a + b}\")\n\"\"\"# PYTHON I CODE: 5976\"\"\"\n# lets reuse some code...\ndef greet(name=\"world!\"):\n  print(type(name))\n  print(f\"Hello {name}\")\ngreet(\"1234\")\n# lets play with some strings\n# ['capitalize', 'casefold', 'center', 'count', 'encode', 'endswith', 'expandtabs', 'find', 'format', 'format_map', 'index', 'isalnum', 'isalpha', 'isascii', 'isdecimal', 'isdigit', 'isidentifier', 'islower', 'isnumeric', 'isprintable', 'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lower', 'lstrip', 'maketrans', 'partition', 'replace', 'rfind', 'rindex', 'rjust', 'rpartition', 'rsplit', 'rstrip', 'split', 'splitlines', 'startswith', 'strip', 'swapcase', 'title', 'translate', 'upper', 'zfill']",
    "detail": "d1.challenges.cs46_python_i",
    "documentation": {}
  },
  {
    "label": "a",
    "kind": 5,
    "importPath": "d1.challenges.cs46_python_i",
    "description": "d1.challenges.cs46_python_i",
    "peekOfCode": "a = \"aabbccqqqq\"\nprint(a.count(\"q\"))\n# Lets put it all together\n\"\"\"# Challenges\"\"\"\n\"\"\"\nChallenge #1:\nCreate a function that takes two numbers as arguments and return their sum.\nExamples:\n- addition(3, 2) ➞ 5\n- addition(-3, -6) ➞ -9",
    "detail": "d1.challenges.cs46_python_i",
    "documentation": {}
  },
  {
    "label": "cmd",
    "kind": 5,
    "importPath": "d1.challenges.prac",
    "description": "d1.challenges.prac",
    "peekOfCode": "cmd = \"\"\nwhile cmd != \"exit\":\n    cmd == input(\">>\")\n    if cmd == \"hello\" or cmd == \"hi\":\n        print(\"hello\")\n    elif cmd == \"goodbye\":\n        print(\"did you mean to exit?\")\n    elif cmd == \"exit\":\n        print(\"Thanks for using repl\")\n    else:",
    "detail": "d1.challenges.prac",
    "documentation": {}
  },
  {
    "label": "addition",
    "kind": 2,
    "importPath": "d1.cs46_python_i",
    "description": "d1.cs46_python_i",
    "peekOfCode": "def addition(a, b):\n    # Your code here\n\"\"\"\nChallenge #2:\nWrite a function that takes an integer `minutes` and converts it to seconds.\nExamples:\n- convert(5) ➞ 300\n- convert(3) ➞ 180\n- convert(2) ➞ 120\n\"\"\"",
    "detail": "d1.cs46_python_i",
    "documentation": {}
  },
  {
    "label": "convert",
    "kind": 2,
    "importPath": "d1.cs46_python_i",
    "description": "d1.cs46_python_i",
    "peekOfCode": "def convert(minutes):\n    # Your code here\n\"\"\"\nChallenge #3:\nCreate a function that takes a string and returns it as an integer.\nExamples:\n- string_int(\"6\") ➞ 6\n- string_int(\"1000\") ➞ 1000\n- string_int(\"12\") ➞ 12\n\"\"\"",
    "detail": "d1.cs46_python_i",
    "documentation": {}
  },
  {
    "label": "string_int",
    "kind": 2,
    "importPath": "d1.cs46_python_i",
    "description": "d1.cs46_python_i",
    "peekOfCode": "def string_int(txt):\n    # Your code here\n\"\"\"\nChallenge #4:\nCreate a function that takes length and width and finds the perimeter of a\nrectangle.\nExamples:\n- find_perimeter(6, 7) ➞ 26\n- find_perimeter(20, 10) ➞ 60\n- find_perimeter(2, 9) ➞ 22",
    "detail": "d1.cs46_python_i",
    "documentation": {}
  },
  {
    "label": "find_perimeter",
    "kind": 2,
    "importPath": "d1.cs46_python_i",
    "description": "d1.cs46_python_i",
    "peekOfCode": "def find_perimeter(length, width):\n\"\"\"\nChallenge #5:\nCreate a function that returns a list of strings sorted by length in ascending\norder.\nExamples:\n- sort_by_length([\"a\", \"ccc\", \"dddd\", \"bb\"]) ➞ [\"a\", \"bb\", \"ccc\", \"dddd\"]\n- sort_by_length([\"apple\", \"pie\", \"shortcake\"]) ➞ [\"pie\", \"apple\", \"shortcake\"]\n- sort_by_length([\"may\", \"april\", \"september\", \"august\"]) ➞ [\"may\", \"april\", \"august\", \"september\"]\n- sort_by_length([]) ➞ []",
    "detail": "d1.cs46_python_i",
    "documentation": {}
  },
  {
    "label": "sort_by_length",
    "kind": 2,
    "importPath": "d1.cs46_python_i",
    "description": "d1.cs46_python_i",
    "peekOfCode": "def sort_by_length(lst):\n\"\"\"\nChallenge #6:\nCreate a function that takes a string, checks if it has the same number of \"x\"s\nand \"o\"s and returns either True or False.\n- Return a boolean value (True or False).\n- The string can contain any character.\n- When no x and no o are in the string, return True.\nExamples:\n- XO(\"ooxx\") ➞ True",
    "detail": "d1.cs46_python_i",
    "documentation": {}
  },
  {
    "label": "XO",
    "kind": 2,
    "importPath": "d1.cs46_python_i",
    "description": "d1.cs46_python_i",
    "peekOfCode": "def XO(txt):\n\"\"\"\nChallenge #7:\nGiven an unsorted list, create a function that returns the nth smallest element\n(the smallest element is the first smallest, the second smallest element is the\nsecond smallest, etc).\nExamples:\n- nth_smallest([7, 5, 3, 1], 1) ➞ 1\n- nth_smallest([1, 3, 5, 7], 3) ➞ 5\n- nth_smallest([1, 3, 5, 7], 5) ➞ None",
    "detail": "d1.cs46_python_i",
    "documentation": {}
  },
  {
    "label": "nth_smallest",
    "kind": 2,
    "importPath": "d1.cs46_python_i",
    "description": "d1.cs46_python_i",
    "peekOfCode": "def nth_smallest(lst, n):\n\"\"\"\nChallenge #8:\nCreate a function that returns the number of arguments it was called with.\nExamples:\n- num_args() ➞ 0\n- num_args(\"foo\") ➞ 1\n- num_args(\"foo\", \"bar\") ➞ 2\n- num_args(True, False) ➞ 2\n- num_args({}) ➞ 1",
    "detail": "d1.cs46_python_i",
    "documentation": {}
  },
  {
    "label": "num_args",
    "kind": 2,
    "importPath": "d1.cs46_python_i",
    "description": "d1.cs46_python_i",
    "peekOfCode": "def num_args():\n\"\"\"\nChallenge #9:\nWrite a function that creates a dictionary with each (key, value) pair being\nthe (lower case, upper case) versions of a letter, respectively.\nExamples:\n- mapping([\"p\", \"s\"]) ➞ { \"p\": \"P\", \"s\": \"S\" }\n- mapping([\"a\", \"b\", \"c\"]) ➞ { \"a\": \"A\", \"b\": \"B\", \"c\": \"C\" }\n- mapping([\"a\", \"v\", \"y\", \"z\"]) ➞ { \"a\": \"A\", \"v\": \"V\", \"y\": \"Y\", \"z\": \"Z\" }\nNotes:",
    "detail": "d1.cs46_python_i",
    "documentation": {}
  },
  {
    "label": "mapping",
    "kind": 2,
    "importPath": "d1.cs46_python_i",
    "description": "d1.cs46_python_i",
    "peekOfCode": "def mapping(letters):\n\"\"\"\nChallenge #10:\nCreate a function that applies a discount d to every number in the list.\nExamples:\n- get_discounts([2, 4, 6, 11], \"50%\") ➞ [1, 2, 3, 5.5]\n- get_discounts([10, 20, 40, 80], \"75%\") ➞ [7.5, 15, 30, 60]\n- get_discounts([100], \"45%\") ➞ [45]\nNotes:\n- The discount is the percentage of the original price (i.e the discount of",
    "detail": "d1.cs46_python_i",
    "documentation": {}
  },
  {
    "label": "get_discounts",
    "kind": 2,
    "importPath": "d1.cs46_python_i",
    "description": "d1.cs46_python_i",
    "peekOfCode": "def get_discounts(nums, percentage):",
    "detail": "d1.cs46_python_i",
    "documentation": {}
  },
  {
    "label": "csnakeltjazzy",
    "kind": 2,
    "importPath": "d2.code-signal.jazzy",
    "description": "d2.code-signal.jazzy",
    "peekOfCode": "def csnakeltjazzy(chords):\nnewchords - []\nfor chord in chords: [\nif chord.isdigit(): ‘\nj newchords.appendEchordfl\nelif len(chords) -- 9:\nreturn []\nelse:\naddSeven - chord\naddSeven - addSeven[e:] + \"7\"",
    "detail": "d2.code-signal.jazzy",
    "documentation": {}
  },
  {
    "label": "csWhereIsBob",
    "kind": 2,
    "importPath": "d2.code-signal.return-index-of-string-in-list",
    "description": "d2.code-signal.return-index-of-string-in-list",
    "peekOfCode": "def csWhereIsBob(names):\n    bob = \"Bob\"\n    if bob in names:\n        return names.index(\"Bob\")\n    else:\n        return -1",
    "detail": "d2.code-signal.return-index-of-string-in-list",
    "documentation": {}
  },
  {
    "label": "csAnythingButFive",
    "kind": 2,
    "importPath": "d2.more-examples.anithingButFive",
    "description": "d2.more-examples.anithingButFive",
    "peekOfCode": "def csAnythingButFive(start, end):\n    count = 0\n    new_list = []\n    for num in range(start, end + 1):\n        str_num = str(num)\n        if \"5\" in str_num:\n            continue\n        count += 1\n    return count\nprint(csAnythingButFive(1, 5))",
    "detail": "d2.more-examples.anithingButFive",
    "documentation": {}
  },
  {
    "label": "csBinaryToASCII",
    "kind": 2,
    "importPath": "d2.more-examples.binaryToASCII",
    "description": "d2.more-examples.binaryToASCII",
    "peekOfCode": "def csBinaryToASCII(binary):\n    binary_letters = []\n    letters = \"\"\n    if binary == \"\":\n        return \"\"\n    for index in range(0, len(binary), 8):\n        binary_letters.append(binary[index : index + 8])\n    print(binary_letters)\n    for string in binary_letters:\n        binary_int = v = chr(int(string, 2))",
    "detail": "d2.more-examples.binaryToASCII",
    "documentation": {}
  },
  {
    "label": "csFindAddedLetter",
    "kind": 2,
    "importPath": "d2.more-examples.findAddedLetter",
    "description": "d2.more-examples.findAddedLetter",
    "peekOfCode": "def csFindAddedLetter(str_1, str_2):\n    m1 = {}\n    for i in str_2:\n        if i in m1:\n            m1[i] += 1\n        else:\n            m1[i] = 1\n    for i in str_1:\n        m1[i] -= 1\n    for h1 in m1:",
    "detail": "d2.more-examples.findAddedLetter",
    "documentation": {}
  },
  {
    "label": "csFindTheSingleNumber",
    "kind": 2,
    "importPath": "d2.more-examples.findTheSingleNumber",
    "description": "d2.more-examples.findTheSingleNumber",
    "peekOfCode": "def csFindTheSingleNumber(nums):\n    frequency = Counter(nums)\n    for i in frequency:\n        if frequency[i] == 1:\n            return i",
    "detail": "d2.more-examples.findTheSingleNumber",
    "documentation": {}
  },
  {
    "label": "csMakeItJazzy",
    "kind": 2,
    "importPath": "d2.more-examples.makeItJazzy",
    "description": "d2.more-examples.makeItJazzy",
    "peekOfCode": "def csMakeItJazzy(chords):\n    for index in range(len(chords)):\n        if chords[index].__contains__(\"7\"):\n            continue\n        elif chords == []:\n            return []\n        else:\n            chords[index] = chords[index] + \"7\"\n    return chords",
    "detail": "d2.more-examples.makeItJazzy",
    "documentation": {}
  },
  {
    "label": "csMaxNumberOfLambdas",
    "kind": 2,
    "importPath": "d2.more-examples.maxNumberOfLambdas",
    "description": "d2.more-examples.maxNumberOfLambdas",
    "peekOfCode": "def csMaxNumberOfLambdas(text):\n    sub_string = \"lambda\"\n    lambda_count = {\"l\": 0, \"a\": 0, \"m\": 0, \"b\": 0, \"d\": 0, \"a\": 0}\n    counts = []\n    for letter in text:\n        if letter in lambda_count:\n            lambda_count[letter] += 1\n    for key, value in lambda_count.items():\n        counts.append(value)\n    return min(counts)",
    "detail": "d2.more-examples.maxNumberOfLambdas",
    "documentation": {}
  },
  {
    "label": "get_count",
    "kind": 2,
    "importPath": "d2.more-examples.python_challenges",
    "description": "d2.more-examples.python_challenges",
    "peekOfCode": "def get_count(input_str):\n    # Your code here\n    vowel_counts = {}  # this is a dictionary to store the vowels\n    for vowel in \"aeiou\":\n        count = input_str.count(vowel)\n        vowel_counts[vowel] = count\n        print(vowel_counts)\n        counts = vowel_counts.values()\n    return sum(counts)\nprint(get_count(\"adela are mere\"))",
    "detail": "d2.more-examples.python_challenges",
    "documentation": {}
  },
  {
    "label": "data_type",
    "kind": 2,
    "importPath": "d2.more-examples.python_challenges",
    "description": "d2.more-examples.python_challenges",
    "peekOfCode": "def data_type(value):\n    # Your code here\n    date = datetime.date\n    if type(value) is int:\n        return \"integer\"\n    elif type(value) is str:\n        return \"string\"\n    elif type(value) is list:\n        return \"list\"\n    elif type(value) is dict:",
    "detail": "d2.more-examples.python_challenges",
    "documentation": {}
  },
  {
    "label": "emotify",
    "kind": 2,
    "importPath": "d2.more-examples.python_challenges",
    "description": "d2.more-examples.python_challenges",
    "peekOfCode": "def emotify(txt):\n    # Your code here\n    # ````another option```\n    # new = txt.split(' ')\n    # print(new)\n    # ````````````\n    new_list = list(txt)\n    # print(new_list)\n    sliced_list = new_list[8:]\n    emotion = \"\".join(sliced_list)",
    "detail": "d2.more-examples.python_challenges",
    "documentation": {}
  },
  {
    "label": "multiply_nums",
    "kind": 2,
    "importPath": "d2.more-examples.python_challenges",
    "description": "d2.more-examples.python_challenges",
    "peekOfCode": "def multiply_nums(nums):\n    # Your code here\n    # nums = \"2, 4, 6\"\n    integer_list = []\n    new_list = list(nums)\n    sliced_list = new_list[0::3]\n    print(sliced_list)\n    for elem in sliced_list:\n        int_elem = int(elem)\n        integer_list.append(int_elem)",
    "detail": "d2.more-examples.python_challenges",
    "documentation": {}
  },
  {
    "label": "add_indexes",
    "kind": 2,
    "importPath": "d2.more-examples.python_challenges",
    "description": "d2.more-examples.python_challenges",
    "peekOfCode": "def add_indexes(numbers):\n    # Your code here\n    new_list = []\n    for index, value in enumerate(numbers):\n        sum = index + value\n        new_list.append(sum)\n    return new_list\nenumerate(my_list)  # tuples of the index and the value of the list\nlist(enumerate(a_list))  # and makes it into an array\nfor item in enumerate(a_list):",
    "detail": "d2.more-examples.python_challenges",
    "documentation": {}
  },
  {
    "label": "last",
    "kind": 2,
    "importPath": "d2.more-examples.python_challenges",
    "description": "d2.more-examples.python_challenges",
    "peekOfCode": "def last(a, n):\n    # Your code here\n    if n > len(a):\n        return \"invalid\"\n    elif n == 0:\n        return []\n    else:\n        return a[-n:]  # the last 3/n elements\nprint(last([1, 2, 3, 4, 5], 1))\n\"\"\"",
    "detail": "d2.more-examples.python_challenges",
    "documentation": {}
  },
  {
    "label": "get_middle",
    "kind": 2,
    "importPath": "d2.more-examples.python_challenges",
    "description": "d2.more-examples.python_challenges",
    "peekOfCode": "def get_middle(input_str):\n    # Your code here\n    return input_str[(len(input_str) - 1) // 2 : (len(input_str) + 2) // 2]\nprint(get_middle(\"test\"))\nprint(get_middle(\"testing\"))\nprint(get_middle(\"middle\"))\nprint(get_middle(\"A\"))\nprint(get_middle(\"beyoudre\"))\nprint(get_middle(\"you\"))\n# Given a string of words, return the length of the shortest word(s).",
    "detail": "d2.more-examples.python_challenges",
    "documentation": {}
  },
  {
    "label": "csShortestWord",
    "kind": 2,
    "importPath": "d2.more-examples.python_challenges",
    "description": "d2.more-examples.python_challenges",
    "peekOfCode": "def csShortestWord(input_str):\n    word = map(len, input_str.split())\n    return min(word)\n# Given an array of integers, return the sum of all the positive integers in the array.\n# Examples:\n# csSumOfPositive([1, 2, 3, -4, 5]) -> 1 + 2 + 3 + 5 = 11\n# csSumOfPositive([-3, -2, -1, 0, 1]) -> 1\n# csSumOfPositive([-3, -2]) -> 0\n# Notes:\n# If the input_arr does not contain any positive integers, the default sum should be 0.",
    "detail": "d2.more-examples.python_challenges",
    "documentation": {}
  },
  {
    "label": "csSumOfPositive",
    "kind": 2,
    "importPath": "d2.more-examples.python_challenges",
    "description": "d2.more-examples.python_challenges",
    "peekOfCode": "def csSumOfPositive(input_arr):\n    new_array = []\n    for num in input_arr:\n        if num > 0:\n            new_array.append(num)\n        else:\n            continue\n    return math.fsum(new_array)\n\"\"\"\nChallenge #10:",
    "detail": "d2.more-examples.python_challenges",
    "documentation": {}
  },
  {
    "label": "max_and_min",
    "kind": 2,
    "importPath": "d2.more-examples.python_challenges",
    "description": "d2.more-examples.python_challenges",
    "peekOfCode": "def max_and_min(input_str):\n    # Your code here\n    new_list = list(map(int, input_str.split()))\n    new_string = str(max(new_list)) + \" \" + str(min(new_list))\n    print(type(new_string))\n    return new_string\nprint(max_and_min(\"1 2 3 4 5\"))\nprint(max_and_min(\"1 2 -3 4 5\"))\nprint(max_and_min(\"1 9 3 4 -5\"))\n\"\"\"",
    "detail": "d2.more-examples.python_challenges",
    "documentation": {}
  },
  {
    "label": "get_discounts",
    "kind": 2,
    "importPath": "d2.more-examples.python_challenges",
    "description": "d2.more-examples.python_challenges",
    "peekOfCode": "def get_discounts(nums, percentage):\n    # Your code here\n    new_percentage = list(percentage)\n    discount_str = int(new_percentage[0] + new_percentage[1])\n    discount = int(discount_str) / 100\n    print(discount)\n    d = []\n    for num in nums:\n        num = discount * num\n        s = str(num)",
    "detail": "d2.more-examples.python_challenges",
    "documentation": {}
  },
  {
    "label": "csOppositeReverse",
    "kind": 2,
    "importPath": "d2.more-examples.python_exercises",
    "description": "d2.more-examples.python_exercises",
    "peekOfCode": "def csOppositeReverse(txt):\n    return txt.swapcase()[::-1]\nprint(csOppositeReverse(text))\n# puterea a doua a fiecarui digit intr un numar\ndef csSquareAllDigits(n):\n    return int(\"\".join(str(int(i) ** 2) for i in str(n)))\n# take out the vowels of a string\nimport re\ndef csRemoveTheVowels(txt):\n    # vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]",
    "detail": "d2.more-examples.python_exercises",
    "documentation": {}
  },
  {
    "label": "csSquareAllDigits",
    "kind": 2,
    "importPath": "d2.more-examples.python_exercises",
    "description": "d2.more-examples.python_exercises",
    "peekOfCode": "def csSquareAllDigits(n):\n    return int(\"\".join(str(int(i) ** 2) for i in str(n)))\n# take out the vowels of a string\nimport re\ndef csRemoveTheVowels(txt):\n    # vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    # return \"\".join([l for l in txt if l not in vowels])\n    return re.sub(r\"[AEIOU]\", \"\", txt, flags=re.IGNORECASE)\nprint(csRemoveTheVowels(text))",
    "detail": "d2.more-examples.python_exercises",
    "documentation": {}
  },
  {
    "label": "csRemoveTheVowels",
    "kind": 2,
    "importPath": "d2.more-examples.python_exercises",
    "description": "d2.more-examples.python_exercises",
    "peekOfCode": "def csRemoveTheVowels(txt):\n    # vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    # return \"\".join([l for l in txt if l not in vowels])\n    return re.sub(r\"[AEIOU]\", \"\", txt, flags=re.IGNORECASE)\nprint(csRemoveTheVowels(text))",
    "detail": "d2.more-examples.python_exercises",
    "documentation": {}
  },
  {
    "label": "text",
    "kind": 5,
    "importPath": "d2.more-examples.python_exercises",
    "description": "d2.more-examples.python_exercises",
    "peekOfCode": "text = \"Adela, hi!\"\n# def csOppositeReverse(txt):\n#   for i in range(len(txt)):\n#     if re.match(\"^[a-z]+$\", txt[i]):\n#        txt[i] = txt[i].upper()\n#        return txt[::-1]\n#     elif re.match(\"^[A-Z]+$\", txt[i]):\n#       txt[i] = txt[i].lower()\n#       return txt[::-1]\ndef csOppositeReverse(txt):",
    "detail": "d2.more-examples.python_exercises",
    "documentation": {}
  },
  {
    "label": "csRaindrops",
    "kind": 2,
    "importPath": "d2.more-examples.rainDrops",
    "description": "d2.more-examples.rainDrops",
    "peekOfCode": "def csRaindrops(number):\n    output_string = \"\"\n    has_3_factor = output_string + \"Pling\"\n    if number % 3 == 0:\n        output_string += \"Pling\"\n    elif number % 5 == 0:\n        output_string += \"Plang\"\n    elif number % 7 == 0:\n        output_string += \"Plong\"\n    elif output_string is \"\":",
    "detail": "d2.more-examples.rainDrops",
    "documentation": {}
  },
  {
    "label": "repeat_it",
    "kind": 2,
    "importPath": "d2.more-examples.repeat_it",
    "description": "d2.more-examples.repeat_it",
    "peekOfCode": "def repeat_it(input_str):\n    # Your code here\n    new_list = list(input_str)\n    empty = []\n    for index, letter in enumerate(new_list):\n        letter = \"-\" + letter.upper() + (index * letter).lower()\n        empty.append(letter)\n        new_str = \"\".join(empty)\n        transformed = list(new_str)\n        good_string = transformed[1:]",
    "detail": "d2.more-examples.repeat_it",
    "documentation": {}
  },
  {
    "label": "csReverseIntegerBits",
    "kind": 2,
    "importPath": "d2.more-examples.reverseIntegerBits",
    "description": "d2.more-examples.reverseIntegerBits",
    "peekOfCode": "def csReverseIntegerBits(n):\n    reversed_num = 0\n    while n > 0:\n        reversed_num = reversed_num << 1\n        if n & 1 == 1:\n            reversed_num = reversed_num ^ 1\n        n = n >> 1\n    return reversed_num",
    "detail": "d2.more-examples.reverseIntegerBits",
    "documentation": {}
  },
  {
    "label": "schoolGroups",
    "kind": 2,
    "importPath": "d2.more-examples.schoolGroups",
    "description": "d2.more-examples.schoolGroups",
    "peekOfCode": "def schoolGroups(years, groups):\n    alphabet = list(map(chr, range(97, 123)))\n    emp_list = []\n    for year in range(1, years + 1):\n        for group in range(0, groups):\n            emp_list.append(f\"{year}{alphabet[group]}\")\n    # print(emp_list)\n    return \", \".join(emp_list)\nprint(schoolGroups(1, 4))\nprint(schoolGroups(6, 7))",
    "detail": "d2.more-examples.schoolGroups",
    "documentation": {}
  },
  {
    "label": "validParenthesesSequence",
    "kind": 2,
    "importPath": "d2.more-examples.validParenthasesSequence",
    "description": "d2.more-examples.validParenthasesSequence",
    "peekOfCode": "def validParenthesesSequence(s):\n    stack = []\n    # Traversing the Expression\n    for char in s:\n        if char in [\"(\", \"{\", \"[\"]:\n            stack.append(char)\n        else:\n            if not stack:\n                return False\n            current_char = stack.pop()",
    "detail": "d2.more-examples.validParenthasesSequence",
    "documentation": {}
  },
  {
    "label": "greet",
    "kind": 2,
    "importPath": "d2.copy_of_cs46_python_i",
    "description": "d2.copy_of_cs46_python_i",
    "peekOfCode": "def greet(name=\"world!\"):\n  print(type(name))\n  print(f\"Hello {name}\")\ngreet(\"1234\")\n# lets play with some strings\n# ['capitalize', 'casefold', 'center', 'count', 'encode', 'endswith', 'expandtabs', 'find', 'format', 'format_map', 'index', 'isalnum', 'isalpha', 'isascii', 'isdecimal', 'isdigit', 'isidentifier', 'islower', 'isnumeric', 'isprintable', 'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lower', 'lstrip', 'maketrans', 'partition', 'replace', 'rfind', 'rindex', 'rjust', 'rpartition', 'rsplit', 'rstrip', 'split', 'splitlines', 'startswith', 'strip', 'swapcase', 'title', 'translate', 'upper', 'zfill']\n# print(dir(\"\"))\n# print(help(\"\".count))\na = \"aabbccqqZbqq\".swapcase()\nfor c in a:",
    "detail": "d2.copy_of_cs46_python_i",
    "documentation": {}
  },
  {
    "label": "addition",
    "kind": 2,
    "importPath": "d2.copy_of_cs46_python_i",
    "description": "d2.copy_of_cs46_python_i",
    "peekOfCode": "def addition(a, b):\n    # Your code here\n  try:\n    a = int(a)\n    b = int(b)\n    return a + b\n  except:\n    print(\"please supply valid integer arguments\")\n    return 0\n# tests",
    "detail": "d2.copy_of_cs46_python_i",
    "documentation": {}
  },
  {
    "label": "convert",
    "kind": 2,
    "importPath": "d2.copy_of_cs46_python_i",
    "description": "d2.copy_of_cs46_python_i",
    "peekOfCode": "def convert(minutes):\n    # Your code here\n    return minutes * 60\nprint(convert(5)) #  ➞ 300\nprint(convert(3)) #  ➞ 180\nprint(convert(2)) # ➞ 120\n\"\"\"\nChallenge #3:\nCreate a function that takes a string and returns it as an integer.\nExamples:",
    "detail": "d2.copy_of_cs46_python_i",
    "documentation": {}
  },
  {
    "label": "string_int",
    "kind": 2,
    "importPath": "d2.copy_of_cs46_python_i",
    "description": "d2.copy_of_cs46_python_i",
    "peekOfCode": "def string_int(txt):\n    # Your code here\n\"\"\"\nChallenge #4:\nCreate a function that takes length and width and finds the perimeter of a\nrectangle.\nExamples:\n- find_perimeter(6, 7) ➞ 26\n- find_perimeter(20, 10) ➞ 60\n- find_perimeter(2, 9) ➞ 22",
    "detail": "d2.copy_of_cs46_python_i",
    "documentation": {}
  },
  {
    "label": "find_perimeter",
    "kind": 2,
    "importPath": "d2.copy_of_cs46_python_i",
    "description": "d2.copy_of_cs46_python_i",
    "peekOfCode": "def find_perimeter(length, width):\n  result = (length * 2) + (width * 2)\n  return result\n# tests\nprint(find_perimeter(6, 7)) # ➞ 26\nprint(find_perimeter(20, 10)) # ➞ 60\nprint(find_perimeter(2, 9)) # ➞ 22\n\"\"\"\nChallenge #5:\nCreate a function that returns a list of strings sorted by length in ascending",
    "detail": "d2.copy_of_cs46_python_i",
    "documentation": {}
  },
  {
    "label": "sort_by_length",
    "kind": 2,
    "importPath": "d2.copy_of_cs46_python_i",
    "description": "d2.copy_of_cs46_python_i",
    "peekOfCode": "def sort_by_length(lst):\n  \"\"\"\n    sort a list of stringe using the length of each string as the key\n    input: lst -> list(str)\n    output: -> list(str)\n  \"\"\"\n  return sorted(lst, key=len)\n\"\"\"\nChallenge #6:\nCreate a function that takes a string, checks if it has the same number of \"x\"s",
    "detail": "d2.copy_of_cs46_python_i",
    "documentation": {}
  },
  {
    "label": "XO",
    "kind": 2,
    "importPath": "d2.copy_of_cs46_python_i",
    "description": "d2.copy_of_cs46_python_i",
    "peekOfCode": "def XO(txt):\n\"\"\"\nChallenge #7:\nGiven an unsorted list, create a function that returns the nth smallest element\n(the smallest element is the first smallest, the second smallest element is the\nsecond smallest, etc).\nExamples:\n- nth_smallest([7, 5, 3, 1], 1) ➞ 1\n- nth_smallest([1, 3, 5, 7], 3) ➞ 5\n- nth_smallest([1, 3, 5, 7], 5) ➞ None",
    "detail": "d2.copy_of_cs46_python_i",
    "documentation": {}
  },
  {
    "label": "nth_smallest",
    "kind": 2,
    "importPath": "d2.copy_of_cs46_python_i",
    "description": "d2.copy_of_cs46_python_i",
    "peekOfCode": "def nth_smallest(lst, n):\n\"\"\"\nChallenge #8:\nCreate a function that returns the number of arguments it was called with.\nExamples:\n- num_args() ➞ 0\n- num_args(\"foo\") ➞ 1\n- num_args(\"foo\", \"bar\") ➞ 2\n- num_args(True, False) ➞ 2\n- num_args({}) ➞ 1",
    "detail": "d2.copy_of_cs46_python_i",
    "documentation": {}
  },
  {
    "label": "num_args",
    "kind": 2,
    "importPath": "d2.copy_of_cs46_python_i",
    "description": "d2.copy_of_cs46_python_i",
    "peekOfCode": "def num_args():\n\"\"\"\nChallenge #9:\nWrite a function that creates a dictionary with each (key, value) pair being\nthe (lower case, upper case) versions of a letter, respectively.\nExamples:\n- mapping([\"p\", \"s\"]) ➞ { \"p\": \"P\", \"s\": \"S\" }\n- mapping([\"a\", \"b\", \"c\"]) ➞ { \"a\": \"A\", \"b\": \"B\", \"c\": \"C\" }\n- mapping([\"a\", \"v\", \"y\", \"z\"]) ➞ { \"a\": \"A\", \"v\": \"V\", \"y\": \"Y\", \"z\": \"Z\" }\nNotes:",
    "detail": "d2.copy_of_cs46_python_i",
    "documentation": {}
  },
  {
    "label": "mapping",
    "kind": 2,
    "importPath": "d2.copy_of_cs46_python_i",
    "description": "d2.copy_of_cs46_python_i",
    "peekOfCode": "def mapping(letters):\n\"\"\"\nChallenge #10:\nCreate a function that applies a discount d to every number in the list.\nExamples:\n- get_discounts([2, 4, 6, 11], \"50%\") ➞ [1, 2, 3, 5.5]\n- get_discounts([10, 20, 40, 80], \"75%\") ➞ [7.5, 15, 30, 60]\n- get_discounts([100], \"45%\") ➞ [45]\nNotes:\n- The discount is the percentage of the original price (i.e the discount of",
    "detail": "d2.copy_of_cs46_python_i",
    "documentation": {}
  },
  {
    "label": "get_discounts",
    "kind": 2,
    "importPath": "d2.copy_of_cs46_python_i",
    "description": "d2.copy_of_cs46_python_i",
    "peekOfCode": "def get_discounts(nums, percentage):",
    "detail": "d2.copy_of_cs46_python_i",
    "documentation": {}
  },
  {
    "label": "a",
    "kind": 5,
    "importPath": "d2.copy_of_cs46_python_i",
    "description": "d2.copy_of_cs46_python_i",
    "peekOfCode": "a = 10\na = \"a string\"\na = 1.2\na = []\na = ()\na = {\"name\": \"Tom\"}\nb = []\nb.append(\"Dave\")\nb.append(\"Bob\")\nb.append(\"Joe\")",
    "detail": "d2.copy_of_cs46_python_i",
    "documentation": {}
  },
  {
    "label": "a",
    "kind": 5,
    "importPath": "d2.copy_of_cs46_python_i",
    "description": "d2.copy_of_cs46_python_i",
    "peekOfCode": "a = \"a string\"\na = 1.2\na = []\na = ()\na = {\"name\": \"Tom\"}\nb = []\nb.append(\"Dave\")\nb.append(\"Bob\")\nb.append(\"Joe\")\n# print(type(a))",
    "detail": "d2.copy_of_cs46_python_i",
    "documentation": {}
  },
  {
    "label": "a",
    "kind": 5,
    "importPath": "d2.copy_of_cs46_python_i",
    "description": "d2.copy_of_cs46_python_i",
    "peekOfCode": "a = 1.2\na = []\na = ()\na = {\"name\": \"Tom\"}\nb = []\nb.append(\"Dave\")\nb.append(\"Bob\")\nb.append(\"Joe\")\n# print(type(a))\n# print(a[\"name\"])",
    "detail": "d2.copy_of_cs46_python_i",
    "documentation": {}
  },
  {
    "label": "a",
    "kind": 5,
    "importPath": "d2.copy_of_cs46_python_i",
    "description": "d2.copy_of_cs46_python_i",
    "peekOfCode": "a = []\na = ()\na = {\"name\": \"Tom\"}\nb = []\nb.append(\"Dave\")\nb.append(\"Bob\")\nb.append(\"Joe\")\n# print(type(a))\n# print(a[\"name\"])\n# print(dir([]))",
    "detail": "d2.copy_of_cs46_python_i",
    "documentation": {}
  },
  {
    "label": "a",
    "kind": 5,
    "importPath": "d2.copy_of_cs46_python_i",
    "description": "d2.copy_of_cs46_python_i",
    "peekOfCode": "a = ()\na = {\"name\": \"Tom\"}\nb = []\nb.append(\"Dave\")\nb.append(\"Bob\")\nb.append(\"Joe\")\n# print(type(a))\n# print(a[\"name\"])\n# print(dir([]))\nprint(b.pop(0))",
    "detail": "d2.copy_of_cs46_python_i",
    "documentation": {}
  },
  {
    "label": "a",
    "kind": 5,
    "importPath": "d2.copy_of_cs46_python_i",
    "description": "d2.copy_of_cs46_python_i",
    "peekOfCode": "a = {\"name\": \"Tom\"}\nb = []\nb.append(\"Dave\")\nb.append(\"Bob\")\nb.append(\"Joe\")\n# print(type(a))\n# print(a[\"name\"])\n# print(dir([]))\nprint(b.pop(0))\nprint(b)",
    "detail": "d2.copy_of_cs46_python_i",
    "documentation": {}
  },
  {
    "label": "b",
    "kind": 5,
    "importPath": "d2.copy_of_cs46_python_i",
    "description": "d2.copy_of_cs46_python_i",
    "peekOfCode": "b = []\nb.append(\"Dave\")\nb.append(\"Bob\")\nb.append(\"Joe\")\n# print(type(a))\n# print(a[\"name\"])\n# print(dir([]))\nprint(b.pop(0))\nprint(b)\n\"\"\"# PYTHON I CODE: 5976\"\"\"",
    "detail": "d2.copy_of_cs46_python_i",
    "documentation": {}
  },
  {
    "label": "a",
    "kind": 5,
    "importPath": "d2.copy_of_cs46_python_i",
    "description": "d2.copy_of_cs46_python_i",
    "peekOfCode": "a = [\"Dave\"] * 25\na[20] = \"Steve\"\n# for n in range(12, 25):\n#   print(a[n])\nfor x in enumerate(a):\n  i = x[0]\n  e = x[1]\n  if i == 9:\n    continue\n  print(i)",
    "detail": "d2.copy_of_cs46_python_i",
    "documentation": {}
  },
  {
    "label": "a[20]",
    "kind": 5,
    "importPath": "d2.copy_of_cs46_python_i",
    "description": "d2.copy_of_cs46_python_i",
    "peekOfCode": "a[20] = \"Steve\"\n# for n in range(12, 25):\n#   print(a[n])\nfor x in enumerate(a):\n  i = x[0]\n  e = x[1]\n  if i == 9:\n    continue\n  print(i)\n  print(e)",
    "detail": "d2.copy_of_cs46_python_i",
    "documentation": {}
  },
  {
    "label": "a",
    "kind": 5,
    "importPath": "d2.copy_of_cs46_python_i",
    "description": "d2.copy_of_cs46_python_i",
    "peekOfCode": "a = int(input(\"input a number! \"))\nb = int(input(\"input a number! \"))4\nprint(f\"{a + b}\")\n\"\"\"# PYTHON I CODE: 5976\"\"\"\n# lets reuse some code...\ndef greet(name=\"world!\"):\n  print(type(name))\n  print(f\"Hello {name}\")\ngreet(\"1234\")\n# lets play with some strings",
    "detail": "d2.copy_of_cs46_python_i",
    "documentation": {}
  },
  {
    "label": "b",
    "kind": 5,
    "importPath": "d2.copy_of_cs46_python_i",
    "description": "d2.copy_of_cs46_python_i",
    "peekOfCode": "b = int(input(\"input a number! \"))4\nprint(f\"{a + b}\")\n\"\"\"# PYTHON I CODE: 5976\"\"\"\n# lets reuse some code...\ndef greet(name=\"world!\"):\n  print(type(name))\n  print(f\"Hello {name}\")\ngreet(\"1234\")\n# lets play with some strings\n# ['capitalize', 'casefold', 'center', 'count', 'encode', 'endswith', 'expandtabs', 'find', 'format', 'format_map', 'index', 'isalnum', 'isalpha', 'isascii', 'isdecimal', 'isdigit', 'isidentifier', 'islower', 'isnumeric', 'isprintable', 'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lower', 'lstrip', 'maketrans', 'partition', 'replace', 'rfind', 'rindex', 'rjust', 'rpartition', 'rsplit', 'rstrip', 'split', 'splitlines', 'startswith', 'strip', 'swapcase', 'title', 'translate', 'upper', 'zfill']",
    "detail": "d2.copy_of_cs46_python_i",
    "documentation": {}
  },
  {
    "label": "a",
    "kind": 5,
    "importPath": "d2.copy_of_cs46_python_i",
    "description": "d2.copy_of_cs46_python_i",
    "peekOfCode": "a = \"aabbccqqZbqq\".swapcase()\nfor c in a:\n  if a.count(c) != 1:\n    print(c)\n# Lets put it all together\ncmd = \"\"\nwhile cmd != \"exit\":\n  cmd = input(\">> \")\n  if cmd == \"hello\" or cmd == \"hi\":\n    print(\"Hello to you!\")",
    "detail": "d2.copy_of_cs46_python_i",
    "documentation": {}
  },
  {
    "label": "cmd",
    "kind": 5,
    "importPath": "d2.copy_of_cs46_python_i",
    "description": "d2.copy_of_cs46_python_i",
    "peekOfCode": "cmd = \"\"\nwhile cmd != \"exit\":\n  cmd = input(\">> \")\n  if cmd == \"hello\" or cmd == \"hi\":\n    print(\"Hello to you!\")\n  elif cmd == \"goodbye\":\n    print(\"did you mean exit?\")\n  elif cmd == \"exit\":\n    print(\"Thanks you for using the repl\")\n  else:",
    "detail": "d2.copy_of_cs46_python_i",
    "documentation": {}
  },
  {
    "label": "a",
    "kind": 5,
    "importPath": "d2.copy_of_cs46_python_i",
    "description": "d2.copy_of_cs46_python_i",
    "peekOfCode": "a = 3\nb = 2\nc = a + b\nreturn c\nreturn a + b = c\nreturn 3 + 2\n5 - 3 => 2\n5 - 2 => 3\n- addition(-3, -6) ➞ -9\n- addition(7, 3) ➞ 10",
    "detail": "d2.copy_of_cs46_python_i",
    "documentation": {}
  },
  {
    "label": "b",
    "kind": 5,
    "importPath": "d2.copy_of_cs46_python_i",
    "description": "d2.copy_of_cs46_python_i",
    "peekOfCode": "b = 2\nc = a + b\nreturn c\nreturn a + b = c\nreturn 3 + 2\n5 - 3 => 2\n5 - 2 => 3\n- addition(-3, -6) ➞ -9\n- addition(7, 3) ➞ 10\n\"\"\"",
    "detail": "d2.copy_of_cs46_python_i",
    "documentation": {}
  },
  {
    "label": "c",
    "kind": 5,
    "importPath": "d2.copy_of_cs46_python_i",
    "description": "d2.copy_of_cs46_python_i",
    "peekOfCode": "c = a + b\nreturn c\nreturn a + b = c\nreturn 3 + 2\n5 - 3 => 2\n5 - 2 => 3\n- addition(-3, -6) ➞ -9\n- addition(7, 3) ➞ 10\n\"\"\"\n# - return a plus b",
    "detail": "d2.copy_of_cs46_python_i",
    "documentation": {}
  },
  {
    "label": "s",
    "kind": 5,
    "importPath": "d2.copy_of_cs46_python_i",
    "description": "d2.copy_of_cs46_python_i",
    "peekOfCode": "s = [\"a\", \"ccc\", \"dddd\", \"bb\"]\nd = {1: \"a\", 3: \"ccc\", 4: \"dddd\", 2: \"bb\"}\n\"\"\"\n  what not to do during your plan...\n  eg: go down a massive rabit hole and not read docs:::\n\"\"\"\n# create an empty dictionary\n# create a list to return\n# iterate over each string extract the len of the elem and the val of the elem\n#   use the len as the key and use the str as a val",
    "detail": "d2.copy_of_cs46_python_i",
    "documentation": {}
  },
  {
    "label": "d",
    "kind": 5,
    "importPath": "d2.copy_of_cs46_python_i",
    "description": "d2.copy_of_cs46_python_i",
    "peekOfCode": "d = {1: \"a\", 3: \"ccc\", 4: \"dddd\", 2: \"bb\"}\n\"\"\"\n  what not to do during your plan...\n  eg: go down a massive rabit hole and not read docs:::\n\"\"\"\n# create an empty dictionary\n# create a list to return\n# iterate over each string extract the len of the elem and the val of the elem\n#   use the len as the key and use the str as a val\n# store a prev key -1",
    "detail": "d2.copy_of_cs46_python_i",
    "documentation": {}
  },
  {
    "label": "Entity",
    "kind": 6,
    "importPath": "d2.copy_of_intro_python_ii",
    "description": "d2.copy_of_intro_python_ii",
    "peekOfCode": "class Entity:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    def __str__(self):\n        return f\"({self.x}, {self.y})\"\nclass Mob(Entity):\n    def __init__(self, x, y):\n        super().__init__(x, y)\n    def move(self, dir):",
    "detail": "d2.copy_of_intro_python_ii",
    "documentation": {}
  },
  {
    "label": "Mob",
    "kind": 6,
    "importPath": "d2.copy_of_intro_python_ii",
    "description": "d2.copy_of_intro_python_ii",
    "peekOfCode": "class Mob(Entity):\n    def __init__(self, x, y):\n        super().__init__(x, y)\n    def move(self, dir):\n        if dir == \"n\":\n            self.y -= 1\n        elif dir == \"s\":\n            self.y += 1\n        elif dir == \"w\":\n            self.x -= 1",
    "detail": "d2.copy_of_intro_python_ii",
    "documentation": {}
  },
  {
    "label": "last",
    "kind": 2,
    "importPath": "d2.copy_of_intro_python_ii",
    "description": "d2.copy_of_intro_python_ii",
    "peekOfCode": "def last(a, n):\n    if n > len(a):\n        return \"invalid\"\n    elif n == 0:\n        return []\n    return a[-n:]\nprint(last([1, 2, 3, 4, 5], 1))  # ➞ [5]\nprint(last([4, 3, 9, 9, 7, 6], 3))  # ➞ [9, 7, 6]\nprint(last([1, 2, 3, 4, 5], 7))  #  ➞ \"invalid\"\nprint(last([1, 2, 3, 4, 5], 0))  # ➞ []",
    "detail": "d2.copy_of_intro_python_ii",
    "documentation": {}
  },
  {
    "label": "parity",
    "kind": 2,
    "importPath": "d2.copy_of_intro_python_ii",
    "description": "d2.copy_of_intro_python_ii",
    "peekOfCode": "def parity(input_int):\n    if input_int % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\ndef parity2(input_int):\n    return \"Even\" if input_int % 2 == 0 else \"Odd\"\nprint(parity(0))  #  -> \"Even\"\nprint(parity(1))  #  -> \"Odd\"\nprint(parity(2))  # -> \"Even\"",
    "detail": "d2.copy_of_intro_python_ii",
    "documentation": {}
  },
  {
    "label": "parity2",
    "kind": 2,
    "importPath": "d2.copy_of_intro_python_ii",
    "description": "d2.copy_of_intro_python_ii",
    "peekOfCode": "def parity2(input_int):\n    return \"Even\" if input_int % 2 == 0 else \"Odd\"\nprint(parity(0))  #  -> \"Even\"\nprint(parity(1))  #  -> \"Odd\"\nprint(parity(2))  # -> \"Even\"\nprint(parity2(0))  #  -> \"Even\"\nprint(parity2(1))  #  -> \"Odd\"\nprint(parity2(2))  # -> \"Even\"",
    "detail": "d2.copy_of_intro_python_ii",
    "documentation": {}
  },
  {
    "label": "numbers",
    "kind": 5,
    "importPath": "d2.copy_of_intro_python_ii",
    "description": "d2.copy_of_intro_python_ii",
    "peekOfCode": "numbers = [12, 23, 1, 22]\n# print(l[::-1])\n# print(dir([]))\n# min and max\n# print(min(20, 10, 5)) # 5\n# print(max(20, 10, 5)) # 20\n# list index\n# s = \"100\"\n# if \"100\" in l:\n#   print(l.index(s))",
    "detail": "d2.copy_of_intro_python_ii",
    "documentation": {}
  },
  {
    "label": "l2",
    "kind": 5,
    "importPath": "d2.copy_of_intro_python_ii",
    "description": "d2.copy_of_intro_python_ii",
    "peekOfCode": "l2 = []\nfor number in numbers:\n    if number % 2 == 0:\n        l2.append(number * 2)\nprint(l2)\nl3 = [number * 2 for number in numbers if number % 2 == 0]\nprint(l3)\n\"\"\"# CODE: 6603\"\"\"\n# Classes and OOP\nclass Entity:",
    "detail": "d2.copy_of_intro_python_ii",
    "documentation": {}
  },
  {
    "label": "l3",
    "kind": 5,
    "importPath": "d2.copy_of_intro_python_ii",
    "description": "d2.copy_of_intro_python_ii",
    "peekOfCode": "l3 = [number * 2 for number in numbers if number % 2 == 0]\nprint(l3)\n\"\"\"# CODE: 6603\"\"\"\n# Classes and OOP\nclass Entity:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    def __str__(self):\n        return f\"({self.x}, {self.y})\"",
    "detail": "d2.copy_of_intro_python_ii",
    "documentation": {}
  },
  {
    "label": "e",
    "kind": 5,
    "importPath": "d2.copy_of_intro_python_ii",
    "description": "d2.copy_of_intro_python_ii",
    "peekOfCode": "e = Entity(10, 20)\n# print(e)\nm = Mob(10, 23)\nprint(m)\nm.move(\"n\")\nprint(m)\n\"\"\"# CODE: 6603\n# Demos\nWrite a function that retrieves the last n elements from a list.\nExamples:",
    "detail": "d2.copy_of_intro_python_ii",
    "documentation": {}
  },
  {
    "label": "m",
    "kind": 5,
    "importPath": "d2.copy_of_intro_python_ii",
    "description": "d2.copy_of_intro_python_ii",
    "peekOfCode": "m = Mob(10, 23)\nprint(m)\nm.move(\"n\")\nprint(m)\n\"\"\"# CODE: 6603\n# Demos\nWrite a function that retrieves the last n elements from a list.\nExamples:\n- last([1, 2, 3, 4, 5], 1) ➞ [5]\n- last([4, 3, 9, 9, 7, 6], 3) ➞ [9, 7, 6]",
    "detail": "d2.copy_of_intro_python_ii",
    "documentation": {}
  },
  {
    "label": "my_hash",
    "kind": 2,
    "importPath": "d3.copy_of_dictionaries",
    "description": "d3.copy_of_dictionaries",
    "peekOfCode": "def my_hash(key):\n    sum = 0\n    c in key:\n        nc = ord(c)\n        print(c)\n        print(nc)\nmy_hash(\"A\")\n\"\"\"\nAdd \"Herb\" to the phonebook with the number 7653420789.\nRemove \"Bill\" from the phonebook.",
    "detail": "d3.copy_of_dictionaries",
    "documentation": {}
  },
  {
    "label": "phonebook",
    "kind": 5,
    "importPath": "d3.copy_of_dictionaries",
    "description": "d3.copy_of_dictionaries",
    "peekOfCode": "phonebook = {\n    \"Abe\": 4569874321,\n    \"Bill\": 7659803241,\n    \"Barry\": 6573214789\n}\n# YOUR CODE HERE\n# Should print Herb is in the phonebook.\nif \"Herb\" in phonebook:\n    print(\"Herb is in the phonebook.\")\n# Should print Bill is not in the phonebook.",
    "detail": "d3.copy_of_dictionaries",
    "documentation": {}
  },
  {
    "label": "my_hash",
    "kind": 2,
    "importPath": "d3.d3",
    "description": "d3.d3",
    "peekOfCode": "def my_hash(key):\n    sum = 0\n    for c in key:\n        nc = ord(c)\n        sum += nc\n    return sum\nstorage = [None] * 10\nh = my_hash(\"CBA\")\nprint(h)\nn = h % len(storage)",
    "detail": "d3.d3",
    "documentation": {}
  },
  {
    "label": "put",
    "kind": 2,
    "importPath": "d3.d3",
    "description": "d3.d3",
    "peekOfCode": "def put(key, value):\n    idx = my_hash(key) % len(storage)\n    storage[idx] = value\ndef get(key):\n    idx = my_hash(key) % len(storage)\n    return storage[idx]\nput(\"Tom\", 41)\n# bryan@LAPTOP-9LGJ3JGS:/c/Lambda/CIRRICULUMN/_NOTES/CS-python-notes/WEEKS/wk17/d3$ python3 d3.py\n# 198\n# 8",
    "detail": "d3.d3",
    "documentation": {}
  },
  {
    "label": "get",
    "kind": 2,
    "importPath": "d3.d3",
    "description": "d3.d3",
    "peekOfCode": "def get(key):\n    idx = my_hash(key) % len(storage)\n    return storage[idx]\nput(\"Tom\", 41)\n# bryan@LAPTOP-9LGJ3JGS:/c/Lambda/CIRRICULUMN/_NOTES/CS-python-notes/WEEKS/wk17/d3$ python3 d3.py\n# 198\n# 8\n# bryan@LAPTOP-9LGJ3JGS:/c/Lambda/CIRRICULUMN/_NOTES/CS-python-notes/WEEKS/wk17/d3$",
    "detail": "d3.d3",
    "documentation": {}
  },
  {
    "label": "storage",
    "kind": 5,
    "importPath": "d3.d3",
    "description": "d3.d3",
    "peekOfCode": "storage = [None] * 10\nh = my_hash(\"CBA\")\nprint(h)\nn = h % len(storage)\nprint(n)\ndef put(key, value):\n    idx = my_hash(key) % len(storage)\n    storage[idx] = value\ndef get(key):\n    idx = my_hash(key) % len(storage)",
    "detail": "d3.d3",
    "documentation": {}
  },
  {
    "label": "h",
    "kind": 5,
    "importPath": "d3.d3",
    "description": "d3.d3",
    "peekOfCode": "h = my_hash(\"CBA\")\nprint(h)\nn = h % len(storage)\nprint(n)\ndef put(key, value):\n    idx = my_hash(key) % len(storage)\n    storage[idx] = value\ndef get(key):\n    idx = my_hash(key) % len(storage)\n    return storage[idx]",
    "detail": "d3.d3",
    "documentation": {}
  },
  {
    "label": "n",
    "kind": 5,
    "importPath": "d3.d3",
    "description": "d3.d3",
    "peekOfCode": "n = h % len(storage)\nprint(n)\ndef put(key, value):\n    idx = my_hash(key) % len(storage)\n    storage[idx] = value\ndef get(key):\n    idx = my_hash(key) % len(storage)\n    return storage[idx]\nput(\"Tom\", 41)\n# bryan@LAPTOP-9LGJ3JGS:/c/Lambda/CIRRICULUMN/_NOTES/CS-python-notes/WEEKS/wk17/d3$ python3 d3.py",
    "detail": "d3.d3",
    "documentation": {}
  },
  {
    "label": "plus_one",
    "kind": 2,
    "importPath": "d4.copy_of_arraysandstrings",
    "description": "d4.copy_of_arraysandstrings",
    "peekOfCode": "def plus_one(digits):\n    # Your code here\n    n = len(digits)\n    # iterate over the list from right to left\n    for i in range(n - 1, -1, -1):\n      # idx = n - 1 - i\n      idx = i\n      # if the current digit is a 9 then set it to a 0\n      if digits[idx] == 9:\n        digits[idx] = 0",
    "detail": "d4.copy_of_arraysandstrings",
    "documentation": {}
  },
  {
    "label": "16Bits",
    "kind": 5,
    "importPath": "d4.copy_of_arraysandstrings",
    "description": "d4.copy_of_arraysandstrings",
    "peekOfCode": "16Bits = 2Bytes\n8Bit, 16Bit, 32Bit, 64Bit, 128Bit\n```\n[123, \"hello\" ]\nA = [\"Hello\", 232, 100]\nA[0] -> @A + offest 0 * 2\nA[1] -> @A + offset 1 * 2 => 100 + 1 * 2\noffest = base addr * size of data in bucket\n          128 64 32 16 8 4 2 1\n00000000   0  1   1  1 1 0 1 1",
    "detail": "d4.copy_of_arraysandstrings",
    "documentation": {}
  },
  {
    "label": "A",
    "kind": 5,
    "importPath": "d4.copy_of_arraysandstrings",
    "description": "d4.copy_of_arraysandstrings",
    "peekOfCode": "A = [\"Hello\", 232, 100]\nA[0] -> @A + offest 0 * 2\nA[1] -> @A + offset 1 * 2 => 100 + 1 * 2\noffest = base addr * size of data in bucket\n          128 64 32 16 8 4 2 1\n00000000   0  1   1  1 1 0 1 1\n```\n```\n[\n0x100: 00000000",
    "detail": "d4.copy_of_arraysandstrings",
    "documentation": {}
  },
  {
    "label": "offest",
    "kind": 5,
    "importPath": "d4.copy_of_arraysandstrings",
    "description": "d4.copy_of_arraysandstrings",
    "peekOfCode": "offest = base addr * size of data in bucket\n          128 64 32 16 8 4 2 1\n00000000   0  1   1  1 1 0 1 1\n```\n```\n[\n0x100: 00000000\n0x101: 01111011\n0x102:\n0x103:",
    "detail": "d4.copy_of_arraysandstrings",
    "documentation": {}
  },
  {
    "label": "a",
    "kind": 5,
    "importPath": "d4.copy_of_arraysandstrings",
    "description": "d4.copy_of_arraysandstrings",
    "peekOfCode": "a = [(\"bob\", (1, 2, 3, \"dave\"), [{\"bob\": [1, 2, \"Hello\"]}], (123, 22)), (2.7), \"bob\"]\na[0][1][3][1]\n[] -> () -> 1 2 3\n```\n()\n1\n2\n3\n# **CODE**: 3672\n\"\"\"",
    "detail": "d4.copy_of_arraysandstrings",
    "documentation": {}
  },
  {
    "label": "n",
    "kind": 5,
    "importPath": "d4.copy_of_arraysandstrings",
    "description": "d4.copy_of_arraysandstrings",
    "peekOfCode": "n = 3\nidx = 3 - 1 - 2\n\"\"\"\ndef plus_one(digits):\n    # Your code here\n    n = len(digits)\n    # iterate over the list from right to left\n    for i in range(n - 1, -1, -1):\n      # idx = n - 1 - i\n      idx = i",
    "detail": "d4.copy_of_arraysandstrings",
    "documentation": {}
  },
  {
    "label": "idx",
    "kind": 5,
    "importPath": "d4.copy_of_arraysandstrings",
    "description": "d4.copy_of_arraysandstrings",
    "peekOfCode": "idx = 3 - 1 - 2\n\"\"\"\ndef plus_one(digits):\n    # Your code here\n    n = len(digits)\n    # iterate over the list from right to left\n    for i in range(n - 1, -1, -1):\n      # idx = n - 1 - i\n      idx = i\n      # if the current digit is a 9 then set it to a 0",
    "detail": "d4.copy_of_arraysandstrings",
    "documentation": {}
  },
  {
    "label": "checkPalindrome",
    "kind": 2,
    "importPath": "sprint-prep.research.03_-_checkPalindrome",
    "description": "sprint-prep.research.03_-_checkPalindrome",
    "peekOfCode": "def checkPalindrome(inputString):\n    return inputString == inputString[::-1]",
    "detail": "sprint-prep.research.03_-_checkPalindrome",
    "documentation": {}
  },
  {
    "label": "is_palindrome",
    "kind": 2,
    "importPath": "sprint-prep.research.is_palindrome",
    "description": "sprint-prep.research.is_palindrome",
    "peekOfCode": "def is_palindrome(s):\n    if s[::-1] == s:\n        return True\n    return False\n# Test\nS = raw_input(\"String: \")\nif is_palindrome(S):\n    print(\"Results:\\n   \" + S + \" is a palindrome string.\")\nelse:\n    print(\"Results:\\n   \" + S + \" is not a palindrome string.\")",
    "detail": "sprint-prep.research.is_palindrome",
    "documentation": {}
  },
  {
    "label": "S",
    "kind": 5,
    "importPath": "sprint-prep.research.is_palindrome",
    "description": "sprint-prep.research.is_palindrome",
    "peekOfCode": "S = raw_input(\"String: \")\nif is_palindrome(S):\n    print(\"Results:\\n   \" + S + \" is a palindrome string.\")\nelse:\n    print(\"Results:\\n   \" + S + \" is not a palindrome string.\")\n# add a loop to play many times(maybe infinite)",
    "detail": "sprint-prep.research.is_palindrome",
    "documentation": {}
  },
  {
    "label": "AngryBird",
    "kind": 6,
    "importPath": "sprint-prep.research.notes",
    "description": "sprint-prep.research.notes",
    "peekOfCode": "class AngryBird:\n    # Slots optimize property access and memory usage and prevent you\n    # from arbitrarily assigning new properties the instance\n    __slots__ = [\"_x\", \"_y\"]\n    # Constructor\n    def __init__(self, x=0, y=0):\n        # Doc String\n        \"\"\"\n        Construct a new AngryBird by setting it's position to (0, 0)\n        \"\"\"",
    "detail": "sprint-prep.research.notes",
    "documentation": {}
  },
  {
    "label": "say_hi",
    "kind": 2,
    "importPath": "sprint-prep.research.notes",
    "description": "sprint-prep.research.notes",
    "peekOfCode": "def say_hi(name):\n    \"\"\"<---- Multi-Line Comments and Docstrings\n    This is where you put your content for help() to inform the user\n    about what your function does and how to use it\n    \"\"\"\n    print(f\"Hello {name}!\")\nprint(say_hi(\"Bryan\"))  # Should get the print inside the function, then None\n# Boolean Values\n# Work the same as in JS, except they are title case: True and False\na = True",
    "detail": "sprint-prep.research.notes",
    "documentation": {}
  },
  {
    "label": "printCopyright",
    "kind": 2,
    "importPath": "sprint-prep.research.notes",
    "description": "sprint-prep.research.notes",
    "peekOfCode": "def printCopyright():\n    print(\"Copyright 2021, Bgoonz\")\n# Lambdas are one liners! (Should be at least, you can use parenthesis to disobey)\ndef avg(num1, num2):\n    return print(num1 + num2)\navg(1, 2)\n# Calling it with keyword arguments, order does not matter\navg(num2=20, num1=1252)\nprintCopyright()\n# We can give parameters default arguments like JS",
    "detail": "sprint-prep.research.notes",
    "documentation": {}
  },
  {
    "label": "avg",
    "kind": 2,
    "importPath": "sprint-prep.research.notes",
    "description": "sprint-prep.research.notes",
    "peekOfCode": "def avg(num1, num2):\n    return print(num1 + num2)\navg(1, 2)\n# Calling it with keyword arguments, order does not matter\navg(num2=20, num1=1252)\nprintCopyright()\n# We can give parameters default arguments like JS\ndef greeting(name, saying=\"Hello\"):\n    print(saying, name)\ngreeting(\"Mike\")  # Hello Mike",
    "detail": "sprint-prep.research.notes",
    "documentation": {}
  },
  {
    "label": "greeting",
    "kind": 2,
    "importPath": "sprint-prep.research.notes",
    "description": "sprint-prep.research.notes",
    "peekOfCode": "def greeting(name, saying=\"Hello\"):\n    print(saying, name)\ngreeting(\"Mike\")  # Hello Mike\ngreeting(\"Bryan\", saying=\"Hello there...\")\n# A common gotcha is using a mutable object for a default parameter\n# All invocations of the function reference the same mutable object\ndef append_item(item_name, item_list=[]):  # Will it obey and give us a new list?\n    item_list.append(item_name)\n    return item_list\n# Uses same item list unless otherwise stated which is counterintuitive",
    "detail": "sprint-prep.research.notes",
    "documentation": {}
  },
  {
    "label": "append_item",
    "kind": 2,
    "importPath": "sprint-prep.research.notes",
    "description": "sprint-prep.research.notes",
    "peekOfCode": "def append_item(item_name, item_list=[]):  # Will it obey and give us a new list?\n    item_list.append(item_name)\n    return item_list\n# Uses same item list unless otherwise stated which is counterintuitive\nprint(append_item(\"notebook\"))\nprint(append_item(\"notebook\"))\nprint(append_item(\"notebook\", []))\n# Errors - Unlike JS, if we pass the incorrect amount of arguments to a function,\n#          it will throw an error\n# avg(1)  # TypeError",
    "detail": "sprint-prep.research.notes",
    "documentation": {}
  },
  {
    "label": "add",
    "kind": 2,
    "importPath": "sprint-prep.research.notes",
    "description": "sprint-prep.research.notes",
    "peekOfCode": "def add(a, b, *args):\n    # args is a tuple of the rest of the arguments\n    total = a + b\n    for n in args:\n        total += n\n    return total\nprint(add(1, 2))  # args is None, returns 3\nprint(add(1, 2, 3, 4, 5, 6))  # args is (3, 4, 5, 6), returns 21\n# Variable Length Keyword Arguments\ndef print_names_and_countries(greeting, **kwargs):",
    "detail": "sprint-prep.research.notes",
    "documentation": {}
  },
  {
    "label": "print_names_and_countries",
    "kind": 2,
    "importPath": "sprint-prep.research.notes",
    "description": "sprint-prep.research.notes",
    "peekOfCode": "def print_names_and_countries(greeting, **kwargs):\n    # kwargs is a dictionary of the rest of the keyword arguments\n    for k, v in kwargs.items():\n        print(greeting, k, \"from\", v)\nprint_names_and_countries(\n    \"Hey there\", Monica=\"Sweden\", Mike=\"The United States\", Mark=\"China\"\n)\n# We can combine all of these together\ndef example2(arg1, arg2, *args, kw_1=\"cheese\", kw_2=\"horse\", **kwargs):\n    pass",
    "detail": "sprint-prep.research.notes",
    "documentation": {}
  },
  {
    "label": "example2",
    "kind": 2,
    "importPath": "sprint-prep.research.notes",
    "description": "sprint-prep.research.notes",
    "peekOfCode": "def example2(arg1, arg2, *args, kw_1=\"cheese\", kw_2=\"horse\", **kwargs):\n    pass\n# Lists are mutable arrays\nempty_list = []\nroomates = [\"Beau\", \"Delynn\"]\n# List built-in function makes a list too\nspecials = list()\n# We can use 'in' to test if something is in the list, like 'includes' in JS\nprint(1 in [1, 2, 4])  # True\nprint(2 in [1, 3, 5])  # False",
    "detail": "sprint-prep.research.notes",
    "documentation": {}
  },
  {
    "label": "isOdd",
    "kind": 2,
    "importPath": "sprint-prep.research.notes",
    "description": "sprint-prep.research.notes",
    "peekOfCode": "def isOdd(num):\n    return num % 2 == 1\nfiltered = filter(isOdd, [1, 2, 3, 4])\nprint(list(filtered))\nfor num in filtered:\n    print(f\"first way: {num}\")\nprint(\"--\" * 20)\n[print(f\"list comprehension: {i}\")\n for i in [1, 2, 3, 4, 5, 6, 7, 8] if i % 2 == 1]\n# Map",
    "detail": "sprint-prep.research.notes",
    "documentation": {}
  },
  {
    "label": "toUpper",
    "kind": 2,
    "importPath": "sprint-prep.research.notes",
    "description": "sprint-prep.research.notes",
    "peekOfCode": "def toUpper(str):\n    return str.upper()\nupperCased = map(toUpper, [\"a\", \"b\", \"c\", \"d\"])\nprint(list(upperCased))\n# Sorted\nsorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"])\nprint(list(sorted_items))  # Notice uppercase comes before lowercase\n# Using a key function to control the sorting and make it case insensitive\nsorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"], key=str.lower)\nprint(sorted_items)",
    "detail": "sprint-prep.research.notes",
    "documentation": {}
  },
  {
    "label": "print_len",
    "kind": 2,
    "importPath": "sprint-prep.research.notes",
    "description": "sprint-prep.research.notes",
    "peekOfCode": "def print_len(item):\n    return print(len(item))\nprint_len(\"Mike\")\nprint_len([1, 5, 2, 10, 3, 10])\nprint_len({1, 5, 10, 9, 10})  # 4 because there is a duplicate here (10)\nprint_len((1, 4, 10, 9, 20))\n# Max will return the max number in a given scenario\nprint(max(1, 2, 35, 1012, 1))\n# Min\nprint(min(1, 5, 2, 10))",
    "detail": "sprint-prep.research.notes",
    "documentation": {}
  },
  {
    "label": "a",
    "kind": 5,
    "importPath": "sprint-prep.research.notes",
    "description": "sprint-prep.research.notes",
    "peekOfCode": "a = True\nb = False\n# Logical Operators\n# ! = not, || = or, && = and\nprint(True and True)\nprint(True and not True)\nprint(True or True)\n# Truthiness - Everything is True except...\n# False - None, False, '', [], (), set(), range(0)\n# Number Values",
    "detail": "sprint-prep.research.notes",
    "documentation": {}
  },
  {
    "label": "b",
    "kind": 5,
    "importPath": "sprint-prep.research.notes",
    "description": "sprint-prep.research.notes",
    "peekOfCode": "b = False\n# Logical Operators\n# ! = not, || = or, && = and\nprint(True and True)\nprint(True and not True)\nprint(True or True)\n# Truthiness - Everything is True except...\n# False - None, False, '', [], (), set(), range(0)\n# Number Values\n# Integers are numbers without a floating decimal point",
    "detail": "sprint-prep.research.notes",
    "documentation": {}
  },
  {
    "label": "name",
    "kind": 5,
    "importPath": "sprint-prep.research.notes",
    "description": "sprint-prep.research.notes",
    "peekOfCode": "name = \"Bryan\"\nfor i in range(len(name)):\n    print(name[i])  # B, r, y, a, n\n# We can index starting from the end as well, with negatives\noccupation = \"Full Stack Software Engineer\"\nprint(occupation[-3])  # e\n# We can also get ranges in the index with the [start:stop:step] syntax\nprint(occupation[0:4:1])  # step and stop are optional, stop is exclusive\nprint(occupation[::4])  # beginning to end, every 4th letter\nprint(occupation[4:14:2])  # Let's get weird with it!",
    "detail": "sprint-prep.research.notes",
    "documentation": {}
  },
  {
    "label": "occupation",
    "kind": 5,
    "importPath": "sprint-prep.research.notes",
    "description": "sprint-prep.research.notes",
    "peekOfCode": "occupation = \"Full Stack Software Engineer\"\nprint(occupation[-3])  # e\n# We can also get ranges in the index with the [start:stop:step] syntax\nprint(occupation[0:4:1])  # step and stop are optional, stop is exclusive\nprint(occupation[::4])  # beginning to end, every 4th letter\nprint(occupation[4:14:2])  # Let's get weird with it!\n# NOTE: Indexing out of range will give you an IndexError\n# We can also get the index og things with the .index() method, similar to indexOf()\nprint(occupation.index(\"Stack\"))\nprint([\"Mike\", \"Barry\", \"Cole\", \"James\", \"Mark\"].index(\"Cole\"))",
    "detail": "sprint-prep.research.notes",
    "documentation": {}
  },
  {
    "label": "first_name",
    "kind": 5,
    "importPath": "sprint-prep.research.notes",
    "description": "sprint-prep.research.notes",
    "peekOfCode": "first_name = \"Bryan\"\nlast_name = \"Guner\"\nprint(\"Your name is {0} {1}\".format(first_name, last_name))\n# Useful String Methods\nprint(\"Hello\".upper())  # HELLO\nprint(\"Hello\".lower())  # hello\nprint(\"HELLO\".islower())  # False\nprint(\"HELLO\".isupper())  # True\nprint(\"Hello\".startswith(\"he\"))  # False\nprint(\"Hello\".endswith(\"lo\"))  # True",
    "detail": "sprint-prep.research.notes",
    "documentation": {}
  },
  {
    "label": "last_name",
    "kind": 5,
    "importPath": "sprint-prep.research.notes",
    "description": "sprint-prep.research.notes",
    "peekOfCode": "last_name = \"Guner\"\nprint(\"Your name is {0} {1}\".format(first_name, last_name))\n# Useful String Methods\nprint(\"Hello\".upper())  # HELLO\nprint(\"Hello\".lower())  # hello\nprint(\"HELLO\".islower())  # False\nprint(\"HELLO\".isupper())  # True\nprint(\"Hello\".startswith(\"he\"))  # False\nprint(\"Hello\".endswith(\"lo\"))  # True\nprint(\"Hello There\".split())  # [Hello, There]",
    "detail": "sprint-prep.research.notes",
    "documentation": {}
  },
  {
    "label": "a",
    "kind": 5,
    "importPath": "sprint-prep.research.notes",
    "description": "sprint-prep.research.notes",
    "peekOfCode": "a = 3\nb = a\nc = \"heyoo\"\nb = [\"reassignment\", \"is\", \"fine\", \"G!\"]\n# Comparison Operators - Python uses the same equality operators as JS, but no ===\n# < - Less than\n# > - Greater than\n# <= - Less than or Equal\n# >= - Greater than or Equal\n# == - Equal to",
    "detail": "sprint-prep.research.notes",
    "documentation": {}
  },
  {
    "label": "b",
    "kind": 5,
    "importPath": "sprint-prep.research.notes",
    "description": "sprint-prep.research.notes",
    "peekOfCode": "b = a\nc = \"heyoo\"\nb = [\"reassignment\", \"is\", \"fine\", \"G!\"]\n# Comparison Operators - Python uses the same equality operators as JS, but no ===\n# < - Less than\n# > - Greater than\n# <= - Less than or Equal\n# >= - Greater than or Equal\n# == - Equal to\n# != - Not equal to",
    "detail": "sprint-prep.research.notes",
    "documentation": {}
  },
  {
    "label": "c",
    "kind": 5,
    "importPath": "sprint-prep.research.notes",
    "description": "sprint-prep.research.notes",
    "peekOfCode": "c = \"heyoo\"\nb = [\"reassignment\", \"is\", \"fine\", \"G!\"]\n# Comparison Operators - Python uses the same equality operators as JS, but no ===\n# < - Less than\n# > - Greater than\n# <= - Less than or Equal\n# >= - Greater than or Equal\n# == - Equal to\n# != - Not equal to\n# is - Refers to exact same memory location",
    "detail": "sprint-prep.research.notes",
    "documentation": {}
  },
  {
    "label": "b",
    "kind": 5,
    "importPath": "sprint-prep.research.notes",
    "description": "sprint-prep.research.notes",
    "peekOfCode": "b = [\"reassignment\", \"is\", \"fine\", \"G!\"]\n# Comparison Operators - Python uses the same equality operators as JS, but no ===\n# < - Less than\n# > - Greater than\n# <= - Less than or Equal\n# >= - Greater than or Equal\n# == - Equal to\n# != - Not equal to\n# is - Refers to exact same memory location\n# not - !",
    "detail": "sprint-prep.research.notes",
    "documentation": {}
  },
  {
    "label": "lst",
    "kind": 5,
    "importPath": "sprint-prep.research.notes",
    "description": "sprint-prep.research.notes",
    "peekOfCode": "lst = [1, 2, 3, 4]\nfor i in lst:\n    print(i)\n# Looping over a dictionary\nspam = {\"color\": \"red\", \"age\": 42, \"items\": [(1, \"hey\"), (2, \"hooo!\")]}\nfor v in spam.values():\n    print(v)\n# Loop over a list of tuples and destructuring the values\n# Assuming spam.items returns a list of tuples each containing two items (k, v)\nfor k, v in spam.items():",
    "detail": "sprint-prep.research.notes",
    "documentation": {}
  },
  {
    "label": "spam",
    "kind": 5,
    "importPath": "sprint-prep.research.notes",
    "description": "sprint-prep.research.notes",
    "peekOfCode": "spam = {\"color\": \"red\", \"age\": 42, \"items\": [(1, \"hey\"), (2, \"hooo!\")]}\nfor v in spam.values():\n    print(v)\n# Loop over a list of tuples and destructuring the values\n# Assuming spam.items returns a list of tuples each containing two items (k, v)\nfor k, v in spam.items():\n    print(f\"{k}: {v}\")\n# While loops as long as the condition is True\n#  - Exit loop early with break\n#  - Exit iteration early with continue",
    "detail": "sprint-prep.research.notes",
    "documentation": {}
  },
  {
    "label": "spam",
    "kind": 5,
    "importPath": "sprint-prep.research.notes",
    "description": "sprint-prep.research.notes",
    "peekOfCode": "spam = 0\nwhile True:\n    print(\"Sike That's the wrong Numba\")\n    spam += 1\n    if spam < 5:\n        continue\n    break\n# Functions - use def keyword to define a function in Python\ndef printCopyright():\n    print(\"Copyright 2021, Bgoonz\")",
    "detail": "sprint-prep.research.notes",
    "documentation": {}
  },
  {
    "label": "empty_list",
    "kind": 5,
    "importPath": "sprint-prep.research.notes",
    "description": "sprint-prep.research.notes",
    "peekOfCode": "empty_list = []\nroomates = [\"Beau\", \"Delynn\"]\n# List built-in function makes a list too\nspecials = list()\n# We can use 'in' to test if something is in the list, like 'includes' in JS\nprint(1 in [1, 2, 4])  # True\nprint(2 in [1, 3, 5])  # False\n# Dictionaries - Similar to JS POJO's or Map, containing key value pairs\na = {\"one\": 1, \"two\": 2, \"three\": 3}\nb = dict(one=1, two=2, three=3)",
    "detail": "sprint-prep.research.notes",
    "documentation": {}
  },
  {
    "label": "roomates",
    "kind": 5,
    "importPath": "sprint-prep.research.notes",
    "description": "sprint-prep.research.notes",
    "peekOfCode": "roomates = [\"Beau\", \"Delynn\"]\n# List built-in function makes a list too\nspecials = list()\n# We can use 'in' to test if something is in the list, like 'includes' in JS\nprint(1 in [1, 2, 4])  # True\nprint(2 in [1, 3, 5])  # False\n# Dictionaries - Similar to JS POJO's or Map, containing key value pairs\na = {\"one\": 1, \"two\": 2, \"three\": 3}\nb = dict(one=1, two=2, three=3)\n# Can use 'in' on dictionaries too (for keys)",
    "detail": "sprint-prep.research.notes",
    "documentation": {}
  },
  {
    "label": "specials",
    "kind": 5,
    "importPath": "sprint-prep.research.notes",
    "description": "sprint-prep.research.notes",
    "peekOfCode": "specials = list()\n# We can use 'in' to test if something is in the list, like 'includes' in JS\nprint(1 in [1, 2, 4])  # True\nprint(2 in [1, 3, 5])  # False\n# Dictionaries - Similar to JS POJO's or Map, containing key value pairs\na = {\"one\": 1, \"two\": 2, \"three\": 3}\nb = dict(one=1, two=2, three=3)\n# Can use 'in' on dictionaries too (for keys)\nprint(\"one\" in a)  # True\nprint(3 in b)  # False",
    "detail": "sprint-prep.research.notes",
    "documentation": {}
  },
  {
    "label": "a",
    "kind": 5,
    "importPath": "sprint-prep.research.notes",
    "description": "sprint-prep.research.notes",
    "peekOfCode": "a = {\"one\": 1, \"two\": 2, \"three\": 3}\nb = dict(one=1, two=2, three=3)\n# Can use 'in' on dictionaries too (for keys)\nprint(\"one\" in a)  # True\nprint(3 in b)  # False\n# Sets - Just like JS, unordered collection of distinct objects\nbedroom = {\"bed\", \"tv\", \"computer\", \"clothes\", \"playstation 4\"}\n# bedroom = set(\"bed\", \"tv\", \"computer\", \"clothes\", \"playstation 5\")\nschool_bag = set(\n    [\"book\", \"paper\", \"pencil\", \"pencil\", \"book\", \"book\", \"book\", \"eraser\"]",
    "detail": "sprint-prep.research.notes",
    "documentation": {}
  },
  {
    "label": "b",
    "kind": 5,
    "importPath": "sprint-prep.research.notes",
    "description": "sprint-prep.research.notes",
    "peekOfCode": "b = dict(one=1, two=2, three=3)\n# Can use 'in' on dictionaries too (for keys)\nprint(\"one\" in a)  # True\nprint(3 in b)  # False\n# Sets - Just like JS, unordered collection of distinct objects\nbedroom = {\"bed\", \"tv\", \"computer\", \"clothes\", \"playstation 4\"}\n# bedroom = set(\"bed\", \"tv\", \"computer\", \"clothes\", \"playstation 5\")\nschool_bag = set(\n    [\"book\", \"paper\", \"pencil\", \"pencil\", \"book\", \"book\", \"book\", \"eraser\"]\n)",
    "detail": "sprint-prep.research.notes",
    "documentation": {}
  },
  {
    "label": "bedroom",
    "kind": 5,
    "importPath": "sprint-prep.research.notes",
    "description": "sprint-prep.research.notes",
    "peekOfCode": "bedroom = {\"bed\", \"tv\", \"computer\", \"clothes\", \"playstation 4\"}\n# bedroom = set(\"bed\", \"tv\", \"computer\", \"clothes\", \"playstation 5\")\nschool_bag = set(\n    [\"book\", \"paper\", \"pencil\", \"pencil\", \"book\", \"book\", \"book\", \"eraser\"]\n)\nprint(school_bag)\nprint(bedroom)\n# We can use 'in' on sets as wel\nprint(1 in {1, 2, 3})  # True\nprint(4 in {1, 3, 5})  # False",
    "detail": "sprint-prep.research.notes",
    "documentation": {}
  },
  {
    "label": "school_bag",
    "kind": 5,
    "importPath": "sprint-prep.research.notes",
    "description": "sprint-prep.research.notes",
    "peekOfCode": "school_bag = set(\n    [\"book\", \"paper\", \"pencil\", \"pencil\", \"book\", \"book\", \"book\", \"eraser\"]\n)\nprint(school_bag)\nprint(bedroom)\n# We can use 'in' on sets as wel\nprint(1 in {1, 2, 3})  # True\nprint(4 in {1, 3, 5})  # False\n# Tuples are immutable lists of items\ntime_blocks = (\"AM\", \"PM\")",
    "detail": "sprint-prep.research.notes",
    "documentation": {}
  },
  {
    "label": "time_blocks",
    "kind": 5,
    "importPath": "sprint-prep.research.notes",
    "description": "sprint-prep.research.notes",
    "peekOfCode": "time_blocks = (\"AM\", \"PM\")\ncolors = \"red\", \"green\", \"blue\"  # Parenthesis not needed but encouraged\n# The tuple built-in function can be used to convert things to tuples\nprint(tuple(\"abc\"))\nprint(tuple([1, 2, 3]))\n# 'in' may be used on tuples as well\nprint(1 in (1, 2, 3))  # True\nprint(5 in (1, 4, 3))  # False\n# Ranges are immutable lists of numbers, often used with for loops\n#   - start - default: 0, first number in sequence",
    "detail": "sprint-prep.research.notes",
    "documentation": {}
  },
  {
    "label": "colors",
    "kind": 5,
    "importPath": "sprint-prep.research.notes",
    "description": "sprint-prep.research.notes",
    "peekOfCode": "colors = \"red\", \"green\", \"blue\"  # Parenthesis not needed but encouraged\n# The tuple built-in function can be used to convert things to tuples\nprint(tuple(\"abc\"))\nprint(tuple([1, 2, 3]))\n# 'in' may be used on tuples as well\nprint(1 in (1, 2, 3))  # True\nprint(5 in (1, 4, 3))  # False\n# Ranges are immutable lists of numbers, often used with for loops\n#   - start - default: 0, first number in sequence\n#   - stop - required, next number past last number in sequence",
    "detail": "sprint-prep.research.notes",
    "documentation": {}
  },
  {
    "label": "range1",
    "kind": 5,
    "importPath": "sprint-prep.research.notes",
    "description": "sprint-prep.research.notes",
    "peekOfCode": "range1 = range(5)  # [0,1,2,3,4]\nrange2 = range(1, 5)  # [1,2,3,4]\nrange3 = range(0, 25, 5)  # [0,5,10,15,20]\nrange4 = range(0)  # []\nfor i in range1:\n    print(i)\n# Built-in functions:\n# Filter\ndef isOdd(num):\n    return num % 2 == 1",
    "detail": "sprint-prep.research.notes",
    "documentation": {}
  },
  {
    "label": "range2",
    "kind": 5,
    "importPath": "sprint-prep.research.notes",
    "description": "sprint-prep.research.notes",
    "peekOfCode": "range2 = range(1, 5)  # [1,2,3,4]\nrange3 = range(0, 25, 5)  # [0,5,10,15,20]\nrange4 = range(0)  # []\nfor i in range1:\n    print(i)\n# Built-in functions:\n# Filter\ndef isOdd(num):\n    return num % 2 == 1\nfiltered = filter(isOdd, [1, 2, 3, 4])",
    "detail": "sprint-prep.research.notes",
    "documentation": {}
  },
  {
    "label": "range3",
    "kind": 5,
    "importPath": "sprint-prep.research.notes",
    "description": "sprint-prep.research.notes",
    "peekOfCode": "range3 = range(0, 25, 5)  # [0,5,10,15,20]\nrange4 = range(0)  # []\nfor i in range1:\n    print(i)\n# Built-in functions:\n# Filter\ndef isOdd(num):\n    return num % 2 == 1\nfiltered = filter(isOdd, [1, 2, 3, 4])\nprint(list(filtered))",
    "detail": "sprint-prep.research.notes",
    "documentation": {}
  },
  {
    "label": "range4",
    "kind": 5,
    "importPath": "sprint-prep.research.notes",
    "description": "sprint-prep.research.notes",
    "peekOfCode": "range4 = range(0)  # []\nfor i in range1:\n    print(i)\n# Built-in functions:\n# Filter\ndef isOdd(num):\n    return num % 2 == 1\nfiltered = filter(isOdd, [1, 2, 3, 4])\nprint(list(filtered))\nfor num in filtered:",
    "detail": "sprint-prep.research.notes",
    "documentation": {}
  },
  {
    "label": "filtered",
    "kind": 5,
    "importPath": "sprint-prep.research.notes",
    "description": "sprint-prep.research.notes",
    "peekOfCode": "filtered = filter(isOdd, [1, 2, 3, 4])\nprint(list(filtered))\nfor num in filtered:\n    print(f\"first way: {num}\")\nprint(\"--\" * 20)\n[print(f\"list comprehension: {i}\")\n for i in [1, 2, 3, 4, 5, 6, 7, 8] if i % 2 == 1]\n# Map\ndef toUpper(str):\n    return str.upper()",
    "detail": "sprint-prep.research.notes",
    "documentation": {}
  },
  {
    "label": "upperCased",
    "kind": 5,
    "importPath": "sprint-prep.research.notes",
    "description": "sprint-prep.research.notes",
    "peekOfCode": "upperCased = map(toUpper, [\"a\", \"b\", \"c\", \"d\"])\nprint(list(upperCased))\n# Sorted\nsorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"])\nprint(list(sorted_items))  # Notice uppercase comes before lowercase\n# Using a key function to control the sorting and make it case insensitive\nsorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"], key=str.lower)\nprint(sorted_items)\n# You can also reverse the sort\nsorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"],",
    "detail": "sprint-prep.research.notes",
    "documentation": {}
  },
  {
    "label": "sorted_items",
    "kind": 5,
    "importPath": "sprint-prep.research.notes",
    "description": "sprint-prep.research.notes",
    "peekOfCode": "sorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"])\nprint(list(sorted_items))  # Notice uppercase comes before lowercase\n# Using a key function to control the sorting and make it case insensitive\nsorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"], key=str.lower)\nprint(sorted_items)\n# You can also reverse the sort\nsorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"],\n                      key=str.lower, reverse=True)\nprint(sorted_items)\n# Enumerate creates a tuple with an index for what you're enumerating",
    "detail": "sprint-prep.research.notes",
    "documentation": {}
  },
  {
    "label": "sorted_items",
    "kind": 5,
    "importPath": "sprint-prep.research.notes",
    "description": "sprint-prep.research.notes",
    "peekOfCode": "sorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"], key=str.lower)\nprint(sorted_items)\n# You can also reverse the sort\nsorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"],\n                      key=str.lower, reverse=True)\nprint(sorted_items)\n# Enumerate creates a tuple with an index for what you're enumerating\nquarters = [\"First\", \"Second\", \"Third\", \"Fourth\"]\nprint(list(enumerate(quarters)))\nprint(list(enumerate(quarters, start=1)))",
    "detail": "sprint-prep.research.notes",
    "documentation": {}
  },
  {
    "label": "sorted_items",
    "kind": 5,
    "importPath": "sprint-prep.research.notes",
    "description": "sprint-prep.research.notes",
    "peekOfCode": "sorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"],\n                      key=str.lower, reverse=True)\nprint(sorted_items)\n# Enumerate creates a tuple with an index for what you're enumerating\nquarters = [\"First\", \"Second\", \"Third\", \"Fourth\"]\nprint(list(enumerate(quarters)))\nprint(list(enumerate(quarters, start=1)))\n# Zip takes list and combines them as key value pairs, or really however you need\nkeys = (\"Name\", \"Email\")\nvalues = (\"Buster\", \"cheetoh@johhnydepp.com\")",
    "detail": "sprint-prep.research.notes",
    "documentation": {}
  },
  {
    "label": "quarters",
    "kind": 5,
    "importPath": "sprint-prep.research.notes",
    "description": "sprint-prep.research.notes",
    "peekOfCode": "quarters = [\"First\", \"Second\", \"Third\", \"Fourth\"]\nprint(list(enumerate(quarters)))\nprint(list(enumerate(quarters, start=1)))\n# Zip takes list and combines them as key value pairs, or really however you need\nkeys = (\"Name\", \"Email\")\nvalues = (\"Buster\", \"cheetoh@johhnydepp.com\")\nzipped = zip(keys, values)\nprint(list(zipped))\n# You can zip more than 2\nx_coords = [0, 1, 2, 3, 4]",
    "detail": "sprint-prep.research.notes",
    "documentation": {}
  },
  {
    "label": "keys",
    "kind": 5,
    "importPath": "sprint-prep.research.notes",
    "description": "sprint-prep.research.notes",
    "peekOfCode": "keys = (\"Name\", \"Email\")\nvalues = (\"Buster\", \"cheetoh@johhnydepp.com\")\nzipped = zip(keys, values)\nprint(list(zipped))\n# You can zip more than 2\nx_coords = [0, 1, 2, 3, 4]\ny_coords = [4, 6, 10, 9, 10]\nz_coords = [20, 10, 5, 9, 1]\ncoords = zip(x_coords, y_coords, z_coords)\nprint(list(coords))",
    "detail": "sprint-prep.research.notes",
    "documentation": {}
  },
  {
    "label": "values",
    "kind": 5,
    "importPath": "sprint-prep.research.notes",
    "description": "sprint-prep.research.notes",
    "peekOfCode": "values = (\"Buster\", \"cheetoh@johhnydepp.com\")\nzipped = zip(keys, values)\nprint(list(zipped))\n# You can zip more than 2\nx_coords = [0, 1, 2, 3, 4]\ny_coords = [4, 6, 10, 9, 10]\nz_coords = [20, 10, 5, 9, 1]\ncoords = zip(x_coords, y_coords, z_coords)\nprint(list(coords))\n# Len reports the length of strings along with list and any other object data type",
    "detail": "sprint-prep.research.notes",
    "documentation": {}
  },
  {
    "label": "zipped",
    "kind": 5,
    "importPath": "sprint-prep.research.notes",
    "description": "sprint-prep.research.notes",
    "peekOfCode": "zipped = zip(keys, values)\nprint(list(zipped))\n# You can zip more than 2\nx_coords = [0, 1, 2, 3, 4]\ny_coords = [4, 6, 10, 9, 10]\nz_coords = [20, 10, 5, 9, 1]\ncoords = zip(x_coords, y_coords, z_coords)\nprint(list(coords))\n# Len reports the length of strings along with list and any other object data type\n# doing this to save myself some typing",
    "detail": "sprint-prep.research.notes",
    "documentation": {}
  },
  {
    "label": "x_coords",
    "kind": 5,
    "importPath": "sprint-prep.research.notes",
    "description": "sprint-prep.research.notes",
    "peekOfCode": "x_coords = [0, 1, 2, 3, 4]\ny_coords = [4, 6, 10, 9, 10]\nz_coords = [20, 10, 5, 9, 1]\ncoords = zip(x_coords, y_coords, z_coords)\nprint(list(coords))\n# Len reports the length of strings along with list and any other object data type\n# doing this to save myself some typing\ndef print_len(item):\n    return print(len(item))\nprint_len(\"Mike\")",
    "detail": "sprint-prep.research.notes",
    "documentation": {}
  },
  {
    "label": "y_coords",
    "kind": 5,
    "importPath": "sprint-prep.research.notes",
    "description": "sprint-prep.research.notes",
    "peekOfCode": "y_coords = [4, 6, 10, 9, 10]\nz_coords = [20, 10, 5, 9, 1]\ncoords = zip(x_coords, y_coords, z_coords)\nprint(list(coords))\n# Len reports the length of strings along with list and any other object data type\n# doing this to save myself some typing\ndef print_len(item):\n    return print(len(item))\nprint_len(\"Mike\")\nprint_len([1, 5, 2, 10, 3, 10])",
    "detail": "sprint-prep.research.notes",
    "documentation": {}
  },
  {
    "label": "z_coords",
    "kind": 5,
    "importPath": "sprint-prep.research.notes",
    "description": "sprint-prep.research.notes",
    "peekOfCode": "z_coords = [20, 10, 5, 9, 1]\ncoords = zip(x_coords, y_coords, z_coords)\nprint(list(coords))\n# Len reports the length of strings along with list and any other object data type\n# doing this to save myself some typing\ndef print_len(item):\n    return print(len(item))\nprint_len(\"Mike\")\nprint_len([1, 5, 2, 10, 3, 10])\nprint_len({1, 5, 10, 9, 10})  # 4 because there is a duplicate here (10)",
    "detail": "sprint-prep.research.notes",
    "documentation": {}
  },
  {
    "label": "coords",
    "kind": 5,
    "importPath": "sprint-prep.research.notes",
    "description": "sprint-prep.research.notes",
    "peekOfCode": "coords = zip(x_coords, y_coords, z_coords)\nprint(list(coords))\n# Len reports the length of strings along with list and any other object data type\n# doing this to save myself some typing\ndef print_len(item):\n    return print(len(item))\nprint_len(\"Mike\")\nprint_len([1, 5, 2, 10, 3, 10])\nprint_len({1, 5, 10, 9, 10})  # 4 because there is a duplicate here (10)\nprint_len((1, 4, 10, 9, 20))",
    "detail": "sprint-prep.research.notes",
    "documentation": {}
  },
  {
    "label": "user",
    "kind": 5,
    "importPath": "sprint-prep.research.notes",
    "description": "sprint-prep.research.notes",
    "peekOfCode": "user = {\"Name\": \"Bob\", \"Email\": \"bob@bob.com\"}\nprint(dir(user))\n# Importing packages and modules\n#  - Module - A Python code in a file or directory\n#  - Package - A module which is a directory containing an __init__.py file\n#  - Submodule - A module which is contained within a package\n#  - Name - An exported function, class, or variable in a module\n# Unlike JS, modules export ALL names contained within them without any special export key\n# Assuming we have the following package with four submodules\n#  math",
    "detail": "sprint-prep.research.notes",
    "documentation": {}
  },
  {
    "label": "squares",
    "kind": 5,
    "importPath": "sprint-prep.research.notes",
    "description": "sprint-prep.research.notes",
    "peekOfCode": "squares = []\nfor i in range(10):\n    squares.append(i ** 2)\nprint(squares)\n# value = i ** 2\n# loop = for i in range(10)\nsquares = [i ** 2 for i in range(10)]\nprint(list(squares))\nsentence = \"the rocket came back from mars\"\nvowels = [character for character in sentence if character in \"aeiou\"]",
    "detail": "sprint-prep.research.notes",
    "documentation": {}
  },
  {
    "label": "squares",
    "kind": 5,
    "importPath": "sprint-prep.research.notes",
    "description": "sprint-prep.research.notes",
    "peekOfCode": "squares = [i ** 2 for i in range(10)]\nprint(list(squares))\nsentence = \"the rocket came back from mars\"\nvowels = [character for character in sentence if character in \"aeiou\"]\nprint(vowels)\n# You can also use them on dictionaries. We can use the items() method\n# for the dictionary to loop through it getting the keys and values out at once\nperson = {\"name\": \"Corina\", \"age\": 32, \"height\": 1.4}\n# This loops through and capitalizes the first letter of all keys\nnewPerson = {key.title(): value for key, value in person.items()}",
    "detail": "sprint-prep.research.notes",
    "documentation": {}
  },
  {
    "label": "sentence",
    "kind": 5,
    "importPath": "sprint-prep.research.notes",
    "description": "sprint-prep.research.notes",
    "peekOfCode": "sentence = \"the rocket came back from mars\"\nvowels = [character for character in sentence if character in \"aeiou\"]\nprint(vowels)\n# You can also use them on dictionaries. We can use the items() method\n# for the dictionary to loop through it getting the keys and values out at once\nperson = {\"name\": \"Corina\", \"age\": 32, \"height\": 1.4}\n# This loops through and capitalizes the first letter of all keys\nnewPerson = {key.title(): value for key, value in person.items()}\nprint(list(newPerson.items()))",
    "detail": "sprint-prep.research.notes",
    "documentation": {}
  },
  {
    "label": "vowels",
    "kind": 5,
    "importPath": "sprint-prep.research.notes",
    "description": "sprint-prep.research.notes",
    "peekOfCode": "vowels = [character for character in sentence if character in \"aeiou\"]\nprint(vowels)\n# You can also use them on dictionaries. We can use the items() method\n# for the dictionary to loop through it getting the keys and values out at once\nperson = {\"name\": \"Corina\", \"age\": 32, \"height\": 1.4}\n# This loops through and capitalizes the first letter of all keys\nnewPerson = {key.title(): value for key, value in person.items()}\nprint(list(newPerson.items()))",
    "detail": "sprint-prep.research.notes",
    "documentation": {}
  },
  {
    "label": "person",
    "kind": 5,
    "importPath": "sprint-prep.research.notes",
    "description": "sprint-prep.research.notes",
    "peekOfCode": "person = {\"name\": \"Corina\", \"age\": 32, \"height\": 1.4}\n# This loops through and capitalizes the first letter of all keys\nnewPerson = {key.title(): value for key, value in person.items()}\nprint(list(newPerson.items()))",
    "detail": "sprint-prep.research.notes",
    "documentation": {}
  },
  {
    "label": "newPerson",
    "kind": 5,
    "importPath": "sprint-prep.research.notes",
    "description": "sprint-prep.research.notes",
    "peekOfCode": "newPerson = {key.title(): value for key, value in person.items()}\nprint(list(newPerson.items()))",
    "detail": "sprint-prep.research.notes",
    "documentation": {}
  },
  {
    "label": "reverse_sentence",
    "kind": 2,
    "importPath": "sprint-prep.research.reverse_string",
    "description": "sprint-prep.research.reverse_string",
    "peekOfCode": "def reverse_sentence(sentence):\n    arr = [c for c in sentence]  # or just arr = list(sentence)\n    start = 0\n    end = len(arr) - 1\n    while start < end:\n        # reverse the array from the start index to the end index by\n        # swaping each char with the pair from the other part of the array\n        swap(arr, start, end)\n        start += 1\n        end -= 1",
    "detail": "sprint-prep.research.reverse_string",
    "documentation": {}
  },
  {
    "label": "swap",
    "kind": 2,
    "importPath": "sprint-prep.research.reverse_string",
    "description": "sprint-prep.research.reverse_string",
    "peekOfCode": "def swap(arr, i, j):\n    # swapping two elements from a same array\n    arr[i], arr[j] = arr[j], arr[i]\n    \"\"\"same as\n    temp = arr[i]\n    arr[i] = arr[j]\n    arr[j] = temp\n    \"\"\"\n###########\n# Testing #",
    "detail": "sprint-prep.research.reverse_string",
    "documentation": {}
  },
  {
    "label": "csCheckPalindrome",
    "kind": 2,
    "importPath": "sprint-prep.sandbox.check-palindrome",
    "description": "sprint-prep.sandbox.check-palindrome",
    "peekOfCode": "def csCheckPalindrome(input_str):\n    if input_str[::-1] == input_str:\n        return True\n    return False",
    "detail": "sprint-prep.sandbox.check-palindrome",
    "documentation": {}
  },
  {
    "label": "csRemoveDuplicateWords",
    "kind": 2,
    "importPath": "sprint-prep.sandbox.remove-dupes-from-sentence",
    "description": "sprint-prep.sandbox.remove-dupes-from-sentence",
    "peekOfCode": "def csRemoveDuplicateWords(input_str):\n  return ' '.join(dict.fromkeys(input_str.split()))\nprint(csRemoveDuplicateWords(\"alpha bravo bravo golf golf golf delta alpha bravo bravo golf golf golf delta\"))\nprint(csRemoveDuplicateWords(\"my dog is my dog is super smart\") )\nprint(csRemoveDuplicateWords(\"Your tests are broken broken broken broken broken\") )",
    "detail": "sprint-prep.sandbox.remove-dupes-from-sentence",
    "documentation": {}
  },
  {
    "label": "lib",
    "kind": 5,
    "importPath": "sprint-prep.sandbox.remove-dupes-from-sentence",
    "description": "sprint-prep.sandbox.remove-dupes-from-sentence",
    "peekOfCode": "lib = BigO()\ncomplexity = lib.test(csRemoveDuplicateWords, \"random\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"sorted\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"reversed\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"partial\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"Ksorted\")",
    "detail": "sprint-prep.sandbox.remove-dupes-from-sentence",
    "documentation": {}
  },
  {
    "label": "complexity",
    "kind": 5,
    "importPath": "sprint-prep.sandbox.remove-dupes-from-sentence",
    "description": "sprint-prep.sandbox.remove-dupes-from-sentence",
    "peekOfCode": "complexity = lib.test(csRemoveDuplicateWords, \"random\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"sorted\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"reversed\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"partial\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"Ksorted\")",
    "detail": "sprint-prep.sandbox.remove-dupes-from-sentence",
    "documentation": {}
  },
  {
    "label": "complexity",
    "kind": 5,
    "importPath": "sprint-prep.sandbox.remove-dupes-from-sentence",
    "description": "sprint-prep.sandbox.remove-dupes-from-sentence",
    "peekOfCode": "complexity = lib.test(csRemoveDuplicateWords, \"sorted\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"reversed\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"partial\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"Ksorted\")",
    "detail": "sprint-prep.sandbox.remove-dupes-from-sentence",
    "documentation": {}
  },
  {
    "label": "complexity",
    "kind": 5,
    "importPath": "sprint-prep.sandbox.remove-dupes-from-sentence",
    "description": "sprint-prep.sandbox.remove-dupes-from-sentence",
    "peekOfCode": "complexity = lib.test(csRemoveDuplicateWords, \"reversed\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"partial\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"Ksorted\")",
    "detail": "sprint-prep.sandbox.remove-dupes-from-sentence",
    "documentation": {}
  },
  {
    "label": "complexity",
    "kind": 5,
    "importPath": "sprint-prep.sandbox.remove-dupes-from-sentence",
    "description": "sprint-prep.sandbox.remove-dupes-from-sentence",
    "peekOfCode": "complexity = lib.test(csRemoveDuplicateWords, \"partial\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"Ksorted\")",
    "detail": "sprint-prep.sandbox.remove-dupes-from-sentence",
    "documentation": {}
  },
  {
    "label": "complexity",
    "kind": 5,
    "importPath": "sprint-prep.sandbox.remove-dupes-from-sentence",
    "description": "sprint-prep.sandbox.remove-dupes-from-sentence",
    "peekOfCode": "complexity = lib.test(csRemoveDuplicateWords, \"Ksorted\")",
    "detail": "sprint-prep.sandbox.remove-dupes-from-sentence",
    "documentation": {}
  },
  {
    "label": "csReverseString",
    "kind": 2,
    "importPath": "sprint-prep.sandbox.rev-string",
    "description": "sprint-prep.sandbox.rev-string",
    "peekOfCode": "def csReverseString(chars):\n    rev = chars[::-1]\n    print(rev)\n    return rev\n# def csReverseString2(chars):\n#     new_string = ''\n#     index = len(chars)\n#     while index:\n#         index -= 1                    # index = index - 1\n#         new_string += chars[index]  # new_string = new_string + character",
    "detail": "sprint-prep.sandbox.rev-string",
    "documentation": {}
  },
  {
    "label": "csReverseString2",
    "kind": 2,
    "importPath": "sprint-prep.sandbox.rev-string",
    "description": "sprint-prep.sandbox.rev-string",
    "peekOfCode": "def csReverseString2(chars):\n    new_string = ''\n    index = len(chars)\n    while index:\n        index -= 1                    # index = index - 1\n        new_string += chars[index] # new_string = new_string + character\n    return new_string\nprint (csReverseString2(\"helloworld\"))\n# Input:\n# chars:",
    "detail": "sprint-prep.sandbox.rev-string",
    "documentation": {}
  },
  {
    "label": "csRemoveDuplicateWords",
    "kind": 2,
    "importPath": "sprint-prep.sandbox.scrap",
    "description": "sprint-prep.sandbox.scrap",
    "peekOfCode": "def csRemoveDuplicateWords(input_str):\n  return ' '.join(dict.fromkeys(input_str.split()))\nprint(csRemoveDuplicateWords(\"alpha bravo bravo golf golf golf delta alpha bravo bravo golf golf golf delta\"))\nprint(csRemoveDuplicateWords(\"my dog is my dog is super smart\") )\nprint(csRemoveDuplicateWords(\"Your tests are broken broken broken broken broken\") )",
    "detail": "sprint-prep.sandbox.scrap",
    "documentation": {}
  },
  {
    "label": "lib",
    "kind": 5,
    "importPath": "sprint-prep.sandbox.scrap",
    "description": "sprint-prep.sandbox.scrap",
    "peekOfCode": "lib = BigO()\ncomplexity = lib.test(csRemoveDuplicateWords, \"random\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"sorted\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"reversed\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"partial\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"Ksorted\")",
    "detail": "sprint-prep.sandbox.scrap",
    "documentation": {}
  },
  {
    "label": "complexity",
    "kind": 5,
    "importPath": "sprint-prep.sandbox.scrap",
    "description": "sprint-prep.sandbox.scrap",
    "peekOfCode": "complexity = lib.test(csRemoveDuplicateWords, \"random\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"sorted\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"reversed\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"partial\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"Ksorted\")",
    "detail": "sprint-prep.sandbox.scrap",
    "documentation": {}
  },
  {
    "label": "complexity",
    "kind": 5,
    "importPath": "sprint-prep.sandbox.scrap",
    "description": "sprint-prep.sandbox.scrap",
    "peekOfCode": "complexity = lib.test(csRemoveDuplicateWords, \"sorted\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"reversed\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"partial\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"Ksorted\")",
    "detail": "sprint-prep.sandbox.scrap",
    "documentation": {}
  },
  {
    "label": "complexity",
    "kind": 5,
    "importPath": "sprint-prep.sandbox.scrap",
    "description": "sprint-prep.sandbox.scrap",
    "peekOfCode": "complexity = lib.test(csRemoveDuplicateWords, \"reversed\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"partial\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"Ksorted\")",
    "detail": "sprint-prep.sandbox.scrap",
    "documentation": {}
  },
  {
    "label": "complexity",
    "kind": 5,
    "importPath": "sprint-prep.sandbox.scrap",
    "description": "sprint-prep.sandbox.scrap",
    "peekOfCode": "complexity = lib.test(csRemoveDuplicateWords, \"partial\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"Ksorted\")",
    "detail": "sprint-prep.sandbox.scrap",
    "documentation": {}
  },
  {
    "label": "complexity",
    "kind": 5,
    "importPath": "sprint-prep.sandbox.scrap",
    "description": "sprint-prep.sandbox.scrap",
    "peekOfCode": "complexity = lib.test(csRemoveDuplicateWords, \"Ksorted\")",
    "detail": "sprint-prep.sandbox.scrap",
    "documentation": {}
  },
  {
    "label": "csRemoveDuplicateWords",
    "kind": 2,
    "importPath": "sprint-prep.sandbox.scrap2",
    "description": "sprint-prep.sandbox.scrap2",
    "peekOfCode": "def csRemoveDuplicateWords(input_str):\n  return ' '.join(dict.fromkeys(input_str.split()))\nprint(csRemoveDuplicateWords(\"alpha bravo bravo golf golf golf delta alpha bravo bravo golf golf golf delta\"))\nprint(csRemoveDuplicateWords(\"my dog is my dog is super smart\") )\nprint(csRemoveDuplicateWords(\"Your tests are broken broken broken broken broken\") )",
    "detail": "sprint-prep.sandbox.scrap2",
    "documentation": {}
  },
  {
    "label": "csRemoveDuplicateWords",
    "kind": 2,
    "importPath": "sprint-prep.sandbox.scrap3",
    "description": "sprint-prep.sandbox.scrap3",
    "peekOfCode": "def csRemoveDuplicateWords(input_str):\n  return ' '.join(dict.fromkeys(input_str.split()))\nprint(csRemoveDuplicateWords(\"alpha bravo bravo golf golf golf delta alpha bravo bravo golf golf golf delta\"))\nprint(csRemoveDuplicateWords(\"my dog is my dog is super smart\") )\nprint(csRemoveDuplicateWords(\"Your tests are broken broken broken broken broken\") )",
    "detail": "sprint-prep.sandbox.scrap3",
    "documentation": {}
  },
  {
    "label": "lib",
    "kind": 5,
    "importPath": "sprint-prep.sandbox.scrap3",
    "description": "sprint-prep.sandbox.scrap3",
    "peekOfCode": "lib = BigO()\ncomplexity = lib.test(csRemoveDuplicateWords, \"random\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"sorted\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"reversed\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"partial\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"Ksorted\")",
    "detail": "sprint-prep.sandbox.scrap3",
    "documentation": {}
  },
  {
    "label": "complexity",
    "kind": 5,
    "importPath": "sprint-prep.sandbox.scrap3",
    "description": "sprint-prep.sandbox.scrap3",
    "peekOfCode": "complexity = lib.test(csRemoveDuplicateWords, \"random\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"sorted\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"reversed\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"partial\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"Ksorted\")",
    "detail": "sprint-prep.sandbox.scrap3",
    "documentation": {}
  },
  {
    "label": "complexity",
    "kind": 5,
    "importPath": "sprint-prep.sandbox.scrap3",
    "description": "sprint-prep.sandbox.scrap3",
    "peekOfCode": "complexity = lib.test(csRemoveDuplicateWords, \"sorted\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"reversed\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"partial\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"Ksorted\")",
    "detail": "sprint-prep.sandbox.scrap3",
    "documentation": {}
  },
  {
    "label": "complexity",
    "kind": 5,
    "importPath": "sprint-prep.sandbox.scrap3",
    "description": "sprint-prep.sandbox.scrap3",
    "peekOfCode": "complexity = lib.test(csRemoveDuplicateWords, \"reversed\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"partial\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"Ksorted\")",
    "detail": "sprint-prep.sandbox.scrap3",
    "documentation": {}
  },
  {
    "label": "complexity",
    "kind": 5,
    "importPath": "sprint-prep.sandbox.scrap3",
    "description": "sprint-prep.sandbox.scrap3",
    "peekOfCode": "complexity = lib.test(csRemoveDuplicateWords, \"partial\")\ncomplexity = lib.test(csRemoveDuplicateWords, \"Ksorted\")",
    "detail": "sprint-prep.sandbox.scrap3",
    "documentation": {}
  },
  {
    "label": "complexity",
    "kind": 5,
    "importPath": "sprint-prep.sandbox.scrap3",
    "description": "sprint-prep.sandbox.scrap3",
    "peekOfCode": "complexity = lib.test(csRemoveDuplicateWords, \"Ksorted\")",
    "detail": "sprint-prep.sandbox.scrap3",
    "documentation": {}
  },
  {
    "label": "csReverseString",
    "kind": 2,
    "importPath": "sprint-prep.reverse-string",
    "description": "sprint-prep.reverse-string",
    "peekOfCode": "def csReverseString(chars):\n    rev = chars[::-1]\n    print(rev)\n    return rev",
    "detail": "sprint-prep.reverse-string",
    "documentation": {}
  }
]
