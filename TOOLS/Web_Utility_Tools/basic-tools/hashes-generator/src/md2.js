/*
 * js-md5 v0.2.1
 * https://github.com/emn178/js-md2
 *
 * Copyright 2014-2015, emn178@gmail.com
 *
 * Licensed under the MIT license:
 * http://www.opensource.org/licenses/MIT
 */
(function (root, undefined) {
  "use strict";

  var NODE_JS =
    typeof process == "object" && process.versions && process.versions.node;
  if (NODE_JS) {
    root = global;
  }
  var COMMON_JS =
    !root.JS_MD2_TEST && typeof module == "object" && module.exports;
  var AMD = typeof define == "function" && define.amd;
  var HEX_CHARS = "0123456789abcdef".split("");

  var S = [
    0x29, 0x2e, 0x43, 0xc9, 0xa2, 0xd8, 0x7c, 0x01, 0x3d, 0x36, 0x54, 0xa1,
    0xec, 0xf0, 0x06, 0x13, 0x62, 0xa7, 0x05, 0xf3, 0xc0, 0xc7, 0x73, 0x8c,
    0x98, 0x93, 0x2b, 0xd9, 0xbc, 0x4c, 0x82, 0xca, 0x1e, 0x9b, 0x57, 0x3c,
    0xfd, 0xd4, 0xe0, 0x16, 0x67, 0x42, 0x6f, 0x18, 0x8a, 0x17, 0xe5, 0x12,
    0xbe, 0x4e, 0xc4, 0xd6, 0xda, 0x9e, 0xde, 0x49, 0xa0, 0xfb, 0xf5, 0x8e,
    0xbb, 0x2f, 0xee, 0x7a, 0xa9, 0x68, 0x79, 0x91, 0x15, 0xb2, 0x07, 0x3f,
    0x94, 0xc2, 0x10, 0x89, 0x0b, 0x22, 0x5f, 0x21, 0x80, 0x7f, 0x5d, 0x9a,
    0x5a, 0x90, 0x32, 0x27, 0x35, 0x3e, 0xcc, 0xe7, 0xbf, 0xf7, 0x97, 0x03,
    0xff, 0x19, 0x30, 0xb3, 0x48, 0xa5, 0xb5, 0xd1, 0xd7, 0x5e, 0x92, 0x2a,
    0xac, 0x56, 0xaa, 0xc6, 0x4f, 0xb8, 0x38, 0xd2, 0x96, 0xa4, 0x7d, 0xb6,
    0x76, 0xfc, 0x6b, 0xe2, 0x9c, 0x74, 0x04, 0xf1, 0x45, 0x9d, 0x70, 0x59,
    0x64, 0x71, 0x87, 0x20, 0x86, 0x5b, 0xcf, 0x65, 0xe6, 0x2d, 0xa8, 0x02,
    0x1b, 0x60, 0x25, 0xad, 0xae, 0xb0, 0xb9, 0xf6, 0x1c, 0x46, 0x61, 0x69,
    0x34, 0x40, 0x7e, 0x0f, 0x55, 0x47, 0xa3, 0x23, 0xdd, 0x51, 0xaf, 0x3a,
    0xc3, 0x5c, 0xf9, 0xce, 0xba, 0xc5, 0xea, 0x26, 0x2c, 0x53, 0x0d, 0x6e,
    0x85, 0x28, 0x84, 0x09, 0xd3, 0xdf, 0xcd, 0xf4, 0x41, 0x81, 0x4d, 0x52,
    0x6a, 0xdc, 0x37, 0xc8, 0x6c, 0xc1, 0xab, 0xfa, 0x24, 0xe1, 0x7b, 0x08,
    0x0c, 0xbd, 0xb1, 0x4a, 0x78, 0x88, 0x95, 0x8b, 0xe3, 0x63, 0xe8, 0x6d,
    0xe9, 0xcb, 0xd5, 0xfe, 0x3b, 0x00, 0x1d, 0x39, 0xf2, 0xef, 0xb7, 0x0e,
    0x66, 0x58, 0xd0, 0xe4, 0xa6, 0x77, 0x72, 0xf8, 0xeb, 0x75, 0x4b, 0x0a,
    0x31, 0x44, 0x50, 0xb4, 0x8f, 0xed, 0x1f, 0x1a, 0xdb, 0x99, 0x8d, 0x33,
    0x9f, 0x11, 0x83, 0x14,
  ];

  var M = [],
    X = [],
    C = [];

  var md2 = function (message) {
    var code,
      i,
      j,
      k,
      t,
      L = 0,
      loop = 1,
      B,
      index = 0,
      start = 0,
      bytes = 0,
      length = message.length;

    for (i = 0; i < 16; ++i) {
      X[i] = C[i] = 0;
    }

    M[16] = M[17] = M[18] = 0;
    do {
      M[0] = M[16];
      M[1] = M[17];
      M[2] = M[18];
      M[16] =
        M[17] =
        M[18] =
        M[3] =
        M[4] =
        M[5] =
        M[6] =
        M[7] =
        M[8] =
        M[9] =
        M[10] =
        M[11] =
        M[12] =
        M[13] =
        M[14] =
        M[15] =
          0;
      for (i = start; index < length && i < 16; ++index) {
        code = message.charCodeAt(index);
        if (code < 0x80) {
          M[i++] = code;
        } else if (code < 0x800) {
          M[i++] = 0xc0 | (code >> 6);
          M[i++] = 0x80 | (code & 0x3f);
        } else if (code < 0xd800 || code >= 0xe000) {
          M[i++] = 0xe0 | (code >> 12);
          M[i++] = 0x80 | ((code >> 6) & 0x3f);
          M[i++] = 0x80 | (code & 0x3f);
        } else {
          code =
            0x10000 +
            (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));
          M[i++] = 0xf0 | (code >> 18);
          M[i++] = 0x80 | ((code >> 12) & 0x3f);
          M[i++] = 0x80 | ((code >> 6) & 0x3f);
          M[i++] = 0x80 | (code & 0x3f);
        }
      }
      bytes += i - start;
      start = i - 16;

      if (index == length && i < 16) {
        loop = 2;
        t = 16 - (bytes & 15);
        for (; i < 16; ++i) {
          M[i] = t;
        }
      }

      for (i = 0; i < 16; ++i) {
        C[i] ^= S[M[i] ^ L];
        L = C[i];
      }

      for (i = 0; i < loop; ++i) {
        B = i === 0 ? M : C;

        X[16] = B[0];
        X[32] = X[16] ^ X[0];
        X[17] = B[1];
        X[33] = X[17] ^ X[1];
        X[18] = B[2];
        X[34] = X[18] ^ X[2];
        X[19] = B[3];
        X[35] = X[19] ^ X[3];
        X[20] = B[4];
        X[36] = X[20] ^ X[4];
        X[21] = B[5];
        X[37] = X[21] ^ X[5];
        X[22] = B[6];
        X[38] = X[22] ^ X[6];
        X[23] = B[7];
        X[39] = X[23] ^ X[7];
        X[24] = B[8];
        X[40] = X[24] ^ X[8];
        X[25] = B[9];
        X[41] = X[25] ^ X[9];
        X[26] = B[10];
        X[42] = X[26] ^ X[10];
        X[27] = B[11];
        X[43] = X[27] ^ X[11];
        X[28] = B[12];
        X[44] = X[28] ^ X[12];
        X[29] = B[13];
        X[45] = X[29] ^ X[13];
        X[30] = B[14];
        X[46] = X[30] ^ X[14];
        X[31] = B[15];
        X[47] = X[31] ^ X[15];

        t = 0;
        for (j = 0; j < 18; ++j) {
          for (k = 0; k < 48; ++k) {
            X[k] = t = X[k] ^ S[t];
          }
          t = (t + j) & 0xff;
        }
      }
    } while (loop == 1);

    var hex = "";
    for (i = 0; i < 16; ++i) {
      hex += HEX_CHARS[(X[i] >> 4) & 0x0f] + HEX_CHARS[X[i] & 0x0f];
    }
    return hex;
  };

  if (COMMON_JS) {
    module.exports = md2;
  } else {
    if (AMD) {
      define(function () {
        return md2;
      });
    }
    root.md2 = md2;
  }
})(this);
